///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 

Перем ПостроительОтчета Экспорт;
Перем ПостроительОтчетаОтбор;
Перем ПостроительПоГруппировке;
Перем ПостроительОднойСтроки;
Перем ВидимостьПанелиТабЧастей;
Перем КомпоновщикНастроекСКД;

Перем ТекстыУсловногоОформления;
Перем ПараметрыУсловногоОформления;
Перем КэшЗначенийУсловногоОформления;

// Описание закладок
Перем СтруктураЗакладок;
Перем ОтрисовкаЗакладок;
Перем ЗапросДляЗакладок;
Перем мСоставКритерияОтбора;
Перем мТаблицаКритерияОтбора;
Перем мТекущиеДанные;
Перем мТекущийДокументСсылка;
Перем мТекущийДокументМетаданные;
Перем мТекущийДокументДвижения;
Перем мТекущийДокументДвиженияДокумента;
Перем мЦветФона;
Перем мСтруктураГраф;
Перем мВыводитьПодвал;
Перем мТекущаяСтрокаТаблицы;

// Форма с текстом "Подождите. Идет обработка..."
Перем мФормаОбработка;
Перем мРазделительСтрок;

// Хранит имя документа, для которого заполнены пункты меню "Ввод на основании"
// и "Перейти". Позволяет не выполнять их перезаполнение для одного и того же документа.
Перем мИмяДокумента;

// Сожержит флаг наличия в конфигурации универсального отчета "ОтчетПоДвижению"
Перем мЕстьОтчетПоДвижению;

// Сожержит флаг наличия в конфигурации общей формы "ФормаСтруктурыПодчиненности"
Перем мЕстьФормаСтруктурыПодчиненности;
Перем мЕстьТиповойМеханизмПечати;

// Хранит таблицу, предназначенную для быстрого получения списка документов,
// которые вводятся на основании искомого
Перем мВводНаОсновании;

Перем мТекущаяНастройка;
Перем мТекущаяНастройкаТП;

// Проверка версий
Перем IE;
Перем ВыводитьСообщенияПоВерсиям;

// Статические элементы формы
Перем ЭлементыФормыСписокДокументов;
Перем ЭлементыФормыСписокДокументовКолонки;
Перем ЭлементыФормыПанельТабЧастей;
Перем ЭлементыФормыПанельПодвал;
Перем ЭлементыФормыКоманднаяПанельСпискаКнопки;

// Кнопки
Перем КнопкиМеню;
Перем КнопкиДействия;
Перем КнопкаОтборИСортировка;
Перем КнопкаОтборПоТекущемуЗначению;
Перем КнопкаОтключитьОтбор;
Перем КнопкаПодменюТекущийДокумент;
//Перем КнопкиРазвернутьСвернутьСтроки;
//Перем МенюПерейти;
//Перем МенюПерейтиКнопки;
Перем МенюВводПоОснованию;
Перем МенюВводПоОснованиюКнопки;
Перем МенюПровести;
Перем МенюОтменаПроведения;
Перем МенюУстановитьПометкуУдаления;
//Перем ДействияПерейти;
//Перем ДействияПерейтиКнопки;
Перем ДействияВводПоОснованию;
Перем ДействияВводПоОснованиюКнопки;
Перем ДействияПровести;
Перем ДействияОтменаПроведения;
Перем ДействияУстановитьПометкуУдаления;

// Структуры
Перем СтруктураКартинок;
Перем СтруктураПечатныхФорм;
Перем СтруктураДвиженийДокументов;
Перем СтруктураЗапросовДляЗакладок Экспорт;
Перем СтруктураЗапросовДляПодчиненныхДокументов;
Перем СтруктураНастроекКолонокТабличныхПолей;

// Картинки
Перем КартинкаДокумент;
Перем КартинкаРеквизиты;
Перем КартинкаТабличнаяЧасть;

// Используемые типы
Перем ТипФлажок;
Перем ТипЧисло;
Перем ОписаниеТипаБулево;
Перем ОписаниеТипаСтрока;
Перем ОписаниеТипаЧисло;
Перем ОписаниеТипаХранилищеЗначений;

// Для обработки видимых строк
Перем ЗаполнитьСписокСтрок;
Перем СписокВидимыхСтрок;

перем Порядок, Условие, ТекстЗапросаСоединение, всеЗаказы, СписокДоговоровМенеджера, СписокПользователей;
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

///////////////////////////////////////////////////////////////////////////////
// Управление настройками

Функция ВосстановитьНастройки()
	
	Перем СохраненнаяНастройка;
	
	СтруктураНастройки = Новый Структура;
	Попытка
		Выполнить("СтруктураНастройки.Вставить(""Пользователь"", глЗначениеПеременной(""глТекущийПользователь""))");
	Исключение
		СтруктураНастройки.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	КонецПопытки;
	СтруктураНастройки.Вставить("ИмяОбъекта", "Обработка." + Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	
	Результат = ВосстановлениеНастроек(СтруктураНастройки, "ДревовидныйЖурналДокументов_ТаблицаНастроек");
	
	Если Результат <> Неопределено Тогда
			
		мТекущаяНастройка = Результат;
		ВосстановитьНастройкиИзСтруктуры(Результат.СохраненнаяНастройка);
			
	Иначе
		
		мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	
КонецФункции // ВосстановитьНастройки()

Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками)

	Перем СохраненныеКонечныеПланы, СохраненныеСтратегииРасчета, СохраненныеНастройкиПостроителя;
	
	Если ТипЗнч(СтруктураСНастройками) = Тип("Структура") Тогда
		
		Для каждого Настройка из СтруктураСНастройками Цикл
			
			Если Настройка.Ключ = "СохраненноеЗначениеНастройкиПостроителя" Тогда
				
				СохраненноеЗначениеНастройкиПостроителя = Настройка.Значение;
				
			ИначеЕсли Настройка.Ключ = "НастройкаКолонокТабличногоПоля" Тогда
				
				НастройкаКолонокТабличногоПоля = Настройка.Значение;
				
			ИначеЕсли Настройка.Ключ = "НастройкаПериодаЖурнала" Тогда
				
				НастройкаПериодаЖурнала = Настройка.Значение;
				
			ИначеЕсли Настройка.Ключ = "ДоступныеДокументы" Тогда
				
				Если ТипЗНЧ(Настройка.Значение) = Тип("ТаблицаЗначений") Тогда
					
					ДоступныеДокументы.Загрузить(Настройка.Значение);
					
				КонецЕсли;
				
			ИначеЕсли Настройка.Ключ = "ВыводимыеГрафы" Тогда
				
				Если ТипЗНЧ(Настройка.Значение) = Тип("ТаблицаЗначений") Тогда
					
					ВыводимыеГрафы.Загрузить(Настройка.Значение);
					
				КонецЕсли;
				
			ИначеЕсли Настройка.Ключ = "РазворачиватьУровни" Тогда
				
				РазворачиватьУровни = Настройка.Значение
				
			ИначеЕсли Настройка.Ключ = "ТолькоСуществующие" Тогда
				
				ТолькоСуществующие = Настройка.Значение
				
			ИначеЕсли Настройка.Ключ = "ПоказыватьРеквизиты" Тогда
				
				ПоказыватьРеквизиты = Настройка.Значение
				
			ИначеЕсли Настройка.Ключ = "ПоказыватьТабЧасти" Тогда
				
				ПоказыватьТабЧасти = Настройка.Значение
				
			ИначеЕсли Настройка.Ключ = "ПоказыватьДвижения" Тогда
				
				ПоказыватьДвижения = Настройка.Значение
				
			ИначеЕсли Настройка.Ключ = "ОтключитьПроверкуНовыхВерсий" Тогда
				
				ОтключитьПроверкуНовыхВерсий = Настройка.Значение
				
			ИначеЕсли Настройка.Ключ = "ОтображатьДокументыВВидеДерева" Тогда
				
				ОтображатьДокументыВВидеДерева = Настройка.Значение
				
			ИначеЕсли Настройка.Ключ = "ВидСпискаДокументов" Тогда
				
				ВидСпискаДокументов = Настройка.Значение
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнициализироватьНастройкуПериодаЖурнала();
	
	Если Не ОтображатьДокументыВВидеДерева Тогда
		ВидСпискаДокументов = "Список";
	КонецЕсли;
	
	Если ПустаяСтрока(ВидСпискаДокументов) Тогда
		Если ОтображатьДокументыВВидеДерева Тогда
			ВидСпискаДокументов = "ДеревоПоДням";
		Иначе
			ВидСпискаДокументов = "Список";
		КонецЕсли;
	КонецЕсли;
	
	НастройкиПостроителя = ?(ПустаяСтрока(СохраненноеЗначениеНастройкиПостроителя), Неопределено, ЗначениеИзСтрокиВнутр(СохраненноеЗначениеНастройкиПостроителя));
	ИнициализироватьПостроитель(НастройкиПостроителя);
	ОбновитьТаблицуДокументов();
	НастроитьДополнительныеКолонки();
	ОбновитьИтоги();
	НадписьОтбор = мОписаниеОтбора(ПостроительОтчетаОтбор);
	мПрименитьНастройкуКолонокСписка(НастройкаКолонокТабличногоПоля, ЭлементыФормыСписокДокументовКолонки, Истина);
	РазвернутьВсеУровени();
	
	Возврат Истина;

КонецФункции // ВосстановитьНастройкиИзСтруктуры()

Процедура СохранитьНастройки()
	
	Перем СохраненнаяНастройка;
	
	СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
	
	СтруктураНастройки = Новый Структура;
	Попытка
		Выполнить("СтруктураНастройки.Вставить(""Пользователь"", глЗначениеПеременной(""глТекущийПользователь""))");
	Исключение
		СтруктураНастройки.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	КонецПопытки;
	СтруктураНастройки.Вставить("ИмяОбъекта", "Обработка." + Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически", Ложь);
	
	Результат = СохранениеНастроек(СтруктураНастройки, "ДревовидныйЖурналДокументов_ТаблицаНастроек");
	
	Если Результат <> Неопределено Тогда
		мТекущаяНастройка = Результат;
	Иначе
		мТекущаяНастройка = СтруктураНастройки;
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками)
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		СтруктураСНастройками = Новый Структура;
		
	КонецЕсли;
	
	СохраненноеЗначениеНастройкиПостроителя = ЗначениеВСтрокуВнутр(ПостроительОтчета.ПолучитьНастройки(,, Ложь, Ложь,));
	
	СтруктураСНастройками.Вставить("СохраненноеЗначениеНастройкиПостроителя", СохраненноеЗначениеНастройкиПостроителя);
	СтруктураСНастройками.Вставить("НастройкаКолонокТабличногоПоля", мПолучитьНастройкуКолонокСписка(ЭлементыФормыСписокДокументовКолонки));
	СтруктураСНастройками.Вставить("НастройкаПериодаЖурнала", НастройкаПериодаЖурнала);
	СтруктураСНастройками.Вставить("ОтключитьПроверкуНовыхВерсий", ОтключитьПроверкуНовыхВерсий);
	СтруктураСНастройками.Вставить("ДоступныеДокументы", ДоступныеДокументы.Выгрузить());
	СтруктураСНастройками.Вставить("ВыводимыеГрафы", ВыводимыеГрафы.Выгрузить());
	СтруктураСНастройками.Вставить("РазворачиватьУровни", РазворачиватьУровни);
	СтруктураСНастройками.Вставить("ВидСпискаДокументов", ВидСпискаДокументов);
	СтруктураСНастройками.Вставить("ПоказыватьРеквизиты", ПоказыватьРеквизиты);
	СтруктураСНастройками.Вставить("ПоказыватьТабЧасти", ПоказыватьТабЧасти);
	СтруктураСНастройками.Вставить("ПоказыватьДвижения", ПоказыватьДвижения);
	СтруктураСНастройками.Вставить("ТолькоСуществующие", ТолькоСуществующие);
	СтруктураСНастройками.Вставить("ОтображатьДокументыВВидеДерева", ОтображатьДокументыВВидеДерева);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

Функция ВосстановитьНастройкиТП()
	
	Перем СохраненнаяНастройка;
	
	СтруктураНастройки = Новый Структура;
	Попытка
		Выполнить("СтруктураНастройки.Вставить(""Пользователь"", глЗначениеПеременной(""глТекущийПользователь""))");
	Исключение
		СтруктураНастройки.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	КонецПопытки;
	СтруктураНастройки.Вставить("ИмяОбъекта", "Обработка." + Строка(ЭтотОбъект) + ".ТП");
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	
	Результат = ВосстановлениеНастроек(СтруктураНастройки, "ДревовидныйЖурналДокументов_ТаблицаНастроекТП");
	
	Если Результат <> Неопределено Тогда
			
		мТекущаяНастройка = Результат;
		ВосстановитьНастройкиИзСтруктурыТП(Результат.СохраненнаяНастройка);
			
	Иначе
		
		мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	
КонецФункции // ВосстановитьНастройкиТП()

Функция ВосстановитьНастройкиИзСтруктурыТП(СтруктураСНастройками)

	Если ТипЗнч(СтруктураСНастройками) = Тип("Структура") Тогда
		
		Для каждого Настройка из СтруктураСНастройками Цикл
			
			Если Настройка.Ключ = "СтруктураНастроекКолонокТабличныхПолей" Тогда
				
				СтруктураНастроекКолонокТабличныхПолей = Настройка.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ВосстановитьНастройкиИзСтруктурыТП()

Процедура СохранитьНастройкиТП()
	
	Перем СохраненнаяНастройка;
	
	СформироватьСтруктуруДляСохраненияНастроекТП(СохраненнаяНастройка);
	
	СтруктураНастройки = Новый Структура;
	Попытка
		Выполнить("СтруктураНастройки.Вставить(""Пользователь"", глЗначениеПеременной(""глТекущийПользователь""))");
	Исключение
		СтруктураНастройки.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	КонецПопытки;
	СтруктураНастройки.Вставить("ИмяОбъекта", "Обработка." + Строка(ЭтотОбъект) + ".ТП");
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройкаТП = Неопределено, Неопределено, мТекущаяНастройкаТП.НаименованиеНастройки));
	СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически", Ложь);
	
	Результат = СохранениеНастроек(СтруктураНастройки, "ДревовидныйЖурналДокументов_ТаблицаНастроекТП");
	
	Если Результат <> Неопределено Тогда
		мТекущаяНастройкаТП = Результат;
	Иначе
		мТекущаяНастройкаТП = СтруктураНастройки;
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройкиТП()

Процедура СформироватьСтруктуруДляСохраненияНастроекТП(СтруктураСНастройками)
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		СтруктураСНастройками = Новый Структура;
		
	КонецЕсли;
	
	СтруктураСНастройками.Вставить("СтруктураНастроекКолонокТабличныхПолей", СтруктураНастроекКолонокТабличныхПолей);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроекТП()



Процедура УстановитьЗаголовокОкна()
	
	Если мТекущаяНастройка <> Неопределено И мТекущаяНастройка.Свойство("НаименованиеНастройки") И мТекущаяНастройка.НаименованиеНастройки <> Неопределено Тогда
		
		Заголовок = "Журнал документов - Заказ покупателя - Настройка: " + СокрЛП(мТекущаяНастройка.НаименованиеНастройки);
		
	Иначе
		
		Заголовок = "Журнал документов - Заказ покупателя";
		
	КонецЕсли;
	
	ДатаНачала    = НастройкаПериодаЖурнала.ПолучитьДатуНачала();
	ДатаОкончания = НастройкаПериодаЖурнала.ДатаОкончания;
	
	Если ЗначениеЗаполнено(ДатаНачала) или ЗначениеЗаполнено(ДатаОкончания) Тогда
		Заголовок = Заголовок + ": " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy; ДП=...") + " - " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy; ДП=...");
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокОкна()

// Устанавливает настройки колонок списка по сохраненным значениям из таблицы.
//
// Параметры:
//  СтруктураНастроек - Структура - структура применяемых настроек.
//  КлючЗначения      - Строка - ключ применяемой настройки.
//  Колонки           - (Колонки) - настраиваемые колонки списка.
//
Процедура мПрименитьНастройкуКолонокСписка(ТаблицаНастроек, Колонки, СкрытьКолонки = Ложь)

	Если ТаблицаНастроек = Неопределено или ТипЗнч(ТаблицаНастроек) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если СкрытьКолонки и ТаблицаНастроек.Колонки.Найти("ИмяКолонки") <> Неопределено Тогда
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого Колонка Из Колонки Цикл
		//	Если ТаблицаНастроек.Найти(Колонка.Имя, "ИмяКолонки") = Неопределено Тогда
		//		Колонка.Видимость = Ложь;
		//	КонецЕсли;
		//КонецЦикла;
		
		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого Колонка Из Колонки Цикл Если ТаблицаНастроек.Найти(Колонка.Имя, "ИмяКолонки") = Неопределено Тогда Колонка.Видимость = Ложь; КонецЕсли; КонецЦикла;
	КонецЕсли;
	
	Индекс = 0;
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
	//	Колонка = Колонки.Найти(СтрокаТаблицы.ИмяКолонки);
	//	Если Колонка = Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Смещение = Индекс - Колонки.Индекс(Колонка);
	//	Если Смещение Тогда
	//		Колонки.Сдвинуть(Колонка, Смещение);
	//	КонецЕсли;
	//	Колонка.ИзменениеРазмера = ИзменениеРазмераКолонки.Изменять;
	//	Колонка.Ширина = СтрокаТаблицы.Ширина;
	//	ЗаполнитьЗначенияСвойств(Колонка, СтрокаТаблицы,, "Ширина"); Индекс = Индекс + 1;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого СтрокаТаблицы Из ТаблицаНастроек Цикл Колонка = Колонки.Найти(СтрокаТаблицы.ИмяКолонки); Если Колонка = Неопределено Тогда Продолжить; КонецЕсли; Смещение = Индекс - Колонки.Индекс(Колонка); Если Смещение Тогда Колонки.Сдвинуть(Колонка, Смещение); КонецЕсли; Колонка.ИзменениеРазмера = ИзменениеРазмераКолонки.Изменять; Колонка.Ширина = СтрокаТаблицы.Ширина; ЗаполнитьЗначенияСвойств(Колонка, СтрокаТаблицы,, "Ширина"); Индекс = Индекс + 1; КонецЦикла;
	
КонецПроцедуры // мПрименитьНастройкуКолонокСписка()

Функция ПолучитьНастройкуКолонокТабличногоПоля(Ключ, УстановитьШирину = Ложь)
	
	НастройкаКолонокДляТабличногоПоля = Новый ТаблицаЗначений;
	
	// Разберем ключ
	Если Лев(Ключ, 17) = "РегистрНакопления" Тогда // Набор записей регистра накопления
		ИмяРегистра = Сред(Ключ, Найти(Ключ, ".") + 1);
		ОбъектДанных = РегистрыНакопления[ИмяРегистра];
		ФормаСписка = ОбъектДанных.ПолучитьФормуСписка();
		
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого ЭлементФормы Из ФормаСписка.ЭлементыФормы Цикл
		//	Если ЭлементФормы.Данные = "РегистрНакопленияСписок" Тогда
		//		НастройкаКолонокДляТабличногоПоля = мПолучитьНастройкуКолонокСписка(ЭлементФормы.Колонки, УстановитьШирину);
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла; 

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого ЭлементФормы Из ФормаСписка.ЭлементыФормы Цикл Если ЭлементФормы.Данные = "РегистрНакопленияСписок" Тогда НастройкаКолонокДляТабличногоПоля = мПолучитьНастройкуКолонокСписка(ЭлементФормы.Колонки, УстановитьШирину); Прервать; КонецЕсли; КонецЦикла;
		
	ИначеЕсли Лев(Ключ, 18) = "РегистрБухгалтерии" Тогда // Набор записей регистра бухгалтерии
		ИмяРегистра = Сред(Ключ, Найти(Ключ, ".") + 1);
		ОбъектДанных = РегистрыБухгалтерии[ИмяРегистра];
		ФормаСписка = ОбъектДанных.ПолучитьФормуСписка();
		
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого ЭлементФормы Из ФормаСписка.ЭлементыФормы Цикл
		//	Если ЭлементФормы.Данные = "РегистрБухгалтерииСписок" Тогда
		//		НастройкаКолонокДляТабличногоПоля = мПолучитьНастройкуКолонокСписка(ЭлементФормы.Колонки, УстановитьШирину);
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого ЭлементФормы Из ФормаСписка.ЭлементыФормы Цикл Если ЭлементФормы.Данные = "РегистрБухгалтерииСписок" Тогда НастройкаКолонокДляТабличногоПоля = мПолучитьНастройкуКолонокСписка(ЭлементФормы.Колонки, УстановитьШирину); Прервать; КонецЕсли; КонецЦикла;
		
	ИначеЕсли Лев(Ключ, 15) = "РегистрСведений" Тогда // Набор записей регистра сведений
		ИмяРегистра = Сред(Ключ, Найти(Ключ, ".") + 1);
		ОбъектДанных = РегистрыСведений[ИмяРегистра];
		ФормаСписка = ОбъектДанных.ПолучитьФормуСписка();
		
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого ЭлементФормы Из ФормаСписка.ЭлементыФормы Цикл
		//	Если ЭлементФормы.Данные = "РегистрСведенийСписок" Тогда
		//		НастройкаКолонокДляТабличногоПоля = мПолучитьНастройкуКолонокСписка(ЭлементФормы.Колонки, УстановитьШирину);
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого ЭлементФормы Из ФормаСписка.ЭлементыФормы Цикл Если ЭлементФормы.Данные = "РегистрСведенийСписок" Тогда НастройкаКолонокДляТабличногоПоля = мПолучитьНастройкуКолонокСписка(ЭлементФормы.Колонки, УстановитьШирину); Прервать; КонецЕсли; КонецЦикла;
		
	ИначеЕсли Лев(Ключ, 14) = "РегистрРасчета" Тогда // Набор записей регистра расчетов
		ИмяРегистра = Сред(Ключ, Найти(Ключ, ".") + 1);
		ОбъектДанных = РегистрыРасчета[ИмяРегистра];
		ФормаСписка = ОбъектДанных.ПолучитьФормуСписка();
		
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого ЭлементФормы Из ФормаСписка.ЭлементыФормы Цикл
		//	Если ЭлементФормы.Данные = "РегистрРасчетаСписок" Тогда НастройкаКолонокДляТабличногоПоля = мПолучитьНастройкуКолонокСписка(ЭлементФормы.Колонки, УстановитьШирину);
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого ЭлементФормы Из ФормаСписка.ЭлементыФормы Цикл Если ЭлементФормы.Данные = "РегистрРасчетаСписок" Тогда НастройкаКолонокДляТабличногоПоля = мПолучитьНастройкуКолонокСписка(ЭлементФормы.Колонки, УстановитьШирину); Прервать; КонецЕсли; КонецЦикла;
		
	КонецЕсли;
	
	Возврат НастройкаКолонокДляТабличногоПоля;
	
КонецФункции
 

Процедура СоздатьНовыйДокумент()
	Перем МетаданныеДокумента;
	
	СписокЗначений = Новый СписокЗначений;
	Для каждого Документ Из ДоступныеДокументы Цикл
		
		СтруктураМетаданныеДокументы.Свойство(Документ.ИмяДокумента, МетаданныеДокумента);
		Если МетаданныеДокумента = Неопределено Тогда Продолжить; КонецЕсли;
		СписокЗначений.Добавить(Документ.ИмяДокумента, МетаданныеДокумента.Представление, ,БиблиотекаКартинок.ДокументОбъект);
		
	КонецЦикла;
	
	Если СписокЗначений.Количество() = 1 Тогда
		ТипДокумента = СписокЗначений[0];
	Иначе
		ТекущийДокумент = ?(ЭлементыФормыСписокДокументов.ТекущиеДанные = Неопределено или ЭлементыФормыСписокДокументов.ТекущиеДанные.Ссылка = Null, Неопределено, СписокЗначений.НайтиПоЗначению(Метаданные.НайтиПоТипу(ТипЗнч(ЭлементыФормыСписокДокументов.ТекущиеДанные.Ссылка)).Имя));
		ТипДокумента = СписокЗначений.ВыбратьЭлемент("Выбор вида документа", ТекущийДокумент);
	КонецЕсли;
	
	Если ТипДокумента <> Неопределено Тогда
		Форма = Документы[ТипДокумента.Значение].ПолучитьФормуНовогоДокумента(, ЭлементыФормыСписокДокументов);
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры // СоздатьНовыйДокумент()

Процедура ИзменитьДокумент()
	
	ТекущиеДанные = ЭлементыФормыСписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено и ТекущиеДанные.Ссылка <> Null Тогда
		Попытка
			Форма = ТекущиеДанные.Ссылка.ПолучитьФорму(, ЭлементыФормыСписокДокументов);
			Форма.Открыть();
		Исключение
			Информация = ИнформацияОбОшибке();
			Описание = ?(Информация.Причина = Неопределено, Информация.Описание, Информация.Причина.Описание);
			Предупреждение(Описание);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ИзменитьДокумент()

Процедура УстановитьПометкуУдаления()
	
	ТекущиеДанные = ЭлементыФормыСписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено и ТекущиеДанные.Ссылка <> Null Тогда
		ТекДок = ТекущиеДанные.Ссылка;
		НадоОбновлять = Ложь;
		Если ТекДок.ПометкаУдаления Тогда
			Если Вопрос("Снять с объекта пометку на удаление?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Попытка
					ТекДок.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);
					НадоОбновлять = Истина;
				Исключение
					Сообщить(ОписаниеОшибки());
					Предупреждение("Операция не выполнена!");
				КонецПопытки;
			КонецЕсли;
		Иначе
			Если Вопрос("Пометить объект на удаление?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Попытка
					ТекДок.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
					НадоОбновлять = Истина;
				Исключение
					Сообщить(ОписаниеОшибки());
					Предупреждение("Операция не выполнена!");
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьДанныеПоСсылке(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкуУдаления()

Процедура ПолеТЧВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Попытка
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВыбраннаяСтрока[Колонка.Имя]))
			ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ВыбраннаяСтрока[Колонка.Имя]))
			ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ВыбраннаяСтрока[Колонка.Имя]))
			ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(ВыбраннаяСтрока[Колонка.Имя]))
			ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(ВыбраннаяСтрока[Колонка.Имя]))
			Тогда
			ОткрытьЗначение(ВыбраннаяСтрока[Колонка.Имя]);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ПолеТЧВыбор()

// Возвращает настройку сортировок в виде таблицы
//
// Параметры:
//  Отбор - (Порядок) - Порядок, по которому строится таблица
//
// Возвращаемое значение:
//  СтрокаОтборов (Строка) - описание установленных отборов.
//
Функция мОписаниеОтбора(Отбор)

	ОписаниеОтбора = "" + Отбор;
	
	Если ПустаяСтрока(ОписаниеОтбора) Тогда
		Возврат "Отбор не установлен";
	Иначе
		Возврат "Установлен отбор: " + ОписаниеОтбора;
	КонецЕсли;

КонецФункции // мОписаниеОтбора()

// Возвращает настройки колонок списка в виде таблицы.
//
// Параметры:
//  Колонки - (Колонки) - колонки списка, по которым строится таблица
//
// Возвращаемое значение:
//  (ТаблицаЗначений) - таблица с значениями настройк
//
Функция мПолучитьНастройкуКолонокСписка(Колонки, УстановитьШирину = Ложь)

	// Сохранение настроек отборов
	ТаблицаНастроек = Новый ТаблицаЗначений();

	ТаблицаНастроекКолонки = ТаблицаНастроек.Колонки;
	ТаблицаНастроекКолонки.Добавить("ИмяКолонки");
	ТаблицаНастроекКолонки.Добавить("Видимость");
	ТаблицаНастроекКолонки.Добавить("Положение");
	ТаблицаНастроекКолонки.Добавить("ИзменениеРазмера");
	ТаблицаНастроекКолонки.Добавить("Ширина");
	ТаблицаНастроекКолонки.Добавить("ВысотаЯчейки");
	ТаблицаНастроекКолонки.Добавить("АвтоВысотаЯчейки");
	ТаблицаНастроекКолонки.Добавить("ТекстШапки");
	ТаблицаНастроекКолонки.Добавить("Формат");

	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого Колонка Из Колонки Цикл
	//	СтрокаПараметров = ТаблицаНастроек.Добавить();
	//	ЗаполнитьЗначенияСвойств(СтрокаПараметров, Колонка);
	//	СтрокаПараметров.ИмяКолонки = Колонка.Имя;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого Колонка Из Колонки Цикл СтрокаПараметров = ТаблицаНастроек.Добавить(); ЗаполнитьЗначенияСвойств(СтрокаПараметров, Колонка); СтрокаПараметров.ИмяКолонки = Колонка.Имя; КонецЦикла;
	
	Если УстановитьШирину Тогда
		ТаблицаНастроек.ЗаполнитьЗначения(10, "Ширина");
	КонецЕсли;
	
	Возврат ТаблицаНастроек;

КонецФункции // мПолучитьНастройкуКолонокСписка()


Процедура ИнициализироватьПостроитель(НастройкиПостроителя = Неопределено)
	Перем МетаданныеДокумента;
	
	// Восстановление меню
	//Если ОтображатьДокументыВВидеДерева Тогда
		//Если КнопкиРазвернутьСвернутьСтроки.Количество() = 0 Тогда
		//нопкиРазвернутьСвернутьСтроки.Добавить("РазвернутьВидимыеСтроки", ТипКнопкиКоманднойПанели.Действие, "Развернуть видимые строки", Новый Действие("КоманднаяПанельРазвернутьВидимыеСтроки"));
			//КнопкиРазвернутьСвернутьСтроки.Добавить("РазвернутьВсеСтроки", ТипКнопкиКоманднойПанели.Действие, "Развернуть все строки", Новый Действие("КоманднаяПанельРазвернутьВсеСтроки"));
			//КнопкиРазвернутьСвернутьСтроки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			//КнопкиРазвернутьСвернутьСтроки.Добавить("СвернутьВидимыеСтроки", ТипКнопкиКоманднойПанели.Действие, "Свернуть видимые строки", Новый Действие("КоманднаяПанельСвернутьВидимыеСтроки"));
		//нопкиРазвернутьСвернутьСтроки.Добавить("СвернутьВсеСтроки", ТипКнопкиКоманднойПанели.Действие, "Свернуть все строки", Новый Действие("КоманднаяПанельСвернутьВсеСтроки"));
		//нецЕсли;
	//Иначе
	//	КнопкиРазвернутьСвернутьСтроки.Очистить();
	//КонецЕсли;
	
	// Настройка построителя
	Если ПостроительОтчета = Неопределено Тогда
		ПостроительОтчета = Новый ПостроительОтчета;
		ПостроительОтчетаОтбор = ПостроительОтчета.Отбор;
	КонецЕсли;
	
	Если НастройкиПостроителя = Неопределено Тогда
		НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки(,, Ложь, Ложь,);
	КонецЕсли;
	
	//+++
	всеЗаказы = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОтображатьВсеЗаказы");
	
	Если Не ДоступныеДокументы.Количество() Тогда
		
		ПостроительОтчета.Текст ="ВЫБРАТЬ
		|	0 КАК Иконка,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
		|	NULL КАК Номер,
		|	NULL КАК ВидДокумента,
		|	NULL КАК Ссылка,
		|	Ложь КАК ПометкаУдаления,
		|	Ложь КАК Проведен
		|ГДЕ
		|	ЛОЖЬ";
		ПостроительОтчета.ЗаполнитьНастройки();
		 
		ИспользуетсяУсловноеОформление = Ложь;
		
		ДоступныеПоля = ПостроительОтчета.ДоступныеПоля;
		
		ДоступныеПоля.Ссылка.Порядок = Ложь;
		ДоступныеПоля.Иконка.Порядок = Ложь;
		ДоступныеПоля.Дата.Отбор = Истина; //Ложь;
		ДоступныеПоля.ВидДокумента.Представление = "Вид документа";
		ДоступныеПоля.ПометкаУдаления.Представление = "Пометка удаления";
		
		// Представление полей отборов
		//
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого Отбор Из ПостроительОтчетаОтбор Цикл
		//	Для каждого Поле Из ДоступныеПоля Цикл
		//		Если Отбор.ПутьКДанным = Поле.ПутьКДанным Тогда
		//			Отбор.Представление = Поле.Представление;
		//			Прервать;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого Отбор Из ПостроительОтчетаОтбор Цикл 
			Для каждого Поле Из ДоступныеПоля Цикл 
			  Если Отбор.ПутьКДанным = Поле.ПутьКДанным Тогда
				Отбор.Представление = Поле.Представление; 
				Прервать; 
			  КонецЕсли; 
			КонецЦикла; 
	    КонецЦикла;
		
		//+++ Возврат; // далее мы сами определяем документ, поля и отборы
	
	КонецЕсли; //нет документов
	
		        
	// Сброс кэша оптимизации
	СтруктураПечатныхФорм = Неопределено;
	СтруктураЗапросовДляЗакладок = Неопределено;
	СтруктураЗапросовДляПодчиненныхДокументов = Неопределено;
	мСтруктураГраф = Неопределено;
	СтруктураГраф = ПолучитьСтруктуруГраф();
	
	//+++( наши изменения для Заказа Покупателя	=========================================================================================== 04.10.2011
		ДоступныеДокументы.Очистить();
		стр1 = ДоступныеДокументы.Добавить();
		стр1.ИмяДокумента = "ЗаказПокупателя";
		
		 Порядок = "";
	ТекстЗапроса = "";
			
		Порядок = "
		 |УПОРЯДОЧИТЬ ПО 
		 |Дата, Номер
		 |";
		 	
		//---------проверка по Отв.Лицу по договорам----------------
		Если НЕ всеЗаказы тогда
			списокПользователей = новый СписокЗначений;
			Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИспользоватьМеханизмДележкиДляГруппы") 
				и ЗначениеЗаполнено(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ГруппаПользователейДляРаспределенияЗаказов")) тогда 
				Группа = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ГруппаПользователейДляРаспределенияЗаказов");
				для каждого Стр из Группа.ПользователиГруппы цикл
				    списокПользователей.Добавить(стр.Пользователь);
				КонецЦикла;		
			иначе	
				списокПользователей.Добавить(глТекущийПользователь);
			КонецЕсли;
			
			//+6  - заменено
			//ПостроительОтчета.Параметры.Вставить("ОтветственноеЛицо", списокПользователей); // список 1 или группы польз.

			//2) отбор по документам Контрагентов менеджеров
			СписокДоговоровМенеджера = ПолучитьСписокДоговоровМенеджера(списокПользователей); //ПолучитьСписокКонтрагентовМенеджера(списокПользователей);
			ПостроительОтчета.Параметры.Вставить("СписокДоговоровМенеджера", СписокДоговоровМенеджера); // список 1 или группы польз.
        иначе
            СписокКонтрагентовМенеджера = новый СписокЗначений; // пустой для обхода возможных ошибок выполнения
		КонецЕсли;	
	//+++)	
	
	СкрытыеГрафы = Новый Массив;
	ПроведениеРазрешить = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	
	НачалоПериода = НастройкаПериодаЖурнала.ПолучитьДатуНачала();
	КонецПериода = НастройкаПериодаЖурнала.ПолучитьДатуОкончания();
	Если НачалоПериода = '00010101' и КонецПериода = '00010101' Тогда
		Условие = ""
	ИначеЕсли НачалоПериода = '00010101' и КонецПериода <> '00010101' Тогда
		Условие = "
		|ГДЕ 
		|	Ссылка.Дата <= &КонецПериода"
	ИначеЕсли НачалоПериода = '00010101' и КонецПериода <> '00010101' Тогда
		Условие = "
		|ГДЕ 
		|	Ссылка.Дата >= &НачалоПериода"
	Иначе
		Условие = "
		|ГДЕ 
		|	Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода"
	КонецЕсли;
	//+++
	Условие = Условие + ?(всеЗаказы,""," 
	//| И Ссылка.ДоговорКонтрагента.ОтветственноеЛицо В(&ОтветственноеЛицо)"); //!!!	
	| И Ссылка.ДоговорКонтрагента в (&СписокДоговоровМенеджера)"); //+6
	
	ПостроительОтчета.Параметры.Вставить("НачалоПериода", НачалоПериода);
	ПостроительОтчета.Параметры.Вставить("КонецПериода",  КонецДня(КонецПериода));
	
	Если ОтображатьДокументыВВидеДерева Тогда
		СкрытыеГрафы.Добавить("УровеньРазвернут");
		
		Если ВидСпискаДокументов = "ДеревоПодчиненных" Тогда
			// Вид журнала: ДеревоПодчиненных
			
			Для каждого ДоступныйДокумент Из ДоступныеДокументы Цикл
				
				ИмяДокумента = ДоступныйДокумент.ИмяДокумента;
				СтруктураМетаданныеДокументы.Свойство(ИмяДокумента, МетаданныеДокумента);
				Если МетаданныеДокумента = Неопределено Тогда Продолжить; КонецЕсли;
				
				ТекстЗапросаДляДокумента = ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ", мРазделительСтрок + "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") +
				?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
				|	ВЫБОР КОГДА __Документ.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
				|	ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
				|	__Документ.Дата,
				|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер", "NULL") + " КАК Номер,
				|	""" + МетаданныеДокумента.Представление + """  КАК ВидДокумента,
				|	__Документ.Ссылка,
				|	__Документ.ПометкаУдаления," +
				?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
				|	__Документ.Проведен,", "
				|	Ложь КАК Проведен,") + "
				|	Ложь КАК УровеньРазвернут";
						Индекс = 0;
				ТекстЗапросаДляГраф = "";
				ТекстЗапросаСоединение = "";
				
				// Код в комментарии записаный в 1 строку находится ниже этого комментария
				// Для редактирования кода снимите комментарий
				// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
				//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
				//	Индекс = Индекс + 1;
				//	Значение = ВыводимаяГрафа.Значение;
				//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
				//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
				//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
				//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
				//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
				//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
				//		ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
				//	КонецЕсли;
				//КонецЦикла;

				// Код записанный в 1 строку находится в комментарии расположенном выше
				// Для редактирования кода снимите комментарий
				// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
				Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл Индекс = Индекс + 1; 
					Значение = ВыводимаяГрафа.Значение; 
					ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; 
					Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда 
						ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); 
					КонецЕсли; 
				КонецЦикла;

				ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
				|ИЗ Документ." + ИмяДокумента 
				+ " КАК __Документ " + ТекстЗапросаСоединение + "
				|" + Условие + "
				|" + Порядок;
				
				//+++ нам не надо объединять! 
				ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляДокумента;
				
			КонецЦикла;
			            //!!!
			ТекстЗапроса = ТекстЗапроса + "
			|АВТОУПОРЯДОЧИВАНИЕ
			|";
			
		ИначеЕсли ВидСпискаДокументов = "ДеревоПоГрафе" Тогда
			ИтогиПоКолонкам = "";
			Если РазворачиватьУровни Тогда
				// Вид журнала: ДеревоПоГрафе РазворачиватьУровни
				
				Для каждого ДоступныйДокумент Из ДоступныеДокументы Цикл
					
					ИмяДокумента = ДоступныйДокумент.ИмяДокумента;
					СтруктураМетаданныеДокументы.Свойство(ИмяДокумента, МетаданныеДокумента);
					Если МетаданныеДокумента = Неопределено Тогда Продолжить; КонецЕсли;
					
					ТекстЗапросаДляДокумента = ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ", мРазделительСтрок + "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + 
					?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
					|	ВЫБОР КОГДА __Документ.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
					|	ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
					|	ДАТАВРЕМЯ(1900,1,1,0,0,0) КАК __ДатаДляГруппировки,
					|	__Документ.Дата КАК Дата,
					|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер", "NULL") + " КАК Номер,
					|	""" + МетаданныеДокумента.Представление + """  КАК ВидДокумента,
					|	__Документ.Ссылка,
					|	__Документ.ПометкаУдаления," +
					?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
					|	__Документ.Проведен,", "
					|	Ложь КАК Проведен,") + "
					|	Истина КАК УровеньРазвернут";
					
					Индекс = 0;
					ТекстЗапросаДляГраф = "";
					ТекстЗапросаСоединение = "";
					// Код в комментарии записаный в 1 строку находится ниже этого комментария
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
					//	Индекс = Индекс + 1;
					//	Значение = ВыводимаяГрафа.Значение;
					//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
					//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
					//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
					//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
					//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
					//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
					//		ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
					//	Иначе
					//		__Суммовая = Значение.__Суммовая и Сред(Значение[ИмяДокумента], 12) <> "" и Значение[ИмяДокумента + "__ЭтоЧисло"];
					//		Если __Суммовая и Найти(ИтогиПоКолонкам, "Сумма(__Графа" + Индекс + ")") = 0 Тогда
					//			ИтогиПоКолонкам = ИтогиПоКолонкам + "Сумма(__Графа" + Индекс + "), ";
					//		КонецЕсли;
					//	КонецЕсли;
					//КонецЦикла;

					// Код записанный в 1 строку находится в комментарии расположенном выше
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); Иначе __Суммовая = Значение.__Суммовая и Сред(Значение[ИмяДокумента], 12) <> "" и Значение[ИмяДокумента + "__ЭтоЧисло"]; Если __Суммовая и Найти(ИтогиПоКолонкам, "Сумма(__Графа" + Индекс + ")") = 0 Тогда ИтогиПоКолонкам = ИтогиПоКолонкам + "Сумма(__Графа" + Индекс + "), "; КонецЕсли; КонецЕсли; КонецЦикла;
					
					ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
					|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
					|" + Условие + "
					|";
					
					ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляДокумента;
				КонецЦикла;
				
				ТекстЗапроса = ТекстЗапроса + "
				|ИТОГИ " + ИтогиПоКолонкам + " МИНИМУМ(__ДатаДляГруппировки) КАК Дата, МИНИМУМ(УровеньРазвернут) ПО __Графа1
				|АВТОУПОРЯДОЧИВАНИЕ
				|";
				
			Иначе 
				// Вид журнала: ДеревоПоГрафе не РазворачиватьУровни
				
				Для каждого ДоступныйДокумент Из ДоступныеДокументы Цикл
					
					ИмяДокумента = ДоступныйДокумент.ИмяДокумента;
					СтруктураМетаданныеДокументы.Свойство(ИмяДокумента, МетаданныеДокумента);
					Если МетаданныеДокумента = Неопределено Тогда Продолжить; КонецЕсли;
					
					ТекстЗапросаДляДокумента = ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ", мРазделительСтрок + "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + "РАЗЛИЧНЫЕ
					|	0 КАК Иконка,
					|	ДАТАВРЕМЯ(1900,1,1,0,0,0) КАК Дата,
					|	""" + Лев("                                                            ", МетаданныеДокумента.ДлинаНомера) + """ КАК Номер,
					|	""" + ИмяДокумента + "          "" КАК ВидДокумента,
					|	Значение(Документ." + ИмяДокумента + ".ПустаяСсылка) КАК Ссылка,
					|	Ложь КАК ПометкаУдаления,
					|	Ложь КАК Проведен,
					|	Ложь КАК УровеньРазвернут";
					
					Индекс = 0;
					ДобавитьГруппировку = Ложь;
					ТекстЗапросаДляГраф = "";
					//+++ ТекстЗапросаСоединение = "";
					
					// Код в комментарии записаный в 1 строку находится ниже этого комментария
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
					//	Индекс = Индекс + 1;
					//	Значение = ВыводимаяГрафа.Значение;
					//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
					//		Если Индекс = 1 Тогда
					//			ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
					//		Иначе
					//			ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + "NULL КАК " + ВыводимаяГрафа.Ключ;
					//		КонецЕсли;
					//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
					//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
					//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
					//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
					//		ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
					//	Иначе
					//		__Суммовая = Значение.__Суммовая и Сред(Значение[ИмяДокумента], 12) <> "" и Значение[ИмяДокумента + "__ЭтоЧисло"];
					//		ДобавитьГруппировку = ДобавитьГруппировку или __Суммовая;
					//		Если __Суммовая и Найти(ИтогиПоКолонкам, "Сумма(__Графа" + Индекс + ")") = 0 Тогда
					//			ИтогиПоКолонкам = ИтогиПоКолонкам + "Сумма(__Графа" + Индекс + "), ";
					//			ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", Сумма(" + Значение[ИмяДокумента] + ") КАК " + ВыводимаяГрафа.Ключ;
					//		Иначе
					//			ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ?(Индекс = 1, ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК ", ", " + мРазделительСтрок + "NULL КАК ") + ВыводимаяГрафа.Ключ;
					//		КонецЕсли
					//	КонецЕсли;
					//КонецЦикла;

					// Код записанный в 1 строку находится в комментарии расположенном выше
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда Если Индекс = 1 Тогда ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Иначе ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + "NULL КАК " + ВыводимаяГрафа.Ключ; КонецЕсли; ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); Иначе __Суммовая = Значение.__Суммовая и Сред(Значение[ИмяДокумента], 12) <> "" и Значение[ИмяДокумента + "__ЭтоЧисло"]; ДобавитьГруппировку = ДобавитьГруппировку или __Суммовая; Если __Суммовая и Найти(ИтогиПоКолонкам, "Сумма(__Графа" + Индекс + ")") = 0 Тогда ИтогиПоКолонкам = ИтогиПоКолонкам + "Сумма(__Графа" + Индекс + "), "; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", Сумма(" + Значение[ИмяДокумента] + ") КАК " + ВыводимаяГрафа.Ключ; Иначе ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ?(Индекс = 1, ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК ", ", " + мРазделительСтрок + "NULL КАК ") + ВыводимаяГрафа.Ключ; КонецЕсли КонецЕсли; КонецЦикла;
					
					ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
					|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
					|" + Условие + "
					|{ГДЕ " + ?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
					|	ВЫБОР КОГДА __Документ.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
					|	ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
					|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер", "NULL") + " КАК Номер,
					|	""" + МетаданныеДокумента.Представление + """  КАК ВидДокумента,
					|	__Документ.Ссылка,
					|	__Документ.ПометкаУдаления,
					|	__Документ.Проведен";
					
					ТекстЗапросаДляГраф = "";
					// Код в комментарии записаный в 1 строку находится ниже этого комментария
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
					//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + ВыводимаяГрафа.Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
					//КонецЦикла;

					// Код записанный в 1 строку находится в комментарии расположенном выше
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + ВыводимаяГрафа.Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; КонецЦикла;
					
					Если ДобавитьГруппировку Тогда
						ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
						|}
						|СГРУППИРОВАТЬ ПО " + СтруктураГраф.__Графа1[ИмяДокумента];
					Иначе
						ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
						|}";
					КонецЕсли;
					
					ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + "
					|
					|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ
					|	0 КАК Иконка,
					|	ДАТАВРЕМЯ(1900,1,1,0,0,0) КАК Дата,
					|	NULL КАК Номер,
					|	NULL КАК ВидДокумента,
					|	NULL КАК Ссылка,
					|	Ложь КАК ПометкаУдаления,
					|	Ложь КАК Проведен,
					|	Ложь КАК УровеньРазвернут";
					
					Индекс = 0;
					ТекстЗапросаДляГраф = "";
					ТекстЗапросаСоединение = "";
					// Код в комментарии записаный в 1 строку находится ниже этого комментария
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
					//	Индекс = Индекс + 1;
					//	Значение = ВыводимаяГрафа.Значение;
					//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
					//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
					//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
					//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + " ПО ЛОЖЬ";
					//	КонецЕсли;
					//КонецЦикла;

					// Код записанный в 1 строку находится в комментарии расположенном выше
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + " ПО ЛОЖЬ"; КонецЕсли; КонецЦикла;
					
					ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
					|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
					|ГДЕ ЛОЖЬ
					|";
					
					ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляДокумента;
				КонецЦикла;
				
				ТекстЗапроса = ТекстЗапроса + "
				|ИТОГИ " + ИтогиПоКолонкам + " МИНИМУМ(Дата), МИНИМУМ(УровеньРазвернут) ПО __Графа1
				|АВТОУПОРЯДОЧИВАНИЕ
				|";
			КонецЕсли;
			
		ИначеЕсли ВидСпискаДокументов = "ДеревоПоВидуДокумента" Тогда
			ИтогиПоКолонкам = "";
			Если РазворачиватьУровни Тогда
				// Вид журнала: ДеревоПоВидуДокумента РазворачиватьУровни
				
				Для каждого ДоступныйДокумент Из ДоступныеДокументы Цикл
					
					ИмяДокумента = ДоступныйДокумент.ИмяДокумента;
					СтруктураМетаданныеДокументы.Свойство(ИмяДокумента, МетаданныеДокумента);
					Если МетаданныеДокумента = Неопределено Тогда Продолжить; КонецЕсли;
					
					ТекстЗапросаДляДокумента = ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ", мРазделительСтрок + "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") +
					?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
					|	ВЫБОР КОГДА __Документ.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
					|	ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
					|	ДАТАВРЕМЯ(1900,1,1,0,0,0) КАК __ДатаДляГруппировки,
					|	__Документ.Дата КАК Дата,
					|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер", "NULL") + " КАК Номер,
					|	""" + МетаданныеДокумента.Представление + """  КАК ВидДокумента,
					|	__Документ.Ссылка,
					|	__Документ.ПометкаУдаления," +
					?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
					|	__Документ.Проведен,", "
					|	Ложь КАК Проведен,") + "
					|	Истина КАК УровеньРазвернут";
					
					Индекс = 0;
					ТекстЗапросаДляГраф = "";
					ТекстЗапросаСоединение = "";
					// Код в комментарии записаный в 1 строку находится ниже этого комментария
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
					//	Индекс = Индекс + 1;
					//	Значение = ВыводимаяГрафа.Значение;
					//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
					//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
					//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
					//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
					//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
					//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
					//		ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
					//	Иначе
					//		__Суммовая = Значение.__Суммовая и Сред(Значение[ИмяДокумента], 12) <> "" и Значение[ИмяДокумента + "__ЭтоЧисло"];
					//		Если __Суммовая и Найти(ИтогиПоКолонкам, "Сумма(__Графа" + Индекс + ")") = 0 Тогда
					//			ИтогиПоКолонкам = ИтогиПоКолонкам + "Сумма(__Графа" + Индекс + "), ";
					//		КонецЕсли;
					//	КонецЕсли;
					//КонецЦикла;

					// Код записанный в 1 строку находится в комментарии расположенном выше
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); Иначе __Суммовая = Значение.__Суммовая и Сред(Значение[ИмяДокумента], 12) <> "" и Значение[ИмяДокумента + "__ЭтоЧисло"]; Если __Суммовая и Найти(ИтогиПоКолонкам, "Сумма(__Графа" + Индекс + ")") = 0 Тогда ИтогиПоКолонкам = ИтогиПоКолонкам + "Сумма(__Графа" + Индекс + "), "; КонецЕсли; КонецЕсли; КонецЦикла;
					
					ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
					|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
					|" + Условие + "
					|";
					
					ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляДокумента;
				КонецЦикла;
				
				ТекстЗапроса = ТекстЗапроса + "
				|ИТОГИ " + ИтогиПоКолонкам + " МИНИМУМ(__ДатаДляГруппировки) КАК Дата, МИНИМУМ(УровеньРазвернут) ПО ВидДокумента
				|АВТОУПОРЯДОЧИВАНИЕ
				|";
				
			Иначе
				// Вид журнала: ДеревоПоВидуДокумента не РазворачиватьУровни
				
				Для каждого ДоступныйДокумент Из ДоступныеДокументы Цикл
					
					ИмяДокумента = ДоступныйДокумент.ИмяДокумента;
					СтруктураМетаданныеДокументы.Свойство(ИмяДокумента, МетаданныеДокумента);
					Если МетаданныеДокумента = Неопределено Тогда Продолжить; КонецЕсли;
					
					ТекстЗапросаДляДокумента = ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ", мРазделительСтрок + "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + ?(СтруктураГраф.Количество(), "", "ПЕРВЫЕ 1 ") + "
					|	0 КАК Иконка,
					|	ДАТАВРЕМЯ(1900,1,1,0,0,0) КАК Дата,
					|	""" + Лев("                                                            ", МетаданныеДокумента.ДлинаНомера) + """ КАК Номер,
					|	""" + ИмяДокумента + "          "" КАК ВидДокумента,
					|	""" + МетаданныеДокумента.Представление + """  КАК ПредставлениеВидаДокумента,
					|	Значение(Документ." + ИмяДокумента + ".ПустаяСсылка) КАК Ссылка,
					|	Ложь КАК ПометкаУдаления,
					|	Ложь КАК Проведен,
					|	Ложь КАК УровеньРазвернут";
					
					Индекс = 0;
					ДобавитьГруппировку = Ложь;
					ТекстЗапросаДляГраф = "";
					ТекстЗапросаСоединение = "";
					// Код в комментарии записаный в 1 строку находится ниже этого комментария
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
					//	Индекс = Индекс + 1;
					//	Значение = ВыводимаяГрафа.Значение;
					//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
					//		Если Индекс = 1 Тогда
					//			ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
					//		Иначе
					//			ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + "NULL КАК " + ВыводимаяГрафа.Ключ;
					//		КонецЕсли;
					//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
					//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
					//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
					//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
					//		ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
					//	Иначе
					//		__Суммовая = Значение.__Суммовая и Сред(Значение[ИмяДокумента], 12) <> "" и Значение[ИмяДокумента + "__ЭтоЧисло"];
					//		ДобавитьГруппировку = ДобавитьГруппировку или __Суммовая;
					//		Если __Суммовая и Найти(ИтогиПоКолонкам, "Сумма(__Графа" + Индекс + ")") = 0 Тогда
					//			ИтогиПоКолонкам = ИтогиПоКолонкам + "Сумма(__Графа" + Индекс + "), ";
					//			ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", Сумма(" + Значение[ИмяДокумента] + ") КАК " + ВыводимаяГрафа.Ключ;
					//		Иначе
					//			ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + "NULL КАК " + ВыводимаяГрафа.Ключ;
					//		КонецЕсли
					//	КонецЕсли;
					//КонецЦикла;

					// Код записанный в 1 строку находится в комментарии расположенном выше
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда Если Индекс = 1 Тогда ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Иначе ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + "NULL КАК " + ВыводимаяГрафа.Ключ; КонецЕсли; ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); Иначе __Суммовая = Значение.__Суммовая и Сред(Значение[ИмяДокумента], 12) <> "" и Значение[ИмяДокумента + "__ЭтоЧисло"]; ДобавитьГруппировку = ДобавитьГруппировку или __Суммовая; Если __Суммовая и Найти(ИтогиПоКолонкам, "Сумма(__Графа" + Индекс + ")") = 0 Тогда ИтогиПоКолонкам = ИтогиПоКолонкам + "Сумма(__Графа" + Индекс + "), "; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", Сумма(" + Значение[ИмяДокумента] + ") КАК " + ВыводимаяГрафа.Ключ; Иначе ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + "NULL КАК " + ВыводимаяГрафа.Ключ; КонецЕсли КонецЕсли; КонецЦикла;
					
					ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
					|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
					|" + Условие + "
					|{ГДЕ " + ?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
					|	ВЫБОР КОГДА __Документ.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
					|	ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
					|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер", "NULL") + " КАК Номер,
					|	""" + МетаданныеДокумента.Представление + """  КАК ВидДокумента,
					|	__Документ.Ссылка,
					|	__Документ.ПометкаУдаления,
					|	__Документ.Проведен";
					
					ТекстЗапросаДляГраф = "";
					// Код в комментарии записаный в 1 строку находится ниже этого комментария
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
					//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + ВыводимаяГрафа.Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
					//КонецЦикла;

					// Код записанный в 1 строку находится в комментарии расположенном выше
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + ВыводимаяГрафа.Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; КонецЦикла;
					
					ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
					|}
					|
					|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ
					|	0 КАК Иконка,
					|	ДАТАВРЕМЯ(1900,1,1,0,0,0) КАК Дата,
					|	NULL КАК Номер,
					|	NULL КАК ВидДокумента,
					|	NULL КАК ПредставлениеВидаДокумента,
					|	NULL КАК Ссылка,
					|	Ложь КАК ПометкаУдаления,
					|	Ложь КАК Проведен,
					|	Ложь КАК УровеньРазвернут";
					
					Индекс = 0;
					ТекстЗапросаДляГраф = "";
					ТекстЗапросаСоединение = "";
					// Код в комментарии записаный в 1 строку находится ниже этого комментария
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
					//	Индекс = Индекс + 1;
					//	Значение = ВыводимаяГрафа.Значение;
					//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
					//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
					//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
					//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + " ПО ЛОЖЬ";
					//	КонецЕсли;
					//КонецЦикла;

					// Код записанный в 1 строку находится в комментарии расположенном выше
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + " ПО ЛОЖЬ"; КонецЕсли; КонецЦикла;
					
					ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
					|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
					|ГДЕ ЛОЖЬ
					|";
					
					ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляДокумента;
				КонецЦикла;
				
				ТекстЗапроса = ТекстЗапроса + "
				|ИТОГИ " + ИтогиПоКолонкам + " МИНИМУМ(Дата), МИНИМУМ(УровеньРазвернут), МИНИМУМ(ПредставлениеВидаДокумента) КАК ВидДокумента ПО ВидДокумента
				|АВТОУПОРЯДОЧИВАНИЕ
				|";
			КонецЕсли;
			
		Иначе
			Если ВидСпискаДокументов = "ДеревоПоМесяцам" Тогда
				СтрокаДляДаты = "МЕСЯЦ"
			Иначе // ДеревоПоДням
				СтрокаДляДаты = "ДЕНЬ"
			КонецЕсли;
			
			ИтогиПоКолонкам = "";
			Если РазворачиватьУровни Тогда
				// Вид журнала: ДеревоПоМесяцам ДеревоПоДням РазворачиватьУровни
				
				СкрытыеГрафы.Добавить("__ДатаДляГруппировки");
				
				Для каждого ДоступныйДокумент Из ДоступныеДокументы Цикл
					
					ИмяДокумента = ДоступныйДокумент.ИмяДокумента;
					СтруктураМетаданныеДокументы.Свойство(ИмяДокумента, МетаданныеДокумента);
					Если МетаданныеДокумента = Неопределено Тогда Продолжить; КонецЕсли;
					
					ТекстЗапросаДляДокумента = ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ", мРазделительСтрок + "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") +
					?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
					|	ВЫБОР КОГДА __Документ.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
					|	ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
					|	НАЧАЛОПЕРИОДА(__Документ.Дата, " + СтрокаДляДаты + ") КАК __ДатаДляГруппировки,
					|	__Документ.Дата КАК Дата,
					|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер", "NULL") + " КАК Номер,
					|	""" + МетаданныеДокумента.Представление + """  КАК ВидДокумента,
					|	__Документ.Ссылка,
					|	__Документ.ПометкаУдаления," +
					?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
					|	__Документ.Проведен,", "
					|	Ложь КАК Проведен,") + "
					|	Истина КАК УровеньРазвернут";
					
					Индекс = 0;
					ТекстЗапросаДляГраф = "";
					ТекстЗапросаСоединение = "";
					// Код в комментарии записаный в 1 строку находится ниже этого комментария
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
					//	Индекс = Индекс + 1;
					//	Значение = ВыводимаяГрафа.Значение;
					//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
					//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
					//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
					//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
					//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
					//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
					//		ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
					//	Иначе
					//		__Суммовая = Значение.__Суммовая и Сред(Значение[ИмяДокумента], 12) <> "" и Значение[ИмяДокумента + "__ЭтоЧисло"];
					//		Если __Суммовая и Найти(ИтогиПоКолонкам, "Сумма(__Графа" + Индекс + ")") = 0 Тогда
					//			ИтогиПоКолонкам = ИтогиПоКолонкам + "Сумма(__Графа" + Индекс + "), ";
					//		КонецЕсли;
					//	КонецЕсли;
					//КонецЦикла;

					// Код записанный в 1 строку находится в комментарии расположенном выше
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); Иначе __Суммовая = Значение.__Суммовая и Сред(Значение[ИмяДокумента], 12) <> "" и Значение[ИмяДокумента + "__ЭтоЧисло"]; Если __Суммовая и Найти(ИтогиПоКолонкам, "Сумма(__Графа" + Индекс + ")") = 0 Тогда ИтогиПоКолонкам = ИтогиПоКолонкам + "Сумма(__Графа" + Индекс + "), "; КонецЕсли; КонецЕсли; КонецЦикла;
					
					ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
					|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
					|" + Условие + "
					|";
					
					ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляДокумента;
				КонецЦикла;
				
				ТекстЗапроса = ТекстЗапроса + "
				|ИТОГИ " + ИтогиПоКолонкам + " МИНИМУМ(УровеньРазвернут), __ДатаДляГруппировки КАК Дата ПО __ДатаДляГруппировки
				|АВТОУПОРЯДОЧИВАНИЕ
				|";
			Иначе
				// Вид журнала: ДеревоПоМесяцам ДеревоПоДням не РазворачиватьУровни
				
				Для каждого ДоступныйДокумент Из ДоступныеДокументы Цикл
					
					ИмяДокумента = ДоступныйДокумент.ИмяДокумента;
					СтруктураМетаданныеДокументы.Свойство(ИмяДокумента, МетаданныеДокумента);
					Если МетаданныеДокумента = Неопределено Тогда Продолжить; КонецЕсли;
					
					ТекстЗапросаДляДокумента = ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ", мРазделительСтрок + "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + "РАЗЛИЧНЫЕ
					|	0 КАК Иконка,
					|	НАЧАЛОПЕРИОДА(__Документ.Дата, " + СтрокаДляДаты + ") КАК Дата,
					|	""" + Лев("                                                            ", МетаданныеДокумента.ДлинаНомера) + """ КАК Номер,
					|	""" + ИмяДокумента + "          "" КАК ВидДокумента,
					|	Значение(Документ." + ИмяДокумента + ".ПустаяСсылка) КАК Ссылка,
					|	Ложь КАК ПометкаУдаления,
					|	Ложь КАК Проведен,
					|	Ложь КАК УровеньРазвернут";
					
					Индекс = 0;
					ДобавитьГруппировку = Ложь;
					ТекстЗапросаДляГраф = "";
					ТекстЗапросаСоединение = "";
		
					// Код в комментарии записаный в 1 строку находится ниже этого комментария
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
					//	Индекс = Индекс + 1;
					//	Значение = ВыводимаяГрафа.Значение;
					//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
					//		Если Индекс = 1 Тогда
					//			ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
					//		Иначе
					//			ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + "NULL КАК " + ВыводимаяГрафа.Ключ;
					//		КонецЕсли;
					//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
					//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
					//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
					//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
					//		ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
					//	Иначе
					//		__Суммовая = Значение.__Суммовая и Сред(Значение[ИмяДокумента], 12) <> "" и Значение[ИмяДокумента + "__ЭтоЧисло"];
					//		ДобавитьГруппировку = ДобавитьГруппировку или __Суммовая;
					//		Если __Суммовая и Найти(ИтогиПоКолонкам, "Сумма(__Графа" + Индекс + ")") = 0 Тогда
					//			ИтогиПоКолонкам = ИтогиПоКолонкам + "Сумма(__Графа" + Индекс + "), ";
					//			ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", Сумма(" + Значение[ИмяДокумента] + ") КАК " + ВыводимаяГрафа.Ключ;
					//		Иначе
					//			ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + "NULL КАК " + ВыводимаяГрафа.Ключ;
					//		КонецЕсли
					//	КонецЕсли;
					//КонецЦикла;

					// Код записанный в 1 строку находится в комментарии расположенном выше
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда Если Индекс = 1 Тогда ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Иначе ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + "NULL КАК " + ВыводимаяГрафа.Ключ; КонецЕсли; ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); Иначе __Суммовая = Значение.__Суммовая и Сред(Значение[ИмяДокумента], 12) <> "" и Значение[ИмяДокумента + "__ЭтоЧисло"]; ДобавитьГруппировку = ДобавитьГруппировку или __Суммовая; Если __Суммовая и Найти(ИтогиПоКолонкам, "Сумма(__Графа" + Индекс + ")") = 0 Тогда ИтогиПоКолонкам = ИтогиПоКолонкам + "Сумма(__Графа" + Индекс + "), "; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", Сумма(" + Значение[ИмяДокумента] + ") КАК " + ВыводимаяГрафа.Ключ; Иначе ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + "NULL КАК " + ВыводимаяГрафа.Ключ; КонецЕсли КонецЕсли; КонецЦикла;
					
					ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
					|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
					|" + Условие + "
					|{ГДЕ " + ?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
					|	ВЫБОР КОГДА __Документ.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
					|	ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
					|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер", "NULL") + " КАК Номер,
					|	""" + МетаданныеДокумента.Представление + """  КАК ВидДокумента,
					|	__Документ.Ссылка,
					|	__Документ.ПометкаУдаления,
					|	__Документ.Проведен";
					
					ТекстЗапросаДляГраф = "";
					// Код в комментарии записаный в 1 строку находится ниже этого комментария
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
					//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + ВыводимаяГрафа.Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
					//КонецЦикла;

					// Код записанный в 1 строку находится в комментарии расположенном выше
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + ВыводимаяГрафа.Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; КонецЦикла;
					
					Если ДобавитьГруппировку Тогда
						ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
						|}
						|СГРУППИРОВАТЬ ПО НАЧАЛОПЕРИОДА(__Документ.Дата, " + СтрокаДляДаты + ")"
					Иначе
						ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
						|}";
					КонецЕсли;
					
					ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + "
					|
					|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ
					|	0 КАК Иконка,
					|	ДАТАВРЕМЯ(1900,1,1,0,0,0) КАК Дата,
					|	NULL КАК Номер,
					|	NULL КАК ВидДокумента,
					|	NULL КАК Ссылка,
					|	Ложь КАК ПометкаУдаления,
					|	Ложь КАК Проведен,
					|	Ложь КАК УровеньРазвернут";
					
					Индекс = 0;
					ТекстЗапросаДляГраф = "";
					ТекстЗапросаСоединение = "";
					// Код в комментарии записаный в 1 строку находится ниже этого комментария
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
					//	Индекс = Индекс + 1;
					//	Значение = ВыводимаяГрафа.Значение;
					//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
					//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
					//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
					//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + " ПО ЛОЖЬ";
					//	КонецЕсли;
					//КонецЦикла;

					// Код записанный в 1 строку находится в комментарии расположенном выше
					// Для редактирования кода снимите комментарий
					// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
					Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + " ПО ЛОЖЬ"; КонецЕсли; КонецЦикла;
					
					ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
					|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
					|ГДЕ ЛОЖЬ
					|";
					
					ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляДокумента;
				КонецЦикла;
				
				ТекстЗапроса = ТекстЗапроса + "
				|ИТОГИ " + ИтогиПоКолонкам + "МИНИМУМ(УровеньРазвернут) ПО Дата
				|АВТОУПОРЯДОЧИВАНИЕ
				|";
			КонецЕсли;
		КонецЕсли;
		
	Иначе //+++ НАШ ВАРИАНТ
		// Вид журнала: Список документов
		
		Для каждого ДоступныйДокумент Из ДоступныеДокументы Цикл
			
			ИмяДокумента = ДоступныйДокумент.ИмяДокумента;
			СтруктураМетаданныеДокументы.Свойство(ИмяДокумента, МетаданныеДокумента);
			Если МетаданныеДокумента = Неопределено Тогда Продолжить; КонецЕсли;
			
			ТекстЗапроса = "";	
		    //+++ было
			//ТекстЗапросаДляДокумента = ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ", "
			//|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") +
			//?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
			//|	ВЫБОР КОГДА __Документ.Ссылка.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
			//|	ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
			//|	__Документ.Дата,
			//|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер", "NULL") + " КАК Номер,
			//|	""" + МетаданныеДокумента.Представление + """  КАК ВидДокумента,
			//|	__Документ.Ссылка,
			//|	__Документ.ПометкаУдаления," + 
			//?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
			//|	__Документ.Проведен", "
			//|	Ложь КАК Проведен");
			
			
				ТекстЗапросаДляДокумента = ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ", "
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") +
			?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
			|	ВЫБОР КОГДА __Документ.Ссылка.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ссылка.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
			|	ВЫБОР КОГДА __Документ.Ссылка.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
			|	__Документ.Ссылка.Дата как Дата,
			|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Ссылка.Номер", "NULL") + " КАК Номер,
			|	""Заказ покупателя"" КАК ВидДокумента,
			|	__Документ.Ссылка как Ссылка,
			|	__Документ.Ссылка.ПометкаУдаления как ПометкаУдаления," + 
			?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
			|	__Документ.Ссылка.Проведен как Проведен", "
			|	Ложь КАК Проведен");

			//+++ наши поля	
		ТекстЗапросаДляДокумента =ТекстЗапросаДляДокумента +",
		 |	__Документ.ссылка.ДатаОтгрузки КАК ДатаОтгрузки,
		 |	__Документ.ссылка.ДатаОплаты КАК ДатаОплаты,
		 |	__Документ.ссылка.Контрагент КАК Контрагент,
		 |	__Документ.ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		 |	__Документ.ссылка.СуммаДокумента КАК СуммаДокумента,
		 |	__Документ.ссылка.ВалютаДокумента КАК ВалютаДокумента,
		 |	__Документ.ссылка.Подразделение КАК Подразделение,
		 |	__Документ.ссылка.Ответственный КАК Ответственный,
		 |	ЗаказыПокупателейОстатки.КоличествоОстаток КАК КоличествоНеОтгружено,
		 |	ПродажиОбороты.КоличествоОборот КАК КоличествоПродано,
		 |	__Документ.ссылка.Комментарий КАК Комментарий ";

			Индекс = 0;
			ТекстЗапросаДляГраф = "";
			
			//+++ у нас есть свое соединение!		
			//ТекстЗапросаСоединение = "";                             //+++ 01.11.2011 Остатки(&КонецПериода
		 ТекстЗапросаСоединение = "                                   
		 |ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&КонецПериода, "+?(всеЗаказы,"",//"ДоговорКонтрагента.ОтветственноеЛицо В (&ОтветственноеЛицо)")//+6
		 "ДоговорКонтрагента в (&СписокДоговоровМенеджера)")
		 +") КАК ЗаказыПокупателейОстатки
		 |		ПО __Документ.Ссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
		 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&НачалоПериода, , , "+?(всеЗаказы,"", // "ДоговорКонтрагента.ОтветственноеЛицо В (&ОтветственноеЛицо)")//+6
		 "ДоговорКонтрагента в (&СписокДоговоровМенеджера)")
		 +") КАК ПродажиОбороты
		 |		ПО __Документ.Ссылка = ПродажиОбороты.ЗаказПокупателя ";
		 
 			// Код в комментарии записаный в 1 строку находится ниже этого комментария
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
			//	Индекс = Индекс + 1;
			//	Значение = ВыводимаяГрафа.Значение;
			//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
			//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
			//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
			//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
			//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
			//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
			//		ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
			//	КонецЕсли;
			//КонецЦикла;

			// Код записанный в 1 строку находится в комментарии расположенном выше
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл Индекс = Индекс + 1; 
				Значение = ВыводимаяГрафа.Значение; 
				ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; 
				Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда 
					ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс 
					+ мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" 
					+ мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; 
				ПостроительОтчета.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); 
		    	КонецЕсли; 
		   КонецЦикла;
			
			ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
				|ИЗ 
				//Документ." + ИмяДокумента 
				|(ВЫБРАТЬ Ссылка       
				| ИЗ Документ." + ИмяДокумента+ " "+ Условие +" )" 
				
				+ " КАК __Документ " + ТекстЗапросаСоединение + "
			//	|" + Условие + "
				|" + Порядок;
			
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляДокумента;
		КонецЦикла;
		//!!!
		ТекстЗапроса = ТекстЗапроса + "
		|АВТОУПОРЯДОЧИВАНИЕ
		|";
		
	КонецЕсли;

	ПостроительОтчета.Текст = ТекстЗапроса;
	ПостроительОтчета.ЗаполнитьНастройки();
	ДоступныеПоля = ПостроительОтчета.ДоступныеПоля;
	
	// Представление полей запроса
	Счетчик = 0;
	ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя,,, Ложь, Ложь,);
	
	// Добавим по умолчанию отборы если их ещё нет
	Если ПостроительОтчетаОтбор.Найти("ВидДокумента") = Неопределено Тогда
		ПостроительОтчетаОтбор.Добавить("ВидДокумента", "ВидДокумента", "Вид документа");
	КонецЕсли;
	
	Если ПостроительОтчетаОтбор.Найти("Номер") = Неопределено Тогда
		ПостроительОтчетаОтбор.Добавить("Номер", "Номер", "Номер");
	КонецЕсли;
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ВыводимаяГрафа Из ВыводимыеГрафы Цикл
	//	Счетчик = Счетчик + 1;
	//	ДоступноеПоле = ДоступныеПоля["__Графа" + Счетчик];
	//	ДоступноеПоле.Представление = ВыводимаяГрафа.ГрафаЖурнала;
	//	Если ПостроительОтчетаОтбор.Найти(ДоступноеПоле.Имя) = Неопределено Тогда
	//		Попытка
	//			ПостроительОтчетаОтбор.Добавить(ДоступноеПоле.Имя, ДоступноеПоле.Имя, ДоступноеПоле.Представление);
	//		Исключение
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ВыводимаяГрафа Из ВыводимыеГрафы Цикл 
		Счетчик = Счетчик + 1; ДоступноеПоле = ДоступныеПоля["__Графа" + Счетчик]; 
		ДоступноеПоле.Представление = ВыводимаяГрафа.ГрафаЖурнала; 
		Если ПостроительОтчетаОтбор.Найти(ДоступноеПоле.Имя) = Неопределено Тогда 
			Попытка ПостроительОтчетаОтбор.Добавить(ДоступноеПоле.Имя, ДоступноеПоле.Имя, ДоступноеПоле.Представление); 
			Исключение 
			КонецПопытки; 
		КонецЕсли; 
	КонецЦикла;
	
	//Если ДоступныеДокументы.Количество() > 10 Тогда
	//	ДоступныеПоля.Ссылка.Поля.Очистить();
	//КонецЕсли;
	ДоступныеПоля.Ссылка.Порядок = Ложь;
	ДоступныеПоля.Иконка.Порядок = Ложь;
	ДоступныеПоля.Дата.Отбор = Ложь;
	ДоступныеПоля.ВидДокумента.Представление = "Вид документа";
	ДоступныеПоля.ПометкаУдаления.Представление = "Пометка удаления";
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого СкрытаяГрафа Из СкрытыеГрафы Цикл
	//	ТекущаяГрафа = ДоступныеПоля[СкрытаяГрафа];
	//	ТекущаяГрафа.Поле = Ложь; ТекущаяГрафа.Отбор = Ложь;
	//	ТекущаяГрафа.Порядок = Ложь;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого СкрытаяГрафа Из СкрытыеГрафы Цикл 
		ТекущаяГрафа = ДоступныеПоля[СкрытаяГрафа]; 
		ТекущаяГрафа.Поле = Ложь; ТекущаяГрафа.Отбор = Ложь; ТекущаяГрафа.Порядок = Ложь; 
	КонецЦикла; 
	
	Если ПостроительОтчета.Порядок.Количество() = 0 Тогда
		// По умолчанию считаем, что документы должны быть упорядочены по дате
		Если ВидСпискаДокументов = "ДеревоПоГрафе" Тогда
			ПостроительОтчета.Порядок.Установить("Дата Возр, __Графа1 Возр, Номер Возр");
		Иначе
			ПостроительОтчета.Порядок.Установить("Дата Возр, Номер Возр");
		КонецЕсли;
	КонецЕсли;
	
	// Представление полей построителя
	//
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ВыбранноеПоле Из ПостроительОтчета.ВыбранныеПоля Цикл
	//	Для каждого Поле Из ДоступныеПоля Цикл
	//		Если ВыбранноеПоле.ПутьКДанным = Поле.ПутьКДанным Тогда
	//			ВыбранноеПоле.Представление = Поле.Представление;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ВыбранноеПоле Из ПостроительОтчета.ВыбранныеПоля Цикл 
		Для каждого Поле Из ДоступныеПоля Цикл 
			Если ВыбранноеПоле.ПутьКДанным = Поле.ПутьКДанным Тогда 
				ВыбранноеПоле.Представление = Поле.Представление; Прервать; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	// Представление полей отборов
	//
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого Отбор Из ПостроительОтчетаОтбор Цикл
	//	Для каждого Поле Из ДоступныеПоля Цикл
	//		Если Отбор.ПутьКДанным = Поле.ПутьКДанным Тогда
	//			Отбор.Представление = Поле.Представление;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого Отбор Из ПостроительОтчетаОтбор Цикл 
		Для каждого Поле Из ДоступныеПоля Цикл 
			Если Отбор.ПутьКДанным = Поле.ПутьКДанным Тогда 
				Отбор.Представление = Поле.Представление; 
				Прервать; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;	
	
	// Представление полей отборов условного оформления
	//
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого УсловноеОформление Из ПостроительОтчета.УсловноеОформление Цикл
	//	Для каждого Отбор Из УсловноеОформление.Отбор Цикл
	//		Для каждого Поле Из ДоступныеПоля Цикл
	//			Если Отбор.ПутьКДанным = Поле.ПутьКДанным Тогда
	//				Отбор.Представление = Поле.Представление;
	//				Прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого УсловноеОформление Из ПостроительОтчета.УсловноеОформление Цикл 
		Для каждого Отбор Из УсловноеОформление.Отбор Цикл 
			Для каждого Поле Из ДоступныеПоля Цикл 
				Если Отбор.ПутьКДанным = Поле.ПутьКДанным Тогда 
					Отбор.Представление = Поле.Представление; Прервать; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	ПолучитьПараметрыУсловногоОформления();
	
КонецПроцедуры // ИнициализироватьПостроитель()

Процедура НастроитьДополнительныеКолонки()
	
	Счетчик = 0;
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для Индекс = 1 - ЭлементыФормыСписокДокументовКолонки.Количество() По 0 Цикл
	//	Если Лев(ЭлементыФормыСписокДокументовКолонки[-Индекс].Имя, 7) = "__Графа" Тогда
	//		ЭлементыФормыСписокДокументовКолонки.Удалить(-Индекс);
	//	КонецЕсли;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для Индекс = 1 - ЭлементыФормыСписокДокументовКолонки.Количество() По 0 Цикл
		Если Лев(ЭлементыФормыСписокДокументовКолонки[-Индекс].Имя, 7) = "__Графа" Тогда 
			ЭлементыФормыСписокДокументовКолонки.Удалить(-Индекс); 
		КонецЕсли; 
	КонецЦикла;
	
	Счетчик = 0;
	мВыводитьПодвал = Ложь;
	Для каждого ВыводимаяГрафа Из ВыводимыеГрафы Цикл
		Счетчик = Счетчик + 1;
		ИмяГрафы = "__Графа" + Счетчик;
		
		НоваяКолонка = ЭлементыФормыСписокДокументовКолонки.Добавить(ИмяГрафы, ВыводимаяГрафа.ГрафаЖурнала);
		
		Если ПроверитьТипГрафаБулево(ВыводимаяГрафа) Тогда
			НоваяКолонка.УстановитьЭлементУправления(ТипФлажок);
			НоваяКолонка.ДанныеФлажка = ИмяГрафы;
			НоваяКолонка.Ширина = 5;
		ИначеЕсли ВыводимаяГрафа.Суммовая Тогда
			мВыводитьПодвал = ВыводимаяГрафа.Суммовая;
			НоваяКолонка.Данные = ИмяГрафы;
			НоваяКолонка.Ширина = 10;
			НоваяКолонка.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложение.Право;
			
			Если СписокДокументов.Колонки[ИмяГрафы].ТипЗначения.КвалификаторыЧисла.Разрядность = 0 Тогда
				НоваяКолонка.Формат = "ЧДЦ=2";
			КонецЕсли;
		Иначе	
			НоваяКолонка.Данные = ИмяГрафы;
			НоваяКолонка.Ширина = 20;
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементыФормыСписокДокументов.Подвал = мВыводитьПодвал;
	
КонецПроцедуры // НастроитьДополнительныеКолонки()

Процедура ОбновитьИтоги()
	
	Если Не мВыводитьПодвал Тогда
		Возврат
	КонецЕсли; 
	
	СписокДокументовСтроки = СписокДокументов.Строки;
	СписокДокументовКолонки = СписокДокументов.Колонки;
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ВыводимаяГрафа Из ВыводимыеГрафы.НайтиСтроки(Новый Структура("Суммовая", Истина)) Цикл
	//	ИмяГрафы = "__Графа" + ВыводимаяГрафа.НомерСтроки;
	//	ЭлементыФормыСписокДокументовКолонки[ИмяГрафы].ТекстПодвала = Формат(СписокДокументовСтроки.Итог(ИмяГрафы), "ЧДЦ=" + ?(СписокДокументовКолонки[ИмяГрафы].ТипЗначения.КвалификаторыЧисла.Разрядность, СписокДокументовКолонки[ИмяГрафы].ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти, 2));
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ВыводимаяГрафа Из ВыводимыеГрафы.НайтиСтроки(Новый Структура("Суммовая", Истина)) Цикл ИмяГрафы = "__Графа" + ВыводимаяГрафа.НомерСтроки; ЭлементыФормыСписокДокументовКолонки[ИмяГрафы].ТекстПодвала = Формат(СписокДокументовСтроки.Итог(ИмяГрафы), "ЧДЦ=" + ?(СписокДокументовКолонки[ИмяГрафы].ТипЗначения.КвалификаторыЧисла.Разрядность, СписокДокументовКолонки[ИмяГрафы].ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти, 2)); КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьТаблицуДокументов()
	
	мТаблицаКритерияОтбора = Неопределено;
	ТекущиеДанные = ЭлементыФормыСписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено или ТекущиеДанные.Ссылка = Null Тогда
		ТекущаяСсылка = Неопределено;
	Иначе
		ТекущаяСсылка = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	Попытка
		//Скрипт = Новый COMОбъект("MSScriptControl.ScriptControl");
		//Скрипт.language = "javascript";
		//мСек1 = Формат(Скрипт.eval("new Date().getTime()"),"ЧГ=0");
		
		Если ВидСпискаДокументов = "ДеревоПодчиненных" и ПостроительОтчетаОтбор.Количество() Тогда
			СписокДокументов = ПостроительОтчета.ПолучитьЗапрос().Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Иначе
			оптЗапрос = ОптимизаторОтборов(ПостроительОтчета.ПолучитьЗапрос());
			рез  = оптЗапрос.Выполнить(); //90% времени!!!
			СписокДокументов = рез.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		КонецЕсли;
		
		//мСек2 = Формат(Скрипт.eval("new Date().getTime()"),"ЧГ=0");
		//Сообщить("Завершено за " + ((мСек2 - мСек1) / 1000) + " сек.");
		
		Если ЭлементыФормыСписокДокументовКолонки.Дата.ОтображатьИерархию <> ОтображатьДокументыВВидеДерева Тогда
			ЭлементыФормыСписокДокументовКолонки.Дата.ОтображатьИерархию = ОтображатьДокументыВВидеДерева;
		КонецЕсли;
	Исключение
		Сообщить("Не удалось обновить таблицу документов! Проверьте корректность настроек!");
	КонецПопытки;
	
	мТекущаяСтрокаТаблицы = НайтиДокументВСпискеДокументов(ТекущаяСсылка);
	
КонецПроцедуры // ОбновитьТаблицуДокументов() 

Процедура ОбновитьКнопки()
	Перем ПечатныеФормы;
	Перем ТаблицаДвижений;
	Перем ТекстЗапроса;
	
	мТекущиеДанные = ЭлементыФормыСписокДокументов.ТекущиеДанные;
	
	Если мТекущиеДанные = Неопределено или мТекущиеДанные.Ссылка = Null Тогда
		ИмяДокумента = Неопределено
	Иначе
		мТекущийДокументСсылка = мТекущиеДанные.Ссылка;
		мТекущийДокументМетаданные = мТекущийДокументСсылка.Метаданные();
		ИмяДокумента = мТекущийДокументМетаданные.Имя;
	КонецЕсли;
	
	// Отбор
	ОтборУстановлен = Ложь;
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого Отбор Из ПостроительОтчетаОтбор Цикл
	//	Если Отбор.Использование Тогда
	//		ОтборУстановлен = Истина;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого Отбор Из ПостроительОтчетаОтбор Цикл Если Отбор.Использование Тогда ОтборУстановлен = Истина; Прервать; КонецЕсли; КонецЦикла;
	КнопкаОтборИСортировка.Пометка = ОтборУстановлен;
	КнопкаОтключитьОтбор.Доступность = ОтборУстановлен;
	
	ИзменилсяВидДокумента = (мИмяДокумента <> ИмяДокумента);
	Если ИзменилсяВидДокумента Тогда
		
		// Перейти
		//
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для Индекс = 1 - МенюПерейтиКнопки.Количество() По -4 Цикл
		//	МенюПерейтиКнопки.Удалить(-Индекс)
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для Индекс = 1 - МенюПерейтиКнопки.Количество() По -4 Цикл МенюПерейтиКнопки.Удалить(-Индекс) КонецЦикла;
		//ДействияПерейтиКнопки.Очистить();

		// Ввод по основанию
		МенюВводПоОснованиюКнопки.Очистить();
		ДействияВводПоОснованиюКнопки.Очистить();
		
		Если ИмяДокумента = Неопределено Тогда
			
			//ДействияПерейти.Доступность = Ложь;
			ДействияПровести.Доступность = Ложь;
			ДействияОтменаПроведения.Доступность = Ложь;
			ДействияУстановитьПометкуУдаления.Доступность = Ложь;
			
			//МенюПерейти.Доступность = Ложь;
			МенюПровести.Доступность = Ложь;
			МенюОтменаПроведения.Доступность = Ложь;
			МенюУстановитьПометкуУдаления.Доступность = Ложь;
			
			КнопкаПодменюТекущийДокумент.Доступность = Ложь;
			
		Иначе
			
			ДоступностьПровести = (мТекущийДокументМетаданные.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
			
			ДействияПровести.Доступность = ДоступностьПровести;
			ДействияОтменаПроведения.Доступность = мТекущиеДанные.Проведен;
			ДействияУстановитьПометкуУдаления.Доступность = Истина;
			
			МенюПровести.Доступность = ДоступностьПровести;
			МенюОтменаПроведения.Доступность = мТекущиеДанные.Проведен;
			МенюУстановитьПометкуУдаления.Доступность = Истина;
			
			//МенюПерейтиКнопки.Добавить("РазделительДвижений", ТипКнопкиКоманднойПанели.Разделитель);
			
			// Добавим в меню Перейти движения документов
			Если СтруктураДвиженийДокументов = Неопределено Тогда
				СтруктураДвиженийДокументов = Новый Структура; 
				
				Если СтруктураКартинок = Неопределено Тогда
					СтруктураКартинок = Новый Структура("РегистрСведений,РегистрНакопления,РегистрБухгалтерии,РегистрРасчета", БиблиотекаКартинок["РегистрСведений"], БиблиотекаКартинок["РегистрНакопления"], БиблиотекаКартинок["РегистрБухгалтерии"], БиблиотекаКартинок["РегистрРасчета"]);
					КартинкаДокумент = БиблиотекаКартинок.ДокументОбъект;
					КартинкаРеквизиты = БиблиотекаКартинок.ТабличныйДокументВставитьПримечание;
					КартинкаТабличнаяЧасть = БиблиотекаКартинок.ТабличныйДокументВставитьРазрывСтраницы;
				КонецЕсли;
			КонецЕсли;
			Если Не СтруктураДвиженийДокументов.Свойство(ИмяДокумента, ТаблицаДвижений) Тогда
				ТаблицаДвижений = Новый ТаблицаЗначений;
				ТаблицаДвижений.Колонки.Добавить("ПолноеИмя", ОписаниеТипаСтрока);
				ТаблицаДвижений.Колонки.Добавить("Имя", ОписаниеТипаСтрока);
				ТаблицаДвижений.Колонки.Добавить("Вид", ОписаниеТипаСтрока);
				ТаблицаДвижений.Колонки.Добавить("Синоним", ОписаниеТипаСтрока);
				// Код в комментарии записаный в 1 строку находится ниже этого комментария
				// Для редактирования кода снимите комментарий
				// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
				//Для каждого ВидДвижения Из мТекущийДокументМетаданные.Движения Цикл
				//	СтрокаДвижений = ТаблицаДвижений.Добавить();
				//	ЗаполнитьЗначенияСвойств(СтрокаДвижений, ВидДвижения);
				//	ПолноеИмя = ВидДвижения.ПолноеИмя();
				//	СтрокаДвижений.ПолноеИмя = ПолноеИмя;
				//	СтрокаДвижений.Вид = Лев(ПолноеИмя, Найти(ПолноеИмя, ".") - 1);
				//КонецЦикла;

				// Код записанный в 1 строку находится в комментарии расположенном выше
				// Для редактирования кода снимите комментарий
				// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
				Для каждого ВидДвижения Из мТекущийДокументМетаданные.Движения Цикл СтрокаДвижений = ТаблицаДвижений.Добавить(); ЗаполнитьЗначенияСвойств(СтрокаДвижений, ВидДвижения); ПолноеИмя = ВидДвижения.ПолноеИмя(); СтрокаДвижений.ПолноеИмя = ПолноеИмя; СтрокаДвижений.Вид = Лев(ПолноеИмя, Найти(ПолноеИмя, ".") - 1); КонецЦикла;
				
				ТаблицаДвижений.Сортировать("ПолноеИмя");
				СтруктураДвиженийДокументов.Вставить(ИмяДокумента, ТаблицаДвижений);
			КонецЕсли;
			
			ТипДействие = ТипКнопкиКоманднойПанели.Действие;
			
			Действие = Новый Действие("ПоказатьДвиженияДокумента");
			// Код в комментарии записаный в 1 строку находится ниже этого комментария
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Для каждого ВидДвижения Из ТаблицаДвижений Цикл
			//	ВидДвиженияИмя = ВидДвижения.Имя;
			//	ВидДвиженияСиноним = ВидДвижения.Синоним;
			//	Если ПустаяСтрока(ВидДвиженияСиноним) Тогда
			//		ВидДвиженияСиноним = ВидДвиженияИмя;
			//	КонецЕсли;
			//	Картинка = СтруктураКартинок[ВидДвижения.Вид];
			//	Кнопка = МенюПерейтиКнопки.Добавить(ВидДвиженияИмя, ТипДействие, ВидДвиженияСиноним, Действие);
			//	Кнопка.Картинка = Картинка;
			//	Кнопка = ДействияПерейтиКнопки.Добавить(ВидДвиженияИмя, ТипДействие, ВидДвиженияСиноним, Действие);
			//	Кнопка.Картинка = Картинка;
			//КонецЦикла;

			// Код записанный в 1 строку находится в комментарии расположенном выше
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Для каждого ВидДвижения Из ТаблицаДвижений Цикл ВидДвиженияИмя = ВидДвижения.Имя; ВидДвиженияСиноним = ВидДвижения.Синоним; Если ПустаяСтрока(ВидДвиженияСиноним) Тогда ВидДвиженияСиноним = ВидДвиженияИмя; КонецЕсли; Картинка = СтруктураКартинок[ВидДвижения.Вид]; Кнопка = МенюПерейтиКнопки.Добавить(ВидДвиженияИмя, ТипДействие, ВидДвиженияСиноним, Действие); Кнопка.Картинка = Картинка; Кнопка = ДействияПерейтиКнопки.Добавить(ВидДвиженияИмя, ТипДействие, ВидДвиженияСиноним, Действие); Кнопка.Картинка = Картинка; КонецЦикла;
			
			НайденныеСтроки = мВводНаОсновании.НайтиСтроки(Новый Структура("ВводитсяНаОсновании", мТекущийДокументМетаданные));
			Действие = Новый Действие("ВвестиДокументПоОснованию");
			// Код в комментарии записаный в 1 строку находится ниже этого комментария
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Для каждого ДокПоОснованию Из НайденныеСтроки Цикл
			//	ТекДокумент = ДокПоОснованию.Документ;
			//	ТекДокументИмя = ТекДокумент.Имя;
			//	ТекДокументСиноним = ТекДокумент.Синоним;
			//	Если ПустаяСтрока(ТекДокументСиноним) Тогда
			//		ТекДокументСиноним = ТекДокументИмя;
			//	КонецЕсли;
			//	Кнопка = МенюВводПоОснованиюКнопки.Добавить(ТекДокументИмя, ТипДействие, ТекДокументСиноним, Действие);
			//	Кнопка.Картинка = КартинкаДокумент;
			//	Кнопка = ДействияВводПоОснованиюКнопки.Добавить(ТекДокументИмя, ТипДействие, ТекДокументСиноним, Действие);
			//	Кнопка.Картинка = КартинкаДокумент;
			//КонецЦикла;

			// Код записанный в 1 строку находится в комментарии расположенном выше
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			Для каждого ДокПоОснованию Из НайденныеСтроки Цикл ТекДокумент = ДокПоОснованию.Документ; ТекДокументИмя = ТекДокумент.Имя; ТекДокументСиноним = ТекДокумент.Синоним; Если ПустаяСтрока(ТекДокументСиноним) Тогда ТекДокументСиноним = ТекДокументИмя; КонецЕсли; Кнопка = МенюВводПоОснованиюКнопки.Добавить(ТекДокументИмя, ТипДействие, ТекДокументСиноним, Действие); Кнопка.Картинка = КартинкаДокумент; Кнопка = ДействияВводПоОснованиюКнопки.Добавить(ТекДокументИмя, ТипДействие, ТекДокументСиноним, Действие); Кнопка.Картинка = КартинкаДокумент; КонецЦикла;
			МенюВводПоОснованию.Доступность = НайденныеСтроки.Количество();
			ДействияВводПоОснованию.Доступность = НайденныеСтроки.Количество();
			
			Если мЕстьТиповойМеханизмПечати Тогда
				Если СтруктураПечатныхФорм = Неопределено Тогда
					СтруктураПечатныхФорм = Новый Структура;
				КонецЕсли;
				Если Не СтруктураПечатныхФорм.Свойство(ИмяДокумента, ПечатныеФормы) Тогда
					Попытка
						ПечатныеФормы = Документы[ИмяДокумента].СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм()
					Исключение
						ПечатныеФормы = Новый Структура;
					КонецПопытки;
					СтруктураПечатныхФорм.Вставить(ИмяДокумента, ПечатныеФормы)
				КонецЕсли;
				
				Попытка
					Выполнить("УниверсальныеМеханизмы.СформироватьПодменю(УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(мТекущийДокументСсылка, ПечатныеФормы, Новый Действие(""ПечатьТекущегоДокумента""), Ложь), КнопкаПодменюТекущийДокумент, Истина, Ложь)")
				Исключение
					КнопкаПодменюТекущийДокумент.Доступность = Ложь
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		мИмяДокумента = ИмяДокумента;
	Иначе
		Если ИмяДокумента = Неопределено Тогда
			ДействияОтменаПроведения.Доступность = Ложь;
			МенюОтменаПроведения.Доступность = Ложь;
		Иначе
			ДействияОтменаПроведения.Доступность = мТекущиеДанные.Проведен;
			МенюОтменаПроведения.Доступность = мТекущиеДанные.Проведен;
		КонецЕсли;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////
	
	Если ИмяДокумента = Неопределено Тогда 
		ОтобразитьПанельТабЧастей(Неопределено);
		Возврат;
	ИначеЕсли Не ПоказыватьРеквизиты и Не ПоказыватьТабЧасти и Не ПоказыватьДвижения Тогда
		ОтобразитьПанельТабЧастей(Неопределено);
		Возврат;
	КонецЕсли;
	
	Если СтруктураЗапросовДляЗакладок = Неопределено Тогда
		СтруктураЗапросовДляЗакладок = Новый Структура;
		ЗапросДляЗакладок = Новый Запрос;
	КонецЕсли;
	
	Если Не СтруктураЗапросовДляЗакладок.Свойство(ИмяДокумента, ТекстЗапроса) Тогда
		// Реквизиты документа
		ТекстЗапроса = "";
		Если ПоказыватьРеквизиты Тогда
			ТекстЗапроса = "ВЫБРАТЬ	РАЗРЕШЕННЫЕ
			|	""Т1"" КАК Вид,
			|	""Документ." + ИмяДокумента + """ КАК Источник,
			|	""__Документ"" КАК Имя,
			|	""__Документ"" КАК Синоним";
		КонецЕсли;
		
		// Табличные части
		Если ПоказыватьТабЧасти Тогда
			// Код в комментарии записаный в 1 строку находится ниже этого комментария
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Для каждого ТабЧасть Из мТекущийДокументМетаданные.ТабличныеЧасти Цикл
			//	ТабЧастьИмя = ТабЧасть.Имя;
			//	ТабЧастьСиноним = ТабЧасть.Синоним;
			//	Если ПустаяСтрока(ТабЧастьСиноним) Тогда
			//		ТабЧастьСиноним = ТабЧастьИмя;
			//	КонецЕсли;
			//	Если ТекстЗапроса = "" Тогда
			//		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 ""Т2"" КАК Вид, ""Документ." + ИмяДокумента + "." + ТабЧастьИмя + """ КАК Источник, """ + ТабЧастьИмя + """ КАК Имя, """ + ТабЧастьСиноним + """ КАК Синоним ИЗ Документ." + ИмяДокумента + "." + ТабЧастьИмя + " КАК __Объект";
			//	Иначе
			//		ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1  ""Т2"", ""Документ." + ИмяДокумента + "." + ТабЧастьИмя + """, """ + ТабЧастьИмя + """, """ + ТабЧастьСиноним + """ ИЗ Документ." + ИмяДокумента + "." + ТабЧастьИмя + " КАК __Объект";
			//	КонецЕсли;
			//КонецЦикла;

			// Код записанный в 1 строку находится в комментарии расположенном выше
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			Для каждого ТабЧасть Из мТекущийДокументМетаданные.ТабличныеЧасти Цикл ТабЧастьИмя = ТабЧасть.Имя; ТабЧастьСиноним = ТабЧасть.Синоним; Если ПустаяСтрока(ТабЧастьСиноним) Тогда ТабЧастьСиноним = ТабЧастьИмя; КонецЕсли; Если ТекстЗапроса = "" Тогда ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 ""Т2"" КАК Вид, ""Документ." + ИмяДокумента + "." + ТабЧастьИмя + """ КАК Источник, """ + ТабЧастьИмя + """ КАК Имя, """ + ТабЧастьСиноним + """ КАК Синоним ИЗ Документ." + ИмяДокумента + "." + ТабЧастьИмя + " КАК __Объект"; Иначе ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1  ""Т2"", ""Документ." + ИмяДокумента + "." + ТабЧастьИмя + """, """ + ТабЧастьИмя + """, """ + ТабЧастьСиноним + """ ИЗ Документ." + ИмяДокумента + "." + ТабЧастьИмя + " КАК __Объект"; КонецЕсли; КонецЦикла;
		КонецЕсли;
	
		// Движения
		Если ПоказыватьДвижения Тогда
			// Код в комментарии записаный в 1 строку находится ниже этого комментария
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Для каждого НаборДвижений Из мТекущийДокументМетаданные.Движения Цикл
			//	НаборДвиженийИмя = НаборДвижений.Имя;
			//	НаборДвиженийСиноним = НаборДвижений.Синоним;
			//	Если ПустаяСтрока(НаборДвиженийСиноним) Тогда
			//		НаборДвиженийСиноним = НаборДвиженийИмя;
			//	КонецЕсли;
			//	НаборДвиженийПолноеИмя = НаборДвижений.ПолноеИмя();
			//	Если ТекстЗапроса = "" Тогда
			//		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 ""Т3"" КАК Вид, """ + НаборДвиженийПолноеИмя + """ КАК Источник, """ + НаборДвиженийИмя + """ КАК Имя, """ + НаборДвиженийСиноним + """ КАК Синоним ИЗ " + НаборДвиженийПолноеИмя + " КАК __Объект ГДЕ __Объект.Регистратор ССЫЛКА Документ." + ИмяДокумента;
			//	Иначе
			//		ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 ""Т3"", """ + НаборДвиженийПолноеИмя + """, """ + НаборДвиженийИмя + """, """ + НаборДвиженийСиноним + """ ИЗ " + НаборДвиженийПолноеИмя + " КАК __Объект ГДЕ __Объект.Регистратор ССЫЛКА Документ." + ИмяДокумента;
			//	КонецЕсли;
			//КонецЦикла;

			// Код записанный в 1 строку находится в комментарии расположенном выше
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			Для каждого НаборДвижений Из мТекущийДокументМетаданные.Движения Цикл НаборДвиженийИмя = НаборДвижений.Имя; НаборДвиженийСиноним = НаборДвижений.Синоним; Если ПустаяСтрока(НаборДвиженийСиноним) Тогда НаборДвиженийСиноним = НаборДвиженийИмя; КонецЕсли; НаборДвиженийПолноеИмя = НаборДвижений.ПолноеИмя(); Если ТекстЗапроса = "" Тогда ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 ""Т3"" КАК Вид, """ + НаборДвиженийПолноеИмя + """ КАК Источник, """ + НаборДвиженийИмя + """ КАК Имя, """ + НаборДвиженийСиноним + """ КАК Синоним ИЗ " + НаборДвиженийПолноеИмя + " КАК __Объект ГДЕ __Объект.Регистратор ССЫЛКА Документ." + ИмяДокумента; Иначе ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 ""Т3"", """ + НаборДвиженийПолноеИмя + """, """ + НаборДвиженийИмя + """, """ + НаборДвиженийСиноним + """ ИЗ " + НаборДвиженийПолноеИмя + " КАК __Объект ГДЕ __Объект.Регистратор ССЫЛКА Документ." + ИмяДокумента; КонецЕсли; КонецЦикла;
		КонецЕсли;
		
		Если ТекстЗапроса = "" Тогда
			ОтобразитьПанельТабЧастей(Неопределено);
			СтруктураЗапросовДляЗакладок.Вставить(ИмяДокумента, "");
			Возврат;
		КонецЕсли;
		
		ЗапросДляЗакладок.Текст = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО Вид, Источник";
		РезультатЗапроса = ЗапросДляЗакладок.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ОтобразитьПанельТабЧастей(Неопределено);
			СтруктураЗапросовДляЗакладок.Вставить(ИмяДокумента, "");
			Возврат;
		КонецЕсли;
		
		НаполнениеЗакладок = РезультатЗапроса.Выгрузить();
		
		ТекстЗапроса = "";
		СтрокаПробелов = СтрЗаменить(Формат(0, "ЧЦ=5; ЧН=; ЧВН=; ЧГ="), "0", СтрЗаменить(Формат(0, "ЧЦ=100; ЧН=; ЧВН=; ЧГ="), "0", " "));
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого Закладка Из НаполнениеЗакладок Цикл
		//	Если ТекстЗапроса = "" Тогда
		//		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 ""Страница_000"" КАК ЗакладкаИмя, """ + Закладка.Вид + """ КАК Вид, """ + Закладка.Источник + """ КАК Источник, """ + Закладка.Имя + """ КАК Имя, """ + СтрЗаменить(Закладка.Синоним, """", """""") + """ КАК Синоним, """ + СтрокаПробелов + """ КАК СтарыйИсточник, ЛОЖЬ КАК Обновлено ИЗ " + Закладка.Источник + " КАК __Объект ГДЕ __Объект." + ?(Закладка.Вид <> "Т3", "Ссылка", "Регистратор") + " = &Ссылка ";
		//	Иначе
		//		ТекстЗапроса = ТекстЗапроса + мРазделительСтрок + "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1  ""Страница_000"", """ + Закладка.Вид + """, """ + Закладка.Источник + """, """ + Закладка.Имя + """, """ + СтрЗаменить(Закладка.Синоним, """", """""") + """, """", ЛОЖЬ КАК Обновлено ИЗ " + Закладка.Источник + " КАК __Объект ГДЕ __Объект." + ?(Закладка.Вид <> "Т3", "Ссылка", "Регистратор") + " = &Ссылка ";
		//	КонецЕсли;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого Закладка Из НаполнениеЗакладок Цикл Если ТекстЗапроса = "" Тогда ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 ""Страница_000"" КАК ЗакладкаИмя, """ + Закладка.Вид + """ КАК Вид, """ + Закладка.Источник + """ КАК Источник, """ + Закладка.Имя + """ КАК Имя, """ + СтрЗаменить(Закладка.Синоним, """", """""") + """ КАК Синоним, """ + СтрокаПробелов + """ КАК СтарыйИсточник, ЛОЖЬ КАК Обновлено ИЗ " + Закладка.Источник + " КАК __Объект ГДЕ __Объект." + ?(Закладка.Вид <> "Т3", "Ссылка", "Регистратор") + " = &Ссылка "; Иначе ТекстЗапроса = ТекстЗапроса + мРазделительСтрок + "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1  ""Страница_000"", """ + Закладка.Вид + """, """ + Закладка.Источник + """, """ + Закладка.Имя + """, """ + СтрЗаменить(Закладка.Синоним, """", """""") + """, """", ЛОЖЬ КАК Обновлено ИЗ " + Закладка.Источник + " КАК __Объект ГДЕ __Объект." + ?(Закладка.Вид <> "Т3", "Ссылка", "Регистратор") + " = &Ссылка "; КонецЕсли; КонецЦикла;
		СтруктураЗапросовДляЗакладок.Вставить(ИмяДокумента, ТекстЗапроса)
	КонецЕсли;
	
	Если ТекстЗапроса = "" Тогда
		ОтобразитьПанельТабЧастей(Неопределено);
		Возврат;
	КонецЕсли;
	
	ЗапросДляЗакладок.Текст = ТекстЗапроса;
	ЗапросДляЗакладок.УстановитьПараметр("Ссылка", мТекущийДокументСсылка);
	РезультатЗапроса = ЗапросДляЗакладок.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОтобразитьПанельТабЧастей(Неопределено);
	Иначе
		Если СтруктураЗакладок = Неопределено Тогда
			СтруктураЗакладок = РезультатЗапроса.Выгрузить();
		Иначе
			СтарыеИменаВЗакладках = СтруктураЗакладок.ВыгрузитьКолонку("СтарыйИсточник");
			СтруктураЗакладок = РезультатЗапроса.Выгрузить();
			СтруктураЗакладок.ЗагрузитьКолонку(СтарыеИменаВЗакладках, "СтарыйИсточник");
		КонецЕсли;
		
		ОтрисовкаЗакладок = Истина;
		СтарыйИсточник = ЭлементыФормыПанельТабЧастей.ТекущаяСтраница.Значение;
		СтраницыПанели = ЭлементыФормыПанельТабЧастей.Страницы;
		
		// Создадим необходимые закладки
		Индекс = 0;
		Для каждого Закладка Из СтруктураЗакладок Цикл
			
			ИмяЗакладки = "Страница_" + Индекс;
			Закладка.ЗакладкаИмя = ИмяЗакладки;
			Страница = СтраницыПанели.Найти(ИмяЗакладки);
			Если Страница = Неопределено Тогда
				Если Закладка.Вид = "Т1" Тогда
					Страница = СтраницыПанели.Добавить(ИмяЗакладки, "Реквизиты", Закладка.Источник, КартинкаРеквизиты);
				ИначеЕсли Закладка.Вид = "Т2" Тогда
					Страница = СтраницыПанели.Добавить(ИмяЗакладки, Закладка.Синоним, Закладка.Источник, КартинкаТабличнаяЧасть);
				Иначе
					Страница = СтраницыПанели.Добавить(ИмяЗакладки, Закладка.Синоним, Закладка.Источник, СтруктураКартинок[Лев(Закладка.Источник, Найти(Закладка.Источник, ".") - 1)]);
				КонецЕсли;
			ИначеЕсли Страница.Значение = Закладка.Источник Тогда
				Страница.Видимость = Истина;
			ИначеЕсли Закладка.Вид = "Т3" Тогда
				ИндексКартинкиНовой = Лев(Закладка.Источник, Найти(Закладка.Источник, ".") - 1);
				ИндексКартинкиСтарой = Лев(Страница.Значение, Найти(Страница.Значение, ".") - 1);
				Страница.Заголовок = Закладка.Синоним;
				Если ИндексКартинкиНовой <> ИндексКартинкиСтарой Тогда
					Страница.КартинкаЗаголовка = СтруктураКартинок[ИндексКартинкиНовой];
				КонецЕсли;
				Страница.Значение = Закладка.Источник;
				Страница.Видимость = Истина;
			ИначеЕсли Закладка.Вид = "Т2" Тогда
				Страница.Заголовок = Закладка.Синоним;
				Страница.КартинкаЗаголовка = КартинкаТабличнаяЧасть;
				Страница.Значение = Закладка.Источник;
				Страница.Видимость = Истина;
			Иначе
				Страница.Заголовок = "Реквизиты";
				Страница.КартинкаЗаголовка = КартинкаРеквизиты;
				Страница.Значение = Закладка.Источник;
				Страница.Видимость = Истина;
			КонецЕсли;
			
			Индекс = Индекс + 1
		КонецЦикла;
		
		// Скроем лишние закладки
		//
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для Индекс = Индекс По СтраницыПанели.Количество() - 1 Цикл
		//	СтраницыПанели[Индекс].Видимость = Ложь;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для Индекс = Индекс По СтраницыПанели.Количество() - 1 Цикл СтраницыПанели[Индекс].Видимость = Ложь; КонецЦикла;
		ОтрисовкаЗакладок = Ложь;
		
		Если Не ВидимостьПанелиТабЧастей Тогда
			ОтобразитьПанельТабЧастей(мТекущийДокументМетаданные);
		КонецЕсли;
		
		ТекущаяСтраница = СтруктураЗакладок.Найти(СтарыйИсточник, "Источник");
		Если ТекущаяСтраница = Неопределено Тогда
			Если ЭлементыФормыПанельТабЧастей.ТекущаяСтраница <> СтраницыПанели[0] Тогда
				ЭлементыФормыПанельТабЧастей.ТекущаяСтраница = СтраницыПанели[0];
			Иначе
				ОбновитьДанныеНаСтранице(0);
			КонецЕсли;
		ИначеЕсли ЭлементыФормыПанельТабЧастей.ТекущаяСтраница.Имя <> ТекущаяСтраница.ЗакладкаИмя Тогда
			ЭлементыФормыПанельТабЧастей.ТекущаяСтраница = СтраницыПанели[СтруктураЗакладок.Индекс(ТекущаяСтраница)];
		Иначе
			ОбновитьДанныеНаСтранице(СтруктураЗакладок.Индекс(ТекущаяСтраница));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьКнопки() 

//Процедура ОбновитьДанныеПоСсылке(Знач СсылкаДокумента)
//	
//	мИмяДокумента = Неопределено;
//	МетаданныеДокумента = СсылкаДокумента.Метаданные();
//	ИмяДокумента = МетаданныеДокумента.Имя;
//	Если ДоступныеДокументы.Найти(ИмяДокумента, "ИмяДокумента") = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ТекущаяСтрока = СписокДокументов.Строки.Найти(СсылкаДокумента, "Ссылка", Истина);
//	Если ВидСпискаДокументов = "ДеревоПодчиненных" и ТекущаяСтрока.Родитель <> Неопределено Тогда
//		Строка = ТекущаяСтрока.Родитель;
//		РазвернутьУровеньПоСтроке(Строка);
//		ТекущаяСтрока = СписокДокументов.Строки.Найти(СсылкаДокумента, "Ссылка", Истина);
//		Если ТекущаяСтрока <> Неопределено Тогда
//			ЭлементыФормыСписокДокументов.ТекущаяСтрока = ТекущаяСтрока;
//		КонецЕсли;
//		
//		ОбновитьКнопки();
//		Возврат;
//	КонецЕсли;
//	
//	Если ПостроительОднойСтроки = Неопределено Тогда
//		ПостроительОднойСтроки = Новый ПостроительОтчета;
//	КонецЕсли;
//	
//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " +
//	?(МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить, "
//	|	ВЫБОР КОГДА __Документ.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
//	|	ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
//	|	__Документ.Дата,
//	|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер", "NULL") + " КАК Номер,
//	|	""" + МетаданныеДокумента.Представление + """  КАК ВидДокумента,
//	|	__Документ.Ссылка,
//	|	__Документ.ПометкаУдаления,
//	|	__Документ.Проведен";
//	
//	Индекс = 0;
//	ТекстЗапросаДляГраф = "";
//	ТекстЗапросаСоединение = "";
//	// Код в комментарии записаный в 1 строку находится ниже этого комментария
//	// Для редактирования кода снимите комментарий
//	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
//	//Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл
//	//	Индекс = Индекс + 1;
//	//	Значение = ВыводимаяГрафа.Значение;
//	//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
//	//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
//	//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
//	//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
//	//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
//	//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
//	//		ПостроительОднойСтроки.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
//	//	КонецЕсли;
//	//КонецЦикла;

//	// Код записанный в 1 строку находится в комментарии расположенном выше
//	// Для редактирования кода снимите комментарий
//	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
//	Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; ПостроительОднойСтроки.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); КонецЕсли; КонецЦикла;
//	
//	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляГраф + "
//	|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
//	|ГДЕ __Документ.Ссылка = &СсылкаДокумента";
//	
//	ПостроительОднойСтроки.Текст = ТекстЗапроса;
//	ПостроительОднойСтроки.Параметры.Вставить("СсылкаДокумента", СсылкаДокумента);
//	ПостроительОднойСтроки.ЗаполнитьНастройки();
//	ПостроительОднойСтроки.УстановитьНастройки(ПостроительОтчета.ПолучитьНастройки(,, Ложь, Ложь, Ложь));
//	
//	ПостроительОднойСтроки.Выполнить();
//	Результат = ПостроительОднойСтроки.Результат.Выгрузить();
//	
//	ТекущаяСтрока = СписокДокументов.Строки.Найти(СсылкаДокумента, "Ссылка", Истина);
//	
//	Если Результат.Количество() Тогда
//		
//		Если ТекущаяСтрока = Неопределено Тогда
//			Если ОтображатьДокументыВВидеДерева Тогда
//				ПостроительОтчета.Параметры.Вставить("ДатаНачалаПериодаЖурнала"   , НастройкаПериодаЖурнала.ПолучитьДатуНачала());
//				ПостроительОтчета.Параметры.Вставить("ДатаОкончанияПериодаЖурнала", НастройкаПериодаЖурнала.ПолучитьДатуОкончания());
//				
//				Попытка
//					Если ВидСпискаДокументов = "ДеревоПодчиненных" и ПостроительОтчетаОтбор.Количество() Тогда
//						СписокДокументов = ПостроительОтчета.ПолучитьЗапрос().Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
//					Иначе
//						СписокДокументов = ОптимизаторОтборов(ПостроительОтчета.ПолучитьЗапрос()).Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
//					КонецЕсли;
//					
//					Если ЭлементыФормыСписокДокументовКолонки.Дата.ОтображатьИерархию <> ОтображатьДокументыВВидеДерева Тогда
//						ЭлементыФормыСписокДокументовКолонки.Дата.ОтображатьИерархию = ОтображатьДокументыВВидеДерева;
//					КонецЕсли;
//				Исключение
//					Сообщить("Не удалось обновить таблицу документов! Проверьте корректность настроек!");
//				КонецПопытки;
//				
//				ТекущаяСтрока = НайтиДокументВСпискеДокументов(СсылкаДокумента);
//			Иначе
//				ТекущаяСтрока = СписокДокументов.Строки.Добавить();
//				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат[0]);
//			КонецЕсли;
//		Иначе
//			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат[0]);
//		КонецЕсли;
//		
//		ЭлементыФормыСписокДокументов.ТекущаяСтрока = ТекущаяСтрока;
//	Иначе
//		
//		Если ТекущаяСтрока <> Неопределено Тогда
//			Если ТекущаяСтрока.Родитель = Неопределено Тогда
//				СписокДокументов.Строки.Удалить(ТекущаяСтрока);
//			Иначе
//				ТекущаяСтрока.Родитель.Строки.Удалить(ТекущаяСтрока);
//			КонецЕсли; 
//		КонецЕсли;
//		Предупреждение("Данные не соответствуют текущему отбору списка универсального журнала.");
//		
//	КонецЕсли;
//	
//	// Здесь нужно добавить расчет для итогов верхнего уровня
//	
//	ОбновитьКнопки();
//	ОбновитьИтоги();
//	
//КонецПроцедуры // ОбновитьДанныеПоСсылке()
Процедура ОбновитьДанныеПоСсылке(Знач СсылкаДокумента)
	
	мИмяДокумента = Неопределено;
	МетаданныеДокумента = СсылкаДокумента.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	Если ДоступныеДокументы.Найти(ИмяДокумента, "ИмяДокумента") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = СписокДокументов.Строки.Найти(СсылкаДокумента, "Ссылка", Истина);
	Если ВидСпискаДокументов = "ДеревоПодчиненных" и ТекущаяСтрока.Родитель <> Неопределено Тогда
		Строка = ТекущаяСтрока.Родитель;
		РазвернутьУровеньПоСтроке(Строка);
		ТекущаяСтрока = СписокДокументов.Строки.Найти(СсылкаДокумента, "Ссылка", Истина);
		Если ТекущаяСтрока <> Неопределено Тогда
			ЭлементыФормыСписокДокументов.ТекущаяСтрока = ТекущаяСтрока;
		КонецЕсли;
		
		ОбновитьКнопки();
		Возврат;
	КонецЕсли;
	
	Если ПостроительОднойСтроки = Неопределено Тогда
		ПостроительОднойСтроки = Новый ПостроительОтчета;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " +
	?(МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить, "
	|	ВЫБОР КОГДА __Документ.ссылка.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ссылка.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
	|	ВЫБОР КОГДА __Документ.ссылка.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
	|	__Документ.ссылка.Дата как Дата,
	|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.ссылка.Номер", "NULL") + " КАК Номер,
	|	""Заказ покупателя""  КАК ВидДокумента,
	|	__Документ.Ссылка как Ссылка,
	|	__Документ.ссылка.ПометкаУдаления как ПометкаУдаления,
	|	__Документ.ссылка.Проведен как Проведен";
	
	//+++ наши поля	
		ТекстЗапросаДляДокумента =",
		 |	__Документ.ссылка.ДатаОтгрузки КАК ДатаОтгрузки,
		 |	__Документ.ссылка.ДатаОплаты КАК ДатаОплаты,
		 |	__Документ.ссылка.Контрагент КАК Контрагент,
		 |	__Документ.ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		 |	__Документ.ссылка.СуммаДокумента КАК СуммаДокумента,
		 |	__Документ.ссылка.ВалютаДокумента КАК ВалютаДокумента,
		 |	__Документ.ссылка.Подразделение КАК Подразделение,
		 |	__Документ.ссылка.Ответственный КАК Ответственный,
		 |	ЗаказыПокупателейОстатки.КоличествоОстаток КАК КоличествоНеОтгружено,
		 |	ПродажиОбороты.КоличествоОборот КАК КоличествоПродано,
		 |	__Документ.ссылка.Комментарий КАК Комментарий";

	
	Индекс = 0;
	ТекстЗапросаДляГраф = "";
	//+++ТекстЗапросаСоединение = "";
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл
	//	Индекс = Индекс + 1;
	//	Значение = ВыводимаяГрафа.Значение;
	//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
	//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
	//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
	//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
	//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
	//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
	//		ПостроительОднойСтроки.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
	//	КонецЕсли;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; ПостроительОднойСтроки.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); КонецЕсли; КонецЦикла;
	
	//ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляГраф + "
	//|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
	//|ГДЕ __Документ.Ссылка = &СсылкаДокумента";
	
	ПостроительОднойСтроки.Параметры.Вставить("Ссылка1", СсылкаДокумента);
				//+++( 21.10.2011
	ТекстЗапроса = ТекстЗапроса+ ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
				|ИЗ 
				|(ВЫБРАТЬ __Документ.Ссылка       
				| ИЗ Документ." + ИмяДокумента+ " как __Документ "+ Условие 
				+" и __Документ.Ссылка = &Ссылка1" 
	//+++)
				+ " ) КАК __Документ " + ТекстЗапросаСоединение + "
			//	|" + Условие + "
				|" + Порядок;   //!!!
				
	НачалоПериода = НастройкаПериодаЖурнала.ПолучитьДатуНачала();
	КонецПериода = НастройкаПериодаЖурнала.ПолучитьДатуОкончания();
	ПостроительОднойСтроки.Параметры.Вставить("НачалоПериода", НачалоПериода);
	ПостроительОднойСтроки.Параметры.Вставить("КонецПериода",  КонецДня(КонецПериода));
				
				
				Если (не всеЗаказы) тогда //+6
					Если Найти(Условие,"СписокДоговоровМенеджера")=0 тогда
					Условие = Условие+"
					|И Ссылка.ДоговорКонтрагента в (&СписокДоговоровМенеджера)";
					КонецЕсли;
					ПостроительОднойСтроки.Параметры.Вставить("СписокДоговоровМенеджера", СписокДоговоровМенеджера); // список 1 или группы польз.
				
					//Если Найти(Условие,"СписокПользователей")=0 тогда     
					//Условие = Условие+"
					//|И Ссылка.ДоговорКонтрагента.ОтветственноеЛицо в (&СписокПользователей)";
					//КонецЕсли;
					//ПостроительОтчета.Параметры.Вставить("СписокПользователей", СписокПользователей); // список 1 или группы польз.

				КонецЕсли;
                	
	ПостроительОднойСтроки.Текст = ТекстЗапроса;
	ПостроительОднойСтроки.Параметры.Вставить("СсылкаДокумента", СсылкаДокумента);
	ПостроительОднойСтроки.ЗаполнитьНастройки();
	ПостроительОднойСтроки.УстановитьНастройки(ПостроительОтчета.ПолучитьНастройки(,, Ложь, Ложь, Ложь));
	
	ПостроительОднойСтроки.Выполнить();
	Результат = ПостроительОднойСтроки.Результат.Выгрузить();
	
	ТекущаяСтрока = СписокДокументов.Строки.Найти(СсылкаДокумента, "Ссылка", Истина);
	
	Если Результат.Количество() Тогда
		
		Если ТекущаяСтрока = Неопределено Тогда
			Если ОтображатьДокументыВВидеДерева Тогда
				ПостроительОтчета.Параметры.Вставить("ДатаНачалаПериодаЖурнала"   , НастройкаПериодаЖурнала.ПолучитьДатуНачала());
				ПостроительОтчета.Параметры.Вставить("ДатаОкончанияПериодаЖурнала", НастройкаПериодаЖурнала.ПолучитьДатуОкончания());
				
				Попытка
					Если ВидСпискаДокументов = "ДеревоПодчиненных" и ПостроительОтчетаОтбор.Количество() Тогда
						СписокДокументов = ПостроительОтчета.ПолучитьЗапрос().Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
					Иначе
						СписокДокументов = ОптимизаторОтборов(ПостроительОтчета.ПолучитьЗапрос()).Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
					КонецЕсли;
					
					Если ЭлементыФормыСписокДокументовКолонки.Дата.ОтображатьИерархию <> ОтображатьДокументыВВидеДерева Тогда
						ЭлементыФормыСписокДокументовКолонки.Дата.ОтображатьИерархию = ОтображатьДокументыВВидеДерева;
					КонецЕсли;
				Исключение
					Сообщить("Не удалось обновить таблицу документов! Проверьте корректность настроек!");
				КонецПопытки;
				
				ТекущаяСтрока = НайтиДокументВСпискеДокументов(СсылкаДокумента);
			Иначе
				ТекущаяСтрока = СписокДокументов.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат[0]);
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат[0]);
		КонецЕсли;
		
		ЭлементыФормыСписокДокументов.ТекущаяСтрока = ТекущаяСтрока;
	Иначе
		
		Если ТекущаяСтрока <> Неопределено Тогда
			Если ТекущаяСтрока.Родитель = Неопределено Тогда
				СписокДокументов.Строки.Удалить(ТекущаяСтрока);
			Иначе
				ТекущаяСтрока.Родитель.Строки.Удалить(ТекущаяСтрока);
			КонецЕсли; 
		КонецЕсли;
		Предупреждение("Данные не соответствуют текущему отбору списка универсального журнала.");
		
	КонецЕсли;
	
	// Здесь нужно добавить расчет для итогов верхнего уровня
	
	ОбновитьКнопки();
	ОбновитьИтоги();
	
КонецПроцедуры // ОбновитьДанныеПоСсылке()


Процедура ОбновитьДанныеПоГруппировке(Строка)
	Перем МетаданныеДокумента;
	
	Если ПостроительПоГруппировке = Неопределено Тогда
		ПостроительПоГруппировке = Новый ПостроительОтчета;
	КонецЕсли;
	
	СтруктураГраф = ПолучитьСтруктуруГраф();
	ТекстЗапроса = "";
	
	ПроведениеРазрешить = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	СтрокиГруппировки = Строка.Строки;
	
	// Даты периода
	Если ВидСпискаДокументов = "ДеревоПоГрафе"
	или ВидСпискаДокументов = "ДеревоПоВидуДокумента" Тогда
		НачалоПериода = НастройкаПериодаЖурнала.ПолучитьДатуНачала();
		КонецПериода = НастройкаПериодаЖурнала.ПолучитьДатуОкончания();
	ИначеЕсли ВидСпискаДокументов = "ДеревоПоМесяцам" Тогда
		НачалоПериода = Строка.Дата;
		КонецПериода = КонецМесяца(Строка.Дата);
	Иначе // ДеревоПоДням
		НачалоПериода = Строка.Дата;
		КонецПериода = КонецДня(Строка.Дата);
	КонецЕсли;
	
	Если НачалоПериода = '00010101' и КонецПериода = '00010101' Тогда
		Условие = ""
	ИначеЕсли НачалоПериода = '00010101' и КонецПериода <> '00010101' Тогда
		Условие = "
		|ГДЕ 
		|	__Документ.Дата <= &КонецПериода"
	ИначеЕсли НачалоПериода = '00010101' и КонецПериода <> '00010101' Тогда
		Условие = "
		|ГДЕ 
		|	__Документ.Дата >= &НачалоПериода"
	Иначе
		Условие = "
		|ГДЕ 
		|	__Документ.Дата МЕЖДУ &НачалоПериода И &КонецПериода"
	КонецЕсли;
	
	Для каждого СтрокаГруппировки Из СтрокиГруппировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаГруппировки.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента = СокрП(СтрокаГруппировки.ВидДокумента);
		СтруктураМетаданныеДокументы.Свойство(ИмяДокумента, МетаданныеДокумента);
		Если МетаданныеДокумента = Неопределено Тогда Продолжить; КонецЕсли;
		
		ТекстЗапросаДляДокумента = ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ", мРазделительСтрок + "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") +
		?(МетаданныеДокумента.Проведение = ПроведениеРазрешить, "
		|	ВЫБОР КОГДА __Документ.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
		|	ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
		|	__Документ.Дата,
		|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер", "NULL") + " КАК Номер,
		|	""" + МетаданныеДокумента.Представление + """ КАК ВидДокумента,
		|	__Документ.Ссылка,
		|	__Документ.ПометкаУдаления,
		|	__Документ.Проведен";
		
		Индекс = 0;
		ТекстЗапросаДляГраф = "";
		ТекстЗапросаСоединение = "";
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл
		//	Индекс = Индекс + 1;
		//	Значение = ВыводимаяГрафа.Значение;
		//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
		//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
		//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
		//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
		//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
		//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
		//		ПостроительПоГруппировке.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
		//	КонецЕсли;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; ПостроительПоГруппировке.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); КонецЕсли; КонецЦикла;
		
		ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
		|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
		|" + Условие;
		
		Если ВидСпискаДокументов = "ДеревоПоГрафе" Тогда
			ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ?(ПустаяСтрока(Условие), "
			|ГДЕ ", "
			|	И ") + СтруктураГраф.__Графа1[ИмяДокумента] + " = &ЗначениеГруппировки"
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляДокумента;
	КонецЦикла;
	
	ПостроительПоГруппировке.Текст = ТекстЗапроса;
	ПостроительПоГруппировке.ЗаполнитьНастройки();
	ПостроительПоГруппировке.УстановитьНастройки(ПостроительОтчета.ПолучитьНастройки(,, Ложь, Ложь, Ложь));
	
	Если ПостроительПоГруппировке.Порядок.Количество() = 0 Тогда
		// По умолчанию считаем, что документы должны быть упорядочены по дате
		ПостроительПоГруппировке.Порядок.Установить("Дата Возр");
	КонецЕсли;
	
	ПостроительПоГруппировке.Параметры.Вставить("НачалоПериода", НачалоПериода);
	ПостроительПоГруппировке.Параметры.Вставить("КонецПериода", КонецПериода);
	Если ВидСпискаДокументов = "ДеревоПоГрафе" Тогда
		ПостроительПоГруппировке.Параметры.Вставить("ЗначениеГруппировки", Строка.__Графа1);
	КонецЕсли;
	
	СтрокиГруппировки.Очистить();
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого СтрокаРезультата Из ПостроительПоГруппировке.ПолучитьЗапрос().Выполнить().Выгрузить() Цикл
	//	ЗаполнитьЗначенияСвойств(СтрокиГруппировки.Добавить(), СтрокаРезультата);
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого СтрокаРезультата Из ПостроительПоГруппировке.ПолучитьЗапрос().Выполнить().Выгрузить() Цикл ЗаполнитьЗначенияСвойств(СтрокиГруппировки.Добавить(), СтрокаРезультата); КонецЦикла;
	
КонецПроцедуры // ОбновитьДанныеПоГруппировке()

Процедура ПанельТабЧастейПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ОтрисовкаЗакладок Тогда Возврат КонецЕсли;
	
	ОбновитьДанныеНаСтранице(ТекущаяСтраница);
	
КонецПроцедуры // ПанельТабЧастейПриСменеСтраницы()

Процедура ОбновитьДанныеНаСтранице(ТекущаяСтраница)
	
	Закладка = СтруктураЗакладок[ТекущаяСтраница];
	Если Закладка.Обновлено Тогда
		Возврат;
	КонецЕсли;
	Закладка.Обновлено = Истина;
	
	ПолеТЧ = ЭлементыФормы.Найти(Закладка.ЗакладкаИмя);
	Если ПолеТЧ = Неопределено Тогда
		// Добавляем на закладку реквизит с табличным полем
		ШиринаПоляТЧ = ЭлементыФормыПанельТабЧастей.Ширина - 14;
		ВысотаПоляТЧ = ЭлементыФормыПанельТабЧастей.Высота - 36;
		
		ПолеТЧ = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), Закладка.ЗакладкаИмя, Ложь, ЭлементыФормыПанельТабЧастей);
		ПолеТЧ.Верх = 6;
		ПолеТЧ.Лево = 6;
		ПолеТЧ.Ширина = ШиринаПоляТЧ;
		ПолеТЧ.Высота = ВысотаПоляТЧ;
		ПолеТЧ.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ПолеТЧ.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		ПолеТЧ.УстановитьДействие("Выбор", Новый Действие("ПолеТЧВыбор"));
		
		УстановитьВидимость = Истина;
	Иначе
		УстановитьВидимость = Ложь;
	КонецЕсли;
	
	Если Закладка.Вид = "Т1" Тогда
		// Реквизиты документа
		ТаблицаРеквизитов = Новый ТаблицаЗначений;
		Колонки = ТаблицаРеквизитов.Колонки;
		Колонки.Добавить("Имя",,,10);
		Колонки.Добавить("Представление",,,10);
		Колонки.Добавить("Значение",,,10);
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Имя = "Дата";
		НоваяСтрока.Представление = "Дата";
		НоваяСтрока.Значение = мТекущийДокументСсылка.Дата;
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Имя = "Номер";
		НоваяСтрока.Представление = "Номер";
		НоваяСтрока.Значение = мТекущийДокументСсылка.Номер;
		
		// Остальные реквизиты
		//
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого РеквизитДокумента Из мТекущийДокументМетаданные.Реквизиты Цикл
		//	РеквизитДокументаИмя = РеквизитДокумента.Имя;
		//	НоваяСтрока = ТаблицаРеквизитов.Добавить();
		//	НоваяСтрока.Имя = РеквизитДокументаИмя;
		//	НоваяСтрока.Представление = РеквизитДокумента.Представление();
		//	НоваяСтрока.Значение = мТекущийДокументСсылка[РеквизитДокументаИмя];
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого РеквизитДокумента Из мТекущийДокументМетаданные.Реквизиты Цикл 
			РеквизитДокументаИмя = РеквизитДокумента.Имя; 
			НоваяСтрока = ТаблицаРеквизитов.Добавить(); 
			НоваяСтрока.Имя = РеквизитДокументаИмя; 
			НоваяСтрока.Представление = РеквизитДокумента.Представление(); 
			НоваяСтрока.Значение = мТекущийДокументСсылка[РеквизитДокументаИмя]; 
		КонецЦикла;
		
		ПолеТЧ.Значение = ТаблицаРеквизитов;
		Если Закладка.СтарыйИсточник <> Закладка.Источник Тогда
			ПолеТЧ.СоздатьКолонки();
			Закладка.СтарыйИсточник = Закладка.Источник;
			
			НастройкаКолонокДляТабличногоПоля = СтруктураНастроекКолонокТабличныхПолей.Получить(Закладка.Источник);
			Если НастройкаКолонокДляТабличногоПоля <> Неопределено Тогда
				мПрименитьНастройкуКолонокСписка(НастройкаКолонокДляТабличногоПоля, ПолеТЧ.Колонки, Истина);
			КонецЕсли;
		КонецЕсли;
		
		ПолеТЧ.КонтекстноеМеню = ЭлементыФормыКоманднаяПанельСпискаКнопки.Т1;
		
	ИначеЕсли Закладка.Вид = "Т2" Тогда
		// Табличные части документа
		ТаблицаРеквизитов = мТекущийДокументСсылка[Закладка.Имя].Выгрузить();
		ПолеТЧ.Значение = ТаблицаРеквизитов;
		Если Закладка.СтарыйИсточник <> Закладка.Источник Тогда
			ПолеТЧ.СоздатьКолонки();
			Колонки = ПолеТЧ.Колонки;
			Закладка.СтарыйИсточник = Закладка.Источник;
			
			НастройкаКолонокДляТабличногоПоля = СтруктураНастроекКолонокТабличныхПолей.Получить(Закладка.Источник);
			Если НастройкаКолонокДляТабличногоПоля <> Неопределено Тогда
				мПрименитьНастройкуКолонокСписка(НастройкаКолонокДляТабличногоПоля, ПолеТЧ.Колонки, Истина);
			КонецЕсли;
			
			// Отобразим булево как галочки
			//
			// Код в комментарии записаный в 1 строку находится ниже этого комментария
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Для каждого КолонкаТЧ Из ПолеТЧ.Значение.Колонки Цикл
			//	Если КолонкаТЧ.ТипЗначения = ОписаниеТипаБулево Тогда
			//		Колонка = Колонки[КолонкаТЧ.Имя];
			//		Колонка.ДанныеФлажка = Колонка.Данные;
			//		Колонка.Данные = "";
			//	КонецЕсли;
			//КонецЦикла;

			// Код записанный в 1 строку находится в комментарии расположенном выше
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			Для каждого КолонкаТЧ Из ПолеТЧ.Значение.Колонки Цикл Если КолонкаТЧ.ТипЗначения = ОписаниеТипаБулево Тогда Колонка = Колонки[КолонкаТЧ.Имя]; Колонка.ДанныеФлажка = Колонка.Данные; Колонка.Данные = ""; КонецЕсли; КонецЦикла;
		КонецЕсли;
		
		ПолеТЧ.КонтекстноеМеню = ЭлементыФормыКоманднаяПанельСпискаКнопки.Т2;
		
	Иначе
		// Движения документа
		Если мТекущийДокументДвижения <> мТекущийДокументСсылка Тогда
			мТекущийДокументДвижения = мТекущийДокументСсылка;
			мТекущийДокументДвиженияДокумента = мТекущийДокументСсылка.ПолучитьОбъект().Движения;
		КонецЕсли;
		ЗакладкаДвижение = мТекущийДокументДвиженияДокумента[Закладка.Имя];
		ЗакладкаДвижение.Прочитать();
		
		ТаблицаРеквизитов = ЗакладкаДвижение.Выгрузить();
		ПолеТЧ.Значение = ТаблицаРеквизитов;
		Если Закладка.СтарыйИсточник <> Закладка.Источник Тогда
			ПолеТЧ.СоздатьКолонки();
			Колонки = ПолеТЧ.Колонки;
			Колонки.Регистратор.Видимость = Ложь;
			Закладка.СтарыйИсточник = Закладка.Источник;
			
			Ключ = Закладка.Источник;
			НастройкаКолонокДляТабличногоПоля = СтруктураНастроекКолонокТабличныхПолей.Получить(Ключ);
			Если НастройкаКолонокДляТабличногоПоля = Неопределено Тогда
				НастройкаКолонокДляТабличногоПоля = ПолучитьНастройкуКолонокТабличногоПоля(Ключ, Истина);
				СтруктураНастроекКолонокТабличныхПолей.Вставить(Ключ, НастройкаКолонокДляТабличногоПоля);
			КонецЕсли;
			
			мПрименитьНастройкуКолонокСписка(НастройкаКолонокДляТабличногоПоля, Колонки, Истина);
			
			// Отобразим булево как галочки
			//
			// Код в комментарии записаный в 1 строку находится ниже этого комментария
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Для каждого КолонкаТЧ Из ПолеТЧ.Значение.Колонки Цикл
			//	Если КолонкаТЧ.ТипЗначения = ОписаниеТипаБулево Тогда
			//		Колонка = Колонки[КолонкаТЧ.Имя];
			//		Колонка.ДанныеФлажка = Колонка.Данные;
			//		Колонка.Данные = "";
			//	КонецЕсли;
			//КонецЦикла;

			// Код записанный в 1 строку находится в комментарии расположенном выше
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			Для каждого КолонкаТЧ Из ПолеТЧ.Значение.Колонки Цикл Если КолонкаТЧ.ТипЗначения = ОписаниеТипаБулево Тогда Колонка = Колонки[КолонкаТЧ.Имя]; Колонка.ДанныеФлажка = Колонка.Данные; Колонка.Данные = ""; КонецЕсли; КонецЦикла;
		КонецЕсли;
		
		ПолеТЧ.КонтекстноеМеню = ЭлементыФормыКоманднаяПанельСпискаКнопки.Т3;
	КонецЕсли;
	
	Если УстановитьВидимость Тогда
		// Показываем добавленный реквизит на закладке, если показывать реквизит сразу,
		// то виден процесс его прорисовки как мелькание на экране
		ПолеТЧ.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДанныеНаСтранице()

Процедура РазвернутьУровеньПоСтроке(Строка)
	
	Если ВидСпискаДокументов = "ДеревоПодчиненных" Тогда
		СтрокиСтроки = Строка.Строки;
		СтрокиСтроки.Очистить();
		Если мСоставКритерияОтбора = Неопределено Тогда
			Таблица = ПолучитьПодчиненныеПоСсылке(Строка.Ссылка);
		Иначе
			Таблица = ПолучитьПодчиненныеПоСсылкеПоКритериюОтбора(Строка.Ссылка);
		КонецЕсли;
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого СтрокаТаблицы Из Таблица Цикл
		//	ЗаполнитьЗначенияСвойств(СтрокиСтроки.Добавить(), ПолучитьДанныеПоСсылке(СтрокаТаблицы.Ссылка));
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого СтрокаТаблицы Из Таблица Цикл ЗаполнитьЗначенияСвойств(СтрокиСтроки.Добавить(), ПолучитьДанныеПоСсылке(СтрокаТаблицы.Ссылка)); КонецЦикла;
	Иначе
		ОбновитьДанныеПоГруппировке(Строка);
	КонецЕсли;
	
	Строка.УровеньРазвернут = Истина;
	
КонецПроцедуры // РазвернутьУровеньПоСтроке()

Процедура РазвернутьУровниПоСписку(СписокСтрок, Счетчик, мИндикаторСостояния)
	Перем ТаблицаСсылок;
	Перем ТаблицаПодчиненныхСсылок;
	
	Если ВидСпискаДокументов = "ДеревоПодчиненных" Тогда
		// Все ссылки по видам сгруппируем в структуры
		СтруктураСсылок = Новый Структура;
		СтруктураПодчиненныхСсылок = Новый Структура;
		Строки = СписокДокументов.Строки;
		
		// Ссылки первого уровня
		//
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого СтрокаСписка Из СписокСтрок Цикл
		//	Документ = СтрокаСписка.Ссылка;
		//	ИмяДокумента = Документ.Метаданные().Имя;
		//	Если Не СтруктураСсылок.Свойство(ИмяДокумента, ТаблицаСсылок) Тогда
		//		ТаблицаСсылок = Новый ТаблицаЗначений;
		//		Колонки = ТаблицаСсылок.Колонки; Колонки.Добавить("Индекс", ОписаниеТипаЧисло);
		//		Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка." + ИмяДокумента));
		//		СтруктураСсылок.Вставить(ИмяДокумента, ТаблицаСсылок);
		//	КонецЕсли;
		//	НоваяСтрока = ТаблицаСсылок.Добавить();
		//	НоваяСтрока.Индекс = Строки.Индекс(СтрокаСписка);
		//	НоваяСтрока.Ссылка = Документ;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого СтрокаСписка Из СписокСтрок Цикл Документ = СтрокаСписка.Ссылка; ИмяДокумента = Документ.Метаданные().Имя; Если Не СтруктураСсылок.Свойство(ИмяДокумента, ТаблицаСсылок) Тогда ТаблицаСсылок = Новый ТаблицаЗначений; Колонки = ТаблицаСсылок.Колонки; Колонки.Добавить("Индекс", ОписаниеТипаЧисло); Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка." + ИмяДокумента)); СтруктураСсылок.Вставить(ИмяДокумента, ТаблицаСсылок); КонецЕсли; НоваяСтрока = ТаблицаСсылок.Добавить(); НоваяСтрока.Индекс = Строки.Индекс(СтрокаСписка); НоваяСтрока.Ссылка = Документ; КонецЦикла;
		
		// Развернем для каждого вида документов отдельным запросом
		//
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого ТаблицаСсылок Из СтруктураСсылок Цикл
		//	Если мСоставКритерияОтбора = Неопределено Тогда
		//		Список = ПолучитьПодчиненныеПоСписку(ТаблицаСсылок.Значение);
		//	Иначе
		//		Список = ПолучитьПодчиненныеПоСпискуПоКритериюОтбора(ТаблицаСсылок.Значение);
		//	КонецЕсли;
		//	Если Список.Количество() = 0 Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	Список.Индексы.Добавить("Индекс");
		//	СтруктураСсылок.Вставить(ТаблицаСсылок.Ключ, Список);
		//	Для каждого СтрокаСписка Из Список Цикл
		//		Документ = СтрокаСписка.Ссылка;
		//		Если ЗначениеЗаполнено(Документ) Тогда
		//			ИмяДокумента = Документ.Метаданные().Имя;
		//			Если Не СтруктураПодчиненныхСсылок.Свойство(ИмяДокумента, ТаблицаПодчиненныхСсылок) Тогда
		//				ТаблицаПодчиненныхСсылок = Новый Массив;
		//				СтруктураПодчиненныхСсылок.Вставить(ИмяДокумента, ТаблицаПодчиненныхСсылок);
		//			КонецЕсли;
		//			ТаблицаПодчиненныхСсылок.Добавить(Документ);
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого ТаблицаСсылок Из СтруктураСсылок Цикл Если мСоставКритерияОтбора = Неопределено Тогда Список = ПолучитьПодчиненныеПоСписку(ТаблицаСсылок.Значение); Иначе Список = ПолучитьПодчиненныеПоСпискуПоКритериюОтбора(ТаблицаСсылок.Значение); КонецЕсли; Если Список.Количество() = 0 Тогда Продолжить; КонецЕсли; Список.Индексы.Добавить("Индекс"); СтруктураСсылок.Вставить(ТаблицаСсылок.Ключ, Список); Для каждого СтрокаСписка Из Список Цикл Документ = СтрокаСписка.Ссылка; Если ЗначениеЗаполнено(Документ) Тогда ИмяДокумента = Документ.Метаданные().Имя; Если Не СтруктураПодчиненныхСсылок.Свойство(ИмяДокумента, ТаблицаПодчиненныхСсылок) Тогда ТаблицаПодчиненныхСсылок = Новый Массив; СтруктураПодчиненныхСсылок.Вставить(ИмяДокумента, ТаблицаПодчиненныхСсылок); КонецЕсли; ТаблицаПодчиненныхСсылок.Добавить(Документ); КонецЕсли; КонецЦикла; КонецЦикла;
		
		// Ссылки второго уровня по видам документов
		//
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого ТаблицаПодчиненныхСсылок Из СтруктураПодчиненныхСсылок Цикл
		//	СписокПодчиненных = ПолучитьДанныеПоСписку(ТаблицаПодчиненныхСсылок);
		//	СтруктураПодчиненныхСсылок.Вставить(ТаблицаПодчиненныхСсылок.Ключ, СписокПодчиненных);
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого ТаблицаПодчиненныхСсылок Из СтруктураПодчиненныхСсылок Цикл СписокПодчиненных = ПолучитьДанныеПоСписку(ТаблицаПодчиненныхСсылок); СтруктураПодчиненныхСсылок.Вставить(ТаблицаПодчиненныхСсылок.Ключ, СписокПодчиненных); КонецЦикла;
		
		// Заполнение дерева подчиненными
		//
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого СтрокаСписка Из СписокСтрок Цикл
		//	СтрокиСтрокиСписка = СтрокаСписка.Строки;
		//	СтрокиСтрокиСписка.Очистить();
		//	Документ = СтрокаСписка.Ссылка;
		//	ИмяДокумента = Документ.Метаданные().Имя;
		//	Если СтруктураСсылок.Свойство(ИмяДокумента, ТаблицаСсылок) Тогда
		//		Для каждого СтрокаСтрокиСсылок Из ТаблицаСсылок.НайтиСтроки(Новый Структура("Индекс", Строки.Индекс(СтрокаСписка))) Цикл
		//			СтрокаСтрокиСсылка = СтрокаСтрокиСсылок.Ссылка;
		//			Если СтруктураПодчиненныхСсылок.Свойство(СтрокаСтрокиСсылка.Метаданные().Имя, ТаблицаПодчиненныхСсылок) Тогда
		//				ПодчиненаяСсылка = ТаблицаПодчиненныхСсылок.Найти(СтрокаСтрокиСсылка, "Ссылка");
		//				Если ПодчиненаяСсылка <> Неопределено Тогда
		//					ЗаполнитьЗначенияСвойств(СтрокиСтрокиСписка.Добавить(), ПодчиненаяСсылка);
		//				КонецЕсли;
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//	СтрокаСписка.УровеньРазвернут = Истина;
		//	Счетчик = Счетчик + 2;
		//	мИндикаторСостояния.Значение = Счетчик;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого СтрокаСписка Из СписокСтрок Цикл СтрокиСтрокиСписка = СтрокаСписка.Строки; СтрокиСтрокиСписка.Очистить(); Документ = СтрокаСписка.Ссылка; ИмяДокумента = Документ.Метаданные().Имя; Если СтруктураСсылок.Свойство(ИмяДокумента, ТаблицаСсылок) Тогда Для каждого СтрокаСтрокиСсылок Из ТаблицаСсылок.НайтиСтроки(Новый Структура("Индекс", Строки.Индекс(СтрокаСписка))) Цикл СтрокаСтрокиСсылка = СтрокаСтрокиСсылок.Ссылка; Если СтруктураПодчиненныхСсылок.Свойство(СтрокаСтрокиСсылка.Метаданные().Имя, ТаблицаПодчиненныхСсылок) Тогда ПодчиненаяСсылка = ТаблицаПодчиненныхСсылок.Найти(СтрокаСтрокиСсылка, "Ссылка"); Если ПодчиненаяСсылка <> Неопределено Тогда ЗаполнитьЗначенияСвойств(СтрокиСтрокиСписка.Добавить(), ПодчиненаяСсылка); КонецЕсли; КонецЕсли; КонецЦикла; КонецЕсли; СтрокаСписка.УровеньРазвернут = Истина; Счетчик = Счетчик + 2; мИндикаторСостояния.Значение = Счетчик; КонецЦикла;
	Иначе
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого СтрокаСписка Из СписокСтрок Цикл
		//	ОбновитьДанныеПоГруппировке(СтрокаСписка);
		//	СтрокаСписка.УровеньРазвернут = Истина;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого СтрокаСписка Из СписокСтрок Цикл ОбновитьДанныеПоГруппировке(СтрокаСписка); СтрокаСписка.УровеньРазвернут = Истина; КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // РазвернутьУровниПоСписку()

Процедура РазвернутьВсеУровени()
	
	Если ОтображатьДокументыВВидеДерева и РазворачиватьУровни Тогда
		КоманднаяПанельРазвернутьВсеСтроки("");
	КонецЕсли;
	
	Если мТекущаяСтрокаТаблицы <> Неопределено Тогда
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормыСписокДокументов;
		ЭлементыФормыСписокДокументов.ТекущаяСтрока = мТекущаяСтрокаТаблицы;
	КонецЕсли;
	
КонецПроцедуры // РазвернутьВсеУровени()



Функция НайтиДокументВСпискеДокументов(НайденныйДокумент)
	
	Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
		
		// Теперь необходимо спозиционироваться на документ в списке
		ТекущаяСтрока = СписокДокументов.Строки.Найти(НайденныйДокумент, "Ссылка", Истина);
		Если ТекущаяСтрока = Неопределено и ОтображатьДокументыВВидеДерева и ВидСпискаДокументов <> "ДеревоПодчиненных" Тогда
			// Документ не нашли в текущем дереве, возможно он находится на свернутом уровне
			Если ВидСпискаДокументов = "ДеревоПоДням" Тогда
				ЗначениеДляПоиска = НачалоДня(НайденныйДокумент.Дата);
				КолонкаДляПоиска = "Дата";
			ИначеЕсли ВидСпискаДокументов = "ДеревоПоМесяцам" Тогда
				ЗначениеДляПоиска = НачалоМесяца(НайденныйДокумент.Дата);
				КолонкаДляПоиска = "Дата";
			ИначеЕсли ВидСпискаДокументов = "ДеревоПоВидуДокумента" Тогда
				ЗначениеДляПоиска = НайденныйДокумент.Метаданные().Представление();
				//ЗначениеДляПоиска = НайденныйДокумент.Метаданные().Синоним + "          ";
				КолонкаДляПоиска = "ВидДокумента";
			Иначе // ДеревоПоГрафе
				СтруктураГраф = ПолучитьСтруктуруГраф();
				ИмяДокумента = НайденныйДокумент.Метаданные().Имя;
				Если ДоступныеДокументы.Найти(ИмяДокумента, "ИмяДокумента") = Неопределено Тогда
					ЗначениеДляПоиска = "";
					КолонкаДляПоиска = "";
				Иначе
					ГрафаДляПоиска = Сред(СтруктураГраф.__Графа1[ИмяДокумента], 12);
					Если ГрафаДляПоиска = "" Тогда
						ЗначениеДляПоиска = "";
						КолонкаДляПоиска = "";
					Иначе
						ЗначениеДляПоиска = НайденныйДокумент[ГрафаДляПоиска];
						КолонкаДляПоиска = "__Графа1";
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			
			Если КолонкаДляПоиска <> "" Тогда
				ТекущаяСтрока = СписокДокументов.Строки.Найти(ЗначениеДляПоиска, КолонкаДляПоиска, Ложь);
				Если ТекущаяСтрока <> Неопределено и Не ТекущаяСтрока.УровеньРазвернут Тогда
					// Поищем на свернутом уровне
					ОбновитьДанныеПоГруппировке(ТекущаяСтрока);
					ТекущаяСтрока.УровеньРазвернут = Истина;
					
					ТекущаяСтрока = ТекущаяСтрока.Строки.Найти(НайденныйДокумент, "Ссылка", Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтображатьДокументыВВидеДерева и ВидСпискаДокументов = "ДеревоПодчиненных" Тогда
		СписокДокументовСтроки = СписокДокументов.Строки;
		Если ТекущаяСтрока = Неопределено Тогда
			ИндексСтроки = 0
		Иначе
			ИндексСтроки = СписокДокументовСтроки.Индекс(ТекущаяСтрока)
		КонецЕсли;
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для Индекс = Макс(0, ИндексСтроки - 40) По Мин(ИндексСтроки + 80, СписокДокументовСтроки.Количество() - 1) Цикл
		//	Строка = СписокДокументовСтроки[Индекс];
		//	Если Не Строка.УровеньРазвернут и Строка.Строки.Количество() = 0 Тогда
		//		Строка.Строки.Добавить();
		//	КонецЕсли;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для Индекс = Макс(0, ИндексСтроки - 40) По Мин(ИндексСтроки + 80, СписокДокументовСтроки.Количество() - 1) Цикл Строка = СписокДокументовСтроки[Индекс]; Если Не Строка.УровеньРазвернут и Строка.Строки.Количество() = 0 Тогда Строка.Строки.Добавить(); КонецЕсли; КонецЦикла;
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции // НайтиДокументВСпискеДокументов()

Функция ПолучитьДанныеПоСписку(ТаблицаПодчиненныхСсылок)
	Перем МетаданныеДокумента;
	
	Запрос = Новый Запрос;
	ИмяДокумента = ТаблицаПодчиненныхСсылок.Ключ;
	СтруктураМетаданныеДокументы.Свойство(ИмяДокумента, МетаданныеДокумента);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ?(МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить, "
	|	ВЫБОР КОГДА __Документ.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
	|	ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
	|	__Документ.Дата,
	|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер", "NULL") + " КАК Номер,
	|	""" + МетаданныеДокумента.Представление + """  КАК ВидДокумента,
	|	__Документ.Ссылка,
	|	__Документ.ПометкаУдаления,
	|	__Документ.Проведен";
	
	Индекс = 0;
	ТекстЗапросаДляГраф = "";
	ТекстЗапросаСоединение = "";
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл
	//	Индекс = Индекс + 1;
	//	Значение = ВыводимаяГрафа.Значение;
	//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
	//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
	//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
	//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
	//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
	//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
	//		Запрос.УстановитьПараметр(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
	//	КонецЕсли;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; Запрос.УстановитьПараметр(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); КонецЕсли; КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляГраф + "
	|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
	|ГДЕ __Документ.Ссылка В (&СсылкиДокументов)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СсылкиДокументов", ТаблицаПодчиненныхСсылок.Значение);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеПоСписку()

Функция ПолучитьДанныеПоСсылке(СсылкаДокумента)
	
	Запрос = Новый Запрос;
	МетаданныеДокумента = СсылкаДокумента.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ?(МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить, "
	|	ВЫБОР КОГДА __Документ.Проведен ТОГДА 1 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 3 ИНАЧЕ 2 КОНЕЦ КОНЕЦ КАК Иконка", "
	|	ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Иконка") + ",
	|	__Документ.Дата,
	|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер", "NULL") + " КАК Номер,
	|	""" + МетаданныеДокумента.Представление() + """  КАК ВидДокумента,
	|	__Документ.Ссылка,
	|	__Документ.ПометкаУдаления,
	|	__Документ.Проведен";
	
	Индекс = 0;
	ТекстЗапросаДляГраф = "";
	ТекстЗапросаСоединение = "";
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл
	//	Индекс = Индекс + 1;
	//	Значение = ВыводимаяГрафа.Значение;
	//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
	//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
	//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
	//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
	//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
	//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
	//		Запрос.УстановитьПараметр(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
	//	КонецЕсли;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; Запрос.УстановитьПараметр(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); КонецЕсли; КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляГраф + "
	|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
	|ГДЕ __Документ.Ссылка = &СсылкаДокумента";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СсылкаДокумента", СсылкаДокумента);
	Возврат Запрос.Выполнить().Выгрузить()[0];
	
КонецФункции // ПолучитьДанныеПоСсылке()

Функция ПолучитьПодчиненныеПоСпискуПоКритериюОтбора(ТаблицаСсылок)
	
	ЗначениеКритерия = ТаблицаСсылок[0].Ссылка;
	Если мТаблицаКритерияОтбора = Неопределено Тогда
		мТаблицаКритерияОтбора = Новый ТаблицаЗначений;
		Колонки = мТаблицаКритерияОтбора.Колонки;
		Колонки.Добавить("ИмяДокумента");
		Колонки.Добавить("Тип");
		Колонки.Добавить("ИмяТабличнойЧасти");
		Колонки.Добавить("ИмяРеквизита");
		
		ТекстЗапроса = "";
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого ЭлементСостава ИЗ мСоставКритерияОтбора Цикл
		//	МассивСостава = ЗначениеИзСтрокиВнутр("{""#"",51e7a0d2-530b-11d4-b98a-008048da3034,{0,{""S"",""" + СтрЗаменить(ЭлементСостава.ПолноеИмя(), ".", """},{""S"",""") + """}}}");
		//	Если МассивСостава[0] <> "Документ" или НЕ ПравоДоступа("Чтение", ЭлементСостава.Родитель()) или ДоступныеДокументы.Найти(МассивСостава[1], "ИмяДокумента") = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	Если МассивСостава[2] = "ТабличнаяЧасть" Тогда
		//		ИмяТабличнойЧасти = "." + МассивСостава[3];
		//		ИмяРеквизита = МассивСостава[5];
		//	Иначе
		//		ИмяТабличнойЧасти = "";
		//		ИмяРеквизита = МассивСостава[3];
		//	КонецЕсли;
		//	ТекстЗапроса = ?(ТекстЗапроса = "", "", ТекстЗапроса + " ; ") + "ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Документ." + МассивСостава[1] + ИмяТабличнойЧасти + " КАК __Документ";
		//	НоваяСтрока = мТаблицаКритерияОтбора.Добавить();
		//	НоваяСтрока.ИмяДокумента = МассивСостава[1];
		//	НоваяСтрока.Тип = ЭлементСостава.Тип;
		//	НоваяСтрока.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
		//	НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого ЭлементСостава ИЗ мСоставКритерияОтбора Цикл МассивСостава = ЗначениеИзСтрокиВнутр("{""#"",51e7a0d2-530b-11d4-b98a-008048da3034,{0,{""S"",""" + СтрЗаменить(ЭлементСостава.ПолноеИмя(), ".", """},{""S"",""") + """}}}"); Если МассивСостава[0] <> "Документ" или НЕ ПравоДоступа("Чтение", ЭлементСостава.Родитель()) или ДоступныеДокументы.Найти(МассивСостава[1], "ИмяДокумента") = Неопределено Тогда Продолжить; КонецЕсли; Если МассивСостава[2] = "ТабличнаяЧасть" Тогда ИмяТабличнойЧасти = "." + МассивСостава[3]; ИмяРеквизита = МассивСостава[5]; Иначе ИмяТабличнойЧасти = ""; ИмяРеквизита = МассивСостава[3]; КонецЕсли; ТекстЗапроса = ?(ТекстЗапроса = "", "", ТекстЗапроса + " ; ") + "ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Документ." + МассивСостава[1] + ИмяТабличнойЧасти + " КАК __Документ"; НоваяСтрока = мТаблицаКритерияОтбора.Добавить(); НоваяСтрока.ИмяДокумента = МассивСостава[1]; НоваяСтрока.Тип = ЭлементСостава.Тип; НоваяСтрока.ИмяТабличнойЧасти = ИмяТабличнойЧасти; НоваяСтрока.ИмяРеквизита = ИмяРеквизита; КонецЦикла;
		
		Если ТекстЗапроса = "" Тогда
			Возврат Новый ТаблицаЗначений;
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для Индекс = 1 - МассивРезультатов.Количество() По 0 Цикл
		//	Если МассивРезультатов[-Индекс].Пустой() Тогда
		//		мТаблицаКритерияОтбора.Удалить(-Индекс);
		//	КонецЕсли;
		//КонецЦикла; 

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для Индекс = 1 - МассивРезультатов.Количество() По 0 Цикл Если МассивРезультатов[-Индекс].Пустой() Тогда мТаблицаКритерияОтбора.Удалить(-Индекс); КонецЕсли; КонецЦикла;
	КонецЕсли;
	
	Если мТаблицаКритерияОтбора.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТекстЗапроса = "";
	ТипКритерия = ТипЗнч(ЗначениеКритерия);
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ЭлементСостава ИЗ мТаблицаКритерияОтбора Цикл
	//	Если Не ЭлементСостава.Тип.СодержитТип(ТипКритерия) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ ", "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + " __Документ." + ЭлементСостава.ИмяРеквизита + " КАК СсылкаДляСоединения, __Документ.Ссылка ИЗ Документ." + ЭлементСостава.ИмяДокумента + ЭлементСостава.ИмяТабличнойЧасти + " КАК __Документ ГДЕ __Документ." + ЭлементСостава.ИмяРеквизита + " В (&ЗначениеКритерияОтбора) ";
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ЭлементСостава ИЗ мТаблицаКритерияОтбора Цикл Если Не ЭлементСостава.Тип.СодержитТип(ТипКритерия) Тогда Продолжить; КонецЕсли; ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ ", "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + " __Документ." + ЭлементСостава.ИмяРеквизита + " КАК СсылкаДляСоединения, __Документ.Ссылка ИЗ Документ." + ЭлементСостава.ИмяДокумента + ЭлементСостава.ИмяТабличнойЧасти + " КАК __Документ ГДЕ __Документ." + ЭлементСостава.ИмяРеквизита + " В (&ЗначениеКритерияОтбора) "; КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
				   |	ТаблицаСсылок.Индекс,
				   |	ТаблицаСсылок.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ТаблицаСсылок
				   |ИЗ
				   |	&ТаблицаСсылок КАК ТаблицаСсылок
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ТаблицаСсылок.Индекс,
				   |	ВложенныйЗапрос.Ссылка
				   |ИЗ
				   |	ТаблицаСсылок КАК ТаблицаСсылок
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ТекстЗапроса + ") КАК ВложенныйЗапрос
				   |		ПО ТаблицаСсылок.Ссылка = ВложенныйЗапрос.СсылкаДляСоединения";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаСсылок", ТаблицаСсылок);
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьПодчиненныеПоСпискуПоКритериюОтбора()

Функция ПолучитьПодчиненныеПоСписку(ТаблицаСсылок)
	
	СсылкаИзСписка = ТаблицаСсылок[0].Ссылка;
	
	// Первый фильтр. Проверка на используемые документы, попадающие под условие
	ТекстЗапроса = "";
	ВидСсылки = СсылкаИзСписка.Метаданные().Имя;
	ТипСсылки = ТипЗнч(СсылкаИзСписка);
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого МетаданныеДокумента ИЗ ТаблицаМетаданныеДокументы Цикл
	//	ИмяДокумента = МетаданныеДокумента.Имя;
	//	Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента.Метаданные) или ДоступныеДокументы.Найти(ИмяДокумента, "ИмяДокумента") = Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Для каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
	//		Если Лев(Реквизит.Имя, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда
	//			ТекстЗапроса = ?(ТекстЗапроса = "", "", ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ") + "ВЫБРАТЬ ПЕРВЫЕ 1 """ + ИмяДокумента + """ КАК ИмяДокумента, """" КАК ИмяТабличнойЧасти ИЗ Документ." + ИмяДокумента + " КАК __Документ";
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	Для каждого ТабличнаяЧасть ИЗ МетаданныеДокумента.ТабличныеЧасти Цикл
	//		ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
	//		Для каждого Реквизит ИЗ ТабличнаяЧасть.Реквизиты Цикл
	//			Если Лев(Реквизит.Имя, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда
	//				ТекстЗапроса = ?(ТекстЗапроса = "", "", ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ") + "ВЫБРАТЬ ПЕРВЫЕ 1 """ + ИмяДокумента + """ КАК ИмяДокумента, """ + ИмяТабличнойЧасти + """ КАК ИмяТабличнойЧасти ИЗ Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК __Документ";
	//				Прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого МетаданныеДокумента ИЗ ТаблицаМетаданныеДокументы Цикл ИмяДокумента = МетаданныеДокумента.Имя; Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента.Метаданные) или ДоступныеДокументы.Найти(ИмяДокумента, "ИмяДокумента") = Неопределено Тогда Продолжить; КонецЕсли; Для каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл Если Лев(Реквизит.Имя, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда ТекстЗапроса = ?(ТекстЗапроса = "", "", ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ") + "ВЫБРАТЬ ПЕРВЫЕ 1 """ + ИмяДокумента + """ КАК ИмяДокумента, """" КАК ИмяТабличнойЧасти ИЗ Документ." + ИмяДокумента + " КАК __Документ"; Прервать; КонецЕсли; КонецЦикла; Для каждого ТабличнаяЧасть ИЗ МетаданныеДокумента.ТабличныеЧасти Цикл ИмяТабличнойЧасти = ТабличнаяЧасть.Имя; Для каждого Реквизит ИЗ ТабличнаяЧасть.Реквизиты Цикл Если Лев(Реквизит.Имя, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда ТекстЗапроса = ?(ТекстЗапроса = "", "", ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ") + "ВЫБРАТЬ ПЕРВЫЕ 1 """ + ИмяДокумента + """ КАК ИмяДокумента, """ + ИмяТабличнойЧасти + """ КАК ИмяТабличнойЧасти ИЗ Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК __Документ"; Прервать; КонецЕсли; КонецЦикла; КонецЦикла; КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Второй фильтр. Проверка на реквизиты в которых могут быть ссылки
	ТекстЗапроса = "";
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Пока Выборка.Следующий() Цикл
	//	ИмяДокумента = Выборка.ИмяДокумента;
	//	СтруктураМетаданныеДокументы.Свойство(ИмяДокумента, МетаданныеДокумента);
	//	Если Выборка.ИмяТабличнойЧасти = "" Тогда
	//		Для каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
	//			ИмяРеквизита = Реквизит.Имя;
	//			Если Лев(ИмяРеквизита, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда
	//				ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ ", "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + "ВЫРАЗИТЬ(__Документ." + ИмяРеквизита + " КАК Документ." + ВидСсылки + ") КАК СсылкаДляСоединения, __Документ.Ссылка ИЗ Документ." + ИмяДокумента + " КАК __Документ ГДЕ __Документ." + ИмяРеквизита + " ССЫЛКА Документ." + ВидСсылки + " И __Документ." + ИмяРеквизита + " В (&ЗначениеКритерияОтбора) ";
	//			КонецЕсли;
	//		КонецЦикла;
	//	Иначе
	//		ИмяТабличнойЧасти = Выборка.ИмяТабличнойЧасти;
	//		ТабличнаяЧасть = МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти];
	//		Для каждого Реквизит ИЗ ТабличнаяЧасть.Реквизиты Цикл
	//			ИмяРеквизита = Реквизит.Имя;
	//			Если Лев(ИмяРеквизита, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда
	//				ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗЛИЧНЫЕ ", "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ РАЗЛИЧНЫЕ ") + "ВЫРАЗИТЬ(__Документ." + ИмяРеквизита + " КАК Документ." + ВидСсылки + ") КАК СсылкаДляСоединения, __Документ.Ссылка ИЗ Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК __Документ ГДЕ __Документ." + ИмяРеквизита + " ССЫЛКА Документ." + ВидСсылки + " И __Документ." + ИмяРеквизита + " В (&ЗначениеКритерияОтбора) ";
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Пока Выборка.Следующий() Цикл ИмяДокумента = Выборка.ИмяДокумента; СтруктураМетаданныеДокументы.Свойство(ИмяДокумента, МетаданныеДокумента); Если Выборка.ИмяТабличнойЧасти = "" Тогда Для каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл ИмяРеквизита = Реквизит.Имя; Если Лев(ИмяРеквизита, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ ", "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + "ВЫРАЗИТЬ(__Документ." + ИмяРеквизита + " КАК Документ." + ВидСсылки + ") КАК СсылкаДляСоединения, __Документ.Ссылка ИЗ Документ." + ИмяДокумента + " КАК __Документ ГДЕ __Документ." + ИмяРеквизита + " ССЫЛКА Документ." + ВидСсылки + " И __Документ." + ИмяРеквизита + " В (&ЗначениеКритерияОтбора) "; КонецЕсли; КонецЦикла; Иначе ИмяТабличнойЧасти = Выборка.ИмяТабличнойЧасти; ТабличнаяЧасть = МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти]; Для каждого Реквизит ИЗ ТабличнаяЧасть.Реквизиты Цикл ИмяРеквизита = Реквизит.Имя; Если Лев(ИмяРеквизита, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗЛИЧНЫЕ ", "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ РАЗЛИЧНЫЕ ") + "ВЫРАЗИТЬ(__Документ." + ИмяРеквизита + " КАК Документ." + ВидСсылки + ") КАК СсылкаДляСоединения, __Документ.Ссылка ИЗ Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК __Документ ГДЕ __Документ." + ИмяРеквизита + " ССЫЛКА Документ." + ВидСсылки + " И __Документ." + ИмяРеквизита + " В (&ЗначениеКритерияОтбора) "; КонецЕсли; КонецЦикла; КонецЕсли; КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
				   |	ТаблицаСсылок.Индекс,
				   |	ТаблицаСсылок.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ТаблицаСсылок
				   |ИЗ
				   |	&ТаблицаСсылок КАК ТаблицаСсылок
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ТаблицаСсылок.Индекс,
				   |	ВложенныйЗапрос.Ссылка
				   |ИЗ
				   |	ТаблицаСсылок КАК ТаблицаСсылок
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ТекстЗапроса + ") КАК ВложенныйЗапрос
				   |		ПО ТаблицаСсылок.Ссылка = ВложенныйЗапрос.СсылкаДляСоединения";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаСсылок", ТаблицаСсылок);
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьПодчиненныеПоСписку()

Функция ПолучитьПодчиненныеПоСсылкеПоКритериюОтбора(ЗначениеКритерия)
	Перем ТекстЗапроса;
		
	Если СтруктураЗапросовДляПодчиненныхДокументов = Неопределено Тогда
		СтруктураЗапросовДляПодчиненныхДокументов = Новый Структура;
	КонецЕсли;
	
	ИмяДокумента = ЗначениеКритерия.Метаданные().Имя;
	Если СтруктураЗапросовДляПодчиненныхДокументов.Свойство(ИмяДокумента, ТекстЗапроса) Тогда
		Если ТекстЗапроса = "" Тогда
			Возврат Новый ТаблицаЗначений;
		КонецЕсли;
	Иначе
		Если мТаблицаКритерияОтбора = Неопределено Тогда
			мТаблицаКритерияОтбора = Новый ТаблицаЗначений;
			Колонки = мТаблицаКритерияОтбора.Колонки;
			Колонки.Добавить("ИмяДокумента");
			Колонки.Добавить("Тип");
			Колонки.Добавить("ИмяТабличнойЧасти");
			Колонки.Добавить("ИмяРеквизита");
			
			ТекстЗапроса = "";
			// Код в комментарии записаный в 1 строку находится ниже этого комментария
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Для каждого ЭлементСостава ИЗ мСоставКритерияОтбора Цикл
			//	МассивСостава = ЗначениеИзСтрокиВнутр("{""#"",51e7a0d2-530b-11d4-b98a-008048da3034,{0,{""S"",""" + СтрЗаменить(ЭлементСостава.ПолноеИмя(), ".", """},{""S"",""") + """}}}");
			//	Если МассивСостава[0] <> "Документ" или НЕ ПравоДоступа("Чтение", ЭлементСостава.Родитель()) или ДоступныеДокументы.Найти(МассивСостава[1], "ИмяДокумента") = Неопределено Тогда
			//		Продолжить;
			//	КонецЕсли;
			//	
			//	Если МассивСостава[2] = "ТабличнаяЧасть" Тогда
			//		ИмяТабличнойЧасти = "." + МассивСостава[3];
			//		ИмяРеквизита = МассивСостава[5];
			//	Иначе
			//		ИмяТабличнойЧасти = "";
			//		ИмяРеквизита = МассивСостава[3];
			//	КонецЕсли;
			//	
			//	ТекстЗапроса = ?(ТекстЗапроса = "", "", ТекстЗапроса + " ; ") +
			//	"ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Документ." + МассивСостава[1] + ИмяТабличнойЧасти + " КАК __Документ";
			//	
			//	НоваяСтрока = мТаблицаКритерияОтбора.Добавить();
			//	НоваяСтрока.ИмяДокумента = МассивСостава[1];
			//	НоваяСтрока.Тип = ЭлементСостава.Тип;
			//	НоваяСтрока.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
			//	НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
			//КонецЦикла;

			// Код записанный в 1 строку находится в комментарии расположенном выше
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			Для каждого ЭлементСостава ИЗ мСоставКритерияОтбора Цикл МассивСостава = ЗначениеИзСтрокиВнутр("{""#"",51e7a0d2-530b-11d4-b98a-008048da3034,{0,{""S"",""" + СтрЗаменить(ЭлементСостава.ПолноеИмя(), ".", """},{""S"",""") + """}}}"); Если МассивСостава[0] <> "Документ" или НЕ ПравоДоступа("Чтение", ЭлементСостава.Родитель()) или ДоступныеДокументы.Найти(МассивСостава[1], "ИмяДокумента") = Неопределено Тогда Продолжить; КонецЕсли; Если МассивСостава[2] = "ТабличнаяЧасть" Тогда ИмяТабличнойЧасти = "." + МассивСостава[3]; ИмяРеквизита = МассивСостава[5]; Иначе ИмяТабличнойЧасти = ""; ИмяРеквизита = МассивСостава[3]; КонецЕсли; ТекстЗапроса = ?(ТекстЗапроса = "", "", ТекстЗапроса + " ; ") + "ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Документ." + МассивСостава[1] + ИмяТабличнойЧасти + " КАК __Документ"; НоваяСтрока = мТаблицаКритерияОтбора.Добавить(); НоваяСтрока.ИмяДокумента = МассивСостава[1]; НоваяСтрока.Тип = ЭлементСостава.Тип; НоваяСтрока.ИмяТабличнойЧасти = ИмяТабличнойЧасти; НоваяСтрока.ИмяРеквизита = ИмяРеквизита; КонецЦикла;
			
			Если ТекстЗапроса = "" Тогда
				МассивРезультатов = Новый Массив;
			Иначе
				Запрос = Новый Запрос(ТекстЗапроса);
				МассивРезультатов = Запрос.ВыполнитьПакет();
			КонецЕсли;
			// Код в комментарии записаный в 1 строку находится ниже этого комментария
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Для Индекс = 1 - МассивРезультатов.Количество() По 0 Цикл
			//	Если МассивРезультатов[-Индекс].Пустой() Тогда
			//		мТаблицаКритерияОтбора.Удалить(-Индекс);
			//	КонецЕсли;
			//КонецЦикла; 

			// Код записанный в 1 строку находится в комментарии расположенном выше
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			Для Индекс = 1 - МассивРезультатов.Количество() По 0 Цикл Если МассивРезультатов[-Индекс].Пустой() Тогда мТаблицаКритерияОтбора.Удалить(-Индекс); КонецЕсли; КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса = "";
		ТипКритерия = ТипЗнч(ЗначениеКритерия);
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого ЭлементСостава ИЗ мТаблицаКритерияОтбора Цикл
		//	Если Не ЭлементСостава.Тип.СодержитТип(ТипКритерия) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ ", "ОБЪЕДИНИТЬ ВСЕ
		//	|ВЫБРАТЬ ") + "
		//	|	__Документ.Ссылка
		//	|ИЗ Документ." + ЭлементСостава.ИмяДокумента + ЭлементСостава.ИмяТабличнойЧасти + " КАК __Документ
		//	|ГДЕ __Документ." + ЭлементСостава.ИмяРеквизита + " = &ЗначениеКритерияОтбора
		//	|";
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого ЭлементСостава ИЗ мТаблицаКритерияОтбора Цикл Если Не ЭлементСостава.Тип.СодержитТип(ТипКритерия) Тогда Продолжить; КонецЕсли; ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ ", "ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ") + "
			|	__Документ.Ссылка
			|ИЗ Документ." + ЭлементСостава.ИмяДокумента + ЭлементСостава.ИмяТабличнойЧасти + " КАК __Документ
			|ГДЕ __Документ." + ЭлементСостава.ИмяРеквизита + " = &ЗначениеКритерияОтбора
			|";
		КонецЦикла;
		
		Если ТекстЗапроса = "" Тогда
			СтруктураЗапросовДляПодчиненныхДокументов.Вставить(ИмяДокумента, ТекстЗапроса);
			Возврат Новый ТаблицаЗначений;
		КонецЕсли;
		
		СтруктураЗапросовДляПодчиненныхДокументов.Вставить(ИмяДокумента, ТекстЗапроса);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерия);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	ТаблицаЗначений.Свернуть("Ссылка");
	Возврат ТаблицаЗначений;
	
КонецФункции // ПолучитьПодчиненныеПоСсылкеПоКритериюОтбора()

Функция ПолучитьПодчиненныеПоСсылке(ЗначениеКритерия)
	Перем ТекстЗапроса;
		
	Если СтруктураЗапросовДляПодчиненныхДокументов = Неопределено Тогда
		СтруктураЗапросовДляПодчиненныхДокументов = Новый Структура;
	КонецЕсли;
	
	ВидСсылки = ЗначениеКритерия.Метаданные().Имя;
	Если СтруктураЗапросовДляПодчиненныхДокументов.Свойство(ВидСсылки, ТекстЗапроса) Тогда
		Если ТекстЗапроса = "" Тогда
			Возврат Новый ТаблицаЗначений;
		КонецЕсли;
	Иначе
		// Первый фильтр. Проверка на используемые документы, попадающие под условие
		ТекстЗапроса = "";
		ТипСсылки = ТипЗнч(ЗначениеКритерия);
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого МетаданныеДокумента ИЗ ТаблицаМетаданныеДокументы Цикл
		//	ИмяДокумента = МетаданныеДокумента.Имя;
		//	Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента.Метаданные) или ДоступныеДокументы.Найти(ИмяДокумента, "ИмяДокумента") = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	Для каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
		//		Если Лев(Реквизит.Имя, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда
		//			ТекстЗапроса = ?(ТекстЗапроса = "", "", ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ") + "ВЫБРАТЬ ПЕРВЫЕ 1 """ + ИмяДокумента + """ КАК ИмяДокумента, """" КАК ИмяТабличнойЧасти ИЗ Документ." + ИмяДокумента + " КАК __Документ";
		//			Прервать;
		//		КонецЕсли;
		//	КонецЦикла;
		//	Для каждого ТабличнаяЧасть ИЗ МетаданныеДокумента.ТабличныеЧасти Цикл
		//		ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
		//		Для каждого Реквизит ИЗ ТабличнаяЧасть.Реквизиты Цикл
		//			Если Лев(Реквизит.Имя, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда
		//				ТекстЗапроса = ?(ТекстЗапроса = "", "", ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ") + "ВЫБРАТЬ ПЕРВЫЕ 1 """ + ИмяДокумента + """ КАК ИмяДокумента, """ + ИмяТабличнойЧасти + """ КАК ИмяТабличнойЧасти ИЗ Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК __Документ";
		//				Прервать;
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЦикла;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого МетаданныеДокумента ИЗ ТаблицаМетаданныеДокументы Цикл ИмяДокумента = МетаданныеДокумента.Имя; Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента.Метаданные) или ДоступныеДокументы.Найти(ИмяДокумента, "ИмяДокумента") = Неопределено Тогда Продолжить; КонецЕсли; Для каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл Если Лев(Реквизит.Имя, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда ТекстЗапроса = ?(ТекстЗапроса = "", "", ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ") + "ВЫБРАТЬ ПЕРВЫЕ 1 """ + ИмяДокумента + """ КАК ИмяДокумента, """" КАК ИмяТабличнойЧасти ИЗ Документ." + ИмяДокумента + " КАК __Документ"; Прервать; КонецЕсли; КонецЦикла; Для каждого ТабличнаяЧасть ИЗ МетаданныеДокумента.ТабличныеЧасти Цикл ИмяТабличнойЧасти = ТабличнаяЧасть.Имя; Для каждого Реквизит ИЗ ТабличнаяЧасть.Реквизиты Цикл Если Лев(Реквизит.Имя, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда ТекстЗапроса = ?(ТекстЗапроса = "", "", ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ") + "ВЫБРАТЬ ПЕРВЫЕ 1 """ + ИмяДокумента + """ КАК ИмяДокумента, """ + ИмяТабличнойЧасти + """ КАК ИмяТабличнойЧасти ИЗ Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК __Документ"; Прервать; КонецЕсли; КонецЦикла; КонецЦикла; КонецЦикла;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		
		// Второй фильтр. Проверка на реквизиты в которых могут быть ссылки
		ТекстЗапроса = "";
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Пока Выборка.Следующий() Цикл
		//	ИмяДокумента = Выборка.ИмяДокумента;
		//	МетаданныеДокумента = СтруктураМетаданныеДокументы[ИмяДокумента];
		//	Если Выборка.ИмяТабличнойЧасти = "" Тогда
		//		Для каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		//			ИмяРеквизита = Реквизит.Имя;
		//			Если Лев(ИмяРеквизита, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда
		//				ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ ", "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + "ВЫРАЗИТЬ(__Документ." + ИмяРеквизита + " КАК Документ." + ВидСсылки + ") КАК СсылкаДляСоединения, __Документ.Ссылка ИЗ Документ." + ИмяДокумента + " КАК __Документ ГДЕ __Документ." + ИмяРеквизита + " = &ЗначениеКритерияОтбора ";
		//			КонецЕсли;
		//		КонецЦикла;
		//	Иначе
		//		ИмяТабличнойЧасти = Выборка.ИмяТабличнойЧасти;
		//		ТабличнаяЧасть = МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти];
		//		Для каждого Реквизит ИЗ ТабличнаяЧасть.Реквизиты Цикл
		//			ИмяРеквизита = Реквизит.Имя;
		//			Если Лев(ИмяРеквизита, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда
		//				ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗЛИЧНЫЕ ", "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ РАЗЛИЧНЫЕ ") + "ВЫРАЗИТЬ(__Документ." + ИмяРеквизита + " КАК Документ." + ВидСсылки + ") КАК СсылкаДляСоединения, __Документ.Ссылка ИЗ Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК __Документ ГДЕ __Документ." + ИмяРеквизита + " = &ЗначениеКритерияОтбора ";
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Пока Выборка.Следующий() Цикл ИмяДокумента = Выборка.ИмяДокумента; МетаданныеДокумента = СтруктураМетаданныеДокументы[ИмяДокумента]; Если Выборка.ИмяТабличнойЧасти = "" Тогда Для каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл ИмяРеквизита = Реквизит.Имя; Если Лев(ИмяРеквизита, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ ", "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + "ВЫРАЗИТЬ(__Документ." + ИмяРеквизита + " КАК Документ." + ВидСсылки + ") КАК СсылкаДляСоединения, __Документ.Ссылка ИЗ Документ." + ИмяДокумента + " КАК __Документ ГДЕ __Документ." + ИмяРеквизита + " = &ЗначениеКритерияОтбора "; КонецЕсли; КонецЦикла; Иначе ИмяТабличнойЧасти = Выборка.ИмяТабличнойЧасти; ТабличнаяЧасть = МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти]; Для каждого Реквизит ИЗ ТабличнаяЧасть.Реквизиты Цикл ИмяРеквизита = Реквизит.Имя; Если Лев(ИмяРеквизита, 8) <> "Субконто" и Реквизит.Тип.СодержитТип(ТипСсылки) Тогда ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗЛИЧНЫЕ ", "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ РАЗЛИЧНЫЕ ") + "ВЫРАЗИТЬ(__Документ." + ИмяРеквизита + " КАК Документ." + ВидСсылки + ") КАК СсылкаДляСоединения, __Документ.Ссылка ИЗ Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК __Документ ГДЕ __Документ." + ИмяРеквизита + " = &ЗначениеКритерияОтбора "; КонецЕсли; КонецЦикла; КонецЕсли; КонецЦикла;
		
		СтруктураЗапросовДляПодчиненныхДокументов.Вставить(ВидСсылки, ТекстЗапроса);
		Если ТекстЗапроса = "" Тогда
			Возврат Новый ТаблицаЗначений;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерия);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	ТаблицаЗначений.Свернуть("Ссылка");
	Возврат ТаблицаЗначений;
	
КонецФункции // ПолучитьПодчиненныеПоСсылке()

Функция ПроверитьТипГрафаБулево(ВыводимаяГрафа)
	
	СписокОбъектов = ЗначениеИзСтрокиВнутр(ВыводимаяГрафа.СоставГрафы);
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ТекЭлемент Из СписокОбъектов Цикл
	//	НазваниеОбъектаМД = СокрЛП(ТекЭлемент.Значение);
	//	НазваниеРеквизитаОбъектаМД = СокрЛП(ТекЭлемент.Представление);
	//	Попытка
	//		Если СтруктураМетаданныеДокументы[НазваниеОбъектаМД].Реквизиты[НазваниеРеквизитаОбъектаМД].Тип <> ОписаниеТипаБулево Тогда
	//			Возврат Ложь;
	//		КонецЕсли;
	//	Исключение
	//		Возврат Ложь;
	//	КонецПопытки;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ТекЭлемент Из СписокОбъектов Цикл 
		НазваниеОбъектаМД = СокрЛП(ТекЭлемент.Значение); 
		НазваниеРеквизитаОбъектаМД = СокрЛП(ТекЭлемент.Представление); 
		Попытка 
			Если СтруктураМетаданныеДокументы[НазваниеОбъектаМД].Реквизиты[НазваниеРеквизитаОбъектаМД].Тип <> ОписаниеТипаБулево Тогда 
				Возврат Ложь; 
			КонецЕсли; 
		Исключение 
			Возврат Ложь; 
		КонецПопытки; 
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ПроверитьТипГрафаБулево()

Функция ПолучитьСтруктуруГраф()
	
	Если мСтруктураГраф <> Неопределено Тогда
		Возврат мСтруктураГраф
	КонецЕсли;
	
	СтруктураГраф = Новый Структура;
	Счетчик = 0;
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ВыводимаяГрафа Из ВыводимыеГрафы Цикл
	//	Счетчик = Счетчик + 1;
	//	ИмяГрафы = "__Графа" + Счетчик;
	//	СоставГрафы = ЗначениеИзСтрокиВнутр(ВыводимаяГрафа.СоставГрафы);
	//	
	//	СтруктураСоставаГрафы = Новый Структура("__Суммовая", ВыводимаяГрафа.Суммовая);
	//	
	//	Для каждого ДоступныйДокумент Из ДоступныеДокументы Цикл
	//		ИмяДокумента = ДоступныйДокумент.ИмяДокумента;
	//		СтрокаСоставаГрафы = СоставГрафы.НайтиПоЗначению(ИмяДокумента);
	//		СоединениеСоСвойствами = Ложь;
	//		
	//		Если СтрокаСоставаГрафы = Неопределено Тогда
	//			СтруктураСоставаГрафы.Вставить(ИмяДокумента, "NULL");
	//			СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь);
	//		Иначе
	//			МетаданныеДокумента = СтруктураМетаданныеДокументы[ИмяДокумента];
	//			Если МетаданныеДокумента = Неопределено Тогда
	//				СтруктураСоставаГрафы.Вставить(ИмяДокумента, "NULL");
	//				СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь);
	//				
	//			ИначеЕсли СтрокаСоставаГрафы.Картинка = мКартинкаПустая Тогда
	//				МетаданныеРеквизита = МетаданныеДокумента.Реквизиты.Найти(СтрокаСоставаГрафы.Представление);
	//				
	//				Если МетаданныеРеквизита = Неопределено Тогда
	//					СтруктураСоставаГрафы.Вставить(ИмяДокумента, "NULL");
	//					СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь);
	//				Иначе
	//					ТипМетаданныхРеквизита = МетаданныеРеквизита.Тип;
	//					
	//					Если ТипМетаданныхРеквизита = ОписаниеТипаХранилищеЗначений Тогда
	//						СтруктураСоставаГрафы.Вставить(ИмяДокумента, "NULL");
	//						СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь);
	//					ИначеЕсли ТипМетаданныхРеквизита = ОписаниеТипаСтрока Тогда
	//						СтруктураСоставаГрафы.Вставить(ИмяДокумента, "Подстрока(__Документ." + СтрокаСоставаГрафы.Представление + ", 1, 200)");
	//						СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь);
	//					Иначе
	//						СтруктураСоставаГрафы.Вставить(ИмяДокумента, "__Документ." + СтрокаСоставаГрафы.Представление);
	//						СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", СтрокаСоставаГрафы.Пометка);
	//					КонецЕсли;
	//				КонецЕсли;
	//			Иначе
	//				//Если СтрокаСоставаГрафы.Картинка = мКартинкаСвойство Тогда
	//				СвойствоСсылка = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(СтрокаСоставаГрафы.Представление, 18)));
	//				
	//				Если СвойствоСсылка.Пустая() Тогда
	//					СтруктураСоставаГрафы.Вставить(ИмяДокумента, "NULL");
	//					СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь);
	//				Иначе
	//					СтруктураСоставаГрафы.Вставить(ИмяДокумента, "__Свойство" + Счетчик + ".Значение");
	//					СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь);
	//					СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__СвойствоСсылка", СвойствоСсылка);
	//					СоединениеСоСвойствами = Истина;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__СоединениеСоСвойствами", СоединениеСоСвойствами);
	//	КонецЦикла;
	//	
	//	СтруктураГраф.Вставить(ИмяГрафы, СтруктураСоставаГрафы)
	//	
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ВыводимаяГрафа Из ВыводимыеГрафы Цикл Счетчик = Счетчик + 1; ИмяГрафы = "__Графа" + Счетчик; 
		СоставГрафы = ЗначениеИзСтрокиВнутр(ВыводимаяГрафа.СоставГрафы); 
		СтруктураСоставаГрафы = Новый Структура("__Суммовая", ВыводимаяГрафа.Суммовая); 
		Для каждого ДоступныйДокумент Из ДоступныеДокументы Цикл 
			ИмяДокумента = ДоступныйДокумент.ИмяДокумента; 
			СтрокаСоставаГрафы = СоставГрафы.НайтиПоЗначению(ИмяДокумента); 
			СоединениеСоСвойствами = Ложь; 
			Если СтрокаСоставаГрафы = Неопределено Тогда 
				СтруктураСоставаГрафы.Вставить(ИмяДокумента, "NULL"); 
				СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь); 
			Иначе 
				МетаданныеДокумента = СтруктураМетаданныеДокументы[ИмяДокумента]; 
				Если МетаданныеДокумента = Неопределено Тогда 
					СтруктураСоставаГрафы.Вставить(ИмяДокумента, "NULL"); 
					СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь); 
				ИначеЕсли СтрокаСоставаГрафы.Картинка = мКартинкаПустая Тогда 
					МетаданныеРеквизита = МетаданныеДокумента.Реквизиты.Найти(СтрокаСоставаГрафы.Представление); 
					Если МетаданныеРеквизита = Неопределено Тогда СтруктураСоставаГрафы.Вставить(ИмяДокумента, "NULL"); 
						СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь); 
					Иначе 
						ТипМетаданныхРеквизита = МетаданныеРеквизита.Тип; 
						Если ТипМетаданныхРеквизита = ОписаниеТипаХранилищеЗначений Тогда 
							СтруктураСоставаГрафы.Вставить(ИмяДокумента, "NULL"); 
							СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь); 
						ИначеЕсли ТипМетаданныхРеквизита = ОписаниеТипаСтрока Тогда 
							СтруктураСоставаГрафы.Вставить(ИмяДокумента, "Подстрока(__Документ." + СтрокаСоставаГрафы.Представление + ", 1, 200)"); СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь); 
						Иначе СтруктураСоставаГрафы.Вставить(ИмяДокумента, "__Документ." + СтрокаСоставаГрафы.Представление); СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", СтрокаСоставаГрафы.Пометка); 
						КонецЕсли; 
					КонецЕсли; 
				Иначе 
					СвойствоСсылка = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(СтрокаСоставаГрафы.Представление, 18))); 
					Если СвойствоСсылка.Пустая() Тогда СтруктураСоставаГрафы.Вставить(ИмяДокумента, "NULL"); СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь); 
					Иначе 
						СтруктураСоставаГрафы.Вставить(ИмяДокумента, "__Свойство" + Счетчик + ".Значение"); СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__ЭтоЧисло", Ложь); 
						СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__СвойствоСсылка", СвойствоСсылка); СоединениеСоСвойствами = Истина; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			СтруктураСоставаГрафы.Вставить(ИмяДокумента + "__СоединениеСоСвойствами", СоединениеСоСвойствами); 
		КонецЦикла; СтруктураГраф.Вставить(ИмяГрафы, СтруктураСоставаГрафы) 
	КонецЦикла;

	мСтруктураГраф = СтруктураГраф;
	Возврат мСтруктураГраф;
	
КонецФункции // ПолучитьСтруктуруГраф()

Функция фПолучитьСтрокуОтбора(Отборы, Параметры)
	
	СтрокаОтбора = "";
	Для каждого Отбор Из Отборы Цикл
		Если Не Отбор.Использование Тогда
			Продолжить;
		КонецЕсли;
		ВидСравненияОтбора = Отбор.ВидСравнения;
		
		Если ВидСравненияОтбора = ВидСравнения.Равно Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ДанныеСтроки." + Отбор.ПутьКДанным + " = ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "]";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ДанныеСтроки." + Отбор.ПутьКДанным + " <> ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "]";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.Больше Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ДанныеСтроки." + Отбор.ПутьКДанным + " > ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "]";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ДанныеСтроки." + Отбор.ПутьКДанным + " >= ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "]";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.Меньше Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ДанныеСтроки." + Отбор.ПутьКДанным + " < ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "]";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ДанныеСтроки." + Отбор.ПутьКДанным + " <= ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "]";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ПолучитьПоИерархии(ДанныеСтроки." + Отбор.ПутьКДанным + ", ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "])";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "Не ПолучитьПоИерархии(ДанныеСтроки." + Отбор.ПутьКДанным + ", ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "])";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ПолучитьВСпискеПоИерархии(ДанныеСтроки." + Отбор.ПутьКДанным + ", ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "])";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "Не ПолучитьВСпискеПоИерархии(ДанныеСтроки." + Отбор.ПутьКДанным + ", ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "])";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "].НайтиПоЗначению(ДанныеСтроки." + Отбор.ПутьКДанным + ") <> Неопределено";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "].НайтиПоЗначению(ДанныеСтроки." + Отбор.ПутьКДанным + ") = Неопределено";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.Интервал Тогда
			Параметры.Добавить(Отбор.ЗначениеС);
			Параметры.Добавить(Отбор.ЗначениеПо);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ДанныеСтроки." + Отбор.ПутьКДанным + " > ПараметрыУсловногоОформления[" + (Параметры.ВГраница() - 1) + "]" +
				" И ДанныеСтроки." + Отбор.ПутьКДанным + " < ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "]";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяГраницы Тогда
			Параметры.Добавить(Отбор.ЗначениеС);
			Параметры.Добавить(Отбор.ЗначениеПо);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ДанныеСтроки." + Отбор.ПутьКДанным + " >= ПараметрыУсловногоОформления[" + (Параметры.ВГраница() - 1) + "]" +
				" И ДанныеСтроки." + Отбор.ПутьКДанным + " <= ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "]";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяНачало Тогда
			Параметры.Добавить(Отбор.ЗначениеС);
			Параметры.Добавить(Отбор.ЗначениеПо);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ДанныеСтроки." + Отбор.ПутьКДанным + " >= ПараметрыУсловногоОформления[" + (Параметры.ВГраница() - 1) + "]" +
				" И ДанныеСтроки." + Отбор.ПутьКДанным + " < ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "]";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяОкончание Тогда
			Параметры.Добавить(Отбор.ЗначениеС);
			Параметры.Добавить(Отбор.ЗначениеПо);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "ДанныеСтроки." + Отбор.ПутьКДанным + " > ПараметрыУсловногоОформления[" + (Параметры.ВГраница() - 1) + "]" +
				" И ДанныеСтроки." + Отбор.ПутьКДанным + " <= ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "]";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.Содержит Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "Найти(ДанныеСтроки." + Отбор.ПутьКДанным + ", ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "]) <> 0";
			
		ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеСодержит Тогда
			Параметры.Добавить(Отбор.Значение);
			СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора), "", СтрокаОтбора + " И ") + "Найти(ДанныеСтроки." + Отбор.ПутьКДанным + ", ПараметрыУсловногоОформления[" + Параметры.ВГраница() + "]) = 0";
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаОтбора;

КонецФункции // фПолучитьСтрокуОтбора()

Функция ПолучитьПоИерархии(Значение, Группа)
	
	ЗначениеКэша = КэшЗначенийУсловногоОформления[Значение]; Если ЗначениеКэша = Неопределено Тогда Результат = ЗначениеЗаполнено(Значение) и ТипЗнч(Значение) = ТипЗнч(Группа) и Значение.ПринадлежитЭлементу(Группа); КэшЗначенийУсловногоОформления.Вставить(Значение, Результат); Возврат Результат КонецЕсли; Возврат ЗначениеКэша
	
КонецФункции // ПолучитьПоИерархии()
 
Функция ПолучитьВСпискеПоИерархии(Значение, Список)
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//ЗначениеКэша = КэшЗначенийУсловногоОформления[Значение];
	//Если ЗначениеКэша = Неопределено Тогда
	//	Если ЗначениеЗаполнено(Значение) Тогда
	//		Для каждого ЭлементСписка Из Список Цикл
	//			ЗначениеСписка = ЭлементСписка.Значение;
	//			Если ТипЗнч(Значение) = ТипЗнч(ЗначениеСписка) и Значение.ПринадлежитЭлементу(ЗначениеСписка) Тогда
	//				КэшЗначенийУсловногоОформления.Вставить(Значение, Истина);
	//				Возврат Истина;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//	КэшЗначенийУсловногоОформления.Вставить(Значение, Ложь);
	//	Возврат Ложь;
	//КонецЕсли;
	//Возврат ЗначениеКэша;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	ЗначениеКэша = КэшЗначенийУсловногоОформления[Значение]; Если ЗначениеКэша = Неопределено Тогда Если ЗначениеЗаполнено(Значение) Тогда Для каждого ЭлементСписка Из Список Цикл ЗначениеСписка = ЭлементСписка.Значение; Если ТипЗнч(Значение) = ТипЗнч(ЗначениеСписка) и Значение.ПринадлежитЭлементу(ЗначениеСписка) Тогда КэшЗначенийУсловногоОформления.Вставить(Значение, Истина); Возврат Истина; КонецЕсли; КонецЦикла; КонецЕсли; КэшЗначенийУсловногоОформления.Вставить(Значение, Ложь); Возврат Ложь; КонецЕсли; Возврат ЗначениеКэша;

КонецФункции // ПолучитьВСпискеПоИерархии()
 
Функция ПолучитьПараметрыУсловногоОформления() Экспорт
	
	// Блок условного оформления
	ТекстыУсловногоОформления = Новый Массив;
	ПараметрыУсловногоОформления = Новый Массив;
	КэшЗначенийУсловногоОформления = Новый Соответствие;
	Если ПостроительОтчета.УсловноеОформление.Количество() Тогда
		Индекс = 0;
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого УсловноеОформление Из ПостроительОтчета.УсловноеОформление Цикл
		//	Если УсловноеОформление.Использование Тогда
		//		СтрокаОтбора = фПолучитьСтрокуОтбора(УсловноеОформление.Отбор, ПараметрыУсловногоОформления);
		//		Если Не ПустаяСтрока(СтрокаОтбора) Тогда
		//			ТекстыУсловногоОформления.Добавить("?(" + СтрокаОтбора + "," + Индекс + ",-1)");
		//		КонецЕсли
		//	КонецЕсли;
		//	Индекс = Индекс + 1
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого УсловноеОформление Из ПостроительОтчета.УсловноеОформление Цикл Если УсловноеОформление.Использование Тогда СтрокаОтбора = фПолучитьСтрокуОтбора(УсловноеОформление.Отбор, ПараметрыУсловногоОформления); Если Не ПустаяСтрока(СтрокаОтбора) Тогда ТекстыУсловногоОформления.Добавить("?(" + СтрокаОтбора + "," + Индекс + ",-1)"); КонецЕсли КонецЕсли; Индекс = Индекс + 1 КонецЦикла;
		ИспользуетсяУсловноеОформление = (ТекстыУсловногоОформления.Количество() > 0)
	Иначе
		ИспользуетсяУсловноеОформление = Ложь
	КонецЕсли

КонецФункции // ПолучитьПараметрыУсловногоОформления()

Процедура СписокДокументовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Если ЗаполнитьСписокСтрок <> Неопределено Тогда
		ЗаполнитьСписокСтрок = Неопределено;
		СписокВидимыхСтрок = Новый Массив;
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого СтрокаТаблицы Из ОформленияСтрок Цикл
		//	СтрокаСписка = СтрокаТаблицы.ДанныеСтроки;
		//	Если СтрокаСписка.Уровень() = 0 Тогда
		//		СтрокаТаблицы.ЦветФона = мЦветФона;
		//	Иначе
		//		СтрокаСписка = СтрокаСписка.Родитель;
		//	КонецЕсли;
		//	Если СписокВидимыхСтрок.Найти(СтрокаСписка) = Неопределено Тогда
		//		СписокВидимыхСтрок.Добавить(СтрокаСписка);
		//	КонецЕсли;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого СтрокаТаблицы Из ОформленияСтрок Цикл 
			СтрокаСписка = СтрокаТаблицы.ДанныеСтроки; 
			Если СтрокаСписка.Уровень() = 0 Тогда СтрокаТаблицы.ЦветФона = мЦветФона; 
			Иначе СтрокаСписка = СтрокаСписка.Родитель; 
			КонецЕсли; 
			Если СписокВидимыхСтрок.Найти(СтрокаСписка) = Неопределено Тогда 
				СписокВидимыхСтрок.Добавить(СтрокаСписка); 
			КонецЕсли; 
		КонецЦикла;
		
	ИначеЕсли ОтображатьДокументыВВидеДерева Тогда
		// Заплатка для прорисовки плюсиков в иерархии
		Если ВидСпискаДокументов = "ДеревоПодчиненных" Тогда
			ДанныеСтроки = ОформленияСтрок[0].ДанныеСтроки;
			Если ДанныеСтроки.Родитель <> Неопределено Тогда
				ДанныеСтроки = ДанныеСтроки.Родитель
			КонецЕсли;
			
			СписокДокументовСтроки = СписокДокументов.Строки;
			ИндексСтроки = СписокДокументовСтроки.Индекс(ДанныеСтроки);
			// Код в комментарии записаный в 1 строку находится ниже этого комментария
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Для Индекс = Макс(0, ИндексСтроки - 40) По Мин(ИндексСтроки + 80, СписокДокументовСтроки.Количество() - 1) Цикл
			//	Строка = СписокДокументовСтроки[Индекс];
			//	Если Не Строка.УровеньРазвернут и Строка.Строки.Количество() = 0 Тогда
			//		Строка.Строки.Добавить();
			//	КонецЕсли;
			//КонецЦикла;

			// Код записанный в 1 строку находится в комментарии расположенном выше
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			Для Индекс = Макс(0, ИндексСтроки - 40) По Мин(ИндексСтроки + 80, СписокДокументовСтроки.Количество() - 1) Цикл Строка = СписокДокументовСтроки[Индекс]; Если Не Строка.УровеньРазвернут и Строка.Строки.Количество() = 0 Тогда Строка.Строки.Добавить(); КонецЕсли; КонецЦикла;
			
			// Раскрасим табличную часть
			Если ИспользуетсяУсловноеОформление Тогда
				// Код в комментарии записаный в 1 строку находится ниже этого комментария
				// Для редактирования кода снимите комментарий
				// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
				//Для каждого СтрокаТаблицы Из ОформленияСтрок Цикл
				//	ДанныеСтроки = СтрокаТаблицы.ДанныеСтроки;
				//	УстановитьЦветФона = Истина;
				//	Для каждого ТекстУсловногоОформления Из ТекстыУсловногоОформления Цикл
				//		Индекс = Вычислить(ТекстУсловногоОформления);
				//		Если Индекс <> -1 Тогда Оформление = ПостроительОтчета.УсловноеОформление[Индекс].Оформление;
				//			Если Оформление.ЦветТекста.Использование Тогда
				//				СтрокаТаблицы.ЦветТекста = Оформление.ЦветТекста.Значение;
				//			КонецЕсли;
				//			Если Оформление.ЦветФона.Использование Тогда
				//				СтрокаТаблицы.ЦветФона = Оформление.ЦветФона.Значение;
				//				УстановитьЦветФона = Ложь;
				//			КонецЕсли;
				//			Если Оформление.Шрифт.Использование Тогда
				//				СтрокаТаблицы.Шрифт = Оформление.Шрифт.Значение;
				//			КонецЕсли;
				//		КонецЕсли;
				//	КонецЦикла;
				//	Если УстановитьЦветФона и ДанныеСтроки.Уровень() = 0 Тогда
				//		СтрокаТаблицы.ЦветФона = мЦветФона;
				//	КонецЕсли;
				//КонецЦикла;

				// Код записанный в 1 строку находится в комментарии расположенном выше
				// Для редактирования кода снимите комментарий
				// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
				Для каждого СтрокаТаблицы Из ОформленияСтрок Цикл ДанныеСтроки = СтрокаТаблицы.ДанныеСтроки; УстановитьЦветФона = Истина; Для каждого ТекстУсловногоОформления Из ТекстыУсловногоОформления Цикл Индекс = Вычислить(ТекстУсловногоОформления); Если Индекс <> -1 Тогда Оформление = ПостроительОтчета.УсловноеОформление[Индекс].Оформление; Если Оформление.ЦветТекста.Использование Тогда СтрокаТаблицы.ЦветТекста = Оформление.ЦветТекста.Значение; КонецЕсли; Если Оформление.ЦветФона.Использование Тогда СтрокаТаблицы.ЦветФона = Оформление.ЦветФона.Значение; УстановитьЦветФона = Ложь; КонецЕсли; Если Оформление.Шрифт.Использование Тогда СтрокаТаблицы.Шрифт = Оформление.Шрифт.Значение; КонецЕсли; КонецЕсли; КонецЦикла; Если УстановитьЦветФона и ДанныеСтроки.Уровень() = 0 Тогда СтрокаТаблицы.ЦветФона = мЦветФона; КонецЕсли; КонецЦикла;
			Иначе
				// Код в комментарии записаный в 1 строку находится ниже этого комментария
				// Для редактирования кода снимите комментарий
				// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
				//Для каждого СтрокаТаблицы Из ОформленияСтрок Цикл
				//	Если СтрокаТаблицы.ДанныеСтроки.Уровень() = 0 Тогда
				//		СтрокаТаблицы.ЦветФона = мЦветФона;
				//	КонецЕсли;
				//КонецЦикла;

				// Код записанный в 1 строку находится в комментарии расположенном выше
				// Для редактирования кода снимите комментарий
				// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
				Для каждого СтрокаТаблицы Из ОформленияСтрок Цикл Если СтрокаТаблицы.ДанныеСтроки.Уровень() = 0 Тогда СтрокаТаблицы.ЦветФона = мЦветФона; КонецЕсли; КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ИспользуетсяУсловноеОформление Тогда
			// Раскрасим табличную часть
			//
			// Код в комментарии записаный в 1 строку находится ниже этого комментария
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Для каждого СтрокаТаблицы Из ОформленияСтрок Цикл
			//	ДанныеСтроки = СтрокаТаблицы.ДанныеСтроки;
			//	Если ДанныеСтроки.Уровень() = 0 Тогда
			//		СтрокаТаблицы.ЦветФона = мЦветФона;
			//	Иначе
			//		Для каждого ТекстУсловногоОформления Из ТекстыУсловногоОформления Цикл
			//			Индекс = Вычислить(ТекстУсловногоОформления);
			//			Если Индекс <> -1 Тогда
			//				Оформление = ПостроительОтчета.УсловноеОформление[Индекс].Оформление;
			//				Если Оформление.ЦветТекста.Использование Тогда
			//					СтрокаТаблицы.ЦветТекста = Оформление.ЦветТекста.Значение;
			//				КонецЕсли;
			//				Если Оформление.ЦветФона.Использование Тогда
			//					СтрокаТаблицы.ЦветФона = Оформление.ЦветФона.Значение;
			//				КонецЕсли;
			//				Если Оформление.Шрифт.Использование Тогда
			//					СтрокаТаблицы.Шрифт = Оформление.Шрифт.Значение;
			//				КонецЕсли;
			//			КонецЕсли;
			//		КонецЦикла;
			//	КонецЕсли;
			//КонецЦикла;

			// Код записанный в 1 строку находится в комментарии расположенном выше
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			Для каждого СтрокаТаблицы Из ОформленияСтрок Цикл ДанныеСтроки = СтрокаТаблицы.ДанныеСтроки; Если ДанныеСтроки.Уровень() = 0 Тогда СтрокаТаблицы.ЦветФона = мЦветФона; Иначе Для каждого ТекстУсловногоОформления Из ТекстыУсловногоОформления Цикл Индекс = Вычислить(ТекстУсловногоОформления); Если Индекс <> -1 Тогда Оформление = ПостроительОтчета.УсловноеОформление[Индекс].Оформление; Если Оформление.ЦветТекста.Использование Тогда СтрокаТаблицы.ЦветТекста = Оформление.ЦветТекста.Значение; КонецЕсли; Если Оформление.ЦветФона.Использование Тогда СтрокаТаблицы.ЦветФона = Оформление.ЦветФона.Значение; КонецЕсли; Если Оформление.Шрифт.Использование Тогда СтрокаТаблицы.Шрифт = Оформление.Шрифт.Значение; КонецЕсли; КонецЕсли; КонецЦикла; КонецЕсли; КонецЦикла;
		Иначе
			// Раскрасим табличную часть
			//
			// Код в комментарии записаный в 1 строку находится ниже этого комментария
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Для каждого СтрокаТаблицы Из ОформленияСтрок Цикл
			//	Если СтрокаТаблицы.ДанныеСтроки.Уровень() = 0 Тогда
			//		СтрокаТаблицы.ЦветФона = мЦветФона;
			//	КонецЕсли;
			//КонецЦикла;

			// Код записанный в 1 строку находится в комментарии расположенном выше
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			Для каждого СтрокаТаблицы Из ОформленияСтрок Цикл Если СтрокаТаблицы.ДанныеСтроки.Уровень() = 0 Тогда СтрокаТаблицы.ЦветФона = мЦветФона; КонецЕсли; КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИспользуетсяУсловноеОформление Тогда
		
		// Раскрасим табличную часть
		//
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого СтрокаТаблицы Из ОформленияСтрок Цикл
		//	ДанныеСтроки = СтрокаТаблицы.ДанныеСтроки;
		//	Для каждого ТекстУсловногоОформления Из ТекстыУсловногоОформления Цикл
		//		Индекс = Вычислить(ТекстУсловногоОформления);
		//		Если Индекс <> -1 Тогда
		//			Оформление = ПостроительОтчета.УсловноеОформление[Индекс].Оформление;
		//			Если Оформление.ЦветТекста.Использование Тогда
		//				СтрокаТаблицы.ЦветТекста = Оформление.ЦветТекста.Значение;
		//			КонецЕсли;
		//			Если Оформление.ЦветФона.Использование Тогда
		//				СтрокаТаблицы.ЦветФона = Оформление.ЦветФона.Значение;
		//			КонецЕсли;
		//			Если Оформление.Шрифт.Использование Тогда
		//				СтрокаТаблицы.Шрифт = Оформление.Шрифт.Значение;
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого СтрокаТаблицы Из ОформленияСтрок Цикл 
			ДанныеСтроки = СтрокаТаблицы.ДанныеСтроки; 
			Для каждого ТекстУсловногоОформления Из ТекстыУсловногоОформления Цикл 
				Индекс = Вычислить(ТекстУсловногоОформления); 
				Если Индекс <> -1 Тогда Оформление = ПостроительОтчета.УсловноеОформление[Индекс].Оформление; 
					Если Оформление.ЦветТекста.Использование Тогда СтрокаТаблицы.ЦветТекста = Оформление.ЦветТекста.Значение; 
					КонецЕсли; 
					Если Оформление.ЦветФона.Использование Тогда СтрокаТаблицы.ЦветФона = Оформление.ЦветФона.Значение; 
					КонецЕсли; 
					Если Оформление.Шрифт.Использование Тогда СтрокаТаблицы.Шрифт = Оформление.Шрифт.Значение; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла;
	ИНАЧЕ //+++( раскрашивание заказов покупателей
		
		мЖирныйШрифт  = Новый Шрифт(,, Истина);
		//мКурсив 	  = Новый Шрифт(,, , Истина);
		//мЖирныйКурсив = Новый Шрифт(,, Истина, Истина);
        
		Для каждого СтрокаТаблицы Из ОформленияСтрок Цикл 
			ДанныеСтроки = СтрокаТаблицы.ДанныеСтроки; 
			
			Если ДанныеСтроки.КоличествоПродано<>Null тогда
				Если ДанныеСтроки.КоличествоПродано>0 Тогда
					СтрокаТаблицы.ЦветТекста = WebЦвета.Синий;
				иначеЕсли ДанныеСтроки.КоличествоПродано<0 тогда
					СтрокаТаблицы.ЦветТекста = WebЦвета.Красный;  //Есть Возврат без продажи? 
				КонецЕсли;
			//Иначе //ДанныеСтроки.КоличествоПродано=Null 
		    КонецЕсли;
			
			Если ДанныеСтроки.КоличествоНеОтгружено=Null тогда  //или отгружен полностью или снят, но есть задолжность
           	   Если ДанныеСтроки.Ссылка.Проведен или ДанныеСтроки.Ссылка.ПометкаУдаления тогда 
				  СтрокаТаблицы.ЦветФона=WebЦвета.LightGray; // Закрыт
			   КонецЕсли;
		    иначе
				Если ДанныеСтроки.КоличествоНеОтгружено<0 тогда
				  СтрокаТаблицы.ЦветФона=WebЦвета.СветлоРозовый; // ПЕРЕ-Отгружено! 
				ИначеЕсли ДанныеСтроки.КоличествоНеОтгружено=0 тогда
				  СтрокаТаблицы.ЦветФона=WebЦвета.LightGray; // Закрыт по количеству 
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицы.Ячейки.Проверен.ОтображатьКартинку = Истина;
			СтрокаТаблицы.Ячейки.Проверен.ОтображатьТекст    = Ложь;
			СтрокаТаблицы.Ячейки.Проверен.ОтображатьФлажок   = Ложь;
			СтрокаТаблицы.Ячейки.Проверен.ИндексКартинки     = 2; // красный квадратик - не проверен
	
			Если ДанныеСтроки.Ссылка.Проверен Тогда 
				//Если ДанныеСтроки.Ссылка.ПометкаУдаления тогда
				//	СтрокаТаблицы.Шрифт = мЖирныйКурсив;
				//иначе
					СтрокаТаблицы.Шрифт = мЖирныйШрифт;
				//КонецЕсли;	
       			СтрокаТаблицы.Ячейки.Проверен.ИндексКартинки  = 3; //Зеленый с галкой - проверен
			//ИначеЕсли ДанныеСтроки.Ссылка.ПометкаУдаления тогда
				//	СтрокаТаблицы.Шрифт =  мКурсив;
				//КонецЕсли;	
			КонецЕсли;

		КонецЦикла;
		//+++)
	КонецЕсли;
	
	//ЭлементыФормы.СписокДокументов.ТекущаяСтрока =  СписокДокументов.Строки.Количество()-1;
	
КонецПроцедуры // СписокДокументовПриПолученииДанных()


Процедура СписокДокументовПриАктивизацииЯчейки(Элемент)
	
	ПодключитьОбработчикОжидания("ПометкаКнопкиОтборПоТекущемуЗначению", 0.1, Истина)
	
КонецПроцедуры

// Процедура - обработчик события "ПередРазворачиванием" табличного поля "СписокДокументов"
Процедура СписокДокументовПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если Не Строка.УровеньРазвернут Тогда РазвернутьУровеньПоСтроке(Строка) КонецЕсли
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "СписокДокументов"
Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		ТекущиеДанные = ЭлементыФормыСписокДокументов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено и ТекущиеДанные.Ссылка <> Null Тогда
			НовДок = ТекущиеДанные.Ссылка.Скопировать();
			Форма  = НовДок.ПолучитьФорму(, Элемент);
			Форма.ПараметрОбъектКопирования = ТекущиеДанные.Ссылка;
			Форма.Открыть();
		КонецЕсли;
	Иначе
		Если ДоступныеДокументы.Количество() Тогда
			СоздатьНовыйДокумент();
		Иначе
			Предупреждение("Не определен состав документов журнала!");
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры // СписокДокументовПередНачаломДобавления()

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "СписокДокументов"
Процедура СписокДокументовПередНачаломИзменения(Элемент, Отказ)
	
	ИзменитьДокумент();
	Отказ = Истина;
	
КонецПроцедуры // СписокДокументовПередНачаломИзменения()

// Процедура - обработчик события "ПередУдалением" табличного поля "СписокДокументов"
Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	
	УстановитьПометкуУдаления();
	Отказ = Истина;
	
КонецПроцедуры // СписокДокументовПередУдалением()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "СписокДокументов"
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьКнопки", 0.1, Истина);

КонецПроцедуры // СписокДокументовПриАктивизацииСтроки()

Процедура СписокДокументовОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)
	
	ОбновитьДанныеПоСсылке(Объект.Ссылка);
	
КонецПроцедуры // СписокДокументовОбработкаЗаписиНовогоОбъекта()

Процедура СписокДокументовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение) и ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение.Ссылка) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Выбор;
		ПараметрыПеретаскивания.Значение = ПараметрыПеретаскивания.Значение.Ссылка;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры


	
//Управляет видимостью панели табличных частей и движений.
//	Панель невидима, если:
//		выключено отображение и движений, и ТЧ
//		у текущего документа количество строк отображаемых ТЧ и движений везде нулевое.
Процедура ОтобразитьПанельТабЧастей(МетаданныеДокумента)
	
	Если МетаданныеДокумента <> Неопределено и (ПоказыватьРеквизиты или ПоказыватьДвижения и МетаданныеДокумента.Движения.Количество() или ПоказыватьТабЧасти и МетаданныеДокумента.ТабличныеЧасти.Количество()) Тогда
		Если Не ВидимостьПанелиТабЧастей Тогда
			// Нужно показывать
			ЭлементыФормы.Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			ЭлементыФормыПанельТабЧастей.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// Расчет высоты элементов
			// Корректировка на разделитель: -5
			ВысотаЭлементов = Высота - ЭлементыФормыСписокДокументов.Верх - 31;
			ВысотаОсновныхЭлементов = Окр(ВысотаЭлементов * 0.6, 0);
			
			// Сначала двигаем разделители, иначе все поплывет
			ЭлементыФормы.Разделитель.Верх = ЭлементыФормыСписокДокументов.Верх + ВысотаОсновныхЭлементов;
			
			// Теперь двигаем основные элементы
			ЭлементыФормыСписокДокументов.Высота = ВысотаОсновныхЭлементов;
			
			ЭлементыФормыСписокДокументов.УстановитьПривязку(ГраницаЭлементаУправления.Низ,
			ЭлементыФормы.Разделитель,
			ГраницаЭлементаУправления.Верх);
			
			ЭлементыФормыПанельТабЧастей.Высота = ВысотаЭлементов - ВысотаОсновныхЭлементов;
			ЭлементыФормыПанельТабЧастей.Верх = ЭлементыФормы.Разделитель.Верх + 5;
			
			ЭлементыФормыПанельТабЧастей.УстановитьПривязку(ГраницаЭлементаУправления.Низ,
			Панель,
			ГраницаЭлементаУправления.Низ);
			
			ВидимостьПанелиТабЧастей = Истина;
		КонецЕсли;
		
	ИначеЕсли ВидимостьПанелиТабЧастей Тогда 
		// Не нужно показывать
		ЭлементыФормы.Разделитель.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормыПанельТабЧастей.Свертка = РежимСверткиЭлементаУправления.Низ;
		
		// Расчет высоты элементов
		ВысотаЭлементов = Высота - ЭлементыФормыСписокДокументов.Верх - 26;
		
		// Двигаем основные элементы
		ЭлементыФормыСписокДокументов.Высота = ВысотаЭлементов;
		
		ЭлементыФормыСписокДокументов.УстановитьПривязку(ГраницаЭлементаУправления.Низ,
		Панель,
		ГраницаЭлементаУправления.Низ);
		
		ВидимостьПанелиТабЧастей = Ложь;
	КонецЕсли;
	
	// Заплатка для 8.2
	ЭлементыФормыПанельПодвал.УстановитьПривязку(ГраницаЭлементаУправления.Верх,
	Панель,
	ГраницаЭлементаУправления.Низ);
	
КонецПроцедуры // ОтобразитьПанельТабЧастей()

Процедура ПометкаКнопкиОтборПоТекущемуЗначению()

	Если ПостроительОтчета = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущаяКолонка = ЭлементыФормыСписокДокументов.ТекущаяКолонка;
	Если ТекущаяКолонка = Неопределено Тогда
		КнопкаОтборПоТекущемуЗначению.Пометка = Ложь;
		Возврат
	КонецЕсли;
	
	Колонка = ТекущаяКолонка.Имя;
	ЭлементОтбора = ПостроительОтчетаОтбор.Найти(Колонка);
	Если ЭлементОтбора = Неопределено или ЭлементОтбора.Использование = Ложь Тогда
		КнопкаОтборПоТекущемуЗначению.Пометка = Ложь
	ИначеЕсли ЭлементыФормыСписокДокументов.ТекущаяСтрока[Колонка] = ЭлементОтбора.Значение Тогда
		КнопкаОтборПоТекущемуЗначению.Пометка = Истина
	Иначе
		КнопкаОтборПоТекущемуЗначению.Пометка = Ложь
	КонецЕсли;

КонецПроцедуры // ПометкаКнопкиОтборПоТекущемуЗначению()

Процедура ИнициализироватьНастройкуПериодаЖурнала()
	
	Если Не ТипЗнч(НастройкаПериодаЖурнала) = Тип("НастройкаПериода") Тогда
		НастройкаПериодаЖурнала = Новый НастройкаПериода;
		НастройкаПериодаЖурнала.ВариантНастройки = ВариантНастройкиПериода.Период;
		НастройкаПериодаЖурнала.РедактироватьКакИнтервал = Истина;
		НастройкаПериодаЖурнала.РедактироватьКакПериод = Истина;
		НастройкаПериодаЖурнала.ВариантПериода = ВариантПериода.ПроизвольныйИнтервал;
		//+++ добавлен если нет других настроек
		НастройкаПериодаЖурнала.ДатаНачала    = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()),-1);
		НастройкаПериодаЖурнала.ДатаОкончания = КонецДня(ТекущаяДата());
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьНастройкуПериодаЖурнала()

//Процедура создаёт СКД на основании настроек журнала.
//	СКД используется для вывода отчётов по документам журнала.
Функция СоздатьСКД() Экспорт
	
	ПостроительРеестра = СформироватьПостроительДляДерева();
	Если ПостроительРеестра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КомпоновщикНастроекСКД = Неопределено Тогда
		КомпоновщикНастроекСКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	КонецЕсли;
	
	рСКД = Новый СхемаКомпоновкиДанных;	
	
	рИсточник = рСКД.ИсточникиДанных.Добавить();
	рИсточник.Имя = "ОсновнойИсточник";
	рИсточник.ТипИсточникаДанных = "Local";
	
	рНабор = рСКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	рНабор.Запрос = ПостроительРеестра.Текст;
	рНабор.Имя = "ОсновнойНабор";
	рНабор.ИсточникДанных = "ОсновнойИсточник";
	
	рНастройка = рСКД.НастройкиПоУмолчанию;
	рПараметры = рСКД.Параметры;
	
	рНачалоПериода = рПараметры.Найти("НачалоПериода");
	Если рНачалоПериода = Неопределено Тогда
		рНачалоПериода = рПараметры.Добавить();
		рНачалоПериода.Имя = "НачалоПериода";
		рНачалоПериода.Заголовок = "Начало периода";
	КонецЕсли;
	рНачалоПериода.Значение = НастройкаПериодаЖурнала.ПолучитьДатуНачала();
	
	рКонецПериода = рПараметры.Найти("КонецПериода");
	Если рКонецПериода = Неопределено Тогда
		рКонецПериода = рПараметры.Добавить();
		рКонецПериода.Имя = "КонецПериода";
		рКонецПериода.Заголовок = "Конец периода";
	КонецЕсли;
	рКонецПериода.Значение = НастройкаПериодаЖурнала.ПолучитьДатуОкончания();
	
	Для каждого Параметр Из ПостроительРеестра.Параметры Цикл
		рПараметр = рПараметры.Найти(Параметр.Ключ);
		Если рПараметр = Неопределено Тогда
			рПараметр = рПараметры.Добавить();
			рПараметр.Имя = Параметр.Ключ;
			рПараметр.ОграничениеИспользования = Истина;
		КонецЕсли;
		рПараметр.Значение = Параметр.Значение;
	КонецЦикла;
	
	//рОтчетСформирован = рСКД.Параметры.Найти("ОтчетСформирован");
	//Если рОтчетСформирован = Неопределено Тогда
	//	рОтчетСформирован = рСКД.Параметры.Добавить();
	//	рОтчетСформирован.Имя = "ОтчетСформирован";
	//	рОтчетСформирован.Заголовок = "Отчет сформирован";
	//КонецЕсли;
	
	КоличествоВыводимыхГраф = ВыводимыеГрафы.Количество();
	
	Для каждого КолонкаСписка Из ЭлементыФормыСписокДокументовКолонки Цикл
		ПолеПостроителя = ПостроительРеестра.ДоступныеПоля.Найти(КолонкаСписка.Имя);
		Если ПолеПостроителя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		//ЗаголовокПоля = СокрЛП(ПолеПостроителя.Представление);
		
		// Вносим поля в набор, это обязательно
		рПоле = рНабор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ЗаголовокПоля = СокрЛП(КолонкаСписка.ТекстШапки);
		
		//Попробуем в переданном построителе найти представление нужного нам поля
		рПоле.Заголовок = ЗаголовокПоля;
		рПоле.Поле = КолонкаСписка.Имя;
		рПоле.ПутьКДанным = КолонкаСписка.Имя;
		
		// Правильно определяем тип поля
		мТипов = Новый Массив;
		ТипЗначения = КолонкаСписка.ЭлементУправления.ТипЗначения;
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого рТип Из ТипЗначения.Типы() Цикл
		//	Если рТип <> Тип("Неопределено") и рТип <> Тип("NULL") Тогда
		//		мТипов.Добавить(рТип);
		//	КонецЕсли;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого рТип Из ТипЗначения.Типы() Цикл Если рТип <> Тип("Неопределено") и рТип <> Тип("NULL") Тогда мТипов.Добавить(рТип); КонецЕсли; КонецЦикла;
		
		рПоле.ТипЗначения = Новый ОписаниеТипов(мТипов, ТипЗначения.КвалификаторыЧисла, ТипЗначения.КвалификаторыСтроки, ТипЗначения.КвалификаторыДаты);
		
		// Выбранные поля добавляем на уровень самой настройки, т.е. группы "Отчёт"
		рВыбПоле = рНастройка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		рВыбПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаСписка.Имя);
		рВыбПоле.Использование = Истина;
		
		Если КоличествоВыводимыхГраф Тогда
			// Поля итогов
			СтрокаГрафы = ВыводимыеГрафы.Найти(ЗаголовокПоля, "ГрафаЖурнала");
			Если СтрокаГрафы <> Неопределено и СтрокаГрафы.Суммовая Тогда
				рПолеИтога = рСКД.ПоляИтога.Добавить();
				рПолеИтога.Выражение = "Сумма(" + КолонкаСписка.Имя + ")";
				рПолеИтога.ПутьКДанным = КолонкаСписка.Имя;
			КонецЕсли;
			
			Если ВидСпискаДокументов = "ДеревоПоГрафе"
				и СтрокаГрафы = ВыводимыеГрафы[0] Тогда
				рГруппировкаКД = рНастройка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				рГруппировкаКД.Использование = Истина;
				рГруппировкаРодитель = рГруппировкаКД;
				рВыбПолеГр = рГруппировкаКД.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				рВыбПолеГр.Использование = Истина;
				рВыбПолеГр.Поле = рВыбПоле.Поле;
				
				рВыбПолеГр = рГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				рВыбПолеГр.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидСпискаДокументов = "ДеревоПоВидуДокумента"
			и КолонкаСписка.Имя = "ВидДокумента" Тогда
			рГруппировкаКД = рНастройка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			рГруппировкаКД.Использование = Истина;
			рГруппировкаРодитель = рГруппировкаКД;
			рВыбПолеГр = рГруппировкаКД.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			рВыбПолеГр.Использование = Истина;
			рВыбПолеГр.Поле = рВыбПоле.Поле;
			
			рВыбПолеГр = рГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			рВыбПолеГр.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ВидСпискаДокументов = "ДеревоПоМесяцам" Тогда
		ПолеПериод = рСКД.ВычисляемыеПоля.Добавить();
		ПолеПериод.ПутьКДанным = "ПериодПоМесяцам";
		ПолеПериод.Заголовок = "Период по месяцам";
		ПолеПериод.Выражение = "НАЧАЛОПЕРИОДА(Дата, ""Месяц"")";
		ПолеПериод.ТипЗначения = Новый ОписаниеТипов("Дата");
		ФорматПериода = ПолеПериод.Оформление.Элементы.Найти("Format");
		ФорматПериода.Значение = "ДФ='MMMM yyyy'";
		ФорматПериода.Использование = Истина;
		
		рГруппировкаКД = рНастройка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		рГруппировкаКД.Использование = Истина;
		рГруппировкаРодитель = рГруппировкаКД;
		рВыбПолеГр = рГруппировкаКД.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		рВыбПолеГр.Использование = Истина;
		рВыбПолеГр.Поле = Новый ПолеКомпоновкиДанных("ПериодПоМесяцам");
		
		рВыбПолеГр = рГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		рВыбПолеГр.Использование = Истина;
		
	ИначеЕсли ВидСпискаДокументов = "ДеревоПоДням" Тогда
		ПолеПериод = рСКД.ВычисляемыеПоля.Добавить();
		ПолеПериод.ПутьКДанным = "ПериодПоДням";
		ПолеПериод.Заголовок = "Период по дням";
		ПолеПериод.Выражение = "НАЧАЛОПЕРИОДА(Дата, ""ДЕНЬ"")";
		ПолеПериод.ТипЗначения = Новый ОписаниеТипов("Дата");
		ФорматПериода = ПолеПериод.Оформление.Элементы.Найти("Format");
		ФорматПериода.Значение = "ДФ=dd.MM.yyyy";
		ФорматПериода.Использование = Истина;
		
		рГруппировкаКД = рНастройка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		рГруппировкаКД.Использование = Истина;
		рГруппировкаРодитель = рГруппировкаКД;
		рВыбПолеГр = рГруппировкаКД.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		рВыбПолеГр.Использование = Истина;
		рВыбПолеГр.Поле = Новый ПолеКомпоновкиДанных("ПериодПоДням");
		
		рВыбПолеГр = рГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		рВыбПолеГр.Использование = Истина;
		
	КонецЕсли;
		
	// Создадим группировку <детальных записей>
	Если ВидСпискаДокументов = "ДеревоПоМесяцам" или ВидСпискаДокументов = "ДеревоПоДням"
		или ВидСпискаДокументов = "ДеревоПоВидуДокумента"
		или ВидСпискаДокументов = "ДеревоПоГрафе" и КоличествоВыводимыхГраф Тогда
		рГруппировкаКД = рГруппировкаРодитель.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Иначе
		рГруппировкаКД = рНастройка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	рГруппировкаКД.Использование = Истина;
	
	// Автовыбранные поля на уровень группировки детальных записей
	рВыбПолеГр = рГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	рВыбПолеГр.Использование = Истина;
	
	// Добавляем вычисляемое поле - количество документов (для статистики)
	ПолеКвоДок = рСКД.ВычисляемыеПоля.Добавить();
	ПолеКвоДок.ПутьКДанным = "КоличествоДокументов";
	ПолеКвоДок.Заголовок = "Количество документов";
	ПолеКвоДок.Выражение = "1";
	ПолеКвоДок.ТипЗначения = ОписаниеТипаЧисло;
	
	рПолеИтога = рСКД.ПоляИтога.Добавить();
	рПолеИтога.Выражение = "Сумма(КоличествоДокументов)";
	рПолеИтога.ПутьКДанным = "КоличествоДокументов";
	
	// Добавляем оформление
	Параметры = рНастройка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МакетОформления"));
	Параметры.Значение = "Асфальт";
	Параметры.Использование = Истина;
	Параметры = рНастройка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
	Параметры.Значение = "Отчёт по универсальному журналу документов";
	Параметры.Использование = Истина;
	Параметры = рНастройка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	Параметры.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
	Параметры.Использование = Истина;
	
	КомпоновщикНастроекСКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(рСКД));
	КомпоновщикНастроекСКД.ЗагрузитьНастройки(рСКД.НастройкиПоУмолчанию);
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ПараметрыДанных Из КомпоновщикНастроекСКД.Настройки.ПараметрыДанных.Элементы Цикл
	//	ПараметрыДанных.Использование = Истина;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ПараметрыДанных Из КомпоновщикНастроекСКД.Настройки.ПараметрыДанных.Элементы Цикл ПараметрыДанных.Использование = Истина; КонецЦикла;
	
	Возврат рСКД;
	
КонецФункции // СоздатьСКД()

Функция СформироватьПостроительДляДерева(НужныИтоги = Ложь)
	
	Если ДоступныеДокументы.Количество() = 0 Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ПостроительРеестра = Новый ПостроительОтчета;
	НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки(,, Ложь, Ложь, Ложь);
	
	СтруктураГраф = ПолучитьСтруктуруГраф();
	ДополнительныеРеквизиты = "";
	ТекстЗапроса = "";
	Условие = "";
	
	ПроведениеРазрешить = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	
	Если НужныИтоги и ОтображатьДокументыВВидеДерева Тогда
		Если ВидСпискаДокументов = "ДеревоПоДням" Тогда
			ДополнительныеРеквизиты = "
			|	НАЧАЛОПЕРИОДА(__Документ.Дата, ДЕНЬ) КАК __ДатаДляГруппировки,"
		ИначеЕсли ВидСпискаДокументов = "ДеревоПоМесяцам" Тогда
			ДополнительныеРеквизиты = "
			|	НАЧАЛОПЕРИОДА(__Документ.Дата, МЕСЯЦ) КАК __ДатаДляГруппировки,"
		КонецЕсли;
	КонецЕсли;
	
	// Условие по периоду
	НачалоПериода = НастройкаПериодаЖурнала.ПолучитьДатуНачала();
	КонецПериода = НастройкаПериодаЖурнала.ПолучитьДатуОкончания();
	Если НачалоПериода = '00010101' и КонецПериода = '00010101' Тогда
	ИначеЕсли НачалоПериода = '00010101' и КонецПериода <> '00010101' Тогда
		Условие = "
		|ГДЕ 
		|	__Документ.Дата <= &КонецПериода"
	ИначеЕсли НачалоПериода = '00010101' и КонецПериода <> '00010101' Тогда
		Условие = "
		|ГДЕ 
		|	__Документ.Дата >= &НачалоПериода"
	Иначе
		Условие = "
		|ГДЕ 
		|	__Документ.Дата МЕЖДУ &НачалоПериода И &КонецПериода"
	КонецЕсли;
	
	Для каждого ДоступныйДокумент Из ДоступныеДокументы Цикл
		
		ИмяДокумента = ДоступныйДокумент.ИмяДокумента;
		МетаданныеДокумента = СтруктураМетаданныеДокументы[ИмяДокумента];
		Если МетаданныеДокумента = Неопределено Тогда Продолжить; КонецЕсли;
		
		ТекстЗапросаДляДокумента = ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ", мРазделительСтрок + "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + ДополнительныеРеквизиты + "
		|	__Документ.Дата,
		|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер", "NULL") + " КАК Номер,
		|	""" + МетаданныеДокумента.Представление + """  КАК ВидДокумента,
		|	__Документ.Ссылка";
		
		Индекс = 0;
		ТекстЗапросаДляГраф = "";
		ТекстЗапросаСоединение = "";
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл
		//	Индекс = Индекс + 1;
		//	Значение = ВыводимаяГрафа.Значение;
		//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
		//	Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда
		//		ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок +
		//		"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок +
		//		"	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок +
		//		"		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")";
		//		ПостроительРеестра.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]);
		//	КонецЕсли;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл Индекс = Индекс + 1; Значение = ВыводимаяГрафа.Значение; ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; Если Значение[ИмяДокумента + "__СоединениеСоСвойствами"] Тогда ТекстЗапросаСоединение = ТекстЗапросаСоединение + мРазделительСтрок + "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК __Свойство" + Индекс + мРазделительСтрок + "	ПО __Документ.Ссылка = __Свойство" + Индекс + ".Объект" + мРазделительСтрок + "		И (__Свойство" + Индекс + ".Свойство = &" + ИмяДокумента + "__СвойствоСсылка" + Индекс + ")"; ПостроительРеестра.Параметры.Вставить(ИмяДокумента + "__СвойствоСсылка" + Индекс, Значение[ИмяДокумента + "__СвойствоСсылка"]); КонецЕсли; КонецЦикла;
		
		ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "
		|ИЗ Документ." + ИмяДокумента + " КАК __Документ" + ТекстЗапросаСоединение + "
		|" + Условие + "
		|{ГДЕ
		|	__Документ.Ссылка,
		|	__Документ.ПометкаУдаления,
		|	__Документ.Проведен";
		
		ТекстЗапросаДляГраф = "";
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл
		//	ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + ВыводимаяГрафа.Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл ТекстЗапросаДляГраф = ТекстЗапросаДляГраф + ", " + мРазделительСтрок + ВыводимаяГрафа.Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ; КонецЦикла;
		
		ТекстЗапросаДляДокумента = ТекстЗапросаДляДокумента + ТекстЗапросаДляГраф + "}
		|";
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляДокумента;
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Если НужныИтоги и ОтображатьДокументыВВидеДерева Тогда
		Если ВидСпискаДокументов = "ДеревоПоГрафе" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ИТОГИ МАКСИМУМ(Дата) ПО __Графа1
			|";
		ИначеЕсли ВидСпискаДокументов = "ДеревоПоВидуДокумента" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ИТОГИ МАКСИМУМ(Дата) ПО ВидДокумента
			|";
		ИначеЕсли ВидСпискаДокументов = "ДеревоПоДням" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ИТОГИ МИНИМУМ(НАЧАЛОПЕРИОДА(Дата, ДЕНЬ)) КАК Дата ПО __ДатаДляГруппировки КАК Дата
			|";
		ИначеЕсли ВидСпискаДокументов = "ДеревоПоМесяцам" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ИТОГИ МИНИМУМ(НАЧАЛОПЕРИОДА(Дата, МЕСЯЦ)) КАК Дата ПО __ДатаДляГруппировки КАК Дата
			|";
		КонецЕсли;
	КонецЕсли; 
	
	ПостроительРеестра.Текст = ТекстЗапроса;
	ПостроительРеестра.ЗаполнитьНастройки();
	ПостроительРеестра.УстановитьНастройки(НастройкиПостроителя);
	
	ПостроительРеестра.Параметры.Вставить("НачалоПериода", НачалоПериода);
	ПостроительРеестра.Параметры.Вставить("КонецПериода", КонецПериода);
	Если ПостроительРеестра.Порядок.Количество() = 0 Тогда
		// По умолчанию считаем, что документы должны быть упорядочены по дате
		ПостроительРеестра.Порядок.Установить("Дата Возр");
	КонецЕсли;
	
	Возврат ПостроительРеестра;
	
КонецФункции // СформироватьПостроительДляДерева()

// Процедура вызывается при выборе пункта подменю кнопки "Ввести на основании" командной панели
// Процедура назначается обработчику события динамически.
Процедура ВвестиДокументПоОснованию(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	Док = Документы[Кнопка.Имя].СоздатьДокумент();
	ДокОсн = ЭлементыФормыСписокДокументов.ТекущиеДанные.Ссылка;
	Док.Заполнить(ДокОсн);
	Форма = Док.ПолучитьФорму();
	Форма.ПараметрОснование = ДокОсн;
	Форма.Открыть();
	
Конецпроцедуры // ВвестиДокументПоОснованию()

Процедура ПечатьТекущегоДокумента(Кнопка)
	
	ТекущиеДанные = ЭлементыФормыСписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено или ТекущиеДанные.Ссылка = Null Тогда
		Возврат
	КонецЕсли;
	
	ДокументОбъект = мТекущийДокументСсылка.ПолучитьОбъект();
	Попытка
		Выполнить("УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке("""", ДокументОбъект,, Кнопка.Текст)")
	Исключение
		Сообщить("Невозможно распечатать документ. Вероятно, в конфигурации используется механизм печатных форм, отличный от типового.")
	КонецПопытки;
	
КонецПроцедуры



Процедура КоманднаяПанельСпискаДействиеСброситьНастройки(Кнопка)
	
	ТекущийЭлемент.СоздатьКолонки();
	
	Колонки = ТекущийЭлемент.Колонки;
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого КолонкаТЧ Из ТекущийЭлемент.Значение.Колонки Цикл
	//	Если КолонкаТЧ.ТипЗначения = ОписаниеТипаБулево Тогда
	//		Колонка = Колонки[КолонкаТЧ.Имя];
	//		Колонка.ДанныеФлажка = Колонка.Данные;
	//		Колонка.Данные = "";
	//	КонецЕсли;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого КолонкаТЧ Из ТекущийЭлемент.Значение.Колонки Цикл Если КолонкаТЧ.ТипЗначения = ОписаниеТипаБулево Тогда Колонка = Колонки[КолонкаТЧ.Имя]; Колонка.ДанныеФлажка = Колонка.Данные; Колонка.Данные = ""; КонецЕсли; КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаДействиеНастройкиСпискаПоУмолчанию(Кнопка)
	
	Закладка = СтруктураЗакладок[0 + Сред(ЭлементыФормы.ПанельТабЧастей.ТекущаяСтраница.Имя, 10)];
	Ключ = Закладка.Источник;
	НастройкаКолонокДляТабличногоПоля = ПолучитьНастройкуКолонокТабличногоПоля(Ключ, Истина);
	СтруктураНастроекКолонокТабличныхПолей.Вставить(Ключ, НастройкаКолонокДляТабличногоПоля);
	
	мПрименитьНастройкуКолонокСписка(НастройкаКолонокДляТабличногоПоля, ТекущийЭлемент.Колонки);
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого КолонкаТЧ Из ТекущийЭлемент.Колонки Цикл
	//	КолонкаТЧ.Видимость = Истина;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого КолонкаТЧ Из ТекущийЭлемент.Колонки Цикл КолонкаТЧ.Видимость = Истина; КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаДействиеНастройкиСпискаКакВКонфигурации(Кнопка)
	
	Закладка = СтруктураЗакладок[0 + Сред(ЭлементыФормы.ПанельТабЧастей.ТекущаяСтраница.Имя, 10)];
	Ключ = Закладка.Источник;
	НастройкаКолонокДляТабличногоПоля = ПолучитьНастройкуКолонокТабличногоПоля(Ключ);
	СтруктураНастроекКолонокТабличныхПолей.Вставить(Ключ, НастройкаКолонокДляТабличногоПоля);
	
	мПрименитьНастройкуКолонокСписка(НастройкаКолонокДляТабличногоПоля, ТекущийЭлемент.Колонки, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаДействиеВосстановитьНастройки(Кнопка)
	
	ВосстановитьНастройкиТП();
	
	ИмяТекущейСтраницы = ЭлементыФормы.ПанельТабЧастей.ТекущаяСтраница.Имя;
	Закладка = СтруктураЗакладок[0 + Сред(ИмяТекущейСтраницы, 10)];
	
	НастройкаКолонокДляТабличногоПоля = СтруктураНастроекКолонокТабличныхПолей.Получить(Закладка.Источник);
	Если НастройкаКолонокДляТабличногоПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мПрименитьНастройкуКолонокСписка(НастройкаКолонокДляТабличногоПоля, ТекущийЭлемент.Колонки, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаДействиеСохранитьНастройки(Кнопка)
	
	ИмяТекущейСтраницы = ЭлементыФормы.ПанельТабЧастей.ТекущаяСтраница.Имя;
	Закладка = СтруктураЗакладок[0 + Сред(ИмяТекущейСтраницы, 10)];
	
	НастройкаКолонокДляТабличногоПоля = мПолучитьНастройкуКолонокСписка(ЭлементыФормы[ИмяТекущейСтраницы].Колонки);
	СтруктураНастроекКолонокТабличныхПолей.Вставить(Закладка.Источник, НастройкаКолонокДляТабличногоПоля);
	
	СохранитьНастройкиТП();
	
КонецПроцедуры



// Процедура вызывается при нажатии кнопки "Обновить" командной панели
//
Процедура КоманднаяПанельОбновитьСписок(Кнопка)
	
	Если ДоступныеДокументы.Количество() Тогда
		СтруктураЗапросовДляЗакладок = Неопределено;
		СтруктураПечатныхФорм = Неопределено;
		
		ОткытьФормуОбработка();
		ОбновитьТаблицуДокументов();
		ОбновитьИтоги();
		РазвернутьВсеУровени();
		ЗакрытьФормуОбработка();
	Иначе
		Предупреждение("Не определен состав документов журнала!");
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельОбновитьСписок()

Процедура КоманднаяПанельУсловноеОформление(Кнопка)
	
	ФормаОтбора = ПолучитьФорму("ФормаУсловногоОформления");
	НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки(,, Ложь, Ложь,);
	
	ФормаОтбора.УсловноеОформление = ПостроительОтчета.УсловноеОформление;
	ФормаОтбора.ОткрытьМодально();
	ПолучитьПараметрыУсловногоОформления();
	
КонецПроцедуры

Процедура КоманднаяПанельОтбор(Кнопка)
	
	ФормаОтбора = ПолучитьФорму("ФормаОтбора");
	НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки(,, Ложь, Ложь,);
	
	ФормаОтбора.Отбор = ПостроительОтчетаОтбор;
	ФормаОтбора.Порядок = ПостроительОтчета.Порядок;
	Если ФормаОтбора.ОткрытьМодально() = Истина Тогда
		ОткытьФормуОбработка();
		ПолучитьПараметрыУсловногоОформления();
		ОбновитьТаблицуДокументов();
		ОбновитьИтоги();
		НадписьОтбор = мОписаниеОтбора(ПостроительОтчетаОтбор);
		РазвернутьВсеУровени();
		ЗакрытьФормуОбработка();
	Иначе
		ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя,,, Ложь, Ложь,);
		ПолучитьПараметрыУсловногоОформления();
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельОтбор()

Процедура КоманднаяПанельОтборПоТекущемуЗначению(Кнопка)
	
	ТекущиеДанные = ЭлементыФормыСписокДокументов.ТекущиеДанные;
	ТекущаяКолонка = ЭлементыФормыСписокДокументов.ТекущаяКолонка;
	Если ТекущиеДанные = Неопределено или ТекущаяКолонка = Неопределено Тогда
		Возврат
	ИначеЕсли ТекущаяКолонка.Имя = "Дата" Тогда
		Предупреждение("Отбор по дате документа устанавливается через выбор периода.");
		Возврат
	КонецЕсли;
	
	Если Кнопка.Пометка Тогда
		ЭлементОтбора = ПостроительОтчетаОтбор.Найти(ТекущаяКолонка.Имя);
		Если ЭлементОтбора = Неопределено Тогда
			Возврат
		КонецЕсли;
		ЭлементОтбора.Использование = Ложь;
	Иначе
		УстановитьОтбор = Истина;
		ТекущееЗначение = ТекущиеДанные[ТекущаяКолонка.Имя];
		ЭлементОтбора = ПостроительОтчетаОтбор.Найти(ТекущаяКолонка.Имя);
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = ПостроительОтчетаОтбор.Добавить(ТекущаяКолонка.Имя, ТекущаяКолонка.Имя, СокрЛП(ТекущаяКолонка.ТекстШапки));
			ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
		ИначеЕсли ЭлементОтбора.Использование = Истина и ЭлементОтбора.Значение = ТекущееЗначение Тогда
			ЭлементОтбора.Использование = Ложь;
			УстановитьОтбор = Ложь;
		КонецЕсли;
		
		Если УстановитьОтбор Тогда
			ЭлементОтбора.Использование = Истина;
			Если ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) <> Тип("СписокЗначений") Тогда
					ЭлементОтбора.Значение = Новый СписокЗначений
				КонецЕсли;
				Попытка
					ЭлементОтбора.Значение.Добавить(ТекущееЗначение)
				Исключение
					ЭлементОтбора.Использование = Ложь
				КонецПопытки;
			Иначе
				ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
				Попытка
					ЭлементОтбора.Значение = ТекущееЗначение
				Исключение
					ЭлементОтбора.Использование = Ложь
				КонецПопытки;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	ОткытьФормуОбработка();
	ОбновитьТаблицуДокументов();
	ОбновитьИтоги();
	НадписьОтбор = мОписаниеОтбора(ПостроительОтчетаОтбор);
	РазвернутьВсеУровени();
	ЗакрытьФормуОбработка();
	
КонецПроцедуры // КоманднаяПанельОтборПоТекущемуЗначению()

Процедура КоманднаяПанельОтключитьОтбор(Кнопка)
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ЭлементОтбора Из ПостроительОтчетаОтбор Цикл
	//	ЭлементОтбора.Использование = Ложь;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ЭлементОтбора Из ПостроительОтчетаОтбор Цикл ЭлементОтбора.Использование = Ложь; КонецЦикла;
	
	ОткытьФормуОбработка();
	ОбновитьТаблицуДокументов();
	ОбновитьИтоги();
	НадписьОтбор = мОписаниеОтбора(ПостроительОтчетаОтбор);
	РазвернутьВсеУровени();
	ЗакрытьФормуОбработка();
	
КонецПроцедуры

Процедура КоманднаяПанельНастройка(Кнопка)
	
	ОбновитьФорму = Ложь;
	ФормаНастройки = ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	Если ФормаНастройки.ОткрытьМодально() = Истина Тогда
		
		Если ОбновитьФорму Тогда
			ОткытьФормуОбработка();
			ИнициализироватьПостроитель();
			ОбновитьТаблицуДокументов();
			НастроитьДополнительныеКолонки();
			ОбновитьИтоги();
			ОбновитьКнопки();
			РазвернутьВсеУровени();
		Иначе
			ОбновитьКнопки();
		КонецЕсли;
		
		ЗакрытьФормуОбработка();
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельНастройка()

// Процедура вызывается при нажатии кнопки "Установить пометку удаления" командной панели
Процедура КоманднаяПанельУстановитьПометкуУдаления(Кнопка)
	
	УстановитьПометкуУдаления();
	
КонецПроцедуры // КоманднаяПанельУстановитьПометкуУдаления()

// Процедура вызывается при нажатии кнопок "Провести", "Отмена проведения" командной панели
Процедура КоманднаяПанельПровестиРаспровести(Кнопка)
	
	ТекущиеДанные = ЭлементыФормыСписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Ссылка <> Null Тогда
		ТекДок = ТекущиеДанные.Ссылка;
		НадоОбновлять = Ложь;
		Если ТекущиеДанные.Проведен И Кнопка.Имя = "ОтменаПроведения" Тогда
			ДокОбъект = ТекДок.ПолучитьОбъект();
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				НадоОбновлять = Истина;
			Исключение
				Сообщить(ОписаниеОшибки());
				Предупреждение("Операция не выполнена!");
			КонецПопытки;
		ИначеЕсли Кнопка.Имя = "Провести" Тогда
			ДокОбъект = ТекДок.ПолучитьОбъект();
			
			Если ДокОбъект.Дата > КонецДня(ТекущаяДата()) Тогда
				Предупреждение("Нельзя проводить документы будущей датой!");
				Возврат;
			КонецЕсли;
			
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				НадоОбновлять = Истина;
			Исключение
				Сообщить(ОписаниеОшибки());
				Предупреждение("Операция не выполнена!");
			КонецПопытки;
		КонецЕсли;
		
		Если НадоОбновлять Тогда
			ОбновитьДанныеПоСсылке(ТекущиеДанные.Ссылка);
			ОбновитьКнопки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельПровестиРаспровести()

// Процедура открывает типовой журнал документов
//
Процедура КоманднаяПанельПерейтиВТиповойЖурналДокументов(Кнопка)
	
	ТекущиеДанные = ЭлементыФормыСписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено или ТекущиеДанные.Ссылка = Null Тогда
		Возврат
	КонецЕсли;
	
	Форма = Документы[мТекущийДокументМетаданные.Имя].ПолучитьФормуСписка();
	Форма.ПараметрТекущаяСтрока = мТекущийДокументСсылка;
	Форма.Открыть();
	
КонецПроцедуры

// Процедура вызывает отчет конфигурации "ДвиженияДокумента"
//
Процедура КоманднаяПанельДвиженияДокументаПоРегистрам(Кнопка)
	
	ТекущиеДанные = ЭлементыФормыСписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено или ТекущиеДанные.Ссылка = Null Тогда
		Возврат
	КонецЕсли;
	
	Попытка
		Выполнить("РаботаСДиалогами.НапечататьДвиженияДокумента(ТекущиеДанные.Ссылка)");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Процедура выводит отчет по структуре подчиненности текущего документа
//
Процедура КоманднаяПанельСтруктураПодчиненностиДокумента(Кнопка)
	
	ТекущиеДанные = ЭлементыФормыСписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено и ТекущиеДанные.Ссылка <> Null Тогда
		Форма = ПолучитьОбщуюФорму("ФормаСтруктурыПодчиненности", ЭтаФорма);
		Если Форма.Открыта() Тогда
			Форма.Закрыть();
		КонецЕсли;
		Форма.ДокументСсылка = ТекущиеДанные.Ссылка;
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедуры выводит отчет по истории документа
//
Процедура КоманднаяПанельИсторияДокумента(Кнопка)
	
	ТекущиеДанные = ЭлементыФормыСписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено или ТекущиеДанные.Ссылка = Null Тогда
		Возврат
	КонецЕсли;
	
	ОткытьФормуОбработка();
	
	Форма = ПолучитьФорму("ФормаИсторияДокумента", ЭтаФорма);
	Форма.ТекущийДокументСсылка = мТекущийДокументСсылка;
	Форма.Открыть();
	
	ЗакрытьФормуОбработка();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю кнопки "Перейти" командной панели
// Процедура назначается обработчику события динамически.
Процедура ПоказатьДвиженияДокумента(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	Если Метаданные.РегистрыНакопления.Найти(Кнопка.Имя) <> Неопределено Тогда
		Форма = РегистрыНакопления[Кнопка.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.РегистрыСведений.Найти(Кнопка.Имя) <> Неопределено Тогда
		Форма = РегистрыСведений[Кнопка.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Найти(Кнопка.Имя) <> Неопределено Тогда
		Форма = РегистрыБухгалтерии[Кнопка.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.РегистрыРасчета.Найти(Кнопка.Имя) <> Неопределено Тогда
		Форма = РегистрыРасчета[Кнопка.Имя].ПолучитьФормуСписка();
	КонецЕсли;
	
	Форма.ПараметрОтборПоРегистратору = ЭлементыФормыСписокДокументов.ТекущиеДанные.Ссылка;
	Форма.Открыть();
	
Конецпроцедуры // ПоказатьДвиженияДокумента()

Процедура КоманднаяПанельПечатьРеестра(Кнопка)
		
	ПостроительРеестра = СформироватьПостроительДляДерева(Истина);
	Если ПостроительРеестра = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПостроительРеестра.Макет = ПолучитьМакет("МакетРеестра");
	ПостроительРеестра.Макет.Параметры.ТекущаяДата = ТекущаяДата();
	ПостроительРеестра.Вывести(ТабличныйДокумент);
	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область(5,,5,);
	ТабличныйДокумент.Защита = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	ТабличныйДокумент.ФиксацияСверху = 5;
	
	Попытка
		//УниверсальныеМеханизмы.НапечататьДокумент(ТабличныйДокумент,,, "Реестр документов");
	Исключение
		ТабличныйДокумент.Показать();
	КонецПопытки;
	
КонецПроцедуры // КоманднаяПанельПечатьРеестра()

Процедура КоманднаяПанельПроизвольныйОтчет(Кнопка)
	
	рСКД = СоздатьСКД();
	Если рСКД = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ФормаНастроекСКД = ПолучитьФорму("ФормаПроизвольногоОтчета");
	ФормаНастроекСКД.СхемаКомпоновкиДанных = рСКД;
	ФормаНастроекСКД.КомпоновщикНастроекСКД = КомпоновщикНастроекСКД;
	ФормаНастроекСКД.Открыть();
	
КонецПроцедуры // КоманднаяПанельПроизвольныйОтчет()

Процедура КоманднаяПанельУстановитьИнтервалДат(Кнопка)
	
	ИнициализироватьНастройкуПериодаЖурнала();
	Если НастройкаПериодаЖурнала.Редактировать() Тогда
		УстановитьЗаголовокОкна();
	ОткытьФормуОбработка();
		ИнициализироватьПостроитель();
		ОбновитьТаблицуДокументов();
		ОбновитьИтоги();
		РазвернутьВсеУровени();
	ЗакрытьФормуОбработка();
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельУстановитьИнтервалДат()

// Процедура - обработчик нажатия кнопки "ВосстановитьЗначения"
//
Процедура КоманднаяПанельФормыДействиеВосстановитьЗначения(Кнопка)
	
	ВосстановитьНастройки();
	УстановитьЗаголовокОкна();
	
КонецПроцедуры // КоманднаяПанельФормыДействиеВосстановитьЗначения()

// Процедура - обработчик нажатия кнопки "СохранитьЗначения"
//
Процедура КоманднаяПанельФормыДействиеСохранитьЗначения(Кнопка)
	
	СохранитьНастройки();
	УстановитьЗаголовокОкна();
	
КонецПроцедуры // КоманднаяПанельФормыДействиеСохранитьЗначения()

// Процедура - обработчик нажатия кнопки "ПоискПоНомеру"
//
Процедура КоманднаяПанельПоиск(Кнопка)
	
	Форма = ПолучитьФорму("ФормаПоиск", ЭтаФорма);
	ВидыДокументов = Форма.ВидыДокументов;
	ВидыДокументов.ЗагрузитьЗначения(ДоступныеДокументы.ВыгрузитьКолонку("ИмяДокумента"));
	Если ВидыДокументов.Количество()>1 тогда //+++
		для i=2 по ВидыДокументов.Количество() цикл
			ВидыДокументов.Удалить(0);
		КонецЦикла;
	КонецЕсли;
	
	ВидыДокументов.ЗаполнитьПометки(Истина);
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ЭлементСписка Из ВидыДокументов Цикл
	//	ЭлементСписка.Представление = СтруктураМетаданныеДокументы[ЭлементСписка.Значение].Представление;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ЭлементСписка Из ВидыДокументов Цикл ЭлементСписка.Представление = СтруктураМетаданныеДокументы[ЭлементСписка.Значение].Представление; КонецЦикла;
	
	ТекущиеДанные = ЭлементыФормыСписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено и ТекущиеДанные.Ссылка <> Null Тогда
		Форма.НомерДокумента = СокрП(ТекущиеДанные.Номер);
		Форма.НачалоПериода = НастройкаПериодаЖурнала.ПолучитьДатуНачала();
		Форма.КонецПериода = НастройкаПериодаЖурнала.ПолучитьДатуОкончания();
	КонецЕсли;
	
	РезультатПоиска = Форма.ОткрытьМодально(300);
	
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		Если ТипЗнч(РезультатПоиска) = Тип("СписокЗначений") Тогда
			ПостроительОтчетаОтбор = ПостроительОтчета.Отбор;
			ЭлементОтбора = ПостроительОтчетаОтбор.Найти("Ссылка");
			Если ЭлементОтбора = Неопределено Тогда
				ЭлементОтбора = ПостроительОтчетаОтбор.Добавить("Ссылка","Ссылка",);
			КонецЕсли;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
			ЭлементОтбора.Значение = РезультатПоиска;
			КоманднаяПанельОбновитьСписок("");
		Иначе
			ТекущаяСтрока = НайтиДокументВСпискеДокументов(РезультатПоиска);
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормыСписокДокументов;
			Если ТекущаяСтрока = Неопределено Тогда
				Предупреждение("Не удалось спозиционироваться на документе.
				|Проверьте период журнала и установленные отборы.", 90, "Поиск документов");
			Иначе
				ЭлементыФормыСписокДокументов.ТекущаяСтрока = ТекущаяСтрока;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельПоискПоНомеру()

// Процедура вызывается при выборе пункта "Развернуть видимые строки" подменю кнопки "Развернуть / свернуть строки" командной панели
// 
Процедура КоманднаяПанельРазвернутьВидимыеСтроки(Кнопка)
	
	Если ОтображатьДокументыВВидеДерева Тогда
		ЗаполнитьСписокСтрок = Истина;
		ЭлементыФормыСписокДокументов.ОбновитьСтроки();
		
		Если СписокВидимыхСтрок = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		МассивСтрок = Новый Массив;
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого СтрокаСписка Из СписокВидимыхСтрок Цикл
		//	Если Не СтрокаСписка.УровеньРазвернут Тогда
		//		МассивСтрок.Добавить(СтрокаСписка);
		//	КонецЕсли;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого СтрокаСписка Из СписокВидимыхСтрок Цикл Если Не СтрокаСписка.УровеньРазвернут Тогда МассивСтрок.Добавить(СтрокаСписка); КонецЕсли; КонецЦикла;
		
		ЭлементыФормыСписокДокументов.УстановитьДействие("ПередРазворачиванием", Неопределено);
		ЭлементыФормы.ПанельПодвал.ТекущаяСтраница = ЭлементыФормы.ПанельПодвал.Страницы.Индикатор;
		мИндикаторСостояния = ЭлементыФормы.ИндикаторСостояния;
		мИндикаторСостояния.МаксимальноеЗначение = СписокВидимыхСтрок.Количество() + МассивСтрок.Количество() * 2;
		мИндикаторСостояния.Значение = 0;  Счетчик = 0;
		
		РазвернутьУровниПоСписку(МассивСтрок, Счетчик, мИндикаторСостояния);
		
		// Код в комментарии записаный в 2 строки находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для Индекс = 1 - СписокВидимыхСтрок.Количество() По 0 Цикл
		//	СтрокаСписка = СписокВидимыхСтрок[-Индекс];
		//	Если Не ЭлементыФормыСписокДокументов.Развернут(СтрокаСписка) Тогда
		//		ЭлементыФормыСписокДокументов.Развернуть(СтрокаСписка);
		//	КонецЕсли;
		//	ПодключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние", 0.1, Истина);
		//	ОбработкаПрерыванияПользователя();
		//	ОтключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние");
		//	Счетчик = Счетчик + 1;
		//	мИндикаторСостояния.Значение = Счетчик;
		//КонецЦикла;

		// Код записанный в 2 строки находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для Индекс = 1 - СписокВидимыхСтрок.Количество() По 0 Цикл СтрокаСписка = СписокВидимыхСтрок[-Индекс]; Если Не ЭлементыФормыСписокДокументов.Развернут(СтрокаСписка) Тогда ЭлементыФормыСписокДокументов.Развернуть(СтрокаСписка); КонецЕсли; ПодключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние", 0.1, Истина);
			ОбработкаПрерыванияПользователя(); ОтключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние"); Счетчик = Счетчик + 1; мИндикаторСостояния.Значение = Счетчик; КонецЦикла;
		
		ВосстановитьПервоначальноеСостояние();
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выборе пункта "Развернуть все строки" подменю кнопки "Развернуть / свернуть строки" командной панели
// 
Процедура КоманднаяПанельРазвернутьВсеСтроки(Кнопка)
	
	Если ОтображатьДокументыВВидеДерева Тогда
		ОткытьФормуОбработка();
		ЭлементыФормыСписокДокументов.УстановитьДействие("ПередРазворачиванием", Неопределено);
		
		Строки = СписокДокументов.Строки;
		МассивСтрок = Строки.НайтиСтроки(Новый Структура("УровеньРазвернут", Ложь));
		
		ЭлементыФормы.ПанельПодвал.ТекущаяСтраница = ЭлементыФормы.ПанельПодвал.Страницы.Индикатор;
		мИндикаторСостояния = ЭлементыФормы.ИндикаторСостояния;
		мИндикаторСостояния.МаксимальноеЗначение = Строки.Количество() + МассивСтрок.Количество() * 2;
		мИндикаторСостояния.Значение = 0;  Счетчик = 0;
		
		Окончание = МассивСтрок.ВГраница();
		Если Окончание < 500 Тогда
			РазвернутьУровниПоСписку(МассивСтрок, Счетчик, мИндикаторСостояния);
		Иначе
			Индекс = 0;
			// Код в комментарии записаный в 1 строку находится ниже этого комментария
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			//Пока Индекс < Окончание Цикл
			//	КучаСтрок = Новый Массив;
			//	Для Индекс = Индекс По Мин(Индекс + 499, Окончание) Цикл
			//		КучаСтрок.Добавить(МассивСтрок[Индекс]);
			//	КонецЦикла;
			//	РазвернутьУровниПоСписку(КучаСтрок, Счетчик, мИндикаторСостояния);
			//	ПодключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние", 0.1, Истина);
			//	ОбработкаПрерыванияПользователя();
			//	ОтключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние");
			//КонецЦикла; 

			// Код записанный в 1 строку находится в комментарии расположенном выше
			// Для редактирования кода снимите комментарий
			// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
			Пока Индекс < Окончание Цикл КучаСтрок = Новый Массив; Для Индекс = Индекс По Мин(Индекс + 499, Окончание) Цикл КучаСтрок.Добавить(МассивСтрок[Индекс]); КонецЦикла; РазвернутьУровниПоСписку(КучаСтрок, Счетчик, мИндикаторСостояния); ПодключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние", 0.1, Истина);
				ОбработкаПрерыванияПользователя(); ОтключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние"); КонецЦикла;
		КонецЕсли;
		
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для Индекс = 1 - Строки.Количество() По 0 Цикл
		//	СтрокаСписка = Строки[-Индекс];
		//	Если Не ЭлементыФормыСписокДокументов.Развернут(СтрокаСписка) Тогда
		//		ЭлементыФормыСписокДокументов.Развернуть(СтрокаСписка);
		//	КонецЕсли;
		//	ПодключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние", 0.1, Истина);
		//	ОбработкаПрерыванияПользователя();
		//	ОтключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние");
		//	Счетчик = Счетчик + 1;
		//	мИндикаторСостояния.Значение = Счетчик;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для Индекс = 1 - Строки.Количество() По 0 Цикл СтрокаСписка = Строки[-Индекс]; Если Не ЭлементыФормыСписокДокументов.Развернут(СтрокаСписка) Тогда ЭлементыФормыСписокДокументов.Развернуть(СтрокаСписка); КонецЕсли; ПодключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние", 0.1, Истина);
			ОбработкаПрерыванияПользователя(); ОтключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние"); Счетчик = Счетчик + 1; мИндикаторСостояния.Значение = Счетчик; КонецЦикла;
		
		ВосстановитьПервоначальноеСостояние();
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выборе пункта "Свернуть видимые строки" подменю кнопки "Развернуть / свернуть строки" командной панели
// 
Процедура КоманднаяПанельСвернутьВидимыеСтроки(Кнопка)
	
	Если ОтображатьДокументыВВидеДерева Тогда
		ЗаполнитьСписокСтрок = Истина;
		ЭлементыФормыСписокДокументов.ОбновитьСтроки();
			
		Если СписокВидимыхСтрок = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого СтрокаСписка Из СписокВидимыхСтрок Цикл
		//	Если ЭлементыФормыСписокДокументов.Развернут(СтрокаСписка) Тогда
		//		ЭлементыФормыСписокДокументов.Свернуть(СтрокаСписка);
		//	КонецЕсли;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого СтрокаСписка Из СписокВидимыхСтрок Цикл Если ЭлементыФормыСписокДокументов.Развернут(СтрокаСписка) Тогда ЭлементыФормыСписокДокументов.Свернуть(СтрокаСписка); КонецЕсли; КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выборе пункта "Свернуть все строки" подменю кнопки "Развернуть / свернуть строки" командной панели
// 
Процедура КоманднаяПанельСвернутьВсеСтроки(Кнопка)
	
	Если ОтображатьДокументыВВидеДерева Тогда
		ЭлементыФормы.ПанельПодвал.ТекущаяСтраница = ЭлементыФормы.ПанельПодвал.Страницы.Индикатор;
		мИндикаторСостояния = ЭлементыФормы.ИндикаторСостояния;
		мИндикаторСостояния.МаксимальноеЗначение = СписокДокументов.Строки.Количество();
		мИндикаторСостояния.Значение = 0;  Счетчик = 0;
		
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для каждого СтрокаСписка Из СписокДокументов.Строки Цикл
		//	Если ЭлементыФормыСписокДокументов.Развернут(СтрокаСписка) Тогда
		//		ЭлементыФормыСписокДокументов.Свернуть(СтрокаСписка)
		//	КонецЕсли;
		//	ПодключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние", 0.1, Истина);
		//	ОбработкаПрерыванияПользователя();
		//	Счетчик = Счетчик + 1;
		//	мИндикаторСостояния.Значение = Счетчик;
		//КонецЦикла;

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для каждого СтрокаСписка Из СписокДокументов.Строки Цикл Если ЭлементыФормыСписокДокументов.Развернут(СтрокаСписка) Тогда ЭлементыФормыСписокДокументов.Свернуть(СтрокаСписка) КонецЕсли; ПодключитьОбработчикОжидания("ВосстановитьПервоначальноеСостояние", 0.1, Истина);
			ОбработкаПрерыванияПользователя(); Счетчик = Счетчик + 1; мИндикаторСостояния.Значение = Счетчик; КонецЦикла;
		
		ВосстановитьПервоначальноеСостояние();
	КонецЕсли
	
КонецПроцедуры

Процедура ВосстановитьПервоначальноеСостояние()
	
	ЭлементыФормыСписокДокументов.УстановитьДействие("ПередРазворачиванием", Новый Действие("СписокДокументовПередРазворачиванием"));
	ЭлементыФормы.ПанельПодвал.ТекущаяСтраница = ЭлементыФормы.ПанельПодвал.Страницы.Надпись;
	ЗакрытьФормуОбработка();
	
КонецПроцедуры // ВосстановитьПервоначальноеСостояние()



// Процедура для перенаправления вызова для обработчика ожидания
//
Процедура ДействияПослеОткрытия()
	
	НастройкаПериодаЖурнала.ДатаНачала = НачалоМесяца(ТекущаяДата());
	НастройкаПериодаЖурнала.ДатаОкончания = КонецМесяца(ТекущаяДата());
	КоманднаяПанельНастройка("");
	
КонецПроцедуры //ДействияПослеОткрытия()

Процедура ОткытьФормуОбработка()
	
	Если мФормаОбработка = Неопределено Тогда
		мФормаОбработка = ПолучитьФорму("ФормаОбработка", ЭтаФорма);
	КонецЕсли;
	
	Если Не мФормаОбработка.Открыта() Тогда
		мФормаОбработка.Открыть()
	КонецЕсли;
	
КонецПроцедуры // ОткытьФормуОбработка()

Процедура ЗакрытьФормуОбработка()
	
	Если мФормаОбработка <> Неопределено и мФормаОбработка.Открыта() Тогда
		мФормаОбработка.Закрыть()
	КонецЕсли;
	
КонецПроцедуры // ОткытьФормуОбработка()

///////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ МОДУЛЯ
//

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	ОткытьФормуОбработка();
	мКартинкаСвойство = БиблиотекаКартинок.Лупа;
	мКартинкаПустая = Новый Картинка;
	
	мРазделительСтрок = Символы.ВК + Символы.ПС;
	мЕстьОтчетПоДвижению = Не (Метаданные.Отчеты.Найти("ДвиженияДокумента") = Неопределено);
	мЕстьФормаСтруктурыПодчиненности = Не (Метаданные.ОбщиеФормы.Найти("ФормаСтруктурыПодчиненности") = Неопределено);
	мЕстьТиповойМеханизмПечати = (	Метаданные.Справочники.Найти("ВнешниеОбработки") <> Неопределено 
									и Метаданные.Перечисления.Найти("ВидыДополнительныхВнешнихОбработок") <> Неопределено
									и Метаданные.Перечисления["ВидыДополнительныхВнешнихОбработок"].ЗначенияПеречисления.Найти("ПечатнаяФорма") <> Неопределено);

	мВводНаОсновании = Новый ТаблицаЗначений;
	мВводНаОсновании.Колонки.Добавить("ВводитсяНаОсновании");
	мВводНаОсновании.Колонки.Добавить("Документ");

	ИнициализироватьНастройкуПериодаЖурнала();

	ВидимостьПанелиТабЧастей = Истина;
	ОтрисовкаЗакладок = Истина;

	ТипФлажок = Тип("Флажок");
	ТипЧисло = Тип("Число");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ОписаниеТипаХранилищеЗначений = Новый ОписаниеТипов("ХранилищеЗначения");
	
	СтруктураНастроекКолонокТабличныхПолей = Новый Соответствие; 

	мЦветФона = Новый Цвет(255, 251, 240);

	//Если мЕстьОтчетПоДвижению Тогда
	//	ЭлементыФормы.КоманднаяПанель.Кнопки.Перейти.Кнопки.ДвиженияДокументаПоРегистрам.Доступность = Истина;
	//КонецЕсли;

	//Если мЕстьФормаСтруктурыПодчиненности Тогда
	//	ЭлементыФормы.КоманднаяПанель.Кнопки.Перейти.Кнопки.СтруктураПодчиненностиДокумента.Доступность = Истина;
	//КонецЕсли;
	
	Если Метаданные.КритерииОтбора.Найти("СтруктураПодчиненности") <> Неопределено Тогда
		мСоставКритерияОтбора = Метаданные.КритерииОтбора.СтруктураПодчиненности.Состав;
	ИначеЕсли Метаданные.КритерииОтбора.Найти("СвязанныеДокументы") <> Неопределено Тогда
		мСоставКритерияОтбора = Метаданные.КритерииОтбора.СвязанныеДокументы.Состав;
	КонецЕсли;
	
	ЭлементыФормыСписокДокументов = ЭлементыФормы.СписокДокументов;
	ЭлементыФормыСписокДокументовКолонки = ЭлементыФормыСписокДокументов.Колонки;
	ЭлементыФормыПанельТабЧастей = ЭлементыФормы.ПанельТабЧастей;
	ЭлементыФормыПанельПодвал = ЭлементыФормы.ПанельПодвал;
	ЭлементыФормыКоманднаяПанельСпискаКнопки = ЭлементыФормы.КоманднаяПанельСписка.Кнопки;
	
	// Для быстрого доступа к кнопкам меню
	КнопкиМеню = ЭлементыФормы.КоманднаяПанель.Кнопки;
	КнопкаОтборИСортировка = КнопкиМеню.ОтборИСортировка;
	КнопкаОтборПоТекущемуЗначению = КнопкиМеню.ОтборПоТекущемуЗначению;
	КнопкаОтключитьОтбор = КнопкиМеню.ОтключитьОтбор;
	КнопкаПодменюТекущийДокумент = КнопкиМеню.ПодменюПечать.Кнопки.ТекущийДокумент;
//	КнопкиРазвернутьСвернутьСтроки = КнопкиМеню.РазвернутьСвернутьСтроки.Кнопки;
	КнопкиДействия = КнопкиМеню.Действия.Кнопки;
	
//	МенюПерейти = КнопкиМеню.Перейти;
//	МенюПерейтиКнопки = МенюПерейти.Кнопки;
	МенюВводПоОснованию = КнопкиМеню.ВводПоОснованию;
	МенюВводПоОснованиюКнопки = МенюВводПоОснованию.Кнопки;
	МенюПровести = КнопкиМеню.Провести;
	МенюОтменаПроведения = КнопкиМеню.ОтменаПроведения;
	МенюУстановитьПометкуУдаления = КнопкиМеню.УстановитьПометкуУдаления;
	
	//ДействияПерейти = КнопкиДействия.Перейти;
	//ДействияПерейтиКнопки = ДействияПерейти.Кнопки;
	ДействияВводПоОснованию = КнопкиДействия.ВводПоОснованию;
	ДействияВводПоОснованиюКнопки = ДействияВводПоОснованию.Кнопки;
	ДействияПровести = КнопкиДействия.Провести;
	ДействияОтменаПроведения = КнопкиДействия.ОтменаПроведения;
	ДействияУстановитьПометкуУдаления = КнопкиДействия.УстановитьПометкуУдаления;
	
	МетаданныеДокументы = Метаданные.Документы;
	СтруктураМетаданныеДокументы = Новый Структура;
	ТаблицаМетаданныеДокументы = Новый ТаблицаЗначений;
	Колонки = ТаблицаМетаданныеДокументы.Колонки;
	Колонки.Добавить("Имя", ОписаниеТипаСтрока);
	Колонки.Добавить("ДлинаНомера", ОписаниеТипаЧисло);
	Колонки.Добавить("Представление", ОписаниеТипаСтрока);
	Колонки.Добавить("Проведение");
	Колонки.Добавить("Реквизиты");
	Колонки.Добавить("ТабличныеЧасти");
	Колонки.Добавить("Метаданные");
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого МетаданныеДокумента Из МетаданныеДокументы Цикл
	//	Строка = ТаблицаМетаданныеДокументы.Добавить();
	//	Строка.Метаданные = МетаданныеДокумента;
	//	Строка.Имя = МетаданныеДокумента.Имя;
	//	Строка.ДлинаНомера = МетаданныеДокумента.ДлинаНомера;
	//	Строка.Представление = МетаданныеДокумента.Представление();
	//	Строка.Проведение = МетаданныеДокумента.Проведение;
	//	Строка.Реквизиты = МетаданныеДокумента.Реквизиты;
	//	Строка.ТабличныеЧасти = МетаданныеДокумента.ТабличныеЧасти;
	//	СтруктураМетаданныеДокументы.Вставить(МетаданныеДокумента.Имя, Строка);
	//	
	//	Для каждого ВводитсяНаОсновании Из МетаданныеДокумента.ВводитсяНаОсновании Цикл
	//		НоваяСтрока = мВводНаОсновании.Добавить();
	//		НоваяСтрока.ВводитсяНаОсновании = ВводитсяНаОсновании;
	//		НоваяСтрока.Документ = МетаданныеДокумента;
	//	КонецЦикла;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого МетаданныеДокумента Из МетаданныеДокументы Цикл Строка = ТаблицаМетаданныеДокументы.Добавить(); Строка.Метаданные = МетаданныеДокумента; Строка.Имя = МетаданныеДокумента.Имя; Строка.ДлинаНомера = МетаданныеДокумента.ДлинаНомера; Строка.Представление = МетаданныеДокумента.Представление(); Строка.Проведение = МетаданныеДокумента.Проведение; Строка.Реквизиты = МетаданныеДокумента.Реквизиты; Строка.ТабличныеЧасти = МетаданныеДокумента.ТабличныеЧасти; СтруктураМетаданныеДокументы.Вставить(МетаданныеДокумента.Имя, Строка); Для каждого ВводитсяНаОсновании Из МетаданныеДокумента.ВводитсяНаОсновании Цикл НоваяСтрока = мВводНаОсновании.Добавить(); НоваяСтрока.ВводитсяНаОсновании = ВводитсяНаОсновании; НоваяСтрока.Документ = МетаданныеДокумента; КонецЦикла; КонецЦикла;

	СтруктураНастройки = Новый Структура;
	Попытка
		Выполнить("СтруктураНастройки.Вставить(""Пользователь"", глЗначениеПеременной(""глТекущийПользователь""))");
	Исключение
		СтруктураНастройки.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	КонецПопытки;
	СтруктураНастройки.Вставить("ИмяОбъекта", "Обработка." + Строка(ЭтотОбъект) + ".ТП");
	
	НастройкаВосстановлена = ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки, "ДревовидныйЖурналДокументов_ТаблицаНастроекТП");
	
	Если НастройкаВосстановлена Тогда
		ВосстановитьНастройкиИзСтруктурыТП(СтруктураНастройки.СохраненнаяНастройка);
		мТекущаяНастройкаТП = СтруктураНастройки;
	КонецЕсли;
	
	СтруктураНастройки = Новый Структура;
	Попытка
		Выполнить("СтруктураНастройки.Вставить(""Пользователь"", глЗначениеПеременной(""глТекущийПользователь""))");
	Исключение
		СтруктураНастройки.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	КонецПопытки;
	СтруктураНастройки.Вставить("ИмяОбъекта", "Обработка." + Строка(ЭтотОбъект));
	
	НастройкаВосстановлена = ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки, "ДревовидныйЖурналДокументов_ТаблицаНастроек");
	
	Если НастройкаВосстановлена Тогда
		Попытка
			ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СохраненнаяНастройка);
			мТекущаяНастройка = СтруктураНастройки;
		Исключение
		//	// Сброс настроек при ошибке
			НастройкаВосстановлена = Ложь;
			ОтображатьДокументыВВидеДерева = Ложь;
		//	ДоступныеДокументы.Очистить();
		//	ВыводимыеГрафы.Очистить();
		КонецПопытки;
	КонецЕсли;
	
	Если Не НастройкаВосстановлена Тогда
		Если Не ОтображатьДокументыВВидеДерева Тогда
			ВидСпискаДокументов = "Список";
		КонецЕсли;
		
		Если ПустаяСтрока(ВидСпискаДокументов) Тогда
			Если ОтображатьДокументыВВидеДерева Тогда
				ВидСпискаДокументов = "ДеревоПоДням";
			Иначе
				ВидСпискаДокументов = "Список";
			КонецЕсли;
		КонецЕсли;
		
		ИнициализироватьПостроитель();
		ОбновитьТаблицуДокументов();
		НастроитьДополнительныеКолонки();
		ОбновитьИтоги();
		
		НадписьОтбор = мОписаниеОтбора(ПостроительОтчетаОтбор);
	КонецЕсли;
	
	Если ДоступныеДокументы.Количество() = 0 Тогда
		ПодключитьОбработчикОжидания("ДействияПослеОткрытия", 0.1, Истина);
	КонецЕсли;
	
	УстановитьЗаголовокОкна();
	
	ОбновитьКнопки();
	ЗакрытьФормуОбработка();
	
	Nmax = СписокДокументов.Строки.Количество();
	ЭлементыФормы.СписокДокументов.ТекущаяСтрока = СписокДокументов.Строки[Nmax-1];
//	ЭлементыФормы.КоманднаяПанель.Кнопки.Публикация.Кнопки.ОтключитьПроверкуНовыхВерсий.Пометка = ОтключитьПроверкуНовыхВерсий;
//	ПодключитьОбработчикОжидания("ПроверитьНовуюВерсию", 100, Истина);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()
	
	Перем СохраненнаяНастройка;
	Перем СохраненнаяНастройкаТП;
	
	Если мТекущаяНастройка <> Неопределено И мТекущаяНастройка.НаименованиеНастройки <> Неопределено И мТекущаяНастройка.Свойство("СохранятьАвтоматически") И мТекущаяНастройка.СохранятьАвтоматически Тогда
	
		СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
		
		СтруктураНастройки = Новый Структура;
		Попытка
			Выполнить("СтруктураНастройки.Вставить(""Пользователь"", глЗначениеПеременной(""глТекущийПользователь""))");
		Исключение
			СтруктураНастройки.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
		КонецПопытки;
		СтруктураНастройки.Вставить("ИмяОбъекта", "Обработка." + Строка(ЭтотОбъект));
		СтруктураНастройки.Вставить("НаименованиеНастройки", мТекущаяНастройка.НаименованиеНастройки);
		СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", мТекущаяНастройка.ИспользоватьПриОткрытии);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", мТекущаяНастройка.СохранятьАвтоматически);
		
		СохранитьНастройку(СтруктураНастройки, "ДревовидныйЖурналДокументов_ТаблицаНастроек")

	КонецЕсли;
	
	Если мТекущаяНастройкаТП <> Неопределено И мТекущаяНастройкаТП.НаименованиеНастройки <> Неопределено И мТекущаяНастройкаТП.Свойство("СохранятьАвтоматически") И мТекущаяНастройкаТП.СохранятьАвтоматически Тогда
	
		СформироватьСтруктуруДляСохраненияНастроекТП(СохраненнаяНастройкаТП);
		
		СтруктураНастройки = Новый Структура;
		Попытка
			Выполнить("СтруктураНастройки.Вставить(""Пользователь"", глЗначениеПеременной(""глТекущийПользователь""))");
		Исключение
			СтруктураНастройки.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
		КонецПопытки;
		СтруктураНастройки.Вставить("ИмяОбъекта", "Обработка." + Строка(ЭтотОбъект));
		СтруктураНастройки.Вставить("НаименованиеНастройки", мТекущаяНастройкаТП.НаименованиеНастройки);
		СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройкаТП);
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", мТекущаяНастройка.ИспользоватьПриОткрытии);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", мТекущаяНастройка.СохранятьАвтоматически);
		
		СохранитьНастройку(СтруктураНастройки, "ДревовидныйЖурналДокументов_ТаблицаНастроекТП")

	КонецЕсли;
	
КонецПроцедуры //ПриЗакрытии()

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗавершитьРаботуСистемы" Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

Процедура КоманднаяПанельОтборПоЗначениюВТекущейКолонке(Кнопка)
//+++ самодельный фильтр
	НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки(,, Ложь, Ложь,);
	
	стр1 = ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	ТекущаяЗаказ = стр1.Ссылка;

	назвСтолб = ЭлементыФормы.СписокДокументов.ТекущаяКолонка.Имя;
	знач1 = стр1[назвСтолб];
	
	Если ПостроительОтчета.Отбор.Найти(назвСтолб)=неопределено тогда
		ПостроительОтчета.Отбор.Добавить(назвСтолб);
	КонецЕсли;
	ПостроительОтчета.Отбор[назвСтолб].ВидСравнения = ВидСравнения.Равно;
	ПостроительОтчета.Отбор[назвСтолб].Значение = знач1;
	ПостроительОтчета.Отбор[назвСтолб].Использование = истина;
	
	//обновление
	ОткытьФормуОбработка();
	ОбновитьТаблицуДокументов();
	
	ЭлементыФормы.СписокДокументов.ТекущаяСтрока = СписокДокументов.Строки.Найти(ТекущаяЗаказ);
	
	ЗакрытьФормуОбработка(); 
 КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

