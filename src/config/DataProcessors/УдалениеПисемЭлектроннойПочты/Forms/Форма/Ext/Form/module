
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура определяет пометку удаления у найденных ссылок
// и заполняет соответсвующее поле ТЧ НайденныеСсылки
//
Процедура ПроставитьПометкуУдаления()

	Для каждого СтрокаТаблицы Из НайденныеСсылки Цикл
		СтрокаТаблицы.ПометкаУдаления = СтрокаТаблицы.Данные.ПометкаУдаления;
	КонецЦикла; 

КонецПроцедуры

// Процедура устанавливает отбор найденных ссылок для отображения
// по конкретному электронному письму
//
Процедура ЗаполнитьТаблицуСсылокНаФорме()

	ОтборСсылок = ЭлементыФормы.НайденныеСсылки.ОтборСтрок;
	
	ОтборСсылок.Ссылка.Использование = Истина;
	Если ЭлементыФормы.ОбъектыДляУдаления.ТекущиеДанные = Неопределено Тогда
		ОтборСсылок.Ссылка.Значение = Документы.ЭлектронноеПисьмо.ПустаяСсылка();
	Иначе
		ОтборСсылок.Ссылка.Значение = ЭлементыФормы.ОбъектыДляУдаления.ТекущиеДанные.ЭлектронноеПисьмо;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура заполняет таблицу электронных писем, помеченных на удаление.
//
Процедура НайтиОбъектыПомеченныеНаУдаление()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА                                     КАК Использование,
	|	ЭлектронноеПисьмо.ДатаТранспорта           КАК ДатаТранспорта,
	|	ЭлектронноеПисьмо.ДатаОтправления          КАК ДатаОтправления,
	|	ЭлектронноеПисьмо.Дата                     КАК ДатаСоздания,
	|	ЭлектронноеПисьмо.Кому                     КАК Получатели,
	|	ЭлектронноеПисьмо.ОтправительПредставление КАК Отправитель,
	|	ЭлектронноеПисьмо.Ссылка                   КАК ЭлектронноеПисьмо,
	|	ЭлектронноеПисьмо.НеРассмотрено            КАК НеРассмотрено,
	|	ЭлектронноеПисьмо.СтатусПисьма             КАК СтатусПисьма,
	|	ЭлектронноеПисьмо.СостояниеПотомкаПисьма   КАК СостояниеПотомкаПисьма
	|ИЗ
	|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|
	|ГДЕ
	|	ЭлектронноеПисьмо.ПометкаУдаления
	|	И
	|	ЭлектронноеПисьмо.УчетнаяЗапись = &УчетнаяЗапись
	|";
	
	Состояние("Выполняется поиск помеченных на удаление электронных писем ...");
	ОбъектыДляУдаления.Загрузить(Запрос.Выполнить().Выгрузить());

	Состояние("Выполняется поиск ссылок на удаленные электронные письма ...");
	НайденныеСсылки.Загрузить(НайтиПоСсылкам(ОбъектыДляУдаления.ВыгрузитьКолонку("ЭлектронноеПисьмо")));
	ПроставитьПометкуУдаления();
	
КонецПроцедуры

// Процедура открывает форму электронного письма, помеченного на удаление.
//
Процедура ОткрытьЭлектронноеПисьмо()

	Если ЭлементыФормы.ОбъектыДляУдаления.ТекущиеДанные <> Неопределено Тогда
		ЭлементыФормы.ОбъектыДляУдаления.ТекущиеДанные.ЭлектронноеПисьмо.ПолучитьФорму().Открыть();
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Для каждого ЭлементОтбора Из ЭлементыФормы.НайденныеСсылки.НастройкаОтбораСтрок Цикл
		ЭлементОтбора.Доступность = Ложь;
	КонецЦикла; 
	
	НайтиОбъектыПомеченныеНаУдаление();
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ЭтаФорма.ВладелецФормы) <> Тип("Форма") ИЛИ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		Предупреждение("Обработка удаления электронных писем открывается только из формы учетной записи электронной почты.");
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события "Нажатие" элемента формы "ОсновныеДействияФормы.Удалить".
//
Процедура ОсновныеДействияФормыУдалить(Кнопка)
	
	ОтветНаВопрос = Вопрос("Удалить отмеченные объекты?", РежимДиалогаВопрос.ОКОтмена);
	Если ОтветНаВопрос <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли; 
	
	МассивПисем = Новый Массив;
	Для каждого СтрокаТаблицы Из ОбъектыДляУдаления Цикл
		Если СтрокаТаблицы.Использование Тогда
			МассивПисем.Добавить(СтрокаТаблицы.ЭлектронноеПисьмо);
		КонецЕсли; 
	КонецЦикла; 
	
	Если МассивПисем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Состояние("Выполняется поиск ссылок на удаленные электронные письма ...");
	НайденныеСсылки.Загрузить(НайтиПоСсылкам(ОбъектыДляУдаления.ВыгрузитьКолонку("ЭлектронноеПисьмо")));
	ПроставитьПометкуУдаления();
	
	ОчиститьСообщения();
	
	Сообщить("Электронных писем к удалению: " + МассивПисем.Количество());
	
	УдаленоПисем = 0;
	ЕстьУдаленные = Истина;
	ИндексИтерации = 0;
	Пока ЕстьУдаленные Цикл
		
		ИндексИтерации = ИндексИтерации + 1;
		ЕстьУдаленные = Ложь;
		
		Сообщить("Итерация удаления №" + ИндексИтерации);
		
		ТекПисьмо = 0;
		Для каждого ЭлектронноеПисьмо Из МассивПисем Цикл
			
			ТекПисьмо = ТекПисьмо + 1;
			Состояние("Обрабатывается " + ТекПисьмо + " из " + МассивПисем.Количество());
			
			ОтменаТранзакции = Ложь;
			НачатьТранзакцию();
			СтрокаУдалений = "";
			СтрокиСсылок = НайденныеСсылки.НайтиСтроки(Новый Структура("Ссылка", ЭлектронноеПисьмо));
			Если СтрокиСсылок.Количество() = 0 Тогда
				ОбъектЭлектронноеПисьмо = ЭлектронноеПисьмо.ПолучитьОбъект();
				Если ОбъектЭлектронноеПисьмо <> Неопределено Тогда
					Попытка
						ПредставлениеПисьма = Строка(ОбъектЭлектронноеПисьмо);
						ОбъектЭлектронноеПисьмо.Удалить();
						СтрокаУдалений = СтрокаУдалений + Символы.ПС + "Удалено письмо " + ПредставлениеПисьма;
						УдаленоПисем = УдаленоПисем + 1;
						ЕстьУдаленные = Истина;
					Исключение
						Сообщить("" + ОбъектЭлектронноеПисьмо + " не удалено. " + ОписаниеОшибки());
						ОтменаТранзакции = Истина;
					КонецПопытки;
				КонецЕсли;
			Иначе
				// Проверим, можно ли удалять данный объект
				МожноУдалять = Истина;
				Для каждого СтрокаСсылки Из СтрокиСсылок Цикл
					// Пропустим саму себя
					Если СтрокаСсылки.Данные = ЭлектронноеПисьмо Тогда
						Продолжить;
					КонецЕсли;
					// Удалим те строки таблицы ссылок, объекты которых удалили в прошлой итерации
					Если СтрокаСсылки.Данные.ПолучитьОбъект() = Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					// Будем удалять так же все вложения данного письма
					Если ТипЗнч(СтрокаСсылки.Данные) <> Тип("СправочникСсылка.ВложенияЭлектронныхПисем") Тогда
						МожноУдалять = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если МожноУдалять Тогда
					// Удалим все ссылки на данный объект, потому что это могут быть только вложения
					Для каждого СтрокаСсылки Из СтрокиСсылок Цикл
						Если СтрокаСсылки.Данные = ЭлектронноеПисьмо Тогда
							Продолжить;
						КонецЕсли; 
						Если СтрокаСсылки.Данные.ПолучитьОбъект() = Неопределено Тогда
							Продолжить;
						КонецЕсли; 
						ОбъектУдаления = СтрокаСсылки.Данные.ПолучитьОбъект();
						Попытка
							ПредставлениеВложения = ?((ТипЗнч(ОбъектУдаления) = Тип("СправочникОбъект.ВложенияЭлектронныхПисем")), Строка(ОбъектУдаления.ИмяФайла), Строка(ОбъектУдаления));
							ОбъектУдаления.Удалить();
							СтрокаУдалений = СтрокаУдалений + Символы.ПС + "Удалено вложение " + ПредставлениеВложения;
							ЕстьУдаленные = Истина;
						Исключение
							Сообщить("" + ЭлектронноеПисьмо + " не удалено. " + ОписаниеОшибки());
							ОтменаТранзакции = Истина;
						КонецПопытки;
					КонецЦикла;
					// Удалим само электронное письмо
					Если НЕ ОтменаТранзакции Тогда
						ОбъектЭлектронноеПисьмо = ЭлектронноеПисьмо.ПолучитьОбъект();
						Если ОбъектЭлектронноеПисьмо <> Неопределено Тогда
							Попытка
								ПредставлениеПисьма = Строка(ОбъектЭлектронноеПисьмо);
								ОбъектЭлектронноеПисьмо.Удалить();
								СтрокаУдалений = СтрокаУдалений + Символы.ПС + "Удалено письмо " + ПредставлениеПисьма;
								ЕстьУдаленные = Истина;
								УдаленоПисем = УдаленоПисем + 1;
							Исключение
								Сообщить("" + ОбъектЭлектронноеПисьмо + " не удалено. " + ОписаниеОшибки());
								ОтменаТранзакции = Истина;
							КонецПопытки;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			
			Если НЕ ОтменаТранзакции Тогда
				Сообщить(СокрЛ(СтрокаУдалений));
				ЗафиксироватьТранзакцию();
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла; 
	
	Сообщить("Удалено электронных писем: " + УдаленоПисем + " из " + МассивПисем.Количество());
	
	НайтиОбъектыПомеченныеНаУдаление();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанель.УстановитьФлажки".
//
Процедура КоманднаяПанельУстановитьФлажки(Кнопка)
	
	Для каждого СтрокаТаблицы Из ОбъектыДляУдаления Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанель.СнятьФлажки".
//
Процедура КоманднаяПанельСнятьФлажки(Кнопка)
	
	Для каждого СтрокаТаблицы Из ОбъектыДляУдаления Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанель.Открыть".
//
Процедура КоманднаяПанельОткрыть(Кнопка)
	
	ОткрытьЭлектронноеПисьмо();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанель.Обновить".
//
Процедура КоманднаяПанельОбновить(Кнопка)
	
	НайтиОбъектыПомеченныеНаУдаление();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриВыводеСтроки" элемента формы "ОбъектыДляУдаления".
//
Процедура ОбъектыДляУдаленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// Статусы писем
	ОформлениеСтроки.Ячейки.СтатусПисьма.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.СтатусПисьма.ОтображатьТекст    = Ложь;
	ОформлениеСтроки.Ячейки.СтатусПисьма.ОтображатьФлажок   = Ложь;
	Если ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее Тогда
		ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 3;
	ИначеЕсли ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное Тогда
		ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 2;
	ИначеЕсли ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Полученное Тогда
		ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 1;
	ИначеЕсли ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Сохраненное Тогда
		ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 0;
	КонецЕсли;
	
	// Рассмотренность писем
	ОформлениеСтроки.Ячейки.НеРассмотрено.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.НеРассмотрено.ОтображатьТекст    = Ложь;
	ОформлениеСтроки.Ячейки.НеРассмотрено.ОтображатьФлажок   = Ложь;
	Если ЗначениеНеЗаполнено(ДанныеСтроки.СостояниеПотомкаПисьма) Тогда
		Если ДанныеСтроки.НеРассмотрено Тогда
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 1;
		Иначе
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 3;
		КонецЕсли;
	ИначеЕсли ДанныеСтроки.СостояниеПотомкаПисьма = Перечисления.СостоянияПотомковЭлектронныхПисем.ОтветСохранен Тогда
		Если ДанныеСтроки.НеРассмотрено Тогда
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 17;
		Иначе
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 19;
		КонецЕсли;
	ИначеЕсли ДанныеСтроки.СостояниеПотомкаПисьма = Перечисления.СостоянияПотомковЭлектронныхПисем.ОтветОтправлен Тогда
		Если ДанныеСтроки.НеРассмотрено Тогда
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 13;
		Иначе
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 15;
		КонецЕсли;
	ИначеЕсли ДанныеСтроки.СостояниеПотомкаПисьма = Перечисления.СостоянияПотомковЭлектронныхПисем.ПереадресацияСохранена Тогда
		Если ДанныеСтроки.НеРассмотрено Тогда
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 9;
		Иначе
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 11;
		КонецЕсли;
	ИначеЕсли ДанныеСтроки.СостояниеПотомкаПисьма = Перечисления.СостоянияПотомковЭлектронныхПисем.ПереадресацияОтправлена Тогда
		Если ДанныеСтроки.НеРассмотрено Тогда
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 5;
		Иначе
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 7;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы "ОбъектыДляУдаления".
//
Процедура ОбъектыДляУдаленияПриАктивизацииСтроки(Элемент)
	
	Элемент.ТекущаяКолонка = Элемент.Колонки.Использование;
	ЗаполнитьТаблицуСсылокНаФорме();
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" элемента формы "ОбъектыДляУдаления".
//
Процедура ОбъектыДляУдаленияПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка <> Элемент.Колонки.Использование Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииЯчейки" элемента формы "ОбъектыДляУдаления".
//
Процедура ОбъектыДляУдаленияПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущаяКолонка <> Элемент.Колонки.Использование Тогда
		Элемент.ТекущаяКолонка = Элемент.Колонки.Использование;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "Выбор" элемента формы "ОбъектыДляУдаления".
//
Процедура ОбъектыДляУдаленияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЭлектронноеПисьмо();
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" элемента формы "НайденныеСсылки".
//
Процедура НайденныеСсылкиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если Элемент.ТекущиеДанные.Данные.ПолучитьОбъект() <> Неопределено Тогда
			Элемент.ТекущиеДанные.Данные.ПолучитьФорму().Открыть();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" элемента формы "НайденныеСсылки".
//
Процедура НайденныеСсылкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" элемента формы "НайденныеСсылки".
//
Процедура НайденныеСсылкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" элемента формы "НайденныеСсылки".
//
Процедура НайденныеСсылкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьТекст    = Ложь;
	ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.ПометкаУдаления Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки = 1;
	Иначе
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки = 0;
	КонецЕсли; 
	
КонецПроцедуры
