Перем мВалютаРегламентированногоУчета;
Перем мВалютаУпрУчета;
Перем мКолонкиТовары;
Перем НеВыбиратьНовоеКачество;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит метаданные документа, чтобы не считывать его при каждом обращении.
Перем мМетаданныеДокумента;
Перем мИмяТабличнойЧастиДокумента Экспорт;

// Хранят признаки наличия реквизитов табличной части. Заполняются до открытия формы обработки.
Перем мЕстьНДС          Экспорт;
Перем мЕстьЦенаВРознице Экспорт;

// Хранит признак того, надо ли показывать в форме суммовые реквуизиты. Заполняется при открытии формы.
Перем мЕстьСумма;

// Хранит признак того, надо ли заполнять склад в табличной части. Заполняется при открытии формы.
Перем мЕстьСклад;

// Хранит форму документа. Устанавливается до открытия формы обработки.
Перем мФормаДокумента Экспорт;

// Хранит способ заполнения цен (по ценам номенклатуры, по ценам контрагента, по розничным ценам).
// Устанавливается до открытия формы обработки.
Перем мСпособЗаполненияЦен Экспорт;

// Хранит признак того, можно ли менять цену в расходных документах
Перем мМожноМенятьЦенуВДокументе Экспорт;

// Хранит информацию о сумме без скидки документа до изменения строк.
Перем мСуммаДокументаБезСкидок;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ОбработкаПодбора(ТабличнаяЧасть, ДокументОбъект, ДокументДобавления, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем ТаблицаПодбора, Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика, Серия, Качество;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("Валюта",              ВалютаЦены);

	Если Не ЕстьРеквизитДокумента("ВалютаДокумента", мМетаданныеДокумента) Тогда
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1
	Иначе
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
		КратностьДокумента = КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
	КонецЕсли;

	ЗначениеВыбора.Свойство("ТаблицаПодбора", ТаблицаПодбора);

	Для каждого СтрокаТаблицы из ТаблицаПодбора цикл
		Номенклатура         = СтрокаТаблицы.Номенклатура;
		ЕдиницаИзмерения     = СтрокаТаблицы.ЕдиницаИзмерения;
		Количество           = СтрокаТаблицы.Количество;
		КоличествоМест       = СтрокаТаблицы.КоличествоМест;
		Цена                 = СтрокаТаблицы.Цена;
		Характеристика       = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		Серия                = СтрокаТаблицы.СерияНоменклатуры;
		ПроцентСкидкиНаценки = СтрокаТаблицы.ПроцентСкидкиНаценки;

		Если ЕстьРеквизитТабЧастиДокумента("ОграничениеСкидкиНаценки", МетаданныеДокумента, "Товары")
		   И ТаблицаПодбора.Колонки.Найти("ОграничениеСкидкиНаценки") <> Неопределено Тогда
			ОграничениеСкидкиНаценки = СтрокаТаблицы.ОграничениеСкидкиНаценки;
		Иначе
			ОграничениеСкидкиНаценки = Неопределено;
		КонецЕсли;

		Если ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, "Товары")
			И ТаблицаПодбора.Колонки.Найти("ЕдиницаИзмеренияМест") <> Неопределено Тогда
			ЕдиницаИзмеренияМест = СтрокаТаблицы.ЕдиницаИзмеренияМест;
		Иначе
			ЕдиницаИзмеренияМест = Неопределено;
		КонецЕсли;

		Если ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, "Товары")
			И ТаблицаПодбора.Колонки.Найти("СтавкаНДС") <> Неопределено Тогда
			СтавкаНДС = Номенклатура.СтавкаНДС;
		Иначе
			СтавкаНДС = Неопределено;
		КонецЕсли;

		Если ТаблицаПодбора.Колонки.Найти("Качество") <> Неопределено Тогда
			Качество = СтрокаТаблицы.Качество;
			Если ЗначениеНеЗаполнено(Качество) Тогда
				Качество = Справочники.Качество.Новый;
			КонецЕсли;
		КонецЕсли;

		Если мЕстьСклад
		   И ЕстьРеквизитТабЧастиДокумента("Склад", МетаданныеДокумента, "Товары")
		   И ТаблицаПодбора.Колонки.Найти("Склад") <> Неопределено Тогда
			Склад = СтрокаТаблицы.Склад;
		Иначе
			Склад = Неопределено;
		КонецЕсли;

		// Пересчитаем цену в валюту документа.
		ЦенаВВалютеДокумента = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента,
		                                                         КратностьДокумента, ДокументОбъект.Дата);

		Если ЕстьРеквизитДокумента("УчитыватьНДС", ДокументОбъект.Метаданные()) Тогда
			Если ЕстьРеквизитДокумента("УчитыватьНДС", ДокументДобавления.Метаданные()) Тогда
				ЦенаВВалютеДокумента = ПересчитатьЦенуПриИзмененииФлаговНалогов(ЦенаВВалютеДокумента,
				                       СпособЗаполненияЦен,
				                       ДокументДобавления.СуммаВключаетНДС,
				                       ДокументОбъект.УчитыватьНДС,
				                       ДокументОбъект.СуммаВключаетНДС,
				                       ПолучитьСтавкуНДС(СтавкаНДС));
			Иначе
				ЦенаВВалютеДокумента = ПересчитатьЦенуПриИзмененииФлаговНалогов(ЦенаВВалютеДокумента,
				                       СпособЗаполненияЦен,
				                       ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
				                       ДокументОбъект.УчитыватьНДС,
				                       ДокументОбъект.СуммаВключаетНДС,
				                       ПолучитьСтавкуНДС(СтавкаНДС));
			КонецЕсли;
		Иначе
			ЦенаВВалютеДокумента = ПересчитатьЦенуПриИзмененииФлаговНалогов(ЦенаВВалютеДокумента,
			                       СпособЗаполненияЦен,
			                       Истина,
			                       Истина,
			                       Истина,
			                       );
		КонецЕсли;

		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);

		Если Характеристика <> Неопределено
			 И ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", мМетаданныеДокумента, "Товары") Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		КонецЕсли;

		Если Серия <> Неопределено
			 И ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", мМетаданныеДокумента, "Товары") Тогда
			СтруктураОтбора.Вставить("СерияНоменклатуры", Серия);
		КонецЕсли;

		Если ЕдиницаИзмеренияМест <> Неопределено
			 И ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", мМетаданныеДокумента, "Товары") Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		КонецЕсли;

		Если ЕдиницаИзмеренияМест <> Неопределено
			 И ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", мМетаданныеДокумента, "Товары") Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмеренияМест", СтрокаТаблицы.ЕдиницаИзмеренияМест);
		КонецЕсли;

		Если ЕстьРеквизитТабЧастиДокумента("Цена", мМетаданныеДокумента, "Товары") Тогда
			СтруктураОтбора.Вставить("Цена", Окр(ЦенаВВалютеДокумента, 2));
		КонецЕсли;

		Если ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", мМетаданныеДокумента, "Товары") Тогда
			СтруктураОтбора.Вставить("ПроцентСкидкиНаценки", ПроцентСкидкиНаценки);
		КонецЕсли;

		Если ЕстьРеквизитТабЧастиДокумента("ОграничениеСкидкиНаценки", мМетаданныеДокумента, "Товары") Тогда
			СтруктураОтбора.Вставить("ОграничениеСкидкиНаценки", ОграничениеСкидкиНаценки);
		КонецЕсли;

		Если мЕстьСклад
		   И Склад <> Неопределено
		   И ЕстьРеквизитТабЧастиДокумента("Склад", мМетаданныеДокумента, "Товары") Тогда
			СтруктураОтбора.Вставить("Склад", Склад);
		КонецЕсли;

		СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);

		Если СтрокаТабличнойЧасти <> Неопределено Тогда

			Если СтрокаТабличнойЧасти.Пометка Тогда
				// Нашли, увеличиваем количество в первой найденной строке.
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

				// Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
					РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				КонецЕсли;
				Если ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, "Товары") Тогда
					РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				КонецЕсли;
			КонецЕсли;

		Иначе

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Пометка              = Истина;
			СтрокаТабличнойЧасти.Номенклатура         = Номенклатура;
			СтрокаТабличнойЧасти.Количество           = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения     = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = ЕдиницаИзмеренияМест;
			СтрокаТабличнойЧасти.Коэффициент          = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

			СтрокаТабличнойЧасти.Качество = Качество;
			СтрокаТабличнойЧасти.Цена     = ЦенаВВалютеДокумента;

			Если ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", мМетаданныеДокумента, "Товары") Тогда
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки= СтрокаТаблицы.ПроцентСкидкиНаценки;
			КонецЕсли;

			Если ЕстьРеквизитТабЧастиДокумента("ОграничениеСкидкиНаценки", мМетаданныеДокумента, "Товары") Тогда
				СтрокаТабличнойЧасти.ОграничениеСкидкиНаценки = ОграничениеСкидкиНаценки;
			КонецЕсли;

			Если мЕстьСклад
			   И ЕстьРеквизитТабЧастиДокумента("Склад", мМетаданныеДокумента, "Товары") Тогда
				СтрокаТабличнойЧасти.Склад = Склад;
			КонецЕсли;

			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

			// Рассчитываем реквизиты табличной части.
			ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

			Если ЕстьРеквизитДокумента("ПроцентРозничнойНаценки", мМетаданныеДокумента) Тогда
				РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета, мВалютаУпрУчета);
			КонецЕсли;

			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

			Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;

			Если ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, "Товары") Тогда
				РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;

		КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено
	КонецЦикла;

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                  Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                 мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                          ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);

		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",               ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",           ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;

		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры // ОбработкаПодбора()

// Производит расчет суммы, суммы НДС, колонки Всего, цены в рознице
// при изменении связанных реквизитов.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части.
//
Процедура РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти)

	Колонки = ЭлементыФормы.Товары.Колонки;

	Если Колонки.ЦенаВРознице.Видимость Тогда
		Если ЕстьРеквизитДокумента("ПроцентРозничнойНаценки", мМетаданныеДокумента) Тогда
			РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета, мВалютаУпрУчета);
		КонецЕсли;
	КонецЕсли;

	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	Если Колонки.СуммаНДС.Видимость Тогда
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // РассчитатьЦеныИСуммы()

// Распределяет заданную сумму по выбранной колонке 
//
// Параметры: 
//  ИмяКолонки         - cтрока, имя колонки, по которой распределяется сумма ("Количество" или "Сумма");
//  СуммаРаспределения - число, распределяемая сумма
//
//
Процедура РаспределитьСуммуПоКолонке(ИмяКолонки, СуммаРаспределения)

	// Посчитаем общую помеченных позиций
	ОбщаяСумма = 0;
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			ОбщаяСумма = ОбщаяСумма + СтрокаТабличнойЧасти[ИмяКолонки];
		КонецЕсли;
	КонецЦикла;

	Если ОбщаяСумма = 0 Тогда
		Предупреждение("Общая сумма помеченных строк нулевая!
		               |Распределение невозможно.",30, Заголовок);
		Возврат;
	КонецЕсли;

	// Теперь распределяем
	СтрокаМаксимальнойСуммы = Неопределено; // На эту строку будем относить остаток после распределения (ошибки округления)
	МинСумма       = 1000000000; // млрд. Значение минимальной суммы.
	ЕдиницаРаспределения    = СуммаРаспределения / ОбщаяСумма;
	НепогашеннаяСумма       = СуммаРаспределения;

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			ТекущаяСумма = СтрокаТабличнойЧасти.Сумма;
			Дельта       = Окр(ЕдиницаРаспределения * СтрокаТабличнойЧасти[ИмяКолонки],2); //+++ 09.12.2014 - ДО КОПЕЕК!!!
			
			//+++ 13.01.2015 - отрицательная сумма так не работает!
			Если СуммаРаспределения>0 тогда
			Дельта       = ?(НепогашеннаяСумма<0, Дельта + НепогашеннаяСумма, Дельта); // обратное изменение при слишком большом округлении вверх
			КонецЕсли;
		
			// Проверим текущую сумму на максимум.
			Если ТекущаяСумма < МинСумма Тогда
				МинСумма       = ТекущаяСумма;
				СтрокаМаксимальнойСуммы = СтрокаТабличнойЧасти;
			КонецЕсли;

			// Увеличиваем значение
			СтрокаТабличнойЧасти.Сумма = ТекущаяСумма + Дельта;
			
			//+++ 09.12.2014 Обратный пересчет от цены, окр. до копеет - должен быть ПРАВИЛЬНЫМ (для УТ и БП)
			СтрокаТабличнойЧасти.Цена  = Окр( ?(СтрокаТабличнойЧасти.Количество=0, 0, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество), 2);
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
			Дельта = СтрокаТабличнойЧасти.Сумма - ТекущаяСумма;
			
			// Остаток нераспределенной суммы надо уменьшать на дельту реального изменения
			НепогашеннаяСумма = НепогашеннаяСумма - (СтрокаТабличнойЧасти.Сумма - ТекущаяСумма);

			// Пересчитываем связанные реквизиты (СуммаНДС).
			ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, глТекущийПользователь);
			Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	
	Если НепогашеннаяСумма <> 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
		
	////----------- Если что-то осталось, кидаем на строку с минимальным количеством-----------------
			НепогашеннаяСумма0 = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;
			СтрокаМаксимальнойСуммы.Сумма = НепогашеннаяСумма0;
			//+++ 09.12.2014 Обратный пересчет от цены, окр. до копеет - должен быть ПРАВИЛЬНЫМ (для УТ и БП)
			СтрокаМаксимальнойСуммы.Цена  = Окр( ?(СтрокаМаксимальнойСуммы.Количество=0, 0, СтрокаМаксимальнойСуммы.Сумма / СтрокаМаксимальнойСуммы.Количество), 2);
			СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Цена*СтрокаМаксимальнойСуммы.Количество;
			Дельта = СтрокаМаксимальнойСуммы.Сумма - НепогашеннаяСумма0;
			
		ПриИзмененииСуммыТабЧасти(СтрокаМаксимальнойСуммы, ДокументОбъект, глТекущийПользователь);

		Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
			РассчитатьСуммуНДСТабЧасти(СтрокаМаксимальнойСуммы, ДокументОбъект);
		КонецЕсли;
		
		//+++ 09.12.2014 - НЕ распределяем то, что нельзя распределить	
		Если Дельта <> 0 тогда
			Сообщить("НЕ Вся сумма - распределена по строкам! Нераспределённый остаток составил: "+формат(-Дельта,"ЧДЦ=2")+" руб.", СтатусСообщения.Внимание);
		Иначе
			Сообщить("Вся сумма - успешно распределена по строкам. Для правильного распределения всей суммы, сумма строки № "+строка(СтрокаМаксимальнойСуммы.НомерСтроки)+" изменена на "+формат(НепогашеннаяСумма,"ЧДЦ=2")+" руб.", СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры// РаспределитьСуммуПоКолонке()

// Процедуры выполняет необходимые действия при установке нового значения в поле
// выбора действия.
//
// Параметры:
//  ТекущийЭлементДействий - число, индекс устанавливаемого действия в списке действий
//
Процедура ПриИзмененииТекущегоДействия(ТекущийЭлементДействий)

	// Назначим новое действие кнопке "Выполнить". Само действие возьмем из списка значений.
	ЭлементыФормы.КнопкаВыполнить.УстановитьДействие("Нажатие", СписокДействий[ТекущийЭлементДействий].Значение);

	// Будем считать, что по умолчанию никакие реквизиты не нужны.
	ЭлементыФормы.ПолеВводаВариантаЗачения.  Видимость = Ложь;

	ДействиеНеВыполнено = Истина;

	// Заполним свзанные поля и реквизиты
	МассивНужныхТипов = Новый Массив();
	Если СписокДействий[ТекущийЭлементДействий].Представление = "Добавить из документа" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае должны выбираться только документы с таб. частью "Товары",
		// в которой есть реквизиты "Номенклатура", "Количество мест", "Количество", "Единица измерения".
		Для Каждого Документ Из Метаданные.Документы Цикл
			Если Документ.ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
				Если ЕстьРеквизитТабЧастиДокумента("Номенклатура", Документ, "Товары")
				   И ЕстьРеквизитТабЧастиДокумента("Количество", Документ, "Товары")
				   //И ЕстьРеквизитТабЧастиДокумента("КоличествоМест", Документ, "Товары")
				   //И ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", Документ, "Товары") 
				   Тогда
				   
				  //+++( 03.10.2013 
				  Если НЕ Найти(Документ.Имя,"Переоценка")>0 и не Найти(Документ.Имя,"Чек")>0  тогда
					  Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
						   Если Документ.Реквизиты.Найти("Подразделение") <> Неопределено Тогда 
							  МассивНужныхТипов.Добавить(Тип("ДокументСсылка."+Документ.Имя));
					   	   КонецЕсли;
					   Иначе
				    	 МассивНужныхТипов.Добавить(Тип("ДокументСсылка."+Документ.Имя));
					   КонецЕсли;
				  КонецЕсли;
				//+++)

				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);

		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = ПустоеЗначениеТипа(МассивНужныхТипов[0]);

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить цены по типу" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно задавать ссылку на справочник.
		// ТипЦен может быть типа ТипыЦенНоменклатурыКонтрагентов и ТипыЦенНоменклатуры
		Если ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатурыКонтрагентов" Тогда
			МассивНужныхТипов.Добавить(Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов"));
			ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
			
			// Надо заполнить поле ввода значением нужного типа.
			ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = ДокументОбъект.ТипЦен;
			ЭлементыФормы.ПолеВводаВариантаЗачения.ВыборПоВладельцу = ДокументОбъект.Контрагент;
		ИначеЕсли  ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатуры" Тогда
			Если (ТипЗнч(ДокументОбъект.Ссылка) = ТипЗнч(Документы.ЗаказПокупателя.ПустаяСсылка())) и (ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИспользоватьРазрешенныеТипыЦенКонтрагентов")) И
					(Константы.ИспользоватьПорогиЦеныПоТипамЦенКонтрагентов.Получить()) Тогда
				Элементыформы.ПолеВыбораТипаЦены.Видимость = Истина;
				Элементыформы.ПолеВводаВариантаЗачения.Видимость = Ложь;
				//МассивНужныхТиповДляЦен.Добавить(Тип("СписокЗначений"));
				Элементыформы.ПолеВыбораТипаЦены.СписокВыбора = яштПолучитьСписокДоступныхЦенКонтрагента(ДокументОбъект.Контрагент);			
			Иначе 
				МассивНужныхТипов.Добавить(Тип("СправочникСсылка.ТипыЦенНоменклатуры"));
				ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
				ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = ДокументОбъект.ТипЦен;
			КонецЕсли;	
		КонецЕсли;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Заполнить цены в рознице по типу" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно задавать ссылку на справочник.
		МассивНужныхТипов.Добавить(Тип("СправочникСсылка.ТипыЦенНоменклатуры"));
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = ДокументОбъект.Склад.ТипЦенРозничнойТорговли;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Распределить сумму по суммам"
		  Или СписокДействий[ТекущийЭлементДействий].Представление = "Распределить сумму по количеству"Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно задавать только число.
		КвалификаторЧисла = Новый КвалификаторыЧисла(15, 2);
		МассивНужныхТипов.Добавить(Тип("Число"));
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = 
		             Новый ОписаниеТипов(МассивНужныхТипов, КвалификаторЧисла);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = 0;
		
	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Изменить цены на %" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно задавать только число.
		КвалификаторЧисла = Новый КвалификаторыЧисла(5, 2);
		МассивНужныхТипов.Добавить(Тип("Число"));
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = 
		             Новый ОписаниеТипов(МассивНужныхТипов, КвалификаторЧисла);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = 0;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Изменить цены на руб." Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно задавать только число, в рублях (или $, USD)
		КвалификаторЧисла = Новый КвалификаторыЧисла(7,2);//5+2 до 99 999,99
		МассивНужныхТипов.Добавить(Тип("Число"));
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = 
		             Новый ОписаниеТипов(МассивНужныхТипов, КвалификаторЧисла);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = 0;
		
	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Округлить цены до" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно выбирать только из перечисления порядков округления.
		МассивНужныхТипов.Добавить(Тип("ПеречислениеСсылка.ПорядкиОкругления"));
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
		
		// Надо заполнить поле ввода значением нужного типа
		Если ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатуры" Тогда
			ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = ДокументОбъект.ТипЦен.ПорядокОкругления;
		Иначе
			ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = Перечисления.ПорядкиОкругления.Окр0_01;
		КонецЕсли;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Округлить цены в рознице до" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно выбирать только из перечисления порядков округления.
		МассивНужныхТипов.Добавить(Тип("ПеречислениеСсылка.ПорядкиОкругления"));
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = 
		                             ДокументОбъект.Склад.ТипЦенРозничнойТорговли.ПорядокОкругления;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить ставку НДС" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно выбирать только из перечисления ставок НДС.
		МассивНужныхТипов.Добавить(Тип("ПеречислениеСсылка.СтавкиНДС"));
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяСтавкаНДС");

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить скидку"
	      Или СписокДействий[ТекущийЭлементДействий].Представление = "Установить ограничение" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно задавать только число.
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = 
		             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2));
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = 0;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить склад" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно выбирать только из перечисления ставок НДС.
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = 
		             Новый ОписаниеТипов("СправочникСсылка.Склады");
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");

	КонецЕсли;

КонецПроцедуры // ПриИзмененииТекущегоДействия()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПередОткрытием"формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Если не установлено значения объекта редактируемого документа,
	// то форму обработки открывать не нужно.
	Если ДокументОбъект = Неопределено Тогда
		Отказ = Истина;
		Предупреждение("Не задан документ для обработки! " 
		               + "Эта обработка вызывается из формы документа.", , Заголовок);
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Обработчик события "ПриОткрытии"формы.
//
Процедура ПриОткрытии()

	// Заполним модульные переменные
	мМетаданныеДокумента = ДокументОбъект.Метаданные();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах();

	Если мРассчитыватьАвтоматическиеСкидки = Неопределено Тогда
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;

	// Опеределим какие колонки табличной части надо показывать
	// на основании того что есть в табличной части обработки 
	// и какие колонки есть в табличной части документа.
	// В дальнейшем с невидимыми колонками табличной части оработки работать не будем,
	// их как бы нет.
	// Для начала сделаем невидимыми все колонки, которых нет в табличном поле формы документа.

	Если ЗначениеНезаполнено(мИмяТабличнойЧастиДокумента) Тогда
		мИмяТабличнойЧастиДокумента = "Товары";
	КонецЕсли;

	Колонки = ЭлементыФормы.Товары.Колонки;
	Для каждого Колонка Из Колонки Цикл
		Если мФормаДокумента.ЭлементыФормы[мИмяТабличнойЧастиДокумента].Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Колонки[Колонка.Имя].Видимость = Ложь;
		Иначе
			Колонки[Колонка.Имя].Видимость = мФормаДокумента.ЭлементыФормы[мИмяТабличнойЧастиДокумента].Колонки[Колонка.Имя].Видимость;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
		Колонки.Единица.ТекстШапки          = "Единица";
		Колонки.Единица.ПодсказкаВШапке     = "Единица измерения";
		Колонки.Коэффициент.ТекстШапки      = "К.";
		Колонки.Коэффициент.ПодсказкаВШапке = "Коэффициент пересчета";
	КонецЕсли;
	
	// Есть ли в документе сумма определим по видимости колонки
	мЕстьСумма = Колонки["СуммаНДС"].Видимость;

	// Есть ли в документе склад определим по видимости колонки
	мЕстьСклад = Колонки["Склад"].Видимость;

	// Теперь погасим колонки, исходя из методических соображений.
	Колонки["СтавкаНДС"].Видимость = мЕстьНДС И Колонки["СтавкаНДС"].Видимость;
	Колонки["СуммаНДС"] .Видимость = мЕстьНДС И Колонки["СуммаНДС"] .Видимость;

	Колонки["ЦенаВРознице"].Видимость = мЕстьЦенаВРознице И Колонки["ЦенаВРознице"].Видимость;
	Если Колонки["ЦенаВРознице"].Видимость Тогда
		Колонки.ЦенаВРознице.ТекстШапки = "Розн. цена ("
		                                + мВалютаРегламентированногоУчета
		                                + ")";
	КонецЕсли;

	Колонки["ПроцентРозничнойНаценки"].Видимость = мЕстьЦенаВРознице И Колонки["ПроцентРозничнойНаценки"].Видимость;

	// Пометка видна всегда
	Колонки["Пометка"].Видимость = Истина;

	// Теперь заполним список возможных действий с табличной частью.
	СписокДействий.Очистить();

	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеДобавитьИзДокумента"), "Добавить из документа");

	Если Колонки["Цена"].Видимость
	   И мМожноМенятьЦенуВДокументе Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеИзменитьЦену"), "Изменить цены на %");
	КонецЕсли;

	//+++ 16.12.2013
	Если Колонки["Цена"].Видимость
	   И мМожноМенятьЦенуВДокументе Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеИзменитьЦенуРуб"), "Изменить цены на руб.");
	КонецЕсли;

	Если Колонки["Цена"].Видимость
	   И мМожноМенятьЦенуВДокументе
	   И ЕстьРеквизитДокумента("ТипЦен", мМетаданныеДокумента) Тогда
		// Тип цен устанавливается как значение по умолчанию
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьЦенуПоТипу"), "Установить цены по типу");
	КонецЕсли;

	Если Колонки["Сумма"].Видимость
	   И мМожноМенятьЦенуВДокументе Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеРаспределитьСуммуПоСуммам")    , "Распределить сумму по суммам");
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеРаспределитьСуммуПоКоличеству"), "Распределить сумму по количеству");
	КонецЕсли;

	Если Колонки["Цена"].Видимость
	   И мМожноМенятьЦенуВДокументе
	   И ЕстьРеквизитДокумента("ТипЦен", мМетаданныеДокумента) Тогда
		// По типу цен определяется флаг "Округлять в большую сторону"
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеОкруглитьЦену"), "Округлить цены до");
	КонецЕсли;

	Если Колонки["ЦенаВРознице"].Видимость
	   И мМожноМенятьЦенуВДокументе Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеЗаполнитьЦенуВРозницеПоТипу"), "Заполнить цены в рознице по типу");
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеОкруглитьЦенуВРознице")      , "Округлить цены в рознице до"     );
	КонецЕсли;

	Если Колонки["СтавкаНДС"].Видимость Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьСтавкуНДС"), "Установить ставку НДС");
	КонецЕсли;

	Если Колонки["Склад"].Видимость Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьСклад"), "Установить склад");
	КонецЕсли;

	Если Колонки["ПроцентСкидкиНаценки"].Видимость И мМожноМенятьЦенуВДокументе Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьСкидку"), "Установить скидку");
	КонецЕсли;

	Если Колонки["ОграничениеСкидкиНаценки"].Видимость Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьОграничение"), "Установить ограничение");
	КонецЕсли;

	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУдалитьГруппуСтрок"), "Удалить помеченные строки");

	//Орлов++
	Если ТолькоЦены Тогда
		СписокДействий.Очистить();
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеИзменитьЦену"), "Изменить цены на %");
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеИзменитьЦенуРуб"), "Изменить цены на руб.");
		//15.10.18 Смирнов
		ЭлементыФормы.Товары.ТолькоПросмотр = истина;
	КонецЕсли;
	//Орлов--
	
	// Заполним список действий для выбора из выпадающего списка
	ЭлементыФормы.ПолеВыбораДействия.СписокВыбора = СписокДействий;

	// Попробуем вспомнить последнее выбранное значение из списка действий
	ТекущееДействие = ВосстановитьЗначение("ОбработкаТабличнойЧастиТекущееДействие");

	Если (ТипЗнч(ТекущееДействие) <> Тип("Действие"))
	 ИЛИ (СписокДействий.НайтиПоЗначению(ТекущееДействие) = Неопределено) Тогда
		// Нет сохраненного значения или сохранено значение, отсутсвующее в списке
		ТекущееДействие = СписокДействий[0].Значение;
	КонецЕсли;

	ЭлементыФормы.ПолеВыбораДействия.Значение = ТекущееДействие;

	// Установим элементы формы в зависимости от выбранного действия
	ПриИзмененииТекущегоДействия(СписокДействий.Индекс(СписокДействий.НайтиПоЗначению(ТекущееДействие)));

	// Надо установить пометку и заполнить номер строки документа
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка              = Истина;
		СтрокаТабличнойЧасти.НомерСтрокиДокумента = СтрокаТабличнойЧасти.НомерСтроки;
	КонецЦикла;

	ЭлементыФормы.ВсегоНДС.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ЭлементыФормы.Всего.ГоризонтальноеПоложение    = ГоризонтальноеПоложение.Лево;

	ДействиеНеВыполнено = Истина;

	Колонки["Цена"].ЭлементУправления.ТолькоПросмотр                    = НЕ мМожноМенятьЦенуВДокументе;
	Колонки["ЦенаВРознице"].ЭлементУправления.ТолькоПросмотр            = НЕ мМожноМенятьЦенуВДокументе;
	Колонки["ПроцентРозничнойНаценки"].ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	Колонки["Сумма"].ЭлементУправления.ТолькоПросмотр                   = НЕ мМожноМенятьЦенуВДокументе;
	Колонки["СуммаНДС"].ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;

	мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
	НеВыбиратьНовоеКачество  = Ложь;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.УстановкаСкидокНоменклатуры") Тогда
		НеВыбиратьНовоеКачество = Истина;
	КонецЕсли;

	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") тогда //+++ 08.11.2013
		Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ДокументОбъект.ссылка)
			или яштПоЗаказуБылиОтгрузки(ДокументОбъект.ссылка) тогда
		 Колонки["Номенклатура"].Доступность  = ложь;
		 Колонки["Количество"].Доступность    = ложь;
		 //Колонки["КоличествоМест"].Доступность= ложь;
	 	КонецЕсли;
	КонецЕсли;
	 
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// При изменении данных обновим суммы в подвале.
	// Вначале посчитаем сумму.
	Если мЕстьСумма Тогда

		ЭлементыФормы.Всего       .Видимость = Истина;
		ЭлементыФормы.НадписьВсего.Видимость = Истина;
		
		СуммаДокумента = Товары.Итог("Сумма");
	
		Если мЕстьНДС
		   И ДокументОбъект.УчитыватьНДС 
		   И (Не ДокументОбъект.СуммаВключаетНДС) Тогда
			СуммаДокумента = СуммаДокумента + Товары.Итог("СуммаНДС");
		КонецЕсли; 

		ЭлементыФормы.Всего.Значение    = СуммаДокумента;

		Если Не ЕстьРеквизитДокумента("ВалютаДокумента", мМетаданныеДокумента) Тогда
			ЭлементыФормы.НадписьВсего.Заголовок = "Всего (руб):";
		ИначеЕсли ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
			ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
		Иначе
			ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
		КонецЕсли;
	Иначе
		
		ЭлементыФормы.Всего       .Видимость = Ложь;
		ЭлементыФормы.НадписьВсего.Видимость = Ложь;
		
	КонецЕсли; 

	Если мЕстьНДС И ДокументОбъект.УчитыватьНДС Тогда

		ЭлементыФормы.ВсегоНДС       .Видимость = Истина;
		ЭлементыФормы.НадписьВсегоНДС.Видимость = Истина;
		
		ЭлементыФормы.ВсегоНДС.Значение = Товары.Итог("СуммаНДС");
		Если ДокументОбъект.СуммаВключаетНДС Тогда
			ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
		Иначе
			ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
		КонецЕсли;
	Иначе

		ЭлементыФормы.ВсегоНДС       .Видимость = Ложь;
		ЭлементыФормы.НадписьВсегоНДС.Видимость = Ложь;
		
	КонецЕсли; 

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПередЗакрытием" формы.
// Если действие не было выполнено задает вопрос пользователю.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если ОбработкаОбъект.ПолучитьФорму().Открыта() Тогда

		Если ДействиеНеВыполнено Тогда
			Если Вопрос("Выбранное действие не было выполнено! Продолжить?", 
			            РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "УстановитьФлажки" командной панели
// табличного поля "Товары", устанавливает флажки во всех строках 
// табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеУстановитьФлажки(Кнопка)

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Истина;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СнатьФлажки" командной панели
// табличного поля "Товары", снимает флажки во всех строках 
// табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеСнятьФлажки(Кнопка)
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ИнвертироватьФлажки" командной панели
// табличного поля "Товары", инвертирует флажки во всех строках 
// табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИнвертироватьФлажки(Кнопка)

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Не СтрокаТабличнойЧасти.Пометка;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "ПолеВводаВариантаЗачения". Процедура предлагает выбор пользователю из 
// списка разрешенных для текущего действия типов объектов (документов, справочников)
// после выбора типа объекта процедура выбора стандартным образом с 
// использованием системных механизмов.
// Выбранное значение обрабатывается стандартным образом.
//
Процедура ПолеВводаВариантаЗначенияНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Заполним список возможных типов для выбора
	СписокВидов = Новый СписокЗначений;
	МассивТипов = ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа.Типы();
	РазмерСписка = МассивТипов.Количество();
	Если РазмерСписка = 1 Тогда

		Если МассивТипов[0] = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов")
		   И ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда
			// Не понятно что выбирать, это ошибка.
			Предупреждение("Для установки цен поставщика необходимо в документе выбрать тип цен контрагента!"); 
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;

	ИначеЕсли РазмерСписка > 1 Тогда

		// В случае одного элемента выбирать нечего, нужное значение мы установили при выборе действия,
		// поэтому этот случай здесь не обрабатывается.
		
		Для каждого ЭлементМассива Из МассивТипов Цикл

			Если Документы.ТипВсеСсылки().СодержитТип(ЭлементМассива)
			 ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ЭлементМассива) Тогда
				ПустоеЗначение = Новый(ЭлементМассива);
				ОбъектОписанияМетаданного = ПустоеЗначение.Метаданные();
				СписокВидов.Добавить(ЭлементМассива, ОбъектОписанияМетаданного.Представление());
			КонецЕсли;
		КонецЦикла;

		СписокВидов.СортироватьПоПредставлению();

		НачальноеЗначение = Неопределено;
		Если ТипЗнч(ВариантЗначения) = Тип("СписокЗначений") Тогда
			НачальноеЗначение = ЭлементыФормы.ПолеВводаВариантаЗачения.Значение.ТипЗначения.Типы()[0];
		КонецЕсли;
		НачальноеЗначениеСписка = СписокВидов.НайтиПоЗначению(НачальноеЗначение);
		ВыбранныйЭлемент = ВыбратьИзСписка(СписокВидов, Элемент, НачальноеЗначениеСписка);

		Если ВыбранныйЭлемент = Неопределено Тогда // отказ от выбора
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;

		Если Документы.ТипВсеСсылки().СодержитТип(ВыбранныйЭлемент.Значение) Тогда
			ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = Новый СписокЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ВыбранныйЭлемент.Значение);
			ЭлементыФормы.ПолеВводаВариантаЗачения.Значение.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		Иначе
			Элемент.Значение = ПустоеЗначениеТипа(ВыбранныйЭлемент.Значение);
		КонецЕсли;

	Иначе // размер списка = 0

		// Не понятно что выбирать, это ошибка.
		Предупреждение("Не заданы возможные типы значения!"); 
		СтандартнаяОбработка = Ложь;
		Возврат;

	КонецЕсли; 

КонецПроцедуры // ПолеВводаВариантаЗаченияНачалоВыбора()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик добавляет в табличную часть обработки позиции
// табличной части выбранного документа.
//
Процедура КнопкаВыполнитьНажатиеДобавитьИзДокумента(Элемент)
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") тогда //+++ 08.11.2013
		Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ДокументОбъект.ссылка)
		или яштПоЗаказуБылиОтгрузки(ДокументОбъект.ссылка) тогда
        Предупреждение("Нельзя добавлять строки!", 30);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВариантЗначения) = Тип("СписокЗначений") Тогда
		Если ВариантЗначения.Количество() = 0 Тогда
			Предупреждение("Не выбраны документы!");
		Иначе
			Для Каждого ДокументДобавления Из ВариантЗначения Цикл
				
				// Должен быть выбран документ, из которого добавляем
				Если ЗначениеНеЗаполнено(ДокументДобавления.Значение) Тогда
					
					Предупреждение("Не выбран документ, из которого надо добавить строки табличной части!", , 
					               Заголовок);
					ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
					Продолжить;
					
				КонецЕсли;

				МетаданныеВариантаЗначения = ДокументДобавления.Значение.Метаданные();

				// Для добавления в табличную часть обработки воспользуемся стандартной процедурой обработки подбора.
				СтруктураПодбора = Новый Структура();
				СтруктураПодбора.Вставить("СпособЗаполненияЦен", мСпособЗаполненияЦен);

				Если ЕстьРеквизитДокумента ("ТипЦен", мМетаданныеДокумента) Тогда
					СтруктураПодбора.Вставить("ТипЦен", ДокументОбъект.ТипЦен);
				КонецЕсли;

				Если ЕстьРеквизитДокумента ("ВалютаДокумента", мМетаданныеДокумента) Тогда
					Если ЕстьРеквизитДокумента ("ВалютаДокумента", МетаданныеВариантаЗначения) Тогда
						СтруктураПодбора.Вставить("Валюта", ДокументДобавления.Значение.ВалютаДокумента);
					Иначе
						СтруктураПодбора.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета);
					КонецЕсли;
				КонецЕсли;
				СтруктураПодбора.Вставить("Команда", "ДобавитьИзДокумента");

				ТаблицаПодбора   = ДокументДобавления.Значение.Товары.Выгрузить();
				ТаблицаДокумента = ДокументОбъект.Товары.Выгрузить();

				// Если каких-то колонок нет в документе-источнике, но
				// есть в документе-приемнике, добавим их в таблицу
				Для Каждого Реквизит из ТаблицаДокумента.Колонки Цикл
					Если НЕ ЕстьРеквизитТабЧастиДокумента(Реквизит.Имя, МетаданныеВариантаЗначения, "Товары") 
						  И ЕстьРеквизитТабЧастиДокумента(Реквизит.Имя, МетаданныеВариантаЗначения, "Товары") Тогда
						ТаблицаПодбора.Колонки.Добавить(Реквизит.Имя);
					КонецЕсли;
				КонецЦикла;

				// Некоторые колонки должны быть в таблице подобора вне
				МассивОбязательныхКолонок = Новый Массив;
				МассивОбязательныхКолонок.Добавить("Номенклатура");
				МассивОбязательныхКолонок.Добавить("ЕдиницаИзмерения");
				МассивОбязательныхКолонок.Добавить("Цена");
				МассивОбязательныхКолонок.Добавить("Количество");
				МассивОбязательныхКолонок.Добавить("КоличествоМест");
				МассивОбязательныхКолонок.Добавить("ХарактеристикаНоменклатуры");
				МассивОбязательныхКолонок.Добавить("СерияНоменклатуры");
				МассивОбязательныхКолонок.Добавить("ПроцентСкидкиНаценки");

				Для каждого ИмяКолонки Из МассивОбязательныхКолонок Цикл
					Если ТаблицаПодбора.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
						Если ИмяКолонки = "Цена" ИЛИ ИмяКолонки = "Количество" ИЛИ ИмяКолонки = "КоличествоМест" Тогда
							ТаблицаПодбора.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число"));
						Иначе
							ТаблицаПодбора.Колонки.Добавить(ИмяКолонки);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

				// Если есть реквизит КачествоНовое, то в качестве реквизита Качество нужно взять именно его
				Если ТаблицаПодбора.Колонки.Найти("КачествоНовое") <> Неопределено Тогда
					КолонкаКачества = ТаблицаПодбора.Колонки.Найти("Качество");
					Если КолонкаКачества <> Неопределено Тогда
						ТаблицаПодбора.Колонки.Удалить(КолонкаКачества);
					КонецЕсли;
					ТаблицаПодбора.Колонки.Найти("КачествоНовое").Имя = "Качество";
				КонецЕсли;

				СтруктураПодбора.Вставить("ТаблицаПодбора", ТаблицаПодбора);

				ОбработкаПодбора(Товары, ДокументОбъект, ДокументДобавления.Значение, СтруктураПодбора);

				ДействиеНеВыполнено = Ложь;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда
			Предупреждение("Не выбраны документы!");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КнопкаВыполнитьНажатиеДобавитьИзДокумента()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает цены в соответствии с выбранным типом цен.
//
Процедура КнопкаВыполнитьНажатиеУстановитьЦенуПоТипу(Элемент)
	
	// Должен быть выбран тип цен.
	Если (ТипЗнч(ДокументОбъект.Ссылка) = ТипЗнч(Документы.ЗаказПокупателя.ПустаяСсылка())) и (ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИспользоватьРазрешенныеТипыЦенКонтрагентов")) И
		 (Константы.ИспользоватьПорогиЦеныПоТипамЦенКонтрагентов.Получить()) Тогда
		 ВариантЗначения = ЭлементыФормы.ПолеВыбораТипаЦены.Значение;
	КонецЕсли;
	 
	Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран тип цен!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли;
	
	// Надо получить цены нужного типа. Цены достанем запросом.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", Товары.ВыгрузитьКолонку("Номенклатура"));
	
	Если мСпособЗаполненияЦен <> Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
	   и ВариантЗначения.Рассчитывается Тогда
		Запрос.УстановитьПараметр("ТипЦен"      , ВариантЗначения.БазовыйТипЦен);
		Запрос.УстановитьПараметр("ПроцентСкидкиНаценки" , ВариантЗначения.ПроцентСкидкиНаценки);
		Запрос.УстановитьПараметр("ТипЦенРассчитываемый" , ВариантЗначения);
	Иначе
		Запрос.УстановитьПараметр("ТипЦен"      , ВариантЗначения);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаЦен"     , ДокументОбъект.Дата);
	
	Если мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов Тогда
		
		Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка                            КАК Номенклатура,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Валюта,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ДатаЦен, 
		|		                         Номенклатура В (&МассивНоменклатуры) 
		|                               И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
		|		ПО ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка
		|
		|ГДЕ
		|	СправочникНоменклатура.Ссылка В(&МассивНоменклатуры)";
		
	Иначе // будем заполнять по ценам .
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка                  КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Валюта,
		|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,";
		Если ВариантЗначения.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст +"
			|	ВЫБОР КОГДА ЦеныНоменклатурыРассчитываемые.ПроцентСкидкиНаценки ЕСТЬ NULL
			|			ИЛИ ЦеныНоменклатурыРассчитываемые.ПроцентСкидкиНаценки = 0 ТОГДА
			|				&ПроцентСкидкиНаценки
			|			ИНАЧЕ ЦеныНоменклатурыРассчитываемые.ПроцентСкидкиНаценки КОНЕЦ КАК ПроцентСкидкиНаценки,";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст +"
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, Номенклатура В (&МассивНоменклатуры) И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка";
		Если ВариантЗначения.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст +"
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, Номенклатура В (&МассивНоменклатуры) И ТипЦен  = &ТипЦенРассчитываемый) КАК ЦеныНоменклатурыРассчитываемые
			|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура               = ЦеныНоменклатурыРассчитываемые.Номенклатура
			|		И  ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ЦеныНоменклатурыРассчитываемые.ХарактеристикаНоменклатуры";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст +"
		|
		|ГДЕ
		|	СправочникНоменклатура.Ссылка В(&МассивНоменклатуры)";
		
	КонецЕсли; 

	Если Не ЕстьРеквизитДокумента("ВалютаДокумента", мМетаданныеДокумента) Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1
	Иначе
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
		КратностьДокумента = КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
	КонецЕсли;
	Дата = ДокументОбъект.Дата;

	// Найдем у данной номенклатуры значение цены выбранного типа.
		ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();

			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(СтрокаТабличнойЧасти.Номенклатура,"Номенклатура")  Тогда
				// Нашли базовую цену.
				ЦенаБазовая = ВыборкаИзЗапроса.Цена;
			Иначе
				ЦенаБазовая = 0;
			КонецЕсли; 

			// Если цена динамическая, пересчитаем ее.
			ТекущаяВалюта            = ВыборкаИзЗапроса.Валюта;
			Если мСпособЗаполненияЦен <> Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов Тогда
				Если ВариантЗначения.Рассчитывается Тогда
					ТекущаяВалюта            = ВариантЗначения.ВалютаЦены;
					ПолученнаяЦена           = ПересчитатьЦенуПриИзмененииВалюты(ЦенаБазовая, ВыборкаИзЗапроса.Валюта, ТекущаяВалюта, 0, 0, Дата);
					ПроцентСкидкиНаценкиЦены = ? (ЗначениеНеЗаполнено(ВыборкаИзЗапроса.ПроцентСкидкиНаценки),
					                          ВариантЗначения.ПроцентСкидкиНаценки, ВыборкаИзЗапроса.ПроцентСкидкиНаценки);
					ПолученнаяЦена = ПолученнаяЦена * (1 + ПроцентСкидкиНаценкиЦены / 100);
				Иначе
					ПолученнаяЦена = ЦенаБазовая;
				КонецЕсли;
			Иначе
				ПолученнаяЦена = ЦенаБазовая;
			КонецЕсли;

			// Пересчитываем цену в единицу измерения количества
			Если ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", мМетаданныеДокумента, "Товары") Тогда
				Если СтрокаТабличнойЧасти.ЕдиницаИзмерения <> ВыборкаИзЗапроса.ЕдиницаИзмерения Тогда
					КоэффициентКоличества     = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
					//КоэффициентЦены           = ВыборкаИзЗапроса.ЕдиницаИзмерения.Коэффициент;
					//ПолученнаяЦена            = ПолученнаяЦена * КоэффициентКоличества / КоэффициентЦены;
					ПолученнаяЦена            = ?((ПолученнаяЦена=Неопределено) или (ПолученнаяЦена=NULL),0,ПолученнаяЦена) * ?((КоэффициентКоличества=Неопределено) или (КоэффициентКоличества=NULL),1,КоэффициентКоличества);
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеНЕЗаполнено(ВариантЗначения) Тогда //BugFix: 29.01.2019 - Задача № 62132 п.9
				ПолученнаяЦена = Окр(ПолученнаяЦена, 2);    // до копеек/центов!
			Иначе //как было
				ПолученнаяЦена = ОкруглитьЦену(ПолученнаяЦена, ВариантЗначения.ПорядокОкругления, ВариантЗначения.ОкруглятьВБольшуюСторону);
			КонецЕсли;	
			
			// Пересчитываем цену в валюту документа
			СтруктураТекущейВалюты = ПолучитьКурсВалюты(ТекущаяВалюта, ДокументОбъект.Дата);
			ТекущийКурс            = СтруктураТекущейВалюты.Курс;
			ТекущаяКратность       = СтруктураТекущейВалюты.Кратность;
			Если ВалютаДокумента <> ТекущаяВалюта Тогда
				Если ЗначениеНеЗаполнено(ВалютаДокумента) Тогда
					ВалютаДокумента = Константы.ВалютаУправленческогоУчета.Получить();
					СтруктураВалюты = ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
					КурсДокумента      = СтруктураВалюты.Курс;
					КратностьДокумента = СтруктураВалюты.Кратность;
				КонецЕсли;

				ПолученнаяЦена = ПересчитатьИзВалютыВВалюту(ПолученнаяЦена,
													ТекущаяВалюта,
													ВалютаДокумента,
													ТекущийКурс,
													КурсДокумента,
													ТекущаяКратность,
													КратностьДокумента);
			КонецЕсли;

			СтрокаТабличнойЧасти.Цена = ПолученнаяЦена;

			// Пересчет связанных колонок
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);

		КонецЕсли;
	КонецЦикла;

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьЦенуПоТипу()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает цены в рознице в соответствии с выбранным типом цен.
//
Процедура КнопкаВыполнитьНажатиеЗаполнитьЦенуВРозницеПоТипу(Элемент)
	
	// Должен быть выбран тип цен.
	Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран тип цен!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли;
	
	// Надо получить цены нужного типа. Цены достанем запросом.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ТипЦен"      , ВариантЗначения);
	Запрос.УстановитьПараметр("ДатаЦен"     , ДокументОбъект.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.Валюта,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, Номенклатура В(&Номенклатура) И ТипЦен =&ТипЦен)
	|	             КАК ЦеныНоменклатурыСрезПоследних";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	// Найдем у данной номенклатуры значение цены выбранного типа.
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();

			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(СтрокаТабличнойЧасти.Номенклатура,"Номенклатура")  Тогда

				// Нашли базовую цену.
				// Пересчитываем ее в рубли
				ЦенаБазовая = ПересчитатьЦенуПриИзмененииВалюты(ВыборкаИзЗапроса.Цена, ВыборкаИзЗапроса.Валюта,
				                                    мВалютаРегламентированногоУчета,
													1,1, ДокументОбъект.Дата);
			Иначе
				ЦенаБазовая = 0;
			КонецЕсли; 

			// Не забудем округлить.
			СтрокаТабличнойЧасти.ЦенаВРознице = ОкруглитьЦену(ЦенаБазовая, ВариантЗначения.ПорядокОкругления,
			                                      ВариантЗначения.ОкруглятьВБольшуюСторону);

			РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);

		КонецЕсли;
	КонецЦикла;

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеЗаполнитьЦенуВРозницеПоТипу()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик распределяет заданную сумму по строкам табличной части пропорционально их суммам.
//
Процедура КнопкаВыполнитьНажатиеРаспределитьСуммуПоСуммам(Элемент)

	// Сумма должна быть не нулевой.
	Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда

		Предупреждение("Не задана сумма для распределения!",, Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;

	КонецЕсли;

	РаспределитьСуммуПоКолонке("Сумма", ВариантЗначения);

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеРаспределитьСуммуПоСуммам()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик распределяет заданную сумму по строкам табличной части 
// пропорционально значению колонки "Количество".
//
Процедура КнопкаВыполнитьНажатиеРаспределитьСуммуПоКоличеству(Элемент)

	// Сумма должна быть не нулевой.
	Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда

		Предупреждение("Не задана сумма для распределения!",, Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;

	КонецЕсли;

	РаспределитьСуммуПоКолонке("Количество", ВариантЗначения);

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеРаспределитьСуммуПоКоличеству()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик округляет цену до выбранного порядка.
//
Процедура КнопкаВыполнитьНажатиеОкруглитьЦену(Элемент)
	
	// Должна быть выбран порядок округленеия.
	Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран порядок округления!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			Если ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатуры" Тогда
				СтрокаТабличнойЧасти.Цена = ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, ВариантЗначения,
				                                          ДокументОбъект.ТипЦен.ОкруглятьВБольшуюСторону);
			Иначе
				СтрокаТабличнойЧасти.Цена = ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, ВариантЗначения,
				                                          Истина);
			КонецЕсли;

			// пересчитаем связанные реквизиты.
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);
			
		КонецЕсли; 
	КонецЦикла; 

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦену()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик округляет цену в рознице до выбранного порядка.
//
Процедура КнопкаВыполнитьНажатиеОкруглитьЦенуВРознице(Элемент)
	
	// Должна быть выбран порядок округленеия.
	Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран порядок округления!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.ЦенаВРознице = ОкруглитьЦену(СтрокаТабличнойЧасти.ЦенаВРознице, ВариантЗначения,
					                ДокументОбъект.Склад.ТипЦенРозничнойТорговли.ОкруглятьВБольшуюСторону);
			
			РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);
			
		КонецЕсли; 
	КонецЦикла; 

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦенуВРознице()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик изменяет цену на заданный процент.
//
Процедура КнопкаВыполнитьНажатиеИзменитьЦену(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * (100 + ВариантЗначения) / 100;
			
			Если Цел(СтрокаТабличнойЧасти.Цена)<>СтрокаТабличнойЧасти.Цена Тогда // цена автоматически округляется
				СтрокаТабличнойЧасти.Цена =  Цел(СтрокаТабличнойЧасти.Цена)+1;
			КонецЕсли;	
			// пересчитаем связанные реквизиты.
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);
			
		КонецЕсли; 
	КонецЦикла; 

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеИзменитьЦену()

//+++ 16.12.2013 Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик изменяет цену на заданный процент.
//
Процедура КнопкаВыполнитьНажатиеИзменитьЦенуРуб(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена  + ВариантЗначения;
			
			// пересчитаем связанные реквизиты.
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);
			
		КонецЕсли; 
	КонецЦикла; 

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеИзменитьЦенуРуб()


// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает выбранную ставку НДС по всем помеченным позициям табличной части.
//
Процедура КнопкаВыполнитьНажатиеУстановитьСтавкуНДС(Элемент)
	
	// Должна быть выбрана новая ставка НДС.
	Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбрана новая ставка НДС!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.СтавкаНДС = ВариантЗначения;
			Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьСтавкуНДС()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает выбранную страну происхождения по всем помеченным позициям табличной части.
//
Процедура КнопкаВыполнитьНажатиеУстановитьСтрануПроисхождения(Элемент)
	
	// Должна быть выбрана новая ставка НДС.
	Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбрана новая страна происхождения!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.СтранаПроисхождения = ВариантЗначения;

		КонецЕсли;
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьСтрануПроисхождения()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает процент скидки в каждой строке.
//
Процедура КнопкаВыполнитьНажатиеУстановитьСкидку(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ВариантЗначения;

			// пересчитаем связанные реквизиты.
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);
			
		КонецЕсли; 
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦену()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает процент скидки в каждой строке.
//
Процедура КнопкаВыполнитьНажатиеУстановитьОграничение(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.ОграничениеСкидкиНаценки = ВариантЗначения;

			// пересчитаем связанные реквизиты.
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);
			
		КонецЕсли; 
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦену()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает процент скидки в каждой строке.
//
Процедура КнопкаВыполнитьНажатиеУстановитьСклад(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.Склад = ВариантЗначения;
		КонецЕсли; 
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦену()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик удаляет все помеченные позиции табличной части.
//
Процедура КнопкаВыполнитьНажатиеУдалитьГруппуСтрок(Кнопка)

	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") тогда //+++ 08.11.2013
		Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ДокументОбъект.ссылка) 
			или яштПоЗаказуБылиОтгрузки(ДокументОбъект.ссылка) тогда
			Предупреждение("Нельзя удалять строки!", 30);
			Отказ = истина;
	 	КонецЕсли;
	КонецЕсли;

	КолвоЭлементовКоллекции = Товары.Количество();

	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = Товары[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если ЭлементКоллекции.Пометка Тогда
			Товары.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля выбора текущего дйествия.
//
Процедура ПолеВыбораДействияПриИзменении(Элемент)

	// Установим элементы формы в зависимости от выбранного действия
	Если СписокДействий.НайтиПоЗначению(Элемент.Значение) <> Неопределено Тогда
		Элементыформы.ПолеВыбораТипаЦены.Видимость = Ложь;
		Элементыформы.ПолеВводаВариантаЗачения.Видимость = Истина;
		ПриИзмененииТекущегоДействия(СписокДействий.Индекс(СписокДействий.НайтиПоЗначению(Элемент.Значение)));
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ОК".
//
Процедура КнопкаОКНажатие(Элемент)

	Если ДействиеНеВыполнено Тогда
		Если Вопрос("Выбранное действие не было выполнено! Продолжить?", 
		            РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			ДействиеНеВыполнено = Ложь;
		КонецЕсли;
	КонецЕсли;

	// Действие выполняется, если еще не закрыли документ
	Если ДокументОбъект <> Неопределено Тогда

		МетаданныеДокумента = ДокументОбъект.Метаданные();

		// Выгрузим ТЧ обработки в таблицу значений для дальнейших преобразований
		ТаблицаОбработки = Товары.Выгрузить();

		// ТЧ документа также выгрузим в таблицу значений ради удобства работы с колонками
		ТаблицаДокумента = ДокументОбъект.Товары.Выгрузить();

		// Создадим структуру, которая будет содержать имена колонок присутствующих в 
		// документе, но не присутствующих в ТЧ обработки
		СтруктураНовыхКолонок = Новый Структура;

		// Идем по строкам табличной части и обрабатываем строки, в которых заполнен
		// реквизит НомерДокумента. Эти строки были выгружены из документа.
		Для каждого СтрокаТаблицы Из ТаблицаОбработки Цикл
			Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.НомерСтрокиДокумента) Тогда

				// Если номер строки заполнен, находим соответствующую строку в табличной 
				// части документа
				СтрокаТаблицыДокумента = ТаблицаДокумента[СтрокаТаблицы.НомерСтрокиДокумента - 1];

				// Во избежание проблем с подчиненными реквизитами, строка ТЧ обработки 
				// считается соответствующей строке ТЧ документа, только в том случае,если
				// номенклатура не изменилась. Если номенклатура в строке изменилась, 
				// считается, что это новая строка.
				Если СтрокаТаблицыДокумента.Номенклатура = СтрокаТаблицы.Номенклатура Тогда

					// Теперь пройдем по колонкам таблицы документа
					Для каждого КолонкаТаблицыДокумента Из ТаблицаДокумента.Колонки Цикл

						// Если колонка есть в таблице документа, но ее нет в таблице, выгруженной
						// из обработке и нет в структуре новых колонок, тогда добавим ее в таблицу
						// и в структуру
						Если ТаблицаОбработки.Колонки.Найти(КолонкаТаблицыДокумента.Имя) = Неопределено
						   И НЕ СтруктураНовыхКолонок.Свойство(КолонкаТаблицыДокумента.Имя) Тогда
							ТаблицаОбработки.Колонки.Добавить(КолонкаТаблицыДокумента.Имя);
							СтруктураНовыхКолонок.Вставить(КолонкаТаблицыДокумента.Имя);
						КонецЕсли;

						// Если колонка есть в структуре новых колонок, заполняем ее значение 
						// из таблицы документа
						Если СтруктураНовыхКолонок.Свойство(КолонкаТаблицыДокумента.Имя) Тогда
							СтрокаТаблицы[КолонкаТаблицыДокумента.Имя] = СтрокаТаблицыДокумента[КолонкаТаблицыДокумента.Имя];
						КонецЕсли;

					КонецЦикла;
				КонецЕсли;
			Иначе

				// Для документов реализации надо заполнить способ списания товаров значением
				// по умолчанию, если он не был заполнен ранее
				Если ЕстьРеквизитТабЧастиДокумента("СпособСписанияОстаткаТоваров", МетаданныеДокумента, "Товары") Тогда
					Если ТаблицаОбработки.Колонки.Найти("СпособСписанияОстаткаТоваров") = Неопределено Тогда
						ТаблицаОбработки.Колонки.Добавить("СпособСписанияОстаткаТоваров");
					КонецЕсли;
					Если ЗначениеНеЗаполнено(СтрокаТаблицы.СпособСписанияОстаткаТоваров) Тогда
						ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТаблицы, ДокументОбъект);
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;

		// Чарчан - добавим проверку
		// Если документ = заказ покупателя и есть необходимые галки, то проверяем что насоздавали. 
			Если (ТипЗнч(ДокументОбъект.Ссылка) = ТипЗнч(Документы.ЗаказПокупателя.ПустаяСсылка())) и (ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИспользоватьРазрешенныеТипыЦенКонтрагентов")) И
				 (Константы.ИспользоватьПорогиЦеныПоТипамЦенКонтрагентов.Получить()) Тогда
				Если (ПроверитьПороговыеЦеныКонтрагента(ДокументОбъект,ТаблицаОбработки,ЭлементыФормы.ПолеВыбораТипаЦены.Значение)) Тогда 
					 Предупреждение("Перенос данных не выполнен !!!");
					 Возврат;
				КонецЕсли;
			КонецЕсли; 		
		//////////////////////	
		// Загрузим полученную таблицу в документ
		ДокументОбъект.Товары.Загрузить(ТаблицаОбработки);
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("АвтоматическиеСкидки") <> Неопределено
			И мРассчитыватьАвтоматическиеСкидки Тогда
			мФормаДокумента.мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок;
			мФормаДокумента.мМинимальныеЦены = мМинимальныеЦены;
			мФормаДокумента.мСписокФильтров = мСписокФильтров;
		КонецЕсли;

	КонецЕсли;

	// Сохраним текущее выбранное значение в списке действий.
	СохранитьЗначение("ОбработкаТабличнойЧастиТекущееДействие", ЭлементыФормы.ПолеВыбораДействия.Значение);

	// Можно закрывать форму.
	Закрыть();

КонецПроцедуры // КнопкаОКНажатие()

// Процедура - обработчик события "Очистка" поля выбора действия.
// Запрещает очистку поля.
//
Процедура ПолеВыбораДействияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТЧ Товары

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;

	// Новые строки будем по умолчанию помечать.
	Если НоваяСтрока Тогда
		ТекущаяСтрока.Пометка              = Истина;
		ТекущаяСтрока.Качество             = Справочники.Качество.Новый;
		ТекущаяСтрока.НомерСтрокиДокумента = 0;
	КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ФорматСумм(ДанныеСтроки.Сумма
		                                             + ?(мЕстьНДС И ДокументОбъект.СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));
	КонецЕсли;

	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если ЭлементыФормы.Товары.Колонки.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "НачалоВыбора" поля ввода качества номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыКачествоНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если НеВыбиратьНовоеКачество Тогда
		СтандартнаяОбработка                                    = Ложь;
		ФормаВыбора                                             = Справочники.Качество.ПолучитьФормуВыбора();
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Значение      = Справочники.Качество.Новый;
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Использование = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.НеРавно;
		Элемент.Значение                                        = ФормаВыбора.ОткрытьМодально();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода качества номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыКачествоПриИзменении(Элемент)

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	// Заполняем реквизиты табличной части.
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
	Если мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов Тогда
		СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		                                         ДокументОбъект.Контрагент, ДокументОбъект.ТипЦен, ДокументОбъект.ДоговорКонтрагента, ДокументОбъект.Дата,ДокументОбъект.ВалютаДокумента, ДокументОбъект.УчитыватьНДС,ДокументОбъект.СуммаВключаетНДС);
		ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	ИначеЕсли мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры  Тогда
		ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета); 
	ИначеЕсли мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда 
		Если мЕстьЦенаВРознице Тогда
			ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ДокументОбъект.Склад, мВалютаРегламентированногоУчета);
		Иначе
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета); 
		КонецЕсли;
	КонецЕсли;

	// Рассчитываем реквизиты табличной части.
	ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	Если ЕстьРеквизитДокумента("ПроцентРозничнойНаценки", мМетаданныеДокумента) Тогда
		РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета, мВалютаУпрУчета);
	КонецЕсли;

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		Если мКолонкиТовары.СуммаНДС.Видимость Тогда
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов Тогда
		СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		                                         ДокументОбъект.Контрагент, ДокументОбъект.ТипЦен, ДокументОбъект.ДоговорКонтрагента, ДокументОбъект.Дата,ДокументОбъект.ВалютаДокумента, ДокументОбъект.УчитыватьНДС,ДокументОбъект.СуммаВключаетНДС);
		ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	ИначеЕсли мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры  Тогда
		ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета); 
	ИначеЕсли мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда 
		Если мЕстьЦенаВРознице Тогда
			ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ДокументОбъект.Склад, мВалютаРегламентированногоУчета);
		Иначе
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета); 
		КонецЕсли;
	КонецЕсли;

	// Рассчитываем реквизиты табличной части.
	ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	Если ЕстьРеквизитДокумента("ПроцентРозничнойНаценки", мМетаданныеДокумента) Тогда
		РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета, мВалютаУпрУчета);
	КонецЕсли;

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		Если мКолонкиТовары.СуммаНДС.Видимость Тогда
			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		Если мКолонкиТовары.СуммаНДС.Видимость Тогда
			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		Если мКолонкиТовары.СуммаНДС.Видимость Тогда
			
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		Если мКолонкиТовары.СуммаНДС.Видимость Тогда
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		Если мКолонкиТовары.СуммаНДС.Видимость Тогда
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода процента
// розничной наценки в строке табличной части "Товары".
//
Процедура ТоварыПроцентРозничнойНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	Если ЕстьРеквизитДокумента("ПроцентРозничнойНаценки", мМетаданныеДокумента) Тогда
		РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета, мВалютаУпрУчета);
	КонецЕсли;

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		Если мКолонкиТовары.СуммаНДС.Видимость Тогда
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыПроцентРозничнойНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены в рознице
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		Если мКолонкиТовары.СуммаНДС.Видимость Тогда
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаВРозницеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект, глТекущийПользователь);

	//Расчет скидок
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС",                         ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
		РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		Если мКолонкиТовары.СуммаНДС.Видимость Тогда
			РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
		РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "Товары");

КонецПроцедуры

Процедура ПолеВводаВариантаЗначенияОчистка(Элемент, СтандартнаяОбработка)
	
	// Установим элементы формы в зависимости от выбранного действия
	Если СписокДействий.НайтиПоЗначению(ЭлементыФормы.ПолеВыбораДействия.Значение) <> Неопределено Тогда
		ПриИзмененииТекущегоДействия(СписокДействий.Индекс(СписокДействий.НайтиПоЗначению(ЭлементыФормы.ПолеВыбораДействия.Значение)));
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры

// Чарчан добавили процедуру проверки пороговый цен
Функция ПроверитьПороговыеЦеныКонтрагента(Объект,ТаблицаОбработки, ТипЦены)
	
	Ссылка = Объект.Ссылка;
	
	Отказ = Ложь;
	
	Если НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ИспользоватьРазрешенныеТипыЦенКонтрагентов") Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	ТипЦенРучная = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Ручная");
	Если не ЗначениеНеЗаполнено(ТипЦенРучная) И ТипЦенРучная = Объект.ТипЦен Тогда // для ручных 
		Возврат Ложь;
	КонецЕсли;	
		
	СписокДоступныхТипов = яштПолучитьСписокДоступныхЦенКонтрагента(Ссылка.Контрагент);
	СписокНоменклатуры = ТаблицаОбработки.ВыгрузитьКолонку("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	МИНИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК МинЦена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата,
	|	ТипЦен В (&СписокТиповЦен)
	|	И Номенклатура В (&СписокНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.Рассчитывается = ЛОЖЬ
	|	И ЦеныНоменклатурыСрезПоследних.Цена > 0
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура";
	
	Запрос.УстановитьПараметр("СписокТиповЦен", СписокДоступныхТипов);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("Дата", Ссылка.Дата);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из ТаблицаОбработки Цикл
		
		// Для дисков делаем отмену проверки
	Если ЗначениеЗаполнено(Строка.Номенклатура) И Строка.Номенклатура.ВидТовара=Перечисления.ВидыТоваров.Диски Тогда 
		Возврат Отказ; 
	КонецЕсли;

		//СтрТЗ = ТаблицаЗапроса.Найти(Строка.Номенклатура, "Номенклатура");
		//Если СтрТЗ = Неопределено Тогда
		//	
		//	СообщитьОбОшибке("Для строки номер " + Строка(Строка.НомерСтроки) + ": товар " + Строка.Номенклатура + "
		//	|не установлены цены, проведение документа не возможно!",
		//	Отказ);
		//	
		//Иначе
		//	
		//	Если Строка.Цена < СтрТЗ.МинЦена Тогда
		//		
		//		СообщитьОбОшибке("Для строки номер " + Строка(Строка.НомерСтроки) + ": товар " + Строка.Номенклатура + "
		//		|минимальное значение цены составляет " + Строка(ТаблицаЗапроса.Найти(Строка.Номенклатура, "Номенклатура").МинЦена) + " руб. Текущая цена - " + Строка(Строка.Цена) + " руб.", 
		//		Отказ);
		//		
		//	КонецЕсли; 	
		//	
		//КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Отказ;

	
КонецФункции

Процедура КоманднаяПанельТоварыДействиеТолькоДиски(Кнопка)
	
	 СтрокаФильтр="";
	Если ВвестиСтроку(СтрокаФильтр,"Введите строку отбора",0, Ложь) Тогда
		
	КонецЕсли;	
		
	
	СсылкаДиски=Справочники.Номенклатура.НайтиПоКоду("0001752");	// Папка Диски

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) И СтрокаТабличнойЧасти.Номенклатура.ПринадлежитЭлементу(СсылкаДиски) Тогда
			Если (СтрокаФильтр="") ИЛИ (СтрокаФильтр<>"" И Найти (СтрокаТабличнойЧасти.Номенклатура,СтрокаФильтр)>0 ) Тогда
			СтрокаТабличнойЧасти.Пометка = Истина;
			Иначе
			СтрокаТабличнойЧасти.Пометка = Ложь;
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.Пометка = Ложь;
		КонецЕсли;	
	КонецЦикла;	


КонецПроцедуры

Процедура ТоварыПередУдалением(Элемент, Отказ)
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") тогда //+++ 08.11.2013
		Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ДокументОбъект.ссылка) 
			или яштПоЗаказуБылиОтгрузки(ДокументОбъект.ссылка) тогда
			Предупреждение("Нельзя удалять строки!", 30);
			Отказ = истина;
	 	КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") тогда //+++ 08.11.2013
		Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ДокументОбъект.ссылка) 
			или яштПоЗаказуБылиОтгрузки(ДокументОбъект.ссылка) тогда
			Предупреждение("Нельзя добавлять строки!", 30);
			Отказ = истина;
	 	КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	//Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЗначенияСвойствОбъектов.Объект
	//	|ПОМЕСТИТЬ КонтрагентыРаспродажи
	//	|ИЗ
	//	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//	|ГДЕ
	//	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	//	|	И ЗначенияСвойствОбъектов.Значение = ИСТИНА
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	АссортиментРаспродажиДляТерминала.Номенклатура
	//	|ПОМЕСТИТЬ Распродажа
	//	|ИЗ
	//	|	РегистрСведений.АссортиментРаспродажиДляТерминала КАК АссортиментРаспродажиДляТерминала
	//	|ГДЕ
	//	|	АссортиментРаспродажиДляТерминала.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	КонтрагентыРаспродажи.Объект КАК Контрагент,
	//	|	Распродажа.Номенклатура
	//	|ИЗ
	//	|	КонтрагентыРаспродажи КАК КонтрагентыРаспродажи
	//	|		ПОЛНОЕ СОЕДИНЕНИЕ Распродажа КАК Распродажа
	//	|		ПО (ИСТИНА)";
	//	
	//	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90183"));
	//	
	//	ТабРезультат = Запрос.Выполнить().Выгрузить();
	//	
	//	Для каждого стр из ОформленияСтрок Цикл
	//		отбор = новый Структура;
	//		Отбор.Вставить("Контрагент",ДокументОбъект.контрагент);
	//		Отбор.Вставить("Номенклатура",стр.ДанныеСтроки.Номенклатура);
	//		
	//		Если ТабРезультат.Найтистроки(Отбор).Количество()>0 тогда	
	//			стр.ЦветФона = WebЦвета.Желтый;
	//		конецЕсли;
	//	КонецЦикла;
	//конецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мВалютаУпрУчета                 = Константы.ВалютаУправленческогоУчета.Получить();
мКолонкиТовары                  = ЭлементыФормы.Товары.Колонки;
