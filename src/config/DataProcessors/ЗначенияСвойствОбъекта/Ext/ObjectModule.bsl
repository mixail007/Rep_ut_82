////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВыгрузитьСвойстваИЗначенияВТЗ() Экспорт

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("НазначениеСвойств",       НазначениеСвойств);
	Запрос.УстановитьПараметр("ОбъектОтбораЗначений",    ОбъектОтбораЗначений);
	Запрос.УстановитьПараметр("СписокНазначенийСвойств", СписокНазначенийСвойств());

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвойстваОбъектов.ПометкаУдаления                            КАК ПометкаУдаления,
	|	СвойстваОбъектов.Ссылка                                     КАК Свойство,
	|	РегистрСведений.ЗначенияСвойствОбъектов.Значение            КАК Значение
	|
	|ИЗ
	|// Отбираются свойства, предназначенные для заданного типа объектов.
	|	(
	|	ВЫБРАТЬ 
	|		ПланВидовХарактеристик.СвойстваОбъектов.Ссылка          КАК Ссылка,
	|		ПланВидовХарактеристик.СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления
	|
	|	ИЗ
	|		ПланВидовХарактеристик.СвойстваОбъектов
	|
	|	ГДЕ
	|		ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства В ( &НазначениеСвойств )
	|
	|	)                                                           КАК СвойстваОбъектов
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|// Присоединяются значения свойств, назначенные для заданного объекта.
	|	РегистрСведений.ЗначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка
	|	И
	|	РегистрСведений.ЗначенияСвойствОбъектов.Объект = &ОбъектОтбораЗначений
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|// Присоединяются группы, которым назначено свойство, для отбора свойств.
	|// Если свойству назначено значение, оно отбирается в любом случае.
	|	РегистрСведений.НазначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка
	|	И
	|	РегистрСведений.ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL
	|
	|ГДЕ
	|// Если значение свойства не задано, свойство должно быть назанчено
	|// или всем объектам, или одной из групп - родителей объекта.
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект ЕСТЬ NULL
	|	ИЛИ
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект В ( &СписокНазначенийСвойств )
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваОбъектов.Ссылка.Наименование
	|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции


// Процедура заполняет табличную часть обработки свойствами и значениями свойств объекта.
// При заполнении используются значения реквизитов обработки: 
// ОбъектОтбораЗначений - объект, значения свойств которого отбираются.
// НазначениеСвойств - значение реквизита, по которому отбораются свойства.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения() Экспорт

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("НазначениеСвойств",       НазначениеСвойств);
	Запрос.УстановитьПараметр("ОбъектОтбораЗначений",    ОбъектОтбораЗначений);
	Запрос.УстановитьПараметр("СписокНазначенийСвойств", СписокНазначенийСвойств());

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвойстваОбъектов.ПометкаУдаления                            КАК ПометкаУдаления,
	|	СвойстваОбъектов.Ссылка                                     КАК Свойство,
	|	РегистрСведений.ЗначенияСвойствОбъектов.Значение            КАК Значение
	|
	|ИЗ
	|// Отбираются свойства, предназначенные для заданного типа объектов.
	|	(
	|	ВЫБРАТЬ 
	|		ПланВидовХарактеристик.СвойстваОбъектов.Ссылка          КАК Ссылка,
	|		ПланВидовХарактеристик.СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления
	|
	|	ИЗ
	|		ПланВидовХарактеристик.СвойстваОбъектов
	|
	|	ГДЕ
	|		ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства В ( &НазначениеСвойств )
	|
	|	)                                                           КАК СвойстваОбъектов
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|// Присоединяются значения свойств, назначенные для заданного объекта.
	|	РегистрСведений.ЗначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка
	|	И
	|	РегистрСведений.ЗначенияСвойствОбъектов.Объект = &ОбъектОтбораЗначений
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|// Присоединяются группы, которым назначено свойство, для отбора свойств.
	|// Если свойству назначено значение, оно отбирается в любом случае.
	|	РегистрСведений.НазначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка
	|	И
	|	РегистрСведений.ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL
	|
	|ГДЕ
	|// Если значение свойства не задано, свойство должно быть назанчено
	|// или всем объектам, или одной из групп - родителей объекта.
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект ЕСТЬ NULL
	|	ИЛИ
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект В ( &СписокНазначенийСвойств )
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваОбъектов.Ссылка.Наименование
	|";

	СвойстваИЗначения.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

// Процедура открывает форму нового свойства.
// Предназначена для вызова из обработчиков форм СвойстваИЗначенияПередНачаломДобавления.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуНовогоСвойства(ФормаВладелец) Экспорт

	ФормаНовогоСвойства = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьФормуНовогоЭлемента(, ФормаВладелец, );

	Если ТипЗнч(НазначениеСвойств) = Тип("СписокЗначений") Тогда
		ВыбранныйЭлемент = НазначениеСвойств.ВыбратьЭлемент("Выбор назначения свойства");

		Если ВыбранныйЭлемент <> Неопределено Тогда
			ФормаНовогоСвойства.НазначениеСвойства = ВыбранныйЭлемент.Значение;
		КонецЕсли;

	Иначе
		ФормаНовогоСвойства.НазначениеСвойства = НазначениеСвойств;
	КонецЕсли;

	ФормаНовогоСвойства.Открыть();

КонецПроцедуры

// Процедура проверяет, должно ли новое свойство попасть в табличную часть обработки, 
// если да - добавляет свойство и активизирует соответствующую строку в табличном поле.
// Предназначена для вызова из обработчиков форм ОбработкаЗаписиНовогоОбъекта.
//
// Параметры:
//  Свойство - добавляемое свойство.
//  ТабличноеПоле - ТабличноеПоле, в котором надо активизировать строку.
//
Процедура ПроверитьДобавитьНовоеСвойство(Свойство, ТабличноеПоле) Экспорт

	// Запросом проверяется, должно ли новое свойство быть отобрано в табличную часть.

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("Свойство",                Свойство);
	Запрос.УстановитьПараметр("НазначениеСвойств",       НазначениеСвойств);
	Запрос.УстановитьПараметр("СписокНазначенийСвойств", СписокНазначенийСвойств());

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвойстваОбъектов.Ссылка                                     КАК Свойство
	|
	|ИЗ
	|// Отбирается свойство.
	|	(
	|	ВЫБРАТЬ 
	|		ПланВидовХарактеристик.СвойстваОбъектов.Ссылка          КАК Ссылка
	|
	|	ИЗ
	|		ПланВидовХарактеристик.СвойстваОбъектов
	|
	|	ГДЕ
	|		ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства В ( &НазначениеСвойств )
	|		И
	|		ПланВидовХарактеристик.СвойстваОбъектов.Ссылка             = &Свойство
	|
	|	)                                                           КАК СвойстваОбъектов
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|// Присоединяются группы, которым назначено свойство, для отбора свойств.
	|	РегистрСведений.НазначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство = &Свойство
	|
	|ГДЕ
	|// Свойство должно быть назанчено или всем объектам,
	|// или одной из групп - родителей объекта.
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект ЕСТЬ NULL
	|	ИЛИ
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект В ( &СписокНазначенийСвойств )
	|";

	Если Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;

	// Определение позиции свойства в табличной части.

	Для Индекс = 0 По СвойстваИЗначения.Количество() - 1 Цикл
		Если Свойство.Наименование < СвойстваИЗначения[Индекс].Свойство.Наименование Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Вставка свойства с соответствующую позицию.

	НоваяСтрока = СвойстваИЗначения.Вставить(Индекс);

	НоваяСтрока.ПометкаУдаления = Свойство.ПометкаУдаления;
	НоваяСтрока.Свойство        = Свойство;

	// Позиционирование курсора.

	ТабличноеПоле.ТекущаяСтрока  = НоваяСтрока;

КонецПроцедуры

// Процедура снимает и устанавливает пометку удаления свойства.
// Предназначена для вызова из обработчиков форм СвойстваИЗначенияПередУдалением.
//
// Параметры:
//  ТекущаяСтрока - текущая строка табличной части.
//
Процедура ИнвертироватьПометкуУдаленияСвойства(ТекущаяСтрока) Экспорт

	ОбъектСвойство = ТекущаяСтрока.Свойство.ПолучитьОбъект();

	Если ОбъектСвойство.Предопределенный Тогда
		Сообщить("Не допускается удаление предопределенных элементов!",СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Попытка
		ОбъектСвойство.УстановитьПометкуУдаления(НЕ ТекущаяСтрока.ПометкаУдаления, Истина);
	Исключение
		Сообщить("Не удалось изменить пометку удаления свойства:" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;

	ТекущаяСтрока.ПометкаУдаления = ОбъектСвойство.ПометкаУдаления;

	//Если ТекущаяСтрока.ПометкаУдаления Тогда
	//	ТекущаяСтрока.Значение = ТекущаяСтрока.Свойство.ТипЗначения.ПривестиЗначение(Неопределено);
	//КонецЕсли;

КонецПроцедуры

// Процедура приводит тип значения значения свойства к требуемому типу.
// Предназначена для вызова из обработчиков форм 
// СвойстваИЗначенияПриНачалеРедактирования, СвойстваИЗначенияЗначениеОчистка.
//
// Параметры:
//  Нет.
//
Процедура ПривестиТипЗначенияСвойства(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.Значение = ТекущаяСтрока.Свойство.ТипЗначения.ПривестиЗначение(ТекущаяСтрока.Значение);

КонецПроцедуры

// Функция записывает значения свойств в информационную базу.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Истина - если значения свойств были записаны, или их не требуется записывать
//  Ложь   - если значения свойств не удалось записать.
//
Функция ЗаписатьЗначенияСвойств() Экспорт

	НаборЗаписейЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();

	Для каждого Строка Из СвойстваИЗначения Цикл
		Если НЕ ЗначениеНеЗаполнено(Строка.Значение) Тогда
			Запись = НаборЗаписейЗначенияСвойств.Добавить();

			Запись.Объект   = ОбъектОтбораЗначений;
			Запись.Свойство = Строка.Свойство;
			Запись.Значение = Строка.Значение;
		КонецЕсли;
	КонецЦикла;

	НаборЗаписейЗначенияСвойств.Отбор.Объект.Установить(ОбъектОтбораЗначений);

	Попытка
		
		НаборЗаписейЗначенияСвойств.Записать();
		
	Исключение
		СообщитьОбОшибке("Не удалось записать значения свойств:" + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;


 //+++ 20.04.2017 - Синхронизация по каждому свойству?!
 Если ТипЗнч(ОбъектОтбораЗначений) = Тип("СправочникСсылка.Номенклатура") тогда
	Для каждого Строка Из СвойстваИЗначения Цикл
		Если НЕ ЗначениеНеЗаполнено(Строка.Значение) Тогда
			НаборЗаписейРег = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НаборЗаписейРег.Отбор.Объект.Установить(ОбъектОтбораЗначений);
        	НаборЗаписейРег.Отбор.Свойство.Установить(Строка.Свойство);
			НаборЗаписейРег.Прочитать();
 			ВключитьРегистрациюПланаОбмена(НаборЗаписейРег);	
			НаборЗаписейРег.Записать();
 		КонецЕсли;
	КонецЦикла;
КонецЕсли;	

	Возврат Истина;

КонецФункции

//+++ 20.04.2017 
Процедура ВключитьРегистрациюПланаОбмена(НаборЗаписей1)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СинхронизацияНоменклатуры.Ссылка
	               |ИЗ
	               |	ПланОбмена.СинхронизацияНоменклатуры КАК СинхронизацияНоменклатуры
	               |ГДЕ
	               |	СинхронизацияНоменклатуры.Ссылка <> &ЭтотУзел
				   //20.04.2017
				   |	И СинхронизацияНоменклатуры.ПометкаУдаления = ЛОЖЬ
				   
	               |	И СинхронизацияНоменклатуры.ВыполнятьОбмен";
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.СинхронизацияНоменклатуры.ЭтотУзел());  
	
	Выборка = Запрос.Выполнить().Выбрать();
	// Регистрация изменений для выбранных узлов
	
	Пока Выборка.Следующий() Цикл
		 ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, НаборЗаписей1);
	КонецЦикла;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ

// Функция формирует список значений, содержащий объект отбора назначений свойств 
// и всех его родителей. Список используется в качестве параметра запросов.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Cписок значений, содержащий объект отбора назначений и всех его родителей.
//
Функция СписокНазначенийСвойств()

	СписокНазначенийСвойств = Новый СписокЗначений;

	Назначение = ОбъектОтбораНазначений;

	Попытка
		Пока НЕ ЗначениеНеЗаполнено(Назначение) Цикл
			СписокНазначенийСвойств.Добавить(Назначение);
			Назначение = Назначение.Родитель;
		КонецЦикла;
	Исключение
	КонецПопытки;

	СписокНазначенийСвойств.Добавить(Назначение);

	Возврат СписокНазначенийСвойств;

КонецФункции
