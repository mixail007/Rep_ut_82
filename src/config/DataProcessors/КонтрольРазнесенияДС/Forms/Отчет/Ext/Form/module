
Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	Отчет(ТабДок);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура Отчет(ТабДок) Экспорт
	//плюсы и минусы по одному договору
	Макет = ВнешняяОбработкаОбъект.ПолучитьМакет("Отчет");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
|		Б.ДоговорКонтрагента.Владелец КАК Контрагент,
|		Б.ДоговорКонтрагента КАК Договор,
|		Б.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственноеЛицо,
|		Б.ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента КАК ОсновнойМенеджерКонтрагента,
|		СУММА(Б.Приход) КАК ДолгФирме,
|		СУММА(Б.Расход) КАК ДолгКлиенту,
|		Максимум (Признак) Признак
|//ПОМЕСТИТЬ ВТ_Договоры		
|	ИЗ
|		(ВЫБРАТЬ
|			А.ДоговорКонтрагента КАК ДоговорКонтрагента,
|			А.Сделка КАК Сделка,
|			ВЫБОР
|				КОГДА А.Сумма > 0
|					ТОГДА А.Сумма
|				ИНАЧЕ 0
|			КОНЕЦ КАК Приход,
|			ВЫБОР
|				КОГДА А.Сумма < 0
|					ТОГДА -А.Сумма
|				ИНАЧЕ 0
|			КОНЕЦ КАК Расход,
|			
|			ВЫБОР КОГДА  А.Сумма>А.Сделка.СуммаДокумента ИЛИ -А.Сумма>А.Сделка.СуммаДокумента ТОГДА
|			1
|			ИНАЧЕ
|			0 
|			КОНЕЦ Признак
|			
|		ИЗ
|			(ВЫБРАТЬ
|				ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
|				ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
|				СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК Сумма
|			ИЗ
|				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&КонДата,ДоговорКонтрагента.ВедениеВзаиморасчетов=
|				 Значение(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
|				  ) КАК ВзаиморасчетыСКонтрагентамиОстатки
|			
|			
|			СГРУППИРОВАТЬ ПО
|				ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
|				ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК А) КАК Б
|	
|	СГРУППИРОВАТЬ ПО
|		Б.ДоговорКонтрагента,
|		Б.ДоговорКонтрагента.Владелец,
|		Б.ДоговорКонтрагента.ОтветственноеЛицо,
|		Б.ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента
|	
|	ИМЕЮЩИЕ
|		СУММА(Б.Приход) > 0 И
|		СУММА(Б.Расход) > 0 
|	
|	УПОРЯДОЧИТЬ ПО
|		Признак УБЫВ ,Б.ДоговорКонтрагента.Владелец.Наименование";

	Запрос.УстановитьПараметр("КонДата", НачалоДня(КонецДня(КонДата)+1));
	

	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	

	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаДетали = Результат.Выбрать();

	Пока ВыборкаДетали.Следующий() Цикл
		Если ВыборкаДетали.Признак>0 Тогда
			ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("ДеталиПризнак");
		Иначе	
			ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
		КонецЕсли;	
		Если Мин(ВыборкаДетали.ДолгФирме,ВыборкаДетали.ДолгКлиенту)>1000 Тогда
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
		ОбластьДетальныхЗаписей.Параметры.СуммаДляЗачета= Мин(ВыборкаДетали.ДолгФирме,ВыборкаДетали.ДолгКлиенту);
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
		КонецЕсли;
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);

	//долг не привязан к заказу (на пустой аналитике)

    ТабДок=ЭлементыФормы.ПолеТабличногоДокумента1;	
	Макет = ВнешняяОбработкаОбъект.ПолучитьМакет("Макет");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК ДоговорКонтрагентаВладелец,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо ОтветственноеЛицо,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|		&КонДата,
	|		(ДоговорКонтрагента.ВидДоговора = &СПокупателем
	|		    ИЛИ ДоговорКонтрагента.ВидДоговора = &СПоставщиком)
	|		    И ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоЗаказам
	|		    И Сделка = &Неопределено) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец.Наименование";

	
	Запрос.УстановитьПараметр("Неопределено", Неопределено);
	Запрос.УстановитьПараметр("КонДата", НачалоДня(КонецДня(КонДата)+1));
	Запрос.УстановитьПараметр("ПоЗаказам", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	Запрос.УстановитьПараметр("СПокупателем", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("СПоставщиком", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);


	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаДетали = Результат.Выбрать();

	Пока ВыборкаДетали.Следующий() Цикл
		Если  ВыборкаДетали.СуммаУпрОстаток>1000 ИЛИ ВыборкаДетали.СуммаУпрОстаток<-1000 Тогда
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
		КонецЕсли;
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);

	ТабДок=ЭлементыФормы.ПолеТабличногоДокумента2;
	
	Макет = ПолучитьМакет("Отчет1");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|		&КонДата,
	|		(ДоговорКонтрагента.ВидДоговора = &СПоставщиком
	|		    ИЛИ ДоговорКонтрагента.ВидДоговора = &СПокупателем)
	|		    И ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоЗаказам) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаказПоставщику.Ссылка КАК Заказ
	|		ИЗ
	|			Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ГДЕ
	|			ЗаказПоставщику.СуммаДокумента = 0
	|			И ЗаказПоставщику.Дата МЕЖДУ &НачДата И &КонДата
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ЗаказПокупателя.Ссылка
	|		ИЗ
	|			Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ГДЕ
	|			ЗаказПокупателя.СуммаДокумента = 0
	|			И ЗаказПокупателя.Дата МЕЖДУ &НачДата И &КонДата) КАК ПустыеЗаказы
	|		ПО ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ПустыеЗаказы.Заказ";

	
	Запрос.УстановитьПараметр("НачДата", Дата('20070101'));
	Запрос.УстановитьПараметр("КонДата", НачалоДня(КонецДня(КонДата)+1));
	Запрос.УстановитьПараметр("ПоЗаказам", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	Запрос.УстановитьПараметр("СПокупателем", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("СПоставщиком", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);


	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаДетали = Результат.Выбрать();

	Пока ВыборкаДетали.Следующий() Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);

	
	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ
КонецПроцедуры

Процедура ПриОткрытии()
	Если ДеньНедели(ТекущаяДата())<>1 Тогда
		КонДата=НачалоДня(ТекущаяДата()- 2*86400);
	Иначе
		КонДата=НачалоДня(ТекущаяДата()- 4*86400);
	КонецЕсли;
КонецПроцедуры

Процедура Сформировать() Экспорт
ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
Отчет(ТабДок);
	
КонецПроцедуры
