Перем ТаблицаЗаказов;
Перем мЖирныйШрифт, мКурсивШрифт, мЖирныйКурсивШрифт;

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ОбновитьСтраницуФормированияЗаданий();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ОбновитьСтраницуФормированияЗаданий();
	
КонецПроцедуры

Процедура ОбновитьСтраницуФормированияЗаданий()
	
	ОбновитьСписокРаспоряженийНаДоставку();
	
КонецПроцедуры

//Определяет "точки" заказов в таблице формы.
//По принципу один (Контрагент+ Адрес) = Точка доставки
Процедура ОпределитьТочкиЗаказов();
	
	
	
КонецПроцедуры

Процедура ОбновитьСписокРаспоряженийНаДоставку() 
	
	КЧ153 = Новый КвалификаторыЧисла(15,3);
	КЧ186 = Новый КвалификаторыЧисла(18,6);
	
	//ВесОбъемРаспоряженийПоДатам = Новый ТаблицаЗначений;
	//ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	//ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Вес",  Новый ОписаниеТипов("Число" ,КЧ153));
	//ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число" ,КЧ153));
	//ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число" ,КЧ186));
	//ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	КоллекцияРаспоряжений = РаспоряженияНаДоставку.Строки;
	ВесОбъем = Новый Структура;
	
	
	ВесОбъем.Вставить("ИтогоВес", 0);
	ВесОбъем.Вставить("ИтогоОбъем",0);
	КоллекцияРаспоряжений.Очистить();
	ПланируемыеЗаданияНаПеревозку.Строки.Очистить();
	//	ТекстЗапроса = ТекстЗапросаНаДоставку();
	
	//Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут.НомерЗоны КАК МаршрутНомерЗоны,
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут.НомерВЗоне КАК МаршрутНомерВЗоне,
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут КАК Маршрут,
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Контрагент,
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.ЗаказПокупателя КАК ЗаказПокупателя,
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Статус КАК Статус,
	|	СУММА(РаспределениеЗаказовПоМаршрутаСрезПоследних.Количество) КАК Количество,
	|	СУММА(РаспределениеЗаказовПоМаршрутаСрезПоследних.КолКамеры) КАК КолКамеры,
	|	СУММА(РаспределениеЗаказовПоМаршрутаСрезПоследних.Кубатура) КАК Кубатура,
	|	СУММА(РаспределениеЗаказовПоМаршрутаСрезПоследних.Вес) КАК Вес,
	|	СУММА(РаспределениеЗаказовПоМаршрутаСрезПоследних.Объем) КАК Объем,
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Город,
	|	НовМаршрутыГорода.Расстояние КАК Расстояние, 
	|	0 КАК НомерТочки, 
	|	ВЫРАЗИТЬ(РаспределениеЗаказовПоМаршрутаСрезПоследних.ПредставлениеАдреса КАК СТРОКА(200)) КАК ПредставлениеАдреса
	|ИЗ
	|	РегистрСведений.РаспределениеЗаказовПоМаршрута.СрезПоследних КАК РаспределениеЗаказовПоМаршрутаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НовМаршруты.Города КАК НовМаршрутыГорода
	|		ПО РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут = НовМаршрутыГорода.Ссылка
	|			И РаспределениеЗаказовПоМаршрутаСрезПоследних.Город = НовМаршрутыГорода.Город
	|//Где
	|//Условие1
	|//Условие2
	|//Условие3
	//|//Условие4
	//|//Условие5
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Статус,
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.ЗаказПокупателя,
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Контрагент,
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут,
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут.НомерВЗоне,
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут.НомерЗоны,
	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Город,
	|	НовМаршрутыГорода.Расстояние,
	|	ВЫРАЗИТЬ(РаспределениеЗаказовПоМаршрутаСрезПоследних.ПредставлениеАдреса КАК СТРОКА(200))
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутНомерЗоны,
	|	МаршрутНомерВЗоне,
	|	Расстояние,
	|   ПредставлениеАдреса,Объем УБЫВ
	|ИТОГИ ПО
	|	МаршрутНомерЗоны,
	|	Маршрут,
	|	Статус";
	

	
	Если Зона <> 0 
		Или ЗначениеЗаполнено(Маршрут)
		Или ЗначениеЗаполнено(ДатаЗаказов) Тогда 
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//Где","Где");
		
	КонецЕсли;
	
	ДополниениеУсловия = "";
	
	Если Зона <> 0 Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//Условие1","РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут.НомерЗоны = &НомерЗоны");
		Запрос.УстановитьПараметр("НомерЗоны",Зона);
		ДополниениеУсловия = " И ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Маршрут)  Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//Условие2",ДополниениеУсловия + "РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут = &Маршрут");
		Запрос.УстановитьПараметр("Маршрут",Маршрут);
		ДополниениеУсловия = " И ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаЗаказов)  Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//Условие3",ДополниениеУсловия + "РаспределениеЗаказовПоМаршрутаСрезПоследних.ПлановаяДатаОтправки <= &ПлановаяДатаОтправки");
		Запрос.УстановитьПараметр("ПлановаяДатаОтправки",ДатаЗаказов);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗаказов = РезультатЗапроса.Выгрузить();
	
	ВыборкаМаршрутНомерЗоны = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	
	Пока ВыборкаМаршрутНомерЗоны.Следующий() Цикл
		// Вставить обработку выборки ВыборкаМаршрутНомерЗоны
		
		ВеткаМаршрутНомерЗоны = РаспоряженияНаДоставку.Строки.Добавить();
		ВеткаМаршрутНомерЗоны.ЗонаМаршрутСтатус = ВыборкаМаршрутНомерЗоны.МаршрутНомерЗоны;
		ЗаполнитьЗначенияСвойств(ВеткаМаршрутНомерЗоны,ВыборкаМаршрутНомерЗоны);
		
		ВыборкаМаршрут = ВыборкаМаршрутНомерЗоны.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаМаршрут.Следующий() Цикл
			// Вставить обработку выборки ВыборкаМаршрут
			
			ВеткаМаршрут = ВеткаМаршрутНомерЗоны.Строки.Добавить();
			
			ВеткаМаршрут.ЗонаМаршрутСтатус = ВыборкаМаршрут.Маршрут;
			ЗаполнитьЗначенияСвойств(ВеткаМаршрут,ВыборкаМаршрут);
			
			ВыборкаСтатус = ВыборкаМаршрут.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			НомерТочки = 0;
			
			Пока ВыборкаСтатус.Следующий() Цикл
				// Вставить обработку выборки ВыборкаСтатус
				ВеткаСтатус = ВеткаМаршрут.Строки.Добавить();
				ВеткаСтатус.ЗонаМаршрутСтатус = ВыборкаСтатус.Статус;
				ЗаполнитьЗначенияСвойств(ВеткаСтатус,ВыборкаСтатус);
				
				ВыборкаДетальныеЗаписи = ВыборкаСтатус.Выбрать();
				
				СтрокаКонтрагентАдрес = "";
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ТекущийСтрокаКонтрагентАдрес =  Строка(ВыборкаДетальныеЗаписи.Контрагент.Код) + ВыборкаДетальныеЗаписи.ПредставлениеАдреса;
					
					ВеткаДетали = ВеткаСтатус.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(ВеткаДетали,ВыборкаДетальныеЗаписи);
					
					Если ТекущийСтрокаКонтрагентАдрес <> СтрокаКонтрагентАдрес Тогда 
						НомерТочки = НомерТочки + 1;
					КонецЕсли;	
					ВеткаДетали.НомерТочки = НомерТочки;
					
					СтрокаКонтрагентАдрес = ТекущийСтрокаКонтрагентАдрес;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ОпределитьТочкиЗаказов();
	
КонецПроцедуры

Функция ТекстЗапросаНаДоставку()
	
	//	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//// Данный фрагмент построен конструктором.
	//// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут.НомерЗоны КАК МаршрутНомерЗоны,
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут.НомерВЗоне КАК МаршрутНомерВЗоне,
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут КАК Маршрут,
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Контрагент,
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.ЗаказПокупателя КАК ЗаказПокупателя,
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Номенклатура КАК Номенклатура,
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Статус КАК Статус,
	//	|	СУММА(РаспределениеЗаказовПоМаршрутаСрезПоследних.Количество) КАК Количество,
	//	|	СУММА(РаспределениеЗаказовПоМаршрутаСрезПоследних.КолКамеры) КАК КолКамеры,
	//	|	СУММА(РаспределениеЗаказовПоМаршрутаСрезПоследних.Кубатура) КАК Кубатура,
	//	|	СУММА(РаспределениеЗаказовПоМаршрутаСрезПоследних.Вес) КАК Вес,
	//	|	СУММА(РаспределениеЗаказовПоМаршрутаСрезПоследних.Объем) КАК Объем
	//	|ИЗ
	//	|	РегистрСведений.РаспределениеЗаказовПоМаршрута.СрезПоследних КАК РаспределениеЗаказовПоМаршрутаСрезПоследних
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Статус,
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.ЗаказПокупателя,
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Контрагент,
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут,
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут.НомерВЗоне,
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Маршрут.НомерЗоны,
	//	|	РаспределениеЗаказовПоМаршрутаСрезПоследних.Номенклатура
	//	|ИТОГИ ПО
	//	|	МаршрутНомерЗоны,
	//	|	Маршрут,
	//	|	Статус";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаМаршрутНомерЗоны = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//Пока ВыборкаМаршрутНомерЗоны.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаМаршрутНомерЗоны
	//	
	//	ВеткаМаршрутНомерЗоны = РаспоряженияНаДоставку.Строки.Добавить();
	//	ВеткаМаршрутНомерЗоны.Зона = ВыборкаМаршрутНомерЗоны.НомерЗоны;
	//	
	//	ВыборкаМаршрут = ВыборкаМаршрутНомерЗоны.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//	Пока ВыборкаМаршрут.Следующий() Цикл
	//		// Вставить обработку выборки ВыборкаМаршрут
	//
	//		ВыборкаСтатус = ВыборкаМаршрут.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//		Пока ВыборкаСтатус.Следующий() Цикл
	//			// Вставить обработку выборки ВыборкаСтатус
	//
	//			ВыборкаДетальныеЗаписи = ВыборкаСтатус.Выбрать();
	//
	//			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//				// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//			КонецЦикла;
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЦикла;
	//
	////}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
	//Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьПоТипамАвтомобилейНажатие(Элемент)
	
	КЧ153 = Новый КвалификаторыЧисла(15,3);
	КЧ186 = Новый КвалификаторыЧисла(18,6);
	
	ТаблицаРаспределенияПоТипамАвтомобилей = Новый ТаблицаЗначений;
	ТаблицаРаспределенияПоТипамАвтомобилей.Колонки.Добавить("Маршрут",Новый ОписаниеТипов("СправочникСсылка.НовМаршруты"));
	ТаблицаРаспределенияПоТипамАвтомобилей.Колонки.Добавить("ТипТранспорта", Новый ОписаниеТипов("СправочникСсылка.ТипыТранспорта"));
	ТаблицаРаспределенияПоТипамАвтомобилей.Колонки.Добавить("ТипАвто", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(30)));
	ТаблицаРаспределенияПоТипамАвтомобилей.Колонки.Добавить("Адрес" ,Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(90)));
	ТаблицаРаспределенияПоТипамАвтомобилей.Колонки.Добавить("Вес"  ,Новый ОписаниеТипов("Число" ,КЧ153));
	ТаблицаРаспределенияПоТипамАвтомобилей.Колонки.Добавить("Объем" ,Новый ОписаниеТипов("Число" ,КЧ186));
	ТаблицаРаспределенияПоТипамАвтомобилей.Колонки.Добавить("ЗаказПокупателя" ,Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	
	ТаблицаРаспределенияПоТипамАвтомобилей.Колонки.Добавить("НомерРейса" ,Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(2)));
	
	
	СтруктураКритериев = Новый Структура("ЗаказПокупателя", Null);
	СтруктураСложныхКритериев = Новый Структура("ЗаказПокупателя", ВидСравнения.НеРавно);
	
	ТаблицаЗаказМаршрут = ПолучитьТаблицуЗаказовИМаршрутов(ТаблицаЗаказов);
	
	ТаблицаМаршрутов = ТаблицаЗаказМаршрут.Скопировать(,"Маршрут");
	ТаблицаМаршрутов.Свернуть("Маршрут");
	
	Для Каждого ТекМаршрут Из ТаблицаМаршрутов Цикл 
		
		МаршуртыДляРаспределения =  ТаблицаЗаказМаршрут.НайтиСтроки(Новый Структура("Маршрут",ТекМаршрут.Маршрут));
		
		ЗаполнитьТаблицуРаспределения(ТекМаршрут,МаршуртыДляРаспределения,ТаблицаРаспределенияПоТипамАвтомобилей);
		
	КонецЦикла;
	
	ЗаполнитьДеревоПланируемыеЗаданияНаПеревозку(ТаблицаРаспределенияПоТипамАвтомобилей);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоПланируемыеЗаданияНаПеревозку(ТаблицаРаспределенияПоТипамАвтомобилей)
	
	ПланируемыеЗаданияНаПеревозку.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ * 
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ &ТабЗнач КАК ТабЗнач
	|;
	|выбрать * Из ВременнаяТаблица
	|ИТОГИ
	|	СУММА(Вес),СУММА(Объем)
	|ПО
	|	Маршрут
	|	,ТипТранспорта
	|	,ТипАвто
	//|	,Адрес
	|";
	
	Запрос.УстановитьПараметр("ТабЗнач", ТаблицаРаспределенияПоТипамАвтомобилей);
	ПланируемыеЗаданияНаПеревозку = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.ВертикальныеЛинии   = Истина;
	ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.ГоризонтальныеЛинии = Истина;
	
	ПланируемыеЗаданияНаПеревозку.Колонки.Вставить(0,"Отметка", Новый ОписаниеТипов("Число"));
	ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.СоздатьКолонки();
	
	ТекКолонка = ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.Колонки["Отметка"];
	ТекКолонка.ДанныеФлажка = ТекКолонка.Данные;
	ТекКолонка.Данные = "";
	ТекКолонка.УстановитьЭлементУправления(Тип("Флажок"));
	ТекКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	ТекКолонка.ТриСостоянияФлажка = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРаспределения(ТекМаршрут, МаршуртыДляРаспределения, ТаблицаРаспределенияПоТипамАвтомобилей)
	
	ТипыАвтомобилейМаршрута = ТекМаршрут.Маршрут.ТипыАвтомобилей.Выгрузить();
	
	Для Каждого Автомобиль Из ТипыАвтомобилейМаршрута Цикл 
		
		Для КоличествоРейсов = 1 По Автомобиль.КоличествоРейсовВДень Цикл
			
			ОстатокОбъем = Автомобиль.ТипТранспорта.Объем;
			ОстатокВес   = Автомобиль.ТипТранспорта.Вес * 1000;
			
			Индекс = 0;
			
			Для Каждого ТочкаМаршрута из МаршуртыДляРаспределения Цикл 
				
				Если ОстатокОбъем >=  ТочкаМаршрута.Объем И 
					ОстатокВес >=  ТочкаМаршрута.Вес Тогда 
					
					Если ТаблицаРаспределенияПоТипамАвтомобилей.Найти(ТочкаМаршрута.ЗаказПокупателя ,"ЗаказПокупателя") <> Неопределено Тогда 
						Продолжить;
					КонецЕсли;	
					
					НовСтрТаблицаРаспределенияПоТипамАвтомобилей = ТаблицаРаспределенияПоТипамАвтомобилей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрТаблицаРаспределенияПоТипамАвтомобилей,ТочкаМаршрута);
					НовСтрТаблицаРаспределенияПоТипамАвтомобилей.Объем         = ТочкаМаршрута.Объем;
					НовСтрТаблицаРаспределенияПоТипамАвтомобилей.Вес           = ТочкаМаршрута.Вес; 
					НовСтрТаблицаРаспределенияПоТипамАвтомобилей.ТипАвто       = Строка(Автомобиль.ТипТранспорта)  +" №" + Строка(КоличествоРейсов) ;
					НовСтрТаблицаРаспределенияПоТипамАвтомобилей.Адрес         = ТочкаМаршрута.Город;
					НовСтрТаблицаРаспределенияПоТипамАвтомобилей.ТипТранспорта = Автомобиль.ТипТранспорта;
					НовСтрТаблицаРаспределенияПоТипамАвтомобилей.НомерРейса    = КоличествоРейсов; 
					
					ОстатокОбъем = ОстатокОбъем - ТочкаМаршрута.Объем;
					ОстатокВес   = ОстатокВес   - ТочкаМаршрута.Вес; 
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьТаблицуЗаказовИМаршрутов(ТаблицаЗаказов)
	
	ТаблицаЗаказМаршрут = ТаблицаЗаказов.СкопироватьКолонки();
	
	СтатусОжидает = Перечисления.ВидыСтатусовДоставкиЗаказовПокупателей.Ожидает;
	
	Для Каждого СтрТаблицаЗаказов Из ТаблицаЗаказов Цикл 
		Если СтрТаблицаЗаказов.Статус = СтатусОжидает И
			СтрТаблицаЗаказов.ЗаказПокупателя <> Null Тогда 
			
			НовСтрТаблицаЗаказМаршрут = ТаблицаЗаказМаршрут.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрТаблицаЗаказМаршрут,СтрТаблицаЗаказов);
			
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ТаблицаЗаказМаршрут;
	
КонецФункции

// Отбирает из переданной таблицы строки по заданным критериям.
//
// Параметры:
//  Источник - ТаблицаЗначений, РезультатЗапроса, ОбластьЯчеекТабличногоДокумента. Таблица-источник.
//  СтруктураКритериев - Структура. Названия отборов и значения, по которым нужно отобрать строки.
//  СтруктураСложныхКритериев - Структура. Если свойство передано, то значение содержит вид сравнения.
//
// Возвращаемое значение:
//  РезультатЗапроса - таблица с нужными строками.
//
Функция ОтобратьСтрокиПоКритериям(Источник, СтруктураКритериев, СтруктураСложныхКритериев = Неопределено) Экспорт
	
	Перем ВидСравненияСложный;
	
	Если СтруктураСложныхКритериев = Неопределено Тогда
		СтруктураСложныхКритериев = Новый Структура;
	КонецЕсли;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Источник);
	
	Для Каждого Критерий Из СтруктураКритериев Цикл
		НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(Критерий.Ключ);
		
		СтруктураСложныхКритериев.Свойство(Критерий.Ключ, ВидСравненияСложный);
		
		Если ВидСравненияСложный = Неопределено Тогда
			НовыйОтбор.Установить(Критерий.Значение);
		Иначе
			НовыйОтбор.Использование = Истина;
			НовыйОтбор.ВидСравнения = ВидСравненияСложный;
			НовыйОтбор.Значение = Критерий.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПостроительЗапроса.Результат;
	
КонецФункции // ОтобратьСтрокиПоКритериям()

Процедура ПланируемыеЗаданияНаПеревозкуПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ЗаказПокупателя = Null Тогда 
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;	
	
	Если ДанныеСтроки.ЗаказПокупателя = NuLL  
		И ДанныеСтроки.ТипАвто <> NuLL
		И ДанныеСтроки.ТипТранспорта <> NuLL  Тогда 
		Если СуммаСтрок(ДанныеСтроки,"Вес") > ДанныеСтроки.ТипТранспорта.Вес * 1000 или 
			СуммаСтрок(ДанныеСтроки,"Объем") > ДанныеСтроки.ТипТранспорта.Объем Тогда 
			ОформлениеСтроки.ЦветФона = WebЦвета.Коралловый;
			//ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.ТекущаяСтрока[ТекущаяСтрокаДерева.Родитель]
			 //ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.ОформлениеСтроки(
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

Процедура ОтметитьПодчиненные(ТекущаяСтрокаДерева)
	
	Для каждого СтрокаДерева из ТекущаяСтрокаДерева.Строки Цикл
		СтрокаДерева.Отметка=ТекущаяСтрокаДерева.Отметка;
		ОтметитьПодчиненные(СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтметитьРодителей(ТекущаяСтрокаДерева)
	
	ТекущийРодитель=ТекущаяСтрокаДерева.Родитель;
	Если ТекущийРодитель=Неопределено Тогда 
		Возврат 
	КонецЕсли;
	Соотв=Новый Соответствие; 
	Для Каждого СтрокаДерева из ТекущийРодитель.Строки Цикл
		Соотв.Вставить(Строка(СтрокаДерева.Отметка),Истина); 
		Если Соотв.Количество()>1 Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ТекущийРодитель.Отметка=?(Соотв.Количество()>1,2,СтрокаДерева.Отметка);
	ОтметитьРодителей(ТекущийРодитель);
	
КонецПроцедуры

Процедура ПланируемыеЗаданияНаПеревозкуПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущаяСтрокаДерева = ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.ТекущиеДанные;
	
	Если ТекущаяСтрокаДерева=Неопределено Тогда
		Возврат 
	КонецЕсли;
	
	Если ТекущаяСтрокаДерева.Отметка = 2 Тогда
		ТекущаяСтрокаДерева.Отметка = 0
	КонецЕсли;
	
	ОтметитьПодчиненные(ТекущаяСтрокаДерева);
	ОтметитьРодителей(ТекущаяСтрокаДерева);
	
    СчитатьСуммыДереваЗначений(ПланируемыеЗаданияНаПеревозку.Строки);

	ВыделитьЦветомСтрокуДерева(ТекущаяСтрокаДерева);
	
	//Если ТекущаяСтрокаДерева.Строки.Количество() = 0 Тогда 
	//	Если СуммаСтрок(ТекущаяСтрокаДерева.Родитель,"Вес") > ТекущаяСтрокаДерева.ТипТранспорта.Вес * 1000 или 
	//		СуммаСтрок(ТекущаяСтрокаДерева.Родитель,"Объем") > ТекущаяСтрокаДерева.ТипТранспорта.Объем Тогда 
	//		ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.ОформлениеСтроки(ТекущаяСтрокаДерева.Родитель).ЦветФона = WebЦвета.Коралловый;
	//		//ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.ТекущаяСтрока[ТекущаяСтрокаДерева.Родитель]
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ЗаданияНаОтгрузкуПриПолученииДанных(Элемент, ОформленияСтрок)
	
 	НомерСтроки = 0;
	
	Для каждого ОформлениеСтроки из ОформленияСтрок цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		//ыДанныеСтроки.НомерСтроки = НомерСтроки + 1; 
		инд= 3;
		Если Не ЗначениеНеЗаполнено(ДанныеСтроки.Документ) Тогда
			ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
			Если ДанныеСтроки.Документ.пометкаУдаления Тогда
				инд = 1;
			ИначеЕсли ДанныеСтроки.Документ.Проведен Тогда
				инд = 0;
			ИначеЕсли НЕ ДанныеСтроки.Документ.Проведен Тогда
				инд = 2;
			КонецЕсли;	
		КонецЕсли;	
		ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = инд;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено) Экспорт
	
	Если Таблица = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
		Для Каждого Колонка Из Дерево.Колонки Цикл
			Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.ЗаказПокупателя <> Null  
			И СтрокаДерева.Отметка <> 0 Тогда 
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);
		КонецЕсли;
		ВыгрузитьДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции


Функция ПолучитьКонтактнуюИнформацию(об1, тип="Телефон")
	
	Если ТипЗнч(Об1)=Тип("Строка") Тогда
		Возврат "";
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Вид
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип";
	
	Запрос.УстановитьПараметр("Объект", Об1);
	Если тип="Телефон" Тогда
		Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
		Тип1="Тел: ";
	ИначеЕсли тип="Другое" Тогда
		Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Другое);
		Тип1="Доп.инфо: ";
	ИначеЕсли найти(тип,"доставки")>0 Тогда
		Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00021") );    //+++ 30.04.2015
		Тип1="адрес доставки: ";
	ИначеЕсли найти(тип,"Факт")>0 Тогда
		Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		Тип1="Факт.адрес: ";
	ИначеЕсли найти(тип,"Юр")>0 Тогда
		Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Тип1="Юр.адрес: ";
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	рез = "";
	Если Выборка.Следующий() Тогда
		Если Строка(Выборка.Вид) = "Автомобиль" Тогда
			Тип1="Автомобиль: ";
		КонецЕсли;	
		рез = рез + Тип1 +выборка.Представление;
	КонецЕсли;
	
	ПОКА Выборка.Следующий() ЦИКЛ
		рез = рез + ", "+выборка.Представление;
	КонецЦикла;
	
	Возврат рез;
	
КонецФункции

Функция получитьТелефоны(ВодительСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип";
	Запрос.УстановитьПараметр("Объект", ВодительСсылка);
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	рез = "";
	Пока Выборка.Следующий() Цикл
		Если СокрЛП(Выборка.Представление)<>"" Тогда
			рез = рез+СокрЛП(Выборка.Представление)+"; ";
		КонецЕсли;	
	КонецЦикла;
	
	Возврат рез;
	
КонецФункции

Процедура ОбновлениеОтображения()
	
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "СозданныеДокументыЗаданияНаОтгрузку" Тогда
			
			СтраницаПанели.Заголовок = "Созданные документы задания на отгрузку (" + ЗаданияНаОтгрузку.Количество() + " )";
			
		КонецЕсли;

	КонецЦикла;
	
	НомерСтроки = 0;
	//Для Каждого Стр Из ЗаданияНаОтгрузку Цикл 
	//	  Стр
	//КонецЦикла;	
	 ///ВыделитьЦветомСтрокуДерева();
	
КонецПроцедуры

Процедура СчитатьСуммыДереваЗначений(СтрокиДереваЗначений) Экспорт
 
   Для Каждого СтрокаДерева Из СтрокиДереваЗначений Цикл

        // Если мы в строке, у неё нет итогов, пропустим
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
            Продолжить;
        КонецЕсли;

		СтрокаДерева.Вес   = СуммаСтрок(СтрокаДерева, "Вес");
    	СтрокаДерева.Объем = СуммаСтрок(СтрокаДерева, "Объем");
		
        СчитатьСуммыДереваЗначений(СтрокаДерева.Строки);

		//ВыделитьЦветомСтрокуДерева();
		
    КонецЦикла;
   
КонецПроцедуры

Процедура ВыделитьЦветомСтрокуДерева(ТекущаяСтрокаДерева)
	//Если ТекущаяСтрокаДерева.Строки.Количество() = 0 Тогда 
	//	Если СуммаСтрок(ТекущаяСтрокаДерева.Родитель,"Вес") > ТекущаяСтрокаДерева.ТипТранспорта.Вес * 1000 или 
	//		СуммаСтрок(ТекущаяСтрокаДерева.Родитель,"Объем") > ТекущаяСтрокаДерева.ТипТранспорта.Объем Тогда 
	//		ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.ОформлениеСтроки(ТекущаяСтрокаДерева.Родитель).ЦветФона = WebЦвета.Коралловый;
	//		//ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.ТекущаяСтрока[ТекущаяСтрокаДерева.Родитель]
	//		 //ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.ОформлениеСтроки(
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

Функция СуммаСтрок(СтрокаДерева, Поле)
	
	Сумма = 0;
	Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
		Если ДочерняяСтрока.Строки.Количество()=0 Тогда
			
			//ВыделитьЦветомСтрокуДерева(ДочерняяСтрока.ЗаказПокупателя,ДочерняяСтрока.Отметка  = 1);
			
			Если ДочерняяСтрока.Отметка  = 0 Тогда 
				Продолжить;
			КонецЕсли;	
			
			Сумма = Сумма + ДочерняяСтрока[Поле];
		Иначе
			Сумма = Сумма + СуммаСтрок(ДочерняяСтрока, Поле);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

Процедура ПланируемыеЗаданияНаПеревозкуПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда 
		ПараметрыПеретаскивания = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
		
	Если ПараметрыПеретаскивания.Значение.Город <> Строка.Адрес Тогда 
		ПараметрыПеретаскивания = ДействиеПеретаскивания.Отмена;
		Предупреждение("Город заказа и маршрута не совпадает");
		//Возврат;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПланируемыеЗаданияНаПеревозкуПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитДерево = ПланируемыеЗаданияНаПеревозку;
	
	Приемник = Строка;
	
	Источник = ПараметрыПеретаскивания.Значение;
	
	СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник);
	
	ПланируемыеЗаданияНаПеревозкуПриИзмененииФлажка(Элемент,Колонка);

КонецПроцедуры

Процедура СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)
	Если Приемник = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	Если Приемник.Строки.Количество() <> 0 Тогда 
		//Тут надо спозиционироваться на нужной строке,а пока просто ничего не делаем
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Приемник.Родитель.Строки.Добавить();
	НоваяСтрока.Адрес = Источник.Город;
	НоваяСтрока.Вес =  Источник.Вес;
	НоваяСтрока.ЗаказПокупателя = Источник.ЗаказПокупателя;
	НоваяСтрока.Маршрут = Приемник.Маршрут;
	НоваяСтрока.НомерРейса = Приемник.НомерРейса;
	НоваяСтрока.Объем = Источник.Объем;
	НоваяСтрока.Отметка = 1;
	НоваяСтрока.ТипАвто = Приемник.ТипАвто;
	НоваяСтрока.ТипТранспорта = Приемник.ТипТранспорта;

КонецПроцедуры

Процедура РаспоряженияНаДоставкуПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ТЗПланируемыеЗаданияНаПеревозку = ВыгрузитьДеревоЗначенийВТаблицуЗначений(ПланируемыеЗаданияНаПеревозку);
	
	Если ТЗПланируемыеЗаданияНаПеревозку.Найти(ДанныеСтроки.ЗаказПокупателя) <> Неопределено Тогда 
		
		ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЗеленый;
		
	ИначеЕсли ДанныеСтроки.ЗаказПокупателя <> Документы.ЗаказПокупателя.ПустаяСсылка() Тогда
		
		ОформлениеСтроки.ЦветФона = Новый Цвет;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыСкрыть(Кнопка)
	
	//ЭлементыФормы.РаспоряженияНаДоставку.Видимость = Не ЭлементыФормы.РаспоряженияНаДоставку.Видимость;
	//ЭлементыФормы.РаспоряженияНаДоставку.Свертка = РежимСверткиЭлементаУправления.Лево;
	
	//ЭлементыФормы.РаспоряженияНаДоставку.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельОстаткиТоваровНаСкладах, ГраницаЭлементаУправления.Низ);
	//ЭлементыФормы.РазделительПанелей.УстановитьПривязку(ГраницаЭлементаУправления.лево, ЭлементыФормы.ОсновнаяПанель, ГраницаЭлементаУправления.Лево);
	//ЭлементыФормы.РаспоряженияНаДоставку.УстановитьПривязку(ГраницаЭлементаУправления.лево, ЭлементыФормы.РазделительПанелей, ГраницаЭлементаУправления.Лево);
	//
	//ЭлементыФормы.РазделительПанелей.Лево = Цел(ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.Ширина /5);
	ЭлементыФормы.РаспоряженияНаДоставку.Свертка = РежимСверткиЭлементаУправления.Лево;
	ЭлементыФормы.РазделительПанелей.Свертка = РежимСверткиЭлементаУправления.Лево;

КонецПроцедуры


//#Область ЗаданияНаОтгрузку

Процедура ЗаданияНаОтгрузкуАвтомобильНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//ТипАвтомобиля = ЭлементыФормы.ЗаданияНаОтгрузку.ТекущаяСтрока
	
	//СтандартнаяОбработка = Ложь;
	
	///ав = Справочники.ФизическиеЛица.НайтиПоНаименованию("Водители");
	
	//ФормаВыбора = Справочники.ТипАвтомобиля.ПолучитьФормуВыбора(,Элемент,);
	//ФормаВыбора.ЭлементыФормы.СправочникСписок.РодительВерхнегоУровня = Водители;
	//Если Элемент.Значение.Родитель = Водители Тогда
	//	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Элемент.Значение;
	//КонецЕсли;
	//ФормаВыбора.Открыть();

КонецПроцедуры

Процедура СформироватьЗаданияНажатие(Элемент)
	
	ТаблицаПланируемыеЗаданияНаПеревозку = ВыгрузитьДеревоЗначенийВТаблицуЗначений(ПланируемыеЗаданияНаПеревозку);
	
	НазначенныеЗаказыАвтомобили = СформироватьТаблицуПоАвтомобилям(ТаблицаПланируемыеЗаданияНаПеревозку);
	
	Для Каждого СтрНазначенныеЗаказыАвтомобили Из НазначенныеЗаказыАвтомобили Цикл 
		
		НовыйЗаданиеНаОтгрузку = Документы.ЗаданиеНаОтгрузку.СоздатьДокумент();
		НовыйЗаданиеНаОтгрузку.Дата = ?(ЗначениеЗаполнено(ДатаЗаданий),ДатаЗаданий,ТекущаяДата());
		НовыйЗаданиеНаОтгрузку.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход;
		
		ТЧЗаказы = НовыйЗаданиеНаОтгрузку.ЗаказыПокупателей;
		Для Каждого СтрДетальнаяИнформация Из СтрНазначенныеЗаказыАвтомобили.ДетальнаяИнформация Цикл 
			
			НовСтрТЧЗаказы = ТЧЗаказы.Добавить();
			
			НовСтрТЧЗаказы.ЗаказПокупателя = СтрДетальнаяИнформация.ЗаказПокупателя;
			
		КонецЦикла;
		
		Попытка
			НовыйЗаданиеНаОтгрузку.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		НовСтрЗаданияНаОтгрузку = ЗаданияНаОтгрузку.Добавить();	
		НовСтрЗаданияНаОтгрузку.Документ = НовыйЗаданиеНаОтгрузку.Ссылка;
		//ИСПРАВИТЬ<<<
		//НовСтрЗаданияНаОтгрузку.ТипТранспорта = Справочники.ТипыТранспорта.НайтиПоНаименованию(СтрНазначенныеЗаказыАвтомобили.ТипТранспорта);
		//ИСПРАВИТЬ>>>
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаданияНаОтгрузкуВодительНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Водители = Справочники.ФизическиеЛица.НайтиПоНаименованию("Водители");
	
	ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.ЭлементыФормы.СправочникСписок.РодительВерхнегоУровня = Водители;
	Если Элемент.Значение.Родитель = Водители Тогда
		ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Элемент.Значение;
	КонецЕсли;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ЗаданияНаОтгрузкуВодительПриИзменении(Элемент)
	
	СтрВодитель = Элемент.Значение;
	ЗаданиеОбъект = ЭлементыФормы.ЗаданияНаОтгрузку.ТекущиеДанные.Документ.ПолучитьОбъект();
	
	Если Строка(Элемент.Значение)<>"" Тогда
		Водитель  = ФамилияИнициалыФизЛица(СтрВодитель);
		ТелефонВодителя = ПолучитьТелефоны(СтрВодитель);
		
		АвтомобильГосНомерАвтомобиля  = ПолучитьКонтактнуюИнформацию(СтрВодитель, "Другое");
		Если Найти(АвтомобильГосНомерАвтомобиля, "Автомобиль: ")>0 Тогда
			АвтомобильГосНомерАвтомобиля = стрЗаменить(АвтомобильГосНомерАвтомобиля, "Автомобиль: ","");
			i= найти(АвтомобильГосНомерАвтомобиля, " ");  //первое наименование...
			Если i>0 Тогда
				МаркаАвтомобиля 	 = Лев(АвтомобильГосНомерАвтомобиля, i-1);
				ГосНомерАвтомобиля = Прав(АвтомобильГосНомерАвтомобиля, стрДлина(АвтомобильГосНомерАвтомобиля) - i);
			КонецЕсли;
			//+++ определяем тип авто	
			Если МаркаАвтомобиля<>"" и ГосНомерАвтомобиля<>"" Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ТипАвтомобиля.Ссылка,
				|	ТипАвтомобиля.Объем,
				|	ТипАвтомобиля.Вес
				|ИЗ
				|	Справочник.ТипАвтомобиля КАК ТипАвтомобиля
				|ГДЕ
				|	ТипАвтомобиля.ПолноеНаименование ПОДОБНО (&Марка)
				|	И ТипАвтомобиля.ПолноеНаименование ПОДОБНО (&Номер)";
				Запрос.УстановитьПараметр("Марка", "%"+МаркаАвтомобиля+"%" );
				Запрос.УстановитьПараметр("Номер", "%"+ГосНомерАвтомобиля+"%" );
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				//Если Выборка.Следующий() Тогда
				//	ТипАвтомобиля = выборка.ссылка;
				//	ВесМакс = выборка.Вес;
				//	ОбъемМакс = выборка.Объем;
				//	
				//	//Если ИнформацияПоПроезду.Количество()>0 Тогда
				//	//	ЗаполнитьОбъем();
				//	//КонецЕсли;
				//	
				//КонецЕсли;
			КонецЕсли;
			//+++)
			
		КонецЕсли;
		
		
		ЗаданиеОбъект.Водитель = Водитель;
		ЗаданиеОбъект.ТелефонВодителя = ТелефонВодителя;
		ЗаданиеОбъект.МаркаАвтомобиля = МаркаАвтомобиля;
		ЗаданиеОбъект.ГосНомерАвтомобиля = ГосНомерАвтомобиля;
		
		
		Попытка 
			ЗаданиеОбъект.Записать();
			//Сообщить("Водитель в документе изменен");
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТаблицуПоАвтомобилям(ТаблицаПланируемыеЗаданияНаПеревозку)
	
	ТаблицаПоАвтомобилямЗаказам = Новый ТаблицаЗначений;
	//ТаблицаПоАвтомобилямЗаказам.Колонки.Добавить("Автомобиль");
	ТаблицаПоАвтомобилямЗаказам.Колонки.Добавить("ТипТранспорта");
	ТаблицаПоАвтомобилямЗаказам.Колонки.Добавить("ДетальнаяИнформация");
	
	ТаблицаАвтомобилей = ТаблицаПланируемыеЗаданияНаПеревозку.Скопировать(,"ТипАвто");
	ТаблицаАвтомобилей.Свернуть("ТипАвто");
	
	СтруктураСложныхКритериев = Новый Структура;
	СтруктураСложныхКритериев.Вставить("ТипАвто", ВидСравнения.Равно);
	
	Для Каждого СтрТаблицаАвтомобилей Из ТаблицаАвтомобилей Цикл 
		ТипТранспорта = СтрТаблицаАвтомобилей.ТипАвто;
		ДетальнаяИнформация = ОтобратьСтрокиПоКритериям(ТаблицаПланируемыеЗаданияНаПеревозку, Новый Структура("ТипАвто", ТипТранспорта),СтруктураСложныхКритериев).Выгрузить();
		
		НовСтрТаблицаПоАвтомобилямЗаказам = ТаблицаПоАвтомобилямЗаказам.Добавить();
		НовСтрТаблицаПоАвтомобилямЗаказам.ТипТранспорта = ТипТранспорта;
		НовСтрТаблицаПоАвтомобилямЗаказам.ДетальнаяИнформация = ДетальнаяИнформация;
	КонецЦикла;	
	
	Возврат ТаблицаПоАвтомобилямЗаказам;
	
КонецФункции

Процедура Кнопка1Нажатие(Элемент)
	
КонецПроцедуры

Процедура НазначитьАвтомобилиНажатие(Элемент)
	
	Форма = ПолучитьФорму("ФормаВыбораАтомобилей");
	Форма.ВесТребуется   = ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.ТекущиеДанные.Вес;
	Форма.ОбъемТребуется = ЭлементыФормы.ПланируемыеЗаданияНаПеревозку.ТекущиеДанные.Объем;
	
	Форма.ОткрытьМодально();
	
КонецПроцедуры


//#КонецОбласти



мЖирныйШрифт = Новый Шрифт(,, Истина);
мКурсивШрифт = Новый Шрифт(,,, Истина);
мЖирныйКурсивШрифт = Новый Шрифт(,,Истина , Истина);