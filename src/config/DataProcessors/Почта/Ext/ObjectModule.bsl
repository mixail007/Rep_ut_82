
Перем мПоследняяДатаОбновленияРассмотренностиПисем Экспорт;

// Переменная содержит список доступных учетных для создания писем
Перем мДоступныеУчетныеЗаписи Экспорт;

// Переменная содержит структуру с данными о доступе пользователя к ученым записям
// и о предопределенных папках учетных записей
Перем мСтруктураДоступныхУчетныхЗаписей Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Входящие" для учетной записи
Перем мСоответствияГруппВходящие Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Исходящие" для учетной записи
Перем мСоответствияГруппИсходящие Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Удаленные" для учетной записи
Перем мСоответствияГруппУдаленные Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Черновики" для учетной записи
Перем мСоответствияГруппЧерновики Экспорт;

// Переменная содержит соответствие группы писем электронной почты
// и количества нерассмотренных писем в этой группе
Перем мСтатистикаРассмотренностиПисем Экспорт;

// Переменная содержит соответствие группы писем электронной почты
// и количества сохраненных писем в этой группе
Перем мСтатистикаСохраненныхПисем     Экспорт;

// Переменная содержит соответствие предмета классификации писем
// и количества нерассмотренных писем данного предмета
Перем мСтатистикаРассмотренностиПисемПоПредметам Экспорт;

// Признак отображения списка предметов электронных писем в форме
Перем мОтображатьСписокПредметов Экспорт;

// Процедура обновляет данные доступных учетных записей текущего пользователя
// а так же данные о предопределенных группах учетных записей.
//
Процедура ОбновитьДоступныеУчетныеЗаписи() Экспорт

	мСоответствияГруппИсходящие.Очистить();
	мСоответствияГруппВходящие.Очистить();
	мСоответствияГруппУдаленные.Очистить();
	мСоответствияГруппЧерновики.Очистить();
	
	мСтруктураДоступныхУчетныхЗаписей = ПолучитьДоступныеУчетныеЗаписи(глТекущийПользователь);
	
	мДоступныеУчетныеЗаписи = мСтруктураДоступныхУчетныхЗаписей.Чтение.Скопировать();
	
	мСоответствияГруппИсходящие = мСтруктураДоступныхУчетныхЗаписей.ГруппыИсходящие;
	мСоответствияГруппВходящие  = мСтруктураДоступныхУчетныхЗаписей.ГруппыВходящие;
	мСоответствияГруппУдаленные = мСтруктураДоступныхУчетныхЗаписей.ГруппыУдаленные;
	мСоответствияГруппЧерновики = мСтруктураДоступныхУчетныхЗаписей.ГруппыЧерновики;
	
КонецПроцедуры

// Процедура определяет статистику рассмотренности писем электронной почты
// для быстрого отображения их количества в дереве групп писем электронной почты
// и в списке предметов писем.
//
Процедура СобратьСтатистикуРассмотренностиПисем() Экспорт

	мСтатистикаРассмотренностиПисем.Очистить();
	мСтатистикаСохраненныхПисем.Очистить();
	мСтатистикаРассмотренностиПисемПоПредметам.Очистить();
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
	
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СписокУчетныхЗаписей", мДоступныеУчетныеЗаписи);
		Запрос.УстановитьПараметр("ТекущаяДата"         , ТекущаяДата());
		
		мПоследняяДатаОбновленияРассмотренностиПисем = ТекущаяДата();
		
		Если мОтображатьСписокПредметов Тогда
		
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПисьмаЭлектроннойПочтыОстатки.ГруппаУчетнойЗаписи                   КАК Группа,
			|	ПисьмаЭлектроннойПочтыОстатки.Предмет                               КАК Предмет,
			|	СУММА(ПисьмаЭлектроннойПочтыОстатки.КоличествоНеРассмотреноОстаток) КАК Количество,
			|	СУММА(0)                                                            КАК КоличествоЧерновики
			|ИЗ
			|	РегистрНакопления.ПисьмаЭлектроннойПочты.Остатки КАК ПисьмаЭлектроннойПочтыОстатки
			|
			|ГДЕ
			|	ПисьмаЭлектроннойПочтыОстатки.ГруппаУчетнойЗаписи.Владелец В(&СписокУчетныхЗаписей)
			|	И
			|	ПисьмаЭлектроннойПочтыОстатки.ГраницаПрочитанности < &ТекущаяДата
			|
			|СГРУППИРОВАТЬ ПО
			|	ПисьмаЭлектроннойПочтыОстатки.ГруппаУчетнойЗаписи, ПисьмаЭлектроннойПочтыОстатки.Предмет
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПисьмаЭлектроннойПочтыОстатки.ГруппаУчетнойЗаписи                   КАК Группа,
			|	ПисьмаЭлектроннойПочтыОстатки.Предмет                               КАК Предмет,
			|	СУММА(0)                                                            КАК Количество,
			|	СУММА(ПисьмаЭлектроннойПочтыОстатки.КоличествоЧерновикиОстаток)     КАК КоличествоЧерновики
			|ИЗ
			|	РегистрНакопления.ПисьмаЭлектроннойПочты.Остатки КАК ПисьмаЭлектроннойПочтыОстатки
			|
			|ГДЕ
			|	ПисьмаЭлектроннойПочтыОстатки.ГруппаУчетнойЗаписи.Владелец В(&СписокУчетныхЗаписей)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПисьмаЭлектроннойПочтыОстатки.ГруппаУчетнойЗаписи, ПисьмаЭлектроннойПочтыОстатки.Предмет
			|
			|ИТОГИ СУММА(Количество),СУММА(КоличествоЧерновики) ПО
			|	Группа
			|";
			
			ВыборкаГрупп = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Группа");
			Пока ВыборкаГрупп.Следующий() Цикл
				мСтатистикаРассмотренностиПисем.Вставить(ВыборкаГрупп.Группа, ВыборкаГрупп.Количество);
				мСтатистикаСохраненныхПисем.Вставить(ВыборкаГрупп.Группа, ВыборкаГрупп.КоличествоЧерновики);
				ВыборкаПредметов = ВыборкаГрупп.Выбрать();
				СоответствиеГруппаПредмет = Новый Соответствие;
				Пока ВыборкаПредметов.Следующий() Цикл
					СоответствиеГруппаПредмет.Вставить(ВыборкаПредметов.Предмет, ВыборкаПредметов.Количество);
				КонецЦикла; 
				Если СоответствиеГруппаПредмет.Количество() > 0 Тогда
					мСтатистикаРассмотренностиПисемПоПредметам.Вставить(ВыборкаГрупп.Группа, СоответствиеГруппаПредмет);
				КонецЕсли; 
			КонецЦикла;

		Иначе
		
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПисьмаЭлектроннойПочтыОстатки.ГруппаУчетнойЗаписи            КАК Группа,
			|	ПисьмаЭлектроннойПочтыОстатки.КоличествоНеРассмотреноОстаток КАК Количество,
			|	0                                                            КАК КоличествоЧерновики
			|ИЗ
			|	РегистрНакопления.ПисьмаЭлектроннойПочты.Остатки КАК ПисьмаЭлектроннойПочтыОстатки
			|
			|ГДЕ
			|	ПисьмаЭлектроннойПочтыОстатки.ГруппаУчетнойЗаписи.Владелец В(&СписокУчетныхЗаписей)
			|	И
			|	ПисьмаЭлектроннойПочтыОстатки.ГраницаПрочитанности < &ТекущаяДата
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПисьмаЭлектроннойПочтыОстатки.ГруппаУчетнойЗаписи        КАК Группа,
			|	0                                                        КАК Количество,
			|	ПисьмаЭлектроннойПочтыОстатки.КоличествоЧерновикиОстаток КАК КоличествоЧерновики
			|ИЗ
			|	РегистрНакопления.ПисьмаЭлектроннойПочты.Остатки КАК ПисьмаЭлектроннойПочтыОстатки
			|
			|ГДЕ
			|	ПисьмаЭлектроннойПочтыОстатки.ГруппаУчетнойЗаписи.Владелец В(&СписокУчетныхЗаписей)
			|
			|ИТОГИ СУММА(Количество),СУММА(КоличествоЧерновики) ПО
			|	Группа
			|";
			
			Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Группа");
			Пока Выборка.Следующий() Цикл
				мСтатистикаРассмотренностиПисем.Вставить(Выборка.Группа, Выборка.Количество);
				мСтатистикаСохраненныхПисем.Вставить(Выборка.Группа, Выборка.КоличествоЧерновики);
			КонецЦикла;

		КонецЕсли;
	
	Иначе
		
		Сообщить("У Вас закрыт доступ к таблицам, обслуживающим электронную почту.");
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПоместитьИсходныеДанныеВОбъект(XMLИсточник, ПотокВывода, ФормаОбъекта, ДатаЗаписи)
	
	//Контрагент = Неопределено;
	
	КИОбъекта = Новый ТаблицаЗначений;
	КИОбъекта.Колонки.Добавить("Поле1КИ");
	КИОбъекта.Колонки.Добавить("Поле2КИ");
	КИОбъекта.Колонки.Добавить("Поле3КИ");
	КИОбъекта.Колонки.Добавить("Поле4КИ");
	КИОбъекта.Колонки.Добавить("Поле5КИ");
	КИОбъекта.Колонки.Добавить("Поле6КИ");
	КИОбъекта.Колонки.Добавить("Поле7КИ");
	КИОбъекта.Колонки.Добавить("Поле8КИ");
	КИОбъекта.Колонки.Добавить("Поле9КИ");
	КИОбъекта.Колонки.Добавить("Поле10КИ");
	КИОбъекта.Колонки.Добавить("КомментарийКИ");
	КИОбъекта.Колонки.Добавить("ТипВидКИ");
	КИОбъекта.Колонки.Добавить("ПредставлениеКИ");
	
	ОтветыТаблицы = Новый ТаблицаЗначений;
	ОтветыТаблицы.Колонки.Добавить("Вопрос", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВопросыДляАнкетирования"));
	ОтветыТаблицы.Колонки.Добавить("Ответ", Новый ОписаниеТипов("Строка"));
	ОтветыТаблицы.Колонки.Добавить("РазвернутыйОтвет", Новый ОписаниеТипов("Строка"));
	ОтветыТаблицы.Колонки.Добавить("ТиповойОтвет", Метаданные.ПланыВидовХарактеристик.ВопросыДляАнкетирования.Тип);
	ОтветыТаблицы.Колонки.Добавить("НомерСтрокиВТаблице", Новый ОписаниеТипов("Число"));
	
	Вопрос 			= Неопределено;
	Ответ			= Неопределено;
	ТабличныйВопрос = Неопределено;
	
	//!!!!!!!
	Обработки.ЗагрузкаРезультатовАнкетирования.Создать().ПрочитатьВопрос(XMLИсточник, ОтветыТаблицы, Вопрос, ТабличныйВопрос);
	Если ТабличныйВопрос <> Неопределено тогда
		Обработки.ЗагрузкаРезультатовАнкетирования.Создать().ЗаписатьПредопределенныйТабличныйВопрос(ТабличныйВопрос, ПотокВывода, ОтветыТаблицы);
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаОтвет из ОтветыТаблицы Цикл
		Вопрос 	= СтрокаОтвет.Вопрос;
		Ответ 	= СтрокаОтвет.ТиповойОтвет;
		
		Если Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Фамилия тогда
			Фамилия = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Имя тогда
			Имя = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Отчество тогда
			Отчество = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ДатаРождения тогда
			ДатаРождения = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ИНН тогда
			ИНН = Ответ;
		КонецЕсли;
		
		// Физические лица и контактные лица
		//Если (Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.ФизическиеЛица) и
		//	НЕ ЗначениеНеЗаполнено(Фамилия) и 
		//	НЕ ЗначениеНеЗаполнено(Имя) и 
		//	НЕ ЗначениеНеЗаполнено(Отчество) и 
		//	НЕ ЗначениеНеЗаполнено(ДатаРождения) и 
		//	ЗначениеНеЗаполнено(ПотокВывода.Наименование) тогда
		//	//Если Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.ФизическиеЛица тогда
		//	ПотокВывода.Наименование = Фамилия	+ " " + Имя + " " + Отчество;
		//	ПотокВывода.ДатаРождения = ДатаРождения;
		//	ПотокВывода.Записать();
		//	// регистр	ФИОФизЛиц
		//	Если	(НЕ ЗначениеНеЗаполнено(Фамилия))	или
		//		(НЕ ЗначениеНеЗаполнено(Имя))	или
		//		(НЕ ЗначениеНеЗаполнено(Отчество))	тогда
		//		НаборЗаписейФИО	= РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
		//		НаборЗаписейФИО.Отбор.Физлицо.Значение		= ПотокВывода.Ссылка;
		//		НаборЗаписейФИО.Отбор.ФизЛицо.Использование	= Истина;
		//		НоваяЗапись 			= НаборЗаписейФИО.Добавить();
		//		НоваяЗапись.Физлицо		= ПотокВывода.Ссылка;
		//		НоваяЗапись.Период		= ДатаЗаписи;
		//		НоваяЗапись.Фамилия		= Фамилия;
		//		НоваяЗапись.Имя			= Имя;
		//		НоваяЗапись.Отчество	= Отчество;
		//		НаборЗаписейФИО.Записать();
		//	КонецЕсли;
		//КонецЕсли;
		
		//Если Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.КонтактныеЛица и
		//	НЕ ЗначениеНеЗаполнено(Фамилия) и 
		//	НЕ ЗначениеНеЗаполнено(Имя) и 
		//	НЕ ЗначениеНеЗаполнено(Отчество) и 
		//	НЕ ЗначениеНеЗаполнено(ДатаРождения) и 
		//	ЗначениеНеЗаполнено(ПотокВывода.Фамилия + ПотокВывода.Имя + ПотокВывода.Отчество) тогда
		//		// это контактное лицо
		//		ПотокВывода.Фамилия 		= Фамилия;
		//		ПотокВывода.Имя 			= Имя;
		//		ПотокВывода.Отчество 		= Отчество;
		//		ПотокВывода.ДатаРождения 	= ДатаРождения;
		//		ПотокВывода.Наименование	= Фамилия + " " + Имя + " " + Отчество;
		//		ПотокВывода.Записать();
		//КонецЕсли;
		
		//Если Анкета.Адресная и Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.Контрагенты тогда
		//	// если анкета была отправлена конкретному контрагенту
		//	Если НЕ ЗначениеНеЗаполнено(Фамилия) и 
		//		НЕ ЗначениеНеЗаполнено(Имя) и 
		//		НЕ ЗначениеНеЗаполнено(Отчество) и 
		//		НЕ ЗначениеНеЗаполнено(ДатаРождения) и 
		//		ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.Контрагенты") тогда
		//		// и встретили вопросы контактного лица, тогда запишем конрагента и создадим контактное лицо
		//		ПотокВывода.Записать();
		//		Контрагент 	= ПотокВывода;
		//		ПотокВывода = Справочники.КонтактныеЛица.СоздатьЭлемент();
		//		// это контактное лицо
		//		ПотокВывода.Фамилия 		= Фамилия;
		//		ПотокВывода.Имя 			= Имя;
		//		ПотокВывода.Отчество 		= Отчество;
		//		ПотокВывода.ДатаРождения 	= ДатаРождения;
		//		ПотокВывода.Наименование	= Фамилия + " " + Имя + " " + Отчество;
		//		ПотокВывода.ОбъектВладелец	= Контрагент.Ссылка;
		//		ПотокВывода.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
		//		ПотокВывода.Записать();
		//	КонецЕсли;
		//КонецЕсли;
		
		// Контрагент
		//Если НЕ ЗначениеНеЗаполнено(ИНН) и 
		//	//Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.Контрагенты тогда
		//	ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.Контрагенты") тогда
		//	Если ЗначениеНеЗаполнено(ПотокВывода.ИНН) тогда
		//		//Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		//		ПотокВывода.ИНН = ИНН;
		//		ПотокВывода.Записать();
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;
		
		//Если НЕ ЗначениеНеЗаполнено(Фамилия) и 
		//	 НЕ ЗначениеНеЗаполнено(Имя) и 
		//	 НЕ ЗначениеНеЗаполнено(Отчество) и 
		//	 НЕ ЗначениеНеЗаполнено(ДатаРождения) и  
		//	 ЗначениеНеЗаполнено(ПотокВывода) тогда
		//	 ПотокВывода = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
		//	 ПотокВывода.Наименование = Фамилия	+ " " + Имя + " " + Отчество;
		//	 ПотокВывода.ДатаРождения = ДатаРождения;
		//	 ПотокВывода.Записать();
		//КонецЕсли;
		
		//Если НЕ ЗначениеНеЗаполнено(Контрагент) тогда
			//Если Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.Контрагенты тогда
			//	КонтрагентДляЗаписи =  ПотокВывода;
			//ИначеЕсли Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.КонтактныеЛица тогда
			//	КонтрагентДляЗаписи =  Контрагент;
			//КонецЕсли ;
			//Если Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НаименованиеКонтрагента и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.Контрагенты") тогда
			//	КонтрагентДляЗаписи.Наименование = Ответ;
				//ИначеЕсли	Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ИННГоловногоКонтрагента	тогда
				//	Контрагент.ИННГоловногоКонтрагента	= СтрокаВопросОтвет.ТиповойОтвет;
			//ИначеЕсли	Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ВидДеятельностиКонтрагента	и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.Контрагенты") тогда
			//	//КонтрагентДляЗаписи.ОписаниеВидовДеятельности = Ответ;
			//ИначеЕсли	Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТипКонтрагента	и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.Контрагенты") тогда
			//	КонтрагентДляЗаписи.ЮрФизЛицо = Ответ;
			//КонецЕсли;
		//КонецЕсли;
		
		//Если Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.ФизическиеЛица тогда
		//	Если ЗначениеНеЗаполнено(ПотокВывода) тогда
		//		// если не во что принимать данные, то продолжим цикл
		//		Продолжить;
		//	КонецЕсли;
		////ИначеЕсли Анкета.ВидСправочникаДляЗагрузки = Перечисления.ВидыОбъектовЗагружаемыхИзОпроса.Контрагенты тогда
		////	Если ЗначениеНеЗаполнено(ПотокВывода) тогда
		////		// если не во что принимать данные, то продолжим цикл
		////		Продолжить;
		////	КонецЕсли;
		//КонецЕсли;
		
		ТипВидКИ	=	Вопрос.ТипВидКонтакнойИнформации;
		
		Если Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Пол и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.ФизическиеЛица") тогда
			ПотокВывода.Пол = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ИНН  и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.ФизическиеЛица") тогда
			ПотокВывода.ИНН = Ответ;
		//ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ИННГоловногоКонтрагента и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.Контрагенты") тогда
		//	ЗапросПоКонтрагенту = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		//									   |	Контрагенты.Ссылка
		//									   |ИЗ
		//									   |	Справочник.Контрагенты КАК Контрагенты
		//									   |
		//									   |ГДЕ
		//									   |	Контрагенты.ИНН = &ИННГоловногоКонтрагента");
		//	ЗапросПоКонтрагенту.УстановитьПараметр("ИННГоловногоКонтрагента", Ответ);
		//	РезультатЗапроса = ЗапросПоКонтрагенту.Выполнить();
		//	Выборка = РезультатЗапроса.Выбрать();
		//	Выборка.Следующий();
		//	ГоловнойКонтрагент = Выборка.Ссылка;
		//	Если НЕ ЗначениеНеЗаполнено(ГоловнойКонтрагент) тогда
		//		ПотокВывода.ГоловнойКонтрагент = ГоловнойКонтрагент;
		//	Иначе
		//		Сообщить("Невозможно заполнить головного контрагента. Не найден контрагент, имеющий ИНН - " + Ответ);
		//	КонецЕсли;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.КодИМНС  и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.ФизическиеЛица") тогда
			ПотокВывода.КодИМНС = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СтраховойНомерПФР  и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.ФизическиеЛица") тогда
			ПотокВывода.СтраховойНомерПФР = Ответ;
		//ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Роль  и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.КонтактныеЛица") тогда
		//	ПотокВывода.Роль = Ответ;
		//ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Должность  и ТипЗнч(ПотокВывода) = Тип("СправочникОбъект.КонтактныеЛица") тогда
		//	ПотокВывода.Должность = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СерияДокумента тогда
			СерияДокумента = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ВидДокументаУдостоверяющегоЛичность тогда
			ВидДокументаУдостоверяющегоЛичность = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НомерДокумента тогда
			НомерДокумента = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ДатаВыдачиДокумента тогда
			ДатаВыдачиДокумента = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.КемВыданДокумент тогда
			КемВыданДокумент = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.КодПодразделенияДокумента тогда
			КодПодразделенияДокумента = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Гражданство тогда
			Гражданство = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СемейноеПоложение тогда
			СемейноеПоложение = Ответ;
		ИначеЕсли	ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес	тогда
			СтрокаКИ =	КИОбъекта.Добавить();
			СтрокаКИ.ТипВидКИ	= ТипВидКИ;
			МассивПолей	=	РазложитьСтрокуВМассивПодстрок(Ответ,	"¤");
			Если	МассивПолей.Количество()	>	0	тогда
				СтрокаКИ.Поле1КИ = МассивПолей[0];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	1	тогда
				СтрокаКИ.Поле2КИ = МассивПолей[1];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	2	тогда
				СтрокаКИ.Поле3КИ = МассивПолей[2];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	3	тогда
				СтрокаКИ.Поле4КИ = МассивПолей[3];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	4	тогда
				СтрокаКИ.Поле5КИ = МассивПолей[4];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	5	тогда
				СтрокаКИ.Поле6КИ = МассивПолей[5];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	6	тогда
				СтрокаКИ.Поле7КИ = МассивПолей[6];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	7	тогда
				СтрокаКИ.Поле8КИ = МассивПолей[7];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	8	тогда
				СтрокаКИ.Поле9КИ = МассивПолей[8];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	9	тогда
				СтрокаКИ.КомментарийКИ	= МассивПолей[9];
			КонецЕсли;
			Представление = "";
			
			Если СокрЛП(СтрокаКИ.Поле1КИ) <> "" Тогда
				Представление = Представление + ", " + СокрЛП(СтрокаКИ.Поле1КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле2КИ) <> "" Тогда
				Представление = Представление + ", " + СокрЛП(СтрокаКИ.Поле2КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле3КИ) <> "" Тогда
				Представление = Представление + ", " + СокрЛП(СтрокаКИ.Поле3КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле4КИ) <> "" Тогда
				Представление = Представление + ", " + СокрЛП(СтрокаКИ.Поле4КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле5КИ) <> "" Тогда
				Представление = Представление + ", " + СокрЛП(СтрокаКИ.Поле5КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле6КИ) <> "" Тогда
				Представление = Представление + ", " + СокрЛП(СтрокаКИ.Поле6КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле7КИ) <> "" Тогда
				Представление = Представление + ", дом № " + СокрЛП(СтрокаКИ.Поле7КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле8КИ) <> "" Тогда
				Представление = Представление + ", корпус " + СокрЛП(СтрокаКИ.Поле8КИ);
			КонецЕсли;
			
			Если СокрЛП(СтрокаКИ.Поле9КИ) <> "" Тогда
				Представление = Представление + ", кв." + СокрЛП(СтрокаКИ.Поле9КИ);
			КонецЕсли;
			
			Если СтрДлина(Представление) > 2 Тогда
				Представление = Сред(Представление, 3);
			КонецЕсли;
			СтрокаКИ.ПредставлениеКИ = Представление
		ИначеЕсли	ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон	тогда
			СтрокаКИ	=	КИОбъекта.Добавить();
			СтрокаКИ.ТипВидКИ	= ТипВидКИ;
			МассивПолей	=	РазложитьСтрокуВМассивПодстрок(Ответ,	"¤");
			Если	МассивПолей.Количество()	>	0	тогда
				СтрокаКИ.Поле1КИ	= МассивПолей[0];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	1	тогда
				СтрокаКИ.Поле2КИ	= МассивПолей[1];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	2	тогда
				СтрокаКИ.Поле3КИ	= МассивПолей[2];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	3	тогда
				СтрокаКИ.Поле4КИ	= МассивПолей[3];
			КонецЕсли;
			Если	МассивПолей.Количество()	>	4	тогда
				СтрокаКИ.КомментарийКИ	= МассивПолей[4];
			КонецЕсли;
			//!!!!!!!! сделать через Функцию ПолучитьПредставлениеАдреса(Запись) Экспорт
			//Представление = ?(Не ПустаяСтрока(СтрокаКИ.Поле1КИ),("+"+СтрокаКИ.Поле1КИ),"");
			//Представление = Представление + ?((Не ПустаяСтрока(СтрокаКИ.Поле2КИ)),(ПроверкаПустойСтроки(Представление,Ложь)+"(" + СтрокаКИ.Поле2КИ + ")"),"");
			//Представление = Представление + ?((Не ПустаяСтрока(СтрокаКИ.Поле3КИ)),(ПроверкаПустойСтроки(Представление,ПустаяСтрока(СтрокаКИ.Поле2КИ))+СтрокаКИ.Поле3КИ),"");
			//Представление = Представление + ?((Не ПустаяСтрока(СтрокаКИ.Поле4КИ)),(ПроверкаПустойСтроки(Представление)+"доб. " + СтрокаКИ.Поле4КИ),"");
			//СтрокаКИ.ПредставлениеКИ	= Представление
		ИначеЕсли ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты или 
			ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница или 
			ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое тогда
			СтрокаКИ			     = КИОбъекта.Добавить();
			СтрокаКИ.ТипВидКИ	     = ТипВидКИ;
			СтрокаКИ.ПредставлениеКИ = Ответ;
			//КонецЕсли;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ОтношениеКВоинскойОбязанности тогда
			ОтношениеКВоинскойОбязанности = Ответ;
		ИначеЕсли	Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ОтношениеКВоинскомуУчету	тогда
			ОтношениеКВоинскомуУчету = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Годность тогда
			Годность = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Звание тогда
			Звание = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НаличиеМобпредписания тогда
			НаличиеМобпредписания = Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.Военкомат тогда
			Военкомат =	Ответ;
		ИначеЕсли Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ВУС тогда
			ВУС	= Ответ;
		КонецЕсли;
	КонецЦикла; // чтение вопросов
	
	Если ЗначениеНеЗаполнено(ПотокВывода.Наименование) тогда
		ПотокВывода.Наименование = Фамилия	+ " " + Имя + " " + Отчество;
	КонецЕсли;
	Если ЗначениеНеЗаполнено(ПотокВывода.ДатаРождения) тогда
		ПотокВывода.ДатаРождения = ДатаРождения;
	КонецЕсли;
	Если ЗначениеНеЗаполнено(ПотокВывода.ИНН) тогда
		ПотокВывода.ИНН = Ответ;
	КонецЕсли;
	
	//Если НЕ ЗначениеНеЗаполнено(Контрагент) тогда
	//	Контрагент.Записать();
	//	ПотокВывода.ОбъектВладелец = Контрагент.Ссылка;
	//КонецЕсли;
	
	// паспортные данные физлиц !!!!!
	Если НЕ ЗначениеНеЗаполнено(ВидДокументаУдостоверяющегоЛичность)	или
		 НЕ ЗначениеНеЗаполнено(СерияДокумента) или
		 НЕ ЗначениеНеЗаполнено(НомерДокумента) или
		 НЕ ЗначениеНеЗаполнено(ДатаВыдачиДокумента) или
		 НЕ ЗначениеНеЗаполнено(КемВыданДокумент) или
		 НЕ ЗначениеНеЗаполнено(КодПодразделенияДокумента)	тогда
		НаборЗаписейПаспортныхДанных	= ФормаОбъекта.мНаборЗаписейДокументаУдостоверяющегоЛичность;//РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьНаборЗаписей();
		//НаборЗаписейПаспортныхДанных.Отбор.Физлицо.Значение			= ПотокВывода.Ссылка;
		//НаборЗаписейПаспортныхДанных.Отбор.ФизЛицо.Использование	= Истина;
		НоваяЗапись =	НаборЗаписейПаспортныхДанных[0];//НаборЗаписейПаспортныхДанных.Добавить();
		//НоваяЗапись.Физлицо						= ПотокВывода.Ссылка;
		НоваяЗапись.Период						= ДатаЗаписи;
		НоваяЗапись.ДокументВид					= ВидДокументаУдостоверяющегоЛичность;
		НоваяЗапись.ДокументСерия				= СерияДокумента;
		НоваяЗапись.ДокументНомер				= НомерДокумента;
		НоваяЗапись.ДокументДатаВыдачи			= ДатаВыдачиДокумента;
		НоваяЗапись.ДокументКемВыдан			= КемВыданДокумент;
		НоваяЗапись.ДокументКодПодразделения	= КодПодразделенияДокумента;
		//НаборЗаписейПаспортныхДанных.Записать();
		//СерияДокумента	= "";
		//ВидДокументаУдостоверяющегоЛичность	= "";
		//НомерДокумента		= "";
		//ДатаВыдачиДокумента	= "";
		//КемВыданДокумент	= "";
		//КодПодразделенияДокумента	= "";
	КонецЕсли;
	
	// гражданство !!!!!
	Если НЕ ЗначениеНеЗаполнено(Гражданство) тогда
		НаборЗаписейГражданство	= ФормаОбъекта.мНаборЗаписейГражданство;//РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
		//НаборЗаписейГражданство.Отбор.Физлицо.Значение		= ПотокВывода.Ссылка;
		//НаборЗаписейГражданство.Отбор.ФизЛицо.Использование	= Истина;
		НоваяЗапись 			= НаборЗаписейГражданство[0];//НаборЗаписейГражданство.Добавить();
		//НоваяЗапись.Физлицо		= ПотокВывода.Ссылка;
		НоваяЗапись.Период		= ДатаЗаписи;
		НоваяЗапись.Страна		= Гражданство;
		//НаборЗаписейГражданство.Записать();
		Гражданство			= "";
	КонецЕсли;
	
	// Семейное положение!!!!!
	Если НЕ ЗначениеНеЗаполнено(СемейноеПоложение) тогда
		НаборЗаписейСемейноеПоложение	= ФормаОбъекта.мНаборЗаписейСемейноеПоложение; //РегистрыСведений.СемейноеПоложениеФизЛиц.СоздатьНаборЗаписей();
		//НаборЗаписейСемейноеПоложение.Отбор.Физлицо.Значение		= ПотокВывода.Ссылка;
		//НаборЗаписейСемейноеПоложение.Отбор.ФизЛицо.Использование	= Истина;
		НоваяЗапись 			= НаборЗаписейСемейноеПоложение[0];//НаборЗаписейСемейноеПоложение.Добавить();
		//НоваяЗапись.Физлицо		= ПотокВывода.Ссылка;
		НоваяЗапись.Период		= ДатаЗаписи;
		НоваяЗапись.СемейноеПоложение = СемейноеПоложение;
		//НаборЗаписейСемейноеПоложение.Записать();
		СемейноеПоложение	= "";
	КонецЕсли;
	
	// воинский учет          !!!!!
	Если	НЕ ЗначениеНеЗаполнено(ОтношениеКВоинскойОбязанности) или
		НЕ ЗначениеНеЗаполнено(ОтношениеКВоинскомуУчету) или
		НЕ ЗначениеНеЗаполнено(Годность) или
		НЕ ЗначениеНеЗаполнено(Звание) или
		НЕ ЗначениеНеЗаполнено(НаличиеМобпредписания) или
		НЕ ЗначениеНеЗаполнено(Военкомат) или
		НЕ ЗначениеНеЗаполнено(ВУС) тогда
		НаборЗаписейВУ								= ФормаОбъекта.мНаборЗаписейВоинскийУчет;//РегистрыСведений.ВоинскийУчет.СоздатьНаборЗаписей();
		//НаборЗаписейВУ.Отбор.Физлицо.Значение		= ПотокВывода.Ссылка;
		//НаборЗаписейВУ.Отбор.ФизЛицо.Использование	= Истина;
		НоваяЗапись =	НаборЗаписейВУ[0]; //НаборЗаписейВУ.Добавить();
		//НоваяЗапись.Физлицо		= ПотокВывода.Ссылка;
		НоваяЗапись.Период		= ДатаЗаписи;
		НоваяЗапись.ОтношениеКВоинскойОбязанности	= ОтношениеКВоинскойОбязанности;
		НоваяЗапись.ОтношениеКВоинскомуУчету		= ОтношениеКВоинскомуУчету;
		НоваяЗапись.Годность				= Годность;
		НоваяЗапись.Звание					= Звание;
		НоваяЗапись.НаличиеМобпредписания	= НаличиеМобпредписания;
		НоваяЗапись.Военкомат				= Военкомат;
		НоваяЗапись.ВУС						= ВУС;
		//НаборЗаписейВУ.Записать();
		//ОтношениеКВоинскойОбязанности	= "";
		//ОтношениеКВоинскомуУчету		= "";
		//Годность				= "";
		//Звание					= "";
		//НаличиеМобпредписания	= "";
		//Военкомат				= "";
		//ВУС						= "";
	КонецЕсли;
	
	// запись контактной информации
	// контактную информацию можно записывать в контрагента, физлица и контактного лица
	//Если ЗначениеНеЗаполнено(ПотокВывода) и НЕ ЗначениеНеЗаполнено(Контрагент) тогда
	//	ОбъектЗагрузкиКИ = Контрагент;
	//Иначе
		ОбъектЗагрузкиКИ = ПотокВывода;
	//КонецЕсли;
	//!!!!!!!!!!!!!!!
	Для каждого	СтрокаКИ	из	КИОбъекта	Цикл
		Поле1КИ	= СтрокаКИ.Поле1КИ;
		Поле2КИ	= СтрокаКИ.Поле2КИ;
		Поле3КИ	= СтрокаКИ.Поле3КИ;
		Поле4КИ	= СтрокаКИ.Поле4КИ;
		Поле5КИ	= СтрокаКИ.Поле5КИ;
		Поле6КИ	= СтрокаКИ.Поле6КИ;
		Поле7КИ	= СтрокаКИ.Поле7КИ;
		Поле8КИ	= СтрокаКИ.Поле8КИ;
		Поле9КИ	= СтрокаКИ.Поле9КИ;
		Поле10КИ		= СтрокаКИ.Поле10КИ;
		КомментарийКИ	= СтрокаКИ.КомментарийКИ;
		ПредставлениеКИ	= СтрокаКИ.ПредставлениеКИ;
		ТипВидКИ		= СтрокаКИ.ТипВидКИ;
		Если 	
			НЕ ЗначениеНеЗаполнено(Поле1КИ)	ИЛИ
			НЕ ЗначениеНеЗаполнено(Поле2КИ)	ИЛИ
			НЕ ЗначениеНеЗаполнено(Поле3КИ)	ИЛИ
			НЕ ЗначениеНеЗаполнено(Поле4КИ)	ИЛИ
			НЕ ЗначениеНеЗаполнено(Поле5КИ)	ИЛИ
			НЕ ЗначениеНеЗаполнено(Поле6КИ)	ИЛИ
			НЕ ЗначениеНеЗаполнено(Поле7КИ)	ИЛИ
			НЕ ЗначениеНеЗаполнено(Поле8КИ)	ИЛИ
			НЕ ЗначениеНеЗаполнено(Поле9КИ)	ИЛИ
			НЕ ЗначениеНеЗаполнено(Поле10КИ)	ИЛИ
			НЕ ЗначениеНеЗаполнено(ПредставлениеКИ) тогда
			
			НаборЗаписейКИ	=	ФормаОбъекта.НаборКонтактнойИнформации; //РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			// надо обойти все записи и только при отсутствии записи с таким же видом и типом добавлять новую
			КоличествоЗаписейКИ = НаборЗаписейКИ.Количество();
			НайденаЗаписьКИ = Ложь;
			Для индЗаписи = 0 по КоличествоЗаписейКИ-1 Цикл
				ЗаписьКИ = НаборЗаписейКИ[индЗаписи];
				Если ЗаписьКИ.Тип = ТипВидКИ.Тип И ЗаписьКИ.Вид = ТипВидКИ И ЗначениеНеЗаполнено(ЗаписьКИ.Представление) тогда
					НоваяЗапись = ЗаписьКИ;
					НайденаЗаписьКИ = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ НайденаЗаписьКИ тогда
				НоваяЗапись 		= НаборЗаписейКИ.Добавить();
			КонецЕсли;
			
			НоваяЗапись.Объект	= ОбъектЗагрузкиКИ.Ссылка;
			НоваяЗапись.Тип		= ТипВидКИ.Тип;
			НоваяЗапись.Вид		= ТипВидКИ;
			НоваяЗапись.Поле1	= Поле1КИ;
			НоваяЗапись.Поле2	= Поле2КИ;
			НоваяЗапись.Поле3	= Поле3КИ;
			НоваяЗапись.Поле4	= Поле4КИ;
			НоваяЗапись.Поле5	= Поле5КИ;
			НоваяЗапись.Поле6	= Поле6КИ;
			НоваяЗапись.Поле7	= Поле7КИ;
			НоваяЗапись.Поле8	= Поле8КИ;
			НоваяЗапись.Поле9	= Поле9КИ;
			НоваяЗапись.Поле10	= Поле10КИ;
			НоваяЗапись.Комментарий		= КомментарийКИ;
			Если ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес тогда
				НоваяЗапись.Представление	= ПолучитьПредставлениеАдреса(НоваяЗапись);
			ИначеЕсли ТипВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон тогда
				СформироватьПредставлениеТелефона(НоваяЗапись);
			Иначе
				НоваяЗапись.Представление	= ПредставлениеКИ;
			КонецЕсли;
			//НаборЗаписейКИ.Записать();
		КонецЕсли;
	КонецЦикла; // по строкам объекта
		
КонецПроцедуры

Процедура СоздатьФизлицо(ТекущийПредмет) Экспорт
	Если ТипЗнч(ТекущийПредмет) <> Тип("Строка") тогда
		Сообщить("Физлицо можно создать для предмета строкового типа");
		Возврат;
	КонецЕсли;
	ЗапросПоПредмету = Новый Запрос;
	ЗапросПоПредмету.УстановитьПараметр("Предмет", 		ТекущийПредмет);
	ЗапросПоПредмету.УстановитьПараметр("Отправленное", Перечисления.СтатусыПисем.Отправленное);
	ЗапросПоПредмету.УстановитьПараметр("Полученное", 	Перечисления.СтатусыПисем.Полученное);
	ЗапросПоПредмету.Текст = "ВЫБРАТЬ
	                         |	ПредметыЭлектронныхПисем.Регистратор КАК ЭП,
	                         |	ВЫБОР КОГДА ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО ""%.rps"" ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕстьРезультатОпроса,
	                         |	ВЫБОР КОГДА ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО ""%.rps"" ТОГДА ВложенияЭлектронныхПисем.Хранилище КОНЕЦ КАК Хранилище,
	                         |	ПредметыЭлектронныхПисем.Регистратор.КомуТЧ.(
	                         |		ВЫБОР КОГДА ПредметыЭлектронныхПисем.Регистратор.СтатусПисьма = &Отправленное ТОГДА ПредметыЭлектронныхПисем.Регистратор.КомуТЧ.АдресЭлектроннойПочты ИНАЧЕ """" КОНЕЦ КАК АдресКому
	                         |	) КАК Кому,
	                         |	ВЫБОР КОГДА ПредметыЭлектронныхПисем.Регистратор.СтатусПисьма = &Полученное ТОГДА ПредметыЭлектронныхПисем.Регистратор.ОтправительАдресЭлектроннойПочты ИНАЧЕ """" КОНЕЦ КАК АдресОтКого
	                         |ИЗ
	                         |	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
	                         |		ПО ПредметыЭлектронныхПисем.Регистратор = ВложенияЭлектронныхПисем.Объект
	                         |
	                         |ГДЕ
	                         |	ПредметыЭлектронныхПисем.Предмет = &Предмет И
	                         |	(ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = """") И
	                         |	(ВложенияЭлектронныхПисем.Объект.Ссылка ССЫЛКА Документ.ЭлектронноеПисьмо)";
	РезультатЗапроса = ЗапросПоПредмету.Выполнить();
	ВыборкаЗапроса 	 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ВидДанных", ТипСтрока);
	ИсходныеДанные.Колонки.Добавить("Значение");
	ИсходныеДанные.Колонки.Добавить("Представление");
	ИсходныеДанные.Колонки.Добавить("ИмяФайла");
	
	СтрокаИД 				= ИсходныеДанные.Добавить();
	СтрокаИД.ВидДанных 		= "ФИО";
	СтрокаИД.Значение 		= ТекущийПредмет;
	СтрокаИД.Представление 	=  "00000000";
	Пока ВыборкаЗапроса.Следующий() Цикл
		Если ВыборкаЗапроса.ЕстьРезультатОпроса тогда
			ХранилищеИзЗапроса = ВыборкаЗапроса.Хранилище.Получить();
			Попытка
				ИмяВрФайла = ПолучитьИмяВременногоФайла();
				ХранилищеИзЗапроса.Записать(ИмяВрФайла);
				XMLФайл = Новый ЧтениеXML();
				XMLФайл.ОткрытьФайл(ИмяВрФайла);
				Пока XMLФайл.Имя <> "РезультатОпроса" Цикл
					XMLФайл.Прочитать();
				КонецЦикла;
				ДатаЗаполненияОпроса = XMLЗначение(Тип("Дата"), XMLФайл.ПолучитьАтрибут("ДатаЗаполненияАнкеты"));
				Если НЕ ЗначениеНеЗаполнено(ДатаЗаполненияОпроса) тогда
					СтрокаИД 				= ИсходныеДанные.Добавить();
					СтрокаИД.ВидДанных 		= "XML";
					СтрокаИД.Значение 		= XMLФайл;
					СтрокаИД.Представление 	= Формат(ДатаЗаполненияОпроса, "ДФ=yyyyMMdd");
					СтрокаИД.ИмяФайла		= ИмяВрФайла;
					// заполняем исходные данные XML-файлами результатов опросов
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		// теперь добавим в список исходных данных всю информацию из писем
		ВыборкаПолучателей = ВыборкаЗапроса.Кому.Выбрать();
		Пока ВыборкаПолучателей.Следующий() Цикл
			Если НЕ ЗначениеНеЗаполнено(ВыборкаПолучателей.АдресКому) тогда
				СтрокаИД 				= ИсходныеДанные.Добавить();
				СтрокаИД.ВидДанных 		= "КИ_адресЭП";
				СтрокаИД.Значение 		= ВыборкаПолучателей.АдресКому;
				СтрокаИД.Представление 	=  "00000000";
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеНеЗаполнено(ВыборкаЗапроса.АдресОтКого) тогда
			СтрокаИД 				= ИсходныеДанные.Добавить();
			СтрокаИД.ВидДанных 		= "КИ_адресЭП";
			СтрокаИД.Значение 		= ВыборкаЗапроса.АдресОтКого;
			СтрокаИД.Представление 	=  "00000000";
		КонецЕсли;
		
	КонецЦикла;
	ИсходныеДанные.Свернуть("ВидДанных,Значение,Представление,ИмяФайла");
	ИсходныеДанные.Сортировать("Представление Убыв");
	ОбработкаРезультатовАнкетирования = Обработки.ЗагрузкаРезультатовАнкетирования.Создать();
	
	ФЛ 		= Справочники.ФизическиеЛица.СоздатьЭлемент();
	ФормаФЛ = ФЛ.ПолучитьФорму("ФормаЭлемента");
	
	ЗапросВидыКИ 		= Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	             		                |	ВидыКонтактнойИнформации.Ссылка КАК ВидАдресЭлектроннойПочты
	             		                |ИЗ
	             		                |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	             		                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации2
	             		                |		ПО (ВидыКонтактнойИнформации.Тип = &АдресЭлектроннойПочты) И (ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидФизическиеЛица)");
	ЗапросВидыКИ.УстановитьПараметр("АдресЭлектроннойПочты", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ЗапросВидыКИ.УстановитьПараметр("ВидФизическиеЛица", Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
	
	РезультатЗапроса 	= ЗапросВидыКИ.Выполнить();
	ВыборкаЗапрос 		= РезультатЗапроса.Выбрать();
	Если ВыборкаЗапрос.Следующий() тогда
		ВидАдресЭлектроннойПочты = ВыборкаЗапрос.ВидАдресЭлектроннойПочты;
	КонецЕсли;
	
	Для каждого СтрокаИД из ИсходныеДанные Цикл
		Если СтрокаИД.ВидДанных = "XML" тогда
			// если нашли результат опроса, то начнем создавать физлицо
			Файл = СтрокаИД.Значение;
			//Попытка
				Файл.ОткрытьФайл(СтрокаИД.ИмяФайла);
				ОбъектЗагрузки 	= ОбработкаРезультатовАнкетирования.НайтиОбъектДляЗагрузки(Файл);
				АнкетаИзФайла 		= ОбработкаРезультатовАнкетирования.ПолучитьАнкетуИзФайла(Файл);
				Файл.ОткрытьФайл(СтрокаИД.ИмяФайла);
				Если АнкетаИзФайла = Неопределено тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеНеЗаполнено(ОбъектЗагрузки) тогда
					ОбъектЗагрузки = ОбработкаРезультатовАнкетирования.НайтиОбъектПоАнкетнымДанным(Файл, АнкетаИзФайла);
				КонецЕсли;
				Если НЕ ЗначениеНеЗаполнено(ОбъектЗагрузки) тогда
					Ответ = Вопрос("Найдено физлицо, имеющее такое же ФИО и дату рождения, как загружаемое. Возможно такое физлицо уже есть в ИБ. Продолжить зарузку данных?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
					Если Ответ = КодВозвратаДиалога.Нет тогда
						ФормаОЗ = ОбъектЗагрузки.ПолучитьФорму("ФормаЭлемента");
						ФормаОЗ.Открыть();
						Сообщить("Найдено физлицо, имеющее такое же ФИО и дату рождения.");
						Возврат;
					ИначеЕсли Ответ = КодВозвратаДиалога.Отмена тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				Фамилия 			= "";
				Имя 				= "";
				Отчество 			= "";
				ДатаРождения 		= "";
				ИНН 				= "";
				СерияДокумента 		= "";
				НомерДокумента 		= "";
				ДатаВыдачиДокумента = "";
				КемВыданДокумент 	= "";
				Гражданство 		= "";
				СемейноеПоложение 	= "";
				Годность 			= "";
				Звание 				= "";
				Военкомат 			= "";
				ВУС					= "";
				НаличиеМобпредписания 				= "";
				ОтношениеКВоинскомуУчету 			= "";
				КодПодразделенияДокумента 			= "";
				ОтношениеКВоинскойОбязанности 		= "";
				ВидДокументаУдостоверяющегоЛичность = "";
				
				Пока Файл.Прочитать() Цикл
					Если (Файл.ТипУзла  = ТипУзлаXML.НачалоЭлемента) и ((Файл.Имя = "Вопрос")) Тогда
						Значение 		= Файл.ПолучитьАтрибут("Ид");
						Если Значение 	= "" Тогда
							Файл.Прочитать();
							Продолжить; // Пустые вопросы пропускаем
						КонецЕсли;
						ПоместитьИсходныеДанныеВОбъект(Файл, ФЛ, ФормаФЛ, Дата(СтрокаИД.Представление));
					КонецЕсли;
				КонецЦикла;
				
			//Исключение
				//Сообщить("При загрузке файла " + ИмяФайла + " произошла ошибка");
				//Сообщить(ОписаниеОшибки());
			//КонецПопытки;
		ИначеЕсли СтрокаИД.ВидДанных = "ФИО" тогда
			ФЛ.Наименование = СтрокаИД.Значение;
		ИначеЕсли СтрокаИД.ВидДанных = "КИ_адресЭП" тогда
			КИ 					= ФормаФЛ.НаборКонтактнойИнформации;
			КоличествоЗаписей 	= КИ.Количество();
			КИЗаписана 			= Ложь;
			Для инд = 0 по КоличествоЗаписей - 1 Цикл
				Если КИ[инд].Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты тогда
					Если КИ[инд].Представление =  "" тогда
						КИ[инд].Период 			= РабочаяДата;
						КИ[инд].Поле1			= СтрокаИД.Значение;
						КИ[инд].Представление	= СтрокаИД.Значение;
						КИЗаписана = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ КИЗаписана тогда
				Запись 					= КИ.Добавить();
				Запись.Период 			= РабочаяДата;
				Запись.Тип 				= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				Запись.Вид 				= ВидАдресЭлектроннойПочты;
				Запись.Поле1			= СтрокаИД.Значение;
				Запись.Представление	= СтрокаИД.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ФормаФЛ.ОткрытьМодально();
	
	// выбрать все письма с этим предметом и прописать им физлицо
	Если НЕ ФЛ.ЭтоНовый() тогда
		ЗапросЭлПисьма = Новый Запрос("ВЫБРАТЬ
		|	ЭлектронноеПисьмо.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|
		|ГДЕ
		|	ЭлектронноеПисьмо.Предмет = &Предмет");
		ЗапросЭлПисьма.УстановитьПараметр("Предмет", ТекущийПредмет);
		РезЗапроса 		= ЗапросЭлПисьма.Выполнить();
		ВыборкаПисем 	= РезЗапроса.Выбрать();
		НачатьТранзакцию();
		ФЛ = ФЛ.Ссылка;
		Пока ВыборкаПисем.Следующий() Цикл
			ОбъектПисьмо 		 = ВыборкаПисем.Ссылка.ПолучитьОбъект();
			ОбъектПисьмо.Предмет = ФЛ;
			ОбъектПисьмо.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОпрос(ТекущийПредмет) Экспорт
	
	ЗапросПоПредмету = Новый Запрос;
	ЗапросПоПредмету.УстановитьПараметр("Предмет", ТекущийПредмет);
	ЗапросПоПредмету.УстановитьПараметр("Отправленное", Перечисления.СтатусыПисем.Отправленное);
	ЗапросПоПредмету.УстановитьПараметр("Полученное", Перечисления.СтатусыПисем.Полученное);
	ЗапросПоПредмету.Текст = "ВЫБРАТЬ
	                         |	ПредметыЭлектронныхПисем.Регистратор КАК ЭП,
	                         |	ВЫБОР КОГДА ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО ""%.rps"" ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕстьРезультатОпроса,
	                         |	ВЫБОР КОГДА ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО ""%.rps"" ТОГДА ВложенияЭлектронныхПисем.Хранилище КОНЕЦ КАК Хранилище,
	                         |	ПредметыЭлектронныхПисем.Регистратор.КомуТЧ.(
	                         |		ВЫБОР КОГДА ПредметыЭлектронныхПисем.Регистратор.СтатусПисьма = &Отправленное ТОГДА ПредметыЭлектронныхПисем.Регистратор.КомуТЧ.АдресЭлектроннойПочты ИНАЧЕ """" КОНЕЦ КАК АдресКому
	                         |	) КАК Кому,
	                         |	ВЫБОР КОГДА ПредметыЭлектронныхПисем.Регистратор.СтатусПисьма = &Полученное ТОГДА ПредметыЭлектронныхПисем.Регистратор.ОтправительАдресЭлектроннойПочты ИНАЧЕ """" КОНЕЦ КАК АдресОтКого
	                         |ИЗ
	                         |	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
	                         |		ПО ПредметыЭлектронныхПисем.Регистратор = ВложенияЭлектронныхПисем.Объект
	                         |
	                         |ГДЕ
	                         |	ПредметыЭлектронныхПисем.Предмет = &Предмет И
	                         |	(ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = """") И
	                         |	(ВложенияЭлектронныхПисем.Объект.Ссылка ССЫЛКА Документ.ЭлектронноеПисьмо)";
	РезультатЗапроса = ЗапросПоПредмету.Выполнить();
	ВыборкаЗапроса 	 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	ОбработкаРезультатовАнкетирования = Обработки.ЗагрузкаРезультатовАнкетирования.Создать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		Если ВыборкаЗапроса.ЕстьРезультатОпроса тогда
			ХранилищеИзЗапроса = ВыборкаЗапроса.Хранилище.Получить();
			//Попытка
				ИмяВрФайла = ПолучитьИмяВременногоФайла();
				ХранилищеИзЗапроса.Записать(ИмяВрФайла);
				Файл = Новый ЧтениеXML();
				Файл.ОткрытьФайл(ИмяВрФайла);
				ОбъектЗагрузки 	= ОбработкаРезультатовАнкетирования.НайтиОбъектДляЗагрузки(Файл);
				Анкета 			= ОбработкаРезультатовАнкетирования.ПолучитьАнкетуИзФайла(Файл);
				ДатаОпроса 		= ОбработкаРезультатовАнкетирования.ПолучитьДатуФормированияАнкеты(Файл);
				Если Анкета = Неопределено тогда
					Продолжить;
				КонецЕсли;
				Если ОбъектЗагрузки = Неопределено тогда
					// если объект загрузки найти по ИдОпрашиваемого найти не удалось, тогда пробуем его найти
					// по ФИО и дате рождения, если это физлицо(конт. лицо), либо по ИНН, если это контрагент
					Файл.ОткрытьФайл(ИмяВрФайла);
					ОбъектЗагрузки = ОбработкаРезультатовАнкетирования.НайтиОбъектПоАнкетнымДанным(Файл, Анкета);
				КонецЕсли;
				ДокОпрос = ОбработкаРезультатовАнкетирования.НайтиДокументОпрос(ДатаОпроса, Анкета);
				Если ЗначениеНеЗаполнено(ОбъектЗагрузки) тогда
					ОбъектЗагрузки = ОбработкаРезультатовАнкетирования.НайтиОбъектПоАнкетнымДанным(Файл, Анкета);
				КонецЕсли;
				Если НЕ ЗначениеНеЗаполнено(ДокОпрос) тогда
					Ответ = Вопрос("Найден документ опрос по данной анкете. Возможно такой документ уже есть в ИБ. Продолжить зарузку данных?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
					Если Ответ = КодВозвратаДиалога.Нет тогда
						ФормаОЗ = ДокОпрос.ПолучитьФорму("ФормаДокумента");
						ФормаОЗ.Открыть();
						Сообщить("Найден документ опрос по данной анкете.");
						Возврат;
					ИначеЕсли Ответ = КодВозвратаДиалога.Отмена тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				Файл.ОткрытьФайл(ИмяВрФайла);
				ДокРассылки 		= ОбработкаРезультатовАнкетирования.ПолучитьДокРассылкиИзФайла(Файл);
				Если ЗначениеНеЗаполнено(Анкета) тогда
					Продолжить;
				КонецЕсли;
				// загружаем в документ Опрос
				ДокОпроса = Документы.Опрос.СоздатьДокумент();
				
				Пока Файл.Прочитать() Цикл
					Если (Файл.ТипУзла  = ТипУзлаXML.НачалоЭлемента) и ((Файл.Имя = "Вопрос")) Тогда
						Значение 		= Файл.ПолучитьАтрибут("Ид");
						Если Значение 	= "" Тогда
							Файл.Прочитать();
							Продолжить; // Пустые вопросы пропускаем
						КонецЕсли;
						ОбработкаРезультатовАнкетирования.ПрочитатьВопрос(Файл, ДокОпроса);
					КонецЕсли;
				КонецЦикла;
				Файл.Закрыть();
				
				ДокОпроса.ОпрашиваемоеЛицо = ОбъектЗагрузки;
				ДокОпроса.Ответственный    = глТекущийПользователь;
				ДокОпроса.ТиповаяАнкета	   = Анкета;
				ДокОпроса.Рассылка 		   = ДокРассылки;
				ДокОпроса.Дата			   = ДатаОпроса;
				ДокОпроса.ПолучитьФорму("ФормаДокумента").ОткрытьМодально();
				ОбработкаПрерыванияПользователя();
				
			//Исключение
			//	Сообщить("При загрузке файла " + ИмяВрФайла + " произошла ошибка");
			//КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Воссатновим сохраненное значение отображения списка предметов
СохраненноеЗначениеКнопки = ВосстановитьЗначение("ПометкаКнопкиОтображенияСпискаПредметов");
Если ТипЗнч(СохраненноеЗначениеКнопки) = Тип("Булево") Тогда
	мОтображатьСписокПредметов = СохраненноеЗначениеКнопки;
Иначе
	мОтображатьСписокПредметов = Ложь;
КонецЕсли;

// Инициализируем переменные объекта
мСоответствияГруппВходящие  = Новый Соответствие;
мСоответствияГруппИсходящие = Новый Соответствие;
мСоответствияГруппУдаленные = Новый Соответствие;
мСоответствияГруппЧерновики = Новый Соответствие;

мСтатистикаРассмотренностиПисем            = Новый Соответствие;
мСтатистикаСохраненныхПисем                = Новый Соответствие;
мСтатистикаРассмотренностиПисемПоПредметам = Новый Соответствие;

ОбновитьДоступныеУчетныеЗаписи();
СобратьСтатистикуРассмотренностиПисем();