
// Переменная содержит объект Шрифт с установленной жирностью
Перем мЖирныйШрифт;

// содержит строку списка писем, которая в данный момент отображена
// в поле ХТМЛ документа
Перем мОтображеннаяСтрокаСпискаПисем;

// Текущее письмо списка писем
Перем мТекущееПисьмо;

// Признак изменения списка писем при выборе папки или при активизации
Перем мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем;

// Содержит залипающуюся кнопку командной панели управления отбором скрытых предметов
Перем мКнопкаОтображатьСкрытыеПредметыПисем;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура управляет режимом отображения скрытых предметов.
//
Процедура УстановитьОтборСкрытыхПредметов()

	ПредметыСписок.Отбор.Скрытый.Значение = Ложь;
	ПредметыСписок.Отбор.Скрытый.Использование = НЕ мКнопкаОтображатьСкрытыеПредметыПисем.Пометка;

КонецПроцедуры

// Процедура формирует строку обязательных отборов списка писем.
// которая отображается над табличным полем списка писем
Процедура СформироватьСтрокуОтборовПисем()

	СтрокаОтборов = "Отборы: учетная запись ";
	
	Если ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.ВидСравнения = ВидСравнения.ВСписке Тогда
		СтрокаОтборов = СтрокаОтборов + "(все доступные)";
	ИначеЕсли ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.ВидСравнения = ВидСравнения.Равно Тогда
		Если ЗначениеНеЗаполнено(ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.Значение) Тогда
			СтрокаОтборов = СтрокаОтборов + "(пустая)";
		Иначе
			СтрокаОтборов = СтрокаОтборов + """" + ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.Значение + """";
		КонецЕсли; 
	КонецЕсли; 

	СтрокаОтборов = СтрокаОтборов + ", группа писем ";
	Если ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование Тогда
		Если ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.ВидСравнения <> ВидСравнения.Равно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.ВидСравнения + " ";
		КонецЕсли; 
		Если ТипЗнч(ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение) = Тип("СписокЗначений") Тогда
			СтрокаОтборовТемп = "";
			Для каждого ЭлементСписка Из ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение Цикл
				СтрокаОтборовТемп = ", " + СтрокаОтборовТемп;
			КонецЦикла;
			СтрокаОтборов = СтрокаОтборов + """" + Сред(СтрокаОтборовТемп, 3) + """";
		Иначе
			Если ЗначениеНеЗаполнено(ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение) Тогда
				СтрокаОтборов = СтрокаОтборов + "(пустая)";
			Иначе
				СтрокаОтборов = СтрокаОтборов + """" + ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение + """";
			КонецЕсли;
		КонецЕсли; 
	Иначе
		СтрокаОтборов = СтрокаОтборов + "(нет отбора)";
	КонецЕсли;
	
	СтрокаОтборов = СтрокаОтборов + ", пометка удаления ";
	Если ЭлектронныеПисьмаСписок.Отбор.ПометкаУдаления.Использование Тогда
		Если  ЭлектронныеПисьмаСписок.Отбор.ПометкаУдаления.Значение = Истина И ЭлектронныеПисьмаСписок.Отбор.ПометкаУдаления.ВидСравнения = ВидСравнения.Равно Тогда
			СтрокаОтборов = СтрокаОтборов + """" + "Истина" + """";
		Иначе
			СтрокаОтборов = СтрокаОтборов + """" + "Ложь" + """";
		КонецЕсли;
	Иначе
		СтрокаОтборов = СтрокаОтборов + " (нет отбора)";
	КонецЕсли;
	
	Если мОтображатьСписокПредметов Тогда
		СтрокаОтборов = СтрокаОтборов + ", предмет ";
		Если ЭлектронныеПисьмаСписок.Отбор.Предмет.Использование Тогда
			Если ПустаяСтрока(СокрЛП(ЭлектронныеПисьмаСписок.Отбор.Предмет.Значение)) Тогда
				СтрокаОтборов = СтрокаОтборов + "(не указан)";
			Иначе
				СтрокаОтборов = СтрокаОтборов + """" + СокрЛП(ЭлектронныеПисьмаСписок.Отбор.Предмет.Значение) + """";
			КонецЕсли; 
		Иначе
			СтрокаОтборов = СтрокаОтборов + "(нет отбора)";
		КонецЕсли; 
	КонецЕсли;
	
	Если ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.Использование  Тогда
		СтрокаОтборов = СтрокаОтборов + ", статус письма ";
		Если ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.ВидСравнения <> ВидСравнения.Равно Тогда
			Если ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.ВидСравнения = ВидСравнения.НеРавно Тогда
				СтрокаОтборов = СтрокаОтборов + "<> ";
			Иначе
				СтрокаОтборов = СтрокаОтборов + ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.ВидСравнения + " ";
			КонецЕсли; 
		КонецЕсли; 
		Если ТипЗнч(ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.Значение) = Тип("СписокЗначений") Тогда
			СтрокаОтборовТемп = "";
			Для каждого ЭлементСписка Из ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.Значение Цикл
				СтрокаОтборовТемп = ", " + СтрокаОтборовТемп;
			КонецЦикла;
			СтрокаОтборов = СтрокаОтборов + """" + Сред(СтрокаОтборовТемп, 3) + """";
		Иначе
			Если ЗначениеНеЗаполнено(ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.Значение) Тогда
				СтрокаОтборов = СтрокаОтборов + "(пустая)";
			Иначе
				СтрокаОтборов = СтрокаОтборов + """" + ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.Значение + """";
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	ЭлементыФормы.НадписьОтборовПисем.Заголовок = СтрокаОтборов;
	
КонецПроцедуры

// Процедура обрабатывает событие "ПриАктивизацииСтроки" для списка предметов эл.писем.
//
// Параметры
//  Элемент - Табличное поле списка предметов эл.писем
//
Процедура ПредметыСписок_ПриАктивизацииСтроки()

	Элемент = ЭлементыФормы.ПредметыСписок;
	Если мОтображатьСписокПредметов И Элемент.Доступность Тогда
		Если Элемент.ТекущиеДанные = Неопределено Тогда
			ЭлектронныеПисьмаСписок.Отбор.Предмет.Использование = Ложь;
		Иначе
			ЭлектронныеПисьмаСписок.Отбор.Предмет.Использование = Истина;
			ЭлектронныеПисьмаСписок.Отбор.Предмет.Значение      = Элемент.ТекущиеДанные.Предмет;
		КонецЕсли;
	Иначе
		ЭлектронныеПисьмаСписок.Отбор.Предмет.Использование = Ложь;
	КонецЕсли; 

КонецПроцедуры

// Процедура обрабатывает событие "ПриАктивизацииСтроки" для групп писем.
//
// Параметры
//  Элемент - Табличное поле списка групп писем
//
Процедура ГруппыПисем_ПриАктивизацииСтроки(Элемент)
	
	// Отобразим только необходимые письма
	
	Для каждого ЭлементОтбора Из ЭлектронныеПисьмаСписок.Отбор Цикл
		Если ЭлементОтбора.Имя <> "УчетнаяЗапись" Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		УдаленныеУчетнойЗаписи = мСоответствияГруппУдаленные.Получить(Элемент.ТекущиеДанные.Владелец);
		ЧерновикиУчетнойЗаписи = мСоответствияГруппЧерновики.Получить(Элемент.ТекущиеДанные.Владелец);
	Иначе
		УдаленныеУчетнойЗаписи = Неопределено;
		ЧерновикиУчетнойЗаписи = Неопределено;
	КонецЕсли; 
		
	ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.Использование = Истина;
	Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.ВидСравнения = ВидСравнения.Равно;
		ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.Значение     = УчетнаяЗапись;
	Иначе
		Если Элемент.ТекущиеДанные <> Неопределено И (УдаленныеУчетнойЗаписи = Элемент.ТекущиеДанные.Ссылка ИЛИ ЧерновикиУчетнойЗаписи = Элемент.ТекущиеДанные.Ссылка) Тогда
			ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.ВидСравнения = ВидСравнения.Равно;
			ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.Значение = Элемент.ТекущиеДанные.Владелец;
		Иначе
			ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.ВидСравнения = ВидСравнения.ВСписке;
			ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.Значение     = мДоступныеУчетныеЗаписи;
		КонецЕсли; 
	КонецЕсли; 
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.ВидСравнения  = ВидСравнения.Равно;
		ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение      = Справочники.ГруппыПисемЭлектроннойПочты.ПустаяСсылка();
		ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование = Истина;
	Иначе
		Если ЗначениеНеЗаполнено(УдаленныеУчетнойЗаписи) И ЗначениеНеЗаполнено(ЧерновикиУчетнойЗаписи) Тогда
			ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.ВидСравнения  = ВидСравнения.Равно;
			ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение      = Элемент.ТекущиеДанные.Ссылка;
			ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование = Истина;
		Иначе
			ЭлектронныеПисьмаСписок.Отбор.ПометкаУдаления.ВидСравнения     = ВидСравнения.Равно;
			ЭлектронныеПисьмаСписок.Отбор.ПометкаУдаления.Использование    = НЕ ЗначениеНеЗаполнено(УдаленныеУчетнойЗаписи);
			ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.Значение            = Перечисления.СтатусыПисем.Сохраненное;
			ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.ВидСравнения = ВидСравнения.Равно;
			ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение     = Элемент.ТекущиеДанные.Ссылка;
			Если Элемент.ТекущиеДанные.Ссылка = УдаленныеУчетнойЗаписи Тогда
				ЭлектронныеПисьмаСписок.Отбор.ПометкаУдаления.Значение          = Истина;
				ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.Использование        = Ложь;
				ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование = Ложь;
			ИначеЕсли Элемент.ТекущиеДанные.Ссылка = ЧерновикиУчетнойЗаписи Тогда
				ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.ВидСравнения         = ВидСравнения.Равно;
				ЭлектронныеПисьмаСписок.Отбор.ПометкаУдаления.Значение          = Ложь;
				ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.Использование        = Истина;
				ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование = Ложь;
			Иначе
				ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.ВидСравнения         = ВидСравнения.НеРавно;
				ЭлектронныеПисьмаСписок.Отбор.ПометкаУдаления.Значение          = Ложь;
				ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.Использование        = (ЧерновикиУчетнойЗаписи <> Неопределено);
				ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	УстановитьОтборПредметов();
	
КонецПроцедуры

// Процедура обрабатывает событие "ПриАктивизацииСтроки" для списка писем.
//
// Параметры
//  Элемент - Табличное поле списка писем
//
Процедура ЭлектронныеПисьма_СписокПриАктивизацииСтроки(Элемент)

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		
		ЭлементыФормы.КнопкаВложения.Видимость = Ложь;
	
		ЭлементыФормы.ПолеОтправитель.Значение = "";
		ЭлементыФормы.ПолеКому.Значение        = "";
		ЭлементыФормы.ПолеТема.Значение        = "";
		ЭлементыФормы.ПолеКопии.Значение       = "";
		
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст("");
		
		ЭлементыФормы.КонтекстноеМенюСпискаПисем.Кнопки.УстановитьПометкуУдаления.Текст     = "Установить пометку удаления";
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки[0].Кнопки.УстановитьПометкуУдаления.Текст = "Установить пометку удаления";
		
		ЭлементыФормы.КонтекстноеМенюСпискаПисем.Кнопки.ОткрытьПисьмоПотомок.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.ОткрытьПисьмоПотомок.Доступность = Ложь;
		
	Иначе
		
		Если Элемент.ТекущиеДанные.ПометкаУдаления Тогда
			ЭлементыФормы.КонтекстноеМенюСпискаПисем.Кнопки.УстановитьПометкуУдаления.Текст     = "Снять пометку удаления";
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки[0].Кнопки.УстановитьПометкуУдаления.Текст = "Снять пометку удаления";
		Иначе
			ЭлементыФормы.КонтекстноеМенюСпискаПисем.Кнопки.УстановитьПометкуУдаления.Текст     = "Установить пометку удаления";
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки[0].Кнопки.УстановитьПометкуУдаления.Текст = "Установить пометку удаления";
		КонецЕсли; 
		
		Если Элемент.ТекущиеДанные.НеРассмотрено И Элемент.ТекущиеДанные.УчетнаяЗапись.АвтоматическаяУстановкаПометкиРассмотрено Тогда
			мТекущееПисьмо = Элемент.ТекущиеДанные.Ссылка;
			ПодключитьОбработчикОжидания("АвтоустановкаРассмотренностиПисьма", Элемент.ТекущиеДанные.УчетнаяЗапись.ИнтервалАвтоматическойУстановкиОтметкиРассмотрено);
		КонецЕсли; 
		
		ЭлементыФормы.ПолеОтправитель.Значение = Элемент.ТекущиеДанные.ОтправительПредставление;
		ЭлементыФормы.ПолеКому.Значение        = Элемент.ТекущиеДанные.Кому;
		ЭлементыФормы.ПолеТема.Значение        = Элемент.ТекущиеДанные.Тема;
		ЭлементыФормы.ПолеКопии.Значение       = Элемент.ТекущиеДанные.Копии;
		
		ЭлементыФормы.КонтекстноеМенюСпискаПисем.Кнопки.ОткрытьПисьмоПотомок.Доступность          = НЕ ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.СостояниеПотомкаПисьма);
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.ОткрытьПисьмоПотомок.Доступность = НЕ ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.СостояниеПотомкаПисьма);
		
		Если Элемент.ТекущиеДанные.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			НайденноеСоответствие = глСоответствиеТекстовЭлектронныхПисем.Получить(Элемент.ТекущиеДанные.Ссылка);
			Если НайденноеСоответствие = Неопределено Тогда
				ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(Элемент.ТекущиеДанные.ТекстПисьма);
				ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиСпискаПисемСОжиданием", 1);
			Иначе
				ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(НайденноеСоответствие);
				мОтображеннаяСтрокаСпискаПисем = Элемент.ТекущиеДанные.Ссылка;
			КонецЕсли; 
		Иначе
			Если Элемент.ТекущиеДанные.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст Тогда
				ТекстПисьма = "<HTML><HEAD>
							  |<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8" + """" + ">
							  |<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
							  |<BODY>" + СтрЗаменить(Элемент.ТекущиеДанные.ТекстПисьма, Символы.ПС, "<BR>") + "</BODY></HTML>";
				ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(ТекстПисьма);
			Иначе
				ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(Элемент.ТекущиеДанные.ТекстПисьма);
			КонецЕсли; 
			мОтображеннаяСтрокаСпискаПисем = Элемент.ТекущиеДанные.Ссылка;
		КонецЕсли;
		
		ЭлементыФормы.КнопкаВложения.Видимость = Элемент.ТекущиеДанные.ЕстьВложения;
		
	КонецЕсли; 

КонецПроцедуры

// Функция определяет, какое из 2-х табличных полей групп писем
// в настоящий момент активно. Сделано временно, пока в платформе
// некорректно работает схлопываение объектов с разделителем.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  Табличное поле.
//
Функция ПолучитьЭлементГруппыПисемДерево()

	Если мОтображатьСписокПредметов Тогда
		Возврат ЭлементыФормы.ГруппыПисемДерево;
	Иначе
		Возврат ЭлементыФормы.ГруппыПисемДерево1;
	КонецЕсли; 

КонецФункции

// Процедура устанавливает при необходимости отбор на РегистрСведенийСписок
//  предметы писем электронной почты.
//
Процедура УстановитьОтборПредметов(ОтборПоГруппе = Истина)

	ЭлементГруппыПисемДерево = ПолучитьЭлементГруппыПисемДерево();
	
	Если мОтображатьСписокПредметов Тогда
		ПредметыСписок.Отбор.ГруппаПисемЭлектроннойПочты.Использование = ОтборПоГруппе;
		Если ЭлементГруппыПисемДерево.ТекущиеДанные <> Неопределено И НЕ ЗначениеНеЗаполнено(ЭлементГруппыПисемДерево.ТекущиеДанные.Ссылка) Тогда
			Если ЭлементГруппыПисемДерево.ТекущиеДанные.Владелец.ИспользоватьКлассификациюПисемПоПредметам И ЭлементГруппыПисемДерево.ТекущиеДанные.ИспользоватьПредметыПисем Тогда
				ПредметыСписок.Отбор.ГруппаПисемЭлектроннойПочты.Значение = ЭлементГруппыПисемДерево.ТекущиеДанные.Ссылка;
				ЭлементыФормы.ПредметыСписок.Доступность = Истина;
			Иначе
				ПредметыСписок.Отбор.ГруппаПисемЭлектроннойПочты.Значение = Справочники.ГруппыПисемЭлектроннойПочты.ПустаяСсылка();
				ЭлементыФормы.ПредметыСписок.Доступность = Ложь;
			КонецЕсли; 
		Иначе
			ПредметыСписок.Отбор.ГруппаПисемЭлектроннойПочты.Значение = Справочники.ГруппыПисемЭлектроннойПочты.ПустаяСсылка();
			ЭлементыФормы.ПредметыСписок.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЭлементыФормы.ПредметыСписок.Доступность Тогда
		ЭлементыФормы.ПредметыСписок.Колонки.Предмет.ТекстШапки = "Предметы недоступны";
		ЭлементыФормы.ПредметыСписок.Колонки.Предмет.ШрифтШапки = Новый Шрифт(,, Истина);
	Иначе
		ЭлементыФормы.ПредметыСписок.Колонки.Предмет.ТекстШапки = "Предметы писем";
		ЭлементыФормы.ПредметыСписок.Колонки.Предмет.ШрифтШапки = Новый Шрифт;
	КонецЕсли; 
	ПредметыСписок_ПриАктивизацииСтроки();
	
КонецПроцедуры

// Процедура инициирует открытие формы нового электронного письма.
//
// Параметры:
//  Копирование - Булево, признак копирование письма
//  ВТекущейГруппе - Булево, Признак создания нового электронного письма в
//                   текущей группе электронных писем.
//
Процедура НаписатьНовоеПисьмо(Копирование = Ложь, ВТекущейГруппе = Ложь)
	
	Если Копирование Тогда
		
		НовыйОбъект = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка.Скопировать();
		НовыйОбъект.ПолучитьФорму(, ЭтаФорма).Открыть();
		
	Иначе
		
		СтруктураНовогоПисьма = Новый Структура;
		
		ЭлементГруппыПисемДерево = ПолучитьЭлементГруппыПисемДерево();
	
		Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
			СтруктураНовогоПисьма.Вставить("УчетнаяЗапись", УчетнаяЗапись);
			Если ВТекущейГруппе Тогда
				Если ЭлементГруппыПисемДерево.ТекущиеДанные <> Неопределено И ЭлементГруппыПисемДерево.ТекущиеДанные.Ссылка.Владелец = УчетнаяЗапись Тогда
					СтруктураНовогоПисьма.Вставить("ГруппаУчетнойЗаписи", ЭлементГруппыПисемДерево.ТекущиеДанные.Ссылка);
				КонецЕсли;
			КонецЕсли; 
		Иначе
			Если ЭлементГруппыПисемДерево.ТекущиеДанные <> Неопределено И НЕ ЗначениеНеЗаполнено(ЭлементГруппыПисемДерево.ТекущиеДанные.Ссылка) Тогда
				СтруктураНовогоПисьма.Вставить("УчетнаяЗапись", ЭлементГруппыПисемДерево.ТекущиеДанные.Владелец);
				Если ВТекущейГруппе Тогда
					СтруктураНовогоПисьма.Вставить("ГруппаУчетнойЗаписи", ЭлементГруппыПисемДерево.ТекущиеДанные.Ссылка);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		НаписатьПисьмо(глТекущийПользователь, СтруктураНовогоПисьма,,,,, ЭтаФорма);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура отображает текст текущего электронного письма в ХТМЛ поле.
// 
Процедура ОтображениеПисьмаТекущейСтроки()

	Элемент = ЭлементыФормы.ЭлектронныеПисьмаСписок;
	
	КопияТекстаПисьма = Элемент.ТекущиеДанные.ТекстПисьма;
	Если Элемент.ТекущиеДанные.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		ПропарситьHTMLИДВ_ТекстКартинки(глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь, Элемент.ТекущиеДанные.Ссылка, КопияТекстаПисьма);
	КонецЕсли; 
	ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(КопияТекстаПисьма);
	
КонецПроцедуры

// Процедура обрабатывает событие активизации строки электронных писем с ожиданием
// в 1 сек, задержка производится для отображения больших картинок в ХТМЛ формате.
// 
Процедура ПриАктивизацииСтрокиСпискаПисемСОжиданием()

	ТекущаяСтрокаСпискаПисем = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные;
	
	Если ТекущаяСтрокаСпискаПисем = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если мОтображеннаяСтрокаСпискаПисем <> ТекущаяСтрокаСпискаПисем.Ссылка Тогда
		ОтображениеПисьмаТекущейСтроки();
		ОтключитьОбработчикОжидания("ПриАктивизацииСтрокиСпискаПисемСОжиданием");
		мОтображеннаяСтрокаСпискаПисем = ТекущаяСтрокаСпискаПисем.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает отбор на список групп электронных писем
// в зависимости от текущей учетной записи.
//
Процедура УстановитьОтборГрупп()

	ЭлементыФормы.ГруппыПисемДерево.НастройкаОтбора.Владелец.Доступность = Ложь;
	ЭлементыФормы.ГруппыПисемДерево.Колонки.Владелец.Видимость = ЗначениеНеЗаполнено(УчетнаяЗапись);
	ЭлементыФормы.ГруппыПисемДерево1.НастройкаОтбора.Владелец.Доступность = Ложь;
	ЭлементыФормы.ГруппыПисемДерево1.Колонки.Владелец.Видимость = ЗначениеНеЗаполнено(УчетнаяЗапись);
	
	ГруппыПисемДерево.Порядок.Очистить();
	Если ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		ГруппыПисемДерево.Отбор.Владелец.ВидСравнения  = ВидСравнения.ВСписке;
		ГруппыПисемДерево.Отбор.Владелец.Значение      = мДоступныеУчетныеЗаписи.Скопировать();
		ГруппыПисемДерево.Порядок.Установить("Владелец ВОЗР,Порядок ВОЗР");
	Иначе
		ГруппыПисемДерево.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
		ГруппыПисемДерево.Отбор.Владелец.Значение      = УчетнаяЗапись;
		ГруппыПисемДерево.Порядок.Установить("Порядок ВОЗР");
	КонецЕсли; 
	ГруппыПисемДерево.Отбор.Владелец.Использование = Истина;

КонецПроцедуры

// Процедура заполняет пункты меню "Отправить/Получить" в зависимости от
// уровня доступа текущего пользователя к транспорту эл.писем учетных записей.
//
Процедура ЗаполнитьПодменюОтправитьПолучить()

	// Подменю ПОЛУЧИТЬ/ОТПРАВИТЬ
	КнопкиПодменю = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюПолучитьОтправить.Кнопки;
	КнопкиПодменю1 = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.ПодменюПолучитьОтправить.Кнопки;
	КнопкиПодменю.Очистить();
	КнопкиПодменю1.Очистить();
	Для каждого ЭлементСписка Из мСтруктураДоступныхУчетныхЗаписей.Транспорт Цикл
		Кнопка = КнопкиПодменю.Добавить(("п" + СтрЗаменить(Строка(ЭлементСписка.Значение.УникальныйИдентификатор()), "-", "_")), ТипКнопкиКоманднойПанели.Действие, ("&" + Строка(мСтруктураДоступныхУчетныхЗаписей.Транспорт.Индекс(ЭлементСписка) + 1) + ". Получить: " + ЭлементСписка.Представление), Новый Действие("ПолучитьУчетнаяЗапись"));
		Кнопка.Картинка = БиблиотекаКартинок.ПолучитьУчетнаяЗапись;
		Кнопка = КнопкиПодменю1.Добавить(("п" + СтрЗаменить(Строка(ЭлементСписка.Значение.УникальныйИдентификатор()), "-", "_")), ТипКнопкиКоманднойПанели.Действие, ("&" + Строка(мСтруктураДоступныхУчетныхЗаписей.Транспорт.Индекс(ЭлементСписка) + 1) + ". Получить: " + ЭлементСписка.Представление), Новый Действие("ПолучитьУчетнаяЗапись"));
		Кнопка.Картинка = БиблиотекаКартинок.ПолучитьУчетнаяЗапись;
	КонецЦикла;
	Если мСтруктураДоступныхУчетныхЗаписей.Транспорт.Количество() > 1 Тогда
		КнопкиПодменю.Добавить("Разделитель99");
		КнопкиПодменю1.Добавить("Разделитель99");
	КонецЕсли; 
	Для каждого ЭлементСписка Из мСтруктураДоступныхУчетныхЗаписей.Транспорт Цикл
		Кнопка = КнопкиПодменю.Добавить(("о" + СтрЗаменить(Строка(ЭлементСписка.Значение.УникальныйИдентификатор()), "-", "_")), ТипКнопкиКоманднойПанели.Действие, ("&" + Строка(мСтруктураДоступныхУчетныхЗаписей.Транспорт.Индекс(ЭлементСписка) + 1) + ". Отправить: " + ЭлементСписка.Представление), Новый Действие("ОтправитьУчетнаяЗапись"));
		Кнопка.Картинка = БиблиотекаКартинок.ОтправитьУчетнаяЗапись;
		Кнопка = КнопкиПодменю1.Добавить(("о" + СтрЗаменить(Строка(ЭлементСписка.Значение.УникальныйИдентификатор()), "-", "_")), ТипКнопкиКоманднойПанели.Действие, ("&" + Строка(мСтруктураДоступныхУчетныхЗаписей.Транспорт.Индекс(ЭлементСписка) + 1) + ". Отправить: " + ЭлементСписка.Представление), Новый Действие("ОтправитьУчетнаяЗапись"));
		Кнопка.Картинка = БиблиотекаКартинок.ОтправитьУчетнаяЗапись;
	КонецЦикла;
	
	КнопкиПодменю.Добавить("Разделитель98");
	КнопкиПодменю1.Добавить("Разделитель98");
	
	Если мСтруктураДоступныхУчетныхЗаписей.Транспорт.Количество() > 1 Тогда
		Кнопка = КнопкиПодменю.Добавить("ПолучитьВсе"          , ТипКнопкиКоманднойПанели.Действие, "Получить ВСЕ"          , Новый Действие("ПолучитьВсе"));
		Кнопка.Картинка = БиблиотекаКартинок.ПолучитьВсе;
		Кнопка = КнопкиПодменю.Добавить("ОтправитьВсе"         , ТипКнопкиКоманднойПанели.Действие, "Отправить ВСЕ"         , Новый Действие("ОтправитьВсе"));
		Кнопка.Картинка = БиблиотекаКартинок.ОтправитьВсе;
		КнопкиПодменю.Добавить("Разделитель97");
	КонецЕсли; 
	Кнопка = КнопкиПодменю.Добавить("ОтправитьПолучитьВсе" , ТипКнопкиКоманднойПанели.Действие, "Получить/Отправить ВСЕ", Новый Действие("ОтправитьПолучитьВсе"));
	Кнопка.Картинка = БиблиотекаКартинок.ОтправитьПолучитьВсе;
	
	Если мСтруктураДоступныхУчетныхЗаписей.Транспорт.Количество() > 1 Тогда
		Кнопка = КнопкиПодменю1.Добавить("ПолучитьВсе"         , ТипКнопкиКоманднойПанели.Действие, "Получить ВСЕ"          , Новый Действие("ПолучитьВсе"));
		Кнопка.Картинка = БиблиотекаКартинок.ПолучитьВсе;
		Кнопка = КнопкиПодменю1.Добавить("ОтправитьВсе"        , ТипКнопкиКоманднойПанели.Действие, "Отправить ВСЕ"         , Новый Действие("ОтправитьВсе"));
		Кнопка.Картинка = БиблиотекаКартинок.ОтправитьВсе;
		КнопкиПодменю1.Добавить("Разделитель97");
	КонецЕсли; 
	Кнопка = КнопкиПодменю1.Добавить("ОтправитьПолучитьВсе", ТипКнопкиКоманднойПанели.Действие, "Получить/Отправить ВСЕ", Новый Действие("ОтправитьПолучитьВсе"));
	Кнопка.Картинка = БиблиотекаКартинок.ОтправитьПолучитьВсе;

КонецПроцедуры

// Процедура изменяет флаг рассмотренности электронного письма.
// 
// Параметры:
//  ВыделенныеСтроки  - Массив, выделенные строки табличного поля
//  НовыйФлаг         - Булево, новый флаг рассмотренности эл.писем
//  ВыдаватьСообщения - Булево, выдавать сообщения о невозможности изменения флага рассмотренности
// 
Процедура ИзменитьФлагРассмотренностьПисьма(ВыделенныеСтроки, НовыйФлаг, ВыдаватьСообщения = Истина)

	СписокОтправка = мСтруктураДоступныхУчетныхЗаписей.Отправка;
	
	Если НовыйФлаг Тогда
		ФормаДаты = ПолучитьОбщуюФорму("ФормаИзмененияГраницыРассмотренияЭлектронногоПисьма");
		Если ВыделенныеСтроки.Количество() = 1 Тогда
			ФормаДаты.РассмотретьПосле = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.РассмотретьПосле;
		КонецЕсли; 
		РассмотретьПосле = ФормаДаты.ОткрытьМодально();
		Если ТипЗнч(РассмотретьПосле) <> Тип("Дата") Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	КолСтрок = ВыделенныеСтроки.Количество();
	КолОбработано = 0;
	Для каждого Строка Из ВыделенныеСтроки Цикл
		Если ТипЗнч(Строка) = Тип("ДокументСсылка.ЭлектронноеПисьмо") И (Строка.НеРассмотрено <> НовыйФлаг) ИЛИ (НовыйФлаг И Строка.РассмотретьПосле <> РассмотретьПосле) Тогда
			Если СписокОтправка.НайтиПоЗначению(Строка.УчетнаяЗапись) = Неопределено Тогда
				Если ВыдаватьСообщения Тогда
					Сообщить("Вам запрещено редактировать письма учетной записи " + УчетнаяЗапись);
				КонецЕсли; 
				Продолжить;
			КонецЕсли; 
			Объект = Строка.ПолучитьОбъект();
			Объект.НеВыдаватьСообщенияПриЗаписиОбъекта = НЕ ВыдаватьСообщения;
			Объект.НеРассмотрено = НовыйФлаг;
			Если НовыйФлаг Тогда
				Объект.РассмотретьПосле = РассмотретьПосле;
			КонецЕсли;
			Если НЕ НовыйФлаг И ЗначениеНеЗаполнено(Объект.Ответственный) Тогда
				Объект.Ответственный = глТекущийПользователь;
			КонецЕсли; 
			Попытка
				Объект.Записать();
			Исключение
				Сообщить("Флаг рассмотренности документа " + Объект + " не изменен.");
			КонецПопытки;
		КонецЕсли; 
		КолОбработано = КолОбработано + 1;
		Состояние("Обработано " + КолОбработано + " из " + КолСтрок);
	КонецЦикла; 

	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Процедура обработчика ожидания, которая контролирует автоматическую установку флага прочитанности
// эл.писем, настройка устанавливается в параметрах учетной записи.
//
Процедура АвтоустановкаРассмотренностиПисьма()

	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено
	   И ТипЗнч(мТекущееПисьмо) = Тип("ДокументСсылка.ЭлектронноеПисьмо") И мТекущееПисьмо.ПолучитьОбъект() <> Неопределено
	   И ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка = мТекущееПисьмо
	   И ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.НеРассмотрено Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущаяСтрока);
		ИзменитьФлагРассмотренностьПисьма(ВыделенныеСтроки, Ложь, Ложь);
	КонецЕсли;
	ОтключитьОбработчикОжидания("АвтоустановкаРассмотренностиПисьма");

КонецПроцедуры

// Процедура обрабатывает событие начала редактирования электронного письма.
// 
// Параметры:
//  Элемент - Табличное поле списка эл.писем
//  Отказ   - Булево, флаг отказа от редактирования эл.письма
// 
Процедура ПередНачаломИзмененияЭлектронногоПисьма(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		СписокОтправка = мСтруктураДоступныхУчетныхЗаписей.Отправка;
		Если Элемент.ТекущиеДанные.НеРассмотрено И Элемент.ТекущиеДанные.УчетнаяЗапись.АвтоматическаяУстановкаПометкиРассмотрено И СписокОтправка.НайтиПоЗначению(Элемент.ТекущиеДанные.УчетнаяЗапись) <> Неопределено Тогда
			Объект = Элемент.ТекущиеДанные.Ссылка.ПолучитьОбъект();
			Объект.НеРассмотрено = Ложь;
			Если ЗначениеНеЗаполнено(Объект.Ответственный) Тогда
				Объект.Ответственный = глТекущийПользователь;
			КонецЕсли; 
			Попытка
				Объект.Записать();
			Исключение
			КонецПопытки;
			СобратьСтатистикуРассмотренностиПисем();
		КонецЕсли;
		// Перехватываем что бы установить владельца формы
		Элемент.ТекущиеДанные.Ссылка.ПолучитьФорму(, ЭтаФорма).Открыть();
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура производит общее обновление связей на форме, списка доступных учетных записей
// и электронных писем.
//
// Параметры:
//  ОбновлятьОтбор               - Булево, признак необходимости обновления отбора списков
//  ОбновлятьТекстТекущегоПисьма - Булево, признак обновления текста текущего эл.письма
//                                 в поле ХТМЛ документа.
//
Процедура ОбщееОбновление(ОбновлятьОтбор = Истина, ОбновлятьТекстТекущегоПисьма = Истина)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		ТекущееПисьмо = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка;
	КонецЕсли; 
	
	ОбновитьДоступныеУчетныеЗаписи();
	
	Если мДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		Предупреждение("Нет доступных учетных записей.");
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли; 
	
	ЭлементыФормы.УчетнаяЗапись.СписокВыбора = мДоступныеУчетныеЗаписи.Скопировать();
	ЭлементыФормы.УчетнаяЗапись.СписокВыбора.Добавить(Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка(), "Все доступные учетные записи");
	
	Если ЭлементыФормы.УчетнаяЗапись.СписокВыбора.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
		УчетнаяЗапись = ЭлементыФормы.УчетнаяЗапись.СписокВыбора[0].Значение;
	КонецЕсли; 
	
	ЗаполнитьПодменюОтправитьПолучить();
	
	УстановитьОтборГрупп();
	
	ГруппыПисемДерево.Обновить();
	ЭлементГруппыПисемДерево = ПолучитьЭлементГруппыПисемДерево();
	
	Если ОбновлятьОтбор Тогда
		ГруппыПисем_ПриАктивизацииСтроки(ЭлементГруппыПисемДерево);
	КонецЕсли; 
	
	ПредметыСписок.Обновить();
	
	СобратьСтатистикуРассмотренностиПисем();
	
	ЭлектронныеПисьмаСписок.Обновить();
	
	Если ТекущееПисьмо <> Неопределено Тогда
		ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущаяСтрока = ТекущееПисьмо;
	КонецЕсли;
	
	Если ОбновлятьТекстТекущегоПисьма Тогда
		ЭлектронныеПисьма_СписокПриАктивизацииСтроки(ЭлементыФормы.ЭлектронныеПисьмаСписок);
	КонецЕсли; 
	
	мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем");
	
КонецПроцедуры

// Процедура обрабатывает событие начала поиска объектов ИБ по адресу эл.почты и представлению.
// 
// Параметры:
//  ВыделенныйТекст - Текст для поиска, содержащий адрес эл.почты И/ИЛИ представление объекта.
// 
Процедура ПроизвестиПоиск(ВыделенныйТекст)

	ТекстДляПоиска = ВыделенныйТекст;
	
	АдреснаяКнига = Обработки.АдреснаяКнига.Создать();
	Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		АдреснаяКнига.УчетнаяЗапись = УчетнаяЗапись;
	КонецЕсли; 
	АдреснаяКнига.ОткрытаДляВыбора  = Истина;
	АдреснаяКнига.ОткрытиеПриВыборе = Истина;
	АдреснаяКнига.ПроизвестиПоиск(ТекстДляПоиска);

КонецПроцедуры

// Процедура управляет видимостью списка предметов электронных писем.
//
Процедура ВидимостьСпискаПредметов()

	Если мОтображатьСписокПредметов Тогда
		ЭлементыФормы.ПанельСпискаПредметов.ТекущаяСтраница = ЭлементыФормы.ПанельСпискаПредметов.Страницы.СписокПредметов;
		Если ЭлементыФормы.ГруппыПисемДерево1.ТекущиеДанные <> Неопределено Тогда
			ТекущаяГруппа = ЭлементыФормы.ГруппыПисемДерево1.ТекущиеДанные.Ссылка;
		КонецЕсли; 
	Иначе
		ЭлементыФормы.ПанельСпискаПредметов.ТекущаяСтраница = ЭлементыФормы.ПанельСпискаПредметов.Страницы.ДеревоГрупп;
		Если ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные <> Неопределено Тогда
			ТекущаяГруппа = ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Ссылка;
		КонецЕсли; 
	КонецЕсли;
	Элемент = ПолучитьЭлементГруппыПисемДерево();
	Если ТекущаяГруппа <> Неопределено Тогда
		Элемент.ТекущаяСтрока = ТекущаяГруппа;
	КонецЕсли; 

КонецПроцедуры

// Процедура устанавливает/снимает признак пометки удаления у электронных писем.
// 
// Параметры:
//  Элемент - Табличное поле списка электронных писем.
//
Процедура УстановитьПометкуУдаленияЭлектронногоПисьма(Элемент)

	Если Элемент.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Если Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
			Если Элемент.ТекущиеДанные.ПометкаУдаления Тогда
				СтрокаВопроса = "Снять с объекта пометку на удаление?";
			Иначе
				СтрокаВопроса = "Пометить объект на удаление?";
			КонецЕсли;
		Иначе
			ФлагУдаления = Ложь;
			ФлагНеУдаления = Ложь;
			Для каждого Строка Из Элемент.ВыделенныеСтроки Цикл
				Если Строка.ПометкаУдаления Тогда
					ФлагУдаления = Истина;
				Иначе
					ФлагНеУдаления = Истина;
				КонецЕсли;
				Если ФлагНеУдаления И ФлагУдаления Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			Если ФлагНеУдаления И ФлагУдаления Тогда
				СтрокаВопроса = "Изменить у объектов пометку на удаление?";
			ИначеЕсли ФлагУдаления Тогда
				СтрокаВопроса = "Снять с объекта пометку на удаление?";
			Иначе
				СтрокаВопроса = "Пометить объект на удаление?";
			КонецЕсли;
		КонецЕсли; 
		
		ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ВсегоПисем = Элемент.ВыделенныеСтроки.Количество();
		ТекСтрока = 0;
		Для каждого ВыбраннаяСтрока Из Элемент.ВыделенныеСтроки Цикл
			ТекСтрока = ТекСтрока + 1;
			Состояние("Обработно " + Строка(ТекСтрока) + " из " + Строка(ВсегоПисем));
			Объект = ВыбраннаяСтрока.ПолучитьОбъект();
			Попытка
				Объект.УстановитьПометкуУдаления(НЕ Объект.ПометкаУдаления);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла; 
	
	КонецЕсли;

	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Процедура формирует новый документ "Событие" на основании электронного письма.
//
Процедура ВвестиСобытиеПоПисьму()

	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		НовоеСобытие = Документы.Событие.СоздатьДокумент();
		НовоеСобытие.Заполнить(ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка);
		НовоеСобытие.ПолучитьФорму().Открыть();
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		Предупреждение("В настройках учета не установлено использование встроенного почтового клиента.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если мДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		
		Если НЕ ПравоДоступа("Добавление", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
		ОтветНаВопрос = Вопрос("Форму встроенного почтового клиента запрещено открывать.
								|У вас нет доступных учентых записей, создать новую?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Справочники.УчетныеЗаписиЭлектроннойПочты.СоздатьЭлемент().ПолучитьФорму().ОткрытьМодально();
		ОбновитьДоступныеУчетныеЗаписи();
		Если мДоступныеУчетныеЗаписи.Количество() = 0 Тогда
			Предупреждение("Форму встроенного почтового клиента запрещено открывать.
							|У вас нет доступных учетных записей.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.УчетнаяЗапись.СписокВыбора = мДоступныеУчетныеЗаписи.Скопировать();
	ЭлементыФормы.УчетнаяЗапись.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	ЭлементыФормы.УчетнаяЗапись.СписокВыбора.Добавить(Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка(), "Все доступные учетные записи");
	
КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("УчетнаяЗапись"                           , УчетнаяЗапись);
	СохранитьЗначение("ПометкаКнопкиОтображенияСкрытыхПредметов", мКнопкаОтображатьСкрытыеПредметыПисем.Пометка);
	СохранитьЗначение("ПометкаКнопкиОтображенияСпискаПредметов" , мОтображатьСписокПредметов);
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки[0].Кнопки.ПредметыПисем.Пометка = мОтображатьСписокПредметов;
	
	ВидимостьСпискаПредметов();

	СохраненнаяУчетнаяЗапись = ВосстановитьЗначение("УчетнаяЗапись");
	Если СохраненнаяУчетнаяЗапись <> Неопределено Тогда
		Если ТипЗнч(СохраненнаяУчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			Если НЕ СохраненнаяУчетнаяЗапись.Пустая() Тогда
				Попытка
					Объект = СохраненнаяУчетнаяЗапись.ПолучитьОбъект();
					Если Объект = Неопределено Тогда
						СохраненнаяУчетнаяЗапись = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяУчетнаяЗапись");
					Иначе
						Если мДоступныеУчетныеЗаписи.НайтиПоЗначению(СохраненнаяУчетнаяЗапись) = Неопределено Тогда
							СохраненнаяУчетнаяЗапись = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяУчетнаяЗапись");
						КонецЕсли; 
					КонецЕсли; 
				Исключение
					СохраненнаяУчетнаяЗапись = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяУчетнаяЗапись");
				КонецПопытки;
			КонецЕсли; 
		Иначе
			СохраненнаяУчетнаяЗапись = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяУчетнаяЗапись");
		КонецЕсли;
	Иначе
		СохраненнаяУчетнаяЗапись = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяУчетнаяЗапись");
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(СохраненнаяУчетнаяЗапись) Тогда
		СохраненнаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	КонецЕсли; 
	
	УчетнаяЗапись = СохраненнаяУчетнаяЗапись;
	
	Если ЭлементыФормы.УчетнаяЗапись.СписокВыбора.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
		УчетнаяЗапись = ЭлементыФормы.УчетнаяЗапись.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Для каждого ЭлементУправленияОтбором Из ЭлементыФормы.ЭлектронныеПисьмаСписок.НастройкаОтбора Цикл
		ЭлементУправленияОтбором.Доступность = (ЭлементУправленияОтбором.Имя <> "УчетнаяЗапись");
	КонецЦикла;
	
	Для каждого ЭлементУправленияОтбором Из ЭлементыФормы.ПредметыСписок.НастройкаОтбора Цикл
		ЭлементУправленияОтбором.Доступность = (ЭлементУправленияОтбором.Имя = "Предмет");
	КонецЦикла;
	
	Для каждого ЭлементНастройкиПорядка Из ЭлементыФормы.ГруппыПисемДерево.НастройкаПорядка Цикл
		ЭлементНастройкиПорядка.Доступность = Ложь;
	КонецЦикла;
	Для каждого ЭлементНастройкиПорядка Из ЭлементыФормы.ГруппыПисемДерево1.НастройкаПорядка Цикл
		ЭлементНастройкиПорядка.Доступность = Ложь;
	КонецЦикла;
	
	ПредметыСписок.Порядок.Очистить();
	ПредметыСписок.Порядок.Установить("Предмет ВОЗР");
	
	УстановитьОтборГрупп();
	
	ГруппыПисем_ПриАктивизацииСтроки(ПолучитьЭлементГруппыПисемДерево());
	ПредметыСписок_ПриАктивизацииСтроки();
	ЭлектронныеПисьма_СписокПриАктивизацииСтроки(ЭлементыФормы.ЭлектронныеПисьмаСписок);
	ЗаполнитьПодменюОтправитьПолучить();
	
	ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиСпискаПисемСОжиданием", 1);
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПолучениеЭлектронныхПисемПриОткрытии") = Истина Тогда
		ПолучениеОтправкаПисем(глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь,,,, Истина);
	КонецЕсли; 
	
	мКнопкаОтображатьСкрытыеПредметыПисем = ЭлементыФормы.КоманднаяПанельСписокПредметов.Кнопки.ОтображатьСкрытыеПредметы;
	ВосстановленноеЗначение = ВосстановитьЗначение("ПометкаКнопкиОтображенияСкрытыхПредметов");
	Если ТипЗнч(ВосстановленноеЗначение) = Тип("Булево") Тогда
		мКнопкаОтображатьСкрытыеПредметыПисем.Пометка = ВосстановленноеЗначение;
	КонецЕсли; 
	
	УстановитьотборСкрытыхПредметов();
	
КонецПроцедуры

// Обработчик события ОбновлениеОтображения формы.
//
Процедура ОбновлениеОтображения()
	
	СформироватьСтрокуОтборовПисем();
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") И ЗначениеВыбора = "ЗаписаноЭлектронноеПисьмо" Тогда
		ОбщееОбновление(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РоботПолученияПисем" Тогда
		ОбщееОбновление(Ложь, Ложь);
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события НачалоПеретаскивания элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Значение = Новый Структура("ПараметрыПеретаскивания", ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

// Обработчик события onclick элемента формы ПолеHTMLДокумента.
//
Процедура ПолеHTMLДокументаonclick(Элемент, pEvtObj)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные = Неопределено Тогда
		ОбработкаСобытияOnClickПоляHTML(глТекущийПользователь, Элемент, pEvtObj,,, ЭтаФорма);
	Иначе
		ОбработкаСобытияOnClickПоляHTML(глТекущийПользователь, Элемент, pEvtObj, ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.УчетнаяЗапись, ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка.ГруппаУчетнойЗаписи, ЭтаФорма, ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(Строка) <> Тип("СправочникСсылка.ГруппыПисемЭлектроннойПочты") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеНеЗаполнено(Строка.Владелец.ГруппаЧерновики) И Строка = Строка.Владелец.ГруппаЧерновики Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение.ПараметрыПеретаскивания;
		
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
			Если ЗначениеПеретаскивания.Количество() = 1 Тогда
				ЗначениеПеретаскивания = ЗначениеПеретаскивания[0];
			Иначе
				Возврат;
			КонецЕсли; 
		КонецЕсли;
			
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
			Если ЗначениеНеЗаполнено(Строка.Владелец.ГруппаУдаленные) Тогда
				Если ЗначениеПеретаскивания.ГруппаУчетнойЗаписи = Строка Тогда
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				КонецЕсли;
			Иначе
				Если (Строка.Владелец <> ЗначениеПеретаскивания.УчетнаяЗапись И Строка.Владелец.ГруппаУдаленные = Строка)
				 ИЛИ (Строка = Строка.Владелец.ГруппаУдаленные И ЗначениеПеретаскивания.ПометкаУдаления)
				 ИЛИ (ЗначениеПеретаскивания.ГруппаУчетнойЗаписи = Строка И НЕ ЗначениеПеретаскивания.ПометкаУдаления) Тогда
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.ГруппыПисемЭлектроннойПочты") Тогда
		
		Если ЗначениеНеЗаполнено(Строка) И (НЕ Элемент.Значение.Отбор.Владелец.Использование ИЛИ ТипЗнч(Элемент.Значение.Отбор.Владелец.Значение) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Иначе
			УчетнаяЗаписьОбъектаПеретаскивания = ПараметрыПеретаскивания.Значение.Владелец;
			Если УчетнаяЗаписьОбъектаПеретаскивания.Ответственный <> глТекущийПользователь ИЛИ (НЕ ЗначениеНеЗаполнено(Строка) И Строка.Владелец <> УчетнаяЗаписьОбъектаПеретаскивания) Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПереносВДругуюУчетнуюЗапись = Неопределено;
		
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение.ПараметрыПеретаскивания;
		
		Если ТипЗнч(Строка) = Тип("СправочникСсылка.ГруппыПисемЭлектроннойПочты") Тогда
			Если ТипЗнч(ЗначениеПеретаскивания) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
				Если НЕ Строка.Пустая() И Строка.Владелец <> ЗначениеПеретаскивания.УчетнаяЗапись Тогда
					Если ПереносВДругуюУчетнуюЗапись = Неопределено Тогда
						ОтветНаВопрос = Вопрос("Перенести письмо в другую учетную запись?", РежимДиалогаВопрос.ДаНет);
						Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
							ПереносВДругуюУчетнуюЗапись = Ложь;
							Возврат;
						Иначе
							ПереносВДругуюУчетнуюЗапись = Истина;
						КонецЕсли; 
					ИначеЕсли ПереносВДругуюУчетнуюЗапись = Ложь Тогда
						Возврат;
					КонецЕсли; 
				КонецЕсли; 
				ДокументОбъект = ЗначениеПеретаскивания.ПолучитьОбъект();
				Если НЕ Строка.Пустая() Тогда
					ДокументОбъект.УчетнаяЗапись       = Строка.Владелец;
				КонецЕсли; 
				ДокументОбъект.ГруппаУчетнойЗаписи = Строка;
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
				НачатьТранзакцию();
				Отказ = Ложь;
				Если Строка.Владелец.ГруппаУдаленные = Строка И НЕ ЗначениеНеЗаполнено(Строка) Тогда
					ЭтоКорзина = Истина;
				Иначе
					ЭтоКорзина = Ложь;
				КонецЕсли;
				КоличествоВсего = ЗначениеПеретаскивания.Количество();
				КолТекущийЭлемент = 0;
				Для каждого ЭлементМассива Из ЗначениеПеретаскивания Цикл
					КолТекущийЭлемент = КолТекущийЭлемент + 1;
					Состояние("Обработано: " + КолТекущийЭлемент + " из " + КоличествоВсего);
					Если ТипЗнч(ЭлементМассива) <> Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
						Продолжить;
					КонецЕсли;
					Если НЕ Строка.Пустая() И Строка.Владелец <> ЭлементМассива.УчетнаяЗапись Тогда
						Если ПереносВДругуюУчетнуюЗапись = Неопределено Тогда
							ОтветНаВопрос = Вопрос("Разрешить перенесить письма в другую учетную запись?", РежимДиалогаВопрос.ДаНет);
							Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
								ПереносВДругуюУчетнуюЗапись = Ложь;
								Продолжить;
							Иначе
								ПереносВДругуюУчетнуюЗапись = Истина;
							КонецЕсли; 
						ИначеЕсли ПереносВДругуюУчетнуюЗапись = Ложь Тогда
							Продолжить;
						КонецЕсли; 
					КонецЕсли; 
					Если ЭтоКорзина И Строка.Владелец <> ЭлементМассива.УчетнаяЗапись Тогда
						Сообщить("Нельзя переносить в корзину другой учетной записи. Электронное письмо № " + СокрЛП(ЭлементМассива.Номер) + " не перенесено.");
						Продолжить;
					КонецЕсли; 
					ДокументОбъект = ЭлементМассива.ПолучитьОбъект();
					Если НЕ Строка.Пустая() Тогда
						ДокументОбъект.УчетнаяЗапись = Строка.Владелец;
					КонецЕсли;
					Если НЕ ЭтоКорзина Тогда
						ДокументОбъект.ГруппаУчетнойЗаписи = Строка;
					КонецЕсли; 
					ДокументОбъект.ПометкаУдаления = ЭтоКорзина;
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						Сообщить(ОписаниеОшибки());
						Отказ = Истина;
						Прервать;
					КонецПопытки;
				КонецЦикла;
				Если Отказ Тогда
					ОтменитьТранзакцию();
				Иначе
					ЗафиксироватьТранзакцию();
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.ГруппыПисемЭлектроннойПочты") Тогда
		
		Если Строка.Владелец = ПараметрыПеретаскивания.Значение.Владелец ИЛИ ЗначениеНеЗаполнено(Строка.Владелец) Тогда
			
			Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
				ОбъектДляЗаписи = ПараметрыПеретаскивания.Значение.Получитьобъект();
			ИначеЕсли ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
				ОбъектДляЗаписи = ПараметрыПеретаскивания.Значение.Скопировать();
			КонецЕсли;
			
			ОбъектДляЗаписи.Родитель = Строка;
			
			Попытка
				ОбъектДляЗаписи.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		
		КонецЕсли; 
		
	КонецЕсли;
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы УчетнаяЗапись.
//
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	
	УстановитьОтборГрупп();
	
	Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		мОтображатьСписокПредметов = УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам;
	Иначе
		ОтображениеПредметов = Ложь;
		Для каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
			Если ЭлементСписка.Значение.ИспользоватьКлассификациюПисемПоПредметам Тогда
				ОтображениеПредметов = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если НЕ ОтображениеПредметов И мОтображатьСписокПредметов Тогда
			мОтображатьСписокПредметов = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.ПредметыПисем.Пометка = мОтображатьСписокПредметов;
	
	СобратьСтатистикуРассмотренностиПисем();
	
	УстановитьОтборПредметов();
	ВидимостьСпискаПредметов();
	
	ЭлементГруппыПисемДерево = ПолучитьЭлементГруппыПисемДерево();
	
	ГруппыПисем_ПриАктивизацииСтроки(ЭлементГруппыПисемДерево);
	
КонецПроцедуры

// Обработчик события Открытие элемента формы УчетнаяЗапись.
//
Процедура УчетнаяЗаписьОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		УчетнаяЗапись.ПолучитьФорму().Открыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КнопкаВложения.
//
Процедура КнопкаВложенияНажатие(Элемент)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекСсылка"   , ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенияЭлектронныхПисем.Ссылка   КАК Ссылка,
	|	ВложенияЭлектронныхПисем.ИмяФайла КАК ИмяФайла
	|ИЗ
	|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
	|ГДЕ
	|	ВложенияЭлектронныхПисем.Объект = &ТекСсылка
	|	И
	|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = &ПустаяСтрока
	|";
	
	Если НЕ ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.ПометкаУдаления Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	ВложенияЭлектронныхПисем.ПометкаУдаления = Ложь
		|";
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Картинка = ПолучитьПиктограммуФайла(ПолучитьРасширениеФайла(Выборка.ИмяФайла));
		СписокВыбора.Добавить(Выборка.Ссылка, Выборка.ИмяФайла,, Картинка);
	КонецЦикла;
	СписокВыбора.Добавить(Справочники.ВложенияЭлектронныхПисем.ПустаяСсылка(), "Открыть список вложений");
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзМеню(СписокВыбора, Элемент);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение.Пустая() Тогда
		
		ФормаФайлов = Справочники.ВложенияЭлектронныхПисем.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
		
		// Дополнительные файлы
		ФормаФайлов.Отбор.Объект.Использование = Истина;
		ФормаФайлов.Отбор.Объект.ВидСравнения  = ВидСравнения.Равно;
		ФормаФайлов.Отбор.Объект.Значение      = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка;
		ФормаФайлов.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Объект.Доступность = Ложь;
		
		ФормаФайлов.ОбязательныеОтборы = Новый Структура("Объект", ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка);
		ФормаФайлов.Заголовок = "Вложения письма (" + СокрЛП(Строка(ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка)) + ")";
		ФормаФайлов.Открыть();
		
	Иначе
		
		ОткликФормы = ЭтотОбъект.ПолучитьФорму("ФормаОткрытияВложений").ОткрытьМодально();
		
		Если ОткликФормы = Неопределено ИЛИ ТипЗнч(ОткликФормы) <> Тип("Булево") Тогда
			Возврат;
		КонецЕсли;
		
		Если ОткликФормы Тогда
			ОткрытьФайлы(ВыбранныйЭлемент.Значение, глТекущийПользователь,, Ложь);
		Иначе
			
			СохраненноеИмяКаталога = ВосстановитьЗначение("ИмяКаталогаСохраненияФайлов");
			Если СохраненноеИмяКаталога = Неопределено Тогда
				ИмяКаталога = ПолучитьИмяКаталога(глТекущийПользователь);
			Иначе
				ИмяКаталога = СохраненноеИмяКаталога;
			КонецЕсли;
			
			ТолькоЧтение = Ложь;

			ФормаСохраненияФайлов = Справочники.ВложенияЭлектронныхПисем.ПолучитьФорму("ФормаСохраненияФайлов");
			ФормаСохраненияФайлов.ИмяКаталога    = ИмяКаталога;
			ФормаСохраненияФайлов.ТолькоЧтение   = ТолькоЧтение;
			ФормаСохраненияФайлов.ОткрытьКаталог = Ложь;
			СтруктураПараметров = ФормаСохраненияФайлов.ОткрытьМодально();

			Если СтруктураПараметров = Неопределено Тогда
				Возврат;
			КонецЕсли;

			Если Не ПроверитьСуществованиеКаталога(СтруктураПараметров.ИмяКаталога) Тогда
				Возврат;
			КонецЕсли;
			
			СохранитьЗначение("ИмяКаталогаСохраненияФайлов", СтруктураПараметров.ИмяКаталога);

			СпособПерезаписи = "";

			ИмяФайла = ПолучитьИмяФайла(СтруктураПараметров.ИмяКаталога, ВыбранныйЭлемент.Значение.ИмяФайла);
			Состояние("Сохраняется файл: " + ИмяФайла);
			СохранитьФайлНаДиске(ВыбранныйЭлемент.Значение.Хранилище, ИмяФайла, СтруктураПараметров.ТолькоЧтение, СпособПерезаписи);

			Если СтруктураПараметров.ОткрытьКаталог Тогда
				ЗапуститьПриложение(СтруктураПараметров.ИмяКаталога);
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 1;
	Иначе
		Если ЗначениеНеЗаполнено(ДанныеСтроки.Владелец) Тогда
			ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 1;
		Иначе
			ГруппаВходящие  = мСоответствияГруппВходящие.Получить(ДанныеСтроки.Владелец);
			ГруппаИсходящие = мСоответствияГруппИсходящие.Получить(ДанныеСтроки.Владелец);
			ГруппаУдаленные = мСоответствияГруппУдаленные.Получить(ДанныеСтроки.Владелец);
			ГруппаЧерновики = мСоответствияГруппЧерновики.Получить(ДанныеСтроки.Владелец);
			Если ГруппаВходящие = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 3;
			ИначеЕсли ГруппаИсходящие = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 2;
			ИначеЕсли ГруппаУдаленные = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 0;
			ИначеЕсли ГруппаЧерновики = ДанныеСтроки.Ссылка Тогда
				СтатистикаГруппы = мСтатистикаСохраненныхПисем.Получить(ГруппаЧерновики);
				Если ТипЗнч(СтатистикаГруппы) = Тип("Число") И СтатистикаГруппы > 0 Тогда
					ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 6;
				Иначе
					ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 5;
				КонецЕсли; 
			Иначе
				Если ДанныеСтроки.ПометкаУдаления Тогда
					ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 4;
				Иначе
					ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 1;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	СтатистикаГруппы = мСтатистикаРассмотренностиПисем.Получить(?(ДанныеСтроки = Неопределено, Справочники.ГруппыПисемЭлектроннойПочты.ПустаяСсылка(), ДанныеСтроки.Ссылка));
	Если ТипЗнч(СтатистикаГруппы) = Тип("Число") И СтатистикаГруппы > 0 Тогда
		ОформлениеСтроки.Ячейки.Наименование.Текст = Строка(ДанныеСтроки.Наименование) + " (" + СтатистикаГруппы + ")";
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли; 
		
КонецПроцедуры

// Обработчик события Выбор элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем <> Ложь Тогда
		СтандартнаяОбработка = Ложь;
		ГруппыПисем_ПриАктивизацииСтроки(Элемент);
		ПредметыСписок_ПриАктивизацииСтроки();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоПриАктивизацииСтроки(Элемент)
	
	Если мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем = Ложь Тогда
		ГруппыПисем_ПриАктивизацииСтроки(Элемент);
		ПредметыСписок_ПриАктивизацииСтроки();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Если Элемент.ТекущиеДанные = Неопределено И ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события НачалоПеретаскивания элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ПредметыСписок.
//
Процедура ПредметыСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СтатистикаГруппы = мСтатистикаРассмотренностиПисемПоПредметам.Получить(ДанныеСтроки.ГруппаПисемЭлектроннойПочты);
	Если СтатистикаГруппы <> Неопределено Тогда
		СтатистикаПредмета = СтатистикаГруппы.Получить(ДанныеСтроки.Предмет);
		Если ТипЗнч(СтатистикаПредмета) = Тип("Число") И СтатистикаПредмета > 0 Тогда
			ОформлениеСтроки.Ячейки.Предмет.ОтображатьТекст = Истина;
			Если ЗначениеНеЗаполнено(ДанныеСтроки.Предмет) Тогда
				ОформлениеСтроки.Ячейки.Предмет.Текст = "<Предмет не указан>" + " (" + СтатистикаПредмета + ")";
			Иначе
				ОформлениеСтроки.Ячейки.Предмет.Текст = Строка(ДанныеСтроки.Предмет) + " (" + СтатистикаПредмета + ")";
			КонецЕсли; 
			ОформлениеСтроки.Шрифт = мЖирныйШрифт;
		Иначе
			Если ЗначениеНеЗаполнено(ДанныеСтроки.Предмет) Тогда
				ОформлениеСтроки.Ячейки.Предмет.ОтображатьТекст = Истина;
				ОформлениеСтроки.Ячейки.Предмет.Текст = "<Предмет не указан>";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеНеЗаполнено(ДанныеСтроки.Предмет) Тогда
			ОформлениеСтроки.Ячейки.Предмет.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.Предмет.Текст = "<Предмет не указан>";
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.Скрытый Тогда
		ОформлениеСтроки.Ячейки.Предмет.ЦветТекста = WebЦвета.Серый;
	Иначе
		Если мКнопкаОтображатьСкрытыеПредметыПисем.Пометка Тогда
			ОформлениеСтроки.Ячейки.Предмет.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы ПредметыСписок.
//
Процедура ПредметыСписокПриАктивизацииСтроки(Элемент)
	
	ЗначениеПараметра = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем");
	Если ЗначениеПараметра = Ложь Тогда
		ПредметыСписок_ПриАктивизацииСтроки();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Выбор элемента формы ПредметыСписок.
//
Процедура ПредметыСписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеПараметра = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем");
	Если ЗначениеПараметра <> Ложь Тогда
		ПредметыСписок_ПриАктивизацииСтроки();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента формы ПредметыСписок.
//
Процедура ПредметыСписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение.ПараметрыПеретаскивания;
		
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
			Если ЗначениеПеретаскивания.Количество() = 1 Тогда
				ЗначениеПеретаскивания = ЗначениеПеретаскивания[0];
			Иначе
				Возврат;
			КонецЕсли;
			Если ТипЗнч(ЗначениеПеретаскивания) <> Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли;
		Иначе
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента формы ПредметыСписок.
//
Процедура ПредметыСписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение.ПараметрыПеретаскивания;
		
		Если ТипЗнч(Строка) = Тип("РегистрСведенийКлючЗаписи.ПредметыЭлектронныхПисем") Тогда
			Если ТипЗнч(ЗначениеПеретаскивания) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
				ДокументОбъект = ЗначениеПеретаскивания.ПолучитьОбъект();
				ДокументОбъект.Предмет = Строка.Предмет;
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
				НачатьТранзакцию();
				Отказ = Ложь;
				КоличествоВсего = ЗначениеПеретаскивания.Количество();
				КолТекущийЭлемент = 0;
				Для каждого ЭлементМассива Из ЗначениеПеретаскивания Цикл
					КолТекущийЭлемент = КолТекущийЭлемент + 1;
					Состояние("Обработано: " + КолТекущийЭлемент + " из " + КоличествоВсего);
					Если ТипЗнч(ЭлементМассива) <> Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
						Продолжить;
					КонецЕсли;
					ДокументОбъект = ЭлементМассива.ПолучитьОбъект();
					ДокументОбъект.Предмет = Строка.Предмет;
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						Сообщить(ОписаниеОшибки());
						Отказ = Истина;
						Прервать;
					КонецПопытки;
				КонецЦикла;
				Если Отказ Тогда
					ОтменитьТранзакцию();
				Иначе
					ЗафиксироватьТранзакцию();
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы ПредметыСписок.
//
Процедура ПредметыСписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУстановкойПометкиУдаления элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокПередУстановкойПометкиУдаления(Элемент, Отказ)
	
	Отказ = Истина;
	
	УстановитьПометкуУдаленияЭлектронногоПисьма(Элемент);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиЭлектронногоПисьма(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
	Если ДанныеСтроки.НеРассмотрено И ДанныеСтроки.РассмотретьПосле < ТекущаяДата() Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
		Если ДанныеСтроки.РассмотретьПосле > мПоследняяДатаОбновленияРассмотренностиПисем Тогда
			СобратьСтатистикуРассмотренностиПисем();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	НаписатьНовоеПисьмо(Копирование);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокПриАктивизацииСтроки(Элемент)
	
	ЭлектронныеПисьма_СписокПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокПередНачаломИзменения(Элемент, Отказ)
	
	ПередНачаломИзмененияЭлектронногоПисьма(Элемент, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ, УСТАНАВЛИВАЕМЫХ СОБЫТИЯ ПРОГРАММНО

// Процедура отправляет подготовленные к отправке письма по текущей учетной записи.
//
Процедура ОтправитьУчетнаяЗапись(Кнопка)

	ИД = Сред(СтрЗаменить(Кнопка.Имя, "_", "-"), 2);
	
	Попытка
		ИД = Новый УникальныйИдентификатор(ИД);
	Исключение
		Возврат;
	КонецПопытки;
	
	ТемпУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(ИД);
	
	Если НЕ ЗначениеНеЗаполнено(ТемпУчетнаяЗапись) Тогда
		МассивУчетныхЗаписей = Новый Массив;
		МассивУчетныхЗаписей.Добавить(ТемпУчетнаяЗапись);
		ПолучениеОтправкаПисем(глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь, МассивУчетныхЗаписей,, Истина);
	КонецЕсли; 

	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Процедура получает письма по текущей учетной записи.
//
Процедура ПолучитьУчетнаяЗапись(Кнопка)

	ИД = Сред(СтрЗаменить(Кнопка.Имя, "_", "-"), 2);
	
	Попытка
		ИД = Новый УникальныйИдентификатор(ИД);
	Исключение
		Возврат;
	КонецПопытки;
	
	ТемпУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(ИД);
	
	Если НЕ ЗначениеНеЗаполнено(ТемпУчетнаяЗапись) Тогда
		МассивУчетныхЗаписей = Новый Массив;
		МассивУчетныхЗаписей.Добавить(ТемпУчетнаяЗапись);
		ПолучениеОтправкаПисем(глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь, МассивУчетныхЗаписей,,, Истина);
	КонецЕсли; 

	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Процедура отправляет подготовленные к отправке письма по всем доступным
// для транспорта текущему пользоваетлю учетным записям.
//
Процедура ОтправитьВсе(Кнопка)

	ПолучениеОтправкаПисем(глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь,,, Истина, Ложь);

	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Процедура получает письма по всем доступным
// для транспорта текущему пользоваетлю учетным записям.
//
Процедура ПолучитьВсе(Кнопка)

	ПолучениеОтправкаПисем(глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь,,, Ложь, Истина);

	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Процедура отправляет подготовленные к отправке письма и получает эл.письма
// по всем доступным для транспорта текущему пользоваетлю учетным записям.
//
Процедура ОтправитьПолучитьВсе(Кнопка)

	ПолучениеОтправкаПисем(глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь,,, Истина, Истина);

	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ОСНОВНОЙ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработчик события Нажатие кнопки НовоеПисьмо командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыНовоеПисьмо(Кнопка)
	
	НаписатьНовоеПисьмо();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Ответить командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыОтветить(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		ОтветитьНаПисьмо(глТекущийПользователь, ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка, ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ОтветитьВсем командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыОтветитьВсем(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		ОтветитьВсемНаПисьмо(глТекущийПользователь, ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка, ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Переслать командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПереслать(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		ПереадресоватьПисьмо(глТекущийПользователь, ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка, , ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УчетныеЗаписи командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыУчетныеЗаписи(Кнопка)
	
	Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ОбновитьСписокДоступныхУчетныхЗаписей командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыОбновитьСписокДоступныхУчетныхЗаписей(Кнопка)
	
	ОбновитьДоступныеУчетныеЗаписи();
	
	Если мДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		Предупреждение("Нет доступных учетных записей.");
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли; 
	
	ЭлементыФормы.УчетнаяЗапись.СписокВыбора = мДоступныеУчетныеЗаписи.Скопировать();
	ЭлементыФормы.УчетнаяЗапись.СписокВыбора.Добавить(Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка(), "Все доступные учетные записи");
	
	Если ЭлементыФормы.УчетнаяЗапись.СписокВыбора.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
		УчетнаяЗапись = ЭлементыФормы.УчетнаяЗапись.СписокВыбора[0].Значение;
	КонецЕсли; 
	
	ЗаполнитьПодменюОтправитьПолучить();
	
	УстановитьОтборГрупп();
	
	ЭлементГруппыПисемДерево = ПолучитьЭлементГруппыПисемДерево();
	ГруппыПисем_ПриАктивизацииСтроки(ЭлементГруппыПисемДерево);
	ПредметыСписок_ПриАктивизацииСтроки();
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки АдреснаяКнига командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыАдреснаяКнига(Кнопка)
	
	АдрКнига = Обработки.АдреснаяКнига.Создать();
	Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		АдрКнига.УчетнаяЗапись = УчетнаяЗапись;
	КонецЕсли; 
	АдрКнига.ОткрытаДляВыбора  = Истина;
	АдрКнига.ОткрытиеПриВыборе = Истина;
	АдрКнига.ПолучитьФорму("ФормаВыбора").Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки АвтополучениеПисем командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыАвтополучениеПисем(Кнопка)
	
	Если ТипЗнч(глОбработкаАвтоПолученияОтправкиЭлектронныхПисем) <> Тип("Форма") Тогда
		глОбработкаАвтоПолученияОтправкиЭлектронныхПисем = Обработки.АвтоПолучениеОтправкаЭлектронныхПисем.ПолучитьФорму();
	КонецЕсли;
	
	глОбработкаАвтоПолученияОтправкиЭлектронныхПисем.Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Обновить командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыОбновить(Кнопка)
	
	ОбщееОбновление();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Обновить командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыНовоеПисьмоВТекущейГруппе(Кнопка)
	
	НаписатьНовоеПисьмо(, Истина);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Скопировать командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыСкопировать(Кнопка)
	
	НаписатьНовоеПисьмо(Истина);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Изменить командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыИзменить(Кнопка)
	
	ПередНачаломИзмененияЭлектронногоПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок, Ложь);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьПометкуУдаления командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыУстановитьПометкуУдаления(Кнопка)
	
	УстановитьПометкуУдаленияЭлектронногоПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ПредметыПисем командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПредметыПисем(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	мОтображатьСписокПредметов = Кнопка.Пометка;
	
	СобратьСтатистикуРассмотренностиПисем();
	
	ВидимостьСпискаПредметов();
	УстановитьОтборПредметов();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Отправить командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыОтправить(Кнопка)
	
	Перем МассивУчетныхЗаписей;
	
	Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		МассивУчетныхЗаписей = Новый Массив;
		МассивУчетныхЗаписей.Добавить(УчетнаяЗапись);
	КонецЕсли;
	
	ПолучениеОтправкаПисем(глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь, МассивУчетныхЗаписей,, Истина);
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Получить командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПолучить(Кнопка)
	
	Перем МассивУчетныхЗаписей;
	
	Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		МассивУчетныхЗаписей = Новый Массив;
		МассивУчетныхЗаписей.Добавить(УчетнаяЗапись);
	КонецЕсли;
	
	ПолучениеОтправкаПисем(глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь, МассивУчетныхЗаписей,,, Истина);
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ОткрытьПисьмоПотомок командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыОткрытьПисьмоПотомок(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		НайтиИОткрытьПотомкаПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ПоискПисемПоОбъектам командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоискПисемПоОбъектам(Кнопка)
	
	Обработки.ПоискЭлектронныхПисемПоОбъектам.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ВвестиСобытие командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыВвестиСобытие(Кнопка)
	
	ВвестиСобытиеПоПисьму();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьСнятьПометкуУдаления командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыУстановитьСнятьПометкуУдаления(Кнопка)
	
	УстановитьПометкуУдаленияЭлектронногоПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОНТЕКСТНОГО МЕНЮ СПИСКА ПИСЕМ

// Обработчик события Нажатие кнопки Ответить командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемОтветить(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		ОтветитьНаПисьмо(глТекущийПользователь, ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка, ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ПисемОтветитьВсем командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемОтветитьВсем(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		ОтветитьВсемНаПисьмо(глТекущийПользователь, ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка, ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Переслать командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемПереслать(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		ПереадресоватьПисьмо(глТекущийПользователь, ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка, , ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьРассмотрено командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемУстановитьРассмотрено(Кнопка)
	
	ИзменитьФлагРассмотренностьПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок.ВыделенныеСтроки, Ложь);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьНеРассмотрено командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемУстановитьНеРассмотрено(Кнопка)
	
	ИзменитьФлагРассмотренностьПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок.ВыделенныеСтроки, Истина);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки НовоеПисьмо командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемНовоеПисьмо(Кнопка)
	
	НаписатьНовоеПисьмо();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Скопировать командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемСкопировать(Кнопка)
	
	НаписатьНовоеПисьмо(Истина);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Изменить командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемИзменить(Кнопка)
	
	ПередНачаломИзмененияЭлектронногоПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок, Ложь);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьПометкуУдаления командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемУстановитьПометкуУдаления(Кнопка)
	
	УстановитьПометкуУдаленияЭлектронногоПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ПрименитьКПисьмамФильтры командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемПрименитьКПисьмамФильтры(Кнопка)
	
	ВсегоЭлементов = ЭлементыФормы.ЭлектронныеПисьмаСписок.ВыделенныеСтроки.Количество();
	
	Если ВсегоЭлементов > 0 Тогда
		ОтветНаВопрос = Вопрос("Применить к выбранным письмам фильтры учетных записей?", РежимДиалогаВопрос.ОКОтмена);
		Если ОтветНаВопрос <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	ТекЭлемент = 1;
	Для каждого Строка Из ЭлементыФормы.ЭлектронныеПисьмаСписок.ВыделенныеСтроки Цикл
		Состояние("Обрабатывается " + Строка(ТекЭлемент) + " из " + Строка(ВсегоЭлементов));
		Объект = Строка.ПолучитьОбъект();
		ПрименитьФильтрыКПисьму(Объект, глТекущийПользователь, Истина);
		ТекЭлемент = ТекЭлемент + 1;
	КонецЦикла; 
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ОтправитьВыбранныеПисьма командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемОтправитьВыбранныеПисьма(Кнопка)
	
	ОтветНаВопрос = Вопрос("Хотите отправить выбранные письма?", РежимДиалогаВопрос.ОКОтмена);
	Если ОтветНаВопрос <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	МассивПисем = Новый Массив;
	Для каждого Строка Из ЭлементыФормы.ЭлектронныеПисьмаСписок.ВыделенныеСтроки Цикл
		МассивПисем.Добавить(Строка);
	КонецЦикла; 
	
	ОтправитьПисьма(МассивПисем, глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь);
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки НовоеПисьмоВТекущейГруппе командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемНовоеПисьмоВТекущейГруппе(Кнопка)
	
	НаписатьНовоеПисьмо(, Истина);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ВвестиСобытие командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемВвестиСобытие(Кнопка)
	
	ВвестиСобытиеПоПисьму();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ОткрытьПисьмоПотомок командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемОткрытьПисьмоПотомок(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		НайтиИОткрытьПотомкаПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события Нажатие кнопки НайтиДобавить командной панели КоманднаяПанельКому.
//
Процедура КоманднаяПанельКомуНайтиДобавить(Кнопка)
	
	ПроизвестиПоиск(ЭлементыФормы.ПолеКому.ВыделенныйТекст);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки НайтиДобавить командной панели КоманднаяПанельКопии.
//
Процедура КоманднаяПанельКопииНайтиДобавить(Кнопка)
	
	ПроизвестиПоиск(ЭлементыФормы.ПолеКопии.ВыделенныйТекст);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки НайтиДобавить командной панели КоманднаяПанельОтправитель.
//
Процедура КоманднаяПанельОтправительНайтиДобавить(Кнопка)
	
	ПроизвестиПоиск(ЭлементыФормы.ПолеОтправитель.ВыделенныйТекст);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ОткрытьСсылку командной панели КоманднаяПанельПолеХТМЛ.
//
Процедура КоманднаяПанельПолеХТМЛОткрытьСсылку(Кнопка)
	
	ВыделеннаяКоллекция = ЭлементыФормы.ПолеHTMLДокумента.Документ.selection.createRangeCollection();
	Если ВыделеннаяКоллекция.length > 0 Тогда
		ВыделенныйТекст = ВыделеннаяКоллекция.item(0).text;
		Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
			УчетнаяЗаписьПисьма = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.УчетнаяЗапись;
		КонецЕсли; 
		ПерейтиПоСсылкеИзХТМЛПоля(ВыделенныйТекст, глТекущийПользователь, ЭтаФорма, УчетнаяЗаписьПисьма);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ПереместитьВверх командной панели КоманднаяПанельПорядокГрупп.
//
Процедура КоманднаяПанельПорядокГруппПереместитьВверх(Кнопка)
	
	ЭлементГруппыПисемДерево = ПолучитьЭлементГруппыПисемДерево();
	
	Если ЭлементГруппыПисемДерево.ТекущиеДанные <> Неопределено Тогда
		ИзменитьПорядок(ЭлементГруппыПисемДерево.ТекущиеДанные.Ссылка, "Вверх");
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ПереместитьВниз командной панели КоманднаяПанельПорядокГрупп.
//
Процедура КоманднаяПанельПорядокГруппПереместитьВниз(Кнопка)
	
	ЭлементГруппыПисемДерево = ПолучитьЭлементГруппыПисемДерево();
	
	Если ЭлементГруппыПисемДерево.ТекущиеДанные <> Неопределено Тогда
		ИзменитьПорядок(ЭлементГруппыПисемДерево.ТекущиеДанные.Ссылка, "Вниз");
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ИзменитьНазваниеПредмета командной панели КоманднаяПанельСписокПредметов.
//
Процедура КоманднаяПанельСписокПредметовИзменитьНазваниеПредмета(Кнопка)
	
	Если ЭлементыФормы.ПредметыСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаИзмененияПредмета = ПолучитьФорму("ФормаИзмененияПредмета");
	Если ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование Тогда
		ФормаИзмененияПредмета.ГруппаУчетнойЗаписи = ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение;
		ГруппаПисем = ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение;
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		ФормаИзмененияПредмета.УчетнаяЗапись = УчетнаяЗапись;
	КонецЕсли;
	ФормаИзмененияПредмета.Предмет = ЭлементыФормы.ПредметыСписок.ТекущиеДанные.Предмет;
	
	НовыйПредмет = ФормаИзмененияПредмета.ОткрытьМодально();
	Если НовыйПредмет = Неопределено ИЛИ НЕ Метаданные.Документы.ЭлектронноеПисьмо.Реквизиты.Предмет.Тип.СодержитТип(ТипЗнч(НовыйПредмет)) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Предмет"                    , ЭлементыФормы.ПредметыСписок.ТекущиеДанные.Предмет);
	Запрос.УстановитьПараметр("ГруппаПисемЭлектроннойПочты", ГруппаПисем);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредметыЭлектронныхПисем.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
	|
	|ГДЕ
	|	ПредметыЭлектронныхПисем.Предмет = &Предмет
	|	" + ?(ГруппаПисем <> Неопределено, "И
	|	ПредметыЭлектронныхПисем.ГруппаПисемЭлектроннойПочты = &ГруппаПисемЭлектроннойПочты", "") + "
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Всего = Выборка.Количество();
	ТекНомер = 0;
	Пока Выборка.Следующий() Цикл
	
		ТекНомер = ТекНомер + 1;
		Состояние("Обработано " + ТекНомер + " из " + Всего);
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Предмет = НовыйПредмет;
		Попытка
			Объект.Записать();
		Исключение
			Сообщить("" + Объект + " не изменен, " + ОписаниеОшибки());
		КонецПопытки;
	
	КонецЦикла;
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ПрименитьКПисьмамПапкиФильтры командной панели КоманднаяПанельПорядокГрупп.
//
Процедура КоманднаяПанельПорядокГруппПрименитьКПисьмамПапкиФильтры(Кнопка)
	
	ЭлементГруппыПисемДерево = ПолучитьЭлементГруппыПисемДерево();
	
	Если ЭлементГруппыПисемДерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(ЭлементГруппыПисемДерево.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементГруппыПисемДерево.ТекущиеДанные.Владелец.Ответственный <> глТекущийПользователь Тогда
		Предупреждение("Данная функция доступна только администратору учетной записи.");
		Возврат;
	КонецЕсли;
	
	ФормаПараметров = ЭтотОбъект.ПолучитьФорму("ФормаНастройкиПринудительнойФильтрацииПисем");
	ФормаПараметров.ГруппаПисемДляОбработки = ЭлементГруппыПисемДерево.ТекущиеДанные.Ссылка;
	Запрос = ФормаПараметров.ОткрытьМодально();
	
	Если ТипЗнч(Запрос) = Тип("Запрос") Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		ВсегоЭлементов = Выборка.Количество();
		ТекЭлемент = 1;
		Пока Выборка.Следующий() Цикл
			Состояние("Обрабатывается " + Строка(ТекЭлемент) + " из " + Строка(ВсегоЭлементов));
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			ПрименитьФильтрыКПисьму(Объект, глТекущийПользователь, Истина);
			ТекЭлемент = ТекЭлемент + 1;
		КонецЦикла; 
	КонецЕсли;
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки СнятьОтборПоПредметам командной панели КоманднаяПанельСписокПредметов.
//
Процедура КоманднаяПанельСписокПредметовСнятьОтборПоПредметам(Кнопка)
	
	ЭлектронныеПисьмаСписок.Отбор.Предмет.Использование = Ложь;
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьУбратьСкрытостьПредмета командной панели КоманднаяПанельСписокПредметов.
//
Процедура КоманднаяПанельСписокПредметовУстановитьУбратьСкрытостьПредмета(Кнопка)
	
	Если ЭлементыФормы.ПредметыСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФлагСкрытостиПредмета = НЕ ЭлементыФормы.ПредметыСписок.ТекущиеДанные.Скрытый;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПредметыЭлектронныхПисем.Регистратор
	|ИЗ
	|	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
	|ГДЕ
	|	ПредметыЭлектронныхПисем.Предмет = &Предмет
	|	И
	|	ПредметыЭлектронныхПисем.ГруппаПисемЭлектроннойПочты = &ГруппаПисемЭлектроннойПочты
	|";
	
	Запрос.УстановитьПараметр("Предмет"                    , ЭлементыФормы.ПредметыСписок.ТекущиеДанные.Предмет);
	Запрос.УстановитьПараметр("ГруппаПисемЭлектроннойПочты", ЭлементыФормы.ПредметыСписок.ТекущиеДанные.ГруппаПисемЭлектроннойПочты);
	
	НачатьТранзакцию();
	ОтменаТранзакции = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	ТекНомер = 0;
	Пока Выборка.Следующий() Цикл
		ТекНомер = ТекНомер + 1;
		Состояние("Обработано " + ТекНомер + " из " + Выборка.Количество());
		Набор = РегистрыСведений.ПредметыЭлектронныхПисем.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Значение = Выборка.Регистратор;
		Набор.Прочитать();
		Если Набор.Количество() = 1 И Набор[0].Скрытый <> ФлагСкрытостиПредмета Тогда
			Набор[0].Скрытый = ФлагСкрытостиПредмета;
			Попытка
				Набор.Записать();
			Исключение
				ОтменаТранзакции = Истина;
				СообщитьОбОшибке(ОписаниеОшибки(),, "Изменение не произведено");
				Прервать;
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ОтменаТранзакции Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьУбратьСкрытостьПредмета командной панели ОтображатьСкрытыеПредметы.
//
Процедура КоманднаяПанельСписокПредметовОтображатьСкрытыеПредметы(Кнопка)
	
	мКнопкаОтображатьСкрытыеПредметыПисем.Пометка = НЕ мКнопкаОтображатьСкрытыеПредметыПисем.Пометка;
	
	УстановитьотборСкрытыхПредметов();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки СнятьОтборПоГруппе командной панели КоманднаяПанельПорядокГрупп.
//
Процедура КоманднаяПанельПорядокГруппСнятьОтборПоГруппе(Кнопка)
	
	ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование = Ложь;
	УстановитьОтборПредметов(Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыЭкспортИмпортКонтактнойИнформации(Кнопка)
	
	Обработки.ЭкспортИмпортКонтактныхДанныхОбъектов.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПечать(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка.ПолучитьОбъект().НапечататьПисьмо();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельФормыЗагрузкаПочтовыхСообщений(Кнопка)
	
	Обработка = Обработки.ЗагрузкаПочтовыхСообщений.Создать();
	Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		Обработка.УчетнаяЗапись = УчетнаяЗапись;
	КонецЕсли; 
	Обработка.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки СоздатьФизлицо командной панели КоманднаяПанельСписокПредметов.
//
Процедура КоманднаяПанельСписокПредметовСоздатьФизлицо(Кнопка)
	
	Попытка
		ТекущийПредмет = ЭлементыФормы.ПредметыСписок.ТекущиеДанные.Предмет;
	Исключение
		ТекущийПредмет = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Предмет;
	КонецПопытки;
	
	СоздатьФизлицо(ТекущийПредмет);
	
КонецПроцедуры

Процедура КоманднаяПанельСписокПредметовСоздатьОпрос(Кнопка)
	
	Попытка
		ТекущийПредмет = ЭлементыФормы.ПредметыСписок.ТекущиеДанные.Предмет;
	Исключение
		ТекущийПредмет = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Предмет;
	КонецПопытки;
	СоздатьОпрос(ТекущийПредмет);
	
КонецПроцедуры

Для каждого Реквизит Из Метаданные.Документы.ЭлектронноеПисьмо.Реквизиты Цикл
	ЭлектронныеПисьмаСписок.Колонки.Добавить(Реквизит.Имя, Ложь);
КонецЦикла;

мЖирныйШрифт = Новый Шрифт(,, Истина);

ГруппыПисемДерево.Колонки.Добавить("Владелец"                 , Ложь);
ГруппыПисемДерево.Колонки.Добавить("Порядок"                  , Ложь);
ГруппыПисемДерево.Колонки.Добавить("ИспользоватьПредметыПисем", Ложь);

ПредметыСписок.Колонки.Добавить("ГруппаПисемЭлектроннойПочты", Ложь);
ПредметыСписок.Колонки.Добавить("Скрытый", Ложь);

мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем");
