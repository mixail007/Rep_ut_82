////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// Процедура осуществляет выполнение операции над устройством
//
// Параметры
//  ИмяОперации – <Строка>
//              – имя выполняемой операции; для данного класса устройств
//                доступны следующие операции:
//                1. "Подключить"
//                2. "Отключить"
//                3. "ОчиститьПамятьТерминала"
//                4. "ПолучитьСписокТаблиц"
//                5. "ВыгрузитьДанные"
//                6. "ЗагрузитьДанные"
//
//  Параметры   – <Структура> 
//              – структура, содержащая параметры операции
//
//  Ответ       - <Строка>
//              - выходной параметр; описание ошибки, если она произошла, 
//                или "" в случае успешного завершения
//
Процедура ВыполнитьОперацию(ИмяОперации, Параметры, Ответ) Экспорт

	Перем Объект, Модель, Данные, НомерЛУ, Индекс;

	Параметры.Свойство("Объект" , Объект );
	Параметры.Свойство("НомерЛУ", НомерЛУ);

	Если ЗначениеНеЗаполнено(НомерЛУ) Тогда
		НомерЛУ = 1;
	КонецЕсли;

	Если ИмяОперации = "Подключить" Тогда

		Параметры.Свойство("Модель", Модель);

		Ответ = Подключить(Модель.ВнешняяКомпонента,
		                   Модель.ПрограммныйИдентификатор,
						   Объект,
						   НомерЛУ);

		Параметры.Вставить("Объект", Объект);

	ИначеЕсли ИмяОперации = "Отключить" Тогда

		Ответ = Отключить(Объект, НомерЛУ);

	ИначеЕсли ИмяОперации = "ОчиститьПамятьТерминала" Тогда

		Ответ = ОчиститьПамятьТерминала(Объект, НомерЛУ);
		
	ИначеЕсли ИмяОперации = "ПолучитьСписокТаблиц" Тогда
		
		Ответ = ПолучитьСписокТаблиц(Объект, НомерЛУ, Данные);
		
		Параметры.Вставить("Таблицы", Данные);

	ИначеЕсли ИмяОперации = "ВыгрузитьДанные" Тогда
		
		Параметры.Свойство("Данные", Данные);
		Параметры.Свойство("Таблица", Индекс);
		Ответ = ВыгрузитьДанные(Объект, НомерЛУ, Индекс, Данные);
		
	ИначеЕсли ИмяОперации = "ЗагрузитьДанные" Тогда 
		
		Параметры.Свойство("Таблица", Индекс);
		Ответ = ЗагрузитьДанные(Объект, НомерЛУ, Индекс, Данные);
		Параметры.Вставить("Данные", Данные);
	Иначе

		Ответ = "Передана неизвестная команда";

	КонецЕсли;

КонецПроцедуры // ВыполнитьОперацию()

// Процедура возвращает параметры драйвера устройства, с которым работает форма
//
// Параметры
//  Вид                      – <ПеречислениеСсылка.ВидыТорговогоОборудования> 
//                           – выходной параметр; вид обслуживаемого торгового
//                             оборудования
//
//  ВнешняяКомпонента        – <Строка> 
//                           – выходной параметр; имя файла драйвера
//
//  ПрограммныйИдентификатор – <Строка> 
//                           – выходной параметр; программный идентификатор,
//                             используемый при создании экземпляра драйвера
//
//  Модели                   – <СписокЗначений> 
//                           – выходной параметр; список модедей устройств,
//                             обслуживаемых данной формой
//
Процедура ПолучитьПараметры(Вид, ВнешняяКомпонента, ПрограммныйИдентификатор,
	                        Модели) Экспорт

	Вид                      = 
		Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных;
	ВнешняяКомпонента        = "PDX1C.dll";
	ПрограммныйИдентификатор = "PDX45";
	Модели                   = Новый СписокЗначений;

	Модели.Добавить("04000", "Casio DT-900");
	Модели.Добавить("04001", "Casio DT-X10");
	Модели.Добавить("04002", "Casio DT-X5");
	Модели.Добавить("04003", "Casio IT-10");
	Модели.Добавить("04004", "Casio IT-3000");
	Модели.Добавить("04005", "Casio IT-500");
	Модели.Добавить("04006", "CipherLab CPT-711");
	Модели.Добавить("04008", "CipherLab CPT-720");
	Модели.Добавить("04010", "CipherLab CPT-8000");
	Модели.Добавить("04011", "CipherLab CPT-8001");
	Модели.Добавить("04013", "CipherLab CPT-8110 (через базовую станцию CPT-3510)");
	Модели.Добавить("04014", "CipherLab CPT-8300");
	Модели.Добавить("04016", "CipherLab CPT-8310 (через базовую станцию CPT-3510)");
	Модели.Добавить("04020", "Symbol MC-50");
	Модели.Добавить("04021", "Symbol PPT-8800");
	Модели.Добавить("04022", "Symbol SPT-1550");
	Модели.Добавить("04023", "Symbol SPT-1800");
	Модели.Добавить("04024", "Zebex PDL-20");
	Модели.Добавить("04027", "Zebex Z-1050");
	Модели.Добавить("04028", "КПК под управлением «АТОЛ: Mobile Logistics»");


КонецПроцедуры // ПолучитьПараметры()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция представляет реализацию операции "Подключить"
//
// Параметры
//  Компонента               – <Строка> 
//                           – имяя файла внешней компоненты, реализующей
//                             драйвер обслуживаемого устройства
//
//  ПрограммныйИдентификатор – <Строка> 
//                           – программный идентификатор, используемый при
//                             создании экземпляра объекта драйвера
//
//  Объект                   – <НеизвестныйОбъект> 
//                           – выходной параметр; экземпляр объекта драйвера
//
//  НомерЛУ                  – <Число> 
//                           – номер логического устройства
//
// Возвращаемое значение:
//  <Строка>                 – описание ошибки, если она произошла, или 
//                             "" в случае успешного завершения
//
Функция Подключить(Компонента, ПрограммныйИдентификатор, Объект, НомерЛУ)
	
	Перем Ответ;
	
	Ответ = "";

	Попытка
		ЗагрузитьВнешнююКомпоненту(Компонента);
	Исключение
		Ответ = "не удалось загрузить внешнюю компоненту """ + Компонента + """";
		Возврат Ответ;
	КонецПопытки;

	Попытка
		Объект = Новый("AddIn." + ПрограммныйИдентификатор);
	Исключение
		Ответ = "не удалось создать объект внешней компоненты с программым идентификатром AddIn." 
		        + ПрограммныйИдентификатор;
		Возврат Ответ;
	КонецПопытки;

	Объект.НомерТекущегоУстройства = НомерЛУ;
	Если Объект.УстройствоВключено = 1 Тогда
		Возврат Ответ;
	КонецЕсли;

	Объект.УстройствоВключено = 1;
	Если Объект.Результат <> 0 Тогда
		Ответ = Объект.ОписаниеРезультата;
		Возврат Ответ;
	КонецЕсли;

	Возврат Ответ;

КонецФункции // Подключить()

// Функция представляет реализацию операции "Отключить"
//
// Параметры
//  Объект   – <НеизвестныйОбъект> 
//           – экземпляр объекта драйвера
//
//  НомерЛУ  – <Число> 
//           – номер логического устройства
//
// Возвращаемое значение:
//  <Строка> – описание ошибки, если она произошла, или 
//             "" в случае успешного завершения
//
Функция Отключить(Объект, НомерЛУ)

	Перем Ответ;
	
	Ответ = "";
	
	Если Объект = Неопределено Тогда
		Возврат Ответ;
	КонецЕсли;

	Объект.НомерТекущегоУстройства = НомерЛУ;
	Объект.УстройствоВключено = 0;
	
	Если Объект.Результат <> 0 Тогда
		Ответ = Объект.ОписаниеРезультата;
		Возврат Ответ;
	КонецЕсли;

	Возврат Ответ;

КонецФункции // Отключить()

// Функция представляет реализацию операции "ОчиститьПамятьТерминала"
//
// Параметры
//  Объект   – <НеизвестныйОбъект> 
//           – экземпляр объекта драйвера
//
//  НомерЛУ  – <Число> 
//           – номер логического устройства
//
// Возвращаемое значение:
//  <Строка> – описание ошибки, если она произошла, или 
//             "" в случае успешного завершения
//
Функция ОчиститьПамятьТерминала(Объект, НомерЛУ)

	Перем Ответ;
	
	Ответ = "";
	
	Если Объект = Неопределено Тогда
		Ответ = "устройство не подключено";
		Возврат Ответ;
	КонецЕсли;

	Объект.НомерТекущегоУстройства = НомерЛУ;
	Если Объект.Результат <> 0 Тогда
		Ответ = Объект.ОписаниеРезультата;
		Возврат Ответ;
	КонецЕсли;
	
	Если Объект.УстройствоВключено = 0 Тогда
		Объект.УстройствоВключено = 1;
		Если Объект.Результат <> 0 Тогда
			Ответ = Объект.ОписаниеРезультата;
			Возврат Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Очистить() <> 0 Тогда
		Ответ = Объект.ОписаниеРезультата;
		Возврат Ответ;
	КонецЕсли;

	Возврат Ответ;

КонецФункции // ОчиститьПамятьТерминала()

// Функция представляет реализацию операции "ПолучитьСписокТаблиц"
//
// Параметры
//  Объект   – <НеизвестныйОбъект> 
//           – экземпляр объекта драйвера
//
//  НомерЛУ  – <Число> 
//           – номер логического устройства
//
//  Список   – <СписокЗначений> 
//           – выходной параметр; список таблиц терминала
//
// Возвращаемое значение:
//  <Строка> – описание ошибки, если она произошла, или 
//             "" в случае успешного завершения
//
Функция ПолучитьСписокТаблиц(Объект, НомерЛУ, Список)

	Перем Индекс;
	Перем Ответ;
	
	Список = Неопределено;
	Ответ  = "";
	
	Если Объект = Неопределено Тогда
		Ответ = "устройство не подключено";
		Возврат Ответ;
	КонецЕсли;

	Объект.НомерТекущегоУстройства = НомерЛУ;
	Если Объект.Результат <> 0 Тогда
		Ответ = Объект.ОписаниеРезультата;
		Возврат Ответ;
	КонецЕсли;
	
	Список = Новый СписокЗначений();
	Для Индекс = 0 По 15 Цикл
		Список.Добавить(Индекс, "Таблица " + Строка(Индекс + 1));
	КонецЦикла;
	
	Возврат Ответ;

КонецФункции // ПолучитьСписокТаблиц()

// Функция представляет реализацию операции "ВыгрузитьДанные"
//
// Параметры
//  Объект   – <НеизвестныйОбъект> 
//           – экземпляр объекта драйвера
//
//  НомерЛУ  – <Число> 
//           – номер логического устройства
//
//  Таблица  – <Число> 
//           – таблица терминала сбора данных
//
//  Данные   – <ТаблицаЗначений> 
//           – данные, записываемые в терминала
//
// Возвращаемое значение:
//  <Строка> – описание ошибки, если она произошла, или 
//             "" в случае успешного завершения
//
Функция ВыгрузитьДанные(Объект, НомерЛУ, Таблица, Данные)

	Перем СтрокаДанных;
	Перем Колонка;
	Перем Ответ;
	
	Ответ = "";
	
	Если Объект = Неопределено Тогда
		Ответ = "устройство не подключено";
		Возврат Ответ;
	КонецЕсли;

	Объект.НомерТекущегоУстройства = НомерЛУ;
	Если Объект.Результат <> 0 Тогда
		Ответ = Объект.ОписаниеРезультата;
		Возврат Ответ;
	КонецЕсли;
	
	Если Объект.УстройствоВключено = 0 Тогда
		Объект.УстройствоВключено = 1;
		Если Объект.Результат <> 0 Тогда
			Ответ = Объект.ОписаниеРезультата;
			Возврат Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Объект.НомерФормы       = Таблица;
	Объект.ПоказатьПрогресс = 1;
	
	Если Объект.НачатьДобавление() = 0 Тогда
		Для Каждого СтрокаДанных Из Данные Цикл
			Для Каждого Колонка Из Данные.Колонки Цикл
				Объект.ИндексПоляОтчета = Число(Колонка.Заголовок) - 1;
				Объект.ПолеОтчета       = СтрокаДанных[Колонка.Имя];
			КонецЦикла;
			Если Объект.УстановитьЗапись() <> 0 Тогда
				Ответ = Объект.ОписаниеРезультата;
				Возврат Ответ;
			КонецЕсли;
		КонецЦикла;
		Если Объект.ЗакончитьДобавление() <> 0 тогда
			Ответ = Объект.ОписаниеРезультата;
			Возврат Ответ;
		КонецЕсли;
	Иначе
		Ответ = Объект.ОписаниеРезультата;
		Возврат Ответ;
	КонецЕсли;
	
	Возврат Ответ;	

КонецФункции // ВыгрузитьДанные()

// Функция представляет реализацию операции "ЗагрузитьДанные"
//
// Параметры
//  Объект   – <НеизвестныйОбъект> 
//           – экземпляр объекта драйвера
//
//  НомерЛУ  – <Число> 
//           – номер логического устройства
//
//  Таблица  – <Число> 
//           – таблица терминала сбора данных
//
//  Данные   – <ТаблицаЗначений> 
//           – выходной параметр; данные, считанные из терминала
//
// Возвращаемое значение:
//  <Строка> – описание ошибки, если она произошла, или 
//             "" в случае успешного завершения
//
Функция ЗагрузитьДанные(Объект, НомерЛУ, Таблица, Данные)

	Перем Ответ;
	Перем Столбцов;
	Перем Индекс;
	Перем Поле;
	Перем СтрокаДанных;
	Перем ОписаниеТипаСтрока;
	
	Ответ              = "";
	Данные             = Новый ТаблицаЗначений();
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	
	Если Объект = Неопределено Тогда
		Ответ = "устройство не подключено";
		Возврат Ответ;
	КонецЕсли;
	
	Объект.НомерТекущегоУстройства = НомерЛУ;
	Если Объект.Результат <> 0 Тогда
		Ответ = Объект.ОписаниеРезультата;
		Возврат Ответ;
	КонецЕсли;
	
	Если Объект.УстройствоВключено = 0 Тогда
		Объект.УстройствоВключено = 1;
		Если Объект.Результат <> 0 Тогда
			Ответ = Объект.ОписаниеРезультата;
			Возврат Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ПоказатьПрогресс = 1;
	Если Объект.Результат <> 0 Тогда
		Ответ = Объект.ОписаниеРезультата;
		Возврат Ответ;
	КонецЕсли;
	
	Объект.НомерФормы = Таблица;
	Если Объект.Результат <> 0 Тогда
		Ответ = Объект.ОписаниеРезультата;
		Возврат Ответ;
	КонецЕсли;

	Если Объект.НачалоОтчета() <> 0 Тогда
		Ответ = Объект.ОписаниеРезультата;
		Возврат Ответ;
	КонецЕсли;
	
	Столбцов = Объект.КоличествоПолейОтчета;
	Для Индекс = 1 По Столбцов Цикл
		Поле = Формат(Индекс, "ЧЦ=10; ЧДЦ=0; ЧН=0");
		Данные.Колонки.Добавить("Поле" + Поле, ОписаниеТипаСтрока, Поле);
	КонецЦикла;
	
	Пока Объект.ПолучитьЗапись() = 0 Цикл
		СтрокаДанных = Данные.Добавить();
		Для Индекс = 1 По Столбцов Цикл
			Поле                        = Формат(Индекс, "ЧЦ=10; ЧДЦ=0; ЧН=0");
			Объект.ИндексПоляОтчета     = Индекс - 1;
			СтрокаДанных["Поле" + Поле] = Объект.ПолеОтчета;
		КонецЦикла;
	КонецЦикла;
	
	Если Объект.КонецОтчета() <> 0 Тогда
		Ответ = Объект.ОписаниеРезультата;
	КонецЕсли;
	
	Возврат Ответ;	

КонецФункции // ЗагрузитьДанные()
