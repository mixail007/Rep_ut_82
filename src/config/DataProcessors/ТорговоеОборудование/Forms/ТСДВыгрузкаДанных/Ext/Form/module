Перем мДанныеСоответствиеПолей;
Перем мИспользоватьХарактеристики;
Перем мИспользоватьСерии;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "ДействияФормы"

// Процедура - обработчик события "ПриНажатии" кнопки "Заполнить"
// командной панели "ДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)

	Перем Запрос;
	Перем СтрокаОтбора;
	Перем Товар;
	Перем Число;
	Перем ШК;
	Перем Префикс;
	Перем ДлинаКода;
	Перем Вес;
	Перем Индекс;
	Перем МаксЗнач;
	Перем Цена;
	Перем Дата;

	Если ЭлементыФормы.ФлажокНастройкиГруппа.Значение
	     И ЗначениеНеЗаполнено(ЭлементыФормы.ПолеВидаСравненияГруппа.Значение) Тогда
		ЭлементыФормы.ФлажокНастройкиГруппа.Значение = Ложь;
	КонецЕсли;

	Если ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение
	     И ЗначениеНеЗаполнено(ЭлементыФормы.ПолеВидаСравненияНоменклатура.Значение) Тогда
		ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение = Ложь;
	КонецЕсли;

	Если ЭлементыФормы.ФлажокНастройкиСклад.Значение
	     И ЗначениеНеЗаполнено(ЭлементыФормы.ПолеВидаСравненияСклад.Значение) Тогда
		ЭлементыФормы.ФлажокНастройкиСклад.Значение = Ложь;
	КонецЕсли;

	Если ЭлементыФормы.ФлажокНастройкиТипЦен.Значение
	     И ЗначениеНеЗаполнено(ЭлементыФормы.ПолеВидаСравненияТипЦен.Значение) Тогда
		ЭлементыФормы.ФлажокНастройкиТипЦен.Значение = Ложь;
	КонецЕсли;

	Запрос = Новый Запрос(
	// Основная часть запроса
	// Основная часть запроса
	"ВЫБРАТЬ
	|	ИСТИНА КАК ВЫгружать,
	|	Номенклатура1.Код КАК КодНоменклатуры,
	|	Номенклатура1.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Номенклатура1.Ссылка КАК Номенклатура,
	|	Штрихкоды.Штрихкод,
	|	Номенклатура1.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	Номенклатура1.Артикул КАК Артикул,
	|	0 КАК Цена
	|ПОМЕСТИТЬ Врем
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Номенклатура1.Ссылка = Штрихкоды.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Врем.ВЫгружать,
	|	Врем.КодНоменклатуры,
	|	Врем.НоменклатурнаяГруппа,
	|	Врем.Номенклатура,
	|	Врем.Штрихкод,
	|	Врем.ЕдиницаИзмерения,
	|	Врем.Артикул,
	|	Врем.Цена
	|ИЗ
	|	Врем КАК Врем
	|ГДЕ
	|	Врем.Номенклатура.ПометкаУдаления = ЛОЖЬ");

	Запрос.УстановитьПараметр("НТТ", Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	//Если Не мИспользоватьХарактеристики Тогда
		Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	//КонецЕсли;
	//Если Не мИспользоватьСерии Тогда
		Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	//КонецЕсли;
	Если ЭлементыФормы.ФлажокНастройкиГруппа.Значение Тогда
		Запрос.Текст = Запрос.Текст + "
		|   И Врем.Номенклатура.НоменклатурнаяГруппа" + ПолучитьСтрокуЗапроса(ЭлементыФормы.ПолеВидаСравненияГруппа.Значение,
		                                                               "&Группа");
		Запрос.УстановитьПараметр("Группа", ЭлементыФормы.ПолеНастройкиГруппа.Значение);
	КонецЕсли;
	Если ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение Тогда
		Запрос.Текст = Запрос.Текст + "
		|   И Врем.Номенклатура.ВидТовара" + ПолучитьСтрокуЗапроса(ЭлементыФормы.ПолеВидаСравненияНоменклатура.Значение,
		                                                               "&ВидТовара");
		Запрос.УстановитьПараметр("ВидТовара", ЭлементыФормы.ПолеНастройкиНоменклатура.Значение);
	КонецЕсли;
	//Если ЭлементыФормы.ФлажокНастройкиСклад.Значение Тогда
	//	Запрос.Текст = Запрос.Текст + "
	//	|   И Врем.Номенклатура.Склад" + ПолучитьСтрокуЗапроса(ЭлементыФормы.ПолеВидаСравненияСклад.Значение,
	//													"&Склад");
	//	Запрос.УстановитьПараметр("Склад", ЭлементыФормы.ПолеНастройкиСклад.Значение);
	//КонецЕсли;
	//Если ЭлементыФормы.ФлажокНастройкиТипЦен.Значение Тогда
	//	Запрос.Текст = Запрос.Текст + "
	//	|   И СпрЦены.Ссылка" + ПолучитьСтрокуЗапроса(ЭлементыФормы.ПолеВидаСравненияТипЦен.Значение,
	//																   "&ТипЦен");
	//	Запрос.УстановитьПараметр("ТипЦен", ЭлементыФормы.ПолеНастройкиТипЦен.Значение);
	//КонецЕсли;
	СписокТоваров = Запрос.Выполнить().Выгрузить();
	Число         = Тип("Число");
	//Префикс       = "2" + Константы.ПрефиксШтучногоТовара.Получить();
	//ДлинаКода     = Константы.ДлинаКодаВесовогоТовара.Получить();
	//МаксЗнач      = 10 - ДлинаКода;
	//Вес           = "";
	//Для Индекс = 1 По МаксЗнач Цикл
	//	Вес = Вес + "0";
	//КонецЦикла;
	//ДлинаКода     = Формат(ДлинаКода, "ЧГ=0");
	Дата          = ТекущаяДата();
	Для Каждого Товар Из СписокТоваров Цикл
		
		
		Товар.Цена = 0;
		Если Товар.Штрихкод = null Тогда
				
		Если стрДлина(Товар.КодНоменклатуры)<7 тогда
	        код1 = Формат(число(Товар.КодНоменклатуры), "ЧЦ=7; ЧВН=");
        иначе 
	        код1 = Товар.КодНоменклатуры;
        КонецЕсли;	
	
        ШтрихКод = "05000"+ код1;
        ШтрихКод = ШтрихКод + КонтрольныйСимволEAN(ШтрихКод, 13);

		
		//ШК = Префикс + Формат(Товар.Штрихкод, "ЧЦ=" + ДлинаКода + "; ЧВН=; ЧГ=0") + Вес;
		Товар.Штрихкод = ШтрихКод;
		КонецЕсли;
	КонецЦикла;
	//СписокТоваров.Свернуть("Штрихкод","Выгружать, КодНоменклатуры, НоменклатурнаяГруппа, Номенклатура, ЕдиницаИзмерения,Артикул,Цена"); 
	
	Запрос = Новый Запрос;
	Таблица = СписокТоваров.Скопировать();
	менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = менеджер;
	Запрос.УстановитьПараметр("Таб",Таблица);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Выгружать,
	               |	Таб.КодНоменклатуры,
	               |	Таб.НоменклатурнаяГруппа,
	               |	Таб.Номенклатура,
	               |	Таб.Артикул,
	               |	Таб.Цена,
	               |	Таб.Штрихкод,
	               |	Таб.ЕдиницаИзмерения
	               |ПОМЕСТИТЬ врем
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	врем.Выгружать,
	               |	МАКСИМУМ(врем.КодНоменклатуры) КАК КодНоменклатуры,
	               |	МАКСИМУМ(врем.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
	               |	МАКСИМУМ(врем.Номенклатура) КАК Номенклатура,
	               |	МАКСИМУМ(врем.Артикул) КАК Артикул,
	               |	МАКСИМУМ(врем.Цена) КАК Цена,
	               |	врем.Штрихкод,
	               |	МАКСИМУМ(врем.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	               |ИЗ
	               |	врем КАК врем
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	врем.Выгружать,
	               |	врем.Штрихкод";
	УстановитьДоступностьКнопок();
	СписокТоваров.Очистить();
	СписокТоваров = Запрос.Выполнить().Выгрузить();

КонецПроцедуры // ДействияФормыЗаполнить()

// Процедура - обработчик события "ПриНажатии" кнопки "Настройки"
// командной панели "ДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "Настройки"
//
Процедура ДействияФормыНастройки(Кнопка)

	Перем ПанельНастроек;
	Перем Верх;
	Перем Нет;

	ПанельНастроек = ЭлементыФормы.ПанельНастроек;
	Верх           = РежимСверткиЭлементаУправления.Верх;
	Нет            = РежимСверткиЭлементаУправления.Нет;

	ПанельНастроек.Свертка = ?(ПанельНастроек.Свертка = Верх, Нет, Верх);

КонецПроцедуры // ДействияФормыНастройки()

// Процедура - обработчик события "ПриНажатии" кнопки "Отбор"
// командной панели "ДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "Отбор"
//
Процедура ДействияФормыОтбор(Кнопка)

	Перем ПанельОтбора;
	Перем Верх;
	Перем Нет;

	ПанельОтбора   = ЭлементыФормы.ПанельОтбор;
	Верх           = РежимСверткиЭлементаУправления.Верх;
	Нет            = РежимСверткиЭлементаУправления.Нет;

	ПанельОтбора.Свертка = ?(ПанельОтбора.Свертка = Верх, Нет, Верх);

КонецПроцедуры // ДействияФормыОтбор()

// Процедура - обработчик события "ПриНажатии" кнопки "ЗагрузитьСписокТаблиц"
// командной панели "ДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "ЗагрузитьСписокТаблиц"
//
Процедура ДействияФормыЗагрузитьСписокТаблиц(Кнопка)

	Перем Модель;
	Перем ОбработкаОбслуживания;
	Перем Параметры;
	Перем Ответ;

	Если ЗначениеНеЗаполнено(ТекущийТСД) Тогда
		СообщитьОбОшибке("Не задан терминал сбора данных");
	Иначе
		ЭлементыФормы.ПолеВыбораТаблицыТСД.СписокВыбора.Очистить();

		ЭлементыФормы.ПолеВыбораТаблицыТСД.Значение    = Неопределено;
		ЭлементыФормы.ПолеВыбораТаблицыТСД.Доступность = Ложь;
		Модель                                         = ТекущийТСД.Модель;
		Параметры                                      = Новый Структура();
		ОбработкаОбслуживания                          =
			глТорговоеОборудование.ПолучитьФормуОбработки(
				Модель.ОбработкаОбслуживания);
		Параметры.Вставить("Объект",  ТекущийТСД.Объект);
		Параметры.Вставить("НомерЛУ", ТекущийТСД.НомерЛУ);

		ОбработкаОбслуживания.ВыполнитьОперацию("ПолучитьСписокТаблиц",
		                                        Параметры,
		                                        Ответ);
		Если ПустаяСтрока(Ответ) Тогда
			ЭлементыФормы.ПолеВыбораТаблицыТСД.СписокВыбора = Параметры.Таблицы;
			ЭлементыФормы.ПолеВыбораТаблицыТСД.Доступность  = Истина;

			глТорговоеОборудование.ТСДПолучитьПараметрыПоУмолчанию(
				Модель, ТекущийФорматВыгрузки, ТекущаяТаблицаТСД);
			ПолеВыбораТаблицыТСДПриИзменении(ЭлементыФормы.ПолеВыбораТаблицыТСД);
		Иначе
			Предупреждение("Не удалось загрузить список таблиц!");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДействияФормыЗагрузитьСписокТаблиц()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "КомандыТоваров"

// Процедура - обработчик события "ПриНажатии" кнопки "ВыделитьВсе"
// командной панели "КомандыТоваров"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "ВыделитьВсе"
//
Процедура КомандыТоваровВыделитьВсе(Кнопка)

	СписокТоваров.ЗаполнитьЗначения(Истина, "Выгружать");

КонецПроцедуры // КомандыТоваровВыделитьВсе()

// Процедура - обработчик события "ПриНажатии" кнопки "ОчиститьВыделение"
// командной панели "КомандыТоваров"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "ОчиститьВыделение"
//
Процедура КомандыТоваровОчиститьВыделение(Кнопка)

	СписокТоваров.ЗаполнитьЗначения(Ложь, "Выгружать");

КонецПроцедуры // КомандыТоваровОчиститьВыделение()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "ОсновныеДействияФормы"

// Процедура - обработчик события "ПриНажатии" кнопки "Выгрузить"
// командной панели "ОсновныеДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "Выгрузить"
//
Процедура ОсновныеДействияФормыВыгрузить(Кнопка)

	Перем ТСДТаблицаВыгрузки;
	Перем ТСДСтрокаВыгрузки;
	Перем ТСДСоответствиеПолей;
	Перем ОписаниеТипаСтрока;
	Перем СвязываемыеПоля;
	Перем СтрокаФормата;
	Перем СтрокаДанных;
	Перем Индекс;
	Перем КолонкаДанных;
	Перем Данные;
	Перем ЗаголовокПоля;
	Перем Обработка;
	Перем Параметры;
	Перем Ответ;
	Перем Флаг;
	
	Если ЗначениеНеЗаполнено(ТекущийТСД) Тогда
		Ответ = " - Не выбран терминал сбора данных";
	Иначе
		Ответ = "";
	КонецЕсли;

	//Если ЗначениеНеЗаполнено(ТекущийФорматВыгрузки) Тогда
	//	Если Не ПустаяСтрока(Ответ) Тогда
	//		Ответ = Ответ + "
	//		|";
	//	КонецЕсли;
	//	Ответ = Ответ + " - Не выбран формат выгрузки";
	//КонецЕсли;

	Если ТекущаяТаблицаТСД = Неопределено Тогда
		Если Не ПустаяСтрока(Ответ) Тогда
			Ответ = Ответ + "
			|";
		КонецЕсли;
		Ответ = Ответ + " - Не выбрана таблица терминала";
	КонецЕсли;

	Флаг = Истина;
	Для Каждого СтрокаДанных Из СписокТоваров Цикл
		Если СтрокаДанных.Выгружать Тогда
			Флаг = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Флаг Тогда
		Если Не ПустаяСтрока(Ответ) Тогда
			Ответ = Ответ + "
			|";
		КонецЕсли;
		Ответ = Ответ + " - Нечего выгружать";
	КонецЕсли;

	Если ПустаяСтрока(Ответ) Тогда
		ОписаниеТипаСтрока   = Новый ОписаниеТипов("Строка");
		ТСДТаблицаВыгрузки   = Новый ТаблицаЗначений();
		ТСДСоответствиеПолей = Новый Соответствие();
		
		
		
		СвязываемыеПоля   =   Новый ТаблицаЗначений;
		СвязываемыеПоля.Колонки.Добавить("ПараметрНоменклатуры");
		СвязываемыеПоля.Колонки.Добавить("ПолеТСД");
		
		Строка = СвязываемыеПоля.Добавить();
		строка.ПараметрНоменклатуры = "ШтрихКод";         
		строка.ПолеТСД = 1;
		Строка = СвязываемыеПоля.Добавить();
		строка.ПараметрНоменклатуры = "НоменклатураНаименование";
		строка.ПолеТСД = 2;
		Строка = СвязываемыеПоля.Добавить();
		строка.ПараметрНоменклатуры = "НоменклатураЦена";
		строка.ПолеТСД = 3;
		//Строка = СвязываемыеПоля.Добавить();
		//строка.ПараметрНоменклатуры = "НоменклатураЦена";
		//строка.ПолеТСД = 4;
		//
		Для Каждого СтрокаФормата Из СвязываемыеПоля Цикл
			
			ЗаголовокПоля = Формат(СтрокаФормата.ПолеТСД, "ЧЦ=10; ЧДЦ=0; ЧН=0");
			ТСДСоответствиеПолей.Вставить(СтрокаФормата.ПараметрНоменклатуры,
			                              ТСДТаблицаВыгрузки.Колонки.Индекс(
			                                  ТСДТаблицаВыгрузки.Колонки.Добавить(
			                                      "Поле" + ЗаголовокПоля,
			                                      ОписаниеТипаСтрока,
			                                      ЗаголовокПоля)));
		КонецЦикла;

		Для Каждого СтрокаДанных Из СписокТоваров Цикл
		
			Если СтрокаДанных.Выгружать Тогда
				ТСДСтрокаВыгрузки = ТСДТаблицаВыгрузки.Добавить();
				
				Для Индекс = 1 По СписокТоваров.Колонки.Количество() Цикл
					
					Данные        = СтрокаДанных[Индекс - 1];
					КолонкаДанных = СписокТоваров.Колонки[Индекс - 1];
					КолонкаДанных = мДанныеСоответствиеПолей[КолонкаДанных.Заголовок];
					КолонкаДанных = ТСДСоответствиеПолей[КолонкаДанных];
					
					Если КолонкаДанных <> Неопределено Тогда
						ТСДСтрокаВыгрузки[КолонкаДанных] = Данные;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		
		КонецЦикла;

		Обработка = глТорговоеОборудование.ПолучитьФормуОбработки(
			ТекущийТСД.Модель.ОбработкаОбслуживания);

		Параметры = Новый Структура();
		Параметры.Вставить("Объект",  ТекущийТСД.Объект);
		Параметры.Вставить("НомерЛУ", ТекущийТСД.НомерЛУ);
		Параметры.Вставить("Таблица", ТекущаяТаблицаТСД);
		Параметры.Вставить("Данные",  ТСДТаблицаВыгрузки);

		Обработка.ВыполнитьОперацию("ВыгрузитьДанные", Параметры, Ответ);
		Если ЗначениеНеЗаполнено(Ответ) Тогда
			Сообщить("Выгрузка успешно завершена. Выгружено " 
			         + ТСДТаблицаВыгрузки.Количество() 
			         + " строк");
		Иначе
			СообщитьОбОшибке("Данные выгрузить не удалось: " + Ответ);
		КонецЕсли;
	Иначе
		СообщитьОбОшибке("Невозможно осуществить выгрузку по следующим причинам:
		                 |" + Ответ);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПАНЕЛИ "Настройки"

// Процедура - обработчик события "ПриИзменении" поля выбора "ПолеВыбораТерминала"
//
// Параметры
//  Элемент - <ПолеВыбора>
//          - поле выбора "ПолеВыбораТерминала"
//
Процедура ПолеВыбораТерминалаПриИзменении(Элемент)

	ЭлементыФормы.ПолеВыбораТаблицыТСД.СписокВыбора.Очистить();
	ЭлементыФормы.ПолеВыбораТаблицыТСД.Значение    = Неопределено;
	ЭлементыФормы.ПолеВыбораТаблицыТСД.Доступность = Ложь;

КонецПроцедуры // ПолеВыбораТерминалаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора "ПолеВыбораТаблицыТСД"
//
// Параметры
//  Элемент - <ПолеВыбора>
//          - поле выбора "ПолеВыбораТаблицыТСД"
//
Процедура ПолеВыбораТаблицыТСДПриИзменении(Элемент)

	УстановитьДоступностьКнопок();
	глТорговоеОборудование.ТСДСохранитьПараметрыПоУмолчанию(
		ТекущийТСД.Модель, ТекущийФорматВыгрузки, ТекущаяТаблицаТСД);

КонецПроцедуры // ПолеВыбораТаблицыТСДПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ПолеВводаФормата"
//
// Параметры
//  Элемент - <ПолеВвода>
//          - поле ввода "ПолеВводаФормата"
//
Процедура ПолеВводаФорматаПриИзменении(Элемент)

	УстановитьДоступностьКнопок();
	глТорговоеОборудование.ТСДСохранитьПараметрыПоУмолчанию(
		ТекущийТСД.Модель, ТекущийФорматВыгрузки, ТекущаяТаблицаТСД);

КонецПроцедуры // ПолеВводаФорматаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПАНЕЛИ "Отбор"

// Процедура - обработчик события "ПриИзменении" поля выбора 
// "ПолеВидаСравненияСклад"
//
// Параметры
//  Элемент - <ПолеВыбора>
//          - поле выбора "ПолеВидаСравненияСклад"
//
Процедура ПолеВидаСравненияСкладПриИзменении(Элемент)

	ОбработатьИзменениеВидаСравнения(Элемент, "СправочникСсылка.Склады");

КонецПроцедуры // ПолеВидаСравненияСкладПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора 
// "ПолеВидаСравненияТипЦен"
//
// Параметры
//  Элемент - <ПолеВыбора>
//          - поле выбора "ПолеВидаСравненияТипЦен"
//
Процедура ПолеВидаСравненияТипЦенПриИзменении(Элемент)

	ОбработатьИзменениеВидаСравнения(Элемент, "СправочникСсылка.ТипыЦенНоменклатуры");

КонецПроцедуры // ПолеВидаСравненияТипЦенПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора 
// "ПолеВидаСравненияНоменклатура"
//
// Параметры
//  Элемент - <ПолеВыбора>
//          - поле выбора "ПолеВидаСравненияНоменклатура"
//
Процедура ПолеВидаСравненияНоменклатураПриИзменении(Элемент)

	ОбработатьИзменениеВидаСравнения(Элемент, "ПеречислениеСсылка.ВидыТоваров");

КонецПроцедуры // ПолеВидаСравненияНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора 
// "ПолеВидаСравненияГруппа"
//
// Параметры
//  Элемент - <ПолеВыбора>
//          - поле выбора "ПолеВидаСравненияГруппа"
//
Процедура ПолеВидаСравненияГруппаПриИзменении(Элемент)

	ОбработатьИзменениеВидаСравнения(Элемент, "СправочникСсылка.НоменклатурныеГруппы");

КонецПроцедуры // ПолеВидаСравненияГруппаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода 
// "ПолеНастройкиСклад"
//
// Параметры
//  Элемент - <ПолеВвода>
//          - поле ввода "ПолеНастройкиСклад"
//
Процедура ПолеНастройкиСкладПриИзменении(Элемент)

	СписокТоваров.Очистить();
	УстановитьДоступностьКнопок();

КонецПроцедуры // ПолеНастройкиСкладПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода 
// "ПолеНастройкиТипЦен"
//
// Параметры
//  Элемент - <ПолеВвода>
//          - поле ввода "ПолеНастройкиТипЦен"
//
Процедура ПолеНастройкиТипЦенПриИзменении(Элемент)

	СписокТоваров.Очистить();
	УстановитьДоступностьКнопок();

КонецПроцедуры // ПолеНастройкиТипЦенПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода 
// "ПолеНастройкиНоменклатура"
//
// Параметры
//  Элемент - <ПолеВвода>
//          - поле ввода "ПолеНастройкиНоменклатура"
//
Процедура ПолеНастройкиНоменклатураПриИзменении(Элемент)

	СписокТоваров.Очистить();
	УстановитьДоступностьКнопок();

КонецПроцедуры // ПолеНастройкиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода 
// "ПолеНастройкиГруппа"
//
// Параметры
//  Элемент - <ПолеВвода>
//          - поле ввода "ПолеНастройкиГруппа"
//
Процедура ПолеНастройкиГруппаПриИзменении()

	СписокТоваров.Очистить();
	УстановитьДоступностьКнопок();

КонецПроцедуры // ПолеНастройкиГруппаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
// Параметры
//  Отказ                – <Булево> 
//                       – признак отказа от открытия формы; если в теле 
//                         процедуры-обработчика установить данному параметру 
//                         значение Истина, открытие формы выполнено не будет.
//
//  СтандартнаяОбработка – <Булево> 
//                       –  в данный параметр передается признак выполнения 
//                          стандартной (системной) обработки события; если в 
//                          теле процедуры-обработчика установить данному 
//                          параметру значение Ложь, стандартная обработка 
//                          события производиться не будет. Отказ от 
//                          стандартной обработки не отменяет открытие формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если глТорговоеОборудование = Неопределено Тогда
		СообщитьОбОшибке("Торговое оборудование не подключено");
		Отказ = Истина;
	ИначеЕсли глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		СообщитьОбОшибке("Терминал сбора данных не подключен");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
// Параметры
//  Нет
//
Процедура ПриОткрытии()
	
	Перем СписокТерминалов;
	Перем ЭлементСписка;
	Перем Терминал;
	Перем ОдинТСД;
	Перем Колонка;
	
	СписокТерминалов = Новый СписокЗначений();
	Для Каждого Терминал Из глТорговоеОборудование.млТерминал Цикл
		ЭлементСписка = Новый Структура();
		
		ЭлементСписка.Вставить("Модель",  Терминал.Модель);
		ЭлементСписка.Вставить("НомерЛУ", Терминал.НомерЛУ);
		ЭлементСписка.Вставить("Объект",  Терминал.Объект);
		
		СписокТерминалов.Добавить(ЭлементСписка, ЭлементСписка.Модель);
	КонецЦикла;
		
	//Если Не мИспользоватьСерии Тогда
		Колонка                   = ЭлементыФормы.ПолеТовары.Колонки["Серия"];
		Колонка.Видимость         = Ложь;
		Колонка.ИзменятьВидимость = Ложь;
	//КонецЕсли;
	
	//Если Не мИспользоватьХарактеристики Тогда
		Колонка                   = ЭлементыФормы.ПолеТовары.Колонки["Характеристика"];
		Колонка.Видимость         = Ложь;
		Колонка.ИзменятьВидимость = Ложь;
	//КонецЕсли;
	
	ОдинТСД = (СписокТерминалов.Количество() = 1);
	ЭлементыФормы.ПолеВыбораТерминала.СписокВыбора   = СписокТерминалов;
	ТекущийТСД                                       = 
		СписокТерминалов[0].Значение;
	ЭлементыФормы.ПолеВыбораТерминала.ТолькоПросмотр = ОдинТСД;
	
	ПолеВыбораТерминалаПриИзменении(ЭлементыФормы.ПолеВыбораТерминала);
	
	ЭлементыФормы.ПанельОтбор.Свертка                = РежимСверткиЭлементаУправления.Верх;
	ЭлементыФормы.ПанельНастроек.Свертка             = РежимСверткиЭлементаУправления.Нет;
	ЗаполнитьПолеВидаСравнения(ЭлементыФормы.ПолеВидаСравненияСклад);
	ЗаполнитьПолеВидаСравнения(ЭлементыФормы.ПолеВидаСравненияТипЦен);
	ЗаполнитьПолеВидаСравнения(ЭлементыФормы.ПолеВидаСравненияНоменклатура);
	ЗаполнитьПолеВидаСравнения(ЭлементыФормы.ПолеВидаСравненияГруппа);

КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция возвращает строку запроса товаров, соответствующую отбору
//
// Параметры
//  Сравнение    - <ВидСравнения>
//               - Вид сравнения при отборе.
//
//  Параметр     - <Строка>
//               - Имя параметра запроса.
//
// Возвращаемое значение:
//  <Строка>     - Строка, которую можно добавить в конец запроса.
//
Функция ПолучитьСтрокуЗапроса(Сравнение, Параметр)

	Результат = "";

	Если Сравнение = ВидСравнения.Больше Тогда
		Результат = " > " + Параметр;
	ИначеЕсли Сравнение = ВидСравнения.БольшеИлиРавно Тогда
		Результат = " >= " + Параметр;
	ИначеЕсли Сравнение = ВидСравнения.ВСписке Тогда
		Результат = " В (" + Параметр + ")";
	ИначеЕсли Сравнение = ВидСравнения.Меньше Тогда
		Результат = " < " + Параметр;
	ИначеЕсли Сравнение = ВидСравнения.МеньшеИлиРавно Тогда
		Результат = " <= " + Параметр;
	ИначеЕсли Сравнение = ВидСравнения.НеВСписке Тогда
		Результат = " НЕ В (" + Параметр + ")";
	ИначеЕсли Сравнение = ВидСравнения.НеРавно Тогда
		Результат = " <> " + Параметр;
	ИначеЕсли Сравнение = ВидСравнения.Равно Тогда
		Результат = " = " + Параметр;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСтрокуЗапроса()

// Процедура устанавливает доступность кнопок командной панели "КомандыТоваров"
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьКнопок()
	
	Перем Кнопки;
	Перем Количество;
	
	Кнопки                                 = ЭлементыФормы.КомандыТоваров.Кнопки;
	Количество                             = СписокТоваров.Количество();	
	Кнопки.ВыделитьВсе.Доступность         = (Количество <> 0);
	Кнопки.ОчиститьВыделение.Доступность   = (Количество <> 0);

КонецПроцедуры // УстановитьДоступностьКнопок()

// Процедура осуществляет настройку поля выбора вида сравнения
//
// Параметры
//  Поле - <ПолеВыбора>
//       - поле выбора вида сравнения
//
Процедура ЗаполнитьПолеВидаСравнения(Поле)

	Поле.СписокВыбора.Добавить(ВидСравнения.Равно);
	Поле.СписокВыбора.Добавить(ВидСравнения.НеРавно);
	Поле.СписокВыбора.Добавить(ВидСравнения.ВСписке);
	Поле.СписокВыбора.Добавить(ВидСравнения.НеВСписке);
	Поле.СписокВыбора.Добавить(ВидСравнения.Больше);
	Поле.СписокВыбора.Добавить(ВидСравнения.БольшеИлиРавно);
	Поле.СписокВыбора.Добавить(ВидСравнения.Меньше);
	Поле.СписокВыбора.Добавить(ВидСравнения.МеньшеИлиРавно);

КонецПроцедуры // ЗаполнитьПолеВидаСравнения()

// Процедура осуществляет обработку изменения вида сравнения
//
// Параметры
//  Элемент - <ПолеВыбора>
//          - поле выбора, соответствующее виду сравнения
//
//  ИмяТипа - <Строка>
//          - имя типа данных сравниваемого значения
//
Процедура ОбработатьИзменениеВидаСравнения(Элемент, ИмяТипа)

	Перем ИмяПараметра;
	Перем Флажок;
	Перем ПолеНастройки;

	ИмяПараметра    = СтрЗаменить(Элемент.Имя, "ПолеВидаСравнения", "");
	Флажок          = ЭлементыФормы["ФлажокНастройки" + ИмяПараметра];
	ПолеНастройки   = ЭлементыФормы["ПолеНастройки" + ИмяПараметра];

	Если Элемент.Значение = ВидСравнения.Больше
		Или Элемент.Значение = ВидСравнения.Больше
		Или Элемент.Значение = ВидСравнения.БольшеИлиРавно
		Или Элемент.Значение = ВидСравнения.Меньше
		Или Элемент.Значение = ВидСравнения.МеньшеИлиРавно
		Или Элемент.Значение = ВидСравнения.НеРавно
		Или Элемент.Значение = ВидСравнения.Равно Тогда

		ПолеНастройки.ТипЗначения       = Новый ОписаниеТипов(ИмяТипа);
		Флажок.Значение                 = Истина;

	ИначеЕсли Элемент.Значение = ВидСравнения.ВСписке
		Или Элемент.Значение = ВидСравнения.НеВСписке Тогда

		ПолеНастройки.ТипЗначения       = Новый ОписаниеТипов("СписокЗначений");
		ПолеНастройки.ТипЗначенияСписка = Новый ОписаниеТипов(ИмяТипа);
		Флажок.Значение                 = Истина;
	Иначе
		Флажок.Значение                 = Ложь;
	КонецЕсли;

	СписокТоваров.Очистить();
	УстановитьДоступностьКнопок();

КонецПроцедуры // ОбработатьИзменениеВидаСравнения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДанныеСоответствиеПолей = Новый Соответствие();
мДанныеСоответствиеПолей.Вставить(
	"Качество",
	"Качество");
мДанныеСоответствиеПолей.Вставить(
	"Количество",
	"КоличествоНаСкладе");
мДанныеСоответствиеПолей.Вставить(
	"Артикул",
	"НоменклатураАртикул");
мДанныеСоответствиеПолей.Вставить(
	"ЕдиницаИзмерения",
	"НоменклатураИзмерение");
мДанныеСоответствиеПолей.Вставить(
	"КодНоменклатуры",
	"НоменклатураКод");
мДанныеСоответствиеПолей.Вставить(
	"Номенклатура",
	"НоменклатураНаименование");
мДанныеСоответствиеПолей.Вставить(
	"Серия",
	"НоменклатураСерия");
мДанныеСоответствиеПолей.Вставить(
	"Характеристика",
	"НоменклатураХарактеристика");
мДанныеСоответствиеПолей.Вставить(
	"Цена",
	"НоменклатураЦена");
мДанныеСоответствиеПолей.Вставить(
	"Штрихкод",
	"ШтрихКод");

//мИспользоватьХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
//мИспользоватьСерии          = Константы.ИспользоватьСерииНоменклатуры.Получить();
