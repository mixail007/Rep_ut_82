// Подключение терминала сбора данных
//
// Параметры:
//  Компонента   - внешняя компонента
//  ПрограммныйИдентификатор - пароль пользователя
//  Объект       - возвращаемый объект подключенного торгового оборудования
//  НомерЛУ      - номер логического устройства с который связан Объект
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция Подключить(Компонента, ПрограммныйИдентификатор, Объект, НомерЛУ)

	Попытка
		ЗагрузитьВнешнююКомпоненту(Компонента);
	Исключение
		ОписаниеРезультата = "не удалось загрузить внешнюю компоненту """ + Компонента + """";
		Возврат ОписаниеРезультата;
	КонецПопытки;

	Попытка
		Объект = Новый("AddIn." + ПрограммныйИдентификатор);
	Исключение
		ОписаниеРезультата = "не удалось создать объект внешней компоненты с программым идентификатром AddIn." + ПрограммныйИдентификатор;
		Возврат ОписаниеРезультата;
	КонецПопытки;

	Объект.НомерТекущегоУстройства = НомерЛУ;
	Если Объект.УстройствоВключено = 1 Тогда
		Возврат "";
	КонецЕсли;

	Объект.УстройствоВключено = 1;
	Если Объект.Результат <> 0 Тогда
		ОписаниеРезультата = Объект.ОписаниеРезультата;
		Возврат ОписаниеРезультата;
	КонецЕсли;

	Возврат "";

КонецФункции // Подключить()

// Отключение терминала сбора данных
//
// Параметры:
//  Объект       - объект подключенного торгового оборудования
//  НомерЛУ      - номер логического устройства с который связан Объект
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция Отключить(Объект, НомерЛУ)

	// если нет объекта, то ничего не нужно отключать
	Если Объект = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	Объект.НомерТекущегоУстройства = НомерЛУ;
	Объект.УстройствоВключено = 0;
	Если Объект.Результат <> 0 Тогда
		ОписаниеРезультата = Объект.ОписаниеРезультата;
		Возврат ОписаниеРезультата;
	КонецЕсли;

	Возврат "";

КонецФункции // Отключить()

// Получаем данные из терминала 
//
// Параметры:
//  Объект       - объект подключенного торгового оборудования
//  Данные       - полученные данные из терминала
//  НомерЛУ      - номер логического устройства с который связан Объект
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ЗагрузитьДанныеИзТерминала(Объект, Данные, НомерЛУ)

	Если Объект = Неопределено Тогда
		ОписаниеРезультата = "устройство не подключено";
		Возврат ОписаниеРезультата;
	КонецЕсли;

	Объект.НомерТекущегоУстройства = НомерЛУ;
	Объект.ПоказатьПрогресс = 1;
	Если Объект.Результат <> 0 Тогда
		ОписаниеРезультата = Объект.ОписаниеРезультата;
		Возврат ОписаниеРезультата;
	КонецЕсли;

	// инициируем выборку из терминала
	Если Объект.НачалоОтчета() <> 0 Тогда
		ОписаниеРезультата = Объект.ОписаниеРезультата;
		Возврат ОписаниеРезультата;
	КонецЕсли;

	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Штрихкод"  );
	Данные.Колонки.Добавить("Количество");

	Пока Объект.ПолучитьЗапись() = 0 Цикл
		Стр = Данные.Добавить();
		Стр.Штрихкод   = Объект.Поле1;
		Стр.Количество = ?(Объект.Поле2 = "", 0, Число(Объект.Поле2));
	КонецЦикла;

	Данные.Свернуть("Штрихкод", "Количество");

	Если Объект.КонецОтчета() <> 0 Тогда
		ОписаниеРезультата = Объект.ОписаниеРезультата;
		Возврат ОписаниеРезультата;
	КонецЕсли;

	Возврат "";

КонецФункции // Загрузить()

//  Очищает память терминала
//
// Параметры:
//  Объект       - объект подключенного торгового оборудования
//  НомерЛУ      - номер логического устройства с который связан Объект
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ОчиститьПамятьТерминала(Объект, НомерЛУ)

	Если Объект = Неопределено Тогда
		ОписаниеРезультата = "устройство не подключено";
		Возврат ОписаниеРезультата;
	КонецЕсли;

	Объект.НомерТекущегоУстройства = НомерЛУ;
	Если Объект.Очистить() <> 0 Тогда
		ОписаниеРезультата = Объект.ОписаниеРезультата;
		Возврат ОписаниеРезультата;
	КонецЕсли;

	Возврат "";

КонецФункции // Очистить()

// обработка вызова операции на весах
//
// Параметры:
//  ИмяОперации  - имя выполняемой операции
//  Параметры    - структура с параметрами торгового оборудования
//  Ответ        - возвращаемая строка с представлением ошибки если она произошла, иначе пустая строка
//
Процедура ВыполнитьОперацию(ИмяОперации = "", Параметры, Ответ) Экспорт
	Перем Объект, Модель, Данные, НомерЛУ;

	Параметры.Свойство("Объект" , Объект );
	Параметры.Свойство("НомерЛУ", НомерЛУ);

	Если ЗначениеНеЗаполнено(НомерЛУ) Тогда
		НомерЛУ = 1;
	КонецЕсли;

	Если ИмяОперации = "Подключить" Тогда

		Параметры.Свойство("Модель", Модель);

		Ответ = Подключить(Модель.ВнешняяКомпонента, Модель.ПрограммныйИдентификатор, Объект, НомерЛУ);

		Параметры.Вставить("Объект", Объект);

	ИначеЕсли ИмяОперации = "Отключить" Тогда

		Ответ = Отключить(Объект, НомерЛУ);

	ИначеЕсли ИмяОперации = "ЗагрузитьДанныеИзТерминала" Тогда

		Ответ = ЗагрузитьДанныеИзТерминала(Объект, Данные, НомерЛУ);

		Параметры.Вставить("Данные", Данные);

	ИначеЕсли ИмяОперации = "ОчиститьПамятьТерминала" Тогда

		Ответ = ОчиститьПамятьТерминала(Объект, НомерЛУ);

	Иначе

		Ответ = "Передана неизвестная команда";

	КонецЕсли;

КонецПроцедуры // ВыполнитьОперацию()

// возвращает параметры для текущий обработки
//
Процедура ПолучитьПараметры(Вид, ВнешняяКомпонента, ПрограммныйИдентификатор, Модели) Экспорт

	Вид                      = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных;
	ВнешняяКомпонента        = "Terminals.dll";
	ПрограммныйИдентификатор = "Terminals";

	Модели = Новый СписокЗначений;
	Модели.Добавить("ТСДО1","Opticon серии PHL под управлением TASK-M версии 3.0");
	Модели.Добавить("ТСДО2","Opticon серии OPL под управлением TASK-M версии 3.0");
	Модели.Добавить("ТСДО3","Opticon DWT7133 под управлением TASK-M версии 3.0");

КонецПроцедуры
