////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем млИмяТекущегоКомпьютера;
Перем млТекущаяСтрокаТаблицы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Возвращает вид торгового оборудования в текущей строки
//
// Возвращаемое значение:
//  Ссылка на Перечисления.ВидыТорговогоОборудования
//
Функция ПолучитьТекущийВидТорговогоОборудования()

	Если ЭлементыФормы.ТабличноеПоле.ТекущиеДанные = Неопределено Тогда
		ВидТО = Перечисления.ВидыТорговогоОборудования.ПустаяСсылка();
	Иначе
		ВидТО = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Вид;
	КонецЕсли;

	Возврат ВидТО;

КонецФункции // ПолучитьТекущийВидТорговогоОборудования()

// Проверка доступности элементов формы
//
Процедура ПроверкаДоступностиПрефиксов()

	ЭлементыФормы.НадписьПрефикс.Доступность = ИспользоватьПрефикс;
	ЭлементыФормы.Префикс.Доступность        = ИспользоватьПрефикс;

КонецПроцедуры // ПроверкаДоступностиПрефиксов()

// Управляет доступностью полей в форме
//
Процедура ПроверкаПолей()

	ВидТО = ПолучитьТекущийВидТорговогоОборудования();

	ЭлементыФормы.ПанельПараметровТорговогоОборудования.Видимость = Истина;

	Если ВидТО = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда

		ЭлементыФормы.ПанельПараметровТорговогоОборудования.ТекущаяСтраница = ЭлементыФормы.ПанельПараметровТорговогоОборудования.Страницы["СканерШтрихКода"];
		НомерЛУСканера                                                      = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.НомерЛУ;
		ПроверкаДоступностиПрефиксов();

	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.РидерМагнитныхКарт Тогда

		ЭлементыФормы.ПанельПараметровТорговогоОборудования.ТекущаяСтраница = ЭлементыФормы.ПанельПараметровТорговогоОборудования.Страницы["РидерМагнитныхКарт"];

		ЭлементыФормы.ИсточникДанных.СписокВыбора.Очистить();
		ЭлементыФормы.ИсточникДанных.СписокВыбора.Добавить(0, "Все данные");
		ЭлементыФормы.ИсточникДанных.СписокВыбора.Добавить(1, "Дорожка №1");
		ЭлементыФормы.ИсточникДанных.СписокВыбора.Добавить(2, "Дорожка №2");
		ЭлементыФормы.ИсточникДанных.СписокВыбора.Добавить(3, "Дорожка №3");

		Если ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Параметр1 <> "" Тогда
			ИсточникДанных                                                  = Число(ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Параметр1);
		Иначе
			ИсточникДанных                                                  = 0;
			ЗапомнитьЗначение("Параметр1", ИсточникДанных);
		КонецЕсли;

	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор Тогда

		ЭлементыФормы.ПанельПараметровТорговогоОборудования.ТекущаяСтраница = ЭлементыФормы.ПанельПараметровТорговогоОборудования.Страницы["ФискальныйРегистратор"];
		НомерЛУФР                                                           = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.НомерЛУ;
		ДляПриемаНаличныхОтЮрЛиц                                            = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Параметр3;
		
	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ККТсПередачейДанных Тогда

		ЭлементыФормы.ПанельПараметровТорговогоОборудования.ТекущаяСтраница = ЭлементыФормы.ПанельПараметровТорговогоОборудования.Страницы["ККТсПередачейДанных"];
		НомерЛУККТ                                                          = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.НомерЛУ;
		ДляПриемаНаличныхОтЮрЛицККТ                                         = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Параметр3;

	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя Тогда

		ЭлементыФормы.ПанельПараметровТорговогоОборудования.ТекущаяСтраница = ЭлементыФормы.ПанельПараметровТорговогоОборудования.Страницы["ДисплейПокупателя"];
		НомерЛУДП                                                           = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.НомерЛУ;
		БегущаяСтрока                                                       = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Параметр1;
		ИнформационнаяСтрока1                                               = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Параметр2;
		ИнформационнаяСтрока2                                               = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Параметр3;

	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ККМOffLine Тогда

		ЭлементыФормы.ПанельПараметровТорговогоОборудования.ТекущаяСтраница = ЭлементыФормы.ПанельПараметровТорговогоОборудования.Страницы["ККМOffLine"];
		НомерЛУOffLine                                                      = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.НомерЛУ;
		КаталогОбменаДанными                                                = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Параметр1;
		АдресOffline                                                        = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Параметр2;
		ПортOffline                                                         = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Параметр3;
		Если НЕ ЗначениеНеЗаполнено(ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Модель)
		   И ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Модель.ОбработкаОбслуживания = Перечисления.ОбработкиТорговогоОборудования.off_UniFO_L Тогда
			ЭлементыФормы.АдресOffLine.Видимость = Истина;
			ЭлементыФормы.НадписьАдрес.Видимость = Истина;
			ЭлементыФормы.ПортOffLine.Видимость  = Истина;
			ЭлементыФормы.НадписьПорт.Видимость  = Истина;
		Иначе
			ЭлементыФормы.АдресOffLine.Видимость = Ложь;
			ЭлементыФормы.НадписьАдрес.Видимость = Ложь;
			ЭлементыФормы.ПортOffLine.Видимость  = Ложь;
			ЭлементыФормы.НадписьПорт.Видимость  = Ложь;
		КонецЕсли;

	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ККМOnLine Тогда

		ЭлементыФормы.ПанельПараметровТорговогоОборудования.ТекущаяСтраница = ЭлементыФормы.ПанельПараметровТорговогоОборудования.Страницы["ККМOnLine"];
		ЗаводскойНомерККМ                                                   = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.НомерЛУ;

	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда

		ЭлементыФормы.ПанельПараметровТорговогоОборудования.ТекущаяСтраница = ЭлементыФормы.ПанельПараметровТорговогоОборудования.Страницы["ТерминалСбораДанных"];
		НомерЛУТерминала                                                    = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.НомерЛУ;

	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ЭлектронныеВесы Тогда

		ЭлементыФормы.ПанельПараметровТорговогоОборудования.ТекущаяСтраница = ЭлементыФормы.ПанельПараметровТорговогоОборудования.Страницы["ЭлектронныеВесы"];
		НомерЛУВесов                                                        = ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.НомерЛУ;

	Иначе

		ЭлементыФормы.ПанельПараметровТорговогоОборудования.Видимость       = Ложь;

	КонецЕсли;

	млТекущаяСтрокаТаблицы = ЭлементыФормы.ТабличноеПоле.ТекущаяСтрока;

КонецПроцедуры // ПроверкаПолей()

// Загружает модели из регистра сведений
//
Процедура ЗагрузитьВсеМодели()

	ТабличноеПоле.Очистить();

	ТорговоеОборудование = РегистрыСведений.ТорговоеОборудование;
	Оборудование = ТорговоеОборудование.Выбрать();
	Пока Оборудование.Следующий() Цикл
		Если Врег(Оборудование.Компьютер) = Врег(млИмяТекущегоКомпьютера) Тогда

			Параметры = ЗначениеИзСтрокиВнутр(Оборудование.Параметры);
			ВидТО     = Оборудование.МодельТорговогоОборудования.ВидТорговогоОборудования;

			НоваяСтрока = ТабличноеПоле.Добавить();
			НоваяСтрока.Подключено = Оборудование.Подключено;
			НоваяСтрока.Модель     = Оборудование.МодельТорговогоОборудования;
			НоваяСтрока.КассаККМ   = Оборудование.КассаККМ;
			НоваяСтрока.НомерЛУ    = Оборудование.НомерЛогическогоУстройства;
			НоваяСтрока.Вид        = ВидТО;

			Если ВидТО = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор Тогда

				Параметры.Свойство("ДляПриемаНаличныхОтЮрЛиц"  , НоваяСтрока.Параметр3);
			ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.РидерМагнитныхКарт Тогда

				Параметры.Свойство("ИсточникДанных"      , НоваяСтрока.Параметр1);

			ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя Тогда

				Параметры.Свойство("БегущаяСтрока"             , НоваяСтрока.Параметр1);
				Параметры.Свойство("ИнформационнаяСтрока1"     , НоваяСтрока.Параметр2);
				Параметры.Свойство("ИнформационнаяСтрока2"     , НоваяСтрока.Параметр3);

			ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ККМOffLine Тогда

				Параметры.Свойство("КаталогОбменаДанными"      , НоваяСтрока.Параметр1);
				Параметры.Свойство("Адрес"                     , НоваяСтрока.Параметр2);
				Параметры.Свойство("Порт"                      , НоваяСтрока.Параметр3);

			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

	ТабличноеПоле.Сортировать("Вид, Модель");

КонецПроцедуры // ЗагрузитьВсеМодели()

// Запись параметров модели торгового оборудования в таблицу
//
// Параметры:
//  ПараметрИзТабличнойЧасти - название поля табличной части куда будет записано значение
//  Значение     - значение, которое будет записано
//
Процедура ЗапомнитьЗначение(ПараметрИзТабличнойЧасти = "", Значение = "")

	Если Не ПустаяСтрока(ПараметрИзТабличнойЧасти) Тогда
		Если Не (млТекущаяСтрокаТаблицы = Неопределено) Тогда

			млТекущаяСтрокаТаблицы[ПараметрИзТабличнойЧасти] = Значение;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗапомнитьЗначение()

// Открывает диалог выбора каталога.
//
// Параметры:
//  Элемент      - элемент управления, для которого выбираем файл
//
Процедура ВыборКаталога(Элемент)

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);

	ДиалогВыбораКаталога.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораКаталога.ИндексФильтра           = 0;
	ДиалогВыбораКаталога.Каталог                 = Элемент.Значение;

	Если ДиалогВыбораКаталога.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбораКаталога.Каталог;
	КонецЕсли;

КонецПроцедуры // ВыборКаталога()

// Сообщает об успешно подключенном оборудовании.
//
Процедура СообщитьОПодключении()

	ПодключилиНовоеТО = Ложь;

	Если глТорговоеОборудование <> Неопределено Тогда

		Если глТорговоеОборудование.млДП <> Неопределено Тогда
			Если глТорговоеОборудование.млДП.Количество() > 0 Тогда

				ПодключилиНовоеТО = Истина;
				Для Каждого ДисплейПокупателя Из глТорговоеОборудование.млДП Цикл
					Сообщить("Дисплей покупателя """     + ДисплейПокупателя.Модель     + """ успешно подключен." , СтатусСообщения.Информация);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
		Если глТорговоеОборудование.млККМOnLine <> Неопределено Тогда
			Если глТорговоеОборудование.млККМOnLine.Количество() > 0 Тогда

				ПодключилиНовоеТО = Истина;
				Для Каждого ККМOnLine Из глТорговоеОборудование.млККМOnLine Цикл
					Сообщить("ККМ On-Line """            + ККМOnLine.Модель             + """ успешно подключена.", СтатусСообщения.Информация);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
		Если глТорговоеОборудование.млККМOffLine <> Неопределено Тогда
			Если глТорговоеОборудование.млККМOffLine.Количество() > 0 Тогда

				ПодключилиНовоеТО = Истина;
				Для Каждого ККМOffLine Из глТорговоеОборудование.млККМOffLine Цикл
					Сообщить("ККМ Off-Line """           + ККМOffLine.Модель            + """ успешно подключена.", СтатусСообщения.Информация);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
		Если глТорговоеОборудование.млСШК <> Неопределено Тогда
			Если глТорговоеОборудование.млСШК.Количество() > 0 Тогда

				ПодключилиНовоеТО = Истина;
				Для Каждого СканерШтрихКода Из глТорговоеОборудование.млСШК Цикл
					Сообщить("Сканер штрих-кодов """     + СканерШтрихКода.Модель       + """ успешно подключен." , СтатусСообщения.Информация);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
		Если глТорговоеОборудование.млРМК <> Неопределено Тогда
			Если глТорговоеОборудование.млРМК.Количество() > 0 Тогда

				ПодключилиНовоеТО = Истина;
				Для Каждого РидерМагнитныхКарт Из глТорговоеОборудование.млРМК Цикл
					Сообщить("Ридер магнитных карт """     + РидерМагнитныхКарт.Модель       + """ успешно подключен." , СтатусСообщения.Информация);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
		Если глТорговоеОборудование.млТерминал <> Неопределено Тогда
			Если глТорговоеОборудование.млТерминал.Количество() > 0 Тогда

				ПодключилиНовоеТО = Истина;
				Для Каждого Терминал Из глТорговоеОборудование.млТерминал Цикл
					Сообщить("Терминал сбора данных """  + Терминал.Модель              + """ успешно подключен." , СтатусСообщения.Информация);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
		Если глТорговоеОборудование.млФР <> Неопределено Тогда
			Если глТорговоеОборудование.млФР.Количество() > 0 Тогда

				ПодключилиНовоеТО = Истина;
				Для Каждого ФискальныйРегистратор Из глТорговоеОборудование.млФР Цикл
					Сообщить("Фискальный регистратор """ + ФискальныйРегистратор.Модель + """ успешно подключен." , СтатусСообщения.Информация);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
		Если глТорговоеОборудование.млВесы <> Неопределено Тогда
			Если глТорговоеОборудование.млВесы.Количество() > 0 Тогда

				ПодключилиНовоеТО = Истина;
				Для Каждого Весы Из глТорговоеОборудование.млВесы Цикл
					Сообщить("Электронные весы """       + Весы.Модель                  + """ успешно подключены.", СтатусСообщения.Информация);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если ПодключилиНовоеТО Тогда
		Сообщить("Параметры компонент устанавливаются на соответствующей закладке (меню Сервис\Параметры)", СтатусСообщения.Внимание);
	КонецЕсли;

КонецПроцедуры // СообщитьОПодключении()

// Процедура принятия измениний, произошедших в форме
//
// Параметры:
//  Ошибка       - признак, была ли ошибка при выполнении процедуры
//
Процедура ПринятьИзменения(Ошибка = Ложь)

	ПрошлаПроверкаНаУникальность = Истина;
	Для Каждого Строка Из ТабличноеПоле Цикл
		ТекущаяВнешняяКомпонента = Строка.Модель.ВнешняяКомпонента;
		ТекущийНомерЛУ = Строка.НомерЛУ;
		Если ТекущийНомерЛУ = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Для Каждого СтрокаПроверки Из ТабличноеПоле Цикл
			Если СтрокаПроверки = Строка Тогда
				Продолжить;
			ИначеЕсли ЗначениеНеЗаполнено(СтрокаПроверки.Модель) Тогда
				Продолжить;
			ИначеЕсли СтрокаПроверки.Модель.ВнешняяКомпонента <> ТекущаяВнешняяКомпонента Тогда
				Продолжить;
			ИначеЕсли ТекущийНомерЛУ <> СтрокаПроверки.НомерЛУ Тогда
				Продолжить;
			Иначе
				Сообщить("Для модели """+Строка.Модель+""" номер логического устройства совпадает с моделью """+СтрокаПроверки.Модель+"""!",СтатусСообщения.Внимание);
				ПрошлаПроверкаНаУникальность = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Если Не ПрошлаПроверкаНаУникальность Тогда
		Предупреждение("Настройки торгового оборудования не сохранены!", , ЭтаФорма.Заголовок);
		Ошибка = Истина;
		Возврат;
	КонецЕсли;

	ТорговоеОборудование = РегистрыСведений.ТорговоеОборудование;
	Оборудование = ТорговоеОборудование.Выбрать();
	Пока Оборудование.Следующий() Цикл
		Если Оборудование.Компьютер = млИмяТекущегоКомпьютера Тогда

			МодельЭтогоКомпьютера = Оборудование.ПолучитьМенеджерЗаписи();
			МодельЭтогоКомпьютера.Удалить();

		КонецЕсли;
	КонецЦикла;

	Для Каждого Строка Из ТабличноеПоле Цикл

		Если Строка.Модель = Неопределено Тогда
			Продолжить;
		ИначеЕсли Строка.Модель = Справочники.ТорговоеОборудование.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;

		Параметры = Новый Структура();

		Если Строка.Вид = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор Тогда 
			
			Параметры.Вставить("ДляПриемаНаличныхОтЮрЛиц"  , ?(Врег(СокрЛП(Строка.Параметр3)) = "ИСТИНА", Истина, Ложь));
			
		ИначеЕсли Строка.Вид = Перечисления.ВидыТорговогоОборудования.ККТсПередачейДанных Тогда

			Параметры = ?(ПустаяСтрока(Строка.ПараметрыККТ), Новый Структура(), ЗначениеИзСтрокиВнутр(Строка.ПараметрыККТ));

		ИначеЕсли Строка.Вид = Перечисления.ВидыТорговогоОборудования.РидерМагнитныхКарт Тогда

			Параметры.Вставить("ИсточникДанных"            , Строка.Параметр1);

		ИначеЕсли Строка.Вид = Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя Тогда

			Параметры.Вставить("БегущаяСтрока"             , Строка.Параметр1);
			Параметры.Вставить("ИнформационнаяСтрока1"     , Строка.Параметр2);
			Параметры.Вставить("ИнформационнаяСтрока2"     , Строка.Параметр3);

		ИначеЕсли Строка.Вид = Перечисления.ВидыТорговогоОборудования.ККМOffLine Тогда

			Параметры.Вставить("КаталогОбменаДанными"      , Строка.Параметр1);
			Параметры.Вставить("Адрес"                     , Строка.Параметр2);
			Параметры.Вставить("Порт"                      , Строка.Параметр3);

		ИначеЕсли Строка.Вид = Перечисления.ВидыТорговогоОборудования.ККМOnLine Тогда

			Параметры.Вставить("ЗаводскойНомерККМ"         , Строка.НомерЛУ);

		КонецЕсли;

		МодельЭтогоКомпьютера = РегистрыСведений.ТорговоеОборудование.СоздатьМенеджерЗаписи();
		МодельЭтогоКомпьютера.Компьютер                   = млИмяТекущегоКомпьютера;
		МодельЭтогоКомпьютера.МодельТорговогоОборудования = Строка.Модель;
		МодельЭтогоКомпьютера.КассаККМ                    = Строка.КассаККМ;
		МодельЭтогоКомпьютера.НомерЛогическогоУстройства  = Строка.НомерЛУ;
		МодельЭтогоКомпьютера.Подключено                  = Строка.Подключено;
		МодельЭтогоКомпьютера.Параметры                   = ЗначениеВСтрокуВнутр(Параметры);
		МодельЭтогоКомпьютера.Записать();

	КонецЦикла;

	Константы.ВозможныеПрефиксыШтрихКода.Установить(?(ИспользоватьПрефикс,Префикс,""));
	ОтключитьТорговоеОборудование();
	ПодключитьТорговоеОборудование();
	СообщитьОПодключении();
	Ошибка = Ложь;

КонецПроцедуры // ПринятьИзменения()

// Процедура устанавливает уникальный номер логического устройства для внешней компоненты,
// обслуживающей модель ТО из текущей строки
// 
Процедура УстановитьНомерЛогическогоУстройства()

	ВидТО = ПолучитьТекущийВидТорговогоОборудования();

	Если ВидТО = Перечисления.ВидыТорговогоОборудования.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;

	// номер по-умолчанию
	НомерЛУ = 1;

	// теперь ищем, есть ли среди выбранных моделе ТО устройство, обслуживаемое таким же драйвером
	// и если есть, то запомним какой логический номер у него
	СписокЛУ = Новый СписокЗначений;
	Для Каждого Строка Из ТабличноеПоле Цикл

		Если Строка.Модель = Неопределено Тогда
			Продолжить;
		ИначеЕсли Строка.Модель = Справочники.ТорговоеОборудование.ПустаяСсылка() Тогда
			Продолжить;
		ИначеЕсли Строка = млТекущаяСтрокаТаблицы Тогда 
			Продолжить;
		ИначеЕсли млТекущаяСтрокаТаблицы.Модель.ВнешняяКомпонента = Строка.Модель.ВнешняяКомпонента Тогда
			СписокЛУ.Добавить(Строка.НомерЛУ);
		КонецЕсли;

	КонецЦикла;

	Пока СписокЛУ.НайтиПоЗначению(Строка(НомерЛУ)) <> Неопределено Цикл
		НомерЛУ = НомерЛУ + 1;
	КонецЦикла;

	млТекущаяСтрокаТаблицы.НомерЛУ               = НомерЛУ;
	Если ВидТО = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор Тогда
	НомерЛУФР         = НомерЛУ;
	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ККТсПередачейДанных Тогда
	НомерЛУККТ        = НомерЛУ;
	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя Тогда
	НомерЛУДП         = НомерЛУ;
	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ККМOffLine Тогда
	НомерЛУOffLine    = НомерЛУ;
	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда
	НомерЛУТерминала  = НомерЛУ;
	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ЭлектронныеВесы Тогда
	НомерЛУВесов      = НомерЛУ;
	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
	НомерЛУСканера    = НомерЛУ;
	ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ККМOnLine Тогда
	ЗаводскойНомерККМ = НомерЛУ;
	КонецЕсли;

КонецПроцедуры // УстановитьНомерЛогическогоУстройства()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	млИмяТекущегоКомпьютера = Врег(ИмяКомпьютера());

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	ЭлементыФормы.ПанельПараметровТорговогоОборудования.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	ЭлементыФормы.ИмяКомп.Заголовок = млИмяТекущегоКомпьютера;
	ЗагрузитьВсеМодели();
	ПроверкаПолей();

	Префикс = Константы.ВозможныеПрефиксыШтрихКода.Получить();
	Если Не ПустаяСтрока(Префикс) Тогда
		ИспользоватьПрефикс = Истина;
	Иначе
		ИспользоватьПрефикс = Ложь;
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик нажатия на кнопку "Выполнить"
//
Процедура КнопкаВыполнитьНажатие(Кнопка)
	Перем Ошибка;

	ПринятьИзменения(Ошибка);
	Если Не Ошибка Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КнопкаВыполнитьНажатие()

// Процедура - обработчик нажатия на кнопку "Применить"
//
Процедура ОсновныеДействияФормыПрименить(Кнопка)

	ПринятьИзменения();

КонецПроцедуры // ОсновныеДействияФормыПрименить

// Процедура - обработчик события "ПриИзменении" элемента "НомерЛУСканера".
//
Процедура НомерЛУСканераПриИзменении(Элемент)

	ЗапомнитьЗначение("НомерЛУ", Элемент.Значение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента "ИсточникДанных".
//
Процедура ИсточникДанныхПриИзменении(Элемент)

	ЗапомнитьЗначение("Параметр1", Элемент.Значение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента "НомерЛУФР".
//
Процедура НомерЛУФРПриИзменении(Элемент)

	ЗапомнитьЗначение("НомерЛУ", Элемент.Значение);

КонецПроцедуры // НомерЛУФРПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента "НомерЛУККТ".
//
Процедура НомерЛУККТПриИзменении(Элемент)

	ЗапомнитьЗначение("НомерЛУ", Элемент.Значение);

КонецПроцедуры // НомерЛУФРПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента "НомерЛУДП".
//
Процедура НомерЛУДППриИзменении(Элемент)

	ЗапомнитьЗначение("НомерЛУ", Элемент.Значение);

КонецПроцедуры // НомерЛУДППриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента "НомерЛУOffLine".
//
Процедура НомерЛУOffLineПриИзменении(Элемент)

	ЗапомнитьЗначение("НомерЛУ", Элемент.Значение);

КонецПроцедуры // НомерЛУOffLineПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента "НомерЛУOffLine".
//
Процедура АдресOffLineПриИзменении(Элемент)

	ЗапомнитьЗначение("Параметр2", Элемент.Значение);

КонецПроцедуры // НомерЛУOffLineПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента "НомерЛУOffLine".
//
Процедура ПортOffLineПриИзменении(Элемент)

	ЗапомнитьЗначение("Параметр3", Элемент.Значение);

КонецПроцедуры // НомерЛУOffLineПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента "НомерЛУТерминала".
//
Процедура НомерЛУТерминалаПриИзменении(Элемент)

	ЗапомнитьЗначение("НомерЛУ", Элемент.Значение);

КонецПроцедуры // НомерЛУТерминалаПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента "НомерЛУВесов".
//
Процедура НомерЛУВесовПриИзменении(Элемент)

	ЗапомнитьЗначение("НомерЛУ", Элемент.Значение);

КонецПроцедуры // НомерЛУВесовПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента "ИнформационнаяСтрока1".
//
Процедура ИнформационнаяСтрока1ПриИзменении(Элемент)

	ЗапомнитьЗначение("Параметр2", Элемент.Значение);

КонецПроцедуры // ИнформационнаяСтрока1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента "ИнформационнаяСтрока2".
//
Процедура ИнформационнаяСтрока2ПриИзменении(Элемент)

	ЗапомнитьЗначение("Параметр3", Элемент.Значение);

КонецПроцедуры // ИнформационнаяСтрока2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента "БегущаяСтрока".
//
Процедура БегущаяСтрокаПриИзменении(Элемент)

	ЗапомнитьЗначение("Параметр1", Элемент.Значение);

КонецПроцедуры // БегущаяСтрокаПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента "ПарольПользователя".
//
Процедура КаталогОбменаДаннымиПриИзменении(Элемент)

	ЗапомнитьЗначение("Параметр1", Элемент.Значение);

КонецПроцедуры // КаталогОбменаДаннымиПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента "ПарольПользователя".
//
Процедура ЗаводскойНомерККМПриИзменении(Элемент)

	ЗапомнитьЗначение("НомерЛУ", Элемент.Значение);

КонецПроцедуры // ЗаводскойНомерККМПриИзменении()

// Процедура - обработчик события "НачалоВыбора" элемента "КаталогОбменаДанными".
//
Процедура КаталогОбменаДаннымиНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если млТекущаяСтрокаТаблицы.Вид = Перечисления.ВидыТорговогоОборудования.ККМOffLine Тогда
		ВыборКаталога(Элемент);
		ЗапомнитьЗначение("Параметр1", Элемент.Значение);
	КонецЕсли;

КонецПроцедуры // КаталогОбменаДаннымиНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" элемента "ИспользоватьПрефикс".
//
Процедура ИспользоватьПрефиксПриИзменении(Элемент)

	ПроверкаДоступностиПрефиксов();

КонецПроцедуры // ИспользоватьПрефиксПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТЧ ТабличноеПоле


// Процедура - обработчик события "ПриАктивизацииСтроки" элемента "ТабличноеПоле".
//
Процедура ТабличноеПолеПриАктивизацииСтроки(Элемент)

	ПроверкаПолей();

КонецПроцедуры // ТабличноеПолеПриАктивизацииСтроки()

// Процедура - обработчик события "ПередУдалением" элемента "ТабличноеПоле".
//
Процедура ТабличноеПолеПередУдалением(Элемент, Отказ)

	млТекущаяСтрокаТаблицы = Неопределено;

КонецПроцедуры // ТабличноеПолеПередУдалением()

// Процедура - обработчик события "ПриВыводеСтроки" элемента "ТабличноеПоле".
//
Процедура ТабличноеПолеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки.Вид = Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя
	 ИЛИ ДанныеСтроки.Вид = Перечисления.ВидыТорговогоОборудования.ККМOffLine
	 ИЛИ ДанныеСтроки.Вид = Перечисления.ВидыТорговогоОборудования.ККМOnLine
	 ИЛИ ДанныеСтроки.Вид = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор 
	 ИЛИ ДанныеСтроки.Вид = Перечисления.ВидыТорговогоОборудования.ККТсПередачейДанных Тогда
		ОформлениеСтроки.Ячейки.КассаККМ.ТолькоПросмотр = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.КассаККМ.ТолькоПросмотр = Истина;
	КонецЕсли;
	ОформлениеСтроки.Ячейки.Вид.ТолькоПросмотр = Истина;

КонецПроцедуры // ТабличноеПолеПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" элемента "ТабличноеПоле".
//
Процедура ТабличноеПолеПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Подключено = Истина;
	КонецЕсли;

КонецПроцедуры // ТабличноеПолеПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" элемента "ТабличноеПоле.Модель".
//
Процедура ТабличноеПолеМодельПриИзменении(Элемент)

	//Может быть только один объект "Ридер магнитных карт". Если необходимо подключать несколько,
	//нужно использовать логические устройства драйвера.
	Если млТекущаяСтрокаТаблицы.Вид = Перечисления.ВидыТорговогоОборудования.РидерМагнитныхКарт Тогда
		Для каждого СтрокаТаблицы Из ТабличноеПоле Цикл
			Если (СтрокаТаблицы.Вид = Перечисления.ВидыТорговогоОборудования.РидерМагнитныхКарт)
			   И (СтрокаТаблицы <> млТекущаяСтрокаТаблицы) Тогда
				Предупреждение("Ридер уже подключен. Если нужно подключить несколько ридеров,"
				              + Символы.ПС + "воспользуйтесь сервисом логических устройств драйвера.");
				млТекущаяСтрокаТаблицы.Модель = Неопределено;
				млТекущаяСтрокаТаблицы.Вид = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Если млТекущаяСтрокаТаблицы.Вид <> млТекущаяСтрокаТаблицы.Модель.ВидТорговогоОборудования Тогда
		млТекущаяСтрокаТаблицы.Вид       = млТекущаяСтрокаТаблицы.Модель.ВидТорговогоОборудования;
		млТекущаяСтрокаТаблицы.КассаККМ  = Справочники.КассыККМ.ПустаяСсылка();
		млТекущаяСтрокаТаблицы.Параметр1 = "";
		млТекущаяСтрокаТаблицы.Параметр2 = "";
		млТекущаяСтрокаТаблицы.Параметр3 = "";
		млТекущаяСтрокаТаблицы.Параметр4 = "";

		ПроверкаПолей();
	КонецЕсли;

	
	УстановитьНомерЛогическогоУстройства();

КонецПроцедуры // ТабличноеПолеМодельПриИзменении()

// Процедура - обработчик события "НачалоВыбора" элемента "ТабличноеПоле.КассаККМ".
//
Процедура ТабличноеПолеКассаККМНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если млТекущаяСтрокаТаблицы.Вид = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор
	 ИЛИ млТекущаяСтрокаТаблицы.Вид = Перечисления.ВидыТорговогоОборудования.ККТсПередачейДанных
	 ИЛИ млТекущаяСтрокаТаблицы.Вид = Перечисления.ВидыТорговогоОборудования.ККМOffLine
	 ИЛИ млТекущаяСтрокаТаблицы.Вид = Перечисления.ВидыТорговогоОборудования.ККМOnLine Тогда

		УжеВыбраннныеКассы = Новый СписокЗначений;

		СписокРежимовКассККМ = Новый СписокЗначений;
		СписокРежимовКассККМ.Добавить(Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор);
		СписокРежимовКассККМ.Добавить(Перечисления.ВидыТорговогоОборудования.ККМOffLine);
		СписокРежимовКассККМ.Добавить(Перечисления.ВидыТорговогоОборудования.ККМOnLine);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Вид"      , СписокРежимовКассККМ );
		Запрос.УстановитьПараметр("Компьютер", Врег(ИмяКомпьютера()));

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТорговоеОборудование.КассаККМ КАК КассаККМ
		|ИЗ
		|	РегистрСведений.ТорговоеОборудование КАК ТорговоеОборудование
		|
		|ГДЕ
		|	ТорговоеОборудование.Компьютер <> &Компьютер
		|	И ТорговоеОборудование.МодельТорговогоОборудования.ВидТорговогоОборудования В (&Вид)";

		Выборка = Запрос.Выполнить().Выбрать();
		УжеВыбраннныеКассы.Очистить();
		Пока Выборка.Следующий() Цикл
			УжеВыбраннныеКассы.Добавить(Выборка.КассаККМ);
		КонецЦикла;

		Для Каждого СтрокаИзТаблицы Из ТабличноеПоле Цикл
			Если СтрокаИзТаблицы <> млТекущаяСтрокаТаблицы Тогда
				Если СписокРежимовКассККМ.НайтиПоЗначению(СтрокаИзТаблицы.Вид) <> Неопределено Тогда
					УжеВыбраннныеКассы.Добавить(СтрокаИзТаблицы.КассаККМ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		ФормаВыбора = Справочники.КассыККМ.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.Отбор.Ссылка.ВидСравнения  = ВидСравнения.НеВСписке;
		ФормаВыбора.Отбор.Ссылка.Значение      = УжеВыбраннныеКассы;
		ФормаВыбора.Отбор.Ссылка.Использование = Истина;
		ФормаВыбора.Открыть();

	ИначеЕсли млТекущаяСтрокаТаблицы.Вид = Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя Тогда

		УжеВыбраннныеКассы = Новый СписокЗначений;

		СписокРежимовКассККМ = Новый СписокЗначений;
		СписокРежимовКассККМ.Добавить(Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор);
		СписокРежимовКассККМ.Добавить(Перечисления.ВидыТорговогоОборудования.ККМOffLine);
		СписокРежимовКассККМ.Добавить(Перечисления.ВидыТорговогоОборудования.ККМOnLine);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Вид"      , СписокРежимовКассККМ );
		Запрос.УстановитьПараметр("Компьютер", Врег(ИмяКомпьютера()));

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТорговоеОборудование.КассаККМ КАК КассаККМ
		|ИЗ
		|	РегистрСведений.ТорговоеОборудование КАК ТорговоеОборудование
		|
		|ГДЕ
		|	ТорговоеОборудование.Компьютер <> &Компьютер
		|	И ТорговоеОборудование.МодельТорговогоОборудования.ВидТорговогоОборудования В (&Вид)";

		Выборка = Запрос.Выполнить().Выбрать();
		УжеВыбраннныеКассы.Очистить();
		Пока Выборка.Следующий() Цикл
			УжеВыбраннныеКассы.Добавить(Выборка.КассаККМ);
		КонецЦикла;

		СписокРежимовКассККМ.Очистить();
		СписокРежимовКассККМ.Добавить(Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя);
		СписокРежимовКассККМ.Добавить(Перечисления.ВидыТорговогоОборудования.ККМOffLine);
		СписокРежимовКассККМ.Добавить(Перечисления.ВидыТорговогоОборудования.ККМOnLine);

		Для Каждого СтрокаИзТаблицы Из ТабличноеПоле Цикл
			Если СтрокаИзТаблицы <> млТекущаяСтрокаТаблицы Тогда
				Если СписокРежимовКассККМ.НайтиПоЗначению(СтрокаИзТаблицы.Вид) <> Неопределено Тогда
					УжеВыбраннныеКассы.Добавить(СтрокаИзТаблицы.КассаККМ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		ФормаВыбора = Справочники.КассыККМ.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.Отбор.Ссылка.ВидСравнения  = ВидСравнения.НеВСписке;
		ФормаВыбора.Отбор.Ссылка.Значение      = УжеВыбраннныеКассы;
		ФормаВыбора.Отбор.Ссылка.Использование = Истина;
		ФормаВыбора.Открыть();

	КонецЕсли;

КонецПроцедуры // ТабличноеПолеКассаККМНачалоВыбора()

//Настройка параметров ККТ
Процедура ПараметрыНажатие(Элемент)
	
	Если ЭлементыФормы.ТабличноеПоле.ТекущиеДанные = Неопределено Тогда
		Предупреждение("Необходимо выбрать строку табличного поля, соответствующую
		               |настраиваемой модели торгового оборудования.");
		Возврат;
	КонецЕсли;

	Обработка = Неопределено;
	Обработка = глТорговоеОборудование.ПолучитьФормуОбработки(ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Модель.ОбработкаОбслуживания);
	Если НЕ Обработка = Неопределено Тогда
		Набор = РегистрыСведений.ТорговоеОборудование.СоздатьНаборЗаписей();
		Отбор = Новый Структура;
		Набор.Отбор.Компьютер.Установить(млИмяТекущегоКомпьютера);
		Набор.Отбор.МодельТорговогоОборудования.Установить(ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Модель);
		Набор.Отбор.КассаККМ.Установить(ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.КассаККМ);
		Набор.Отбор.НомерЛогическогоУстройства.Установить(ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.НомерЛУ);
		Набор.Прочитать();
		
		Если Набор.Количество() = 0 Тогда
			Предупреждение("Необходимо применить изменения, только потом настраивать параметры.");
			Возврат;
		КонецЕсли;

		Параметры = ?(ПустаяСтрока(Набор[0].Параметры),
					  Новый Структура(),
					  ЗначениеИзСтрокиВнутр(Набор[0].Параметры));
		Обработка.НастроитьОборудование(ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Модель, Параметры);
		Набор[0].Параметры = ЗначениеВСтрокуВнутр(Параметры);
		ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.ПараметрыККТ = ЗначениеВСтрокуВнутр(Параметры);
		Набор.Записать();
	Иначе
		Предупреждение("Ошибка при попытке открыть форму настройки параметров модели");
	КонецЕсли;
				   
КонецПроцедуры
