Перем XML, Адрес, Порт;

Процедура ДобавитьЭлемент(Имя, Значение)
	XML.ЗаписатьНачалоЭлемента(Имя);
	XML.ЗаписатьТекст(СокрЛП(Значение));
	XML.ЗаписатьКонецЭлемента();
КонецПроцедуры

// запись товаров из таблицы 1С во внутреннюю базу товаров ККМ
//
// Параметры:
//  Объект        - объект подключенного торгового оборудования
//  НомерСекции   - номер секции
//  Касса         - касса ККМ, для которой выгружаются товары
//  КаталогОбмена - каталог обмена с кассой ККМ
//  СписокТоваров - таблица с товарами, их ценами и количеством
//  НомерЛУ       - номер логического устройства с который связан Объект
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ЗагрузитьТовары(Объект, НомерСекции, Касса, КаталогОбмена, СписокТоваров, Склад, НомерЛУ)

	ВалютаРегламентированногоУчета    = Константы.ВалютаРегламентированногоУчета.Получить();
	СтруктураРеквизитовВалюты = Новый Структура;
	СтруктураРеквизитовВалюты.Вставить("Код", ВалютаРегламентированногоУчета.Код);
	СтруктураРеквизитовВалюты.Вставить("Сокращенно", ВалютаРегламентированногоУчета.Наименование);
	СтруктураРеквизитовВалюты.Вставить("Наименование", ВалютаРегламентированногоУчета.НаименованиеПолное);

	XML        = Новый ЗаписьXML();
	XML.Отступ = Истина;

	XML.ОткрытьФайл(КаталогОбмена + "fl.xml", "UTF-8");

	XML.ЗаписатьОбъявлениеXML();

	XML.ЗаписатьНачалоЭлемента("data");
	XML.ЗаписатьАтрибут("from", XMLСтрока("Manager"));
	XML.ЗаписатьАтрибут("to", XMLСтрока("Kassa"));
	XML.ЗаписатьАтрибут("type", XMLСтрока("REQUEST"));
	XML.ЗаписатьАтрибут("id", XMLСтрока(""));
	XML.ЗаписатьАтрибут("tstamp", XMLСтрока("" + ТекущаяДата()));
	СтруктураКурса = Новый Структура;
	СтруктураКурса.Вставить("Курс", 1);
	СтруктураКурса.Вставить("Кратность", 1);

	//Товары
	Для Каждого Товар Из СписокТоваров Цикл
		//Выборка скидок.
		Скидки = Неопределено;
		СписокПолучателей = Новый СписокЗначений;
		СписокПолучателей.Добавить(Склад);
		СписокПолучателей.Добавить(Справочники.Склады.ПустаяСсылка());
		СписокНоменклатуры = Новый СписокЗначений;
		СписокНоменклатуры.Добавить(Товар.Номенклатура);
		СписокНоменклатуры.Добавить(Справочники.Номенклатура.ПустаяСсылка());

		XML.ЗаписатьНачалоЭлемента("Item");
		XML.ЗаписатьАтрибут("ctrl"                     , XMLСтрока("ADD"));
		XML.ЗаписатьАтрибут("tms"                      , XMLСтрока(0));
		XML.ЗаписатьАтрибут("code"                     , Товар.Код);
			ДобавитьЭлемент("ItemName"                 , Товар.Наименование);
			ДобавитьЭлемент("ItemGroup"                , Товар.Родитель);
			Если НЕ Товар.Группа Тогда
				ДобавитьЭлемент("ItemMeasure"              , Товар.ЕдиницаИзмеренияПредставление);
				ДобавитьЭлемент("ItemOKEI"                 , Товар.ОКЕИ);
				Цена = СтрЗаменить(СтрЗаменить(СокрЛП(Формат(Товар.Цена, "ЧДЦ=2")), Символы.НПП, ""),",",".");
				ДобавитьЭлемент("ItemMainPrice"            , Цена);

				//Скидки количественные, без указания времени c значением условия равным 0.
				ЗапросПоКоличествуТовара(СписокПолучателей, Перечисления.ВидыСкидок.Розничная, СписокНоменклатуры,
										 Скидки, ТекущаяДата(), СтруктураКурса, 0, , Истина);
				Если Скидки.Количество() > 0 Тогда
					ПроцентСкидкиНаценки = СтрЗаменить(СтрЗаменить(СокрЛП(Формат(-Скидки[0].ПроцентСкидкиНаценки, "ЧДЦ=2")), Символы.НПП, ""),",",".");
					ДобавитьЭлемент("ItemDisc"            , ПроцентСкидкиНаценки);
				КонецЕсли;
				XML.ЗаписатьНачалоЭлемента("ItemStatus");
					ДобавитьЭлемент("ISWeight"             , ?(Товар.Весовой, 1, 0));
					ДобавитьЭлемент("ISFreePrice"          , 0);
					ДобавитьЭлемент("ISAuthorize"          , 0);
					ДобавитьЭлемент("ISFuel"               , 0);
					ДобавитьЭлемент("ISServise"            , ?(Товар.Услуга, 1, 0));
					ДобавитьЭлемент("ISComplex"            , 0);
					ДобавитьЭлемент("ISBonus"              , 0);
					ДобавитьЭлемент("ISNullPrice"          , 0);
					ДобавитьЭлемент("ISNoTotalDisc"        , 0);
					ДобавитьЭлемент("ISGaz"                , 0);
					ДобавитьЭлемент("ISNoDiscont"          , 0);
				XML.ЗаписатьКонецЭлемента(); // ItemStatus

				//Скидки безусловные по времени по дням недели.
				ЗапросПоКоличествуТовара(СписокПолучателей, Перечисления.ВидыСкидок.Розничная, СписокНоменклатуры,
										 Скидки, ТекущаяДата(), СтруктураКурса, 0, Истина);

				Для Каждого СкидкаПоВремени Из Скидки Цикл
					XML.ЗаписатьНачалоЭлемента("IDEvery");
						ДобавитьЭлемент("ITDEvery"             , Перечисления.ДниНедели.Индекс(СкидкаПоВремени.ДеньНедели) + 1);
						ДобавитьЭлемент("ITDBeg"               , СкидкаПоВремени.ВремяНачала);
						ДобавитьЭлемент("ITDEnd"               , СкидкаПоВремени.ВремяОкончания);
						ПроцентСкидкиНаценки = СтрЗаменить(СтрЗаменить(СокрЛП(Формат(-СкидкаПоВремени.ПроцентСкидкиНаценки, "ЧДЦ=2")), Символы.НПП, ""),",",".");
						ДобавитьЭлемент("ITDValue"             , ПроцентСкидкиНаценки);
						ДобавитьЭлемент("ITDReason"            , 6);
					XML.ЗаписатьКонецЭлемента(); // IDEvery
				КонецЦикла;

				//Скидки количественные, без указания времени
				ЗапросПоКоличествуТовара(СписокПолучателей, Перечисления.ВидыСкидок.Розничная, СписокНоменклатуры,
										 Скидки, ТекущаяДата(), СтруктураКурса, , , Истина);

				Для Каждого СкидкаПоКоличеству Из Скидки Цикл
					XML.ЗаписатьНачалоЭлемента("ItemQtyDisc");
						ЗначениеУсловияАвтоматическойСкидки = СтрЗаменить(СтрЗаменить(СокрЛП(Формат(СкидкаПоКоличеству.ЗначениеУсловияАвтоматическойСкидки, "ЧДЦ=3")), Символы.НПП, ""),",",".");
						ДобавитьЭлемент("IQty"                 , ЗначениеУсловияАвтоматическойСкидки);
						ПроцентСкидкиНаценки = СтрЗаменить(СтрЗаменить(СокрЛП(Формат( -СкидкаПоКоличеству.ПроцентСкидкиНаценки, "ЧДЦ=2")), Символы.НПП, ""),",",".");
						ДобавитьЭлемент("IQPercent"            , ПроцентСкидкиНаценки);
						ДобавитьЭлемент("ITDReason"            , 4);
					XML.ЗаписатьКонецЭлемента(); // ItemQtyDisc
				КонецЦикла;

				XML.ЗаписатьНачалоЭлемента("ItemTax");
					Индекс = Перечисления.СтавкиНДС.Индекс(Товар.СтавкаНДС);
					Если Индекс <> Неопределено Тогда
						ДобавитьЭлемент("ITCode"            , Индекс);
					КонецЕсли;
				XML.ЗаписатьКонецЭлемента(); // ItemTax
			КонецЕсли;
		XML.ЗаписатьКонецЭлемента(); // Item

		//Штрихкод
		Если НЕ ЗначениеНеЗаполнено(Товар.Штрихкод) Тогда
			XML.ЗаписатьНачалоЭлемента("ItemBarCode");
			XML.ЗаписатьАтрибут("ctrl", XMLСтрока("ADD"));
			XML.ЗаписатьАтрибут("tms", XMLСтрока(0));
			XML.ЗаписатьАтрибут("code", Товар.Штрихкод);
				ДобавитьЭлемент("IBCCode",Товар.Код);
			XML.ЗаписатьКонецЭлемента(); // ItemBarCode
		КонецЕсли;
	КонецЦикла;

		XML.ЗаписатьНачалоЭлемента("Currency");
		XML.ЗаписатьАтрибут("ctrl", XMLСтрока("ADD"));
		XML.ЗаписатьАтрибут("tms", XMLСтрока(0));
		XML.ЗаписатьАтрибут("code", XMLСтрока(СтруктураРеквизитовВалюты.Код));
			ДобавитьЭлемент("CurrencyShort", СтруктураРеквизитовВалюты.Сокращенно);
			ДобавитьЭлемент("CurrencyName" , СтруктураРеквизитовВалюты.Наименование);
			ДобавитьЭлемент("CurrencyRate" , 1);
			ДобавитьЭлемент("CurrencyDecimal", 2);
			ДобавитьЭлемент("CurrencyCBR", 1);
			ДобавитьЭлемент("CurrencyMCBR", 1);
			ДобавитьЭлемент("CurrencyOKV", СтруктураРеквизитовВалюты.Код);
			XML.ЗаписатьНачалоЭлемента("CurrencyStatus");
				ДобавитьЭлемент("CSBase", 1);
				ДобавитьЭлемент("CSNational", 1);
			XML.ЗаписатьКонецЭлемента(); // CurrencyStatus
			ДобавитьЭлемент("CurrencyLock", 0);
		XML.ЗаписатьКонецЭлемента(); // Currency

		XML.ЗаписатьНачалоЭлемента("Client");
		XML.ЗаписатьАтрибут("ctrl", XMLСтрока("ADD"));
		XML.ЗаписатьАтрибут("tms", XMLСтрока(0));
		XML.ЗаписатьАтрибут("code", XMLСтрока("9999999999"));
			ДобавитьЭлемент("ClientName", "Частное лицо");
			ДобавитьЭлемент("ClientJustFace", 0);
		XML.ЗаписатьКонецЭлемента(); // Client

		Запрос = Новый Запрос;
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	ИнформационныеКарты.ВладелецКарты.Наименование КАК Наименование,
		|	ИнформационныеКарты.ВладелецКарты.Код          КАК ВладелецКартыКод,
		|	ИнформационныеКарты.ПроцентСкидки,
		|	ИнформационныеКарты.КодКарты                   КАК КодКарты,
		|	ИнформационныеКарты.Код                        КАК Код,
		|	ИнформационныеКарты.ЭтоПрефиксКода
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|
		|ГДЕ
		|	(НЕ(ИнформационныеКарты.ПометкаУдаления)) И
		|	(НЕ(ИнформационныеКарты.ЭтоГруппа)) И
		|	(ИнформационныеКарты.ПроцентСкидки <> 0) И
		|	ИнформационныеКарты.ТипКарты.Ссылка = &Дисконтная
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВладелецКартыКод,
		|	КодКарты
		|АВТОУПОРЯДОЧИВАНИЕ";

		Запрос.УстановитьПараметр("Дисконтная", Перечисления.ТипыИнформационныхКарт.Дисконтная);
		ДисконтныеКарты = Запрос.Выполнить().Выгрузить();

		ТекущийКонтрагент = "9999999999";
		Для каждого Карта Из ДисконтныеКарты Цикл
			
			Если НЕ ЗначениеНеЗаполнено(Карта.ВладелецКартыКод) Тогда
				Если ТекущийКонтрагент <> Карта.ВладелецКартыКод Тогда

					//Загрузить контрагента.
					XML.ЗаписатьНачалоЭлемента("Client");
					XML.ЗаписатьАтрибут("ctrl", XMLСтрока("ADD"));
					XML.ЗаписатьАтрибут("tms", XMLСтрока(0));
					XML.ЗаписатьАтрибут("code", XMLСтрока(Карта.ВладелецКартыКод));
						ДобавитьЭлемент("ClientName", Карта.Наименование);
						ДобавитьЭлемент("ClientJustFace", 0);
					XML.ЗаписатьКонецЭлемента(); // Client
					ТекущийКонтрагент = Карта.ВладелецКартыКод;
				КонецЕсли;
			КонецЕсли;

			Если НЕ Карта.ЭтоПрефиксКода Тогда

				//Загрузить карту.
				XML.ЗаписатьНачалоЭлемента("DiscountCard");
				XML.ЗаписатьАтрибут("ctrl", XMLСтрока("ADD"));
				XML.ЗаписатьАтрибут("tms", XMLСтрока(0));
				XML.ЗаписатьАтрибут("code", XMLСтрока(Карта.Код));
					ДобавитьЭлемент("DCClient", ТекущийКонтрагент);
					ПроцентСкидкиНаценки = СтрЗаменить(СтрЗаменить(СокрЛП(Формат(-Карта.ПроцентСкидки, "ЧДЦ=2")), Символы.НПП, ""),",",".");
					ДобавитьЭлемент("DCDisc", ПроцентСкидкиНаценки);
				XML.ЗаписатьКонецЭлемента(); // DiscountCard
			Иначе //Маска

				//Загрузить карту.
				XML.ЗаписатьНачалоЭлемента("MaskCard");
				XML.ЗаписатьАтрибут("ctrl", XMLСтрока("ADD"));
				XML.ЗаписатьАтрибут("tms", XMLСтрока(0));
				XML.ЗаписатьАтрибут("code", XMLСтрока(Карта.Код));
					ДобавитьЭлемент("MCCard", "" + Карта.КодКарты + "*");
					ДобавитьЭлемент("MCType", 3);
					ДобавитьЭлемент("MCClient", ТекущийКонтрагент);
				ПроцентСкидкиНаценки = СтрЗаменить(СтрЗаменить(СокрЛП(Формат(-Карта.ПроцентСкидки, "ЧДЦ=2")), Символы.НПП, ""),",",".");
					ДобавитьЭлемент("MCValue", ПроцентСкидкиНаценки);
				XML.ЗаписатьКонецЭлемента(); // MaskCard

			КонецЕсли;
		КонецЦикла;

		//Скидки Суммовые, без указания времени.
		Скидки = Неопределено;
		СписокПолучателей = Новый СписокЗначений;
		СписокПолучателей.Добавить(Склад);
		СписокПолучателей.Добавить(Справочники.Склады.ПустаяСсылка());
		СписокНоменклатуры = Новый СписокЗначений;
		СписокНоменклатуры.Добавить(Справочники.Номенклатура.ПустаяСсылка());

		ЗапросПоСуммеДокумента(СписокПолучателей, Перечисления.ВидыСкидок.Розничная, СписокНоменклатуры,
		                       Скидки, ТекущаяДата(), СтруктураКурса, Истина);

		Для Каждого СкидкаПоСумме Из Скидки Цикл
			XML.ЗаписатьНачалоЭлемента("TotalDisc");
			XML.ЗаписатьАтрибут("ctrl", XMLСтрока("ADD"));
			XML.ЗаписатьАтрибут("tms", XMLСтрока(0));
			XML.ЗаписатьАтрибут("code", XMLСтрока("" + СкидкаПоСумме.ЗначениеУсловияАвтоматическойСкидки + " руб."));
				ЗначениеУсловияАвтоматическойСкидки = СтрЗаменить(СтрЗаменить(СокрЛП(Формат(СкидкаПоСумме.ЗначениеУсловияАвтоматическойСкидки, "ЧДЦ=2")), Символы.НПП, ""),",",".");
				ДобавитьЭлемент("TotalSum"                 , ЗначениеУсловияАвтоматическойСкидки);
				ПроцентСкидкиНаценки = СтрЗаменить(СтрЗаменить(СокрЛП(Формат(-СкидкаПоСумме.ПроцентСкидкиНаценки, "ЧДЦ=2")), Символы.НПП, ""),",",".");
				ДобавитьЭлемент("TotalPercent"             , ПроцентСкидкиНаценки);
			XML.ЗаписатьКонецЭлемента(); // TotalDisc
		КонецЦикла;

		ЦенаВключаетНДС = ?(Склад.ТипЦенРозничнойТорговли.ЦенаВключаетНДС, 1, 0);
		XML.ЗаписатьНачалоЭлемента("Tax");
		XML.ЗаписатьАтрибут("ctrl", XMLСтрока("ADD"));
		XML.ЗаписатьАтрибут("tms", XMLСтрока(0));
		XML.ЗаписатьАтрибут("code", XMLСтрока(1));
			ДобавитьЭлемент("TaxCatName"                 , "НДС");
		Для СчНалога = 0 по Перечисления.СтавкиНДС.Количество()-1 Цикл
			СтавкаНДС = Перечисления.СтавкиНДС[СчНалога];
			Если Найти(СтавкаНДС,"/") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			Если Строка(СтавкаНДС) = "0%" Тогда
				Продолжить;
			КонецЕсли;
			XML.ЗаписатьНачалоЭлемента("TaxCodes");
				ДобавитьЭлемент("TCCode"                 , СчНалога+1);
				ДобавитьЭлемент("TCType"                 , 2);
				ДобавитьЭлемент("TCValue"                , ПолучитьСтавкуНДС(СтавкаНДС));
				ДобавитьЭлемент("TCInclude"              , ЦенаВключаетНДС);
			XML.ЗаписатьКонецЭлемента(); // TaxCodes
		КонецЦикла;
		XML.ЗаписатьКонецЭлемента(); // Tax

	XML.ЗаписатьКонецЭлемента(); // data

	XML.Закрыть();

	Попытка
		HTTPСоединение = Новый COMОбъект("HttpClientLib.HttpClient");
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		ОписаниеРезультата = "не удалось загрузить внешнюю компоненту ""HttpClientLib.dll""";
		Сообщить(ОписаниеРезультата);
		Возврат "";
	КонецПопытки;

	HTTPСоединение.ExecutePOST(КаталогОбмена + "fl.xml", Адрес + ":" + Порт, КаталогОбмена + "Reply.xml", "text/xml");

	Сообщить ("Файл ответа кассы: " + КаталогОбмена + "Reply.xml" + ".");

	Возврат "";

КонецФункции // ЗагрузитьТовары()

Функция ПроверкаСуммЧека(СуммаБезУчетаСкидок, СуммаСУчетомСкидок, ТекущийЧек)

	СуммаПродаж = ТекущийЧек.Итог("Сумма") + ТекущийЧек.Итог("СуммаСкидки");
	Если СуммаСУчетомСкидок <> СуммаПродаж Тогда
		Сообщение = " Итог чека """ + СуммаСУчетомСкидок + """ не равен сумме продаж по позициям """ + СуммаПродаж + """.";
	КонецЕсли;

	Возврат Сообщение;

КонецФункции

Функция ПолучитьЗначениеXML(Число = Ложь)
	XML.Прочитать();
	Значение = XML.Значение;
	Если Число Тогда
		Значение = ?(ЗначениеНеЗаполнено(Значение), 0, Число(Значение));
	КонецЕсли;
	XML.Прочитать();

	Возврат Значение;
КонецФункции

//Процедура заполняет таблицу продаж строками из чека.
//
Процедура ЗагрузитьЧек(XML, ТекущийЧек)

	Перем НомерЧека, ТипЧека, СостояниеЧека, СуммаБезУчетаСкидок, СуммаСУчетомСкидок;

	ИтогСуммаСкидки = 0;

	НеЗагружатьЧек = Ложь;
	Пока XML.Прочитать()
	   И XML.ЛокальноеИмя <> "Check" Цикл

		Если НеЗагружатьЧек Тогда
			Продолжить;
		КонецЕсли;

		Если XML.ЛокальноеИмя = "CHead"
		   И XML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда // Шапка чека.

			Пока XML.Прочитать()
			   И XML.ЛокальноеИмя <> "CHead" Цикл

				Если XML.ЛокальноеИмя = "CHType" Тогда // Тип чека.
					ТипЧека                 = ПолучитьЗначениеXML(Истина);
				ИначеЕсли XML.ЛокальноеИмя = "CHMode" Тогда // Состояние чека.
					СостояниеЧека           = ПолучитьЗначениеXML(Истина);
				ИначеЕсли XML.ЛокальноеИмя = "CHBrutto" Тогда // Сумма чека без учета чеков.
					СуммаБезУчетаСкидок     = ПолучитьЗначениеXML(Истина);
				ИначеЕсли XML.ЛокальноеИмя = "CHNetto" Тогда // Сумма чека с учетом чеков.
					СуммаСУчетомСкидок      = ПолучитьЗначениеXML(Истина);
				ИначеЕсли XML.ЛокальноеИмя = "CHNum" Тогда // Номер чека.
					НомерЧека               = ПолучитьЗначениеXML(Истина);
				КонецЕсли;

			КонецЦикла;

			Если (ТипЧека <> 1
			   И ТипЧека <> 6)
			 Или СостояниеЧека <> 1 Тогда //Пропускаем чек.
				НеЗагружатьЧек = Истина;
				Прервать;
			КонецЕсли;

		КонецЕсли;//Прочитали шапку

		НеЗагружатьПродажу = Ложь;
		Если XML.ЛокальноеИмя = "CSale"
		   И XML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда // Продажа чека.
			СтрокаЧека = ТекущийЧек.Добавить();

			Пока XML.Прочитать()
			   И XML.ЛокальноеИмя <> "CSale" Цикл

				Если НеЗагружатьПродажу Тогда
					Продолжить;
				КонецЕсли;

				Если XML.ЛокальноеИмя = "CSType" Тогда // Тип продажи.
					ТипЧека = ПолучитьЗначениеXML(Истина);
					Если ТипЧека <> 1 //Обычная продажа товара.
					   И ТипЧека <> 2 //Отмена товара.
					   И ТипЧека <> 5 Тогда // Отмена последней строки.
						НеЗагружатьПродажу = Истина;
						ТекущийЧек.Удалить();
					КонецЕсли;
				ИначеЕсли XML.ЛокальноеИмя = "CSCode" Тогда // Штрихкод.
					СтрокаЧека.Штрихкод = ПолучитьЗначениеXML();
				ИначеЕсли XML.ЛокальноеИмя = "CSLocal" Тогда // Код товара на ККМ.
					СтрокаЧека.КодТовараНаККМ = ПолучитьЗначениеXML(Истина);
				ИначеЕсли XML.ЛокальноеИмя = "CSPrice" Тогда // Цена продажи.
					СтрокаЧека.Цена = ПолучитьЗначениеXML(Истина);
				ИначеЕсли XML.ЛокальноеИмя = "CSQty" Тогда // Количество продажи.
					СтрокаЧека.Количество = ПолучитьЗначениеXML(Истина);
				ИначеЕсли XML.ЛокальноеИмя = "CSTotal" Тогда // Сумма продажи.
					СтрокаЧека.Сумма = ПолучитьЗначениеXML(Истина);
				ИначеЕсли XML.ЛокальноеИмя = "CSString" Тогда // Номер строки в чеке.
					СтрокаЧека.НомерСтрокиВЧеке = ПолучитьЗначениеXML(Истина);
				ИначеЕсли XML.ЛокальноеИмя = "CSGCode" Тогда // Номер склада.
					СтрокаЧека.НомерСекции = ПолучитьЗначениеXML(Истина);
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;//Прочитали продажу чека.

		Если XML.ЛокальноеИмя = "CDisc"
		   И XML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда // Скидка чека.

			Пока XML.Прочитать()
			   И XML.ЛокальноеИмя <> "CDisc" Цикл

				Если XML.ЛокальноеИмя = "CDPersent" Тогда // Процент скидки.
					ПроцентСкидки    = ПолучитьЗначениеXML(Истина);
				ИначеЕсли XML.ЛокальноеИмя = "CDSum" Тогда // Сумма скидки.
					СуммаСкидки      = ПолучитьЗначениеXML(Истина);
				ИначеЕсли XML.ЛокальноеИмя = "CDType" Тогда // Тип скидки (3 и 4 - отмена скидки).
					ТипСкидки        = ПолучитьЗначениеXML(Истина);
				ИначеЕсли XML.ЛокальноеИмя = "CDMode" Тогда // Вид скидки (позиция/итог).
					ВидСкидки        = ПолучитьЗначениеXML();
				ИначеЕсли XML.ЛокальноеИмя = "CDString" Тогда // Номер строки в чеке.
					НомерСтрокиВЧеке = ПолучитьЗначениеXML(Истина);
				КонецЕсли;

			КонецЦикла;

			Если ТипСкидки > 2 Тогда
				СуммаСкидки = - СуммаСкидки;
			КонецЕсли;

			Если ВидСкидки = "I" тогда // Скидка на позицию.
				СтрокаЧека = ТекущийЧек[НомерСтрокиВЧеке - 1];
				СтрокаЧека.СуммаСкидки = СтрокаЧека.СуммаСкидки + СуммаСкидки;
			ИначеЕсли ВидСкидки = "T" тогда // Скидка итоговая, надо разнести на позиции чека после окончания загрузки чека.
				ИтогСуммаСкидки = ИтогСуммаСкидки + СуммаСкидки;
			КонецЕсли;

		КонецЕсли;// Прочитали скидку чека.

	КонецЦикла;

	Если ИтогСуммаСкидки <> 0 Тогда //Разнесем сумму по позициям.
		РазнесеноСкидки    = 0;
		ОбщСуммаСоСкидками = ТекущийЧек.Итог("Сумма") - ТекущийЧек.Итог("СуммаСкидки");
		Для каждого СтрокаЧека Из ТекущийЧек Цикл
			СуммаСкидки = Окр(ИтогСуммаСкидки * ((СтрокаЧека.Сумма - СтрокаЧека.СуммаСкидки) / ОбщСуммаСоСкидками),2);
			РазнесеноСкидки = РазнесеноСкидки + СуммаСкидки;
			СтрокаЧека.СуммаСкидки = СтрокаЧека.СуммаСкидки + СуммаСкидки;
		КонецЦикла;

		СтрокаЧека = ТекущийЧек[ТекущийЧек.Количество()-1];
		СтрокаЧека.СуммаСкидки = СтрокаЧека.СуммаСкидки + (ИтогСуммаСкидки - РазнесеноСкидки);
	КонецЕсли;

	Если НЕ НеЗагружатьЧек Тогда
		Сообщение = ПроверкаСуммЧека(СуммаБезУчетаСкидок, СуммаСУчетомСкидок, ТекущийЧек);
		Если НЕ ЗначениеНеЗаполнено(Сообщение) Тогда
			Сообщить("В чеке № " + НомерЧека + " ошибка." + Сообщение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// функция закрытия смены на ККМ Off-Line
//
// Параметры:
//  Объект        - объект подключенного торгового оборудования
//  НомерСекции   - номер секции
//  Касса         - касса ККМ, для которой закрывается смена
//  КаталогОбмена - каталог обмена с кассой ККМ
//  Отчет         - возвращаемая таблица значений с информацией о проданных товарах
//  НомерЛУ       - номер логического устройства с который связан Объект
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ЗакрытьСмену(Объект, НомерСекции, Касса, КаталогОбмена, ТаблицаПродаж, НомерЛУ, Дата)

	XML        = Новый ЗаписьXML();
	XML.Отступ = Истина;

	XML.ОткрытьФайл(КаталогОбмена + "report.xml", "UTF-8");

	XML.ЗаписатьОбъявлениеXML();

	XML.ЗаписатьНачалоЭлемента("spool");
	XML.ЗаписатьАтрибут("from", XMLСтрока("Manager"));
	XML.ЗаписатьАтрибут("to", XMLСтрока("Kassa"));
	XML.ЗаписатьАтрибут("type", XMLСтрока("REQUEST"));
	XML.ЗаписатьАтрибут("id", XMLСтрока("*"));
	XML.ЗаписатьАтрибут("tstamp", XMLСтрока("" + ТекущаяДата()));
		XML.ЗаписатьНачалоЭлемента("Check");
		XML.ЗаписатьАтрибут("ctrl"                     , XMLСтрока("READ"));
		XML.ЗаписатьАтрибут("id"                       , XMLСтрока("*"));
			//ДобавитьЭлемент("CZCountFrom"              , 3);
			//ДобавитьЭлемент("CZCountTo"                , 3);
			ДобавитьЭлемент("CDateFrom"              , СтрЗаменить(XMLСтрока(Дата),"T"," "));
			ДобавитьЭлемент("CDateTo"                , СтрЗаменить(XMLСтрока(КонецДня(Дата)),"T"," "));
		XML.ЗаписатьКонецЭлемента(); // Check
	XML.ЗаписатьКонецЭлемента(); // spool

	XML.Закрыть();

	Попытка
		HTTPСоединение = Новый COMОбъект("HttpClientLib.HttpClient");
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		ОписаниеРезультата = "не удалось загрузить внешнюю компоненту ""HttpClientLib.dll""";
		Сообщить(ОписаниеРезультата);
		Возврат "";
	КонецПопытки;

	HTTPСоединение.ExecutePOST(КаталогОбмена + "report.xml", Адрес + ":" + Порт, КаталогОбмена + "Reply.xml", "text/xml");

	ФайлСмены = Новый Файл(КаталогОбмена + "Reply.xml");
	ТекВремя = ТекущаяДата();

	Если Не ФайлСмены.Существует() Тогда
		ОписаниеРезультата = "Отсутствует файл отчета в каталоге;";
		ОписаниеРезультата = ОписаниеРезультата + Символы.ПС + "Файл ответа кассы: " + КаталогОбмена + "Reply.xml" + ".";
		Возврат ОписаниеРезультата;
	КонецЕсли;

	XML        = Новый ЧтениеXML();
	XML.ОткрытьФайл(КаталогОбмена + "Reply.xml");

	ТаблицаПродаж = Новый ТаблицаЗначений;
	ТаблицаПродаж.Колонки.Добавить("Код");
	ТаблицаПродаж.Колонки.Добавить("Штрихкод");
	ТаблицаПродаж.Колонки.Добавить("Наименование");
	ТаблицаПродаж.Колонки.Добавить("Цена");
	ТаблицаПродаж.Колонки.Добавить("Количество");
	ТаблицаПродаж.Колонки.Добавить("СуммаБезСкидки");
	ТаблицаПродаж.Колонки.Добавить("Сумма");
	ТаблицаПродаж.Колонки.Добавить("НомерСекции");

	Пока XML.Прочитать() Цикл
		Если XML.ЛокальноеИмя = "spool" Тогда // Заголовок файла.
			Продолжить;
		КонецЕсли;
		Если XML.ЛокальноеИмя = "Check"
		   И XML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда // Новый чек.
			ТекущийЧек = Новый ТаблицаЗначений;
			ТекущийЧек.Колонки.Добавить("НомерСтрокиВЧеке");
			ТекущийЧек.Колонки.Добавить("Штрихкод");
			ТекущийЧек.Колонки.Добавить("КодТовараНаККМ");
			ТекущийЧек.Колонки.Добавить("Цена"         , Новый ОписаниеТипов("Число"));
			ТекущийЧек.Колонки.Добавить("Количество"   , Новый ОписаниеТипов("Число"));
			ТекущийЧек.Колонки.Добавить("Сумма"        , Новый ОписаниеТипов("Число"));
			ТекущийЧек.Колонки.Добавить("ПроцентСкидки", Новый ОписаниеТипов("Число"));
			ТекущийЧек.Колонки.Добавить("СуммаСкидки"  , Новый ОписаниеТипов("Число"));
			ТекущийЧек.Колонки.Добавить("НомерСекции"  , Новый ОписаниеТипов("Число"));
			ЗагрузитьЧек(XML, ТекущийЧек);

			Для каждого СтрокаЧека Из ТекущийЧек Цикл
				СтрокаПродаж                = ТаблицаПродаж.Добавить();
				СтрокаПродаж.Код            = СтрокаЧека.КодТовараНаККМ;
				СтрокаПродаж.Штрихкод       = СтрокаЧека.Штрихкод;
				СтрокаПродаж.Цена           = СтрокаЧека.Цена;
				СтрокаПродаж.Количество     = СтрокаЧека.Количество;
				СтрокаПродаж.СуммаБезСкидки = СтрокаЧека.Сумма;
				СтрокаПродаж.Сумма          = СтрокаЧека.Сумма + СтрокаЧека.СуммаСкидки;
				СтрокаПродаж.НомерСекции    = СтрокаЧека.НомерСекции;
			КонецЦикла;

		КонецЕсли;
	КонецЦикла;

	// свернем таблицу по товару
	ТаблицаПродаж.Свернуть("НомерСекции, Код, Штрихкод, Цена","Количество, Сумма, СуммаБезСкидки");

	Возврат "";

КонецФункции // ЗакрытьСмену()

// обработка вызова операции на ККМ Off-Line
//
// Параметры:
//  ИмяОперации  - имя выполняемой операции
//  Параметры    - структура с параметрами торгового оборудования
//  Ответ        - возвращаемая строка с представлением ошибки если она произошла, иначе пустая строка
//
Процедура ВыполнитьОперацию(ИмяОперации = "", Параметры, Ответ) Экспорт
	Перем Объект, Модель, НомерЛУ, НомерСекции, СписокТоваров, Склад, ДанныеИзККМ, Касса, КаталогОбмена, Дата;

	Параметры.Свойство("Объект" , Объект);
	Параметры.Свойство("НомерЛУ", НомерЛУ);
	Параметры.Свойство("Адрес"  , Адрес);
	Параметры.Свойство("Порт"   , Порт);

	Если ЗначениеНеЗаполнено(НомерЛУ) Тогда
		НомерЛУ = 1;
	КонецЕсли;

	Если ИмяОперации = "Подключить" Тогда

		Ответ = "";

		Параметры.Вставить("Объект", "off_UniFO_L");

	ИначеЕсли ИмяОперации = "Отключить" Тогда

		Ответ = "";

	ИначеЕсли ИмяОперации = "ЗагрузитьТовары" Тогда

		Параметры.Свойство("Касса" , Касса        );
		Параметры.Свойство("Секция", НомерСекции  );
		Параметры.Свойство("Товары", СписокТоваров);
		Параметры.Свойство("Склад" , Склад);
		Параметры.Свойство("Путь"  , КаталогОбмена);

		КаталогОбмена = СокрЛП(КаталогОбмена);
		Если Прав(КаталогОбмена, 1) <> "\" Тогда
			КаталогОбмена = КаталогОбмена + "\";
		КонецЕсли;

		Ответ = ЗагрузитьТовары(Объект, НомерСекции, Касса, КаталогОбмена, СписокТоваров, Склад, НомерЛУ);

	ИначеЕсли ИмяОперации = "ЗакрытьСмену" Тогда

		Параметры.Свойство("Секция" , НомерСекции  );
		Параметры.Свойство("Касса"  , Касса        );
		Параметры.Свойство("Путь"   , КаталогОбмена);
		Параметры.Свойство("Дата"   , Дата);

		КаталогОбмена = СокрЛП(КаталогОбмена);
		Если Прав(КаталогОбмена, 1) <> "\" Тогда
			КаталогОбмена = КаталогОбмена + "\";
		КонецЕсли;

		Ответ = ЗакрытьСмену(Объект, НомерСекции, Касса, КаталогОбмена, ДанныеИзККМ, НомерЛУ, Дата);

		Параметры.Вставить("Данные" , ДанныеИзККМ);

	Иначе

		Ответ = "Передана неизвестная команда";

	КонецЕсли;

КонецПроцедуры // ВыполнитьОперацию()

// возвращает параметры для текущий обработки
//
Процедура ПолучитьПараметры(Вид, ВнешняяКомпонента, ПрограммныйИдентификатор, Модели) Экспорт

	Вид                      = Перечисления.ВидыТорговогоОборудования.ККМOffLine;
	ВнешняяКомпонента        = "";
	ПрограммныйИдентификатор = "";

	Модели = Новый СписокЗначений;
	Модели.Добавить("ОФUni","Кассовая система UniFO-L");

КонецПроцедуры
