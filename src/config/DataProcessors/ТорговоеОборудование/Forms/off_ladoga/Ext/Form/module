// Функция паузы
//
// Параметры:
//  СекундЖдать     - сколько секунд надо ждать
//  СообщениеОПаузе - сообщение, которое выводится в строку состояния в момент паузы
//
Процедура Пауза(СекундЖдать=0, СообщениеОПаузе = "Ждите ...")

	Состояние(СообщениеОПаузе);
	ТекущаяДатаИВремя = ТекущаяДата();
	Часов = Час(ТекущаяДатаИВремя);
	Минут = Минута(ТекущаяДатаИВремя);
	Секунд = Секунда(ТекущаяДатаИВремя);

	СекундСНачалаДняНачало = (Часов * 3600) + (Минут * 60) + Секунд;
	СекундСНачалаДняОжидание = СекундСНачалаДняНачало;
	ПрошлоСекунд = СекундСНачалаДняОжидание - СекундСНачалаДняНачало;

	Пока (СекундЖдать - ПрошлоСекунд > 0) и (ПрошлоСекунд >= 0) Цикл

		ТекущаяДатаИВремя = ТекущаяДата();
		Часов = Час(ТекущаяДатаИВремя);
		Минут = Минута(ТекущаяДатаИВремя);
		Секунд = Секунда(ТекущаяДатаИВремя);
		СекундСНачалаДняОжидание = (Часов * 3600) + (Минут * 60) + Секунд;
		ПрошлоСекунд = СекундСНачалаДняОжидание - СекундСНачалаДняНачало;

	КонецЦикла;

КонецПроцедуры // Пауза()

// Удаление предыдущего файла отчета
//
// Параметры:
//  КаталогОбмена - католог обмена
//
Процедура УдалитьПредыдущийФайлОтчета(КаталогОбмена)

	ВыбФайл = Новый Файл(КаталогОбмена+"errkkm.dbf");
	Если ВыбФайл.Существует() Тогда
		Попытка
			УдалитьФайлы(КаталогОбмена,"errkkm.dbf");
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры // УдалитьПредыдущийФайлОтчета()

// открытие файла для дальнейшей записи в него информации о товарах
//
// Параметры:
//  ФайлБТ        - файл с данными о товарах
//  КаталогОбмена - католог обмена
//
// Возвращаемое значение:
//  Истина если файл создан, иначе Ложь
//
Функция СоздатьФайлБТ(ФайлБТ, КаталогОбмена)

	КаталогОбмена = СокрЛП(КаталогОбмена);
	Если Прав(КаталогОбмена, 1) <> "\" Тогда
		КаталогОбмена = КаталогОбмена + "\";
	КонецЕсли;

	ВыбФайл = Новый Файл(КаталогОбмена+"TOVARS2.DBF");
	Если ВыбФайл.Существует() Тогда
		Попытка
			УдалитьФайлы(КаталогОбмена,"TOVARS2.DBF");
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	Если Не(ВыбФайл.Существует()) Тогда
		ФайлБТ.Кодировка = КодировкаXBase.OEM;
		ФайлБТ.Поля.Добавить("CODE","C",13,0);
		ФайлБТ.Поля.Добавить("NAME","C",90,0);
		ФайлБТ.Поля.Добавить("PRICE","N",19,2);
		ФайлБТ.Поля.Добавить("DIVNUM","C",2,0);
		ФайлБТ.Поля.Добавить("SH_CODE","C",13,0);
		ФайлБТ.Поля.Добавить("RES","N",11,3);
		ФайлБТ.СоздатьФайл(КаталогОбмена+"TOVARS2.DBF");
	Иначе
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции // СоздатьФайлБТ()

// запись информации о товарах из таблицы "СписокТоваров" в передаваемый файл "ФайлБТ"
//
// Параметры:
//  ФайлБТ        - файл с данными о товарах
//  НомСекции     - номер секции
//  СписокТоваров - таблица с товарами, их ценами и количеством
//
Процедура ЗаписатьТоварыВФайлБТ(ФайлБТ, НомСекции, СписокТоваров)

	КодТов = 0;

	ВсегоТоваров = СписокТоваров.Количество();
	СчетчикТоваров = 0;
	Для Каждого Товар Из СписокТоваров Цикл
		Попытка 
			КодВВидеЧисла = Число(Товар.Код);
		Исключение
			Сообщить("Товар """ + Товар.Наименование + """ пропущен т.к. код нельзя представить в виде числа", СтатусСообщения.Важное);
			Продолжить;
		КонецПопытки;

		ФайлБТ.Добавить();
		ФайлБТ.CODE     = КодВВидеЧисла;
		ФайлБТ.NAME     = Лев(Товар.Наименование,64);
		ФайлБТ.PRICE    = Товар.Цена;
		ФайлБТ.RES      = Товар.Количество;
		ФайлБТ.DIVNUM   = НомСекции; 
		ФайлБТ.SH_CODE  = Товар.Штрихкод;
		ФайлБТ.Записать();
		
		
		СчетчикТоваров = СчетчикТоваров + 1;
		Состояние(""+Окр(СчетчикТоваров/ВсегоТоваров*100)+"% Товар: " + Товар.Наименование);
	КонецЦикла;

КонецПроцедуры // ЗаписатьТоварыВФайлБТ()

// вывод в таблицу информации о выгруженных в файл "ФайлБТ" товарах
//
// Параметры:
//  ФайлБТ        - файл с данными о товарах
//  Касса         - касса ККМ
//
Процедура ВывестиТоварыВТаблицу(ФайлБТ, Касса)

	Таб = Новый ТабличныйДокумент;
	Таб.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТорговоеОборудование_off_lad_1";
	Макет = Обработки.ТорговоеОборудование.ПолучитьМакет("off_lad_1");

	ОбластьЗначение = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗначение.Параметры.ИмяККМ     = Касса;
	ОбластьЗначение.Параметры.ДатаИтогов = Формат(РабочаяДата,"ДЛФ=ДД");
	Таб.Вывести(ОбластьЗначение);

	ФайлБТ.Первая();
	Пока Не(ФайлБТ.ВКонце()) Цикл
		ОбластьЗначение = Макет.ПолучитьОбласть("Товар");
		ОбластьЗначение.Параметры.КодТовара          = ФайлБТ.CODE;
		ОбластьЗначение.Параметры.Штрихкод           = ФайлБТ.SH_CODE;
		ОбластьЗначение.Параметры.НаименованиеТовара = ФайлБТ.NAME;
		ОбластьЗначение.Параметры.НомСекции          = ФайлБТ.DIVNUM;
		ОбластьЗначение.Параметры.ЦенаТовара         = Формат(ФайлБТ.PRICE,"ЧДЦ=2");
		ОбластьЗначение.Параметры.ОстатокТовара      = ?(ФайлБТ.RES=0,"",ФайлБТ.RES);
		Таб.Вывести(ОбластьЗначение);

		ФайлБТ.Следующая();
	КонецЦикла;

	Таб.Защита = Ложь;
	Таб.ТолькоПросмотр = Истина;
	Таб.ОтображатьСетку = Ложь;
	Таб.ОтображатьЗаголовки = Ложь;
	Таб.Показать("Протокол загрузки ККМ");

КонецПроцедуры // ВывестиТоварыВТаблицу()

// запись товаров из таблицы 1С во внутреннюю базу товаров ККМ
//
// Параметры:
//  Касса         - файл с данными о товарах
//  НомСекции     - номер секции
//  СписокТоваров - таблица с товарами, их ценами и количеством
//  КаталогОбмена - католог обмена
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ЗагрузитьТовары(Касса, НомСекции, СписокТоваров, КаталогОбмена)

	Если СписокТоваров.Количество() = 0 Тогда
		ОписаниеРезультата = "Список товаров пуст";
		Возврат ОписаниеРезультата;
	КонецЕсли;

	ФайлБТ = Новый XBase;
	Если СоздатьФайлБТ(ФайлБТ,КаталогОбмена) Тогда
		ЗаписатьТоварыВФайлБТ(ФайлБТ, НомСекции, СписокТоваров);
		ВывестиТоварыВТаблицу(ФайлБТ, Касса);
		ФайлБТ.ЗакрытьФайл();
		
		// Передадим драйверу команду на обновление основной базы товаров
		УдалитьПредыдущийФайлОтчета(КаталогОбмена);
		ФайлПризнак = Новый ТекстовыйДокумент();
		ФайлПризнак.Записать(КаталогОбмена+"tovars.exp");
	Иначе
		ОписаниеРезультата = "База товаров занята ККМ";
		Возврат ОписаниеРезультата;
	КонецЕсли;

	Возврат "";
КонецФункции // ЗагрузитьТовары()

// открытие файла буфера протокола для дальнейшей записи/считывания из него информации о проданных товарах
//
// Параметры:
//  БуфФайлПрот   - файл буфера протокола с данными о продажах
//  КаталогОбмена - католог обмена
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ОткрытьБуфФайлПрот(БуфФайлПрот, КаталогОбмена)

	ПутьКФайлу = КаталогОбмена+"B_otchet.dbf";
	ВыбФайл = Новый Файл(ПутьКФайлу);
	Если ВыбФайл.Существует() Тогда
		БуфФайлПрот.ОткрытьФайл(ПутьКФайлу);
		Если НЕ(БуфФайлПрот.Открыта()) Тогда
			ОписаниеРезультата = "Файл буфера протокола занят!";
			Возврат ОписаниеРезультата;
		КонецЕсли;
		БуфФайлПрот.Кодировка = КодировкаXBase.OEM;
	Иначе
		БуфФайлПрот.Кодировка = КодировкаXBase.OEM;
		БуфФайлПрот.Поля.Добавить("OPERATE","C",1,0); 
		БуфФайлПрот.Поля.Добавить("BANK","C",12,0);
		БуфФайлПрот.Поля.Добавить("CODE","C",13,0); 
		БуфФайлПрот.Поля.Добавить("QUANTY","N",10,3); 
		БуфФайлПрот.Поля.Добавить("PRICE","N",19,2);
		БуфФайлПрот.Поля.Добавить("DIVNUM","N",2,0); 
		БуфФайлПрот.Поля.Добавить("DATA","D",0,0); 
		БуфФайлПрот.СоздатьФайл(КаталогОбмена+"B_otchet.dbf");
	КонецЕсли;

	Возврат "";

КонецФункции // ОткрытьБуфФайлПрот()

// закрытие файла буфера протокола
//
// Параметры:
//  БуфФайлПрот   - файл буфера протокола с данными о продажах
//  КаталогОбмена - католог обмена
//
Процедура ЗакрытьБуфФайлПрот(БуфФайлПрот, КаталогОбмена)

	Если БуфФайлПрот.КоличествоЗаписей() = 0 Тогда
		БуфФайлПрот.ЗакрытьФайл();
		УдалитьФайлы(КаталогОбмена+"B_otchet.dbf");
	Иначе
		БуфФайлПрот.ЗакрытьФайл();
	КонецЕсли;

КонецПроцедуры // ЗакрытьБуфФайлПрот()

// Создание таблицы значений "Отчет"
//
// Параметры:
//  Отчет - выходная таблица значений с информацией о проданных товарах
//
Процедура СоздатьОтчетПоПродажам(Отчет)

	Отчет = Новый ТаблицаЗначений;
	Отчет.Колонки.Добавить("Код"        );
	Отчет.Колонки.Добавить("Штрихкод"   );
	Отчет.Колонки.Добавить("Цена"       );
	Отчет.Колонки.Добавить("Количество" );
	Отчет.Колонки.Добавить("Сумма"      );
	Отчет.Колонки.Добавить("НомерСекции");

КонецПроцедуры // СоздатьОтчетПоПродажам()

// открытие файла протокола для дальнейшего считывания из него информации о проданных товарах
//
// Параметры:
//  ФайлПрот      - файл протокола с данными о продажах
//  КаталогОбмена - католог обмена
//  Дата          - дата закрытия смены
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ОткрытьФайлПрот(ФайлПрот, КаталогОбмена, Дата)

	ПутьКФайлу = КаталогОбмена+"otchet2.dbf";
	ВыбФайл = Новый Файл(ПутьКФайлу);
	Если ВыбФайл.Существует() Тогда
		ФайлПрот.ОткрытьФайл(ПутьКФайлу);
		Если НЕ(ФайлПрот.Открыта()) Тогда
			ОписаниеРезультата = "Файл протокола занят!";
			Возврат ОписаниеРезультата;
		КонецЕсли;
		ФайлПрот.Кодировка = КодировкаXBase.OEM;
	Иначе
		ОписаниеРезультата = "Файл протокола не существует!";
		Возврат ОписаниеРезультата;
	КонецЕсли;

	Возврат "";

КонецФункции // ОткрытьФайлПрот()

// поиск товара по переданному коду 
//
// Параметры:
//  Код          - код искомого товара
//  ВремТовар    - возвращаемый товар
//
// Возвращаемое значение:
//  Истина если товар найден, иначе Ложь
//
Функция ПолучитьТовар(Код, ВремТовар)
	ТоварНайден = Ложь;
	
	СпрТовар = Справочники.Номенклатура;
	
	НайденнаяСсылка = СпрТовар.НайтиПоКоду(Код);
	Если НайденнаяСсылка = СпрТовар.ПустаяСсылка() Тогда
		ВремКод = Код;
		ВремКод = глТорговоеОборудование.ДополнитьСтрокуЛ(ВремКод, "0", 5);
		Пока СтрДлина(ВремКод)>СтрДлина(Код) Цикл
			НайденнаяСсылка = СпрТовар.НайтиПоКоду(ВремКод); 
			Если НайденнаяСсылка <> СпрТовар.ПустаяСсылка() Тогда
				ВремТовар   = НайденнаяСсылка;
				ТоварНайден = Истина;
				Прервать;
			КонецЕсли;
			ВремКод = глТорговоеОборудование.ДополнитьСтрокуЛ(Код, "0", СтрДлина(ВремКод)-1);
		КонецЦикла;
	Иначе
		ВремТовар   = НайденнаяСсылка;
		ТоварНайден = Истина;
	КонецЕсли;

	Если НЕ(ТоварНайден) Тогда
		Возврат Ложь;
	ИначеЕсли ВремТовар.ЭтоГруппа Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции // ПолучитьТовар()

// экспорт продаж из файла "ФайлПрот" в файл "БуфФайлПрот"
//
// Параметры:
//  ФайлПрот      - файл протокола с данными о продажах
//  БуфФайлПрот   - файл буфера протокола с данными о продажах
//  Касса         - касса
//
Процедура ЭкспортПротоколаККМ(ФайлПрот, БуфФайлПрот, Касса)
	Перем ВремТовар;

	ФайлПрот.Первая();
	Пока НЕ(ФайлПрот.ВКонце()) Цикл
		Попытка
			КодОперации = Число(ФайлПрот.OPERATE);
		Исключение
			КодОперации = 0;
		КонецПопытки;
		Если (КодОперации = 1) Или (КодОперации = 2) Или (КодОперации = 8) Или (КодОперации = 3) Тогда
			Если НЕ(ПолучитьТовар(ФайлПрот.CODE,ВремТовар)) Тогда
				БуфФайлПрот.Добавить();
				БуфФайлПрот.OPERATE = ФайлПрот.OPERATE;
				БуфФайлПрот.BANK    = ФайлПрот.BANK;
				БуфФайлПрот.CODE    = СокрЛП(ФайлПрот.CODE);
				БуфФайлПрот.QUANTY  = ФайлПрот.QUANTY;
				БуфФайлПрот.PRICE   = ФайлПрот.PRICE;
				БуфФайлПрот.DIVNUM  = ФайлПрот.DIVNUM;
				БуфФайлПрот.DATA    = ФайлПрот.DATA;
				БуфФайлПрот.Записать();
			КонецЕсли;
		КонецЕсли;	
		ФайлПрот.Следующая();
	КонецЦикла;

КонецПроцедуры // ЭкспортПротоколаККМ()

// вывод в таблицу информации из файла "ФайлПрот" о проданных товарах за день
//
// Параметры:
//  ФайлПрот      - файл протокола с данными о продажах
//  Касса         - касса ККМ
//  Дата          - дата закрытия смены
//  Таб           - таблица для вывода
//
Процедура ВывестиПродажиВТаблицу(ФайлПрот, Касса, Дата, Таб)

	Макет = Обработки.ТорговоеОборудование.ПолучитьМакет("off_lad_2");

	ФайлПрот.Первая();
	Пока НЕ(ФайлПрот.ВКонце()) Цикл 
		Если Дата = ФайлПрот.DATA Тогда
			
			Примечание  = " ";

			Время     = ФайлПрот.TIME;
			Операция  = ФайлПрот.OPERATE;
			Если Число(ФайлПрот.CODE) = 0 Тогда
				Код  = " ";
			Иначе	   
				Код  = СокрЛП(ФайлПрот.CODE);
			КонецЕсли;	   

			ИмяТовара = ФайлПрот.NAME;
			Цена      = ФайлПрот.PRICE;
			Кол       = ФайлПрот.QUANTY;
			Отдел     = ФайлПрот.DIVNUM;

			Попытка
				КодОперации = Число(ФайлПрот.OPERATE);
			Исключение
				КодОперации = 0;
			КонецПопытки;

		 	Если (КодОперации = 1) Или (КодОперации = 2) Тогда
				Примечание = "Продажа";
		 	ИначеЕсли КодОперации = 8 Тогда
				Примечание = "Коррекция";
		 	ИначеЕсли КодОперации = 3 Тогда
				Примечание = "Возврат";
		 	ИначеЕсли СокрЛП(ФайлПрот.OPERATE) = "O" Тогда
				Примечание = "Чек завершен";
		 	Иначе	   		
				Примечание  = " ";
			КонецЕсли;	                      
			
			
			ОбластьЗначение = Макет.ПолучитьОбласть("Продажи");
			Если Число(ФайлПрот.CHECK) = 0 Тогда
				ОбластьЗначение.Параметры.Чек          = " ";
			Иначе
				ОбластьЗначение.Параметры.Чек          = ФайлПрот.CHECK;
			КонецЕсли;
			ОбластьЗначение.Параметры.Время        = ФайлПрот.TIME;
			ОбластьЗначение.Параметры.Операция     = ФайлПрот.OPERATE;
			Если Число(ФайлПрот.CODE) = 0 Тогда
				ОбластьЗначение.Параметры.Код          = " ";
			Иначе
				ОбластьЗначение.Параметры.Код          = СокрЛП(ФайлПрот.CODE);
			КонецЕсли;
			ОбластьЗначение.Параметры.ИмяТовара    = ФайлПрот.NAME;
			ОбластьЗначение.Параметры.Цена         = Формат(ФайлПрот.PRICE,"ЧДЦ=2");
			ОбластьЗначение.Параметры.Кол          = ?(ФайлПрот.QUANTY = 0, "", ФайлПрот.QUANTY);
			Если (КодОперации = 1) Или (КодОперации = 2) Или (КодОперации = 8) Или (КодОперации = 3) Тогда
				ОбластьЗначение.Параметры.Сумма = Формат(ФайлПрот.PRICE * ФайлПрот.QUANTY,"ЧДЦ=2");
			Иначе
				ОбластьЗначение.Параметры.Сумма = Формат(ФайлПрот.SUM,"ЧДЦ=2");
			КонецЕсли;	   
			ОбластьЗначение.Параметры.Отдел        = ?(ФайлПрот.DIVNUM = 0, "", ФайлПрот.DIVNUM);
		 	Если (КодОперации = 1) Или (КодОперации = 2) Тогда
				ОбластьЗначение.Параметры.Передано = "Продажа";
		 	ИначеЕсли КодОперации = 8 Тогда
				ОбластьЗначение.Параметры.Передано = "Коррекция";
		 	ИначеЕсли КодОперации = 3 Тогда
				ОбластьЗначение.Параметры.Передано = "Возврат";
		 	ИначеЕсли СокрЛП(ФайлПрот.OPERATE) = "O" Тогда
				ОбластьЗначение.Параметры.Передано = "Чек завершен";
		 	Иначе
				ОбластьЗначение.Параметры.Передано  = " ";
			КонецЕсли;

			Таб.Вывести(ОбластьЗначение);

		КонецЕсли;

		ФайлПрот.Следующая();
	КонецЦикла;

КонецПроцедуры // ВывестиПродажиВТаблицу()

// Вывод данных из файла "БуфФайлПрот" в ДанныеИзККМ о проданных товарах за день
//
// Параметры:
//  БуфФайлПрот   - файл буфера протокола с данными о продажах
//  Касса         - касса ККМ
//  Дата          - дата закрытия смены
//  Отчет         - таблица данных
//
Процедура КопироватьПродаживОтчет(БуфФайлПрот, Касса, Дата, Отчет)

	БуфФайлПрот.Первая();
	Пока НЕ(БуфФайлПрот.ВКонце()) Цикл 
		Если Дата = БуфФайлПрот.DATA Тогда

			Стр = Отчет.Добавить();
			Стр.Код         = СокрЛП(БуфФайлПрот.CODE);
			Стр.Штрихкод    = "";
			Стр.Цена        = БуфФайлПрот.PRICE;
			Попытка
				КодОперации = Число(БуфФайлПрот.OPERATE);
			Исключение
				КодОперации = 0;
			КонецПопытки;
			Если КодОперации = 3 Тогда
				// возврат
				Стр.Количество  = - БуфФайлПрот.QUANTY;
			Иначе
				Стр.Количество  = БуфФайлПрот.QUANTY;
			КонецЕсли;
			Стр.Сумма       = Стр.Цена * Стр.Количество;
			Стр.НомерСекции = БуфФайлПрот.DIVNUM;

			БуфФайлПрот.Удалить();
		КонецЕсли;

		БуфФайлПрот.Следующая();
	КонецЦикла;

	БуфФайлПрот.Сжать();
	
КонецПроцедуры // КопироватьПродаживОтчет()

// функция закрытия смены на ККМ Off-Line
//
// Параметры:
//  Касса        - касса ККМ
//  Дата         - дата закрытия смены
//  КаталогОбмена - католог обмена
//  ДанныеИзККМ  - возвращаемая таблица значений с информацией о проданных товарах
//  ФайлПрот     - файл протокола
//  БуфФайлПрот  - файл буфера протокола
//  Таб          - таблица для отображения результатов загрузки
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ЗагрузитьПорциюПродаж(Касса, Дата, КаталогОбмена, ДанныеИзККМ, БуфФайлПрот, Таб)

	Перем Ответ;

	ФайлПрот = Новый XBase;
	Ответ = ОткрытьФайлПрот(ФайлПрот, КаталогОбмена, Дата);
	Если Не ПустаяСтрока(Ответ) Тогда
		Возврат Ответ;
	КонецЕсли;

	Если ПустаяСтрока(Ответ) Тогда
		ЭкспортПротоколаККМ(ФайлПрот, БуфФайлПрот, Касса);
		ВывестиПродажиВТаблицу(ФайлПрот, Касса, Дата, Таб);
		ФайлПрот.ЗакрытьФайл();
		КопироватьПродаживОтчет(БуфФайлПрот, Касса, Дата, ДанныеИзККМ);
		ДанныеИзККМ.Свернуть("Код,Штрихкод,Цена,НомерСекции","Количество,Сумма");
		УдалитьФайлы(КаталогОбмена,"otchet2.dbf");
	КонецЕсли;

	Возврат Ответ;

КонецФункции // ЗагрузитьПорциюПродаж()

// функция закрытия смены на ККМ Off-Line
//
// Параметры:
//  Касса        - касса ККМ
//  Дата         - дата закрытия смены
//  КаталогОбмена - католог обмена
//  ДанныеИзККМ  - возвращаемая таблица значений с информацией о проданных товарах
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ЗакрытьСмену(Касса, Дата, КаталогОбмена, ДанныеИзККМ)
	Перем Ответ;

	КаталогОбмена = СокрЛП(КаталогОбмена);
	Если Прав(КаталогОбмена, 1) <> "\" Тогда
		КаталогОбмена = КаталогОбмена + "\";
	КонецЕсли;

	БуфФайлПрот = Новый XBase;
	Ответ = ОткрытьБуфФайлПрот(БуфФайлПрот, КаталогОбмена);
	Если Не ПустаяСтрока(Ответ) Тогда
		Возврат Ответ;
	КонецЕсли;

	СоздатьОтчетПоПродажам(ДанныеИзККМ);

	Таб = Новый ТабличныйДокумент;
	Таб.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТорговоеОборудование_off_lad_2";
	Макет = Обработки.ТорговоеОборудование.ПолучитьМакет("off_lad_2");

	ОбластьЗначение = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗначение.Параметры.ИмяККМ     = Касса;
	ОбластьЗначение.Параметры.ДатаИтогов = Формат(Дата,"ДЛФ=ДД");
	Таб.Вывести(ОбластьЗначение);

	ПутьКФайлу = КаталогОбмена+"otchet2.dbf";
	ВыбФайл = Новый Файл(ПутьКФайлу);
	Если ВыбФайл.Существует() Тогда
		Ответ = ЗагрузитьПорциюПродаж(Касса, Дата, КаталогОбмена, ДанныеИзККМ, БуфФайлПрот, Таб);
		Если Не ПустаяСтрока(Ответ) Тогда
			Возврат Ответ;
		КонецЕсли;
	КонецЕсли;

	// Передадим драйверу команду на обновление основной базы товаров
	УдалитьПредыдущийФайлОтчета(КаталогОбмена);
	ФайлПризнак = Новый ТекстовыйДокумент();
	ФайлПризнак.Записать(КаталогОбмена+"otchet.exp");

	ПутьКФайлу = КаталогОбмена+"otchet2.dbf";
	ВыбФайл = Новый Файл(ПутьКФайлу);
	Счетчик = 0;
	Пока Счетчик < 10 Цикл
		Если ВыбФайл.Существует() Тогда
			Прервать;
		КонецЕсли;
		Пауза(3);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ВыбФайл = Новый Файл(КаталогОбмена+"otchet2.dbf");
	Если Не ВыбФайл.Существует() Тогда
		Ответ = "Закрытие смены невозможно! Проверьте, загружен ли драйвер ККМ.";
		Возврат Ответ;
	КонецЕсли;

	Ответ = ЗагрузитьПорциюПродаж(Касса, Дата, КаталогОбмена, ДанныеИзККМ, БуфФайлПрот, Таб);
	Если Не ПустаяСтрока(Ответ) Тогда
		Возврат Ответ;
	КонецЕсли;

	Таб.Защита = Ложь;
	Таб.ТолькоПросмотр = Истина;
	Таб.ОтображатьСетку = Ложь;
	Таб.ОтображатьЗаголовки = Ложь;
	Таб.Показать("Протокол операций на ККМ");

	ЗакрытьБуфФайлПрот(БуфФайлПрот, КаталогОбмена);

	Возврат Ответ;

КонецФункции // ЗакрытьСмену()

// обработка вызова операции на ККМ Off-Line
//
// Параметры:
//  ИмяОперации  - имя выполняемой операции
//  Параметры    - структура с параметрами торгового оборудования
//  Ответ        - возвращаемая строка с представлением ошибки если она произошла, иначе пустая строка
//
Процедура ВыполнитьОперацию(ИмяОперации = "", Параметры, Ответ) Экспорт
	Перем Объект, Касса, НомерСекции, СписокТоваров, Путь, ДанныеИзККМ, Дата;
	
	Параметры.Свойство("Объект", Объект);

	Если ИмяОперации = "Подключить" Тогда

		Ответ = "";

		Параметры.Вставить("Объект", "off_ladoga");

	ИначеЕсли ИмяОперации = "Отключить" Тогда

		Ответ = "";

	ИначеЕсли ИмяОперации = "ЗагрузитьТовары" Тогда

		Параметры.Свойство("Касса" , Касса        );
		Параметры.Свойство("Секция", НомерСекции  );
		Параметры.Свойство("Товары", СписокТоваров);
		Параметры.Свойство("Путь"  , Путь         );

		Ответ = ЗагрузитьТовары(Касса, НомерСекции, СписокТоваров, Путь);

	ИначеЕсли ИмяОперации = "ЗакрытьСмену" Тогда

		Параметры.Свойство("Касса", Касса);
		Параметры.Свойство("Дата" , Дата );
		Параметры.Свойство("Путь" , Путь );

		Ответ = ЗакрытьСмену(Касса, Дата, Путь, ДанныеИзККМ);

		Параметры.Вставить("Данные" , ДанныеИзККМ);

	Иначе

		Ответ = "Передана неизвестная команда";

	КонецЕсли;

КонецПроцедуры // ВыполнитьОперацию()

// возвращает параметры для текущий обработки
//
Процедура ПолучитьПараметры(Вид, ВнешняяКомпонента, ПрограммныйИдентификатор, Модели) Экспорт

	Вид                      = Перечисления.ВидыТорговогоОборудования.ККМOffLine;
	ВнешняяКомпонента        = "";
	ПрограммныйИдентификатор = "";

	Модели = Новый СписокЗначений;
	Модели.Добавить("ОФЛДФ","Ладога-Ф");

КонецПроцедуры
