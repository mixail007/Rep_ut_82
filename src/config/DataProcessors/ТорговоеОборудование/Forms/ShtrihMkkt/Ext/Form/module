///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

#Если Клиент Тогда
	
Перем мНетОшибки;
Перем мОшибкаПараметровНастройки;
Перем мОшибкаЗагрузкиДрайвера;
Перем мОшибкаНеизвестно;
Перем мОшибкаПриПодключении;
Перем мОшибкаТестНеПройден;
Перем мМодели;

Перем мПараметрыУстройства, мПараметрыПодключения, мВходныеПараметры, мВыходныеПараметры;

// Функция осуществляет подключение устройства.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция Подключить(Объект) Экспорт

	Результат = мНетОшибки;

	мПараметрыУстройства = Объект.Параметры;
	
	мПараметрыУстройства.Вставить("Идентификатор", Объект.Модель);
	
	РезультатПодключения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ПодключитьУстройство(
		Объект.Драйвер, Объект.Параметры, мПараметрыПодключения, мВыходныеПараметры);
		
	Если Не РезультатПодключения Тогда
		Результат = мОшибкаПриПодключении;
		Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	КонецЕсли;

	Возврат Результат;

КонецФункции // Подключить()

// Процедура осуществляет отключение устройства.
// (API v2.0)
//
// Параметры:
//  Объект - <*>
//         - Объект драйвера торгового оборудования.
//
Процедура Отключить(Объект) Экспорт

	ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ОтключитьУстройство(
		Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения, мВыходныеПараметры);

КонецПроцедуры // Отключить()
	
// Функция осуществляет проверку правильности настройки и подключения
// торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера устройства, проверка
//                                   которого предполагается.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ТестУстройства(Объект) Экспорт

	РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("ТестУстройства",
		, мВыходныеПараметры, Объект.Драйвер, Объект.Параметры, мПараметрыПодключения);

	Если Не РезультатВыполнения Тогда
		Результат = мОшибкаНеизвестно;
		Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	Иначе
		Результат = мНетОшибки;
		Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ТестУстройства()

// Процедура осуществляет вызов формы настройки торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Модель    - <Строка>
//            - Модель настраиваемого оборудования.
//
//  Параметры - <Структура>
//            - Входной/выходной параметр; структура параметров.
//
Процедура НастроитьОборудование(Модель, Параметры) Экспорт

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыОборудования", Параметры);
	ПараметрыФормы.Вставить("Идентификатор", Модель);
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ФормаНастройкиУниверсальныйДрайвер", ПараметрыФормы);
	
	Если Результат <> Неопределено Тогда
		Параметры = Результат.ПараметрыОборудования;
	КонецЕсли;

КонецПроцедуры // НастроитьОборудование()

// Функция создаёт объект драйвера.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Выходной параметр; объект драйвера торгового
//                                   оборудования.
//
//  Модель                         - <Строка>
//                                 - Модель торгового оборудования, для которой
//                                   создаётся экземпляр драйвера.
//
//  Параметры                      - <Структура>
//                                 - Параметры подключаемого торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция СоздатьОбъектДрайвера(Объект, Модель, Параметры) Экспорт

	Результат = "";
	ОписаниеОшибки = "";
	ИДУстройства   = Неопределено;

	Попытка
		Макет = Обработки.ТорговоеОборудование.ПолучитьМакет("ИнтеграционнаяКомпонентаШтрихККТ");
		Адрес = ПоместитьВоВременноеХранилище(Макет);
		//рез  = ПодключитьВнешнююКомпоненту(Адрес, "ИнтеграционнаяКомпонентаК", ТипВнешнейКомпоненты.Native); 
		//Драйвер = Новый("AddIn.ИнтеграционнаяКомпонентаК.SMDrvFR1C20");
		ПодключитьВнешнююКомпоненту(Адрес, "ИнтеграционнаяКомпонента");  		
		Драйвер = Новый("AddIn.ИнтеграционнаяКомпонента.SMDrvFR1C22");   //Версия стандарта 2.2 (ОФД 1.0.5/1.1)
		                                                 
	Исключение
		Инфо = ИнформацияОбОшибке();
		Результат = "";//мОшибкаЗагрузкиДрайвера;
		ОписаниеОшибки = "Невозможно подключить внешнюю компоненту.
		| Проверьте, что внешняя компонента корректно установлена и имеет ту же версию, 
		| что и требуемая обработкой обслуживания.";
	КонецПопытки;
		
	Если Результат = "" Тогда
		Попытка
			мВерсияИзДрайвера = Драйвер.ПолучитьНомерВерсии();
		Исключение
			Сообщить("""" + Модель + """:" + Символы.ПС +
			"Внимание! Невозможно определить версию драйвера." + Символы.ПС +
			"Корректная работа драйвера не гарантируется", СтатусСообщения.Внимание);
		КонецПопытки;
		
		Объект = Новый Структура("Модель, Параметры, Драйвер, ОписаниеОшибки, ИДУстройства",
								  Модель, Параметры, Драйвер, ОписаниеОшибки, ИДУстройства,);
	КонецЕсли;

	Возврат Результат;

КонецФункции // СоздатьОбъектДрайвера()

Процедура ВыполнитьОперацию(ИмяОперации = "", Параметры, Ответ) Экспорт
	Перем Модель, Объект, НомерЛУ;

	Параметры.Свойство("Объект", Объект );
	Параметры.Свойство("НомерЛУ", НомерЛУ);

	Если ИмяОперации = "Подключить" Тогда

		Параметры.Свойство("Модель", Модель);

		//Ответ = Подключить(Модель.ВнешняяКомпонента, Модель.ПрограммныйИдентификатор, Объект, НомерЛУ);
		Ответ = Подключить(Объект);

		Параметры.Вставить("Объект", Объект);

	//ИначеЕсли ИмяОперации = "ПосылкаДанных" Тогда

	//	Ответ = ПосылкаДанных(Объект);

	ИначеЕсли ИмяОперации = "Отключить" Тогда

		//Ответ = Отключить(Объект, НомерЛУ);
		Отключить(Объект);

	Иначе

		Ответ = "неизвестная команда";

	КонецЕсли;

КонецПроцедуры

//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ (ФУНКЦИИ API ОБРАБОТОК ОБСЛУЖИВАНИЯ ККТ)

Функция ОткрытьСмену(Объект) Экспорт
	Отключить(Объект);	
	Подключить(Объект);
	
	ПараметрыОткрытияЗакрытияСмены = Неопределено;
	Объект.Свойство("ПараметрыОткрытияЗакрытияСмены", ПараметрыОткрытияЗакрытияСмены);
	
	мПараметрыПодключения.Вставить("ИДУстройства",Объект.Параметры.ИДУстройства);
	РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("ОткрытьСмену",
		ПараметрыОткрытияЗакрытияСмены, мВыходныеПараметры, Объект.Драйвер, Объект.Параметры, мПараметрыПодключения);
	
	Если Не РезультатВыполнения Тогда
		Результат = мОшибкаНеизвестно;
		Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	Иначе
		Результат = мНетОшибки;
		Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЗакрытьСмену(Объект) Экспорт
	Отключить(Объект);	
	Подключить(Объект);
	
	ПараметрыОткрытияЗакрытияСмены = Неопределено;
	Объект.Свойство("ПараметрыОткрытияЗакрытияСмены", ПараметрыОткрытияЗакрытияСмены);
		
	мПараметрыПодключения.Вставить("ИДУстройства",Объект.Параметры.ИДУстройства);
	мПараметрыПодключения.Вставить("РевизияИнтерфейса",Объект.Параметры.РевизияИнтерфейса);
	РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("ЗакрытьСмену",
		ПараметрыОткрытияЗакрытияСмены, мВыходныеПараметры, Объект.Драйвер, Объект.Параметры, мПараметрыПодключения);
		
	Если Не РезультатВыполнения Тогда
		Результат = мОшибкаНеизвестно;
		Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	Иначе
		Результат = мНетОшибки;
		Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ФискализироватьЧек(Объект, ПараметрыЧека) Экспорт
	Отключить(Объект);	
	Подключить(Объект);
	
	Объект.Вставить("ПараметрыПодключения",новый Структура);
	Объект.ПараметрыПодключения.Вставить("ИДУстройства",Объект.Параметры.ИДУстройства);
	Объект.ПараметрыПодключения.Вставить("РевизияИнтерфейса",Объект.Параметры.РевизияИнтерфейса);

	ПолучитьПараметрыККТ(Объект);
	Объект.ПараметрыПодключения.Вставить("ПараметрыРегистрации", Объект.ВыходныеПараметры);
	
	мВходныеПараметры.Очистить();
	мВходныеПараметры.Добавить(ПараметрыЧека);

	РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("ФискализацияЧека",
		мВходныеПараметры, мВыходныеПараметры, Объект.Драйвер, Объект.Параметры, Объект.ПараметрыПодключения);

	Если Не РезультатВыполнения Тогда
		Результат = мОшибкаНеизвестно;
		Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	Иначе
		Результат = мНетОшибки;
		Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьПараметрыККТ(Объект) Экспорт
	Отключить(Объект);	
	Подключить(Объект);
	
	РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("ПолучитьПараметрыККТ",
		, мВыходныеПараметры, Объект.Драйвер, Объект.Параметры, Объект.ПараметрыПодключения);
	
	Если Не РезультатВыполнения Тогда
		Результат = мОшибкаНеизвестно;
		Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	Иначе
		Результат = мНетОшибки;
		Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// возвращает параметры для текущий обработки
//
Процедура ПолучитьПараметры(Вид, ВнешняяКомпонента, ПрограммныйИдентификатор, Модели) Экспорт

	Вид                      = Перечисления.ВидыТорговогоОборудования.ККМOnLine;
	ВнешняяКомпонента        = "DrvFR.dll";
	ПрограммныйИдентификатор = "DrvFR";

	Модели = Новый СписокЗначений;
	Модели.Добавить("ФРШ03","ШТРИХ-ФР-К");

КонецПроцедуры

Функция XОтчет(Объект, Пароль, НомерЧека, НомерСмены) Экспорт

	Объект.Вставить("ПараметрыПодключения",новый Структура);
	Объект.ПараметрыПодключения.Вставить("ИДУстройства",Объект.Параметры.ИДУстройства);
	Объект.ПараметрыПодключения.Вставить("РевизияИнтерфейса",Объект.Параметры.РевизияИнтерфейса);

	ПолучитьПараметрыККТ(Объект);
	Объект.ПараметрыПодключения.Вставить("ПараметрыРегистрации", Объект.ВыходныеПараметры);
	
	РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("НапечататьОтчетБезГашения",
		, мВыходныеПараметры, Объект.Драйвер, Объект.Параметры, Объект.ПараметрыПодключения);
	
	Если Не РезультатВыполнения Тогда
		Результат = мОшибкаНеизвестно;
		Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	Иначе
		Результат = мНетОшибки;
		Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

мНетОшибки                           = Перечисления.ТООшибкиОбщие.ПустаяСсылка();
мОшибкаПараметровНастройки           = Перечисления.ТООшибкиОбщие.ОшибкаПараметровНастройки;
мОшибкаЗагрузкиДрайвера              = Перечисления.ТООшибкиОбщие.ОшибкаЗагрузкиДрайвера;
мОшибкаНеизвестно                    = Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно;
мОшибкаПриПодключении                = Перечисления.ТООшибкиОбщие.ОшибкаПриПодключении;
мОшибкаТестНеПройден                 = Перечисления.ТООшибкиОбщие.ОшибкаТестНеПройден;

мМодели = Новый СписокЗначений;
мМодели.Добавить("ШТРИХ-ФР-Ф");
мМодели.Добавить("ЭЛВЕС-МИНИ-ФР-Ф");
мМодели.Добавить("ФЕЛИКС-РФ");
мМодели.Добавить("ШТРИХ-ФР-К");
мМодели.Добавить("ШТРИХ-950К");
мМодели.Добавить("ЭЛВЕС-ФР-К");
мМодели.Добавить("ШТРИХ-МИНИ-ФР-К");
мМодели.Добавить("ШТРИХ-КОМБО-ФР-К");
мМодели.Добавить("ШТРИХ-КИОСК-ФР-К");
мМодели.Добавить("ШТРИХ-MPAY-К");
мМодели.Добавить("NCR-001K");
мМодели.Добавить("ШТРИХ-MOBILE-ПТК");
мМодели.Добавить("YARUS M2100K");
мМодели.Добавить("YARUS-TK");
мМодели.Добавить("Retail-01K");
мМодели.Добавить("RR-02K");
мМодели.Добавить("RR-01K");
мМодели.Добавить("RR-04K");
мМодели.Добавить("RR-03K");
мМодели.Добавить("YARUS-MD");
мМодели.Добавить("ШТРИХ-МИНИ-ПТК");
мМодели.Добавить("ШТРИХ-ФР-ПТК");
мМодели.Добавить("ШТРИХ-ФР-РК");
мМодели.Добавить("ШТРИХ-М 200 (ШТРИХ-М-ПТК)");
мМодели.Добавить("ШТРИХ-LIGHT-200");
мМодели.Добавить("ЯРУС-01К");
мМодели.Добавить("ЯРУС-02К");
мМодели.Добавить("ШТРИХ-М-ФР-К");
мМодели.Добавить("ШТРИХ-LightPOS-К");
мМодели.Добавить("ШТРИХ-LIGHT-ФР-К");
мМодели.Добавить("ШТРИХ-КОМБО-ПТК");

мИдентификатор = Новый УникальныйИдентификатор;
мПараметрыУстройства = Новый Структура();
мПараметрыПодключения = Новый Структура();
мВходныеПараметры = Новый Массив();
мВыходныеПараметры = Новый Массив();

#КонецЕсли