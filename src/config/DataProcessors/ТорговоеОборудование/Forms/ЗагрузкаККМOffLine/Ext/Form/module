Перем РознСклады, OffLineКассы, МодельККМ, КассыМодели, МаксКодККМ, ККМКонтролироватьЗаполнениеШтрихКода,
      ИспользоватьХарактеристики, ИспользоватьСерии;

// Проверяет подключена ли передаваемая КассаККМ к какому-нибудь обрудованию на данном компьютере.
//
// Параметры:
//  КассаККМ     - проверяемая Касса ККМ
//
// Возвращаемое значение:
//  Истина если КассаККМ подключена, иначе Ложь
//
Функция ПроверкаКассыККМ(КассаККМ)

	СтандартнаяОбработка = Ложь;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Компьютер", Врег(ИмяКомпьютера()));
	Запрос.УстановитьПараметр("Вид"      , Перечисления.ВидыТорговогоОборудования.ККМOffLine);
	Запрос.УстановитьПараметр("КассаККМ" , КассаККМ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТорговоеОборудование.КассаККМ КАК КассаККМ,
	|	ТорговоеОборудование.МодельТорговогоОборудования КАК Модель
	|ИЗ
	|	РегистрСведений.ТорговоеОборудование КАК ТорговоеОборудование
	|
	|ГДЕ
	|	ТорговоеОборудование.Компьютер = &Компьютер
	|	И ТорговоеОборудование.КассаККМ = &КассаККМ
	|	И ТорговоеОборудование.МодельТорговогоОборудования.ВидТорговогоОборудования = &Вид";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		МодельККМ = Выборка.Модель;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПроверкаКассыККМ()

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РознСклады   = Новый СписокЗначений;
	OffLineКассы = Новый СписокЗначений;
	КассыМодели  = Новый ТаблицаЗначений;
	КассыМодели.Колонки.Добавить("Касса");
	КассыМодели.Колонки.Добавить("Модель");

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	ПроверкаКассыККМ(ВыбКассаККМ);
	ЭлементыФормы.Товары.Колонки.Родитель.Видимость = ВыгружатьГруппы;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.Товары.Колонки);
	УстановитьВидимостьСерииНоменклатуры(ЭлементыФормы.Товары.Колонки);

КонецПроцедуры

// Обработчик события "НачалоВыбора" элемента "ВыбСклад".
//
Процедура ВыбСкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	РознСклады.Очистить();
	Склады = Справочники.Склады.Выбрать();
	Пока Склады.Следующий() Цикл
		Если (Склады.ВидСклада = Перечисления.ВидыСкладов.Розничный)
		Или  (Склады.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
			РознСклады.Добавить(Склады.ПолучитьОбъект());
		КонецЕсли;
	КонецЦикла;

	Если РознСклады.Количество() = 0 Тогда
		Предупреждение("Не зарегистрировано ни одного розничного (неавтоматизированного) склада");
	Иначе
		Результат = РознСклады.ВыбратьЭлемент("Выберите склад",ВыбСклад);
		Если Результат <> Неопределено Тогда
			ВыбСклад = Результат.Значение.Ссылка;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВыбСкладНачалоВыбора()

// Обработчик события "НачалоВыбора" элемента "ВыбКассаККМ".
//
Процедура ВыбКассаККМНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Компьютер", Врег(ИмяКомпьютера()));
	Запрос.УстановитьПараметр("Вид"      , Перечисления.ВидыТорговогоОборудования.ККМOffLine);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТорговоеОборудование.КассаККМ КАК КассаККМ,
	|	ТорговоеОборудование.МодельТорговогоОборудования КАК Модель
	|ИЗ
	|	РегистрСведений.ТорговоеОборудование КАК ТорговоеОборудование
	|
	|ГДЕ
	|	ТорговоеОборудование.Компьютер = &Компьютер
	|	И ТорговоеОборудование.МодельТорговогоОборудования.ВидТорговогоОборудования = &Вид";

	Выборка = Запрос.Выполнить().Выбрать();

	OffLineКассы.Очистить();
	Пока Выборка.Следующий() Цикл
		OffLineКассы.Добавить(Выборка.КассаККМ);
		ТекТЗ        = КассыМодели.Добавить();
		ТекТЗ.Касса  = Выборка.КассаККМ;
		ТекТЗ.Модель = Выборка.Модель;
	КонецЦикла;

	Если OffLineКассы.Количество() = 0 Тогда
		Предупреждение("Не зарегистрировано ни одной ККМ в режиме Off-Line");
		Возврат;
	Иначе
		Результат = OffLineКассы.ВыбратьЭлемент("Выберите кассу",ВыбКассаККМ);
		Если Результат <> Неопределено Тогда
			ВыбКассаККМ = Результат.Значение.Ссылка;
			МодельККМ   = КассыМодели.Найти(ВыбКассаККМ).Модель;
		КонецЕсли;
	КонецЕсли;
	Товары.Очистить();

	КвалификаторСтроки = Новый КвалификаторыСтроки(МодельККМ.ККМДлинаНаименованияТовара, ДопустимаяДлина.Переменная);
	Тип                = Новый ОписаниеТипов("Строка", , КвалификаторСтроки);
	ЭлементыФормы.Товары.Колонки.Наименование.ЭлементУправления.ОграничениеТипа = Тип;

КонецПроцедуры // ВыбКассаККМНачалоВыбора()

Функция ПроверкаУсловийВыгрузки(СтрокаТовара)

	БезОшибок = Истина;
	Если ЗначениеНеЗаполнено(СтрокаТовара.Цена) Тогда
		Если СтрокаТовара.Услуга Тогда
			СтрокаСообщения = "Для услуги """ + СтрокаТовара.Номенклатура + """"
			                   + " не назначена цена";
		Иначе
			СтрокаСообщения = "Для товара """ + СтрокаТовара.Номенклатура + """";
			Если ИспользоватьХарактеристики Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ЗначениеНеЗаполнено(СтрокаТовара.ХарактеристикаНоменклатуры),"с пустой характеристикой",
				                   " с характеристикой """ + СтрокаТовара.ХарактеристикаНоменклатуры + """");
			КонецЕсли;
			СтрокаСообщения = СтрокаСообщения + " не назначена цена";
		КонецЕсли;
		Сообщить(СтрокаСообщения, СтатусСообщения.Информация);
		БезОшибок = Ложь;
	КонецЕсли;

	Если ККМКонтролироватьЗаполнениеШтрихКода
	   И ЗначениеНеЗаполнено(СтрокаТовара.Штрихкод) Тогда
		Если СтрокаТовара.Услуга Тогда
			СтрокаСообщения = "Для услуги """ + СтрокаТовара.Номенклатура + """"
			                   + " не установлен штрихкод";
		Иначе
			СтрокаСообщения = "Для товара """ + СтрокаТовара.Номенклатура + """";
			Если ИспользоватьХарактеристики Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ЗначениеНеЗаполнено(СтрокаТовара.ХарактеристикаНоменклатуры)," с пустой характеристикой,",
				                   " с характеристикой """ + СтрокаТовара.ХарактеристикаНоменклатуры + """");
			КонецЕсли;
			Если ИспользоватьСерии Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ЗначениеНеЗаполнено(СтрокаТовара.СерияНоменклатуры)," с пустой серией,",
				                   " с серией """ + СтрокаТовара.СерияНоменклатуры + """");
			КонецЕсли;
			СтрокаСообщения = СтрокаСообщения + " не установлен штрихкод";
		КонецЕсли;
		Сообщить(СтрокаСообщения, СтатусСообщения.Информация);
		БезОшибок = Ложь;
	КонецЕсли;

	Если ИмеющиесяНаСкладе
	   И ЗначениеНеЗаполнено(СтрокаТовара.Количество) Тогда
		Если НЕ СтрокаТовара.Услуга Тогда
			СтрокаСообщения = "Для товара """ + СтрокаТовара.Номенклатура + """";
			Если ИспользоватьХарактеристики Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ЗначениеНеЗаполнено(СтрокаТовара.ХарактеристикаНоменклатуры)," с пустой характеристикой,",
				                   " с характеристикой """ + СтрокаТовара.ХарактеристикаНоменклатуры + """");
			КонецЕсли;
			Если ИспользоватьСерии Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ЗначениеНеЗаполнено(СтрокаТовара.СерияНоменклатуры)," с пустой серией,",
				                   " с серией """ + СтрокаТовара.СерияНоменклатуры + """");
			КонецЕсли;
			СтрокаСообщения = СтрокаСообщения + " нет остатка на складе """ + ВыбСклад + """.";
			Сообщить(СтрокаСообщения, СтатусСообщения.Информация);
			БезОшибок = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(СтрокаТовара.Качество)
	   И СтрокаТовара.Качество <> Справочники.Качество.Новый Тогда
		СтрокаСообщения = "Для товара """ + СтрокаТовара.Номенклатура + """";
		Если ИспользоватьХарактеристики Тогда
			СтрокаСообщения = СтрокаСообщения + ?(ЗначениеНеЗаполнено(СтрокаТовара.ХарактеристикаНоменклатуры)," с пустой характеристикой,",
							   " с характеристикой """ + СтрокаТовара.ХарактеристикаНоменклатуры + """");
		КонецЕсли;
		Если ИспользоватьСерии Тогда
			СтрокаСообщения = СтрокаСообщения + ?(ЗначениеНеЗаполнено(СтрокаТовара.СерияНоменклатуры)," с пустой серией,",
							   " с серией """ + СтрокаТовара.СерияНоменклатуры + """");
		КонецЕсли;
		СтрокаСообщения = СтрокаСообщения + " качество не Новое!!";
		Сообщить(СтрокаСообщения, СтатусСообщения.Информация);
		БезОшибок = Ложь;
	КонецЕсли;

	Если НЕ БезОшибок Тогда
		СтрокаСообщения = "Товар не загружен в кассу.";
		Сообщить(СтрокаСообщения, СтатусСообщения.Внимание);
	КонецЕсли;
	Возврат БезОшибок;

КонецФункции

Процедура КоманднаяПанельЗаполнить(Кнопка = Неопределено)

	Если ЗначениеНеЗаполнено(ВыбКассаККМ) Тогда
		Предупреждение("Не выбрана касса ККМ!");
		Возврат;
	ИначеЕсли ЗначениеНеЗаполнено(ВыбСклад) Тогда
		Предупреждение("Не выбран торговый склад!");
		Возврат;
	ИначеЕсли ВыбСклад.НомерСекции = 0 Тогда
		Предупреждение("У выбранного склада не указан номер секции!");
		Возврат;
	КонецЕсли;
	ККМКонтролироватьЗаполнениеШтрихКода = МодельККМ.ККМКонтролироватьЗаполнениеШтрихКода;
	ИспользоватьХарактеристики           = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
	ИспользоватьСерии                    = Константы.ИспользоватьСерииНоменклатуры.Получить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",  КонецДня(РабочаяДата));
	Запрос.УстановитьПараметр("Склад", ВыбСклад);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ККМ",   ВыбКассаККМ);
	ТипыШтрихкодов = Новый СписокЗначений;
	ТипыШтрихкодов.ЗагрузитьЗначения(МодельККМ.ККМТипыШтрихкодов.ВыгрузитьКолонку("ТипШтрихкода"));
	Запрос.УстановитьПараметр("ТипыШтрихКодов" , ТипыШтрихкодов);
	Запрос.УстановитьПараметр("ПустаяХарактеристика" , Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	ТипЦен = ВыбСклад.ТипЦенРозничнойТорговли;
	// Если цена расчетная, то надо доставать базовые цены
	Если ТипЦен.Рассчитывается Тогда
		Запрос.УстановитьПараметр("ТипЦен"               , ТипЦен.БазовыйТипЦен);
		Запрос.УстановитьПараметр("ПроцентСкидкиНаценки" , ТипЦен.ПроцентСкидкиНаценки);
		Запрос.УстановитьПараметр("ТипЦенРассчитываемый" , ТипЦен);
	Иначе
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	КонецЕсли;

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(РегистрТоварыНаККМ.Код)                  КАК Код,
	|	РегистрТоварыНаККМ.Наименование                        КАК Наименование,
	|	Штрихкоды.Штрихкод                                     КАК Штрихкод,
	|	СписокНоменклатуры.Номенклатура                        КАК Номенклатура,
	|	СписокНоменклатуры.Номенклатура.Весовой                КАК Весовой,
	|	СписокНоменклатуры.Номенклатура.ЭтоГруппа              КАК Группа,
	|	СписокНоменклатуры.Номенклатура.СтавкаНДС              КАК СтавкаНДС,
	|	СписокНоменклатуры.Номенклатура.Услуга                 КАК Услуга,
	|	СписокНоменклатуры.Номенклатура.Родитель.Представление КАК Родитель,
	|	СписокНоменклатуры.Номенклатура.Родитель               КАК РодительСсылка,
	|	Штрихкоды.ТипШтрихкода                                 КАК ТипШтрихкода,
	|	Штрихкоды.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	Штрихкоды.ЕдиницаИзмерения.Представление               КАК ЕдиницаИзмеренияПредставление,
	|	Штрихкоды.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ОКЕИ,
	|	СписокНоменклатуры.ХарактеристикаНоменклатуры          КАК ХарактеристикаНоменклатуры,
	|	СписокНоменклатуры.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатурыПредставление,
	|	Штрихкоды.СерияНоменклатуры.Представление              КАК СерияНоменклатуры,
	|	Штрихкоды.Качество                                     КАК Качество,
	|	Штрихкоды.Качество.Представление                       КАК КачествоПредставление,";
	Если ТипЦен.Рассчитывается Тогда
		ТекстЗапроса = ТекстЗапроса +"
		|	ВЫБОР КОГДА ЦеныНоменклатурыРассчитываемые.ПроцентСкидкиНаценки ЕСТЬ NULL
		|			ИЛИ ЦеныНоменклатурыРассчитываемые.ПроцентСкидкиНаценки = 0 ТОГДА
		|				&ПроцентСкидкиНаценки
		|			ИНАЧЕ ЦеныНоменклатурыРассчитываемые.ПроцентСкидкиНаценки КОНЕЦ КАК ПроцентСкидкиНаценки,";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса +"
	|	Цены.ЕдиницаИзмерения                                  КАК ЕдиницаЦены,
	|	Цены.Валюта                                            КАК ВалютаЦены,
	|	КурсыВалютСрезПоследних.Курс                           КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность                      КАК Кратность,";
	Если ВыбСклад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|	ВЫБОР КОГДА ОстаткиТоваров.ЦенаВРознице Есть NULL Тогда
		|	Цены.Цена*КурсыВалютСрезПоследних.Курс
		|	ИНАЧЕ ОстаткиТоваров.ЦенаВРознице 
		|	КОНЕЦ                                          КАК Цена,";
	Иначе
		ТекстЗапроса = ТекстЗапроса+"
		|	Цены.Цена                                      КАК Цена,";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса+"
	|	ВЫБОР КОГДА ОстаткиТоваров.КоличествоОстаток Есть NULL Тогда
	|		0 ИНАЧЕ ОстаткиТоваров.КоличествоОстаток 
	|		КОНЕЦ                                          КАК Количество,
	|	Штрихкоды.Код                                      КАК КодШтрихкода,
	|	0                                                  КАК Уровень
	|ИЗ (Выбрать 
	|		Ном.Владелец КАК Номенклатура,
	|		Ном.Владелец.Представление КАК НоменклатураПредставление,
	|		Ном.Ссылка   КАК ХарактеристикаНоменклатуры
	|		ИЗ
	|		(ВЫБРАТЬ 
	|			ХарактеристикиНоменклатуры.Владелец,
	|			ХарактеристикиНоменклатуры.Ссылка
	|		ИЗ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ОБЪЕДИНИТЬ
	|		ВЫБРАТЬ 
	|			Номенклатура.Ссылка,
	|			&ПустаяХарактеристика
	|		ИЗ 		Справочник.Номенклатура КАК Номенклатура
	|		) КАК Ном
	|		//Упорядочить По Ном.Номенклатура
	|	) КАК СписокНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|	ПО СписокНоменклатуры.Номенклатура = Штрихкоды.Владелец
	|	И  СписокНоменклатуры.ХарактеристикаНоменклатуры = Штрихкоды.ХарактеристикаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ";
	Если ВыбСклад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|РегистрНакопления.ТоварыВНеавтоматизированныхТорговыхТочках.Остатки(&Дата, 
		|		Склад = &Склад И (ЦенаВРознице > 0))
		|КАК
		|	ОстаткиТоваров";
	Иначе
		ТекстЗапроса = ТекстЗапроса+"
		|РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, Склад = &Склад)
		|КАК
		|	ОстаткиТоваров";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса+"
	|	ПО (ОстаткиТоваров.Номенклатура = СписокНоменклатуры.Номенклатура)
	|	И (ОстаткиТоваров.ХарактеристикаНоменклатуры = СписокНоменклатуры.ХарактеристикаНоменклатуры)
	|	И (ОстаткиТоваров.СерияНоменклатуры = Штрихкоды.СерияНоменклатуры)";
	Если ВыбСклад.ВидСклада <> Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|	И (ОстаткиТоваров.Качество = Штрихкоды.Качество)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса+"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ 
	|		ТоварыНаККМ.КодШтрихкода,
	|		ТоварыНаККМ.Наименование,
	|		ТоварыНаККМ.Код
	|		ИЗ РегистрСведений.ТоварыНаККМ КАК ТоварыНаККМ
	|		ГДЕ (ТоварыНаККМ.ККМ = &ККМ)
	|	) КАК РегистрТоварыНаККМ
	|	ПО (РегистрТоварыНаККМ.КодШтрихкода = Штрихкоды.Код)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата,ТипЦен = &ТипЦен)
	|КАК Цены
	|	ПО (СписокНоменклатуры.Номенклатура = Цены.Номенклатура)
	|	И (СписокНоменклатуры.ХарактеристикаНоменклатуры=Цены.ХарактеристикаНоменклатуры)";
	Если ТипЦен.Рассчитывается Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦенРассчитываемый) КАК ЦеныНоменклатурыРассчитываемые
		|		ПО Цены.Номенклатура               = ЦеныНоменклатурыРассчитываемые.Номенклатура
		|		И  Цены.ХарактеристикаНоменклатуры = ЦеныНоменклатурыРассчитываемые.ХарактеристикаНоменклатуры";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса+"
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата)
	|КАК КурсыВалютСрезПоследних
	|	ПО Цены.Валюта = КурсыВалютСрезПоследних.Валюта
	|";

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выгрузить();

	Выборка.Сортировать("Номенклатура");
	Если ВыгружатьГруппы Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ТоварыНаККМ.Код                КАК Код,
		|	ТоварыНаККМ.Наименование       КАК Наименование,
		|	ТоварыНаККМ.ГруппаНоменклатуры КАК ГруппаНоменклатуры
		|ИЗ РегистрСведений.ТоварыНаККМ КАК ТоварыНаККМ
		|ГДЕ (НЕ ТоварыНаККМ.ГруппаНоменклатуры Есть NULL)
		|  И (ТоварыНаККМ.ККМ = &ККМ)
		|  И (НЕ ТоварыНаККМ.ГруппаНоменклатуры =&ПустаяНоменклатура)";
		Группы = Запрос.Выполнить().Выгрузить();
	КонецЕсли;

	РеглВалюта             = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаТипаЦен          = ТипЦен.ВалютаЦены;
	СтруктураВалютыТипаЦен = ПолучитьКурсВалюты(ВалютаТипаЦен, ТекущаяДата());
	КурсВалютыТипаЦен      = СтруктураВалютыТипаЦен.Курс;
	КратностьВалютыТипаЦен = СтруктураВалютыТипаЦен.Кратность;
	МассивСтрокДляУдаления = Новый Массив;

	Для Каждого СтрокаВыборки Из Выборка Цикл
		Если ВыгружатьГруппы Тогда
			СтрокаВыборки.Уровень = СтрокаВыборки.Номенклатура.Уровень();
		Иначе
			СтрокаВыборки.Уровень = 0;
		КонецЕсли;
		Цена                  = ?(ЗначениеНеЗаполнено(СтрокаВыборки.Цена), 0, СтрокаВыборки.Цена);
		Если НЕ СтрокаВыборки.Группа Тогда

			Если НЕ ПроверкаУсловийВыгрузки(СтрокаВыборки) Тогда
				МассивСтрокДляУдаления.Добавить(СтрокаВыборки);
				Продолжить;
			КонецЕсли;

			ТекущаяВалюта          = ВалютаТипаЦен;
			ТекущийКурс            = КурсВалютыТипаЦен;
			ТекущаяКратность       = КратностьВалютыТипаЦен;

			Если ТипЦен.Рассчитывается
			   И НЕ ВыбСклад.ВидСклада=Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда

				//Рассчитаем цену.
				// Наценим и округлим базовую цену
				ПолученнаяЦена = СтрокаВыборки.Цена * (1 + СтрокаВыборки.ПроцентСкидкиНаценки / 100);
				ПолученнаяЦена = ПересчитатьИзВалютыВВалюту(ПолученнаяЦена, 
											СтрокаВыборки.ВалютаЦены,
											ТекущаяВалюта,
											СтрокаВыборки.Курс,
											ТекущийКурс,
											СтрокаВыборки.Кратность,
											ТекущаяКратность);
			Иначе
				ПолученнаяЦена = СтрокаВыборки.Цена;
				ТекущаяВалюта = СтрокаВыборки.ВалютаЦены;
				СтруктураТекущейВалюты = ПолучитьКурсВалюты(ТекущаяВалюта, ТекущаяДата());
				ТекущийКурс            = СтруктураТекущейВалюты.Курс;
				ТекущаяКратность       = СтруктураТекущейВалюты.Кратность;
			КонецЕсли;

			// Пересчитываем цену в единицу измерения количества.
			ЕдиницаКоэффициент = ?(ЗначениеНеЗаполнено(СтрокаВыборки.ЕдиницаИзмерения.Коэффициент), 1, СтрокаВыборки.ЕдиницаИзмерения.Коэффициент);
			КоэффициентЦены    = ?(ЗначениеНеЗаполнено(СтрокаВыборки.ЕдиницаЦены.Коэффициент), 1, СтрокаВыборки.ЕдиницаЦены.Коэффициент); 
			ПолученнаяЦена     = Окр(ПолученнаяЦена * ЕдиницаКоэффициент / КоэффициентЦены,2);

			ПолученнаяЦена = ОкруглитьЦену(ПолученнаяЦена,
								 ТипЦен.ПорядокОкругления,
								 ТипЦен.ОкруглятьВБольшуюСторону);

			// Пересчитываем цену в валюту документа
			Если ТекущаяВалюта <> РеглВалюта Тогда

				ПолученнаяЦена = ПересчитатьИзВалютыВВалюту(ПолученнаяЦена,
														ТекущаяВалюта,
														РеглВалюта,
														ТекущийКурс,
														1,
														ТекущаяКратность,
														1);

			КонецЕсли;
			СтрокаВыборки.Цена = ПолученнаяЦена;
		Иначе
			Если ВыгружатьГруппы Тогда
				СтрокаГрупп = Группы.Найти(СтрокаВыборки.Номенклатура);
				Если СтрокаГрупп <> Неопределено Тогда
					СтрокаВыборки.Код = Строка(СтрокаГрупп.Код);
					СтрокаВыборки.Наименование = Строка(СтрокаГрупп.Наименование);
				КонецЕсли;
			Иначе
				МассивСтрокДляУдаления.Добавить(СтрокаВыборки);
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если СтрокаВыборки.Код = NULL Тогда
			Если МаксКодККМ = Неопределено Тогда //Получим максимальный код из регистра "ТоварыНаККМ" для "ВыбККМ".
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ККМ" , ВыбКассаККМ   );
				Запрос.Текст = "
				|ВЫБРАТЬ
				//|	ТоварыНаККМ.ККМ,
				|	МАКСИМУМ(ТоварыНаККМ.Код) КАК Код
				|ИЗ
				|	РегистрСведений.ТоварыНаККМ КАК ТоварыНаККМ
				|ГДЕ ТоварыНаККМ.ККМ = &ККМ
				|СГРУППИРОВАТЬ ПО
				|	ТоварыНаККМ.ККМ
				|";
				Результат = Запрос.Выполнить().Выбрать();
				Если Результат.Количество() = 0 Тогда
					МаксКодККМ = 0;
				Иначе
					Результат.Следующий();
					МаксКодККМ = Результат.Код;
				КонецЕсли;

			КонецЕсли;

			МаксКодККМ = МаксКодККМ+1;
			ТекЗапись = РегистрыСведений.ТоварыНаККМ.СоздатьМенеджерЗаписи();
			ТекЗапись.ККМ = ВыбКассаККМ;
			ТекЗапись.Код = МаксКодККМ;
			ТекЗапись.КодШтрихкода = СтрокаВыборки.КодШтрихкода;
			Наименование = СокрЛП(СтрокаВыборки.Номенклатура.Наименование);
			Характеристика = СокрЛП(СтрокаВыборки.ХарактеристикаНоменклатуры);
			Серия          = СокрЛП(СтрокаВыборки.СерияНоменклатуры);
			Качество       = СокрЛП(СтрокаВыборки.Качество);

			Если Характеристика <>"" Тогда
				Наименование = Наименование + ", "+Характеристика;
			КонецЕсли;
			Если Серия <>"" Тогда
				Наименование = Наименование + ", "+Серия;
			КонецЕсли;
			Если Качество <>"" Тогда
				Наименование = Наименование + ", "+Качество;
			КонецЕсли;
			Если МодельККМ.ККМДлинаНаименованияТовара > 0 Тогда
				ТекЗапись.Наименование = Лев(Наименование,МодельККМ.ККМДлинаНаименованияТовара);
			Иначе
				ТекЗапись.Наименование = Наименование;
			КонецЕсли;
			Если ВыгружатьГруппы Тогда
				Если СтрокаВыборки.Группа Тогда
					ТекЗапись.ГруппаНоменклатуры = СтрокаВыборки.Номенклатура;
					СтрокаГруппы = Группы.Добавить();
					СтрокаГруппы.Код = ТекЗапись.Код;
					СтрокаГруппы.Наименование = ТекЗапись.Наименование;
					СтрокаГруппы.ГруппаНоменклатуры = ТекЗапись.ГруппаНоменклатуры;
				КонецЕсли;
			КонецЕсли;
			ТекЗапись.Записать();
			СтрокаВыборки.Код = МаксКодККМ;
			СтрокаВыборки.Наименование = ТекЗапись.Наименование;
		КонецЕсли;
		Если ВыгружатьГруппы И (Не ЗначениеНеЗаполнено(СтрокаВыборки.РодительСсылка))Тогда
			СтрокаГрупп = Группы.Найти(СтрокаВыборки.РодительСсылка);
			Если СтрокаГрупп <> Неопределено Тогда
				СтрокаВыборки.Родитель = Строка(СтрокаГрупп.Код);
			Иначе
				СтрокаВыборки.Родитель = "0";
			КонецЕсли;
		Иначе
			СтрокаВыборки.Родитель = "0";
		КонецЕсли;
	КонецЦикла;

	Для каждого СтрокаДляУдаления из МассивСтрокДляУдаления Цикл
		Выборка.Удалить(СтрокаДляУдаления);
	КонецЦикла;

	Товары = Выборка;

КонецПроцедуры

Процедура КоманднаяПанельВыгрузитьВККМ(Кнопка)

	Если Товары.Количество() > 0 Тогда

		Если глТорговоеОборудование <> Неопределено Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Касса"         , ВыбКассаККМ);
			СтруктураПараметров.Вставить("Секция"        , ВыбСклад.НомерСекции);
			СтруктураПараметров.Вставить("Товары"        , Товары);
			СтруктураПараметров.Вставить("Склад"         , ВыбСклад);
			Результат = глТорговоеОборудование.ККМЗагрузитьТовары( СтруктураПараметров);
			Если Результат = "" Тогда
				Предупреждение("Загрузка номенклатуры успешно завершена.");
				//Закрыть();
			Иначе
				Предупреждение(Результат);
			КонецЕсли;
		Иначе
			Предупреждение("Торговое оборудование не подключено");
		КонецЕсли;
	Иначе
		Предупреждение("Перечень товаров для загрузки пуст");
	КонецЕсли;

КонецПроцедуры

Процедура ВыгружатьГруппыПриИзменении(Элемент)
	ЭлементыФормы.Товары.Колонки.Родитель.Видимость = Элемент.Значение;
	КоманднаяПанельЗаполнить();
КонецПроцедуры

Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
КонецПроцедуры

Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекЗапись = РегистрыСведений.ТоварыНаККМ.СоздатьМенеджерЗаписи();
	ТекЗапись.ККМ = ВыбКассаККМ;
	ТекЗапись.Код = Число(Элемент.ТекущиеДанные.Код);
	ТекЗапись.Прочитать();
	ТекЗапись.Наименование = Элемент.ТекущиеДанные.Наименование;
	ТекЗапись.Записать();
КонецПроцедуры
