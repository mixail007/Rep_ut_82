Процедура ПолучитьПараметры(Вид, Компонента, ПрогИД, Модели) экспорт

	Вид               = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных;
	Компонента        = "CipherLAB.dll";
	ПрогИД			  = "CipherLAB";

	Модели = Новый СписокЗначений;
	Модели.Добавить("ТСДC0","CipherLab TCD-800x");
	Модели.Добавить("ТСДC3","CipherLab TCD-830x");
   	Модели.Добавить("ТСДC5","CipherLab TCD-850x");
   	Модели.Добавить("ТСДC7","CipherLab TCD-870x");

КонецПроцедуры

 
//+++ Подключение терминала сбора данных
//
// Параметры:
//  Компонента   - внешняя компонента
//  ПрограммныйИдентификатор - пароль пользователя
//  Объект       - возвращаемый объект подключенного торгового оборудования
//  НомерЛУ      - номер логического устройства с который связан Объект
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция Подключить(Компонента, ПрограммныйИдентификатор, Объект, НомерЛУ)
	
    результат = СоздатьОбъектДрайвера(Объект, ПрограммныйИдентификатор, , НомерЛУ);
	Если результат = "НетОшибки" тогда
		результат = Подключить103(Объект); 
		// если результат ="НетОшибки" тогда результат =""  КонецЕсли;
	КонецЕсли;
	
	Возврат результат;
  	
КонецФункции // Подключить()

// Отключение терминала сбора данных
//
// Параметры:
//  Объект       - объект подключенного торгового оборудования
//  НомерЛУ      - номер логического устройства с который связан Объект
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция Отключить(Объект, НомерЛУ)

	// если нет объекта, то ничего не нужно отключать
	Если Объект = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	//Объект.НомерТекущегоУстройства = НомерЛУ;
	Объект.Драйвер.УстройствоВключено = 0;
	//-- так выдает ошибку! 
	//Объект.Драйвер.Отключить();
	Если Объект.Драйвер.Результат <> 0 Тогда
		ОписаниеРезультата = Объект.Драйвер.ОписаниеРезультата;
		Возврат ОписаниеРезультата;
	КонецЕсли;

	Возврат "";

КонецФункции // Отключить()

// Получаем данные из терминала 
//
// Параметры:
//  Объект       - объект подключенного торгового оборудования
//  Данные       - полученные данные из терминала
//  НомерЛУ      - номер логического устройства с который связан Объект
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
// нетАдреса=Истина - это стандартная загрузка товаров и количества в Товары
// нетАдреса=ЛОЖЬ   - устанавливается в "наших" ТЧ "АдресаХранения" даёт на выходе Код, ШтрихКод,
//
//АдресПервый = ЛОЖЬ для всех Приход/Расход
//АдресПервый = Истина ТОЛЬКО для Инвентаризации
//
Функция ЗагрузитьДанныеИзТерминала(Объект, Данные, НомерЛУ=1, НетАдреса=Истина, АдресПервый=ЛОЖЬ )

	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Код");
	Данные.Колонки.Добавить("ШтрихКод");  //16.11.2015
	Данные.Колонки.Добавить("Количество");
	Если НЕ НетАдреса тогда
		Данные.Колонки.Добавить("Адрес");
		Данные.Колонки.Добавить("Адрес2");//+++ 18.01.2013 для внутреннего перемещения
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		ОписаниеРезультата = "Устройство сбора данных - не подключено!";
		Возврат ОписаниеРезультата;
	КонецЕсли;

	//Объект.НомерТекущегоУстройства = НомерЛУ;
	Если Объект.Драйвер.Результат <> 0 Тогда
		ОписаниеРезультата = "Ошибка при загрузке с ТСД s/n: "+Объект.Драйвер.СерийныйНомер()+" : "+Объект.Драйвер.ОписаниеРезультата;
		Возврат ОписаниеРезультата;
	КонецЕсли;

	// инициируем выборку из терминала
	//Если Объект.НачалоОтчета() <> 0 Тогда
	//	ОписаниеРезультата = Объект.ОписаниеРезультата;
	//	Возврат ОписаниеРезультата;
	//КонецЕсли;
	
	номДокТСД = 0;
	N  = Объект.Драйвер.ЗаписейВДокументе(номДокТСД);
	SN = Объект.Драйвер.СерийныйНомер();
	
	Время1 = Формат( ТекущаяДата(), "ДФ=yyyy-MM-dd_HH-mm-ss");
	Объект.Драйвер.ИзДокументаВФайл(номДокТСД, "c:\dataFile"+строка(SN)+"_"+Время1+".txt");
	
	Если N<=0 тогда
		возврат "Нет данных для загрузки!";
	КонецЕсли;	
		
	текЗаписьТСД = Объект.Драйвер.ПолучитьЗаписьИзДокумента(номДокТСД);
	НомЗапТСД = 0;  // Data File
	
	Если Объект.Драйвер.Результат <> 0 Тогда
		ОписаниеРезультата = "Ошибка при загрузке с ТСД s/n: "+Объект.Драйвер.СерийныйНомер()+" : "+Объект.Драйвер.ОписаниеРезультата;
		Возврат ОписаниеРезультата;
	КонецЕсли;

	//Объект.Драйвер.ПоказатьПрогресс(1,N);

	//Пока Объект.ПолучитьЗапись() = 0 Цикл
	СимволРазделительПолей = "=";
	пока текЗаписьТСД=1 цикл	
		
		НомЗапТСД = НомЗапТСД+1;
		Стр = Данные.Добавить();
		
//-1-ое--------------------------------------------------
		текст1  = Объект.Драйвер.Поле1; // код товара
		текст1  = СокрЛП(текст1);

		стр.ШтрихКод = "";
		//11.12.2015  НетАдреса - это Инвентаризация, где 1-ое поле Адрес!
			//Если стрДлина(текст1)<=8
				//и ( (лев(текст1,1) = "1" 
				//или лев(текст1,1) = "8" 
				//или лев(текст1,1) = "4"
				//или лев(текст1,1) = "3" ) 
				//и лев(текст1,2)<>"10") и НЕ НетАдреса тогда
				
		Если  АдресПервый тогда // АДРЕС
			Если стрДлина(текст1)>6 и лев(текст1,1) = "1" тогда // "обрезаем" префикс 5000
				стр.Адрес = сред(текст1,2,6);  
			Иначе //как есть но в поле Адреса
				стр.Адрес = лев(текст1,7); // без Контрольного символа, но с префиксом
			КонецЕсли;	
		Иначе // нормальный КОД - первым полем
			Если стрДлина(текст1)=13 тогда //16.11.2015  - поиск по штрихКоду!
			стр.ШтрихКод = текст1;
				если лев(текст1,5) = "05000" тогда // "наш" код = префикс + код товара + КС
				 стр.Код = сред(текст1, 6,7);
				иначе	
				 стр.Код = "9999999"; // не существующий код!
				КонецЕсли; 
			иначе
				 стр.Код = ЛЕВ(текст1,7);
				 стр.ШтрихКод = "05000"+стр.Код + КонтрольныйСимволEAN("05000"+текст1, 13);
			КонецЕсли;	
 		КонецЕсли;
		
//-2-ое-----------------------------------------------------------------------		
		текст1 = СокрЛП(Объект.Драйвер.Поле2);
		текст1  = СокрЛП(текст1);
		
		Если НЕ АдресПервый тогда // обычные приход/расход - 2ое поле Адрес!
			Если стрДлина(текст1)>6 и лев(текст1,1) = "1" тогда // "обрезаем" префикс для 5000
				стр.Адрес = сред(текст1,2,6);  
			Иначе //как есть но в поле Адреса
				стр.Адрес = лев(текст1,7);
			КонецЕсли;	
			
		Иначе  //2-ое поле = КОД ТОВАРА - только для Инвентаризации, когда  АдресПервый=Истина
			стр.ШтрихКод = текст1;
			  
	  		Если стрДлина(текст1)>13 тогда //16.11.2015  - поиск по штрихКоду!
				если лев(текст1,5) = "05000" тогда // "наш" код = префикс + код товара
				 стр.Код = сред(текст1, 6,7);
				иначе	
				 стр.Код = "9999999"; // не существующий код!
				КонецЕсли; 
			иначе
				 стр.Код = ЛЕВ(текст1,7);
				 Если стрДлина(текст1)=7 тогда //16.11.2015
					стр.ШтрихКод = "05000"+стр.Код + КонтрольныйСимволEAN("05000"+текст1, 13);
				КонецЕсли;	
			КонецЕсли;	

		КонецЕсли;	
		
//-3-е----------это обычно Количество-----------------------------------
		текст3 = Объект.Драйвер.Поле3;     // до 10 символов
		текст3 = СокрЛП(текст3);
		текстКол = ?(текст3="", "0", текст3);
		
//-4-ое поле -----только для Внутреннего перемещения!--------------------		
		текст4 = Объект.Драйвер.Поле4;     // до 10 символов
		текст4 = СокрЛП(текст4);
		
//Это Внутреннее Перемещение, то 3-е поле это Адрес2, а 4-ое поле это количество!
		Если текст4<>"" тогда
			Если стрДлина(текст3)>6 и лев(текст3,1) = "1" и лев(текст3,2)<>"10" тогда //5000
				стр.Адрес2 = сред(текст3,2,6);
			Иначе //Если стрДлина(текст1)>6 тогда  //8-8000, 4-Ангары, 3-ЦЦЛ +++ 29.08.2014
				стр.Адрес2 = ЛЕВ(текст3,7);
			КонецЕсли;
			текстКол = ?(текст4="", "0", текст4); 
		КонецЕсли;	
		
	
		попытка
			стр.Количество = число(текстКол); 
		исключение			
			#Если Клиенет тогда
				сообщить("В записи №"+строка(НомЗапТСД)+" - неправильный формат Количества: "+текст3, СтатусСообщения.Внимание);
			#КонецЕсли
		КонецПопытки;
		Объект.Драйвер.ПоказатьПрогресс(1, N-НомЗапТСД );
 		текЗаписьТСД = Объект.Драйвер.ПолучитьЗаписьИзДокумента(номДокТСД);// прочитаем следующую запись
	КонецЦикла;

	//---------------------------------------------------
	Объект.Драйвер.ЗавершитьЗагрузку();
	Объект.Драйвер.ПоказатьПрогресс(0,0);
	
	Если Данные.Количество()>0 тогда
		Если НетАдреса тогда
			Данные.Свернуть("Код, ШтрихКод", "Количество"); //возвращаем "стандарнтый" штрихКод
		иначе
			Если текст4<>"" тогда
				Данные.Свернуть("Код, ШтрихКод, Адрес, Адрес2", "Количество"); //16.11.2015
			иначе
				Данные.Свернуть("Код, ШтрихКод, Адрес", "Количество");//16.11.2015
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
		
	Возврат "";

КонецФункции // Загрузить()


функция ВыгрузитьДанныеВТерминал(Объект, Данные=неопределено) //+++ самописная!
	
	Если Объект = Неопределено Тогда
		ОписаниеРезультата = "Устройство сбора данных - не подключено!";
		Возврат ОписаниеРезультата;
	КонецЕсли;

	Если Данные=неопределено тогда
		ОписаниеРезультата = "Данные для Выгрузки - не определены!";
		Возврат ОписаниеРезультата;
	КонецЕсли;
	
	//Объект.НомерТекущегоУстройства = НомерЛУ;
	Если Объект.Драйвер.Результат <> 0 Тогда
		ОписаниеРезультата = "Ошибка при выгрузке в ТСД s/n: "+Объект.Драйвер.СерийныйНомер()+" : "+Объект.Драйвер.ОписаниеРезультата;
		Возврат ОписаниеРезультата;
	КонецЕсли;
	
	ОчиститьПамятьТерминала(Объект, 1, Истина); // удалить БД
//-------Основной цикл выгрузки данных в Базу 0---------

	ИмяФайла = КаталогВременныхФайлов()+"DataFile"+Объект.Драйвер.СерийныйНомер()+".txt";
	Данные2  = Данные.ПолучитьОбласть(5,2, Данные.ВысотаТаблицы, Данные.ШиринаТаблицы);
	
	символРазделительПолей = символ(Объект.Параметры.РазделительБазыКод); 
	
//+++( 22.05.2014	
//------------------большой объем долго пишется-------------------------------------------	
	//ДанныеТД = новый ТекстовыйДокумент; // результат отчета запишем в текст
	//   стрТД = "";
	//для НомСтр=1 по Данные2.ВысотаТаблицы цикл
	//	стрТД = СокрЛП(данные2.ПолучитьОбласть(НомСтр,1,НомСтр,1).текущаяОбласть.Текст);
	//	Если стрТД="" тогда // код 1С - пустой
	//		продолжить;
	//	КонецЕсли;
	//	
	//	для j=2 по 4 цикл
	//		знач2 = СокрЛП(данные2.ПолучитьОбласть(НомСтр,j,НомСтр,j).текущаяОбласть.Текст);
	//		стрТД = стрТД +символРазделительПолей + знач2;
	//	КонецЦикла;
	//	ДанныеТД.ДобавитьСтроку(стрТД);
	//	
	//	
	//КонецЦикла;
	//
	//ДанныеТД.Записать(ИмяФайла, КодировкаТекста.Системная);
	
//-----------чистим файл------------------------------	
	ДанныеТД = новый ТекстовыйДокумент; 
	ДанныеТД.УстановитьТекст("");
	ДанныеТД.Записать(ИмяФайла, КодировкаТекста.Системная);

//-----------быстрая запись------------------------------	
	ДанныеТД = Новый ЗаписьТекста(имяФайла, КодировкаТекста.Системная);
    стрТД = "";
	Для НомСтр=1 По Данные2.ВысотаТаблицы Цикл
		стрТД = СокрЛП(данные2.ПолучитьОбласть(НомСтр,1,НомСтр,1).текущаяОбласть.Текст);
		Если стрТД="" Тогда Продолжить;
		КонецЕсли;
		
		для j=2 по 4 цикл
			знач2 = СокрЛП(данные2.ПолучитьОбласть(НомСтр,j,НомСтр,j).текущаяОбласть.Текст);
			стрТД = стрТД + символРазделительПолей + знач2;
		КонецЦикла;
	ДанныеТД.ЗаписатьСтроку(стрТД);
	КонецЦикла;
	ДанныеТД.Закрыть();
//-----------------------------------------------------------------
//+++)

	#Если Клиент тогда
		сообщить("Записан текстовый файл: "+ИмяФайла);	
	#КонецЕсли	
	НомБазы = 0;
	Объект.Драйвер.ИзФайлаВБазу(НомБазы, ИмяФайла);
	Объект.Драйвер.ЗавершитьЗагрузку();
		 
//------------------------------------------------------
Возврат ОписаниеРезультата;

КонецФункции


//  Очищает память терминала
//
// Параметры:
//  Объект       - объект подключенного торгового оборудования
//  НомерЛУ      - номер логического устройства с который связан Объект
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ОчиститьПамятьТерминала(Объект, НомерЛУ=0, ОчиститьБД=ложь)
	
	ОписаниеРезультата ="";
	
	Если Объект = Неопределено Тогда
		ОписаниеРезультата = "устройство не подключено";
		Возврат ОписаниеРезультата;
	КонецЕсли;

	//Объект.НомерТекущегоУстройства = НомерЛУ;
	номДокТСД = 0; //+++ всегда 0-ой!!!
	Если Объект.Драйвер.ОчиститьДокумент(номДокТСД) <> 0 Тогда
		ОписаниеРезультата = Объект.Драйвер.ОписаниеРезультата;
	КонецЕсли;

	// И очистка базы....
	Если ОчиститьБД тогда
		Если Объект.Драйвер.ОчиститьБазуДанных(Объект.Параметры.НомерБазы) <> 0 Тогда
		ОписаниеРезультата = ОписаниеРезультата + Объект.Драйвер.ОписаниеРезультата;
		КонецЕсли;
	КонецЕсли;

	Возврат ОписаниеРезультата;

КонецФункции // Очистить()

// обработка вызова операции на весах
//
// Параметры:
//  ИмяОперации  - имя выполняемой операции
//  Параметры    - структура с параметрами торгового оборудования
//  Ответ        - возвращаемая строка с представлением ошибки если она произошла, иначе пустая строка
//
Процедура ВыполнитьОперацию(ИмяОперации = "", Параметры, Ответ) Экспорт
	Перем Объект, Модель, Данные, НомерЛУ;

	Параметры.Свойство("Объект" , Объект );
	НомерЛУ = Параметры.НомерЛУ; //+++
	
	Если ЗначениеНеЗаполнено(НомерЛУ) Тогда
		НомерЛУ = 1;
	КонецЕсли;

	Если ИмяОперации = "Подключить" Тогда

		Параметры.Свойство("Модель", Модель);

		Ответ = Подключить(Модель.ВнешняяКомпонента, Модель.ПрограммныйИдентификатор, Объект, НомерЛУ);

		Параметры.Вставить("Объект", Объект);

	ИначеЕсли ИмяОперации = "Отключить" Тогда

		Ответ = Отключить(Объект, НомерЛУ);

	ИначеЕсли ИмяОперации = "ЗагрузитьДанныеИзТерминала" Тогда
        
		Ответ = ЗагрузитьДанныеИзТерминала(Объект, Данные, НомерЛУ,  Параметры.нетАдреса, Параметры.АдресПервый);  //+++ 01.05.2016

        Параметры.Вставить("Данные", Данные);
		
	ИначеЕсли ИмяОперации = "ВыгрузитьДанныеВТерминал" Тогда//+++
		
		Данные = Параметры.Данные;
 		Ответ  = ВыгрузитьДанныеВТерминал(Объект, Данные);

	ИначеЕсли ИмяОперации = "ОчиститьПамятьТерминала" Тогда

		Ответ = ОчиститьПамятьТерминала(Объект, НомерЛУ);

	Иначе

		Ответ = "Передана неизвестная команда";

	КонецЕсли;

КонецПроцедуры // ВыполнитьОперацию()


//==========================10.3====================================
// Функция создаёт объект драйвера.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Выходной параметр; объект драйвера торгового
//                                   оборудования.
//
//  Модель                         - <Строка>
//                                 - Модель торгового оборудования, для которой
//                                   создаётся экземпляр драйвера.
//
//  Параметры                      - <Строка>
//                                 - Параметры подключаемого торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция СоздатьОбъектДрайвера(Объект, Модель="CipherLab TCD-870x", Параметры=неопределено, номерCOMПорта=3) 

	Результат = "НетОшибки";
	Объект    = Неопределено;
	ОписаниеОшибки = "";

	Порт                     = Неопределено;
	Скорость                 = Неопределено;
	ИК                       = Неопределено;
	РазделительБазыКод       = Неопределено;
	РазделительДокументаКод  = Неопределено;
	ФорматБазы               = Неопределено;
	ФорматДокумента          = Неопределено;
	НомерБазы                = Неопределено;
	НомерДокумента           = Неопределено;
	ОчищатьДокумент          = Неопределено;
//		
//Если Параметры<>неопределено тогда
//	Параметры.Свойство("Порт",                     Порт);
//	Параметры.Свойство("Скорость",                 Скорость);
//	Параметры.Свойство("ИК",                       ИК);
//	Параметры.Свойство("РазделительБазыКод",       РазделительБазыКод);
//	Параметры.Свойство("РазделительДокументаКод",  РазделительДокументаКод);
//	Параметры.Свойство("ФорматБазы",               ФорматБазы);
//	Параметры.Свойство("ФорматДокумента",          ФорматДокумента);
//	Параметры.Свойство("НомерБазы",                НомерБазы);
//	Параметры.Свойство("НомерДокумента",           НомерДокумента);
//	Параметры.Свойство("ОчищатьДокумент",          ОчищатьДокумент);
//иначе
Если Параметры=неопределено тогда
	Параметры = новый Структура;
	Параметры.Вставить("Порт", номерCOMПорта); // по умолчанию... COM5
	Параметры.Вставить("Скорость", 1 );   // 1-я максимальная 11520 Кбит/сек
	Параметры.Вставить("ИК", 0); 
	Параметры.Вставить("РазделительБазыКод",       9); // " "
	Параметры.Вставить("РазделительДокументаКод",  61);// "="
	Параметры.Вставить("ФорматБазы",               "База");
	Параметры.Вставить("ФорматДокумента",          "Документ");
	Параметры.Вставить("НомерБазы",                1);
	Параметры.Вставить("НомерДокумента",           1);
	Параметры.Вставить("ОчищатьДокумент",          1); // 1- да, очищать документ после загрузки
КонецЕсли;

		Попытка
			ПрогИД = "AddIn.CipherLab";
			ПодключитьВнешнююКомпоненту(ПрогИД);
			Драйвер = Новый (ПрогИД);
			
			// параметры из подключечния 1С
			РазделительБазыСимв=Символ(9); 
			РазделительДокументаСимв=символ(61);
			Драйвер.ПолучитьПараметры(Порт, Скорость, ИК, РазделительБазыСимв, РазделительДокументаСимв);
			Параметры.Свойство("Порт",                     Порт);
			Параметры.Свойство("Скорость",                 Скорость);
			Параметры.Свойство("ИК",                       ИК);
			Параметры.Свойство("РазделительБазыКод",       КодСимвола(РазделительБазыСимв) );
			Параметры.Свойство("РазделительДокументаКод",  КодСимвола(РазделительДокументаСимв) );
	
		Исключение
			Результат = "ОшибкаЗагрузкиДрайвера";
			ОписаниеОшибки = "Невозможно подключить внешнюю компоненту.
			| Проверьте, что внешняя компонента корректно установлена и имеет ту же версию, 
			| что и требуемая обработкой обслуживания.";
		КонецПопытки;

		Если Результат = "НетОшибки" Тогда
			
			Объект = Новый Структура("Модель, Параметры, Драйвер, ОписаниеОшибки",
			                          Модель, Параметры, Драйвер, ОписаниеОшибки);
		КонецЕсли;
	//КонецЕсли;

	Возврат Результат;

КонецФункции // СоздатьОбъектДрайвера()


// Функция осуществляет подключение устройства.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция Подключить103(Объект) Экспорт

	Результат = "";

	Ответ = Объект.Драйвер.УстановитьПараметры(Объект.Параметры.Порт,
										Объект.Параметры.Скорость,
										Объект.Параметры.ИК,
										Символ(Объект.Параметры.РазделительБазыКод),
										Символ(Объект.Параметры.РазделительДокументаКод));
  
	Объект.Драйвер.Подключить();
	Если Объект.Драйвер.Результат <> 0 Тогда
		Объект.ОписаниеОшибки = Объект.Драйвер.ОписаниеРезультата;
		Результат = Объект.Драйвер.ОписаниеРезультата;
	КонецЕсли;

	Возврат Результат;

КонецФункции // Подключить()


