// Валюта регламентированного учета организаций
Перем мВалютаРегламентированногоУчета Экспорт;

// фискальный регистратор
Перем млФР                     Экспорт;

//ККТ с передачей данных
Перем млККТ					   Экспорт;

// сканер штрих кодов
Перем млСШК                    Экспорт;

// ридер магнитных карт
Перем млРМК                    Экспорт;

// ККМ On-Line
Перем млККМOnLine              Экспорт;
Перем млЧековыйБуферККМOnLine  Экспорт;

// ККМ Off-Line
Перем млККМOffLine             Экспорт;

// электронные весы
Перем млВесы                   Экспорт;

// дисплей покупателя
Перем млДП                     Экспорт;
Перем млДПРежим                Экспорт;

// терминал сбора данных
Перем млТерминал               Экспорт;

Перем мНетОшибки;
Перем мОшибкаНеизвестно;
Перем мНетПрав;

перем массивТиповДокументов, массивШК, 	ЧислоТиповДокШК; //+++ 2012

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ФИСКАЛЬНЫМ РЕГИСТРАТОРОМ

// Подключение фискального регистратора
//
// Параметры:
//  Модель       - модель фискального регистратора (ссылка на справочник Торговое оборудование)
//  ПарольАдминистратора - пароль администратора, заданный в качестве параметра ФР
//  ПарольПользователя - пароль пользователя, заданный в качестве параметра ФР
//  НомерЛУ      - номер логического устройства с который связан Объект
//  КассаККМ     - Касса ККМ с которой связан фискальный регистратор
//
Процедура ПодключитьФР(Модель, ПарольАдминистратора, ПарольПользователя, НомерЛУ, ДляПриемаНаличныхОтЮрЛиц, КассаККМ, ПодключениеПриЗапускеСистемы = ложь)
	Перем Ответ, Объект;

	Параметры = Новый Структура();
	Если ПарольПользователя = 0 Тогда
		Пароль = ПарольАдминистратора;
	Иначе
		Пароль = ПарольПользователя;
	КонецЕсли;
	Параметры.Вставить("Модель" , Модель            );
	Параметры.Вставить("Пароль" , Пароль);
	Параметры.Вставить("Объект" , Объект            );
	Параметры.Вставить("НомерЛУ", НомерЛУ           );
	Если ПодключениеПриЗапускеСистемы Тогда
		Параметры.Вставить("ПодключениеПриЗапускеСистемы");
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Модель.ОбработкаОбслуживания) Тогда
		Сообщить("Фискальный регистратор """ + Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
		Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
		Возврат;
	КонецЕсли;

	ФормаОбработки = ПолучитьФормуОбработки(Модель.ОбработкаОбслуживания);
	ФормаОбработки.ВыполнитьОперацию("Подключить", Параметры, Ответ);

	Параметры.Свойство("Объект" , Объект            );

	Если ПустаяСтрока(Ответ) Тогда
		НовыйФР = млФР.Добавить();
		НовыйФР.Объект                   = Объект;
		НовыйФР.Модель                   = Модель;
		НовыйФР.НомерЛУ                  = НомерЛУ;
		НовыйФР.КассаККМ                 = КассаККМ;
		НовыйФР.ДляПриемаНаличныхОтЮрЛиц = ДляПриемаНаличныхОтЮрЛиц;
	Иначе
		Сообщить("Фискальный регистратор """ + Модель.Наименование + """: ошибка при подключении", СтатусСообщения.Важное);
		Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
	КонецЕсли;

КонецПроцедуры // ПодключитьФР()

// Отключение фискального регистратора
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//
Процедура ОтключитьФР(СтрокаТаблицыФР)
	Перем Ответ;

	Если СтрокаТаблицыФР <> Неопределено Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

		Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("Отключить", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при отключении", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;
		млФР.Удалить(СтрокаТаблицыФР);

	КонецЕсли;

КонецПроцедуры // ОтключитьФР()

// Подключение ККТ с передачей данных 
//
// Параметры:
//  Модель       - модель фискального регистратора (ссылка на справочник Торговое оборудование)
//  ПарольАдминистратора - пароль администратора, заданный в качестве параметра ФР
//  ПарольПользователя - пароль пользователя, заданный в качестве параметра ФР
//  НомерЛУ      - номер логического устройства с который связан Объект
//  ДляПриемаНаличныхОтЮрЛиц - признак используется ли фискальный регистратор для приема наличных денег от юр.лиц или нет
//  КассаККМ     - Касса ККМ с которой связан фискальный регистратор
//
Процедура ПодключитьККТ(Модель, ПарольАдминистратора, ПарольПользователя, НомерЛУ, ДляПриемаНаличныхОтЮрЛиц, КассаККМ, Оборудование, ПодключениеПриЗапускеСистемы = ложь)
	Перем Ответ, Объект;
	
	Если ЗначениеНеЗаполнено(Модель.ОбработкаОбслуживания) Тогда
		Сообщить("Фискальный регистратор """ + Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
		Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
		Возврат;
	КонецЕсли;

	ДопИнфо          = "";
	
	Параметры = ?(ПустаяСтрока(Оборудование.Параметры),
	Новый Структура(),
	ЗначениеИзСтрокиВнутр(Оборудование.Параметры));
	Параметры.Вставить("НомерЛУ", НомерЛУ           );
	Если ПодключениеПриЗапускеСистемы Тогда
		Параметры.Вставить("ПодключениеПриЗапускеСистемы");
	КонецЕсли;
	
	ОбъектДрайвера = Неопределено;
	ФормаОбработки = ПолучитьФормуОбработки(Модель.ОбработкаОбслуживания);
	Результат = ФормаОбработки.СоздатьОбъектДрайвера(ОбъектДрайвера, Модель, Параметры);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		ОбъектДрайвера.ОписаниеОшибки = "";
		Результат = ФормаОбработки.ТестУстройства(ОбъектДрайвера);
		ДопИнфо = ОбъектДрайвера.ОписаниеОшибки;
		Сообщить(ДопИнфо);
	КонецЕсли;
	
	Результат = ФормаОбработки.Подключить(ОбъектДрайвера);
	Если ЗначениеЗаполнено(Результат) Тогда
		мОписаниеОшибки = ОбъектДрайвера.ОписаниеОшибки;
		Ошибка = ПолучитьТекстОшибкиТО(Результат);
		Сообщить("ККТ с передачей данных """ + Модель.Наименование + """: " + Ошибка, СтатусСообщения.Важное);
		ПоследняяОшибка = Результат;
	КонецЕсли;
	
	Параметры.Свойство("Объект" , Объект            );

	СтруктураОборудования = Новый Структура("КассаККМ,Компьютер,МодельТорговогоОборудования,НомерЛогическогоУстройства,Параметры,Подключено");
	ЗаполнитьЗначенияСвойств(СтруктураОборудования,Оборудование);
	
	Если Результат =мНетОшибки Тогда
		НовыйККТ = млККТ.Добавить();
		НовыйККТ.Объект                   = ОбъектДрайвера;
		НовыйККТ.Модель                   = Модель;
		НовыйККТ.НомерЛУ                  = НомерЛУ;
		НовыйККТ.КассаККМ                 = КассаККМ;
		НовыйККТ.ДляПриемаНаличныхОтЮрЛиц = ДляПриемаНаличныхОтЮрЛиц;
		//НовыйККТ.Оборудование			  = Оборудование;
		НовыйККТ.Оборудование			  = СтруктураОборудования;
	Иначе
		Сообщить("ККТ с передачей данных """ + Модель.Наименование + """: ошибка при подключении", СтатусСообщения.Важное);
		Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
	КонецЕсли;
	
КонецПроцедуры // ПодключитьФР()

// Отключение ККТ с передачей данных
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//
Процедура ОтключитьККТ(СтрокаТаблицыККТ)
	Перем Ответ;

	Если СтрокаТаблицыККТ <> Неопределено Тогда

		Параметры = ?(ПустаяСтрока(СтрокаТаблицыККТ.Оборудование.Параметры),
		Новый Структура(),
		ЗначениеИзСтрокиВнутр(СтрокаТаблицыККТ.Оборудование.Параметры));
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыККТ.НомерЛУ);

		Если ЗначениеНеЗаполнено(СтрокаТаблицыККТ.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("ККТ с передачей данных """ + СтрокаТаблицыККТ.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ОбъектДрайвера = Неопределено;
		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыККТ.Модель.ОбработкаОбслуживания);
		Результат = ФормаОбработки.СоздатьОбъектДрайвера(ОбъектДрайвера, СтрокаТаблицыККТ.Модель, Параметры);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ОбъектДрайвера.ОписаниеОшибки = "";
			ФормаОбработки.Отключить(ОбъектДрайвера);
			млККТ.Удалить(СтрокаТаблицыККТ);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОтключитьФР()

// Аннулирование чека
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//
Процедура АннулироватьЧек(СтрокаТаблицыФР, Ответ, ВыводитьСообщение = Истина) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда
         // {Лапенков 20070320 (закомментировал, иначе не дает по одному и тому же фискальнику вносить аванс и продавать)}
		//Если НРег(СтрокаТаблицыФР.ДляПриемаНаличныхОтЮрЛиц) = "истина" Тогда

			//Если ВыводитьСообщение Тогда
			//	Ответ = "Фискальный регистратор """+СтрокаТаблицыФР.Модель+""" предназначен для отражения наличных денежных расчетов";
			//	Сообщить(Ответ, СтатусСообщения.Важное);
			//КонецЕсли;

		//Иначе

			Параметры = Новый Структура();
			Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора");
			Если Пароль = 0 Тогда
				Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора");
			КонецЕсли;
			Параметры.Вставить("Пароль" , Пароль);
			Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
			Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

			Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
				Если ВыводитьСообщение Тогда
					Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
					Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
				КонецЕсли;
				Возврат;
			КонецЕсли;

			ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
			ФормаОбработки.ВыполнитьОперацию("АннулироватьЧек", Параметры, Ответ);

			Если Не ПустаяСтрока(Ответ) Тогда
				Если ВыводитьСообщение Тогда
					Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при аннулировании чека", СтатусСообщения.Важное);
					Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
				КонецЕсли;
			КонецЕсли;
		//КонецЕсли;

	КонецЕсли;

КонецПроцедуры // АннулироватьЧек()

// Процедура вызова печати Кассы ККМ на кассовой ленте перед закрытием КассыККМ на фискальном регистраторе
Процедура ПечататьКассуККМ(СтрокаТаблицыФР, Параметры, Ответ)   Экспорт
	Если СтрокаТаблицыФР <> Неопределено Тогда
		Параметры.Вставить("Пароль" , ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора"));
		Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );
	КонецЕсли;
	Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
		Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
		Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
		Возврат;
	КонецЕсли;
	
	//Параметры.Свойство("СтрокаТовара", СтрокаТовара);
	ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
	ФормаОбработки.ВыполнитьОперацию("ПечататьСтрокуЧека", Параметры, Ответ);
	СтрокаТовара = Неопределено;
	

	Если ПустаяСтрока(Ответ) Тогда
	Иначе
		Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при печати чека", СтатусСообщения.Важное);
		//Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
	КонецЕсли;

КонецПроцедуры	

// Процедура вызова печати строки чека на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ПечататьСтрокуЧека(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		//Если НРег(СтрокаТаблицыФР.ДляПриемаНаличныхОтЮрЛиц) = "истина" Тогда

		//	Ответ = "Фискальный регистратор """+СтрокаТаблицыФР.Модель+""" предназначен для отражения наличных денежных расчетов";
		//	Сообщить(Ответ, СтатусСообщения.Важное);

		//Иначе

			Параметры.Вставить("Пароль" , ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора"));
			Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
			Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );
			СтрокаТовара = Неопределено;
			Параметры.Свойство("СтрокаТовара", СтрокаТовара);
			Если СтрокаТовара.Номенклатура = Неопределено
			 Или СтрокаТовара.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при печати чека", СтатусСообщения.Важное);
				Ответ = "Не заполнена номенклатура!";
				Возврат;
			КонецЕсли;
			
			Если СтрокаТовара.Цена = 0 Тогда
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при печати чека", СтатусСообщения.Важное);
				Ответ = "Не заполнена цена товара!";

				Возврат;
			КонецЕсли;

			Если СтрокаТовара.Количество = 0 Тогда
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при печати чека", СтатусСообщения.Важное);
				Ответ = "Не заполнено количество товара!";
				Возврат;
			КонецЕсли;

			Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
				Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
				Возврат;
			КонецЕсли;

			ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
			ФормаОбработки.ВыполнитьОперацию("ПечататьСтрокуЧека", Параметры, Ответ);

			Если ПустаяСтрока(Ответ) Тогда
			Иначе
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при печати чека", СтатусСообщения.Важное);
				//Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
			КонецЕсли;
		//КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПечататьСтрокуЧека()
//***

// Процедура вызова закрытия чека на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ЗакрытьЧек(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		//Если НРег(СтрокаТаблицыФР.ДляПриемаНаличныхОтЮрЛиц) = "истина" Тогда

		//	Ответ = "Фискальный регистратор """+СтрокаТаблицыФР.Модель+""" предназначен для отражения наличных денежных расчетов";
		//	Сообщить(Ответ, СтатусСообщения.Важное);

		//Иначе

			Параметры.Вставить("Пароль" , ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора"));
			Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
			Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

			Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
				Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
				Возврат;
			КонецЕсли;

			ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
			ФормаОбработки.ВыполнитьОперацию("ЗакрытьЧек", Параметры, Ответ);

			Если ПустаяСтрока(Ответ) Тогда
				ОткрытьЯщик(СтрокаТаблицыФР, Параметры, Ответ);
			Иначе
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при закрытии чека", СтатусСообщения.Важное);
				Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
			КонецЕсли;
		//КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗакрытьЧек()

// Процедура получения номера нового чека и смены на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ПолучитьНомерЧекаСмены(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда
		//Если НРег(СтрокаТаблицыФР.ДляПриемаНаличныхОтЮрЛиц) = "истина" Тогда

		//	Ответ = "Фискальный регистратор """+СтрокаТаблицыФР.Модель+""" предназначен для отражения наличных денежных расчетов";
		//	Сообщить(Ответ, СтатусСообщения.Важное);

		//Иначе

			Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора");
			Если Пароль = 0 Тогда
				Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора");
			КонецЕсли;
			Параметры.Вставить("Пароль" , Пароль);
			Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
			Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

			Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
				Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
				Возврат;
			КонецЕсли;

			ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
			ФормаОбработки.ВыполнитьОперацию("ПолучитьНомерЧекаСмены", Параметры, Ответ);

			Если ПустаяСтрока(Ответ) Тогда
			Иначе
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при получении номера чека и смены", СтатусСообщения.Важное);
				Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
			КонецЕсли;
		//КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолучитьНомерЧекаСмены()

// Процедура вызова печати чека на фискальном регистраторе
//
// Параметры:
//  МодельТорговогоОборудования - модель фискального регистратора из справочника "Торговое оборудование"
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ПечататьЧек(ФР, Параметры, Ответ) Экспорт

	Ответ = "";

	Если ЗначениеНеЗаполнено(ФР) Тогда
		Ответ = "Ошибка при попытке печати чека: фискальный регистратор не подключен.";
	ИначеЕсли ЗначениеНеЗаполнено(ФР.Модель.ОбработкаОбслуживания) Тогда
		Ответ = "Ошибка при печати строки чека на фискальном регистраторе """
		         + ФР.Модель.Наименование
		         + """: не задана обработка обслуживания.";
	//ИначеЕсли ФР.ДляПриемаНаличныхОтЮрЛиц Тогда
	//	Ответ = "Ошибка при попытке печати чека на фискальном регистраторе """
	//			+ ФР.Модель.Наименование
	//			+ """: фискальный регистратор предназначен для отражения наличных денежных расчетов.";
	Иначе
		Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,
		                                     "ПарольКассираФискальногоРегистратора");
		Если ЗначениеНеЗаполнено(Пароль) Тогда
			Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,
			                                     "ПарольАдминистратораФискальногоРегистратора");
		КонецЕсли;
		Если ЗначениеНеЗаполнено(Пароль) Тогда
			Ответ = "Ошибка при попытке печати чека на фискальном регистраторе """
		        + ФР.Модель.Наименование
		        + """: в настройках пользователя не указан пароль фискального регистратора.";
		Иначе
			Форма     = ПолучитьФормуОбработки(ФР.Модель.ОбработкаОбслуживания);
			Параметры.Вставить("Объект",  ФР.Объект);
			Параметры.Вставить("НомерЛУ", ФР.НомерЛУ);
			Параметры.Вставить("Пароль",  Пароль);
			Форма.ВыполнитьОперацию("ПечататьЧек", Параметры, Ответ);
			Если Не ПустаяСтрока(Ответ) Тогда
				Ответ = "Ошибка при попытке печати чека на фискальном регистраторе """
				        + ФР.Модель.Наименование
				        + """: " + Ответ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры // ПечататьЧек()

// Процедура вызова печати ПКО на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ПечататьЧекДляПКО(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		ИскомаяСтрока = СтрокаТаблицыФР.Значение;
		//Если НРег(ИскомаяСтрока.ДляПриемаНаличныхОтЮрЛиц) <> "истина" Тогда

		//	Ответ = "Фискальный регистратор """+ИскомаяСтрока.Модель+""" не предназначен для отражения наличных денежных расчетов";
		//	Сообщить(Ответ, СтатусСообщения.Важное);

		//Иначе

			Параметры.Вставить("Пароль" , ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора"));
			Параметры.Вставить("Объект" , ИскомаяСтрока.Объект            );
			Параметры.Вставить("НомерЛУ", ИскомаяСтрока.НомерЛУ           );

			Если ЗначениеНеЗаполнено(ИскомаяСтрока.Модель.ОбработкаОбслуживания) Тогда
				Сообщить("Фискальный регистратор """ + ИскомаяСтрока.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
				Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
				Возврат;
			КонецЕсли;

			ФормаОбработки = ПолучитьФормуОбработки(ИскомаяСтрока.Модель.ОбработкаОбслуживания);
			ФормаОбработки.ВыполнитьОперацию("ПечататьЧекДляПКО", Параметры, Ответ);

			Если ПустаяСтрока(Ответ) Тогда
			Иначе
				Сообщить("Фискальный регистратор """ + ИскомаяСтрока.Модель.Наименование + """: ошибка при печати чека", СтатусСообщения.Важное);
				Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
			КонецЕсли;

		//КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПечататьЧекДляПКО()

// Процедура вызова закрытия смены на фискальном регистраторе
// на ФР печатается Z-отчет
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ЗакрытьСмену(СтрокаТаблицыФР, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		// параметры фискального регистратора
		Параметры = Новый Структура();
		Параметры.Вставить("Пароль" , ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора"));
		Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект              );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ             );

		Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ЗакрытьСмену", Параметры, Ответ);

		Если ПустаяСтрока(Ответ) Тогда
		Иначе
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при закрытии кассовой смены", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;

	Иначе

		Ответ = "Не подключен фискальный регистратор";

	КонецЕсли;

КонецПроцедуры // ЗакрытьСмену()

// Процедура печати отчета со скидками
Процедура ПечатьОтчетаСОСкидками(СтрокаТаблицыФР,Ответ, МассивДокументов) Экспорт
	
	Объект_ 				= СтрокаТаблицыФР.Объект;
	НомерЛУ_ 				= СтрокаТаблицыФР.НомерЛУ;
	ПарольАдминистратора_ 	= ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ПарольАдминистратораФискальногоРегистратора");
	
	ФормаОбработки = глТорговоеОборудование.ПолучитьФормуОбработки(Перечисления.ОбработкиТорговогоОборудования.fr_elves);			

	Параметры = Новый Структура();
	Параметры.Вставить("Пароль" , ПарольАдминистратора_);
	Параметры.Вставить("Объект" , Объект_);
	Параметры.Вставить("НомерЛУ", НомерЛУ_);
	Параметры.Вставить("МассивДокументов", МассивДокументов);

	ФормаОбработки.ПечатьОтчетаСОСкидками(Объект_,НомерЛУ_,ПарольАдминистратора_, МассивДокументов);
	
КонецПроцедуры

// Процедура вызова печати Х-отчета на фискальном регистраторе
// на ФР печатается Z-отчет
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ХОтчет(СтрокаТаблицыФР, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		// параметры фискального регистратора
		Параметры = Новый Структура();
		Параметры.Вставить("Пароль" , ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора"));
		Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект              );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ             );

		Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ХОтчет", Параметры, Ответ);

		Если ПустаяСтрока(Ответ) Тогда
		Иначе
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при печати Х-отчета", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;

	Иначе

		Ответ = "Не подключен фискальный регистратор";

	КонецЕсли;

КонецПроцедуры // ХОтчет()

// Процедура вызова открытия денежного ящика на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ОткрытьЯщик(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора");
		Если Пароль = 0 Тогда
			Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора");
		КонецЕсли;
		Параметры.Вставить("Пароль" , Пароль);
		Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

		Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ОткрытьЯщик", Параметры, Ответ);

		Если ПустаяСтрока(Ответ) Тогда
		Иначе
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при открытии ящика", СтатусСообщения.Важное);
			Сообщить("     "+Ответ);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОткрытьЯщик()

// Процедура внесения денег в денежный ящик на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ВнестиСумму(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора");
		Если Пароль = 0 Тогда
			Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора");
		КонецЕсли;
		Параметры.Вставить("Пароль" , Пароль);
		Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

		Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("Внести", Параметры, Ответ);

		Если ПустаяСтрока(Ответ) Тогда
		Иначе
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при внесении денег в ящик", СтатусСообщения.Важное);
			Сообщить("     "+Ответ);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВнестиСумму()

// Процедура изъятия денег из денежного ящика на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ИзъятьСумму(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора");
		Если Пароль = 0 Тогда
			Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора");
		КонецЕсли;
		Параметры.Вставить("Пароль" , Пароль);
		Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

		Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("Изъять", Параметры, Ответ);

		Если ПустаяСтрока(Ответ) Тогда
		Иначе
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при изъятии денег из ящика", СтатусСообщения.Важное);
			Сообщить("     "+Ответ);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВнестиСумму()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СКАНЕРОМ ШТРИХ-КОДОВ

// Подключение сканера штрих-кодов
//
// Параметры:
//  Модель       - модель сканера штрих-кодов (ссылка на справочник Торговое оборудование)
//  Префикс      - префикс, который возвращает сканер в начале строки со штрих-кодом
//
Процедура ПодключитьСШК(Модель, Префикс)
	Перем Ответ, Объект;

	Параметры = Новый Структура();
	Параметры.Вставить("Модель" , Модель );
	Параметры.Вставить("Префикс", Префикс);
	Параметры.Вставить("Объект" , Объект );

	Если ЗначениеНеЗаполнено(Модель.ОбработкаОбслуживания) Тогда
		Сообщить("Сканер штрих-кодов """ + Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
		Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
		Возврат;
	КонецЕсли;

	ФормаОбработки = ПолучитьФормуОбработки(Модель.ОбработкаОбслуживания);
	ФормаОбработки.ВыполнитьОперацию("Подключить", Параметры, Ответ);

	Параметры.Свойство("Объект", Объект  );

	Если ПустаяСтрока(Ответ) Тогда
		НовыйСШК = млСШК.Добавить();
		НовыйСШК.Объект  = Объект;
		НовыйСШК.Модель  = Модель;
		НовыйСШК.Префикс = Префикс;
	Иначе
		Сообщить("Сканер штрих-кодов """ + Модель.Наименование + """: ошибка при подключении", СтатусСообщения.Важное);
		Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
	КонецЕсли;

КонецПроцедуры // ПодключитьСШК()

// Отключение сканера штрих-кодов
//
// Параметры:
//  СтрокаТаблицыСШК - строка таблицы подключенных сканеров штрих-кода
//
Процедура ОтключитьСШК(СтрокаТаблицыСШК)
	Перем Ответ;

	Если СтрокаТаблицыСШК <> Неопределено Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект", СтрокаТаблицыСШК.Объект);

		Если ЗначениеНеЗаполнено(СтрокаТаблицыСШК.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Сканер штрих-кодов """ + СтрокаТаблицыСШК.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыСШК.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("Отключить", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Сообщить("Сканер штрих-кодов """ + СтрокаТаблицыСШК.Модель.Наименование + """: ошибка при отключении", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;
		млСШК.Удалить(СтрокаТаблицыСШК);

	КонецЕсли;

КонецПроцедуры // ОтключитьСШК()

// установка или отключение режима буферизации считанных сканером штрихкодов
//
// Параметры:
//  Флаг         - режим работы. 1 - включить режим буферизации, 0 - отключить
//
Процедура СканерПосылкаДанных(Флаг) Экспорт
	Перем Ответ;

	Для Каждого СтрокаТаблицыСШК Из млСШК Цикл

		Параметры = Новый Структура();
		Параметры.Вставить("Объект", СтрокаТаблицыСШК.Объект);
		Параметры.Вставить("Флаг"  , Флаг                   );

		Если ЗначениеНеЗаполнено(СтрокаТаблицыСШК.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Сканер штрих-кодов """ + СтрокаТаблицыСШК.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыСШК.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ПосылкаДанных", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Сообщить("Сканер штрих-кода """ + СтрокаТаблицыСШК.Модель.Наименование + """: ошибка при установке режима", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // СканерПосылкаДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С РИДЕРОМ МАГНИТНЫХ КАРТ

// Подключение ридера магнитных карт
//
// Параметры:
//  Модель       - модель сканера штрих-кодов (ссылка на справочник Торговое оборудование)
//  Префикс      - префикс, который возвращает сканер в начале строки со штрих-кодом
//
Процедура ПодключитьРМК(Модель, ИсточникДанных)
	Перем Ответ, Объект;

	Параметры = Новый Структура();
	Параметры.Вставить("Модель" , Модель );
	Параметры.Вставить("ИсточникДанных", ИсточникДанных);
	Параметры.Вставить("Объект" , Объект );
	Параметры.Вставить("НомерЛУ" , 1);

	Если ЗначениеНеЗаполнено(Модель.ОбработкаОбслуживания) Тогда
		Сообщить("Ридер магнитных карт """ + Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
		Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
		Возврат;
	КонецЕсли;

	ФормаОбработки = ПолучитьФормуОбработки(Модель.ОбработкаОбслуживания);
	ФормаОбработки.ВыполнитьОперацию("Подключить", Параметры, Ответ);

	Параметры.Свойство("Объект", Объект  );

	Если ПустаяСтрока(Ответ) Тогда
		НовыйРМК = млРМК.Добавить();
		НовыйРМК.Объект  = Объект;
		НовыйРМК.Модель  = Модель;
		НовыйРМК.ИсточникДанных = ИсточникДанных;
	Иначе
		Сообщить("Ридер магнитных карт """ + Модель.Наименование + """: ошибка при подключении", СтатусСообщения.Важное);
		Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
	КонецЕсли;

КонецПроцедуры // ПодключитьРМК()

// Отключение ридера магнитных карт
//
// Параметры:
//  СтрокаТаблицыСШК - строка таблицы подключенных сканеров штрих-кода
//
Процедура ОтключитьРМК(СтрокаТаблицыРМК)
	Перем Ответ;

	Если СтрокаТаблицыРМК <> Неопределено Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект", СтрокаТаблицыРМК.Объект);

		Если ЗначениеНеЗаполнено(СтрокаТаблицыРМК.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Ридер магнитных карт """ + СтрокаТаблицыРМК.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыРМК.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("Отключить", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Сообщить("Сканер штрих-кодов """ + СтрокаТаблицыРМК.Модель.Наименование + """: ошибка при отключении", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;
		млРМК.Удалить(СтрокаТаблицыРМК);

	КонецЕсли;

КонецПроцедуры // ОтключитьРМК()

// Включение считывания следующего кода карты
//
Процедура РидерПосылкаДанных() Экспорт
	Перем Ответ;

	Если млРМК.Количество() >0 Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект", млРМК[0].Объект);
		Параметры.Вставить("НомерЛУ", млРМК[0].Объект.НомерТекущегоУстройства);

		Если ЗначениеНеЗаполнено(млРМК[0].Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Ридер магнитных карт """ + млРМК[0].Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(млРМК[0].Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ПосылкаДанных", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Сообщить("Ридер магнитных карт """ + млРМК[0].Модель.Наименование + """: ошибка при установке режима", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // РидерПосылкаДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ККМ ON-LINE

// Подключение ККМ в режиме On-Line
//
// Параметры:
//  Модель       - модель ККМ On-Line (ссылка на справочник Торговое оборудование)
//  ЗаводскойКод - заводской номер ККМ
//  КассаККМ     - Касса ККМ с которой связана ККМ On-Line
//
Процедура ПодключитьККМOnLine(Модель, ЗаводскойКод, КассаККМ)
	Перем Ответ, Объект;

	Если КассаККМ = Справочники.КассыККМ.ПустаяСсылка() Тогда
		Сообщить("Для ККМ On-Line """ + Модель + """ не настроена Касса ККМ.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	Параметры = Новый Структура();
	Параметры.Вставить("Модель", Модель);
	Параметры.Вставить("Объект", Объект);

	Если ЗначениеНеЗаполнено(Модель.ОбработкаОбслуживания) Тогда
		Сообщить("ККМ On-Line """ + Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
		Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
		Возврат;
	КонецЕсли;

	ФормаОбработки = ПолучитьФормуОбработки(Модель.ОбработкаОбслуживания);
	ФормаОбработки.ВыполнитьОперацию("Подключить", Параметры, Ответ);

	Параметры.Свойство("Объект", Объект);

	Если ПустаяСтрока(Ответ) Тогда
		НовыйККМOnLine = млККМOnLine.Добавить();
		НовыйККМOnLine.Объект   = Объект;
		НовыйККМOnLine.Модель   = Модель;
		НовыйККМOnLine.Код      = СокрЛП(ЗаводскойКод);
		НовыйККМOnLine.КассаККМ = КассаККМ;
	Иначе
		Сообщить("ККМ On-Line """ + Модель.Наименование + """: ошибка при подключении", СтатусСообщения.Важное);
		Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
	КонецЕсли;

КонецПроцедуры // ПодключитьККМOnLine()

// Отключение ККМ в режиме On-Line
//
// Параметры:
//  СтрокаТаблицыККМOnLine - строка таблицы подключенных ККМ в режиме OnLine
//
Процедура ОтключитьККМOnLine(СтрокаТаблицыККМOnLine)
	Перем Ответ;

	Если СтрокаТаблицыККМOnLine <> Неопределено Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект", СтрокаТаблицыККМOnLine.Объект);

		Если ЗначениеНеЗаполнено(СтрокаТаблицыККМOnLine.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("ККМ On-Line """ + СтрокаТаблицыККМOnLine.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыККМOnLine.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("Отключить", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Сообщить("ККМ On-Line """ + СтрокаТаблицыККМOnLine.Модель.Наименование + """: ошибка при отключении", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;
		млККМOnLine.Удалить(СтрокаТаблицыККМOnLine);

	КонецЕсли;

КонецПроцедуры // ОтключитьККМOnLine()

// Процедура обработки события от ККМ в режиме On-Line
//
// Параметры:
//  Источник     - источник события
//  Событие      - строковое предствление события
//  Данные       - передаваемые данные
//
Процедура ОбработкаСобытияККМ(Источник, Событие, Данные) Экспорт
	Перем Ответ;

	Если Источник = "A200Online" Тогда
		ИскомаяСтрока = млККМOnLine.Найти(СокрЛП(Данные), "Код");
		Если ИскомаяСтрока <> Неопределено Тогда
			Если ИскомаяСтрока.КассаККМ <> Справочники.КассыККМ.ПустаяСсылка() Тогда
				Параметры = Новый Структура();
				Параметры.Вставить("Объект"  , ИскомаяСтрока.Объект   );
				Параметры.Вставить("Событие" , Событие                );
				Параметры.Вставить("КодККМ"  , СокрЛП(Данные)         );
				Параметры.Вставить("КассаККМ", ИскомаяСтрока.КассаККМ );
				Параметры.Вставить("Буфер"   , млЧековыйБуферККМOnLine);

				Если ЗначениеНеЗаполнено(ИскомаяСтрока.Модель.ОбработкаОбслуживания) Тогда
					Сообщить("ККМ On-Line """ + ИскомаяСтрока.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
					Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
					Возврат;
				КонецЕсли;

				ФормаОбработки = ПолучитьФормуОбработки(ИскомаяСтрока.Модель.ОбработкаОбслуживания);
				ФормаОбработки.ВыполнитьОперацию("Событие", Параметры, Ответ);

				Параметры.Свойство("Буфер"  , млЧековыйБуферККМOnLine);

				Если Не ПустаяСтрока(Ответ) Тогда
					Сообщить("ККМ On-Line """ + ИскомаяСтрока.Модель.Наименование + """: ошибка обработки сообщения", СтатусСообщения.Важное);
					Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
				КонецЕсли;
			Иначе
				Сообщить("Для ККМ On-Line """ + ИскомаяСтрока.Модель + """ не настроена Касса ККМ.", СтатусСообщения.Важное);
			КонецЕсли;
		Иначе
			Сообщить("ККМ On-Line не настроена (возможно не задан заводской номер).", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаСобытияККМ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ККМ OFF-LINE

// Подключение ККМ в режиме Off-Line
//
// Параметры:
//  Модель       - модель ККМ Off-Line (ссылка на справочник Торговое оборудование)
//  Путь         - путь выгрузки информации о товарах и загрузки информации о продажах
//  НомерЛУ      - номер логического устройства с который связан Объект
//  КассаККМ     - Касса ККМ с которой связана ККМ Off-Line
//
Процедура ПодключитьККМOffLine(Модель, Путь, НомерЛУ, КассаККМ, Адрес = "", Порт = 0)
	Перем Ответ, Объект;

	Параметры = Новый Структура();
	Параметры.Вставить("Модель" , Модель );
	Параметры.Вставить("Объект" , Объект );
	Параметры.Вставить("НомерЛУ", НомерЛУ);

	Если ЗначениеНеЗаполнено(Модель.ОбработкаОбслуживания) Тогда
		Сообщить("ККМ Off-Line """ + Модель.Наименование + """: ошибка при подключении", СтатусСообщения.Важное);
		Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
		Возврат;
	КонецЕсли;

	ФормаОбработки = ПолучитьФормуОбработки(Модель.ОбработкаОбслуживания);
	ФормаОбработки.ВыполнитьОперацию("Подключить", Параметры, Ответ);

	Параметры.Свойство("Объект" , Объект );

	Если ПустаяСтрока(Ответ) Тогда
		НовыйККМOffLine = млККМOffLine.Добавить();
		НовыйККМOffLine.Объект   = Объект;
		НовыйККМOffLine.Модель   = Модель;
		НовыйККМOffLine.Путь     = Путь;
		НовыйККМOffLine.НомерЛУ  = НомерЛУ;
		НовыйККМOffLine.КассаККМ = КассаККМ;
		НовыйККМOffLine.Адрес    = Адрес;
		НовыйККМOffLine.Порт     = Порт;
	Иначе
		Сообщить("ККМ Off-Line """ + Модель.Наименование + """: ошибка при подключении", СтатусСообщения.Важное);
		Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
	КонецЕсли;

КонецПроцедуры // ПодключитьККМOffLine()

// Отключение ККМ в режиме Off-Line
//
// Параметры:
//  СтрокаТаблицыККМOffLine - строка таблицы подключенных ККМ в режиме OffLine
//
Процедура ОтключитьККМOffLine(СтрокаТаблицыККМOffLine)
	Перем Ответ;

	Если СтрокаТаблицыККМOffLine <> Неопределено Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект" , СтрокаТаблицыККМOffLine.Объект );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыККМOffLine.НомерЛУ);

		Если ЗначениеНеЗаполнено(СтрокаТаблицыККМOffLine.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("ККМ Off-Line """ + СтрокаТаблицыККМOffLine.Модель.Наименование + """: ошибка при отключении", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыККМOffLine.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("Отключить", Параметры, Ответ);

		Если НЕ ПустаяСтрока(Ответ) Тогда
			Сообщить("ККМ Off-Line """ + СтрокаТаблицыККМOffLine.Модель.Наименование + """: ошибка при отключении", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;
		млККМOffLine.Удалить(СтрокаТаблицыККМOffLine);

	КонецЕсли;

КонецПроцедуры // ОтключитьККМOffLine()

// Загрузка товаров для ККМ в режиме Off-Line
//
// Параметры:
//  Параметры - Структура необходиимых для функции параметров.
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ККМЗагрузитьТовары(Параметры) Экспорт
	Перем Ответ;

	КассаККМ = Параметры.Касса;
	ИскомаяСтрока = млККМOffLine.Найти(КассаККМ, "КассаККМ");
	Если ИскомаяСтрока <> Неопределено Тогда

		Параметры.Вставить("Объект" , ИскомаяСтрока.Объект );
		Параметры.Вставить("Путь"   , ИскомаяСтрока.Путь   );
		Параметры.Вставить("НомерЛУ", ИскомаяСтрока.НомерЛУ);
		Параметры.Вставить("Адрес"  , ИскомаяСтрока.Адрес  );
		Параметры.Вставить("Порт"   , ИскомаяСтрока.Порт   );

		Если ЗначениеНеЗаполнено(ИскомаяСтрока.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("ККМ Off-Line """ + ИскомаяСтрока.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат "";
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(ИскомаяСтрока.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ЗагрузитьТовары", Параметры, Ответ);

	Иначе

		Ответ = "Касса ККМ """ + КассаККМ + """ не подключена.";

	КонецЕсли;

	Возврат Ответ;

КонецФункции // ККМЗагрузитьТовары()

// Закрытие смены на ККМ в режиме Off-Line
//
// Параметры:
//  СтрокаТаблицыККМOffLine - строка таблицы подключенных ККМ в режиме OffLine
//  Дата         - дата закрытия
//  ДанныеИзККМ  - возвращаемая таблица с данными о прадажах на ККМ за день
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ККМЗакрытьСмену(СтрокаТаблицыOffLine, Дата, ДанныеИзККМ) Экспорт
	Перем Ответ;

	Если СтрокаТаблицыOffLine <> Неопределено Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект" , СтрокаТаблицыOffLine.Объект  );
		Параметры.Вставить("Касса"  , СтрокаТаблицыOffLine.КассаККМ);
		Параметры.Вставить("Дата"   , Дата                         );
		Параметры.Вставить("Путь"   , СтрокаТаблицыOffLine.Путь    );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыOffLine.НомерЛУ );
		Параметры.Вставить("Адрес"  , СтрокаТаблицыOffLine.Адрес  );
		Параметры.Вставить("Порт"   , СтрокаТаблицыOffLine.Порт   );

		Если ЗначениеНеЗаполнено(СтрокаТаблицыOffLine.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("ККМ Off-Line """ + СтрокаТаблицыOffLine.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат "";
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыOffLine.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ЗакрытьСмену", Параметры, Ответ);

		Параметры.Свойство("Данные" , ДанныеИзККМ                  );

	Иначе

		Ответ = "Касса ККМ не подключена.";

	КонецЕсли;

	Возврат Ответ;

КонецФункции // ККМЗакрытьСмену()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ЭЛЕКТРОННЫМИ ВЕСАМИ

// Подключение электронных весов
//
// Параметры:
//  Модель       - модель весов (ссылка на справочник Торговое оборудование)
//  НомерЛУ      - номер логического устройства с который связан Объект
//
Процедура ПодключитьВесы(Модель, НомерЛУ)
	Перем Ответ, Объект;

	Параметры = Новый Структура();
	Параметры.Вставить("Модель"  , Модель );
	Параметры.Вставить("Объект"  , Объект );
	Параметры.Вставить("НомерЛУ" , НомерЛУ);

	Если ЗначениеНеЗаполнено(Модель.ОбработкаОбслуживания) Тогда
		Сообщить("Электронные весы """ + Модель.Наименование + """: ошибка при подключении", СтатусСообщения.Важное);
		Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
		Возврат;
	КонецЕсли;

	ФормаОбработки = ПолучитьФормуОбработки(Модель.ОбработкаОбслуживания);
	ФормаОбработки.ВыполнитьОперацию("Подключить", Параметры, Ответ);

	Параметры.Свойство("Объект", Объект );

	Если ПустаяСтрока(Ответ) Тогда
		НовыеВесы = млВесы.Добавить();
		НовыеВесы.Объект  = Объект;
		НовыеВесы.Модель  = Модель;
		НовыеВесы.НомерЛУ = НомерЛУ;
	Иначе
		Сообщить("Электронные весы """ + Модель.Наименование + """: ошибка при подключении", СтатусСообщения.Важное);
		Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
	КонецЕсли;

КонецПроцедуры // ПодключитьВесы()

// Отключение электронных весов
//
// Параметры:
//  СтрокаТаблицыВесов - строка таблицы подключенных весов
//
Процедура ОтключитьВесы(СтрокаТаблицыВесов)
	Перем Ответ;

	Если СтрокаТаблицыВесов <> Неопределено Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект" , СтрокаТаблицыВесов.Объект );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыВесов.НомерЛУ);

		Если ЗначениеНеЗаполнено(СтрокаТаблицыВесов.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Электронные весы """ + СтрокаТаблицыВесов.Модель.Наименование + """: ошибка при отключении", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыВесов.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("Отключить", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Сообщить("Электронные весы """ + СтрокаТаблицыВесов.Модель.Наименование + """: ошибка при отключении", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;
		млВесы.Удалить(СтрокаТаблицыВесов);

	КонецЕсли;

КонецПроцедуры // ОтключитьВесы()

// Выполнить операцию электронных весов
//
// Параметры:
//  МодельВесов  - модель весов из справочника "Торговое оборудование"
//  ИмяОперации  - строковое представление операции
//  Значение     - передаваемое или получаемое значение
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ВыполнитьОперациюВесов(МодельВесов, ИмяОперации = "", Значение = 0) Экспорт
	Перем Ответ;

	ИскомаяСтрока = млВесы.Найти(МодельВесов, "Модель");
	Если ИскомаяСтрока <> Неопределено Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект",  ИскомаяСтрока.Объект );
		Параметры.Вставить("НомерЛУ", ИскомаяСтрока.НомерЛУ);

		Если ИмяОперации = "" Тогда
			Возврат "не передано имя операции";
		ИначеЕсли ИмяОперации = "УстановитьТару" Тогда
			Параметры.Вставить("ВесТары", Значение);
		ИначеЕсли ИмяОперации = "УстановитьРежим" Тогда
			Параметры.Вставить("Режим",   Значение);
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ИскомаяСтрока.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Электронные весы """ + ИскомаяСтрока.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат "";
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(ИскомаяСтрока.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию(ИмяОперации, Параметры, Ответ);

		Если ИмяОперации = "ПолучитьВес" Тогда
			Параметры.Свойство("Вес", Значение);
		КонецЕсли;

		Возврат Ответ;

	Иначе

		Возврат "Электронные весы """ + МодельВесов + """ не подключены.";

	КонецЕсли;

КонецФункции // ВыполнитьОперациюВесов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ДИСПЛЕЕМ ПОКУПАТЕЛЯ

// Подключение дисплея покупателя
//
// Параметры:
//  Модель       - модель дисплея покупателя (ссылка на справочник Торговое оборудование)
//  ИнформационнаяСтрока1 - строка, ввыводимая в качестве информации на дисплее в 1ой строке
//  ИнформационнаяСтрока2 - строка, ввыводимая в качестве информации на дисплее во 2ой строке
//  НомерЛУ      - номер логического устройства с который связан Объект
//  БегущаяСтрока - признак отображения информационных строк в виде бегущей строки
//  КассаККМ     - Касса ККМ с которой связан дисплей покупателя
//
Процедура ПодключитьДисплейПокупателя(Модель, ИнформационнаяСтрока1, ИнформационнаяСтрока2, НомерЛУ, БегущаяСтрока, КассаККМ)
	Перем Ответ, Объект;

	Параметры = Новый Структура();
	Параметры.Вставить("Модель" , Модель );
	Параметры.Вставить("Объект" , Объект );
	Параметры.Вставить("НомерЛУ", НомерЛУ);

	Если ЗначениеНеЗаполнено(Модель.ОбработкаОбслуживания) Тогда
		Сообщить("Дисплей покупателя """ + Модель.Наименование + """: ошибка при подключении", СтатусСообщения.Важное);
		Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
		Возврат;
	КонецЕсли;

	ФормаОбработки = ПолучитьФормуОбработки(Модель.ОбработкаОбслуживания);
	ФормаОбработки.ВыполнитьОперацию("Подключить", Параметры, Ответ);

	Параметры.Свойство("Объект", Объект  );

	Если ПустаяСтрока(Ответ) Тогда
		НовыйДисплейПокупателя = млДП.Добавить();
		НовыйДисплейПокупателя.Объект        = Объект;
		НовыйДисплейПокупателя.Модель        = Модель;
		НовыйДисплейПокупателя.Строка1       = ИнформационнаяСтрока1;
		НовыйДисплейПокупателя.Строка2       = ИнформационнаяСтрока2;
		НовыйДисплейПокупателя.БегущаяСтрока = БегущаяСтрока;
		НовыйДисплейПокупателя.НомерЛУ       = НомерЛУ;
		НовыйДисплейПокупателя.КассаККМ      = КассаККМ;

		млДПРежим                            = "Без режима";
	Иначе
		Сообщить("Дисплей покупателя """ + Модель.Наименование + """: ошибка при подключении", СтатусСообщения.Важное);
		Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
	КонецЕсли;

КонецПроцедуры // ПодключитьДисплейПокупателя()

// Отключение дисплея покупателя
//
// Параметры:
//  СтрокаТаблицыДП - строка таблицы подключенных дисплеев покупателя
//
Процедура ОтключитьДисплейПокупателя(СтрокаТаблицыДП)
	Перем Ответ;

	Если СтрокаТаблицыДП <> Неопределено Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект" , СтрокаТаблицыДП.Объект );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыДП.НомерЛУ);

		Если ЗначениеНеЗаполнено(СтрокаТаблицыДП.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Дисплей покупателя """ + СтрокаТаблицыДП.Модель.Наименование + """: ошибка при отключении", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыДП.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("Отключить", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Сообщить("Дисплей покупателя """ + СтрокаТаблицыДП.Модель.Наименование + """: ошибка при отключении", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;
		млДП.Удалить(СтрокаТаблицыДП);

	КонецЕсли;

КонецПроцедуры // ОтключитьДисплейПокупателя()

// Выводит бегущую строку на дисплее покупателя
//
// Параметры:
//  СтрокаТаблицыДП - строка таблицы подключенных дисплеев покупателя
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ВключитьРежимВыводаБегущейСтроки(СтрокаТаблицыДП) Экспорт
	Перем Ответ;

	Если СтрокаТаблицыДП = Неопределено Тогда

		Возврат "Дисплей покупателя не подключен";

	ИначеЕсли млДПРежим <> "Бегущия строка" Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект"        , СтрокаТаблицыДП.Объект );
		Параметры.Вставить("БегущаяСтрока1", СтрокаТаблицыДП.Строка1);
		Параметры.Вставить("БегущаяСтрока2", СтрокаТаблицыДП.Строка2);
		Параметры.Вставить("НомерЛУ"       , СтрокаТаблицыДП.НомерЛУ);

		Если ЗначениеНеЗаполнено(СтрокаТаблицыДП.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Дисплей покупателя """ + СтрокаТаблицыДП.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат "";
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыДП.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("БегущаяСтрока", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Возврат Ответ;
		КонецЕсли;

		млДПРежим = "Бегущия строка";

	КонецЕсли;

	Возврат "";

КонецФункции // ВключитьРежимВыводаБегущейСтроки()

// Создает логическое окно на дисплее для вывода текстовых строк
//
// Параметры:
//  СтрокаТаблицыДП - строка таблицы подключенных дисплеев покупателя
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ВключитьРежимВыводаСтрок(СтрокаТаблицыДП) Экспорт
	Перем Ответ;

	Если СтрокаТаблицыДП = Неопределено Тогда

		Возврат "Дисплей покупателя не подключен";

	ИначеЕсли млДПРежим <> "Вывод строк" Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект" , СтрокаТаблицыДП.Объект );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыДП.НомерЛУ);

		Если ЗначениеНеЗаполнено(СтрокаТаблицыДП.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Дисплей покупателя """ + СтрокаТаблицыДП.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат "";
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыДП.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("СоздатьОкно", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Возврат Ответ;
		КонецЕсли;

		млДПРежим = "Вывод строк";

	КонецЕсли;

	Возврат "";

КонецФункции // ВключитьРежимВыводаСтрок()

// Выводит текстовые строки на дисплей покупателя
//
// Параметры:
//  СтрокаТаблицыДП - строка таблицы подключенных дисплеев покупателя
//  Строка1      - строка, которая будет выведена в верхнюю стоку дисплея
//  Строка2      - строка, которая будет выведена в нижнюю стоку дисплея
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ВывестиСтрокиНаДисплей(СтрокаТаблицыДП, Строка1="", Строка2="") Экспорт
	Перем Ответ;

	Если СтрокаТаблицыДП = Неопределено Тогда
		Возврат "Дисплей покупателя не подключен";
	КонецЕсли;

	// запустим режим вывода строк
	Ответ = ВключитьРежимВыводаСтрок(СтрокаТаблицыДП);
	Если Не ПустаяСтрока(Ответ) Тогда
		Возврат "Не удалось включить режим вывода строк";
	КонецЕсли;

	Параметры = Новый Структура();
	Параметры.Вставить("Объект" , СтрокаТаблицыДП.Объект );
	Параметры.Вставить("НомерЛУ", СтрокаТаблицыДП.НомерЛУ);
	Параметры.Вставить("Строка1", Строка1                );
	Параметры.Вставить("Строка2", Строка2                );

	Если ЗначениеНеЗаполнено(СтрокаТаблицыДП.Модель.ОбработкаОбслуживания) Тогда
		Сообщить("Дисплей покупателя """ + СтрокаТаблицыДП.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
		Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
		Возврат "";
	КонецЕсли;

	ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыДП.Модель.ОбработкаОбслуживания);
	ФормаОбработки.ВыполнитьОперацию("ВывестиСтроки", Параметры, Ответ);

	Если Не ПустаяСтрока(Ответ) Тогда
		Возврат Ответ;
	КонецЕсли;

	Возврат "";

КонецФункции // ВывестиСтрокиНаДисплей()

// Очистить дисплей покупателя
//
// Параметры:
//  СтрокаТаблицыДП - строка таблицы подключенных дисплеев покупателя
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ОчиститьДисплейПокупателя(СтрокаТаблицыДП) Экспорт
	Перем Ответ;

	Если СтрокаТаблицыДП = Неопределено Тогда
		Возврат "Дисплей покупателя не подключен";
	КонецЕсли;

	// запустим режим вывода строк
	Ответ = ВключитьРежимВыводаСтрок(СтрокаТаблицыДП);
	Если Не ПустаяСтрока(Ответ) Тогда
		Возврат "Не удалось включить режим вывода строк";
	КонецЕсли;

	Параметры = Новый Структура();
	Параметры.Вставить("Объект" , СтрокаТаблицыДП.Объект );
	Параметры.Вставить("НомерЛУ", СтрокаТаблицыДП.НомерЛУ);

	Если ЗначениеНеЗаполнено(СтрокаТаблицыДП.Модель.ОбработкаОбслуживания) Тогда
		Сообщить("Дисплей покупателя """ + СтрокаТаблицыДП.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
		Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
		Возврат "";
	КонецЕсли;

	ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыДП.Модель.ОбработкаОбслуживания);
	ФормаОбработки.ВыполнитьОперацию("ОчиститьДисплей", Параметры, Ответ);

	Если Не ПустаяСтрока(Ответ) Тогда
		Возврат Ответ;
	КонецЕсли;

	Возврат "";

КонецФункции // ВывестиСтрокиНаДисплей()

// Открывает денежный ящик
//
// Параметры:
//  КассаККМ     - Касса ККМ с которой связан дисплей покупателя
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ОткрытьДенежныйЯщик(КассаККМ) Экспорт
	Перем Ответ;

	ИскомаяСтрока = млДП.Найти(КассаККМ, "КассаККМ");
	Если ИскомаяСтрока = Неопределено Тогда

		Возврат "Дисплей покупателя с денежным ящиком не подключены";

	Иначе

		Параметры = Новый Структура();
		Параметры.Вставить("Объект" , ИскомаяСтрока.Объект );
		Параметры.Вставить("НомерЛУ", ИскомаяСтрока.НомерЛУ);

		Если ЗначениеНеЗаполнено(ИскомаяСтрока.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат "";
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(ИскомаяСтрока.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ОткрытьДенежныйЯщик", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Возврат Ответ;
		КонецЕсли;

	КонецЕсли;

	Возврат "";

КонецФункции // ВывестиСтрокиНаДисплей()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ТЕРМИНАЛОМ СБОРА ДАННЫХ

// Подключение терминала сбора данных
//
// Параметры:
//  Модель       - модель терминала сбора данных (ссылка на справочник Торговое оборудование)
//  НомерЛУ      - номер логического устройства с который связан Объект
//
Процедура ПодключитьТерминалСбораДанных(Модель, НомерЛУ)
	Перем Ответ, Объект;

	млТерминалМодель = Модель;

	Параметры = Новый Структура();
	Параметры.Вставить("Модель" , Модель );
	Параметры.Вставить("Объект" , Объект );
	Параметры.Вставить("НомерЛУ", НомерЛУ);

	Если ЗначениеНеЗаполнено(млТерминалМодель.ОбработкаОбслуживания) Тогда
		Сообщить("Терминал сбора данных """ + млТерминалМодель.Наименование + """: ошибка", СтатусСообщения.Важное);
		Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
		Возврат;
	КонецЕсли;

	ФормаОбработки = ПолучитьФормуОбработки(млТерминалМодель.ОбработкаОбслуживания);
	ФормаОбработки.ВыполнитьОперацию("Подключить", Параметры, Ответ);

	Параметры.Свойство("Объект" , Объект );

	Если ПустаяСтрока(Ответ) Тогда
		НовыйТерминалСбораДанных = млТерминал.Добавить();
		НовыйТерминалСбораДанных.Объект  = Объект;
		НовыйТерминалСбораДанных.Модель  = Модель;
		НовыйТерминалСбораДанных.НомерЛУ = НомерЛУ;
	Иначе
		Сообщить("Терминал сбора данных """ + Модель.Наименование + """: ошибка при подключении", СтатусСообщения.Важное);
		Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
	КонецЕсли;

КонецПроцедуры // ПодключитьТерминалСбораДанных()

// Отключение терминала сбора данных
//
// Параметры:
//  СтрокаТаблицыТерминала - строка таблицы подключенных терминалов
//
Процедура ОтключитьТерминалСбораДанных(СтрокаТаблицыТерминала)
	Перем Ответ;

	Если СтрокаТаблицыТерминала <> Неопределено Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект" , СтрокаТаблицыТерминала.Объект );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыТерминала.НомерЛУ);

		Если ЗначениеНеЗаполнено(СтрокаТаблицыТерминала.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Терминал сбора данных """ + СтрокаТаблицыТерминала.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыТерминала.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("Отключить", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Сообщить("Терминал сбора данных """ + СтрокаТаблицыТерминала.Модель.Наименование + """: ошибка при отключении", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;
		млТерминал.Удалить(СтрокаТаблицыТерминала);

	КонецЕсли;

КонецПроцедуры // ОтключитьТерминалСбораДанных()

// Получаем данные из терминала сбора данных и возвращаем в виде параметра Данные
//
// Параметры:
//  СтрокаТаблицыТерминала - строка таблицы подключенных терминалов
//  Данные       - возвращаемые данные из терминала сбора данных
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ЗагрузитьДанныеИзТерминалаСбораДанных(СтрокаТаблицыТерминала, Данные, нетАдреса=Истина, АдресПервый=ЛОЖЬ) Экспорт   //+++ 01.05.2016  4 параметра!

	Перем Ответ;

	Если СтрокаТаблицыТерминала = Неопределено Тогда

		Возврат "Терминал сбора данных не подключен";

	Иначе

		Параметры = Новый Структура();
		Параметры.Вставить("Объект" , СтрокаТаблицыТерминала.Объект );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыТерминала.НомерЛУ);
        Параметры.Вставить("нетАдреса", нетАдреса);
		Параметры.Вставить("АдресПервый", АдресПервый);     //+++ 01.05.2016
								  
		Если ЗначениеНеЗаполнено(СтрокаТаблицыТерминала.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Терминал сбора данных """ + СтрокаТаблицыТерминала.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат "";
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыТерминала.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ЗагрузитьДанныеИзТерминала", Параметры, Ответ);
        Данные = Параметры.Данные;//+++
		
		Если Не ПустаяСтрока(Ответ) Тогда
			Возврат Ответ;
		КонецЕсли;

	КонецЕсли;

	Возврат "";

КонецФункции // ЗагрузитьДанныеИзТерминалаСбораДанных()

// Очищает память терминала сбора данных
//
// Параметры:
//  СтрокаТаблицыТерминала - строка таблицы подключенных терминалов
//
// Возвращаемое значение:
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ОчиститьПамятьТерминалаСбораДанных(СтрокаТаблицыТерминала) Экспорт
	Перем Ответ;

	Если СтрокаТаблицыТерминала = Неопределено Тогда

		Возврат "Терминал сбора данных не подключен";

	Иначе

		Параметры = Новый Структура();
		Параметры.Вставить("Объект" , СтрокаТаблицыТерминала.Объект );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыТерминала.НомерЛУ);

		Если ЗначениеНеЗаполнено(СтрокаТаблицыТерминала.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Терминал сбора данных """ + СтрокаТаблицыТерминала.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат "";
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыТерминала.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ОчиститьПамятьТерминала", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Возврат Ответ;
		КонецЕсли;

	КонецЕсли;

	Возврат "";

КонецФункции // ВывестиСтрокиНаДисплей()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ

// Получить форму обработки торгового оборудования
//
// Параметры:
//  Значение     - ссылка на Перечиление.ОбработкаТорговогоОборудования
//
// Возвращаемое значение:
//  форма обработки "ТорговоеОборудование"
//
Функция ПолучитьФормуОбработки(Значение) Экспорт

	Если ЗначениеНеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	Иначе
		ИндексЗначения = Перечисления.ОбработкиТорговогоОборудования.Индекс(Значение);
		ИмяФормыОбработки = Значение.Метаданные().ЗначенияПеречисления.Получить(ИндексЗначения).Имя;
		ФормаОбработки = Обработки.ТорговоеОборудование.ПолучитьФорму(Строка(ИмяФормыОбработки),,);
	КонецЕсли;

	Возврат ФормаОбработки;

КонецФункции // ПолучитьФормуОбработки()

// Подключает торговое оборудование
//
Процедура ПодключитьОборудование() Экспорт
	Перем Параметр1, Параметр2, Параметр3, Параметр4;

	ИмяТекущегоКомпьютера = Врег(ИмяКомпьютера());

	ТорговоеОборудование = РегистрыСведений.ТорговоеОборудование;
	Оборудование = ТорговоеОборудование.Выбрать();
	Пока Оборудование.Следующий() Цикл
		Если Оборудование.Компьютер <> ИмяТекущегоКомпьютера Тогда

			Продолжить;

		ИначеЕсли НЕ(Оборудование.Подключено) Тогда

			Продолжить;

		Иначе

			Если Оборудование.МодельТорговогоОборудования.ВидТорговогоОборудования = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор Тогда

				Параметры = ЗначениеИзСтрокиВнутр(Оборудование.Параметры);
				ПарольАдминистратора = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора");
				ПарольПользователя = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора");
				Параметры.Свойство("ДляПриемаНаличныхОтЮрЛиц"  , Параметр3);
				ПодключитьФР(Оборудование.МодельТорговогоОборудования, ПарольАдминистратора, ПарольПользователя, Оборудование.НомерЛогическогоУстройства, Параметр3, Оборудование.КассаККМ);

			ИначеЕсли Оборудование.МодельТорговогоОборудования.ВидТорговогоОборудования = Перечисления.ВидыТорговогоОборудования.ККТсПередачейДанных Тогда

				Параметры = ЗначениеИзСтрокиВнутр(Оборудование.Параметры);
				ПарольАдминистратора = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора");
				ПарольПользователя = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора");
				Параметры.Свойство("ДляПриемаНаличныхОтЮрЛиц"  , Параметр3);
				ПодключитьККТ(Оборудование.МодельТорговогоОборудования, ПарольАдминистратора, ПарольПользователя, Оборудование.НомерЛогическогоУстройства, Параметр3, Оборудование.КассаККМ, Оборудование);
				
			ИначеЕсли Оборудование.МодельТорговогоОборудования.ВидТорговогоОборудования = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда

				Параметры = ЗначениеИзСтрокиВнутр(Оборудование.Параметры);
				Параметры.Свойство("Префикс"                   , Параметр1);
				ПодключитьСШК(Оборудование.МодельТорговогоОборудования, Параметр1);

			ИначеЕсли Оборудование.МодельТорговогоОборудования.ВидТорговогоОборудования = Перечисления.ВидыТорговогоОборудования.РидерМагнитныхКарт Тогда

				Параметры = ЗначениеИзСтрокиВнутр(Оборудование.Параметры);
				Параметры.Свойство("ИсточникДанных"                   , Параметр1);
				ПодключитьРМК(Оборудование.МодельТорговогоОборудования, Параметр1);

			ИначеЕсли Оборудование.МодельТорговогоОборудования.ВидТорговогоОборудования = Перечисления.ВидыТорговогоОборудования.ККМOnLine Тогда

				Параметры = ЗначениеИзСтрокиВнутр(Оборудование.Параметры);
				Параметры.Свойство("ЗаводскойНомерККМ"         , Параметр1);
				ПодключитьККМOnLine(Оборудование.МодельТорговогоОборудования, Параметр1, Оборудование.КассаККМ);

			ИначеЕсли Оборудование.МодельТорговогоОборудования.ВидТорговогоОборудования = Перечисления.ВидыТорговогоОборудования.ККМOffLine Тогда

				Параметры = ЗначениеИзСтрокиВнутр(Оборудование.Параметры);
				Параметры.Свойство("КаталогОбменаДанными"      , Параметр1);
				Параметры.Свойство("Адрес"                     , Параметр2);
				Параметры.Свойство("Порт"                      , Параметр3);
				ПодключитьККМOffLine(Оборудование.МодельТорговогоОборудования, Параметр1, Оборудование.НомерЛогическогоУстройства, Оборудование.КассаККМ, Параметр2, Параметр3);

			ИначеЕсли Оборудование.МодельТорговогоОборудования.ВидТорговогоОборудования = Перечисления.ВидыТорговогоОборудования.ЭлектронныеВесы Тогда

				ПодключитьВесы(Оборудование.МодельТорговогоОборудования, Оборудование.НомерЛогическогоУстройства);

			ИначеЕсли Оборудование.МодельТорговогоОборудования.ВидТорговогоОборудования = Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя Тогда

				Параметры = ЗначениеИзСтрокиВнутр(Оборудование.Параметры);
				Параметры.Свойство("ИнформационнаяСтрока1"     , Параметр1);
				Параметры.Свойство("ИнформационнаяСтрока2"     , Параметр2);
				Параметры.Свойство("БегущаяСтрока"             , Параметр3);
				ПодключитьДисплейПокупателя(Оборудование.МодельТорговогоОборудования, Параметр1, Параметр2, Оборудование.НомерЛогическогоУстройства, Параметр3, Оборудование.КассаККМ);

			ИначеЕсли Оборудование.МодельТорговогоОборудования.ВидТорговогоОборудования = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда

				ПодключитьТерминалСбораДанных(Оборудование.МодельТорговогоОборудования, Оборудование.НомерЛогическогоУстройства);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодключитьОборудование()

// Отключает торговое оборудование
//
Процедура ОтключитьОборудование() Экспорт

	Если млФР <> Неопределено Тогда
		Пока млФР.Количество() > 0 Цикл
			ОтключитьФР(млФР[0]);
		КонецЦикла;
	КонецЕсли;
	
	Если млККТ <> Неопределено Тогда
		Пока млККТ.Количество() > 0 Цикл
			ОтключитьККТ(млККТ[0]);
		КонецЦикла;
	КонецЕсли;

	Если млСШК <> Неопределено Тогда
		Пока млСШК.Количество() > 0 Цикл
			ОтключитьСШК(млСШК[0]);
		КонецЦикла;
	КонецЕсли;

	Если млРМК <> Неопределено Тогда
		Пока млРМК.Количество() > 0 Цикл
			ОтключитьРМК(млРМК[0]);
		КонецЦикла;
	КонецЕсли;

	Если млККМOnLine <> Неопределено Тогда
		Пока млККМOnLine.Количество() > 0 Цикл
			ОтключитьККМOnLine(млККМOnLine[0]);
		КонецЦикла;
	КонецЕсли;

	Если млККМOffLine <> Неопределено Тогда
		Пока млККМOffLine.Количество() > 0 Цикл
			ОтключитьККМOffLine(млККМOffLine[0]);
		КонецЦикла;
	КонецЕсли;

	Если млВесы <> Неопределено Тогда
		Пока млВесы.Количество() > 0 Цикл
			ОтключитьВесы(млВесы[0]);
		КонецЦикла;
	КонецЕсли;

	Если млДП <> Неопределено Тогда
		Пока млДП.Количество() > 0 Цикл
			ОтключитьДисплейПокупателя(млДП[0]);
		КонецЦикла;
	КонецЕсли;

	Если млТерминал <> Неопределено Тогда
		Пока млТерминал.Количество() > 0 Цикл
			ОтключитьТерминалСбораДанных(млТерминал[0]);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОтключитьОборудование()

// Удаляет из переданного штрих-кода префикс
//
// Параметры:
//  Штрихкод     - штрих-код (с префиксом)
//
// Возвращаемое значение:
//  Штрих-код без префикса
//
Функция УдалитьПрефиксИзШтрихКода(ШтрихКод) Экспорт

	Штрихкод = СокрЛП(Штрихкод);
	Префиксы = СокрЛП(Константы.ВозможныеПрефиксыШтрихКода.Получить());

	// Определение типа штрих-кода
	Если Не ПустаяСтрока(Префиксы) 
	   И Найти(Префиксы, Лев(Штрихкод,1)) > 0 Тогда

		// Удаляем спец. символы из штрих-кода
		Штрихкод = Сред(Штрихкод, 2);

	КонецЕсли;

	Возврат ШтрихКод;

КонецФункции

// По переданному штрих-коду ищет товар и единицу измерения.
//
// Параметры:
//  Штрихкод        - штрих-код искомого товара
//  ТаблицаТоваров  - возвращаемая таблица товаров
//
// Возвращаемое значение:
//  Истина если товар найден, иначе Ложь
//
Функция ПолучитьТоварПоШтрихкоду(Штрихкод, ТаблицаТоваров) Экспорт

	Возврат ПолучитьВладельцаПоШтрихкоду(Штрихкод, ТаблицаТоваров, "Номенклатура");

КонецФункции // ПолучитьТоварПоШтрихкоду()

// По переданному штрих-коду ищет товар и единицу измерения.
//
// Параметры:
//  Штрихкод        - штрих-код искомого товара
//  ТаблицаВладельцев  - возвращаемая таблица товаров
//
// Возвращаемое значение:
//  Истина если Владелец найден, иначе Ложь
//
Функция ПолучитьВладельцаПоШтрихкоду(Штрихкод, ТаблицаВладельцев, ВидВладельца) Экспорт

	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат Ложь;
	КонецЕсли;
	Штрихкод = УдалитьПрефиксИзШтрихКода(ШтрихКод);

	//+++ 13.03.2012
	попытка
		Если стрДлина(Штрихкод)<13 и Штрихкод<>"" тогда
		ШтрихКод = Формат(число(Штрихкод), "ЧЦ=13; ЧВН=; ЧГ=0");
    	КонецЕсли;
	исключение
		сообщить("В штрихКоде должны быть только цифры!", СтатусСообщения.Внимание);
	конецПопытки;	
	//+++)
	
	ЗапросШтрихкодов = Новый Запрос;
	ЗапросШтрихкодов.УстановитьПараметр("Штрихкод", Штрихкод);
	ЗапросШтрихкодов.Текст = "
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод,
	|	Штрихкоды.Владелец КАК " + ВидВладельца + "
	|" + ?(ВидВладельца = "Номенклатура", ",
	|	Штрихкоды.ЕдиницаИзмерения,
	|	Штрихкоды.ХарактеристикаНоменклатуры,
	|	Штрихкоды.СерияНоменклатуры,
	|	Штрихкоды.Качество","") + "
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод
	|";

	ТаблицаВладельцев = ЗапросШтрихкодов.Выполнить().Выгрузить();
	
	Если ТаблицаВладельцев.Количество() = 0 Тогда
		Сообщить("Владелец штрих-кода " + Штрихкод + " не найден.");
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ПолучитьВладельцаПоШтрихкоду()

// Проверка наличия в передаваемом штрих-коде только цифр
//
// Параметры:
//  ШтрихКод     - проверяемый штрих-код
//
// Возвращаемое значение:
//  Истина если штрих код только из цифр, иначе Ложь
//
Функция ТолькоЦифры(Штрихкод)

	Для Сч = 1 По СтрДлина(Штрихкод) Цикл
		Символ = Сред(Штрихкод, Сч, 1);
		Если НЕ(Найти("0123456789", Символ)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции // ТолькоЦифры()

// Дополняет передаваемую строку Строка символами Символ до строки длиной Длина слева
//
// Параметры:
//  Строка       - строка, к которой надо добавить символы
//  Символ       - добавляемый символ
//  Длина        - длина результирующей строки
//
// Возвращаемое значение:
//  строка
//
Функция ДополнитьСтрокуЛ(Строка, Символ, Длина) Экспорт

	Добавить = Длина - СтрДлина(Строка);
	ВозвращаемаяСтрока = Строка;
	Для а = 1 По Добавить Цикл
		ВозвращаемаяСтрока = Символ + ВозвращаемаяСтрока;
	КонецЦикла;

	Возврат ВозвращаемаяСтрока;

КонецФункции // ДополнитьСтрокуЛ()

// Процедура обрабатывает внешнее событие формы
//
// Параметры:
//  Форма                       - форма документа, в которую пришло событие от сканера штрих-кодов
//  ДокументОбъект              - объект документа, в форму которого пришло событие от сканера штрих-кодов
//  СтруктураИсходныхПараметров - структура параметров, переданных из формы
//  Данные                      - данные со сканера штрих-кодов
//
Процедура ОбработатьВнешнееСобытиеОтСканераДляФормы(Форма, ДокументОбъект, СтруктураИсходныхПараметров, Данные, СвернутьПоВладельцу = Ложь) Экспорт
	Перем ТаблицаТоваров, ТаблицаВладельцев, ТаблицаПодбора;
	Перем Команда, ТипЦен, ВалютаЦены, ИмяТабличнойЧасти;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	// Оповестим о выборе документ, инициировавший подбор.
	СтруктураИсходныхПараметров.Свойство("Команда",           Команда);
	СтруктураИсходныхПараметров.Свойство("ТипЦен",            ТипЦен);
	СтруктураИсходныхПараметров.Свойство("ВалютаЦены",        ВалютаЦены);
	СтруктураИсходныхПараметров.Свойство("ИмяТабличнойЧасти", ИмяТабличнойЧасти);

	Попытка
		ДокументОбъект.Заблокировать();
	Исключение
		Предупреждение("Не удалось заблокировать запись. Действие (изменение, удаление или блокировка записи) не выполнено");
		СканерПосылкаДанных(1);
		Возврат;
	КонецПопытки;

	Если Форма.ТолькоПросмотр Тогда

		//Ничего не делаем. Форма открыта для просмотра.

	ИначеЕсли Команда = "Регистрация" Тогда
		Если ПолучитьВладельцаПоШтрихкоду(Данные, ТаблицаВладельцев, "Пользователь") Тогда
			Карта = ТаблицаВладельцев[0].Пользователь;
			Если Карта <> Неопределено Тогда

				Если Карта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
					Форма.ДисконтнаяКарта = Карта;
					СтруктураИсходныхПараметров.Команда = "РассчитатьДисконтныеСкидки";
				Иначе
					Если СтруктураИсходныхПараметров.Свойство("Пользователь") Тогда
						Если Карта.ВладелецКарты = Неопределено
						 Или Карта.ВладелецКарты = Справочники.Пользователи.ПустаяСсылка() Тогда

							СообщитьОбОшибке("Карте с кодом: " + Данные + ", не назначен владелец");

						Иначе

							СтруктураИсходныхПараметров.Пользователь = Карта.ВладелецКарты;

						КонецЕсли;

					КонецЕсли;
				КонецЕсли;

			Иначе

				СообщитьОбОшибке("Штрихкоду: """ + Данные + " не указана карта");

			КонецЕсли;
		Иначе

			СообщитьОбОшибке("Пользователь не найден");

		КонецЕсли;

	Иначе

		ТаблицаПодбора = Новый ТаблицаЗначений;

		ТаблицаПодбора.Колонки.Добавить("Номенклатура");
		ТаблицаПодбора.Колонки.Добавить("Цена");
		ТаблицаПодбора.Колонки.Добавить("ВалютаЦены");
		ТаблицаПодбора.Колонки.Добавить("Количество");
		ТаблицаПодбора.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаПодбора.Колонки.Добавить("Характеристика");
		ТаблицаПодбора.Колонки.Добавить("Серия");
		ТаблицаПодбора.Колонки.Добавить("Качество");
		ТаблицаПодбора.Колонки.Добавить("Команда");
		ТаблицаПодбора.Колонки.Добавить("Штрихкод");

		Если ПолучитьТоварПоШтрихкоду(Данные, ТаблицаТоваров) Тогда

			//Если первый владелец этого штрихкода - информационная карта - заполняем по ней и заканчиваем обработку.
			Если ТаблицаТоваров.Количество() > 0 Тогда
				Владелец = ТаблицаТоваров[0].Номенклатура;
				Если ТипЗнч(Владелец) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
					МетаданныеДокумента = ДокументОбъект.Метаданные();
					Если НЕ ЕстьРеквизитДокумента("ДисконтнаяКарта", МетаданныеДокумента) Тогда
						СканерПосылкаДанных(1);
						Возврат;
					КонецЕсли;

					Карта = Владелец;
					Если Карта <> Неопределено Тогда

						Если Карта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
							Форма.ДисконтнаяКарта = Карта;
							СтруктураИсходныхПараметров.Команда = "РассчитатьДисконтныеСкидки";
						Иначе
							Если СтруктураИсходныхПараметров.Свойство("Пользователь") Тогда
								Если Карта.ВладелецКарты = Неопределено
								 Или Карта.ВладелецКарты = Справочники.Пользователи.ПустаяСсылка() Тогда

									СообщитьОбОшибке("Карте с кодом: " + Данные + ", не назначен владелец");

								Иначе

									СтруктураИсходныхПараметров.Пользователь = Карта.ВладелецКарты;

								КонецЕсли;

							КонецЕсли;
						КонецЕсли;

					Иначе

						СообщитьОбОшибке("Штрихкоду: """ + Данные + " не указана карта");

					КонецЕсли;
					СканерПосылкаДанных(1);
					Возврат;
				КонецЕсли;
			КонецЕсли;

			СтруктураПодбора = Неопределено;
			Для каждого СтрокаТаблицыТоваров Из ТаблицаТоваров Цикл

				Штрихкод           = СтрокаТаблицыТоваров.Штрихкод;
				ВремТовар          = СтрокаТаблицыТоваров.Номенклатура;
				ВремЕдиница        = СтрокаТаблицыТоваров.ЕдиницаИзмерения;
				ВремХарактеристика = СтрокаТаблицыТоваров.ХарактеристикаНоменклатуры;
				ВремСерия          = СтрокаТаблицыТоваров.СерияНоменклатуры;
				ВремКачество       = СтрокаТаблицыТоваров.Качество;

				Если ИмяТабличнойЧасти = "Товары"
				 Или ИмяТабличнойЧасти = "Комплектующие" Тогда
					Если ВремКачество <> Справочники.Качество.Новый Тогда
						Если (ТипЗнч (ДокументОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
						      И ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)
						 Или (ТипЗнч (ДокументОбъект) = Тип("ДокументОбъект.ПриходныйОрдерНаТовары")
						      И ДокументОбъект.ВидОперации <> Перечисления.ВидыОперацийПриходныйОрдер.Перемещение) Тогда
							СообщитьОбОшибке("В документ """ + МетаданныеДокумента + """ с видом операции """ + ДокументОбъект.ВидОперации
							                 + """ можно добавлять только товарные позиции с качеством ""Новый""."
							                 + Символы.ПС + "Считанный штрих-код соответствует качеству """ + ВремКачество + """ товара """ + ВремТовар.Наименование + """."
							                 + Символы.ПС + "Товарная позиция в документ не добавлена!");
							Продолжить;

						ИначеЕсли НЕ ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СообщитьОбОшибке("В документ """ + МетаданныеДокумента + """ можно добавлять только товарные позиции с качеством ""Новый""."
							                 + Символы.ПС + "Считанный штрих-код соответствует качеству """ + ВремКачество + """ товара """ + ВремТовар.Наименование + """."
							                 + Символы.ПС + "Товарная позиция в документ не добавлена!");
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				ВремКоличество = 1;
				Если ВремТовар.Набор Тогда

					Запрос = Новый Запрос;
					
					Запрос.УстановитьПараметр("Номенклатура",               ВремТовар);
					Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
					Запрос.УстановитьПараметр("ЕдиницаИзмерения",           ВремЕдиница);
					Запрос.УстановитьПараметр("Коэффициент",                ВремЕдиница.Коэффициент);
					Запрос.УстановитьПараметр("Количество",                 ВремКоличество);
					Запрос.Текст = "
					|ВЫБРАТЬ
					|	КомплектующиеНоменклатуры.Комплектующая                             КАК Номенклатура,
					|	КомплектующиеНоменклатуры.ХарактеристикаКомплектующей               КАК Характеристика,
					|	(КомплектующиеНоменклатуры.Количество * &Коэффициент * &Количество) КАК Количество,
					|	КомплектующиеНоменклатуры.ЕдиницаИзмерения
					|ИЗ
					|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
					|
					|ГДЕ
					|	КомплектующиеНоменклатуры.Номенклатура = &Номенклатура И
					|	КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
					|";
					
					Выборка = Запрос.Выполнить().Выбрать();
					
					Пока Выборка.Следующий() Цикл

						// Получим Цену
						Цена = 0;
						Если СтруктураИсходныхПараметров.Свойство("ТипЦен") Тогда
							Если ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
								Цена = ПолучитьЦенуНоменклатуры(Выборка.Номенклатура, , СтруктураИсходныхПараметров.ТипЦен, СтруктураИсходныхПараметров.ДатаРасчетов, Выборка.ЕдиницаИзмерения, ВалютаЦены);
							ИначеЕсли ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
								Цена = ПолучитьЦенуКонтрагента(Выборка.Номенклатура, Выборка.Характеристика, СтруктураИсходныхПараметров.Контрагент,
															   СтруктураИсходныхПараметров.ТипЦен, СтруктураИсходныхПараметров.ДатаРасчетов, Выборка.ЕдиницаИзмерения, ВалютаЦены);
							КонецЕсли; 
						КонецЕсли;

						СтруктураПодбора = Новый Структура();
						СтруктураПодбора.Вставить("Команда",          Команда);
						СтруктураПодбора.Вставить("ВалютаЦены",       ВалютаЦены);
						СтруктураПодбора.Вставить("Номенклатура",     Выборка.Номенклатура);
						СтруктураПодбора.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
						СтруктураПодбора.Вставить("Количество",       Выборка.Количество);
						СтруктураПодбора.Вставить("Характеристика"  , Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
						СтруктураПодбора.Вставить("Серия"           , Справочники.СерииНоменклатуры.ПустаяСсылка());
						СтруктураПодбора.Вставить("Качество"        , Справочники.Качество.ПустаяСсылка());
						СтруктураПодбора.Вставить("Цена"            , Цена);
						Если СтруктураИсходныхПараметров.Свойство("Лимит") Тогда
							СтруктураПодбора.Вставить("Лимит"       , СтруктураИсходныхПараметров.Лимит);
						КонецЕсли;

						Форма.ОбработкаПодбора(ДокументОбъект[ИмяТабличнойЧасти], СтруктураПодбора);

					КонецЦикла;
					Прервать;
				Иначе

					// Получим Цену
					Цена = 0;
					Если СтруктураИсходныхПараметров.Свойство("ТипЦен") Тогда
						Если ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
							Цена = ПолучитьЦенуНоменклатуры(ВремТовар,ВремХарактеристика , СтруктураИсходныхПараметров.ТипЦен, СтруктураИсходныхПараметров.ДатаРасчетов, ВремЕдиница, ВалютаЦены);
						ИначеЕсли ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
							Цена = ПолучитьЦенуКонтрагента(ВремТовар, ВремХарактеристика, СтруктураИсходныхПараметров.Контрагент,
														   СтруктураИсходныхПараметров.ТипЦен, СтруктураИсходныхПараметров.ДатаРасчетов, ВремЕдиница, ВалютаЦены);
						КонецЕсли; 
					КонецЕсли;

					СтруктураПодбора = Новый Структура();

					СтруктураПодбора.Вставить("Команда",          Команда);
					СтруктураПодбора.Вставить("ВалютаЦены",       ВалютаЦены);
					СтруктураПодбора.Вставить("Номенклатура",     ВремТовар);
					СтруктураПодбора.Вставить("ЕдиницаИзмерения", ВремЕдиница);
					СтруктураПодбора.Вставить("Количество",       ВремКоличество);
					СтруктураПодбора.Вставить("Характеристика"  , ВремХарактеристика);
					СтруктураПодбора.Вставить("Серия"           , ВремСерия);
					СтруктураПодбора.Вставить("Качество"        , ВремКачество);
					СтруктураПодбора.Вставить("Цена"            , Цена);

					СтрТаблицаПодбора = ТаблицаПодбора.Добавить();
					СтрТаблицаПодбора.Номенклатура = ВремТовар;
					СтрТаблицаПодбора.ЕдиницаИзмерения = ВремЕдиница;
					СтрТаблицаПодбора.Количество = ВремКоличество;
					СтрТаблицаПодбора.Характеристика = ВремХарактеристика;
					СтрТаблицаПодбора.Серия = ВремСерия;
					СтрТаблицаПодбора.Качество = ВремКачество;
					СтрТаблицаПодбора.Цена = Цена;
					СтрТаблицаПодбора.Команда = Команда;
					СтрТаблицаПодбора.ВалютаЦены = ВалютаЦены;
				КонецЕсли;
			КонецЦикла;
			Если СвернутьПоВладельцу Тогда
				ТаблицаПодбора.Свернуть("Номенклатура");
			КонецЕсли;
			Если ТаблицаПодбора.Количество()=1 Тогда
				Если СвернутьПоВладельцу Тогда
					СтруктураПодбора.Вставить("Команда",          Команда);
					СтруктураПодбора.Вставить("Номенклатура",     ТаблицаПодбора[0].Номенклатура);
					СтруктураПодбора.Вставить("ЕдиницаИзмерения", ТаблицаПодбора[0].Номенклатура.ЕдиницаХраненияОстатков);
					СтруктураПодбора.Вставить("Количество",       ВремКоличество);
				КонецЕсли;
				Форма.ОбработкаПодбора(ДокументОбъект[ИмяТабличнойЧасти], СтруктураПодбора);
			ИначеЕсли ТаблицаПодбора.Количество()>1 Тогда

				//найдено несколько товаров, соответствущих штрихкоду
				СтрокаТовара = ТаблицаПодбора.ВыбратьСтроку("Выберите из найденных по штрихкоду.");
				Если СвернутьПоВладельцу Тогда
					СтруктураПодбора.Вставить("Команда",          Команда);
					СтруктураПодбора.Вставить("Номенклатура",     ТаблицаПодбора[0].Номенклатура);
					СтруктураПодбора.Вставить("ЕдиницаИзмерения", ТаблицаПодбора[0].Номенклатура.ЕдиницаХраненияОстатков);
					СтруктураПодбора.Вставить("Количество",       ВремКоличество);
				Иначе
					СтруктураПодбора.Вставить("Команда",          Команда);
					СтруктураПодбора.Вставить("ВалютаЦены",       СтрокаТовара.ВалютаЦены);
					СтруктураПодбора.Вставить("Номенклатура",     СтрокаТовара.Номенклатура);
					СтруктураПодбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
					СтруктураПодбора.Вставить("Количество",       СтрокаТовара.Количество);
					СтруктураПодбора.Вставить("Характеристика"  , СтрокаТовара.Характеристика);
					СтруктураПодбора.Вставить("Серия"           , СтрокаТовара.Серия);
					СтруктураПодбора.Вставить("Качество"        , СтрокаТовара.Качество);
					СтруктураПодбора.Вставить("Цена"            , СтрокаТовара.Цена);
				КонецЕсли;
				Форма.ОбработкаПодбора(ДокументОбъект[ИмяТабличнойЧасти], СтруктураПодбора);
			КонецЕсли;
		Иначе

			СообщитьОбОшибке("Номенклатура не найдена");

		КонецЕсли;
	КонецЕсли;

	СканерПосылкаДанных(1);

КонецПроцедуры

Функция ПолучитьДанныеОтРидера(Данные) Экспорт
	
	Если млРМК.Количество() >0 Тогда//Получим нужный код от ридера.

		ИсточникДанных = Число(млРМК[0].ИсточникДанных);
		Если ИсточникДанных = 1 Тогда
			ТекДанные = млРМК[0].Объект.Трек1;
		ИначеЕсли ИсточникДанных = 2 Тогда
			ТекДанные = млРМК[0].Объект.Трек2;
		ИначеЕсли ИсточникДанных = 3 Тогда
			ТекДанные = млРМК[0].Объект.Трек3;
		Иначе
			ТекДанные = млРМК[0].Объект.Данные;
		КонецЕсли;
	КонецЕсли;

	Возврат ТекДанные;

КонецФункции

// Процедура обрабатывает внешнее событие формы
//
// Параметры:
//  Форма                       - форма документа, в которую пришло событие от ридера магнитных карт
//  ДокументОбъект              - объект документа, в форму которого пришло событие от ридера магнитных карт
//  СтруктураИсходныхПараметров - структура параметров, переданных из формы
//  Данные                      - данные ридера магнитных карт
//
Процедура ОбработатьВнешнееСобытиеОтРидераДляФормы(Форма, ДокументОбъект, СтруктураИсходныхПараметров, Данные) Экспорт

	Карта = Неопределено;

	ТекКодКарты = ПолучитьДанныеОтРидера(Данные);

	Попытка
		ДокументОбъект.Заблокировать();
	Исключение
		Предупреждение("Не удалось заблокировать запись. Действие (изменение, удаление или блокировка записи) не выполнено");
		РидерПосылкаДанных();
		Возврат;
	КонецПопытки;

	Если Форма.ТолькоПросмотр Тогда

		//Ничего не делаем. Форма открыта для просмотра.

	ИначеЕсли ТекКодКарты <> Неопределено Тогда

		Карта = НайтиМагнитнуюКарту(ТекКодКарты);
		Если Карта <> Неопределено Тогда

			Если Карта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
				Форма.ДисконтнаяКарта = Карта;
				СтруктураИсходныхПараметров.Команда = "РассчитатьДисконтныеСкидки";
			Иначе
				Если СтруктураИсходныхПараметров.Свойство("Пользователь") Тогда
					Если Карта.ВладелецКарты = Неопределено
					 Или Карта.ВладелецКарты = Справочники.Пользователи.ПустаяСсылка() Тогда

						СообщитьОбОшибке("Карте с кодом: " + ТекКодКарты + ", не назначен владелец");
					Иначе

						СтруктураИсходныхПараметров.Пользователь = Карта.ВладелецКарты;
					КонецЕсли;

				КонецЕсли;
			КонецЕсли;

		Иначе

			СообщитьОбОшибке("Карта с кодом: " + ТекКодКарты + ", не найдена");

		КонецЕсли;
	КонецЕсли;

	РидерПосылкаДанных();

КонецПроцедуры

// По переданному коду карты ищет элемент справочника "Магнитные карты"
//
Функция НайтиМагнитнуюКарту(Данные) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодКарты", Данные);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|
	|ГДЕ
	|	ИнформационныеКарты.КодКарты = &КодКарты";

	Карты = Запрос.Выполнить().Выгрузить();

	Если Карты.Количество()>0 Тогда
		Карта = Карты[0].Ссылка;
	Иначе
		Предупреждение("Считанная информационная карта не найдена в базе наших карт!");
	КонецЕсли;

	Возврат Карта;

КонецФункции

// Функция переносит номер логического устройства из свойств модели в измерение
// регистра сведений "Торговое оборудование" при переходе с релиза 10.1.1 на 10.1.2
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//  Истина если ошибок не произошло, иначе Ложь
//
Функция ПеренестиНомераЛУИзСвойствМоделиВИзмерениеРегистраСведений() Экспорт
	Перем НомерЛУ;

	ТорговоеОборудование = РегистрыСведений.ТорговоеОборудование;
	Оборудование = ТорговоеОборудование.Выбрать();
	Пока Оборудование.Следующий() Цикл

		ИмяКомпьютера = Оборудование.Компьютер;
		Модель        = Оборудование.МодельТорговогоОборудования;
		КассаККМ      = Оборудование.КассаККМ;
		Подключено    = Оборудование.Подключено;
		Параметры     = ЗначениеИзСтрокиВнутр(Оборудование.Параметры);
		ВидТО         = Оборудование.МодельТорговогоОборудования.ВидТорговогоОборудования;

		Если ВидТО = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор Тогда

			Параметры.Свойство("НомерЛогическогоУстройства", НомерЛУ);

		ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя Тогда

			Параметры.Свойство("НомерЛогическогоУстройства", НомерЛУ);

		ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ККМOffLine Тогда

			Параметры.Свойство("НомерЛогическогоУстройства", НомерЛУ);

		ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ККМOnLine Тогда

			Параметры.Свойство("ЗаводскойНомерККМ"         , НомерЛУ);

		ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда

			Параметры.Свойство("НомерЛогическогоУстройства", НомерЛУ);

		ИначеЕсли ВидТО = Перечисления.ВидыТорговогоОборудования.ЭлектронныеВесы Тогда

			Параметры.Свойство("НомерЛогическогоУстройства", НомерЛУ);

		Иначе

			НомерЛУ = 1;

		КонецЕсли;

		МенеджерЗаписиРегистра = Оборудование.ПолучитьМенеджерЗаписи();
		МенеджерЗаписиРегистра.Удалить();
		МенеджерЗаписиРегистра.Компьютер                   = ИмяКомпьютера;
		МенеджерЗаписиРегистра.МодельТорговогоОборудования = Модель;
		МенеджерЗаписиРегистра.КассаККМ                    = КассаККМ;
		МенеджерЗаписиРегистра.Подключено                  = Подключено;
		МенеджерЗаписиРегистра.Параметры                   = ЗначениеВСтрокуВнутр(Параметры);
		МенеджерЗаписиРегистра.НомерЛогическогоУстройства  = НомерЛУ;
		МенеджерЗаписиРегистра.Записать();

	КонецЦикла;

	Возврат Истина;

КонецФункции

//+++ февраль 2012г.
// возвращает ссылку на документ  или Неопределено
функция ПолучитьДокументПоШтрихКоду(ШтрихКод="") Экспорт
	
	Если ШтрихКод="" или стрДлина(ШтрихКод)<12 или стрДлина(ШтрихКод)>13 тогда
		сообщить("Неверный формат штрих-кода '"+строка(ШтрихКод)+"'", СтатусСообщения.Внимание);
		возврат неопределено;
	КонецЕсли;
	
		СписокДок = новый ТаблицаЗначений;
	Если ПолучитьВсеДокументыПоШтрихКоду(ШтрихКод, СписокДок) тогда
    	Если СписокДок.Количество() > 1 Тогда
			сообщить("По штрих-коду '"+ШтрихКод+"' найдено "+строка(СписокДок.Количество())+" документов!", СтатусСообщения.Внимание);
		КонецЕсли;
		возврат СписокДок[0].Ссылка;
	иначе
		сообщить("По штрих-коду '"+ШтрихКод+"' НЕ найдено ни одного документа!", СтатусСообщения.Внимание);
		возврат неопределено;
	КонецЕсли;	
КонецФункции	

//***2017.03
Функция ПолучитьТекстОшибкиТО(Ошибка) Экспорт

	Если НЕ ЗначениеЗаполнено(Ошибка) Тогда
		Результат = "";
		мОписаниеОшибки = "";
	Иначе
		Если Ошибка = мОшибкаНеизвестно Тогда
			Результат = мОписаниеОшибки;
			мОписаниеОшибки = "";
		Иначе
			МетаданныеОшибки = Ошибка.Метаданные();
			КомментарийОшибки = МетаданныеОшибки.ЗначенияПеречисления.Получить(Перечисления[МетаданныеОшибки.Имя].Индекс(Ошибка)).Комментарий;
			Если КомментарийОшибки = "" Тогда
				Результат = СокрЛП(Ошибка) + ".";
			Иначе
				Результат = СокрЛП(Ошибка) + "." + Символы.ПС + КомментарийОшибки;
			КонецЕсли;

			Если мОписаниеОшибки <> "" Тогда
				Результат = Результат + Символы.ПС + Символы.ПС + мОписаниеОшибки;
			КонецЕсли;
			
			мОписаниеОшибки = "";
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьТекстОшибкиТО()

//+++ Выгружаем данные В терминал сбора данных 
//  строка с представлением ошибки если она произошла, иначе пустая строка
//
Функция ВыгрузитьДанныеВТерминалСбораДанных(СтрокаТаблицыТерминала, Данные) Экспорт
	
Перем Ответ;

	Если СтрокаТаблицыТерминала = Неопределено Тогда

		Ответ = "Терминал сбора данных не подключен";

	Иначе

		Параметры = Новый Структура();
		Параметры.Вставить("Объект" , СтрокаТаблицыТерминала.Объект );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыТерминала.НомерЛУ);
    	Параметры.Вставить("Данные", Данные);	 
									  
		Если ЗначениеНеЗаполнено(СтрокаТаблицыТерминала.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Терминал сбора данных """ + СтрокаТаблицыТерминала.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат "";
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыТерминала.Модель.ОбработкаОбслуживания);
	 	ФормаОбработки.ВыполнитьОперацию("ВыгрузитьДанныеВТерминал", Параметры, Ответ);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции


//+++ февраль 2012г.
//функция аналогична 
// по ВнешнемуСобытию - "BarCodeValue"
// в списке документов определенного типа (название как в Конфигураторе!)
// по ШтрихКоду в формате - EAN-13 ( TT YY xxyyyzzz) 

// находит документ типа -TT по орг.c кодом - "000YY" с номеро(безПрефикса) xxyyyzzz (до 8 цифр + префик!)
// самый "свежий" и "новый"
//
функция ПолучитьВсеДокументыПоШтрихКоду(ШтрихКод, СписокДок, ТипДокумента0="") Экспорт

	// первые 2 цифры - это тип документа!
	
	длКодОрг = 2;  // 3,4 (2 цифры) - код организации
	
	длНомерДок = 10 - длКодОрг;  // 8 цифр  - номер документа Без префикса в ШтрихКоде
	
 	длКодДок   = 8; // в конфигураторе - длина Кода большинства документов = 8 "ЗаказПокупателя"	
	
	Если НЕ ЗначениеЗаполнено(ШтрихКод) тогда
		возврат ЛОЖЬ;
	КонецЕсли;	
	
попытка
		// тт 
	Если стрДлина(ШтрихКод)<=13 тогда // старая нумерация 2012г.
		  ТипДок = Лев(ШтрихКод,2);
		  Если ТипДок = "99" или ТипДок="00" тогда
			  Сообщить("Неправильно сформирован Штрих-Код документа!");
			  Возврат ЛОЖЬ;
		  КонецЕсли;	  //поиск по массивам... тип - шк
		  
		ТипДокумента = неопределено;
		  //поиск по массивам... тип - шк
		для i=0 по ЧислоТиповДокШК-1 цикл
		   Если ТипДок = массивШК[i] тогда
			ТипДокумента = массивТиповДокументов[i];
		 		Если ТипДокумента ="ЗаказНаряд" тогда // у остальных документов номер из 8 символов
				 длКодДок = 10; 
				КонецЕсли; 
			прервать;
		   КонецЕсли;
	   КонецЦикла;	
	   
		  
	  Если ТипДокумента = неопределено тогда
	     Сообщить("   Неопределен Тип документа по префиксу Штрихкода: '"+ТипДок+"'", СтатусСообщения.Внимание);
		 Возврат ЛОЖЬ;				
		 
	 // Если принудительно выбран тип документа, то только он и берется! 
 	  иначеЕсли ТипДокумента0<>"" тогда	 
		  Если ТипДокумента0<>ТипДокумента тогда  // "10" 
			  //коды можно брать из справочника или из регистра сведений
			  Сообщить("   Неправильно выбран тип документа! Тип документа по ШтрихКоду - '"+ТипДокумента+"' не совпадает с типом '"+ТипДокумента0+"'", СтатусСообщения.Внимание);
			  возврат ложь;
		  КонецЕсли;
	  КонецЕсли;
		 
	  Запрос = Новый Запрос;
	  	 // ---------------- ТОЛЬКО 1 самый "свежий" документ! ------------------
	  Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ  ПЕРВЫЕ 1
		             |	Документ1.Ссылка
	                 |ИЗ
	                 |	Документ."+ТипДокумента+" КАК Документ1
	                 |ГДЕ
	                 |	Документ1.Номер = &Номер
	                 |
	                 |УПОРЯДОЧИТЬ ПО
	                 |	Документ1.Дата УБЫВ
	                 |АВТОУПОРЯДОЧИВАНИЕ";   //год 2 цифры?
	  
	  орг1 = Справочники.Организации.НайтиПоКоду("000"+Сред(ШтрихКод,3,длКодОрг)); //с 3-го символа
	  Если ЗначениеЗаполнено(орг1) тогда
	  	ПрефиксОрг = орг1.Префикс;
  	  иначе
	    Сообщить("Не найдена Организация по коду '000"+Сред(ШтрихКод,3,длКодОрг)+"'", СтатусСообщения.Информация);
		ПрефиксОрг = ""; //нет организации - нет и префикса!
	    //Возврат ЛОЖЬ;
		КонецЕсли;	                                                        
		длинаНомера = длКодДок-стрДлина(ПрефиксОрг);                        // последний - Контрольный символ!
	    НомерДок = ПрефиксОрг + Формат(Число(Сред(ШтрихКод,2+длКодОрг+1,длНомерДок)),  "ЧЦ="+строка(длинаНомера)+"; ЧВН=; ЧГ=0"); 
	  Запрос.УстановитьПараметр("Номер", НомерДок);
	  
	  Результат = Запрос.Выполнить();
	  СписокДок = Результат.Выгрузить();
	  
	  Если  СписокДок.Количество()>0  тогда
		 Возврат Истина; 
	  иначе
		Сообщить("Не найден "+ТипДокумента+" с номером '"+НомерДок+"'", СтатусСообщения.Внимание);
		сигнал();
	  	Предупреждение("Не найден "+ТипДокумента+" с номером '"+НомерДок+"'", 30);
		Возврат ложь;
	КонецЕсли;
	
КонецЕсли; //2012г

	Если стрДлина(ШтрихКод)>=18 тогда //21.07.2017 - НОВЫЙ Code128
		 док1 = ПолучитьДокументПоШК(ШтрихКод); // яштПрочее.
		 Если док1<>Неопределено тогда
			 Если ТипДокумента0<>"" тогда	
				 ТипДокумента = строка( типЗнч(док1) );
				 ТипДокумента = стрЗаменить(ТипДокумента, "ДокументСсылка.", "");
				 
				  Если ТипДокумента0<>ТипДокумента тогда  // "10" 
					  //коды можно брать из справочника или из регистра сведений
					  Сообщить("   Неправильно выбран тип документа! Тип документа по ШтрихКоду - '"+ТипДокумента+"' не совпадает с типом '"+ТипДокумента0+"'", СтатусСообщения.Внимание);
					  возврат ложь;
				  КонецЕсли;
			  КонецЕсли;

			 СписокДок = новый ТаблицаЗначений;
			 СписокДок.Колонки.Добавить("Ссылка");
			 стр1 = СписокДок.Добавить();
			 стр1.ссылка = док1;
			Возврат Истина;
		 Иначе
			Сообщить("Не найден документ по штрих-коду '"+ШтрихКод+"'", СтатусСообщения.Внимание);
			сигнал();
	  		Предупреждение("Не найден документ по штрих-коду '"+ШтрихКод+"'", 30);
			Возврат ложь;
		 КонецЕсли;	 
    КонецЕсли;
  
  исключение
	  Возврат ЛОЖЬ; 
  КонецПопытки;	  
	  
КонецФункции	

  
//+++ февраль 2012г.
// возвращает 12 символов штрихкода
// для  подстановки в ЭлементУправления "1С:штрихкод"
//
//	  ШтрихКод = ПолучитьШтрихКодПоДокументу(Ссылка);
//
//		ОбШтрихКод=ОбластьМакета.Рисунки.ШК.Объект;
//    	ОбШтрихКод.Сообщение = ШтрихКод; 
//		ОбШтрихКод.ТекстКода = ШтрихКод; 
//	
функция ПолучитьШтрихКодПоДокументу(ссылкаНаОбъект1) экспорт
	
	// требуется установленная компонента 1CBarCode.exe
   		ШК = "000000000000";
        ПрефиксДок = "";
		//поиск по массивам... тип - шк
		для i=0 по ЧислоТиповДокШК-1 цикл
		   Если ТипЗнч(ссылкаНаОбъект1) = Тип("ДокументСсылка."+массивТиповДокументов[i]) тогда
			префиксДок = массивШК[i];
			прервать;
		   КонецЕсли;
	   КонецЦикла;	
				
		Если ПрефиксДок = "" тогда
			Сообщить("Неизвестный Вид документа для кодирования Штрих-кода!", СтатусСообщения.Внимание);
			возврат ШК;	
		КонецЕсли;
		
		длинаПрефикса = стрДлина(ссылкаНаОбъект1.Организация.Префикс); 
		длинаКодаДокумента = стрДлина(СокрЛП(ссылкаНаОбъект1.Номер));  //обычно 8,  максимально 10 - 2 символа на префикс
		попытка  
			ШК = префиксДок + Прав(ссылкаНаОбъект1.Организация.Код,2)+Формат( Число(Прав(ссылкаНаОбъект1.Номер, длинаКодаДокумента-длинаПрефикса)), "ЧЦ=8; ЧВН=; ЧГ=0");
		исключение
			 Сообщить("В номере документа если буквы или символы, не являющиеся цифрами! Штрих-код EAN13 состоит только из Цифр!", СтатусСообщения.Внимание);
		     ШК = префиксДок + Прав(СсылкаНаОбъект1.Организация.Код,2)+"00000000";
        КонецПопытки;
		
	возврат ШК;	
		
КонецФункции

//+++ Плотников ТСД АТОЛ 24.03.16

// Загружает параметры по умолчанию для заданного терминала сбора данных
//
// Параметры
//  Терминал  –    терминал, значения для которого загружаются
//  Формат    –    формат данных
//  Таблица   -    номер используемой таблицы
Процедура ТСДПолучитьПараметрыПоУмолчанию(Терминал, Формат, Таблица) Экспорт
	Перем ДефЗначения;
	Перем Отбор;
	Перем РезультатОтбора;
	
	Формат = Неопределено;
	Таблица = Неопределено;
	Попытка
		ДефЗначения = ВосстановитьЗначение("ТСДНастройкиПоУмолчанию");
		Если ДефЗначения <> Неопределено Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Терминал", Терминал);
			РезультатОтбора = ДефЗначения.НайтиСтроки(Отбор);
			Если РезультатОтбора.Количество() > 0 Тогда
				Формат = РезультатОтбора[0].Формат;
				Таблица = РезультатОтбора[0].Таблица;
			КонецЕсли;
		КонецЕсли;		
	Исключение
		Формат = Неопределено;
		Таблица = Неопределено;
	КонецПопытки;
КонецПроцедуры // ТСДПолучитьПараметрыПоУмолчанию()

// Сохраняет параметры по умолчанию для заданного терминала сбора данных
//
// Параметры
//  Терминал  –    терминал, значения для которого сохраняются
//  Формат    –    формат данных
//  Таблица   -    номер используемой таблицы
Процедура ТСДСохранитьПараметрыПоУмолчанию(Терминал, Формат, Таблица) Экспорт
	Перем ДефЗначения;
	Перем Отбор;
	
	Попытка
		ДефЗначения = ВосстановитьЗначение("ТСДНастройкиПоУмолчанию");
		Если ДефЗначения = Неопределено Тогда
			ДефЗначения = Новый ТаблицаЗначений();
			ДефЗначения.Колонки.Добавить("Терминал", 
										 Новый ОписаниеТипов("СправочникСсылка.ТорговоеОборудование"));
			ДефЗначения.Колонки.Добавить("Формат",
										 Новый ОписаниеТипов("СправочникСсылка.ТСДФорматыДанных"));
			ДефЗначения.Колонки.Добавить("Таблица",
										 Новый ОписаниеТипов("Число"));
		КонецЕсли;
		Отбор = Новый Структура();
		Отбор.Вставить("Терминал", Терминал);
		РезультатОтбора = ДефЗначения.НайтиСтроки(Отбор);
		Если РезультатОтбора.Количество() > 0 Тогда
			РезультатОтбора[0].Формат = Формат;
			РезультатОтбора[0].Таблица = Таблица;
		Иначе
			РезультатОтбора = ДефЗначения.Добавить();
			РезультатОтбора.Терминал = Терминал;
			РезультатОтбора.Формат = Формат;
			РезультатОтбора.Таблица = Таблица;
		КонецЕсли;
		СохранитьЗначение("ТСДНастройкиПоУмолчанию", ДефЗначения);
	Исключение
	КонецПопытки;
КонецПроцедуры // ТСДСохранитьПараметрыПоУмолчанию()

// Функция осуществляет настройку процедуры обмена данными с ТСД и, 
// собственно, загрузку данных
//
// Параметры
//  Данные    - <ТаблицаЗначений>
//            - данные, загруженные из ТСД
//
// Возвращаемое значение:
//   <Строка> – описание произошедшей ошибки, либо "" в случае успеха
//
Функция ТСДЗагрузитьДанные(Данные) Экспорт
	
	Перем Текст;
	Перем ФормаЗагрузки;
	Перем КоличествоТСД;
	Перем ТаблицаТСД;
	Перем ФорматТСД;
	Перем ДанныеТСД;
	Перем ИндексШК;
	Перем ИндексКВ;
	Перем СтрокаДанныхТСД;
	Перем СтрокаДанных;
	Перем ТСД;
	
	Текст  = "";
	Данные = Новый ТаблицаЗначений();
	Данные.Колонки.Добавить(
		"ШтрихКод",
		Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить(
		"Количество",
		Новый ОписаниеТипов("Число",
							Новый КвалификаторыЧисла(
								10,
								3,
								ДопустимыйЗнак.Неотрицательный)));
	Данные.Колонки.Добавить(
		"Ячейка",
		Новый ОписаниеТипов("Строка"));			
	Данные.Колонки.Добавить(
		"Ячейка2",
		Новый ОписаниеТипов("Строка"));	
	КоличествоТСД = млТерминал.Количество();
	Если КоличествоТСД = 0 Тогда
		Текст = "Терминал сбора данных не подключен";
		Возврат Текст;
	КонецЕсли;
	
	    ФорматТСД   =   Новый ТаблицаЗначений;
		ФорматТСД.Колонки.Добавить("ПараметрНоменклатуры");
		ФорматТСД.Колонки.Добавить("ПолеТСД");
		
		Строка = ФорматТСД.Добавить();
		строка.ПараметрНоменклатуры = "ШтрихКод";         
		строка.ПолеТСД = 1;
		Строка = ФорматТСД.Добавить();
		строка.ПараметрНоменклатуры = "КоличествоНаСкладе";
		строка.ПолеТСД = 2;
		Строка = ФорматТСД.Добавить();
		строка.ПараметрНоменклатуры = "Ячейка";
		строка.ПолеТСД = 3;
		Строка = ФорматТСД.Добавить();
		строка.ПараметрНоменклатуры = "Ячейка2";
		строка.ПолеТСД = 4;
	
	//ФорматТСД      = ТСДПолучитьТекущийФорматВыгрузки();
	ТаблицаТСД     = 1;
	ФормаЗагрузки  = ПолучитьФорму("ТСДЗагрузкаДанных");
	
	Если (ЗначениеНеЗаполнено(ФорматТСД)) Или (КоличествоТСД > 1) Тогда
		ДанныеТСД = ФормаЗагрузки.ОткрытьМодально();
	Иначе
		ТСД   = Новый Структура();
		ТСД.Вставить("Модель",  млТерминал[0].Модель);
		ТСД.Вставить("НомерЛУ", млТерминал[0].НомерЛУ);
		ТСД.Вставить("Объект",  млТерминал[0].Объект);
		Текст = ФормаЗагрузки.ТСДЗагрузитьДанные1(ТСД,
		                                         ТаблицаТСД,
												 ФорматТСД,
												 ДанныеТСД);
	КонецЕсли;

	Если Текст = "" Тогда
		Если ДанныеТСД <> Неопределено Тогда
			ИндексШК = ДанныеТСД.Колонки.Найти(
				ФормаЗагрузки.ПолучитьНазваниеКолонки("ШтрихКод"));
			ИндексШК = ?(ИндексШК = Неопределено,
						 -1,
						 ДанныеТСД.Колонки.Индекс(ИндексШК));
			ИндексКВ = ДанныеТСД.Колонки.Найти(
				ФормаЗагрузки.ПолучитьНазваниеКолонки("КоличествоНаСкладе"));
			ИндексКВ = ?(ИндексКВ = Неопределено,
						 -1,
						 ДанныеТСД.Колонки.Индекс(ИндексКВ));
						 
			//ИндексЯЧ = ДанныеТСД.Колонки.Найти(
			//	ФормаЗагрузки.ПолучитьНазваниеКолонки("Поле3"));
						 
			Если ИндексШК = -1 Тогда
				Текст = "Выбранный формат данных не учитывает штрих-код товара";
			Иначе
				Для Каждого СтрокаДанныхТСД Из ДанныеТСД Цикл
					СтрокаДанных = Данные.Добавить();
					СтрокаДанных.ШтрихКод   = СтрокаДанныхТСД[ИндексШК];
					СтрокаДанных.Количество = ?(ИндексКВ = -1,
												0,
												СтрокаДанныхТСД[ИндексКВ]);
					СтрокаДанных.Ячейка   = СтрокаДанныхТСД[2];
					СтрокаДанных.Ячейка2   = СтрокаДанныхТСД[3];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Текст;

КонецФункции // ТСДЗагрузитьДанные()





///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// фискальный регистратор
млФР = Новый ТаблицаЗначений;
млФР.Колонки.Добавить("Объект");
млФР.Колонки.Добавить("Модель");
млФР.Колонки.Добавить("НомерЛУ");
млФР.Колонки.Добавить("КассаККМ");
млФР.Колонки.Добавить("Вид");
млФР.Колонки.Добавить("ДляПриемаНаличныхОтЮрЛиц");

// ККТ с передачей данных
млККТ = Новый ТаблицаЗначений;
млККТ.Колонки.Добавить("Объект");
млККТ.Колонки.Добавить("Модель");
млККТ.Колонки.Добавить("НомерЛУ");
млККТ.Колонки.Добавить("КассаККМ");
млККТ.Колонки.Добавить("ДляПриемаНаличныхОтЮрЛиц");
млККТ.Колонки.Добавить("Вид");
млККТ.Колонки.Добавить("Оборудование");

// сканер штрих кодов
млСШК = Новый ТаблицаЗначений;
млСШК.Колонки.Добавить("Объект");
млСШК.Колонки.Добавить("Модель");
млСШК.Колонки.Добавить("Префикс");

// ридер магнитных карт
млРМК = Новый ТаблицаЗначений;
млРМК.Колонки.Добавить("Объект");
млРМК.Колонки.Добавить("Модель");
млРМК.Колонки.Добавить("ИсточникДанных");

// ККМ On-Line
млККМOnLine = Новый ТаблицаЗначений;
млККМOnLine.Колонки.Добавить("Объект");
млККМOnLine.Колонки.Добавить("Модель");
млККМOnLine.Колонки.Добавить("Код");
млККМOnLine.Колонки.Добавить("КассаККМ");

// Чековый буфер ККМ On-Line
млЧековыйБуферККМOnLine = Новый ТаблицаЗначений;
млЧековыйБуферККМOnLine.Колонки.Добавить("КодККМ"      );
млЧековыйБуферККМOnLine.Колонки.Добавить("Штрихкод"    );
млЧековыйБуферККМOnLine.Колонки.Добавить("Количество"  );
млЧековыйБуферККМOnLine.Колонки.Добавить("Сумма"       );
млЧековыйБуферККМOnLine.Колонки.Добавить("НомерПокупки");

// ККМ Off-Line
млККМOffLine = Новый ТаблицаЗначений;
млККМOffLine.Колонки.Добавить("Объект");
млККМOffLine.Колонки.Добавить("Модель");
млККМOffLine.Колонки.Добавить("Путь");
млККМOffLine.Колонки.Добавить("НомерЛУ");
млККМOffLine.Колонки.Добавить("КассаККМ");
млККМOffLine.Колонки.Добавить("Адрес");
млККМOffLine.Колонки.Добавить("Порт");

// электронные весы
млВесы = Новый ТаблицаЗначений;
млВесы.Колонки.Добавить("Объект");
млВесы.Колонки.Добавить("Модель");
млВесы.Колонки.Добавить("НомерЛУ");

// дисплей покупателя
млДП = Новый ТаблицаЗначений;
млДП.Колонки.Добавить("Объект");
млДП.Колонки.Добавить("Модель");
млДП.Колонки.Добавить("Строка1");
млДП.Колонки.Добавить("Строка2");
млДП.Колонки.Добавить("БегущаяСтрока");
млДП.Колонки.Добавить("НомерЛУ");
млДП.Колонки.Добавить("КассаККМ");

// терминал сбора данных
млТерминал = Новый ТаблицаЗначений;
млТерминал.Колонки.Добавить("Объект");
млТерминал.Колонки.Добавить("Модель");
млТерминал.Колонки.Добавить("НомерЛУ");

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//2 массива для взаимного поиска...
//------------------------------------------------
	ЧислоТиповДокШК = 17;  //+2  22.01.2015
	
	массивТиповДокументов = новый массив;
	массивТиповДокументов.Добавить("ЗаказПокупателя");
	массивТиповДокументов.Добавить("ВнутреннийЗаказ");
	
	массивТиповДокументов.Добавить("ВозвратТоваровОтПокупателя");
	
	массивТиповДокументов.Добавить("РезервированиеТоваров");
	массивТиповДокументов.Добавить("КорректировкаЗаказаПокупателя");
	массивТиповДокументов.Добавить("ЗакрытиеЗаказовПокупателей");
	
	массивТиповДокументов.Добавить("ЗаказПоставщику");
	массивТиповДокументов.Добавить("РазмещениеЗаказаПоставщику");
	массивТиповДокументов.Добавить("КорректировкаЗаказаПоставщику");
	массивТиповДокументов.Добавить("ЗакрытиеЗаказовПоставщикам");
	
	массивТиповДокументов.Добавить("ЗаказПоОтветственномуХранению");
	
	массивТиповДокументов.Добавить("ЗаказНаряд");
	
	массивТиповДокументов.Добавить("ЗаданиеНаОтгрузку"); //+++ 01.04.2013
	массивТиповДокументов.Добавить("ЗаданиеНаПеремещение"); //+++ 25.09.2013
	массивТиповДокументов.Добавить("ПеремещениеТоваров"); //+++ 04.10.2013
	
	массивТиповДокументов.Добавить("ОприходованиеТоваров"); //+++ 22.01.2015
	массивТиповДокументов.Добавить("СписаниеТоваров"); 	    //+++ 22.01.2015

//--------------------------------------------------------------	
	массивШК = новый массив;
	массивШК.Добавить("10");
	массивШК.Добавить("11");
	
	массивШК.Добавить("12");//14.10.2013
	
	массивШК.Добавить("13");
	массивШК.Добавить("15");
	массивШК.Добавить("17");
	
	массивШК.Добавить("20");
	массивШК.Добавить("23");
	массивШК.Добавить("25");
	массивШК.Добавить("27");
	
	массивШК.Добавить("30");
	
	массивШК.Добавить("40"); //как в Формуле
	
	//------------документы Складского учета, "безценные"--------------------
	массивШК.Добавить("50");
	массивШК.Добавить("52"); //+++ 25.09.2013
	массивШК.Добавить("54"); //+++ 04.10.2013
	
	массивШК.Добавить("55"); //+++ 22.01.2015
	массивШК.Добавить("56"); //+++ 22.01.2015
	
//---------------------------------------------------------------	

мНетОшибки                  = Перечисления.ТООшибкиОбщие.ПустаяСсылка();
мОшибкаНеизвестно           = Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно;
мНетПрав                    = Перечисления.ТООшибкиОбщие.ОшибкаНетПрав;
