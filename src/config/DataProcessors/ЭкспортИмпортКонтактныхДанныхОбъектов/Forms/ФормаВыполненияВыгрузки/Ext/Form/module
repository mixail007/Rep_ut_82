
Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура проверяет и устанавливает порядок строк, данных сохраненных пользователем.
//
Процедура ПроверитьПорядокСтрок(ТаблицаСохряняемыхСоответствий)

	СписокСохраненныхСтрок = Новый СписокЗначений;
	
	Для каждого СтрокаТаблицы Из ТаблицаСохряняемыхСоответствий Цикл
	
		СтрокаНастройкаПолей = НастройкаПолейВыгрузки.Найти(СтрокаТаблицы.ИмяПоля, "ИмяПоля");
		
		Если СтрокаНастройкаПолей = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СписокСохраненныхСтрок.Добавить(СтрокаНастройкаПолей);
	
	КонецЦикла;

	Для каждого ЭлементСписка Из СписокСохраненныхСтрок Цикл

		НужнаяСтрока = Неопределено;
		КолВоНайденныхСтрок = 0;
		КолВоСтрокСдвига = 0;
		НомерНужнойСтроки = СписокСохраненныхСтрок.Индекс(ЭлементСписка) + 1;
		УстановилиСтроку = Ложь;

		Для каждого СтрокаТаблицы Из НастройкаПолейВыгрузки Цикл
		
			Если СписокСохраненныхСтрок.НайтиПоЗначению(СтрокаТаблицы) <> Неопределено Тогда
				КолВоНайденныхСтрок = КолВоНайденныхСтрок + 1;
			КонецЕсли;

			Если СтрокаТаблицы = ЭлементСписка.Значение Тогда
				Если КолВоНайденныхСтрок <> НомерНужнойСтроки Тогда
					НастройкаПолейВыгрузки.Сдвинуть(ЭлементСписка.Значение, (-1 * КолВоСтрокСдвига));
				КонецЕсли; 
				УстановилиСтроку = Истина;
			КонецЕсли; 

			Если УстановилиСтроку Тогда
				Прервать;
			КонецЕсли;

			Если КолВоНайденныхСтрок >= НомерНужнойСтроки Тогда
				КолВоСтрокСдвига = КолВоСтрокСдвига + 1;
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЦикла; 

КонецПроцедуры

// Процедура восстанавливает данные и параметры настройки, сохраненные пользователем.
//
Процедура ВосстановитьСохраненныеПараметры()

	мФормаИндикации.КомментарийОбработкиДанных = "Восстанавливаются параметры выгрузки ...";
	мФормаИндикации.Значение = 0;
	мФормаИндикации.Открыть();
	
	ЗначениеВосстановления = ВосстановитьЗначение("СоответствиеПараметровВыгрузка" + СокрЛП(ТипОбъекта));
	Если ТипЗнч(ЗначениеВосстановления) = Тип("Структура") Тогда
	
		ТаблицаСохраняемыхПолей = Неопределено;
		ЗначениеВосстановления.Свойство("ТаблицаСохраняемыхПолей", ТаблицаСохраняемыхПолей);

		Если ТипЗнч(ТаблицаСохраняемыхПолей) = Тип("ТаблицаЗначений") Тогда
		
			мФормаИндикации.МаксимальноеЗначение = ТаблицаСохраняемыхПолей.Количество();
			мФормаИндикации.Обновить();
			Для каждого СтрокаТаблицы Из ТаблицаСохраняемыхПолей Цикл

				мФормаИндикации.Значение = ТаблицаСохраняемыхПолей.Индекс(СтрокаТаблицы) + 1;
				Если ТипЗнч(СтрокаТаблицы.ИмяПоля) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") И СтрокаТаблицы.ИмяПоля.ПолучитьОбъект() = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокаТаблицыПолей = НастройкаПолейВыгрузки.Найти(СтрокаТаблицы.ИмяПоля,"ИмяПоля");
				Если СтрокаТаблицыПолей <> Неопределено Тогда
					СтрокаТаблицыПолей.Использование = Истина;
				КонецЕсли; 
			
			КонецЦикла;

			ПроверитьПорядокСтрок(ТаблицаСохраняемыхПолей);
		
		КонецЕсли; 

		ТаблицаСохраняемыхОбъектов = Неопределено;
		ЗначениеВосстановления.Свойство("ТаблицаСохраняемыхОбъектов", ТаблицаСохраняемыхОбъектов);

		Если ТипЗнч(ТаблицаСохраняемыхОбъектов) = Тип("ТаблицаЗначений") Тогда
		
			мФормаИндикации.Значение = 0;
			мФормаИндикации.МаксимальноеЗначение = ТаблицаСохраняемыхОбъектов.Количество();
			Для каждого СтрокаТаблицы Из ТаблицаСохраняемыхОбъектов Цикл
			
				мФормаИндикации.Значение = ТаблицаСохраняемыхОбъектов.Индекс(СтрокаТаблицы) + 1;
				Если ТипЗнч(СтрокаТаблицы.ОбъектВыгрузки) = Тип("СправочникСсылка." + ОпределитьИмяТаблицыОбъекта()) И СтрокаТаблицы.ОбъектВыгрузки.ПолучитьОбъект() = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Если ТипЗнч(СтрокаТаблицы.ОбъектВыгрузки) = Тип("СправочникСсылка.КонтактныеЛица")
					И ТипЗнч(СтрокаТаблицы.Владелец) = Тип("СправочникСсылка.Контрагенты")
					И НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Владелец)
					И СтрокаТаблицы.Владелец.ПолучитьОбъект() = Неопределено Тогда
					Продолжить;
				КонецЕсли; 

				Если НастройкаВыгрузкиОбъектов.Найти(СтрокаТаблицы.ОбъектВыгрузки, "ОбъектВыгрузки") = Неопределено Тогда
					
					НоваяСтрокаОбъекта = НастройкаВыгрузкиОбъектов.Добавить();
					НоваяСтрокаОбъекта.ОбъектВыгрузки = СтрокаТаблицы.ОбъектВыгрузки;
					НоваяСтрокаОбъекта.Владелец = СтрокаТаблицы.Владелец;
					
				КонецЕсли; 
				
			КонецЦикла; 
		
		КонецЕсли; 
		
	КонецЕсли; 

	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура проверяет и устанавливает доступность кнопок нижней командной панели формы.
//
Процедура ДоступностьКнопокНижнейПанели()

	Если ЭлементыФормы.ПанельВыполненияВыгрузки.ТекущаяСтраница.Имя = "ЗаполнениеТаблицыПолей" Тогда
	
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность  = Ложь;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность  = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Готово.Доступность = Ложь;

	ИначеЕсли ЭлементыФормы.ПанельВыполненияВыгрузки.ТекущаяСтраница.Имя = "НастройкаВыгрузкиЗначений" Тогда
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность  = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность  = Ложь;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Готово.Доступность = Истина;
		
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события формы ПриЗакрытии.
//
Процедура ПриЗакрытии()
	
	Если СохранятьСоответствиеПараметров Тогда
	
		ТаблицаСохраняемыхПолей = НастройкаПолейВыгрузки.Выгрузить();
		
		а = 0;
		Пока а <= ТаблицаСохраняемыхПолей.Количество() - 1 Цикл
			СтрокаТаблицы = ТаблицаСохраняемыхПолей.Получить(а);
			Если НЕ СтрокаТаблицы.Использование Тогда
				ТаблицаСохраняемыхПолей.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
			а = а + 1;
		КонецЦикла;

		ТаблицаСохраняемыхОбъектов = НастройкаВыгрузкиОбъектов.Выгрузить();

		СтруктураПараметров = Новый Структура("ТаблицаСохраняемыхПолей", ТаблицаСохраняемыхПолей);
		СтруктураПараметров.Вставить("ТаблицаСохраняемыхОбъектов", ТаблицаСохраняемыхОбъектов);
		СохранитьЗначение(("СоответствиеПараметровВыгрузка" + СокрЛП(ТипОбъекта)),СтруктураПараметров);
	
	КонецЕсли;

КонецПроцедуры

// Обработчик события формы ПриОткрытии.
//
Процедура ПриОткрытии()

	ВосстановитьСохраненныеПараметры();
	
	ДоступностьКнопокНижнейПанели();

	ЭлементыФормы.НастройкаВыгрузкиОбъектов.Колонки.Владелец.Видимость = (ТипОбъекта = "КонтактныеЛицаКонтрагентов");
	
КонецПроцедуры

// Обработчик события формы ОбработкаВыбора.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ТипЗнч(ЗначениеВыбора) = Тип("Массив") И ЗначениеВыбора.Количество()> 0 И ТипЗнч(ЗначениеВыбора[0].Ссылка) = Тип("СправочникСсылка." + ОпределитьИмяТаблицыОбъекта()) Тогда
	
		НоваяСтрокаОбъектов = НастройкаВыгрузкиОбъектов.Добавить();
		НоваяСтрокаОбъектов.ОбъектВыгрузки = ЗначениеВыбора[0].Ссылка;

		Если ТипЗнч(ЗначениеВыбора[0].Ссылка) = Тип("СправочникСсылка.КонтактныеЛица") И ЗначениеВыбора[0].Ссылка.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
			НоваяСтрокаОбъектов.Владелец = ЗначениеВыбора[0].Ссылка.ОбъектВладелец;
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ КОМАНДНЫХ ПАНЕЛЕЙ

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Назад.
//
Процедура ОсновныеДействияФормыНазад(Кнопка)
	
	ПредыдущаяСтраница = ЭлементыФормы.ПанельВыполненияВыгрузки.ТекущаяСтраница;
	ЭлементыФормы.ПанельВыполненияВыгрузки.ТекущаяСтраница = ЭлементыФормы.ПанельВыполненияВыгрузки.Страницы[Макс(ЭлементыФормы.ПанельВыполненияВыгрузки.Страницы.Индекс(ПредыдущаяСтраница)-1, 0)];
	ДоступностьКнопокНижнейПанели();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Далее.
//
Процедура ОсновныеДействияФормыДалее(Кнопка)
	
	ПредыдущаяСтраница = ЭлементыФормы.ПанельВыполненияВыгрузки.ТекущаяСтраница;
	ЭлементыФормы.ПанельВыполненияВыгрузки.ТекущаяСтраница = ЭлементыФормы.ПанельВыполненияВыгрузки.Страницы[Мин(ЭлементыФормы.ПанельВыполненияВыгрузки.Страницы.Индекс(ПредыдущаяСтраница)+1, ЭлементыФормы.ПанельВыполненияВыгрузки.Страницы.Количество()-1)];
	ДоступностьКнопокНижнейПанели();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Готово.
//
Процедура ОсновныеДействияФормыГотово(Кнопка)

	ЗаписатьВыгружаемуюИнформацию();
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельНастройкаПолейВыгрузки.УстановитьФлажки.
//
Процедура КоманднаяПанельНастройкаПолейВыгрузкиУстановитьФлажки(Кнопка)

	Для каждого СтрокаТаблицы Из НастройкаПолейВыгрузки Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельНастройкаПолейВыгрузки.СнятьФлажки.
//
Процедура КоманднаяПанельНастройкаПолейВыгрузкиСнятьФлажки(Кнопка)

	Для каждого СтрокаТаблицы Из НастройкаПолейВыгрузки Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельНастройкаВыгрузкиОбъектов.ЗаполнитьВсеЭлементы.
//
Процедура КоманднаяПанельНастройкаВыгрузкиОбъектовЗаполнитьВсеЭлементы(Кнопка)

	Если НастройкаВыгрузкиОбъектов.Количество() > 0 Тогда
		ОтветНаВопрос = Вопрос("Таблица будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 

	НастройкаВыгрузкиОбъектов.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ОпределитьИмяТаблицыОбъекта() + ".Ссылка,
	|	*
	|ИЗ
	|	Справочник." + ОпределитьИмяТаблицыОбъекта() + " КАК " + ОпределитьИмяТаблицыОбъекта() + "
	|
	|ГДЕ
	|	НЕ " + ОпределитьИмяТаблицыОбъекта() + ".ЭтоГруппа
	|";
	
	Если ОпределитьИмяТаблицыОбъекта() = "КонтактныеЛица" Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|И
		|	" + ОпределитьИмяТаблицыОбъекта() + ".ВидКонтактногоЛица = &ВидКонтактногоЛица
		|";
		
		Если ТипОбъекта = "КонтактныеЛицаКонтрагентов" Тогда
			Запрос.УстановитьПараметр("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
		ИначеЕсли ТипОбъекта = "ЛичныеКонтакты" Тогда
			Запрос.УстановитьПараметр("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт);
		Иначе
			Запрос.УстановитьПараметр("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо);
		КонецЕсли; 
	
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|АВТОУПОРЯДОЧИВАНИЕ
	|";
	
	ВыборкаЭлементов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЭлементов.Следующий() Цикл
		Если НЕ ВыборкаЭлементов.ЭтоГруппа Тогда
			НоваяСтрокаОбъекта = НастройкаВыгрузкиОбъектов.Добавить();
			НоваяСтрокаОбъекта.ОбъектВыгрузки = ВыборкаЭлементов.Ссылка;
			Если ТипОбъекта = "КонтактныеЛицаКонтрагентов" Тогда
				НоваяСтрокаОбъекта.Владелец = ВыборкаЭлементов.ОбъектВладелец;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельНастройкаВыгрузкиОбъектов.Очистить.
//
Процедура КоманднаяПанельНастройкаВыгрузкиОбъектовОчистить(Кнопка)

	Если НастройкаВыгрузкиОбъектов.Количество() > 0 Тогда
		ОтветНаВопрос = Вопрос("Вы действительно хотите удалить все данные из таблицы?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			НастройкаВыгрузкиОбъектов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельНастройкаВыгрузкиОбъектов.Подбор.
//
Процедура КоманднаяПанельНастройкаВыгрузкиОбъектовПодбор(Кнопка)

	ФормаПодбора = Справочники[ОпределитьИмяТаблицыОбъекта()].ПолучитьФормуВыбора(, ЭтаФорма);
	Если ОпределитьИмяТаблицыОбъекта() = "КонтактныеЛица" Тогда
		ФормаПодбора.Отбор.ВидКонтактногоЛица.Использование = Истина;
		Если ТипОбъекта = "КонтактныеЛицаКонтрагентов" Тогда
			ФормаПодбора.Отбор.ВидКонтактногоЛица.Значение = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
		ИначеЕсли ТипОбъекта = "ЛичныеКонтакты" Тогда
			ФормаПодбора.Отбор.ВидКонтактногоЛица.Значение = Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт;
		ИначеЕсли ТипОбъекта = "ПрочиеКонтактныеЛица" Тогда
			ФормаПодбора.Отбор.ВидКонтактногоЛица.Значение = Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо;
		КонецЕсли; 
	КонецЕсли; 
	ФормаПодбора.РежимВыбора = Истина;
	ФормаПодбора.МножественныйВыбор = Истина;
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	ФормаПодбора.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриСменеСтраницы элемента формы ПанельВыполненияВыгрузки.
//
Процедура ПанельВыполненияВыгрузкиПриСменеСтраницы(Элемент, ТекущаяСтраница)

	ДоступностьКнопокНижнейПанели();
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы НастройкаПолейВыгрузки.
//
Процедура НастройкаПолейВыгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы НастройкаПолейВыгрузки.
//
Процедура НастройкаПолейВыгрузкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы НастройкаВыгрузкиОбъектовОбъектВыгрузки.
//
Процедура НастройкаВыгрузкиОбъектовОбъектВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ТипЗнч(Элемент.Значение) <> Тип("СправочникСсылка." + ОпределитьИмяТаблицыОбъекта()) Тогда
		Элемент.Значение = Новый("СправочникСсылка." + ОпределитьИмяТаблицыОбъекта());
	КонецЕсли; 
	
	Если ТипОбъекта = "КонтактныеЛицаКонтрагентов" Тогда
		Если ЭлементыФормы.НастройкаВыгрузкиОбъектов.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка);
	ИначеЕсли ТипОбъекта = "ПрочиеКонтактныеЛица" Тогда
		Если ЭлементыФормы.НастройкаВыгрузкиОбъектов.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		НачалоВыбораПрочегоКонтактногоЛица(Элемент, СтандартнаяОбработка);
	ИначеЕсли ТипОбъекта = "ЛичныеКонтакты" Тогда
		НачалоВыбораЛичныхКонтактов(Элемент, СтандартнаяОбработка);
	Иначе
		Если Элемент.Значение = Неопределено Тогда
			Элемент.Значение = Справочники[ОпределитьИмяТаблицыОбъекта()].ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы НастройкаВыгрузкиОбъектовОбъектВыгрузки.
//
Процедура НастройкаВыгрузкиОбъектовОбъектВыгрузкиПриИзменении(Элемент)

	Если ЭлементыФормы.НастройкаВыгрузкиОбъектов.ТекущиеДанные <> Неопределено Тогда
	
		Если ТипЗнч(Элемент.Значение) <> Тип("СправочникСсылка." + ОпределитьИмяТаблицыОбъекта()) Тогда
			Элемент.Значение = Справочники[ОпределитьИмяТаблицыОбъекта()].ПустаяСсылка()
		КонецЕсли;
		
		Если НЕ ЗначениеНеЗаполнено(Элемент.Значение) Тогда
			Если ТипОбъекта = "КонтактныеЛицаКонтрагентов" Тогда
				Если ЭлементыФормы.НастройкаВыгрузкиОбъектов.ТекущиеДанные.Владелец <> Элемент.Значение.ОбъектВладелец Тогда
					ЭлементыФормы.НастройкаВыгрузкиОбъектов.ТекущиеДанные.Владелец = Элемент.Значение.ОбъектВладелец;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы НастройкаВыгрузкиОбъектовОбъектВыгрузки.
//
Процедура НастройкаВыгрузкиОбъектовПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
	
		Если ТипЗнч(Элемент.ТекущиеДанные.ОбъектВыгрузки) <> Тип("СправочникСсылка." + ОпределитьИмяТаблицыОбъекта()) Тогда
			Элемент.ТекущиеДанные.ОбъектВыгрузки = Справочники[ОпределитьИмяТаблицыОбъекта()].ПустаяСсылка()
		КонецЕсли;
		
		Если ТипОбъекта = "КонтактныеЛицаКонтрагентов" Тогда
			Если ТипЗнч(Элемент.ТекущиеДанные.Владелец) <> Тип("СправочникСсылка.Контрагенты") Тогда
				Элемент.ТекущиеДанные.Владелец = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы НастройкаВыгрузкиОбъектовОбъектВыгрузки.
//
Процедура НастройкаВыгрузкиОбъектовОбъектВыгрузкиАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	Если ОпределитьИмяТаблицыОбъекта() = "КонтактныеЛица" Тогда
		
		СтруктураПараметров = Новый Структура();
		Если ТипОбъекта = "КонтактныеЛицаКонтрагентов" Тогда
			СтруктураПараметров.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
		ИначеЕсли ТипОбъекта = "ЛичныеКонтакты" Тогда
			СтруктураПараметров.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт);
		ИначеЕсли ТипОбъекта = "ПрочиеКонтактныеЛица" Тогда
			СтруктураПараметров.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо);
		КонецЕсли; 
		
		АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, Тип("СправочникСсылка.КонтактныеЛица"));
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы НастройкаВыгрузкиОбъектовОбъектВыгрузки.
//
Процедура НастройкаВыгрузкиОбъектовОбъектВыгрузкиОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если ОпределитьИмяТаблицыОбъекта() = "КонтактныеЛица" Тогда
		
		СтруктураПараметров = Новый Структура();
		Если ТипОбъекта = "КонтактныеЛицаКонтрагентов" Тогда
			СтруктураПараметров.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
		ИначеЕсли ТипОбъекта = "ЛичныеКонтакты" Тогда
			СтруктураПараметров.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт);
		ИначеЕсли ТипОбъекта = "ПрочиеКонтактныеЛица" Тогда
			СтруктураПараметров.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо);
		КонецЕсли; 
		
		ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, Тип("СправочникСсылка.КонтактныеЛица"), мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

мОбработкаТайпинга                 = Ложь;
мТекстТайпинга                     = "";
мПоследнееЗначениеЭлементаТайпинга = Неопределено;
