////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем мФормаВыбораФильтров;         // Форма выбора фильтра
Перем мФормаПодбораЗначенийФильтра; // Форма подбора значений во Множественный отбор
Перем мСклад;
Перем мКолонкиДанных;

// Действие, назначаемое в качестве обработчика события НачалоВыбора колонке
// ЗначениеФильтра табличного поля ТаблицаЗначенияФильтров
Перем мДействиеТабличноеПолеЗначенияФильтровЗначениеФильтраНачалоВыбора;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

// Формирует и выполняет запрос
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьЗапрос()
	Перем ТекФильтр;
	Перем ФлагЕстьКатегории;
	Перем ТипФильтраВсеИз;
	Перем СтрКатегории;
	Перем ОперацияСравнения;
	Перем ЕстьФильтры;
	Перем МассивСвойств;

	Если ТаблицаДанных.Количество() > 0 Тогда
		ТаблицаДанных.Очистить();
	КонецЕсли;

	ОперацияСравнения = ЭлементыФормы.ТипОстатков.Значение;
	Если ЗначениеНеЗаполнено(ОперацияСравнения) Тогда
		ОперацияСравнения = ">";
	КонецЕсли;

	ФлагЕстьКатегории        = Ложь;
	ТипФильтраВсеИз          = Ложь;
	ФлагВидОстатковСвободные = (ЭлементыФормы.ВидОстатков.Значение = "Свободные");

	МассивСвойств = Новый Массив;
	Для Каждого К Из ТаблицаСписокФильтров Цикл
		СтрФильтров = мТаблицаФильтры.Найти(К.ИмяФильтра, "ИмяПоля");

		// На случай если не выбран фильтр
		Если СтрФильтров = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не СтрФильтров.Свойство = Неопределено Тогда
			МассивСвойств.Добавить(К);
		КонецЕсли;
		Если К.ИмяФильтра = "Категория" Тогда
			ФлагЕстьКатегории = Истина;
			ТипФильтраВсеИз   = Макс(ТипФильтраВсеИз, К.ТипФильтра = "ВсеИз");
			СтрКатегории      = К;
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);

	Запрос.Текст = "
		|ВЫБРАТЬ
		|	РегОстатки.Номенклатура               КАК Товар,
		|	РегОстатки.ХарактеристикаНоменклатуры КАК Характеристика,
		|	СУММА(РегОстатки.КоличествоОстаток)   КАК КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА СУММА(РегРезерв.КоличествоОстаток) ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ СУММА(РегРезерв.КоличествоОстаток)
		|	КОНЕЦ КАК КоличествоРезерв
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаАктуальности) КАК РегОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаАктуальности) КАК РегРезерв
		|		ПО РегОстатки.Номенклатура               = РегРезерв.Номенклатура
		|		И  РегОстатки.ХарактеристикаНоменклатуры = РегРезерв.ХарактеристикаНоменклатуры
		|";

	Если ФлагЕстьКатегории Тогда
		Если ТипФильтраВсеИз Тогда
			Если СтрКатегории.СписокФильтров.Количество() = 0 Тогда
				Запрос.УстановитьПараметр("Категория", СтрКатегории.ЗначениеФильтра);
				Запрос.Текст = Запрос.Текст + "
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
					|(	ВЫБРАТЬ РАЗЛИЧНЫЕ
					|		Объект,
					|		Категория
					|	ИЗ
					|		РегистрСведений.КатегорииОбъектов КАК РегКат
					|	ГДЕ
					|		РегКат.Категория = &Категория
					|) КАК Кат
					|ПО
					|	Кат.Объект = РегОстатки.Номенклатура
					|";
			Иначе
				Индекс = 0;
				Для Каждого ЗначФильтра Из СтрКатегории.СписокФильтров Цикл
					Запрос.УстановитьПараметр("Категория" + Индекс, ЗначФильтра.ЗначениеФильтра);
					Запрос.Текст = Запрос.Текст + "
						|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
						|(	ВЫБРАТЬ РАЗЛИЧНЫЕ
						|		Объект,
						|		Категория
						|	ИЗ
						|		РегистрСведений.КатегорииОбъектов КАК РегКат" + Индекс + "
						|	ГДЕ
						|		РегКат" + Индекс + ".Категория = &Категория" + Индекс + "
						|) КАК Кат" + Индекс + "
						|ПО
						|	Кат" + Индекс + ".Объект = РегОстатки.Номенклатура
						|";
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если СтрКатегории.ТипФильтра = "ОдноИз" Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатОбъектов";
			Иначе // СтрКатегории.ТипФильтра = "ВсеКроме" Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ЛЕВОЕ      СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатОбъектов";
			КонецЕсли;

			// Значение параметра &Категория добавляется вместе с отборами
			Запрос.Текст = Запрос.Текст + "
				|	ПО КатОбъектов.Объект.Ссылка = РегОстатки.Номенклатура И
				|	   КатОбъектов.Категория В (&Категория)
				|";

		КонецЕсли;
	КонецЕсли;

	Если МассивСвойств.Количество() > 0 Тогда
		ДобавитьФильтрыПоСвойствам(Запрос, МассивСвойств);
	КонецЕсли;

	ЕстьФильтры = ДобавитьФильтрыЗапрос(Запрос);

	Запрос.УстановитьПараметр("Склад", мСклад);
	Запрос.Текст = Запрос.Текст + ?(ЕстьФильтры, " И ", "ГДЕ ") + "
		|	РегОстатки.Номенклатура.ЭтоГруппа = Ложь И
		|	РегОстатки.Склад = &Склад";
	ЕстьФильтры = Истина;
	Если ФлагЕстьКатегории И СтрКатегории.ТипФильтра = "ВсеКроме" Тогда
		Запрос.Текст = Запрос.Текст + " И 
			|	КатОбъектов.Объект ЕСТЬ NULL
			|";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
		|СГРУППИРОВАТЬ ПО
		|	РегОстатки.Номенклатура,
		|	РегОстатки.ХарактеристикаНоменклатуры
		|
		|ИМЕЮЩИЕ
		|	СУММА(РегОстатки.КоличествоОстаток) " + ОперацияСравнения + " 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегОстатки.Номенклатура.Наименование,
		|	РегОстатки.ХарактеристикаНоменклатуры.Наименование";

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Для Каждого Обход Из РезультатЗапроса Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Пометка        = Истина;
		НоваяСтрока.Номенклатура   = Обход.Товар;
		НоваяСтрока.Характеристика = Обход.Характеристика;
		НоваяСтрока.Остаток        = Обход.КоличествоОстаток - ?(ФлагВидОстатковСвободные, Обход.КоличествоРезерв, 0);
	КонецЦикла;
КонецПроцедуры // ВыполнитьЗапрос()

// Функция создает объект типа Описание Типа по строковому идентификатору типа
//
// Параметры: ТипСтрокой - имя типа строкой
//
// Возвращаемое значение:
//  Описание типа - объект типа "Описание Типа"
//
Функция СоздатьОписаниеТипа(ТипСтрокой)

	МассивТипов   = Новый Массив;
	МассивТипов.Добавить(Тип(ТипСтрокой));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);

	Возврат ОписаниеТипов;

КонецФункции // СоздатьОписаниеТипа()

// Добавляет фильтры в запрос
//
// Параметры: 
//  Запрос - запрос в текст которого добавляются условия и значения фильтров
//
// Возвращаемое значение:
//  Флаг, были ли добавлены условия или нет
//
Функция ДобавитьФильтрыЗапрос(Запрос)
	Перем ЗначФильтра;
	Перем ТипФильтраСтр;
	Перем ПервыйРаз;
	Перем ТекСтр;
	Перем Массив;

	ПервыйРаз = Истина;
	Для Каждого ТекФильтр Из ТаблицаСписокФильтров Цикл

		ТипФильтраСтр  = ?( ТекФильтр.ТипФильтра = "ВсеКроме", " НЕ ", "");
		Если ТекФильтр.ТипФильтра = "ВсеИз" Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТаблицыФильтров = мТаблицаФильтры.Найти(ТекФильтр.ИмяФильтра, "ИмяПоля");
		Если СтрокаТаблицыФильтров = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		// Фильтр по свойствам уже должен стоять
		Если Не СтрокаТаблицыФильтров.Свойство = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ТекФильтр.СписокФильтров.Количество() > 0 Тогда
			ЗначФильтра = Новый Массив;
			Для Каждого ТекСтр Из ТекФильтр.СписокФильтров  Цикл
				ЗначФильтра.Добавить( ТекСтр.ЗначениеФильтра);
			КонецЦикла;
		Иначе
			ЗначФильтра = ТекФильтр.ЗначениеФильтра;
		КонецЕсли;

		Запрос.УстановитьПараметр(ТекФильтр.ИмяФильтра, ЗначФильтра);

		Если ТекФильтр.ИмяФильтра = "Категория" Тогда
			Продолжить; // Текст уже должен быть, нужно только значение параметра "&Категория"
		КонецЕсли;

		Если ТекФильтр.СписокФильтров.Количество() > 0 Тогда
			Если ТекФильтр.ИмяФильтра = "Родитель" Тогда
				Запрос.Текст = Запрос.Текст + ?(ПервыйРаз, "ГДЕ ", " И ") + "
					|" + ТипФильтраСтр + "РегОстатки.Номенклатура В ИЕРАРХИИ (&" + ТекФильтр.ИмяФильтра + ")";
			Иначе
				Запрос.Текст = Запрос.Текст + ?(ПервыйРаз, "ГДЕ ", " И ") + "
					|" + ТипФильтраСтр + "РегОстатки.Номенклатура." + ТекФильтр.ИмяФильтра + " В (&" + ТекФильтр.ИмяФильтра + ")";
			КонецЕсли;
		Иначе
			Если ТекФильтр.ИмяФильтра = "Родитель" Тогда
				Запрос.Текст = Запрос.Текст + ?(ПервыйРаз, "ГДЕ ", " И ") + "
					|" + ТипФильтраСтр + "РегОстатки.Номенклатура В ИЕРАРХИИ (&" + ТекФильтр.ИмяФильтра + ")";
			Иначе
				Запрос.Текст = Запрос.Текст + ?(ПервыйРаз, "ГДЕ ", " И ") + "
					|" + ТипФильтраСтр + "РегОстатки.Номенклатура." + ТекФильтр.ИмяФильтра + " = &" + ТекФильтр.ИмяФильтра;
			КонецЕсли;
		КонецЕсли;

		ПервыйРаз = Ложь;

	КонецЦикла;

	Возврат Не ПервыйРаз;

КонецФункции // ДобавитьФильтрыЗапрос()

// Добавляются фильтры по значениям свойств
//
// Параметры:
//  Запрос - запрос в текст которого добавляются условия и значения фильтров
//  МассивСвойств - массив со значениями фильтра по свойствам
//
//
Процедура ДобавитьФильтрыПоСвойствам(Запрос, МассивСвойств)
	Перем ИмяПоляЗапроса;
	Перем СтрФильтров;
	Перем ТипФильтраСтр;

	Для Индекс = 0 По МассивСвойств.Количество() - 1 Цикл
		СтрФильтров = МассивСвойств[Индекс];
		ТипФильтраСтр = ?(СтрФильтров.ТипФильтра = "ВсеКроме", " НЕ ", "");

		Если мТаблицаФильтры.Найти(СтрФильтров.ИмяФильтра, "ИмяПоля").Свойство = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоляЗапроса = мТаблицаФильтры.Найти(СтрФильтров.ИмяФильтра, "ИмяПоля").ИмяПоляЗапроса;

		Если СтрФильтров.СписокФильтров.Количество() = 0 Тогда
			Запрос.УстановитьПараметр(СтрФильтров.ИмяФильтра, СтрФильтров.ЗначениеФильтра);
			Запрос.УстановитьПараметр(СтрФильтров.ИмяФильтра + "Владелец", СтрФильтров.ЗначениеФильтра.Владелец);
		Иначе
			Массив = Новый Массив;
			Для Каждого К Из СтрФильтров.СписокФильтров Цикл
				Массив.Добавить(К.ЗначениеФильтра);
			КонецЦикла;
			Запрос.УстановитьПараметр(СтрФильтров.ИмяФильтра, Массив);
			Запрос.УстановитьПараметр(СтрФильтров.ИмяФильтра + "Владелец", Массив[0].Владелец);
		КонецЕсли;
		
		Если Индекс > 0 Тогда
			Запрос.Текст = Запрос.Текст + ",
				|";
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК " + ИмяПоляЗапроса + СтрФильтров.ИмяФильтра + "
			|	ПО " + ИмяПоляЗапроса + СтрФильтров.ИмяФильтра + ".Объект = РегОстатки.Номенклатура И
			|	   " + ИмяПоляЗапроса + СтрФильтров.ИмяФильтра + ".Свойство = &" + СтрФильтров.ИмяФильтра + "Владелец И
			|	   " + ИмяПоляЗапроса + СтрФильтров.ИмяФильтра + ".Значение " + ТипФильтраСтр + " В (&" + СтрФильтров.ИмяФильтра + ")";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
		|";
КонецПроцедуры // ДобавитьФильтрыПоСвойствам()

// Определяет значение владельца для поля со значением - подчиненным справочником
// по существующим значениям или выбором. Используется для определения владельца 
// полей колонок ЗначениеФильтра табличных полей ТабличноеПолеСписокФильтров и
// ТабличноеПолеЗначенияФильтров.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Владелец справочника, или Неопределено, если владельца нет или не выбран.
//
Функция ОпределитьВладельца()

	Владелец = Неопределено;

	НайдСтрФильтры = мТаблицаФильтры.Найти(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущиеДанные.ИмяФильтра, "ИмяПоля");
	Если НайдСтрФильтры <> Неопределено Тогда
		ИмяПоляВладелец = НайдСтрФильтры.ИмяПоляВладелец;
		Если Не ПустаяСтрока(ИмяПоляВладелец) Тогда
			НайдСтр = ЭлементыФормы.ТабличноеПолеСписокФильтров.Значение.Найти(ИмяПоляВладелец, "ИмяФильтра");
			Если НайдСтр <> Неопределено Тогда
				Если ТипЗнч(НайдСтр.ЗначениеФильтра) <> Тип("Строка") Тогда
					Владелец = НайдСтр.ЗначениеФильтра;
				Иначе
					Если НайдСтр.СписокФильтров.Количество() = 1 Тогда
						Владелец = НайдСтр.СписокФильтров[0].ЗначениеФильтра;

					ИначеЕсли НайдСтр.СписокФильтров.Количество() > 0 Тогда
						СписокВладельцев = Новый СписокЗначений;
						Для Каждого Строка Из НайдСтр.СписокФильтров Цикл
							СписокВладельцев.Добавить(Строка.ЗначениеФильтра);
						КонецЦикла;
						Выбор = СписокВладельцев.ВыбратьЭлемент("Выберите владельца");
						Если Выбор <> Неопределено Тогда
							Владелец = Выбор.Значение;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если Владелец = Неопределено Тогда
				НайдСтр = мТаблицаФильтры.Найти(ИмяПоляВладелец, "ИмяПоля");
				Если НайдСтр <> Неопределено Тогда

					Типы = НайдСтр.ОписаниеТипов.Типы();

					Если Типы.Количество() = 1 Тогда
						ВвестиЗначение(Владелец, "Выберите владельца", Типы[0]);

					Иначе
						СписокВладельцев = Новый СписокЗначений;
						СписокВладельцев.ЗагрузитьЗначения(Типы);
						Выбор = СписокВладельцев.ВыбратьЭлемент("Выберите владельца");
						Если Выбор <> Неопределено Тогда
							ТипВладельца = Выбор.Значение;
							Если ТипВладельца <> Неопределено Тогда
								ВвестиЗначение(Владелец, "Выберите владельца", ТипВладельца);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// Если это свойства, для них заполнено поле "Свойство"
		ИначеЕсли Не ЗначениеНеЗаполнено(НайдСтрФильтры.Свойство) > 0 Тогда

			Владелец = НайдСтрФильтры.Свойство;

		КонецЕсли;
	КонецЕсли;

	Возврат Владелец;

КонецФункции // ОпределитьВладельца()

// Устанавливает признак наличия кнопки выбора у элемента диалога
// а также обработчик события "НачалоВыбора". Используется для ввода
// значения фильтра.
//
// Параметры:
//  ЭлементУправления - элемент управления
//
Процедура УстановитьФлагКнопкиВыбора(ЭлементУправления)
	ЭлементУправления.КнопкаВыбора = Истина;
	ЭлементУправления.УстановитьДействие("НачалоВыбора", мДействиеТабличноеПолеЗначенияФильтровЗначениеФильтраНачалоВыбора);
КонецПроцедуры // УстановитьФлагКнопкиВыбора()

// Заполняет значения элементов формы отчета в соответствии со значениями реквизитов отчета
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоРеквизитам()

	// Заполним таблицу Фильтров
	ТаблицаСписокФильтров.Очистить();
	ТаблицаЗначенияФильтров.Очистить();

	ТаблСписокВсехФильтров = ФильтрыОтчета.Выгрузить();
	ТаблСписокВсехФильтров.Свернуть("ИмяФильтра",);

	СтруктураПоиска = Новый Структура("ИмяФильтра");

	Для Каждого СтрокаПоиска Из ТаблСписокВсехФильтров Цикл
		
		НоваяСтрока = ТаблицаСписокФильтров.Добавить();
		
		// Определим типы значения добавляемого фильтра.
		ВидФильтра = мТаблицаФильтры.Найти(СтрокаПоиска.ИмяФильтра, "ИмяПоля");

		Если ВидФильтра <> Неопределено Тогда
			ОписаниеТиповФильтра = ВидФильтра.ОписаниеТипов;
		Иначе
			ОписаниеТиповФильтра = мОписаниеТиповСтрока;
		КонецЕсли;

		НоваяСтрока.СписокФильтров.Колонки.Очистить();
		НоваяСтрока.СписокФильтров.Колонки.Добавить("ЗначениеФильтра", ОписаниеТиповФильтра);
		НоваяКолонка = НоваяСтрока.СписокФильтров.Колонки.Добавить("ПредставлениеЗначения", мОписаниеТиповЗначенийФильтра, "Множественный отбор");
		УстановитьФлагКнопкиВыбора( НоваяКолонка.ЭлементУправления);

		СтруктураПоиска.ИмяФильтра = СтрокаПоиска.ИмяФильтра;

		НайденныеСтроки = ФильтрыОтчета.НайтиСтроки(СтруктураПоиска);

		// Общие данные берем из первой строки: строки с одинаковым именем фильтра
		// должны содержать одинаковые значения ОписаниеФильтра, ПредставлениеФильтра
		НоваяСтрока.ИмяФильтра		 	 = СтрокаПоиска.ИмяФильтра;
		НоваяСтрока.ОписаниеФильтра 	 = НайденныеСтроки[0].ОписаниеФильтра;
		НоваяСтрока.ПредставлениеФильтра = НайденныеСтроки[0].ПредставлениеФильтра;
		
		Если  НайденныеСтроки.Количество() = 1 
		   И (НайденныеСтроки[0].ТипФильтра = "ОдноИз" 
		 Или  ПустаяСтрока(НайденныеСтроки[0].ТипФильтра)) Тогда

			// Одиночный фильтр заносим в поле ЗначениеФильтра таблицы
			НоваяСтрока.ТипФильтра      = "ОдноИз";
			НоваяСтрока.ЗначениеФильтра = НайденныеСтроки[0].ЗначениеФильтра;
		Иначе

			// Множественный отбор: заносим строку представления в поле ЗначениеФильтратаблицы,
			// конкретные значения - в поле СписокФильтров, которое является таблицей.
			НоваяСтрока.ТипФильтра      = НайденныеСтроки[0].ТипФильтра;
			НоваяСтрока.ЗначениеФильтра = "<Задано множественным отбором>";
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

				НоваяСтрокаСписка = НоваяСтрока.СписокФильтров.Добавить();
				НоваяСтрокаСписка.ЗначениеФильтра= НайденнаяСтрока.ЗначениеФильтра;
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоРеквизитам()

// Обновляет заданную строку списка фильтров
//
// Параметры:
//	СписокФильтров - таблица значений множественного отбора
//	Фильтр 		   - строка списка фильтров
//
Процедура ОбновитьСтрокуСпискаФильтров(СписокФильтров, Фильтр)

	Если СписокФильтров.Количество() > 0  Тогда
		Фильтр.ЗначениеФильтра       = "<Задано множественным отбором>";
		Фильтр.ПредставлениеЗначения = "<Задано множественным отбором>";
	Иначе
		Если Фильтр.ЗначениеФильтра = "<Задано множественным отбором>" Тогда

			НайдСтр = мТаблицаФильтры.Найти(Фильтр.ИмяФильтра, "ИмяПоля");
			Если НайдСтр <> Неопределено Тогда
				ТипыЗначения = НайдСтр.ОписаниеТипов.Типы();

				// Если тип единичный, то присвоим пустое значение этого типа			
				Если ТипыЗначения.Количество() = 1 Тогда
					Фильтр.ЗначениеФильтра       = ПустоеЗначениеТипа(ТипыЗначения[0]);
					Фильтр.ПредставлениеЗначения = Фильтр.ЗначениеФильтра;
				Иначе
					Фильтр.ЗначениеФильтра       = Неопределено;
					Фильтр.ПредставлениеЗначения = Неопределено;
				КонецЕсли;
			Иначе
				Фильтр.ЗначениеФильтра       = Неопределено;
				Фильтр.ПредставлениеЗначения = Неопределено;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьСтрокуСпискаФильтров()

// Обновляет все строки списка фильтров
//
// Параметры:
//	Нет.
//
Процедура ОбновитьСписокФильтров()

	Таблица = ЭлементыФормы.ТабличноеПолеСписокФильтров.Значение;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		ОбновитьСтрокуСпискаФильтров(СтрокаТаблицы.СписокФильтров, СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСписокФильтров()

// Обновляет значение, связанное с табличным полем ТабличноеПолеЗначенияФильтров,
// что позволяет показывать Множественный отбор, соответствующий текущей строке
// списка фильтров.
//
// Параметры:
//	Нет.
//
Процедура ОбновитьТаблицуЗначенияФильтров()

	Элемент = ЭлементыФормы.ТабличноеПолеСписокФильтров;
	Если Элемент.ТекущиеДанные = Неопределено Тогда 
		Возврат 
	КонецЕсли;

	СписокФильтров = Элемент.ТекущиеДанные.СписокФильтров;
	Если СписокФильтров.Колонки.Найти("ЗначениеФильтра") = Неопределено Тогда
		СписокФильтров.Колонки.Добавить("ЗначениеФильтра");
	КонецЕсли;
	Если СписокФильтров.Колонки.Найти("ПредставлениеЗначения") = Неопределено Тогда
		НоваяКолонка = СписокФильтров.Колонки.Добавить("ПредставлениеЗначения", мОписаниеТиповЗначенийФильтра,"Множественный отбор");
		УстановитьФлагКнопкиВыбора( НоваяКолонка.ЭлементУправления);
	КонецЕсли;

	ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Значение = СписокФильтров;

КонецПроцедуры // ОбновитьТаблицуЗначенияФильтров()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Перем СписокТиповФильтра;

	СписокТиповФильтра = Новый СписокЗначений;
	Для Каждого ЭлементСтруктуры Из мСтруктураТиповФильтров Цикл
		СписокТиповФильтра.Добавить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;

	ЭлементыФормы.ТипФильтра.СписокВыбора = СписокТиповФильтра;
	ЭлементыФормы.ТипФильтра.Значение     = мТипФильтраПоУмолчанию;

	ЭлементыФормы.ВидОстатков.СписокВыбора = Новый СписокЗначений;
	ЭлементыФормы.ВидОстатков.СписокВыбора.Добавить("ВНаличии",    "Остаток на складе");
	ЭлементыФормы.ВидОстатков.СписокВыбора.Добавить("Свободные",   "Остаток на складе за минусом резерва");
	ЭлементыФормы.ВидОстатков.Значение = ЭлементыФормы.ВидОстатков.СписокВыбора[0].Значение;

	ЭлементыФормы.ТипОстатков.СписокВыбора = Новый СписокЗначений;
	ЭлементыФормы.ТипОстатков.СписокВыбора.Добавить(">",  "Положительные остатки");
	ЭлементыФормы.ТипОстатков.СписокВыбора.Добавить("<=", "Отрицательные и нулевые остатки");
	ЭлементыФормы.ТипОстатков.Значение = ЭлементыФормы.ТипОстатков.СписокВыбора[0].Значение;

	Состояние("Заполнение по умолчанию");

	ЗаполнитьНачальныеНастройки(Истина);
	ЗаполнитьПоРеквизитам();
	ОбновитьСписокФильтров();

КонецПроцедуры // ПередОткрытием()

// Устанавливает доступность реквизита "ТипОстатков"
//
// Параметры:
//  Нет.
//
Процедура ДоступностьЭлементовФормы()
	Если ЭлементыФормы.ВидОстатков.Значение = "НеУчитывать" Тогда
		ЭлементыФормы.ТипОстатков.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ТипОстатков.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры // ДоступностьЭлементовФормы()

// Процедура - обработчик события "ПриОткрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриОткрытии()
	Перем НоваяКолонка;

	Если ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Колонки.Найти("ПредставлениеЗначения") = Неопределено Тогда
		НоваяКолонка = ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Колонки.Добавить("ПредставлениеЗначения", "Множественный отбор");
		НоваяКолонка.Данные = "ПредставлениеЗначения";
	КонецЕсли;

	мКолонкиДанных.Код.Видимость     = мПоказыватьКод;
	мКолонкиДанных.Артикул.Видимость = мПоказыватьАртикул;
	мСклад                           = НачальноеЗначениеВыбора["Склад"];

	ДоступностьЭлементовФормы();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик выбора поля выбора "ВидОстатков"
//
// Параметры:
//  Нет.
//
Процедура ВидОстатковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Элемент.Значение = ВыбранноеЗначение;
	ДоступностьЭлементовФормы();
КонецПроцедуры // ВидОстатковОбработкаВыбора()

// Процедура - обработчик удаления строки таблицы фильтров отчета.
//
Процедура ТабличноеПолеСписокФильтровПередУдалением(Элемент, Отказ)

	ТаблицаЗначенияФильтров.Очистить();

КонецПроцедуры // ТабличноеПолеСписокФильтровПередУдалением()

// Процедура - обработчик активизации строки таблицы фильтров отчета.
//
Процедура ТабличноеПолеСписокФильтровПриАктивизацииСтроки(Элемент)

	Если Элемент.ТекущиеДанные <> Неопределено Тогда

		Если ПустаяСтрока(Элемент.ТекущиеДанные.ПредставлениеФильтра) Тогда
			Возврат;
		КонецЕсли;

		// Для фильтров по категориям используется дополнительный тип фильтра "Все из:"
		ЭтоКатегория = ?(Найти(Элемент.ТекущаяСтрока.ИмяФильтра, "Категория") > 0, Истина, Ложь);

		ЭлементВсеИз = ЭлементыФормы.ТипФильтра.СписокВыбора.НайтиПоЗначению("ВсеИз");
		
		Если ЭтоКатегория Тогда
			Если ЭлементВсеИз = Неопределено Тогда
				ЭлементыФормы.ТипФильтра.СписокВыбора.Вставить(1, "ВсеИз", "Все из:");
			КонецЕсли;
		Иначе
			Если ЭлементВсеИз <> Неопределено Тогда
				ЭлементыФормы.ТипФильтра.СписокВыбора.Удалить(ЭлементВсеИз);
			КонецЕсли;
		КонецЕсли;

		ЭлементыФормы.ТипФильтра.Значение=?(Не ПустаяСтрока(Элемент.ТекущиеДанные.ТипФильтра),Элемент.ТекущиеДанные.ТипФильтра,"ОдноИз");

	КонецЕсли;

	Если мФормаПодбораЗначенийФильтра <> Неопределено Тогда
		Если мФормаПодбораЗначенийФильтра.Открыта() Тогда
			мФормаПодбораЗначенийФильтра.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьТаблицуЗначенияФильтров();
	
	ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Колонки.Очистить();
	НоваяКолонка = ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Колонки.Добавить("ЗначениеФильтра");
	НоваяКолонка.Имя    = "ЗначениеФильтра";
	НоваяКолонка.Данные = "ЗначениеФильтра";

	НоваяКолонка.Видимость = Ложь;

	ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Колонки.Очистить();
	НоваяКолонка = ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Колонки.Добавить("ПредставлениеЗначения");
	НоваяКолонка.Имя    = "ПредставлениеЗначения";
	НоваяКолонка.Данные = "ПредставлениеЗначения";
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		НоваяКолонка.ТекстШапки = "Множественный отбор: "+ Элемент.ТекущиеДанные.ПредставлениеФильтра;
	Иначе
		НоваяКолонка.ТекстШапки = "Множественный отбор";
	КонецЕсли;

	НоваяКолонка.Ширина = 10;
	НоваяКолонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
	НоваяКолонка.ЭлементУправления.АвтоВыборНезаполненного	 = Истина;
	НоваяКолонка.ЭлементУправления.АвтоОтметкаНезаполненного = Ложь;
	НоваяКолонка.ЭлементУправления.ВыборНезаполненного		 = Истина;
	НоваяКолонка.ЭлементУправления.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриАктивизации;
	НоваяКолонка.ЭлементУправления.УстановитьДействие("НачалоВыбора", мДействиеТабличноеПолеЗначенияФильтровЗначениеФильтраНачалоВыбора);
	УстановитьФлагКнопкиВыбора(НоваяКолонка.ЭлементУправления);

	Попытка
		НоваяКолонка.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	Исключение

	КонецПопытки;

КонецПроцедуры // ТабличноеПолеСписокФильтровПриАктивизацииСтроки()

// Процедура - обработчик начала выбора значения в поле "Фильтр" строки таблицы фильтров отчета.
//
Процедура ТабличноеПолеСписокФильтровПредставлениеФильтраНачалоВыбора(Элемент, СтандартнаяОбработка)

	Форма = ПолучитьФорму("ФормаВыбора", ЭтаФорма, "дляФормаФильтра");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция выбора фильтра не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИсходнаяТаблица", "СписокФильтров");

	СтруктураСуществующиеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;

	Для Каждого Строка Из ТаблицаСписокФильтров Цикл

		Если ПустаяСтрока(Строка.ИмяФильтра) Тогда
			Продолжить;
		КонецЕсли;

		// Кроме этой строки
		Если ТаблицаСписокФильтров.Индекс(Строка) <> ТаблицаСписокФильтров.Индекс(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока) Тогда
			СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяФильтра);
		КонецЕсли;

	КонецЦикла;

	Если Не ПустаяСтрока(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущиеДанные.ИмяФильтра) Тогда
		СтруктураСуществующиеЗначения.Вставить(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущиеДанные.ИмяФильтра);
	КонецЕсли;

	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораФильтров = Форма;

КонецПроцедуры // ТабличноеПолеСписокФильтровПредставлениеФильтраНачалоВыбора()

// Процедура - обработчик выбора значения в поле "Значение фильтра" строки таблицы фильтров отчета.
//
Процедура ТабличноеПолеСписокФильтровЗначениеФильтраОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТаблицаЗначенияФильтров.Очистить();
	ТекСтр = ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока;
	ТекСтр.ЗначениеФильтра = ВыбранноеЗначение;
КонецПроцедуры // ТабличноеПолеСписокФильтровЗначениеФильтраОбработкаВыбора()

// Процедура - обработчик окончания ввода текста в поле "Значение фильтра" строки таблицы фильтров отчета.
//
Процедура ТабличноеПолеСписокФильтровЗначениеФильтраОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	Если ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущиеДанные.СписокФильтров.Количество() > 0 Тогда
		Значение = "<Задано множественным отбором>";
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры // ТабличноеПолеСписокФильтровЗначениеФильтраОкончаниеВводаТекста()

// Процедура - обработчик начала выбора значения в поле "Значение фильтра" строки таблицы фильтров отчета.
//
Процедура ТабличноеПолеСписокФильтровЗначениеФильтраНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ПустаяСтрока(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока.ПредставлениеФильтра) Тогда
		Предупреждение("Не выбран отбор!",60);
		СтандартнаяОбработка=Ложь;
		Возврат;
	КонецЕсли;

	Фильтр      = ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока;
	ТипыФильтра = Фильтр.СписокФильтров.Колонки.ЗначениеФильтра.ТипЗначения;
	МассивТипов = ТипыФильтра.Типы();

	Если МассивТипов.Количество() = 1 Тогда
		Если МассивТипов[0] = Тип("Число") Тогда
			Элемент.Значение = 0;
		ИначеЕсли МассивТипов[0] = Тип("Строка") Тогда
			Элемент.Значение = "";
		ИначеЕсли МассивТипов[0] = Тип("Булево") Тогда
			Элемент.Значение = Истина;
		Иначе
			Элемент.Значение = Новый(МассивТипов[0]);
		КонецЕсли;

		Элемент.ВыбиратьТип = Ложь;

		Если Фильтр.ИмяФильтра = "Родитель" Тогда
			Элемент.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		Иначе
			Элемент.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		КонецЕсли;
	Иначе
		Элемент.ОграничениеТипа = Фильтр.СписокФильтров.Колонки.ЗначениеФильтра.ТипЗначения;
		Элемент.ВыбиратьТип = Истина;
	КонецЕсли;

	// Определение владельца для поля вида подчиненный справочник
	Владелец = ОпределитьВладельца();
	Если Владелец <> Неопределено Тогда
		Элемент.ВыборПоВладельцу = Владелец;
	КонецЕсли;

КонецПроцедуры // ТабличноеПолеСписокФильтровЗначениеФильтраНачалоВыбора()

// Процедура - обработчик начала выбора значения фильтра в строке таблицы множественного отбора.
//
Процедура ТабличноеПолеЗначенияФильтровЗначениеФильтраНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ПустаяСтрока(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока.ПредставлениеФильтра) Тогда
		Предупреждение("Не выбран отбор!",60);
		СтандартнаяОбработка=Ложь;
		Возврат;
	КонецЕсли;

	Фильтр      = ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока;
	ТипыФильтра = Фильтр.СписокФильтров.Колонки.ЗначениеФильтра.ТипЗначения;
	МассивТипов = ТипыФильтра.Типы();

	Если МассивТипов.Количество() = 1 Тогда
		Если МассивТипов[0] = Тип("Число") Тогда
			Элемент.Значение = 0;
		ИначеЕсли МассивТипов[0] = Тип("Строка") Тогда
			Элемент.Значение = "";
		ИначеЕсли МассивТипов[0] = Тип("Булево") Тогда
			Элемент.Значение = Истина;
		Иначе
			Элемент.Значение = Новый(МассивТипов[0]);
		КонецЕсли;

		Элемент.ВыбиратьТип = Ложь;

		Если Фильтр.ИмяФильтра = "Родитель" Тогда
			Элемент.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		Иначе
			Элемент.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		КонецЕсли;
	Иначе
		Элемент.ОграничениеТипа = Фильтр.СписокФильтров.Колонки.ЗначениеФильтра.ТипЗначения;
		Элемент.ВыбиратьТип = Истина;
	КонецЕсли;

	// Определение владельца для поля вида подчиненный справочник
	Владелец = ОпределитьВладельца();
	Если Владелец <> Неопределено Тогда
		Элемент.ВыборПоВладельцу = Владелец;
	КонецЕсли;

КонецПроцедуры // ТабличноеПолеЗначенияФильтровЗначениеФильтраНачалоВыбора()

// Процедура - обработчик добавления строки таблицы множественного отбора.
//
Процедура ТабличноеПолеЗначенияФильтровПередНачаломДобавления(Элемент, Отказ, Копирование)

	Если ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока = Неопределено Тогда
		Предупреждение("Выберите отбор!", 30);
		Отказ = Истина;
	Иначе
		Если ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Колонки.ПредставлениеЗначения.ТекстШапки = "Множественный отбор" Тогда
			ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Колонки.ПредставлениеЗначения.ТекстШапки = "Множественный отбор: "
			+ ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока.ПредставлениеФильтра;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТабличноеПолеЗначенияФильтровПередНачаломДобавления()

// Процедура - обработчик начала изменения таблицы множественного отбора.
//
Процедура ТабличноеПолеЗначенияФильтровПередНачаломИзменения(Элемент, Отказ)

	ТекущийСписокФильтров = ЭлементыФормы.ТабличноеПолеСписокФильтров;

	Если ТекущийСписокФильтров.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ТабличноеПолеЗначенияФильтровПередНачаломИзменения()

// Процедура - обработчик удаления строки таблицы множественного отбора.
//
Процедура ТабличноеПолеЗначенияФильтровПередУдалением(Элемент, Отказ)
	Перем Фильтр, КопияСписокФильтров;

	УдаленоЗначение = Элемент.ТекущаяСтрока.ЗначениеФильтра;
	Фильтр = ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока;
	КопияСписокФильтров = Фильтр.СписокФильтров.Скопировать();
	НайденнаяСтрока = КопияСписокФильтров.Найти(УдаленоЗначение, "ЗначениеФильтра");
	КопияСписокФильтров.Удалить(НайденнаяСтрока);

	ОбновитьСтрокуСпискаФильтров(КопияСписокФильтров, Фильтр);

КонецПроцедуры // ТабличноеПолеЗначенияФильтровПередУдалением()

// Процедура - обработчик окончания редактирования строки таблицы множественного отбора.
//
Процедура ТабличноеПолеЗначенияФильтровПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Перем Фильтр, СписокФильтров;
	Перем ТекСтр;

	Если Не ОтменаРедактирования Тогда

		Если Не ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока.ИмяФильтра = "ДокументОтчета" Тогда
			ТекСтр = ЭлементыФормы.ТабличноеПолеЗначенияФильтров.ТекущаяСтрока;
			ТекСтр.ЗначениеФильтра       = ТекСтр.ПредставлениеЗначения;
			ТекСтр.ПредставлениеЗначения = "" + ТекСтр.ЗначениеФильтра;
		КонецЕсли;

		Фильтр = ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока;
		СписокФильтров = Фильтр.СписокФильтров;
		ОбновитьСтрокуСпискаФильтров(СписокФильтров, Фильтр);

	КонецЕсли; 

КонецПроцедуры // ТабличноеПолеЗначенияФильтровПриОкончанииРедактирования()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели 
// табличного поля "Отбор данных", вызывает сервисный механизм для
// подбора значений установленного фильтра в табличную часть "Отбор данных".
//
Процедура КоманднаяПанельЗначенияФильтровПодбор(Кнопка)
	Если ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущиеДанные = Неопределено Тогда
		Предупреждение("Выберите отбор!", 60);
		Возврат;
	КонецЕсли;

	Если мФормаПодбораЗначенийФильтра <> Неопределено Тогда
		Если мФормаПодбораЗначенийФильтра.Открыта() Тогда
			Предупреждение("Завершите предыдущий подбор!", 60);
			мФормаПодбораЗначенийФильтра.Активизировать();
			Возврат;
		КонецЕсли;
	КонецЕсли;

	НайдСтрФильтры = мТаблицаФильтры.Найти(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущиеДанные.ИмяФильтра, "ИмяПоля");

	Если НайдСтрФильтры <> Неопределено Тогда

		СписокТипов = Новый СписокЗначений;
		Для Каждого ЗначениеТипа Из НайдСтрФильтры.ОписаниеТипов.Типы() Цикл
			Если ЗначениеТипа = Тип("Строка")
			 Или ЗначениеТипа = Тип("Число")
			 Или ЗначениеТипа = Тип("Дата")
			 Или ЗначениеТипа = Тип("Булево") Тогда
			
			ИначеЕсли ЗначениеТипа = Тип("ДокументыМенеджер") Тогда
				Возврат;
			Иначе
				ПустоеЗначениеТипа = Новый(ЗначениеТипа);
				МетаданныеТипа = ПустоеЗначениеТипа.Метаданные();
				СписокТипов.Добавить(МетаданныеТипа, МетаданныеТипа.Представление());
			КонецЕсли;
		КонецЦикла;

		Если СписокТипов.Количество() = 0 Тогда 
			Возврат;
		ИначеЕсли СписокТипов.Количество() = 1 Тогда
			ВыбранныйЭлемент = СписокТипов[0];
		Иначе
			ВыбранныйЭлемент = СписокТипов.ВыбратьЭлемент("Выберите тип");
			Если ВыбранныйЭлемент = Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;

		МетаданныеТипа = ВыбранныйЭлемент.Значение;

		НайденаФорма = Ложь;

		Если Метаданные.Справочники.Найти(МетаданныеТипа.Имя) <> Неопределено Тогда
			мФормаПодбораЗначенийФильтра = Справочники[МетаданныеТипа.Имя].ПолучитьФормуВыбора(, ЭтаФорма);
			НайденаФорма = Истина;

			// Сразу установим специфические свойства формы списка справочника
			мФормаПодбораЗначенийФильтра.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
			Владелец = ОпределитьВладельца();
			Если Владелец <> Неопределено Тогда
				мФормаПодбораЗначенийФильтра.ПараметрОтборПоВладельцу = Владелец;
			КонецЕсли;
		ИначеЕсли Метаданные.Документы.Найти(МетаданныеТипа.Имя) <> Неопределено Тогда
			мФормаПодбораЗначенийФильтра = Документы[МетаданныеТипа.Имя].ПолучитьФормуВыбора(, ЭтаФорма);
			НайденаФорма = Истина;
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеТипа.Имя) <> Неопределено Тогда
			мФормаПодбораЗначенийФильтра = ПланыВидовХарактеристик[МетаданныеТипа.Имя].ПолучитьФормуВыбора(, ЭтаФорма);
			НайденаФорма = Истина;
		КонецЕсли;

		Если НайденаФорма Тогда
			мФормаПодбораЗначенийФильтра.РежимВыбора = Истина;
			мФормаПодбораЗначенийФильтра.ЗакрыватьПриВыборе = Ложь;
			мФормаПодбораЗначенийФильтра.Открыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельЗначенияФильтровПодбор()

// Установка пометки выбора для всех элементов таблицы данных
//
// Параметры:
//  Нет.
//
Процедура КнопкаВыбратьВсеНажатие()
	ТаблицаДанных.ЗаполнитьЗначения(Истина, "Пометка");
КонецПроцедуры // КнопкаВыбратьВсеНажатие()

// Снятие пометки выбора для всех элементов таблицы данных
//
// Параметры:
//  Нет.
//
Процедура КнопкаСнятьВсеНажатие()
	ТаблицаДанных.ЗаполнитьЗначения(Ложь, "Пометка");
КонецПроцедуры // КнопкаСнятьВсеНажатие()

// Обработчик нажатия кнопки "Выполнить"
// Выборка элементов справочника "Номенклатура" по установленному фильтру
//
// Параметры:
//  Нет.
//
Процедура КнопкаВыполнитьНажатие(Элемент)

	Если ЭлементыФормы.ПанельОбработки.ТекущаяСтраница.Имя = "Настройка" Тогда
		ВыполнитьЗапрос();
		ЭлементыФормы.ПанельОбработки.ТекущаяСтраница = ЭлементыФормы.ПанельОбработки.Страницы["Обработка"];
	Иначе
		ВыполнитьНажатие(Элемент);
	КонецЕсли;

КонецПроцедуры // КнопкаВыполнитьНажатие()

// процедура - обработчик выбора типа фильтра
//
Процедура ТипФильтраОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не (ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока = Неопределено) Тогда
		ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока.ТипФильтра = ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если Источник = мФормаВыбораФильтров Тогда

		Если ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока  = Неопределено Тогда
			Возврат;
		КонецЕсли;

		РедактируемаяСтрока = ТаблицаСписокФильтров[ТаблицаСписокФильтров.Индекс(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока)];

		Для Каждого Строка Из ЗначениеВыбора Цикл // должно содержать не более одной строки
			РедактируемаяСтрока.ИмяФильтра           = Строка.ИмяФильтра;
			РедактируемаяСтрока.ПредставлениеФильтра = Строка.ПредставлениеФильтра;
			РедактируемаяСтрока.ОписаниеФильтра      = Строка.ОписаниеФильтра;

			ТипыЗначения = Строка.ОписаниеТипов.Типы();

			// Если тип единичный, то присвоим пустое значение этого типа
			Если ТипыЗначения.Количество() = 1 Тогда
				РедактируемаяСтрока.ЗначениеФильтра = ПустоеЗначениеТипа(ТипыЗначения[0]);
			Иначе
				РедактируемаяСтрока.ЗначениеФильтра = Неопределено;
			КонецЕсли;
			РедактируемаяСтрока.СписокФильтров.Колонки.Очистить();
			РедактируемаяСтрока.СписокФильтров.Колонки.Добавить("ПредставлениеЗначения", мОписаниеТиповЗначенийФильтра, "Множественный отбор: "+Строка.ПредставлениеФильтра);
			РедактируемаяСтрока.СписокФильтров.Колонки.Добавить("ЗначениеФильтра",       Строка.ОписаниеТипов);

			ЭлементыФормы.ТипФильтра.Значение = "ОдноИз";
			РедактируемаяСтрока.ТипФильтра    = "ОдноИз";

			ОбновитьТаблицуЗначенияФильтров();

			ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Колонки.Очистить();

			НоваяКолонка = ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Колонки.Добавить("ПредставлениеЗначения");
			НоваяКолонка.Имя        = "ПредставлениеЗначения";
			НоваяКолонка.Данные     = "ПредставлениеЗначения";
			НоваяКолонка.ТекстШапки = "Множественный отбор: " + Строка.ПредставлениеФильтра;
			НоваяКолонка.Ширина     = 10;
			НоваяКолонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
			НоваяКолонка.ЭлементУправления.АвтоВыборНезаполненного   = Истина;
			НоваяКолонка.ЭлементУправления.АвтоОтметкаНезаполненного = Ложь;
			НоваяКолонка.ЭлементУправления.ВыборНезаполненного       = Истина;
			НоваяКолонка.ЭлементУправления.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриАктивизации;

			УстановитьФлагКнопкиВыбора( НоваяКолонка.ЭлементУправления);

			НоваяКолонка = ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Колонки.Добавить("ЗначениеФильтра");
			НоваяКолонка.Имя       = "ЗначениеФильтра";
			НоваяКолонка.Данные    = "ЗначениеФильтра";
			НоваяКолонка.Видимость = Ложь;

			Попытка
				НоваяКолонка.ЭлементУправления.ВыборГруппИЭлементов=ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
			Исключение

			КонецПопытки;

			// Для фильтров по категориям используется дополнительный тип фильтра "Все из:"
			ЭтоКатегория = ?(Найти(РедактируемаяСтрока.ИмяФильтра, "Категория") > 0, Истина, Ложь);

			ЭлементВсеИз = ЭлементыФормы.ТипФильтра.СписокВыбора.НайтиПоЗначению("ВсеИз");

			Если ЭтоКатегория Тогда
				Если ЭлементВсеИз = Неопределено Тогда
					ЭлементыФормы.ТипФильтра.СписокВыбора.Вставить(1, "ВсеИз", "Все из:");
				КонецЕсли;
			Иначе
				Если ЭлементВсеИз <> Неопределено Тогда
					ЭлементыФормы.ТипФильтра.СписокВыбора.Удалить(ЭлементВсеИз);
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	ИначеЕсли Источник = мФормаПодбораЗначенийФильтра Тогда

		Если ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущиеДанные  = Неопределено Тогда
			Возврат;
		ИначеЕсли Не ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Значение.Найти(ЗначениеВыбора) = Неопределено Тогда
			Возврат;
		КонецЕсли;

		НоваяСтрока = ЭлементыФормы.ТабличноеПолеЗначенияФильтров.Значение.Добавить();
		НоваяСтрока.ЗначениеФильтра       = ЗначениеВыбора;
		НоваяСтрока.ПредставлениеЗначения = "" + ЗначениеВыбора;
		ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущиеДанные.ЗначениеФильтра = "<Задано множественным отбором>";

		Фильтр = ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока;
		СписокФильтров = Фильтр.СписокФильтров;
		ОбновитьСтрокуСпискаФильтров(СписокФильтров, Фильтр);

	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - выполнить выбор.
//
Процедура ВыполнитьНажатие(Элемент)
	Перем НоваяСтрока;
	Перем ТабВыбора;

	ТабВыбора = Новый ТаблицаЗначений;
	ТабВыбора.Колонки.Добавить("Номенклатура",   СоздатьОписаниеТипа("СправочникСсылка.Номенклатура"));
	ТабВыбора.Колонки.Добавить("Характеристика", СоздатьОписаниеТипа("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТабВыбора.Колонки.Добавить("Остаток",        СоздатьОписаниеТипа("Число"));
	Для Каждого Строка Из ТаблицаДанных Цикл
		Если Строка.Пометка Тогда
			НоваяСтрока = ТабВыбора.Добавить();
			НоваяСтрока.Номенклатура   = Строка.Номенклатура;
			НоваяСтрока.Характеристика = Строка.Характеристика;
			НоваяСтрока.Остаток        = Строка.Остаток;
		КонецЕсли;
	КонецЦикла;

	ОповеститьОВыборе(ТабВыбора);

КонецПроцедуры // ВыполнитьНажатие(Элемент)

// Процедура - обработчик события "ПриСменеСтраницы" панели.
//
Процедура ПанельОбработкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элемент.ТекущаяСтраница.Имя = "Настройка" Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сформировать.Текст = "Сформировать";
	ИначеЕсли Элемент.ТекущаяСтраница.Имя = "Обработка" Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сформировать.Текст = "Выбрать";
	КонецЕсли;
КонецПроцедуры // ПанельОбработкиПриСменеСтраницы()

// Процедура - обработчик события "Очистка" реквизита "ВидОстатков".
//
Процедура ВидОстатковОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

// Процедура - обработчик события "Очистка" реквизита "ТипОстатков".
//
Процедура ТипОстатковОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" поля табличной части "ТабличноеПолеДанных".
//
Процедура ТабличноеПолеДанныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ПоказатьКодАртикул(мКолонкиДанных, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ТаблицаЗначенияФильтров.Колонки.Добавить("ПредставлениеЗначения", мОписаниеТиповЗначенийФильтра, "Множественный отбор");
ТаблицаЗначенияФильтров.Колонки.Добавить("ИмяФильтра",   мОписаниеТиповСтрока);

ТаблицаСписокФильтров.Колонки.Добавить("ИмяФильтра",     мОписаниеТиповСтрока);
ТаблицаСписокФильтров.Колонки.Добавить("ОписаниеФильтра");
ТаблицаСписокФильтров.Колонки.Добавить("СписокФильтров", мОписаниеТиповТаблицаЗначений);
ТаблицаСписокФильтров.Колонки.Добавить("ТипФильтра",     мОписаниеТиповСтрока);
ТаблицаСписокФильтров.Колонки.Добавить("ЗначениеФильтра");

мДействиеТабличноеПолеЗначенияФильтровЗначениеФильтраНачалоВыбора = Новый Действие("ТабличноеПолеЗначенияФильтровЗначениеФильтраНачалоВыбора");

мКолонкиДанных = ЭлементыФормы.ТабличноеПолеДанных.Колонки;
