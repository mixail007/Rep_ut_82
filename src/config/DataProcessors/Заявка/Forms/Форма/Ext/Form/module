//Перем ТабЗначений экспорт;
//Перем ПутьКФайлу экспорт;
//Перем ДопустимоеРазличиеСлов экспорт;
//Перем ТаблицаФормы экспорт;
//Перем РезультатыПоиска экспорт; 
////Перем СписокДляОтбора экспорт;
//Перем НоменклатураОтбор экспорт;
Перем ДатаД;
Перем ЕстьНерасп;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

процедура ВыгрузитьТабличнуюЧастьФормы(ТаблицаЗначений)
	Таблица = ЭлементыФормы.ТаблицаДокумента.Значение;
	Для й = 0 по Таблица.количество()-1 цикл
		найдено = Таблица.Получить(й).Распознано;
		если (найдено = "нет") тогда 
			Текущая = ТаблицаЗначений.добавить();
			Текущая.номенклатура = Таблица.Получить(й).номенклатура;
		конецесли;
	КонецЦикла 
	
конецпроцедуры 
Функция СравнитьСлова(Слово1, Слово2)
	ТаблицаБукв = Новый ТаблицаЗначений;
	СписокПозиций = Новый СписокЗначений;
	ТаблицаБукв.Колонки.Добавить("Позиция");
	ТаблицаБукв.Колонки.Добавить("КолвоПропущенных");
	ТаблицаБукв.Колонки.Добавить("ДлинаСлова");
	ТаблицаБукв.Колонки.Добавить("ПропущеноНа");
		
	ЕСли СтрДлина(Слово1)<=СтрДлина(Слово2) Тогда
		Слово = ВРЕГ(Слово1);
		ИскомоеСлово = ВРЕГ(Слово2);
	Иначе
		Слово = ВРЕГ(Слово2);
		ИскомоеСлово = ВРЕГ(Слово1);
	КонецЕсли;
	
	Для индекс = 1 по СтрДлина(Слово) Цикл
		Символ = Сред(Слово, индекс, 1);		
		ЕСли ТаблицаБукв.Количество() = 0 Тогда
			поз = Найти(ИскомоеСлово, Символ);
			поправка = 0;
			Пока поз>0 Цикл
				НовСтр = ТаблицаБукв.Добавить();
				НовСтр.Позиция = поз + поправка;
				НовСтр.ДлинаСлова = 1;
				НовСтр.КолвоПропущенных = 0;
				поправка = поправка + поз;
				поз = Найти(Сред(ИскомоеСлово, поправка+1), Символ);
			КонецЦикла;				
		Иначе
			Для Каждого Вхождение ИЗ ТаблицаБукв Цикл
				Если Сред(ИскомоеСлово, Вхождение.Позиция + Вхождение.ДлинаСлова, 1) = Символ Тогда
					Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
				ИначеЕсли Сред(Слово, Вхождение.Позиция + Вхождение.ДлинаСлова - Вхождение.КолвоПропущенных, 1) = Вхождение.ПропущеноНа Тогда
					Вхождение.ПропущеноНа = "";
					Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
					Если Сред(ИскомоеСлово, Вхождение.Позиция + Вхождение.ДлинаСлова, 1) = Символ Тогда
						Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
					Иначе
						Вхождение.КолвоПропущенных = Вхождение.КолвоПропущенных + 1;
					КонецЕсли;
				Иначе					
					ЕСли Окр((Вхождение.КолвоПропущенных + 1) / СтрДлина(ИскомоеСлово) * 100)<=ДопустимоеРазличиеСлов Тогда
						Вхождение.КолвоПропущенных = Вхождение.КолвоПропущенных + 1;
						Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
						Вхождение.ПропущеноНа = Символ;
					Иначе
						Вхождение.КолвоПропущенных = Вхождение.КолвоПропущенных + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;		
	КонецЦикла;
	
	ЕСли ТаблицаБукв.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	ТаблицаБукв.Сортировать("ДлинаСлова УБЫВ, КолвоПропущенных ВОЗР");
	
	СовпалоСимволов = ТаблицаБукв[0].ДлинаСлова - ТаблицаБукв[0].КолвоПропущенных;
	
	Возврат (Окр(СовпалоСимволов / СтрДлина(ИскомоеСлово) * 100) >= (100 - ДопустимоеРазличиеСлов));
		
КонецФункции

Функция ПроверитьСловаНаОтличие(СписокСлов1, СписокСлов2)
	СписокРазличающихсяСлов = Новый СписокЗначений;
	Для Каждого Слово1 ИЗ СписокСлов1 Цикл
		ЕстьПара = Ложь;
		Для Каждого Слово2 Из СписокСлов2 Цикл
			Если СравнитьСлова(Слово1.Значение, Слово2.Значение) Тогда
				ЕстьПара = Истина;
				СписокСлов2.Удалить(Слово2);
				Прервать;
			КонецЕсли;				
		КонецЦикла;
		ЕСли НЕ ЕстьПара Тогда
			СписокРазличающихсяСлов.Добавить(Слово1.Значение);
		КонецЕсли;
	КонецЦикла;	
	
	СписокСлов1 = СписокРазличающихсяСлов;
	
	Если СписокСлов1.Количество() = 0 И СписокСлов2.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция АнализРазличийВСловах(Список1, Список2, ПолныйСписок, ОдинаковыхСлов)
	//Если список1.количество()
	ДопустимоеРазличиеСлов = 70;
	Если Список1.Количество() = ПолныйСписок.Количество()
		 ИЛИ Список2.Количество() = ПолныйСписок.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПолныйСписок.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Список1.Количество() = Список2.Количество() Тогда
		ЕстьОтличия = ПроверитьСловаНаОтличие(Список1, Список2);
		ЕСли  НЕ ЕстьОтличия Тогда
			Возврат Ложь;
		КонецЕсли;			
	КонецЕсли;
	
	ЦелоеСлово = "";
	Для Каждого Слово ИЗ ПолныйСписок Цикл
		ЦелоеСлово = ЦелоеСлово + Слово.Значение;
	КонецЦикла;	
	Слово1 = "";
	Для Каждого Слово ИЗ Список1 Цикл
		Слово1 = Слово1 + Слово.Значение;
	КонецЦикла;
	Слово2 = "";
	Для Каждого Слово ИЗ Список2 Цикл
		Слово2 = Слово2 + Слово.Значение;
	КонецЦикла;
	
	Если Окр(СтрДлина(Слово1)/СтрДлина(ЦелоеСлово)*100) < ДопустимоеРазличиеСлов
		И Окр(СтрДлина(Слово2)/СтрДлина(ЦелоеСлово)*100) < ДопустимоеРазличиеСлов Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоБуква (Символ)
	
	Код = КодСимвола(Символ);
	Если (Код<=47) ИЛИ (Код>=58 И Код<=64) ИЛИ (Код>=91 И Код<=96)  ИЛИ (Код>=123 И Код<=126) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

Процедура ОбновитьКнопкуВыбораГруппы(КоличестваПоГруппам, ВсегоГрупп)
	
	КнопкаВыборГруппы = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы;
	КнопкаВыборГруппы.Кнопки.Очистить();
//	Для индекс = 1 по ВсегоГрупп Цикл
	Для Каждого СтрокаГруппы ИЗ КоличестваПоГруппам Цикл
				
		КнопкаВыборГруппы.Кнопки.Добавить("Группа"+СтрокаГруппы.НомерГруппы, 
									ТипКнопкиКоманднойПанели.Действие, 
									"Группа "+СтрокаГруппы.НомерГруппы+" ( " + СтрокаГруппы.Количество + " эл-тов )",
									Новый Действие("КоманднаяПанельНайденныеОбъектыВыборГруппы"));
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДоступностьЗаменыУдаления(Доступность)
	ЭлементыФормы.КоманднаяПанельНайденныеСсылки.Кнопки.ВыполнитьЗамену.Доступность = Доступность;
	ЭлементыФормы.КоманднаяПанельНайденныеСсылки.Кнопки.УдалитьЭлементы.Доступность = Доступность;
	ЕСли Доступность Тогда
		ЭлементыФормы.КоманднаяПанельНайденныеСсылки.Кнопки.ВыполнитьЗамену.Подсказка = "Выполнить замену";
		ЭлементыФормы.КоманднаяПанельНайденныеСсылки.Кнопки.УдалитьЭлементы.Подсказка = "Удалить элементы";		
	Иначе		
		ЭлементыФормы.КоманднаяПанельНайденныеСсылки.Кнопки.ВыполнитьЗамену.Подсказка = "Поиск ссылок не производился";		
		ЭлементыФормы.КоманднаяПанельНайденныеСсылки.Кнопки.УдалитьЭлементы.Подсказка = "Поиск ссылок не производился";
	КонецЕсли;		
КонецПроцедуры

//Процедура НайтиПоСовпадающимСловам(ТаблицаОтбора)
Процедура НайтиПоСовпадающимСловам()
	
	//мФормаИндикации.НаименованиеОбработкиДанных = "Поиск элементов";
	//мФормаИндикации.КомментарийОбработкиДанных  = "Получение элементов справочника";
	//мФормаИндикации.КомментарийЗначения         = "Выполнено:";
	//мФормаИндикации.ВладелецФормы = ЭтаФорма;
	//мФормаИндикации.Открыть();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ Ссылка,
	|Представление,
	|наименование КАК ЗначениеРеквизита 
	|Из Справочник.номенклатура КАК Спр
	|ГДЕ НЕ Спр.ЭтоГруппа и сПР.ПОМЕТКАУДАЛЕНИЯ = ЛОЖЬ
	|УПОРЯДОЧИТЬ ПО Наименование
	|";
	
	//МетаданныеОбъекта = Метаданные.Справочники[ПолучитьЗначениеНастройки("Вид справочника")];
	//Если МетаданныеОбъекта.Иерархический Тогда
		СуффиксИерархии = "НЕ Спр.ЭтоГруппа";
	//Иначе
	//	СуффиксИерархии = "";
	//КонецЕсли;
	

	//Если ТаблицаОтбора.Количество()>0 Тогда
	//	УсловиеГДЕ = "";
	//	Для Каждого Отбор ИЗ ТаблицаОтбора Цикл
	//		МетаданныеРеквизитаОтбора = МетаданныеОбъекта.Реквизиты.Найти(Отбор.Ключ);
	//		ЕСли МетаданныеРеквизитаОтбора = Неопределено 
	//		 ИЛИ НЕ (МетаданныеРеквизитаОтбора.Тип.СодержитТип(Тип("Строка")) И МетаданныеРеквизитаОтбора.Тип.КвалификаторыСтроки.Длина = 0) Тогда			
	//			УсловиеГДЕ = УсловиеГДЕ + ?(УсловиеГДЕ="", "", " И") +"
	//			| Спр."+Отбор.Ключ + Отбор.Сравнение + "&" + Отбор.Ключ + ?(Найти(Отбор.Сравнение, "(") > 0, ")", "");
	//		Иначе
	//			УсловиеГДЕ = УсловиеГДЕ + ?(УсловиеГДЕ="", "", " И") +"
	//			| ВЫРАЗИТЬ (Спр."+Отбор.Ключ + " КАК Строка(300))" + Отбор.Сравнение + "&" + Отбор.Ключ + ?(Найти(Отбор.Сравнение, "(") > 0, ")", "");
	//		КонецЕсли;
	//			
	//		Запрос.УстановитьПараметр(Отбор.Ключ, Отбор.Значение);
	//	КонецЦикла;
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ " + ?(СуффиксИерархии = "", "", СуффиксИерархии + " И ") + УсловиеГДЕ);
	//Иначе
		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", ?(СуффиксИерархии = "", "", "ГДЕ "+СуффиксИерархии));
	//КонецЕсли;
	
	// Запрос выводит таблицу из 3х колонок и множества строк
	// Колонки запроса:
	// Ссылка, представление, значение реквизита. 
	// -------------------------------------------------------------
	// Ссылка - это ссылка на элемент справочника
	// Представление - это представление элемента
	// Значение реквизита - это значение нужного реквизита элемента 
	ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСлов = Новый ТаблицаЗначений;
	ТаблицаСлов.Колонки.Добавить("Ссылка");
	ТаблицаСлов.Колонки.Добавить("Представление");
	ТаблицаСлов.Колонки.Добавить("ЗначениеРеквизита");
	ТаблицаСлов.Колонки.Добавить("СписокСлов");
	
	СписокСлов = Новый СписокЗначений;
	
	//мФормаИндикации.КомментарийОбработкиДанных = "Разбивка значения на отдельные слова";
	//мФормаИндикации.МаксимальноеЗначение = ТаблицаСправочника.Количество();
	
	// Формирование таблицы слов
	// Производится следующим образом:
	// создается таблица слов. Колонки:
	// ссылка, представление, ЗначениеРеквизита, СписокСлов 
	// Идет цикл по всем строкам запроса 
	// ---------------------------------------
	// Все слова текущей строки из значения реквизита записываются в список слов
	// список слов копируется в текущую строку
	// ----------------------------------------
	// Таким образом получается таблица, как запрос, только с добавленной колонкой "Список слов"
	
	
	// Сформируем такую же таблицу слов
	Для Каждого СтрокаСсылки ИЗ ТаблицаСправочника Цикл
	//	мФормаИндикации.Значение = ТаблицаСправочника.Индекс(СтрокаСсылки)+1;
		ЗначениеРеквизита = СтрокаСсылки.ЗначениеРеквизита;
		СписокСлов.Очистить();
		Слово = "";
		Для индекс = 1 по СтрДлина(ЗначениеРеквизита) Цикл
			Символ = Сред(ЗначениеРеквизита, индекс, 1);
			Если ЭтоБуква(Символ) Тогда
				Слово = Слово + Символ;
			Иначе
				Если Слово<>"" Тогда
				СписокСлов.Добавить(ВРЕГ(Слово));
				Слово = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Слово<>"" Тогда
			СписокСлов.Добавить(ВРЕГ(Слово));		
		КонецЕсли;
		
		СписокСлов.СортироватьПоЗначению();
		НовСтр = ТаблицаСлов.Добавить();
		НовСтр.Ссылка =  СтрокаСсылки.Ссылка;
		НовСтр.Представление =  СтрокаСсылки.Представление;
		НовСтр.ЗначениеРеквизита = ЗначениеРеквизита;
		НовСтр.СписокСлов = СписокСлов.Скопировать();						
	КонецЦикла;
	
	
	
	// Получили таблицу слов всего справочника номенклатуры
	// *****************************************
	// *****************************************
	// *****************************************
	// *****************************************
		
	//мФормаИндикации.КомментарийОбработкиДанных = "Выполняется анализ значений реквизита";
	//мФормаИндикации.Значение = 0;
	//мФормаИндикации.МаксимальноеЗначение = ТаблицаСлов.Количество();
	
	ТаблицаСправочника = 0;
	
	
	// Создается таблица "результаты поиска"
	мРезультатыПоиска = Новый ТаблицаЗначений;
	мРезультатыПоиска.Колонки.Добавить("Ссылка");
	мРезультатыПоиска.Колонки.Добавить("Представление");
	мРезультатыПоиска.Колонки.Добавить("ЗначениеРеквизита");
	мРезультатыПоиска.Колонки.Добавить("НомерГруппы");
	мРезультатыПоиска.Колонки.Добавить("НомерСтроки");
	//Если МетаданныеОбъекта.Иерархический Тогда
	//	мРезультатыПоиска.Колонки.Добавить("ЭтоГруппа");
	//КонецЕсли;
	/////////////////////////////////////
	
	ТекущаяГруппа = 0;
	
	// Сформируем таблицу сравнения 
	ТаблицаСлов1 = Новый ТаблицаЗначений;
	ТаблицаСлов1.Колонки.Добавить("Ссылка");
	ТаблицаСлов1.Колонки.Добавить("Представление");
	ТаблицаСлов1.Колонки.Добавить("ЗначениеРеквизита");
	ТаблицаСлов1.Колонки.Добавить("СписокСлов");
	/////////////////////////////////////
	/////////////////////////////////////
	/////////////////////////////////////
	/////////////////////////////////////
	/////////////////////////////////////
	/////////////////////////////////////
	/////////////////////////////////////
	/////////////////////////////////////
	/////////////////////////////////////
	/////////////////////////////////////
	/////////////////////////////////////
	/////////////////////////////////////
	/////////////////////////////////////
	/////////////////////////////////////
	/////////////////////////////////////
	ТаблицаФормы = новый ТаблицаЗначений;
	ТаблицаФормы.Колонки.Добавить("Ссылка");
	ТаблицаФормы.Колонки.Добавить("Номенклатура");
	ТаблицаФормы.Колонки.Добавить("СписокСлов");
	
	ВыгрузитьТабличнуюЧастьФормы(ТаблицаФормы);
	
	Для Каждого СтрокаСсылки ИЗ ТаблицаФормы Цикл
	//	мФормаИндикации.Значение = ТаблицаСправочника.Индекс(СтрокаСсылки)+1;
		ЗначениеРеквизита = СтрокаСсылки.Номенклатура;
		СписокСлов.Очистить();
		Слово = "";
		Для индекс = 1 по СтрДлина(ЗначениеРеквизита) Цикл
			Символ = Сред(ЗначениеРеквизита, индекс, 1);
			Если ЭтоБуква(Символ) Тогда
				Слово = Слово + Символ;
			Иначе
				Если Слово<>"" Тогда
				СписокСлов.Добавить(ВРЕГ(Слово));                           
				Слово = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Слово<>"" Тогда
			СписокСлов.Добавить(ВРЕГ(Слово));		
		КонецЕсли;
		
		СписокСлов.СортироватьПоЗначению();
		НовСтр = ТаблицаСлов1.Добавить();
		НовСтр.Ссылка =  СтрокаСсылки.Ссылка;
		НовСтр.Представление =  ЗначениеРеквизита;
		НовСтр.ЗначениеРеквизита = ЗначениеРеквизита;
		НовСтр.СписокСлов = СписокСлов.Скопировать();						
	КонецЦикла;

	// Цикл по первой таблице слов
	
	// Таблица слов содержит 
	// только реквизиты
	// и список слов
	
	
	
	// Первый цикл  идет по таблице слов формы 
	/////
	Пока ТаблицаСлов1.Количество() > 0 Цикл
		//мФормаИндикации.Значение = мФормаИндикации.МаксимальноеЗначение - ТаблицаСлов.Количество();
		
		ОбработкаПрерыванияПользователя();
		
		ТекущаяГруппа = ТекущаяГруппа + 1;
		КоличествоСтрок = ТаблицаСлов.Количество();
		СписокСтрок = Новый СписокЗначений;
		
		// Обрабатываемая строка - это строка из таблицы слов формы. 
		ОбрабатываемаяСтрока = ТаблицаСлов1[0];
		
		// Строка добавляется в список строк. 
		СписокСтрок.Добавить(ОбрабатываемаяСтрока);
		// И формируется текущий список слов
		ТекущийСписокСлов = ОбрабатываемаяСтрока.СписокСлов.Скопировать();
		
		// Обрабатываемая строка - это текущая строка таблицы слов (верхняя строка, т.к. строки из нее 
		// 				   постоянно удаляются)
		// 
		// СписокСтрок - добавляется обрабатываемая строка
		// Текущий список слов - список слов из обрабатываемой строки
		// 
		
		// Цикл по всей таблице слов номенклатуры
		Для индекс = 1 по КоличествоСтрок-1 Цикл	
		// Строка сравнения из слов номенклатуры	
			СтрокаСравнения = ТаблицаСлов[индекс];	
			СписокСловСравнения = СтрокаСравнения.СписокСлов.Скопировать();
			СписокНеНайденных = Новый СписокЗначений;
		// строка сравнения - строка таблицы слов, отличающаяся от обрабатываемой
	
			// Анализ на одинаковые слова 
			// Список слов сравнения - список слов из строки сравнения
			
			// Проверим слова из текущей строки формы на совпадения с справочником номенклатуры
			ОдинаковыхСлов = 0;
			Для Каждого Слово Из ТекущийСписокСлов Цикл
				ЭлементСпискаСравнения = СписокСловСравнения.НайтиПоЗначению(Слово.Значение);
				Если ЭлементСпискаСравнения = Неопределено Тогда
					СписокНеНайденных.Добавить(Слово.Значение);
				Иначе
					СписокСловСравнения.Удалить(ЭлементСпискаСравнения);
					ОдинаковыхСлов = ОдинаковыхСлов + 1;
				КонецЕсли;
			КонецЦикла;
		// Берутся слова из списка слов текущей (обрабатываемой) строки 	
		// Если он найден в строке сравнения, то - слово удаляется из списка слов сравнения
		// Если не найден, то добавляется в список не найденных
		// Выводится количество одинаковых слов. 
		// 
		
		// Далее - делается анализ различий в словах, если есть хотя бы несколько совпадающих слов
		///////// 
		/////////
					
			Если СписокНеНайденных.Количество()=0 И СписокСловСравнения.Количество()=0 Тогда
				ЕстьОтличия = Ложь;
			Иначе
				ЕСли ОдинаковыхСлов>0 Тогда
					ЕстьОтличия = АнализРазличийВСловах(СписокНеНайденных, СписокСловСравнения, ТекущийСписокСлов, ОдинаковыхСлов);
				Иначе
					ЕстьОтличия = Истина;
				КонецЕсли;
			КонецЕсли;
			
		// Если нет отличий, тогда добавляем строку сравнения в список строк
			Если НЕ ЕстьОтличия Тогда
				СписокСтрок.Добавить(СтрокаСравнения);
			КонецЕсли;
			
		// В список строк загоняем строку сравнения только тогда, когда 
	    // нет отличий или Анализ различий в словах выявил совпадения !!!!
		
		////////////////////////
		// получаем строку сравнения, в которой будет запись из таблицы слов номенклатуры 
		// эту строку, далее, надо удалить из таблицы слов номенклатуры 
			
		//////////// Итого - в списке строк будет обрабатываемая строка + строки из оставшихся в таблице слов, которые
		//////////// совпадут с обрабатываемой строкой. 
		КонецЦикла;
		
		
		// получаем список совпавших строк
		Для Каждого СтрокаИзСписка ИЗ СписокСтрок Цикл
			Если СписокСтрок.Количество() > 1 Тогда
				СтрокаРезультата = мРезультатыПоиска.Добавить();
				СтрокаРезультата.ЗначениеРеквизита = СтрокаИзСписка.Значение.ЗначениеРеквизита;
				СтрокаРезультата.Представление = СтрокаИзСписка.Значение.Представление;
				СтрокаРезультата.Ссылка = СтрокаИзСписка.Значение.Ссылка;
				СтрокаРезультата.НомерГруппы =  - ТекущаяГруппа;
			Иначе
				ТекущаяГруппа = ТекущаяГруппа - 1;
			КонецЕсли;
		КонецЦикла;	
		
		// формируем список результата 
		// Если в списке строк, кроме первой строки есть еще строки - загоняем все это дело в 
		// результат поиска
		
		
		//////////////
		//////////////// Результаты поиска - добавляются строки из списка строк
		//////////////// Удаляются 
		//////////////// Формируется таблица мРезультаты
		//////////////// в которой прописывается строка поиска 
		
		//////////
		//////////
		//////////
		//////////
		//////////
		//////////
		//////////
		ТаблицаСлов1.Удалить(0);
	КонецЦикла;
	
	
	РезультатыПоиска = мРезультатыПоиска.Скопировать();

	//мФормаИндикации.КомментарийОбработкиДанных = "Обработка результатов";
		
	//Если мРезультатыПоиска.Количество() > 0 Тогда
	//	
	//	// Результаты есть 
	//	
	//	Если мРезультатыПоиска.Колонки.Найти("ЭтоГруппа") <> Неопределено Тогда
	//		мРезультатыПоиска.ЗаполнитьЗначения(Ложь, "ЭтоГруппа");
	//	КонецЕсли;
	//	
	//	КоличестваПоГруппам = Новый ТаблицаЗначений;
	//	КоличестваПоГруппам.Колонки.Добавить("НомерГруппы");
	//	КоличестваПоГруппам.Колонки.Добавить("Количество");	
	//	мРезультатыПоиска.Сортировать("НомерГруппы УБЫВ");
	//	
	//	
	//	СтруктураПоиска = Новый Структура;
	//	ВсегоГрупп =  - мРезультатыПоиска[мРезультатыПоиска.Количество()-1].НомерГруппы;
	//	Для индекс = 1 по ВсегоГрупп Цикл
	//		СтруктураПоиска.Вставить("НомерГруппы",  - индекс);
	//		МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
	//		СтрокаГруппы = КоличестваПоГруппам.Добавить();
	//		СтрокаГруппы.НомерГруппы  = индекс;
	//		СтрокаГруппы.Количество = МассивСтрок.Количество();		
	//	КонецЦикла;
	//	
	//	ТекущаяГруппа = 1;
	//	КоличестваПоГруппам.Сортировать("Количество УБЫВ");
	//	Для Каждого СтрокаГруппы ИЗ КоличестваПоГруппам Цикл
	//		СтруктураПоиска.Вставить("НомерГруппы",  - СтрокаГруппы.НомерГруппы);
	//		МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
	//		Для Каждого СтрокаРезультата ИЗ МассивСтрок Цикл
	//			СтрокаРезультата.НомерГруппы = ТекущаяГруппа;
	//		КонецЦикла;
	//		СтрокаГруппы.НомерГруппы = ТекущаяГруппа;
	//		ТекущаяГруппа = ТекущаяГруппа + 1;
	//	КонецЦикла;
	//			
	//	
	//	ОбновитьКнопкуВыбораГруппы(КоличестваПоГруппам, КоличестваПоГруппам.Количество());
	//		
	//	Если мРезультатыПоиска.Количество() > 0 Тогда
	//		ВывестиГруппу(1);			
	//	КонецЕсли;
	//	
	//КонецЕсли;

	//мФормаИндикации.Закрыть();

КонецПроцедуры

// Получает таблицу значений, в которой будет отображение строк экселевского файла
функция ПолучитьТаблицуЗначений(Таблица, Путь, дата)
	фл = истина;
	Попытка 
		Эксел = ПолучитьCOMОбъект(Путь);	
	исключение 
		предупреждение("Неудачная попытка открытия файла.");		
		фл = ложь;
	КонецПопытки;
 	Лист = Эксел.ActiveSheet;
	Дата = Лист.cells(1,1).text;
	й = 2;
	Пока истина Цикл
		Номер = Лист.cells(й,1).text; 
		Номенклатура = Лист.cells(й,2).text;
		Количество   = Лист.cells(й,3).text;
		Цена	     = Лист.cells(й,4).text; //+++
		если (Количество="") или (количество=неопределено) тогда прервать; конецесли;
	// Добавляем строку	
		строка = таблица.добавить();
		строка.номерСтроки = й-1;
		строка.номер = Номер;
		строка.номенклатура = номенклатура;
		строка.Количество = количество;
		строка.цена = цена;
		й = й + 1;
	КонецЦикла; 	
	возврат фл;	
КонецФункции

Процедура ЗаполнитьТабличноеПоле(Путь)
	// Вставить содержимое обработчика.
	КС = Новый КвалификаторыСтроки(255);
    Массив = Новый Массив;
	ДатаДокумента = 0;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
    ТабЗначений = новый таблицазначений;  
	Массив.Очистить();
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповН = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , КС);
	ТабЗначений = новый таблицазначений;
	ТабЗначений.колонки.Добавить("Номер",ОписаниеТиповС);
	ТабЗначений.колонки.Добавить("Номенклатура",ОписаниеТиповН);
	ТабЗначений.колонки.Добавить("Количество",ОписаниеТиповЧ);	
	ТабЗначений.колонки.Добавить("Цена",ОписаниеТиповЧ);	   //+++
	ТабЗначений.колонки.Добавить("НомерСтроки",ОписаниеТиповЧ);	   //+++

	если (ПолучитьТаблицуЗначений(ТабЗначений,Путь, ДатаДокумента)=истина) 
	тогда 	
	// Таблицу получили...	
	// Вставляем ее в табличный документ
	справном = справочники.Номенклатура;
	цвет = новый цвет(255,0,0);
	Для й = 0 по ТабЗначений.количество()-1 цикл
		ЭлементыФормы.ТаблицаДокумента.ДобавитьСтроку();
		строкатаб = ТабЗначений.Получить(й);
		эл = справном.найтипокоду(сокрлп(строкатаб.номер));
		если ((эл=справном.ПустаяСсылка()) или (эл = неопределено) или эл.ЭтоГруппа) 
		Тогда 
		
			ЭлементыФормы.ТаблицаДокумента.ТекущаяСтрока.НомерСтроки = строкатаб.номерСтроки;

			ЭлементыФормы.ТаблицаДокумента.ТекущаяСтрока.номер = строкатаб.номер;
			ЭлементыФормы.ТаблицаДокумента.ТекущаяСтрока.номенклатура = строкатаб.номенклатура;
			ЭлементыФормы.ТаблицаДокумента.ТекущаяСтрока.количество = строкатаб.количество;
			ЭлементыФормы.ТаблицаДокумента.ТекущаяСтрока.цена = строкатаб.Цена; //+++
			ЭлементыФормы.ТаблицаДокумента.ТекущаяСтрока.распознано = "нет";
			ЕстьНерасп = истина;
		иначе 
			ЭлементыФормы.ТаблицаДокумента.ТекущаяСтрока.НомерСтроки = строкатаб.номерСтроки;
			ЭлементыФормы.ТаблицаДокумента.ТекущаяСтрока.номер = строкатаб.номер;
			//ЭлементыФормы.ТаблицаДокумента.ТекущаяСтрока.номенклатура = Эл.наименование;
			ЭлементыФормы.ТаблицаДокумента.ТекущаяСтрока.Номенклатура = Эл;
			
			ЭлементыФормы.ТаблицаДокумента.ТекущаяСтрока.количество = строкатаб.количество;
			ЭлементыФормы.ТаблицаДокумента.ТекущаяСтрока.Цена = строкатаб.Цена;
			ЭлементыФормы.ТаблицаДокумента.ТекущаяСтрока.распознано = "да";			
		КонецЕсли;	
	КонецЦикла;
	ЭлементыФормы.ДатаДок.Значение = ?(ДатаДокумента=неопределено или ДатаДокумента="",текущаядата(),ДатаДокумента);
	ДатаД = ДатаДокумента;
	Иначе 
		предупреждение("Не удалось прочитать файл");
	КонецЕсли;
КонецПроцедуры

Процедура ДиалогФайлаНажатие()
	
	Если ТаблицаДокумента.Количество()>0 тогда
			Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "ru = ""Таблица товаров НЕ пустая!
					   |Очистить таблицу перед загрузкой из Excel?"";"
		     + " en = ""Do you want to continue?""";
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
				ТаблицаДокумента.Очистить();
		//ЭлементыФормы.ТаблицаДокумента.Значение.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "Excel (*.xls)|*.xls"; 
	ДиалогВыбораФайла.Заголовок = "Выберите файл с исходными данными";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Истина;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ЗаполнитьТабличноеПоле(ДиалогВыбораФайла.ПолноеИмяФайла);
	КонецЕсли;
	ЭлементыФормы.Файл.значение = ДиалогВыбораФайла.ПолноеИмяФайла;
КонецПроцедуры

Функция НайтиСтроку(строка)
	индекс = -1;
	Таблица = ЭлементыФормы.ТаблицаДокумента.Значение;
	Для й = 0 по Таблица.количество()-1 цикл
		ном = сокрлп(Таблица.Получить(й).номенклатура);
		если (ном = сокрлп(строка)) тогда 
			индекс = й;
			прервать;
		конецесли;
	КонецЦикла;
	Возврат индекс;
конецфункции

Процедура РаспознаваниеНажатие(Элемент)
	// Вставить содержимое обработчика.
	
	если (естьнерасп) тогда 
	
	НайтиПоСовпадающимСловам();	
	й = 0; 
	Список = новый списокзначений;
	Пока й < РезультатыПоиска.Количество()-1 цикл
		Стр = РезультатыПоиска.Получить(й);
		ТекущаяГруппа = стр.номергруппы;
		Индекс = НайтиСтроку(стр.значениереквизита);
		Пока (ТекущаяГруппа = Стр.НомерГруппы) и (й<РезультатыПоиска.Количество()-1) Цикл
		//// Все значения - в соответствующий список
			если (индекс <> -1) Тогда 
				знсп = ЭлементыФормы.ТаблицаДокумента.Значение.Получить(индекс);
		    конецесли;                                          
		// Итерация                                      
			й = й + 1;                      
			Стр = РезультатыПоиска.Получить(й);
		КонецЦикла; 
	//	если (ТекущаяГруппа <> Стр.НомерГруппы) тогда й = й - 1; конецесли;
	//	Стр = РезультатыПоиска.Получить(й);
	 //   й = й + 1;
	конеццикла;

	
	предупреждение("Распознавание закончено. Выберите нужные элементы из списка");
	конецесли;
КонецПроцедуры      

Процедура СформироватьНажатие(Элемент)
	
	Если структуранастроек<>неопределено тогда
	попытка 
		Если (структуранастроек.получить("ТипЦен")=Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка()) или (структуранастроек.получить("ТипЦен")=неопределено) тогда 
			сообщить("Тип цен не заполнен. Нажмите кнопку настройки и поставьте нужный тип цен.");
			возврат;
		конецесли;
		
		Если (структуранастроек.получить("Контрагент")=Справочники.Контрагенты.ПустаяСсылка()) или (структуранастроек.получить("Контрагент")=неопределено) тогда 
			сообщить("Контрагент не заполнен. Нажмите кнопку настройки и поставьте нужного контрагента.");
			возврат;
		конецесли;
		
		Если (структуранастроек.получить("Организация")=Справочники.Организации.ПустаяСсылка()) или (структуранастроек.получить("Организация")=неопределено) тогда 
			сообщить("Организация не заполнена. Нажмите кнопку настройки и поставьте нужную организацию.");
			возврат;
		конецесли;
	
		Если (структуранастроек.получить("Склад")=Справочники.Склады.ПустаяСсылка()) или (структуранастроек.получить("Склад")=неопределено) тогда 
			сообщить("Склад не заполнен. Нажмите кнопку настройки и поставьте нужный склад.");
			возврат;
		конецесли;
		
		Если (структуранастроек.получить("Валюта")=Справочники.Валюты.ПустаяСсылка()) или (структуранастроек.получить("Валюта")=неопределено) тогда 
			сообщить("Валюта не заполнена. Нажмите кнопку настройки и поставьте нужную валюту.");
			возврат;
		конецесли;
		
	исключение
		сообщить("Не заполнены настройки. Нажмите кнопку <настройка> и заполните их.");
		возврат;
	конецпопытки;
КонецЕсли;

	флесть = ложь;
	докесть = ложь;
	Для й = 0 по Элементыформы.ТаблицаДокумента.Значение.Количество()-1 цикл
		строка = элементыформы.ТаблицаДокумента.Значение.Получить(й);
		если (строка.распознано = "нет") тогда флесть = истина; конецесли;	 
	конеццикла;
	
	если (ТаблицаДокумента.Количество()>0) тогда 
	если (не флесть) тогда
		если (СтруктураЗаказаПоставщикам=NULL или СтруктураЗаказаПоставщикам=неопределено) тогда	
			НовыйДок = Документы.ЗаказПоставщику.СоздатьДокумент();
			НовыйДок.Дата =?(ДатаДок=неопределено или ДатаДок = "" или ДатаДок='0001-01-01',текущаядата(),ДатаДок);				 
		иначе 	
		попытка 	
			НовыйДок = СтруктураЗаказаПоставщикам;
			//НовыйДок.Дата =?(ДатаД=неопределено или ДатаД = "",текущаядата(),ДатаД);	
			докЕсть = истина;
		исключение 
			НовыйДок = Документы.ЗаказПоставщику.СоздатьДокумент();
			НовыйДок.Дата =?(ДатаДок=неопределено или ДатаДок = "" или ДатаДок='0001-01-01',текущаядата(),ДатаДок);	
			
			НовыйДок.УчитыватьНДС     = истина;
			НовыйДок.СуммаВключаетНДС = истина;
			
		конецпопытки;
	конецесли;
	
	ДатаД =?(ДатаДок=неопределено или ДатаДок = "" или ДатаДок='0001-01-01',текущаядата(),ДатаДок);				 
	
	//Если (НовыйДок<>неопределено и НовыйДок<>Документы.ЗаказПоставщику.ПустаяСсылка())
	Если (НовыйДок<>Документы.ЗаказПоставщику.ПустаяСсылка())
	тогда 
	
	// Само формирование документа !!!!
	если (структуранастроек <> неопределено) Тогда
		Контр								= структуранастроек.получить("Контрагент");	
		НовыЙДок.Организация 				= структуранастроек.получить("Организация"); 
		НовыйДок.ВалютаДокумента 			= структуранастроек.получить("Валюта");
		НовыйДок.Контрагент 				= структуранастроек.получить("Контрагент");
		НовыйДок.Склад 						= структуранастроек.получить("Склад");		
		НовыйДок.ТипЦен 					= структуранастроек.получить("ТипЦен");
		НовыйДок.ДоговорКонтрагента			= Контр.ОсновнойДоговорКонтрагента;
		НовыйДок.КурсВзаиморасчетов			= 1;
		НовыйДок.КратностьВзаиморасчетов 	= 1
	конецесли;
	регцены = регистрысведений.ЦеныНоменклатуры;
		ТаблЧасть = НовыйДок.Товары;
		Если (ДокЕсть) тогда ТаблЧасть.Очистить(); конецесли;
		отбор = новый структура;
		Для й = 0 по ЭлементыФормы.ТаблицаДокумента.Значение.Количество()-1 цикл
			строкаф = ЭлементыФормы.ТаблицаДокумента.Значение.Получить(й);
			ном = справочники.Номенклатура.НайтиПоКоду(строкаф.номер);
			строка = ТаблЧасть.Добавить();	
			ЗаполнитьЗначенияСвойств(строка, строкаф);
			//строка.номенклатура = справочники.Номенклатура.НайтиПоКоду(строкаф.номер); 
			//строка.количество = строкаф.количество;
			//отбор.Вставить("Номенклатура",справочники.Номенклатура.НайтиПоКоду(строкаф.номер));
			
			строка.ЕдиницаИзмерения = строка.Номенклатура.ЕдиницаХраненияОстатков; 
			строка.коэффициент = 1;
			//+++ сразу рассчитаем сумму и сумму НДС (вкл.)
			строка.Сумма    = строка.Количество * строка.Цена;
			строка.СтавкаНДС= перечисления.СтавкиНДС.НДС18;
			строка.СуммаНДС = Окр(строка.Сумма*18/118, 2); 
			
			Если НовыйДок.ТипЦен<>Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка() тогда 
				отбор.Очистить();
				Если ЗначениеЗаполнено(НовыйДок.ТипЦен.ТипЦеныНоменклатуры) тогда
				отбор.Вставить("ТипЦен",НовыйДок.ТипЦен.ТипЦеныНоменклатуры);
				табл = регистрысведений.ЦеныНоменклатуры.СрезПоследних(ДатаД, отбор);
				строка.цена = ?(табл.Количество()>0,табл.Получить(0).Цена,0);
				КонецЕсли;
			конецесли;
			
		КонецЦикла;
		
		НовыйДок.Записать();
		предупреждение("Документ сформирован");		
		если (не докесть) тогда 
			Форма = НовыйДок.ПолучитьФорму("ФормаДокумента");
			Форма.открыть();
		конецесли;		
		иначе 
			предупреждение("Невозможно сформировать документ.");
		конецесли;
	иначе 
		если (флесть)тогда 
			предупреждение("Нельзя сформировать документ. Есть нераспознанные позиции.");
		//иначе 
		//	предупреждение("Нельзя сформировать документ. Заполните все поля настроек (кнопка <Настройка>)");
		конецесли;
	конецесли;
	иначе 
		предупреждение("Нельзя сформировать документ. Нет ни одной позиции.");
	конецЕсли;
КонецПроцедуры

Процедура ОткрытиеСпискаНажатие(Элемент)
	// Вставить содержимое обработчика.
	попытка 
	НоменклатураОтбор = ЭлементыФормы.ТаблицаДокумента.ТекущиеДанные.Номенклатура;
	если (ФлагВыходаИзНастроек=ложь) тогда 
	если (ЭтотОбъект.ПолучитьФорму("СписокВыбора").ОткрытьМодально()) тогда 		
	// найдем нужный элемент
	строка = таблицадокумента.Найти(НоменклатураОтбор,"Номенклатура");
	если не (строка=неопределено) тогда 
		строка.номер = КодНоменклатурыОтбор;
		спр = справочники.Номенклатура.НайтиПоКоду(КодНоменклатурыОтбор);
		//строка.Номенклатура = спр.Наименование;
		строка.Номенклатура = спр;
		строка.распознано = "да";
	конецесли;
	конецесли;
	конецесли;
	исключение
	конецпопытки;
КонецПроцедуры              

Процедура НастройкаНажатие(Элемент)
	// Вставить содержимое обработчика.
	Форма = ЭтотОбъект.ПолучитьФорму("Настройка");
	Форма.ОткрытьМодально();
КонецПроцедуры

Процедура ПолучитьНастройки()
	СтруктураНастроек = новый соответствие;
	попытка 	
		СтруктураНастроек = ВосстановитьЗначение("СтруктураНастроекЗаявкиПоставщику");
	исключение
		СтруктураНастроек.Вставить("Организация",Справочники.Организации.НайтиПоКоду("00004"));
		СтруктураНастроек.Вставить("Склад",Справочники.Склады.НайтиПоКоду("00001"));
		СтруктураНастроек.Вставить("Валюта",Справочники.Валюты.НайтиПоКоду("810")); 
		СтруктураНастроек.Вставить("Контрагент",Справочники.Контрагенты.НайтиПоНаименованию("Яршинторг ЗАО")); 
	конецпопытки	
КонецПроцедуры 

Процедура ПриОткрытии()
	// Вставить содержимое обработчика.
	ФлагВыходаИзНастроек=ложь;
	ПолучитьНастройки();
	ЕстьНерасп = ложь;
КонецПроцедуры

ПРОЦЕДУРА ТаблицаДокументаНоменклатураОткрытие(элемент)

КОНЕЦПРОЦЕДУРЫ

Процедура ФайлНачалоВыбора(Элемент, СтандартнаяОбработка)
	СрандартнаяОбработка = ЛОЖЬ;
	ДиалогФайлаНажатие();
КонецПроцедуры

Процедура КоманднаяПанель2ОткрытьФайл(Кнопка)
	ДиалогФайлаНажатие();
КонецПроцедуры

Процедура ТаблицаДокументаПриПолученииДанных(Элемент, ОформленияСтрок)
	для каждого ОформлениеСтроки из ОформленияСтрок цикл
		Если ОформлениеСтроки.ДанныеСтроки.Распознано = "нет" тогда
		ОформлениеСтроки.ЦветФона = webцвета.СветлоРозовый;
		КонецЕсли;
    КонецЦикла;
КонецПроцедуры


