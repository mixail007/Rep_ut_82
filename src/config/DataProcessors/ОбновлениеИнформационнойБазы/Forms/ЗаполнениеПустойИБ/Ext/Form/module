////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события Нажатие элемента КнопкаВыполнить.
//
Процедура КнопкаВыполнитьНажатие(Элемент)

	// Заполнение справочника Валюты.
	ВалютаРегламентированногоУчета = 
	НайтиСоздатьВалюту("810", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	ВалютаУправленческогоУчета = 
	НайтиСоздатьВалюту("840", "USD", "Доллар США",       "доллар, доллара, долларов, м, цент, цента, центов, м, 2");
	НайтиСоздатьВалюту("978", "EUR", "Евро"      ,       "евро, евро, евро, м, цент, цента, центов, м, 2");

	// Заполнение справочника КлассификаторЕдиницИзмерения.
	ЕдиницаИзмеренияВеса =
	НайтиСоздатьЕдиницу("166", "кг", "Килограмм");
	НайтиСоздатьЕдиницу("796", "шт", "Штука");

	// Заполнение констант.
	Если ЗначениеНеЗаполнено(Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
		УстановитьКонстанту("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Константы.ВалютаУправленческогоУчета.Получить()) Тогда
		УстановитьКонстанту("ВалютаУправленческогоУчета",        ВалютаУправленческогоУчета);
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Константы.ЕдиницаИзмеренияВеса.Получить()) Тогда
		УстановитьКонстанту("ЕдиницаИзмеренияВеса",                      ЕдиницаИзмеренияВеса);
	КонецЕсли;

	// Основные группы контрагентов
	НайтиСоздатьГруппуКонтрагентов("Покупатели");
	НайтиСоздатьГруппуКонтрагентов("Поставщики");

	// Основные группы физических лиц
	НайтиСоздатьГруппуФизЛиц("Сотрудники");
	НайтиСоздатьГруппуФизЛиц("Прочие физические лица");

	// Заполнение справочника КлассификаторСтранМира.
	Если ЗагружатьОКСН Тогда
		ПроверкаРезультата(ЗагрузкаОКСМ(), "загрузить классификатор стран мира");
	КонецЕсли;

	// Создание основной организации (по умолчанию).
	Если СозданиеОсновнойОрганизации Тогда
		ПроверкаРезультата(СозданиеОрганизации(), "создать основную организацию");
	КонецЕсли;

	// Создание базовых типов цен
	Если СоздатьБазовыеТипыЦен Тогда
		ПроверкаРезультата(СозданиеТиповЦен(), "записать базовые типы цен");		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ СОБЫТИЙ

// Функция создает группу справочника ЮридическиеЛица, если такого нет.
//
// Параметры:
//  Строки - реквизиты добавляемого элемента.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьГруппуКонтрагентов(Наименование)

	Ссылка = Справочники.Контрагенты.НайтиПоНаименованию(Наименование);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.Контрагенты.СоздатьГруппу();

		СправочникОбъект.Наименование = Наименование;
		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;

	Возврат Ссылка;

КонецФункции

// Функция создает группу справочника ФизическиеЛица, если такого нет.
//
// Параметры:
//  Строки - реквизиты добавляемого элемента.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьГруппуФизЛиц(Наименование)

	Ссылка = Справочники.ФизическиеЛица.НайтиПоНаименованию(Наименование);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.ФизическиеЛица.СоздатьГруппу();

		СправочникОбъект.Наименование = Наименование;
		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;

	Возврат Ссылка;

КонецФункции

// Функция заполняет справочник КлассификаторСтранМира.
// 
// Параметры
//  Нет.
//
// Возвращаемое значение 
//  Истина - если операция успешщно завершена, иначе - описание ошибки.
//
Функция ЗагрузкаОКСМ()

	Попытка
		
		СписокСтран = Справочники.КлассификаторСтранМира.ПолучитьМакет("КлассификаторСтранМира");

		ЭлементыФормы.ХодВыполненияОперации.Видимость = Истина;
		ЭлементыФормы.ХодВыполненияОперации.МинимальноеЗначение  = 4;
		ЭлементыФормы.ХодВыполненияОперации.МаксимальноеЗначение = СписокСтран.ВысотаТаблицы;
		ЭлементыФормы.ТекущееДействие.Заголовок                  = "ОКСМ (Загрузка справочника стран)";

		Для Индекс = 4 По СписокСтран.ВысотаТаблицы Цикл
			ЭлементыФормы.ХодВыполненияОперации.Значение = Индекс;
			Код                = СписокСтран.Область("R"+Строка(Индекс)+"C2").Текст;
			Наименование       = СписокСтран.Область("R"+Строка(Индекс)+"C3").Текст;
			НаименованиеПолное = СписокСтран.Область("R"+Строка(Индекс)+"C6").Текст;
			Страна             = НайтиСоздатьСтрану(Код, Наименование, НаименованиеПолное);
		КонецЦикла;

		ЭлементыФормы.ХодВыполненияОперации.Видимость = Ложь;
		ЭлементыФормы.ТекущееДействие.Заголовок       = "";

	Исключение

		ЭлементыФормы.ХодВыполненияОперации.Видимость = Ложь;
		ЭлементыФормы.ТекущееДействие.Заголовок       = "";

		Возврат ОписаниеОшибки(); // Во время исполнения произошли ошибки

	КонецПопытки;

	Возврат Истина; // Все действия успешно завершены
	
КонецФункции

// Функция создает элемент справочника Классификатор стран мира, если такого нет
//
// Параметры: 
//  Строки - реквизиты добавляемого элемента.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьСтрану(Код, Наименование, НаименованиеПолное)

	Ссылка = Справочники.КлассификаторСтранМира.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КлассификаторСтранМира.СоздатьЭлемент();
		СправочникОбъект.Код                = Код;
		СправочникОбъект.Наименование       = Наименование;
		СправочникОбъект.НаименованиеПолное = НаименованиеПолное;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли; 

	Возврат Ссылка;

КонецФункции // НайтиСоздатьСтрану()

// Функция создает базовые типы цен
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Истина - если действие успешно завершено, иначе - описание ошибки.
//
Функция СозданиеТиповЦен()

	Попытка
		НачатьТранзакцию();

		ЭлементыФормы.ТекущееДействие.Заголовок = "Создание базовых типов цен";

		ВыборкаЦен = Справочники.ТипыЦенНоменклатуры.Выбрать();
		Если НЕ ВыборкаЦен.Следующий() Тогда

			ВалютаЦен = Константы.ВалютаРегламентированногоУчета.Получить();

			Цена = НайтиСоздатьЦену("Закупочная",  // наименование типа цены
			                        ВалютаЦен,     // валюта типа цены
			                        Ложь,          // Расчитывается
			                        Истина,        // ЦенаВключаетНДС
			                        Перечисления.ПорядкиОкругления.Окр0_01,
			                        Ложь);          // Округлять в большую сторону

			Цена = НайтиСоздатьЦену("Мелкооптовая",  // наименование типа цены
			                        ВалютаЦен,      // валюта типа цены
			                        Ложь,           // Расчитывается
			                        Истина,         // ЦенаВключаетНДС
			                        Перечисления.ПорядкиОкругления.Окр0_01,
			                        Ложь);          // Округлять в большую сторону

			Цена = НайтиСоздатьЦену("Оптовая",  // наименование типа цены
			                        ВалютаЦен,      // валюта типа цены
			                        Ложь,           // Расчитывается
			                        Истина,         // ЦенаВключаетНДС
			                        Перечисления.ПорядкиОкругления.Окр0_01,
			                        Ложь);          // Округлять в большую сторону

			Цена = НайтиСоздатьЦену("Розничная",  // наименование типа цены
			                        ВалютаЦен,      // валюта типа цены
			                        Ложь,           // Расчитывается
			                        Истина,         // ЦенаВключаетНДС
			                        Перечисления.ПорядкиОкругления.Окр0_01,
			                        Ложь);          // Округлять в большую сторону
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		ЭлементыФормы.ТекущееДействие.Заголовок = "";
	Исключение

		ЭлементыФормы.ТекущееДействие.Заголовок = "";
		Возврат ОписаниеОшибки();

	КонецПопытки;

	Возврат Истина

КонецФункции // СозданиеТиповЦен()

// Функция создает базовые типы цен
//
// Параметры: 
//  Имя         - строка, наименование типа цен, 
//  Валюта      - ссылка на справочник валют, опреледяет валюту в которой задаются цены данного типа по умолчанию,
//  Расчет      - булево, если истина, то ценыэтого типа расчитываются на основании цен других типов,
//  сНДС        - булево, истина - в цену включен НДС,
//  Округление  - ссылка на перечисление, определяет порядок окрагления цен данного типа,
//  ОкруглятьК2 - булево, истина - округлять в большую сторону, ложь - округлять по правилам арифметики.
//
// Возвращаемое значение:
//  Ссылка на элемент справочника ТипыЦен.
//
 Функция НайтиСоздатьЦену(Имя, Валюта, Расчет, сНДС, Округление, ОкруглятьК2)

	Ссылка = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию(Имя);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
		СправочникОбъект.Наименование             = Имя;
		СправочникОбъект.ВалютаЦены               = Валюта;
		СправочникОбъект.Рассчитывается           = Расчет;
		СправочникОбъект.ЦенаВключаетНДС          = сНДС;
		СправочникОбъект.ПорядокОкругления        = Округление;
		СправочникОбъект.ОкруглятьВБольшуюСторону = ОкруглятьК2;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли; 

	Возврат Ссылка;
 
 КонецФункции // НайтиСоздатьЦену()

// ТекстОписания
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Функция СозданиеОрганизации()

	Попытка

		ЭлементыФормы.ТекущееДействие.Заголовок = "Попытка создания новой организации";
		ВыборкаОрганизаций = Справочники.Организации.Выбрать();
		Если НЕ ВыборкаОрганизаций.Следующий() Тогда

			// Нет организация в ИБ - создадим новую (по умолчанию)
			// иначе считаем, что все уже введено никаких действий не
			// производим.

			НачатьТранзакцию();

			// Создание основного склада
			ОсновнойСклад = Справочники.Склады.СоздатьЭлемент();
			ОсновнойСклад.Наименование = "Основной склад";
			ОсновнойСклад.ВидСклада = Перечисления.ВидыСкладов.Оптовый;
			ЗаписатьСправочникОбъект(ОсновнойСклад);

			// Создание основной кассы
			ОсновнаяКасса = Справочники.Кассы.СоздатьЭлемент();
			ОсновнаяКасса.Наименование = "Основная касса";
			ОсновнаяКасса.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
			ЗаписатьСправочникОбъект(ОсновнаяКасса);

			// Cоздадим основную организацию 
			Организация = Справочники.Организации.СоздатьЭлемент();
			Организация.Наименование = "Основная организация";
			ЗаписатьСправочникОбъект(Организация);

			// Создание основной банковский счет
			ОсновнойРС = Справочники.БанковскиеСчета.СоздатьЭлемент();
			ОсновнойРС.Владелец = Организация.Ссылка;
			ОсновнойРС.Наименование = "Основной расч. счет";
			ОсновнойРС.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
			ЗаписатьСправочникОбъект(ОсновнойРС);

			// Запишем основное подразделение
			Подразделения = Справочники.Подразделения.СоздатьЭлемент();
			Подразделения.Наименование = "Основное подразделение";
			ЗаписатьСправочникОбъект(Подразделения);

			ЗафиксироватьТранзакцию();

		КонецЕсли;

	Исключение

		ЭлементыФормы.ТекущееДействие.Заголовок = "";
		Возврат ОписаниеОшибки(); // Во время исполнения произошли ошибки

	КонецПопытки;

	Возврат Истина; // Все действия успешно завершены

КонецФункции // СозданиеОрганизации()

// 
//
// Параметры:
//  КодВозврата     - значение возвращаемое функцией создания объекта.
//  СтрокаПодсказки - произвольное описание объекта, который попал под проверку.
//
Процедура ПроверкаРезультата(КодВозврата, СтрокаПодсказки= "")

	Если КодВозврата <> Истина Тогда
		ЭлементыФормы.ТекстОписания.Заголовок = "Во время выполнения произошли ошибки";
		Сообщить("Не удалось " +  СтрокаПодсказки + ": "+КодВозврата);
	КонецЕсли;

КонецПроцедуры // ПроверкаРезультата()
