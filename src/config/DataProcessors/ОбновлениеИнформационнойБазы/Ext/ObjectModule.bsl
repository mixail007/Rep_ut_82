//////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновление() Экспорт

	// Подготовка к выводу формы описания обновлений.

	ФормаОписаниеОбновлений    = ПолучитьФорму("ОписаниеОбновлений");
	МакетОписаниеОбновлений    = ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений);
	ДокументОписаниеОбновлений = ФормаОписаниеОбновлений.ЭлементыФормы.ДокументОписаниеОбновлений;
	ДокументОписаниеОбновлений.Очистить();
	
	// Установка значений по умолчанию прав пользователей
	УстановитьЗначенияПравПоУмолчанию();

	// Обновление информационной базы.
	// Последовательно вызываются функции для обновления с соответствующей версии.
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	Если ЗначениеНеЗаполнено(ТекущаяВерсияИБ) Тогда

		СтрСообщения = "начальное заполнение информационной базы версии " + Метаданные.Версия;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		НачатьТранзакцию();

		// После заполнения пустой ИБ номер версии будет "10.2.1.1"
		НомерВерсии = ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		Константы.НомерВерсииКонфигурации.Установить(НомерВерсии);
		ЗафиксироватьТранзакцию();

	КонецЕсли;

	// Переход с бета-версии конфигурации "Торговля + Склад, редакция 10" не поддерживается.
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	Если ТекущаяВерсияИБ = "8.10.0.1" Тогда

		Предупреждение("Переход с бета-версии конфигурации ""Торговля + склад, редакция 10""
		               |на конфигурацию ""Управление торговлей, редакция 10"" не поддерживается.
		               |Корректность данных при таком переходе не гарантируется!");
		Возврат;
	КонецЕсли;


	Если ТекущаяВерсияИБ = "8.10.0.2"
	 Или ТекущаяВерсияИБ = "8.10.0.3"
	 Или ТекущаяВерсияИБ = "8.10.0.4"
	 Или ТекущаяВерсияИБ = "8.10.0.5"
	 Или ТекущаяВерсияИБ = "8.10.1.1"
	 Или ТекущаяВерсияИБ = "8.10.1.2"
	 Или ТекущаяВерсияИБ = "8.10.1.3"
	 Или ТекущаяВерсияИБ = "8.10.1.4"
	 Или ТекущаяВерсияИБ = "8.10.1.5"
	 Или ТекущаяВерсияИБ = "8.10.1.6"
	 Или ТекущаяВерсияИБ = "8.10.1.7"
	 Или ТекущаяВерсияИБ = "8.10.1.8"
	 Или ТекущаяВерсияИБ = "8.10.1.9"
	 Или ТекущаяВерсияИБ = "8.10.1.10"
	 Или ТекущаяВерсияИБ = "8.10.1.11"
	 Или ТекущаяВерсияИБ = "8.10.1.12" Тогда

		Предупреждение("Переход с конфигурации ""Управление торговлей, редакция 10.1""
		               |возможен только с версии 8.10.1.13!
		               |При переходе с более ранних версий корректность данных не гарантируется!");
		Возврат;

	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.2.1.4";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	Если ТекущаяВерсияИБ = "8.10.1.13"
	 ИЛИ (НомерРелиза = "10.2.1" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		                         "Выполнено " + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		КонецЕсли;


		Если ТекущаяВерсияИБ = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.2.2.5";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	Если ТекущаяВерсияИБ = "10.2.1.4"
	 ИЛИ (НомерРелиза = "10.2.2" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		                         "Выполнено " + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			//Вывод строк описания обновлений.
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;

	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.2.3.7";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	Если ТекущаяВерсияИБ = "10.2.2.5"
	 ИЛИ (НомерРелиза = "10.2.3" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();

		ИзменитьАдресЛинииТехподдержки();
		
		ЗаполнитьРеквизитыВТребованииНакладной();
		
		ЗаполнитьРеквизитДокументДвиженияСебестоимостиПродаж();

		//Заполнение реквизита "Информация" в документах "Установка цен номенклатуры", "Установка цен номенклатуры контрагентов"
		ЗаполнитьИнформациюВДокументахУстановкиЦен();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		                         "Выполнено " + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			//Вывод строк описания обновлений.
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;

	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.2.4.4";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	Если ТекущаяВерсияИБ = "10.2.3.7"
	 ИЛИ (НомерРелиза = "10.2.4" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		// Заполнение ПВХ "ВопросыДляАнкетирования".
		НачатьТранзакцию();

		ПВХДатаРождения = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ДатаРождения.ПолучитьОбъект();
		Если ПВХДатаРождения.ТипВопроса <> Перечисления.ТипВопросаАнкеты.Дата тогда
			ПВХДатаРождения.ТипВопроса = Перечисления.ТипВопросаАнкеты.Дата;
			ПВХДатаРождения.Записать();
		КонецЕсли;

		//Установление реквизитов нового предопределенного элемента справочника "ВидыКонтактнойИнформации"
		УстановитьРеквизитыПредопределенногоАдресаЭлПочтыДляОбмена();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		                         "Выполнено " + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			//Вывод строк описания обновлений.
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;

	// Вывод формы дополнительной обработки.
	Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
		ФормаОписаниеОбновлений.Открыть();
	КонецЕсли;

КонецПроцедуры // ВыполнитьОбновление

// Получаем из полного номера версии конфигурации номер релиза без номера сборки.
//
// Параметры
//  НомерВерсии  – Строка – полный номер версии
//
// Возвращаемое значение:
//  Строка – номер релиза без номера сборки
//
Функция ПолучитьНомерРелиза(НомерВерсии)
	
	КоличествоТочек = 0;
	ДлинаОписанияНомераРелиза = 0;
	
	Для х = 1 По СтрДлина(НомерВерсии) Цикл
	
		Если Сред(НомерВерсии, х, 1) = "." Тогда
			КоличествоТочек = КоличествоТочек + 1;
		КонецЕсли;
		
		Если КоличествоТочек = 3 Тогда
			ДлинаОписанияНомераРелиза = х - 1;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Лев(НомерВерсии, ДлинаОписанияНомераРелиза);
	
КонецФункции // ПолучитьНомерРелиза()

// Функция получает макет описания обновлений и заполняет его параметры расшифровок.
//
// Параметры:
//  ФормаОписаниеОбновлений - форма обработки "ОписаниеОбновлений", 
//                            назначается владельцем открываемых из нее форм.
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет "ОписаниеОбновлений" с заполненными параметрами расшифровок.
//+++ полность переделан!
Функция ПодготовитьМакетОписаниеОбновлений(ВидФормыОбновления="Макет") Экспорт

	Макет = ПолучитьМакет("ОписаниеОбновлений");
	
//--------------------------------------------------------------------------	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОписаниеОбновлений";
	
	ОбластьМакетаЗ = Макет.ПолучитьОбласть("ЗаголовокИнфоДляМенеджеров");
	ОбластьМакетаТ = Макет.ПолучитьОбласть("ТекстИнфоДляМенеджеров");
	ОбластьСсылка  = Макет.ПолучитьОбласть("ОбластьСсылка");
	ОбластьАвтор   = Макет.ПолучитьОбласть("ОбластьАвтор");
 	ОбластьМакетаОтступ = Макет.ПолучитьОбласть("Отступ");
	
	
 //============ инфо для менеджеров ===========================
СписокСообщенийДляМенеджеров = новый ТаблицаЗначений;
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформацияДляМенеджеров.Период КАК Период,
	               |	ИнформацияДляМенеджеров.Заголовок,
	               |	ИнформацияДляМенеджеров.Текст,
	               |	ИнформацияДляМенеджеров.ТекстВажно,
	               |	ИнформацияДляМенеджеров.Автор,
	               |	ИнформацияДляМенеджеров.Раздел КАК Раздел,
	               |	ИнформацияДляМенеджеров.ИмяСсылки,
	               |	ИнформацияДляМенеджеров.АдресСсылки,
	               |	ИнформацияДляМенеджеров.ДляКого 
				   |ИЗ
	               |	РегистрСведений.ИнформацияДляМенеджеров КАК ИнформацияДляМенеджеров
	               |ГДЕ
	               |	ИнформацияДляМенеджеров.Период >= &Период0
				   // 2-ой раздел без ограничения по времени
	               |	ИЛИ ИнформацияДляМенеджеров.Раздел = 2
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИнформацияДляМенеджеров.Раздел УБЫВ,
	               |	Период УБЫВ,
	               |	ИнформацияДляМенеджеров.Автор
	               |ИТОГИ ПО
	               |	Раздел
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Период0", ДобавитьМесяц( НачалоМесяца(ТекущаяДата()),-2) );  // до 3х месяцев
	
	Результат = Запрос.Выполнить();
	СписокРазделов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	пока СписокРазделов.Следующий() цикл
//Раздел = 1
Если  СписокРазделов.раздел = 1 тогда
	Если Найти(ВидФормыОбновления,"Конфигурация")>0 тогда
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаИзменений");
	ТабДокумент.Вывести(ОбластьМакета);
	форматДаты1 = "ДЛФ=D";

	иначе продолжить; 
	КонецЕсли;
 КонецЕсли;
 
//Раздел = 2
Если СписокРазделов.раздел = 2 тогда
	Если Найти(ВидФормыОбновления,"Общая")>0 тогда 
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОбщейИнформации");
	ТабДокумент.Вывести(ОбластьМакета);
	форматДаты1 = "ДФ='MMMM yyyy'";

	иначе продолжить;
	КонецЕсли;
КонецЕсли;

Если СписокРазделов.раздел = 3 тогда
 	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаИнфоДляМенеджеров");
	ТабДокумент.Вывести(ОбластьМакета);
	
	форматДаты1 = "ДЛФ=DD";

КонецЕсли;

//=================================================================
СписокСообщенийДляМенеджеров = СписокРазделов.Выбрать();
 //Раздел = 3	
если СписокСообщенийДляМенеджеров.Количество()>0 тогда
	
	ТабДокумент.НачатьГруппуСтрок();


	пока СписокСообщенийДляМенеджеров.Следующий() цикл
		
	// ограничение ТОЛЬКО по ролям! 
	Если НЕ СписокСообщенийДляМенеджеров.ДляКого="Для всех" тогда
		
		Если СписокСообщенийДляМенеджеров.ДляКого = "Только для менеджеров" 
			и НЕ ( РольДоступна("МенеджерПоПродажам") 
				 или РольДоступна("МенеджерУдаленногоСклада")
				 или РольДоступна("МенеджерПоПродажамСОграничениемПравДоступа")) тогда
				 продолжить;
		ИначеЕсли СписокСообщенийДляМенеджеров.ДляКого = "Только для менеджеров филиалов"
			и НЕ (РольДоступна("Кассир")
		  		  и ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя")) тогда
				 продолжить;
		ИначеЕсли СписокСообщенийДляМенеджеров.ДляКого = "Только для филиалов"
			и НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") тогда
				 продолжить;
		ИначеЕсли СписокСообщенийДляМенеджеров.ДляКого = "Только для менеджеров товарных групп"
			и НЕ (РольДоступна("МенеджерПоЗакупкамСОграничениемПравДоступа")) тогда
				 продолжить;
		 ИначеЕсли СписокСообщенийДляМенеджеров.ДляКого = "Только для программистов" 
				 и НЕ РольДоступна("ПравоЗавершенияРаботыПользователей") тогда
				 продолжить;
		КонецЕсли;	 
			 
	КонецЕсли;	
	
	
	ОбластьМакетаЗ.Параметры.Заголовок = формат(СписокСообщенийДляМенеджеров.Период,форматДаты1)+" "+СписокСообщенийДляМенеджеров.Заголовок;
	ТабДокумент.Вывести(ОбластьМакетаЗ);
	
		ТабДокумент.НачатьГруппуСтрок("Инфо", СписокРазделов.раздел = 3); // раскрывается
		
		    ОбластьМакетаТ.Параметры.Текст =СписокСообщенийДляМенеджеров.Текст;
		    ОбластьМакетаТ.Параметры.ТекстВажно =СписокСообщенийДляМенеджеров.ТекстВажно;
			ТабДокумент.Вывести(ОбластьМакетаТ);
			
			если сокрЛП(СписокСообщенийДляМенеджеров.ИмяСсылки)<>"" тогда
			ОбластьСсылка.Параметры.ИмяСсылки =СписокСообщенийДляМенеджеров.ИмяСсылки;
			ОбластьСсылка.Параметры.АдресСсылки =СписокСообщенийДляМенеджеров.АдресСсылки;
			ТабДокумент.Вывести(ОбластьСсылка);
			КонецЕсли;
		
 			ОбластьАвтор.Параметры.Автор =СписокСообщенийДляМенеджеров.Автор;
			ТабДокумент.Вывести(ОбластьАвтор);
 		ТабДокумент.ЗакончитьГруппуСтрок();
		
    КонецЦикла;
	ТабДокумент.ЗакончитьГруппуСтрок();

КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакетаОтступ);
КонецЦикла; //СписокРазделов

	ТабДокумент.ОтображатьГруппировки = истина;
	
	Возврат ТабДокумент;

КонецФункции

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

		// установим курс и кратность = 1 на 1 января 1980
		ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное) Экспорт

	Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;

	Возврат Ссылка;

КонецФункции

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты) Экспорт

	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;

	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);

	СтрСообщения = "Константе """ + Метаданные.Константы[ИмяКонстанты].Синоним + """ "
	             + "назначено значение """ + ЗначениеКонстанты + """";

	Сообщить(СтрСообщения, СтатусСообщения.Обычное);

КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " справочника """ + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + СправочникОбъект.Наименование + """";

	Попытка
		СправочникОбъект.Записать();
		Сообщить(СтрСообщения1 + СтрСообщения2 + "код """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3, СтатусСообщения.Обычное);
	Исключение
		Сообщить("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

КонецПроцедуры

// Процедура записывает переданный план видов характеристик и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки информационной базы.
//
// Параметры:
//  ПланВидовХарактеристикОбъект - объект, который требуется записать.
//
Процедура ЗаписатьПланВидовХарактеристикОбъект(ПланВидовХарактеристикОбъект) Экспорт

	Если НЕ ПланВидовХарактеристикОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если ПланВидовХарактеристикОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если ПланВидовХарактеристикОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " плана видов характеристик """ + ПланВидовХарактеристикОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + ПланВидовХарактеристикОбъект.Наименование + """";

	Попытка
		ПланВидовХарактеристикОбъект.Записать();
		Сообщить(СтрСообщения1 + СтрСообщения2 + "код """ + ПланВидовХарактеристикОбъект.Код + """, " + СтрСообщения3, СтатусСообщения.Обычное);
	Исключение
		Сообщить("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Процедура изменяет неправильный адрес линии техподдержки hline@1c.ru
// на правильный v8@1c.ru
//
Процедура ИзменитьАдресЛинииТехподдержки()

	ЗначенияПараметров = Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить();
	Если ТипЗнч(ЗначенияПараметров) = Тип("ТаблицаЗначений") Тогда
		СтрокаПараметровОтправки = ЗначенияПараметров.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");
		Если ВРег(СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1]) = "HLINE@1C.RU" Тогда
			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] = "v8@1c.ru";
		КонецЕсли;
		Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(ЗначенияПараметров, Новый СжатиеДанных));
	КонецЕсли; 

КонецПроцедуры

// Процедура заполняет по умолчанию необходимые данные
// для отправки сообщений в службу технической поддержки.
//
Процедура ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки()

	Перем СтруктураЗначения;

	Если ТипЗнч(Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить()) <> Тип("ТаблицаЗначений") Тогда

		ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(СтруктураЗначения);

		СтрокаПараметровОтправки = СтруктураЗначения.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");

		Если СтрокаПараметровОтправки <> Неопределено Тогда

			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] = "v8@1c.ru";

			Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(СтруктураЗначения, Новый СжатиеДанных));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Устанавливает реквизиты элемента ПВХ "ВопросыДляАнкетирования"
//
Процедура УстановитьРеквизитыВопроса(Вопрос,ПолнаяФормулировка,ТипВопросаАнкеты,ОбязателенДляЗаполнения = Ложь,БолееОдногоОтвета = Ложь, КоличествоСтрок = 0)

	Объект = Вопрос.ПолучитьОбъект();

	Объект.ПолнаяФормулировка      = ПолнаяФормулировка;
	Объект.ОбязателенДляЗаполнения = ОбязателенДляЗаполнения;
	Объект.ТипВопроса              = ТипВопросаАнкеты;
	Объект.КоличествоСтрокТаблицы  = КоличествоСтрок;

	Объект.Записать();

КонецПроцедуры

// Записываем реквизиты предопределенных вопросов
//
// Параметры
//  нет
//
Процедура ЗаполнитьРеквизитыВопросов()

	Менеджер      	= ПланыВидовХарактеристик.ВопросыДляАнкетирования;
	ВВидеСтроки 	= Перечисления.ТипВопросаАнкеты.Строка;
	ВВидеДаты	 	= Перечисления.ТипВопросаАнкеты.Дата;
	ТабличныйВопрос = Перечисления.ТипВопросаАнкеты.Табличный;

	УстановитьРеквизитыВопроса(Менеджер.Имя,          "Имя",			ВВидеСтроки, Истина);
	УстановитьРеквизитыВопроса(Менеджер.Отчество,     "Отчество",		ВВидеСтроки, Истина);
	УстановитьРеквизитыВопроса(Менеджер.Фамилия,      "Фамилия",		ВВидеСтроки, Истина);
	УстановитьРеквизитыВопроса(Менеджер.ДатаРождения, "Дата рождения",	ВВидеДаты, Истина);

	УстановитьРеквизитыВопроса(Менеджер.ИНН,          "ИНН",		ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.Должность,    "Должность",	ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.Роль,         "Роль",		ВВидеСтроки);

	УстановитьРеквизитыВопроса(Менеджер.НаименованиеКонтрагента,   "Наименование",				ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.ТипКонтрагента,            "Тип",						ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.ВидДеятельностиКонтрагента,"Вид деятельности",			ВВидеСтроки);
	УстановитьРеквизитыВопроса(Менеджер.ИННГоловногоКонтрагента,   "ИНН головной организации",	ВВидеСтроки);
	
	// табличный вопрос
	УстановитьРеквизитыВопроса(Менеджер.ТВидыДеятельностиКонтрагента, "Виды деятельности", ТабличныйВопрос, , , 4);
	
	// табличный вопрос трудовая деятельность
	ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТВидыДеятельностиКонтрагента.ПолучитьОбъект();
	НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
	НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ВидДеятельностиКонтрагента;
	ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
	ОбъектПВХВопросыДляАнкетирования.Записать();
	
КонецПроцедуры // ЗаполнитьРеквизитыВопросов()

// Функция выполняет начальное заполнение информационной базы.
//
// Параметры:
//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
//
// Возвращаемое значение:
//  Функция возвращает номер первой коммерческой версии конфигурации.
//
Функция ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений)

	// Обязательное начальное заполнение информационной базы.

	ТекстВопроса = "Произвести первоначальное заполнение информационной базы?
	               |Начальное заполнение не рекомендуется производить в том случае,
	               |если вы ранее вели учет в другой конфигурации
	               |и хотите перенести накопленные данные.
	               |";

	// Заполнение настроек упр. учета
	Набор  = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(НачалоМесяца('19800101'));
	Запись = Набор.Добавить();

	Запись.Период                                   = НачалоМесяца('19800101');
	Запись.СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО;
	Запись.СтратегияСписанияПартийТоваровПоСтатусам = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаСобственныеПотомПринятые;
	Запись.ВестиПартионныйУчетПоСкладам = Истина;

	Набор.Записать();

	ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки();
	
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда

		// Заполнение справочника Валюты.
		ВалютаРегламентированногоУчета = 
		НайтиСоздатьВалюту("810", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
		ВалютаУправленческогоУчета = 
		НайтиСоздатьВалюту("840", "USD", "Доллар США",       "доллар, доллара, долларов, м, цент, цента, центов, м, 2");

		// Заполнение справочника КлассификаторЕдиницИзмерения.
		ЕдиницаИзмеренияВеса =
		НайтиСоздатьЕдиницу("166", "кг", "Килограмм");
		НайтиСоздатьЕдиницу("796", "шт", "Штука");

		// Заполнение констант.
		УстановитьКонстанту("ВалютаРегламентированногоУчета"          , ВалютаРегламентированногоУчета);
		УстановитьКонстанту("ВалютаУправленческогоУчета"              , ВалютаУправленческогоУчета);
		УстановитьКонстанту("ЕдиницаИзмеренияВеса"                    , ЕдиницаИзмеренияВеса);
		УстановитьКонстанту("ИспользованиеВстроенногоПочтовогоКлиента", Истина);
		УстановитьКонстанту("ИспользоватьСерииНоменклатуры"           , Истина);
		УстановитьКонстанту("ИспользоватьВнутренниеЗаказы"            , Истина);

		// Вывод строк описания обновлений.
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ШапкаЗаполнениеПустойИБ"));
		ДокументОписаниеОбновлений.НачатьГруппуСтрок("Заполнение пустой ИБ");
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ЗаполнениеПустойИБ"));
		ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));

	КонецЕсли;

	// Заполнение данных для механизма контактной информации.
	ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию();
	ЗаполнитьСправочникВидыКонтактнойИнформации();
	
	// Заполняем ПВХ ВопросыДляАнкетирования, а именно предопределенные вопросы.
	ЗаполнитьРеквизитыВопросов();
	
	// Заполним значение по умолчанию для константы РежимЗавершенияРаботыПользователей.
	Константы.РежимЗавершенияРаботыПользователей.Установить(Перечисления.РежимыЗавершенияРаботыПользователей.РазрешитьРаботу);

	// Заполняем предопределенный элемент справочника "Виды оплат чека ККМ".
	ЗаполнитьСправочникВидыОплатЧекаККМ();

	Возврат "10.2.1.1";

КонецФункции

// Процедура заполняет константу шаблонов телефонов.
// 
Процедура ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию()

	ТаблицаСоответствий = Новый Соответствие;
	ТаблицаСоответствий.Вставить(7,"999-99-99");
	ТаблицаСоответствий.Вставить(6,"99-99-99");
	ТаблицаСоответствий.Вставить(5,"9-99-99");
	ТаблицаСоответствий.Вставить(4,"99-99");

	ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);

	Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);

КонецПроцедуры // ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию()

// Заполнение реквизитов справочника "Виды контактной информации"
//
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()

	// Физ.лица
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	// Контрагенты
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	// Организации
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	// Пользователи
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	ОбъектВидКонтактнойИнформации.Записать();

КонецПроцедуры

// Заполнение реквизитов справочника "Виды оплат чека ККМ"
//
Процедура ЗаполнитьСправочникВидыОплатЧекаККМ()

	ОбъектВидОплатыЧекаККМ = Справочники.ВидыОплатЧекаККМ.Наличные.ПолучитьОбъект();
	ОбъектВидОплатыЧекаККМ.ВидДенежныхСредств = Перечисления.ВидыДенежныхСредств.Наличные;
	ОбъектВидОплатыЧекаККМ.Записать();

КонецПроцедуры // ЗаполнитьСправочникВидыОплатЧекаККМ()

// Заполнение нового реквизитов "Способ списания" и "Заказ" в табличной части
// документов "Требование - накладная".
//
Процедура ЗаполнитьРеквизитыВТребованииНакладной()
	
	ДокументыВыборка = Документы.ТребованиеНакладная.Выбрать();
	Пока ДокументыВыборка.Следующий() Цикл
		ДокументОбъект = ДокументыВыборка.ПолучитьОбъект();
		
		ТабличнаяЧасть = ДокументОбъект.Материалы;
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
				СтрокаТабличнойЧасти.Заказ = ДокументОбъект.УдалитьЗаказ;
			КонецЕсли;
			Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			КонецЕсли;
		КонецЦикла;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРеквизитыВТребованииНакладной()

// Заполнение реквизитов ДокументДвижения, ДокументДвиженияПериод регистра ПродажиСебестоимость
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьРеквизитДокументДвиженияСебестоимостиПродаж() Экспорт
	
	// Корректироующие движения
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПартииТоваровНаСкладах.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|
	|ГДЕ
	|	ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход И
	|	ПартииТоваровНаСкладах.ДокументДвижения <> Неопределено
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПартииТоваровПереданные.Регистратор
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные КАК ПартииТоваровПереданные
	|
	|ГДЕ
	|	ПартииТоваровПереданные.ВидДвижения = &ВидДвиженияРасход И
	|	ПартииТоваровПереданные.ДокументДвижения <> Неопределено");
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Простой запрос, определяющий, есть ли движения вообще
		Запрос = Новый Запрос("ВЫБРАТЬ Количество(1) КоличествоЗаписей ИЗ РегистрНакопления.ПродажиСебестоимость ГДЕ Регистратор = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
		В = Запрос.Выполнить().Выбрать();
		В.Следующий();
		Если В.КоличествоЗаписей = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Н = РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей();
		Н.Отбор.Регистратор.Установить(Выборка.Ссылка);
		Н.Прочитать();
		
		// Запрос, выбирающий значения реквизитов
		Запрос =  Новый Запрос(
		"ВЫБРАТЬ
		|	ПартииТоваровНаСкладах.ДокументДвижения,
		|	ПартииТоваровНаСкладах.ДокументДвиженияПериод,
		|	ПродажиСебестоимость.НомерСтроки
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК ПродажиСебестоимость
		|		ПО ПартииТоваровНаСкладах.Регистратор = ПродажиСебестоимость.Регистратор И ПартииТоваровНаСкладах.НомерКорСтроки = ПродажиСебестоимость.НомерСтроки
		|
		|ГДЕ
		|	ПартииТоваровНаСкладах.КодОперации В(&КодОперации) И
		|	ПартииТоваровНаСкладах.Регистратор = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПартииТоваровПереданные.ДокументДвижения,
		|	ПартииТоваровПереданные.ДокументДвиженияПериод,
		|	ПродажиСебестоимость.НомерСтроки
		|ИЗ
		|	РегистрНакопления.ПартииТоваровПереданные КАК ПартииТоваровПереданные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК ПродажиСебестоимость
		|		ПО ПартииТоваровПереданные.Регистратор = ПродажиСебестоимость.Регистратор И ПартииТоваровПереданные.НомерКорСтроки = ПродажиСебестоимость.НомерСтроки
		|
		|ГДЕ
		|	ПартииТоваровПереданные.КодОперации В(&КодОперации) И
		|	ПартииТоваровПереданные.Регистратор = &Регистратор");
		
		// Коды операции при которых
		МассивКодОперации = Новый Массив;
		МассивКодОперации.Добавить(Перечисления.КодыОперацийПартииТоваров.Реализация);
		МассивКодОперации.Добавить(Перечисления.КодыОперацийПартииТоваров.РеализацияКомиссия);
		МассивКодОперации.Добавить(Перечисления.КодыОперацийПартииТоваров.РеализацияРозница);
		МассивКодОперации.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя);
		Запрос.УстановитьПараметр("КодОперации", МассивКодОперации);
		Запрос.УстановитьПараметр("Регистратор", Выборка.Ссылка);
		
		В = Запрос.Выполнить().Выбрать();
		Пока В.Следующий() Цикл
			
			Н[В.НомерСтроки-1].ДокументДвижения = В.ДокументДвижения;
			Н[В.НомерСтроки-1].ДокументДвиженияПериод = В.ДокументДвиженияПериод;
			
		КонецЦикла;
		
		Н.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРеквизитДокументДвиженияСебестоимостиПродаж()

// Заполнение реквизита "Информация" в документах "Установка цен номенклатуры", "Установка цен номенклатуры контрагентов"
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьИнформациюВДокументахУстановкиЦен()

	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	        |	УстановкаЦенНоменклатурыТипыЦен.Ссылка КАК Документ,
	        |	УстановкаЦенНоменклатурыТипыЦен.ТипЦен.Наименование КАК ТипЦен
	        |ИЗ
	        |	Документ.УстановкаЦенНоменклатуры.ТипыЦен КАК УстановкаЦенНоменклатурыТипыЦен
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	УстановкаЦенНоменклатурыКонтрагентовТипыЦен.Ссылка,
	        |	УстановкаЦенНоменклатурыКонтрагентовТипыЦен.ТипЦен.Наименование
	        |ИЗ
	        |	Документ.УстановкаЦенНоменклатурыКонтрагентов.ТипыЦен КАК УстановкаЦенНоменклатурыКонтрагентовТипыЦен
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Документ
	        |
	        |ИТОГИ ПО
	        |	Документ,
	        |	ТипЦен
	        |АВТОУПОРЯДОЧИВАНИЕ
			|";
	Запрос.Текст = Текст;

	ДокументыЦен = Запрос.Выполнить().Выбрать();

	Пока ДокументыЦен.Следующий() Цикл
		ДокументЦен = ДокументыЦен.Документ.ПолучитьОбъект();
		Информация  = "";
		ТипыЦен     = ДокументыЦен.Выбрать();
		Пока ТипыЦен.Следующий() Цикл
			Если Информация <> "" Тогда
				Информация = Информация + ", ";
			КонецЕсли;
			Информация = Информация + ТипыЦен.ТипЦен;
		КонецЦикла;
		ДокументЦен.Информация = Информация;
		ДокументЦен.Записать();
	КонецЦикла;

КонецПроцедуры // ЗаполнитьИнформациюВДокументахУстановкиЦен()

// Процедура устанавливает реквизиты предопределенного элемента
// "АдресЭлектроннойПочтыДляОбменаДокументами" справочника "ВидыКонтактнойИнформации"
//
Процедура УстановитьРеквизитыПредопределенногоАдресаЭлПочтыДляОбмена()

	//Тестируем нужен ли новый код для предопредленного элемента
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Код КАК Код
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Код = &КодДляПоиска";

	Запрос.УстановитьПараметр("КодДляПоиска", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами.Код);

	СпрЭлАдрес = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами.ПолучитьОбъект();
	СпрЭлАдрес.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	СпрЭлАдрес.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	
	Если Запрос.Выполнить().Выбрать().Количество() = 1 Тогда
		СпрЭлАдрес.Записать();
	Иначе
		// Пытаемся установить корректно новый код
		СпрЭлАдрес.УстановитьНовыйКод();
		Если Справочники.ВидыКонтактнойИнформации.НайтиПоКоду(СпрЭлАдрес.Код) = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка() Тогда
			СпрЭлАдрес.Записать();
		Иначе
			Сообщить("Не удалось изменить код предопределенного элемента " + СпрЭлАдрес, СтатусСообщения.Важное);
			Сообщить("Проверьте корректность кодов справочника Виды контаксной информации", СтатусСообщения.Важное);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

