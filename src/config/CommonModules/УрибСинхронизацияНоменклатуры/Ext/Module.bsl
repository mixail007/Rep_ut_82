////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ
// 
Функция ПолучитьПрефиксНомера() Экспорт

	Возврат Константы.ПрефиксНомеров.Получить();	

КонецФункции // ПолучитьПрефиксНомера()


Функция Инфо() Экспорт

	Если Константы.ИнфоОтладки.Получить() Тогда
		
		Возврат Истина;
	
	Иначе 
		
		Возврат Ложь;
	
	КонецЕсли; 

КонецФункции // ()

// Функция получает имя файла обмена
// Формирует имя файла обмена для двух узлов
//
// Параметры:
//  УзелИсточник - ссылка на узел-источник сообщения обмена
//  УзелПриемник - ссылка на узел-приемник сообщения обмена
//  Постфикс - строка, добавляемая в конец имени файла
//
// Возвращаемое значение:
//  ИмяФайла - строка с именем файла
//
Функция ПолучитьИмяФайлаОбмена(УзелИсточник, УзелПриемник, Постфикс = "") Экспорт
	
	// формируем имя файла, исходя из кодов источника и приемника сообщения обмена
	Возврат "Message" + СокрЛП(УзелИсточник.Код) + "_" + СокрЛП(УзелПриемник.Код) + СокрЛП(Постфикс) + ".xml";
	
КонецФункции // ПолучитьИмяФайлаОбмена(УзелИсточник, УзелПриемник, Постфикс = "")

// Процедура вывода диагностического сообщения о регистрации изменений данных
// 
// Параметры:
//  Данные - объект данных, для которого необходимо вывести информацию о
//			 регистрации изменений
//
Процедура ВывестиРегистрацию(Данные) Экспорт
	
	ОбменДанными = Данные.ОбменДанными;
	Если Инфо() Тогда
		Сообщить(" - Регистрация " + Данные.Метаданные() + ": " + Строка(Данные));
	КонецЕсли;
	//Вывод списка узлов куда будет выполняться регистрация
	Для Каждого Получатель Из ОбменДанными.Получатели Цикл
		
		Если Не ОбменДанными.Отправитель = Получатель Тогда 
			
			Если Инфо() Тогда 
				Сообщить("   - " + Получатель);
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиРегистрацию(Данные)

// Процедура выборочной регистраци изменений по складам
//
// Параметры:
//  ОбменДанными - значение регистрации изменений
//  Склад		 - ссылка на склад, по которому производится регистрация
//
Процедура ВключитьРегистрацию(ОбменДанными, Склад) Экспорт
	
	//Получение узлов для конкретного склада 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СинхронизацияНоменклатуры.Ссылка
	               |ИЗ
	               |	ПланОбмена.СинхронизацияНоменклатуры КАК СинхронизацияНоменклатуры
	               |ГДЕ
	               |	СинхронизацияНоменклатуры.Ссылка <> &ЭтотУзел
				   //20.04.2017
				   |	И СинхронизацияНоменклатуры.ПометкаУдаления = ЛОЖЬ
				   
	               |	И СинхронизацияНоменклатуры.ВыполнятьОбмен";
	  
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.СинхронизацияНоменклатуры.ЭтотУзел());  
	
	Выборка = Запрос.Выполнить().Выбрать();
	// Регистрация изменений для выбранных узлов
	
	Пока Выборка.Следующий() Цикл
		
		ОбменДанными.Получатели.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры // ВключитьРегистрацию(ОбменДанными, Склад)

// Полная регистрация изменений данных для конкретного узла
//
// Параметры:
// 	Узел 				- ссылка на узел, для которого производится регистрация изменений данных
//  РегистрироватьВсе	- булево, признак регистрации всех изменений для узла
//
Процедура ПолнаяРегистрацияДанныхПоУзлу(Узел, РегистрироватьВсе) Экспорт
	
	// регистрация изменений всех данных для узла производится в случае
	// значения параметра РегистрироватьВсе = Истина или
	// значение склада в узле не установлено
	Если РегистрироватьВсе Тогда
		
		Сообщить("Регистрация всех данных по узлу " + Узел);
		ПланыОбмена.ЗарегистрироватьИзменения(Узел);  
		
	Иначе
		
		Сообщить("Регистрация данных по узлу " + Узел + " -----------");
		ПланОбмена = Узел.Метаданные();
		Состав = ПланОбмена.Состав;
		Для Каждого ЭлементСостава Из Состав Цикл
			
			Сообщить("   Регистрация данных " + ЭлементСостава.Метаданные + " по узлу " + Узел);
			// Регистрация изменений всех данных объекта для узла
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, ЭлементСостава.Метаданные);  
				
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // ПолнаяРегистрацияДанныхПоУзлу(Узел, Все)

// Полное удаление регистрации изменения данных для узла
//
// Параметры:
// 	Узел 	- ссылка на узел, для которого производится удаление
//			  регистрации изменений данных
//
Процедура ПолноеУдалениеРегистрацииДанныхПоУзлу(Узел) Экспорт
	
	Сообщить("Удаление регистрации всех данных по узлу " + Узел);
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел);  
	
КонецПроцедуры // ПолноеУдалениеРегистрацииДанныхПоУзлу(Узел)

// Выполняет полный обмен со всеми узлами
// Для каждого узла плана обмена СинхронизацияНоменклатуры производится чтение сообщения
// с данными от других узлов и формирование нового сообщения с измененными данными
//
Процедура ОбменНоменклатурой() Экспорт
	
	ВыборкаУзлов = ПланыОбмена.СинхронизацияНоменклатуры.Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		
		// производим обмен данными со всеми узлами, кроме текущего (ЭтотУзел)
		Если ВыборкаУзлов.Ссылка <> ПланыОбмена.СинхронизацияНоменклатуры.ЭтотУзел() Тогда
			
			Если ВыборкаУзлов.Ссылка.ВыполнятьОбмен Тогда
				
				УзелОбъект = ВыборкаУзлов.ПолучитьОбъект();
				
				//Получение сообщения
				УзелОбъект.ПрочитатьСообщениеСИзменениями();
				
				//Формирование сообщения
				УзелОбъект.ЗаписатьСообщениеСИзменениями();
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ОбменСоСкладами()



/// ОС и НМА

Процедура ПроверитьРегистрацию(ЭлементНоменклатуры, Объект) Экспорт 
	
	Если (ЭлементНоменклатуры.ПринадлежитЭлементу(Справочники.Номенклатура.ВнеоборотныеАктивы))
		ИЛИ (ЭлементНоменклатуры.ПринадлежитЭлементу(Справочники.Номенклатура.Материалы))
		ИЛИ (ЭлементНоменклатуры.ПринадлежитЭлементу(Справочники.Номенклатура.ЛокальнаяНоменклатура))
		//+++( 28.03.2012
		ИЛИ (ЭлементНоменклатуры.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("0040004")) )//"Дубли")) )
	    ИЛИ (ЭлементНоменклатуры.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("0092319")) ) //"Автокосметика")) )
	 	ИЛИ (ЭлементНоменклатуры.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("0000002")) ) //"Автохимия")) )
	    ИЛИ (ЭлементНоменклатуры.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("0092255")) ) //"Фильтры")) )
	    //+++)
		ИЛИ (ЭлементНоменклатуры.ПринадлежитЭлементу(Справочники.Номенклатура.Автозапчасти)) Тогда
		
		Объект.ОбменДанными.Получатели.Очистить();
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаспределеннаяИнформационнаяБаза.Ссылка
		|ИЗ
		|	ПланОбмена.РаспределеннаяИнформационнаяБаза КАК РаспределеннаяИнформационнаяБаза
		|ГДЕ
		|	РаспределеннаяИнформационнаяБаза.Ссылка <> &ЭтотУзел
		//+++ 14.04.2017 - НЕ НАДО делать регистрацию в узлы, помеченные на удаление !!!
		|	И РаспределеннаяИнформационнаяБаза.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.РаспределеннаяИнформационнаяБаза.ЭтотУзел());  
		
		Выборка = Запрос.Выполнить().Выбрать();
		// Регистрация изменений для выбранных узлов
		
		Пока Выборка.Следующий() Цикл

			Объект.ОбменДанными.Получатели.Добавить(Выборка.Ссылка);

		КонецЦикла;

	КонецЕсли; 
	
КонецПроцедуры

// ОС и НМА