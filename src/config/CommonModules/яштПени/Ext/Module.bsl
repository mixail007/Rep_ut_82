 
Функция ПолучитьДатуПредыдущегоНачисленияПоСделке(Сделка, _Дата);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ТекущаяДатаНачисления", _Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленныеПени.ДатаНачисления КАК ДатаНачисления
	|ИЗ
	|	РегистрНакопления.НачисленныеПени КАК НачисленныеПени
	|ГДЕ
	|	НачисленныеПени.ВидДвижения = &Приход
	|	И НачисленныеПени.Сделка = &Сделка
	|	И НачисленныеПени.ДатаНачисления < &ТекущаяДатаНачисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачисления УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.ДатаНачисления;
		
	Иначе 
		
		Возврат 0;
		
	КонецЕсли; 
	

КонецФункции // ()

Функция ПолучитьДокументыПослеТекущейДатыНачисления(Сделка, _Дата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ДатаНачисления", _Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленныеПени.ДокументНачисления
	|ИЗ
	|	РегистрНакопления.НачисленныеПени КАК НачисленныеПени
	|ГДЕ
	|	НачисленныеПени.ВидДвижения = &Приход
	|	И НачисленныеПени.ДатаНачисления > &ДатаНачисления
	|	И НачисленныеПени.Сделка = &Сделка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачисленныеПени.ДатаНачисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокДоков = Новый СписокЗначений;
	СписокДоков.Очистить();
	
	Если Выборка.Количество() = 0 Тогда
		
		СписокДоков.Добавить(Документы.НачислениеПени.ПустаяСсылка());
		
	Иначе 
		
		Пока Выборка.Следующий() Цикл
		
			СписокДоков.Добавить(Выборка.ДокументНачисления);		
		
		КонецЦикла; 
		
	КонецЕсли; 

	Возврат СписокДоков;
		
КонецФункции

Функция ПроверитьПоздниеНачисления(Сделка, ДатаНачисления, ВыводитьСообщения = Ложь) Экспорт

	
	СписокДоков = ПолучитьДокументыПослеТекущейДатыНачисления(Сделка, ДатаНачисления);
	
	ДобавлятьВДокСтроку = Истина;
	
	Для каждого СтрокаСписка Из СписокДоков Цикл
		
		Если СтрокаСписка.Значение <> Документы.НачислениеПени.ПустаяСсылка() Тогда
			
			ДобавлятьВДокСтроку = Ложь;	
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если НЕ ДобавлятьВДокСтроку И ВыводитьСообщения Тогда
		
		
		Сообщить("По сделке " + Строка(Сделка) + " существуют поздние начисления:", СтатусСообщения.Важное); 
		
		Для каждого СтрокаСписка Из СписокДоков Цикл
			
			Сообщить(Строка(СтрокаСписка.Значение), СтатусСообщения.Важное); 
			
		КонецЦикла; 
		
		Сообщить("Строка не может быть обработана!", СтатусСообщения.Важное); 
		
		
	КонецЕсли; 
	
	Возврат ДобавлятьВДокСтроку;

КонецФункции // ()

Функция ЗаполнитьТаблицуПеней(Контрагент, Дата, ДокументОбъект, Сделка = Неопределено, Ставка = 0) 
  	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(Дата(2007, 01, 01, 0, 0, 0)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("ДобавочныйПериод", ?(Константы.ИспользоватьДобавочныйПериодПени.Получить(), 
													Константы.КоличествоДнейДобавочногоПериода.Получить(),
													0));
	Запрос.Текст =
	
	 "ВЫБРАТЬ
	 |	ВсеДолги.Сделка КАК Сделка,
	 |	ВсеДолги.Сделка КАК Сделка1,
	 |	ВсеДолги.СуммаВзаиморасчетовНачальныйОстаток,
	 |	ВсеДолги.СуммаВзаиморасчетовКонечныйОстаток,
	 |	ВсеДолги.СуммаВзаиморасчетовПриход,
	 |	ВсеДолги.СуммаВзаиморасчетовРасход,
	 |	ВсеДолги.ДатаОплаты,
	 |	ВсеДолги.Сделка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	 |	ВсеДолги.Контрагент,
	 |	ВсеДолги.ДатаНачалаНачисления,
	 |	ВсеДолги.ПросроченныйДолг,
	 |	ВсеДолги.Период КАК Период,
	 |	ВЫБОР
	 |		КОГДА ЕСТЬNULL(НачисленныеПени.ДатаНачисления, 0) = 0
	 |			ТОГДА ВЫБОР
	 |					КОГДА ВсеДолги.ДатаОплаты >= &НачПериода
	 |						ТОГДА ВсеДолги.ДатаОплаты
	 |					ИНАЧЕ &НачПериода
	 |				КОНЕЦ
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА ВсеДолги.ДатаОплаты >= &НачПериода
	 |					ТОГДА ВЫБОР
	 |							КОГДА НАЧАЛОПЕРИОДА(НачисленныеПени.ДатаНачисления, ДЕНЬ) > ВсеДолги.ДатаОплаты
	 |								ТОГДА НачисленныеПени.ДатаНачисления
	 |							ИНАЧЕ ВсеДолги.ДатаОплаты
	 |						КОНЕЦ
	 |				ИНАЧЕ ВЫБОР
	 |						КОГДА НАЧАЛОПЕРИОДА(НачисленныеПени.ДатаНачисления, ДЕНЬ) > &НачПериода
	 |							ТОГДА НачисленныеПени.ДатаНачисления
	 |						ИНАЧЕ &НачПериода
	 |					КОНЕЦ
	 |			КОНЕЦ
	 |	КОНЕЦ КАК ДатаОтсчета,
	 |	ВЫБОР
	 |		КОГДА ВсеДолги.ДатаОплаты >= &НачПериода
	 |			ТОГДА ВсеДолги.ДатаОплаты
	 |		ИНАЧЕ &НачПериода
	 |	КОНЕЦ КАК ДатаОстчетаПоДолгам,
	 |	НачисленныеПени.ДатаНачисления КАК ДатаНачисления,
	 |	НачисленныеПени.ДокументНачисления КАК ДокументНачисления
	 |ИЗ
	 |	(ВЫБРАТЬ
	 |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка КАК Сделка,
	 |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
	 |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
	 |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток,
	 |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовПриход КАК СуммаВзаиморасчетовПриход,
	 |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовРасход КАК СуммаВзаиморасчетовРасход,
	 |		ВЫБОР
	 |			КОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	 |				ТОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка.Дата
	 |			ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка.ДатаОплаты
	 |		КОНЕЦ КАК ДатаОплаты,
	 |		ВЫБОР
	 |			КОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	 |				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка.Дата, ДЕНЬ), ДЕНЬ, &ДобавочныйПериод)
	 |			ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка.ДатаОплаты, ДЕНЬ), ДЕНЬ, &ДобавочныйПериод)
	 |		КОНЕЦ КАК ДатаНачалаНачисления,
	 |		ВЫБОР
	 |			КОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	 |				ТОГДА ВЫБОР
	 |						КОГДА НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка.Дата, ДЕНЬ) >= &НачПериода
	 |							ТОГДА ВЫБОР
	 |									КОГДА НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка.Дата, ДЕНЬ) < НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Период, ДЕНЬ)
	 |										ТОГДА ВЫБОР
	 |												КОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток <= 0
	 |													ТОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток
	 |												ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток
	 |											КОНЕЦ
	 |									ИНАЧЕ 0
	 |								КОНЕЦ
	 |						ИНАЧЕ ВЫБОР
	 |								КОГДА НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Период, ДЕНЬ) > &НачПериода
	 |									ТОГДА ВЫБОР
	 |											КОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток <= 0
	 |												ТОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток
	 |											ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток
	 |										КОНЕЦ
	 |								ИНАЧЕ 0
	 |							КОНЕЦ
	 |					КОНЕЦ
	 |			ИНАЧЕ ВЫБОР
	 |					КОГДА НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка.ДатаОплаты, ДЕНЬ) >= &НачПериода
	 |						ТОГДА ВЫБОР
	 |								КОГДА НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка.ДатаОплаты, ДЕНЬ) < НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Период, ДЕНЬ)
	 |									ТОГДА ВЫБОР
	 |											КОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток <= 0
	 |												ТОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток
	 |											ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток
	 |										КОНЕЦ
	 |								ИНАЧЕ 0
	 |							КОНЕЦ
	 |					ИНАЧЕ ВЫБОР
	 |							КОГДА НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Период, ДЕНЬ) > &НачПериода
	 |								ТОГДА ВЫБОР
	 |										КОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток <= 0
	 |											ТОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток
	 |										ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток
	 |									КОНЕЦ
	 |							ИНАЧЕ 0
	 |						КОНЕЦ
	 |				КОНЕЦ
	 |		КОНЕЦ КАК ПросроченныйДолг,
	 |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Период КАК Период
	 |	ИЗ
	 |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(
	 |			,
	 |			&КонПериода,
	 |			ДЕНЬ,
	 |			,"
	 + ?(ЗначениеНеЗаполнено(Контрагент), "","ДоговорКонтрагента.Владелец = &Контрагент И ") + "
	 |			    Сделка ССЫЛКА Документ.ЗаказПокупателя) КАК ВзаиморасчетыСКонтрагентамиОстаткиИОбороты) КАК ВсеДолги
	 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	 |			МАКСИМУМ(НачисленныеПени.ДатаНачисления) КАК ДатаНачисления,
	 |			МАКСИМУМ(НачисленныеПени.ДокументНачисления) КАК ДокументНачисления,
	 |			НачисленныеПени.Сделка КАК Сделка
	 |		ИЗ
	 |			РегистрНакопления.НачисленныеПени КАК НачисленныеПени
	 |		
	 |		СГРУППИРОВАТЬ ПО
	 |			НачисленныеПени.Сделка) КАК НачисленныеПени
	 |		ПО ВсеДолги.Сделка = НачисленныеПени.Сделка
	 |ГДЕ
	 |	ВсеДолги.ПросроченныйДолг > 0
	 |	И (
	 |		ВЫБОР
	 |		КОГДА ЕСТЬNULL(НачисленныеПени.ДатаНачисления, 0) = 0
	 |			ТОГДА ВЫБОР
	 |					КОГДА ВсеДолги.ДатаОплаты >= &НачПериода
	 |						ТОГДА ВсеДолги.ДатаОплаты
	 |					ИНАЧЕ &НачПериода
	 |				КОНЕЦ
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА ВсеДолги.ДатаОплаты >= &НачПериода
	 |					ТОГДА ВЫБОР
	 |							КОГДА НАЧАЛОПЕРИОДА(НачисленныеПени.ДатаНачисления, ДЕНЬ) > ВсеДолги.ДатаОплаты
	 |								ТОГДА НачисленныеПени.ДатаНачисления
	 |							ИНАЧЕ ВсеДолги.ДатаОплаты
	 |						КОНЕЦ
	 |				ИНАЧЕ ВЫБОР
	 |						КОГДА НАЧАЛОПЕРИОДА(НачисленныеПени.ДатаНачисления, ДЕНЬ) > &НачПериода
	 |							ТОГДА НачисленныеПени.ДатаНачисления
	 |						ИНАЧЕ &НачПериода
	 |					КОНЕЦ
	 |			КОНЕЦ
	 |	КОНЕЦ  < Период)
     |
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Период
	 |ИТОГИ ПО
	 |	Сделка";
	
	Результат = Запрос.Выполнить();
	
	ТЗапроса = Результат.Выгрузить();
	ТЗапроса.Очистить();
	ТДоков = Результат.Выгрузить();
	ТДоков.Очистить();
	
	ТЗапроса.Колонки.Добавить("СДаты");
	ТЗапроса.Колонки.Добавить("ПОДату");
	ТЗапроса.Колонки.Добавить("КолДней");
	ТЗапроса.Колонки.Добавить("Пени");

	
	ВыборкаПоЗаказам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоЗаказам.Следующий() Цикл
	
		ВыборкаПоДатам = ВыборкаПоЗаказам.Выбрать();
		
		ДатаНач = "";
		Пока ВыборкаПоДатам.Следующий() Цикл
			
			Если ЗначениеНеЗаполнено(ДатаНач) Тогда
			
				ДатаНач = ВыборкаПоДатам.ДатаОтсчета;
				
			КонецЕсли;
			
			Добавлен = Ложь;
			
			Если Цел((ВыборкаПоДатам.Период - ДатаНач)/3600/24) > 0 Тогда
				
				СтрокаТЗ = ТЗапроса.Добавить();
				СтрокаТЗ.Сделка = ВыборкаПоДатам.Сделка;
				СтрокаТЗ.ДоговорКонтрагента = ВыборкаПоДатам.ДоговорКонтрагента;
				СтрокаТЗ.СуммаВзаиморасчетовНачальныйОстаток = ВыборкаПоДатам.СуммаВзаиморасчетовНачальныйОстаток;
				СтрокаТЗ.СуммаВзаиморасчетовПриход = ВыборкаПоДатам.СуммаВзаиморасчетовПриход;
				СтрокаТЗ.СуммаВзаиморасчетовРасход = ВыборкаПоДатам.СуммаВзаиморасчетовРасход;
				СтрокаТЗ.СуммаВзаиморасчетовКонечныйОстаток = ВыборкаПоДатам.СуммаВзаиморасчетовКонечныйОстаток;
				СтрокаТЗ.Период = ВыборкаПоДатам.Период;
				СтрокаТЗ.Контрагент = ВыборкаПоДатам.Контрагент;
				СтрокаТЗ.ПросроченныйДолг = ВыборкаПоДатам.ПросроченныйДолг;
				СтрокаТЗ.ДатаНачалаНачисления = ВыборкаПоДатам.ДатаНачалаНачисления;
				СтрокаТЗ.ДатаНачисления = ВыборкаПоДатам.ДатаНачисления;
				СтрокаТЗ.ДатаОплаты = ВыборкаПоДатам.ДатаОплаты;
				СтрокаТЗ.ДатаОстчетаПоДолгам = ВыборкаПоДатам.ДатаОстчетаПоДолгам;
				
				СтрокаТЗ.ДокументНачисления = ВыборкаПоДатам.ДокументНачисления;
				СтрокаТЗ.ДатаОтсчета = ВыборкаПоДатам.ДатаОтсчета;
				СтрокаТЗ.СДаты = ДатаНач;
				СтрокаТЗ.ПоДату = ВыборкаПоДатам.Период;
				СтрокаТЗ.КолДней = Цел((ВыборкаПоДатам.Период - ?(НачалоДня(ДатаНач) = НачалоДня(ВыборкаПоДатам.ДатаОплаты), ВыборкаПоДатам.ДатаНачалаНачисления, ДатаНач))/3600/24);
				СтрокаТЗ.Пени = ?(СтрокаТЗ.СуммаВзаиморасчетовКонечныйОстаток  > 0, СтрокаТЗ.СуммаВзаиморасчетовКонечныйОстаток * СтрокаТЗ.КолДней * 0.038 / 100, СтрокаТЗ.СуммаВзаиморасчетовНачальныйОстаток * ?(СтрокаТЗ.КолДней < 0, 0, СтрокаТЗ.КолДней) * 0.038 / 100);
				Добавлен = Истина;
				
			КонецЕсли; 
			
			
			ДатаНач = ВыборкаПоДатам.Период;
			
			
		КонецЦикла; 
	
	КонецЦикла; 
	
	ТЗапроса.Сортировать("Сделка, Период");
	
	//Расчет = ТЗапроса.Скопировать();
	//
	//ЭлементыФормы.Расчет.СоздатьКолонки();
	
	ТИтогов = ТЗапроса.Скопировать();
	
	ТИтогов.Свернуть("Сделка", "Пени");
	
	ТИтогов.Колонки.Добавить("ДолгНаДатуНачисления");
	ТИтогов.Колонки.Добавить("Договор");
	
	Для каждого СтрИтог Из ТИтогов Цикл
	
		СтрИтог.Договор = СтрИтог.Сделка.ДоговорКонтрагента;
		СтруктураОтбора = Новый Структура(); // для отбора остатков взаиморасчетов
		СтруктураОтбора.Вставить("ДоговорКонтрагента", СтрИтог.Договор);
		СтруктураОтбора.Вставить("Сделка", СтрИтог.Сделка);
		СтрИтог.ДолгНаДатуНачисления = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.Остатки(Дата,
				СтруктураОтбора,"ДоговорКонтрагента,Сделка","СуммаВзаиморасчетов").Итог("СуммаВзаиморасчетов");
	
	КонецЦикла; 
	
	Для каждого СтрокаИтогов Из ТИтогов Цикл
	
		СтрокаДока = ДокументОбъект.Пени.Добавить();
		СтрокаДока.Сделка = СтрокаИтогов.Сделка;
	    СтрокаДока.ДоговорЗадолженности = СтрокаИтогов.Сделка.ДоговорКонтрагента;
		СтрокаДока.Пени = СтрокаИтогов.Пени;
		СтрокаДока.ДатаОплаты = СтрокаИтогов.Сделка.ДатаОплаты;
		СтрокаДока.ДолгНаДатуНачисления = СтрокаИтогов.ДолгНаДатуНачисления;
		
	КонецЦикла; 
	
	Для каждого СтрокаИтогов Из ТЗапроса Цикл
	
		 СтрокаДока = ДокументОбъект.НачисленияПоЗаказам.Добавить();
		 СтрокаДока.Сделка = СтрокаИтогов.Сделка;
		 СтрокаДока.НачОстаток = СтрокаИтогов.СуммаВзаиморасчетовНачальныйОстаток;
		 СтрокаДока.Приход = СтрокаИтогов.СуммаВзаиморасчетовПриход;
		 СтрокаДока.Расход = СтрокаИтогов.СуммаВзаиморасчетовРасход;
		 СтрокаДока.КонОстаток = СтрокаИтогов.СуммаВзаиморасчетовКонечныйОстаток;
		 СтрокаДока.Период = СтрокаИтогов.Период;
		 СтрокаДока.ДатаОтсчета = СтрокаИтогов.ДатаОтсчета;
		 СтрокаДока.ПериодС = СтрокаИтогов.СДаты;
		 СтрокаДока.ПериодПо = СтрокаИтогов.ПОДату;
		 СтрокаДока.СуммаДолга = СтрокаИтогов.ПросроченныйДолг;
		 СтрокаДока.КоличествоДней = СтрокаИтогов.КолДней;
		 СтрокаДока.Ставка = 0.038;
		 СтрокаДока.Пени = СтрокаИтогов.Пени;
	
	КонецЦикла; 
	
КонецФункции // ()
	
Функция ЗаполнитьТаблицуПенейПоДоговорамОтветственногоЛица(Контрагент, Дата, ДокументОбъект, Сделка = Неопределено, Ставка = 0)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(Дата(2007, 01, 01, 0, 0, 0)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("ДобавочныйПериод", ?(Константы.ИспользоватьДобавочныйПериодПени.Получить(), 
													Константы.КоличествоДнейДобавочногоПериода.Получить(),
													0));
													
	Запрос.УстановитьПараметр("ОтветственноеЛицо", ПараметрыСеанса.ТекущийПользователь);	
	//Федорова Ек. 20081121
	//если константа установлена, то будет выполняться отбор по ответственному в договре продажи
	ОтборПоОтветственному = Константы.ОплатыРаспределяютМенеджеры.Получить();
	
	Запрос.Текст =
	
	 "ВЫБРАТЬ
	 |	ВсеДолги.Сделка КАК Сделка,
	 |	ВсеДолги.СуммаВзаиморасчетовНачальныйОстаток,
	 |	ВсеДолги.СуммаВзаиморасчетовКонечныйОстаток,
	 |	ВсеДолги.СуммаВзаиморасчетовПриход,
	 |	ВсеДолги.СуммаВзаиморасчетовРасход,
	 |	ВсеДолги.ДатаОплаты,
	 |	ВсеДолги.Сделка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	 |	ВсеДолги.Контрагент,
	 |	ВсеДолги.ДатаНачалаНачисления,
	 |	ВсеДолги.ПросроченныйДолг,
	 |	ВсеДолги.Период КАК Период,
	 |	ВЫБОР
	 |		КОГДА ЕСТЬNULL(НачисленныеПени.ДатаНачисления, 0) = 0
	 |			ТОГДА ВЫБОР
	 |					КОГДА ВсеДолги.ДатаОплаты >= &НачПериода
	 |						ТОГДА ВсеДолги.ДатаОплаты
	 |					ИНАЧЕ &НачПериода
	 |				КОНЕЦ
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА ВсеДолги.ДатаОплаты >= &НачПериода
	 |					ТОГДА ВЫБОР
	 |							КОГДА НАЧАЛОПЕРИОДА(НачисленныеПени.ДатаНачисления, ДЕНЬ) > ВсеДолги.ДатаОплаты
	 |								ТОГДА НачисленныеПени.ДатаНачисления
	 |							ИНАЧЕ ВсеДолги.ДатаОплаты
	 |						КОНЕЦ
	 |				ИНАЧЕ ВЫБОР
	 |						КОГДА НАЧАЛОПЕРИОДА(НачисленныеПени.ДатаНачисления, ДЕНЬ) > &НачПериода
	 |							ТОГДА НачисленныеПени.ДатаНачисления
	 |						ИНАЧЕ &НачПериода
	 |					КОНЕЦ
	 |			КОНЕЦ
	 |	КОНЕЦ КАК ДатаОтсчета,
	 |	ВЫБОР
	 |		КОГДА ВсеДолги.ДатаОплаты >= &НачПериода
	 |			ТОГДА ВсеДолги.ДатаОплаты
	 |		ИНАЧЕ &НачПериода
	 |	КОНЕЦ КАК ДатаОстчетаПоДолгам,
	 |	НачисленныеПени.ДатаНачисления КАК ДатаНачисления,
	 |	НачисленныеПени.ДокументНачисления КАК ДокументНачисления
	 |ИЗ
	 |	(ВЫБРАТЬ
	 |		Сделка КАК Сделка,
	 |		ДоговорКонтрагента.Владелец КАК Контрагент,
	 |		СуммаВзаиморасчетовНачальныйОстаток,
	 |		СуммаВзаиморасчетовКонечныйОстаток ,
	 |		СуммаВзаиморасчетовПриход,
	 |		СуммаВзаиморасчетовРасход,
	 
	 |		ВЫБОР
	 |			КОГДА Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	 |				ТОГДА Сделка.Дата
	 |			ИНАЧЕ Сделка.ДатаОплаты
	 |		КОНЕЦ КАК ДатаОплаты,
	 |		ВЫБОР
	 |			КОГДА Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	 |				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Сделка.Дата, ДЕНЬ), ДЕНЬ, &ДобавочныйПериод)
	 |			ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Сделка.ДатаОплаты, ДЕНЬ), ДЕНЬ, &ДобавочныйПериод)
	 |		КОНЕЦ КАК ДатаНачалаНачисления,
	 |		ВЫБОР
	 |			КОГДА Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) // когда дата оплаты не указана
	 |				ТОГДА ВЫБОР
	 |						КОГДА НАЧАЛОПЕРИОДА(Сделка.Дата, ДЕНЬ) >= &НачПериода   // дата документа больше даты автоматич. рассчета пеней
	 |							ТОГДА ВЫБОР
	 |									КОГДА НАЧАЛОПЕРИОДА(Сделка.Дата, ДЕНЬ) < НАЧАЛОПЕРИОДА(Период, ДЕНЬ) 
	 |											И СуммаВзаиморасчетовНачальныйОстаток  >= 0 ТОГДА // когда дата документа меньше даты расчета пеней
	 |													СуммаВзаиморасчетовНачальныйОстаток
	 |												ИНАЧЕ 0
	 |								КОНЕЦ
	 |						ИНАЧЕ ВЫБОР
	 |								КОГДА НАЧАЛОПЕРИОДА(Период, ДЕНЬ) > &НачПериода И СуммаВзаиморасчетовНачальныйОстаток>=0
	 |												ТОГДА СуммаВзаиморасчетовНачальныйОстаток
	 |								ИНАЧЕ 0
	 |							КОНЕЦ
	 |					КОНЕЦ
	 |			ИНАЧЕ ВЫБОР
	 |					КОГДА НАЧАЛОПЕРИОДА(Сделка.ДатаОплаты, ДЕНЬ) >= &НачПериода
	 |						ТОГДА ВЫБОР
	 |								КОГДА НАЧАЛОПЕРИОДА(Сделка.ДатаОплаты, ДЕНЬ) < НАЧАЛОПЕРИОДА(Период, ДЕНЬ)
	 |								И СуммаВзаиморасчетовНачальныйОстаток >= 0
	 |												ТОГДА СуммаВзаиморасчетовНачальныйОстаток
	 |								ИНАЧЕ 0
	 |							КОНЕЦ
	 |					ИНАЧЕ ВЫБОР
	 |							КОГДА НАЧАЛОПЕРИОДА(Период, ДЕНЬ) > &НачПериода И СуммаВзаиморасчетовНачальныйОстаток >= 0  
	 |												ТОГДА СуммаВзаиморасчетовНачальныйОстаток
	 |							ИНАЧЕ 0
	 |						КОНЕЦ
	 |				КОНЕЦ
	 |		КОНЕЦ КАК ПросроченныйДолг,
	 |		Период КАК Период
	 |	ИЗ
	 |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(
	 |			,
	 |			&КонПериода,
	 |			ДЕНЬ,
	 |			,ДоговорКонтрагента.Владелец = &Контрагент" + ?(ОтборПоОтветственному, " И ДоговорКонтрагента.ОтветственноеЛицо=&ОтветственноеЛицо", "") + " И Сделка ССЫЛКА Документ.ЗаказПокупателя)) КАК ВсеДолги
	 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	 |			МАКСИМУМ(НачисленныеПени.ДатаНачисления) КАК ДатаНачисления,
	 |			МАКСИМУМ(НачисленныеПени.ДокументНачисления) КАК ДокументНачисления,
	 |			НачисленныеПени.Сделка КАК Сделка
	 |		ИЗ
	 |			РегистрНакопления.НачисленныеПени КАК НачисленныеПени
	 |		
	 |		СГРУППИРОВАТЬ ПО
	 |			НачисленныеПени.Сделка) КАК НачисленныеПени
	 |		ПО ВсеДолги.Сделка = НачисленныеПени.Сделка
	 |ГДЕ
	 |	ВсеДолги.ПросроченныйДолг > 0
	 |	И (
	 |		ВЫБОР
	 |		КОГДА ЕСТЬNULL(НачисленныеПени.ДатаНачисления, 0) = 0
	 |			ТОГДА ВЫБОР
	 |					КОГДА ВсеДолги.ДатаОплаты >= &НачПериода
	 |						ТОГДА ВсеДолги.ДатаОплаты
	 |					ИНАЧЕ &НачПериода
	 |				КОНЕЦ
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА ВсеДолги.ДатаОплаты >= &НачПериода
	 |					ТОГДА ВЫБОР
	 |							КОГДА НАЧАЛОПЕРИОДА(НачисленныеПени.ДатаНачисления, ДЕНЬ) > ВсеДолги.ДатаОплаты
	 |								ТОГДА НачисленныеПени.ДатаНачисления
	 |							ИНАЧЕ ВсеДолги.ДатаОплаты
	 |						КОНЕЦ
	 |				ИНАЧЕ ВЫБОР
	 |						КОГДА НАЧАЛОПЕРИОДА(НачисленныеПени.ДатаНачисления, ДЕНЬ) > &НачПериода
	 |							ТОГДА НачисленныеПени.ДатаНачисления
	 |						ИНАЧЕ &НачПериода
	 |					КОНЕЦ
	 |			КОНЕЦ
	 |	КОНЕЦ  < Период)
     |
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Период
	 |ИТОГИ ПО
	 |	Сделка";
	
	Результат = Запрос.Выполнить();
	
	ТЗапроса = Результат.Выгрузить();
	ТЗапроса.Очистить();
	ТДоков = Результат.Выгрузить();
	ТДоков.Очистить();
	
	ТЗапроса.Колонки.Добавить("СДаты");
	ТЗапроса.Колонки.Добавить("ПОДату");
	ТЗапроса.Колонки.Добавить("КолДней");
	ТЗапроса.Колонки.Добавить("Пени");

	
	ВыборкаПоЗаказам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоЗаказам.Следующий() Цикл
	
		ВыборкаПоДатам = ВыборкаПоЗаказам.Выбрать();
		
		ДатаНач = "";
		Пока ВыборкаПоДатам.Следующий() Цикл
			
			Если ЗначениеНеЗаполнено(ДатаНач) Тогда
			
				ДатаНач = ВыборкаПоДатам.ДатаОтсчета;
				
			КонецЕсли;
			
			Добавлен = Ложь;
			
			Если Цел((ВыборкаПоДатам.Период - ДатаНач)/3600/24) > 0 Тогда
				
				СтрокаТЗ = ТЗапроса.Добавить();
				СтрокаТЗ.Сделка = ВыборкаПоДатам.Сделка;
				СтрокаТЗ.ДоговорКонтрагента = ВыборкаПоДатам.ДоговорКонтрагента;
				СтрокаТЗ.СуммаВзаиморасчетовНачальныйОстаток = ВыборкаПоДатам.СуммаВзаиморасчетовНачальныйОстаток;
				СтрокаТЗ.СуммаВзаиморасчетовПриход = ВыборкаПоДатам.СуммаВзаиморасчетовПриход;
				СтрокаТЗ.СуммаВзаиморасчетовРасход = ВыборкаПоДатам.СуммаВзаиморасчетовРасход;
				СтрокаТЗ.СуммаВзаиморасчетовКонечныйОстаток = ВыборкаПоДатам.СуммаВзаиморасчетовКонечныйОстаток;
				СтрокаТЗ.Период = ВыборкаПоДатам.Период;
				СтрокаТЗ.Контрагент = ВыборкаПоДатам.Контрагент;
				СтрокаТЗ.ПросроченныйДолг = ВыборкаПоДатам.ПросроченныйДолг;
				СтрокаТЗ.ДатаНачалаНачисления = ВыборкаПоДатам.ДатаНачалаНачисления;
				СтрокаТЗ.ДатаНачисления = ВыборкаПоДатам.ДатаНачисления;
				СтрокаТЗ.ДатаОплаты = ВыборкаПоДатам.ДатаОплаты;
				СтрокаТЗ.ДатаОстчетаПоДолгам = ВыборкаПоДатам.ДатаОстчетаПоДолгам;
				
				СтрокаТЗ.ДокументНачисления = ВыборкаПоДатам.ДокументНачисления;
				СтрокаТЗ.ДатаОтсчета = ВыборкаПоДатам.ДатаОтсчета;
				СтрокаТЗ.СДаты = ДатаНач;
				СтрокаТЗ.ПоДату = ВыборкаПоДатам.Период;
				СтрокаТЗ.КолДней = Цел((ВыборкаПоДатам.Период - ?(НачалоДня(ДатаНач) = НачалоДня(ВыборкаПоДатам.ДатаОплаты), ВыборкаПоДатам.ДатаНачалаНачисления, ДатаНач))/3600/24);
				
				 // ставка пеней определяется в зависимости от периодического регистра сведений СтавкиПенейПоДоговорам
				 // ДатаНач или СтрокаТЗ.СДаты - как раз и определяют какую ставку брать
				 // ставка по начислениям берется с даты = ДатаНач+1ДЕНЬ, т.к. начальная дата в начислении пени не участвует
				СтавкаПеней=0;//ПолучитьСтавкуПенейПоДоговору(ВыборкаПоДатам.ДоговорКонтрагента,НачалоДНя(КонецДня(ДатаНач)+1));
				
				СтрокаТЗ.Пени = СтрокаТЗ.ПросроченныйДолг* СтрокаТЗ.КолДней * СтавкаПеней / 100;
				Добавлен = Истина;
				
			КонецЕсли; 
			
			
			ДатаНач = ВыборкаПоДатам.Период;
			
			
		КонецЦикла; 
	
	КонецЦикла; 
	
	ТЗапроса.Сортировать("Сделка, Период");
	ТИтогов = ТЗапроса.Скопировать();
	ТИтогов.Свернуть("Сделка", "Пени");
	
	ТИтогов.Колонки.Добавить("ДолгНаДатуНачисления");
	ТИтогов.Колонки.Добавить("Договор");
	
	Для каждого СтрИтог Из ТИтогов Цикл
	
		СтрИтог.Договор = СтрИтог.Сделка.ДоговорКонтрагента;
		СтруктураОтбора = Новый Структура(); // для отбора остатков взаиморасчетов
		СтруктураОтбора.Вставить("ДоговорКонтрагента", СтрИтог.Договор);
		СтруктураОтбора.Вставить("Сделка", СтрИтог.Сделка);
		СтрИтог.ДолгНаДатуНачисления = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.Остатки(Дата,
				СтруктураОтбора,"ДоговорКонтрагента,Сделка","СуммаВзаиморасчетов").Итог("СуммаВзаиморасчетов");
	
	КонецЦикла; 
	
	Для каждого СтрокаИтогов Из ТИтогов Цикл
	
		СтрокаДока = ДокументОбъект.Пени.Добавить();
		СтрокаДока.Сделка = СтрокаИтогов.Сделка;
	    СтрокаДока.ДоговорЗадолженности = СтрокаИтогов.Сделка.ДоговорКонтрагента;
		СтрокаДока.Пени = СтрокаИтогов.Пени;
		СтрокаДока.ДатаОплаты = СтрокаИтогов.Сделка.ДатаОплаты;
		СтрокаДока.ДолгНаДатуНачисления = СтрокаИтогов.ДолгНаДатуНачисления;
		
	КонецЦикла; 
	
	Для каждого СтрокаИтогов Из ТЗапроса Цикл
	
		 СтрокаДока = ДокументОбъект.НачисленияПоЗаказам.Добавить();
		 СтрокаДока.Сделка = СтрокаИтогов.Сделка;
		 СтрокаДока.НачОстаток = СтрокаИтогов.СуммаВзаиморасчетовНачальныйОстаток;
		 СтрокаДока.Приход = СтрокаИтогов.СуммаВзаиморасчетовПриход;
		 СтрокаДока.Расход = СтрокаИтогов.СуммаВзаиморасчетовРасход;
		 СтрокаДока.КонОстаток = СтрокаИтогов.СуммаВзаиморасчетовКонечныйОстаток;
		 СтрокаДока.Период = СтрокаИтогов.Период;
		 СтрокаДока.ДатаОтсчета = СтрокаИтогов.ДатаОтсчета;
		 СтрокаДока.ПериодС = СтрокаИтогов.СДаты;
		 СтрокаДока.ПериодПо = СтрокаИтогов.ПОДату;
		 СтрокаДока.СуммаДолга = СтрокаИтогов.ПросроченныйДолг;
		 СтрокаДока.КоличествоДней = СтрокаИтогов.КолДней;
		 // ставка по начислениям берется с даты = ДатаНач+1ДЕНЬ, т.к. начальная дата в начислении пени не участвует
		 СтрокаДока.Ставка = 0;//ПолучитьСтавкуПенейПоДоговору(СтрокаДока.Сделка.ДоговорКонтрагента,НачалоДНя(КонецДня(СтрокаИтогов.СДаты)+1));
		 СтрокаДока.Пени = СтрокаИтогов.Пени;
	
	КонецЦикла; 
	
КонецФункции	

Функция НачислитьПени(Контрагент, ДатаНачисления, Сделка = Неопределено, ДокументОбъект = Неопределено, Ставка = 0) Экспорт

	//Результат = ПолучитьПросроченнуюЗадолженностьНаДату(Контрагент, ДатаНачисления, Сделка);
	
	ТаблицаПени = ЗаполнитьТаблицуПенейПоДоговорамОтветственногоЛица(Контрагент, ДатаНачисления, ДокументОбъект, Сделка, Ставка);
	
		
	Если ДокументОбъект <> Неопределено Тогда
	
		Возврат Истина;
		
	Иначе
		
		Возврат ТаблицаПени;
		
	КонецЕсли; 	
	

КонецФункции // НачислитьПени(Контрагент, Сделка = Неопределенно)

Функция ПроверитьВыставление(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.Текст = 

	"ВЫБРАТЬ
	|	НачисленныеПениОбороты.СуммаРасход
	|ИЗ
	|	РегистрНакопления.НачисленныеПени.Обороты КАК НачисленныеПениОбороты
	|ГДЕ
	|	НачисленныеПениОбороты.ДокументНачисления = &Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Истина;
		
	Иначе 
		
		Возврат Ложь;
		
	КонецЕсли; 


КонецФункции // ПроверитьВыставление()

Функция ПолучитьОстатокПоПеням(Контрагент, Дата) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ТипПени", Справочники.ТипыДоговоров.Пени);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата) + 1);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|		&Дата,
	|		ДоговорКонтрагента.Владелец = &Контрагент
	|		    И ДоговорКонтрагента.ТипДоговора = &ТипПени) КАК ВзаиморасчетыСКонтрагентамиОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.СуммаВзаиморасчетовОстаток;
		
	Иначе 
		
		Возврат 0;
		
	КонецЕсли; 

	

КонецФункции // ()

Процедура ЗаполнитьОстаткиПоПеням(ДокументОбъект, Организация, Контрагент) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленныеПениОстатки.Контрагент,
	|	НачисленныеПениОстатки.ДоговорЗадолженности,
	|	НачисленныеПениОстатки.ДоговорНачисления,
	|	НачисленныеПениОстатки.Сделка,
	|	НачисленныеПениОстатки.ДатаНачисления,
	|	НачисленныеПениОстатки.ДокументНачисления,
	|	НачисленныеПениОстатки.СуммаОстаток,
	|	НачисленныеПениОстатки.ПениОстаток
	|ИЗ
	|	РегистрНакопления.НачисленныеПени.Остатки(&Дата, Контрагент = &Контрагент) КАК НачисленныеПениОстатки";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтрокаДокумента = ДокументОбъект.Пени.Добавить();
		
		СтрокаДокумента.ДокументНачисления = Результат.ДокументНачисления;
		СтрокаДокумента.Сделка = Результат.Сделка;
		СтрокаДокумента.Пени = Результат.ПениОстаток;
		СтрокаДокумента.Сумма = Результат.СуммаОстаток;
		СтрокаДокумента.ДатаНачисления = Результат.ДатаНачисления;
		СтрокаДокумента.ДоговорНачисления = Результат.ДоговорНачисления;
		СтрокаДокумента.ДоговорЗадолженности = Результат.ДоговорЗадолженности;
		СтрокаДокумента.Контрагент = Результат.Контрагент;
	
	КонецЦикла; 

КонецПроцедуры
 
Процедура ВысталениеПени(ДокументОбъект, ДокументОснование) Экспорт

	МетаданныеДокумента          = ДокументОбъект.Метаданные();
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();

	// Признак пеней.
	Если ЕстьРеквизитДокумента("ВыставлениеПени", МетаданныеДокумента) Тогда
	   	ДокументОбъект.ВыставлениеПени = Истина;
	КонецЕсли;

	
	// Организация.
	Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	   И ЕстьРеквизитДокумента("Организация", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Организация = ДокументОснование.Организация;
	КонецЕсли;

	// Подразделение.
	Если ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
	   И ЕстьРеквизитДокумента("Подразделение", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Подразделение = ДокументОснование.Подразделение;
	КонецЕсли;


	// Контрагент.
	Если ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента)
	   И ЕстьРеквизитДокумента("Контрагент", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
	КонецЕсли;

	// ДоговорКонтрагента.
	Если ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)
	   И ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования) 
	   И (НЕ ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	      ИЛИ ДокументОбъект.Организация = ДокументОснование.ДоговорКонтрагента.Организация) Тогда

			ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;

		// КурсВзаиморасчетов.
		Если ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата());
			ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;

			// КратностьВзаиморасчетов.
			Если ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Касса
	Если ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если Не ЗначениеНеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы") Тогда
				ДокументОбъект.Касса = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ЕстьРеквизитДокумента("Касса", МетаданныеДокументаОснования) Тогда
			Если Не ЗначениеНеЗаполнено(ДокументОснование.Касса) Тогда
				ДокументОбъект.Касса = ДокументОснование.Касса;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Банковский счет 
	Если ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если Не ЗначениеНеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если Не ЗначениеНеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.БанковскийСчет;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// Банковский счет организации
	Если ЕстьРеквизитДокумента("БанковскийСчетОрганизации", МетаданныеДокумента)
	   И ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда

		Если ЗначениеНеЗаполнено(ДокументОбъект.БанковскийСчетОрганизации)
		  И НЕ ЗначениеНеЗаполнено(ДокументОбъект.БанковскийСчет)Тогда
			ДокументОбъект.БанковскийСчетОрганизации = ДокументОснование.БанковскийСчет;
		КонецЕсли;
	КонецЕсли;

	// ВалютаДокумента.
	Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	   И ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаОснования) Тогда

		// Если есть касса или банковский счет, то валюта должна браться только оттуда
		Если ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда
			Если Не ЗначениеНеЗаполнено(ДокументОбъект.Касса) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			КонецЕсли;
		ИначеЕсли ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда
			Если Не ЗначениеНеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчет.ВалютаДенежныхСредств;
		    КонецЕсли;
		Иначе
			ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		КонецЕсли;

		// КурсДокумента.
		Если ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
			СтруктураКурсаДокумента = ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ТекущаяДата());
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

			// КратностьДокумента.
			Если ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// ТипЦен.
	Если ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ТипЦен = ДокументОснование.ТипЦен;
	КонецЕсли;

	// УчитыватьНДС.
	Если ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
	   И ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.УчитыватьНДС = ДокументОснование.УчитыватьНДС;
	КонецЕсли;

	// СуммаВключаетНДС.
	Если ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
	   И ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СуммаВключаетНДС = ДокументОснование.СуммаВключаетНДС;
	КонецЕсли;

	// ОтражатьВУправленческомУчете.
	// Если есть в основании, копируем из основания, иначе - Истина.
	Если ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		//Если ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокументаОснования) Тогда
		//	ДокументОбъект.ОтражатьВУправленческомУчете = ДокументОснование.ОтражатьВУправленческомУчете;
		//Иначе
			ДокументОбъект.ОтражатьВУправленческомУчете = Истина;
		//КонецЕсли;
	КонецЕсли;

	Если ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		//Если ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокументаОснования) Тогда
		//	ДокументОбъект.ОтражатьВБухгалтерскомУчете = ДокументОснование.ОтражатьВБухгалтерскомУчете;
		//Иначе
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = Ложь;
		//КонецЕсли;
	КонецЕсли;

	Если ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
		//Если ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокументаОснования) Тогда
		//	ДокументОбъект.ОтражатьВНалоговомУчете = ДокументОснование.ОтражатьВНалоговомУчете;
		//Иначе
			ДокументОбъект.ОтражатьВНалоговомУчете = Ложь;
		//КонецЕсли;
	КонецЕсли;
	
	//Расчет услуги пени
	
	ЗаполнитьТЧУслуги(ДокументОбъект, ДокументОснование);	
                    
КонецПроцедуры

Процедура ПолучитьДанныеСтрокиПени(ДокументОбъект, СтрокаДокумента) Экспорт

	СтрокаПеней = НачислитьПени(ДокументОбъект.Контрагент, ДокументОбъект.ДатаНачисления, СтрокаДокумента.Сделка);
	
	Если СтрокаПеней.Количество() > 0 Тогда
	
		СтрокаДокумента.ДоговорЗадолженности = СтрокаПеней[0].Договор;
		СтрокаДокумента.Количество = СтрокаПеней[0].ДнейПросрочено;
		СтрокаДокумента.Ставка = СтрокаПеней[0].Ставка;
		СтрокаДокумента.ПросроченнаяСумма = СтрокаПеней[0].Сумма;
        СтрокаДокумента.Пени = СтрокаПеней[0].Пени;
        СтрокаДокумента.ДатаОплаты = СтрокаПеней[0].ДатаОплаты;
        СтрокаДокумента.ДатаПредыдущегоНачисления = СтрокаПеней[0].ДатаПредыдущегоНачисления;

	КонецЕсли; 
	

КонецПроцедуры

Процедура ОткрытьЖурналНачисленныеПениДляМенеджера() Экспорт
	
	Если НЕ Документы.НачислениеПени.ПолучитьФормуСписка().Открыта() Тогда
	
		ФормаСписка = Документы.НачислениеПени.ПолучитьФормуСписка();
		ФормаСписка.ДляМенеджера = Истина;
		ФормаСписка.Открыть();	
	
	КонецЕсли; 
		

КонецПроцедуры

Процедура ОткрытьЖурналВыставленныеПениДляМенеджера() Экспорт

	Если НЕ Документы.РеализацияТоваровУслуг.ПолучитьФормуСписка().Открыта() Тогда
		
		ФормаСписка = Документы.РеализацияТоваровУслуг.ПолучитьФормуСписка();
		ФормаСписка.Пени = Истина;
		ФормаСписка.ДляМенеджера = Истина;
		Если СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Серков" ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Бондаренко Е.Д. (снабжение)" Тогда
			ФормаСписка.ДляМенеджера = Ложь;
		КонецЕсли;
		ФормаСписка.Открыть();	
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОткрытьЖурналЗакрытыеПениДляМенеджера() Экспорт

	Документы.ЗакрытиеНачислений.ПолучитьФормуСписка().Открыть();	

КонецПроцедуры

Процедура ОткрытьЖурналНачисленныеПени() Экспорт

	Если НЕ Документы.НачислениеПени.ПолучитьФормуСписка().Открыта() Тогда
	
		Документы.НачислениеПени.ПолучитьФормуСписка().Открыть();	
	
	КонецЕсли; 
	

КонецПроцедуры

Процедура ОткрытьЖурналВыставленныеПени() Экспорт

	Если НЕ Документы.РеализацияТоваровУслуг.ПолучитьФормуСписка().Открыта() Тогда
		
		ФормаСписка = Документы.РеализацияТоваровУслуг.ПолучитьФормуСписка();
		ФормаСписка.Пени = Истина;
		ФормаСписка.Открыть();	
		
	КонецЕсли; 

КонецПроцедуры

Процедура ОткрытьЖурналЗакрытыеПени() Экспорт

	Документы.ЗакрытиеНачислений.ПолучитьФормуСписка().Открыть();	

КонецПроцедуры

Процедура ПроверитьОплатыПоДокументу(Документ, Отказ) Экспорт
	
	Отказ = Ложь;
	
	Если ТипЗнч(Документ.Сделка) = Тип("ДокументСсылка.НачислениеПени") Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сделка", Документ.Сделка);
		Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентами.Регистратор,
		|	ВзаиморасчетыСКонтрагентами.Сделка,
		|	ВзаиморасчетыСКонтрагентами.ВидДвижения,
		|	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.Сделка = &Сделка
		|	И ВзаиморасчетыСКонтрагентами.ВидДвижения = &Расход";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
		
			СообщитьОбОшибке("По документу " + Документ + " производились оплаты:", Отказ);	
			
			Пока Выборка.Следующий() Цикл
			
				Сообщить(Строка(Выборка.Регистратор) + " на сумму " + Строка(Выборка.СуммаВзаиморасчетов));
			
			КонецЦикла; 
			
		    СообщитьОбОшибке("Необходимо отменить проведение данных документов!", Отказ);
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	
КонецПроцедуры
	
Процедура ПроверитьНачисленияПени(Документ, Отказ) Экспорт
	
	Отказ = Ложь;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		Если ТипЗнч(Документ.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Сделка", Документ.Сделка);
			Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НачисленныеПени.Сделка,
			|	НачисленныеПени.ДатаНачисления,
			|	НачисленныеПени.ДокументНачисления,
			|	НачисленныеПени.ВидДвижения
			|ИЗ
			|	РегистрНакопления.НачисленныеПени КАК НачисленныеПени
			|ГДЕ
			|	НачисленныеПени.Сделка = &Сделка
			|	И НачисленныеПени.ВидДвижения = &Приход";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() > 0 Тогда
				
				//Отказ = Истина;
				
				//СообщитьОбОшибке("По документу " + Документ + " производились начисления:", Отказ);	
				
				Сообщить("По документу " + Документ + " производились начисления пени:");
				
				Пока Выборка.Следующий() Цикл
					
					Сообщить(Строка(Выборка.ДокументНачисления));
					
				КонецЦикла; 
				
				//СообщитьОбОшибке("Необходимо отменить проведение данных документов!", Отказ);
				
			КонецЕсли; 
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		
		СписокСделок = Документ.РасшифровкаПлатежа.ВыгрузитьКолонку("Сделка");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сделка", СписокСделок);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленныеПени.Сделка,
		|	НачисленныеПени.ДатаНачисления,
		|	НачисленныеПени.ДокументНачисления,
		|	НачисленныеПени.ВидДвижения
		|ИЗ
		|	РегистрНакопления.НачисленныеПени КАК НачисленныеПени
		|ГДЕ
		|	НачисленныеПени.Сделка В (&Сделка)
		|	И НачисленныеПени.ВидДвижения = &Приход";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			
			//Отказ = Истина;
			
			//СообщитьОбОшибке("Внимание! По документу " + Документ + " производились начисления пени:", Отказ);	
			
			Сообщить("Внимание! По документу " + Документ + " производились начисления пени:");	
			
			Пока Выборка.Следующий() Цикл
				
				Сообщить(Строка(Выборка.ДокументНачисления));
				
			КонецЦикла; 
			
			//СообщитьОбОшибке("Необходимо отменить проведение данных документов!", Отказ);
			
		КонецЕсли; 
		
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ПроверитьПоздниеНачисленияКонтрагента(Документ, Отказ=Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Документ.Контрагент);
	Запрос.УстановитьПараметр("ДатаНачисления", Документ.ДатаНачисления);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленныеПени.ДокументНачисления,
	|	НачисленныеПени.ДатаНачисления,
	|	НачисленныеПени.Контрагент
	|ИЗ
	|	РегистрНакопления.НачисленныеПени КАК НачисленныеПени
	|ГДЕ
	|	НачисленныеПени.Контрагент = &Контрагент
	|	И НачисленныеПени.ДатаНачисления > &ДатаНачисления";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
	
		Отказ = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

//*** Актуальный функционал с 2015 года

Функция ЗапросПоПеням(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленныеПениОстатки.Сделка,
	|	НачисленныеПениОстатки.СуммаОстаток КАК Сумма,
	|	НачисленныеПениОстатки.ПениОстаток КАК Пени,
	|	НачисленныеПениОстатки.ДоговорНачисления
	|ИЗ
	|	РегистрНакопления.НачисленныеПени.Остатки КАК НачисленныеПениОстатки
	|ГДЕ
	|	НачисленныеПениОстатки.ДокументНачисления = &Документ";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ()

Функция ПолучитьНомераРасходов(Сделка)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентами.Регистратор.Номер КАК Номер
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентами.Сделка = &Сделка
	|	И ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг";
	
	МассивНомеров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
	
	СтрокаНомеров = "";
	
	Для Сч = 0 По МассивНомеров.Количество() - 1 Цикл
	
		СтрокаНомеров = СтрокаНомеров + ?(СтрДлина(СтрокаНомеров) > 0, ", ", "") + Строка(МассивНомеров[Сч]);
	
	КонецЦикла; 
	
	Возврат СтрокаНомеров;

КонецФункции

Функция ПолучитьРеализацииПоЗаказу(Сделка) Экспорт
	
	//с 2017 г. на один заказ - одна реализация
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентами.Регистратор КАК РеализацияТоваровУслуг
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентами.Сделка = &Сделка
	|	И ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг";
	
	ТаблицаР = Запрос.Выполнить().Выгрузить();
	Если ТаблицаР.Количество() > 0 Тогда
		Возврат ТаблицаР[0].РеализацияТоваровУслуг;
	Иначе
		Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьТЧУслуги(ДокументОбъект, ДокументОснование) Экспорт
		
	ТаблицаПеней = ЗапросПоПеням(ДокументОснование);

	СтрНом = "";
	
	Для каждого СтрокаТЗ Из ТаблицаПеней Цикл
		СтрНом = СтрНом + ?(СтрДлина(СтрНом) > 0, ", ", "") + СтрокаТЗ.Сделка.Номер;
	КонецЦикла; 
	
	СтоимостьУслуги = 0;
	
	Для каждого СтрокаПеней Из ТаблицаПеней Цикл
		
		СтрокаДокумента = ДокументОбъект.Услуги.Добавить();
		СтрокаДокумента.Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию("Пени");
		СтрокаДокумента.Количество = 1;
		СтрокаДокумента.Цена = СтрокаПеней.Пени;
		//СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		СтрокаДокумента.СтавкаНДС = СтавкаНДСнаДату(ТекущаяДата());
		СтрокаДокумента.Содержание = "Пени по накладной " + ПолучитьНомераРасходов(СтрокаПеней.Сделка);
		СтрокаДокумента.Сделка	= СтрокаПеней.Сделка;
		СтрокаДокумента.ДоговорПени = ?(ЗначениеЗаполнено(ДокументОснование.ДоговорКонтрагента), ДокументОснование.ДоговорКонтрагента, СтрокаПеней.ДоговорНачисления);
		
		РассчитатьСуммуТабЧасти(СтрокаДокумента, ДокументОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаДокумента, ДокументОбъект);

		СтоимостьУслуги = СтоимостьУслуги + СтрокаПеней.Пени;	
	
	КонецЦикла; 
	
	ДокументОбъект.Комментарий = "Пени";
	
	
КонецПроцедуры

Функция ПолучитьСтавкуПениПоКонтрагенту(Контрагент, ДатаПолучения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Дата", ДатаПолучения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СтавкиПениПоКонтрагентамСрезПоследних.ПроцентПени, 0) КАК ПроцентПени
	|ИЗ
	|	РегистрСведений.СтавкиПениПоКонтрагентам.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК СтавкиПениПоКонтрагентамСрезПоследних";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() и Выборка.ПроцентПени > 0 Тогда
		Возврат Выборка.ПроцентПени;
	Иначе
		Возврат Константы.ПроцентПени.Получить();
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьСтавкуПениПоКонтрагенту42(Контрагент, ДатаПолучения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Дата", ДатаПолучения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СтавкиПениПоКонтрагентамСрезПоследних.ПроцентПени42, 0) КАК ПроцентПени42
	|ИЗ
	|	РегистрСведений.СтавкиПениПоКонтрагентам.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК СтавкиПениПоКонтрагентамСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() и Выборка.ПроцентПени42 > 0 Тогда
		Возврат Выборка.ПроцентПени42;
	Иначе
		Возврат 0;
	КонецЕсли;	
		
КонецФункции


Процедура ЗаписатьСтавкуПени(Контрагент, ПроцентПени, ПроцентПени42, Период) Экспорт
	
	НаборЗаписей = РегистрыСведений.СтавкиПениПоКонтрагентам.СоздатьНаборЗаписей(); 
	
	НаборЗаписей.Отбор.Контрагент.Установить(Контрагент); 
	НаборЗаписей.Отбор.Период.Установить(Период); 
	
	НовЗапись = НаборЗаписей.Добавить(); 
	НовЗапись.Контрагент = Контрагент; 
	НовЗапись.Период = Период; 
	НовЗапись.ПроцентПени = ПроцентПени;
	НовЗапись.ПроцентПени42 = ПроцентПени42;
	
	НаборЗаписей.Записать(Истина); 
     	
КонецПроцедуры

Функция ПолучитьДоговорПени(Контрагент, Организация, ОтветственноеЛицо,Безнал=Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Пени", Справочники.ТипыДоговоров.Пени);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", ОтветственноеЛицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка КАК Договор
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Владелец = &Контрагент
	               |	И ДоговорыКонтрагентов.ТипДоговора = &Пени
	               |	И ДоговорыКонтрагентов.Организация = &Организация
	               |	И ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо";
	
    Если Безнал Тогда
		Запрос.Текст = Запрос.Текст+" И НЕ ДоговорыКонтрагентов.Наименование ПОДОБНО ""%*%""";			   
	Иначе   
		Запрос.Текст = Запрос.Текст+" И ДоговорыКонтрагентов.Наименование ПОДОБНО ""%*%""";			   
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		#Если Клиент Тогда
			Сообщить("Договор пени по контрагенту '"+ Строка(Контрагент) +"' у '"+Строка(ПараметрыСеанса.ТекущийПользователь) +"' отсутствует.");
		#КонецЕсли
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ИначеЕсли Выборка.Следующий() Тогда
		Возврат Выборка.Договор;
	КонецЕсли; 
	
КонецФункции 

Функция СоздатьДоговорПени(Организация, Контрагент, ОтветственноеЛицо,Безнал=Истина) Экспорт
	
	НовыйДоговор						 = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НовыйДоговор.ВалютаВзаиморасчетов	 = Константы.ВалютаУправленческогоУчета.Получить();
	НовыйДоговор.ВедениеВзаиморасчетов	 = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	НовыйДоговор.Комментарий			 = "Договор пени (автосоздание " + Лев(ТекущаяДата(),10) + ")";
	НовыйДоговор.ВидДоговора			 = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	НовыйДоговор.Владелец				 = Контрагент;
	НовыйДоговор.Наименование			 = "Договор пени"+?(Безнал,"","*");
	НовыйДоговор.ТипДоговора			 = Справочники.ТипыДоговоров.Пени;
	НовыйДоговор.Организация			 = Организация;
	НовыйДоговор.ОтветственноеЛицо		 = ОтветственноеЛицо;
	
	Попытка
		НовыйДоговор.Записать();
		Возврат НовыйДоговор.Ссылка;
	Исключение
		#Если Клиент Тогда
			Сообщить("Не удалось записать новый договор пеней для контрагента!");
		#КонецЕсли
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецПопытки; 
	
КонецФункции

Процедура АвтоматическоеНачислениеИВыставлениеПени() Экспорт
	
	Если НЕ Константы.АвтоматическоеНачислениеИВыставлениеПени.Получить() Тогда
		Возврат;
	КонецЕсли;

	//+++ 17.10.2017 исключение из правил
	//  по задаче № 34563 от Лусине Сафарян
	//  для клиента П001549 = ШинТрейд (Питер) 
	//  п.1. если сумма < СуммаНеНачисленияПени - "пени не должны ни начисляться ни выставляться."
	//  п.2. "не должны выставлялись."
	ШинТрейдСПб = справочники.Контрагенты.НайтиПоКоду("П001549");
	СуммаНеНачисленияПени = 7500000; // 7,5 млн.
	
	Если ДеньНедели(ТекущаяДата()) = 2 Тогда //по вторникам начисление пени
			
			ЗапросДат = Новый Запрос;
			//на НГ и майские праздники за 2 недели
			//ЗапросДат.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата()-(86400*15)));   
			ЗапросДат.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата()-(86400*8)));   
			ЗапросДат.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()-(86400*2)));
			ЗапросДат.Текст = "ВЫБРАТЬ
			                  |	А.Период КАК Период
			                  |ИЗ
			                  |	(ВЫБРАТЬ
			                  |		ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, aa.a * 1000 + bb.b * 100 + cc.c * 10 + dd.d) КАК Период
			                  |	ИЗ
			                  |		(ВЫБРАТЬ  0 КАК a
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 1
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 2
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 3
							  // 3999 дней = 10,9487 почти 11 лет юридически срок более 3х лет суд может 
							  //	сейчас есть долг с макс.сроком  2148 Шашин Д.Н.+	
							  
							  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 4
							  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 5
							  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 6
							  //более 6999 = 19,1 лет!
							  
							  //|		ОБЪЕДИНИТЬ ВЫБРАТЬ 7
							  //|		ОБЪЕДИНИТЬ ВЫБРАТЬ 8
							  //|		ОБЪЕДИНИТЬ ВЫБРАТЬ 9
		                  //  до 9 999 дней ... более 27 лет (27,376)

							  |		) КАК aa
							  |
			                  |		ПОЛНОЕ СОЕДИНЕНИЕ 
							  |		(ВЫБРАТЬ 	0 КАК b
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 1
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 2
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 3
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 4
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 5
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 6
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 7
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 8
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 9
			                  |		)КАК bb
			                  |			ПО (ИСТИНА)
			                  |
							  |		ПОЛНОЕ СОЕДИНЕНИЕ 
							  |		(ВЫБРАТЬ 0 КАК c
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 1
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 2
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 3
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 4
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 5
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 6
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 7
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 8
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 9
							  |		) КАК cc
			                  |			ПО (ИСТИНА)
							  
			                  |			ПОЛНОЕ СОЕДИНЕНИЕ 
							  |			(ВЫБРАТЬ 0 КАК d
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 1
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 2
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 3
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 4
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 5
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 6
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 7
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 8
			                  |		ОБЪЕДИНИТЬ ВЫБРАТЬ 9
							  |		) КАК dd
			                  |			ПО (ИСТИНА)
			                  |	ГДЕ
			                  |		aa.a * 1000 + bb.b * 100 + cc.c * 10 + dd.d <= РАЗНОСТЬДАТ(&НачалоПериода, &КонецПериода, ДЕНЬ)) КАК А
			                  |
			                  |СГРУППИРОВАТЬ ПО
			                  |	А.Период
			                  |
			                  |УПОРЯДОЧИТЬ ПО
			                  |	Период
			                  |АВТОУПОРЯДОЧИВАНИЕ";
			
			ВыборкаДат = ЗапросДат.Выполнить().Выбрать();
			
			//безнал
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Период", КонецДня(ТекущаяДата()-(86400*2)));
			Запрос.УстановитьПараметр("ТипФА", Справочники.ТипыДоговоров.НайтиПоКоду("Я0004"));
			Запрос.УстановитьПараметр("ТипФАПлюс", Справочники.ТипыДоговоров.ФормулаАвтоПлюс);
			Запрос.УстановитьПараметр("ТипШТЯ", Справочники.ТипыДоговоров.ШинтрейдЯрославль);
			Запрос.УстановитьПараметр("ВозмещУслуги", Справочники.ТипыДоговоров.ВозмещаемыеУслуги); //транспорт
			Запрос.УстановитьПараметр("ПеремещениеОТХ", Справочники.ТипыДоговоров.ПеремещениеОТХ);
			Запрос.УстановитьПараметр("ПризнакНал", "%*%");
			Запрос.УстановитьПараметр("КолесаТУТ", Справочники.НаправленияПродаж.НайтиПоКоду("24"));  //Колеса ТУТ
			Запрос.Текст = "ВЫБРАТЬ
			               |	КонтрагентыДляИсключенияИзАвтоначисленияПени.Контрагент
			               |ПОМЕСТИТЬ КонтрагентыДляИсключения
			               |ИЗ
			               |	РегистрСведений.КонтрагентыДляИсключенияИзАвтоначисленияПени КАК КонтрагентыДляИсключенияИзАвтоначисленияПени
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	А.ДоговорКонтрагента.Владелец КАК Контрагент,
			               |	А.ОтветственноеЛицо КАК ОтветственноеЛицо,
			               |	А.ДоговорКонтрагента КАК ДоговорКонтрагента,
			               |	А.Сделка,
			               |	ЕСТЬNULL(А.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетовОстаток,
			               |	А.СделкаДатаОплаты,
			               |	А.Просрочка,
			               |	А.СуммаПросрочки
			               |ИЗ
			               |	(ВЫБРАТЬ
			               |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственноеЛицо,
			               |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
			               |		ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
			               |		ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток - ЕСТЬNULL(ЗачетВзаимныхОбязательств.Сумма, 0) КАК СуммаВзаиморасчетовОстаток,
			               |		&Период КАК Период,
			               |		ВЫБОР
			               |			КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
			               |					ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			               |				ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
			               |			ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
			               |		КОНЕЦ КАК СделкаДатаОплаты,
			               |		ВЫБОР
			               |			КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL 
			               |				ТОГДА ВЫБОР
			               |						КОГДА РАЗНОСТЬДАТ(ВЫБОР
			               |									КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
			               |											ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			               |										ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
			               |									ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
			               |								КОНЕЦ, &Период, ДЕНЬ) + 1 > 0
			               |							ТОГДА РАЗНОСТЬДАТ(ВЫБОР
			               |										КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
			               |												ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			               |											ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
			               |										ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
			               |									КОНЕЦ, &Период, ДЕНЬ) + 1
			               |						ИНАЧЕ 0
			               |					КОНЕЦ
			               |			ИНАЧЕ 0
			               |		КОНЕЦ КАК Просрочка,
			               |		ВЫБОР
			               |			КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL 
			               |				ТОГДА ВЫБОР
			               |						КОГДА РАЗНОСТЬДАТ(ВЫБОР
			               |										КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
			               |												ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			               |											ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
			               |										ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
			               |									КОНЕЦ, &Период, ДЕНЬ) + 1 > 0
			               |								И ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток - ЕСТЬNULL(ЗачетВзаимныхОбязательств.Сумма, 0) > 0
			               |							ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток - ЕСТЬNULL(ЗачетВзаимныхОбязательств.Сумма, 0)
			               |						ИНАЧЕ 0
			               |					КОНЕЦ
			               |			ИНАЧЕ 0
			               |		КОНЕЦ КАК СуммаПросрочки,
			               |		ЗачетВзаимныхОбязательств.Сумма КАК Сумма
			               |	ИЗ
			               |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
			               |				КОНЕЦПЕРИОДА(&Период, ДЕНЬ),
			               |				ДоговорКонтрагента.ТипДоговора <> &ТипФА
			               |					И ДоговорКонтрагента.ТипДоговора <> &ТипФАПлюс
			               |					И ДоговорКонтрагента.ТипДоговора <> &ТипШТЯ
			               |					И ДоговорКонтрагента.ТипДоговора <> &ВозмещУслуги
			               |					И ДоговорКонтрагента.ТипДоговора <> &ПеремещениеОТХ
			               |					И (ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
			               |						ИЛИ ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))
			               |					И Сделка ССЫЛКА Документ.ЗаказПокупателя
			               |					И НЕ ДоговорКонтрагента.Владелец В
			               |							(ВЫБРАТЬ
			               |								КонтрагентыДляИсключения.Контрагент
			               |							ИЗ
			               |								КонтрагентыДляИсключения КАК КонтрагентыДляИсключения)
			               |					И НЕ ДоговорКонтрагента.Наименование ПОДОБНО &ПризнакНал
						   |					И НЕ ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж В ИЕРАРХИИ (&КолесаТУТ)) КАК ВзаиморасчетыСКонтрагентамиОстатки
			               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			               |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента КАК ДоговорКонтрагента,
			               |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка КАК Сделка,
			               |				СУММА(УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сумма) КАК Сумма
			               |			ИЗ
			               |				Документ.УправленческийЗачетВзаимныхОбязательств.СуммыДолга КАК УправленческийЗачетВзаимныхОбязательствСуммыДолга
			               |			ГДЕ
			               |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Проведен
			               |				И УправленческийЗачетВзаимныхОбязательствСуммыДолга.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Дебиторская)
			               |				И УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Дата <= &Период
			               |			
			               |			СГРУППИРОВАТЬ ПО
			               |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента,
			               |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка) КАК ЗачетВзаимныхОбязательств
			               |			ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ЗачетВзаимныхОбязательств.ДоговорКонтрагента
			               |				И ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ЗачетВзаимныхОбязательств.Сделка) КАК А
			               |ГДЕ
			               |	А.Просрочка > 0
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	А.ОтветственноеЛицо,
			               |	А.ДоговорКонтрагента,
			               |	А.Сделка,
			               |	А.СделкаДатаОплаты,
			               |	А.СуммаПросрочки,
			               |	А.ДоговорКонтрагента.Владелец,
			               |	ЕСТЬNULL(А.СуммаВзаиморасчетовОстаток, 0),
			               |	А.Просрочка
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Контрагент,
			               |	ОтветственноеЛицо
			               |ИТОГИ
			               |	СУММА(СуммаВзаиморасчетовОстаток)
			               |ПО
			               |	Контрагент,
			               |	ДоговорКонтрагента
			               |АВТОУПОРЯДОЧИВАНИЕ";	
			
			Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			СуммаВзаиморасчетовОстатокШинТрейдСПб=0; //+++ 31.10.2017  -- общая сумма по любым договорам (нал и безнал)
			
			Пока Результат.Следующий() Цикл
									
				Если Результат.СуммаВзаиморасчетовОстаток > 0 Тогда
					
					//+++ 17.10.2017  п.1. если сумма < СуммаНеНачисленияПени - "пени не должны ни начисляться ни выставляться."
					Если Результат.Контрагент = ШинТрейдСПб И Результат.СуммаВзаиморасчетовОстаток<СуммаНеНачисленияПени тогда
						Продолжить;
					КонецЕсли;

									
					СтавкаПениПоКонтрагенту = яштПени.ПолучитьСтавкуПениПоКонтрагенту(Результат.Контрагент, ТекущаяДата());
					/////////////////Плотников Если просрочка > 42 дней
					СтавкаПениПоКонтрагенту42 = яштПени.ПолучитьСтавкуПениПоКонтрагенту42(Результат.Контрагент, ТекущаяДата());
									
					ДокПени = Документы.НачислениеПени.СоздатьДокумент();
					ДокПени.АвтоматическийРасчет = Истина;
					ДокПени.Дата = ТекущаяДата(); 
					ДокПени.УстановитьНовыйНомер("А");
					ДокПени.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
					ДокПени.Организация = Справочники.Организации.НайтиПоКоду("00001");
					ДокПени.Контрагент = Результат.Контрагент;
					ДокПени.ДатаНачисления = ТекущаяДата();
					//на НГ и майские праздники за 2 недели
					//ДокПени.НачалоПериодаРасчетаСуммыДолга = ТекущаяДата()-(86400*15);
					ДокПени.НачалоПериодаРасчетаСуммыДолга = ТекущаяДата()-(86400*8); 
					ДокПени.КонецПериодаРасчетаСуммыДолга = КонецДня(ТекущаяДата()-(86400*2));
					ДокПени.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
					
					ВыборкаПоДоговорам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					флНадоЗаписывать = ЛОЖЬ;			
					Пока ВыборкаПоДоговорам.Следующий() Цикл
						
						Если ВыборкаПоДоговорам.СуммаВзаиморасчетовОстаток > 0 Тогда 
							
							ВыборкаДетальныхЗаписей = ВыборкаПоДоговорам.Выбрать();
							
							Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
								
								ВыборкаДат.Сбросить();
								Пока ВыборкаДат.Следующий() Цикл
									
									ЗапросДолгаПоДням = Новый Запрос;
									ЗапросДолгаПоДням.УстановитьПараметр("Период", КонецДня(ВыборкаДат.Период));
									ЗапросДолгаПоДням.УстановитьПараметр("Сделка", ВыборкаДетальныхЗаписей.Сделка);
									ЗапросДолгаПоДням.Текст = "ВЫБРАТЬ
									                          |	А.ДоговорКонтрагента.Владелец КАК Контрагент,
									                          |	А.ОтветственноеЛицо КАК ОтветственноеЛицо,
									                          |	А.ДоговорКонтрагента КАК ДоговорКонтрагента,
									                          |	А.Сделка,
									                          |	А.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
									                          |	А.СделкаДатаОплаты,
									                          |	А.Просрочка,
									                          |	А.СуммаПросрочки КАК СуммаПросрочки
									                          |ИЗ
									                          |	(ВЫБРАТЬ
									                          |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственноеЛицо,
									                          |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
									                          |		ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
									                          |		ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток - ЕСТЬNULL(ЗачетВзаимныхОбязательств.Сумма, 0) КАК СуммаВзаиморасчетовОстаток,
									                          |		&Период КАК Период,
									                          |		ВЫБОР
									                          |			КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
									                          |					ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
									                          |				ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
									                          |			ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
									                          |		КОНЕЦ КАК СделкаДатаОплаты,
									                          |		ВЫБОР
									                          |			КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL 
									                          |				ТОГДА ВЫБОР
									                          |						КОГДА РАЗНОСТЬДАТ(ВЫБОР
									                          |									КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
									                          |											ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
									                          |										ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
									                          |									ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
									                          |								КОНЕЦ, &Период, ДЕНЬ) + 1 > 0
									                          |							ТОГДА РАЗНОСТЬДАТ(ВЫБОР
									                          |										КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
									                          |												ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
									                          |											ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
									                          |										ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
									                          |									КОНЕЦ, &Период, ДЕНЬ) + 1
									                          |						ИНАЧЕ 0
									                          |					КОНЕЦ
									                          |			ИНАЧЕ 0
									                          |		КОНЕЦ КАК Просрочка,
									                          |		ВЫБОР
									                          |			КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL 
									                          |				ТОГДА ВЫБОР
									                          |						КОГДА РАЗНОСТЬДАТ(ВЫБОР
									                          |										КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
									                          |												ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
									                          |											ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
									                          |										ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
									                          |									КОНЕЦ, &Период, ДЕНЬ) + 1 > 0
									                          |								И ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток - ЕСТЬNULL(ЗачетВзаимныхОбязательств.Сумма, 0), 0) > 0
									                          |							ТОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток - ЕСТЬNULL(ЗачетВзаимныхОбязательств.Сумма, 0), 0)
									                          |						ИНАЧЕ 0
									                          |					КОНЕЦ
									                          |			ИНАЧЕ 0
									                          |		КОНЕЦ КАК СуммаПросрочки,
									                          |		ЗачетВзаимныхОбязательств.Сумма КАК Сумма
									                          |	ИЗ
									                          |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), Сделка = &Сделка) КАК ВзаиморасчетыСКонтрагентамиОстатки
									                          |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
									                          |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента КАК ДоговорКонтрагента,
									                          |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка КАК Сделка,
									                          |				СУММА(УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сумма) КАК Сумма
									                          |			ИЗ
									                          |				Документ.УправленческийЗачетВзаимныхОбязательств.СуммыДолга КАК УправленческийЗачетВзаимныхОбязательствСуммыДолга
									                          |			ГДЕ
									                          |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Проведен
									                          |				И УправленческийЗачетВзаимныхОбязательствСуммыДолга.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Дебиторская)
									                          |				И УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Дата <= &Период
									                          |			
									                          |			СГРУППИРОВАТЬ ПО
									                          |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента,
									                          |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка) КАК ЗачетВзаимныхОбязательств
									                          |			ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ЗачетВзаимныхОбязательств.ДоговорКонтрагента
									                          |				И ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ЗачетВзаимныхОбязательств.Сделка) КАК А
									                          |ГДЕ
									                          |	А.Просрочка > 0
									                          |
									                          |СГРУППИРОВАТЬ ПО
									                          |	А.ОтветственноеЛицо,
									                          |	А.ДоговорКонтрагента,
									                          |	А.Сделка,
									                          |	А.Просрочка,
									                          |	А.СделкаДатаОплаты,
									                          |	А.ДоговорКонтрагента.Владелец,
									                          |	А.СуммаПросрочки,
									                          |	А.СуммаВзаиморасчетовОстаток
									                          |
									                          |УПОРЯДОЧИТЬ ПО
									                          |	Контрагент,
															  //+++ 31.10.2017 --- подряд!
									                          |	А.Сделка.Дата,
															  |	А.Сделка,
									                          |	ОтветственноеЛицо
									                          |АВТОУПОРЯДОЧИВАНИЕ";
									
									ВыборкаДолгаПоСделкеНаДату = ЗапросДолгаПоДням.Выполнить().Выбрать();
									зак0 = неопределено; //31.10.2017
									Пока ВыборкаДолгаПоСделкеНаДату.Следующий() Цикл
										
										Если ВыборкаДолгаПоСделкеНаДату.СуммаВзаиморасчетовОстаток > 0 И ВыборкаДолгаПоСделкеНаДату.СуммаПросрочки > 0 Тогда
											//заполняется таблица расчета суммы пени по каждой сделке на каждый день периода расчета
											
											//+++ 31.10.2017  п.3 - по заказам
											Если ВыборкаДолгаПоСделкеНаДату.Контрагент = ШинТрейдСПб тогда
												
												Если зак0<>ВыборкаДолгаПоСделкеНаДату.Сделка тогда // дублятся заказы!
													зак0=ВыборкаДолгаПоСделкеНаДату.Сделка;
													СуммаВзаиморасчетовОстатокШинТрейдСПб = СуммаВзаиморасчетовОстатокШинТрейдСПб + ВыборкаДолгаПоСделкеНаДату.СуммаВзаиморасчетовОстаток;
												КонецЕсли;
												
												Если СуммаВзаиморасчетовОстатокШинТрейдСПб < СуммаНеНачисленияПени тогда
													Продолжить;
											    КонецЕсли;
										    КонецЕсли;

											СтрокаДетальныйРасчет = ДокПени.ДетальныйРасчетПоДням.Добавить();
											СтрокаДетальныйРасчет.Период					 = ВыборкаДат.Период;
											СтрокаДетальныйРасчет.ДоговорКонтрагента		 = ВыборкаПоДоговорам.ДоговорКонтрагента;
											СтрокаДетальныйРасчет.Сделка					 = ВыборкаДолгаПоСделкеНаДату.Сделка;
											СтрокаДетальныйРасчет.ДнейПросрочено			 = ВыборкаДолгаПоСделкеНаДату.Просрочка;
											СтрокаДетальныйРасчет.СуммаПросроченногоДолга	 = ВыборкаДолгаПоСделкеНаДату.СуммаПросрочки;
											/////////////////Плотников Если просрочка > 42 дней
											СтрокаДетальныйРасчет.СуммаПени					 = ?(ВыборкаДолгаПоСделкеНаДату.Просрочка<42,ВыборкаДолгаПоСделкеНаДату.СуммаПросрочки / 100 * СтавкаПениПоКонтрагенту,?(СтавкаПениПоКонтрагенту42>0,ВыборкаДолгаПоСделкеНаДату.СуммаПросрочки / 100 * СтавкаПениПоКонтрагенту42,ВыборкаДолгаПоСделкеНаДату.СуммаПросрочки / 100 * СтавкаПениПоКонтрагенту));
											СтрокаДетальныйРасчет.РеализацияТоваровУслуг	 = ПолучитьРеализацииПоЗаказу(ВыборкаДолгаПоСделкеНаДату.Сделка);
											//+++ 31.10.2017 - после цикла!	ДокПени.Записать();
										КонецЕсли;
										
									КонецЦикла;  //ВыборкаДолгаПоСделкеНаДату
									
								КонецЦикла; //ВыборкаДат
								
							КонецЦикла; //ВыборкаДетальныхЗаписей
													
						КонецЕсли; //остаток суммы взаиморасчетов по договору > 0
						
					КонецЦикла; //выборка договоров
					
					Если ДокПени.ДетальныйРасчетПоДням.Количество()>0 тогда
						ДокПени.Записать(); //+++ 31.10.2017  не в 3-ом цикле, а после!!!
						
						//заполняется сводная таблица сумм долга по следкам
						ТЗ = ДокПени.ДетальныйРасчетПоДням.Выгрузить();
						ТЗ.Свернуть("Сделка", "СуммаПени");
						Для каждого СтрокаТЗ ИЗ ТЗ Цикл
							СтрокаПени = ДокПени.Пени.Добавить();
							СтрокаПени.Сделка				 = СтрокаТЗ.Сделка;
							СтрокаПени.ДатаОплаты			 = СтрокаТЗ.Сделка.ДатаОплаты;
							СтрокаПени.ДоговорЗадолженности	 = СтрокаТЗ.Сделка.ДоговорКонтрагента;
							СтрокаПени.Пени					 = СтрокаТЗ.СуммаПени;
							СтрокаПени.Менеджер				 = СтрокаТЗ.Сделка.ДоговорКонтрагента.ОтветственноеЛицо;
							ДоговорПени = яштПени.ПолучитьДоговорПени(СтрокаТЗ.Сделка.ДоговорКонтрагента.Владелец, Справочники.Организации.НайтиПоКоду("00001"), СтрокаТЗ.Сделка.ДоговорКонтрагента.ОтветственноеЛицо,Истина);
							Если ДоговорПени = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
								ДоговорПени = яштПени.СоздатьДоговорПени(Справочники.Организации.НайтиПоКоду("00001"), СтрокаТЗ.Сделка.ДоговорКонтрагента.Владелец, СтрокаТЗ.Сделка.ДоговорКонтрагента.ОтветственноеЛицо,Истина);
								Если НЕ ДоговорПени = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
									СтрокаПени.ДоговорКонтрагента = ДоговорПени;
								КонецЕсли;
							Иначе
								СтрокаПени.ДоговорКонтрагента = ДоговорПени;
							КонецЕсли;
						КонецЦикла;
						ДокПени.Записать(РежимЗаписиДокумента.Проведение); //может быть ошибка при проведении, но документ должен быть
					КонецЕсли;
					
				КонецЕсли; //остаток суммы взаиморасчетов по контрагенту > 0 
												
			КонецЦикла; //обход контрагентов безнал
			
			
			//нал договоры со *    ------------------------аналогично -----------------------------------------------------
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Период", КонецДня(ТекущаяДата()-(86400*2)));
			Запрос.УстановитьПараметр("ТипФА", Справочники.ТипыДоговоров.НайтиПоКоду("Я0004"));
			Запрос.УстановитьПараметр("ТипФАПлюс", Справочники.ТипыДоговоров.ФормулаАвтоПлюс);
			Запрос.УстановитьПараметр("ТипШТЯ", Справочники.ТипыДоговоров.ШинтрейдЯрославль);
			Запрос.УстановитьПараметр("ВозмещУслуги", Справочники.ТипыДоговоров.ВозмещаемыеУслуги); //транспорт
			Запрос.УстановитьПараметр("ПеремещениеОТХ", Справочники.ТипыДоговоров.ПеремещениеОТХ);
			Запрос.УстановитьПараметр("ПризнакНал", "%*%");
			Запрос.УстановитьПараметр("КолесаТУТ", Справочники.НаправленияПродаж.НайтиПоКоду("24"));  //Колеса ТУТ
			Запрос.Текст = "ВЫБРАТЬ
			               |	КонтрагентыДляИсключенияИзАвтоначисленияПени.Контрагент
			               |ПОМЕСТИТЬ КонтрагентыДляИсключения
			               |ИЗ
			               |	РегистрСведений.КонтрагентыДляИсключенияИзАвтоначисленияПени КАК КонтрагентыДляИсключенияИзАвтоначисленияПени
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	А.ДоговорКонтрагента.Владелец КАК Контрагент,
			               |	А.ОтветственноеЛицо КАК ОтветственноеЛицо,
			               |	А.ДоговорКонтрагента КАК ДоговорКонтрагента,
			               |	А.Сделка,
			               |	ЕСТЬNULL(А.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетовОстаток,
			               |	А.СделкаДатаОплаты,
			               |	А.Просрочка,
			               |	А.СуммаПросрочки
			               |ИЗ
			               |	(ВЫБРАТЬ
			               |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственноеЛицо,
			               |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
			               |		ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
			               |		ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток - ЕСТЬNULL(ЗачетВзаимныхОбязательств.Сумма, 0) КАК СуммаВзаиморасчетовОстаток,
			               |		&Период КАК Период,
			               |		ВЫБОР
			               |			КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
			               |					ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			               |				ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
			               |			ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
			               |		КОНЕЦ КАК СделкаДатаОплаты,
			               |		ВЫБОР
			               |			КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL 
			               |				ТОГДА ВЫБОР
			               |						КОГДА РАЗНОСТЬДАТ(ВЫБОР
			               |									КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
			               |											ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			               |										ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
			               |									ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
			               |								КОНЕЦ, &Период, ДЕНЬ) + 1 > 0
			               |							ТОГДА РАЗНОСТЬДАТ(ВЫБОР
			               |										КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
			               |												ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			               |											ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
			               |										ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
			               |									КОНЕЦ, &Период, ДЕНЬ) + 1
			               |						ИНАЧЕ 0
			               |					КОНЕЦ
			               |			ИНАЧЕ 0
			               |		КОНЕЦ КАК Просрочка,
			               |		ВЫБОР
			               |			КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL 
			               |				ТОГДА ВЫБОР
			               |						КОГДА РАЗНОСТЬДАТ(ВЫБОР
			               |										КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
			               |												ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			               |											ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
			               |										ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
			               |									КОНЕЦ, &Период, ДЕНЬ) + 1 > 0
			               |								И ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток - ЕСТЬNULL(ЗачетВзаимныхОбязательств.Сумма, 0) > 0
			               |							ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток - ЕСТЬNULL(ЗачетВзаимныхОбязательств.Сумма, 0)
			               |						ИНАЧЕ 0
			               |					КОНЕЦ
			               |			ИНАЧЕ 0
			               |		КОНЕЦ КАК СуммаПросрочки,
			               |		ЗачетВзаимныхОбязательств.Сумма КАК Сумма
			               |	ИЗ
			               |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
			               |				КОНЕЦПЕРИОДА(&Период, ДЕНЬ),
			               |				ДоговорКонтрагента.ТипДоговора <> &ТипФА
			               |					И ДоговорКонтрагента.ТипДоговора <> &ТипФАПлюс
			               |					И ДоговорКонтрагента.ТипДоговора <> &ТипШТЯ
			               |					И ДоговорКонтрагента.ТипДоговора <> &ВозмещУслуги
			               |					И ДоговорКонтрагента.ТипДоговора <> &ПеремещениеОТХ
			               |					И (ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
			               |						ИЛИ ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))
			               |					И Сделка ССЫЛКА Документ.ЗаказПокупателя
			               |					И НЕ ДоговорКонтрагента.Владелец В
			               |							(ВЫБРАТЬ
			               |								КонтрагентыДляИсключения.Контрагент
			               |							ИЗ
			               |								КонтрагентыДляИсключения КАК КонтрагентыДляИсключения)
			               |					И ДоговорКонтрагента.Наименование ПОДОБНО &ПризнакНал
						   |					И НЕ ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж В ИЕРАРХИИ (&КолесаТУТ)) КАК ВзаиморасчетыСКонтрагентамиОстатки
			               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			               |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента КАК ДоговорКонтрагента,
			               |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка КАК Сделка,
			               |				СУММА(УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сумма) КАК Сумма
			               |			ИЗ
			               |				Документ.УправленческийЗачетВзаимныхОбязательств.СуммыДолга КАК УправленческийЗачетВзаимныхОбязательствСуммыДолга
			               |			ГДЕ
			               |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Проведен
			               |				И УправленческийЗачетВзаимныхОбязательствСуммыДолга.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Дебиторская)
			               |				И УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Дата <= &Период
			               |			
			               |			СГРУППИРОВАТЬ ПО
			               |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента,
			               |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка) КАК ЗачетВзаимныхОбязательств
			               |			ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ЗачетВзаимныхОбязательств.ДоговорКонтрагента
			               |				И ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ЗачетВзаимныхОбязательств.Сделка) КАК А
			               |ГДЕ
			               |	А.Просрочка > 0
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	А.ОтветственноеЛицо,
			               |	А.ДоговорКонтрагента,
			               |	А.Сделка,
			               |	А.СделкаДатаОплаты,
			               |	А.СуммаПросрочки,
			               |	А.ДоговорКонтрагента.Владелец,
			               |	ЕСТЬNULL(А.СуммаВзаиморасчетовОстаток, 0),
			               |	А.Просрочка
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Контрагент,
			               |	ОтветственноеЛицо
			               |ИТОГИ
			               |	СУММА(СуммаВзаиморасчетовОстаток)
			               |ПО
			               |	Контрагент,
						   
						   ////+++ 31.10.2017               //***2018.01.09 заремила, т.к. это тут неуместно, привело к ошибкам в начислениях с 31.10.17 по 09.01.18  
						   //|	А.Сделка.Дата,              //дополнительные итоги по двум параметрам увеличивают глубину результата запроса при обходе по группировкам
						   //|	А.Сделка,
						   
			               |	ДоговорКонтрагента
			               |АВТОУПОРЯДОЧИВАНИЕ";	
			
			Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока Результат.Следующий() Цикл
				
				Если Результат.СуммаВзаиморасчетовОстаток > 0 Тогда
					
					//+++ 17.10.2017 исключение из правил
					//  по задаче № 34563 от Лусине Сафарян
					//  для клиента П001549 = ШинТрейд (Питер) 
					//  если сумма < 7,5 млн. - "пени не должны ни начисляться ни выставляться."
					Если Результат.Контрагент = справочники.Контрагенты.НайтиПоКоду("П001549") 
						И Результат.СуммаВзаиморасчетовОстаток<7500000 тогда
						Продолжить;
					КонецЕсли;

					СтавкаПениПоКонтрагенту = яштПени.ПолучитьСтавкуПениПоКонтрагенту(Результат.Контрагент, ТекущаяДата());
					//Плотников Если просрочка > 42 дней
					СтавкаПениПоКонтрагенту42 = яштПени.ПолучитьСтавкуПениПоКонтрагенту42(Результат.Контрагент, ТекущаяДата());
					
					ДокПени = Документы.НачислениеПени.СоздатьДокумент();
					ДокПени.АвтоматическийРасчет = Истина;
					ДокПени.Дата = ТекущаяДата(); 
					ДокПени.УстановитьНовыйНомер("А");
					ДокПени.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
					ДокПени.Организация = Справочники.Организации.НайтиПоКоду("00001");
					ДокПени.Контрагент = Результат.Контрагент;
					ДокПени.ДатаНачисления = ТекущаяДата();
					//на НГ и майские праздники за 2 недели
					//ДокПени.НачалоПериодаРасчетаСуммыДолга = ТекущаяДата()-(86400*15); 
					ДокПени.НачалоПериодаРасчетаСуммыДолга = ТекущаяДата()-(86400*8); 
					ДокПени.КонецПериодаРасчетаСуммыДолга = КонецДня(ТекущаяДата()-(86400*2));
					ДокПени.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
					
					ВыборкаПоДоговорам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПоДоговорам.Следующий() Цикл
						
						Если ВыборкаПоДоговорам.СуммаВзаиморасчетовОстаток > 0 Тогда 
							
							ВыборкаДетальныхЗаписей = ВыборкаПоДоговорам.Выбрать();
							
							Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
								
								ВыборкаДат.Сбросить();
								Пока ВыборкаДат.Следующий() Цикл
									
									ЗапросДолгаПоДням = Новый Запрос;
									ЗапросДолгаПоДням.УстановитьПараметр("Период", КонецДня(ВыборкаДат.Период));
									ЗапросДолгаПоДням.УстановитьПараметр("Сделка", ВыборкаДетальныхЗаписей.Сделка);
									ЗапросДолгаПоДням.Текст = "ВЫБРАТЬ
									                          |	А.ДоговорКонтрагента.Владелец КАК Контрагент,
									                          |	А.ОтветственноеЛицо КАК ОтветственноеЛицо,
									                          |	А.ДоговорКонтрагента КАК ДоговорКонтрагента,
									                          |	А.Сделка,
									                          |	А.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
									                          |	А.СделкаДатаОплаты,
									                          |	А.Просрочка,
									                          |	А.СуммаПросрочки КАК СуммаПросрочки
									                          |ИЗ
									                          |	(ВЫБРАТЬ
									                          |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственноеЛицо,
									                          |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
									                          |		ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
									                          |		ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток - ЕСТЬNULL(ЗачетВзаимныхОбязательств.Сумма, 0) КАК СуммаВзаиморасчетовОстаток,
									                          |		&Период КАК Период,
									                          |		ВЫБОР
									                          |			КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
									                          |					ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
									                          |				ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
									                          |			ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
									                          |		КОНЕЦ КАК СделкаДатаОплаты,
									                          |		ВЫБОР
									                          |			КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL 
									                          |				ТОГДА ВЫБОР
									                          |						КОГДА РАЗНОСТЬДАТ(ВЫБОР
									                          |									КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
									                          |											ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
									                          |										ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
									                          |									ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
									                          |								КОНЕЦ, &Период, ДЕНЬ) + 1 > 0
									                          |							ТОГДА РАЗНОСТЬДАТ(ВЫБОР
									                          |										КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
									                          |												ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
									                          |											ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
									                          |										ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
									                          |									КОНЕЦ, &Период, ДЕНЬ) + 1
									                          |						ИНАЧЕ 0
									                          |					КОНЕЦ
									                          |			ИНАЧЕ 0
									                          |		КОНЕЦ КАК Просрочка,
									                          |		ВЫБОР
									                          |			КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL 
									                          |				ТОГДА ВЫБОР
									                          |						КОГДА РАЗНОСТЬДАТ(ВЫБОР
									                          |										КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
									                          |												ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
									                          |											ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
									                          |										ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
									                          |									КОНЕЦ, &Период, ДЕНЬ) + 1 > 0
									                          |								И ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток - ЕСТЬNULL(ЗачетВзаимныхОбязательств.Сумма, 0), 0) > 0
									                          |							ТОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток - ЕСТЬNULL(ЗачетВзаимныхОбязательств.Сумма, 0), 0)
									                          |						ИНАЧЕ 0
									                          |					КОНЕЦ
									                          |			ИНАЧЕ 0
									                          |		КОНЕЦ КАК СуммаПросрочки,
									                          |		ЗачетВзаимныхОбязательств.Сумма КАК Сумма
									                          |	ИЗ
									                          |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), Сделка = &Сделка) КАК ВзаиморасчетыСКонтрагентамиОстатки
									                          |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
									                          |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента КАК ДоговорКонтрагента,
									                          |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка КАК Сделка,
									                          |				СУММА(УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сумма) КАК Сумма
									                          |			ИЗ
									                          |				Документ.УправленческийЗачетВзаимныхОбязательств.СуммыДолга КАК УправленческийЗачетВзаимныхОбязательствСуммыДолга
									                          |			ГДЕ
									                          |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Проведен
									                          |				И УправленческийЗачетВзаимныхОбязательствСуммыДолга.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Дебиторская)
									                          |				И УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Дата <= &Период
									                          |			
									                          |			СГРУППИРОВАТЬ ПО
									                          |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента,
									                          |				УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка) КАК ЗачетВзаимныхОбязательств
									                          |			ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ЗачетВзаимныхОбязательств.ДоговорКонтрагента
									                          |				И ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ЗачетВзаимныхОбязательств.Сделка) КАК А
									                          |ГДЕ
									                          |	А.Просрочка > 0
									                          |
									                          |СГРУППИРОВАТЬ ПО
									                          |	А.ОтветственноеЛицо,
									                          |	А.ДоговорКонтрагента,
									                          |	А.Сделка,
									                          |	А.Просрочка,
									                          |	А.СделкаДатаОплаты,
									                          |	А.ДоговорКонтрагента.Владелец,
									                          |	А.СуммаПросрочки,
									                          |	А.СуммаВзаиморасчетовОстаток
									                          |
									                          |УПОРЯДОЧИТЬ ПО
									                          |	Контрагент,
															  //31.10.2017
															    |	А.Сделка.Дата,
															    |	А.Сделка,
									                          |	ОтветственноеЛицо
									                          |АВТОУПОРЯДОЧИВАНИЕ";
									
									ВыборкаДолгаПоСделкеНаДату = ЗапросДолгаПоДням.Выполнить().Выбрать();
									зак0 = неопределено; //31.10.2017
									Пока ВыборкаДолгаПоСделкеНаДату.Следующий() Цикл
										
										Если ВыборкаДолгаПоСделкеНаДату.СуммаВзаиморасчетовОстаток > 0 И ВыборкаДолгаПоСделкеНаДату.СуммаПросрочки > 0 Тогда
											
											//+++ 31.10.2017  п.3 - по заказам
											Если ВыборкаДолгаПоСделкеНаДату.Контрагент = ШинТрейдСПб тогда
												
												Если зак0<>ВыборкаДолгаПоСделкеНаДату.Сделка тогда // дублятся заказы!
													зак0=ВыборкаДолгаПоСделкеНаДату.Сделка;
													СуммаВзаиморасчетовОстатокШинТрейдСПб = СуммаВзаиморасчетовОстатокШинТрейдСПб + ВыборкаДолгаПоСделкеНаДату.СуммаВзаиморасчетовОстаток;
												КонецЕсли;
												
												Если СуммаВзаиморасчетовОстатокШинТрейдСПб < СуммаНеНачисленияПени тогда
													Продолжить;
											    КонецЕсли;
										    КонецЕсли;

											//заполняется таблица расчета суммы пени по каждой сделке на каждый день периода расчета
											СтрокаДетальныйРасчет = ДокПени.ДетальныйРасчетПоДням.Добавить();
											СтрокаДетальныйРасчет.Период					 = ВыборкаДат.Период;
											СтрокаДетальныйРасчет.ДоговорКонтрагента		 = ВыборкаПоДоговорам.ДоговорКонтрагента;
											СтрокаДетальныйРасчет.Сделка					 = ВыборкаДолгаПоСделкеНаДату.Сделка;
											СтрокаДетальныйРасчет.ДнейПросрочено			 = ВыборкаДолгаПоСделкеНаДату.Просрочка;
											СтрокаДетальныйРасчет.СуммаПросроченногоДолга	 = ВыборкаДолгаПоСделкеНаДату.СуммаПросрочки;
											/////////////////Плотников Если просрочка > 42 дней
											СтрокаДетальныйРасчет.СуммаПени					 = ?(ВыборкаДолгаПоСделкеНаДату.Просрочка<42,ВыборкаДолгаПоСделкеНаДату.СуммаПросрочки / 100 * СтавкаПениПоКонтрагенту,?(СтавкаПениПоКонтрагенту42>0,ВыборкаДолгаПоСделкеНаДату.СуммаПросрочки / 100 * СтавкаПениПоКонтрагенту42,ВыборкаДолгаПоСделкеНаДату.СуммаПросрочки / 100 * СтавкаПениПоКонтрагенту));
											СтрокаДетальныйРасчет.РеализацияТоваровУслуг	 = ПолучитьРеализацииПоЗаказу(ВыборкаДолгаПоСделкеНаДату.Сделка);
											//31.10.2017 	ДокПени.Записать();
										КонецЕсли;
										
									КонецЦикла; //ВыборкаДолгаПоСделкеНаДату
									
								КонецЦикла; //ВыборкаДат
								
							КонецЦикла; //ВыборкаДетальныхЗаписей
														
						КонецЕсли; //остаток суммы взаиморасчетов по договору > 0
						
					КонецЦикла; //выборка договоров
					
					Если ДокПени.ДетальныйРасчетПоДням.Количество()>0 тогда
						ДокПени.Записать(); //+++ 31.10.2017  не в 3-ом цикле, а после!!!
						
						//заполняется сводная таблица сумм долга по следкам
						ТЗ = ДокПени.ДетальныйРасчетПоДням.Выгрузить();
						ТЗ.Свернуть("Сделка", "СуммаПени");
						Для каждого СтрокаТЗ ИЗ ТЗ Цикл
							СтрокаПени = ДокПени.Пени.Добавить();
							СтрокаПени.Сделка				 = СтрокаТЗ.Сделка;
							СтрокаПени.ДатаОплаты			 = СтрокаТЗ.Сделка.ДатаОплаты;
							СтрокаПени.ДоговорЗадолженности	 = СтрокаТЗ.Сделка.ДоговорКонтрагента;
							СтрокаПени.Пени					 = СтрокаТЗ.СуммаПени;
							СтрокаПени.Менеджер				 = СтрокаТЗ.Сделка.ДоговорКонтрагента.ОтветственноеЛицо;
							ДоговорПени = яштПени.ПолучитьДоговорПени(СтрокаТЗ.Сделка.ДоговорКонтрагента.Владелец, Справочники.Организации.НайтиПоКоду("00001"), СтрокаТЗ.Сделка.ДоговорКонтрагента.ОтветственноеЛицо,Ложь);
							Если ДоговорПени = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
								ДоговорПени = яштПени.СоздатьДоговорПени(Справочники.Организации.НайтиПоКоду("00001"), СтрокаТЗ.Сделка.ДоговорКонтрагента.Владелец, СтрокаТЗ.Сделка.ДоговорКонтрагента.ОтветственноеЛицо,Ложь);
								Если НЕ ДоговорПени = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
									СтрокаПени.ДоговорКонтрагента = ДоговорПени;
								КонецЕсли;
							Иначе
								СтрокаПени.ДоговорКонтрагента = ДоговорПени;
							КонецЕсли;
						КонецЦикла;
						ДокПени.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
					
				КонецЕсли; //остаток суммы взаиморасчетов по контрагенту > 0 
												
			КонецЦикла; //обход всех контрагентов со *
			
		КонецЕсли; // день недели 2 (начисление пеней)
		
		
//============================ ВЫСТАВЛЕНИЕ ПЕНЕЙ по пятницам ==========================================		
		
		
	Если ДеньНедели(ТекущаяДата()) = 5 Тогда //по пятницам выставление начисленных пени только по безнальным договорам
			
		СписокРеализаций = Новый СписокЗначений;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПризнакНал", "%*%");
		Запрос.УстановитьПараметр("ДатаНач", НачалоНедели(ТекущаяДата())-1209600);
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтрагентыДляИсключенияИзАвтоначисленияПени.Контрагент
		               |ПОМЕСТИТЬ КонтрагентыДляИсключения
		               |ИЗ
		               |	РегистрСведений.КонтрагентыДляИсключенияИзАвтоначисленияПени КАК КонтрагентыДляИсключенияИзАвтоначисленияПени
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	НачисленныеПениОстаткиИОбороты.Контрагент КАК Контрагент,
		               |	НачисленныеПениОстаткиИОбороты.ДоговорЗадолженности,
		               |	НачисленныеПениОстаткиИОбороты.ДоговорНачисления,
		               |	НачисленныеПениОстаткиИОбороты.Сделка,
		               |	НачисленныеПениОстаткиИОбороты.ДатаНачисления КАК ДатаНачисления,
		               |	НачисленныеПениОстаткиИОбороты.ДокументНачисления КАК ДокументНачисления,
		               |	НачисленныеПениОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
		               |	НачисленныеПениОстаткиИОбороты.ПениКонечныйОстаток КАК ПениКонечныйОстаток
		               |ИЗ
		               |	РегистрНакопления.НачисленныеПени.ОстаткиИОбороты(
		               |			&ДатаНач,
		               |			,
		               |			,
		               |			,
		               |			НЕ ДоговорЗадолженности.Наименование ПОДОБНО &ПризнакНал
		               |				И ДокументНачисления.АвтоматическийРасчет
		               |				И НЕ ДоговорЗадолженности.Владелец В
		               |						(ВЫБРАТЬ
		               |							КонтрагентыДляИсключения.Контрагент
		               |						ИЗ
		               |							КонтрагентыДляИсключения КАК КонтрагентыДляИсключения)) КАК НачисленныеПениОстаткиИОбороты
		               |ГДЕ
		               |	НачисленныеПениОстаткиИОбороты.ПениПриход > 0
		               |	И НачисленныеПениОстаткиИОбороты.ПениКонечныйОстаток > 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Контрагент
					   |ИТОГИ ПО
		               |	ДокументНачисления
				         |АВТОУПОРЯДОЧИВАНИЕ";
		Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Результат.Следующий() Цикл
				
			//+++ 17.10.2017  п.2. "не должны выставлялись."
			Если Результат.ДокументНачисления.Контрагент = ШинТрейдСПб тогда
				Продолжить;
			КонецЕсли;

			
			ДокВыставление = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			ДокВыставление.Организация			 		= Справочники.Организации.НайтиПоКоду("00001");
			ДокВыставление.Дата 				 		= ТекущаяДата();
			ДокВыставление.УстановитьНовыйНомер("ПЕ");
			ДокВыставление.Контрагент			 		= Результат.ДокументНачисления.Контрагент;
			ДокВыставление.ДоговорКонтрагента	 		= Результат.ДокументНачисления.Пени[0].ДоговорКонтрагента;
			ДокВыставление.Сделка				 		= Результат.ДокументНачисления;
			ДокВыставление.Склад				 		= Справочники.Склады.НайтиПоКоду("00278"); //1
			ДокВыставление.ВидПередачи			 		= Перечисления.ВидыПередачиТоваров.СоСклада;
			ДокВыставление.УчитыватьНДС			 		= Истина;
			ДокВыставление.СуммаВключаетНДС		 		= Истина;
			ДокВыставление.ВидОперации			 		= Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
			ДокВыставление.ВалютаДокумента		 		= Константы.ВалютаРегламентированногоУчета.Получить();
			ДокВыставление.КурсВзаиморасчетов			= 1;
			ДокВыставление.КратностьВзаиморасчетов		= 1;
			ДокВыставление.Подразделение			 	= Справочники.Подразделения.НайтиПоКоду("00005"); //Головное
			ДокВыставление.ОтражатьВУправленческомУчете	= Истина;
			//ДокВыставление.ОтражатьВБухгалтерскомУчете	= Истина;
			//ДокВыставление.ОтражатьВНалоговомУчете		= Истина;
			ДокВыставление.ВыставлениеПени				= Истина;
			ДокВыставление.Ответственный				= Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
			
			ВыборкаДетальныхЗаписей = Результат.Выбрать();
			
			Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
				
				СтрокаДокумента = ДокВыставление.Услуги.Добавить();
				СтрокаДокумента.Номенклатура	 = Справочники.Номенклатура.НайтиПоНаименованию("Пени");
				СтрокаДокумента.Количество		 = 1;
				СтрокаДокумента.Цена			 = ВыборкаДетальныхЗаписей.ПениКонечныйОстаток;
				СтрокаДокумента.СтавкаНДС		 = Перечисления.СтавкиНДС.БезНДС;
				СтрокаДокумента.Содержание		 = "Пени по накладной " + ПолучитьНомераРасходов(ВыборкаДетальныхЗаписей.Сделка);
				СтрокаДокумента.Сделка		     = ВыборкаДетальныхЗаписей.Сделка;
				СтрокаДокумента.ДоговорПени 	 = ВыборкаДетальныхЗаписей.ДоговорНачисления;
				
				РассчитатьСуммуТабЧасти(СтрокаДокумента, ДокВыставление);
				РассчитатьСуммуНДСТабЧасти(СтрокаДокумента, ДокВыставление);
				
			КонецЦикла;
			
			Если ДокВыставление.Услуги.Количество() > 0 И ДокВыставление.Услуги.Итог("Сумма") > 0 Тогда
				ДокВыставление.Записать(РежимЗаписиДокумента.Проведение);
				УзелБП = ПланыОбмена.ОбменУТ_БП.НайтиПоКоду("БП");
				ПланыОбмена.ЗарегистрироватьИзменения(УзелБП, ДокВыставление.Ссылка);
				СписокРеализаций.Добавить(ДокВыставление.Ссылка);
			Конецесли;
			
		КонецЦикла;	//выборка начислений пени		
			
	КонецЕсли; // ДеньНедели 5
					   
КонецПроцедуры

// Миронычев
Процедура СобратьИнформациюПоПДЗ() Экспорт
	Предоставитьменеджерупросрочкупопдз();
Конецпроцедуры

Процедура ПроверитьКонтрагентовЧерезФНС()Экспорт
	ПроверкаНовыхКонтрагентовПоБазеФНС()
КонецПроцедуры

Процедура ВыгрузкаНаполеон() Экспорт
	ЗапуститьОбработкуНаполеон(1);	
КонецПроцедуры

Процедура ПриемЗаказовНаполеон () Экспорт
	ЗапуститьОбработкуНаполеон(2);
КонецПроцедуры

Процедура СобратьИнформациюПоНесоответствиюПлану() Экспорт
	ПроверкаСоответствияПланаФактуПоНаправлениюПродаж();
Конецпроцедуры

Процедура СобратьИнформациюПоОтсутствиюПФДокументовВозвратов() Экспорт
	ПроверкаОтсутствияПФДокументовВозврата();
Конецпроцедуры

//***2017.11.17
Процедура ЗаполнениеABCКлассификацииПокупателей() Экспорт
	
	Если НачалоДня(ТекущаяДата()) = НачалоМесяца(ТекущаяДата()) Тогда
		
		СписокПодразделений = Новый СписокЗначений;
		СписокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00005"));
		СписокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00112"));
		СписокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00106"));
		СписокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00138"));
		
		СоответствиеСвойстваПодразделению = Новый Соответствие;
		СоответствиеСвойстваПодразделению.Вставить(Справочники.Подразделения.НайтиПоКоду("00005"), ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90262"));
		СоответствиеСвойстваПодразделению.Вставить(Справочники.Подразделения.НайтиПоКоду("00112"), ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90264"));
		СоответствиеСвойстваПодразделению.Вставить(Справочники.Подразделения.НайтиПоКоду("00106"), ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90265"));
		СоответствиеСвойстваПодразделению.Вставить(Справочники.Подразделения.НайтиПоКоду("00138"), ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90266"));
		
		Для каждого Подразделение ИЗ СписокПодразделений Цикл
			
			ДокАВС = Документы.ABCКлассификацияПокупателей.СоздатьДокумент();
			ДокАВС.Дата = НачалоДня(ТекущаяДата());
			ДокАВС.ПроцентAКласса = 80;
			ДокАВС.ПроцентBКласса = 15;
			ДокАВС.ПроцентCКласса = 5;
			ДокАВС.ДатаНачала = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), -12);
			ДокАВС.ДатаОкончания = НачалоМесяца(ТекущаяДата())-1;
			ДокАВС.Подразделение = Подразделение.Значение;
			ДокАВС.Комментарий = "Автоматическое заполнение классов по подразделению " + ДокАВС.Подразделение.Наименование;
			ДокАВС.ЗаполнитьКлассВсоответствииСПродажамиВнутриПодразделения();
			Попытка
				ДокАВС.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ДокАВС.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
			
			Если ДокАВС.Проведен Тогда
				
				ТаблицаКонтрагентов = Новый ТаблицаЗначений;
				ТаблицаКонтрагентов = ДокАВС.ТаблицаРаспределенияКонтрагентов.Выгрузить(,"Контрагент");
				
				СвойствоАВС = СоответствиеСвойстваПодразделению.Получить(Подразделение.Значение);
				
				//анализ изменений по сравнению в последними расчетами
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("АВСклассПодразделения", СвойствоАВС);
				Запрос.Текст = "ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Объект КАК Контрагент
				|ИЗ
				|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Свойство = &АВСклассПодразделения";
				Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл
					Если ТаблицаКонтрагентов.Найти(Результат.Контрагент) = Неопределено Тогда
						//очищаем класс, т.к. новых продаж у него нет
						МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
						МенеджерЗначенияСвойств.Объект = Результат.Контрагент;
						МенеджерЗначенияСвойств.Свойство = СвойствоАВС;
						МенеджерЗначенияСвойств.Прочитать();	
						МенеджерЗначенияСвойств.Объект   = Результат.Контрагент;
						МенеджерЗначенияСвойств.Свойство = СвойствоАВС;
						МенеджерЗначенияСвойств.Значение = Перечисления.ABCКлассификация.ПустаяСсылка();
						МенеджерЗначенияСвойств.Записать();
					КонецЕсли;
				КонецЦикла;
				
				//запись новых значений
				Для каждого СтрТЧ ИЗ ДокАВС.ТаблицаРаспределенияКонтрагентов Цикл
					МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					МенеджерЗначенияСвойств.Объект = СтрТЧ.Контрагент;
					МенеджерЗначенияСвойств.Свойство = СвойствоАВС;
					МенеджерЗначенияСвойств.Прочитать();	
					МенеджерЗначенияСвойств.Объект   = СтрТЧ.Контрагент;
					МенеджерЗначенияСвойств.Свойство = СвойствоАВС;
					МенеджерЗначенияСвойств.Значение = СтрТЧ.ABCКлассификация;
					МенеджерЗначенияСвойств.Записать();
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры