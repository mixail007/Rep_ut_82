////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылки на подчиненные справочники).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//  ИмяЕдиницыИзмерения  - наименование единицы измерения
//
Процедура ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяЕдиницыИзмерения = "ЕдиницаИзмерения") Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// При изменении номенклатуры очистим ссылки на подчиненные справочники
	Если ЕстьРеквизитТабЧастиДокумента(ИмяЕдиницыИзмерения, МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения].Владелец Тогда
		СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения] = Неопределено;
	КонецЕсли;

	Если ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.СерияНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.СерияНоменклатуры = Неопределено;
	КонецЕсли;

	Если ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииНоменклатурыТабЧасти()

// Процедура выполняет стандартные действия при изменении единицы цены
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти   = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда

			Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" не выбрана единица измерения цены!
				                 |Пересчет количества невозможен.");
			Иначе
				Если СтрокаТабличнойЧасти.Коэффициент = 0 Тогда
					СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" у единицы измерения цены "
					                 +СтрокаТабличнойЧасти.ЕдиницаИзмерения.Наименование+" не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				Иначе
					СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
					НовоеЗначениеКоэффициента  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
					
					Если НовоеЗначениеКоэффициента <> СтароеЗначениеКоэффициента Тогда
						СтрокаТабличнойЧасти.Коэффициент = НовоеЗначениеКоэффициента;

						Если НЕ ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
							СтрокаТабличнойЧасти.Количество  = СтрокаТабличнойЧасти.Количество * СтароеЗначениеКоэффициента
							                                   / НовоеЗначениеКоэффициента;
						КонецЕсли;

						РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

						Если ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена *НовоеЗначениеКоэффициента 
							                            / СтароеЗначениеКоэффициента;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;

		// Установить коэффициент
		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		// если в табличной части есть реквизит КоличествоМест, то цена задается не за ЕдиницуИзмерения,
		// а за базовую единицу хранения остатков. Т.е. цену пересчитывать не нужно
		Если ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			// надо обновить изменение к-ва в документе
			РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		Иначе
			// ПересчитатьЦену
			Если СтароеЗначениеКоэффициента > 0
				И ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Коэффициент 
				                            / СтароеЗначениеКоэффициента;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЕдиницыТабЧасти

// Процедура выполняет стандартные действия при изменении единицы мест
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииЕдиницыМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// Рассчитывает количество мест исходя из количества
	РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

КонецПроцедуры // ПриИзмененииЕдиницыМестаТабЧасти

// Процедура выполняет стандартные действия при изменении суммы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ТекПользователь, РасчетАвтоматическихСкидок = Ложь) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе	
		Если ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			ПересчитыватьСкидку = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
			Если (ПересчитыватьСкидку И СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0) Тогда
				Если (СтрокаТабличнойЧасти.Цена = 0) Или (СтрокаТабличнойЧасти.Количество = 0) Тогда
					СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
					Если СтрокаТабличнойЧасти.Цена = 0 Тогда
						СообщитьОбОшибке("Цена равна 0, после изменения суммы установлена нулевая скидка!");
					Иначе
						СообщитьОбОшибке("Количество равно 0, после изменения суммы установлена нулевая скидка!");
					КонецЕсли;
				Иначе
					СуммаСоСкидками = СтрокаТабличнойЧасти.Сумма;
					СуммаБезСкидок  = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
					ПроцентСкидки   = 100 - (СуммаСоСкидками*100)/СуммаБезСкидок;
					ПроцентАвтоматическихСкидок = 0;
					Если ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						ПроцентАвтоматическихСкидок = СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
					КонецЕсли;
					СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ПроцентСкидки - ПроцентАвтоматическихСкидок;
				КонецЕсли;
			Иначе
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки >= 100 Тогда
					СтрокаТабличнойЧасти.Цена = 0;
					СообщитьОбОшибке("Скидка равна 100%, после изменения суммы установлена нулевая цена!");
				Иначе
					ПроцентАвтоматическихСкидок = 0;
					Если ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						ПроцентАвтоматическихСкидок = СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
					КонецЕсли;
					СуммаБезСкидок  = СтрокаТабличнойЧасти.Сумма * 100/
					                  (100 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки - ПроцентАвтоматическихСкидок);
					СтрокаТабличнойЧасти.Цена = СуммаБезСкидок / СтрокаТабличнойЧасти.Количество;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры // ПриИзмененииСуммыТабЧасти()

// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылку на подчиненный справочник единиц).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части возвратная тара документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// При изменении номенклатуры очистим ссылку на подчиненный справочник
	Если ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ЕдиницаИзмерения.Владелец Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
	КонецЕсли; 

КонецПроцедуры // ПриИзмененииВозвратнойТарыТабЧасти()

// Процедура выполняет стандартные действия при изменении суммы в строке возвратной тары документа.
//
// Параметры:
//  СтрокаВозвратнойТары - строка табличной части возвратная тара документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииСуммыВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ДокументОбъект) Экспорт

	Если ЗначениеНеЗаполнено(СтрокаВозвратнойТары.Количество) Тогда
		СтрокаВозвратнойТары.Цена = 0;
	Иначе	
		СтрокаВозвратнойТары.Цена = СтрокаВозвратнойТары.Сумма / СтрокаВозвратнойТары.Количество;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииСуммыВозвратнойТарыТабЧасти()

// Устанавливает запрет на изменение видимости заданных колонок в заданной коллекции колонок 
// табличного поля
//
// Параметры:
//  Колонки          - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых отключить нельзя
//
Процедура УстановитьИзменятьВидимостьКолонокТабЧасти(Колонки, СтруктураКолонок) Экспорт

// устанавливаем стандартные запреты на изменение видимости колонок
Для каждого КолонкаТаблицы из Колонки Цикл
	КолонкаТаблицы.ИзменятьВидимость = НЕ СтруктураКолонок.Свойство(КолонкаТаблицы.Имя);
КонецЦикла;

КонецПроцедуры // УстановитьИзменятьВидимостьКолонокТабЧасти()

// Изменяет видимость колонки табличного поля (напрмер, табличной части документа).
// Если изменение видимости колонки запрещено, то предварительно разрешает изменять видимость колонки.
//
// Параметры:
//  Колонка   - колонка табличного поля, 
//  Видимость - булево, устанавливаемый флаг видимости колонки.
//
Процедура УстановитьВидимостьКолонкиТабЧасти(Колонка, Видимость) Экспорт

	Если Колонка.ИзменятьВидимость Тогда
		Колонка.Видимость = Видимость;
	Иначе // надо вначале разрешить менять видимость
		Колонка.ИзменятьВидимость = Истина;
		Колонка.Видимость = Видимость;
		Колонка.ИзменятьВидимость = Ложь;
	КонецЕсли; 

КонецПроцедуры // УстановитьВидимостьКолонкиТабЧасти()

// Процедура заполняет Содержание из полного наименования номенклатуры в строке табличной части
//
// Параметры
//  СтрокаТабличнойЧасти - Строка табличной части
//
Процедура ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, Документобъект) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("Содержание", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСодержаниеТабЧасти()

// Процедура заполняет качество номенклатуры в строке табличной части
//
// Параметры
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, Документобъект) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если Не ЕстьРеквизитТабЧастиДокумента("Номенклатура", МетаданныеДокумента, ИмяТабличнойЧасти)
		 Или Не СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
			СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
		Иначе
			СтрокаТабличнойЧасти.Качество = Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьКачествоНоменклатурыТабЧасти()

// Процедура заполняет склад и оредер в строке табличной части по реквизитам шапки документа
//
Процедура ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СкладИзШапки = Ложь) Экспорт

	Если ДокументОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Если Не ЗначениеНеЗаполнено(ДокументОбъект.СкладОрдер) Тогда
			Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ПриходныйОрдер) Тогда
				СтрокаТабличнойЧасти.ПриходныйОрдер = ДокументОбъект.СкладОрдер;
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтрокаТабличнойЧасти.Склад = ДокументОбъект.СкладОрдер.Склад;
			Иначе
				Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
					СтрокаТабличнойЧасти.Склад = ДокументОбъект.СкладОрдер.Склад;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СкладИзШапки Тогда
			СтрокаТабличнойЧасти.Склад = ДокументОбъект.СкладОрдер;
		Иначе
			Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
				СтрокаТабличнойЧасти.Склад = ДокументОбъект.СкладОрдер;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет склад и оредер по реквизитам шапки документа во всех строках 
// заданной табличной части, в которых эти реквизиты не заполнены табличной части 
//
Процедура ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ДокументОбъект, ТабЧасть, СкладИзШапки = Ложь) Экспорт

	Для каждого СтрокаТЧ из ТабЧасть Цикл

		ЗаполнитьСкладИОрдерТабЧасти(СтрокаТЧ, ДокументОбъект, СкладИзШапки);

	КонецЦикла;

КонецПроцедуры

// Процедура заполняет реквизит качество в табличной части документа
//
Процедура ЗаполнитьКачествоПоУмолчанию(ТабЧасть, ЗаполнитьВсеСтрокиНовый = Ложь) Экспорт

	Для Каждого Строка Из ТабЧасть Цикл
		Если ЗаполнитьВсеСтрокиНовый ИЛИ ЗначениеНеЗаполнено(Строка.Качество) Тогда
			Строка.Качество = Справочники.Качество.Новый;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура очищает значение нужного реквизита в переданной ТЧ.
//
// Параметры:
//  ТабЧаст      - табличная часть,
//  ИмяРеквизита - строка, имя реквизита.
//
Процедура ОчиститьРеквизитТЧ(ТабЧасть, ИмяРеквизита) Экспорт

	Для Каждого Строка Из ТабЧасть Цикл
		Если Не ЗначениеНеЗаполнено(Строка[ИмяРеквизита]) Тогда
			Строка[ИмяРеквизита] = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры //ОчиститьРеквизитТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ РАССЧЕТА СКИДОК ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура выполняет запрос по регистру "СкидкиНаценкиНоменклатуры" для скидок ао количеству товара.
//
// Параметры:
//  СписокПолучателей               - элементы справочников "Склады", "Контрагенты", "ДоговорыКонтрагентов",
//  ВидРеализации                   - перечисление "ВидыСкидок", служит для выбора типов получателей скидки,
//  СписокНоменклатуры              - список значений, содержащий элементы справочника "Номенклатура",
//  для которых получаем скидку,
//  СкидкиПоКоличествуТоваров       - Таблица значений, содержащая найденные типы скидок по количеству товаров.
//  ДатаСкидок                      - дата, на которую ищутся скидки,
//  СтруктураКурса                  - структура, содержащая курс и кратность валюты, в которой надо рассчитать 
//  ограничение скидки,
//  ЗначениеУсловия                 - конкретное значение, по которому нужно подобрать скидки,
//  ПоДнямНедели                    - признак того, что необходимы скидки в разрезе дней недели.
//
Процедура ЗапросПоКоличествуТовара(СписокПолучателей, ВидРеализации, СписокНоменклатуры,
	                               СкидкиПоКоличествуТоваров, ДатаСкидок, СтруктураКурса, ЗначениеУсловия = Неопределено,
	                               ПоДнямНедели = Ложь, БезУказанияВремени = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"                    , ДатаСкидок);
	Запрос.УстановитьПараметр("ПустаяДата"              , '00010101000000');
	Запрос.УстановитьПараметр("ДеньНедели"              , Перечисления.ДниНедели[ДеньНедели(ДатаСкидок)-1]);
	Запрос.УстановитьПараметр("СписокПолучателей"       , СписокПолучателей);
	Час     = Час(ДатаСкидок);
	Минута  = Минута(ДатаСкидок);
	Секунда = Секунда(ДатаСкидок);
	Запрос.УстановитьПараметр("ТекущееВремя"                ,  Дата(1,1,1,Час,Минута,Секунда));
	Запрос.УстановитьПараметр("УсловиеКоличествоТовара"     , Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	Запрос.УстановитьПараметр("КурсВалютыДокумента"         , СтруктураКурса.Курс);
	Запрос.УстановитьПараметр("КратностьВалютыДокумента"    , СтруктураКурса.Кратность);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);

	Текст = "ВЫБРАТЬ
	        |	ВремяДействия.Регистратор КАК ВремяДействияРегистратор,
	        |	Скидки.Регистратор.Представление КАК РегистраторПредставление,
	        |	Скидки.ПолучательСкидки,
	        |	Скидки.Номенклатура КАК Номенклатура,
	        |	Скидки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	        |	Скидки.Качество КАК Качество,
	        |	Скидки.ЗначениеУсловия КАК ЗначениеУсловияАвтоматическойСкидки,
	        |	Скидки.ПроцентСкидкиНаценки,";
	Если ПоДнямНедели Тогда
		Текст = Текст + "
	        |	ВремяДействия.ДеньНедели,
	        |	ВремяДействия.ВремяНачала,
	        |	ВремяДействия.ВремяОкончания,";
	КонецЕсли;
	Текст = Текст + "
	        |	Скидки.ОграничениеСкидкиНаценки * КурсыВалютСрезПоследних.Курс * &КратностьВалютыДокумента 
	        |         / КурсыВалютСрезПоследних.Кратность / &КурсВалютыДокумента КАК ОграничениеСкидкиНаценки,
	        |	Скидки.Валюта
	        |ИЗ
	        |	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(&Дата, ПолучательСкидки В (&СписокПолучателей) И Номенклатура В (&СписокНоменклатуры) И Условие = &УсловиеКоличествоТовара) КАК Скидки
	        |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
	        |	ПО Скидки.Валюта = КурсыВалютСрезПоследних.Валюта
	        |Левое СОЕДИНЕНИЕ РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	        |	ПО Скидки.Регистратор = ВремяДействия.Регистратор
	        |
	        |ГДЕ";
	Если НЕ ПоДнямНедели Тогда
		Текст = Текст + "
	        |	(ВремяДействия.Регистратор ЕСТЬ NULL";
		Если НЕ БезУказанияВремени Тогда
			Текст = Текст + "
	        |	ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели 
	        |	И ВремяДействия.ВремяНачала <= &ТекущееВремя 
	        |	И ВремяДействия.ВремяОкончания >= &ТекущееВремя) И";
		Иначе
			Текст = Текст + ") И";
		КонецЕсли;
	Иначе
		Текст = Текст + "
		|	НЕ ВремяДействия.Регистратор ЕСТЬ NULL И";
	КонецЕсли;
	Текст = Текст + "
	        |	(Скидки.ПроцентСкидкиНаценки <> 0) И
	        |	(Скидки.ДатаОкончания = &ПустаяДата ИЛИ Скидки.ДатаОкончания > &Дата)";
	Если ЗначениеУсловия <> Неопределено Тогда
		Текст = Текст + "
			|	И(ВЫРАЗИТЬ(Скидки.ЗначениеУсловия КАК ЧИСЛО) = &ЗначениеУсловия)";
		Запрос.УстановитьПараметр("ЗначениеУсловия", ЗначениеУсловия);
	КонецЕсли;
	Текст = Текст + "
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Номенклатура,
	        |	ХарактеристикаНоменклатуры,
	        |	ЗначениеУсловияАвтоматическойСкидки УБЫВ
	        |";

	Запрос.Текст              = Текст;
	СкидкиПоКоличествуТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
		ЕстьСкидкиПоСкладу = Неопределено;
		Склад = СписокПолучателей[0];
		Если Склад <> Справочники.Склады.ПустаяСсылка() Тогда
			ЕстьСкидкиПоСкладу = СкидкиПоКоличествуТоваров.Найти(Склад, "ПолучательСкидки");
		КонецЕсли;

		//Нашли скидки по складу, значит скидки по пустому складу не нужны.
		Если ЕстьСкидкиПоСкладу <> Неопределено Тогда
			КоличествоСтрок = СкидкиПоКоличествуТоваров.Количество();
			Для Сч =1 По КоличествоСтрок Цикл
				СтрокаСкидок = СкидкиПоКоличествуТоваров[КоличествоСтрок - Сч];
				Если СтрокаСкидок.ПолучательСкидки <> Склад Тогда
					СкидкиПоКоличествуТоваров.Удалить(СтрокаСкидок);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ЕстьСкидкиПоДоговору = Неопределено;
		Контрагент         = СписокПолучателей[0].Значение;
		ДоговорКонтрагента = СписокПолучателей[1].Значение;

		Если ДоговорКонтрагента <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			ЕстьСкидкиПоДоговору = СкидкиПоКоличествуТоваров.Найти(ДоговорКонтрагента, "ПолучательСкидки");
		КонецЕсли;

		//Нашли скидки по договору, значит скидки по контрагенту и по пустому договору не нужны.
		Если ЕстьСкидкиПоДоговору <> Неопределено Тогда
			КоличествоСтрок = СкидкиПоКоличествуТоваров.Количество();
			Для Сч =1 По КоличествоСтрок Цикл
				СтрокаСкидок = СкидкиПоКоличествуТоваров[КоличествоСтрок - Сч];
				Если СтрокаСкидок.ПолучательСкидки <> ДоговорКонтрагента Тогда
					СкидкиПоКоличествуТоваров.Удалить(СтрокаСкидок);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЕстьСкидкиПоКонтрагенту = Неопределено;
			Если Контрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
				ЕстьСкидкиПоКонтрагенту = СкидкиПоКоличествуТоваров.Найти(Контрагент, "ПолучательСкидки");
			КонецЕсли;

			//Нашли скидки по контрагенту, значит скидки по пустому договору не нужны.
			Если ЕстьСкидкиПоКонтрагенту <> Неопределено Тогда
				КоличествоСтрок = СкидкиПоКоличествуТоваров.Количество();
				Для Сч =1 По КоличествоСтрок Цикл
					СтрокаСкидок = СкидкиПоКоличествуТоваров[КоличествоСтрок - Сч];
					Если СтрокаСкидок.ПолучательСкидки <> Контрагент Тогда
						СкидкиПоКоличествуТоваров.Удалить(СтрокаСкидок);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //ЗапросПоКоличествуТовара()

// Процедура выполняет запрос по регистру "СкидкиНаценкиНоменклатуры" для скидок на сумму документа.
//
// Параметры:
//  СписокПолучателей               - элементы справочников "Склады", "Контрагенты", "ДоговорыКонтрагентов",
//  СуммаДокумента                  - сумма без скидок документа,для которой получаем скидку,
//  ВидРеализации                   - перечисление "ВидыСкидок", служит для выбора типов получателей скидки,
//  СписокНоменклатуры              - список значений, содержащий элементы справочника "Номенклатура",
//  для которых получаем скидку,
//  СкидкиПоСуммеДокумента          - Таблица значений, содержащая найденные типы скидок по сумме документа
//  ДатаСкидок                      - дата, на которую ищутся скидки,
//  СтруктураКурса                  - структура, содержащая курс и кратность валюты, в которой надо рассчитать 
//  ограничение скидки.
//
Процедура ЗапросПоСуммеДокумента(СписокПолучателей, ВидРеализации, СписокНоменклатуры,
	                             СкидкиПоСуммеДокумента, ДатаСкидок, СтруктураКурса, БезУказанияВремени = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"                         , ДатаСкидок);
	Запрос.УстановитьПараметр("ПустаяДата"                   , '00010101000000');
	Запрос.УстановитьПараметр("НовоеКачество"                , Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ДеньНедели"                   , Перечисления.ДниНедели[ДеньНедели(ДатаСкидок)-1]);
	Запрос.УстановитьПараметр("СписокПолучателей"            , СписокПолучателей);
	Час     = Час(ДатаСкидок);
	Минута  = Минута(ДатаСкидок);
	Секунда = Секунда(ДатаСкидок);
	Запрос.УстановитьПараметр("ТекущееВремя"                 , Дата(1,1,1,Час,Минута,Секунда));
	Запрос.УстановитьПараметр("УсловиеСуммаДокументаПродажи" , Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента);
	Запрос.УстановитьПараметр("КурсВалютыДокумента"          , СтруктураКурса.Курс);
	Запрос.УстановитьПараметр("КратностьВалютыДокумента"     , СтруктураКурса.Кратность);
	Запрос.УстановитьПараметр("СписокНоменклатуры"           , СписокНоменклатуры);

	Текст = "
	|ВЫБРАТЬ
	|	ВремяДействия.Регистратор КАК ВремяДействияРегистратор,
	|	Скидки.Регистратор.Представление КАК РегистраторПредставление,
	|	Скидки.ПолучательСкидки,
	|	Скидки.Номенклатура,
	|	Скидки.ХарактеристикаНоменклатуры,
	|	Скидки.Качество КАК Качество,
	|	ВЫРАЗИТЬ (Скидки.ЗначениеУсловия КАК ЧИСЛО) * КурсыВалютСрезПоследних.Курс
	|			* &КратностьВалютыДокумента
	|			/КурсыВалютСрезПоследних.Кратность
	|			/&КурсВалютыДокумента      КАК ЗначениеУсловияАвтоматическойСкидки,
	|	Скидки.ПроцентСкидкиНаценки,
	|	Скидки.ОграничениеСкидкиНаценки * КурсыВалютСрезПоследних.Курс
	|			* &КратностьВалютыДокумента
	|			/КурсыВалютСрезПоследних.Кратность
	|			/&КурсВалютыДокумента      КАК ОграничениеСкидкиНаценки,
	|	Скидки.Валюта
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(&Дата,
	|		ПолучательСкидки В (&СписокПолучателей)
	|		И Номенклатура В (&СписокНоменклатуры)
	|		И Условие = &УсловиеСуммаДокументаПродажи)
	|КАК Скидки
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата)           КАК КурсыВалютСрезПоследних
	|	ПО Скидки.Валюта = КурсыВалютСрезПоследних.Валюта
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|	ПО Скидки.Регистратор = ВремяДействия.Регистратор
	|ГДЕ 
	|	(ВремяДействия.Регистратор ЕСТЬ NULL";
	Если НЕ БезУказанияВремени Тогда
		Текст = Текст + "
		|	ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели 
		|	И ВремяДействия.ВремяНачала <= &ТекущееВремя 
		|	И ВремяДействия.ВремяОкончания >= &ТекущееВремя) И";
		Иначе
			Текст = Текст + ") И";
		КонецЕсли;
	Текст = Текст + "
	|	(Скидки.ПроцентСкидкиНаценки <> 0) И
	|	(Скидки.ДатаОкончания = &ПустаяДата ИЛИ Скидки.ДатаОкончания > &Дата)
	|УПОРЯДОЧИТЬ ПО ЗначениеУсловияАвтоматическойСкидки УБЫВ
	|";

	Запрос.Текст           = Текст;
	СкидкиПоСуммеДокумента = Запрос.Выполнить().Выгрузить();

	Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
		ЕстьСкидкиПоСкладу = Неопределено;
		Склад = СписокПолучателей[0];
		Если Склад <> Справочники.Склады.ПустаяСсылка() Тогда
			ЕстьСкидкиПоСкладу = СкидкиПоСуммеДокумента.Найти(Склад, "ПолучательСкидки");
		КонецЕсли;

		//Нашли скидки по складу, значит скидки по пустому складу не нужны.
		Если ЕстьСкидкиПоСкладу <> Неопределено Тогда
			КоличествоСтрок = СкидкиПоСуммеДокумента.Количество();
			Для Сч =1 По КоличествоСтрок Цикл
				СтрокаСкидок = СкидкиПоСуммеДокумента[КоличествоСтрок - Сч];
				Если СтрокаСкидок.ПолучательСкидки <> Склад Тогда
					СкидкиПоСуммеДокумента.Удалить(СтрокаСкидок);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ЕстьСкидкиПоДоговору = Неопределено;
		Контрагент         = СписокПолучателей[0].Значение;
		ДоговорКонтрагента = СписокПолучателей[1].Значение;

		Если ДоговорКонтрагента <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			ЕстьСкидкиПоДоговору = СкидкиПоСуммеДокумента.Найти(ДоговорКонтрагента, "ПолучательСкидки");
		КонецЕсли;

		//Нашли скидки по договору, значит скидки по контрагенту и по пустому договору не нужны.
		Если ЕстьСкидкиПоДоговору <> Неопределено Тогда
			КоличествоСтрок = СкидкиПоСуммеДокумента.Количество();
			Для Сч =1 По КоличествоСтрок Цикл
				СтрокаСкидок = СкидкиПоСуммеДокумента[КоличествоСтрок - Сч];
				Если СтрокаСкидок.ПолучательСкидки <> ДоговорКонтрагента Тогда
					СкидкиПоСуммеДокумента.Удалить(СтрокаСкидок);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЕстьСкидкиПоКонтрагенту = Неопределено;
			Если Контрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
				ЕстьСкидкиПоКонтрагенту = СкидкиПоСуммеДокумента.Найти(Контрагент, "ПолучательСкидки");
			КонецЕсли;

			//Нашли скидки по контрагенту, значит скидки по пустому договору не нужны.
			Если ЕстьСкидкиПоКонтрагенту <> Неопределено Тогда
				КоличествоСтрок = СкидкиПоСуммеДокумента.Количество();
				Для Сч =1 По КоличествоСтрок Цикл
					СтрокаСкидок = СкидкиПоСуммеДокумента[КоличествоСтрок - Сч];
					Если СтрокаСкидок.ПолучательСкидки <> Контрагент Тогда
						СкидкиПоСуммеДокумента.Удалить(СтрокаСкидок);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //ЗапросПоСуммеДокумента()

// Процедура выполняет запрос по регистру "СкидкиНаценкиНоменклатуры" для скидок на сумму документа.
//
// Параметры:
//  СписокПолучателей               - элементы справочников "Склады", "Контрагенты", "ДоговорыКонтрагентов",
//  ВидОплаты                       - элемент справочника "ВидыОплатЧекаККМ" для которого ищем скидки,
//  ВидРеализации                   - перечисление "ВидыСкидок", служит для выбора типов получателей скидки,
//  СписокНоменклатуры              - список значений, содержащий элементы справочника "Номенклатура",
//  для которых получаем скидку,
//  СкидкиПоВидуОплаты              - Таблица значений, содержащая найденные типы скидок по виду оплаты документа
//  ДатаСкидок                      - дата, на которую ищутся скидки,
//  СтруктураКурса                  - структура, содержащая курс и кратность валюты, в которой надо рассчитать
//  ограничение скидки.
//
Процедура ЗапросПоВидуОплаты(СписокПолучателей, ВидОплаты, ВидРеализации, СписокНоменклатуры, СкидкиПоВидуОплаты, ДатаСкидок, СтруктураКурса)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"                    , ДатаСкидок);
	Запрос.УстановитьПараметр("ПустаяДата"              , '00010101000000');
	Запрос.УстановитьПараметр("ДеньНедели"              , Перечисления.ДниНедели[ДеньНедели(ДатаСкидок)-1]);
	Запрос.УстановитьПараметр("СписокПолучателей"       , СписокПолучателей);
	Час     = Час(ДатаСкидок);
	Минута  = Минута(ДатаСкидок);
	Секунда = Секунда(ДатаСкидок);
	Запрос.УстановитьПараметр("ТекущееВремя"            ,  Дата(1,1,1,Час,Минута,Секунда));
	Запрос.УстановитьПараметр("УсловиеВидыОплаты"       , Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты);
	Запрос.УстановитьПараметр("ВидОплаты"               , ВидОплаты);
	Запрос.УстановитьПараметр("КурсВалютыДокумента"      , СтруктураКурса.Курс);
	Запрос.УстановитьПараметр("КратностьВалютыДокумента" , СтруктураКурса.Кратность);
	Запрос.УстановитьПараметр("СписокНоменклатуры"      , СписокНоменклатуры);

	Текст = "
	|ВЫБРАТЬ
	|	ВремяДействия.Регистратор КАК ВремяДействияРегистратор,
	|	Скидки.Регистратор.Представление КАК РегистраторПредставление,
	|	Скидки.ПолучательСкидки,
	|	Скидки.Номенклатура,
	|	Скидки.ХарактеристикаНоменклатуры,
	|	Скидки.Качество КАК Качество,
	|	Скидки.ЗначениеУсловия КАК ЗначениеУсловияАвтоматическойСкидки,
	|	Скидки.ПроцентСкидкиНаценки,
	|	Скидки.ОграничениеСкидкиНаценки * КурсыВалютСрезПоследних.Курс
	|			* &КратностьВалютыДокумента
	|			/КурсыВалютСрезПоследних.Кратность
	|			/&КурсВалютыДокумента      КАК ОграничениеСкидкиНаценки,
	|	Скидки.Валюта
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(&Дата,
	|		ПолучательСкидки В (&СписокПолучателей)
	|		И Номенклатура В (&СписокНоменклатуры)
	|		И Условие = &УсловиеВидыОплаты И ЗначениеУсловия = &ВидОплаты
	|)КАК Скидки
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
	|	ПО Скидки.Валюта = КурсыВалютСрезПоследних.Валюта
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|	ПО Скидки.Регистратор = ВремяДействия.Регистратор
	|ГДЕ 
	|	(ВремяДействия.Регистратор ЕСТЬ NULL ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели И ВремяДействия.ВремяНачала <= &ТекущееВремя И ВремяДействия.ВремяОкончания >= &ТекущееВремя) И
	|	(Скидки.ПроцентСкидкиНаценки <> 0) И
	|	(Скидки.ДатаОкончания = &ПустаяДата ИЛИ Скидки.ДатаОкончания > &Дата)
	|УПОРЯДОЧИТЬ ПО ЗначениеУсловияАвтоматическойСкидки УБЫВ
	|";

	Запрос.Текст       = Текст;
	СкидкиПоВидуОплаты = Запрос.Выполнить().Выгрузить();

	Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
		ЕстьСкидкиПоСкладу = Неопределено;
		Склад = СписокПолучателей[0];
		Если Склад <> Справочники.Склады.ПустаяСсылка() Тогда
			ЕстьСкидкиПоСкладу = СкидкиПоВидуОплаты.Найти(Склад, "ПолучательСкидки");
		КонецЕсли;

		//Нашли скидки по складу, значит скидки по пустому складу не нужны.
		Если ЕстьСкидкиПоСкладу <> Неопределено Тогда
			КоличествоСтрок = СкидкиПоВидуОплаты.Количество();
			Для Сч =1 По КоличествоСтрок Цикл
				СтрокаСкидок = СкидкиПоВидуОплаты[КоличествоСтрок - Сч];
				Если СтрокаСкидок.ПолучательСкидки <> Склад Тогда
					СкидкиПоВидуОплаты.Удалить(СтрокаСкидок);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ЕстьСкидкиПоДоговору = Неопределено;
		Контрагент         = СписокПолучателей[0].Значение;
		ДоговорКонтрагента = СписокПолучателей[1].Значение;
		Если ДоговорКонтрагента <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			ЕстьСкидкиПоДоговору = СкидкиПоВидуОплаты.Найти(ДоговорКонтрагента, "ПолучательСкидки");
		КонецЕсли;

		//Нашли скидки по договору, значит скидки по контрагенту и по пустому договору не нужны.
		Если ЕстьСкидкиПоДоговору <> Неопределено Тогда
			КоличествоСтрок = СкидкиПоВидуОплаты.Количество();
			Для Сч =1 По КоличествоСтрок Цикл
				СтрокаСкидок = СкидкиПоВидуОплаты[КоличествоСтрок - Сч];
				Если СтрокаСкидок.ПолучательСкидки <> ДоговорКонтрагента Тогда
					СкидкиПоВидуОплаты.Удалить(СтрокаСкидок);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЕстьСкидкиПоКонтрагенту = Неопределено;
			Если Контрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
				ЕстьСкидкиПоКонтрагенту = СкидкиПоВидуОплаты.Найти(Контрагент, "ПолучательСкидки");
			КонецЕсли;

			//Нашли скидки по контрагенту, значит скидки по пустому договору не нужны.
			Если ЕстьСкидкиПоКонтрагенту <> Неопределено Тогда
				КоличествоСтрок = СкидкиПоВидуОплаты.Количество();
				Для Сч =1 По КоличествоСтрок Цикл
					СтрокаСкидок = СкидкиПоВидуОплаты[КоличествоСтрок - Сч];
					Если СтрокаСкидок.ПолучательСкидки <> Контрагент Тогда
						СкидкиПоВидуОплаты.Удалить(СтрокаСкидок);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //ЗапросПоВидуОплаты()

// Процедура выполняет поиск и установку скидок на товар по соответствию условиям скидок.
// В результате в таблице ТаблицаДляРасчетаСкидок будут расставлены проценты, условия
// и значения условий скидок.
//
// Параметры:
//  ВыбСтрокиТовара                 - массив строк таблицы значений, в которую записываем скидки,
//  Скидки                          - таблица значений, содержит скидки, найденные для товара,
//  УсловиеСкидки                   - перечисление "УсловияСкидкиНаценки",
//  ВсеБезКачества                  - булево, признак отсутствия поля "Качество" в табличной части товаров.
//
Процедура ВыбратьСкидки(ВыбСтрокиТовара ,Скидки, УсловиеАвтоматическойСкидки, ВсеБезКачества, 
	                    СуммаСкидок, ОбщееЗначениеУсловияАвтоматическойСкидки);

	ВсеПоляЗаполнены                   = Новый Массив;
	НеЗаполненоКачество                = Новый Массив;//Для всякого качества.
	НеЗаполненаХарактеристика          = Новый Массив;//Для всякой характеристики.
	НеЗаполненоКачествоИХарактеристика = Новый Массив;//Для всякого качества и всякой характеристики.
	ЗаполненоТолькоКачество            = Новый Массив;//Для указанного качества.
	ВсеПоляНеЗаполнены                 = Новый Массив;//Для всей номенклатуры.
	ТекНоменклатура = Неопределено;
	СуммаСкидок = 0;

	Для Каждого ВыбСтрокаТовара Из ВыбСтрокиТовара Цикл

		Если ВыбСтрокаТовара.СуммаБезСкидки = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если ТекНоменклатура = Неопределено Тогда
			ТекНоменклатура = ВыбСтрокаТовара.Номенклатура;
		КонецЕсли;
		БезХарактеристики = ЗначениеНеЗаполнено(ВыбСтрокаТовара.ХарактеристикаНоменклатуры);

		Если ВсеБезКачества Тогда
			Если БезХарактеристики Тогда 
				НеЗаполненаХарактеристика.Добавить(ВыбСтрокаТовара);
			Иначе
				ВсеПоляЗаполнены.Добавить(ВыбСтрокаТовара);
			КонецЕсли;
		Иначе
			БезКачества       = ЗначениеНеЗаполнено(ВыбСтрокаТовара.Качество);

			Если Не БезХарактеристики И Не БезКачества Тогда
				ВсеПоляЗаполнены.Добавить(ВыбСтрокаТовара);
			ИначеЕсли Не БезХарактеристики И БезКачества Тогда
				НеЗаполненоКачество.Добавить(ВыбСтрокаТовара);
			ИначеЕсли БезХарактеристики И Не БезКачества Тогда
				НеЗаполненаХарактеристика.Добавить(ВыбСтрокаТовара);
			ИначеЕсли БезХарактеристики И БезКачества Тогда
				НеЗаполненоКачествоИХарактеристика.Добавить(ВыбСтрокаТовара);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	ЗначениеУсловияАвтоматическойСкидки    = 0;
	Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента
	 Или УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
		ЗначениеУсловияАвтоматическойСкидки = ОбщееЗначениеУсловияАвтоматическойСкидки;
	КонецЕсли;

	//Заполняем скидки по строкам, где заполнена характеристика и качество.
	ОбрабатываемыеСтроки = Новый Массив;
	Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
		ЗначениеУсловияАвтоматическойСкидки = 0;
	КонецЕсли;

	Пока ВсеПоляЗаполнены.Количество() > 0 Цикл

		ТекХарактеристика        = Неопределено;
		ТекКачество              = Неопределено;
		Если ВсеБезКачества Тогда
			ТекКачество = Справочники.Качество.ПустаяСсылка();
			//ТекКачество = Справочники.Качество.Новый;
		КонецЕсли;
		СуммаБезСкидки           = 0;
		ОбщееКоличество          = 0;
		КоличествоСтрок = ВсеПоляЗаполнены.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			СтрокаВсеПоляЗаполнены = ВсеПоляЗаполнены[КоличествоСтрок - Сч];
			Если ТекХарактеристика = Неопределено Тогда
				ТекХарактеристика = СтрокаВсеПоляЗаполнены.ХарактеристикаНоменклатуры;
			ИначеЕсли ТекХарактеристика <> СтрокаВсеПоляЗаполнены.ХарактеристикаНоменклатуры Тогда
				ЕстьНеОбработанныеСтроки = Истина;
				Продолжить;
			КонецЕсли;
			Если НЕ ВсеБезКачества Тогда
				Если ТекКачество = Неопределено Тогда
					ТекКачество = СтрокаВсеПоляЗаполнены.Качество;
				ИначеЕсли ТекКачество <> СтрокаВсеПоляЗаполнены.Качество Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
				ЗначениеУсловияАвтоматическойСкидки = ЗначениеУсловияАвтоматическойСкидки + СтрокаВсеПоляЗаполнены.Количество;
			КонецЕсли;
			ОбрабатываемыеСтроки.Добавить(СтрокаВсеПоляЗаполнены);
			СуммаБезСкидки  = СуммаБезСкидки + СтрокаВсеПоляЗаполнены.СуммаБезСкидки;
			ОбщееКоличество = ОбщееКоличество + СтрокаВсеПоляЗаполнены.Количество;
			ВсеПоляЗаполнены.Удалить(КоличествоСтрок - Сч);
		КонецЦикла;

		ВыбСкидки = Скидки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Качество",
		                                                ТекНоменклатура,
		                                                ТекХарактеристика,
		                                                ТекКачество));

		ПодходящаяСкидка = Неопределено;
		Для Каждого ВыбСкидка Из ВыбСкидки Цикл
			Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
				Если ВыбСкидка.ЗначениеУсловияАвтоматическойСкидки = ЗначениеУсловияАвтоматическойСкидки Тогда// Нашли подходящую по условиям скидку.
					ПодходящаяСкидка = ВыбСкидка;
					Прервать;
				КонецЕсли;
			Иначе
				Если ВыбСкидка.ЗначениеУсловияАвтоматическойСкидки < ЗначениеУсловияАвтоматическойСкидки Тогда// Нашли подходящую по условиям скидку.
					ПодходящаяСкидка = ВыбСкидка;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ПодходящаяСкидка <> Неопределено Тогда 
			ПроцентСкидки = ПодходящаяСкидка.ПроцентСкидкиНаценки;
			СуммаСкидки = СуммаБезСкидки * ПроцентСкидки / 100;
			Ограничение = ПодходящаяСкидка.ОграничениеСкидкиНаценки * ОбщееКоличество;

			Если (Ограничение > 0 И СуммаСкидки > Ограничение)
			 ИЛИ (Ограничение < 0 И СуммаСкидки < Ограничение)Тогда//Проверим ограничение скидки.
				СуммаСкидки = Ограничение;
			КонецЕсли;
			СуммаСкидок = СуммаСкидок + СуммаСкидки;

			ПроцентСкидки = Окр((СуммаСкидки/СуммаБезСкидки) * 100,2);
			Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтроки Цикл

				ОбрабатываемаяСтрока.УсловиеАвтоматическойСкидки                     = УсловиеАвтоматическойСкидки;
				Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
					ОбрабатываемаяСтрока.ЗначениеПоКоличеству = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоКоличеству  = ПроцентСкидки;
				ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
					ОбрабатываемаяСтрока.ЗначениеПоСумме = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоСумме  = ПроцентСкидки;
				ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
					ОбрабатываемаяСтрока.ЗначениеПоВидуОплаты = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоВидуОплаты  = ПроцентСкидки;
				КонецЕсли;

			КонецЦикла;
		Иначе
			Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтроки Цикл
				Если ВсеБезКачества Тогда
					НеЗаполненаХарактеристика.Добавить(ОбрабатываемаяСтрока);
				Иначе
					НеЗаполненоКачество.Добавить(ОбрабатываемаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ОбрабатываемыеСтроки.Очистить();

	КонецЦикла;

	//Заполняем скидки по строкам, где не заполнено качество (или для всякого качества).
	//Если "ВсеБезКачества", тогда массив "НеЗаполненоКачество" пустой.
	Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
		ЗначениеУсловияАвтоматическойСкидки = 0;
	КонецЕсли;

	Пока НеЗаполненоКачество.Количество() > 0 Цикл

		ТекХарактеристика        = Неопределено;
		ТекКачество              = Справочники.Качество.ПустаяСсылка();
		СуммаБезСкидки           = 0;
		ОбщееКоличество          = 0;
		КоличествоСтрок = НеЗаполненоКачество.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			СтрокаНеЗаполненоКачество = НеЗаполненоКачество[КоличествоСтрок - Сч];
			Если ТекХарактеристика = Неопределено Тогда
				ТекХарактеристика = СтрокаНеЗаполненоКачество.ХарактеристикаНоменклатуры;
			ИначеЕсли ТекХарактеристика <> СтрокаНеЗаполненоКачество.ХарактеристикаНоменклатуры Тогда
				Продолжить;
			КонецЕсли;
			Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
				ЗначениеУсловияАвтоматическойСкидки = ЗначениеУсловияАвтоматическойСкидки + СтрокаНеЗаполненоКачество.Количество;
			КонецЕсли;
			ОбрабатываемыеСтроки.Добавить(СтрокаНеЗаполненоКачество);
			СуммаБезСкидки  = СуммаБезСкидки + СтрокаНеЗаполненоКачество.СуммаБезСкидки;
			ОбщееКоличество = ОбщееКоличество + СтрокаНеЗаполненоКачество.Количество;
			НеЗаполненоКачество.Удалить(КоличествоСтрок - Сч);
		КонецЦикла;

		ВыбСкидки = Скидки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Качество",
		                                                ТекНоменклатура,
		                                                ТекХарактеристика,
		                                                ТекКачество));

		ПодходящаяСкидка = Неопределено;
		Для Каждого ВыбСкидка Из ВыбСкидки Цикл
			Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
				Если ВыбСкидка.ЗначениеУсловияАвтоматическойСкидки = ЗначениеУсловияАвтоматическойСкидки Тогда// Нашли подходящую по условиям скидку.
					ПодходящаяСкидка = ВыбСкидка;
					Прервать;
				КонецЕсли;
			Иначе
				Если ВыбСкидка.ЗначениеУсловияАвтоматическойСкидки < ЗначениеУсловияАвтоматическойСкидки Тогда// Нашли подходящую по условиям скидку.
					ПодходящаяСкидка = ВыбСкидка;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ПодходящаяСкидка <> Неопределено Тогда 
			ПроцентСкидки = ПодходящаяСкидка.ПроцентСкидкиНаценки;
			СуммаСкидки = СуммаБезСкидки * ПроцентСкидки / 100;
			Ограничение = ПодходящаяСкидка.ОграничениеСкидкиНаценки * ОбщееКоличество;

			Если (Ограничение > 0 И СуммаСкидки > Ограничение)
			 ИЛИ (Ограничение < 0 И СуммаСкидки < Ограничение)Тогда//Проверим ограничение скидки.
				СуммаСкидки = Ограничение;
			КонецЕсли;

			СуммаСкидок = СуммаСкидок + СуммаСкидки;
			ПроцентСкидки = Окр((СуммаСкидки/СуммаБезСкидки) * 100,2);
			Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтроки Цикл
				ОбрабатываемаяСтрока.УсловиеАвтоматическойСкидки                     = УсловиеАвтоматическойСкидки;
				Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
					ОбрабатываемаяСтрока.ЗначениеПоКоличеству = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоКоличеству  = ПроцентСкидки;
				ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
					ОбрабатываемаяСтрока.ЗначениеПоСумме = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоСумме  = ПроцентСкидки;
				ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
					ОбрабатываемаяСтрока.ЗначениеПоВидуОплаты = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоВидуОплаты  = ПроцентСкидки;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтроки Цикл
				НеЗаполненаХарактеристика.Добавить(ОбрабатываемаяСтрока);
			КонецЦикла;
		КонецЕсли;
		ОбрабатываемыеСтроки.Очистить();

	КонецЦикла;

	//Заполняем скидки по строкам, где не заполнена характеристика (или для всякой характеристики).
	Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
		ЗначениеУсловияАвтоматическойСкидки = 0;
	КонецЕсли;

	Пока НеЗаполненаХарактеристика.Количество() > 0 Цикл

		ТекХарактеристика        = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		ТекКачество              = Неопределено;
		Если ВсеБезКачества Тогда
			ТекКачество = Справочники.Качество.ПустаяСсылка();
		КонецЕсли;

		СуммаБезСкидки           = 0;
		ОбщееКоличество          = 0;
		КоличествоСтрок = НеЗаполненаХарактеристика.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			СтрокаНеЗаполненаХарактеристика = НеЗаполненаХарактеристика[КоличествоСтрок - Сч];
			Если НЕ ВсеБезКачества Тогда
				Если ТекКачество = Неопределено Тогда
					ТекКачество = СтрокаНеЗаполненаХарактеристика.Качество;
				ИначеЕсли ТекКачество <> СтрокаНеЗаполненаХарактеристика.Качество Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
				ЗначениеУсловияАвтоматическойСкидки = ЗначениеУсловияАвтоматическойСкидки + СтрокаНеЗаполненаХарактеристика.Количество;
			КонецЕсли;
			ОбрабатываемыеСтроки.Добавить(СтрокаНеЗаполненаХарактеристика);
			СуммаБезСкидки  = СуммаБезСкидки + СтрокаНеЗаполненаХарактеристика.СуммаБезСкидки;
			ОбщееКоличество = ОбщееКоличество + СтрокаНеЗаполненаХарактеристика.Количество;
			НеЗаполненаХарактеристика.Удалить(КоличествоСтрок - Сч);
		КонецЦикла;

		ВыбСкидки = Скидки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Качество",
		                                                ТекНоменклатура,
		                                                ТекХарактеристика,
		                                                ТекКачество));

		ПодходящаяСкидка = Неопределено;
		Для Каждого ВыбСкидка Из ВыбСкидки Цикл
			Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
				Если ВыбСкидка.ЗначениеУсловияАвтоматическойСкидки = ЗначениеУсловияАвтоматическойСкидки Тогда// Нашли подходящую по условиям скидку.
					ПодходящаяСкидка = ВыбСкидка;
					Прервать;
				КонецЕсли;
			Иначе
				Если ВыбСкидка.ЗначениеУсловияАвтоматическойСкидки < ЗначениеУсловияАвтоматическойСкидки Тогда// Нашли подходящую по условиям скидку.
					ПодходящаяСкидка = ВыбСкидка;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ПодходящаяСкидка <> Неопределено Тогда 
			ПроцентСкидки = ПодходящаяСкидка.ПроцентСкидкиНаценки;
			СуммаСкидки = СуммаБезСкидки * ПроцентСкидки / 100;
			Ограничение = ПодходящаяСкидка.ОграничениеСкидкиНаценки * ОбщееКоличество;

			Если (Ограничение > 0 И СуммаСкидки > Ограничение)
			 ИЛИ (Ограничение < 0 И СуммаСкидки < Ограничение)Тогда//Проверим ограничение скидки.
				СуммаСкидки = Ограничение;
			КонецЕсли;

			СуммаСкидок = СуммаСкидок + СуммаСкидки;
			ПроцентСкидки = Окр((СуммаСкидки/СуммаБезСкидки) * 100,2);
			Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтроки Цикл
				ОбрабатываемаяСтрока.УсловиеАвтоматическойСкидки                     = УсловиеАвтоматическойСкидки;
				Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
					ОбрабатываемаяСтрока.ЗначениеПоКоличеству = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоКоличеству  = ПроцентСкидки;
				ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
					ОбрабатываемаяСтрока.ЗначениеПоСумме = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоСумме  = ПроцентСкидки;
				ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
					ОбрабатываемаяСтрока.ЗначениеПоВидуОплаты = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоВидуОплаты  = ПроцентСкидки;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтроки Цикл
				Если ВсеБезКачества Тогда
					ВсеПоляНеЗаполнены.Добавить(ОбрабатываемаяСтрока);
				Иначе
					НеЗаполненоКачествоИХарактеристика.Добавить(ОбрабатываемаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ОбрабатываемыеСтроки.Очистить();

	КонецЦикла;

	//Заполняем скидки по строкам, где не заполнена характеристика и качество (Для всякой характеристики и качества).
	//Если "ВсеБезКачества", тогда массив "НеЗаполненоКачествоИХарактеристика" пустой.
	Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
		ЗначениеУсловияАвтоматическойСкидки = 0;
	КонецЕсли;

	Пока НеЗаполненоКачествоИХарактеристика.Количество() > 0 Цикл

		ТекХарактеристика        = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		ТекКачество              = Справочники.Качество.ПустаяСсылка();

		СуммаБезСкидки           = 0;
		ОбщееКоличество          = 0;
		КоличествоСтрок = НеЗаполненоКачествоИХарактеристика.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			СтрокаНеЗаполненоКачествоИХарактеристика = НеЗаполненоКачествоИХарактеристика[КоличествоСтрок - Сч];
			Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
				ЗначениеУсловияАвтоматическойСкидки = ЗначениеУсловияАвтоматическойСкидки + СтрокаНеЗаполненоКачествоИХарактеристика.Количество;
			КонецЕсли;
			ОбрабатываемыеСтроки.Добавить(СтрокаНеЗаполненоКачествоИХарактеристика);
			СуммаБезСкидки  = СуммаБезСкидки + СтрокаНеЗаполненоКачествоИХарактеристика.СуммаБезСкидки;
			ОбщееКоличество = ОбщееКоличество + СтрокаНеЗаполненоКачествоИХарактеристика.Количество;
			НеЗаполненоКачествоИХарактеристика.Удалить(КоличествоСтрок - Сч);
		КонецЦикла;

		ВыбСкидки = Скидки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Качество",
		                                                ТекНоменклатура,
		                                                ТекХарактеристика,
		                                                ТекКачество));

		ПодходящаяСкидка = Неопределено;
		Для Каждого ВыбСкидка Из ВыбСкидки Цикл
			Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
				Если ВыбСкидка.ЗначениеУсловияАвтоматическойСкидки = ЗначениеУсловияАвтоматическойСкидки Тогда// Нашли подходящую по условиям скидку.
					ПодходящаяСкидка = ВыбСкидка;
					Прервать;
				КонецЕсли;
			Иначе
				Если ВыбСкидка.ЗначениеУсловияАвтоматическойСкидки < ЗначениеУсловияАвтоматическойСкидки Тогда// Нашли подходящую по условиям скидку.
					ПодходящаяСкидка = ВыбСкидка;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ПодходящаяСкидка <> Неопределено Тогда 
			ПроцентСкидки = ПодходящаяСкидка.ПроцентСкидкиНаценки;
			СуммаСкидки = СуммаБезСкидки * ПроцентСкидки / 100;
			Ограничение = ПодходящаяСкидка.ОграничениеСкидкиНаценки * ОбщееКоличество;

			Если (Ограничение > 0 И СуммаСкидки > Ограничение)
			 ИЛИ (Ограничение < 0 И СуммаСкидки < Ограничение)Тогда//Проверим ограничение скидки.
				СуммаСкидки = Ограничение;
			КонецЕсли;

			СуммаСкидок = СуммаСкидок + СуммаСкидки;
			ПроцентСкидки = Окр((СуммаСкидки/СуммаБезСкидки) * 100,2);
			Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтроки Цикл
				ОбрабатываемаяСтрока.УсловиеАвтоматическойСкидки                     = УсловиеАвтоматическойСкидки;
				Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
					ОбрабатываемаяСтрока.ЗначениеПоКоличеству = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоКоличеству  = ПроцентСкидки;
				ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
					ОбрабатываемаяСтрока.ЗначениеПоСумме = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоСумме  = ПроцентСкидки;
				ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
					ОбрабатываемаяСтрока.ЗначениеПоВидуОплаты = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоВидуОплаты  = ПроцентСкидки;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтроки Цикл
				Если ВсеБезКачества Тогда
					ВсеПоляНеЗаполнены.Добавить(ОбрабатываемаяСтрока);
				Иначе
					Если ЗначениеНеЗаполнено(ОбрабатываемаяСтрока.Качество) Тогда
						ВсеПоляНеЗаполнены.Добавить(ОбрабатываемаяСтрока);
					Иначе
						ЗаполненоТолькоКачество.Добавить(ОбрабатываемаяСтрока);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ОбрабатываемыеСтроки.Очистить();

	КонецЦикла;

	//Заполняем скидки по строкам, где указано качество (Для всякой номенклатуры и характеристики с указанным качеством).
	//Если "ВсеБезКачества", тогда массив "ЗаполненоТолькоКачество" пустой.
	Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
		ЗначениеУсловияАвтоматическойСкидки = 0;
	КонецЕсли;

	Пока ЗаполненоТолькоКачество.Количество() > 0 Цикл

		ТекХарактеристика        = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		ТекНоменклатура          = Справочники.Номенклатура.ПустаяСсылка();
		ТекКачество              = Неопределено;

		СуммаБезСкидки           = 0;
		ОбщееКоличество          = 0;
		КоличествоСтрок = ЗаполненоТолькоКачество.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			СтрокаЗаполненоТолькоКачество = ЗаполненоТолькоКачество[КоличествоСтрок - Сч];
			Если ТекКачество = Неопределено Тогда
				ТекКачество = СтрокаЗаполненоТолькоКачество.Качество;
			ИначеЕсли ТекКачество <> СтрокаЗаполненоТолькоКачество.Качество Тогда
				Продолжить;
			КонецЕсли;
			Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
				ЗначениеУсловияАвтоматическойСкидки = ЗначениеУсловияАвтоматическойСкидки + СтрокаЗаполненоТолькоКачество.Количество;
			КонецЕсли;
			ОбрабатываемыеСтроки.Добавить(СтрокаЗаполненоТолькоКачество);
			СуммаБезСкидки  = СуммаБезСкидки + СтрокаЗаполненоТолькоКачество.СуммаБезСкидки;
			ОбщееКоличество = ОбщееКоличество + СтрокаЗаполненоТолькоКачество.Количество;
			ЗаполненоТолькоКачество.Удалить(КоличествоСтрок - Сч);
		КонецЦикла;

		ВыбСкидки = Скидки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Качество",
		                                                ТекНоменклатура,
		                                                ТекХарактеристика,
		                                                ТекКачество));

		ПодходящаяСкидка = Неопределено;
		Для Каждого ВыбСкидка Из ВыбСкидки Цикл
			Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
				Если ВыбСкидка.ЗначениеУсловияАвтоматическойСкидки = ЗначениеУсловияАвтоматическойСкидки Тогда// Нашли подходящую по условиям скидку.
					ПодходящаяСкидка = ВыбСкидка;
					Прервать;
				КонецЕсли;
			Иначе
				Если ВыбСкидка.ЗначениеУсловияАвтоматическойСкидки < ЗначениеУсловияАвтоматическойСкидки Тогда// Нашли подходящую по условиям скидку.
					ПодходящаяСкидка = ВыбСкидка;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ПодходящаяСкидка <> Неопределено Тогда 
			ПроцентСкидки = ПодходящаяСкидка.ПроцентСкидкиНаценки;
			СуммаСкидки = СуммаБезСкидки * ПроцентСкидки / 100;
			Ограничение = ПодходящаяСкидка.ОграничениеСкидкиНаценки * ОбщееКоличество;

			Если (Ограничение > 0 И СуммаСкидки > Ограничение)
			 ИЛИ (Ограничение < 0 И СуммаСкидки < Ограничение)Тогда//Проверим ограничение скидки.
				СуммаСкидки = Ограничение;
			КонецЕсли;

			СуммаСкидок = СуммаСкидок + СуммаСкидки;
			ПроцентСкидки = Окр((СуммаСкидки/СуммаБезСкидки) * 100,2);
			Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтроки Цикл
				ОбрабатываемаяСтрока.УсловиеАвтоматическойСкидки                     = УсловиеАвтоматическойСкидки;
				Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
					ОбрабатываемаяСтрока.ЗначениеПоКоличеству = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоКоличеству  = ПроцентСкидки;
				ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
					ОбрабатываемаяСтрока.ЗначениеПоСумме = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоСумме  = ПроцентСкидки;
				ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
					ОбрабатываемаяСтрока.ЗначениеПоВидуОплаты = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоВидуОплаты  = ПроцентСкидки;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтроки Цикл
				ВсеПоляНеЗаполнены.Добавить(ОбрабатываемаяСтрока);
			КонецЦикла;
		КонецЕсли;
		ОбрабатываемыеСтроки.Очистить();

	КонецЦикла;

	//Заполняем скидки по оставшимся строкам (Для всякой номенклатуры и характеристики и качества).
	Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
		ЗначениеУсловияАвтоматическойСкидки = 0;
	КонецЕсли;

	Пока ВсеПоляНеЗаполнены.Количество() > 0 Цикл

		ТекХарактеристика        = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		ТекНоменклатура          = Справочники.Номенклатура.ПустаяСсылка();
		ТекКачество              = Справочники.Качество.ПустаяСсылка();

		СуммаБезСкидки           = 0;
		ОбщееКоличество          = 0;
		КоличествоСтрок = ВсеПоляНеЗаполнены.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			СтрокаВсеПоляНеЗаполнены = ВсеПоляНеЗаполнены[КоличествоСтрок - Сч];
			Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
				ЗначениеУсловияАвтоматическойСкидки = ЗначениеУсловияАвтоматическойСкидки + СтрокаВсеПоляНеЗаполнены.Количество;
			КонецЕсли;
			ОбрабатываемыеСтроки.Добавить(СтрокаВсеПоляНеЗаполнены);
			СуммаБезСкидки  = СуммаБезСкидки + СтрокаВсеПоляНеЗаполнены.СуммаБезСкидки;
			ОбщееКоличество = ОбщееКоличество + СтрокаВсеПоляНеЗаполнены.Количество;
			ВсеПоляНеЗаполнены.Удалить(КоличествоСтрок - Сч);
		КонецЦикла;

		ВыбСкидки = Скидки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Качество",
		                                                ТекНоменклатура,
		                                                ТекХарактеристика,
		                                                ТекКачество));

		ПодходящаяСкидка = Неопределено;
		Для Каждого ВыбСкидка Из ВыбСкидки Цикл
			Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
				Если ВыбСкидка.ЗначениеУсловияАвтоматическойСкидки = ЗначениеУсловияАвтоматическойСкидки Тогда// Нашли подходящую по условиям скидку.
					ПодходящаяСкидка = ВыбСкидка;
					Прервать;
				КонецЕсли;
			Иначе
				Если ВыбСкидка.ЗначениеУсловияАвтоматическойСкидки < ЗначениеУсловияАвтоматическойСкидки Тогда// Нашли подходящую по условиям скидку.
					ПодходящаяСкидка = ВыбСкидка;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ПодходящаяСкидка <> Неопределено Тогда 
			ПроцентСкидки = ПодходящаяСкидка.ПроцентСкидкиНаценки;
			СуммаСкидки = СуммаБезСкидки * ПроцентСкидки / 100;
			Ограничение = ПодходящаяСкидка.ОграничениеСкидкиНаценки * ОбщееКоличество;

			Если (Ограничение > 0 И СуммаСкидки > Ограничение)
			 ИЛИ (Ограничение < 0 И СуммаСкидки < Ограничение)Тогда//Проверим ограничение скидки.
				СуммаСкидки = Ограничение;
			КонецЕсли;

			СуммаСкидок = СуммаСкидок + СуммаСкидки;
			ПроцентСкидки = Окр((СуммаСкидки/СуммаБезСкидки) * 100,2);
			Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтроки Цикл
				ОбрабатываемаяСтрока.УсловиеАвтоматическойСкидки                     = УсловиеАвтоматическойСкидки;
				Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
					ОбрабатываемаяСтрока.ЗначениеПоКоличеству = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоКоличеству  = ПроцентСкидки;
				ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
					ОбрабатываемаяСтрока.ЗначениеПоСумме = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоСумме  = ПроцентСкидки;
				ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
					ОбрабатываемаяСтрока.ЗначениеПоВидуОплаты = ПодходящаяСкидка.ЗначениеУсловияАвтоматическойСкидки;
					ОбрабатываемаяСтрока.ПроцентПоВидуОплаты  = ПроцентСкидки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ОбрабатываемыеСтроки.Очистить();

	КонецЦикла;

КонецПроцедуры

Процедура РасчетСкидокПриПродаже(ДокументОбъект, ВидРеализации, УсловиеАвтоматическойСкидки, ТаблицаТоваров,
	                   СуммаСкидок, СуммаДокумента , ДатаСкидок ,ВалютаРегламентированногоУчета, ВидОплаты = Неопределено ) Экспорт

	СуммаСкидок = 0;
	Если (ТаблицаТоваров.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;

	СкидкиПоУсловию = Неопределено;
	СписокНоменклатуры = Новый СписокЗначений;
	СписокПолучателей  = Новый СписокЗначений;

	//Подготовим табличную часть скидок.
	ТаблицаНоменклатурыДляСвертки = ТаблицаТоваров.Скопировать();
	ТаблицаНоменклатурыДляСвертки.Свернуть("Номенклатура");
	СписокНоменклатуры.ЗагрузитьЗначения(ТаблицаНоменклатурыДляСвертки.ВыгрузитьКолонку("Номенклатура"));
	СписокНоменклатуры.Добавить(Справочники.Номенклатура.ПустаяСсылка());

	СтруктураКурса = Новый Структура;
	Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
		СписокПолучателей = Новый СписокЗначений;
		СписокПолучателей.Добавить(ДокументОбъект.Склад);
		СписокПолучателей.Добавить(Справочники.Склады.ПустаяСсылка());
		СтруктураКурса.Вставить("Курс", 1);
		СтруктураКурса.Вставить("Кратность", 1);
	Иначе
		СписокПолучателей = Новый СписокЗначений;
		СписокПолучателей.Добавить(ДокументОбъект.Контрагент);
		СписокПолучателей.Добавить(ДокументОбъект.ДоговорКонтрагента);
		СписокПолучателей.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());

		СтруктураКурса = Новый Структура;
		СтруктураКурса.Вставить("Курс", КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
		СтруктураКурса.Вставить("Кратность", КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
	КонецЕсли;
	

	Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
		ЗапросПоКоличествуТовара(СписокПолучателей, ВидРеализации, СписокНоменклатуры, СкидкиПоУсловию, ДатаСкидок, СтруктураКурса);
	ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
		ЗапросПоСуммеДокумента(СписокПолучателей, ВидРеализации, СписокНоменклатуры, СкидкиПоУсловию,ДатаСкидок, СтруктураКурса);
	ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
		ЗапросПоВидуОплаты(СписокПолучателей, ВидОплаты, ВидРеализации, СписокНоменклатуры, СкидкиПоУсловию,ДатаСкидок, СтруктураКурса);
	КонецЕсли;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ЕстьКачество        = ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, "Товары");

	Для Каждого ТекСтрокаТоваров Из СписокНоменклатуры Цикл

		ТекНоменклатура = ТекСтрокаТоваров.Значение;
		Если ЗначениеНеЗаполнено(ТекНоменклатура)
		 Или ТекНоменклатура.Услуга Тогда
			Продолжить;
		КонецЕсли;

		//Выбираем строки по текущей номенклатуре.
		ВыбТовары = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура", ТекНоменклатура));
		Если ВыбТовары.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		//Разнесем товар по соответствию условиям скидок.
		//В результате в таблице ТаблицаДляРасчетаСкидок будут расставлены проценты, условия
		//и значения условий скидок.
		ТекСуммаСкидок = 0;
		Если УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
			ОбщееЗначениеУсловияАвтоматическойСкидки = СуммаДокумента;
		ИначеЕсли УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
			ОбщееЗначениеУсловияАвтоматическойСкидки = ВидОплаты;
		КонецЕсли;
		ВыбратьСкидки(ВыбТовары, СкидкиПоУсловию, УсловиеАвтоматическойСкидки,
		              НЕ ЕстьКачество, ТекСуммаСкидок, ОбщееЗначениеУсловияАвтоматическойСкидки);

		СуммаСкидок = СуммаСкидок + ТекСуммаСкидок;
	КонецЦикла;
	
КонецПроцедуры //РасчетСкидокПриПродаже()

// Процедура выполняет расчет скидок по дисконтной карте по строкам табличной части "Товары".
//
// Параметры:
//  ДокументОбъект                  - документ, для которого рассчитываем скидки,
//  Карта                           - элемент справочника "Информационные карты", для которого рассчитываем скидки,
//  ТаблицаТоваров                  - табличная значений номенклатуры документа,
//  СуммаСкидокПоДисконтнойКарте    - Итоговая сумма скидок по документу,
//  СуммаДокумента                  - сумма без скидок документа.
//
Процедура РасчетСкидокПоДисконтнойКарте(ДокументОбъект, Карта, ТаблицаТоваров,
	                                    СуммаСкидок, СуммаДокумента) Экспорт

	Если (ТаблицаТоваров.Количество() = 0)
	 Или ЗначениеНеЗаполнено(Карта)
	 ИЛИ Карта.ТипКарты <> Перечисления.ТипыИнформационныхКарт.Дисконтная
	 ИЛИ Карта.ВидСкидки <> Перечисления.ВидыСкидокИнформационныхКарт.Фиксированная
	 ИЛИ Карта.СтатусДисконтнойКарты <> Перечисления.СтатусыДисконтнойКарты.Активна Тогда
		Возврат;
	КонецЕсли;

	ПроцентСкидки = Карта.ПроцентСкидки;
	Если ПроцентСкидки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МножительДляУслуг 	= Константы.МножительСкидокДляУслуг.Получить();
	Если (МножительДляУслуг = 0 или (ПустаяСтрока(ИмяПользователя()))) Тогда
		Возврат;
	КонецЕсли;	

	глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя());
	
	Попытка 
		РаботникСферыУслуг = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РаботникШиномонтажа")
	Исключение
	 	РаботникСферыУслуг 	= ложь;
	КонецПопытки;
	
	Если (РаботникСферыУслуг) Тогда
		ПроцентСкидки = ПроцентСкидки * МножительДляУслуг;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ЕстьКачество              = ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, "Товары");

	Для Каждого СтрокаТовара ИЗ ТаблицаТоваров Цикл

		СтрокаТовара.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
		СтрокаТовара.ЗначениеПоДисконтнойКарте   = Карта;
		СтрокаТовара.ПроцентПоДисконтнойКарте    = ПроцентСкидки;

	КонецЦикла;
	СуммаСкидок = СуммаДокумента * ПроцентСкидки /100;

КонецПроцедуры

// Процедура выполняет расчет скидок по выбранной дисконтной картой сумме по строкам табличной части "Товары".
//
// Параметры:
//  ДокументОбъект                  - документ, для которого рассчитываем скидки,
//  Карта                           - элемент справочника "Информационные карты", для которого рассчитываем скидки,
//  ТаблицаТоваров                  - табличная значений номенклатуры документа,
//  СуммаСкидокПоВыбраннойДисконтнойКартойСумме    - Итоговая сумма скидок по документу,
//  СуммаДокумента                  - сумма без скидок документа.
//
Процедура РасчетСкидокПоВыбраннойДисконтнойКартойСумме(ДокументОбъект, Карта, ТаблицаТоваров,
	                                    СуммаСкидок, СуммаДокумента) Экспорт

	Если (ТаблицаТоваров.Количество() = 0)
	 Или ЗначениеНеЗаполнено(Карта)
	 ИЛИ Карта.ТипКарты <> Перечисления.ТипыИнформационныхКарт.Дисконтная
	 ИЛИ Карта.ВидСкидки <> Перечисления.ВидыСкидокИнформационныхКарт.Накопительная
	 ИЛИ Карта.СтатусДисконтнойКарты <> Перечисления.СтатусыДисконтнойКарты.Активна Тогда
		Возврат;
	КонецЕсли;

	// определим процент скидки
	//ПроцентСкидки = Карта.ПроцентСкидки;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ЕСТЬNULL(СтоимостьОборот, 0) КАК ВыбраннаяСумма
	|ИЗ РегистрНакопления.Продажи.Обороты(, &парамПериодКон,,
	|	ДисконтнаяКарта = &парамДисконтнаяКарта
	|)
	|";
	
	
	Запрос.УстановитьПараметр("парамПериодКон", Новый Граница(ДокументОбъект.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("парамДисконтнаяКарта", Карта);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли; 
	
	врВыбраннаяСумма = Выборка.ВыбраннаяСумма;
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 ПроцентСкидки
	|ИЗ РегистрСведений.ПорогиНакопительнойСкидки
	|ГДЕ ВыбраннаяСумма <= &парамВыбраннаяСумма
	|УПОРЯДОЧИТЬ ПО ВыбраннаяСумма УБЫВ
	|";
	
	Запрос.УстановитьПараметр("парамВыбраннаяСумма", врВыбраннаяСумма);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли; 
	
	ПроцентСкидки = Выборка.ПроцентСкидки;
	
	//
	Если ПроцентСкидки = 0 Тогда
		Возврат;
	КонецЕсли;
	
    МножительДляУслуг 	= Константы.МножительСкидокДляУслуг.Получить();
	Если (МножительДляУслуг = 0 или (ПустаяСтрока(ИмяПользователя()))) Тогда
		Возврат;
	КонецЕсли;	

	глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя());
	
	Попытка 
		РаботникСферыУслуг = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РаботникШиномонтажа")
	Исключение
	 	РаботникСферыУслуг 	= ложь;
	КонецПопытки;
	
	Если (РаботникСферыУслуг) Тогда
		ПроцентСкидки = ПроцентСкидки * МножительДляУслуг;
	КонецЕсли;	

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ЕстьКачество              = ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, "Товары");

	Для Каждого СтрокаТовара ИЗ ТаблицаТоваров Цикл

		СтрокаТовара.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме;
		СтрокаТовара.ЗначениеПоВыбраннойДисконтнойКартойСумме   = Карта;
		СтрокаТовара.ПроцентПоВыбраннойДисконтнойКартойСумме    = ПроцентСкидки;

	КонецЦикла;
	СуммаСкидок = СуммаДокумента * ПроцентСкидки /100;

КонецПроцедуры

// Процедура получает минимально допустимую цену товаров (услуг) для данного пользователя.
//
// Параметры:
//  Номенклатура               - элемент справочника "Номенклатура",
//  ХарактеристикаНоменклатуры - элемент справочника "ХарактеристикиНоменклатуры",
//  ДокументОбъект             - документ, для которого проверяем скидки,
//  МинимальнаяЦена            - минимально допустимая цена.
//
Функция ПолучитьМинимальнуюЦену(Номенклатура, ХарактеристикаНоменклатуры,
	                              ДатаСкидок, СписокФильтров, ВалютаТовара) Экспорт

	МинимальнаяЦена = 0;
	Если СписокФильтров.Количество() = 0 Тогда

		// Если нет данных для формирования текста запроса (пустой список фильтров),
		// то значит можно продовать по любой цене
		Возврат МинимальнаяЦена;
	КонецЕсли;

	Для Каждого ТипЦены Из СписокФильтров Цикл
		ТипЦен = ТипЦены.Значение;
		Если ЗначениеНеЗаполнено(ТипЦен) Тогда

			// Если хотя бы для одного набора прав не задан тип цен, ниже которого нельзя продавать,
			// то значит можно продовать по любой цене
			Возврат МинимальнаяЦена;
		КонецЕсли;

		Цена = ПолучитьЦенуНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, ТипЦен, ДатаСкидок, Номенклатура.ЕдиницаХраненияОстатков,
		                           ВалютаТовара);
		Если Цена < МинимальнаяЦена
		 Или МинимальнаяЦена = 0 Тогда
			МинимальнаяЦена = Цена;
		КонецЕсли;
	КонецЦикла;

	Возврат МинимальнаяЦена;

КонецФункции // ПолучитьМинимальнуюЦену()

// Процедура проверяет минимально допустимую цену товаров (услуг) для данного пользователя по выбранной строке
// и корректирует суммы скидок. При расчете итоговой суммы рассчитывает НДС.
//
// Параметры:
//  ДокументОбъект             - документ, для которого проверяем скидки,
//  Номенклатура               - элемент справочника "Номенклатура",
//  ТабличнаяЧастьНоменклатуры - табличная часть номенклатуры документа,
//  ТабличнаяЧастьСкидок       - табличная часть автоматических скидок документа.
//  УчитыватьНДС               - булево, признак учета НДС в документе, служит для расчета сумм НДС,
//  СуммаВключаетНДС           - булево, признак вхождения НДС в сумму в документе, служит для расчета сумм НДС.
//
Процедура ПроверкаМинимальнойЦены(ДокументОбъект, ДатаСкидок, Номенклатура, ТаблицаТоваров,
	                              МинимальныеЦены, СписокФильтров, УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	//РассчитыватьНДС           = ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, "Товары");
	ЕстьКачество              = ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, "Товары");

	Для Каждого СтрокаТовара ИЗ ТаблицаТоваров Цикл

		Если СтрокаТовара.Количество   <> 0 Тогда

			МинимальнаяЦена = 0;

			Отбор = Новый Структура ("Номенклатура, ХарактеристикаНоменклатуры",
																			  СтрокаТовара.Номенклатура,
																			  СтрокаТовара.ХарактеристикаНоменклатуры);
			СтрокиМинимальныхЦен = МинимальныеЦены.НайтиСтроки(Отбор);
			Если СтрокиМинимальныхЦен.Количество() > 0 Тогда
				МинимальнаяЦена = СтрокиМинимальныхЦен[0].Цена;
			Иначе
				МинимальнаяЦена = ПолучитьМинимальнуюЦену(СтрокаТовара.Номенклатура, СтрокаТовара.ХарактеристикаНоменклатуры,
				                         ДатаСкидок, СписокФильтров, ВалютаТовара);
				СтрокаМинимальныхЦен = МинимальныеЦены.Добавить();
				СтрокаМинимальныхЦен.Номенклатура               = СтрокаТовара.Номенклатура;
				СтрокаМинимальныхЦен.ХарактеристикаНоменклатуры = СтрокаТовара.ХарактеристикаНоменклатуры;
				СтрокаМинимальныхЦен.Цена                       = МинимальнаяЦена;
			КонецЕсли;

			Проверять = Истина;
			Если Окр(СтрокаТовара.Цена,2) < МинимальнаяЦена Тогда //Цена товара меньше минимально разрешенной.

				// Ничего не делаем, при проведении выведется сообщение.
				Проверять = Ложь;
			КонецЕсли;

			Если Проверять Тогда

				//Получим сумму по строке без учета ручной скидки.
				ТекЦена = СтрокаТовара.Цена;
				ТекКоличество = СтрокаТовара.Количество;
				Сумма = ТекЦена * ТекКоличество;
				СуммаБезСкидки = Сумма * (1 - СтрокаТовара.ПроцентАвтоматическихСкидок / 100);

				ЦенаБезСкидки = Окр(СуммаБезСкидки/ТекКоличество,2);
				Если ЦенаБезСкидки < МинимальнаяЦена Тогда //Обрезаем скидки.

					СтрокаТовара.ПроцентАвтоматическихСкидок = - Окр((МинимальнаяЦена/ ТекЦена) * 100 - 100,2)

				КонецЕсли;

			КонецЕсли;

		Иначе
			СтрокаТовара.ПроцентАвтоматическихСкидок = 0;
		КонецЕсли;

		Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		СуммаСкидки = 0;

		СуммаСкидки = Сумма * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;
		СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТовара.ПроцентСкидкиНаценки / 100);

		СтрокаТовара.Сумма = Сумма - СуммаСкидки;

		Если УчитыватьНДС <> Неопределено
		   И УчитыватьНДС Тогда

			//Рассчитаем сумму НДС строки таблицы значений.
			СтрокаТовара.СуммаНДС = РассчитатьСуммуНДС(СтрокаТовара.Сумма, УчитыватьНДС, СуммаВключаетНДС,
			                                           ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверкаМинимальнойЦены()

// Процедура рассчитывает скидки в документе.
//
// Параметры:
//  ДокументОбъект             - документ, для которого рассчитываем скидки,
//  ТабличнаяЧастьНоменклатуры - табличная часть номенклатуры документа,
//  ТабличнаяЧастьСкидок       - табличная часть автоматических скидок документа.
//  СтруктураПараметров        - структура, содержащая дополнительные параметря, необходимые для расчета скидок.
//
Процедура РассчитатьСкидкиПриПродаже(ДокументОбъект, ТабличнаяЧастьНоменклатуры,
	                                 СтруктураПараметров, МинимальныеЦены, СписокФильтров) Экспорт

	Перем ВидРеализации, СуммаДокументаСтарая, СуммаДокумента, Карта, Номенклатура, ВидОплаты;
	Перем УчитыватьНДС, СуммаВключаетНДС, ДатаСкидок, ВалютаРегламентированногоУчета;

	Если ТипЗнч (ТабличнаяЧастьНоменклатуры) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаТоваров = ТабличнаяЧастьНоменклатуры.Выгрузить();
		ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентАвтоматическихСкидок");
		ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"УсловиеАвтоматическойСкидки");
		ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеУсловияАвтоматическойСкидки");
	Иначе
		ТаблицаТоваров = ТабличнаяЧастьНоменклатуры.Скопировать();
	КонецЕсли;
	
	ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентАвтоматическихСкидок");
	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"УсловиеАвтоматическойСкидки");
	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеУсловияАвтоматическойСкидки");
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезСкидки");
	
	КоличествоСтрок = ТаблицаТоваров.Количество();
	Для Сч = 1 ПО КоличествоСтрок Цикл
		СтрокаТаблицы = ТаблицаТоваров[КоличествоСтрок - Сч];
		СтрокаТаблицы.СуммаБезСкидки = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
	КонецЦикла;
	
	ТаблицаТоваров.Колонки.Добавить("ПроцентПоКоличеству");
	ТаблицаТоваров.Колонки.Добавить("ЗначениеПоКоличеству");
	ТаблицаТоваров.Колонки.Добавить("ПроцентПоСумме");
	ТаблицаТоваров.Колонки.Добавить("ЗначениеПоСумме");
	ТаблицаТоваров.Колонки.Добавить("ПроцентПоВидуОплаты");
	ТаблицаТоваров.Колонки.Добавить("ЗначениеПоВидуОплаты");
	ТаблицаТоваров.Колонки.Добавить("ПроцентПоДисконтнойКарте");
	ТаблицаТоваров.Колонки.Добавить("ЗначениеПоДисконтнойКарте");
	ТаблицаТоваров.Колонки.Добавить("ПроцентПоВыбраннойДисконтнойКартойСумме");
	ТаблицаТоваров.Колонки.Добавить("ЗначениеПоВыбраннойДисконтнойКартойСумме");
	ТаблицаТоваров.ЗаполнитьЗначения(0, "ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
	
	ИмяТабличнойЧасти = "Товары";
	СтруктураПараметров.Свойство("ВидРеализации",                        ВидРеализации);
	СтруктураПараметров.Свойство("ДатаСкидок",                           ДатаСкидок);
	СтруктураПараметров.Свойство("ВалютаРегламентированногоУчета",       ВалютаРегламентированногоУчета);
	СтруктураПараметров.Свойство("ВидОплаты"    ,                        ВидОплаты);
	СтруктураПараметров.Свойство("Номенклатура",                         Номенклатура);
	СтруктураПараметров.Свойство("СуммаДокумента",                       СуммаДокумента);
	СтруктураПараметров.Свойство("Карта",                                Карта);
	СтруктураПараметров.Свойство("УчитыватьНДС",                         УчитыватьНДС);
	СтруктураПараметров.Свойство("СуммаВключаетНДС",                     СуммаВключаетНДС);
	
	ДатаСкидок = ?(ЗначениеНеЗаполнено(ДатаСкидок), ДокументОбъект.Дата, ДатаСкидок);
	ИспользованиеСкидок                  = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ДатаСкидок);
	ИспользоватьСкидкиПоКоличествуТовара = ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара;
	ИспользоватьСкидкиПоСуммеДокумента   = ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента;
	ИспользоватьСкидкиПоВидуОплаты       = ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты;
	ИспользоватьСкидкиПоДисконтнойКарте  = ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте;
	ИспользоватьСкидкиПоВыбраннойДисконтнойКартойСумме = ИспользованиеСкидок.ИспользоватьСкидкиПоВыбраннойДисконтнойКартойСумме;
	
	Если СуммаДокумента <> 0 Тогда
		
		СуммаСкидокПоКоличеству     = 0;
		СуммаСкидокПоСуммеДокумента = 0;
		СуммаСкидокПоВидуОплаты     = 0;
		СуммаСкидокПоДисконтнойКарте= 0;
		СуммаСкидокПоВыбраннойДисконтнойКартойСумме = 0;
		СкидкиРасчитывались         = Ложь;
		Если ИспользоватьСкидкиПоКоличествуТовара Тогда
			РасчетСкидокПриПродаже(ДокументОбъект, ВидРеализации, Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара,
			ТаблицаТоваров, СуммаСкидокПоКоличеству, СуммаДокумента,ДатаСкидок,ВалютаРегламентированногоУчета);
			СкидкиРасчитывались = Истина;
		КонецЕсли;
		Если ИспользоватьСкидкиПоСуммеДокумента Тогда
			РасчетСкидокПриПродаже(ДокументОбъект, ВидРеализации, Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента,
			ТаблицаТоваров, СуммаСкидокПоСуммеДокумента, СуммаДокумента,ДатаСкидок,ВалютаРегламентированногоУчета);
			СкидкиРасчитывались = Истина;
		КонецЕсли;
		Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
			Если ИспользоватьСкидкиПоВидуОплаты Тогда
				РасчетСкидокПриПродаже(ДокументОбъект, ВидРеализации, Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты,
				ТаблицаТоваров, СуммаСкидокПоВидуОплаты, СуммаДокумента,ДатаСкидок,ВалютаРегламентированногоУчета, ВидОплаты);
				СкидкиРасчитывались = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ИспользоватьСкидкиПоДисконтнойКарте Тогда
			РасчетСкидокПоДисконтнойКарте(ДокументОбъект, Карта, ТаблицаТоваров,
			СуммаСкидокПоДисконтнойКарте, СуммаДокумента);
			СкидкиРасчитывались = Истина;
		КонецЕсли;
		Если ИспользоватьСкидкиПоВыбраннойДисконтнойКартойСумме Тогда
			РасчетСкидокПоВыбраннойДисконтнойКартойСумме(ДокументОбъект, Карта, ТаблицаТоваров,
			СуммаСкидокПоВыбраннойДисконтнойКартойСумме, СуммаДокумента);
			СкидкиРасчитывались = Истина;
		КонецЕсли;
		
		//Там же расчет итоговых сумм со скидками.
		Если СкидкиРасчитывались Тогда
			
			Если Константы.ИспользованиеСкидок.Получить() = Перечисления.ВидыРасчетаСкидок.ПустаяСсылка()
				ИЛИ Константы.ИспользованиеСкидок.Получить() = Перечисления.ВидыРасчетаСкидок.ПоМаксимальнойСуммеСкидки Тогда 
				
				ВидМаксимальнойСкидки = Неопределено;
				СуммыСкидок = Новый ТаблицаЗначений;
				СуммыСкидок.Колонки.Добавить("Сумма");
				СуммыСкидок.Колонки.Добавить("Вид");
				
				СтрокаСуммСкидок       = СуммыСкидок.Добавить();
				СтрокаСуммСкидок.Сумма = СуммаСкидокПоКоличеству;
				СтрокаСуммСкидок.Вид   = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара;
				СтрокаСуммСкидок       = СуммыСкидок.Добавить();
				СтрокаСуммСкидок.Сумма = СуммаСкидокПоСуммеДокумента;
				СтрокаСуммСкидок.Вид   = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента;
				СтрокаСуммСкидок       = СуммыСкидок.Добавить();
				СтрокаСуммСкидок.Сумма = СуммаСкидокПоВидуОплаты;
				СтрокаСуммСкидок.Вид   = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты;
				СтрокаСуммСкидок       = СуммыСкидок.Добавить();
				СтрокаСуммСкидок.Сумма = СуммаСкидокПоДисконтнойКарте;
				СтрокаСуммСкидок.Вид   = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
				СтрокаСуммСкидок       = СуммыСкидок.Добавить();
				СтрокаСуммСкидок.Сумма = СуммаСкидокПоВыбраннойДисконтнойКартойСумме;
				СтрокаСуммСкидок.Вид   = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме;
				СуммыСкидок.Сортировать("Сумма Убыв");
				
				ВидМаксимальнойСкидки = СуммыСкидок[0].Вид;
				
				Если СуммыСкидок[0].Сумма <> 0 Тогда
					ТаблицаТоваров.Колонки.Удалить("ПроцентАвтоматическихСкидок");
					ТаблицаТоваров.Колонки.Удалить("ЗначениеУсловияАвтоматическойСкидки");
					ТаблицаТоваров.ЗаполнитьЗначения(ВидМаксимальнойСкидки, "УсловиеАвтоматическойСкидки");
					Если ВидМаксимальнойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
						ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоСумме, ЗначениеПоВидуОплаты, ЗначениеПоДисконтнойКарте, ЗначениеПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.Колонки.ПроцентПоКоличеству.Имя  = "ПроцентАвтоматическихСкидок";
						ТаблицаТоваров.Колонки.ЗначениеПоКоличеству.Имя = "ЗначениеУсловияАвтоматическойСкидки";
					ИначеЕсли ВидМаксимальнойСкидки = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
						ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоВидуОплаты, ЗначениеПоДисконтнойКарте, ЗначениеПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.Колонки.ПроцентПоСумме.Имя  = "ПроцентАвтоматическихСкидок";
						ТаблицаТоваров.Колонки.ЗначениеПоСумме.Имя = "ЗначениеУсловияАвтоматическойСкидки";
					ИначеЕсли ВидМаксимальнойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
						ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоСумме, ЗначениеПоДисконтнойКарте, ЗначениеПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.Колонки.ПроцентПоВидуОплаты.Имя  = "ПроцентАвтоматическихСкидок";
						ТаблицаТоваров.Колонки.ЗначениеПоВидуОплаты.Имя = "ЗначениеУсловияАвтоматическойСкидки";
					ИначеЕсли ВидМаксимальнойСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
						ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоСумме, ЗначениеПоВидуОплаты, ЗначениеПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.Колонки.ПроцентПоДисконтнойКарте.Имя  = "ПроцентАвтоматическихСкидок";
						ТаблицаТоваров.Колонки.ЗначениеПоДисконтнойКарте.Имя = "ЗначениеУсловияАвтоматическойСкидки";
					ИначеЕсли ВидМаксимальнойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме Тогда
						ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте");
						ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоСумме, ЗначениеПоВидуОплаты, ЗначениеПоДисконтнойКарте");
						ТаблицаТоваров.Колонки.ПроцентПоВыбраннойДисконтнойКартойСумме.Имя  = "ПроцентАвтоматическихСкидок";
						ТаблицаТоваров.Колонки.ЗначениеПоВыбраннойДисконтнойКартойСумме.Имя = "ЗначениеУсловияАвтоматическойСкидки";
					КонецЕсли;
					
					Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
						ВалютаТовара = ВалютаРегламентированногоУчета;
					Иначе
						ВалютаТовара = ДокументОбъект.ВалютаДокумента;
					КонецЕсли;
					ПроверкаМинимальнойЦены(ДокументОбъект, ДатаСкидок, Номенклатура, ТаблицаТоваров,
					МинимальныеЦены, СписокФильтров, УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара);
					
					
				Иначе
					
					Для Каждого СтрокаТовара ИЗ ТаблицаТоваров Цикл
						Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
						СуммаСкидки = 0;
						
						СуммаСкидки = Сумма * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;
						СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТовара.ПроцентСкидкиНаценки / 100);
						
						СтрокаТовара.Сумма = Сумма - СуммаСкидки;
						Если УчитыватьНДС <> Неопределено
							И УчитыватьНДС Тогда
							//Рассчитаем сумму НДС строки таблицы значений.
							СтрокаТовара.СуммаНДС = РассчитатьСуммуНДС(СтрокаТовара.Сумма, УчитыватьНДС, СуммаВключаетНДС,
							ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли Константы.ИспользованиеСкидок.Получить() = Перечисления.ВидыРасчетаСкидок.ПоСкидкеТовара Тогда
				
				Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
					
					СтрокаТоваров.ПроцентАвтоматическихСкидок = 0;
					СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = Неопределено;
					СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПустаяСсылка();
					
					
					Если (СтрокаТоваров.ПроцентПоКоличеству > 0) ИЛИ (СтрокаТоваров.ПроцентПоСумме > 0)
						ИЛИ (СтрокаТоваров.ПроцентПоВидуОплаты > 0) Тогда
						
						Если СтрокаТоваров.ПроцентПоКоличеству > 0 Тогда
							
							СтрокаТоваров.ПроцентАвтоматическихСкидок = СтрокаТоваров.ПроцентПоКоличеству;
							СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = СтрокаТоваров.ЗначениеПоКоличеству;
							СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара;
							
							
						ИначеЕсли СтрокаТоваров.ПроцентПоВидуОплаты > 0 Тогда
							
							СтрокаТоваров.ПроцентАвтоматическихСкидок = СтрокаТоваров.ПроцентПоВидуОплаты;
							СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = СтрокаТоваров.ЗначениеПоВидуОплаты;
							СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты;
							
						ИначеЕсли СтрокаТоваров.ПроцентПоСумме > 0 Тогда
							
							СтрокаТоваров.ПроцентАвтоматическихСкидок = СтрокаТоваров.ПроцентПоСумме;
							СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = СтрокаТоваров.ЗначениеПоСумме;
							СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента;
							
							
						КонецЕсли;
						
						
					ИначеЕсли (СтрокаТоваров.ПроцентПоДисконтнойКарте > 0) ИЛИ (СтрокаТоваров.ПроцентПоВыбраннойДисконтнойКартойСумме > 0) Тогда
						
						Если СтрокаТоваров.ПроцентПоДисконтнойКарте > 0 Тогда
							
							СтрокаТоваров.ПроцентАвтоматическихСкидок = СтрокаТоваров.ПроцентПоДисконтнойКарте;
							СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = СтрокаТоваров.ЗначениеПоДисконтнойКарте;
							СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
							
						ИначеЕсли СтрокаТоваров.ПроцентПоВыбраннойДисконтнойКартойСумме > 0 Тогда              
							
							СтрокаТоваров.ПроцентАвтоматическихСкидок = СтрокаТоваров.ПроцентПоВыбраннойДисконтнойКартойСумме;
							СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = СтрокаТоваров.ЗначениеПоВыбраннойДисконтнойКартойСумме;
							СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме;
							                          
						КонецЕсли;	                  
						                              
					КонецЕсли;                        
					                                  
					СтрокаТоваров.Сумма = (СтрокаТоваров.Цена * СтрокаТоваров.Количество) - (СтрокаТоваров.Цена * СтрокаТоваров.Количество * СтрокаТоваров.ПроцентАвтоматическихСкидок / 100);
					
					Если УчитыватьНДС <> Неопределено
						И УчитыватьНДС Тогда
						//Рассчитаем сумму НДС строки таблицы значений.
						СтрокаТоваров.СуммаНДС = РассчитатьСуммуНДС(СтрокаТоваров.Сумма, УчитыватьНДС, СуммаВключаетНДС,
						ПолучитьСтавкуНДС(СтрокаТоваров.СтавкаНДС));
					КонецЕсли;
					
					
				КонецЦикла;
				
				ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
				ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоСумме, ЗначениеПоВидуОплаты, ЗначениеПоДисконтнойКарте, ЗначениеПоВыбраннойДисконтнойКартойСумме");
				
				Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
					ВалютаТовара = ВалютаРегламентированногоУчета;
				Иначе
					ВалютаТовара = ДокументОбъект.ВалютаДокумента;
				КонецЕсли;
				ПроверкаМинимальнойЦены(ДокументОбъект, ДатаСкидок, Номенклатура, ТаблицаТоваров,
				МинимальныеЦены, СписокФильтров, УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара);
				
				
			ИначеЕсли Константы.ИспользованиеСкидок.Получить() = Перечисления.ВидыРасчетаСкидок.ПоСуммеСкидокКартыИТовара Тогда
				
				Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
					
					СтрокаТоваров.ПроцентАвтоматическихСкидок = 0;
					СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = Неопределено;
					СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПустаяСсылка();
					
					
					
					СтрокаТоваров.ПроцентАвтоматическихСкидок = СтрокаТоваров.ПроцентПоКоличеству + СтрокаТоваров.ПроцентПоВидуОплаты + СтрокаТоваров.ПроцентПоСумме
					+ СтрокаТоваров.ПроцентПоДисконтнойКарте + СтрокаТоваров.ПроцентПоВыбраннойДисконтнойКартойСумме;
					//СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = СтрокаТоваров.ЗначениеПоКоличеству;
					СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
					
					СтрокаТоваров.Сумма = (СтрокаТоваров.Цена * СтрокаТоваров.Количество) - (СтрокаТоваров.Цена * СтрокаТоваров.Количество * СтрокаТоваров.ПроцентАвтоматическихСкидок / 100);
					
					Если УчитыватьНДС <> Неопределено
						И УчитыватьНДС Тогда
						//Рассчитаем сумму НДС строки таблицы значений.
						СтрокаТоваров.СуммаНДС = РассчитатьСуммуНДС(СтрокаТоваров.Сумма, УчитыватьНДС, СуммаВключаетНДС,
						ПолучитьСтавкуНДС(СтрокаТоваров.СтавкаНДС));
					КонецЕсли;
						
					
				КонецЦикла;
				
				ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
				ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоСумме, ЗначениеПоВидуОплаты, ЗначениеПоДисконтнойКарте, ЗначениеПоВыбраннойДисконтнойКартойСумме");
				
				Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
					ВалютаТовара = ВалютаРегламентированногоУчета;
				Иначе
					ВалютаТовара = ДокументОбъект.ВалютаДокумента;
				КонецЕсли;
				ПроверкаМинимальнойЦены(ДокументОбъект, ДатаСкидок, Номенклатура, ТаблицаТоваров,
				МинимальныеЦены, СписокФильтров, УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара);
					
					
					
				ИначеЕсли Константы.ИспользованиеСкидок.Получить() = Перечисления.ВидыРасчетаСкидок.ПоМаксимальномуПроцентуСкидки Тогда
					
				Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
						
						
						ТЗ = Новый ТаблицаЗначений;
						ТЗ.Очистить();
						ТЗ.Колонки.Добавить("Вид");
						ТЗ.Колонки.Добавить("Процент");
						ТЗ.Колонки.Добавить("Значение");
						
						СтрокаТЗ = ТЗ.Добавить();
						СтрокаТЗ.Вид = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара;
						СтрокаТЗ.Процент = СтрокаТоваров.ПроцентПоКоличеству;
						СтрокаТЗ.Значение = СтрокаТоваров.ЗначениеПоКоличеству;
						СтрокаТЗ = ТЗ.Добавить();
						СтрокаТЗ.Вид = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента;
						СтрокаТЗ.Процент = СтрокаТоваров.ПроцентПоСумме;
						СтрокаТЗ.Значение = СтрокаТоваров.ЗначениеПоСумме;
						СтрокаТЗ = ТЗ.Добавить();
						СтрокаТЗ.Вид = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты;
						СтрокаТЗ.Процент = СтрокаТоваров.ПроцентПоВидуОплаты;
						СтрокаТЗ.Значение = СтрокаТоваров.ЗначениеПоВидуОплаты;
						СтрокаТЗ = ТЗ.Добавить();
						СтрокаТЗ.Вид = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
						СтрокаТЗ.Процент = СтрокаТоваров.ПроцентПоДисконтнойКарте;
						СтрокаТЗ.Значение = СтрокаТоваров.ЗначениеПоДисконтнойКарте;
						СтрокаТЗ = ТЗ.Добавить();
						СтрокаТЗ.Вид = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме;
						СтрокаТЗ.Процент = СтрокаТоваров.ПроцентПоВыбраннойДисконтнойКартойСумме;
						СтрокаТЗ.Значение = СтрокаТоваров.ЗначениеПоВыбраннойДисконтнойКартойСумме;
						
						ТЗ.Сортировать("Процент УБЫВ");
						
						Если ТЗ.Количество() > 0 Тогда
							СтрокаТоваров.ПроцентАвтоматическихСкидок = ТЗ[0].Процент;
							СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = ТЗ[0].Значение;
							СтрокаТоваров.УсловиеАвтоматическойСкидки = ТЗ[0].Вид;
						
							СтрокаТоваров.Сумма = (СтрокаТоваров.Цена * СтрокаТоваров.Количество) - (СтрокаТоваров.Цена * СтрокаТоваров.Количество * СтрокаТоваров.ПроцентАвтоматическихСкидок / 100);
						КонецЕсли;
						
					Если УчитыватьНДС <> Неопределено
						И УчитыватьНДС Тогда
						//Рассчитаем сумму НДС строки таблицы значений.
						СтрокаТоваров.СуммаНДС = РассчитатьСуммуНДС(СтрокаТоваров.Сумма, УчитыватьНДС, СуммаВключаетНДС,
						ПолучитьСтавкуНДС(СтрокаТоваров.СтавкаНДС));
					КонецЕсли;
									
				КонецЦикла;
				
				ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
				ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоСумме, ЗначениеПоВидуОплаты, ЗначениеПоДисконтнойКарте, ЗначениеПоВыбраннойДисконтнойКартойСумме");
				
				Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
					ВалютаТовара = ВалютаРегламентированногоУчета;
				Иначе
					ВалютаТовара = ДокументОбъект.ВалютаДокумента;
				КонецЕсли;
				ПроверкаМинимальнойЦены(ДокументОбъект, ДатаСкидок, Номенклатура, ТаблицаТоваров,
						МинимальныеЦены, СписокФильтров, УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара);
					
				КонецЕсли;
				
			Иначе
				
				Для Каждого СтрокаТовара ИЗ ТаблицаТоваров Цикл
					Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
					СуммаСкидки = 0;
					
					СуммаСкидки = Сумма * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;
					СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТовара.ПроцентСкидкиНаценки / 100);
					
					СтрокаТовара.Сумма = Сумма - СуммаСкидки;
					Если УчитыватьНДС <> Неопределено
						И УчитыватьНДС Тогда
						//Рассчитаем сумму НДС строки таблицы значений.
						СтрокаТовара.СуммаНДС = РассчитатьСуммуНДС(СтрокаТовара.Сумма, УчитыватьНДС, СуммаВключаетНДС,
						ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("ПроцентАвтоматическихСкидок"), "ПроцентАвтоматическихСкидок");
			ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма"), "Сумма");
			ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("УсловиеАвтоматическойСкидки"), "УсловиеАвтоматическойСкидки");
			ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("ЗначениеУсловияАвтоматическойСкидки"), "ЗначениеУсловияАвтоматическойСкидки");
			
			Если УчитыватьНДС <> Неопределено
				И УчитыватьНДС Тогда
				ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("СуммаНДС"), "СуммаНДС");
			КонецЕсли;
		КонецЕсли;

КонецПроцедуры // РассчитатьСкидкиПриПродаже()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ РАССЧЕТА ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура заполняет ставку НДС в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	//Заполнить СтавкаНДС
	Если ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтавкуНДСТабЧасти()

// Процедура заполняет способ списания товаров в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;

КонецПроцедуры // ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти()

// Процедура заполняет способ списания комплектующих в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСпособСписанияОстаткаКомплектующихТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	СтрокаТабличнойЧасти.СпособСписания = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;

КонецПроцедуры // ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти()

// Заполняет процент розничной наценки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// Заполнять имеет смысл только для розничного склада.
	Склад = ЕстьНеавтоматизированныйРозничныйСкладДокумента(ДокументОбъект);
	Если Склад = Неопределено Тогда
		Возврат; 
	КонецЕсли;

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	Иначе
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

	ТипЦенРозничнойТорговли = Склад.ТипЦенРозничнойТорговли;
	СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры(
	                                                            СтрокаТабличнойЧасти.Номенклатура,
	                                                            ХарактеристикаНоменклатуры,
	                                                            ТипЦенРозничнойТорговли,
	                                                            ДокументОбъект.Дата );

КонецПроцедуры // ЗаполнитьПроцентРозничнойНаценкиТабЧасти()

// Процедура заполняет единицу в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

КонецПроцедуры // ЗаполнитьЕдиницуТабЧасти()

// Процедура заполняет единицу и цену по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ПересчитыватьНалогиВЦене = Истина) Экспорт

	Перем Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС;

	ИмяТабличнойЧасти   = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	Иначе
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

	СтруктураШапкиДокумента.Свойство("Контрагент",         Контрагент);
	СтруктураШапкиДокумента.Свойство("ТипЦен",             ТипЦен);
	СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураШапкиДокумента.Свойство("ДатаДокумента",      ДатаДокумента);
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",    ВалютаДокумента); 
	СтруктураШапкиДокумента.Свойство("УчитыватьНДС",       УчитыватьНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС",   СуммаВключаетНДС);

	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.

	// определяем имя табличной части, из которой вызывается процедура
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;
	
	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если ЗначениеНеЗаполнено(Контрагент)
	 Или ЗначениеНеЗаполнено(ТипЦен) Тогда

		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	Иначе
		// из регистра
		Цена = ПолучитьЦенуКонтрагента(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры, Контрагент,
		                               ТипЦен, ДатаДокумента, СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                               ВалютаДокумента, КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		                               КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		                               ДоговорКонтрагента);

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если НЕ ЗначениеНеЗаполнено(Цена) Тогда

			Если ПересчитыватьНалогиВЦене Тогда
				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
				                            ТипЦен.ЦенаВключаетНДС,
				                            УчитыватьНДС, СуммаВключаетНДС, 
				                            ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли;

		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	КонецЕсли;

	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

КонецПроцедуры // ЗаполнитьЕдиницуЦенуПокупкиТабЧасти()

// Процедура заполняет цену по ценам покупки в строке табличной части документа (по единице хранения остатков)
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ПересчитыватьНалогиВЦене = Истина) Экспорт

	Перем Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС;

	ИмяТабличнойЧасти   = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	Иначе
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

	СтруктураШапкиДокумента.Свойство("Контрагент",         Контрагент);
	СтруктураШапкиДокумента.Свойство("ТипЦен",             ТипЦен);
	СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураШапкиДокумента.Свойство("ДатаДокумента",      ДатаДокумента);
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",    ВалютаДокумента); 
	СтруктураШапкиДокумента.Свойство("УчитыватьНДС",       УчитыватьНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС",   СуммаВключаетНДС);

	// определяем имя табличной части, из которой вызывается процедура
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;

	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если ЗначениеНеЗаполнено(Контрагент)
	 Или ЗначениеНеЗаполнено(ТипЦен) Тогда
		Возврат;
	Иначе
		// из регистра
		ЕдИзмХран = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		Цена = ПолучитьЦенуКонтрагента(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры, Контрагент,
		                               ТипЦен, ДатаДокумента, ЕдИзмХран, 
		                               ВалютаДокумента, КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		                               КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		                               ДоговорКонтрагента);

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения        
		Если ЗначениеНеЗаполнено(Цена) Тогда
			Возврат;
		Иначе

			Если ПересчитыватьНалогиВЦене Тогда
				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
				                            ТипЦен.ЦенаВключаетНДС,
				                            УчитыватьНДС, СуммаВключаетНДС, 
				                            ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуПокупкиТабЧасти()

// Процедура заполняет цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	Иначе
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

	//Из регистра сведений ЦеныКомпании по Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда 

		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.Цена = 0;

	Иначе
		// из регистра
		ЕдИзмХран = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
		                            ДокументОбъект.ТипЦен, ДокументОбъект.Дата, ЕдИзмХран, 
		                            ДокументОбъект.ВалютаДокумента, КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), ,
		                            ?(ЕстьРеквизитДокумента("ДоговорКонтрагента",МетаданныеДокумента),ДокументОбъект.ДоговорКонтрагента,Неопределено));

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если ЗначениеНеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
						ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
						ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
						И ДокументОбъект.УчитыватьНДС, 
						ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
						И ДокументОбъект.СуммаВключаетНДС, 
						?(ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
						ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;  

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуПродажиТабЧасти()

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета,
//  ВалютаДокумента                - необязательный параметр, валюта, в которой надо заполнить цену,
//                                   если не задан, то цена заполняется в валюте документа,
//                                   если нет валюты документа, то в валюте упр. учета.
//
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета,
                                               ВалютаДокумента =Неопределено, ТипЦен = Неопределено) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЗначениеНеЗаполнено(ТипЦен) Тогда
		Если  НЕ ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) И 
			СтрокаТабличнойЧасти.Номенклатура.ВидТовара=Перечисления.ВидыТоваров.Диски Тогда
			ТекТипЦен = КОнстанты.ТипЦенДиски.Получить();
		Иначе
			ТекТипЦен = ДокументОбъект.ТипЦен;
		КОнецЕсли;
	Иначе
		ТекТипЦен = ТипЦен;
	КонецЕсли;

	Если ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	Иначе
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(ВалютаДокумента) Тогда
		Если ЕстьРеквизитДокумента("ВалютаДокумента",МетаданныеДокумента) Тогда
			ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
			КурсДокумента      = КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
			КратностьДокумента = КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		Иначе

			// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту управленческого учета
			ВалютаДокумента    = Константы.ВалютаУправленческогоУчета.Получить();

			СтруктураВалюты    = ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
			КурсДокумента      = СтруктураВалюты.Курс;
			КратностьДокумента = СтруктураВалюты.Кратность;

		КонецЕсли;
	Иначе

		СтруктураВалюты    = ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;

	КонецЕсли;

	//Из регистра сведений ЦеныКомпании по Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если ЗначениеНеЗаполнено(ТекТипЦен) Тогда 

		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Цена = 0;

	Иначе
		// из регистра
		Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
		                            ТекТипЦен, ДокументОбъект.Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения, 
		                            ВалютаДокумента, КурсДокумента, КратностьДокумента, ,
		                            ?(ЕстьРеквизитДокумента("ДоговорКонтрагента",МетаданныеДокумента),ДокументОбъект.ДоговорКонтрагента,Неопределено));

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если ЗначениеНеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
						ТекТипЦен.ЦенаВключаетНДС,
						ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
						И ДокументОбъект.УчитыватьНДС, 
						ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
						И ДокументОбъект.СуммаВключаетНДС, 
						?(ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
						ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;  

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли; 

		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	КонецЕсли;

	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

КонецПроцедуры // ЗаполнитьЕдиницуЦенуПродажиТабЧасти()

// Процедура заполняет единицу и розничную цену продажи по в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа;
//  ДокументОбъект                 - объект редактируемого документа;
//  СкладКомпании                  - ссылка на справочник, розничный склад компании по которому надо 
//                                   определить розничную цену;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ЗаказПокупателя                - ссылка на документ, Заказ покупателя, из резерва по которому надо
//                                   определить розничную цену, если не задан, то розничная цена
//                                   берется для сводного остатка
//
Процедура ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СкладКомпании,
	                                                   ВалютаРегламентированногоУчета, ЗаказПокупателя = Неопределено) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	Иначе
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

	Если ЕстьРеквизитДокумента("ВалютаДокумента",МетаданныеДокумента) Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе

		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту управленческого учета
		ВалютаДокумента    = ВалютаРегламентированногоУчета;

		СтруктураВалюты    = ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;

	КонецЕсли;

	Если ЗначениеНеЗаполнено(СкладКомпании) Тогда
		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Цена = 0;

	Иначе

		// из регистра
		Цена = ПолучитьРозничнуюЦену(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		                           СкладКомпании, ВалютаРегламентированногоУчета, ЗаказПокупателя, ДокументОбъект.Дата, 
		                           СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВалютаДокумента, КурсДокумента, 
		                           КратностьДокумента);

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
								
		Если ЗначениеНеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
						Истина, 
						ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
						И ДокументОбъект.УчитыватьНДС, 
						ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
						И ДокументОбъект.СуммаВключаетНДС, 
						?(ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
						ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;  

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли; 

		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		
	КонецЕсли;

	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
КонецПроцедуры // ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти()

// Процедура заполняет цену возвратной тары по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику

	Если НЕ ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) тогда
		Возврат;
	Иначе

		Если ЗначениеНеЗаполнено(ДокументОбъект.Контрагент)
		 Или ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда 
			Возврат;
		Иначе
			// из регистра
			// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
			Если ЗначениеНеЗаполнено(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
				Цена = 0;
			Иначе
				ЕдиницаТары = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;

				Цена = ПолучитьЦенуКонтрагента(СтрокаТабличнойЧасти.Номенклатура, , ДокументОбъект.Контрагент,
				       ДокументОбъект.ТипЦен, ДокументОбъект.Дата, ЕдиницаТары,
				       ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.КурсВзаиморасчетов,
				       ДокументОбъект.КратностьВзаиморасчетов,
				       ?(ЕстьРеквизитДокумента("ДоговорКонтрагента",МетаданныеДокумента),ДокументОбъект.ДоговорКонтрагента,Неопределено));
			КонецЕсли;

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки бурутся из номенклатуры
			Если ЗначениеНеЗаполнено(Цена) Тогда
				Возврат;
			Иначе
				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                            ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
				                            ДокументОбъект.УчитыватьНДС, Истина,
				                            ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление()

// Процедура заполняет единицу и цену возвратной тары по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ДоговорКонтрагента   - договор контрагента в случае, если его надо брать не из данного документа.
//
Процедура ЗаполнитьЕдиницуЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ДокументОбъект, ДоговорКонтрагента = Неопределено) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	Иначе
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

	// Из регистра сведений ЦеныКомпании по измерениям Номенклатура и ТипЦен получить ресурсы, 
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда 

		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Цена = 0;

	Иначе

		Если ДоговорКонтрагента = Неопределено Тогда
			ДоговорКонтрагента = ?(ЕстьРеквизитДокумента("ДоговорКонтрагента",МетаданныеДокумента),ДокументОбъект.ДоговорКонтрагента,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		КонецЕсли;

		// из регистра
		// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
		Если ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Цена = 0;
		Иначе
			Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
			                                 ДокументОбъект.ТипЦен, ДокументОбъект.Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения, 
			                                 ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.КурсВзаиморасчетов,
			                                 ДокументОбъект.КратностьВзаиморасчетов, ,
			                                 ДоговорКонтрагента);

		КонецЕсли;

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС, но без НП,
		// ставки бурутся из номенклатуры
		Если ЗначениеНеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
						ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
						ДокументОбъект.УчитыватьНДС, Истина, 
						ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));
		КонецЕсли;  

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли; 
		
		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЕдиницуЦенуВозвратнойТарыТабЧастиОтпуск()

// Процедура заполняет цену возвратной тары по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ДоговорКонтрагента   - договор контрагента в случае, если его надо брать не из данного документа.
//
Процедура ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ДокументОбъект, ДоговорКонтрагента = Неопределено) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	Иначе
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда 

		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.Цена = 0;

	Иначе

		Если ДоговорКонтрагента = Неопределено Тогда
			ДоговорКонтрагента = ?(ЕстьРеквизитДокумента("ДоговорКонтрагента",МетаданныеДокумента),ДокументОбъект.ДоговорКонтрагента,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		КонецЕсли;

		// из регистра
		// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
		Если ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Цена = 0;
		Иначе
			ЕдиницаТары = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;

			Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
			                            ДокументОбъект.ТипЦен, ДокументОбъект.Дата, СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков,
			                            ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.КурсВзаиморасчетов,
			                            ДокументОбъект.КратностьВзаиморасчетов, ,
			                            ДоговорКонтрагента);
		КонецЕсли;

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
		// ставки бурутся из номенклатуры
		Если ЗначениеНеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
						ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
						ДокументОбъект.УчитыватьНДС, Истина, 
						ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));
		КонецЕсли;  

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск()

// Рассчитывает розничную цену в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета, ВалютаУправленческогоУчета = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Рассчитывать розничную цену имеет смысл только для розничного склада.
	Склад = ЕстьНеавтоматизированныйРозничныйСкладДокумента(ДокументОбъект);
	Если Склад = Неопределено Тогда
		Возврат; 
	КонецЕсли;

	Если ЕстьРеквизитДокумента("ВалютаДокумента",МетаданныеДокумента) Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту управленческого учета
		ВалютаДокумента    = ВалютаУправленческогоУчета;
		СтруктураВалюты    = ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;

	ТипЦенРозничнойТорговли = Склад.ТипЦенРозничнойТорговли;

	// Если в документе налогов нет, считаем, что цена со всеми налогами.
	Если ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
		СтавкаНДС        = ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	Иначе
		СуммаВключаетНДС = Истина;
		СтавкаНДС        = ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
	КонецЕсли;

	СтрокаТабличнойЧасти.ЦенаВРознице = РассчитатьРозничнуюЦену(СтрокаТабличнойЧасти.Цена,
	                                                            ВалютаДокумента,
	                                                            КурсДокумента,
	                                                            КратностьДокумента,
	                                                            ВалютаРегламентированногоУчета,
	                                                            СтрокаТабличнойЧасти.ПроцентРозничнойНаценки,
	                                                            СуммаВключаетНДС,
	                                                            СтавкаНДС,
	                                                            ТипЦенРозничнойТорговли,
	                                                            СтрокаТабличнойЧасти.ЕдиницаИзмерения,
	                                                            СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков);

КонецПроцедуры // РассчитатьРозничнуюЦенуТабЧасти()

// Рассчитывает процент розничной наценкив строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	Перем ЦенаСНалогами;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту управленческого учета
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		СтруктураВалюты    = ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;

	// Рассчитывать процент имеет смысл только для розничного склада.
	Склад = ЕстьНеавтоматизированныйРозничныйСкладДокумента(ДокументОбъект);
	Если Склад = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Цена = 0 Тогда
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = 0;
		СтрокаТабличнойЧасти.ЦенаВРознице = 0;
	Иначе

		// Пересчитываем в рубли
		ЦенаСНалогами = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, ВалютаДокумента,
		                                           ВалютаРегламентированногоУчета,
		                                           КурсДокумента, 1, КратностьДокумента, 1);

		ЕстьНалоги = ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента);

		Если ЕстьНалоги Тогда
			СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
			СтавкаНДС        = ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Иначе
			СуммаВключаетНДС = Истина;
			СтавкаНДС        = ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
		КонецЕсли;

		// Увеличиваем при необходимости на величину налогов (розничная цена всегда с налогами)
		ЦенаСНалогами = ПересчитатьЦенуПриИзмененииФлаговНалогов(ЦенаСНалогами,
		                Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		                СуммаВключаетНДС, Истина, Истина, СтавкаНДС);

		ЦенаСНалогамиЗаЕдиницуХранения = ЦенаСНалогами * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
		                                 / СтрокаТабличнойЧасти.Коэффициент;

		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = 100 * (СтрокаТабличнойЧасти.ЦенаВРознице - ЦенаСНалогамиЗаЕдиницуХранения)
		                                               / ЦенаСНалогамиЗаЕдиницуХранения;
	КонецЕсли;

КонецПроцедуры // РассчитатьПроцентРозничнойНаценкиТабЧасти()

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа,
//  ВидРасчета           - "Со всеми скидками", сумма минус скидки;
//                         "Без учета ручной скидки", сумма минус автоматические скидки;
//                         "Без учета скидок", сумма (Цена * Количество);
//
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СпособРасчета = Неопределено) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	СуммаСкидки = 0;

	Если (СпособРасчета = Неопределено)
	 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок)
	 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки) Тогда
		Если ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента,
			                                 ИмяТабличнойЧасти) Тогда
			СуммаСкидки = Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100;
		КонецЕсли;

		Если (СпособРасчета <> Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки)Тогда
			Если ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СтрокаТабличнойЧасти.Сумма = Сумма - СуммаСкидки;

КонецПроцедуры // РассчитатьСуммуТабЧасти()

// Рассчитывает сумму в строке возвратной тары документа
//
// Параметры:
//  СтрокаВозвратнойТары  - строка возвратной тары табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ДокументОбъект) Экспорт

	СтрокаВозвратнойТары.Сумма = СтрокаВозвратнойТары.Цена * СтрокаВозвратнойТары.Количество;

КонецПроцедуры // РассчитатьСуммуВозвратнойТарыТабЧасти()

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// Если в документе нет флагов учета НДС, то в конфигурации считатется, что суммы включают НДС.
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = Истина;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента ) Тогда
		УчитыватьНДС = ДокументОбъект.УчитыватьНДС;
	КонецЕсли;

	Если ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента ) Тогда
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
	КонецЕсли;

	СтрокаТабличнойЧасти.СуммаНДС = РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	                                                   УчитыватьНДС, СуммаВключаетНДС,
	                                                   ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	СтрокаТабличнойЧасти.СуммаНДСПередачи = РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаПередачи,
	                                                   ДокументОбъект.УчитыватьНДС,
	                                                   ДокументОбъект.СуммаВключаетНДС,
	                                                   ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

// Рассчитывает количество исходя из количества мест
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти   = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
			 И ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда

				
			Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" не выбрана единица измерения!
				                 |Пересчет количества невозможен.");
			ИначеЕсли ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
				Если СтрокаТабличнойЧасти.КоличествоМест = 0 Тогда 
					Возврат;
				КонецЕсли;

				СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" не выбрана единица измерения мест!
				                 |Пересчет количества невозможен.");
			Иначе
				Если СтрокаТабличнойЧасти.Коэффициент = 0 Тогда
					СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" у единицы измерения цены "
					                 +СтрокаТабличнойЧасти.ЕдиницаИзмерения.Наименование+" не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент = 0 Тогда
					СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" у единицы измерения мест "
					                 +СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Наименование+" не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				Иначе
					Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест Тогда
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест;
					Иначе
						Количество = СтрокаТабличнойЧасти.КоличествоМест * СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент
						             / СтрокаТабличнойЧасти.Коэффициент;

						Если Цел(Количество) = Количество Тогда
							СтрокаТабличнойЧасти.Количество = Количество;
						Иначе
							СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование
							                 +" у единицы измерения цены "+СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Наименование
							                 +" или мест "+СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Наименование
							                 +" не верно указан коэффициент!
							                 |Пересчет количества невозможен.");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
			И ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков) Тогда
				СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" не выбрана единица хранения остатков!
				                 |Пересчет количества невозможен.");
			ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0 Тогда
				СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" у единицы измерения "
				                 +СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Наименование+" не проставлен коэффициент!
				                 |Пересчет количества невозможен.");
			Иначе
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест * СтрокаТабличнойЧасти.Коэффициент
				                                  / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // РассчитатьКоличествоТабЧасти()

// Рассчитывает количество мест исходя из количества
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти   = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
			 И ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда

			Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" не выбрана единица измерения цены!
				                 |Пересчет количества невозможен.");
			ИначеЕсли ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
				СтрокаТабличнойЧасти.КоличествоМест = 0;
			Иначе
				Если СтрокаТабличнойЧасти.Коэффициент = 0 Тогда
					СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" у единицы измерения цены "
					                 +СтрокаТабличнойЧасти.ЕдиницаИзмерения.Наименование+" не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент = 0 Тогда
					СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" у единицы измерения мест "
					                 +СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Наименование+" не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				Иначе
					Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест Тогда
						СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.Количество;
					Иначе
						КоличествоМест = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Коэффициент
						                 / СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент;
						КоличествоМест = ?(Цел(КоличествоМест) = КоличествоМест, КоличествоМест, 0);

						СтрокаТабличнойЧасти.КоличествоМест = КоличествоМест;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти)
			и СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
			Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков) Тогда
				СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" не выбрана единица хранения остатков!
				                 |Пересчет количества невозможен.");
			ИначеЕсли СтрокаТабличнойЧасти.Коэффициент = 0 Тогда
				СообщитьОбОшибке("Не проставлен коэффициент!
				                 |Пересчет количества мест невозможен.");
			Иначе
				СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.Количество 
				                                      * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
				                                      / СтрокаТабличнойЧасти.Коэффициент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // РассчитатьКоличествоМестТабЧасти()

// Процедура выполняет проверку заполнения единицы измерения мест и количества мест
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется проверка
//
Процедура ПриЗаписиПроверитьЕдиницуИзмеренияМест(ТабличнаяЧасть) Экспорт

	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если НЕ ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест)
			 И СтрокаТабличнойЧасти.КоличествоМест = 0 Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПриЗаписиПроверитьЕдиницуИзмеренияМест()

// Функция выполняет поиск первой, удовлетворяющей условию поика, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда

		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции // НайтиСтрокуТабЧасти()

// Рассчитывает цену в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если (ЕстьРеквизитТабЧастиДокумента("СкидкаПоСуммеДокумента", МетаданныеДокумента, ИмяТабличнойЧасти)
			  И СтрокаТабличнойЧасти.СкидкаПоСуммеДокумента <> 0)
		 Или (ЕстьРеквизитТабЧастиДокумента("СкидкаПоКоличествуТовара", МетаданныеДокумента, ИмяТабличнойЧасти)
			  И СтрокаТабличнойЧасти.СкидкаПоКоличествуТовара <> 0)
		 Или (ЕстьРеквизитТабЧастиДокумента("СкидкаПоВидуОплаты", МетаданныеДокумента, ИмяТабличнойЧасти)
			  И СтрокаТабличнойЧасти.СкидкаПоВидуОплаты <> 0)
		 Или (ЕстьРеквизитТабЧастиДокумента("СкидкаПоДисконтнойКарте", МетаданныеДокумента, ИмяТабличнойЧасти)
			  И СтрокаТабличнойЧасти.СкидкаПоДисконтнойКарте <> 0)
		 Или (ЕстьРеквизитТабЧастиДокумента("СкидкаПоВыбраннойДисконтнойКартойСумме", МетаданныеДокумента, ИмяТабличнойЧасти)
			  И СтрокаТабличнойЧасти.СкидкаПоВыбраннойДисконтнойКартойСумме <> 0)
			Тогда
				//Невозможно рассчитать цену по сумме документа!!!
		Иначе
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100) / СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

КонецПроцедуры // РассчитатьЦенуТабЧасти()

// Рассчитывает розничную наценку и розничную цену по одному из двух алгоритмов, в зависимости от 
// настройке заданной в справочнике складов
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа
//  СтрокаТабличнойЧасти           - строка табличной части документа
//  ВалютаРегламентированногоУчета - валюта регламентированного учета, в которой возвращается розничная цена
// 
Процедура РассчитатьРозничнуюЦенуВСтрокеТабЧасти(ДокументОбъект, СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета) Экспорт

	
	Если ДокументОбъект.Склад.РасчетРозничныхЦенПоТорговойНаценке Тогда
		ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		СтрокаТабличнойЧасти.ЦенаВРознице = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
		                                    СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		                                    ДокументОбъект.Склад.ТипЦенРозничнойТорговли,
		                                    ДокументОбъект.Дата,
		                                    СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков,
		                                    ВалютаРегламентированногоУчета);
		РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЛАНОВОЙ СЕБЕСТОИМОСТЬЮ

// Рассчитывает сумму и отклонение от плановой себестоимости в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти                          - строка табличной части документа,
//  ДокументОбъект                                - объект редактируемого документа,
//  СуммаПлановойСебестоимости                    - в этот параметр будет помещено значение,
//  СуммаОтклоненияОтСуммыПлановойСебестоимости   - в этот параметр будет помещено значение,
//  ПроцентОтклоненияОтСуммыПлановойСебестоимости - в этот параметр будет помещено значение.
//
Процедура ПолучитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект,
								СуммаПлановойСебестоимости, 
								СуммаОтклоненияОтСуммыПлановойСебестоимости = 0, 
								ПроцентОтклоненияОтСуммыПлановойСебестоимости = 0) Экспорт

	Перем СуммаНДСПлановойСебестоимости;

	// Расчитываем сумму плановой себестоимости.
	СуммаПлановойСебестоимости = СтрокаТабличнойЧасти.ПлановаяСебестоимость * СтрокаТабличнойЧасти.Количество;
	
	Если СуммаПлановойСебестоимости = 0 Тогда

		// Если плановая себестоимость неопределена, 
		// информация об отклонении от плановой себестоимости также будет неопределенной.
		СуммаПлановойСебестоимости                    = Неопределено;
		СуммаОтклоненияОтСуммыПлановойСебестоимости   = Неопределено;
		ПроцентОтклоненияОтСуммыПлановойСебестоимости = Неопределено;
	Иначе

		// Если плановая себестоимость определена, рассчитываем отклонение.

		// Расчитаем налоги от суммы плановой себестоимости
		СуммаНДСПлановойСебестоимости = РассчитатьСуммуНДС(СуммаПлановойСебестоимости,
		                                ДокументОбъект.УчитыватьНДС,
		                                ДокументОбъект.СуммаВключаетНДС,
		                                ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		СуммаПоДокументу = СтрокаТабличнойЧасти.Сумма;

		// Учитываем налоги.
		Если (ДокументОбъект.УчитыватьНДС) 
		   И (НЕ ДокументОбъект.СуммаВключаетНДС) Тогда
			СуммаПоДокументу           = СуммаПоДокументу           + СтрокаТабличнойЧасти.СуммаНДС;
			СуммаПлановойСебестоимости = СуммаПлановойСебестоимости + СуммаНДСПлановойСебестоимости;
		КонецЕсли;

		СуммаОтклоненияОтСуммыПлановойСебестоимости   = СуммаПоДокументу - СуммаПлановойСебестоимости;
		ПроцентОтклоненияОтСуммыПлановойСебестоимости = (СуммаОтклоненияОтСуммыПлановойСебестоимости 
		                                                 / СуммаПлановойСебестоимости) * 100;
	КонецЕсли;

КонецПроцедуры // ПолучитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти()

// Заполняет информацию о сумме и отклонении от плановой себестоимости в ячейках строки табличной части документа
// Вызывается из процедуры ТоварыПриВыводеСтроки().
//
// Параметры:
//  ОформлениеСтроки     - объект, содержащий оформление строки (шрифт, цвет) и коллекцию оформлений ячеек. 
//  СтрокаТабличнойЧасти - редактируемая строка табличной части,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(ОформлениеСтроки, СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	Перем СуммаПлановойСебестоимости, СуммаОтклоненияОтСуммыПлановойСебестоимости, 
	      ПроцентОтклоненияОтСуммыПлановойСебестоимости;

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;

	Ячейка = ОформлениеСтроки.Ячейки;
	Ячейка.СуммаПлановойСебестоимости.ОтображатьТекст                    = Истина;
	Ячейка.СуммаОтклоненияОтСуммыПлановойСебестоимости.ОтображатьТекст   = Истина;
	Ячейка.ПроцентОтклоненияОтСуммыПлановойСебестоимости.ОтображатьТекст = Истина;

	ПолучитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект,
	                                                  СуммаПлановойСебестоимости, 
	                                                  СуммаОтклоненияОтСуммыПлановойСебестоимости,
	                                                  ПроцентОтклоненияОтСуммыПлановойСебестоимости);

	Если СуммаПлановойСебестоимости = Неопределено Тогда

		// Если плановая себестоимость неопределена, 
		// информация об отклонении от плановой себестоимости также будет неопределенной.
		Ячейка.СуммаПлановойСебестоимости.Текст                    = "";
		Ячейка.СуммаОтклоненияОтСуммыПлановойСебестоимости.Текст   = "";
		Ячейка.ПроцентОтклоненияОтСуммыПлановойСебестоимости.Текст = "";
	Иначе

		// Если плановая себестоимость определена, 
		// отклонение рассчитываем и показываем.
		Ячейка.СуммаПлановойСебестоимости.Текст                    = Формат(СуммаПлановойСебестоимости, "ЧЦ=15;ЧДЦ=2;ЧН=00");
		Ячейка.СуммаОтклоненияОтСуммыПлановойСебестоимости.Текст   = Формат(СуммаОтклоненияОтСуммыПлановойСебестоимости, "ЧЦ=15;ЧДЦ=2;ЧН=00");
		Ячейка.ПроцентОтклоненияОтСуммыПлановойСебестоимости.Текст = Формат(ПроцентОтклоненияОтСуммыПлановойСебестоимости, "ЧЦ=15;ЧДЦ=2;ЧН=00");

		#Если Клиент Тогда
		// Отрицательное отклонение выделяем красным цветом.
		Если СуммаОтклоненияОтСуммыПлановойСебестоимости < 0 Тогда
			Ячейка.СуммаОтклоненияОтСуммыПлановойСебестоимости.ЦветТекста   = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Ячейка.ПроцентОтклоненияОтСуммыПлановойСебестоимости.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		КонецЕсли;
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти()

// Рассчитывает плановую себестоимость в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	Иначе
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;

	ТипЦенПлановойСебестоимостиНоменклатуры = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();

	ПлановаяСебестоимость = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
	                                             ТипЦенПлановойСебестоимостиНоменклатуры, 
	                                             ДокументОбъект.Дата, 
	                                             СтрокаТабличнойЧасти.ЕдиницаИзмерения, 
	                                             ДокументОбъект.ВалютаДокумента,
	                                             КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
	                                             КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));

	ПлановаяСебестоимость = ПересчитатьЦенуПриИзмененииФлаговНалогов(ПлановаяСебестоимость,
	                                               Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
	                                               ТипЦенПлановойСебестоимостиНоменклатуры.ЦенаВключаетНДС,
	                                               ДокументОбъект.УчитыватьНДС,
	                                               ДокументОбъект.СуммаВключаетНДС,
	                                               ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

	СтрокаТабличнойЧасти.ПлановаяСебестоимость = ПлановаяСебестоимость;

КонецПроцедуры // РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти()

// Рассчитывает плановую себестоимость во всех строках табличной части документа.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;

	// В цикле по ТЧ перезаполняем плановую себестоимость.
	Для каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл
		РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
	КонецЦикла;

КонецПроцедуры // РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти()

// Пересчитывает плановую себестоимость с учетом новой валюты и налогов.
//
// Параметры:
//  ДокументОбъект    - объект редактируемого документа,
//  СтруктураЗначений - структура предыдущих зачений реквизитов документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ИзменитьВалютуНалогиПлановойСебестоимостиТабЧасти(ДокументОбъект, СтруктураЗначений, ВалютаРегламентированногоУчета) Экспорт

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;

	// В случае, если поменялась валюта.
	Если СтруктураЗначений.ТекущийВалютаДокумента <> ДокументОбъект.ВалютаДокумента Тогда

		// Плановая себестоимость заполнится с учетом новой валюты и налогов.
		РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе

		// Если надо пересчитать цены при изменении флагов налогообложения.
		Если (СтруктураЗначений.ТекущийУчитыватьНДС     <> ДокументОбъект.УчитыватьНДС) 
		 ИЛИ (СтруктураЗначений.ТекущийСуммаВключаетНДС <> ДокументОбъект.СуммаВключаетНДС) Тогда

			// В цикле по ТЧ пересчитываем плановую себестоимость.
			Для каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл

				СтрокаТабличнойЧасти.ПлановаяСебестоимость = 
				           ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.ПлановаяСебестоимость, 
				                                             Неопределено,
				                                             СтруктураЗначений.ТекущийСуммаВключаетНДС,
				                                             ДокументОбъект.УчитыватьНДС,
				                                             ДокументОбъект.СуммаВключаетНДС, 
				                                             ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ИзменитьВалютуНалогиПлановойСебестоимостиТабЧасти()

// Процедура пересчета плановой себестоимости при изменении единицы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти       - строка табличной части документа,
//  ДокументОбъект             - объект редактируемого документа,
//  СтароеЗначениеКоэффициента - предыдущее значение коэффициента.
//
Процедура ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость(СтрокаТабличнойЧасти, ДокументОбъект, 
                                                     СтароеЗначениеКоэффициента) Экспорт

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;

	Если СтароеЗначениеКоэффициента > 0 Тогда
		СтрокаТабличнойЧасти.ПлановаяСебестоимость = СтрокаТабличнойЧасти.ПлановаяСебестоимость 
		                                             * СтрокаТабличнойЧасти.Коэффициент 
		                                             / СтароеЗначениеКоэффициента;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость()

Процедура ЗаполнитьПлановуюСебестоимостьНаОсновании(ДокументОбъект, ДокументОснование, ВалютаРегламентированногоУчета) Экспорт

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда

		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;

	// По умолчанию заполняем по документу-основанию.
	ЗаполнитьПоДокументуОснованию = Истина;
	
	МетаданныеДокумента = ДокументОснование.Метаданные();
	
	// Проверяем на возможность заполнения по документу-основанию.
	Если ЗначениеНеЗаполнено(ДокументОснование) Тогда
		ЗаполнитьПоДокументуОснованию = Ложь;
	КонецЕсли;
	Если ЗаполнитьПоДокументуОснованию Тогда
		Если Не ЕстьРеквизитДокумента("ИспользоватьПлановуюСебестоимость", МетаданныеДокумента) Тогда
			ЗаполнитьПоДокументуОснованию = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ЗаполнитьПоДокументуОснованию Тогда
		Если Не ДокументОснование.ИспользоватьПлановуюСебестоимость Тогда
			ЗаполнитьПоДокументуОснованию = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Если невозможно заполнить по документу-основанию, то заполняем по типу цены.
	Если Не ЗаполнитьПоДокументуОснованию Тогда
		РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ДокументОбъект, ВалютаРегламентированногоУчета);
		Возврат;
	КонецЕсли;
	
	// Если возможно, то заполняем.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", ДокументОснование);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Номенклатура,
		|	Док.ПлановаяСебестоимость
		|	ИЗ
		|		Документ." + ДокументОснование.Метаданные().Имя + ".Товары КАК Док
		|	ГДЕ
		|		Док.Ссылка = &Сделка";

	Выборка = Запрос.Выполнить().Выбрать();

	// В цикле по ТЧ заполняем плановую себестоимость значениями,
	// полученными из документа-основания.
	Для каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);

		Выборка.Сбросить();
		Если НЕ Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			Продолжить;
		КонецЕсли;

		ПлановаяСебестоимость = ПересчитатьИзВалютыВВалюту(Выборка.ПлановаяСебестоимость, 
		                                   ДокументОбъект.ВалютаДокумента, ДокументОснование.ВалютаДокумента,
		                                   КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета),
		                                   КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета));

		ПлановаяСебестоимость = ПересчитатьЦенуПриИзмененииФлаговНалогов(
		                                   ПлановаяСебестоимость,
		                                   Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		                                   ДокументОснование.СуммаВключаетНДС,
		                                   ДокументОбъект.УчитыватьНДС,
		                                   ДокументОбъект.СуммаВключаетНДС,
		                                   ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		Если ПлановаяСебестоимость = 0 Тогда
			СообщитьОбОшибке("В строке номер " + СокрЛП(СтрокаТабличнойЧасти.НомерСтроки) + " не определена плановая себестоимость!");
		КонецЕсли;

		СтрокаТабличнойЧасти.ПлановаяСебестоимость = ПлановаяСебестоимость;

	КонецЦикла;

КонецПроцедуры // тчЗаполнитьПлановуюСебестоимостьНаОсновании()

Функция ПолучитьКубы(Товар)
	
	Типоразмер = Товар.Размер;
	Спр = Справочники.НормыЗагрузки.НайтиПоНаименованию(СокрЛП(Типоразмер));
	Если Спр <> Справочники.НормыЗагрузки.ПустаяСсылка() Тогда 
		Возврат Спр.НормаЗагрузки;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура РассчитатьКубатуруТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	Если ПолучитьКубы(СтрокаТабличнойЧасти.Номенклатура) > 0 Тогда
		
		СтрокаТабличнойЧасти.Кубов = СтрокаТабличнойЧасти.Количество / ПолучитьКубы(СтрокаТабличнойЧасти.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ 

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПОДБОРА В ТОРГОВЫЕ ДОКУМЕНТЫ

// Универсальная процедура, которая инициирует механизм подбора
// номенклатуры в документы (открывает основную форму обработки подбор).
//
// Параметры:
//  ФормаДокумента - форма документа, в который осуществляется подбор,
//  СтруктураПараметров - параметры, которые передаются в форму подбора.
//
Процедура ОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, ФормаПодбора = Неопределено) Экспорт

	// Добавляем обработчики в форму
	МетаданныеДокумента = ФормаДокумента.ДокументОбъект.Метаданные();

	Для Каждого ЭлементСтруктурыПараметров Из СтруктураПараметров Цикл

		Если ЕстьРеквизитДокумента(ЭлементСтруктурыПараметров.Ключ, МетаданныеДокумента) Тогда

			ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ЭлементСтруктурыПараметров.Ключ, "ОбновитьФормуПодбора", Ложь);

		КонецЕсли;

	КонецЦикла;

	// Открываем форму подбора.
	ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);
	ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаПодбора.Открыть();

КонецПроцедуры // ОткрытьПодборНоменклатуры()

// Процедура, которая обновляет параметры подбора номенклатуры и
// инициирует обновление формы подбора, если она открыта
//
// Параметры:
//  ДокументОбъект     - объект документа, в котором производится подбор.
//  ФормаДокумента     - форма документа, в который осуществляется подбор,
//  ПолноеИмяРеквизита - полное имя реквизита, который изменился.
//
Процедура ОбновитьПараметрыИФормуПодбора(ДокументОбъект, ФормаДокумента, ПолноеИмяРеквизита) Экспорт

	ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);

	Если ФормаПодбора.Открыта() Тогда

		ИмяРеквизита = СтрЗаменить(ПолноеИмяРеквизита, "ДокументОбъект.", "");

		Если ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров.Свойство(ИмяРеквизита) Тогда

			ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров.Вставить(ИмяРеквизита, ДокументОбъект[ИмяРеквизита]);
			СтруктураЗапроса = ФормаПодбора.ЭлементыФормы.СписокВидовПодбора.Значение;
			Родитель         = ФормаПодбора.ПолучитьТекущегоРодителя();

			ФормаПодбора.ОбновитьИнформационнуюНадписьПараметрыПодбора(СтруктураЗапроса);
			ФормаПодбора.ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыИФормуПодбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЕРЕТАСКИВАНИЕМ НОМЕНКЛАТУРЫ ИЗ ПОДБОРА

// Функция выполняет проверку перетаскивания из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//
// Возвращаемое значение: 
//  Флаг проверки.
//
Функция ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Экспорт

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		Возврат ПараметрыПеретаскивания.Значение.Свойство("ИзПодбора");
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПолучитьСтруктуруЗначенийПеретаскивания()

// Процедура проверки перетаскивания из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//  СтандартнаяОбработка    - cтандартная обработка.
//  ДокументСсылка          - ссылка на документ.
//  ИмяТЧ                   - имя табличной части.
//
Процедура ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ДокументСсылка, ИмяТЧ) Экспорт

	СтандартнаяОбработка = Ложь;

	Если ДокументСсылка = ПараметрыПеретаскивания.Значение.Владелец
	   И ИмяТЧ = ПараметрыПеретаскивания.Значение.ИмяТЧ Тогда

		Если (ИмяТЧ =  "Услуги" И НЕ ПараметрыПеретаскивания.Значение.ВыбСтрока.Услуга)
		 ИЛИ (ИмяТЧ <> "Услуги" И    ПараметрыПеретаскивания.Значение.ВыбСтрока.Услуга) Тогда
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Иначе
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		КонецЕсли;
	Иначе
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;

КонецПроцедуры // ПроверкаПеретаскиванияИзПодбора()

// Процедура подтверждающая перетаскивание из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//  СтандартнаяОбработка    - cтандартная обработка.
//
Процедура ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка                       = Ложь;
	ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;

КонецПроцедуры // ПеретаскиваниеИзПодбора()

// Процедура отменяющая перетаскивание из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//  СтандартнаяОбработка    - cтандартная обработка.
//
Процедура ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка                       = Ложь;
	ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;

КонецПроцедуры // ПеретаскиваниеОтменить()

#КонецЕсли
