
Функция ПолучитьТаблицуПараметрыИзXMLПакетаККТ(Данные, ИдентификаторУстройства = Неопределено) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыРегистрацииККТ();
	
	Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Параметры.РегистрационныйНомерККТ        = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTNumber"));
		Параметры.ОрганизацияНазвание            = ЧтениеXML.ЗначениеАтрибута("OrganizationName");
		Параметры.ОрганизацияИНН                 = СокрЛП(ЧтениеXML.ЗначениеАтрибута("VATIN"));
		Параметры.АдресУстановкиККТ              = ЧтениеXML.ЗначениеАтрибута("AddressSettle");
		Параметры.КодыСистемыНалогообложения     = ЧтениеXML.ЗначениеАтрибута("TaxVariant");
		Если ПустаяСтрока(Параметры.КодыСистемыНалогообложения) Тогда
			Параметры.КодыСистемыНалогообложения = ЧтениеXML.ЗначениеАтрибута("TaxVarinat");
		КонецЕсли;
		Параметры.ПризнакАвтономногоРежима       = ВРег(ЧтениеXML.ЗначениеАтрибута("OfflineMode")) = "TRUE";
		Параметры.ПризнакАвтоматическогоРежима   = ВРег(ЧтениеXML.ЗначениеАтрибута("AutomaticMode")) = "TRUE";
		Параметры.НомерАвтоматаДляАвтоматическогоРежима = ЧтениеXML.ЗначениеАтрибута("AutomaticNumber");
		Параметры.ПризнакРасчетовЗаУслуги        = ВРег(ЧтениеXML.ЗначениеАтрибута("ServiceSign")) = "TRUE";
		Параметры.ПризнакФормированияТолькоБСО   = ВРег(ЧтениеXML.ЗначениеАтрибута("BSOSing")) = "TRUE";
		Параметры.ПризнакРасчетовТолькоВИнтернет = ВРег(ЧтениеXML.ЗначениеАтрибута("CalcOnlineSign")) = "TRUE";
		Параметры.ОрганизацияОФДИНН          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("OFDVATIN"));
		Параметры.ОрганизацияОФДНазвание     = ЧтениеXML.ЗначениеАтрибута("OFDOrganizationName");
		Параметры.ЗаводскойНомерККТ          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTSerialNumber"));
		Параметры.ПризнакФискализации        = ВРег(ЧтениеXML.ЗначениеАтрибута("Fiscal")) = "TRUE";
		Параметры.ЗаводскойНомерФН           = СокрЛП(ЧтениеXML.ЗначениеАтрибута("FNSerialNumber"));
		Параметры.НомерДокументаФискализации = ЧтениеXML.ЗначениеАтрибута("DocumentNumber");
		Параметры.ДатаВремяФискализации      = ЧтениеXML.ЗначениеАтрибута("DateTime");
		Параметры.ВерсияФФДФН   = ЧтениеXML.ЗначениеАтрибута("FFDVersionFN");
		Параметры.ВерсияФФДККТ  = ЧтениеXML.ЗначениеАтрибута("FFDVersionKKT");
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьПараметрыСостоянияСменыИзXMLПакета(Данные, НомерСмены) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	Параметры.НомерСменыККТ = НомерСмены;
	
	Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.КоличествоНепереданныхФД    = Число(ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter"));
			Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
			Параметры.ДатаПервогоНепереданногоФД  = XMLЗначение(Тип("Дата"), ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ВыходныеПараметры, СуммаЧека) Экспорт
	
	ПозицииЧека  = ОбщиеПараметры.ПозицииЧека;
	ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат;
	СуммаЧека = 0;
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckPackage");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	ЗаписьXML.ЗаписатьАтрибут("PaymentType"       , XMLСтрока(ТипРасчета));
	
	Если ОбщиеПараметры.Свойство("КодСистемыНалогообложения") И ОбщиеПараметры.КодСистемыНалогообложения <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("TaxVariant"        , XMLСтрока(ОбщиеПараметры.КодСистемыНалогообложения));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ОтправительEmail"), ОбщиеПараметры.ОтправительEmail, "")));
	// Email отправляет средствами 1C
	Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
		ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
	КонецЕсли;
	// SMS отправляет средствами 1C
	Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
		ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "")));
	КонецЕсли;
	
	Если ОбщиеПараметры.Свойство("ВознагражденияАгента") И ОбщиеПараметры.ВознагражденияАгента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("AgentCompensation" , XMLСтрока(ОбщиеПараметры.ВознагражденияАгента));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ТелефонПлатежногоАгента") И ОбщиеПараметры.ТелефонПлатежногоАгента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("AgentPhone" , XMLСтрока(ОбщиеПараметры.ТелефонПлатежногоАгента));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ТелефонОператораПоПриемуПлатежей") И ОбщиеПараметры.ТелефонОператораПоПриемуПлатежей <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("ReceivePaymentsOperatorPhone" , XMLСтрока(ОбщиеПараметры.ТелефонОператораПоПриемуПлатежей));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ТелефонОператораПеревода") И ОбщиеПараметры.ТелефонОператораПеревода <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorPhone" , XMLСтрока(ОбщиеПараметры.ТелефонОператораПеревода));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("АдресОператораПеревода") И ОбщиеПараметры.АдресОператораПеревода <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorAddress" , XMLСтрока(ОбщиеПараметры.АдресОператораПеревода));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ИННОператораПеревода") И ОбщиеПараметры.ИННОператораПеревода <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorVATIN" , XMLСтрока(ОбщиеПараметры.ИННОператораПеревода));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("НаименованиеОператораПеревода") И ОбщиеПараметры.НаименованиеОператораПеревода <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorName" , XMLСтрока(ОбщиеПараметры.НаименованиеОператораПеревода));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ТелефонБанковскогоАгента") И ОбщиеПараметры.ТелефонБанковскогоАгента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("BankAgentPhone" , XMLСтрока(ОбщиеПараметры.ТелефонБанковскогоАгента));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ТелефонБанковскогоСубагента") И ОбщиеПараметры.ТелефонБанковскогоСубагента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("BankSubagentPhone" , XMLСтрока(ОбщиеПараметры.ТелефонБанковскогоСубагента));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ОперацияБанковскогоАгента") И ОбщиеПараметры.ОперацияБанковскогоАгента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("BankAgentOperation" , XMLСтрока(ОбщиеПараметры.ОперацияБанковскогоАгента));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ОперацияБанковскогоСубагента") И ОбщиеПараметры.ОперацияБанковскогоСубагента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("BankSubagentOperation" , XMLСтрока(ОбщиеПараметры.ОперацияБанковскогоСубагента));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("ВознагражденияБанковскогоАгента") И ОбщиеПараметры.ВознагражденияБанковскогоАгента <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("BankAgentCompensation" , XMLСтрока(ОбщиеПараметры.ВознагражденияБанковскогоАгента));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Табличная часть
	Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
		Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
			ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
			Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
					ЗаписьXML.ЗаписатьАтрибут("Name"      , XMLСтрока(ТекущаяПозиция.Наименование));
					ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
					ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
					ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
					//ЗаписьXML.ЗаписатьАтрибут("Tax"       , XMLСтрока(ТекущаяПозиция.СтавкаНДС));
					Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
						ЗаписьXML.ЗаписатьАтрибут("Tax"   , XMLСтрока(ТекущаяПозиция.СтавкаНДС));
					Иначе
						ЗаписьXML.ЗаписатьАтрибут("Tax"   , "none");
					КонецЕсли;
					ЗаписьXML.ЗаписатьКонецЭлемента();
					СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
				ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
					ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ТекущаяПозиция.Текст));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				Иначе
					ТекстОшибки = НСтр("ru='Не определен тип позиции чека.'"); 
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
					Результат = Ложь;  
					Возврат Результат;
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	// Таблица оплат
	Если ТаблицаОплат <> Неопределено Тогда
		СуммаНаличнойОплаты     = 0;
		СуммаЭлектроннойОплаты1 = 0;
		СуммаЭлектроннойОплаты2 = 0;
		СуммаЭлектроннойОплаты3 = 0;
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = 0 Тогда
				СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = 1 Тогда
				СуммаЭлектроннойОплаты1 = СуммаЭлектроннойОплаты1 + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = 2 Тогда
				СуммаЭлектроннойОплаты2 = СуммаЭлектроннойОплаты2 + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаЭлектроннойОплаты3 = СуммаЭлектроннойОплаты3 + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммаНаличнойОплаты));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType1", XMLСтрока(СуммаЭлектроннойОплаты1));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType2", XMLСтрока(СуммаЭлектроннойОплаты2));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType3", XMLСтрока(СуммаЭлектроннойОплаты3));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

Функция ПолучитьXMLПакетДляТекстовогоДокумента(СтрокаТекста) Экспорт
	
	Результат = Новый Массив();
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
	                              
	Если НЕ ПустаяСтрока(СтрокаТекста) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
		
		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
			
			ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
			
			Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
				 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
				 
				// Завершаем запись текущего пакета. 
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				Текст = ЗаписьXML.Закрыть();
				Результат.Добавить(Текст);
				
				// Новый пакет.
				ЗаписьXML = Новый ЗаписьXML();
				ЗаписьXML.УстановитьСтроку("UTF-8");
				ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
				ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
				
			ИначеЕсли (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
				ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
				ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
	 			ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ВремТипШтрихкода));
				ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ВремШтрихКод));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
				ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Текст = ЗаписьXML.Закрыть();
	
	Результат.Добавить(Текст);
	
	Возврат Результат;

КонецФункции   

Функция ПолучитьПараметрыСостоянияИзXMLПакета(Данные) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыСостоянияККТ();
	
	Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.КоличествоНепереданныхФД    = Число(ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter"));
			Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
			Параметры.ДатаПервогоНепереданногоФД  = XMLЗначение(Тип("Дата"), ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция СформироватьТаблицуПараметровДляОперацииФН(СтруктураПараметров) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ЗаписьXML.ЗаписатьАтрибут("KKTNumber"          , XMLСтрока(СтруктураПараметров.РегистрационныйНомерККТ));
	ЗаписьXML.ЗаписатьАтрибут("OFDVATIN"           , XMLСтрока(СтруктураПараметров.ОрганизацияОФДИНН));
	ЗаписьXML.ЗаписатьАтрибут("OFDOrganizationName", XMLСтрока(СтруктураПараметров.ОрганизацияОФДНазвание));
	ЗаписьXML.ЗаписатьАтрибут("OrganizationName"   , XMLСтрока(СтруктураПараметров.ОрганизацияНазвание));
	ЗаписьXML.ЗаписатьАтрибут("VATIN"              , XMLСтрока(СтруктураПараметров.ОрганизацияИНН));
	ЗаписьXML.ЗаписатьАтрибут("AddressSettle"      , XMLСтрока(СтруктураПараметров.АдресУстановкиККТ));
	ЗаписьXML.ЗаписатьАтрибут("TaxVariant"         , XMLСтрока(СтруктураПараметров.КодыСистемыНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("TaxVarinat"         , XMLСтрока(СтруктураПараметров.КодыСистемыНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("OfflineMode"        , XMLСтрока(СтруктураПараметров.ПризнакАвтономногоРежима));
	ЗаписьXML.ЗаписатьАтрибут("DataEncryption"     , XMLСтрока(СтруктураПараметров.ПризнакШифрованиеДанных));
	ЗаписьXML.ЗаписатьАтрибут("ServiceSign"        , XMLСтрока(СтруктураПараметров.ПризнакРасчетовЗаУслуги));
	ЗаписьXML.ЗаписатьАтрибут("BSOSing"            , XMLСтрока(СтруктураПараметров.ПризнакФормированияТолькоБСО));
	ЗаписьXML.ЗаписатьАтрибут("CalcOnlineSign"     , XMLСтрока(СтруктураПараметров.ПризнакРасчетовТолькоВИнтернет));
	ЗаписьXML.ЗаписатьАтрибут("AutomaticMode"      , XMLСтрока(СтруктураПараметров.ПризнакАвтоматическогоРежима));
	ЗаписьXML.ЗаписатьАтрибут("AutomaticNumber"    , XMLСтрока(СтруктураПараметров.НомерАвтоматаДляАвтоматическогоРежима));
	ЗаписьXML.ЗаписатьАтрибут("ReasonCode"         , XMLСтрока(СтруктураПараметров.КодПричиныПеререгистрации));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

//Процедура ЗаполнитьТоварныеПозицииВПараметрахЧека(Ссылка, ОбщиеПараметры, ЭтоОплатаПокупателя, ПринятоОт, Основание, Параметры,Организация,Приход=Истина) Экспорт
Процедура ЗаполнитьТоварныеПозицииВПараметрахЧека(Ссылка, ОбщиеПараметры, РасчетыСПокупателем, ЭтоВозврат, КомуОтКого, Основание,Параметры) Экспорт
	
	Если ЭтоВозврат Тогда
		Заголовок = "Выдать: ";
	Иначе
		Заголовок = "Принято от: ";
	КонецЕсли;

	Если Не РасчетыСПокупателем Тогда
		Для Каждого СтрокаПлатежа Из Ссылка.РасшифровкаПлатежа Цикл
			СтрокаЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
			
			// Обязательные поля
			СтрокаЧека.Наименование = Заголовок + КомуОтКого + " Основание: " + Основание; // Наименованование предмета расчета
			СтрокаЧека.Количество = 1; // Количество предмета расчета 
			СтрокаЧека.Цена = СтрокаПлатежа.СуммаПлатежа; // Цена без учета скидок и наценок
			СтрокаЧека.Сумма = СтрокаПлатежа.СуммаПлатежа; // Cтоимость предмета расчета с учетом скидок и наценок
			СтрокаЧека.СтавкаНДС = МенеджерОборудованияКлиентСервер.ПолучитьСтавкуНДСДляФискализацииЧека(СтрокаПлатежа.СтавкаНДС,Ссылка.Организация); // Cтавка НДС в %
			// Дополнительные реквизиты начиная с ФФД 1.1
			СтрокаЧека.КодПризнакаСпособаРасчета = 4;  // Код признака способа расчета (Таблица 25 документа ФФД)
			СтрокаЧека.КодПризнакаПредметаРасчета = 12; // Код признака предмета расчета (Таблица 25 документа ФФД)
			
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
		КонецЦикла;
		Возврат;
	КонецЕсли;

	// Заполнение для вида операции "ОплатаПокупателя"
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеЧека(Ссылка.Метаданные().Имя);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	Результат = Запрос.ВыполнитьПакет();
	ДеревоСделок = Результат[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

	СписокТоваров = Параметры.СписокТоваров;
	
	КурсОплаты = 1;
	
	
	
	Для Каждого СтрокаСделки Из ДеревоСделок.Строки Цикл
		Для Каждого СтрокаСтавки Из СтрокаСделки.Строки Цикл
			Если СтрокаСтавки.ВалютаСделки = ВалютаРеглУчета Тогда
				КурсОплаты = 1;
				ИмяРеквизитаДляСравнения = "СуммаПлатежа";
			Иначе
				КурсОплаты = Окр(СтрокаСтавки.СуммаПлатежа / СтрокаСтавки.СуммаВзаиморасчетов, 8);
				ИмяРеквизитаДляСравнения = "СуммаВзаиморасчетов";
			КонецЕсли;
			
			НайденнаяСтрока = Ссылка.РасшифровкаПлатежа.Найти(СтрокаСтавки.Сделка,"Сделка");
			Если НайденнаяСтрока.СуммаПлатежа = СтрокаСтавки[ИмяРеквизитаДляСравнения] Тогда
			//Если СтрокаСтавки.Сумма = СтрокаСтавки[ИмяРеквизитаДляСравнения] Тогда
				// детальная печать
				СуммаПлатежаПоСтавке = 0;
				ИндексСтрокиСоСкидкой = Неопределено;
				ИндексПервойСтроки = ОбщиеПараметры.ПозицииЧека.Количество();
				Для Каждого СтрокаПозиции Из СтрокаСтавки.Строки Цикл
					СтрокаЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
					
					ЗаполнитьСтрокуЧека(ОбщиеПараметры, СтрокаЧека, СтрокаПозиции, КурсОплаты, ИндексСтрокиСоСкидкой, СуммаПлатежаПоСтавке,Ссылка.Организация);

					ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
				КонецЦикла;
				
				СуммаПревышенияПоСтавке = СуммаПлатежаПоСтавке - СтрокаСтавки.СуммаПлатежа;
				Если СуммаПревышенияПоСтавке <> 0 Тогда
					ИсправитьОшибкуОкругления(ОбщиеПараметры, СуммаПревышенияПоСтавке, ИндексПервойСтроки, ИндексСтрокиСоСкидкой);
				КонецЕсли;
				
			Иначе
				// обобщенная печать
				СтрокаЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
				
				СтрокаЧека.Наименование = Заголовок + КомуОтКого + " Основание: " + Основание; // Наименование предмета расчета
				СтрокаЧека.Количество = 1; // Количество предмета расчета 
				СтрокаЧека.Цена = НайденнаяСтрока.СуммаПлатежа;//СтрокаСтавки.СуммаПлатежа; // Цена без учета скидок и наценок
				СтрокаЧека.Сумма = НайденнаяСтрока.СуммаПлатежа;//СтрокаСтавки.СуммаПлатежа; // Cтоимость предмета расчета с учетом скидок и наценок
				СтрокаЧека.СтавкаНДС = МенеджерОборудованияКлиентСервер.ПолучитьСтавкуНДСДляФискализацииЧека(СтрокаСтавки.СтавкаНДС,Ссылка.Организация); // Cтавка НДС в %
				Если СтрокаЧека.СтавкаНДС = Неопределено Тогда
					СтрокаЧека.СтавкаНДС = 0;
				КонецЕсли;
				// Дополнительные реквизиты начиная с ФФД 1.1
				СтрокаЧека.КодПризнакаСпособаРасчета = 4;  
				СтрокаЧека.КодПризнакаПредметаРасчета = 12; 
				
				ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ТекстЗапросаДанныеЧека(ВидДокумента)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПлатежныйДокументРасшифровкаПлатежа.Ссылка КАК Ссылка,
	               |	ПлатежныйДокументРасшифровкаПлатежа.Сделка КАК Сделка,
	               |	ПлатежныйДокументРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	               |	СУММА(ПлатежныйДокументРасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа,
	               |	СУММА(ПлатежныйДокументРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	               |	СУММА(ПлатежныйДокументРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	               |	ВЫБОР
	               |		КОГДА ПлатежныйДокументРасшифровкаПлатежа.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)   //+++28.12.2018
	               |			ТОГДА 20
				   |		КОГДА ПлатежныйДокументРасшифровкаПлатежа.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |			ТОГДА 18
	               |		КОГДА ПлатежныйДокументРасшифровкаПлатежа.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |			ТОГДА 10
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПроцентНДС
	               |ПОМЕСТИТЬ ТаблицаПлатежей
	               |ИЗ
	               |	Документ."+ВидДокумента+".РасшифровкаПлатежа КАК ПлатежныйДокументРасшифровкаПлатежа
	               |ГДЕ
	               |	ПлатежныйДокументРасшифровкаПлатежа.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПлатежныйДокументРасшифровкаПлатежа.Ссылка,
	               |	ПлатежныйДокументРасшифровкаПлатежа.СтавкаНДС,
	               |	ПлатежныйДокументРасшифровкаПлатежа.Сделка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПлатежей.Сделка,
	               |	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	               |	ТаблицаНоменклатуры.Номенклатура.Услуга КАК Услуга,
	               |	ТаблицаНоменклатуры.Количество КАК Количество,
	               |	ТаблицаНоменклатуры.Цена КАК Цена,
	               |	ТаблицаНоменклатуры.Сумма КАК Сумма,
	               |	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	               |	ТаблицаНоменклатуры.Ссылка.ВалютаДокумента КАК ВалютаСделки,
	               |	ТаблицаНоменклатуры.СуммаНДС КАК СуммаНДС,
	               |	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ТаблицаНоменклатуры.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ТаблицаНоменклатуры.Сумма КАК СуммаПлатежа,
	               |	ТаблицаНоменклатуры.Сумма КАК СуммаВзаиморасчетов,
	               |	ТаблицаНоменклатуры.ХарактеристикаНоменклатуры КАК Характеристика,
	               |	ТаблицаНоменклатуры.СерияНоменклатуры КАК Серия,
	               |	"""""""" КАК Содержание,
	               |	ВЫБОР
	               |		КОГДА ТаблицаНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) // +++ 28.12.2018
	               |			ТОГДА 20
				   |		КОГДА ТаблицаНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |			ТОГДА 18
	               |		КОГДА ТаблицаНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |			ТОГДА 10
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПроцентНДС
	               |ПОМЕСТИТЬ НоменклатураСделок
	               |ИЗ
	               |	ТаблицаПлатежей КАК ТаблицаПлатежей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаНоменклатуры
	               |		ПО ТаблицаПлатежей.Сделка = ТаблицаНоменклатуры.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаПлатежей.Сделка,
	               |	ТаблицаНоменклатуры.Номенклатура,
	               |	ТаблицаНоменклатуры.Номенклатура.Услуга,
	               |	ТаблицаНоменклатуры.Количество,
	               |	ТаблицаНоменклатуры.Цена,
	               |	ТаблицаНоменклатуры.Сумма,
	               |	ТаблицаНоменклатуры.СтавкаНДС,
	               |	ТаблицаНоменклатуры.Ссылка.ВалютаДокумента,
	               |	ТаблицаНоменклатуры.СуммаНДС,
	               |	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка),
	               |	ТаблицаНоменклатуры.Ссылка.СуммаВключаетНДС,
	               |	ТаблицаНоменклатуры.Сумма,
	               |	ТаблицаНоменклатуры.Сумма,
	               |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	               |	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	               |	ТаблицаНоменклатуры.Содержание,
	               |	ВЫБОР
				   |		КОГДА ТаблицаНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) // +++ 28.12.2018
	               |			ТОГДА 20
				   |		КОГДА ТаблицаНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |			ТОГДА 18
	               |		КОГДА ТаблицаНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |			ТОГДА 10
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |ИЗ
	               |	ТаблицаПлатежей КАК ТаблицаПлатежей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаНоменклатуры
	               |		ПО ТаблицаПлатежей.Сделка = ТаблицаНоменклатуры.Ссылка
	               |
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаПлатежей.Сделка,
	               |	ТаблицаНоменклатуры.Номенклатура,
	               |	ТаблицаНоменклатуры.Номенклатура.Услуга,
	               |	ТаблицаНоменклатуры.Количество,
	               |	ТаблицаНоменклатуры.Цена,
	               |	ТаблицаНоменклатуры.Сумма,
	               |	ТаблицаНоменклатуры.СтавкаНДС,
	               |	ТаблицаНоменклатуры.Ссылка.ВалютаДокумента,
	               |	ТаблицаНоменклатуры.СуммаНДС,
	               |	ТаблицаНоменклатуры.ЕдиницаИзмерения,
	               |	ТаблицаНоменклатуры.Ссылка.СуммаВключаетНДС,
	               |	ТаблицаНоменклатуры.Сумма,
	               |	ТаблицаНоменклатуры.Сумма,
	               |	ТаблицаНоменклатуры.ХарактеристикаНоменклатуры,
	               |	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	               |	"""""""",
	               |	ВЫБОР
				   |		КОГДА ТаблицаНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)  //+++28.12.2018
				   |			ТОГДА 20
	               |		КОГДА ТаблицаНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |			ТОГДА 18
	               |		КОГДА ТаблицаНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |			ТОГДА 10
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |ИЗ
	               |	ТаблицаПлатежей КАК ТаблицаПлатежей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ТаблицаНоменклатуры
	               |		ПО ТаблицаПлатежей.Сделка = ТаблицаНоменклатуры.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаПлатежей.Сделка,
	               |	ТаблицаНоменклатуры.Номенклатура,
	               |	ТаблицаНоменклатуры.Номенклатура.Услуга,
	               |	ТаблицаНоменклатуры.Количество,
	               |	ТаблицаНоменклатуры.Цена,
	               |	ТаблицаНоменклатуры.Сумма,
	               |	ТаблицаНоменклатуры.СтавкаНДС,
	               |	ТаблицаНоменклатуры.Ссылка.ВалютаДокумента,
	               |	ТаблицаНоменклатуры.СуммаНДС,
	               |	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка),
	               |	ТаблицаНоменклатуры.Ссылка.СуммаВключаетНДС,
	               |	ТаблицаНоменклатуры.Сумма,
	               |	ТаблицаНоменклатуры.Сумма,
	               |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	               |	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	               |	ТаблицаНоменклатуры.Содержание,
	               |	ВЫБОР
	               |		КОГДА ТаблицаНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)   //+++28.12.2018
	               |			ТОГДА 20
				   |		КОГДА ТаблицаНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |			ТОГДА 18
	               |		КОГДА ТаблицаНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |			ТОГДА 10
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |ИЗ
	               |	ТаблицаПлатежей КАК ТаблицаПлатежей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Услуги КАК ТаблицаНоменклатуры
	               |		ПО ТаблицаПлатежей.Сделка = ТаблицаНоменклатуры.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПлатежей.Сделка КАК Сделка,
	               |	ЕСТЬNULL(НоменклатураСделок.СтавкаНДС, ТаблицаПлатежей.СтавкаНДС) КАК СтавкаНДС,
	               |	ЕСТЬNULL(НоменклатураСделок.ВалютаСделки, &ВалютаРеглУчета) КАК ВалютаСделки,
	               |	НоменклатураСделок.Номенклатура КАК Номенклатура,
	               |	НоменклатураСделок.Услуга КАК Услуга,
	               |	НоменклатураСделок.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	НоменклатураСделок.Характеристика КАК Характеристика,
	               |	НоменклатураСделок.Серия КАК Серия,
	               |	ВЫБОР
	               |		КОГДА НоменклатураСделок.Количество = 0
	               |				И ЕСТЬNULL(НоменклатураСделок.Номенклатура.Услуга, ИСТИНА)
	               |			ТОГДА 1
	               |		ИНАЧЕ НоменклатураСделок.Количество
	               |	КОНЕЦ КАК Количество,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |			КОГДА НоменклатураСделок.СуммаВключаетНДС
	               |				ТОГДА НоменклатураСделок.Цена
	               |			ИНАЧЕ НоменклатураСделок.Цена + НоменклатураСделок.Цена * НоменклатураСделок.ПроцентНДС / 100
	               |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	               |	ВЫБОР
	               |		КОГДА НоменклатураСделок.СуммаВключаетНДС
	               |			ТОГДА НоменклатураСделок.Сумма
	               |		ИНАЧЕ НоменклатураСделок.Сумма + НоменклатураСделок.СуммаНДС
	               |	КОНЕЦ КАК Сумма,
	               |	ЕСТЬNULL(НоменклатураСделок.СуммаНДС, ТаблицаПлатежей.СуммаНДС) КАК СуммаНДС,
	               |	ЕСТЬNULL(НоменклатураСделок.Сумма, ТаблицаПлатежей.СуммаПлатежа) КАК СуммаПлатежа,
	               |	ЕСТЬNULL(НоменклатураСделок.СуммаВзаиморасчетов, ТаблицаПлатежей.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	               |	ВЫБОР
	               |		КОГДА НЕ НоменклатураСделок.Содержание ПОДОБНО """"""""
	               |			ТОГДА ВЫРАЗИТЬ(НоменклатураСделок.Содержание КАК СТРОКА(1000))
	               |		КОГДА НЕ НоменклатураСделок.Номенклатура.НаименованиеПолное ПОДОБНО """"""""
	               |			ТОГДА ВЫРАЗИТЬ(НоменклатураСделок.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	               |		ИНАЧЕ НоменклатураСделок.Номенклатура.Наименование
	               |	КОНЕЦ КАК Наименование
	               |ИЗ
	               |	ТаблицаПлатежей КАК ТаблицаПлатежей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураСделок КАК НоменклатураСделок
	               |		ПО ТаблицаПлатежей.Сделка = НоменклатураСделок.Сделка
	               |ИТОГИ
	               |	МАКСИМУМ(ВалютаСделки),
	               |	СУММА(Сумма),
	               |	СУММА(СуммаНДС),
	               |	СУММА(СуммаПлатежа),
	               |	СУММА(СуммаВзаиморасчетов)
	               |ПО
	               |	Сделка,
	               |	СтавкаНДС";
				   
    Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьЧастьЗапросаДляВыбораСодержания(Знач ИмяТаблицыВыбора, Знач ИтоговыйАлиасПоля = "") Экспорт
	
	СтрокаИмениТаблицыВыборки = "";
	Если Не ПустаяСтрока(ИмяТаблицыВыбора) Тогда
		
		СтрокаИмениТаблицыВыборки = ИмяТаблицыВыбора + ".";
		
	КонецЕсли;
	
	ЧастьВыборки = "	Выбор 
	|		Когда НЕ (" + СтрокаИмениТаблицыВыборки + "Содержание Подобно """") Тогда
	|			ВЫРАЗИТЬ(" + СтрокаИмениТаблицыВыборки + "Содержание КАК Строка (1000))
	|		Когда НЕ (" + СтрокаИмениТаблицыВыборки + "Номенклатура.НаименованиеПолное Подобно """") Тогда
	|			ВЫРАЗИТЬ(" + СтрокаИмениТаблицыВыборки + "Номенклатура.НаименованиеПолное КАК Строка (1000))
	|		Иначе
	|			" + СтрокаИмениТаблицыВыборки + "Номенклатура.Наименование
	|	Конец";
	
	Если Не ПустаяСтрока(ИтоговыйАлиасПоля) Тогда
		
		ЧастьВыборки = ЧастьВыборки + " КАК " + ИтоговыйАлиасПоля;	
		
	КонецЕсли;
	
	Возврат ЧастьВыборки; 
	
КонецФункции

Процедура ЗаполнитьСтрокуЧека(ОбщиеПараметры, СтрокаЧека, СтрокаПозиции, КурсОплаты, ИндексСтрокиСоСкидкой, СуммаПлатежаПоСтавке,Организация)
	
	СтрокаЧека.Количество = СтрокаПозиции.Количество;
	СтрокаЧека.Цена = Окр(СтрокаПозиции.Цена * КурсОплаты, 2);
	СтрокаЧека.Сумма = Окр(СтрокаПозиции.Сумма * КурсОплаты, 2);
	
	Если СтрокаЧека.Количество * СтрокаЧека.Цена <> СтрокаЧека.Сумма Тогда
		Если СтрокаПозиции.Количество * СтрокаПозиции.Цена <> СтрокаПозиции.Сумма Тогда
			// реальная скидка
			ИндексСтрокиСоСкидкой = ОбщиеПараметры.ПозицииЧека.Количество();
		Иначе
			// ошибка округления
			СтрокаЧека.Сумма = СтрокаЧека.Количество * СтрокаЧека.Цена;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаЧека.Наименование = СокрЛП(СтрокаПозиции.Наименование) + 
		?(ЗначениеЗаполнено(СтрокаПозиции.ЕдиницаИзмерения)," "+Строка(СтрокаПозиции.ЕдиницаИзмерения),"");
	СтрокаЧека.СтавкаНДС = МенеджерОборудованияКлиентСервер.ПолучитьСтавкуНДСДляФискализацииЧека(СтрокаПозиции.СтавкаНДС,организация);
	// Дополнительные реквизиты начиная с ФФД 1.1
	СтрокаЧека.КодПризнакаСпособаРасчета = 4;  
	СтрокаЧека.КодПризнакаПредметаРасчета = ?(СтрокаПозиции.Услуга,4,1); 
	
	СуммаПлатежаПоСтавке = СуммаПлатежаПоСтавке + СтрокаЧека.Сумма;

КонецПроцедуры

Процедура ИсправитьОшибкуОкругления(ОбщиеПараметры, СуммаПревышенияПоСтавке, ИндексПервойСтроки, ИндексСтрокиСоСкидкой)
	
	Если ИндексСтрокиСоСкидкой <> Неопределено Тогда
		ОбщиеПараметры.ПозицииЧека[ИндексСтрокиСоСкидкой].Сумма = 
			ОбщиеПараметры.ПозицииЧека[ИндексСтрокиСоСкидкой].Сумма - СуммаПревышенияПоСтавке;
	Иначе
		// строк со скидками нет
		ОшибкаИсправлена = Ложь;
		ИндексПоследнейСтроки = ОбщиеПараметры.ПозицииЧека.Количество() - 1;
		Для Сч = ИндексПервойСтроки По ИндексПоследнейСтроки Цикл
			ПозицияЧека = ОбщиеПараметры.ПозицииЧека[Сч];
			НоваяСумма = ПозицияЧека.Сумма - СуммаПревышенияПоСтавке;
			НоваяЦена = Окр(НоваяСумма / ПозицияЧека.Количество, 2);
			Если ПозицияЧека.Количество * НоваяЦена = НоваяСумма Тогда
				ОбщиеПараметры.ПозицииЧека[Сч].Сумма = НоваяСумма;
				ОбщиеПараметры.ПозицииЧека[Сч].Цена = НоваяЦена;
				ОшибкаИсправлена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ОшибкаИсправлена Тогда
			ОбщиеПараметры.ПозицииЧека[ИндексПоследнейСтроки].Сумма = 
				ОбщиеПараметры.ПозицииЧека[ИндексПоследнейСтроки].Сумма - СуммаПревышенияПоСтавке;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ТекстаЗапросаТЧпоВидуДокументов(ИмяДокумента, ИмяТЧ, ИмяВТ = "")
	
	// Рассматриваем только два варианта: "Товары" и "Услуги"
	Если ИмяТЧ = "Товары" Тогда
		ПолеЕдиницаИзмерения = "ТаблицаНоменклатуры.ЕдиницаИзмерения";
		ПолеХарактеристика = "ТаблицаНоменклатуры.ХарактеристикаНоменклатуры";
		Если Метаданные.Документы[ИмяДокумента].ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти("СерияНоменклатуры") <> Неопределено Тогда
			ПолеСерия = "ТаблицаНоменклатуры.СерияНоменклатуры";
		Иначе
			ПолеСерия = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		КонецЕсли;
		ПолеСодержание = """""";
	Иначе
		ПолеЕдиницаИзмерения = "ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)";
		ПолеХарактеристика = "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
		ПолеСерия = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		ПолеСодержание = "ТаблицаНоменклатуры.Содержание";
	КонецЕсли;
	Если Не ПустаяСтрока(ИмяВТ) Тогда
		ТекстВТ = Символы.ПС + " ПОМЕСТИТЬ " + ИмяВТ;
		ТекстОбъединения = "";
	Иначе
		ТекстВТ = "";
		ТекстОбъединения = "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |";
		
	КонецЕсли;
	ТекстЗапроса = ТекстОбъединения + "
	               |ВЫБРАТЬ
	               |	ТаблицаПлатежей.Сделка,
	               |	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
				   |	ТаблицаНоменклатуры.Номенклатура.Услуга КАК Услуга,
	               |	ТаблицаНоменклатуры.Количество КАК Количество,
	               |	ТаблицаНоменклатуры.Цена КАК Цена,
	               |	ТаблицаНоменклатуры.Сумма КАК Сумма,
	               |	ТаблицаПлатежей.СтавкаНДС КАК СтавкаНДС,
				   |	ТаблицаНоменклатуры.Ссылка.ВалютаДокумента КАК ВалютаСделки,
	               |	ТаблицаНоменклатуры.СуммаНДС КАК СуммаНДС,
	               |	"+ПолеЕдиницаИзмерения+" КАК ЕдиницаИзмерения,
	               |	ТаблицаНоменклатуры.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ТаблицаПлатежей.СуммаПлатежа КАК СуммаПлатежа,
	               |	ТаблицаПлатежей.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	               |	"+ПолеХарактеристика+" КАК Характеристика,
	               |	"+ПолеСерия+" КАК Серия,
	               |	"+ПолеСодержание+" КАК Содержание,
	               |	ТаблицаПлатежей.ПроцентНДС КАК ПроцентНДС"+
				   ТекстВТ+"
	               |ИЗ
	               |	ТаблицаПлатежей КАК ТаблицаПлатежей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ."+ИмяДокумента+"."+ИмяТЧ+" КАК ТаблицаНоменклатуры
	               |		ПО ТаблицаПлатежей.Сделка = ТаблицаНоменклатуры.Ссылка
	               |			И ТаблицаПлатежей.СтавкаНДС = ТаблицаНоменклатуры.СтавкаНДС
				   |";
				   
	Возврат ТекстЗапроса;

КонецФункции


