
// Процедура проверяет возможность запуска ИБ с определенными для текущего
// пользователя доступными ролями
//
Процедура ПроверитьВозможностьРаботыПользователя(Отказ) Экспорт

	Если НЕ ЕстьДоступныеПраваДляЗапускаКонфигурации() Тогда
		Отказ = Истина;
		#Если Клиент Тогда
		Предупреждение("У текущего пользователя нет доступных ролей, для запуска информационной базы.", 10, "Недостаточно прав доступа");
		#КонецЕсли
	КонецЕсли; 
	
КонецПроцедуры

// Функция возвращает список с наборами прав, доступными пользователю.
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Список значений с доступными ролями пользователя
//
Функция ПолучитьСписокНабораПрав(Пользователь = Неопределено) Экспорт

	НаборДоступныхРолейПользователя = Новый СписокЗначений;
	
	МетаданныеНабораПрав = Метаданные.Перечисления.НаборПравПользователей.ЗначенияПеречисления;
	КоличествоНаборовПрав = Перечисления.НаборПравПользователей.Количество();
	
	Если Пользователь = Неопределено Тогда   //***2014.08.24 вынесено в отдельное условие, т.к. при работе web-сервиса пользователь=неопределено
		Для а = 0 По КоличествоНаборовПрав-1 Цикл
			Роль = МетаданныеНабораПрав[а].Имя;
			Если РольДоступна(Роль) ИЛИ РольДоступна(Роль + "СОграничениемПравДоступа") Тогда
				НаборДоступныхРолейПользователя.Добавить(Перечисления.НаборПравПользователей[а]);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Пользователь = ПараметрыСеанса.ТекущийПользователь
		//ИЛИ Пользователь = Неопределено   ***так было
		Тогда // Текущий пользователь
		Для а = 0 По КоличествоНаборовПрав-1 Цикл
			Роль = МетаданныеНабораПрав[а].Имя;
			Если РольДоступна(Роль) ИЛИ РольДоступна(Роль + "СОграничениемПравДоступа") Тогда
				НаборДоступныхРолейПользователя.Добавить(Перечисления.НаборПравПользователей[а]);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПравоДоступа("Администрирование", Метаданные) Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(Пользователь.Код));
		Если ПользовательИБ <> Неопределено Тогда
			Для а = 0 По КоличествоНаборовПрав-1 Цикл
				ИмяПеречисления = МетаданныеНабораПрав[а].Имя;
				Роль = Метаданные.Роли[ИмяПеречисления];
				РольСОграничениемПрав = Метаданные.Роли.Найти(ИмяПеречисления + "СОграничениемПравДоступа");
				Если ПользовательИБ.Роли.Содержит(Роль) Тогда
					НаборДоступныхРолейПользователя.Добавить(Перечисления.НаборПравПользователей[а]);
				ИначеЕсли РольСОграничениемПрав <> Неопределено И ПользовательИБ.Роли.Содержит(РольСОграничениемПрав) Тогда
					НаборДоступныхРолейПользователя.Добавить(Перечисления.НаборПравПользователей[а]);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 

	Возврат НаборДоступныхРолейПользователя;

КонецФункции // ПолучитьСписокНабораПрав()

// Функция возвращает список значений права, установленных для пользователя.
// Если количество значений меньше количество доступных ролей, то возвращается значение по умолчанию
//
// Параметры:
//  Право               - право, для которого определяются значения
//  ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        отсутствия значений в регистре сведений)
//
// Возвращаемое значение:
//  Список всех значений, установленных наборам прав (ролям), доступных пользователю
//
Функция ПолучитьЗначениеПраваПользователя(Право, ЗначениеПоУмолчанию = Неопределено, Пользователь = Неопределено) Экспорт

	ВозвращаемыеЗначения = Новый СписокЗначений;
	СписокНабораПрав = ПолучитьСписокНабораПрав(Пользователь);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НаборПрав"        , СписокНабораПрав);
	Запрос.УстановитьПараметр("ПравоПользователя", Право);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.ЗначенияПравПользователя КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Право = &ПравоПользователя
	| И НаборПрав В(&НаборПрав)
	|
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() < СписокНабораПрав.Количество() Тогда
		ВозвращаемыеЗначения.Добавить(ЗначениеПоУмолчанию);
	КонецЕсли;

	Пока Выборка.Следующий() Цикл
		Если ВозвращаемыеЗначения.НайтиПоЗначению(Выборка.Значение) = Неопределено Тогда
			ВозвращаемыеЗначения.Добавить(Выборка.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат ВозвращаемыеЗначения;

КонецФункции // ПолучитьЗначениеПраваПользователя()

// Функция возвращает право печатать непроведенные документы.
//
// Параметры:
//  Проведен     - признак проведен ли документ (если документ не проводной,
//                 то либо параметр опускается, либо равен Истина)
//
// Возвращаемое значение:
//  Истина - если можно печатать, иначе Ложь.
//
Функция РазрешитьПечатьНепроведенныхДокументов(Проведен = Истина) Экспорт

	Если Проведен Тогда
		Возврат Истина;
	КонецЕсли;

	РазрешеноПечатать = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПечатьНепроведенныхДокументов, Истина);
	Если (РазрешеноПечатать.Количество() = 0)
	 ИЛИ (РазрешеноПечатать.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноПечатать[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьПечатьНепроведенныхДокументов()

// Функция возвращает право проводить документы в рознице с нулевой ценой
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Истина - если можно проводить документы в рознице с нулевой ценой
//
Функция РазрешитьНулевыеЦеныВРознице() Экспорт

	РазрешеноПроводить = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНулевыеЦеныВРознице, Ложь);
	Если (РазрешеноПроводить.Количество() = 0)
	 ИЛИ (РазрешеноПроводить.Количество() > 1) Тогда
		Возврат Ложь;
	Иначе
		Возврат РазрешеноПроводить[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьНулевыеЦеныВРознице()

// Функция возвращает право закрывать смену в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно закрывать смену в рознице.
//
Функция РазрешитьЗакрытиеСмены(Пользователь = Неопределено) Экспорт

	РазрешеноЗакрытиеСмены = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗакрытиеСмены, Ложь, Пользователь);
	Если (РазрешеноЗакрытиеСмены.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешеноЗакрытиеСмены.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноЗакрытиеСмены[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьЗакрытиеСмены()

// Функция возвращает право аннулировать чеки в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно аннулировать чеки в рознице.
//
Функция РазрешитьАннулированиеЧека(Пользователь = Неопределено) Экспорт

	РазрешеноАннулировать = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьАннулированиеЧека, Ложь, Пользователь);
	Если (РазрешеноАннулировать.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешеноАннулировать.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноАннулировать[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьАннулированиеЧека()

// Функция возвращает право получать отчет о смене без гашения в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно получать отчет о смене без гашения в рознице.
//
Функция РазрешитьОтчетОСменеБезГашения(Пользователь = Неопределено) Экспорт

	РазрешеноПолучениеОтчетаОСменеБезГашения = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтчетОСменеБезГашения, Ложь, Пользователь);
	Если (РазрешеноПолучениеОтчетаОСменеБезГашения.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешеноПолучениеОтчетаОСменеБезГашения.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноПолучениеОтчетаОСменеБезГашения[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьОтчетОСменеБезГашения()

// Функция возвращает право создания чека возврата в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно создавать чек возврата в рознице.
//
Функция РазрешитьЧекВозврата(Пользователь = Неопределено) Экспорт

	РазрешенЧекВозврата = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЧекВозврата, Ложь, Пользователь);
	Если (РазрешенЧекВозврата.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешенЧекВозврата.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешенЧекВозврата[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьЧекВозврата()

// Функция возвращает право назначения ручных скидок в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно создавать чек возврата в рознице.
//
Функция РазрешитьНазначениеРучныхСкидок(Пользователь = Неопределено) Экспорт

	РазрешеноНазначениеРучныхСкидок = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНазначениеРучныхСкидок, Ложь, Пользователь);
	Если (РазрешеноНазначениеРучныхСкидок.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешеноНазначениеРучныхСкидок.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноНазначениеРучныхСкидок[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьНазначениеРучныхСкидок()

// Функция возвращает право проводить документы "Реализация товаров" с нулевой ценой
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Истина - если можно проводить документ "Реализация товаров" с нулевой ценой
//
Функция РазрешитьНулевыеЦеныВОпте() Экспорт

	РазрешеноПроводить = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНулевыеЦеныВОпте, Ложь);
	Если (РазрешеноПроводить.Количество() = 0)
	 ИЛИ (РазрешеноПроводить.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноПроводить[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьНулевыеЦеныВОпте()

// Функция возвращает признак защищать таблицу от редактирования или нет.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если таблицу необходимо защитить от редактирования, иначе Ложь.
//
Функция ЗащитаТаблиц() Экспорт

	РазрешеноРедактирование = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеТаблиц, Истина);

	Если (РазрешеноРедактирование.Количество() = 0)
	 ИЛИ (РазрешеноРедактирование.Количество() > 1) Тогда
		Возврат Ложь;
	Иначе
		Возврат НЕ РазрешеноРедактирование[0].Значение;
	КонецЕсли;

КонецФункции // ЗащитаТаблиц()

// Функция возвращает признак можно ли пользователю изменять цены в расходных накладных или нет.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если можно менять цены, иначе Ложь.
//
Функция РазрешитьРедактированиеЦенВДокументах() Экспорт

	СписокФильтров = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеЦенВДокументах, Истина);

	Если (СписокФильтров.Количество() = 0)
	 ИЛИ (СписокФильтров.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат СписокФильтров[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьРедактированиеЦенВДокументах()

// Функция возвращает нужно ли рассчитывать долг при открытии форм.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если нужно рассчитывать, иначе Ложь.
//
Функция РассчитыватьДолгПриОткрытииФорм() Экспорт

	СписокФильтров = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РассчитыватьДолгПриОткрытииФорм, Истина);

	Если (СписокФильтров.Количество() = 0)
	 ИЛИ (СписокФильтров.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат СписокФильтров[0].Значение;
	КонецЕсли;

КонецФункции // РассчитыватьДолгПриОткрытииФорм()

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Пользователь, Настройка) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);

	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
		|
		|ГДЕ
		|	Пользователь = &Пользователь
		| И Настройка    = &Настройка
		|";

	Выборка = Запрос.Выполнить().Выбрать();

	ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат ПустоеЗначение;
	ИначеЕсли Выборка.Следующий() Тогда
		Если ЗначениеНеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;

КонецФункции // ПолучитьЗначениеПоУмолчанию()

// Функция возвращает признак можно ли превышать остаток товаров по организации при отпуске товаров.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если разрешено превышать остаток, иначе Ложь.
//
Функция РазрешеноПревышениеОстаткаТоваровОрганизации() Экспорт

	СписокФильтров = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеОстаткаТоваровОрганизации, Ложь);

	Если (СписокФильтров.Количество() = 0)
	 ИЛИ (СписокФильтров.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат СписокФильтров[0].Значение;
	КонецЕсли;

КонецФункции // РазрешеноПревышениеОстаткаТоваровОрганизации()

// Процедура проверяет цены товаров (услуг) на допустимость для данного пользователя
//
// Параметры:
//  ДокументОбъект     - документ; 
//  ИмяТабличнойЧасти  - строка, имя табличной части, которую надо проверять, 
//  Отказ              - признак отказа от проведения документа
//
Процедура ПроверитьДопустимостьЦенОтпуска(ДокументОбъект, ИмяТабличнойЧасти, Отказ) Экспорт

	Запрос = Новый Запрос;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяДокумента = ДокументОбъект.Метаданные().Имя;
	ЕстьХарактеристикаНоменклатуры = ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти);

	ДополнительныеПоля         = "";
	ЛевоеСоединение            = "";
	ПоляДляОбъединенияЗапросов = "";

	СписокФильтров = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа, Неопределено);
	НомерТипаЦен = 0;
	Для Каждого ТипЦены Из СписокФильтров Цикл
		Если ЗначениеНеЗаполнено(ТипЦены.Значение) Тогда

			// Если хотя бы для одного набора прав не задан тип цен, ниже которого нельзя продавать,
			// то значит можно продовать по любой цене

			Возврат;

		КонецЕсли;

		НомерТипаЦен = НомерТипаЦен + 1;

		Запрос.УстановитьПараметр("ДатаСреза", ДокументОбъект.Ссылка.Дата);

		Если ТипЦены.Значение.Рассчитывается Тогда
			Запрос.УстановитьПараметр("ТипЦен" + НомерТипаЦен, ТипЦены.Значение.БазовыйТипЦен);
			Запрос.УстановитьПараметр("ТипЦенДинамический" + НомерТипаЦен, ТипЦены.Значение);
			Запрос.УстановитьПараметр("Коэффициент" + НомерТипаЦен, ТипЦены.Значение.ПроцентСкидкиНаценки);
		Иначе
			Запрос.УстановитьПараметр("ТипЦен" + НомерТипаЦен, ТипЦены.Значение);
			Запрос.УстановитьПараметр("Коэффициент" + НомерТипаЦен, 0);
		КонецЕсли;

		ЛевоеСоединение = ЛевоеСоединение + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ТипЦен = &ТипЦен" + НомерТипаЦен + ") КАК ЦеныКомпании" + НомерТипаЦен + "
		|	ПО ЦеныКомпании" + НомерТипаЦен + ".Номенклатура = Док.Номенклатура";
		Если ЕстьХарактеристикаНоменклатуры Тогда
			Запрос.УстановитьПараметр("ПустаяХарактеристикаНоменклатуры" , Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			ЛевоеСоединение = ЛевоеСоединение + "
			|	И
			|	ЦеныКомпании" + НомерТипаЦен + ".ХарактеристикаНоменклатуры = Док.ХарактеристикаНоменклатуры
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ТипЦен = &ТипЦен" + НомерТипаЦен + ") КАК ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + "
			|	ПО ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".Номенклатура = Док.Номенклатура
			|	И
			|	ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".ХарактеристикаНоменклатуры = &ПустаяХарактеристикаНоменклатуры
			|";

			ДополнительныеПоля = ДополнительныеПоля + "," + "
			|	&Коэффициент" + НомерТипаЦен +" КАК ПроцентСкидкиНаценкиИзСправочника" + НомерТипаЦен +",
			|	ВЫБОР КОГДА ЦеныКомпании" + НомерТипаЦен + ".Цена ЕСТЬ NULL ТОГДА
			|		ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".Цена 
			|	ИНАЧЕ ЦеныКомпании" + НомерТипаЦен + ".Цена КОНЕЦ  КАК Цена" + НомерТипаЦен;
			Если ТипЦены.Значение.Рассчитывается Тогда
				ДополнительныеПоля = ДополнительныеПоля + "," + "
				|	ВЫБОР КОГДА ЦеныКомпании" + НомерТипаЦен + ".Цена ЕСТЬ NULL ТОГДА
				|		ВложенныйЗапросБезХарактеристики" + НомерТипаЦен +".ПроцентСкидкиНаценкиБезХарактеристики
				|	ИНАЧЕ ВложенныйЗапрос" + НомерТипаЦен +".ПроцентСкидкиНаценки КОНЕЦ  КАК ПроцентСкидкиНаценки" + НомерТипаЦен;
			КонецЕсли;
			ДополнительныеПоля = ДополнительныеПоля + "," + "
			|	ВЫБОР КОГДА ЦеныКомпании" + НомерТипаЦен + ".Цена ЕСТЬ NULL ТОГДА
			|		ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".Валюта 
			|	ИНАЧЕ ЦеныКомпании" + НомерТипаЦен + ".Валюта КОНЕЦ КАК Цена" + НомерТипаЦен + "Валюта
			|";

		Иначе

			Если ТипЦены.Значение.Рассчитывается Тогда
				ДополнительныеПоля = ДополнительныеПоля + "," + "
				|	ЦеныКомпании" + НомерТипаЦен + ".Цена * ВложенныйЗапрос" + НомерТипаЦен +".ПроцентСкидкиНаценки КАК Цена"   + НомерТипаЦен + ",
				|	ЦеныКомпании" + НомерТипаЦен + ".Валюта КАК Цена" + НомерТипаЦен + "Валюта";
			Иначе
				ДополнительныеПоля = ДополнительныеПоля + "," + "
				|	ЦеныКомпании" + НомерТипаЦен + ".Цена КАК Цена"   + НомерТипаЦен + ",
				|	ЦеныКомпании" + НомерТипаЦен + ".Валюта КАК Цена" + НомерТипаЦен + "Валюта";
			КонецЕсли;

		КонецЕсли;
		Если ТипЦены.Значение.Рассчитывается Тогда
			ЛевоеСоединение = ЛевоеСоединение + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|		ДинамическиеЦеныКомпании" + НомерТипаЦен + ".ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
			|		ДинамическиеЦеныКомпании" + НомерТипаЦен + ".Номенклатура КАК Номенклатура";
			Если ЕстьХарактеристикаНоменклатуры Тогда
				ЛевоеСоединение = ЛевоеСоединение + ",
				|		ДинамическиеЦеныКомпании" + НомерТипаЦен + ".ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры";
			КонецЕсли;
			ЛевоеСоединение = ЛевоеСоединение + "
			|		ИЗ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ТипЦен = &ТипЦенДинамический" + НомерТипаЦен + "
			|		) КАК ДинамическиеЦеныКомпании" + НомерТипаЦен;

			ЛевоеСоединение = ЛевоеСоединение + "
			|	)КАК ВложенныйЗапрос" + НомерТипаЦен +"
			|	ПО ЦеныКомпании" + НомерТипаЦен + ".Номенклатура = ВложенныйЗапрос" + НомерТипаЦен +".Номенклатура";
			Если ЕстьХарактеристикаНоменклатуры Тогда
				ЛевоеСоединение = ЛевоеСоединение + "
				|	И ЦеныКомпании" + НомерТипаЦен + ".ХарактеристикаНоменклатуры = ВложенныйЗапрос" + НомерТипаЦен +".ХарактеристикаНоменклатуры";
			КонецЕсли;
			Если ЕстьХарактеристикаНоменклатуры Тогда
				ЛевоеСоединение = ЛевоеСоединение + "
				|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|		ДинамическиеЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".Номенклатура КАК Номенклатура,
				|		ДинамическиеЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".ПроцентСкидкиНаценки
				|		КАК ПроцентСкидкиНаценкиБезХарактеристики
				|		ИЗ
				|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ТипЦен = &ТипЦенДинамический" + НомерТипаЦен + "
				|		) КАК ДинамическиеЦеныКомпанииБезХарактеристики" + НомерТипаЦен;

				ЛевоеСоединение = ЛевоеСоединение + "
				|	)КАК ВложенныйЗапросБезХарактеристики" + НомерТипаЦен +"
				|	ПО ЦеныКомпании" + НомерТипаЦен + ".Номенклатура = ВложенныйЗапрос" + НомерТипаЦен +".Номенклатура";
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРегламентированногоУчета);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	"+?(ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),"Док.СтавкаНДС,", "")+"
	|	ВЫБОР КОГДА Количество = 0 ТОГДА Док.Цена ИНАЧЕ Док.Сумма/Док.Количество КОНЕЦ КАК Цена,
	|	"+?(ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента),"Док.Ссылка.ВалютаДокумента", "&ВалютаРеглУчета")
	+" КАК ВалютаДокумента,
	|	Док.НомерСтроки
	|" + ДополнительныеПоля + "
	|
	|ИЗ 
	|	Документ." + ИмяДокумента + "."+ИмяТабличнойЧасти+" КАК Док
	|" + ЛевоеСоединение + "
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	ПроверилиНаличиеЦенВЗапросе = Ложь;

	СоответствиеКурсыВалют = Новый Соответствие;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 

		Если НЕ ПроверилиНаличиеЦенВЗапросе Тогда
			Если РезультатЗапроса.Колонки.Найти("Цена") <> Неопределено Тогда

				ПроверилиНаличиеЦенВЗапросе = Истина;

			Иначе

				Возврат;

			КонецЕсли;
		КонецЕсли;

		НомерТипаЦен = 1;

		ЦенаТовара   = ?(ЗначениеНеЗаполнено(Выборка.Цена), 0, Окр(Выборка.Цена,2));
		ВалютаТовара = Выборка.ВалютаДокумента;

		Если СоответствиеКурсыВалют[ВалютаТовара] = Неопределено Тогда
			СтруктураКурсаЦеныТовара             = ПолучитьКурсВалюты(ВалютаТовара, ДокументОбъект.Дата);
			КурсЦеныТовара                       = СтруктураКурсаЦеныТовара.Курс;
			КратностьЦеныТовара                  = СтруктураКурсаЦеныТовара.Кратность;
			СоответствиеКурсыВалют[ВалютаТовара] = СтруктураКурсаЦеныТовара;
		Иначе
			СтруктураКурсаЦеныТовара = СоответствиеКурсыВалют[ВалютаТовара];
			КурсЦеныТовара           = СтруктураКурсаЦеныТовара.Курс;
			КратностьЦеныТовара      = СтруктураКурсаЦеныТовара.Кратность;
		КонецЕсли;

		МинимальнаяЦена = 0;

		Пока НомерТипаЦен <> 0 Цикл

			Если РезультатЗапроса.Колонки.Найти("Цена" + НомерТипаЦен) <> Неопределено
			   И РезультатЗапроса.Колонки.Найти("Цена" + НомерТипаЦен + "Валюта") <> Неопределено Тогда

				ЦенаПроверки   = ?(ЗначениеНеЗаполнено(Выборка["Цена" + НомерТипаЦен]), 0, Окр(Выборка["Цена" + НомерТипаЦен],2));
				Если РезультатЗапроса.Колонки.Найти("ПроцентСкидкиНаценки" + НомерТипаЦен) <> Неопределено Тогда
					ПроцентСкидкиНаценки = Выборка["ПроцентСкидкиНаценки" + НомерТипаЦен];
				КонецЕсли;
				Если ЗначениеНеЗаполнено(ПроцентСкидкиНаценки)
				   И РезультатЗапроса.Колонки.Найти("ПроцентСкидкиНаценкиИзСправочника" + НомерТипаЦен) <> Неопределено Тогда
					ПроцентСкидкиНаценки = Выборка["ПроцентСкидкиНаценкиИзСправочника" + НомерТипаЦен];
				КонецЕсли;
				Если ЗначениеНеЗаполнено(ПроцентСкидкиНаценки) Тогда
					ПроцентСкидкиНаценки = 0;
				КонецЕсли;

				ЦенаПроверки         = ЦенаПроверки * (1 + ПроцентСкидкиНаценки / 100);
				ВалютаПроверки = Выборка["Цена" + НомерТипаЦен + "Валюта"];
				

				// Считаем, что если не задана цена или валюта цены
				// (нет цены данного типа для данной номенклатуры), то
				// проверка прошла
				Если ЗначениеНеЗаполнено(ВалютаПроверки)
				 Или ЗначениеНеЗаполнено(ЦенаПроверки) Тогда
					МинимальнаяЦена = 0;
					Прервать; 
				КонецЕсли;

				Если СоответствиеКурсыВалют[ВалютаПроверки] = Неопределено Тогда
					СтруктураКурсаЦеныПроверки             = ПолучитьКурсВалюты(ВалютаПроверки, ДокументОбъект.Дата);
					КурсЦеныПроверки                       = СтруктураКурсаЦеныПроверки.Курс;
					КратностьЦеныПроверки                  = СтруктураКурсаЦеныПроверки.Кратность;
					СоответствиеКурсыВалют[ВалютаПроверки] = СтруктураКурсаЦеныПроверки;
				Иначе
					СтруктураКурсаЦеныПроверки = СоответствиеКурсыВалют[ВалютаПроверки];
					КурсЦеныПроверки           = СтруктураКурсаЦеныПроверки.Курс;
					КратностьЦеныПроверки      = СтруктураКурсаЦеныПроверки.Кратность;
				КонецЕсли;

				ПересчитаннаяЦенаПроверки = ПересчитатьИзВалютыВВалюту(ЦенаПроверки,
																	   ВалютаПроверки,        ВалютаТовара,
																	   КурсЦеныПроверки,      КурсЦеныТовара,
																	   КратностьЦеныПроверки, КратностьЦеныТовара);

				ПересчитаннаяЦенаПроверки = ПересчитатьЦенуПриИзмененииФлаговНалогов(ПересчитаннаяЦенаПроверки,
																					 Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
																					 ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
																					 ЕстьРеквизитДокумента("УчитыватьНДС",МетаданныеДокумента) 
																					 И ДокументОбъект.УчитыватьНДС, 
																					 ЕстьРеквизитДокумента("СуммаВключаетНДС",МетаданныеДокумента) 
																					 И ДокументОбъект.СуммаВключаетНДС, 
																					 ?(ЕстьРеквизитТабЧастиДокумента("СтавкаНДС",МетаданныеДокумента, ИмяТабличнойЧасти),
																					 ПолучитьСтавкуНДС(Выборка.СтавкаНДС),0));

				ПересчитаннаяЦенаПроверки = Окр(ПересчитаннаяЦенаПроверки, 2);

				МинимальнаяЦена = ?(НомерТипаЦен = 1, ПересчитаннаяЦенаПроверки, Мин(МинимальнаяЦена, ПересчитаннаяЦенаПроверки));

				Если МинимальнаяЦена = 0 Тогда
					НомерТипаЦен = 0;
				Иначе
					НомерТипаЦен = НомерТипаЦен + 1;
				КонецЕсли;

			Иначе

				НомерТипаЦен = 0;

			КонецЕсли;

		КонецЦикла;

		Если МинимальнаяЦена > ЦенаТовара Тогда
			ТекстСообщения = "Строка "      + Выборка.НомерСтроки + ": "
					+ "Для товара " + Выборка.Номенклатура
					+ Символы.ПС + "    цена за единицу ниже порогового значения (цена: "
					+ Формат(ЦенаТовара, "ЧДЦ=2; ЧН=0") + " " + ВалютаТовара
					+ ", минимальное значение: "
					+ Формат(МинимальнаяЦена, "ЧДЦ=2; ЧН=0") + " " + ВалютаТовара
					+ ")";
			СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьДопустимостьЦенОтпуска()

// Функция возвращает признак можно ли превышать остаток товаров на складе при отпуске товаров.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если разрешено превышать остаток, иначе Ложь.
//
Функция РазрешеноПревышениеОстаткаТоваровНаСкладе() Экспорт

	СписокФильтров = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеОстаткаТоваровНаСкладе, Ложь);

	Если (СписокФильтров.Количество() = 0)
	 ИЛИ (СписокФильтров.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат СписокФильтров[0].Значение;
	КонецЕсли;

КонецФункции // РазрешеноПревышениеОстаткаТоваровНаСкладе()

// Процедура выполняет установку настроек по умолчанию для нового пользователя
Процедура УстановитьНастройкиПоУмолчанию(Пользователь) Экспорт
	
	ЗначенияПоУмолчанию = Новый Соответствие;	
	ЗначенияПоУмолчанию.Вставить(ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьПодтверждениеПриЗакрытии, Истина);	
	ЗначенияПоУмолчанию.Вставить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный, Пользователь);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ ПланВидовХарактеристик.НастройкиПользователей ГДЕ Не ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Пока Выборка.Следующий() Цикл
		Запись = Набор.Добавить();
		Запись.Пользователь = Пользователь;
		Запись.Настройка = Выборка.Ссылка;
		Запись.Значение = Запись.Настройка.ТипЗначения.ПривестиЗначение(ЗначенияПоУмолчанию[Запись.Настройка]);
	КонецЦикла;
	Набор.Записать();
	
КонецПроцедуры

//Из УТ 10.3 Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого записывается значение по умолчанию
//  Значение     - значение по умолчанию
//
// Возвращаемое значение:
//  Нет
//
Процедура УстановитьЗначениеПоУмолчанию(Пользователь, Настройка, Значение) Экспорт

	СсылкаНастройки = ПланыВидовХарактеристик.НастройкиПользователей[Настройка];
	МенеджерЗаписи = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Настройка = СсылкаНастройки;
	МенеджерЗаписи.Значение = Значение;
	МенеджерЗаписи.Записать(Истина);

КонецПроцедуры // ПолучитьЗначениеПоУмолчанию()

Процедура УстановитьЗначенияПравПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос();
	ЗначенияПравПоУмолчанию = Новый Соответствие; // значения прав по умолчанию
	ЗначенияПравПоУмолчанию[ПланыВидовХарактеристик.ПраваПользователей.ПечатьНепроведенныхДокументов] =	Истина;
	ЗначенияПравПоУмолчанию[ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНулевыеЦеныВРознице] =	Ложь;
	ЗначенияПравПоУмолчанию[ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗакрытиеСмены] = Ложь;
	ЗначенияПравПоУмолчанию[ПланыВидовХарактеристик.ПраваПользователей.РазрешитьАннулированиеЧека] = Ложь;
	ЗначенияПравПоУмолчанию[ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтчетОСменеБезГашения] = Ложь;
	ЗначенияПравПоУмолчанию[ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЧекВозврата] = Ложь;
	ЗначенияПравПоУмолчанию[ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНазначениеРучныхСкидок] = Ложь;
	ЗначенияПравПоУмолчанию[ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНулевыеЦеныВОпте] =	Ложь;
	ЗначенияПравПоУмолчанию[ПланыВидовХарактеристик.ПраваПользователей.РедактированиеТаблиц] = Истина;
	ЗначенияПравПоУмолчанию[ПланыВидовХарактеристик.ПраваПользователей.РедактированиеЦенВДокументах] = Истина;
	ЗначенияПравПоУмолчанию[ПланыВидовХарактеристик.ПраваПользователей.РассчитыватьДолгПриОткрытииФорм] = Истина;
	ЗначенияПравПоУмолчанию[ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеОстаткаТоваровОрганизации] = Ложь;
	ЗначенияПравПоУмолчанию[ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеОстаткаТоваровНаСкладе] =	Ложь;
			
	Запрос.Текст ="ВЫБРАТЬ
	              |	НаборыПрав.Ссылка КАК НаборПрав,
	              |	ПраваПользователей.Ссылка КАК Право
	              |ИЗ
	              |	Перечисление.НаборПравПользователей КАК НаборыПрав
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ПраваПользователей КАК ПраваПользователей
	              |		ПО (НЕ(ПраваПользователей.ЭтоГруппа))
	              |
	              |ГДЕ
	              |	(НЕ (1 В (	ВЫБРАТЬ ПЕРВЫЕ 1 1 
				  |				ИЗ РегистрСведений.ЗначенияПравПользователя КАК ЗначенияПравПользователя 
				  |				ГДЕ ЗначенияПравПользователя.НаборПрав = НаборыПрав.Ссылка 
				  |				И ЗначенияПравПользователя.Право = ПраваПользователей.Ссылка
				  |			 )
				  |		)
				  |	)
	              |
	              |ИТОГИ ПО
	              |	НаборПрав,
	              |	Право";
	
	
	
	ВыборкаНаборыПрав = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НаборПрав" );
	Пока ВыборкаНаборыПрав.Следующий() Цикл
		Набор = РегистрыСведений.ЗначенияПравПользователя.СоздатьНаборЗаписей();
		Набор.Отбор.НаборПрав.Установить(ВыборкаНаборыПрав.НаборПрав);
		Набор.Прочитать(); // чтение уже сущестующих значений
		ВыборкаПрав = ВыборкаНаборыПрав.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Право");
		Пока ВыборкаПрав.Следующий() Цикл
			Запись = Набор.Добавить();
			Запись.НаборПрав = ВыборкаНаборыПрав.НаборПрав;
			Запись.Право = ВыборкаПрав.Право;
			Запись.Значение = Запись.Право.ТипЗначения.ПривестиЗначение(ЗначенияПравПоУмолчанию[Запись.Право]);
		КонецЦикла;
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция РазрешитьРасширенныеОперацииСДисконтнымиКартами(Пользователь = Неопределено) Экспорт

	Разрешено = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРасширенныеОперацииСДисконтнымиКартами, Ложь, Пользователь);
	Если (Разрешено.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (Разрешено.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат Разрешено[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьНулевыеЦеныВРознице()

