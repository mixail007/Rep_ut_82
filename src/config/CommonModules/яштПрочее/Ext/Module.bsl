
Функция яштАдминистративныеФункцииДоступны() Экспорт

	Возврат ПравоДоступа("Администрирование", Метаданные);

КонецФункции


Процедура яштОткрытьСписокЗаданийНаПеремещениеСОтборомПоПодразделению() Экспорт

	ФормаСписка = Документы.ЗаданиеНаПеремещение.ПолучитьФормуСписка();
	Если ФормаСписка.Открыта() Тогда
		ФормаСписка.Активизировать();
		Возврат;
	КонецЕсли;
	
	ФормаСписка.Отбор.Подразделение.Значение      =  ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
	ФормаСписка.Отбор.Подразделение.Использование = Истина;			
	ФормаСписка.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Подразделение.Доступность = Ложь;
	
	ФормаСписка.Открыть();   

КонецПроцедуры



// "общие" обработчики событий ДокументОбъект
Процедура яштДокументОбъектПередЗаписью(пДокументОбъект, Отказ) Экспорт

	// реквизит документа "Проверен"
	Если Не пДокументОбъект.ОбменДанными.Загрузка Тогда

		Если ЕстьРеквизитДокумента("Проверен", пДокументОбъект.Метаданные()) Тогда
		
			Если Не пДокументОбъект.Проведен И пДокументОбъект.Проверен Тогда
				Проверен = Ложь;
			КонецЕсли; 
		
			Если (пДокументОбъект.Проверен Или пДокументОбъект.Ссылка.Проверен)
				И Не ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РазрешитьРедактироватьПроверенныеДокументы") Тогда
				Отказ = истина;//+++ 08.12.2011 - явно выключаем!		
				СообщитьОбОшибке("Запись документа '" + пДокументОбъект + "' - отменена!
								|у Вас нет 'Разрешения на редактирования проверенных документов'!
								|Объект не записан!", Отказ);
			КонецЕсли; 
			
		КонецЕсли;

	КонецЕсли; 

КонецПроцедуры

// "общие" обработчики событий ФормаДокумента
Процедура яштФормаДокументаПриОткрытии(пДокументОбъект, пФормаДокумента) Экспорт

	// реквизит документа "Проверен"
	Если ЕстьРеквизитДокумента("Проверен", пДокументОбъект.Метаданные()) 
		И пФормаДокумента.ЭлементыФормы.Найти("Проверен") <> Неопределено
		И Тип(пФормаДокумента.ЭлементыФормы.Проверен) = Тип("Флажок") Тогда
		Если Не ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РазрешитьРедактироватьПроверенныеДокументы") Тогда
		
			пФормаДокумента.ЭлементыФормы.Проверен.Доступность = Ложь;
			
			Если пДокументОбъект.Проверен Тогда
				пФормаДокумента.ТолькоПросмотр = Истина;
			КонецЕсли; 
		
		КонецЕсли; 
	КонецЕсли; 
	
	// доступность реквизита "номер чека ККМ"
	Если ЕстьРеквизитДокумента("НомерЧекаККМ", пДокументОбъект.Метаданные()) 
		И пФормаДокумента.ЭлементыФормы.Найти("НомерЧекаККМ") <> Неопределено
		И Тип(пФормаДокумента.ЭлементыФормы.НомерЧекаККМ) = Тип("ПолеВвода") Тогда
		
		пФормаДокумента.ЭлементыФормы.НомерЧекаККМ.ТолькоПросмотр = Не яштАдминистративныеФункцииДоступны();
		
	КонецЕсли; 
	//Олег - проверим возможность редактирования документа
	Если ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", пДокументОбъект.Метаданные()) Тогда
		Отказ = Ложь;
		ПроверкаВозможностиИзмененияДокумента(пДокументОбъект, Отказ);
		Если Отказ Тогда
			пФормаДокумента.ТолькоПросмотр = Истина;
		КонецЕсли;	
	КонецЕсли;	
	//Олег - проверили возможность редактирования
		

КонецПроцедуры

// открытие стандартных отчетов из форм списков и элементов справочников
Процедура яштОткрытьОтчетПоНоменклатуреОстаткиНаСкладах(пСсылка) Экспорт

	// получаем форму для построения отчета по остатку товара
	ОтчетОстатки  = Отчеты.ОстаткиТоваровНаСкладах.Создать();
	ФормаОтчета   = ОтчетОстатки.ПолучитьОсновнуюФорму();
	ФормаОтчета.Открыть();

	ФормаОтчета.ЭлементыФормы.ДатаКон.Значение                       = ТекущаяДата();
	ФормаОтчета.ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение   = Истина;
	ФормаОтчета.ЭлементыФормы.ПолеВидаСравненияНоменклатура.Значение = ?(пСсылка.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
	ФормаОтчета.ЭлементыФормы.ПолеНастройкиНоменклатура.Значение     = пСсылка;

	ФормаОтчета.ОбновитьОтчет();

КонецПроцедуры

Процедура яштОткрытьОтчетПоЗаказамПокупателей(пСсылка) Экспорт

	// получаем форму для построения отчета по остатку товара
	ОтчетОстатки  = Отчеты.ЗаказыПокупателей.Создать();
	ФормаОтчета   = ОтчетОстатки.ПолучитьОсновнуюФорму();
	ФормаОтчета.Открыть();

	//ФормаОтчета.ЭлементыФормы.ДатаКон.Значение                       = ТекущаяДата();
	ФормаОтчета.ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение   = Истина;
	ФормаОтчета.ЭлементыФормы.ПолеВидаСравненияНоменклатура.Значение = ?(пСсылка.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
	ФормаОтчета.ЭлементыФормы.ПолеНастройкиНоменклатура.Значение     = пСсылка;

	ФормаОтчета.ОбновитьОтчет();

КонецПроцедуры

Процедура яштОткрытьОтчетПоНоменклатуреВедомостьНаСкладах(пСсылка) Экспорт

	// получаем форму для построения отчета по остатку товара
	ОтчетВедомость  = Отчеты.ВедомостьТоварыНаСкладах.Создать();
	ФормаОтчета   = ОтчетВедомость.ПолучитьОсновнуюФорму();
	ФормаОтчета.Открыть();
    Если ЗначениеНеЗаполнено(ФормаОтчета.ЭлементыФормы.ДатаНач.Значение) Тогда
		ФормаОтчета.ЭлементыФормы.ДатаНач.Значение                       = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяДатаНачалаОтчетов");
	КонецЕсли;
	ФормаОтчета.ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение   = Истина;
	ФормаОтчета.ЭлементыФормы.ПолеВидаСравненияНоменклатура.Значение = ?(пСсылка.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
	ФормаОтчета.ЭлементыФормы.ПолеНастройкиНоменклатура.Значение     = пСсылка;

	ФормаОтчета.ОбновитьОтчет();

КонецПроцедуры

Процедура яштОткрытьОтчетПоНоменклатуреВедомостьНаСкладахПоДокументам(пСсылка) Экспорт

	// получаем форму для построения отчета по остатку товара
	ОтчетВедомость  = Отчеты.ВедомостьТоварыНаСкладах.Создать();
	ФормаОтчета   = ОтчетВедомость.ПолучитьОсновнуюФорму();
	ФормаОтчета.Открыть();
	
	ОтчетВедомость.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
	ОтчетВедомость.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("Склад");
	ОтчетВедомость.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Очистить();
	ОтчетВедомость.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить("Регистратор");
	ОтчетВедомость.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить("Регистратор.КассаККМ");

	//ФормаОтчета.ЭлементыФормы.ДатаНач.Значение                       = НачалоМесяца(НачалоМесяца(ТекущаяДата()) - 1);
	Если ЗначениеНеЗаполнено(ФормаОтчета.ЭлементыФормы.ДатаНач.Значение) Тогда
		ФормаОтчета.ЭлементыФормы.ДатаНач.Значение                       = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяДатаНачалаОтчетов");
	КонецЕсли;
	ФормаОтчета.ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение   = Истина;
	ФормаОтчета.ЭлементыФормы.ПолеВидаСравненияНоменклатура.Значение = ?(пСсылка.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
	ФормаОтчета.ЭлементыФормы.ПолеНастройкиНоменклатура.Значение     = пСсылка;

	ФормаОтчета.ОбновитьОтчет();

КонецПроцедуры

Процедура яштОткрытьОтчетПоШК(пСсылка) Экспорт  //+++ 10.04.2012

	// получаем форму для построения отчета по остатку товара
	ОтчетОстатки  = Отчеты.НоменклатураШК.Создать();
	ФормаОтчета   = ОтчетОстатки.ПолучитьОсновнуюФорму();
	ФормаОтчета.Открыть();

	//ФормаОтчета.ЭлементыФормы.ДатаКон.Значение  = ТекущаяДата();
	Если пСсылка.ЭтоГруппа тогда
		ФормаОтчета.ЭлементыФормы.Родитель.Значение   = пСсылка;
	иначе	
		ФормаОтчета.ЭлементыФормы.Родитель.Значение   = пСсылка.Родитель;
	КонецЕсли;
	
	ФормаОтчета.НоменклатураШКВывести();

КонецПроцедуры

// "внешние" обработки
Процедура яштОткрытьВнешнююОбработку(пИмя)

 	врИмяКаталогаВнешнихОбработок = Константы.ИмяКаталогаВнешнихОбработок.Получить();
	врСлэш = Прав(врИмяКаталогаВнешнихОбработок, 1);
	#Если Клиент тогда
	ВнешниеОбработки.ПолучитьФорму(врИмяКаталогаВнешнихОбработок + ?((врСлэш = "\") ИЛИ (врСлэш = "/"), "", "\") + пИмя + ".epf").Открыть();;
	#КонецЕсли
	
КонецПроцедуры

Процедура яштДействиеОткрытьВнешнююОбработкуКонтрольОстатковСоСБИС() Экспорт
 	яштОткрытьВнешнююОбработку("КонтрольОстатковСоСБИС");
КонецПроцедуры

Процедура яштСменаПользователя(пДокументОбъект, пФормаДокумента, Пользователь) Экспорт
	                           
	Если ЕстьРеквизитДокумента("Ответственный", пДокументОбъект.Метаданные()) 
		И пФормаДокумента.ЭлементыФормы.Найти("Ответственный") <> Неопределено Тогда
		Если ЗначениеНеЗаполнено(пФормаДокумента.ЭлементыФормы.Ответственный.Значение) Тогда 
			пФормаДокумента.ЭлементыФормы.Ответственный.Значение = Пользователь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедуры для расчета веса. 
Функция РассчитатьВесПоТоварамОбщ(ТабличнаяЧасть,Документ) Экспорт	
	Вес = 0;	
	КоэффициентВагона 			= Константы.КоэффициентВагона.Получить();
	КоэффициентВагона 			= ?(КоэффициентВагона = 0, 1, КоэффициентВагона);
	
	Для й=0 по ТабличнаяЧасть.Количество()-1 Цикл		
		Стр 			= ТабличнаяЧасть.Получить(й); 
		Типоразмер 		= Стр.Номенклатура.Типоразмер;
		НормаЗагрузки 	= Справочники.НормыЗагрузки.НайтиПоРеквизиту("Типоразмер",Типоразмер);		
		Если (НормаЗагрузки <> Справочники.НормыЗагрузки.ПустаяСсылка()) Тогда
			ТекущийВес = (НормаЗагрузки.Вес * Стр.Количество)/?(НормаЗагрузки.КоэффициентКоличества=0,1,НормаЗагрузки.КоэффициентКоличества);
			ТекущийВес = ТекущийВес * ?(Стр.Номенклатура.Импорт,НормаЗагрузки.КоэффициентИмпорта,1);
			ТекущийВес = ТекущийВес*?(Документ.ОтгрузкаВагона=Истина,КоэффициентВагона,1);	
			Вес 			= Вес + ТекущийВес;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Вес;	
КонецФункции

Функция РассчитатьВесПоГрузчикамОбщ(ДанныеПоПогрузке) Экспорт
	
	Вес = 0;	
	Для й=0 по ДанныеПоПогрузке.Количество()-1 Цикл		
		Стр 			= ДанныеПоПогрузке.Получить(й); 
		Вес 			= Вес + Стр.Вес;
	КонецЦикла;
	
	Возврат Вес;		
КонецФункции

Процедура ЗаполнитьВесВТабличнойЧастиОбщ(СтрокаТабличнойЧасти,Документ) Экспорт
	
	Номенклатура 				= СтрокаТабличнойЧасти.Номенклатура;
	Количество					= СтрокаТабличнойЧасти.Количество;
	Типоразмер					= Номенклатура.Типоразмер;
	СтрокаТабличнойЧасти.Вес	= 0;
	
	Если (Типоразмер = Справочники.Типоразмеры.ПустаяСсылка()) Тогда
		Возврат;
	КонецЕсли;
	
	НормаВеса					= Справочники.НормыЗагрузки.НайтиПоРеквизиту("Типоразмер",Типоразмер);
	
	Если (НормаВеса = Справочники.НормыЗагрузки.ПустаяСсылка()) Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Вес 	= НормаВеса.Вес*(Количество/(?(НормаВеса.КоэффициентКоличества=0,1,НормаВеса.КоэффициентКоличества)));
	СтрокаТабличнойЧасти.Вес 	= СтрокаТабличнойЧасти.Вес*?(Номенклатура.Импорт=Истина,НормаВеса.КоэффициентИмпорта,1);
	КоэффициентВагона 			= Константы.КоэффициентВагона.Получить();
	КоэффициентВагона 			= ?(КоэффициентВагона = 0, 1, КоэффициентВагона);
	СтрокаТабличнойЧасти.Вес 	= СтрокаТабличнойЧасти.Вес*?(Документ.ОтгрузкаВагона=Истина,КоэффициентВагона,1);
	Документ.ОбщийВес 			= Документ.ОбщийВес + СтрокаТабличнойЧасти.Вес;
	
КонецПроцедуры

Процедура ЗаполнитьВесВТоварахОбщ(Документ) Экспорт
	
	Для й=0 по Документ.Товары.Количество()-1 Цикл
		Стр = Документ.Товары.Получить(й);
		ЗаполнитьВесВТабличнойЧастиОбщ(Стр,Документ);	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКоэффициентВидаПродукции(Дата,ВидТовара) Экспорт
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("ВидПродукции",ВидТовара);
	Запрос.Текст = "
		|ВЫБРАТЬ Значение из 
		|РегистрСведений.КоэффициентыВидовПродукции.СрезПоследних(&Дата,ВидПродукции = &ВидПродукции)";
		
		Выб = Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда 
			Возврат ?(Выб.Значение<>0,Выб.Значение,1);
		КонецЕсли;
		Возврат 1;
		
КонецФункции

Функция РассчитатьВесПоТоварамНетто(ТаблЧасть) Экспорт
	
	ОбщВес = 0;
	
	Для Каждого Стр из ТаблЧасть Цикл
		
		Номенклатура = Стр.Номенклатура;	
		ОбщВес = ОбщВес + НайтиНормуЗагрузки(Номенклатура)*Стр.Количество/НайтиКоэффициентКоличества(Номенклатура);
		
	КонецЦикла;	
		
	Возврат ОбщВес;	
КонецФункции

Функция НайтиНормуЗагрузки(Ссылка) 
	
	Запрос = новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ Ссылка из Справочник.НормыЗагрузки
	|Где ВидПродукции = &ВидПродукции И Типоразмер = &Типоразмер";
	
	Запрос.УстановитьПараметр("ВидПродукции",Ссылка.ВидТовара);
	Запрос.УстановитьПараметр("Типоразмер",Ссылка.ТипоРазмер);
	Выб = Запрос.Выполнить().Выбрать();
	
	Если (Выб.Следующий()) Тогда 
		Возврат Выб.Ссылка.Вес;
	КонецЕсли;
	
	Возврат 0; 
	
КонецФункции

Функция НайтиКоэффициентКоличества(Ссылка)
	
	Запрос = новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ Ссылка из Справочник.НормыЗагрузки
	|Где ВидПродукции = &ВидПродукции И Типоразмер = &Типоразмер";
	
	Запрос.УстановитьПараметр("ВидПродукции",Ссылка.ВидТовара);
	Запрос.УстановитьПараметр("Типоразмер",Ссылка.ТипоРазмер);
	Выб = Запрос.Выполнить().Выбрать();
	
	Если (Выб.Следующий()) Тогда 
		Возврат ?(Выб.Ссылка.КоэффициентКоличества=0,1,Выб.Ссылка.КоэффициентКоличества);
	КонецЕсли;
	
	Возврат 1; 
	
КонецФункции

Функция РассчитатьВесПоТЧ(ТаблЧасть) Экспорт
	
	ОбщВес = 0;
	
	Для Каждого Стр из ТаблЧасть Цикл
		ОбщВес = ОбщВес + Стр.Вес;
	КонецЦикла;
	
	Возврат ОбщВес;
	
КонецФункции

// Получает доступный остаток, с учетом ВСЕГО резерва (без разреза по заказам).
Функция ПолучитьДоступныйОстаток(ТекущаяНоменклатура, Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|Выбрать 
	|Остатки.Номенклатура, Остатки.КоличествоОстаток - ЕстьNULL(Резерв.КоличествоОстаток,0) как ДоступныйОстаток
	|	ИЗ 
	|РегистрНакопления.ТоварыНаскладах.Остатки(&Дата) как Остатки
	|Левое Соединение
	|( 
	|Выбрать 
	|	Номенклатура,
	|    Сумма(КоличествоОстаток) как КоличествоОстаток
	|    ИЗ
	|	(
	|	Выбрать
	|	Номенклатура,
	|	ДокументРезерва,
	|	КоличествоОстаток
	|Из РегистрНакопления.Резерв.Остатки(&Дата)
	|Где 
	|	ДобавитьКДате(ДокументРезерва.Дата,ДЕНЬ,ДокументРезерва.ДлинаРезерва)>=&ДатаРез И ДокументРезерва<>&Документ)
	| как ПЗ
	|Сгруппировать по 
	|Номенклатура
	|) как Резерв
	|ПО 
	|	Остатки.Номенклатура = Резерв.Номенклатура
	|ГДЕ Остатки.Номенклатура = &Номенклатура";

	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаРез",НачалоДня(Документ.Дата));
	Запрос.УстановитьПараметр("Номенклатура",ТекущаяНоменклатура);
	Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Документ",Документ);
	
	Выб = Запрос.Выполнить().Выбрать();
	
	Если (Выб.Следующий()) Тогда 
		Возврат Выб.ДоступныйОстаток;		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Выполняет снятие с резерва товаров, указанных в таблице.
// При этом снимает не больше, чем указано в сделке (регистраторе)
Функция ПолучитьТаблицуДляСписанияРезерва(Дата,Сделка,ТаблицаПоТоварам) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|Выбрать Номенклатура, ДокументРезерва, Сумма(КоличествоОстаток) как Количество из 
	|РегистрНакопления.Резерв.Остатки(&Дата,ДокументРезерва=&ДокументРезерва)
	|Сгруппировать По Номенклатура, ДокументРезерва";
	
	Запрос.УстановитьПараметр("ДокументРезерва", Сделка);
	Запрос.УстановитьПараметр("Дата", Дата);
	ТаблицаПоСделке = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДляСписания = Новый ТаблицаЗначений();
	ТаблицаДляСписания.Колонки.Добавить("Номенклатура");
	ТаблицаДляСписания.Колонки.Добавить("Количество");
	
	Для Каждого Стр из ТаблицаПоТоварам Цикл
		НайденоПоСделке = ТаблицапоСделке.Найти(Стр.Номенклатура,"Номенклатура");
		Если (НайденоПоСделке<>Неопределено) Тогда 
			СтрНовая = ТаблицаДляСписания.Добавить();
			СтрНовая.Номенклатура = Стр.Номенклатура;
			Если (Стр.Количество>НайденоПоСделке.Количество) Тогда 
				СтрНовая.Количество = НайденоПоСделке.Количество;
			Иначе 
				СтрНовая.Количество = Стр.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДляСписания;
КонецФункции

// В зависимости от настройки константы "Проведение без типа цен" реагирует на проведение документа
//Процедура яштПроведениеБезТипаЦен(Объект, Отказ) Экспорт

//	Отказ = (ЗначениеНеЗаполнено(Объект.ТипЦен)) И (Константы.ЗапретПроведенияЗаказаБезТипаЦены.Получить());
//	
//	Если Отказ Тогда
//	
//		СообщитьОбОшибке("В документе не установлен тип цен!");
//	
//	КонецЕсли; 

//КонецПроцедуры // РазрешитьВыборТипаЦен()

Функция яштПроверкаСоответствияСкладовОрганизацийКасс(глТекущийПользователь) Экспорт   
флагВозврата=Истина;	
ГруппаДоступностиСкладов=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ГруппаДоступностиСкладов");
Если  ГруппаДоступностиСкладов=Справочники.ГруппыДоступностиСкладов.ПустаяСсылка() Тогда
	Сообщить ("У пользователя "+Строка(глТекущийПользователь) +" нет доступной группы складов.");
	Возврат Ложь;
КонецЕсли;	
ЗапросГР=Новый Запрос;
ЗапросГР.Текст="ВЫБРАТЬ ГруппаДоступности, Склад ИЗ РегистрСведений.СоставГруппДоступностиСкладов ГДЕ ГруппаДоступности =&ГруппаДоступностиСкладов";
ЗапросГР.УстановитьПараметр("ГруппаДоступностиСкладов",ГруппаДоступностиСкладов);	

Склады=ЗапросГР.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
Если Склады.Количество()=0 Тогда
	Сообщить ("В группе складов "+Строка(ГруппаДоступностиСкладов) +" нет ни одного склада.");
	Возврат Ложь;
КонецЕсли;	

ЗапросПроверкаСоответствия= Новый Запрос;
ЗапросПроверкаСоответствия.Текст="
|Выбрать Склады.Склад Склад,РегСоотв.Склад
|ИЗ
|(ВЫБРАТЬ   Склады.Ссылка Склад ИЗ Справочник.Склады КАК Склады
|ГДЕ	Склады.Ссылка В(&Склады)) Склады
|ЛЕВОЕ СОЕДИНЕНИЕ
|(ВЫБРАТЬ Компьютер, Склад ИЗ  РегистрСведений.СоответствиеСкладуОрганизацииИКассыККМ 
|ГДЕ Компьютер = &Компьютер)РегСоотв
|ПО Склады.Склад=РегСоотв.Склад
|ГДЕ	РегСоотв.Склад есть NULL";

ЗапросПроверкаСоответствия.УстановитьПараметр("Склады",Склады);
ЗапросПроверкаСоответствия.УстановитьПараметр("Компьютер",ИмяКомпьютера());
Если ЗапросПроверкаСоответствия.Выполнить().Выгрузить().Количество()>0 Тогда
	#Если Клиент тогда
		Предупреждение("Не для всех складов пользователя установлено соответствие Склад-Касса");
	#КонецЕсли	
	Возврат Ложь;
КонецЕсли; 	

	Запрос=Новый Запрос;
	Запрос.Текст=" ВЫБРАТЬ
|	Склад,   Организация,
|	КассаККМ,	КассаККМКредит
|ИЗ
|	РегистрСведений.СоответствиеСкладуОрганизацииИКассыККМ ГДЕ 	Склад В(&Склады)
|	и (КассаККМКредит=&ПустаяСсылкаКассаККМ или КассаККМ=&ПустаяСсылкаКассаККМ 
|	или Организация=&ПустаяСсылкаОрганизация) и (Компьютер=&ИмяКомпьютера)
|	ОБЪЕДИНИТЬ
|	ВЫБРАТЬ
|	Склад,	Организация,
|	КассаККМ,КассаККМКредит
|ИЗ
|	РегистрСведений.СоответствиеСкладуОрганизацииИКассыККМ ГДЕ 	КассаККМ =&КассаККМ
|				и (КассаККМКредит=&ПустаяСсылкаКассаККМ или КассаККМ=&ПустаяСсылкаКассаККМ 
|	или Организация=&ПустаяСсылкаОрганизация)  и (Компьютер=&ИмяКомпьютера)";

Запрос.УстановитьПараметр("ПустаяСсылкаКассаККМ",Справочники.КассыККМ.ПустаяСсылка());
Запрос.УстановитьПараметр("ПустаяСсылкаОрганизация",Справочники.Организации.ПустаяСсылка());
Запрос.УстановитьПараметр("КассаККМ",ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКассаККМ"));
Запрос.УстановитьПараметр("Склады",Склады);
Запрос.УстановитьПараметр("ИмяКомпьютера",ИмяКомпьютера());
ТЗ=Запрос.Выполнить().Выгрузить();
Если ТЗ.Количество()>0 Тогда
	Для каждого стр из ТЗ Цикл
		#Если Клиент тогда
		Сообщить("В регистре соответствия для склада "+ стр.Склад.Наименование+" не выбрана Касса ККМ или кредитная Касса ККМ"  );
		#КонецЕсли	
	флагВозврата=Ложь;
	КонецЦикла;
КонецЕсли;	
	Возврат  флагВозврата;
КонецФункции

Функция ПолучитьСлово(Строка)  Экспорт
	ном=СтрДлина(Строка)-1;
	Пока  ном>0 Цикл
		Если  ПустаяСтрока(Сред(Строка,ном,1)) Тогда
			Возврат ном;
		КонецЕсли;	
		ном=ном-1;	
	КонецЦикла;	
	
	Возврат СтрДлина(Строка)-1;
КонецФункции	


Функция ВернутьСтатусЧекаККМ(СсылкаЧекККМ) Экспорт
	Если ЗначениеНеЗаполнено(СсылкаЧекККМ) Тогда Возврат "";  КонецЕсли;
	Если ТипЗнч(СсылкаЧекККМ)=Тип("ДокументСсылка.ЧекККМ") Тогда Возврат ""; КонецЕсли;
	СтрокаВозврата=" Чек "+Строка(СсылкаЧекККМ.Номер)+" ";
	СтрокаВозврата=СтрокаВозврата+"на сумму "+Строка(СсылкаЧекККМ.Товары.Итог("Сумма"));
	СтрокаВозврата=СтрокаВозврата+?(СсылкаЧекККМ.Проведен,"","не ")+" проведен, ";
	СтрокаВозврата=СтрокаВозврата+?(СсылкаЧекККМ.ЧекПробитНаККМ,"","не ")+"пробит.";
	Возврат СтрокаВозврата;
КонецФункции

Функция ПолучитьОсновнойДоговорКонтрагента(Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК ДоступныйДоговорКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка = &Контрагент)
	|			И Контрагенты.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА Контрагенты.ОсновнойДоговорКонтрагента ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДоступныйДоговорКонтрагента;		
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();		
	КонецЕсли;	
		
КонецФункции

//Функция ЯштПолучитьСкладОООИзСоответствия(Организация,СкладИП) Экспорт
//	
//	Запрос = новый Запрос;
//	Запрос.УстановитьПараметр("Организация",Организация);
//	Запрос.УстановитьПараметр("СкладИП",СкладИП);
//	Запрос.текст = "
//	|Выбрать СкладООО Из РегистрСведений.СоответствиеСкладовОООСкладамИП
//	|Где СкладИП = &СкладИП и Организация = &Организация";
//	
//	Выб = Запрос.Выполнить().Выбрать();	
//	
//	Если (Выб.Следующий()) Тогда 
//		Возврат Выб.СкладООО;
//	Иначе 
//		Возврат Неопределено;
//	КонецЕсли;
//	
//КонецФункции

//Функция ЯштПолучитьСкладИПИзСоответствия(Организация,СкладООО) Экспорт
//	Запрос = новый Запрос;
//	Запрос.УстановитьПараметр("Организация",Организация);
//	Запрос.УстановитьПараметр("СкладООО",СкладООО);
//	Запрос.текст = "
//	|Выбрать СкладИП Из РегистрСведений.СоответствиеСкладовОООСкладамИП
//	|Где СкладООО = &СкладООО и Организация = &Организация";
//	
//	Выб = Запрос.Выполнить().Выбрать();	
//	
//	Если (Выб.Следующий()) Тогда 
//		Возврат Выб.СкладИП;
//	Иначе 
//		Возврат Неопределено;
//	КонецЕсли;
//	
//КонецФункции
	
//Функция ЯштПолучитьРасчетныйСчетДоговорИТипЦеныИзСоответствия(Организация,СкладИП) Экспорт
//	
//	Запрос = новый Запрос;
//	Запрос.УстановитьПараметр("Организация",Организация);
//	Запрос.УстановитьПараметр("СкладИП",СкладИП);
//	Запрос.текст = "
//	|Выбрать РасчетныйСчет, ДоговорКонтрагентаРеализация, ДоговорКонтрагентаПоступление, ТипЦенПродажи, ТипЦенЗакупки Из РегистрСведений.СоответствиеСкладовОООСкладамИП
//	|Где СкладИП = &СкладИП и Организация = &Организация";
//	
//	СтруктураВозврата = новый Структура;
//	Выб = Запрос.Выполнить().Выбрать();	
//	
//	Если (Выб.Следующий()) Тогда 
//		СтруктураВозврата.Вставить("РасчетныйСчет",Выб.РасчетныйСчет);
//		СтруктураВозврата.Вставить("ДоговорКонтрагентаРеализация",Выб.ДоговорКонтрагентаРеализация);
//		СтруктураВозврата.Вставить("ДоговорКонтрагентаПоступление",Выб.ДоговорКонтрагентаПоступление);
//		СтруктураВозврата.Вставить("ТипЦенПродажи",Выб.ТипЦенПродажи);
//		СтруктураВозврата.Вставить("ТипЦенЗакупки",Выб.ТипЦенЗакупки);
//		Возврат СтруктураВозврата;
//	Иначе 
//		Возврат Неопределено;
//	КонецЕсли;
//	
//КонецФункции

Функция ЯштПолучитьОрганизациюПриемникИПИзСоответствия(Склад) Экспорт
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.текст = "
	|Выбрать Организация Из РегистрСведений.СоответствиеСкладуОрганизацииИКассыККМ
	|Где Склад = &Склад";
	
	Выб = Запрос.Выполнить().Выбрать();	
	
	Если (Выб.Следующий()) Тогда 
		Возврат Выб.Организация;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Процедура ЯштСоздатьДокументыВнутреннегоПеремещения(мТаблицаТоваровРеальная,ТекущийПользователь, Отказ, Номер, КассаККМ=Неопределено) Экспорт
	
	//Запрос = новый Запрос;
	//ГруппаДоступностиСкладов=ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ГруппаДоступностиСкладов");
	//Запрос.УстановитьПараметр("Группа",ГруппаДоступностиСкладов);
	//Запрос.Текст = "
	//|Выбрать СкладООО, СкладИП из РегистрСведений.СоответствиеСкладовОООСкладамИП
	//|Где СкладИП в (ВЫБРАТЬ Склад ИЗ РегистрСведений.СоставГруппДоступностиСкладов ГДЕ ГруппаДоступности=&Группа)";
	//
	//ТаблицаДляПоиска = Запрос.Выполнить().Выгрузить();
	//ТаблицаТоваров = новый ТаблицаЗначений;
	//ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	//ТаблицаТоваров.Колонки.Добавить("Количество");
	//ТаблицаТоваров.Колонки.Добавить("Склад");
	//ОрганизацияДляПеремещений = Константы.ОООДляРозницы.Получить();
	//Для Каждого Стр из мТаблицаТоваровРеальная Цикл
	//	
	//	НайденСкладООО = ТаблицаДляПоиска.Найти(Стр.СкладООО,"СкладООО");
	//	
	//	Если (НайденСкладООО<>Неопределено) Тогда
	//		СтрНовая = ТаблицаТоваров.Добавить();
	//		СтрНовая.Номенклатура = Стр.Номенклатура;
	//		СтрНовая.Количество = Стр.Количество;
	//		СтрНовая.Склад = Стр.СкладООО;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//ТаблицаТоваров.Сортировать("Склад,Номенклатура,Количество");
	//
	//СкладСтарый = Справочники.Склады.ПустаяСсылка();
	//СкладНовый = Справочники.Склады.ПустаяСсылка();
	//ОбъектПеремещения = Неопределено;
	//Для Каждого Стр из ТаблицаТоваров Цикл
	//	СкладНовый = Стр.Склад;		
	//	Если (СкладСтарый<>СкладНовый) Тогда 
	//		// Новый документ
	//		Если (ОбъектПеремещения<>Неопределено) Тогда
	//			ОбъектПеремещения.Комментарий = "Создан по чеку ККМ №"+Номер;
	//			ОбъектПеремещения.Ответственный = ТекущийПользователь;
	//			Если (КассаККМ<>Неопределено) Тогда
	//				ОбъектПеремещения.КассаККМ = КассаККМ;
	//			КонецЕсли;				
	//			ОбъектПеремещения.Записать(РежимЗаписиДокумента.Проведение);
	//		КонецЕсли;
	//		ОбъектПеремещения = Документы.ВнутреннееПеремещениеТоваров.СоздатьДокумент();
	//		ОбъектПеремещения.Дата = ТекущаяДата();
	//		ОбъектПеремещения.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	//		ОбъектПеремещения.Организация = ОрганизацияДляПеремещений;
	//		ОбъектПеремещения.ОрганизацияПолучатель = ЯштПолучитьОрганизациюПриемникИПИзСоответствия(ЯштПолучитьСкладИПИзСоответствия(ОрганизацияДляПеремещений,Стр.Склад));	
	//		ОбъектПеремещения.СкладОтправитель = Стр.Склад;
	//		ОбъектПеремещения.СкладПолучатель = ЯштПолучитьСкладИПИзСоответствия(ОрганизацияДляПеремещений,Стр.Склад);	
	//		ОбъектПеремещения.ОтражатьВУправленческомУчете = Истина;	
	//		СтрНовая = ОбъектПеремещения.Товары.Добавить();
	//		СтрНовая.Номенклатура = Стр.Номенклатура;
	//		СтрНовая.Количество = Стр.Количество;
	//		СтрНовая.ЕдиницаИзмерения = Стр.Номенклатура.ЕдиницаХраненияОстатков;
	//		СтрНовая.Коэффициент = 1;
	//		
	//	Иначе 
	//		СтрНовая = ОбъектПеремещения.Товары.Добавить();
	//		СтрНовая.Номенклатура = Стр.Номенклатура;
	//		СтрНовая.Количество = Стр.Количество;	
	//		СтрНовая.Коэффициент = 1;
	//	КонецЕсли;		
	//КонецЦикла;
	//
	//Если (ОбъектПеремещения<>Неопределено) Тогда
	//	ОбъектПеремещения.Комментарий = "Создан по чеку ККМ №"+Номер;
	//	ОбъектПеремещения.Ответственный = ТекущийПользователь;
	//	Если (КассаККМ<>Неопределено) Тогда
	//		ОбъектПеремещения.КассаККМ = КассаККМ;
	//	КонецЕсли;
	//	ОбъектПеремещения.Записать(РежимЗаписиДокумента.Проведение);
	//КонецЕсли;
		
КонецПроцедуры

Функция ВернутьТаблицуДоступныхОперацийДляМенеджера(ДокументСсылка) Экспорт
	ТЗДоступныхОпераций=Новый ТаблицаЗначений;
	ТЗДоступныхОпераций.Колонки.Добавить("Имя");
	ТЗДоступныхОпераций.Колонки.Добавить("Синоним");
	
	Если ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		или ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Для каждого значениеПеречисления из ДокументСсылка.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
			Если значениеПеречисления.Имя="ОплатаПокупателя" или значениеПеречисления.Имя="ВозвратДенежныхСредствПоставщиком" Тогда	
				новаяОперация=ТЗДоступныхОпераций.Добавить();
				новаяОперация.Имя=значениеПеречисления.Имя;
				новаяОперация.Синоним=значениеПеречисления.Синоним;
			КонецЕсли;
		КонецЦикла;	
	ИначеЕсли ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
		или ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Для каждого значениеПеречисления из ДокументСсылка.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
			Если значениеПеречисления.Имя="ОплатаПоставщику" или значениеПеречисления.Имя="ВозвратДенежныхСредствПокупателю" Тогда	
				новаяОперация=ТЗДоступныхОпераций.Добавить();
				новаяОперация.Имя=значениеПеречисления.Имя;
				новаяОперация.Синоним=значениеПеречисления.Синоним;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	Возврат ТЗДоступныхОпераций;
КонецФункции	

Функция ЗаписатьСтрокуЛогаКассы(СтрокаЛога, Перезаписать = Ложь) Экспорт
	
	//Если (Константы.ВестиЛогированиеКассы.Получить()) Тогда 
	//	КаталогЛогирования = Константы.КаталогЛогированияКассы.Получить();
	//	СоздатьКаталог(КаталогЛогирования);
	//	Текст = Новый Текстовыйдокумент; 
	//	Попытка 	
	//		Текст.Прочитать(КаталогЛогирования + "\" + ПараметрыСеанса.ИмяЛогаКассы);
	//		Текст.ДобавитьСтроку(Формат(ТекущаяДата(),"ДЛФ=ДВ")+ ":" + СтрокаЛога);
	//	Исключение
	//		Текст.ДобавитьСтроку(Формат(ТекущаяДата(),"ДЛФ=ДВ")+ ":" + СтрокаЛога);
	//	КонецПопытки;
	//	Текст.Записать(КаталогЛогирования + "\" + ПараметрыСеанса.ИмяЛогаКассы);    
	//КонецЕсли;
		
КонецФункции


//// Заказы покупателей
Процедура ПроверитьПревышениеДЗСУчетомЗаказа(Объект, Отказ) Экспорт

	Если НЕ ПараметрыСеанса.ИдетОбменРаспределеннойБазы Тогда
		
		ДоговорКонтрагента = Объект.ДоговорКонтрагента;
		
		Если ДоговорКонтрагента.КонтролироватьСуммуЗадолженности Тогда
			
			Если Константы.КонтролироватьПревышениеЗадолженностиПоДоговоруВЗаказах.Получить() Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
				Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
				
				Запрос.Текст = "
				|ВЫБРАТЬ // Для контроля суммы задолженности по расчетному документу (ведение взаиморасчетов - по расчетным документам)
				|    ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовОстаток
				|ИЗ
				|	 РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&Дата,
				|	 ДоговорКонтрагента = &ДоговорКонтрагента
				|	 ) КАК ВзаиморасчетыПоДоговору
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					
					СуммаВзаиморасчетовОстаток = ?(Выборка.СуммаВзаиморасчетовОстаток= NULL, 0, Выборка.СуммаВзаиморасчетовОстаток);
					
					СуммаВзаиморасчетовПоДокументу = Объект.СуммаДокумента; 
					//ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента,
					//			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, КурсДокумента(ДокументОбъект,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета),
					//			СтруктураШапкиДокумента.КурсВзаиморасчетов, КратностьДокумента(ДокументОбъект, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета),
					//			СтруктураШапкиДокумента.КратностьВзаиморасчетов);
					
					//Валюта = ?(СтруктураШапкиДокумента.ВалютаВзаиморасчетов = NULL, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
					Если (СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоДокументу) > ДоговорКонтрагента.ДопустимаяСуммаЗадолженности Тогда
						
						ОшибкаПриПроведении("Сумма задолженности по договору " + ДоговорКонтрагента + 
						" с учетом документа превышает допустимую сумму задолженности." + Символы.ПС +
						Символы.Таб + "Сумма задолженности с учетом документа: " + (СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоДокументу) +
						" " + Объект.ВалютаДокумента + ", допустимая сумма задолженности: " + ДоговорКонтрагента.ДопустимаяСуммаЗадолженности + " " + ДоговорКонтрагента.ВалютаВзаиморасчетов + 
						", превышение: " + (ФорматСумм(СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоДокументу - 
						ДоговорКонтрагента.ДопустимаяСуммаЗадолженности)) + " " + Объект.ВалютаДокумента, Отказ);
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		
	КонецЕсли; 

			
КонецПроцедуры

//ГЛАВНАЯ процедура проверки лимитов:
//
//Объект - это 
//1) документОбъект.ЗаказПокупателя (из модуля Заказа)
//2) документСсылка.РеализацияТоваровУслуг (проверка при вводе на основании -  документСсылка.ЗаказПокупателя )
//3) из документов: ЗаданиеНаОтгрузку и ЗаданиеНаПеремещение
//передаётся в Объект - СписокЗначений заказов покупателя Контрагент
//	(из Объекта - типа СписокЗначений - удаляются все "лишние" заказы (не Контрагента)
//
//
//
Процедура ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(Объект, Отказ, Контрагент=неопределено, ДатаОтгрузки=Неопределено) Экспорт
	
	# Если Клиент тогда
	Если ПараметрыСеанса.ИдетОбменРаспределеннойБазы Тогда
		Возврат;
	КонецЕсли;	
	#КонецЕсли
		
	СуммаЗаказовПоДатеОтгрузки=0; 	
	сумм1 = 0;
	списокЗак = новый СписокЗначений;
	
	//-------------------------------------------------------------------------------------------		
	Если  ТипЗнч(Объект)=Тип("ДокументСсылка.ЗаказПокупателя") 
		 ИЛИ ТипЗнч(Объект)=Тип("ДокументОбъект.ЗаказПокупателя") тогда
		  
		Если ТипЗнч(Объект)=Тип("ДокументСсылка.ЗаказПокупателя") //24.11.2017  - проверка из реалиазий и заданий на перемещение/отгрузку
			Тогда закСсылка = Объект;
			Иначе закСсылка = Объект.Ссылка;
		КонецЕсли;	
		  
		списокЗак.Добавить(закСсылка);//1 элемент
		СуммаЗаказовПоДатеОтгрузки=Объект.СуммаДокумента;//+++ 09.12.2014
		
		//+++ 24.07.2013
		ОбъектКонтрагент = ?(Контрагент=неопределено, Объект.Контрагент, Контрагент);
		Если  НЕ ЗначениеЗаполнено(ОбъектКонтрагент) тогда 
			Возврат;
		КонецЕсли;
		
		//+++ 14.11.2017 - 17.11.2017 по задаче № 36008  - не проверяем договоры и лимиты, если заказ уже закрыт или отгружен или удалён
 		Если ЗаказЗакрытИлиОтгруженПолностью( закСсылка ) тогда //17-24.11.2017 
			Возврат;
		КонецЕсли;
		
		//+++ 14.11.2017 по задаче № 36010 - договора и лимиты не проверяем по клиенту
		Если Объект.ДоговорКонтрагента.Франчайзи тогда 
			Возврат;
		КонецЕсли;	

		//+++24.11.2014 - предупреждение! и не даём делать заказ!
		Если ОбъектКонтрагент.ЗапретитьВводЗаказаПокупателя тогда
			#Если Клиент тогда
				Сообщить("Для контрагента: "+строка(ОбъектКонтрагент)+" Запрещен ввод новых заказов!", СтатусСообщения.Важное);
			#КонецЕсли	
			Отказ = НЕ РольДоступна("ПолныеПрава"); // если роль не доступна, то Истина
			//Отказ =Истина; //НИКОМУ НЕ ДАЁМ!
			Возврат;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Объект.ДатаОтгрузки) тогда
			ОбъектДатаОтгрузки = Объект.ДатаОтгрузки;
		Иначе
			ОбъектДатаОтгрузки = Объект.Дата;
		КонецЕсли;

		//-------------------------------------------------------------------------------------------		
	ИначеЕсли ТипЗнч(Объект)=Тип("СписокЗначений") Тогда // список заказов...из Задания на отгрузку
		
		//+++ 31.05.2017 --ТЕНДЕРНЫЕ заказы
		//для задания на отгрузку проверяется по списку заказов 1 клиента	
		//-> если это заказ по договору ФА+ то "вырезаем" его
		i=0;
		пока i<Объект.Количество() цикл
			Если Объект[i].Значение.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФормулаАвтоПлюс
						или Объект[i].Значение.Контрагент.Франчайзер     //+++ 14.11.2017 договора и лимиты не проверяем по клиенту
						или Объект[i].Значение.ДоговорКонтрагента.Франчайзи тогда 
				Объект.Удалить(i);
			Иначе i=i+1;
			КонецЕсли;
		КонецЦикла;	
		
		Если Объект.Количество()=0 Тогда
			Возврат;
		КонецЕсли;	
		
		списокЗак.ЗагрузитьЗначения( Объект.ВыгрузитьЗначения() ); 
		СуммаЗаказовПоДатеОтгрузки=0; // сумма или в Заказах или в Реализациях...
		
		ОбъектКонтрагент   = ?(Контрагент=неопределено,Объект[0].Значение.Контрагент, Контрагент);//+++ 24.07.2013
		Если ЗначениеНеЗаполнено(ОбъектКонтрагент) Тогда 
			Возврат 
		КонецЕсли;
		
		//***  2015.09.17
		//Если ДатаОтгрузки=Неопределено тогда
		//ОбъектДатаОтгрузки = макс(Объект.ДатаОтгрузки, Объект.Дата); // есть нет Даты отгрузки, то берется дата документа!
		//иначе ОбъектДатаОтгрузки = ДатаОтгрузки;
		//КонецЕсли;

		ОбъектДатаОтгрузки = ?(ДатаОтгрузки = Неопределено, ТекущаяДата(), ДатаОтгрузки);
		//***
		
		i=0; N=списокЗак.Количество(); //удаление заказов не того контрагента
		пока i<N цикл
			Если списокЗак[i].Значение.Контрагент<>ОбъектКонтрагент тогда 
				списокЗак.Удалить(i); N=N-1;
			Иначе 
			//+++ 01.10.2015 - ограничение по сумме остатка НЕотгруженного заказа, А НЕ ПО ВСЕХ СУММЕ ЗАКАЗА!
				сумм1 = ПолучитьСуммуОстаткаЗаказано( списокЗак[i].Значение.ссылка );  
				Если сумм1<=0 тогда   //17.10.2017 - закрытый/отгруженный заказ нечего и проверять!
					списокЗак.Удалить(i); N=N-1;
				иначе
					СуммаЗаказовПоДатеОтгрузки = СуммаЗаказовПоДатеОтгрузки + сумм1;//12.10.2015 только "+" суммы!
					i=i+1;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		//-------------------------------------------------------------------------------------------		
	ИначеЕсли ТипЗнч(Объект)=Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
		
		СуммаЗаказовПоДатеОтгрузки=Объект.СуммаДокумента;
		ОбъектДатаОтгрузки = Объект.Дата; // для реализаций
		ОбъектКонтрагент   = ?(Контрагент=неопределено,Объект.Контрагент,Контрагент);//+++ 24.07.2013
		Если ЗначениеНеЗаполнено(ОбъектКонтрагент) Тогда 
			Возврат 
		КонецЕсли;
				
		////+++ 28.03.2014 для проверки Реализаций - исключаем этот же Заказ!
		Если ТипЗнч(Объект.Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") тогда
			списокЗак.Добавить(Объект.Сделка);//1 элемент
		КонецЕсли;
		//-------------------------------------------Быть такого не может!---------------------------------		
	Иначе // любой другой документ - проверка на дату документа
		ОбъектДатаОтгрузки         = Объект.Дата;
		попытка
			СуммаЗаказовПоДатеОтгрузки = Объект.СуммаДокумента;
			ОбъектКонтрагент = Объект.Контрагент;
		исключение
			СуммаЗаказовПоДатеОтгрузки = 111;
			ОбъектКонтрагент = справочники.Контрагенты.ПустаяСсылка();
		КонецПопытки;	
	КонецЕсли;	
	
	//+++ 22.08.2014 - не даём делать НИКАКИХ документов кроме заказов покупателей...
	Если ОбъектКонтрагент.ЗапретОтгрузки тогда
		#Если Клиент тогда
			Сообщить("Для контрагента: "+строка(ОбъектКонтрагент)+" - ВСЕ отгрузки Запрещены!", СтатусСообщения.Важное);
		#КонецЕсли	
		Отказ = Истина;
		Возврат;
	КонецЕсли;	

		
 	
//+++( 23.03.2015 - доп.ограничение по договарам поручительства
	//Распоряжение Малышева ИИ
    //---Должно быть одно из условий:-------------------------------------------
	//  1) должен быть хотя бы 1 договор с [v] ЕстьДогорПоручительства! (по договору с покупателем или комиссионером)
	//  2) или это ИП (инн = 12 символов!)
	//  3) или [v] ЕстьПодписаннаяСлужебнаяЗаписка
	// 24.03.2015 ---- еще 2 условия -----
	//  4) если есть Предоплата 
	//иначе - стоп-отгрука!
	
//+++ 11.10.2017 полностью ПЕРЕРАБОТАН алгоритм, с учётом списка документов

//----таблица договоров, по которым надо проверять Предоплату-----------------------		
		ТабДог = новый ТаблицаЗначений;
		ТабДог.Колонки.Добавить("Договор");
		ТабДог.Колонки.Добавить("Сумма");
	
// 4)-----------------------   договор *  - проверяем только если нет договора поручительства ----------------------------
	Если ТипЗнч(Объект) = Тип("СписокЗначений") Тогда 
		
		для i=0 по списокЗак.Количество()-1 цикл
			
			Если типЗнч(списокЗак[i].Значение)=Тип("ДокументОбъект.ЗаказПокупателя")
				или типЗнч(списокЗак[i].Значение)=Тип("ДокументОбъект.РеализацияТоваровУслуг")  тогда	
				Объект1 = списокЗак[i].Значение.ссылка;
			Иначе
				Объект1 = списокЗак[i].Значение;
			КонецЕсли;
		
		ЭтоЗаказИлиРеализация = ( ТипЗнч(Объект1)=Тип("ДокументСсылка.ЗаказПокупателя")
									 или ТипЗнч(Объект1)=Тип("ДокументСсылка.РеализацияТоваровУслуг") );
									 
		дог1 = Объект1.ДоговорКонтрагента;						 
		УКлиентаЕстьДоговорПоручительства = ( дог1.ЕстьДогорПоручительства	
				                  И (дог1.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			                      или дог1.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
				                 )  );
	
		УсловиеБезПредоплаты = ПолучитьУсловиеБезПредоплаты(УКлиентаЕстьДоговорПоручительства, ОбъектКонтрагент, ЭтоЗаказИлиРеализация, дог1);
		
		//-----собираем только договоры Без поручительства----------------------							 
			Если НЕ УсловиеБезПредоплаты тогда
		    	стр1=ТабДог.Добавить(); 
				стр1.Договор = списокЗак[i].Значение.ДоговорКонтрагента; 
				
				Если типЗнч(списокЗак[i].Значение)=Тип("ДокументОбъект.ЗаказПокупателя")  тогда	
					Объект1 = списокЗак[i].Значение.ссылка;
				стр1.Сумма   = ПолучитьСуммуОстаткаЗаказано( Объект1 ); //ТУТ именно остаток!
				ИначеЕсли типЗнч(списокЗак[i].Значение)=Тип("ДокументСсылка.ЗаказПокупателя")  тогда	
					Объект1 = списокЗак[i].Значение;
				стр1.Сумма   = ПолучитьСуммуОстаткаЗаказано( Объект1 ); //именно так! 
				иначе	
					 Объект1 = списокЗак[i].Значение;
				стр1.Сумма   = списокЗак[i].Значение.СуммаДокумента;
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
				
		//получим полную сумму всех документов
		ТабДог.Свернуть("Договор", "Сумма");
			
		
	КонецЕсли;
	
	Если ТипЗнч(Объект) <> Тип("СписокЗначений") Тогда 
	//=================================объект не списокЗначений =====================================================
		ЭтоЗаказИлиРеализация = ( ТипЗнч(Объект)=Тип("ДокументСсылка.ЗаказПокупателя") или
									ТипЗнч(Объект)=Тип("ДокументОбъект.ЗаказПокупателя")
									ИЛИ ТипЗнч(Объект)=Тип("ДокументСсылка.РеализацияТоваровУслуг")
			                     //   ИЛИ ТипЗнч(Объект)=Тип("ДокументОбъект.РеализацияТоваровУслуг")
								);
									   
	//проверка наличия у Контрагента договора поручательства (хотя бы 1) 
			запрос1 = новый Запрос;
			запрос1.Текст = "ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Владелец
			|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
			|	И ДоговорыКонтрагентов.ВидДоговора В (&СписВидов) 
			|	И ДоговорыКонтрагентов.ЕстьДогорПоручительства
			|";
			запрос1.УстановитьПараметр("Владелец", ОбъектКонтрагент);
			СписВидов = новый СписокЗначений;//24.11.2017
			СписВидов.Добавить( Перечисления.ВидыДоговоровКонтрагентов.СПокупателем );
			СписВидов.Добавить( Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
			запрос1.УстановитьПараметр("СписВидов", СписВидов);
			рез1 = запрос1.Выполнить();
			
			УКлиентаЕстьДоговорПоручительства = НЕ рез1.Пустой();	
			
			дог1 = Объект.ДоговорКонтрагента;
			
		УсловиеБезПредоплаты = ПолучитьУсловиеБезПредоплаты(УКлиентаЕстьДоговорПоручительства, ОбъектКонтрагент, ЭтоЗаказИлиРеализация, дог1);

		Если НЕ УсловиеБезПредоплаты тогда
				стр1=ТабДог.Добавить();
				стр1.Договор = Объект.ДоговорКонтрагента;
				стр1.Сумма   = Объект.СуммаДокумента;  //17.11.2017 - всегда из документа!
		КонецЕсли;	
	КонецЕсли;								   
	
//5) ---- Проверка ПРЕДОПЛАТЫ -----------------------------------------------
	Если НЕ Отказ И ТабДог.Количество()>0 Тогда 
			Отказ = истина;	
			колДогПредоплаты = 0;
					
			Запрос2 = Новый Запрос;
			Запрос2.Текст = "ВЫБРАТЬ
			               |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
			               |	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
			               |ИЗ
			               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&КонецТекДня, ДоговорКонтрагента В (&СписокДог)) КАК ВзаиморасчетыСКонтрагентамиОстатки
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
			               |
			               |ИМЕЮЩИЕ
			               |	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) < 0";
			
			Запрос2.УстановитьПараметр("СписокДог", ТабДог.ВыгрузитьКолонку("Договор") );
			Запрос2.УстановитьПараметр("КонецТекДня", КонецДня(ТекущаяДата()) );//КонецДня(ОбъектДатаОтгрузки) ); //"предоплата" поступает после Заказа, но До отгрузки!  + Взаимозачеты...
			Результат2 = Запрос2.Выполнить();
			Выборка = Результат2.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Для ii=0 по ТабДог.Количество()-1 Цикл  // таблица небольшая, в цикле быстрее
					Если Выборка.ДоговорКонтрагента = ТабДог[ii].Договор Тогда
						delta = ТабДог[ii].Сумма + выборка.СуммаВзаиморасчетовОстаток;  //сумма документов + долг
						если  delta <=0 тогда
							#Если Клиент тогда
							Сообщить("По договору № "+строка(ТабДог[ii].Договор.Код)+" для контрагента '" + строка(ТабДог[ii].Договор.Владелец)+"' - Есть полная предоплата для отгруки на сумму: "+строка(ТабДог[ii].Сумма)+"р. Отгрузка - разрешена.", СтатусСообщения.Информация);
							#КонецЕсли
							колДогПредоплаты =  колДогПредоплаты + 1;
						иначе 
							#Если Клиент тогда
							Сообщить("По договору № "+строка(ТабДог[ii].Договор.Код)+" для контрагента '" + строка(ТабДог[ii].Договор.Владелец) + "' - предоплата: "+строка(-выборка.СуммаВзаиморасчетовОстаток)+"р."
							+?(ТабДог[ii].Сумма>0,"("+формат(-выборка.СуммаВзаиморасчетовОстаток/ТабДог[ii].Сумма*100,"ЧДЦ=0")+"%)","")  // % предоплаты
							+" меньше суммы документов: "+строка(ТабДог[ii].Сумма)+"р. на "+строка(delta)+"р.!", СтатусСообщения.Внимание);
							#КонецЕсли
						конецЕсли;
					КонецЕсли;	
				КонецЦикла;
			КонецЦикла;
			
			Если колДогПредоплаты = ТабДог.Количество() тогда
				Отказ = ложь; // все договоры - по предоплате или не найдены договоры по объекту...непонятно какому...
			КонецЕсли;	
//-----------------------------------------------
			
			#Если Клиент тогда
			Если Отказ = Истина тогда
				Сообщить("У покупателя '" + строка(ОбъектКонтрагент) + "' - НЕТ Договора поручительства и нет предоплаты по текущему договору! Отгрузка - запрещена!", СтатусСообщения.Внимание);
			КонецЕсли;
			#КонецЕсли
				
	КонецЕсли;	

	
	//*** 20150320
	//Проверка для всех, чтоб просрочка не превышала 7 дней. Стоп отгрузки.
	//Распоряжение Малышева ИИ
	Если не Отказ и Константы.СтопОтгрузкиПриПДЗболее7дней.Получить() Тогда
		Если ОбъектКонтрагент.РазрешитьГрузитьПриПДЗБолееСемиДней=ЛОЖЬ Тогда  //[ ] РазрешитьГрузитьПриПДЗБолееСемиДней - выключено
				ЗапросДней = Новый Запрос;
				ЗапросДней.УстановитьПараметр("ДатаОтгрузки", КонецДня(ОбъектДатаОтгрузки));
				ЗапросДней.УстановитьПараметр("ТекДата", КонецДня(ТекущаяДата()) );     // остатки регистра на тек.день!
				СписВидов = новый СписокЗначений;//24.11.2017
				СписВидов.Добавить( Перечисления.ВидыДоговоровКонтрагентов.СПокупателем );
				СписВидов.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
 				ЗапросДней.УстановитьПараметр("СписВидов", СписВидов);
				ЗапросДней.УстановитьПараметр("Контрагент", ОбъектКонтрагент);
				//+++ 14.11.2017
				//в запросе сразу разбиваем по типу - Заказ /не заказ 
				//и для заказа делаем выразить()... выборка только из 1 таблицы
				//результат в Долги, а уже её группируем по всем полям
				//и находим итоги по договору
				//и делаем сортировку по числу ДнейПросрочено по убыванию
				ЗапросДней.Текст = "ВЫБРАТЬ
				                   |	Долги.ДнейПросрочено КАК ДнейПросрочено,
				                   |	Долги.ДатаОтгрузки,
				                   |	Долги.ДатаОплаты,
				                   |	Долги.ДоговорКонтрагента КАК ДоговорКонтрагента,
				                   |	Долги.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
				                   |	Долги.Сделка
				                   |ИЗ
				                   |	(ВЫБРАТЬ
				                   |		ВЫБОР
				                   |			КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL 
				                   |					И ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
				                   |				ТОГДА ВЫБОР
				                   |						КОГДА РАЗНОСТЬДАТ(ВЫБОР
				                   |									КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ЗаказПокупателя
				                   |										ТОГДА ВЫБОР
				                   |												КОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				                   |													ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).Дата
				                   |												ИНАЧЕ ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).ДатаОплаты
				                   |											КОНЕЦ
				                   |									ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
				                   |								КОНЕЦ, &ДатаОтгрузки, ДЕНЬ) + 1 > 0
				                   |							ТОГДА РАЗНОСТЬДАТ(ВЫБОР
				                   |										КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ЗаказПокупателя
				                   |											ТОГДА ВЫБОР
				                   |													КОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				                   |														ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).Дата
				                   |													ИНАЧЕ ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).ДатаОплаты
				                   |												КОНЕЦ
				                   |										ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
				                   |									КОНЕЦ, &ДатаОтгрузки, ДЕНЬ) + 1
				                   |						ИНАЧЕ 0
				                   |					КОНЕЦ
				                   |			ИНАЧЕ 0
				                   |		КОНЕЦ КАК ДнейПросрочено,
				                   |		ВЫБОР
				                   |			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ЗаказПокупателя
				                   |				ТОГДА ВЫБОР
				                   |						КОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				                   |							ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).Дата
				                   |						ИНАЧЕ ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).ДатаОтгрузки
				                   |					КОНЕЦ
				                   |			ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
				                   |		КОНЕЦ КАК ДатаОтгрузки,
				                   |		ВЫБОР
				                   |			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ЗаказПокупателя
				                   |				ТОГДА ВЫБОР
				                   |						КОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				                   |							ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).Дата
				                   |						ИНАЧЕ ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).ДатаОплаты
				                   |					КОНЕЦ
				                   |			ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
				                   |		КОНЕЦ КАК ДатаОплаты,
				                   |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
				                   |		ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
				                   |		ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка
				                   |	ИЗ
				                   |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(	&ТекДата,
				                   |				ДоговорКонтрагента.Владелец = &Контрагент
								   |					И ДоговорКонтрагента.ВидДоговора В (&СписВидов) ) КАК ВзаиморасчетыСКонтрагентамиОстатки) КАК Долги
				                   |
								   //рефакторинг - группировка уже готовой таблицы
				                   |СГРУППИРОВАТЬ ПО
				                   |	Долги.Сделка,
				                   |	Долги.ДоговорКонтрагента,
				                   |	Долги.ДатаОплаты,
				                   |	Долги.ДатаОтгрузки,
				                   |	Долги.ДнейПросрочено,
				                   |	Долги.СуммаВзаиморасчетовОстаток
				                   |
				                   |ИМЕЮЩИЕ
				                   |	СУММА(Долги.СуммаВзаиморасчетовОстаток) > 0
				                   |
				                   |УПОРЯДОЧИТЬ ПО
				                   |	ДнейПросрочено УБЫВ
				                   |ИТОГИ
				                   |	МАКСИМУМ(ДнейПросрочено),
				                   |	СУММА(СуммаВзаиморасчетовОстаток)
				                   |ПО
				                   |	ДоговорКонтрагента
								  //// не надо по числу
								  // |Автоупорядочивание
								   |";
							   
			ВЫБОРКА1 = ЗапросДней.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
			//13.01.2016 - 7 дней + 6 часов (до 8 утра в Екатеринбурге! по времени НА СЕРВЕРЕ!)
			КолДней      = 7; //дней
			КолНочЧасов  = 6; //часов
			ТекущаяДата1 = ОценкаПроизводительностиВызовСервераПолныеПрава.ДатаИВремяНаСервере();
			флЭтоНеНочью = ( (ТекущаяДата1 - НачалоДня(ТекущаяДата1)) > КолНочЧасов*3600 );
			
				пока ВЫБОРКА1.Следующий() цикл
					Если  ВЫБОРКА1.СуммаВзаиморасчетовОстаток>0 
						И ВЫБОРКА1.ДнейПросрочено > КолДней 
						И флЭтоНеНочью                  //13.01.2016 - ночью можно!
					Тогда
						#Если Клиент тогда
							Сообщить("У контрагента: " + ОбъектКонтрагент.Наименование 
							+ " есть просроченный долг: "+строка(ВЫБОРКА1.СуммаВзаиморасчетовОстаток)
							+"р. с числом дней просрочки: " + Строка(ВЫБОРКА1.ДнейПросрочено) +" - превышает допустимые "+строка(КолДней)+" дней!"
							+ " (договор № "+строка(ВЫБОРКА1.ДоговорКонтрагента.Код)
							+" менеджер: "+строка(ВЫБОРКА1.ДоговорКонтрагента.ОтветственноеЛицо)+")", СтатусСообщения.Внимание);
						#КонецЕсли	
				
						Результат = ВЫБОРКА1.Выбрать();   
						пока Результат.Следующий() цикл
							Если  Результат.СуммаВзаиморасчетовОстаток>0 
								И Результат.ДнейПросрочено > КолДней 
								И флЭтоНеНочью                  //13.01.2016 - ночью можно!
							Тогда //только реализации...
							СДЕЛКА1 = Результат.Сделка;
								#Если Клиент тогда
									Сообщить("На дату отгрузки: "+формат(ОбъектДатаОтгрузки,"ДЛФ=DD")+ " по документу: "+строка(СДЕЛКА1)+" - долг: "+строка(Результат.СуммаВзаиморасчетовОстаток)
									+"р. с числом дней просрочки: " + Строка(Результат.ДнейПросрочено) +" дней! ОТГРУЗКА - ЗАПРЕЩЕНА!",СтатусСообщения.Внимание);
								#КонецЕсли	
							Отказ = Истина;
							прервать; // дальше не надо!
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;	
				КонецЦикла;

			КонецЕсли;	
		КонецЕсли;
	//***
	
	//--------------Дальнейшие проверки - только если У контрагента установлен контроль лимита или сумма лимита > 0----------------------------
	Если НЕ (ОбъектКонтрагент.КонтролироватьСуммуЗадолженности 
		
		//+++ 18.05.2017  заказ или реализация по тендерному клиенту
			или (ТипЗнч(Объект) <> Тип("СписокЗначений") и Объект.ДоговорКонтрагента.ТипДоговора <> справочники.ТипыДоговоров.ФормулаАвтоПлюс )
			
			или ОбъектКонтрагент.ДопустимаяСуммаЗадолженности>0) тогда
		Возврат;	 
	КонецЕсли;
	
	Если списокЗак.Количество()=0 тогда // список всегда должен быть!
		Возврат;
	КонецЕсли;
	

//================================Доп.проверки по списку заказов===================================================	
	
	
//+++ 12.10.2017 --------------остатки Заказанного по 1 или списку Заказов -----------------------------
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток, 0)) КАК СуммаВзаиморасчетовОстаток
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |			,
	    //+++ 14.11.2017           |			ЗаказПокупателя.ВводитьТолькоПеремещение = ЛОЖЬ  И
	               |				ЗаказПокупателя В (&СписокЗаказовПокупателя)) КАК ЗаказыПокупателейОстатки";
	Запрос.УстановитьПараметр("СписокЗаказовПокупателя", списокЗак);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий()Тогда
		//Если выборка.СуммаВзаиморасчетовОстаток>0 тогда
			//// 19.10.2015 - ТОЛЬКО при + сумме... иначе берем сумму документа!
			//СуммаЗаказовПоДатеОтгрузки = мин(СуммаЗаказовПоДатеОтгрузки, выборка.СуммаВзаиморасчетовОстаток); //+++ учет в валюте!  09.10.2017 ???
		//КонецЕсли;
		СуммаЗаказовПоДатеОтгрузки =выборка.СуммаВзаиморасчетовОстаток;	
	КонецЕсли;
	
	//+++)
	
	//====================================Отгрузки по остальным проделенным заказам клиента =====================================================
	//(  27.03.2014 - учет всех текущий отгрузок по Клиенту, за исключением текущего документа или списка документов 
	СуммаТекущихОтгрузокПоСкладам = 0;
	
	//+++( 24.11.2017 - массив договоров в 2х запросах!
	Запрос0 = новый Запрос; //ЗаказПокупателя.Контрагент = &Контрагент - заменен на подзапрос!
	СписВидов = новый СписокЗначений;
	СписВидов.Добавить( Перечисления.ВидыДоговоровКонтрагентов.СПокупателем );
	СписВидов.Добавить( Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером );
	Запрос0.УстановитьПараметр("СписВидов", СписВидов); 
	Запрос0.УстановитьПараметр("Контрагент", ОбъектКонтрагент);
	Запрос0.текст = "ВЫБРАТЬ ДоговорыКонтрагентов.Ссылка КАК Дог
					|ИЗ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|ГДЕ 	ДоговорыКонтрагентов.Владелец = &Контрагент
					//|	 И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
					|	 И ДоговорыКонтрагентов.ВидДоговора В (&СписВидов)";
	табл0 = Запрос0.Выполнить().Выгрузить();
	массивДоговоров = табл0.ВыгрузитьКолонку("Дог"); 
	//+++)
	
	
	Запрос1 = новый Запрос; 
	Запрос1.УстановитьПараметр("СписокЗаказов", списокЗак); 
	Запрос1.УстановитьПараметр("массивДоговоров", массивДоговоров); //24.11.2017 - все договоры клиента (с видом спокупателем или с комиссионером) 
	Запрос1.УстановитьПараметр("Контрагент", ОбъектКонтрагент);
	запрос1.Текст = "ВЫБРАТЬ
	                |	ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки( ,
					|		ДоговорКонтрагента В (&массивДоговоров)
				//30.05.2018 --(	
				//	|	И ЗаказПокупателя.ВМаршрут
                //  	|   И ЗаказПокупателя.Проверен
				//	|	И НЕ ЗаказПокупателя В (&СписокЗаказов)
					|	И ЗаказПокупателя В (выбрать маршруты.ЗаказПокупателя из регистрСведений.ЗаказыМаршруты  как маршруты
					|ГДЕ 
			       	|    маршруты.ЗаказПокупателя.Проверен
				  // | и  маршруты.ЗаказПокупателя.проведен
					|	И маршруты.ЗаказПокупателя.ДоговорКонтрагента В (&массивДоговоров)

					|	И НЕ маршруты.ЗаказПокупателя В (&СписокЗаказов)
					|)
				//-------------)	
 					| ) КАК ЗаказыПокупателейОстатки
	                |ГДЕ
	                |	ЗаказыПокупателейОстатки.КоличествоОстаток > 0
					
					//30.05.2018 - так быстрее на 20-30%
	              	//|	И ЗаказыПокупателейОстатки.ЗаказПокупателя.ВМаршрут
                 	|";
			
	Результат1 = Запрос1.Выполнить();
	Выборка = Результат1.Выбрать(); //24.11.2017 БЕЗ итогов!
//+++)	
СуммаТекущихОтгрузокПоСкладам = 0;
		Если Выборка.Следующий() тогда // сразу весь итог в валюте заказов!
			СуммаТекущихОтгрузокПоСкладам = выборка.Сумма;  
		КонецЕсли;
	//КонецЕсли;
	//+++)
	
	//===============================================================================================================================
	СуммаДебиторскаяЗадолженность=0; 	// проверяем оперативные остатки по всем договорам продаж Клиента
	ЗапросПоДолгам = Новый Запрос;
	ЗапросПоДолгам.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) КАК ДебиторскаяЗадолженность
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки( ,
	|			ДоговорКонтрагента В (&массивДоговоров)     ) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|";
	ЗапросПоДолгам.УстановитьПараметр("массивДоговоров", массивДоговоров);  //24.11.2017 - уже получен массив!
	
	Выборка=ЗапросПоДолгам.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДебиторскаяЗадолженность=Выборка.ДебиторскаяЗадолженность;
	КонецЕсли;	
	
		
	//27.03.2014  3 составляющих долга:
	ТекущаяЗадолженность = СуммаДебиторскаяЗадолженность + СуммаЗаказовПоДатеОтгрузки + СуммаТекущихОтгрузокПоСкладам; 
	
	Если ТекущаяЗадолженность > ОбъектКонтрагент.ДопустимаяСуммаЗадолженности Тогда //+++ 19.03.2014  не ноль - тогда что то скажем... или по предоплате!
				
		Если ОбъектКонтрагент.КонтролироватьСуммуЗадолженности тогда
			
			Отказ=Истина;
			
			#Если Клиент тогда
				текст = "У КЛИЕНТА '"+строка(ОбъектКонтрагент)+"' - ПРЕВЫШЕН ЛИМИТ на "+Формат(ТекущаяЗадолженность - ОбъектКонтрагент.ДопустимаяСуммаЗадолженности,"ЧДЦ=2")+"р.
				|   Дебиторская задолженность:  "+Формат(СуммаДебиторскаяЗадолженность,"ЧДЦ=2; ЧН=Ноль")+ ",
				| +  сумма по этому документу:  "+Формат(СуммаЗаказовПоДатеОтгрузки,"ЧДЦ=2; ЧН=Ноль")+",
				| +  сумма по другим отгрузкам: "+Формат(СуммаТекущихОтгрузокПоСкладам,"ЧДЦ=2; ЧН=Ноль")+".
				|Общий долг клиента  '"+строка(ОбъектКонтрагент)+"' составляет: "+Формат(ТекущаяЗадолженность,"ЧДЦ=2")+" р.
				|УСТАНОВЛЕННЫЙ лимит '"+строка(ОбъектКонтрагент)+"' равен: "+Формат(ОбъектКонтрагент.ДопустимаяСуммаЗадолженности,"ЧДЦ=2; ЧН=Ноль")+" р.
				|";
 				Сообщить(текст, СтатусСообщения.ОченьВажное);
			#КонецЕсли
		Иначе
			#Если Клиент тогда
				текст = "У КЛИЕНТА '"+строка(ОбъектКонтрагент)+"' - ПРЕВЫШЕН ЛИМИТ на "+Формат(ТекущаяЗадолженность - ОбъектКонтрагент.ДопустимаяСуммаЗадолженности,"ЧДЦ=2")+"р.
				|   Дебиторская задолженность:  "+Формат(СуммаДебиторскаяЗадолженность,"ЧДЦ=2; ЧН=Ноль")+ ",
				| +  сумма по этому документу:  "+Формат(СуммаЗаказовПоДатеОтгрузки,"ЧДЦ=2; ЧН=Ноль")+",
				| +  сумма по другим отгрузкам: "+Формат(СуммаТекущихОтгрузокПоСкладам,"ЧДЦ=2; ЧН=Ноль")+".
				|Общий долг клиента  '"+строка(ОбъектКонтрагент)+"' составляет: "+Формат(ТекущаяЗадолженность,"ЧДЦ=2")+" р.
				| Лимит '"+строка(ОбъектКонтрагент)+"' равен: "+Формат(ОбъектКонтрагент.ДопустимаяСуммаЗадолженности,"ЧДЦ=2; ЧН=Ноль")+" р.
				| и НЕ контролируется при отгрузках!";
				Сообщить(текст, СтатусСообщения.Информация); // 
			#КонецЕсли
		КонецЕсли;	
	КонецЕсли;
	
	//***2018.02.08 проверка превышения суммы контракта по договорам с типом ШинтрейдЯрославль (сумма контракта указывается в Бумажном договоре и действует на все договоры с этим номером по всем менеджерам)
	//а также проверка срока действия договора
	ТабДоговоровШТЯ = Новый ТаблицаЗначений;
	ТабДоговоровШТЯ.Колонки.Добавить("ДоговорКонтрагента");
	
	Если ТипЗнч(Объект) = Тип("СписокЗначений") Тогда  //Из Задания на отгрузку
		Для i=0 по списокЗак.Количество()-1 Цикл
			Если типЗнч(списокЗак[i].Значение)=Тип("ДокументОбъект.ЗаказПокупателя") ИЛИ типЗнч(списокЗак[i].Значение)=Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда	
				Объект1 = списокЗак[i].Значение.Ссылка;
			Иначе
				Объект1 = списокЗак[i].Значение;
			КонецЕсли;
			
			Если Объект1.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
				стрТЗ = ТабДоговоровШТЯ.Добавить(); 
				стрТЗ.ДоговорКонтрагента = списокЗак[i].Значение.ДоговорКонтрагента; 
				
				//сразу проверим условие по дате оплаты для заказа
				Если Объект1.ДатаОплаты > ДобавитьМесяц(Объект1.ДоговорКонтрагента.ДатаОкончанияДействия, 1) Тогда
					Отказ = Истина;
					#Если Клиент Тогда
						Сообщить("Дата оплаты по заказу " + Строка(Объект1) + " превышает допустимый лимит в днях (плюс месяц к дате окончания действия договора).", СтатусСообщения.Важное);
					#КонецЕсли	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(Объект) <> Тип("СписокЗначений") Тогда  //Из Заказа покупателя или Реализации
		Если Объект.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
			стрТЗ = ТабДоговоровШТЯ.Добавить();
			стрТЗ.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
			//сразу проверим условие по дате оплаты для заказа
			Если ТипЗнч(Объект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
				Если Объект.Сделка.ДатаОплаты > ДобавитьМесяц(Объект.ДоговорКонтрагента.ДатаОкончанияДействия, 1) Тогда
					Отказ = Истина;
					#Если Клиент Тогда
						Сообщить("Дата оплаты по заказу " + Строка(Объект.Сделка) + " превышает допустимый лимит в днях (плюс месяц к дате окончания действия договора).", СтатусСообщения.Важное);
					#КонецЕсли	
				КонецЕсли;
			Иначе
				Если Объект.ДатаОплаты > ДобавитьМесяц(Объект.ДоговорКонтрагента.ДатаОкончанияДействия, 1) Тогда
					Отказ = Истина;
					#Если Клиент Тогда
						Сообщить("Дата оплаты по заказу " + Строка(Объект) + " превышает допустимый лимит в днях (плюс месяц к дате окончания действия договора).", СтатусСообщения.Важное);
					#КонецЕсли	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ТабДоговоровШТЯ.Свернуть("ДоговорКонтрагента");
	ТабДоговоровШТЯ.Колонки.Добавить("СуммаКонтракта");
	
	Для каждого СтрТЗ ИЗ ТабДоговоровШТЯ Цикл
				
		ЗапросСуммыКонтракта = Новый Запрос;
		ЗапросСуммыКонтракта.УстановитьПараметр("НомерДоговора", СокрЛП(СтрТЗ.ДоговорКонтрагента.Номер));
		ЗапросСуммыКонтракта.Текст = "ВЫБРАТЬ
		                             |	БумажныеДоговорыСрезПоследних.СуммаДоговора
		                             |ИЗ
		                             |	РегистрСведений.БумажныеДоговоры.СрезПоследних КАК БумажныеДоговорыСрезПоследних
		                             |ГДЕ
		                             |	БумажныеДоговорыСрезПоследних.Номер ПОДОБНО &НомерДоговора";
		Результат = ЗапросСуммыКонтракта.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			СтрТЗ.СуммаКонтракта = Результат.СуммаДоговора;
		Иначе
			СтрТЗ.СуммаКонтракта = 0;
		КонецЕсли;
		
		Если НЕ СтрТЗ.СуммаКонтракта = 0 Тогда
			//проверка всех отгрузок по всем договорам без * с этим номером
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Контрагент", СтрТЗ.ДоговорКонтрагента.Владелец);
			Запрос.УстановитьПараметр("НомерДоговора", СтрТЗ.ДоговорКонтрагента.Номер);
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход, 0) КАК СуммаОтгрузокПоДоговору
			               |ИЗ
			               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
			               |			,
			               |			,
			               |			,
			               |			ДоговорКонтрагента.Владелец = &Контрагент
			               |				И ДоговорКонтрагента.Номер = &НомерДоговора
			               |				И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОбороты";
			Результат = Запрос.Выполнить().Выбрать();
			СуммаОтгрузокПоДоговору = 0;
			Если Результат.Следующий() Тогда
				СуммаОтгрузокПоДоговору = Результат.СуммаОтгрузокПоДоговору;
			КонецЕсли;			
			
			Если СуммаОтгрузокПоДоговору > СтрТЗ.СуммаКонтракта Тогда
				Отказ = Истина;
				#Если Клиент Тогда
					Сообщить("По контрагенту " + СтрТЗ.ДоговорКонтрагента.Владелец.Наименование + " превышена сумма контракта № " + СтрТЗ.ДоговорКонтрагента.Номер + ". Проведение невозможно.
					|Сумма контракта составляет " + Строка(СтрТЗ.СуммаКонтракта) + " " + СтрТЗ.ДоговорКонтрагента.ВалютаВзаиморасчетов.Наименование + ",
					|Отгружено по контракту на сумму " + Строка(СуммаОтгрузокПоДоговору) + " " + СтрТЗ.ДоговорКонтрагента.ВалютаВзаиморасчетов.Наименование, СтатусСообщения.Важное);
				#КонецЕсли	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	//***
			
КонецПроцедуры	//проверка лимита

//+++ 11.10.2017 вынесена в отдельную функция и используется 2 раза
Функция ПолучитьУсловиеБезПредоплаты(УКлиентаЕстьДоговорПоручительства, ОбъектКонтрагент, ЭтоЗаказИлиРеализация, дог1);
	
	//2 запроса вместо 4х
	дог1Номер = дог1.Номер;
	дог1ТипДоговора = дог1.ТипДоговора;
	 
	рез =(  
		//1. если есть дог.поручительства по договору с покупателем/комиссионером
				УКлиентаЕстьДоговорПоручительства
		
		//2. или у клиента ЕСТЬ Подписанная Служебная Записка
				    ИЛИ ОбъектКонтрагент.ЕстьПодписаннаяСлужебнаяЗаписка 
					
		//3. или у договора номер, начинающегося на А ------------
			 		ИЛИ (  ЭтоЗаказИлиРеализация
						 и ( врег(Лев(дог1Номер, 1)) = "А" //рус.  А или а
						   или врег(Лев(дог1Номер, 1)) = "A" //англ. A или a
				  	    )   )
			            
		//4. или это тендерные клиенты 18.05.2017  
				или дог1ТипДоговора = справочники.ТипыДоговоров.ФормулаАвтоПлюс 
				
		//5. или тип = предоплата *
				или ( дог1ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00001") и Найти(дог1.Наименование,"*")<>0) 
				
		//6. или это ИП ?!		
				или стрДлина(сокрЛП(ОбъектКонтрагент.ИНН))=12 //ИП - можно?!
		  );
		  
	Возврат рез;

КонецФункции

функция ПолучитьСуммуОстаткаЗаказано( зак1 )
	рез = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	// в валюте документа!
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток, 0) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки";
	Запрос.УстановитьПараметр("ЗаказПокупателя", зак1);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() тогда
		рез = выборка.Сумма;
		если рез<0 тогда //заказ закрыт через закрытие и удален...
			рез = 0;
		КонецЕсли;	
	КонецЕсли;
	
	возврат рез;
КонецФункции

//+++ 17.11.2017
функция ЗаказЗакрытИлиОтгруженПолностью( зак1, УчитыватьЧастичнуюОтгрузку = ЛОЖЬ )
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	тов.Номенклатура,
					|	тов.Количество
					|ПОМЕСТИТЬ ВТ_Товары
					|ИЗ
					|	Документ.ЗаказПокупателя.Товары КАК тов
					|ГДЕ
					|	тов.Ссылка = &ЗаказПокупателя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.Номенклатура,
	               |	МАКСИМУМ(ВТ.Количество) КАК Приход,
	               |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоОстаток
	               |ИЗ
	               |	ВТ_Товары КАК ВТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя
				   |			И Номенклатура В (выбрать вт.Номенклатура из ВТ_Товары как вт) 
				   |			) КАК ЗаказыПокупателейОстатки
	               |		ПО ВТ.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ.Номенклатура
	               |
	               |ИМЕЮЩИЕ
				   |	МАКСИМУМ(ВТ.Количество) + СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)) > 0
				   |;
				   |УНИЧТОЖИТЬ  ВТ_Товары"; // > не отгружен или частичная отгрузка !
				   
	Запрос.УстановитьПараметр("ЗаказПокупателя", зак1);
	Результат = Запрос.Выполнить(); //проверка отгрузок
	
	Если Результат.Пустой() тогда  //ВСЕ ТОВАРЫ из Заказа  Количество =  -Проданы  -Закрыто...
		рез = Истина;
	Иначе 
		
		рез = ЛОЖЬ; //надо проверять
		
		Если УчитыватьЧастичнуюОтгрузку тогда  
			выборка = результат.Выбрать();
			Пока выборка.Следующий() цикл // по всем товарам...
				
				// если есть хотя бы 1 частично отгруженый товар >  КоличествоОстаток<0
				Если выборка.КоличествоОстаток<0 тогда 
					рез = Истина; //считаем, что заказ "закрыт"
				КонецЕсли;	
				
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЕсли;
	
	возврат рез;
	
КонецФункции//ЗаказЗакрытИлиОтгруженПолностью()

//ТОЛЬКО из ЗаказаПокупателя - передаётся Объект целиком
Процедура ПроверитьРезервы(Объект, Отказ, таблПост=неопределено) Экспорт
	
	Если Объект.Контрагент = справочники.Контрагенты.НайтиПоКоду("93625") Тогда // для резерва
		Возврат;
	Конецесли;
	
	//+++ 14.11.2017 - 17.11.2017 по задаче № 36008 - не проверяем остатки, если заказ уже закрыт или отгружен
	Если ЗаказЗакрытИлиОтгруженПолностью(Объект.Ссылка) тогда 
		Возврат;
	КонецЕсли;	
	
	//26.05.2017 - 17.11.2017 - если уже была реализация...и не полностью отгружено... 
	//  то ТЕМ более надо контролировать остатки !!!
	//Если яштПоЗаказуБылиРеализации( Объект ) Тогда 
	//	Возврат;
	//КонецЕсли;	
	
	ЗапросКБазе =Новый Запрос;
	Транзит = Объект.Транзит;
	ЗапросКБазе.УстановитьПараметр( "Транзит",  Транзит );//+++ 11.09.2014
	ЗапросКБазе.УстановитьПараметр( "Подразделение", ?(Объект.Транзит, Объект.Подразделение, Справочники.Подразделения.ПустаяСсылка()) );//+++ 04.04.2016
	ГоловноеЯрославль=Справочники.Подразделения.НайтиПоКоду("00005");
	Если Объект.Транзит и (Объект.Подразделение.Пустая() или Объект.Подразделение=ГоловноеЯрославль) тогда // транзит на Склады с подразделением Ярославль?!
		ЗапросКБазе.УстановитьПараметр( "Подразделение", ГоловноеЯрославль );
	КонецЕсли;
	
	//12.02.2016 перед записью - берем таблицу из Объекта документа
	табл =  Объект.Товары.выгрузить(, "НомерСтроки, Номенклатура, Количество");
	
	Для каждого стр11 из Объект.Бонусы Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",стр11.Номенклатура);
		
		строки = табл.найтистроки(Отбор);
		
		Если строки.Количество()>0 Тогда 
			
			Строки[0].Количество = Строки[0].Количество + стр11.Количество;
			
		иначе
			
			Нов = табл.добавить();
			
			Нов.НомерСтроки = табл.Количество();
			Нов.Номенклатура = стр11.номенклатура;
			Нов.Количество = стр11.Количество;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросКБазе.УстановитьПараметр("Табл", табл);
	
	//ИспользоватьОстатокПостащиков = Константы.ИспользоватьДележкуЗаказовВМинус.Получить() 
	//11.01.18 Смирнов, для заказов ИМ остатки сторонних поставщиков не использовать
	//асм
	НЕИспользоватьОстатокПостащиковДляКолесаТут = истина;
	
	Если Объект.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = Справочники.НаправленияПродаж.НайтиПоКоду("16") и ЗначениеЗаполнено(Объект.Поставщик) тогда
		НЕИспользоватьОстатокПостащиковДляКолесаТут = ложь;
	КонецЕсли;
	
	ИспользоватьОстатокПостащиков = ?(Объект.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = Справочники.НаправленияПродаж.НайтиПоКоду("16") и НЕИспользоватьОстатокПостащиковДляКолесаТут, ложь, Константы.ИспользоватьДележкуЗаказовВМинус.Получить());
	
	// или константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить()
	; // старая система
	
	флИндекс = (табл.Количество()>=30); //32х32=1024 - 100х100 = 10 000
	
	ОбъектКонтрагент = Объект.Контрагент;	
	разрешенСерый  = (ОбъектКонтрагент.Экспорт или ОбъектКонтрагент.РазрешитьГрузитьТоварыИзСтопЛиста); //в контрагенте
	разрешенЧерный = (ОбъектКонтрагент.Экспорт или Объект.РазрешитьГрузитьТоварыИзСтопЛиста); //ТОЛЬКО в заказах
	
	ЗапросКБазе.Текст = "ВЫБРАТЬ
	|	ЗаказПокупателяТовары.НомерСтроки,
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Количество
	|ПОМЕСТИТЬ ВТ_ЗаказТовары
	|ИЗ
	|	&Табл КАК ЗаказПокупателяТовары
	
	//+++ 29.05.2018 - для больших таблиц (больше 32-100 строк - сокращает запрос с 13-15 до 3-4 сек (4-5х)
	|"+?(ФлИндекс, "ИНДЕКСИРОВАТЬ ПО ЗаказПокупателяТовары.Номенклатура","")+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВТЗаказТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ЕстьNull(А.КоличествоОстаток,0) ) КАК КоличествоОстаток,
	|	СУММА(ЕстьNull(А.КоличествоНаОТХ,0) ) КАК КоличествоНаОТХ
	|ПОМЕСТИТЬ ВТ_ОстаткиНаСкладахИОТХ
	|ИЗ
	| ( ВЫБРАТЬ вт2.Номенклатура из ВТ_ЗаказТовары как вт2"
	
	//---31.05.2018 ЕДИНОЕ условия (4 варианта) для всех остатков (ОСТ, ОТХ, РезерваИМ)! --------
	+?(разрешенСерый и разрешенЧерный,"", 	//все разрешено!
		"ГДЕ НЕ вт2.Номенклатура В ( ВЫБРАТЬ стопЛист.Номенклатура
		|			ИЗ РегистрСведений.НоменклатураИмпорт КАК стопЛист 
				// сразу отбираем только те же товары!
		|			ГДЕ стопЛист.Номенклатура в (ВЫБРАТЬ вт3.Номенклатура ИЗ ВТ_ЗаказТовары как вт3) "
	   	  +?(разрешенСерый и не разрешенЧерный, "И стопЛист.ЧерныйЛист = Истина", 
	   		?(не разрешенСерый и разрешенЧерный, "И стопЛист.ЧерныйЛист = ЛОЖЬ", ""))+")") 
	
	//-------------------------------------------------
	
	 +") как ВТЗаказТовары						   

	|	ЛЕВОЕ СОЕДИНЕНИЕ
	
	|(ВЫБРАТЬ
	|	ост.Номенклатура,
	|	ост.КоличествоОстаток,
	|	0 как КоличествоНаОТХ 
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, 
	|	Номенклатура В (выбрать вт.Номенклатура из ВТ_ЗаказТовары как вт)	
	|	И Склад.ЗапретитьИспользование = ЛОЖЬ
	|	И Склад.Транзитный"+?(Транзит, " И Склад.Подразделение = &Подразделение", "=ЛОЖЬ")+" 
  	|) КАК ост
	|	ГДЕ ост.КоличествоОстаток>0
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		отх.Номенклатура,
	|		0,
	|		отх.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(,
	
	|				Номенклатура в (выбрать вт.Номенклатура из ВТ_ЗаказТовары как вт )
	
	|				И Склад.ЗапретитьИспользование = ЛОЖЬ
	|				И Склад.Транзитный"+?(Транзит, " И Склад.Подразделение = &Подразделение", "=ЛОЖЬ")+"

	|				И Контрагент В (&СписокКонтрагентовОТХ) 
	|				 ) КАК отх
	|	ГДЕ отх.КоличествоОстаток>0
	
	//+++ 15.01.2016 ---- остатки по резервамИМ по КлиентуИМ, Подразделению документа и списку Номенклатуры  ---
	//                    добавляем в остатки...  
	| //ОстаткиРезерваИМ					
	|
	|   ) КАК А
	|ПО ВТЗаказТовары.Номенклатура = А.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗаказТовары.Номенклатура
	|
	//+++ 30.05.2018  ТК455707 -> более 50 сек! 
	//					снижена до 21с (7с 33%) при 1 и 9-10сек. (4-5с 52%) при повторном проведении
	//|"+?(ФлИндекс, "ИНДЕКСИРОВАТЬ ПО Номенклатура","")+"

	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаказТовары.НомерСтроки,
	|	ВТ_ЗаказТовары.Номенклатура,
	|	ВТ_ЗаказТовары.Количество КАК КоличествоВЗаказе,
	|	ВТ_ЗаказТовары.Количество + ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК КоличествоЗаказано,
	|	ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоНаОТХ, 0) КАК КоличествоНаОТХ,
	//07.11.2016  - ЕСТЬNULL(ТоварыВОжидании.Количество,0) т.к. компенсирует "-" остаток
	|"+?(ИспользоватьОстатокПостащиков,"
	|	ВТ_ЗаказТовары.Количество + ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0)
	|	- ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоОстаток, 0) - ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоНаОТХ, 0)
	//при "-" св.остатке: Заказано - ВОжидании = 0
	|	- ЕСТЬNULL(ТоварыВОжидании.Количество,0)
	|	КАК КоличествоНеХватает,
	|	ОстаткиСтороннихПоставщиков.СрокДоставки КАК СрокДоставки,
	|	ОстаткиСтороннихПоставщиков.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(ОстаткиСтороннихПоставщиков.Остаток, 0) КАК КолПост","
	|	ВТ_ЗаказТовары.Количество + ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) 
	|	- ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоОстаток, 0) - ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоНаОТХ, 0) 
	|	КАК КоличествоНеХватает,
	|   0 КАК СрокДоставки,
	|   Значение(Справочник.Контрагенты.ПустаяСсылка) как Контрагент,
	|   0 КАК КолПост")+"
	|
	|ИЗ
	|	ВТ_ЗаказТовары КАК ВТ_ЗаказТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНаСкладахИОТХ КАК ВТ_ОстаткиНаСкладахИОТХ
	|		ПО ВТ_ЗаказТовары.Номенклатура = ВТ_ОстаткиНаСкладахИОТХ.Номенклатура
	
	//+++ 29.05.2018 --- подзапрос! а не весь регистр 20 млн. записей! помещение в ВТ - тормозит сильнее!! ------------------------
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
	|ЗаказыПокупателейОст.Номенклатура, 
	|ЗаказыПокупателейОст.КоличествоОстаток
	|	из РегистрНакопления.ЗаказыПокупателей.Остатки(, Номенклатура В (ВЫБРАТЬ вт.Номенклатура ИЗ ВТ_ЗаказТовары как вт)
	|					И не ЗаказПокупателя = &Ссылка
	|					И ЗаказПокупателя.Проверен
	//|					И ЗаказПокупателя.проведен
	|					И ЗаказПокупателя.Транзит"+?(Транзит, " И ЗаказПокупателя.Подразделение = &Подразделение", "=ЛОЖЬ")+"
	|			) КАК ЗаказыПокупателейОст
	|ГДЕ ЗаказыПокупателейОст.КоличествоОстаток>0) как ЗаказыПокупателей
	|		ПО ВТ_ЗаказТовары.Номенклатура = ЗаказыПокупателей.Номенклатура
	|	
	//07.11.2016 +++++++++++++++++ сторонние поставщики++++++++++++++++++++++++++++++++++++++++++++
	|"+?(ИспользоватьОстатокПостащиков, "
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЕСТЬNULL(СрокиДоставки.СрокДоставки, 0) КАК СрокДоставки,
	|			СрокиДоставки.Поставщик КАК Контрагент,
	|			ОстаткиНоменклатурыКонтрагентов.Номенклатура КАК Номенклатура,
	|			ОстаткиНоменклатурыКонтрагентов.Остаток КАК Остаток
	|		ИЗ
	|			РегистрСведений.СрокиДоставки КАК СрокиДоставки
	//полное надо для условия, что нет остатков...
	//16.01.2017 полное >> Левое
	|				Левое соединение (ВЫБРАТЬ
	|					ОстНомКонтр.Контрагент КАК Контрагент,
	|					ОстНомКонтр.Номенклатура КАК Номенклатура,
	|					ОстНомКонтр.Подразделение КАК Подразделение,
	|					ОстНомКонтр.Остаток КАК Остаток
	|				ИЗ
	|					РегистрСведений.ОстаткиНоменклатурыКонтрагентов КАК ОстНомКонтр
	|				ГДЕ
	
	|					ОстНомКонтр.Номенклатура В (ВЫБРАТЬ ВТ.Номенклатура ИЗ ВТ_ЗаказТовары как вт)
	|					И ОстНомКонтр.Подразделение = "+?(Транзит, "&Подразделение", "Значение(Справочник.Подразделения.ПустаяСсылка)")+"
	//|29.05.2018 --- проверка остатка в 1 месте И ОстНомКонтр.Остаток > 0
	|					) КАК ОстаткиНоменклатурыКонтрагентов
	|				ПО СрокиДоставки.Поставщик = ОстаткиНоменклатурыКонтрагентов.Контрагент
	|					ГДЕ СрокиДоставки.ОТХ=ЛОЖЬ 
	|						И СрокиДоставки.СрокДоставки>0
	//16.01.2017 --- проверка остатка в 1 месте
	|				И ЕстьNull(ОстаткиНоменклатурыКонтрагентов.Остаток,0)>0 
	|					) КАК ОстаткиСтороннихПоставщиков
	|		ПО ВТ_ЗаказТовары.Номенклатура = ОстаткиСтороннихПоставщиков.Номенклатура
	|
	//------------------учет "отрицательных" свободных остатков по другим заказам----------------------------
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|	ТоварыВОжиданииОтПоставщика.Номенклатура,
	|	ТоварыВОжиданииОтПоставщика.КоличествоОборот КАК Количество
	|ИЗ
	//======================== отборы по заказам такие же как в ЗаказахПокупателей! ============================
	|	РегистрНакопления.ТоварыВОжиданииОтПоставщика.Обороты( , , , 
	|		Номенклатура В (ВЫБРАТЬ вт.Номенклатура ИЗ ВТ_ЗаказТовары как вт)
	|		И ЗаказПокупателя.Проверен
	
	//26.05.2017 - уменьшает выборку заказов почти в 10 раз
	|		И ЗаказПокупателя.проведен
	
	|		И не ЗаказПокупателя = &Ссылка
	|		И ЗаказПокупателя.Транзит"+?(Транзит, " И ЗаказПокупателя.Подразделение = &Подразделение", "=ЛОЖЬ")+"
	| ) КАК ТоварыВОжиданииОтПоставщика
	
	| ГДЕ ТоварыВОжиданииОтПоставщика.КоличествоОборот>0 
	//+++02.11.2017 - группировка не нужна при выборке по 1 измерению
	// |СГРУППИРОВАТЬ ПО
	// |	ТоварыВОжиданииОтПоставщика.Номенклатура
	// |Имеющие СУММА(ТоварыВОжиданииОтПоставщика.КоличествоОборот)>0 
	
	|		) как ТоварыВОжидании
	|ПО ВТ_ЗаказТовары.Номенклатура = ТоварыВОжидании.Номенклатура
	
	|","")+"
	//+++++++++++++++++ сторонние поставщики++++++++++++++++++++++++++++++++++++++++++++
	
	|ГДЕ
	|	ВТ_ЗаказТовары.Количество + ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) - ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоОстаток, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОстаткиНаСкладахИОТХ;
	//|УНИЧТОЖИТЬ ВТ_Заказы;
	|УНИЧТОЖИТЬ ВТ_ЗаказТовары;
	|";
	
	СписокКонтрагентовОТХ = Новый СписокЗначений;
	СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);//+++13.10.2014
	ЗапросКБазе.УстановитьПараметр("СписокКонтрагентовОТХ",СписокКонтрагентовОТХ);
		
	ЗапросКБазе.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ЗапросКБазе.УстановитьПараметр("ДатаЗаказа",Объект.Ссылка.Дата); //07.11.2016
	
	//+++ 15.01.2016 - не надо брать заказы КонтрагентаИМ - тогда св.остаток Увеличится!
	Если //НЕ Объект.Ссылка.Контрагент.КонтрагентДляРезерваИМ.Пустая() или //123Заменить
		НЕ Объект.Ссылка.ДоговорКонтрагента.КонтрагентДляРезерваИМ.Пустая()
		тогда
		ЗапросКБазе.текст = стрЗаменить(ЗапросКБазе.текст ,"//ОстаткиРезерваИМ", " ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	РезервДляИМ.Номенклатура,
		|	РезервДляИМ.КоличествоОстаток,
		|	0
		|ИЗ
		|	РегистрНакопления.РезервДляИМ.Остатки( , 
		|				Номенклатура В (ВЫБРАТЬ вт.Номенклатура ИЗ ВТ_ЗаказТовары как вт)
		|				И Подразделение = &ПодразделениеИМ
		|				И КонтрагентДляРезерваИМ = &КлиентИМ
		|											) КАК РезервДляИМ
		//+++ 30.05.2016   ТОЛЬКО  + резерв прибавляем !
		|ГДЕ
		|	РезервДляИМ.КоличествоОстаток > 0
		|"); //активируем!
		//ЗапросКБазе.УстановитьПараметр("КлиентИМ",Объект.Контрагент.КонтрагентДляРезерваИМ);  //123Заменить
		ЗапросКБазе.УстановитьПараметр("КлиентИМ",Объект.ДоговорКонтрагента.КонтрагентДляРезерваИМ);
		ЗапросКБазе.УстановитьПараметр("ПодразделениеИМ", ?(Транзит, Объект.Подразделение, Справочники.Подразделения.найтиПоКоду("00005") ) ); //+++ 07.04.2016
	КонецЕсли;
	
	Результат=ЗапросКБазе.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	//
	ФлагПревышениеОстатковОбщий = Ложь;
	N=0; Np=0; 
	таблПост = новый ТаблицаЗначений;
	таблПост.Колонки.Добавить("Номенклатура");
	таблПост.Колонки.Добавить("Количество");
	таблПост.Колонки.Добавить("НомерСтроки");	
	//+++ тоже надо передавать в заказ покупателя
	таблПост.Колонки.Добавить("Поставщик");
	таблПост.Колонки.Добавить("СрокДоставки");
	КолПост = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоНеХватает>0 Тогда
			N=N+1;	
			ФлагПревышениеОстатковОбщий = Истина; // если хоть одного товара нет - Отказ=Истина
			
			КолПост = Выборка.КолПост; 
			
			//колНеХватает в этом заказе
			КолНеХватает = мин(Выборка.КоличествоНеХватает, выборка.КоличествоВЗаказе);
			
			//+++ 07.11.2016 ------------ использование остатков сторонних поставщиков --------------------
			Если ИспользоватьОстатокПостащиков //константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() 
				и  типЗнч(Объект) = Тип("ДокументОбъект.ЗаказПокупателя") 
				тогда
				
				//19.02.18 Смирнов
				Если Объект.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = Справочники.НаправленияПродаж.НайтиПоКоду("16") тогда //заказ в производство поставщику
					КолПост = КолНеХватает;
				КонецЕсли;
				
				Если КолПост>0 и КолНеХватает<=КолПост и КолНеХватает>0 тогда
					стрПост = таблПост.Добавить();
					ЗаполнитьЗначенияСвойств(стрПост, Выборка);
					стрПост.Поставщик    = Выборка.Контрагент;
					стрПост.Количество   = КолНеХватает;
					Np = Np+1;   
				КонецЕсли;
				//19.02.18 Смирнов
				Если Объект.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = Справочники.НаправленияПродаж.НайтиПоКоду("16") тогда //заказ в производство поставщику
					стрПост.Поставщик = Объект.Поставщик; //асм
					стрПост.СрокДоставки = 30;
				КонецЕсли;
				
				#Если Клиент тогда
					текстСообщенияПользователю = "Свободного остатка "+Строка(Выборка.Номенклатура.Код)+" . "+Строка(Выборка.Номенклатура) 
					+ " не хватает в этом заказе: "+Строка(КолНеХватает) +" шт. : "+" в заказах: "+Строка(Выборка.КоличествоЗаказано) 
					+", а на складах: "+Строка(Выборка.КоличествоОстаток)+?(Выборка.КоличествоНаОТХ>0, " и на Отв.Хр.: "+Строка(Выборка.КоличествоНаОТХ),"") 
					+?(КолПост>0, " и под Заказ: "+строка(КолПост) ,"")	+" шт.";
					если КолНеХватает>0 и  КолНеХватает<=КолПост тогда
						Сообщить(текстСообщенияПользователю, СтатусСообщения.Информация);
					иначе
						СообщитьОбОшибке(текстСообщенияПользователю);
					КонецЕсли;	
				#КонецЕсли	
				
			Иначе //как было (без остатков сторонних поставщиков)
				#Если Клиент тогда
					текстСообщенияПользователю = "Свободного остатка "+Строка(Выборка.Номенклатура.Код)+" . "+Строка(Выборка.Номенклатура) 
					+ " не хватает в этом заказе: "+Строка(КолНеХватает) +" шт. : заказано: "+Строка(Выборка.КоличествоЗаказано) 
					+", остаток на складах: "+Строка(Выборка.КоличествоОстаток)+?(Выборка.КоличествоНаОТХ>0, " и на Отв.Хр.: "+Строка(Выборка.КоличествоНаОТХ),"");
					СообщитьОбОшибке(текстСообщенияПользователю);
				#КонецЕсли	
			КонецЕсли;
			
			//24.11.2016 - товара хватает, но только с учетом ОТХ или у сторонних поставщиков
		ИначеЕсли Выборка.КоличествоОстаток<Выборка.КоличествоВЗаказе тогда  
			#Если Клиент тогда
				дельта = Выборка.КоличествоВЗаказе-Выборка.КоличествоОстаток;
				если Выборка.КоличествоНаОТХ>=дельта тогда
					//Сообщить( Строка(Выборка.Номенклатура.Код)+" . "+Строка(Выборка.Номенклатура) + " для отгрузки - необходимо списать с ОТХ "
					//		 +Строка(Мин(дельта, Выборка.КоличествоНаОТХ))+ "шт. ", СтатусСообщения.Внимание);
				иначе
					Сообщить( Строка(Выборка.Номенклатура.Код)+" . "+Строка(Выборка.Номенклатура) + " товаров для отгрузки не хватает "+строка(дельта)+" шт. "
					+"На Отв.Хр.: "+ Строка(Выборка.КоличествоНаОТХ)+ " шт. и под заказ: "+строка(мин(дельта-Выборка.КоличествоНаОТХ, КолПост))+" шт.", СтатусСообщения.Внимание);
				КонецЕсли;		 
			#КонецЕсли
		КонецЕсли;	
		
	КонецЦикла;		
	
	если Np=N и Np>0 тогда //07.11.2016 все товары, которых нет в наличие - есть у поставщиков... 21.12.2016 и остаток>0
		ФлагПревышениеОстатковОбщий = ЛОЖЬ;
	КонецЕсли;	
	
	Если Объект.Проверен тогда //только проделенные заказы - не даем проводить!
		Отказ = ФлагПревышениеОстатковОбщий;	
	КонецЕсли;
	
	//+++ 11.09.2014 - 11.05.2016 - не было КОНТРОЛЯ отрицательных остатокв ДЛЯ ВСЕХ ФИЛИАЛОВ +++
	//Если Отказ и Объект.Транзит и Объект.Подразделение.ОбособленноеПодразделение тогда 
	//	Отказ = Ложь;
	//КонецЕсли;	
	//	
	
КонецПроцедуры	

Процедура ПроверитьОстаткиПоКрышкам(ДокСсылка, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяКрышки.Крышка,
	|	ЗаказПокупателяКрышки.Количество
	|ПОМЕСТИТЬ втКрышки
	|ИЗ
	|	Документ.ЗаказПокупателя.Крышки КАК ЗаказПокупателяКрышки
	|ГДЕ
	|	ЗаказПокупателяКрышки.Ссылка = &ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКрышки.Крышка,
	|	втКрышки.Количество,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Остаток,
	|	втКрышки.Крышка.Наименование КАК Наименование,
	|	втКрышки.Крышка.Код КАК Код
	|ИЗ
	|	втКрышки КАК втКрышки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				&Период,
	|				Номенклатура В (ВЫБРАТЬ втКрышки.Крышка
	|					ИЗ втКрышки КАК втКрышки) 
	//крышки только на Ярославле!
	|               и Склад.Транзитный = ЛОЖЬ
	|				) КАК ТоварыНаСкладахОстатки
	|		ПО втКрышки.Крышка = ТоварыНаСкладахОстатки.Номенклатура
	|ГДЕ
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) < втКрышки.Количество";
	
	ГраницаОстатков = Новый Граница(ДокСсылка.МоментВремени(), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("Период"         , ГраницаОстатков);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ДокСсылка);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Отказ = Истина;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			КоличНеХватает = Выборка.Количество - Выборка.Остаток;
			Сообщить("" + ДокСсылка + " :: Крышки " + Выборка.Код + " """ + Выборка.Наименование + 
				""" не хватает " + КоличНеХватает + ". На складе " + 
				Выборка.Остаток + ", а в заказе " + Выборка.Количество + ".");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьОстаткиПоКрышкам()

Процедура ПроверитьДоговорВЗаказеПокупателя(Объект, Отказ, Запретить=ЛОЖЬ, ДатаДок=неопределено) Экспорт
	
		Если Объект.ОбменДанными.Загрузка Тогда
			возврат;
		КонецЕсли;
	
		Если ТипЗнч(Объект)=Тип("ДокументОбъект.РеализацияТоваровУслуг") тогда
			Если Объект.Контрагент.ЗапретОтгрузки тогда
				#Если Клиент тогда
					Сообщить("Контрагенту '"+ Объект.Контрагент.Наименование +"' - ВСЕ ОТГРУЗКИ ЗАПРЕЩЕНЫ!",СтатусСообщения.Важное);
				#КонецЕсли
				Отказ=Истина;
				возврат;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект)=Тип("ДокументОбъект.ЗаказПокупателя") тогда
			Если Объект.Контрагент.ЗапретитьВводЗаказаПокупателя Тогда
				#Если Клиент тогда
					Сообщить("Контрагенту '"+ Объект.Контрагент.Наименование +"' - ЗАПРЕЩЕН Ввод новых 'Заказов покупателя'!",СтатусСообщения.Важное);
				#КонецЕсли
				Отказ=Истина;  // Не запрещаем!
				возврат;
			КонецЕсли;
			
			//Плотников, проверка на запрет 10.05.2017 ----------------------------------------------------
			товарыТабл = объект.Товары.Выгрузить();
			
			для каждого стр из товарыТабл Цикл
				
				Если стр.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски и Объект.Контрагент.ЗапретитьДиски Тогда
					Отказ=Истина;
					#Если Клиент тогда
						Сообщить("Вам запрещено создавать заказы с дисками!",СтатусСообщения.Важное);
					#КонецЕсли
					возврат;
				ИначеЕсли стр.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Шины и Объект.Контрагент.ЗапретитьШины Тогда
					Отказ=Истина;
					#Если Клиент тогда
						Сообщить("Вам запрещено создавать заказы с шинами!",СтатусСообщения.Важное);
					#КонецЕсли
					возврат;
				ИначеЕсли стр.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.АКБ и Объект.Контрагент.ЗапретитьАКБ Тогда
					Отказ=Истина;
					#Если Клиент тогда
						Сообщить("Вам запрещено создавать заказы с аккумуляторами!",СтатусСообщения.Важное);
					#КонецЕсли
					возврат;
				ИначеЕсли стр.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Аксессуары и Объект.Контрагент.ЗапретитьАксы Тогда
					Отказ=Истина;
					#Если Клиент тогда
						Сообщить("Вам запрещено создавать заказы с аксессуарами!",СтатусСообщения.Важное);
					#КонецЕсли
					возврат;
				КонецЕсли;
				
			КонецЦикла;
			// --------------------------------------------------------------------------------------------

		КонецЕсли;	
		
		//+++ Шарафутдинов, исключение для настройки  Отбор по региону
		ОтборПоРегиону = ложь;
		Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ИспользоватьОтбор") и ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЖурналыОтборПоРегиону")  Тогда
			ОтборПоРегиону = истина;
		КонецЕсли;	
		//--- Шарафутдинов, исключение для настройки  Отбор по региону
		
		
		
		Если ЕстьРеквизитДокумента("ДоговорКонтрагента",Объект.Метаданные()) Тогда
			ДоговорКонтрагента=Объект.ДоговорКонтрагента;
			
			Если Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
				Если Объект.ЭтоНовый() И не РольДоступна("ПолныеПрава") Тогда
					// Проверка на ответственного за договор	
					
					//+++ 02.12.2016 - есть такие менеджеры... у которых "дубли" пользователей содержат Фамилию такую же... и дополнительное уточнение...
					менДоговора = строка(ДоговорКонтрагента.ОтветственноеЛицо.Код);// логин: Нуриахметов Р. М.(Беларусь)   или Хачатурян Л.К. - РНД, - СПБ, Челышева(Снабжение), Марешева(Снабжение)
					мен0 = строка(ПараметрыСеанса.ТекущийПользователь.Код);// логин: Нуриахметов Р. М., Хачатурян Л.К.
					
					Если НЕ ( менДоговора = мен0                   // точное равенство - по своему договору
						
						//+++ 02.12.2016
						// менеджер по договору может быть (Беларусь, Филиал, Снабжение...),
						//а "основной логин" менеджера (только фамилия) - может создавать документы на свою же Фаминия+ЧтоТоТам
						или найти(менДоговора, мен0)>0 
						
						) Тогда
						Попытка
							Если НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"РазрешеноСозданиеДокументовЗаДругогоМенеджера") Тогда
								Если не ОтборПоРегиону тогда
									#Если Клиент тогда
										Сообщить("В документе "+строка(Объект.Ссылка)+" ДОЛЖЕН БЫТЬ указан договор с ответственным за договор: "+мен0
										+". Сейчас указан договор, в котором ответственный - "+менДоговора,СтатусСообщения.Важное);
									#КонецЕсли   
									Отказ=Истина;
									возврат;
								иначе
									#Если Клиент тогда
										СписокОснМенРегиона = ПолучитьСписокОсновныхМенеджеровКонтрагентовПоРегиону(ПараметрыСеанса.ТекущийПользователь);
										Если СписокОснМенРегиона.НайтиПоЗначению(ДоговорКонтрагента.ОтветственноеЛицо) = Неопределено Тогда 																					
											Сообщить("В документе "+строка(Объект.Ссылка)+" ДОЛЖЕН БЫТЬ указан договор с ответственным за договор (основным менеджером контрагента) по региону! Сейчас указан договор, в котором ответственный - "+менДоговора,СтатусСообщения.Важное);
											
											Отказ=Истина;
											возврат; 										
										КонецЕсли;  									
									#КонецЕсли   
								
								КонецЕсли;
							КонецЕсли;
						Исключение
							#Если Клиент тогда
								Сообщить("В документе "+строка(Объект.Ссылка)+" ДОЛЖЕН БЫТЬ указан договор с ответственным за договор: "+мен0
								+". Сейчас указан договор, в котором ответственный - "+менДоговора,СтатусСообщения.Важное);
							#КонецЕсли   
							Отказ=Истина;
							возврат;
							
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				ТипДоговора = ДоговорКонтрагента.ТипДоговора;
				Если (ТипДоговора=Справочники.ТипыДоговоров.Пени) ИЛИ (ТипДоговора=Справочники.ТипыДоговоров.НД) Тогда
					#Если Клиент тогда
						Сообщить("В документе: "+строка(Объект.Ссылка)+" выбран ошибочный договор. Тип договора НЕ ДОЛЖЕН быть ПЕНИ или НД.",СтатусСообщения.Важное);
					#КонецЕсли
					Отказ=Истина;
					возврат;
				КонецЕсли;	
			КонецЕсли;   
			
			Если ДатаДок=неопределено тогда //15.09.2016 на срез даты документа!
				ДатаДок=Объект.Дата;
			КонецЕсли;
			
			Если ДатаДок='00010101' тогда
				ДатаДок=ТекущаяДата();
			КонецЕсли;	
			//проверка на дату окончания и состояние договора
			Если 
				//+++ 30.01.2017 - исключение ТОЛЬКО для клиентов КолесаТУТ !
				//ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ <> справочники.Контрагенты.НайтиПоКоду("П004703") //123Заменить
				ДоговорКонтрагента.КонтрагентДляРезерваИМ <> справочники.Контрагенты.НайтиПоКоду("П004703")
				//было: не ЗначениеЗаполнено(ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ)
				
				и ДоговорКонтрагента.ТипДоговора <> справочники.ТипыДоговоров.ШинтрейдЯрославль 
				и ДоговорКонтрагента.ТипДоговора <> справочники.ТипыДоговоров.ФормулаАвтоПлюс
				и ДоговорКонтрагента.ТипДоговора <> справочники.ТипыДоговоров.НайтиПоКоду("Я0004")
				и ДоговорКонтрагента.ТипДоговора <> справочники.ТипыДоговоров.НайтиПоКоду("00015")
				и не ( ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00001") и Найти(ДоговорКонтрагента.Наименование,"*")<>0) Тогда	
				
				Если ДоговорКонтрагента.ДатаОкончанияДействия>'00010101' Тогда
					Если НачалоДня(ДатаДок)>НачалоДня(ДоговорКонтрагента.ДатаОкончанияДействия) Тогда
						#Если Клиент тогда
							Сообщить("ВНИМАНИЕ! НЕЛЬЗЯ ОТГРУЖАТЬ Контрагента: "+строка(ДоговорКонтрагента.Владелец.Наименование)
							+ " - по договору ("+СокрЛП(ДоговорКонтрагента.Код)+") '"+СокрЛП(ДоговорКонтрагента.Наименование)+"' "
							+СокрЛП(ДоговорКонтрагента.Номер)+" от "+формат(ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy")
							+ " - Срок действия договора уже истёк "+Формат(ДоговорКонтрагента.ДатаОкончанияДействия,"ДФ=dd.MM.yyyy")+"г.!!!",СтатусСообщения.ОченьВажное);
						#КонецЕсли
						
						Отказ=Запретить; //в заказе - НЕ запрещаем!? 
						
					КонецЕсли;	
				КонецЕсли;	
				
				Если ДоговорКонтрагента.СостояниеДоговора <> справочники.СостояниеДокументов.НайтиПоКоду("1")//23.09.2016
					и ДоговорКонтрагента.СостояниеДоговора <> справочники.СостояниеДокументов.НайтиПоКоду("2")
					и ДоговорКонтрагента.СостояниеДоговора <> справочники.СостояниеДокументов.НайтиПоКоду("12")
					и ДоговорКонтрагента.СостояниеДоговора <> справочники.СостояниеДокументов.НайтиПоКоду("13")
					и ДоговорКонтрагента.СостояниеДоговора <> справочники.СостояниеДокументов.НайтиПоКоду("14")
					и ДоговорКонтрагента.СостояниеДоговора <> справочники.СостояниеДокументов.НайтиПоКоду("4") Тогда
					#Если Клиент тогда
						Сообщить("Договора с контрагентом "+строка(ДоговорКонтрагента.Владелец.Наименование) +" ("+СокрЛП(ДоговорКонтрагента.Код)+") '"+СокрЛП(ДоговорКонтрагента.Наименование)+ " нет в наличии!");
					#КонецЕсли
					Отказ=Запретить; //в заказе - НЕ запрещаем!? 
				КонецЕсли;
			конецЕсли;
			
		КонецЕсли;	
	
КонецПроцедуры

Процедура ДвиженияПоРегиструОплатаТруда(ДокументОбъект) экспорт
		Для каждого стр из ДокументОбъект.ОплатаТруда цикл
			Движ = ДокументОбъект.Движения.ОплатаТруда.Добавить();
			Движ.Регистратор 	= ДокументОбъект;
			Движ.Период 		= ДокументОбъект.Дата;
			ЗаполнитьЗначенияСвойств(Движ,стр);
			
	    КонецЦикла;	

	ДокументОбъект.Движения.ДанныеПоГрузчикам.Записать(Истина);

КонецПроцедуры


//+++ 07.07.2014 ----------------------------------------------------------------
//07.11.2016 - для нового регистра
Процедура ПроверитьОстаткиПоставщиков(Объект, Отказ1, Товар=неопределено, КолПост=0) Экспорт
	
	//+++ 09.09.2014 - показываем наличие у Поставщика в Заказах покупателя!
	Если типЗнч(Объект) <> Тип("Документобъект.ЗаказПокупателя") тогда
		возврат; // ничего не проверяем! Отказ1 - не меняется!
	КонецЕсли;
	
	Если Объект.статус = перечисления.СтатусыЗаказов.Получен 
		или Объект.статус = перечисления.СтатусыЗаказов.ПолученЧастично тогда // проверка по остаткам поставщиков УЖЕ не делается!
		Возврат;
	КонецЕсли;	
	
	Если Объект.Товары.Количество()=0 тогда // пустой заказ
		Возврат; 
	КонецЕсли;
	
	Запрос = Новый Запрос;  //+++ 08.07.2014    по регистру сведений "СрокиДоставки" и "ОстаткиНоменклатурыКонтрагентов"
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОстаткиНоменклатурыКонтрагентов.Номенклатура КАК Номенклатура,
	               |	СрокиДоставки.СрокДоставки КАК СрокДоставки,
	               |	СрокиДоставки.Поставщик КАК Контрагент,
	               |	ОстаткиНоменклатурыКонтрагентов.Остаток КАК Остаток
	               |ИЗ
	               |	РегистрСведений.СрокиДоставки КАК СрокиДоставки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиНоменклатурыКонтрагентов КАК ОстаткиНоменклатурыКонтрагентов
	               |		ПО СрокиДоставки.Поставщик = ОстаткиНоменклатурыКонтрагентов.Контрагент
	               |			И (ОстаткиНоменклатурыКонтрагентов.Подразделение = &Подразделение)
	               |ГДЕ
	               |	СрокиДоставки.ОТХ = ЛОЖЬ
				   |	И СрокиДоставки.СрокДоставки>0
	               |	И ОстаткиНоменклатурыКонтрагентов.Номенклатура = &Товар
	               |	И ОстаткиНоменклатурыКонтрагентов.Остаток > 0
				   |//ОдинПоставщик
				  //07.11.2016 - несколько поставщиков для 1 товара...
	               |ИТОГИ
	               |	МАКСИМУМ(СрокДоставки),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагент),
	               |	СУММА(Остаток)
	               |ПО
	               |	Номенклатура";
				   
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Если Товар=неопределено тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст, " = &Товар", "В (&Список)");
		списокТов = новый СписокЗначений;
		списокТов.ЗагрузитьЗначения(  Объект.Товары.выгрузитьКолонку("Номенклатура")  );
		Запрос.УстановитьПараметр("Список", списокТов );
	Иначе
		Запрос.УстановитьПараметр("Товар", Товар);
	КонецЕсли;
	
	
	Если Объект.Транзит тогда Подразделение = Объект.Подразделение;
	                    иначе Подразделение = справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	
	
	Если НЕ Объект.Поставщик.Пустая() тогда // по 1 контрагенту!
	Запрос.Текст = стрЗаменить(Запрос.Текст,"//ОдинПоставщик","		И ОстаткиНоменклатурыКонтрагентов.Контрагент = &Контрагент");
	Запрос.УстановитьПараметр("Контрагент", Объект.Поставщик);
	КонецЕсли;

	
	табЗнач = Объект.Товары.Выгрузить();
	табЗнач.свернуть("Номенклатура", "Количество, НомерСтроки");
	если табЗнач.Количество()<Объект.Товары.Количество() тогда
		#Если Клиент тогда
        Сообщить("Не должно быть дублей строк с одинаковым товаром!", СтатусСообщения.Внимание);
		#КонецЕсли
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //07.11.2016
   	ИспользоватьОстатокПостащиков = Константы.ИспользоватьДележкуЗаказовВМинус.Получить();   //константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() 
	
	Пока Выборка.Следующий() Цикл
		стр1 = табЗнач.найти(выборка.Номенклатура, "Номенклатура");
		
		Если стр1.Количество > выборка.Остаток тогда
		 
		Отказ1 = Истина;  //чего то нет!
		КолПост = выборка.Остаток;
		Если ИспользоватьОстатокПостащиков тогда
			#Если Клиент тогда
			сообщить(строка(стр1.НомерСтроки)+") Недостаточно товара: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура)+": Заказано "+строка(стр1.Количество)+" а у поставщика "+Строка(выборка.Контрагент)+" есть "+строка(выборка.Остаток), СтатусСообщения.Внимание );
			#КонецЕсли
	    КонецЕсли;
		
		Иначе // есть у поставщика в полном объёме!
			Отказ1  = не ИспользоватьОстатокПостащиков;  //нет на свободном остатке, НО! есть у поставщика
			КолПост = выборка.Остаток;
			поставщики = выборка.Контрагент;
			если поставщики=1 тогда
				выборка1 = выборка.Выбрать(); 
				выборка1.Следующий();
				поставщик = выборка1.Контрагент;
			КонецЕсли;
			
			#Если Клиент тогда
			если ИспользоватьОстатокПостащиков тогда
				сообщить(строка(стр1.НомерСтроки)+") Товар: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура)
				+": Будет заказан у "+?(поставщики=1, "поставщика: "+строка(поставщик), строка(поставщики)+" поставщиков: ")
				+строка(мин(стр1.Количество,КолПост))+" шт. (срок доставки "+строка(выборка.СрокДоставки)+" дней)", СтатусСообщения.Информация );
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

//создаёт запись в рег.св. ЖурналИзменений
//
Процедура ДобавитьИзменение(ТаблицИзменений, Событие, ОбъектМД, Объект, Комментарий, НомерЗаписиТранзакции)

	НоваяСтрока = ТаблицИзменений.Добавить();
	НоваяСтрока.Период			= ОценкаПроизводительностиВызовСервераПолныеПрава.ДатаИВремяНаСервере();//+++ 18.12.2015 - СЕРВЕРНОЕ ВРЕМЯ
	НоваяСтрока.НомерСтроки		= НомерЗаписиТранзакции;
	
	НоваяСтрока.Событие 		= Событие;
	НоваяСтрока.ОбъектМетаданных= ОбъектМД;
	НоваяСтрока.Объект 			= Объект;
	НоваяСтрока.Комментарий     = Комментарий;
	
	НоваяСтрока.Компьютер		= ИмяКомпьютера();
	Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) тогда //+++ 29.06.2017 - у фоновых нет
		НоваяСтрока.Пользователь= ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;

КонецПроцедуры

//для протокола изменений объекта (справочника или документа)
Функция ОдинаковыеТабличныеЧасти(ТЗ1,ТЗ2,Расхождения)Экспорт
	
	Расхождения = Новый ТаблицаЗначений;
	Расхождения.Колонки.Добавить("Ошибка");
	КолВо1 = ТЗ1.Количество();
	КолВо2 = ТЗ2.Количество();
	КолВоСтрок = Мин(КолВо1,КолВо2);
	Для Сч = 0 по колВоСтрок-1 Цикл
		стр1 	=	ТЗ1.Получить(Сч);
		стр2	=	ТЗ2.Получить(Сч);
		Для кол = 0  по ТЗ1.Колонки.Количество()-1 Цикл
			было = стр1.получить(Кол);
			стало	=	стр2.Получить(Кол);
			Если было <> стало Тогда 						
				новстр = Расхождения.Добавить();
				новстр.Ошибка = "В строке " + Число(Сч+1) + " изменен реквизит """ + ТЗ1.колонки[кол].Имя + """. Было - " + Было + ", стало - " + стало;
			КонецЕсли;	
		КонецЦикла;
	Конеццикла;
	Если колВо1 > колВо2 тогда
		новстр = Расхождения.Добавить();
		новстр.Ошибка = "Удалено строк " + Число(колВо1 - колВо2);
	ИначеЕсли	колВо1 < колВо2 тогда
		новстр = Расхождения.Добавить();
		новстр.Ошибка = "Добавлено строк " + Число(колВо2 - колВо1);
	КонецЕсли;	
	если Расхождения.Количество() = 0 тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	Конецесли;
	
конецФункции

//+++ 25.05.2012 - процедуры записи заменены на более оптимальные и быстрые

//Процедура ЗаписатьПротоколИзменений(ТаблицаИзменений)
//	
//	НачатьТранзакцию();
//	
//	НаборЗаписейЖурналаРегистрации = РегистрыСведений.ЖурналИзменений.СоздатьНаборЗаписей();
//	
//	Для каждого СтрокаТаблицыИзменений Из ТаблицаИзменений Цикл
//		
//		СтрокаНабораЗаписейЖурналаИзменений = НаборЗаписейЖурналаРегистрации.Добавить();
//		СтрокаНабораЗаписейЖурналаИзменений.Событие = СтрокаТаблицыИзменений.Событие;
//		СтрокаНабораЗаписейЖурналаИзменений.ОбъектМетаданных = СтрокаТаблицыИзменений.ОбъектМетаданных;
//		СтрокаНабораЗаписейЖурналаИзменений.Комментарий = СтрокаТаблицыИзменений.Комментарий;
//		СтрокаНабораЗаписейЖурналаИзменений.Объект = СтрокаТаблицыИзменений.Объект;
//		СтрокаНабораЗаписейЖурналаИзменений.Пользователь = СтрокаТаблицыИзменений.Пользователь;
//		СтрокаНабораЗаписейЖурналаИзменений.Период = СтрокаТаблицыИзменений.Период;
//		СтрокаНабораЗаписейЖурналаИзменений.НомерЗаписи = СтрокаТаблицыИзменений.НомерСтроки;
//		СтрокаНабораЗаписейЖурналаИзменений.Компьютер = СтрокаТаблицыИзменений.Компьютер;
//		
//	КонецЦикла; 
//	
//	Попытка
//	
//		НаборЗаписейЖурналаРегистрации.Записать(Ложь);	
//	
//	Исключение
//		
//		ОтменитьТранзакцию();
//		
//	КонецПопытки; 
//	
//	ЗафиксироватьТранзакцию();
//	
//КонецПроцедуры
Процедура ЗаписатьПротоколИзмененийНовый(ТаблицаИзменений)
	
	//НаборЗаписейЖурналаРегистрации = РегистрыСведений.ЖурналИзменений.СоздатьНаборЗаписей();
	 СтрокаНабораЗаписейЖурналаИзменений = РегистрыСведений.ЖурналИзменений.СоздатьМенеджерЗаписи();
	
	НачатьТранзакцию(); // транзакция по все Новые записи сразу!!!
	Попытка
	    
		Для каждого СтрокаТаблицыИзменений Из ТаблицаИзменений Цикл
		
	    ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписейЖурналаИзменений, СтрокаТаблицыИзменений); 
		//СтрокаНабораЗаписейЖурналаИзменений.Событие = СтрокаТаблицыИзменений.Событие;
		//СтрокаНабораЗаписейЖурналаИзменений.ОбъектМетаданных = СтрокаТаблицыИзменений.ОбъектМетаданных;
		//СтрокаНабораЗаписейЖурналаИзменений.Комментарий = СтрокаТаблицыИзменений.Комментарий;
		//СтрокаНабораЗаписейЖурналаИзменений.Объект = СтрокаТаблицыИзменений.Объект;
		//СтрокаНабораЗаписейЖурналаИзменений.Пользователь = СтрокаТаблицыИзменений.Пользователь;
		//СтрокаНабораЗаписейЖурналаИзменений.Компьютер = СтрокаТаблицыИзменений.Компьютер;
		//СтрокаНабораЗаписейЖурналаИзменений.Период = СтрокаТаблицыИзменений.Период;
		СтрокаНабораЗаписейЖурналаИзменений.НомерЗаписи = СтрокаТаблицыИзменений.НомерСтроки;
		СтрокаНабораЗаписейЖурналаИзменений.Прочитать();
		
		ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписейЖурналаИзменений, СтрокаТаблицыИзменений); 
		СтрокаНабораЗаписейЖурналаИзменений.НомерЗаписи = СтрокаТаблицыИзменений.НомерСтроки;
		СтрокаНабораЗаписейЖурналаИзменений.Записать();
		
		 //НаборЗаписейЖурналаРегистрации.Записать(Ложь);       // не перезаписывая и не стирая старые!!!	
	 	КонецЦикла; 
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		#Если Клиент тогда
		сообщить("Не удалось записать изменения в регистр сведений ""Журнал изменений"" ! "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли
		ОтменитьТранзакцию();
	КонецПопытки; 
	

		
КонецПроцедуры

//	Если ТаблицаИзменений.Количество() > 0 Тогда
//	
//		ЗаписатьПротоколИзменений(ТаблицаИзменений);
//	
//	КонецЕсли; 
//	
//	ТаблицаИзменений = Неопределено;
//	
//КонецПроцедуры
Процедура обЗаписатьПротоколИзменений(Объект, ТолькоТабЧасть=ЛОЖЬ) Экспорт
	
	Если ТипЗнч(Объект)<>Тип("ДокументОбъект.ЗаказПокупателя") и ТипЗнч(Объект)<>Тип("СправочникОбъект.Контрагенты")и ТипЗнч(Объект)<>Тип("СправочникОбъект.ДоговорыКонтрагентов") тогда //+++( 07.12.2011  игнорируем константу для Заказов покупателей  А.А. 24.09.15 по просьбе Серкова
		Если (НЕ Константы.ВестиЖурналИзменений.Получить() ) //тогда
			или Объект.ОбменДанными.Загрузка Тогда   // +++ 24.05.2012 во всех конфигурациях - в рег.изменений НЕ пишутся изменения при обменах!
		Возврат;
		КонецЕсли;
	КонецЕсли;//++)
	
	НомерЗаписиВТранзакции = 0;
		
	//  Главный переключатель флОднойЗаписью
	// 0 запись - на все реквизиты объекта, 
	// 1,2...   - по одной записи на каждую строку каждой ТЧ (если длина текста <300 симв.)!
	флОднойЗаписью = Истина;     //+++ 25.05.2012   !!!
	текстЗаписиВТранзакции = ""; //+++ 24.05.2012
	РазделительЗаписей1 = "; ";
	
	Если Объект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;	
	
	ОбъектБД = Объект.Ссылка;
	Реквизиты = Объект.Метаданные().Реквизиты;
	ТабличныеЧасти = Объект.Метаданные().ТабличныеЧасти;
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("Пользователь");
	ТаблицаИзменений.Колонки.Добавить("Объект");
	ТаблицаИзменений.Колонки.Добавить("НомерЗаписи");
	ТаблицаИзменений.Колонки.Добавить("Компьютер");
	ТаблицаИзменений.Колонки.Добавить("Событие");
	ТаблицаИзменений.Колонки.Добавить("Период");
	ТаблицаИзменений.Колонки.Добавить("Комментарий");
	ТаблицаИзменений.Колонки.Добавить("ОбъектМетаданных");
	ТаблицаИзменений.Колонки.Добавить("НомерСтроки");
	ТаблицаИзменений.Очистить();  // только что создали, чистить не надо
	
	
ЕСЛИ НЕ ТолькоТабЧасть ТОГДА //+++( 07.12.2011  игнорируем изменение реквизитов
	
	Если ТипЗнч(Объект)<>Тип("СправочникОбъект.Контрагенты")  и ТипЗнч(Объект)<>Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
	//дата, номер для документа
	Если Найти(Объект.Метаданные().ПолноеИмя(),"Документ.") Тогда
		Если НЕ ОбъектБД.Номер = Объект.Номер Тогда
			Если флОднойЗаписью тогда
				   текстЗаписиВТранзакции = текстЗаписиВТранзакции+"Номер: "+ОбъектБД.Номер+">>"+Объект.Номер+РазделительЗаписей1;
			иначе	   
				//ЗаписьЖурналаРегистрации("Изменен номер документа.",УровеньЖурналаРегистрации.Информация,Объект.Метаданные(),Объект.Ссылка,"был: "+ОбъектБД.Номер+", стал: "+Объект.Номер);
				ДобавитьИзменение(ТаблицаИзменений, "Изменен номер документа.", Объект.Метаданные(), Объект.Ссылка, "Был: "+ОбъектБД.Номер+", стал: " + Объект.Номер, НомерЗаписиВТранзакции);
				НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
			КонецЕсли;
		КонецЕсли;	
		Если НЕ ОбъектБД.Дата = Объект.Дата Тогда
			Если флОднойЗаписью тогда
				текстЗаписиВТранзакции = текстЗаписиВТранзакции+"Дата: "+ОбъектБД.Дата +">>"+Объект.Дата+РазделительЗаписей1;
			иначе	   
			//ЗаписьЖурналаРегистрации("Изменена дата документа.",УровеньЖурналаРегистрации.Информация,Объект.Метаданные(),Объект.Ссылка,"была: "+ОбъектБД.Дата+", стала: "+Объект.Дата);
				ДобавитьИзменение(ТаблицаИзменений, "Изменена дата документа.", Объект.Метаданные(), Объект.Ссылка, "Была: "+ОбъектБД.Дата+", стала: " + Объект.Дата, НомерЗаписиВТранзакции);
				НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	//код, наименование для справочника
	Если Найти(Объект.Метаданные().ПолноеИмя(),"Справочник.") Тогда
		Если НЕ ОбъектБД.Код = Объект.Код Тогда
			Если флОднойЗаписью тогда
				текстЗаписиВТранзакции = текстЗаписиВТранзакции+"Код: "+ОбъектБД.Код +">>"+Объект.Код+РазделительЗаписей1;
			иначе	   
				//ЗаписьЖурналаРегистрации("Изменен код.",УровеньЖурналаРегистрации.Информация,Объект.Метаданные(),Объект.Ссылка,"был: "+ОбъектБД.Код+", стал: "+Объект.Код);
				ДобавитьИзменение(ТаблицаИзменений, "Изменен код.",Объект.Метаданные(),Объект.Ссылка,"Был: "+ОбъектБД.Код+", стал: "+Объект.Код, НомерЗаписиВТранзакции);
				НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
			КонецЕсли;
		КонецЕсли;	
		Если НЕ ОбъектБД.Наименование = Объект.Наименование Тогда
			Если флОднойЗаписью тогда
				текстЗаписиВТранзакции = текстЗаписиВТранзакции+"Наименование: "+ОбъектБД.Наименование +">>"+Объект.Наименование+РазделительЗаписей1;
			иначе	   
			//ЗаписьЖурналаРегистрации("Изменено наименование.",УровеньЖурналаРегистрации.Информация,Объект.Метаданные(),Объект.Ссылка,"было: "+ОбъектБД.Наименование+", стало: "+Объект.Наименование);
			ДобавитьИзменение(ТаблицаИзменений, "Изменено наименование.",Объект.Метаданные(),Объект.Ссылка,"было: "+ОбъектБД.Наименование+", стало: "+Объект.Наименование, НомерЗаписиВТранзакции);
			НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	//сначала сверим измененные реквизиты
	Для Каждого Реквизит из Реквизиты цикл
		БылРеквизит 	=	ОбъектБД[Реквизит.Имя];
		Если ТипЗнч(БылРеквизит) = Тип("ХранилищеЗначения") Тогда
			Продолжить;
		конецЕсли;
		
		СталРеквизит	=	Объект[Реквизит.Имя];
		Если  БылРеквизит <> СталРеквизит Тогда
			Если флОднойЗаписью тогда
				текстЗаписиВТранзакции = текстЗаписиВТранзакции+Реквизит+": "+БылРеквизит +">>"+СталРеквизит+РазделительЗаписей1;
			иначе	   
				//ЗаписьЖурналаРегистрации("Изменен реквизит """+Реквизит+""".",УровеньЖурналаРегистрации.Информация,Объект.Метаданные(),Объект.Ссылка,"был: "+БылРеквизит+", стал: "+СталРеквизит);
				ДобавитьИзменение(ТаблицаИзменений, "Изменен реквизит """+Реквизит+""".",Объект.Метаданные(),Объект.Ссылка,"был: "+БылРеквизит+", стал: "+СталРеквизит, НомерЗаписиВТранзакции);
				НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
			КонецЕсли;	
		Конецесли;
		
	КонецЦикла;
	КонецЕсли;
	//договорыконтрагентов. Пишем изменения для 1 реквизита   А.А. 24.09.15 по просьбе Серкова
	Если ТипЗнч(Объект)=Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		Если НЕ ОбъектБД.ЕстьДогорПоручительства = Объект.ЕстьДогорПоручительства Тогда
				ДобавитьИзменение(ТаблицаИзменений, "Изменен реквизит Есть Договор Поручительства.",Объект.Метаданные(),Объект.Ссылка,"Был: "+ОбъектБД.ЕстьДогорПоручительства+", стал: "+Объект.ЕстьДогорПоручительства+ ".Контрагент "+ Объект.Владелец.Наименование, НомерЗаписиВТранзакции);
				НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
		КонецЕсли;	
		
		//+++( 22.10.2015 - история изменений еще всех реквизитов Договора
    	Если НЕ ОбъектБД.ЕстьКопииПравоустанавливающихДокументов = Объект.ЕстьКопииПравоустанавливающихДокументов Тогда
				ДобавитьИзменение(ТаблицаИзменений, "Изменен реквизит Есть Копии Правоустанавливающих Документов.",Объект.Метаданные(),Объект.Ссылка,"Был: "+ОбъектБД.ЕстьКопииПравоустанавливающихДокументов+", стал: "+Объект.ЕстьКопииПравоустанавливающихДокументов+ ".Контрагент "+ Объект.Владелец.Наименование, НомерЗаписиВТранзакции);
				НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
		КонецЕсли;	
    	Если НЕ ОбъектБД.СостояниеДоговора = Объект.СостояниеДоговора Тогда
				ДобавитьИзменение(ТаблицаИзменений, "Изменен реквизит Состояние Договора.",Объект.Метаданные(),Объект.Ссылка,"Был: "+строка(ОбъектБД.СостояниеДоговора)+", стал: "+строка(Объект.СостояниеДоговора)+ ".Контрагент "+ Объект.Владелец.Наименование, НомерЗаписиВТранзакции);
				НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
		КонецЕсли;	
//---------------------------номер, дата, дата окончания------------------------------		
	 	Если НЕ ОбъектБД.Номер = Объект.Номер Тогда
				ДобавитьИзменение(ТаблицаИзменений, "Изменен реквизит Номер Договора.",Объект.Метаданные(),Объект.Ссылка,"Был: "+ОбъектБД.Номер+", стал: "+Объект.Номер+ ".Контрагент "+ Объект.Владелец.Наименование, НомерЗаписиВТранзакции);
				НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
		КонецЕсли;	
	 	Если НЕ ОбъектБД.Дата = Объект.Дата Тогда
				ДобавитьИзменение(ТаблицаИзменений, "Изменен реквизит Дата Договора.",Объект.Метаданные(),Объект.Ссылка,"Был: "+строка(ОбъектБД.Дата)+", стал: "+строка(Объект.Дата)+ ".Контрагент "+ Объект.Владелец.Наименование, НомерЗаписиВТранзакции);
				НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
		КонецЕсли;	
  	 	Если НЕ ОбъектБД.ДатаОкончанияДействия = Объект.ДатаОкончанияДействия Тогда
				ДобавитьИзменение(ТаблицаИзменений, "Изменен реквизит Дата Окончания Действия Договора.",Объект.Метаданные(),Объект.Ссылка,"Был: "+строка(ОбъектБД.ДатаОкончанияДействия)+", стал: "+строка(Объект.ДатаОкончанияДействия)+ ".Контрагент "+ Объект.Владелец.Наименование, НомерЗаписиВТранзакции);
				НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
		КонецЕсли;
		//+++)
		
    конецЕсли;
	
		//контрагенты. Пишем Изменения для 5 реквизитов.    А.А. 24.09.15 по просьбе Серкова

	Если ТипЗнч(Объект)=Тип("СправочникОбъект.Контрагенты") Тогда
	СписокРеквизитовДляПроверки = Новый СписокЗначений;
	СписокРеквизитовДляПроверки.Добавить("РазрешитьГрузитьПриПДЗБолееСемиДней");
	СписокРеквизитовДляПроверки.Добавить("ЗапретОтгрузки");
	СписокРеквизитовДляПроверки.Добавить("ЗапретитьВводЗаказаПокупателя");
	СписокРеквизитовДляПроверки.Добавить("ДопустимаяСуммаЗадолженности");
	СписокРеквизитовДляПроверки.Добавить("ЕстьПодписаннаяСлужебнаяЗаписка");
	СписокРеквизитовДляПроверки.Добавить("ЕстьДоговорДПД");
	
	//сначала сверим измененные реквизиты
	Для Каждого Реквизит из Реквизиты цикл
		Если СписокРеквизитовДляПроверки.НайтиПоЗначению(Реквизит.Имя)<> неопределено Тогда
		БылРеквизит 	=	ОбъектБД[Реквизит.Имя];
		Если ТипЗнч(БылРеквизит) = Тип("ХранилищеЗначения") Тогда
			Продолжить;
		конецЕсли;
		
		СталРеквизит	=	Объект[Реквизит.Имя];
		Если  БылРеквизит <> СталРеквизит Тогда
			Если флОднойЗаписью тогда
				текстЗаписиВТранзакции = текстЗаписиВТранзакции+Реквизит+": "+БылРеквизит +">>"+СталРеквизит+РазделительЗаписей1;
			иначе	   
				//ЗаписьЖурналаРегистрации("Изменен реквизит """+Реквизит+""".",УровеньЖурналаРегистрации.Информация,Объект.Метаданные(),Объект.Ссылка,"был: "+БылРеквизит+", стал: "+СталРеквизит);
				ДобавитьИзменение(ТаблицаИзменений, "Изменен реквизит """+Реквизит+""".",Объект.Метаданные(),Объект.Ссылка,"был: "+БылРеквизит+", стал: "+СталРеквизит, НомерЗаписиВТранзакции);
				НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
			КонецЕсли;	
		Конецесли;
		конецЕсли;
	КонецЦикла;

	КонецЕсли;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//+++ 24.05.2012
	Если флОднойЗаписью и текстЗаписиВТранзакции<>"" тогда
		Если стрДлина(текстЗаписиВТранзакции)<=300 тогда
			ДобавитьИзменение(ТаблицаИзменений,"Изменены поля объекта.",Объект.Метаданные(),Объект.Ссылка,текстЗаписиВТранзакции, НомерЗаписиВТранзакции);
		   	НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
			текстЗаписиВТранзакции = ""; 
		иначе
			стр1 = текстЗаписиВТранзакции;
			L = стрДлина(стр1);
			пока L>300 цикл
				текстЗаписиВТранзакции = лев(стр1,300);
				стр1 = прав(стр1, L - 300); 
				   L = стрДлина(стр1);
			ДобавитьИзменение(ТаблицаИзменений,"Изменены поля объекта.",Объект.Метаданные(),Объект.Ссылка,текстЗаписиВТранзакции, НомерЗаписиВТранзакции);
		   	НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
			текстЗаписиВТранзакции = ""; 
			КонецЦикла;
			
			ДобавитьИзменение(ТаблицаИзменений,"Изменены поля объекта.",Объект.Метаданные(),Объект.Ссылка,стр1, НомерЗаписиВТранзакции);
		   	НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
			текстЗаписиВТранзакции = ""; 
		КонецЕсли;
	КонецЕсли;		
КОНЕЦЕСЛИ;	//условие фиксирования реквизитов
	

//Табл.часть - только для документов!
Если Найти(Объект.Метаданные().ПолноеИмя(),"Документ.") Тогда  //+++ 24.05.2012 - только для документов
	 
	//теперь пройдемся по всем табличным частям
	Если НомерЗаписиВТранзакции = 0 тогда  //
		НомерЗаписиВТранзакции = 1;
	КонецЕсли;
	
	Для Каждого ТЧ из ТабличныеЧасти цикл
		текстЗаписиВТранзакции = "";   номСтр0 = 0;// для каждой ТЧ текст и номер строки свои
		
		РеквизитыТЧ = Объект.Метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты;
		ТЧ_ОбъектаБД	=	ОбъектБД[ТЧ.Имя];
		ТЧ_Объекта		=	Объект[ТЧ.Имя];
		Расхождения = Новый ТаблицаЗначений;
		Если НЕ ОдинаковыеТабличныеЧасти(ОбъектБД[ТЧ.Имя].Выгрузить(),Объект[ТЧ.Имя].Выгрузить(),Расхождения) тогда
			Если ТипЗнч(Расхождения) = Тип("ТаблицаЗначений") Тогда
				Для Каждого стр из Расхождения Цикл
					Если флОднойЗаписью тогда
						Если Лев(стр.Ошибка,9) = "В строке " тогда  //+++ 28.05.2012
							стр1 = Прав(стр.Ошибка, стрДлина(стр.Ошибка)-9 ); // "В строке "
							попытка
								номСтр1 = Число( лев(стр1,Найти(стр1," ")-1) );// 
								стр1 = прав(стр1, стрДлина(стр1) - найти(стр1,"реквизит") -8 );
								стр1 = стрЗаменить(стр1,"Было - ","");
								стр1 = стрЗаменить(стр1,", стало - ",">>");     //17 символов на 2
							исключение // доп.предохранитель
								номСтр1 = номСтр0+1;
							КонецПопытки;		
						иначе // что-то другое написано... Удалена, добавлена строка
							номСтр1 = номСтр0+1;
						КонецЕсли;
						
						Если номСтр0=номСтр1 тогда
						   текстЗаписиВТранзакции = текстЗаписиВТранзакции+стр1+РазделительЗаписей1;
						иначе
							Если текстЗаписиВТранзакции <> "" тогда //записываем предудущую строку!
								ДобавитьИзменение(ТаблицаИзменений,"Изменена табличная часть "+ТЧ.Имя+".",Объект.Метаданные(),Объект.Ссылка,текстЗаписиВТранзакции, НомерЗаписиВТранзакции);
								текстЗаписиВТранзакции = "";
						   		НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
							КонецЕсли;	
								номСтр0=номСтр1;
								текстЗаписиВТранзакции = стр.Ошибка+РазделительЗаписей1;
						КонецЕсли;
						
					иначе
						//ЗаписьЖурналаРегистрации("Изменена табличная часть "+ТЧ.Имя+".",УровеньЖурналаРегистрации.Информация,Объект.Метаданные(),Объект.Ссылка,стр.Ошибка);
						ДобавитьИзменение(ТаблицаИзменений, "Изменена табличная часть "+ТЧ.Имя+".",Объект.Метаданные(),Объект.Ссылка,стр.Ошибка, НомерЗаписиВТранзакции);
						НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
					КонецЕсли;	
				КонецЦикла;			
				
				Если флОднойЗаписью тогда
					Если текстЗаписиВТранзакции <> "" тогда //записываем последнии строку!
						ДобавитьИзменение(ТаблицаИзменений,"Изменена табличная часть "+ТЧ.Имя+".",Объект.Метаданные(),Объект.Ссылка,текстЗаписиВТранзакции, НомерЗаписиВТранзакции);
						текстЗаписиВТранзакции = "";
					   НомерЗаписиВТранзакции = НомерЗаписиВТранзакции + 1;
					КонецЕсли;	
				КонецЕсли;	
				
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецЕсли; //+++)  только для ТЧ документов

	Если ТаблицаИзменений.Количество() > 0 Тогда
		//+++ 25.05.2012   !!!
		 //ЗаписатьПротоколИзменений(ТаблицаИзменений);
 	     ЗаписатьПротоколИзмененийНовый(ТаблицаИзменений);
	КонецЕсли; 
	
	ТаблицаИзменений = Неопределено;
	
КонецПроцедуры
//+++)

//+++ 18.05.2012
// процедура ЗаписатьВЖурналИзмененийВремяВыполненияВнешнейОбработки( <КодВнешнейОбработки>, ВремяВыполнения(сек), Комментарий, Событие)
//аналогична процедуре обЗаписатьПротоколИзменений(Объект, ТолькоТабЧасть=ЛОЖЬ)
//
//параметры:
// <КодВнешнейОбработки> - число, обязательное для заполнения, иначе 0 - пустая ссылка на внешнюю обработку!
// ВремяВыполнения(сек)  - число, записывается в поле НомерЗаписи
// Комментарий - основной текст, что и как выполнялось
// Событие  - текст = "Выполнение Внешней обработки" для отбора и сортировки
// ОбъектМетаданных - неиспользуемое текстовое поле
//
процедура ЗаписатьВЖурналИзмененийВремяВыполненияВнешнейОбработки(КодВО=0, ВремяВыполнения=0, Комментарий="", Событие="Выполнение Внешней обработки") Экспорт
	
ВнешОбр = Справочники.ВнешниеОбработки.НайтиПоКоду(КодВО);
 Если ВнешОбр.РазрешитьФиксироватьВремяЗапроса тогда
	
	попытка
	НоваяСтрока = РегистрыСведений.ЖурналИзменений.СоздатьМенеджерЗаписи();
	
	//+++ 18.12.2015 - СЕРВЕРНОЕ ВРЕМЯ
	//НоваяСтрока.Период = ТекущаяДата();
	НоваяСтрока.Период = ОценкаПроизводительностиВызовСервераПолныеПрава.ДатаИВремяНаСервере();
	НоваяСтрока.Объект  = ВнешОбр;	
		
	НоваяСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	НоваяСтрока.НомерЗаписи  = ВремяВыполнения;  // в Секундах!
	
	НоваяСтрока.Компьютер = ИмяКомпьютера();
	НоваяСтрока.Событие = Событие;         // 300
	НоваяСтрока.Комментарий = Комментарий; // 300
	
	НоваяСтрока.ОбъектМетаданных = "";
		НоваяСтрока.Записать();
	исключение //нет прав или ошибка при записи
	КонецПопытки;
	
КонецЕсли;

КонецПроцедуры	


Процедура УстановитьЭлементыИсторииДляПанели(Ссылка, Форма, Панель = "Панель1") Экспорт 

	СоответствиеПанелей = Новый Соответствие;
	
	СоответствиеПанелей.Вставить(Тип("СправочникСсылка.Контрагенты"), "Панель");
	СоответствиеПанелей.Вставить(Тип("СправочникСсылка.Банки"), "Кнопка_ДействияФормы");
	СоответствиеПанелей.Вставить(Тип("СправочникСсылка.ДоговорыКонтрагентов"), "Панель");
	
	
	Если СоответствиеПанелей[ТипЗнч(Ссылка)] <> Неопределено Тогда
	
		Панель = СоответствиеПанелей[ТипЗнч(Ссылка)];
	
	КонецЕсли; 
	
	СтраницаИстории = Форма.ЭлементыФормы[Панель].Страницы.Добавить("История", "История изменений");
	
	ТекущаяСтраница = Форма.ЭлементыФормы[Панель].ТекущаяСтраница;
	
	Форма.ЭлементыФормы[Панель].ТекущаяСтраница = СтраницаИстории;
	
	// Расположим на странице табличное поле
	ПолеРегистра = Форма.ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), 
        "ТаблицаИстории", 
        Истина, 
        Форма.ЭлементыФормы[Панель]);
		
	Форма.ЭлементыФормы[Панель].ТекущаяСтраница	= ТекущаяСтраница;
	
	ПолеРегистра.ТипЗначения = Новый ОписаниеТипов("РегистрСведенийСписок.ЖурналИзменений");

	ПолеРегистра.Верх = 6;
	ПолеРегистра.Лево = 6;
	ПолеРегистра.Ширина = Форма.ЭлементыФормы[Панель].Ширина - 14;
	ПолеРегистра.Высота = Форма.ЭлементыФормы[Панель].Высота - 30;
	ПолеРегистра.ТолькоПросмотр = Истина;
	
	ПолеРегистра.СоздатьКолонки();

	////Если Метаданные.РегистрыНакопления[СтрокаТаблицы.Имя].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
	////	
	////	КолонкаВидДвижения = ПолеРегистра.Колонки.Вставить(1, "Вид движения");
	////	КолонкаВидДвижения.Имя = "ВидДвиженияРегистраНакопления";
	////	КолонкаВидДвижения.УстановитьЭлементУправления(Тип("ПолеВвода"));
	////	КолонкаВидДвижения.Данные = "ВидДвижения";
	////	КолонкаВидДвижения.ЭлементУправления.КнопкаВыбора = Истина;
	////	КолонкаВидДвижения.ЭлементУправления.ВыбиратьТип = Ложь;
	////	
	////КонецЕсли;
	////
	
	Отбор = ПолеРегистра.Значение.Отбор;
	
	Если Отбор.Найти("Объект") = Неопределено Тогда 
		Отбор.Добавить("Объект");
	КонецЕсли;
	
	Отбор["Объект"].Использование = Истина;
	Отбор["Объект"].ВидСравнения = ВидСравнения.Равно;
	Отбор["Объект"].Значение = Ссылка;
	
	ПолеРегистра.НастройкаОтбора["Объект"].Доступность = Ложь;
	
#Если Клиент тогда
	ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,
		Форма.ЭлементыФормы[Панель],
		ГраницаЭлементаУправления.Верх);
	ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,
		Форма.ЭлементыФормы[Панель],
		ГраницаЭлементаУправления.Низ);
	ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,
		Форма.ЭлементыФормы[Панель],
		ГраницаЭлементаУправления.Право);
#КонецЕсли		
	ПолеРегистра.Колонки.Компьютер.Видимость = Ложь;
	ПолеРегистра.Колонки.Объект.Видимость = Ложь;
	ПолеРегистра.Колонки.НомерЗаписи.Видимость = Ложь;
	ПолеРегистра.Колонки.ОбъектМетаданных.Видимость = Ложь;	
	

КонецПроцедуры
 
Процедура УстановитьЭлементыИсторииКнопка(Ссылка, Форма, Панель = "ДействияФормы") Экспорт 

	Если НЕ Константы.ВестиЖурналИзменений.Получить() Тогда
		
		Возврат;
		
	КонецЕсли;

	Если НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РазрешитьПросмотрИзменеийОбъектов") Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	СоответствиеПанелей = Новый Соответствие;
	
	СоответствиеПанелей.Вставить(Тип("СправочникСсылка.Контрагенты"), "КоманднаяПанельФормы");
	СоответствиеПанелей.Вставить(Тип("СправочникСсылка.ВнешниеОбработки"), "ОсновныеДействияФормы");
	//СоответствиеПанелей.Вставить(Тип("СправочникСсылка."), "");
	
	
	Если СоответствиеПанелей[ТипЗнч(Ссылка)] <> Неопределено Тогда
	
		Панель = СоответствиеПанелей[ТипЗнч(Ссылка)];
	
	КонецЕсли; 
	
   	Попытка
		
		#Если Клиент тогда
		КП = Форма.ЭлементыФормы[Панель];
		НоваяКнопка = КП.Кнопки.Добавить("РазделительИстории");
		
		КП = Форма.ЭлементыФормы[Панель];
		НовоеДействие = Новый Действие("ВыводИстории");
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		
		НоваяКнопка = КП.Кнопки.Добавить("ДействиеИстория", ТипКнопки, , НовоеДействие);
		НоваяКнопка.Картинка = БиблиотекаКартинок.Содержание;
		НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
		#КонецЕсли
		
	Исключение
		
		#Если Клиент тогда
		Сообщить("Не удалось добавить кнопку истории!", СтатусСообщения.Важное);
		#КонецЕсли
	
	КонецПопытки; 
	
КонецПроцедуры

Процедура ВывестиИсторию(Ссылка, Форма) Экспорт
	
	ФормаИстории = ПолучитьОбщуюФорму("ФормаИсторииИзменений");
	ФормаИстории.Ссылка = Ссылка;
	ФормаИстории.ОткрытьМодально();
	
КонецПроцедуры

Функция яштПоЗаказуБылиВзаиморасчеты(Сделка) Экспорт    //из всего регистра???
Запрос= Новый Запрос;
Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
             |	ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход
             |ИЗ
             |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(&Период,,,
             |		Сделка = &Сделка И ДоговорКонтрагента = &Договор) КАК ВзаиморасчетыСКонтрагентамиОбороты
             |ГДЕ
             |	ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход > 0";
Запрос.УстановитьПараметр("Сделка",Сделка);

//так быстрее должно быть!
Запрос.УстановитьПараметр("Период", ДобавитьМесяц(НачалоМесяца(Сделка.Дата),-1)  ); //взаиморасчеты по сделке не ранее месяца до её создания?!
Запрос.УстановитьПараметр("Договор", Сделка.ДоговорКонтрагента);  

Рез = Запрос.Выполнить();

возврат НЕ ( рез.Пустой() );

КонецФункции	

Функция яштПоЗаказуБылиОтгрузки(Сделка) Экспорт
	
Запрос = Новый Запрос; //08.10.2013 - отгрузки, корректировки или реализации
////+++ 19.01.2015 - по оборотам - быстрее на сервере!
Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
             |	ЗаказыПокупателей.Регистратор КАК Регистратор
             |ИЗ
             |	РегистрНакопления.ЗаказыПокупателей.Обороты(&ЗаказПокупателяДата, //Ограничение &ТекДата
			 |				, Регистратор, ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателей
             |ГДЕ
             |	ЗаказыПокупателей.КоличествоРасход > 0
		     |	или ЗаказыПокупателей.КоличествоПриход < 0
			 
			 //ЛЮБОЙ ТИП?!  НЕ НАДО учитывать  - Корректировки, Закрытие!
			 
			 //только Реализация или Розничная продажа! 
			 |//Ограничение	И (ЗаказыПокупателей.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
			 |//Ограничение		ИЛИ ЗаказыПокупателей.Регистратор ССЫЛКА Документ.ЧекККМ
			 |//Ограничение		ИЛИ ЗаказыПокупателей.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах)
			 
			 |";
			 
	 
Запрос.УстановитьПараметр("ЗаказПокупателя",Сделка);

если Сделка.ДатаОтгрузки>'00010101' тогда //дата отгрузки ставится при проведении Реализации, иначе смотрим не более  +- 7 дней ,иначе заказ закрывается (в Ярославле)
	Запрос.УстановитьПараметр("ЗаказПокупателяДата",НачалоДня(мин(Сделка.Дата, Сделка.ДатаОтгрузки))-7*86400 ); 	
	Запрос.УстановитьПараметр("ТекДата",КонецДня( макс(Сделка.Дата, Сделка.ДатаОтгрузки)) + 15*86400 ); // через 14 дней заказы закрываются!
	Запрос.Текст = стрЗаменить(Запрос.Текст, "//Ограничение", "");
	
иначе 
	//Если Сделка.ВводитьТолькоПеремещение тогда
  //  Запрос.Текст= стрЗаменить(Запрос.Текст, ".РеализацияТоваровУслуг",  ".ПеремещениеТоваров" );
 	Запрос.УстановитьПараметр("ЗаказПокупателяДата",НачалоДня(Сделка.Дата) -7*86400); //18.01.2016 реализация или корректировка - не ранее недели от Заказа!
//	Запрос.УстановитьПараметр("ТекДата", мин( КонецДня(ТекущаяДата() ), КонецДня(Сделка.Дата) + 31*86400) ); // перемещение не позднее месяца после заказа!
//Иначе
//// нет даты отгрузки и не для перемещения - значит и Реализации не было!
//	возврат ЛОЖЬ;
КонецЕсли;

Результат = Запрос.Выполнить();
Возврат (НЕ Результат.Пустой());
 	
КонецФункции

Функция яштПоЗаказуБылиРеализации(ЗакОбъект) Экспорт
	
Запрос= Новый Запрос; 
Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
             |	ВЫРАЗИТЬ(ПродажиОбороты.ДокументПродажи КАК Документ.РеализацияТоваровУслуг) КАК ДокументПродажи,
             |	СУММА(ПродажиОбороты.КоличествоОборот) КАК КолОборот
             |ИЗ
             |	РегистрНакопления.Продажи.Обороты(
             |			&ДатаНач,
             |			,
             |			,
             |			ЗаказПокупателя = &ЗаказПокупателя
             |				И ВЫРАЗИТЬ(ДокументПродажи КАК Документ.РеализацияТоваровУслуг) ССЫЛКА Документ.РеализацияТоваровУслуг) КАК ПродажиОбороты
             |
             |СГРУППИРОВАТЬ ПО
             |	ПродажиОбороты.ДокументПродажи
             |
			 //17.11.2017  может быть полный возврат товара от покупателя... тогда реализация сторнируется и реализации как бы нет...
             |ИМЕЮЩИЕ
             |	СУММА(ПродажиОбороты.КоличествоОборот) > 0
             |
             |УПОРЯДОЧИТЬ ПО
             |	ДокументПродажи
             |АВТОУПОРЯДОЧИВАНИЕ";  

Запрос.УстановитьПараметр("ЗаказПокупателя",ЗакОбъект.ссылка);
Запрос.УстановитьПараметр("ДатаНач",НачалоДня(ЗакОбъект.Дата) );     

Результат = Запрос.Выполнить();

Возврат (НЕ Результат.Пустой());
 	
КонецФункции

Функция ПолучитьЗначениеСвойстваОбъекта(Ссылка, ИмяСвойства) Экспорт

	ПустоеСвойство = ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Свойство=ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ИмяСвойства);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Если ЗначениеНеЗаполнено(Свойство) Тогда
		Возврат ПустоеСвойство;
	КонецЕсли;	
		
	
	ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов
		|
		|ГДЕ
		|	Объект = &Ссылка
		| И Свойство    = &Свойство
		|";

	Выборка = Запрос.Выполнить().Выбрать();

	ПустоеЗначение=Неопределено;
	
	Если Выборка.Количество() = 0 Тогда
		Возврат ПустоеЗначение;
	ИначеЕсли Выборка.Следующий() Тогда
		Если ЗначениеНеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;

КонецФункции // ПолучитьЗначениеПоУмолчанию()

Функция ПолучитьТаблицуДолговПоДоговору(Объект, ДоговорКонтрагента) Экспорт
Запрос = Новый Запрос;	

Если Объект.Проведен ТОГДА // получаем долги с движениями документа 
	Запрос.УстановитьПараметр("Регистратор",Объект.Ссылка);
	Запрос.Текст="ВЫБРАТЬ ДоговорКонтрагента, Сделка,СУММА(СуммаВзаиморасчетов) СуммаДолга ИЗ
	|(ВЫБРАТЬ 
	|	ДоговорКонтрагента,
	|	Сделка,
	|	СуммаВзаиморасчетов СуммаВзаиморасчетов
	|ИЗ
	|(ВЫБРАТЬ
	|	СуммаВзаиморасчетов,
	|	Сделка,
	|	ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами 
	|ГДЕ
	|	Регистратор = &Регистратор И 
	|	ДоговорКонтрагента=&ДоговорКонтрагента И
	| Сделка ССЫЛКА Документ.ЗаказПокупателя // ВЫБИРАЕМ ТЕ СДЕЛКИ НА КОТОРЫЕ УЖЕ ОТНЕСЕНЫ ДЕНЬГИ КОГДА ДОКУМЕНТ ПРОВЕДЕН
	|	) КАК ВзаиморасчетыСКонтрагентами
	|	
	|ОБЪЕДИНИТЬ	
	|	ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток  СуммаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|		,	ДоговорКонтрагента=&ДоговорКонтрагента 
	| И Сделка ССЫЛКА Документ.ЗаказПокупателя) ВзаиморасчетыСКонтрагентамиОстатки) ОстаткиСДвижениями
	|СГРУППИРОВАТЬ ПО ДоговорКонтрагента, Сделка	 
	|ИМЕЮЩИЕ СУММА(СуммаВзаиморасчетов)>0
	| УПОРЯДОЧИТЬ ПО Сделка.ДатаОплаты";
Иначе
	Запрос.Текст="ВЫБРАТЬ
	|	ДоговорКонтрагента,
	|	Сделка,
	|	СуммаВзаиморасчетовОстаток  СуммаДолга
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|		,	ДоговорКонтрагента=&ДоговорКонтрагента И Сделка ССЫЛКА Документ.ЗаказПокупателя)
	|ГДЕ СуммаВзаиморасчетовОстаток>0 
	|УПОРЯДОЧИТЬ ПО Сделка.ДатаОплаты";
КонецЕсли;	

Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
Возврат(Запрос.Выполнить().Выгрузить());
	
КонецФункции		

Функция ПроверитьВДокументеПлатежаЕстьДоговорыПользователя(Ссылка,ЭтоИсходящийПлатеж=Ложь) Экспорт
	
	 Запрос = Новый Запрос;
	 ТекстЗапроса = "ВЫБРАТЬ
	|	ППВРасшифровкаПлатежа.ДоговорКонтрагента
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ППВРасшифровкаПлатежа
	|ГДЕ
	|	ППВРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И ППВРасшифровкаПлатежа.ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ПКОРасшифровкаПлатежа.ДоговорКонтрагента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПКОРасшифровкаПлатежа
	|ГДЕ
	|	ПКОРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И ПКОРасшифровкаПлатежа.ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо";
	
	Если ЭтоИсходящийПлатеж Тогда
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"ПлатежноеПоручениеВходящее","ПлатежноеПоручениеИсходящее");
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"ПриходныйКассовыйОрдер","РасходныйКассовыйОрдер");
	КонецЕсли;	
	
	//+++ Шарафутдинов 22.05.2018
	#Если Клиент тогда
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЖурналыОтборПоРегиону")  Тогда
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо","ДоговорКонтрагента.Владелец В (&Контрагенты)");
		Запрос.УстановитьПараметр("Контрагенты", ПолучитьСписокКонтрагентовМенеджераПоРегиону(ПараметрыСеанса.ТекущийПользователь) );
	КонецЕсли;
	#КонецЕсли
	//--- Шарафутдинов 22.05.2018
	
	Запрос.Текст =ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);						
	Запрос.УстановитьПараметр("ОтветственноеЛицо",ПараметрыСеанса.ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
		
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ПолучитьТаблицуДолговКонтрагентаПоПенямИПУ(Объект) Экспорт
	// все долги проверяются на конец дня, указанного в дате оплаты
	
	Запрос = Новый Запрос;
	Если Объект.Проведен ТОГДА // получаем долги с движениями документа 
	Запрос.УстановитьПараметр("Регистратор",Объект.Ссылка);
	
	
	Запрос.Текст="ВЫБРАТЬ ДоговорКонтрагента, Сделка, 
	|ВЫБОР КОГДА ДоговорКонтрагента.ТипДоговора=&ТипДоговораПени ТОГДА 1 ИНАЧЕ 2 КОНЕЦ Приоритет,
	|СуммаДолга ИЗ
	|(ВЫБРАТЬ ДоговорКонтрагента, Сделка,СУММА(СуммаВзаиморасчетов) СуммаДолга ИЗ
	|(ВЫБРАТЬ 
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентами.Сделка,
	|	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов СуммаВзаиморасчетов
	|ИЗ
	|(ВЫБРАТЬ
	|	СуммаВзаиморасчетов,
	|	Сделка,
	|	ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами 
	|ГДЕ
	|	Регистратор = &Регистратор И 
	|	ДоговорКонтрагента.ТипДоговора В (&СписокДоговоровПенейИУслуг)
	|	) КАК ВзаиморасчетыСКонтрагентами
	|	
	|ОБЪЕДИНИТЬ	
	|	ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток  СуммаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаОплаты
	|		,	ДоговорКонтрагента.ТипДоговора В (&СписокДоговоровПенейИУслуг)
	|			И ДоговорКонтрагента.Владелец = &Контрагент) ВзаиморасчетыСКонтрагентамиОстатки) ОстаткиСДвижениями
	|СГРУППИРОВАТЬ ПО ДоговорКонтрагента, Сделка	 
	|ИМЕЮЩИЕ СУММА(СуммаВзаиморасчетов)>0) Долги
	| УПОРЯДОЧИТЬ ПО (ВЫБОР КОГДА ДоговорКонтрагента.ТипДоговора=&ТипДоговораПени ТОГДА 1 ИНАЧЕ 2 КОНЕЦ )";
Иначе
	Запрос.Текст="ВЫБРАТЬ ДоговорКонтрагента,
	| Сделка,
	|ВЫБОР КОГДА ДоговорКонтрагента.ТипДоговора=&ТипДоговораПени ТОГДА 1 ИНАЧЕ 2 КОНЕЦ Приоритет,
	|СуммаДолга ИЗ
	|(ВЫБРАТЬ ДоговорКонтрагента, 	
	|Сделка,
	|СУММА(СуммаВзаиморасчетов) СуммаДолга ИЗ
	| (ВЫБРАТЬ
	|	ДоговорКонтрагента,
	|	Сделка,
	|	СуммаВзаиморасчетовОстаток  СуммаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаОплаты
	|		,	ДоговорКонтрагента.ТипДоговора В (&СписокДоговоровПенейИУслуг)
	|			И ДоговорКонтрагента.Владелец = &Контрагент) )ВзаиморасчетыСКонтрагентамиОстатки
	|СГРУППИРОВАТЬ ПО ДоговорКонтрагента, Сделка	 
	|ИМЕЮЩИЕ СУММА(СуммаВзаиморасчетов)>0) Долги
	| УПОРЯДОЧИТЬ ПО (ВЫБОР КОГДА ДоговорКонтрагента.ТипДоговора=&ТипДоговораПени ТОГДА 1 ИНАЧЕ 2 КОНЕЦ )";
	
КонецЕсли;	

СписокДоговоровПенейИУслуг=Новый СписокЗначений;
СписокДоговоровПенейИУслуг.Добавить(Справочники.ТипыДоговоров.Пени);
//СписокДоговоровПенейИУслуг.Добавить(Справочники.ТипыДоговоров.ВозмещаемыеУслуги);

Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
Запрос.УстановитьПараметр("СписокДоговоровПенейИУслуг",СписокДоговоровПенейИУслуг);
Запрос.УстановитьПараметр("ТипДоговораПени",Справочники.ТипыДоговоров.Пени);


Если ЕстьРеквизитДокумента("ДатаОплаты",Объект.Метаданные()) Тогда
КонДата=?(ЗначениеНеЗаполнено(Объект.ДатаОплаты),Объект.Дата,Объект.ДатаОплаты);	
Иначе
КонДата=Объект.Дата;	
КонецЕсли;

//Все долги проверяются на начало следующего дня за датой оплаты
Запрос.УстановитьПараметр("ДатаОплаты",НачалоДня(КонецДня(КонДата)+1));

Возврат(Запрос.Выполнить().Выгрузить());


КонецФункции	

// Процедура ПолучитьДолгиПоставщикуПоСделке заполняет таблицу
// ТЗДолги в соответствии с датами оплат в поступлениях, а если таковые не указаны, то датами 
// оплат из заказов поставщику

Процедура ПолучитьДолгиПоставщикуПоСделке(Сделка,ОстатокДолга,ТЗДолги)  Экспорт

	
Запрос= Новый Запрос;
Запрос.Текст="ВЫБРАТЬ
|Сделка.ДоговорКонтрагента.Владелец Контрагент, Сделка.ДоговорКонтрагента ДоговорКонтрагента, 
|Сделка, Расход, ДатаОплаты ИЗ
|( ВЫБРАТЬ 
|  ВзаиморасчетыОбороты.Сделка,
|  ВЫБОР КОГДА ГрафикиВПоступлениях.СуммаОплаты>0 ТОГДА 
|  ГрафикиВПоступлениях.СуммаОплаты ИНАЧЕ ВзаиморасчетыОбороты.Расход КОНЕЦ Расход,
|  ВЫБОР КОГДА ГрафикиВПоступлениях.СуммаОплаты>0 ТОГДА 
|  ГрафикиВПоступлениях.ДатаОплаты ИНАЧЕ ВзаиморасчетыОбороты.Сделка.ДатаОплаты  КОНЕЦ ДатаОплаты
|  ИЗ
|(  ВЫБРАТЬ
|	Сделка,
|	ВЫБОР КОГДА СуммаВзаиморасчетовРасход-СуммаВзаиморасчетовПриход>0 ТОГДА
|	СуммаВзаиморасчетовРасход-СуммаВзаиморасчетовПриход
|	ИНАЧЕ
|	0
|	КОНЕЦ Расход,
|	Регистратор Регистратор
|ИЗ
|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, , Регистратор, Сделка = &Сделка) 
|	ГДЕ СуммаВзаиморасчетовРасход-СуммаВзаиморасчетовПриход>0 ) КАК ВзаиморасчетыОбороты
|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
|	Ссылка.Сделка Сделка,
|	Ссылка,
|	Дата ДатаОплаты,
|	ЕстьNULL(Ссылка.СуммаДокумента*ПроцентОплаты/100,0) СуммаОплаты
|ИЗ
|	Документ.ПоступлениеТоваровУслуг.ГрафикОплаты 
|	ГДЕ Ссылка.Проведен И Ссылка.Сделка=&Сделка) ГрафикиВПоступлениях
|ПО 	ВзаиморасчетыОбороты.Регистратор=ГрафикиВПоступлениях.Ссылка
|И ВзаиморасчетыОбороты.Сделка=ГрафикиВПоступлениях.Сделка)  А
|УПОРЯДОЧИТЬ ПО ДатаОплаты УБЫВ";

Запрос.УстановитьПараметр("Сделка",Сделка);
//Запрос.УстановитьПараметр("КонДата",КонецДня(КонДата));
НарастающийИтог=0;
Выб=Запрос.Выполнить().Выбрать();

Пока Выб.Следующий() Цикл
	
	СуммаДолгаЗачтена = Мин(Выб.Расход,Макс(ОстатокДолга-НарастающийИтог,0));
	
	Если СуммаДолгаЗачтена>0 Тогда
	новаястрока=ТЗДолги.Добавить();	
	новаястрока.ОстатокДолга=СуммаДолгаЗачтена ;
	новаястрока.ДатаОплаты=Выб.ДатаОплаты;    
	новаястрока.Контрагент=Выб.Контрагент;
	новаястрока.ДоговорКонтрагента=Выб.ДоговорКонтрагента;
	новаястрока.Сделка=Сделка;
	
	КонецЕсли;
	
НарастающийИтог=НарастающийИтог+СуммаДолгаЗачтена;	
КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверитьСрокОплаты(Объект,Отказ) Экспорт
	//Если РольДоступна("ПолныеПрава") Тогда Возврат; КонецЕсли;
	//Если НачалоДня(Объект.ДатаОтгрузки) > НачалоДня(Объект.Дата) Тогда
	//	СообщитьОбОшибке("Дату отгрузки не разрешено устанавливать позднее чем дата заказа");
	//	Отказ=Истина;
	//КонецЕсли;
	
	ОбъектДатаОтгрузки = ?(ЗначениеЗаполнено(Объект.ДатаОтгрузки), Объект.ДатаОтгрузки, Объект.Дата ); //+++  25.04.2012
	
	Если НачалоДня(ОбъектДатаОтгрузки)< НачалоДня(Объект.Дата) Тогда
		СообщитьОбОшибке("Дата отгрузки не может быть ранее даты заказа покупателя");
		Отказ=Истина;
	КонецЕсли;	
		
	Если Константы.МаксимальныйСрокСМоментаОтгрузкиДоОплаты.Получить()>0 Тогда
		Если (не ЗначениеНеЗаполнено(ОбъектДатаОтгрузки)) И (не ЗначениеНеЗаполнено(Объект.ДатаОплаты)) Тогда
			КрайняяДатаОплаты=НачалоДня(ОбъектДатаОтгрузки+86400*Константы.МаксимальныйСрокСМоментаОтгрузкиДоОплаты.Получить());
			Если НачалоДня(Объект.ДатаОплаты)> НачалоДня(КрайняяДатаОплаты) Тогда
				СообщитьОбОшибке("Дата оплаты не может быть позднее чем "+Формат(КрайняяДатаОплаты,"ДФ=dd.MM.yyyy"));
				Отказ=Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

Функция ВернутьТаблицуДоговоровКонтрагента(Организация,Контрагент,ВидДоговора="",ТипДоговора="",ОтветственноеЛицо="") Экспорт
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	 |	Ссылка ДоговорКонтрагента
	 |ИЗ Справочник.ДоговорыКонтрагентов 
	 |ГДЕ
	 |	Организация = &Организация
	 |	И Владелец = &Контрагент";
	 
Запрос.УстановитьПараметр("Организация",Организация);
Запрос.УстановитьПараметр("Контрагент",Контрагент);

Если не ЗначениеНеЗаполнено(ВидДоговора) Тогда
	Запрос.УстановитьПараметр("ВидДоговора",ВидДоговора);
	Запрос.Текст=Запрос.Текст+ " И ВидДоговора=&ВидДоговора";
КонецЕсли;	

Если не ЗначениеНеЗаполнено(ТипДоговора) Тогда
	Запрос.УстановитьПараметр("ТипДоговора",ТипДоговора);
	Запрос.Текст=Запрос.Текст+ " И ТипДоговора=&ТипДоговора";
КонецЕсли;	

Если не ЗначениеНеЗаполнено(ОтветственноеЛицо) Тогда
	Запрос.УстановитьПараметр("ОтветственноеЛицо",ОтветственноеЛицо);
	Запрос.Текст=Запрос.Текст+ " И ОтветственноеЛицо=&ОтветственноеЛицо";
КонецЕсли;	

Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьПросроченнуюЗадолженностьПоДоговору(ДоговорКонтрагента,КонДата) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СУММА(ЕстьNULL(СуммаВзаиморасчетовОстаток,0)) СуммаПросроченнойЗадолженности
	             |ИЗ
	             |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	             |	&КонДата,
	             |		ДоговорКонтрагента = &ДоговорКОнтрагента
	             |			И ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоЗаказам
	             |			И Сделка.ДатаОплаты < &КонДата)";
				 
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);	
	Запрос.УстановитьПараметр("ПоЗаказам",Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);			
	Запрос.УстановитьПараметр("КонДата",КонецДня(КонДата));				 
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаПросроченнойЗадолженности;
	Иначе
		Возврат 0;
	КонецЕсли;
КОнецФункции	

Функция ПолучитьПросроченнуюЗадолженностьПоДоговорамПродаж(Контрагент,КонДата) Экспорт
    Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СУММА(СуммаВзаиморасчетовОстаток) СуммаПросроченнойЗадолженности
	             |ИЗ
	             |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	             |		&КонДата,
	             |		ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоЗаказам
				 |			И ДоговорКонтрагента.Владелец = &Контрагент
	             |			И ДоговорКонтрагента.ВидДоговора = &СПокупателем
	             |			И Сделка.ДатаОплаты < &КонДата)";
	Запрос.УстановитьПараметр("Контрагент",Контрагент);							 
	Запрос.УстановитьПараметр("ПоЗаказам",Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);			
	Запрос.УстановитьПараметр("СПокупателем",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);			
	Запрос.УстановитьПараметр("КонДата",КонецДня(КонДата));				 
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаПросроченнойЗадолженности;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КОнецФункции

Процедура ПроставитьПараметрыПечатиДокумента(Макет, Организация, ТипДокумента) Экспорт
	
	Если НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ИспользоватьПараметрыПечати") Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкаПечатиДокументов.Организация,
	|	НастройкаПечатиДокументов.Поле,
	|	НастройкаПечатиДокументов.ВидДокумента,
	|	НастройкаПечатиДокументов.Значение
	|ИЗ
	|	РегистрСведений.НастройкаПечатиДокументов КАК НастройкаПечатиДокументов
	|ГДЕ
	|	НастройкаПечатиДокументов.ВидДокумента = &ТипДокумента
	|	И НастройкаПечатиДокументов.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Попытка
		
			Макет.Параметры[Выборка.Поле] = ?(Выборка.Значение = Неопределено, "", Выборка.Значение);
		
		Исключение
		
		КонецПопытки;	
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбработкаСостоянияДокумента(ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	
	Если ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Если ЕстьРеквизитДокумента("Состояние", ДанныеСтроки.Ссылка.Метаданные()) Тогда
			
			Если Не ЗначениеНеЗаполнено(ДанныеСтроки.Ссылка.Состояние) Тогда
				
				Попытка
					
					Если СокрЛП(ДанныеСтроки.Ссылка.Состояние.ЦветСостояния) <> ""
						ИЛИ СокрЛП(ДанныеСтроки.Ссылка.Состояние.ЦветСостояния) <> "Нет цвета" Тогда
						
						ОформлениеСтроки.ЦветТекста = WebЦвета[ДанныеСтроки.Ссылка.Состояние.ЦветСостояния];
						
					КонецЕсли; 	
					
					
				Исключение
					;
				КонецПопытки; 
				
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьВводНаОснованииЗаявки(ДокументСсылка,Отказ) Экспорт
	
	Если НЕ Константы.ВводитьИсходящиеПлатежиТолькоНаОснованииЗаявки.Получить() Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") И
		   ((ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику И ДокументСсылка.Контрагент.Родитель <> Справочники.Контрагенты.НайтиПоКоду("90277")) //банки исключаются из проверки
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
		ИЛИ (ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств И ДокументСсылка.Контрагент.Родитель <> Справочники.Контрагенты.НайтиПоКоду("90277"))) //банки исключаются из проверки, по ним оформляется комиссия прочим расходом
		Тогда
		Для Каждого строкаРасшифровкаПлатежа ИЗ ДокументСсылка.РасшифровкаПлатежа Цикл
			Если ЗначениеНеЗаполнено(строкаРасшифровкаПлатежа.ДокументПланированияПлатежа)
				ИЛИ строкаРасшифровкаПлатежа.ДокументПланированияПлатежа.Состояние <> Перечисления.СостоянияОбъектов.Утвержден Тогда
				#Если Клиент тогда
					Сообщить("В строке расшифровки платежа № "+ Строка(строкаРасшифровкаПлатежа.НомерСтроки) + " должна быть указана УТВЕРЖДЕННАЯ Заявка на расходование д/с.",СтатусСообщения.Важное);
				#КонецЕсли
				Отказ=Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;		 
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка)= Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если (ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
			) Тогда
			Для Каждого строкаРасшифровкаПлатежа ИЗ ДокументСсылка.РасшифровкаПлатежа Цикл
				Если ЗначениеНеЗаполнено(строкаРасшифровкаПлатежа.ДокументПланированияПлатежа)
					ИЛИ строкаРасшифровкаПлатежа.ДокументПланированияПлатежа.Состояние <> Перечисления.СостоянияОбъектов.Утвержден Тогда
						#Если Клиент тогда
							Сообщить("В строке расшифровки платежа № "+ Строка(строкаРасшифровкаПлатежа.НомерСтроки) + " должна быть указана УТВЕРЖДЕННАЯ Заявка на расходование д/с.",СтатусСообщения.Важное);
						#КонецЕсли
					Если ДокументСсылка.Подразделение.ОбособленноеПодразделение Тогда
						Отказ=Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКомментарийДляОбменаПоРознице(Объект,Отказ) Экспорт
	Если Объект.Контрагент.Код="00405" Тогда // Формула
		СтрокаКодСклада=СокрЛП(Объект.Комментарий);
		Если СтрДлина(СтрокаКодСклада)>=5 Тогда
			СтрокаКодСклада=Сред(СтрокаКодСклада,СтрДлина(СтрокаКодСклада)-4,5);
			Если СтрокаКодСклада="00063" ИЛИ СтрокаКодСклада="00061" ИЛИ СтрокаКодСклада="00075" // Шины
				ИЛИ СтрокаКодСклада="00112" ИЛИ СтрокаКодСклада="00117" Тогда // АКБ
				Возврат;
			
			КонецЕсли;	
		КонецЕсли;		
		 //+++ 20.11.2012 - только для клиента...
				 #Если Клиент тогда
				 Сообщить("В поле ""Комментарий"" необходимо указание кода склада для контрагента "+Строка(Объект.Контрагент),СтатусСообщения.Важное);
				 #КонецЕсли
		Отказ=Истина;
	КонецЕсли;	
КонецПроцедуры	

Функция ПолучитьЗадолженностьПоКонтрагенту(Контрагент,КонДата) Экспорт
    Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("КонДата",КонДата);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.Текст ="ВЫБРАТЬ
	              |	СуммаВзаиморасчетовОстаток  СуммаДолга
	              |ИЗ
	              |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&КонДата, ДоговорКонтрагента.Владелец = &Контрагент)";
				  
				  Выборка = Запрос.Выполнить().Выбрать();				  
				  
				  Если Выборка.Следующий() Тогда
					  Возврат  Выборка.СуммаДолга;
				  КонецЕсли;	
		Возврат  0;
	КонецФункции
	
Функция ПолучитьВесНетто(Номенклатура) Экспорт
Если ЗначениеНеЗаполнено(Номенклатура) Тогда	
	Возврат 0;
КонецЕсли;	
Если ЗначениеНеЗаполнено(Номенклатура.ЕдиницаХраненияОстатков) Тогда
	Возврат 0;
КонецЕсли;

//Вес=Номенклатура.ЕдиницаХраненияОстатков.Вес/ ?(Номенклатура.ЕдиницаХраненияОстатков.Объем>0,1,Номенклатура.ЕдиницаХраненияОстатков.Объем);
// пока без объема
Вес=Номенклатура.ЕдиницаХраненияОстатков.Вес;

Возврат Вес; 	
КонецФункции	

Функция ПолучитьОбщийВесНетто (ТабличнаяЧастьОбъекта) Экспорт
	ВесИтого=0;
	Для каждого Строка Из ТабличнаяЧастьОбъекта Цикл
		ВесИтого=ВесИтого+ ПолучитьВесНетто(Строка.Номенклатура)*Строка.Количество;
	КонецЦикла;
	Возврат ВесИтого;
КонецФункции	

Процедура ЗаполнитьВесНетто(ТабличнаяЧастьОбъекта) Экспорт
	Для каждого Строка Из ТабличнаяЧастьОбъекта Цикл
		Строка.Вес=ПолучитьВесНетто(Строка.Номенклатура)*Строка.Количество;
	КонецЦикла;
	
КонецПроцедуры	

Функция ПолучитьВесБрутто(СтрокаНоменклатура,СсылкаНаДокумент,ВесДиски=0,
	ВесИмпорт=0,ВесВыходные=0) Экспорт
	Если ЗначениеНеЗаполнено(СтрокаНоменклатура.Номенклатура) Тогда	
		Возврат 0;
	КонецЕсли;	
	Если ЗначениеНеЗаполнено(СтрокаНоменклатура.Номенклатура.ЕдиницаХраненияОстатков) Тогда
		Возврат 0;
	КонецЕсли;
	
	// пока без объема
	ВесНетто=СтрокаНоменклатура.Вес;
	Вес=ВесНетто;
	
	ВесДиски=0;
	ВесИмпорт=0;
	ВесВыходные=0;
	
	СсылкаГрузовые=Справочники.Номенклатура.НайтиПоКоду("0001748"); // папка Грузовые шины
	
	Если СтрокаНоменклатура.Номенклатура.ВидТовара=Перечисления.ВидыТоваров.Диски Тогда
		ВесДиски=ВесНетто;	
	ИначеЕсли СтрокаНоменклатура.Номенклатура.ВидТовара=Перечисления.ВидыТоваров.Шины И 
		СтрокаНоменклатура.Номенклатура.Импорт И НЕ СтрокаНоменклатура.Номенклатура.ПринадлежитЭлементу(СсылкаГрузовые) Тогда
		ВесИмпорт=0.2*ВесНетто;	
	КонецЕсли;	
	
	Если ДеньНедели (СсылкаНаДокумент.Дата) = 6 ИЛИ ДеньНедели (СсылкаНаДокумент.Дата) = 7 ТОГДА
		ВесВыходные=ВесНетто;	
	КонецЕсли;	
	
	Если (     ТипЗнч(СсылкаНаДокумент) =Тип("ДокументСсылка.РеализацияТоваровУслуг")
		   или ТипЗнч(СсылкаНаДокумент) =Тип("ДокументСсылка.ПоступлениеТоваровУслуг") //+++ 03.12.2014
		 ) И СсылкаНаДокумент.Переработка Тогда
		ВесВыходные=ВесНетто;	
	КонецЕсли;		
	
	Вес=ВесНетто+ВесДиски+ВесИмпорт+ВесВыходные;
	Возврат Вес;
КонецФункции	

Процедура ДвиженияРегистровГрузчикиИКладовщики(ДокументОбъект, ДельтаПеремещения=0.5)  Экспорт
	// не учитываем погрузку-разгрузку, если не заполнена таб. часть по грузчикам
	Если ДокументОбъект.ДанныеПоПогрузке.Количество()=0 Тогда
		Возврат;
	КонецЕсли;	
	Если ДокументОбъект.Товары.Количество()>0 Тогда
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|А.Грузчик,
	|СУММА(А.ВесНетто) ВесНетто,
	|СУММА(А.ВесДиски) ВесДиски,
	|СУММА(А.ВесИмпорт) ВесИмпорт,
	|СУММА(А.ВесВыходные) ВесВыходные
	|//СУММА(А.ВесПеремещение) ВесПеремещение,
	|//СУММА(А.ВесНетто)+СУММА(А.ВесДиски)+СУММА(А.ВесИмпорт)+СУММА(А.ВесПеремещение)+СУММА(А.ВесВыходные) ВесБрутто
	|ИЗ
	|(ВЫБРАТЬ
	|
	|А.Номенклатура,
	|А.Грузчик,
	|
	|ВЫРАЗИТЬ (А.ВесИмпорт*А.КТУ/А.КТУПоДокументу КАК ЧИСЛО(10,3)) ВесИмпорт,
	|ВЫРАЗИТЬ (А.ВесДиски*А.КТУ/А.КТУПоДокументу КАК ЧИСЛО(10,3)) ВесДиски,
	|ВЫРАЗИТЬ (А.ВесВыходные*А.КТУ/А.КТУПоДокументу КАК ЧИСЛО(10,3)) ВесВыходные,
	|ВЫРАЗИТЬ (А.ВесНетто*А.КТУ/А.КТУПоДокументу КАК ЧИСЛО(10,3)) ВесНетто
	|//ВЫРАЗИТЬ (А.ВесПеремещение*А.КТУ/А.КТУПоДокументу КАК ЧИСЛО(10,3)) ВесПеремещение
	|ИЗ
	|(
	|ВЫБРАТЬ
	|ДокументТовары.ВесДиски,
	|ДокументТовары.ВесИмпорт,
	|ДокументТовары.ВесВыходные,
	|ДокументТовары.Номенклатура,
	|ДокументТовары.Вес ВесНетто,
	|//ДокументТовары.ВесПеремещение ВесПеремещение,
	|ДанныеПоПогрузке.Грузчик,
	|ДанныеПоПогрузке.КТУ,
	|ИтогПоКТУ.КТУПоДокументу
	|ИЗ
 	| (ВЫБРАТЬ
	| ВЫБОР КОГДА (Номенклатура.ВидТовара=&Диски 
	//29.10.2014 - 06.09.2017 для Аксессуаров то же самое! коэффициент 2 - ручной перенос
	//|			ИЛИ Номенклатура.ВидТовара=&Аксессуары
	| ) ТОГДА Вес
	
	//06.09.2017 - по задаче от Фролова № 32367 - был коэффициент 2, стал  5 !
	|КОГДА Номенклатура.ВидТовара=&Аксессуары
	|ТОГДА Вес * 4 
	
	//29.10.2014 - 06.09.2017 для АКБ - коэффициент 2,5 - ручной перенос + вредность (дельта = 1,5)
	| когда Номенклатура.ВидТовара=&АКБ
    //|       тогда Вес*1.5
	// 06.09.2017  по задаче от Фролова № 32367 -  был коэффициент 2,5 стал 5
     |       тогда Вес * 4  
	| Иначе 0 
	| КОНЕЦ ВесДиски,
	| 
	| ВЫБОР КОГДА Номенклатура.ВидТовара=&Шины И Номенклатура.Импорт И Номенклатура НЕ В ИЕРАРХИИ(&ГрузовыеШины)
	| ТОГДА Вес
	| ИНАЧЕ 0
	| КОНЕЦ ВесИмпорт,
	| 0 ВесВыходные,
	|//ВЫБОР КОГДА &Ссылка Ссылка Документ.ПеремещениеТоваров ТОГДА
	| //Вес*0.5
	| //ИНАЧЕ
	| //0
	|//КОНЕЦ ВесПеремещение,
	|	Номенклатура,
	|	Вес
	|ИЗ  Документ.ОперацияПоОтветственномуХранению.Товары 
	|ГДЕ Ссылка = &Ссылка ) ДокументТовары 
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ	Грузчик,
	|	Вес КТУ
	|ИЗ  Документ.ОперацияПоОтветственномуХранению.ДанныеПоПогрузке
	|ГДЕ Ссылка = &Ссылка ) ДанныеПоПогрузке
	|ПО Истина
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ	
	|	выбор когда СУММА(Вес)=0 тогда 1 иначе СУММА(Вес) Конец КТУПоДокументу
	// заменяется на нужный тип из ДокументОбъект
	|ИЗ  Документ.ОперацияПоОтветственномуХранению.ДанныеПоПогрузке
	|ГДЕ Ссылка = &Ссылка ) ИтогПоКТУ
	|ПО Истина 
	| ) А ) А
	|СГРУППИРОВАТЬ ПО А.Грузчик";

	Запрос.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Диски",Перечисления.ВидыТоваров.Диски);
	
	Запрос.УстановитьПараметр("АКБ",Перечисления.ВидыТоваров.АКБ);  			    //+++ 28.10.2014
	Запрос.УстановитьПараметр("Аксессуары",Перечисления.ВидыТоваров.Аксессуары);    //+++ 29.10.2014
	
	Запрос.УстановитьПараметр("Шины",Перечисления.ВидыТоваров.Шины);
	Запрос.УстановитьПараметр("ГрузовыеШины",Справочники.Номенклатура.НайтиПоКоду("0080631"));
	// в запросе меняем вид документа
	Запрос.Текст = СтрЗаменить( Запрос.Текст, "ОперацияПоОтветственномуХранению", ДокументОбъект.Метаданные().Имя );
	Выборка=Запрос.Выполнить().Выбрать();
	
	
	//+++( 16.06.2016 -----------------------------------------------------------------------------------------------------------
	//ПризнакПереработки =  (      ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.РеализацияТоваровУслуг")
	// 						или  ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг")  		   //+++ 03.12.2014
	// 						)  И ДокументОбъект.Ссылка.Переработка;
	//==> стало: для любого типа документа (надо учитывать и ОТХ)
	ПризнакПереработки =  ЛОЖЬ;
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("Переработка")<>Неопределено Тогда 
	  ПризнакПереработки = ДокументОбъект.Ссылка.Переработка;
	КонецЕсли;  
    //++)
	
	
	//+++ 28.10.2014 - все дельты на 1 меньше коэффициентов
	
	//при перемещении на ангарИ - ДельтаПеремещения=1 и все делится/2
		ДельтаДискиАКБАксессуары= 1   *2*ДельтаПеремещения; 	//  =Константы.КоэффициентВагона.Получить()-1;
	    ДельтаИмпорт 	        = 0.2 *2*ДельтаПеремещения;   // =Константы.КоэффициентПерекатки.Получить()-1 ;
        ДельтаВыходные 			= ?(ПризнакПереработки, 1, 0)  *2*ДельтаПеремещения;
		
		//весРеальный    = ДокументОбъект.Товары.Итог("Вес");
		//весПоГрузчикам = 0;  весПолный = 0;
	Пока Выборка.Следующий() Цикл
			Движ = ДокументОбъект.Движения.ДанныеПоГрузчикам.Добавить();
			Движ.Регистратор 	= ДокументОбъект;
			Движ.Период 		= ДокументОбъект.Дата;
			Движ.Сотрудник		= Выборка.Грузчик;
			Движ.ВесНетто		= Выборка.ВесНетто;
			
			Движ.ВесДиски		=Выборка.ВесДиски  * ДельтаДискиАКБАксессуары; // +1 вес    -> Диски и Аксессуары - коэффициент = 2(1+Коэфф)!   АКБ = 2,5 (1+1,5*Коэфф)! 

			Движ.ВесИмпорт		=Выборка.ВесИмпорт * ДельтаИмпорт;  //  +0.2
			
			Движ.ВесВыходные	=Выборка.ВесНетто  * ДельтаВыходные;  // +1 всегда! (для Дисков коэфф.=3, АКБ=3,5 в выходной или при переработке!)
			
			Движ.ВесПеремещения = ?(ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.ПеремещениеТоваров")
			                         , Выборка.ВесНетто * ДельтаПеремещения   // +0.5 обычно (они же разгружают, если Ангар-И то +1  (ВесПеремещения = 1/2 нетто или 1 нетто)
									 , 0); // для реализаций и поступлений - 0
			
			Движ.Вес		=Движ.ВесНетто+Движ.ВесДиски+Движ.ВесИмпорт+Движ.ВесВыходные+Движ.ВесПеремещения;
			
			//весПоГрузчикам = весПоГрузчикам + Движ.ВесНетто;
			//КоэффПеремещения = ?(ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.ПеремещениеТоваров"),
			//					   2*(ДельтаПеремещения-0.5), 0 ); // 0 или 1
			//	весПолный    = весПолный + Движ.Вес / (1 + КоэффПеремещения); // при перемещении весь вес <=  и обратно весь вес =>
	КонецЦикла;	
	
	////------------ тест. разности в весе ----------------
	//#Если Клиент тогда
	//	N = ДокументОбъект.ДанныеПоПогрузке.Количество();
	//	ВесНаОдного = (весПоГрузчикам -весРеальный)/?(N=0,1,N);
	//	если ВесНаОдного<-0.001 или ВесНаОдного>0.001 тогда
	//		сообщить("Разность в весе: "+формат(весПоГрузчикам,"ЧДЦ=3")+" - "+формат(весРеальный,"ЧДЦ=3")+" = "+формат(весПоГрузчикам - весРеальный,"ЧДЦ=3")+" Кг./"+строка(N)+"Чел. = "+формат( ВесНаОдного ,"ЧДЦ=3")+" Кг./Чел.)");
	//	КонецЕсли;
	//  сообщить("Средний коэффициент по весу для грузчиков: " + формат( ?(весРеальный=0,1, весПолный / весРеальный), "ЧДЦ=1") ); 
	//#КонецЕсли

	ДокументОбъект.Движения.ДанныеПоГрузчикам.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДанныеКонтактнойИнформации(Объект, ТипИнформации = Неопределено, ВидИнформации = Неопределено) Экспорт

	Запрос = Новый Запрос;
	
	СтрокаВиртуальныхПараметров = "КонтактнаяИнформация.Объект = &Объект";
	
	Если ТипИнформации <> Неопределено Тогда
		СтрокаВиртуальныхПараметров = СтрокаВиртуальныхПараметров + " И КонтактнаяИнформация.Тип = &Тип";
		Запрос.УстановитьПараметр("Тип", ТипИнформации);
	КонецЕсли; 
	Если ВидИнформации <> Неопределено Тогда
		СтрокаВиртуальныхПараметров = СтрокаВиртуальныхПараметров + " И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Вид", ВидИнформации);
	КонецЕсли; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Объект        КАК Объект,
	|	КонтактнаяИнформация.Вид           КАК Вид,
	|	КонтактнаяИнформация.Тип           КАК Тип,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|ГДЕ
	|	" + СтрокаВиртуальныхПараметров + "
	|";
	Запрос.УстановитьПараметр("Объект", Объект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеКонтактнойИнформации()

Функция ПолучитьВесНеттоИзТипоразмера(НоменклатураСсылка,Типоразмер)  Экспорт
	Если ЗначениеНеЗаполнено(НоменклатураСсылка) Тогда Возврат 0; КонецЕсли;
	
	Если НоменклатураСсылка.ВидТовара=Перечисления.ВидыТоваров.Шины
		ИЛИ НоменклатураСсылка.ВидТовара=Перечисления.ВидыТоваров.Диски Тогда
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|Ном.Ссылка Номенклатура,
		|ЕстьNULL(НормыЗагрузки.Вес,0) Вес
		|ИЗ
		|Справочник.Номенклатура как Ном
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|Справочник.НормыЗагрузки  НормыЗагрузки
		|По (НормыЗагрузки.ВидПродукции = Ном.ВидТовара) И (НормыЗагрузки.Типоразмер = &Типоразмер)
		|ГДЕ (не Ном.Ссылка.Услуга И Ном.Ссылка =&Ссылка)	И НЕ ЕстьNULL(НормыЗагрузки.Вес,0)=0
		|Упорядочить по Ном.Ссылка.Наименование";
		Запрос.УстановитьПараметр("Ссылка",НоменклатураСсылка);
		Запрос.УстановитьПараметр("Типоразмер",Типоразмер);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Вес;
		КонецЕсли;
		Возврат 0;
	Иначе	
		Возврат 0;
	КонецЕсли;

КонецФункции	

Процедура яштУстановитьЗначениеСвойстваОбъекта(Объект,Свойство,Значение)  Экспорт
	
	Если ЗначениеНеЗаполнено(Объект) ИЛИ ЗначениеНеЗаполнено(Объект) ИЛИ ЗначениеНеЗаполнено(Значение)	Тогда
		 Возврат;
	КонецЕсли;	
		
	стрНП=РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();

	стрНП.Объект = Объект;
	стрНП.Свойство = Свойство;
	стрНП.Прочитать();
	Если стрНП.Выбран() Тогда // нашел ключ
		Если стрНП.Значение<>Значение Тогда
		стрНП.Значение=	Значение;
		стрНП.Записать();	
	    КонецЕсли;
	Иначе // не нашел ключ, создаем новую запись
	стрНП.Объект = Объект;	
	стрНП.Свойство = Свойство;
	стрНП.Значение=	Значение;
	стрНП.Записать();	
	КонецЕсли;	
	
	
КонецПроцедуры	
	
// Процедура ПоказатьОбъем() аналогична РаботаСДиалогами.ПоказатьКодАртикул()
//
//добавляет информацию о коде и/или артикуле в ячейки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля - коллекция колонок табличного поля
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля
//  Номенклатура - СправочникСсылка.Номенклатура, товар, по которому надо вывести код и/или артикул
//
Процедура ПоказатьОбъем(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, Номенклатура) Экспорт
	точн = 6;
	Если КолонкиТабПоля.Объем.Видимость Тогда
		Если Номенклатура <> Неопределено Тогда
			ОбъемВычисленный = ВычислитьОбъемНоменклатуры(Номенклатура,точн) * ЯчейкиСтрокиТабПоля.Количество.Значение;
		 	ЯчейкиСтрокиТабПоля.Объем.УстановитьТекст( Формат(ОбъемВычисленный,"ЧДЦ="+строка(точн)+"; ЧВН=") );
		Иначе
			ЯчейкиСтрокиТабПоля.Объем.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры	

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
	//Объем диска  V = (Диаметр*Дюйм+0.05)^2 * (Ширина*Дюйм+0.05)
	//
	//Объем Шины = D*D*Ш*мм*0.94;
	//где 
	// D = d*Дюйм + 2* Ш*мм *H/100;
	//
	//	d - посадочный диаметр
	//  Ш – ширина шины
	//	H – Высота профиля покрышки
	//	D – Наружный диаметр 
	//
	// для дисков используется "квадратный" объем с зазором в 5 см. 
	// для "идеально круглого" объема нужен коэффициент = 78.54%
	//
	// для шин используется "объемный коэффициент скругления" 94%, 
	// который на 20% больше "идеально круглого"
//	
//результат в куб.метрах (м3) 
// поэтому результат до 6-го знака это до 1 куб.см (мл) !!!	
//
Функция ВычислитьОбъемНоменклатуры(Номенклатура, ТочностьРез=6) экспорт
		
	Если Номенклатура = неопределено тогда
		Возврат 0;
	КонецЕсли;	
	Если Номенклатура = Справочники.Номенклатура.ПустаяСсылка() тогда
		Возврат 0;
	КонецЕсли;	
	
	Если ТипЗнч(Номенклатура)=Тип("СправочникСсылка.Номенклатура") тогда
		видТовара = Номенклатура.ВидТовара;
		видШины = перечисления.ВидыТоваров.Шины;
		видДиски= перечисления.ВидыТоваров.Диски;
		видАКБ  = перечисления.ВидыТоваров.АКБ;
		тр = Номенклатура.Типоразмер;
	иначеЕсли ТипЗнч(Номенклатура)=Тип("СправочникСсылка.Типоразмеры") тогда
		видТовара = Номенклатура.Родитель;
		видШины = Справочники.Типоразмеры.НайтиПоКоду(11);
		видДиски= Справочники.Типоразмеры.НайтиПоКоду(232);
		видАКБ  = Справочники.Типоразмеры.НайтиПоКоду(18678);
		тр = Номенклатура;
	КонецЕсли;	
	
	Дюйм = 0.0254;//(в метрах) 1 дюйм = 2.54 см (точно!)
	мм   = 0.001; //(в метрах) 1 мм.
//-----------------------------------------
Диаметр = 0; Ширина = 0; d=0; Ш=0; H=0;
попытка
	 	// Диаметр диска
		Диаметр = ?(тр.Диаметр="", 0, число(тр.Диаметр));
		//	d - посадочный диаметр
		d = Диаметр;
		
		//  Ш – ширина диска/шины
		Ширина = ?(тр.Ширина="", 0, число(тр.Ширина));
		Ш = Ширина;
		
		//	H – Высота профиля покрышки
		H = ?(тр.Высота="", 0, число(тр.Высота));
исключение
	Диаметр = 0; Ширина = 0; d=0; Ш=0; H=0;
КонецПопытки;
		
//--------------добавлены проверки и сообщения на 0---------------------------
	рез = 0;
	Если видТовара = видДиски тогда
		//Объем диска  V = (Диаметр*0.0254+0.05)*(Диаметр*0.0254+0.05)*(Ширина*0.0254+0.05)
		зазор = 0.05; // зазор по Ш/В/Г = 5 см. (по 25 мм (по дюйму?) с каждой стороны)
		Если d=0 тогда
		  //+++ 20.11.2012 - только для клиента...
				 #Если Клиент тогда
				 //сообщить("Не определен Диаметр в типоразмере: "+строка(тр)+" для "+строка(Номенклатура)+"! Расчет объема будет неправильным!",СтатусСообщения.Внимание );
				 #КонецЕсли
	    КонецЕсли;
	
		Если Ширина=0 тогда  // "Ширина" в дюймах, "Ш" в мм !!!
			 Ширина = Диаметр * 0.5; // иначе объем будет практически равен нулю !!!
		//	 сообщить("Не определена Ширина в типоразмере: "+строка(тр)+" для "+строка(Номенклатура)+" ! Для расчета объема будет использоваться Ш=(d*50%)="+строка(Ширина),СтатусСообщения.Информация );
		КонецЕсли;	
		
		рез = (Диаметр*Дюйм+зазор)*(Диаметр*Дюйм+зазор)*(Ширина*Дюйм+зазор);
	
	иначеЕсли видТовара = видШины тогда
		// D – Наружный диаметр
		// D = d*Дюйм + 2* Ш*мм *H/100; 
		
		Если d=0 тогда
			d = ?(Ш>0,  2 * Ш,  15); // если есть ширина, то диаметр в 2 раза больше, иначе 15"
		КонецЕсли;
		
		Если d>100 тогда //тогда это в мм, а нам надо в дюймах
			 d = d/25.4;
		КонецЕсли;
		
		Если Ш=0 тогда // "Ширина" в дюймах, "Ш" в мм !!!
			 Ш = d * 25.4 * 0.5; // доп.объем =  Ш*Ш * 1.5
		//	 сообщить("Не определена Ширина в типоразмере: "+строка(тр)+" для "+строка(Номенклатура)+" ! Для расчета объема будет использоваться Ш=(d*50%)="+строка(Ш),СтатусСообщения.Информация );
		иначеЕсли Ш<50 тогда
			 Ш = Ш * 25.4; // доп.объем =  Ш*Ш * 1.5
		//	 сообщить("Ширина менее 50 мм или задана в Дюймах! В типоразмере "+строка(тр)+" для "+строка(Номенклатура)+" ! Для расчета объема будет использоваться Ширина в миллиметрах!  Ш(дюйм=25.4мм)="+строка(Ш),СтатусСообщения.Информация );
		КонецЕсли;	
		
    
		Если H=0 Тогда
			H=75; // доп.объем =  Ш*Ш * 1.5
		//	сообщить("Не определена Высота профиля в типоразмере "+строка(тр)+" для "+строка(Номенклатура)+" ! Для расчета объема будет использоваться H="+строка(H)+"%",СтатусСообщения.Информация );
		ИначеЕсли H>0 И H<1 Тогда // в долях а не в %
		//	сообщить("Неверно задана Высота профиля = "+строка(H)+" (в долях, а не в %) в типоразмере "+строка(тр)+" для "+строка(Номенклатура)+" ! Для расчета объема будет использоваться H="+строка(H*100)+"%",СтатусСообщения.Информация );
			H = H * 100;
		КонецЕсли;	
		
		D = d*Дюйм + 2 * Ш*мм * H/100;  // (в метрах)
	
		// "квадратный объем" умножаем на 
		//"объемный коэффициент скругления" не может быть менее пи/4 = 0.7854 до 1.0000
		окс = 0.94;  // почти на 20% больше от идеального круга
		рез = D*D*(Ш*мм)*окс;
	ИначеЕсли видТовара = видАКБ Тогда //+++ для АКБ - объём по типоразмеру
    	 Рез =  число(?(тр.Ширина="","0",тр.Ширина)) 
		      * число(?(тр.Высота="","0", тр.Высота))
			  * число(?(тр.Диаметр="","0", тр.Диаметр)) * мм * мм * мм;
		 Если рез = 0 Тогда
			 Рез=Номенклатура.ЕдиницаХраненияОстатков.Объем;
         КонецЕсли;
	Иначе //+++ 06.04.2015 - для ВСЕХ! Если видТовара=Перечисления.ВидыТоваров.Аксессуары тогда
		Если ЗначениеЗаполнено(Номенклатура.ЕдиницаХраненияОстатков) Тогда
			Рез=Номенклатура.ЕдиницаХраненияОстатков.Объем;
		КонецЕсли;
	КонецЕсли;	

	возврат Окр(рез, ТочностьРез); // округяем результат сразу, т.к. минимальная погрешность не менее 5 куб.см ! 0. 000 005
	
КонецФункции	

//+++Функция возвращает информацию об ответственных лицах организации и их должностях 
Функция ОтветственныеЛицаПодразделения(Подразделение, ДатаСреза, Исполнитель = Неопределено) Экспорт

	Результат = Новый Структура("Руководитель, РуководительДолжность, ГлавныйБухгалтер, Кассир, Исполнитель, ИсполнительДолжность, ОтветственныйЗаРегистры");

	Если Подразделение <> Неопределено тогда

		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("Подразделение", Подразделение);
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.Текст = "ВЫБРАТЬ
		                      |	ОтветственныеЛицаПодразделенийСрезПоследних.ОтветственноеЛицо,
		                      |	ОтветственныеЛицаПодразделенийСрезПоследних.Должность КАК Должность,
		                      |	ВЫБОР
		                      |		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
		                      |			ТОГДА ОтветственныеЛицаПодразделенийСрезПоследних.ФизическоеЛицо.Наименование
		                      |		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		                      |				ИНАЧЕ """"
		                      |			КОНЕЦ + ВЫБОР
		                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		                      |				ИНАЧЕ """"
		                      |			КОНЕЦ
		                      |	КОНЕЦ КАК ФИОПолное
		                      |ИЗ
		                      |	РегистрСведений.ОтветственныеЛицаПодразделений.СрезПоследних(&ДатаСреза, Подразделение = &Подразделение) КАК ОтветственныеЛицаПодразделенийСрезПоследних
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
		                      |		ПО ОтветственныеЛицаПодразделенийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.Руководитель Тогда
				Результат.Руководитель            = Выборка.ФИОПолное;
				Результат.РуководительДолжность   = Выборка.Должность;

			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;

			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.Кассир Тогда
				Результат.Кассир                  = Выборка.ФИОПолное;

			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.ОтветственныйЗаНалоговыеРегистры Тогда
				Результат.ОтветственныйЗаРегистры = Выборка.ФИОПолное;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтветственныеЛицаОрганизации()

//функция проверки наличия "+" остатков по регистру ЗаказыПокупателя по документу "Заказ покупателя"
//нужна для ограничения доступа по "-" движению
//
Функция ЕстьЗаказанныйТоварПоЗаказу(Заказ, ТаблНом=неопределено,ВыводитьСообщения=истина) Экспорт
	рез = Ложь;
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
               |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК Количество
               |ИЗ
               |	РегистрНакопления.ЗаказыПокупателей.Остатки(,ЗаказПокупателя = &Заказ
               |//И Номенклатура В (&СписокНом)
			   |) КАК ЗаказыПокупателейОстатки
               |
               |СГРУППИРОВАТЬ ПО
               |	ЗаказыПокупателейОстатки.Номенклатура
			   |Имеющие
			   |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток)<>0";

Запрос.УстановитьПараметр("Заказ", Заказ );
Если ТаблНом<>неопределено Тогда
	Запрос.текст = стрЗаменить(Запрос.текст, "//И Номенклатура В (&СписокНом)", "И Номенклатура В (&СписокНом)");
	Запрос.УстановитьПараметр("СписокНом", ТаблНом.ВыгрузитьКолонку("Номенклатура") );
КонецЕсли;

Результат = Запрос.Выполнить();
ВыборкаТЗ = Результат.выгрузить();

Если ТаблНом=неопределено Тогда
рез = (ВыборкаТЗ.Количество()>0);	
	Если не рез и ВыводитьСообщения тогда
		СообщитьОбОшибке("По заказу "+строка(Заказ)+" - нет заказанного товара!");
	КонецЕсли;
Иначе
	рез = (ВыборкаТЗ.Количество()>0);
	Если рез тогда
	для i=0 по ТаблНом.Количество()-1 цикл
		стрТов = ВыборкаТЗ.найти(ТаблНом[i].Номенклатура, "Номенклатура");
		Если стрТов = неопределено тогда
			если ВыводитьСообщения тогда
				СообщитьОбОшибке("По заказу "+строка(Заказ)+" - нет заказанного товара: "+строка(ТаблНом[i].Номенклатура));
			КонецЕсли;	
			рез = ложь;
		иначеЕсли стрТов.Количество<0  тогда 
			если ВыводитьСообщения тогда
				СообщитьОбОшибке("По заказу "+строка(Заказ)+" - есть отрицательное количество заказанного товара: "+строка(ТаблНом[i].Номенклатура)+" в количестве: "+строка(стрТов.Количество)); // !!
			КонецЕсли;	
			рез = ложь;
		иначеЕсли стрТов.Количество<ТаблНом[i].Количество тогда
			если ВыводитьСообщения тогда
				СообщитьОбОшибке("По заказу "+строка(Заказ)+" - не заказано товара: "+строка(ТаблНом[i].Номенклатура)+" в количестве: "+строка(стрТов.Количество-ТаблНом[i].Количество));
			КонецЕсли;	
			рез = ложь;
		КонецЕсли;	
	КонецЦикла;
	иначеЕсли ВыводитьСообщения тогда
		СообщитьОбОшибке("По заказу "+строка(Заказ)+" - нет заказанного товара!");
	КонецЕсли;
КонецЕсли;

Возврат рез;

КонецФункции	

//функция проверяет Клиента по Юр.Адресу (по классификатору!)
Процедура ПроверитьНаДистрибьютера(Объект, Отказ) Экспорт
	//Отказ=ложь;
	РегионКонтрагента="";
	ГородКонтрагента="";
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	КонтактнаяИнформация.Объект,
	             |	КонтактнаяИнформация.Представление,
	             |	КонтактнаяИнформация.Поле2 КАК Регион,
	             |	КонтактнаяИнформация.Поле4 КАК Город
	             |ИЗ
	             |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	             |ГДЕ
	             | КонтактнаяИнформация.Объект = &Объект
				 |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	             |	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)
	             |	И КонтактнаяИнформация.Поле2 <> """"";
	Запрос.УстановитьПараметр("Объект",Объект.Контрагент);
	Результат = Запрос.Выполнить();
	если не Результат.Пустой() тогда
		рез = Результат.Выбрать();                      
		рез.Следующий();
		РегионКонтрагента=нрег(Рез.Регион);
		РегионКонтрагента=стрЗаменить(РегионКонтрагента," область","");
		РегионКонтрагента=стрЗаменить(РегионКонтрагента," край","");
		РегионКонтрагента=стрЗаменить(РегионКонтрагента," Респ","");
		РегионКонтрагента=стрЗаменить(РегионКонтрагента," обл","");
		РегионКонтрагента=стрЗаменить(РегионКонтрагента," АО","");
		РегионКонтрагента=стрЗаменить(РегионКонтрагента," Аобл","");
		ГородКонтрагента=нрег(Рез.Город);
		ГородКонтрагента=стрЗаменить(ГородКонтрагента," область","");
		ГородКонтрагента=стрЗаменить(ГородКонтрагента," край","");
		ГородКонтрагента=стрЗаменить(ГородКонтрагента," Респ","");
		ГородКонтрагента=стрЗаменить(ГородКонтрагента," обл","");
		ГородКонтрагента=стрЗаменить(ГородКонтрагента," г","");
	Иначе // у клиента нет факт.адреса - далее проверка по юр.адресу
		Запрос.Текст= стрЗаменить(Запрос.Текст, ".ФактАдресКонтрагента", ".ЮрАдресКонтрагента");
		Результат = Запрос.Выполнить();
		если не Результат.Пустой() тогда
		рез = Результат.Выбрать();                      
		рез.Следующий();
		РегионКонтрагента=нрег(Рез.Регион);
		РегионКонтрагента=стрЗаменить(РегионКонтрагента," область","");
		РегионКонтрагента=стрЗаменить(РегионКонтрагента," край","");
		РегионКонтрагента=стрЗаменить(РегионКонтрагента," Респ","");
		РегионКонтрагента=стрЗаменить(РегионКонтрагента," обл","");
		РегионКонтрагента=стрЗаменить(РегионКонтрагента," АО","");
		РегионКонтрагента=стрЗаменить(РегионКонтрагента," Аобл","");
		ГородКонтрагента=нрег(Рез.Город);
		ГородКонтрагента=стрЗаменить(ГородКонтрагента," область","");
		ГородКонтрагента=стрЗаменить(ГородКонтрагента," край","");
		ГородКонтрагента=стрЗаменить(ГородКонтрагента," Респ","");
		ГородКонтрагента=стрЗаменить(ГородКонтрагента," обл","");
		ГородКонтрагента=стрЗаменить(ГородКонтрагента," г","");
        КонецЕсли;
	КонецЕсли;
	//
	Если РегионКонтрагента<>"" или ГородКонтрагента<>"" тогда
		Запрос=Новый Запрос;
		                //правил по регистру дистр.
		Запрос.Текст="ВЫБРАТЬ *
		             |ПОМЕСТИТЬ втДистрибьютерыВРегионе
		             |ИЗ
		             |	РегистрСведений.СписокДистрибьютеров КАК СписокДистрибьютеров
		             |ГДЕ
					 //------------------период действия правила, если он задан-------------------
					 |	СписокДистрибьютеров.НачДата <= &ДатаДок
		             |	И (&ДатаДок <= СписокДистрибьютеров.КонДата
		             |			ИЛИ СписокДистрибьютеров.КонДата = ДАТАВРЕМЯ(1, 1, 1))
					 
					 
					//+++ 14.04.2015 - учет запрещения отгрузки везде, кроме этого региона для всех! 
					 //|       и (СписокДистрибьютеров.Область ПОДОБНО &Регион
					 //|            	ИЛИ СписокДистрибьютеров.Область ПОДОБНО &Город)
					 
					 |	И( (  СписокДистрибьютеров.Запрещено = ЛОЖЬ
					 |       и (СписокДистрибьютеров.Область ПОДОБНО &Регион
					 |            	ИЛИ СписокДистрибьютеров.Область ПОДОБНО &Город)
					 |      ) 
					 |  или ( СписокДистрибьютеров.Запрещено 
					 //|		и не (СписокДистрибьютеров.Область ПОДОБНО &Регион
					 //|            	ИЛИ СписокДистрибьютеров.Область ПОДОБНО &Город)
					 |    )  )
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ЗаказПокупателяТовары.Номенклатура.Производитель КАК Производитель,
		             |	ЗаказПокупателяТовары.Номенклатура.Родитель КАК Папка,
		             |	ЗаказПокупателяТовары.Ссылка.Контрагент
		             |ПОМЕСТИТЬ втПроизводителиИзЗаказа
		             |ИЗ
		             |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		             |ГДЕ
		             |	ЗаказПокупателяТовары.Ссылка = &ЗаказСсылка
		             |	И ЗаказПокупателяТовары.Номенклатура.Производитель В
		             |			(ВЫБРАТЬ Производитель ИЗ втДистрибьютерыВРегионе)
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	вт_ДистрибьютерыВРегионе.Контрагент,
		             |	вт_ДистрибьютерыВРегионе.Производитель,
		             |	вт_ДистрибьютерыВРегионе.Папка,
					 |	вт_ДистрибьютерыВРегионе.Область,
					 |	вт_ДистрибьютерыВРегионе.Запрещено
		             |ИЗ
		             |	втДистрибьютерыВРегионе КАК вт_ДистрибьютерыВРегионе
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПроизводителиИзЗаказа КАК втПроизводителиИзЗаказа
		             |		ПО вт_ДистрибьютерыВРегионе.Производитель = втПроизводителиИзЗаказа.Производитель
		             |			И (ВЫБОР
		             |				КОГДА вт_ДистрибьютерыВРегионе.Папка = ЗНАЧЕНИЕ(справочник.Номенклатура.ПустаяСсылка)
		             |					ТОГДА ИСТИНА
		             |				ИНАЧЕ втПроизводителиИзЗаказа.Папка = вт_ДистрибьютерыВРегионе.Папка
		             |			КОНЕЦ)
		             |		И (НЕ вт_ДистрибьютерыВРегионе.Контрагент = втПроизводителиИзЗаказа.Контрагент)
					 |";
					 Запрос.УстановитьПараметр("Регион","%"+?(РегионКонтрагента="","Малые бельдяжки",РегионКонтрагента)+"%");
					 Запрос.УстановитьПараметр("Город","%"+?(ГородКонтрагента="","Большие бельдяжки",ГородКонтрагента)+"%");
					 Запрос.УстановитьПараметр("ДатаДок", Макс(Объект.Дата, Объект.ДатаОтгрузки) ); //ДатаОтгрузки!
					 Запрос.УстановитьПараметр("ЗаказСсылка",Объект.Ссылка);
					 Запрос.УстановитьПараметр("ЗаказСсылка",Объект.Ссылка);
					 Рез=Запрос.Выполнить();
					 тз=Рез.Выгрузить();
					 РезДистрибьютеры=Рез.Выбрать();
					 
					 Отказ1=ложь;
					 Пока  РезДистрибьютеры.Следующий() Цикл
						 
						 Если РегионКонтрагента = нрег( РезДистрибьютеры.Область ) 
							 и РезДистрибьютеры.Запрещено тогда
								 Отказ1=ЛОЖЬ; // как только есть одно из условий - тогда можно!
							 прервать;
						 КонецЕсли;	 
						 
						Отказ1 = ИСТИНА;
						
					КонецЦикла;
										 
					 //-------------Только если отказ по этому условию - тогда ОТКАЗ ---------------------
					Если Отказ1 тогда
						 
					РезДистрибьютеры=Рез.Выбрать(); // еще раз	 
					Пока  РезДистрибьютеры.Следующий() Цикл
						
						Если НЕ (РегионКонтрагента = нрег( РезДистрибьютеры.Область ) 
							     и РезДистрибьютеры.Запрещено) тогда

					        Если РольДоступна("ПолныеПрава") и найти(строка(ПараметрыСеанса.ТекущийПользователь),"Робот")=0  тогда
								 #Если Клиент тогда
								 Сообщить("Контрагенту: "+строка(Объект.Контрагент)+" - Не рекомендуется продавать товары марки: "+ строка(РезДистрибьютеры.Производитель)+" "
									 +?(строка(РезДистрибьютеры.Папка)="", "", " (из папки: "+строка(РезДистрибьютеры.Папка)+")") +",
									 |в регион: "+РегионКонтрагента+" обл., "+?(РезДистрибьютеры.Запрещено, " т.к. разрешены продажи только в регионе: "+СокрЛП(РезДистрибьютеры.Область)+" обл.","")
									 
									 +?(СокрЛП(РезДистрибьютеры.Контрагент)="", "", "т.к. дистрибьютером в этом регионе является <"+СокрЛП(РезДистрибьютеры.Контрагент)+">."),СтатусСообщения.Важное);
								 #КонецЕсли
								 прервать;
							 Иначе
								 #Если Клиент тогда
								 Сообщить("Контрагенту: "+строка(Объект.Контрагент)+" - Запрещено продавать товары марки: "+ строка(РезДистрибьютеры.Производитель)+" "
									 +?(строка(РезДистрибьютеры.Папка)="", "", " (из папки: "+строка(РезДистрибьютеры.Папка)+")") +",
									 |в регион: "+РегионКонтрагента+" обл., "+?(РезДистрибьютеры.Запрещено, " т.к. разрешены продажи только в регионе: "+СокрЛП(РезДистрибьютеры.Область)+" обл.","")
									 
									 +?(СокрЛП(РезДистрибьютеры.Контрагент)="", "", "т.к. дистрибьютером в этом регионе является <"+СокрЛП(РезДистрибьютеры.Контрагент)+">."),СтатусСообщения.Важное);
										 #КонецЕсли
								 Отказ=Истина;
								 прервать;
							 КонецЕсли;
						КонецЕсли;	 
					 КонецЦикла;
					 
  			        КонецЕсли; //Если Отказ1 тогда

		КонецЕсли;//Если РегионКонтрагента<>"" или ГородКонтрагента<>"" 
				
				
КонецПроцедуры

// Функция осуществляет загрузку судебных дел по переданному ИНН в регистр "данные по судебным делам"
// пока сайт и остальные данные задаются фиксированно
Процедура ЗагрузитьСудебныеДелаПоИНН(ИНН) Экспорт
	
	Страница = 0;
	ДатаНач = '2010-01-01';
	ДатаКон = '2015-12-31';
	
	Пока Истина Цикл 
		Страница = Страница + 1;
		Ошибка = Ложь;
				
		Попытка
			WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
			WinHttp.Option(2,"utf-8");
			WinHttp.Open("POST","http://kad.arbitr.ru/Kad/SearchInstances",0);
			WinHttp.SetRequestHeader("x-date-format", "iso");
			WinHttp.setRequestHeader("Content-type", "application/json");
			WinHttp.setRequestHeader("X-Requested-With", "XMLHttpRequest");
			WinHttp.setRequestHeader("Accept", "application/json, text/javascript, */*");
			WinHttp.setRequestHeader("Referer", "http://kad.arbitr.ru/");
			WinHttp.setRequestHeader("Accept-Language", "ru-RU");
			WinHttp.setRequestHeader("Accept-Encoding", "gzip, deflate");
			WinHttp.setRequestHeader("Connection", "Keep-Alive");
			WinHttp.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko");
			WinHttp.setRequestHeader("Content-Length", "169");
			WinHttp.setRequestHeader("DNT", "1");
			WinHttp.setRequestHeader("Host", "kad.arbitr.ru");
			WinHttp.setRequestHeader("Pragma", "no-cache");
			
			ПараметрыПОСТ = "{""Page"":" + Страница + ",""Count"":25,""Courts"":[],""DateFrom"":""" + ПривестиКНачДатеJSON(ДатаНач) + """,""DateTo"":""" + ПривестиККонДатеJSON(ДатаКон) + """,""Sides"":[{""Name"":""" + ИНН + """,""Type"":-1,""ExactMatch"":false}],""Judges"":[],""CaseNumbers"":[],""WithVKSInstances"":false}";
			WinHttp.Send(ПараметрыПОСТ);
			ТекстОтветаСырой = WinHttp.ResponseText();
		Исключение
			Ошибка = истина;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Если Ошибка Тогда 
			Возврат;
		КонецЕсли;
		///////////////////////////////////
		ТекстОтвета = ТекстОтветаСырой;
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"null","""null""");
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"\""","""");
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"\u0026","&");
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"\u003c","<");
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"\u003e",">");
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"\u0027","'");
		
		ТаблицаДел = новый ТаблицаЗначений;
		ТаблицаДел.Колонки.Добавить("CaseId");
		ТаблицаДел.Колонки.Добавить("CaseNumber");
		ТаблицаДел.Колонки.Добавить("CaseType");
		ТаблицаДел.Колонки.Добавить("CourtInn");
		ТаблицаДел.Колонки.Добавить("Date");
		ТаблицаДел.Колонки.Добавить("IsSimpleJustice");
		ТаблицаДел.Колонки.Добавить("Judge");	
		ТаблицаДел.Колонки.Добавить("PlaintiffInn");	
		ТаблицаДел.Колонки.Добавить("PlaintiffName");	
		ТаблицаДел.Колонки.Добавить("PlaintiffAddress");	
		ТаблицаДел.Колонки.Добавить("RespondentInn");	
		ТаблицаДел.Колонки.Добавить("RespondentName");	
		ТаблицаДел.Колонки.Добавить("RespondentAddress");	
		
		ПозНачалоItems = Найти(ТекстОтвета,"Items") + 7;
		ПозКонецItems = Найти(ТекстОтвета,"Message") - 4;
		
		Если (ПозКонецItems<(ПозНачалоItems+10)) Тогда
			//Сообщить("Неверный или пустой JSON");
			Прервать;
		КонецЕсли; 
		
		Дела = Сред(ТекстОтвета,ПозНачалоItems,ПозКонецItems-ПозНачалоItems+1);
		
		// Парсинг	
		ТекущаяСтрока = Дела;
		
		// Создадим отдельные блоки из дел
		МассивНачальныхПозицийБлоков = МассивНачалБлоков(ТекущаяСтрока,"CaseId");
		
		МассивБлоков = новый массив;
		
		Для й=0 по МассивНачальныхПозицийБлоков.Количество()-1 Цикл
			
			Если (й<(МассивНачальныхПозицийБлоков.Количество()-1)) Тогда 
				МассивБлоков.Добавить(Сред(ТекущаяСтрока,МассивНачальныхПозицийБлоков[й],МассивНачальныхПозицийБлоков[й+1]-МассивНачальныхПозицийБлоков[й]));
			Иначе 
				МассивБлоков.Добавить(Сред(ТекущаяСтрока,МассивНачальныхПозицийБлоков[й],СтрДлина(ТекущаяСтрока) - МассивНачальныхПозицийБлоков[й]));
			КонецЕсли;
			
		КонецЦикла;
		
		// Парсим блок ! 
		// Сначала простые теги
		//CaseId
		//CaseNumber
		//CaseType
		//CourtInn
		//Date
		//IsSimpleJustice
		//Judge
		//Потом сложные теги: 
		// Истец
		//  
		// Ответчик
		// 
		
		//ОбщееКоличество = МассивБлоков.Количество();
		//ЭлементыФормы.Индикатор1.МинимальноеЗначение = 1;
		//ЭлементыФормы.Индикатор1.МаксимальноеЗначение =ОбщееКоличество;
		
		//Бегунок = 0;
		
		Для каждого эл из МассивБлоков Цикл
			
			//Бегунок = Бегунок + 1;
			//ЭлементыФормы.Индикатор1.Значение = Бегунок;
			
			СтрокаБлока = Эл;
			//CaseId
			КонецЗаголовкаCaseId = НайтиСПозиции(СтрокаБлока,""":""");
			КонецТегаCaseId = НайтиСПозиции(СтрокаБлока,"CaseNumber");
			CaseId = Сред(СтрокаБлока,КонецЗаголовкаCaseId+4,КонецТегаCaseId - КонецЗаголовкаCaseId-6);		
			//CaseNumber
			КонецЗаголовкаCaseNumber = НайтиСПозиции(СтрокаБлока,""":""",КонецТегаCaseId);
			КонецТегаCaseNumber = НайтиСПозиции(СтрокаБлока,"CaseType");
			CaseNumber = Сред(СтрокаБлока,КонецЗаголовкаCaseNumber+3,КонецТегаCaseNumber - КонецЗаголовкаCaseNumber-5);		
			//CaseType
			КонецЗаголовкаCaseType = НайтиСПозиции(СтрокаБлока,""":""",КонецТегаCaseNumber);
			КонецТегаCaseType = НайтиСПозиции(СтрокаБлока,"CourtName");
			CaseType = Сред(СтрокаБлока,КонецЗаголовкаCaseType+3,КонецТегаCaseType - КонецЗаголовкаCaseType-5);		
			
			//CourtInn
			КонецЗаголовкаCourtInn = НайтиСПозиции(СтрокаБлока,""":""",КонецТегаCaseType);
			КонецТегаCourtInn = НайтиСПозиции(СтрокаБлока,"Date");
			CourtInn = Сред(СтрокаБлока,КонецЗаголовкаCourtInn+3,КонецТегаCourtInn - КонецЗаголовкаCourtInn-5);		
			
			//Date
			КонецЗаголовкаDate = НайтиСПозиции(СтрокаБлока,""":""",КонецТегаCourtInn);
			КонецТегаDate = НайтиСПозиции(СтрокаБлока,"Plaintiffs");
			Date = Сред(СтрокаБлока,КонецЗаголовкаDate+3,КонецТегаDate - КонецЗаголовкаDate-5);		
			
			//IsSimpleJustice
			КонецЗаголовкаIsSimpleJustice = НайтиСПозиции(СтрокаБлока,"IsSimpleJustice",КонецТегаDate);
			КонецТегаIsSimpleJustice = НайтиСПозиции(СтрокаБлока,"Judge");
			IsSimpleJustice = Сред(СтрокаБлока,КонецЗаголовкаIsSimpleJustice+17,КонецТегаIsSimpleJustice - КонецЗаголовкаIsSimpleJustice-18);		
			
			//Judge
			КонецЗаголовкаJudge = НайтиСПозиции(СтрокаБлока,""":""",КонецТегаIsSimpleJustice);
			КонецТегаJudge = НайтиСПозиции(СтрокаБлока,"""}");
			Judge = Сред(СтрокаБлока,КонецЗаголовкаJudge+3,КонецТегаJudge - КонецЗаголовкаJudge-2);		
			
			// PlainTiff
			НачалоБлокаPlainTiff = НайтиСПозиции(СтрокаБлока,"""Plaintiffs"":");
			КонецБлокаPlainTiff = НайтиСПозиции(СтрокаБлока,"""Respondents"":");
		    БлокPlainTiff = Сред(СтрокаБлока,НачалоБлокаPlainTiff,КонецБлокаPlainTiff-НачалоБлокаPlainTiff);
			
			// Вытаскиваем теги: 
			// Name
			НачалоЗаголовкаName = НайтиСПозиции(БлокPlainTiff,"""Name""");
			КонецТегаName = НайтиСПозиции(БлокPlainTiff,"""Inn""");
			Если (КонецТегаName=0 или НачалоЗаголовкаName=0) Тогда 
				PlaintiffName = "";
			Иначе 
				PlaintiffName = Сред(БлокPlainTiff,НачалоЗаголовкаName+9,КонецТегаName - НачалоЗаголовкаName - 10);		
			КонецЕсли;

			// Inn
			НачалоЗаголовкаInn = НайтиСПозиции(БлокPlainTiff,"""Inn""");
			КонецТегаInn = НайтиСПозиции(БлокPlainTiff,"""Address""");
			Если (КонецТегаInn=0 или НачалоЗаголовкаInn=0) Тогда 
				PlaintiffInn = "";
			Иначе 
				PlaintiffInn = Сред(БлокPlainTiff,НачалоЗаголовкаInn+8,КонецТегаInn - НачалоЗаголовкаInn-9);		
			Конецесли;
			
			// Address
			НачалоЗаголовкаAddress = НайтиСПозиции(БлокPlainTiff,"""Address""");
			КонецТегаAddress = НайтиСПозиции(БлокPlainTiff,"""OrganizationForm""");
			PlaintiffAddress = Сред(БлокPlainTiff,НачалоЗаголовкаAddress+12,КонецТегаAddress - НачалоЗаголовкаAddress-13);		
			
			
			// Respondent
			НачалоБлокаRespondent 	= НайтиСПозиции(СтрокаБлока,"""Respondents"":");
			КонецБлокаRespondent	= НайтиСПозиции(СтрокаБлока,"""IsSimpleJustice"":");
		    БлокRespondent 		= Сред(СтрокаБлока,НачалоБлокаRespondent,КонецБлокаRespondent-НачалоБлокаRespondent);
			
			// Вытаскиваем теги: 
			// Name
			НачалоЗаголовкаName = НайтиСПозиции(БлокRespondent,"""Name""");
			КонецТегаName = НайтиСПозиции(БлокRespondent,"""Inn""");
			Если (КонецТегаName=0 или НачалоЗаголовкаName=0) Тогда 
				RespondentName = "";
			иНАЧЕ 
				RespondentName = Сред(БлокRespondent,НачалоЗаголовкаName+9,КонецТегаName - НачалоЗаголовкаName - 10);		
			КонецЕсли;

			// Inn
			НачалоЗаголовкаInn = НайтиСПозиции(БлокRespondent,"""Inn""");
			КонецТегаInn = НайтиСПозиции(БлокRespondent,"""Address""");
			Если (КонецТегаInn=0 или НачалоЗаголовкаInn=0) Тогда 
				RespondentInn = "";
			Иначе 
				RespondentInn = Сред(БлокRespondent,НачалоЗаголовкаInn+8,КонецТегаInn - НачалоЗаголовкаInn-9);		
			КонецЕсли;
			
			// Address
			НачалоЗаголовкаAddress = НайтиСПозиции(БлокRespondent,"""Address""");
			КонецТегаAddress = НайтиСПозиции(БлокRespondent,"""OrganizationForm""");
			Если (НачалоЗаголовкаAddress=0 или КонецТегаAddress=0) Тогда 
				RespondentAddress = "";
			Иначе
				RespondentAddress = Сред(БлокRespondent,НачалоЗаголовкаAddress+12,КонецТегаAddress - НачалоЗаголовкаAddress-13);		
			КонецЕсли;
			
			СтрУ 					= ТаблицаДел.Добавить();
			СтрУ.CaseId 			= CaseId;
			СтрУ.CaseNumber 		= CaseNumber;
			СтрУ.CaseType 			= CaseType;
			СтрУ.CourtInn 			= CourtInn;
			СтрУ.Date 				= Date;
			СтрУ.IsSimpleJustice 	= IsSimpleJustice;
			СтрУ.PlaintiffInn		= PlaintiffInn;
			СтрУ.PlaintiffName		= PlaintiffName;
			СтрУ.PlaintiffAddress	= PlaintiffAddress;
			СтрУ.RespondentInn		= RespondentInn;
			СтрУ.RespondentName		= RespondentName;
			СтрУ.RespondentAddress	= RespondentAddress;
			
		КонеЦЦикла;
		
		// Запись в регистр. 
		Для каждого стрх из ТаблицаДел Цикл
			НаборЗаписей = РегистрыСведений.ДанныеПоСудебнымДелам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.GuidДела.Установить(СокрЛП(СтрХ.CaseID));
			НаборЗаписей.Отбор.НомерДела.Установить(СокрЛП(СтрХ.CaseNumber));
			//НаборЗаписей.Отбор.ИННИстца.Установить(СтрХ.PlaintiffInn);
			//НаборЗаписей.Отбор.ИННОтветчика.Установить(СтрХ.RespondentInn);
			//НаборЗаписей.Отбор.НаименованиеИстца.Установить(СтрХ.PlaintiffName);
			//НаборЗаписей.Отбор.НаименованиеОтветчика.Установить(СтрХ.RespondentName);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество()>0 Тогда 
				Продолжить;
			Конецесли;
			
			МенеджерРегистра = РегистрыСведений.ДанныеПоСудебнымДелам.СоздатьМенеджерЗаписи();
			ТекущаяДата1 = ТекущаяДата(); 
			МенеджерРегистра.Период = ТекущаяДата1; 
			МенеджерРегистра.GuidДела = СтрХ.CaseId; 
			МенеджерРегистра.НомерДела = СтрХ.CaseNumber; 
			МенеджерРегистра.ИннИстца = СтрХ.PlaintiffInn; 
			МенеджерРегистра.НаименованиеИстца = СтрХ.PlaintiffName; 
			МенеджерРегистра.ИННОтветчика = СтрХ.RespondentInn; 		
			МенеджерРегистра.НаименованиеОтветчика = СтрХ.RespondentName; 		
			МенеджерРегистра.СудебныйОрган = СтрХ.CourtInn; 		
			МенеджерРегистра.ТипДела = СтрХ.CaseType; 		
			МенеджерРегистра.Дата = ПривестиКДате(СтрХ.Date); 		
			МенеджерРегистра.IsSimpleJustice = ?(НРег(СтрХ.IsSimpleJustice)="true",Истина,Ложь); 		
			МенеджерРегистра.АдресИстца = СтрХ.PlaintiffAddress; 		
			МенеджерРегистра.АдресОтветчика = СтрХ.RespondentAddress; 		
			МенеджерРегистра.Записать();
			
		КонецЦикла;	
		
 КонецЦикла;
 
КонецПроцедуры

//////////////// Это функции к предыдущей. 

Функция МассивНачалБлоков(ТекущаяСтрока,Тег)
	
	МассивВозврата = новый массив;
	
	ВремСтрока = ТекущаяСтрока;
	ДлинаТега = СтрДлина(Тег);
	
	Бегунок = 0;
	Пока истина Цикл
		Позиция = Найти(ВремСтрока,Тег);			
		
		Если (Позиция=0) Тогда 
			Прервать;
		КонецЕсли;
		
		МассивВозврата.Добавить(Позиция+Бегунок);
		Времстрока = Сред(Времстрока,Позиция+ДлинаТега);
		Бегунок = Бегунок + Позиция + ДлинаТега - 1;		
		
	КонеЦЦикла;
	
	Возврат МассивВозврата;
КонецФункции

Функция НайтиСПозиции(Строка,Подстрокапоиска,Позиция=0)
	
	СтрокаДляпоиска = Сред(Строка,позиция);
	Позицияпоиска = Найти(СтрокаДляпоиска,Подстрокапоиска);
	
	Если Позицияпоиска<>0 Тогда 
		Возврат Позицияпоиска + позиция -1;
	КонецЕсли;
	
	Возврат 0;
	
конецФункции

Функция ПривестиКДате(Дата)
	
	Попытка 
		Год = Лев(Дата,4);
		Месяц = Сред(Дата,6,2);
		День = Сред(Дата,9,2);
		ДатаВозвр = Дата(Год+Месяц+День);
	Исключение
		Возврат '0001-01-01'; 
	КонецПопытки;
	
	Возврат ДатаВозвр;
КонецФункции

Функция ПривестиККонДатеJSON(Дата)
	Возврат Формат(Дата,"ДФ=yyyy-MM-dd")+"T23:59:59";	
КонецФункции

Функция ПривестиКНачДатеJSON(Дата)
	Возврат Формат(Дата,"ДФ=yyyy-MM-dd")+"T00:00:00";		
КонецФункции

//////////////// конец блока загрузки судебных дел --------------------------------------- 

/// -----------Для штрихКодирования реализаций
Функция СформироватьШКРеализации(ДокСсылка,ВидПФ)  Экспорт
	//ВидПФ:
	//1- Торг12
	//2 - ТТН
	//3 - Спецификация
	//4 - Акт
	//5 - Уведомление об изменении цен.
    //6 - Заявка на возврат
	//7 - Маршррутный лист
	//8 - УПД
	//9 - Заявка на транспортные услуги
	// "v" - УПД по возвратам поставщику
	// "A" - английское, акт приема-передачи
	// "B" - английское, ТОРГ13 по перемещению
	// "T" - английское, ТТН по перемещению
	// "R" - Английское, Реестр ДПД или Подорожник
	// "U" - Английское, Реестр ДПД или Подорожник ЮРЛица

	Если ВидПФ = "T" ИЛИ ВидПФ = "B" Тогда
		КодОрг="10";
		НомерДокумента = глТранслит(Формат(ДокСсылка.Номер,"ЧЦ=8;ЧВН="));
		//6 символов дата
		Дата           = Формат(ДокСсылка.Дата,"ЧВН=; ДФ=ddMMyy");
		Кодконтрагент  = "";
		СуммаСтр       = "";
	ИначеЕсли ВидПФ <> "6" и ВидПФ <> "7" и ВидПФ <> "9" и ВидПФ <> "R" и ВидПФ <> "U" Тогда	
		//2 символа организация	
		Если ДокСсылка.Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") тогда //формулаАвто
			КодОрг="20";
			НомерДокумента=Формат(ДокСсылка.НомерФормулаАвто, "ЧЦ=8; ЧВН=; ЧГ=0");;
		ИначеЕсли 	 ДокСсылка.Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс тогда 
			КодПодр="00";
			КодОрг="30";
			НомерДокумента=Формат(ДокСсылка.НомерФормулаАвто, "ЧЦ=8; ЧВН=; ЧГ=0");;
		ИначеЕсли 	 ДокСсылка.Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль тогда 
			КодПодр="00";
			КодОрг="40";
			НомерДокумента=Формат(ДокСсылка.НомерФормулаАвто, "ЧЦ=8; ЧВН=; ЧГ=0");;
		иначе // Яршинторг
			КодОрг="10";
			//8 символов номер	
			НомерДокумента=глТранслит(Формат(ДокСсылка.Номер,"ЧЦ=8;ЧВН="));
		конецЕсли;
		
		//6 символов дата
		Дата=Формат(ДокСсылка.Дата,"ЧВН=; ДФ=ddMMyy");
		//7 символов код контрагента
		Кодконтрагент = глТранслит(ДокССылка.Контрагент.Код);
		//все остальное -  сумма
		СуммаСтр = Строка(Формат(ДокССылка.СуммаДокумента, "ЧДЦ=2; ЧРД=.; ЧВН="));
		СуммаСтр=СтрЗаменить(СуммаСтр,".","");
		СуммаСтр=СтрЗаменить(СуммаСтр," ","");
	иначе	
		//2 символа организация	
		// только  Яршинторг
		КодОрг="10";
		//8 символов номер	
		НомерДокумента=глТранслит(Формат(Прав(ДокСсылка.Номер,8),"ЧЦ=8;ЧВН="));
		
		//6 символов дата
		Дата=Формат(ДокСсылка.Дата,"ЧВН=; ДФ=ddMMyy");
		//7 символов код контрагента
		попытка
		Кодконтрагент = глТранслит(ДокССылка.Контрагент.Код);
	    исключение
		Кодконтрагент ="";
		конецпопытки;
		//все остальное -  сумма
		СуммаСтр = "";//Строка(Формат(ДокССылка.СуммаДокумента, "ЧДЦ=2; ЧРД=.; ЧВН="));
		//СуммаСтр=СтрЗаменить(СуммаСтр,".","");
		//СуммаСтр=СтрЗаменить(СуммаСтр," ","");
	конецЕсли;	
	ШтрихКод=КодОрг+ВидПФ+НомерДокумента+Дата+Кодконтрагент+СуммаСтр;
	
	Возврат ШтрихКод;
конецФункции
Функция глТранслит(Слово)Экспорт
 НовоеСлово= "";
 спТранслит = Новый СписокЗначений;
 спТранслит.Добавить("а","a"); 
 спТранслит.Добавить("б","b"); 
 спТранслит.Добавить("в","v");
// спТранслит.Добавить("г","g"); есть WG
 спТранслит.Добавить("г","gg"); 
 спТранслит.Добавить("д","d"); 
 спТранслит.Добавить("е","e");
 
 спТранслит.Добавить("ё","jo");
 спТранслит.Добавить("ж","zh"); 
 спТранслит.Добавить("з","z");
 спТранслит.Добавить("и","i"); 
 спТранслит.Добавить("й","j");
 
 спТранслит.Добавить("к","k");
 спТранслит.Добавить("л","l"); 
 спТранслит.Добавить("м","m"); 
 спТранслит.Добавить("н","n");
 спТранслит.Добавить("о","o"); 
 спТранслит.Добавить("п","p"); 
 спТранслит.Добавить("р","r"); 
 спТранслит.Добавить("с","s"); 
 спТранслит.Добавить("т","t"); 
 
 спТранслит.Добавить("у","u");
 спТранслит.Добавить("ф","f");
 спТранслит.Добавить("х","h");
 спТранслит.Добавить("ц","c");
 
 спТранслит.Добавить("ч","ch"); 
 спТранслит.Добавить("ш","sh");
 спТранслит.Добавить("щ","sch"); //3 символа!
 спТранслит.Добавить("ъ","#");
 спТранслит.Добавить("ы","y");
 спТранслит.Добавить("ь","'"); 
 
 спТранслит.Добавить("э","je"); 
 спТранслит.Добавить("ю","ju");
 спТранслит.Добавить("я","ja"); 
 
 
 Для а=1 по СтрДлина(Слово) Цикл
 	Элемент = НРЕГ(Сред(Слово,а,1));
	ТрансЭлемент = спТранслит.НайтиПоЗначению( Элемент );
  	НовоеСлово = НовоеСлово + ?(ТрансЭлемент = Неопределено,Элемент,ТрансЭлемент); 
 КонецЦикла; 
 
 Возврат ВРЕГ(НовоеСлово);
КонецФункции
Функция глТранслитОбратно(Слово)Экспорт
 НовоеСлово= "";
 спТранслит = Новый СписокЗначений;
 
// спТранслит.Добавить("g","г");  //есть WG
 спТранслит.Добавить("t","т"); 
 спТранслит.Добавить("k","к"); 
 спТранслит.Добавить("e","е");
 спТранслит.Добавить("r","р"); 
 спТранслит.Добавить("d","д"); 
 
 //снача 2-3 потом 1
 спТранслит.Добавить("gg","г");  //!
 спТранслит.Добавить("sh","ш");
 спТранслит.Добавить("sch","щ");
 спТранслит.Добавить("zh","ж"); 
 спТранслит.Добавить("ch","ч"); 
 
 спТранслит.Добавить("z","з");
 спТранслит.Добавить("h","х");
 спТранслит.Добавить("#","ъ");
 спТранслит.Добавить("f","ф");
 спТранслит.Добавить("y","ы");
 спТранслит.Добавить("v","в");
 спТранслит.Добавить("a","а"); 
 спТранслит.Добавить("p","п"); 
 спТранслит.Добавить("o","о"); 
 спТранслит.Добавить("l","л"); 
 спТранслит.Добавить("s","с"); 
 спТранслит.Добавить("m","м"); 
 спТранслит.Добавить("i","и"); 
 спТранслит.Добавить("'","ь"); 
 спТранслит.Добавить("b","б"); 
 спТранслит.Добавить("c","ц");
 спТранслит.Добавить("u","у");
 спТранслит.Добавить("n","н");
 
 //снача 2 буквы, потом 1
 спТранслит.Добавить("jo","ё");
 спТранслит.Добавить("je","э"); 
 спТранслит.Добавить("ju","ю");
 спТранслит.Добавить("ja","я"); 
 спТранслит.Добавить("j","й");

 // обратно из русской в англ. (для русской раскладки)-------------
	спТранслит.Добавить("ц", "W"); // W
	спТранслит.Добавить("п", "G"); // G
	спТранслит.Добавить("н", "Y"); // Y
    спТранслит.Добавить("г", "U"); // u
	
// из Русской раскладки -> Русскую (вместо англ.)
// "неправильные" префиксы подраздлений: ЕЛ, КВ, ЫЗ, ЬЫ, УЩ  >> ТК, РД, СП, МС, Ео
	спТранслит.Добавить("е", "Т"); // t
	спТранслит.Добавить("л", "К"); // k
	
	спТранслит.Добавить("к", "Р"); // rd
	спТранслит.Добавить("в", "Д");
	спТранслит.Добавить("ы", "С"); // sp
	спТранслит.Добавить("з", "П");
	спТранслит.Добавить("у", "Е"); // eo
	спТранслит.Добавить("щ", "о");
	спТранслит.Добавить("ь", "М"); // ms
	
//--------------только 1 символ?!  ja, sh, ch, zgh никогда не разберет! ---------------
 //Для а=1 по СтрДлина(Слово) Цикл
 //	Элемент = НРЕГ(Сред(Слово,а,1));  
 // ТрансЭлемент = спТранслит.НайтиПоЗначению( Элемент );
 // НовоеСлово = НовоеСлово + ?(ТрансЭлемент = Неопределено,Элемент,ТрансЭлемент); 
 //КонецЦикла;  
 
i=1; N=СтрДлина(Слово);  //03.08.2017 -- точный разбор!
Пока i<=N Цикл
	Элемент = НРЕГ(Сред(Слово,i,1));  
	ТрансЭлемент = неопределено;
  	для каждого элТранслит из спТранслит цикл
	  длЗамены = стрДлина(элТранслит.Значение);
	  Элемент2 =  НРЕГ(Сред(Слово, i, длЗамены));
	  Если Элемент2 = элТранслит.Значение тогда
		ТрансЭлемент = элТранслит.Представление;
	  	прервать;
	  КонецЕсли;	  
  	КонецЦикла;
  	Если ТрансЭлемент = Неопределено тогда
  		НовоеСлово = НовоеСлово + Элемент;
		i=i+1;
	иначе
  		НовоеСлово = НовоеСлово + ТрансЭлемент; 
		i=i+длЗамены;
	КонецЕсли;	
КонецЦикла;  
 
 Возврат ВРЕГ(НовоеСлово);
 
КонецФункции

функция ПолучитьТипДокументаПоБукве( ВидПФ )
		
	СоответствиеВидаТипуДок = новый Соответствие;
	СоответствиеВидаТипуДок.Вставить("1", "РеализацияТоваровУслуг");
	СоответствиеВидаТипуДок.Вставить("2", "РеализацияТоваровУслуг");
	СоответствиеВидаТипуДок.Вставить("3", "РеализацияТоваровУслуг");
	СоответствиеВидаТипуДок.Вставить("4", "РеализацияТоваровУслуг");
	СоответствиеВидаТипуДок.Вставить("5", "КорректировкаРеализации");
	СоответствиеВидаТипуДок.Вставить("6", "ЗаявкаНаВозвратТоваров");
	СоответствиеВидаТипуДок.Вставить("7", "ЗаданиеНаОтгрузку");
	СоответствиеВидаТипуДок.Вставить("8", "РеализацияТоваровУслуг");
	СоответствиеВидаТипуДок.Вставить("9", "ЗаявкаНаТранспорт");  //ЗаявкаНаТранспортныеУслуги
	
	СоответствиеВидаТипуДок.Вставить("A", "РеализацияТоваровУслуг");  //АктПриемаПередачи
	СоответствиеВидаТипуДок.Вставить("B", "ПеремещениеТоваров");
	СоответствиеВидаТипуДок.Вставить("T", "ПеремещениеТоваров");
	СоответствиеВидаТипуДок.Вставить("v", "ВозвратТоваровПоставщику");
	СоответствиеВидаТипуДок.Вставить("V", "ВозвратТоваровПоставщику");
 //в русской раскладке
	СоответствиеВидаТипуДок.Вставить("Ф", "РеализацияТоваровУслуг");  //АктПриемаПередачи
	СоответствиеВидаТипуДок.Вставить("И", "ПеремещениеТоваров");
	СоответствиеВидаТипуДок.Вставить("Е", "ПеремещениеТоваров");
	СоответствиеВидаТипуДок.Вставить("м", "ВозвратТоваровПоставщику");
	СоответствиеВидаТипуДок.Вставить("М", "ВозвратТоваровПоставщику");

Возврат  СоответствиеВидаТипуДок.Получить(ВидПФ);

КонецФункции
 
//21.07.2017 Разбор ШК -> обратное получение документа
// ОБРАТНАЯ ФУНКЦИЯ для СформироватьШКРеализации()  
//см.
//регистр св.  -  ПечатныеФормыВНаличии
//перечисление -  ВидыПечатныхФорм
 функция ПолучитьДокументПоШК( ТекстШК )  Экспорт
	
	 НайденныйДокумент = Неопределено;
	 
	 Если стрДлина(ТекстШК)<17 тогда
		возврат НайденныйДокумент;
	 КонецЕсли;

	ВидПФ  = Сред(ТекстШК,3,1);                      //в 
	номерДок = глТранслитОбратно(Сред(ТекстШК,4,8)); //нннннннн
	датаТекст =  Число(Сред(ТекстШК,12,6));          //ддммгг
		//"ддммгг" >> "дд.мм.20гг 00:00:00"
		ДатаДок = Дата(Формат(датаТекст, "ЧЦ=6; ЧРГ=.; ЧВН=; ЧГ=2,2,0")+" 00:00:00");
		ДатаДок = ДобавитьМесяц(ДатаДок,12*2000);

 	ТипДок = ПолучитьТипДокументаПоБукве( ВидПФ );
	Если ТипДок<>неопределено тогда
		НайденныйДокумент = Документы[ТипДок].НайтиПоНомеру( номердок, ДатаДок );
	КонецЕсли;
	
	возврат НайденныйДокумент;

КонецФункции

//21.07.2017
 функция ПолучитьВидПечатнойФормы( ВидПФ ) экспорт
	ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.ПустаяСсылка();
		Если      ВидПФ = "1" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.Торг12;
		ИначеЕсли ВидПФ = "2" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.ТТН;
		ИначеЕсли ВидПФ = "3" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.Спецификация;
		ИначеЕсли ВидПФ = "4" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.Акт;
		ИначеЕсли ВидПФ = "5" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.Цены;
		ИначеЕсли ВидПФ = "6" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.ЗаявкаНаВозврат;
		ИначеЕсли ВидПФ = "7" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.МаршрутныйЛист;
		ИначеЕсли ВидПФ = "8" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.УПД;
		ИначеЕсли ВидПФ = "9" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.ЗаявкаНаТранспортныеУслуги;
			
		ИначеЕсли ВидПФ = "A" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.АктПриемаПередачи;
		ИначеЕсли ВидПФ = "B" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.Торг13;
		ИначеЕсли ВидПФ = "T" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.ТТН;
		ИначеЕсли ВидПФ = "v" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.ВозвратТоваровПоставщику;
		ИначеЕсли ВидПФ = "R" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.Реестр;
	
		ИначеЕсли ВидПФ = "Ф" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.АктПриемаПередачи;
		ИначеЕсли ВидПФ = "И" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.Торг13;
		ИначеЕсли ВидПФ = "Е" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.ТТН;
		ИначеЕсли ВидПФ = "м" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.ВозвратТоваровПоставщику;
		ИначеЕсли ВидПФ = "к" Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм.Реестр;

		КонецЕсли;	
возврат ВидПечатнойФормы;			
КонецФункции

//+++ 29.08.2016 для ярославских менеджеров 05 - 08 групп... надо как для филиалов!
функция ПолучитьМенеджераТовГруппы( Пользователь1, ВидТовара, ТовТруппа = неопределено )  экспорт
	
	МенТовГруппы = справочники.Пользователи.ПустаяСсылка();
	если ЗначениеНеЗаполнено(Пользователь1) тогда
		возврат МенТовГруппы;
	КонецЕсли;

	Если ЗначениеЗаполнено(Пользователь1.НаправлениеПродаж) тогда
		номерНаправления = число(  лев(Пользователь1.НаправлениеПродаж.Наименование,2) );
	Иначе
		номерНаправления = 0; 
	КонецЕсли;
	
	// ДЛЯ ФИЛИАЛОВ - вместо менеджера тов.группы - руководитель направления продаж филиала - Бондаренко
	 флЗаменаМенТГ = Константы.СогласованиеФилиаловВместоМенТГ_РуководительНаправления.Получить()
	 					и (Пользователь1.ОсновноеПодразделение.ОбособленноеПодразделение
						 //  или  ( номерНаправления>=6 и номерНаправления<=10) //29.08.2016
						   или  ( номерНаправления>=6 и номерНаправления<=10) //+++ 28.02.2017 - сдвинулись направления Бондаренко!
						   );
						
   Если флЗаменаМенТГ тогда  //27.01.2016 Здесь Тоже только по флагу!
	   МенТовГруппы = Пользователь1.НаправлениеПродаж.Руководитель; 
   Иначе
	   Если ЗначениеЗаполнено(ТовТруппа) тогда //+++ 28.02.2017   неопределено или пустая()
			МенТовГруппы = ТовТруппа.Ответственный;
	   КонецЕсли;
   КонецЕсли;
   
   
   Если НЕ ЗначениеЗаполнено(МенТовГруппы) тогда//03.03.207
	   Если ВидТовара = перечисления.ВидыТоваров.Диски тогда     // все диски -> Малышев Егор
			МенТовГруппы = справочники.НоменклатурныеГруппы.НайтиПоКоду("00026").Ответственный;  //литые
		иначеЕсли ВидТовара = перечисления.ВидыТоваров.Шины тогда //все шины ->   Доколин
			МенТовГруппы = справочники.НоменклатурныеГруппы.НайтиПоКоду("00016").Ответственный; // Импорт зима
		иначеЕсли ВидТовара = перечисления.ВидыТоваров.АКБ тогда //Сухачева А.В.
			МенТовГруппы = справочники.НоменклатурныеГруппы.НайтиПоКоду("00060").Ответственный; //АКБ
		иначеЕсли ВидТовара = перечисления.ВидыТоваров.Аксессуары тогда //"Голубева В.С.
			МенТовГруппы = справочники.НоменклатурныеГруппы.НайтиПоКоду("00073").Ответственный; //Аксессуары
		иначеЕсли ВидТовара = перечисления.ВидыТоваров.Прочее тогда //Кузьмичева
			МенТовГруппы = справочники.НоменклатурныеГруппы.НайтиПоКоду("Ф0084").Ответственный; //Прочее
		иначе // Серков
			МенТовГруппы = справочники.Подразделения.НайтиПоКоду("00005").Руководитель; 
		КонецЕсли;
	КонецЕсли;	

возврат МенТовГруппы;
КонецФункции

//----------для системы ценообразования - уведомления----------------------------
// 1)для филиала([v]обособл.подразделение) - руководитель подразделения
//иначе 
// 2) руководитель Направления продаж 
//*** может быть пустым  - тогда Горохов!
//
функция ПолучитьРуководителя(Пользователь=неопределено) Экспорт
	
	рук = справочники.Пользователи.ПустаяСсылка();
	 
	если ЗначениеНеЗаполнено(Пользователь) тогда
		возврат рук;
	КонецЕсли;
	
	//-----------для филиалов - руководитель подразделения------------------------
	Если Пользователь.ОсновноеПодразделение.ОбособленноеПодразделение тогда
		рук = Пользователь.ОсновноеПодразделение.Руководитель;
	Иначе
		
		Если Пользователь.НаправлениеПродаж.Пустая() тогда
			рук = справочники.пользователи.НайтиПоКоду("Серков");
		Иначе	
			//+++ 02.09.2015 - по согласованию с Серковым - руководители направлиений должны согласовывать 
			рук = Пользователь.НаправлениеПродаж.Руководитель;
		
			Если рук.Пустая() тогда
				рук = справочники.пользователи.НайтиПоКоду("Серков");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	возврат рук;
	
КонецФункции	

//12.11.2015 для выбора цвета в любой форме (спр.СтатусДокументов)
функция ПолучитьСписокЦветов() Экспорт
	
СписокЦветов = Новый СписокЗначений;

СписокЦветов.Добавить("Нет цвета");
СписокЦветов.Добавить("Аквамарин");
СписокЦветов.Добавить("АкварельноСиний");
СписокЦветов.Добавить("АнтикБелый");
СписокЦветов.Добавить("Бежевый");
СписокЦветов.Добавить("Белоснежный");
СписокЦветов.Добавить("Белый");
СписокЦветов.Добавить("Бирюзовый");
СписокЦветов.Добавить("БледноБирюзовый");
СписокЦветов.Добавить("БледноЗеленый");
СписокЦветов.Добавить("БледноЗолотистый");
СписокЦветов.Добавить("БледноКрасноФиолетовый");
СписокЦветов.Добавить("БледноЛиловый");
СписокЦветов.Добавить("БледноМиндальный");
СписокЦветов.Добавить("БледноСиреневый");
СписокЦветов.Добавить("Васильковый");
СписокЦветов.Добавить("ВесеннеЗеленый");
СписокЦветов.Добавить("Голубой");
СписокЦветов.Добавить("ГолубойСКраснымОттенком");
СписокЦветов.Добавить("ГолубойСоСтальнымОттенком");
СписокЦветов.Добавить("ГрифельноСерый");
СписокЦветов.Добавить("ГрифельноСиний");
СписокЦветов.Добавить("Древесный");
СписокЦветов.Добавить("ДымчатоБелый");
СписокЦветов.Добавить("ЖелтоЗеленый");
СписокЦветов.Добавить("Желтый");
СписокЦветов.Добавить("ЗамшаСветлый");
СписокЦветов.Добавить("ЗеленаяЛужайка");
СписокЦветов.Добавить("ЗеленоватоЖелтый");
СписокЦветов.Добавить("ЗеленоватоЛимонный");
СписокЦветов.Добавить("ЗеленоЖелтый");
СписокЦветов.Добавить("Зеленый");
СписокЦветов.Добавить("ЗеленыйЛес");
СписокЦветов.Добавить("Золотистый");
СписокЦветов.Добавить("Золотой");
СписокЦветов.Добавить("Индиго");
СписокЦветов.Добавить("Киноварь");
СписокЦветов.Добавить("Кирпичный");
СписокЦветов.Добавить("КожаноКоричневый");
СписокЦветов.Добавить("Коралловый");
СписокЦветов.Добавить("Коричневый");
СписокЦветов.Добавить("КоролевскиГолубой");
СписокЦветов.Добавить("КрасноФиолетовый");
СписокЦветов.Добавить("Красный");
СписокЦветов.Добавить("Кремовый");
СписокЦветов.Добавить("Лазурный");
СписокЦветов.Добавить("ЛимонноЗеленый");
СписокЦветов.Добавить("Лимонный");
СписокЦветов.Добавить("Лосось");
СписокЦветов.Добавить("ЛососьСветлый");
СписокЦветов.Добавить("ЛососьТемный");
СписокЦветов.Добавить("Льняной");
СписокЦветов.Добавить("Малиновый");
СписокЦветов.Добавить("МятныйКрем");
СписокЦветов.Добавить("НавахоБелый");
СписокЦветов.Добавить("НасыщенноНебесноГолубой");
СписокЦветов.Добавить("НасыщенноРозовый");
СписокЦветов.Добавить("НебесноГолубой");
СписокЦветов.Добавить("НейтральноАквамариновый");
СписокЦветов.Добавить("НейтральноБирюзовый");
СписокЦветов.Добавить("НейтральноВесеннеЗеленый");
СписокЦветов.Добавить("НейтральноГрифельноСиний");
СписокЦветов.Добавить("НейтральноЗеленый");
СписокЦветов.Добавить("НейтральноКоричневый");
СписокЦветов.Добавить("НейтральноПурпурный");
СписокЦветов.Добавить("НейтральноСерый");
СписокЦветов.Добавить("НейтральноСиний");
СписокЦветов.Добавить("НейтральноФиолетовоКрасный");
СписокЦветов.Добавить("Оливковый");
СписокЦветов.Добавить("ОранжевоКрасный");
СписокЦветов.Добавить("Оранжевый");
СписокЦветов.Добавить("Орхидея");
СписокЦветов.Добавить("ОрхидеяНейтральный");
СписокЦветов.Добавить("ОрхидеяТемный");
СписокЦветов.Добавить("Охра");
СписокЦветов.Добавить("Перламутровый");
СписокЦветов.Добавить("Персиковый");
СписокЦветов.Добавить("ПесочноКоричневый");
СписокЦветов.Добавить("ПолночноСиний");
СписокЦветов.Добавить("ПризрачноБелый");
СписокЦветов.Добавить("Пурпурный");
СписокЦветов.Добавить("Пшеничный");
СписокЦветов.Добавить("РозовоКоричневый");
СписокЦветов.Добавить("Розовый");
СписокЦветов.Добавить("Роса");
СписокЦветов.Добавить("РыжеватоКоричневый");
СписокЦветов.Добавить("СветлоГрифельноСерый");
СписокЦветов.Добавить("СветлоГрифельноСиний");
СписокЦветов.Добавить("СветлоЖелтый");
СписокЦветов.Добавить("СветлоЖелтыйЗолотистый");
СписокЦветов.Добавить("СветлоЗеленый");
СписокЦветов.Добавить("СлоноваяКость");
СписокЦветов.Добавить("СветлоЗолотистый");
СписокЦветов.Добавить("СветлоКоралловый");
СписокЦветов.Добавить("СветлоКоричневый");
СписокЦветов.Добавить("СветлоНебесноГолубой");
СписокЦветов.Добавить("СветлоРозовый");
СписокЦветов.Добавить("СветлоСерый");
СписокЦветов.Добавить("СеребристоСерый");
СписокЦветов.Добавить("Серебряный");
СписокЦветов.Добавить("СероСиний");
СписокЦветов.Добавить("Серый");
СписокЦветов.Добавить("СинеСерый");
СписокЦветов.Добавить("СинеФиолетовый");
СписокЦветов.Добавить("Синий");
СписокЦветов.Добавить("СинийСоСтальнымОттенком");
СписокЦветов.Добавить("СинийСПороховымОттенком");
СписокЦветов.Добавить("Сливовый");
СписокЦветов.Добавить("СлоноваяКость");
СписокЦветов.Добавить("СтароеКружево");
СписокЦветов.Добавить("ТемноБирюзовый");
СписокЦветов.Добавить("ТемноБордовый");
СписокЦветов.Добавить("ТемноГрифельноСерый");
СписокЦветов.Добавить("ТемноГрифельноСиний");
СписокЦветов.Добавить("ТемноЗеленый");
СписокЦветов.Добавить("ТемноЗолотистый");
СписокЦветов.Добавить("ТемноКрасный");
СписокЦветов.Добавить("ТемноОливковоЗеленый");
СписокЦветов.Добавить("ТемноОранжевый");
СписокЦветов.Добавить("ТемноСерый");
СписокЦветов.Добавить("ТемноСиний");
СписокЦветов.Добавить("ТемноФиолетовый");
СписокЦветов.Добавить("ТеплоРозовый");
СписокЦветов.Добавить("Томатный");
СписокЦветов.Добавить("ТопленоеМолоко");
СписокЦветов.Добавить("ТусклоОливковый");
СписокЦветов.Добавить("ТусклоРозовый");
СписокЦветов.Добавить("ТусклоСерый");
СписокЦветов.Добавить("Ультрамарин");
СписокЦветов.Добавить("Фиолетовый");
СписокЦветов.Добавить("Фуксин");
СписокЦветов.Добавить("ФуксинТемный");
СписокЦветов.Добавить("Фуксия");
СписокЦветов.Добавить("Хаки");
СписокЦветов.Добавить("ХакиТемный");
СписокЦветов.Добавить("ЦветМорскойВолны");
СписокЦветов.Добавить("ЦветМорскойВолныНейтральный");
СписокЦветов.Добавить("ЦветМорскойВолныСветлый"); 
СписокЦветов.Добавить("ЦветМорскойВолныТемный");
СписокЦветов.Добавить("ЦветокБелый");
СписокЦветов.Добавить("Циан");
СписокЦветов.Добавить("ЦианНейтральный");
СписокЦветов.Добавить("ЦианСветлый");
СписокЦветов.Добавить("ЦианТемный");
СписокЦветов.Добавить("Черный");
СписокЦветов.Добавить("ШелковыйОттенок");
СписокЦветов.Добавить("Шоколадный");
возврат СписокЦветов;
КонецФункции

//23.12.2015 -----------------
//возвращает таблицу значений:
// Код, Номенклатура, Цена, 
// доп.поля: Приоритет, ЦенаПоТипуЦен, СкидкаПредоплаты
//
 функция ПолучитьЦеныПоВсемТоварамКлиента(КодКлиента="00128") Экспорт
	ТолькоДиски=ЛОЖЬ;
	табЗнач1  = Новый ТаблицаЗначений;
	Время0    = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	
	Контрагент = справочники.Контрагенты.НайтиПоКоду(КодКлиента); // Пауэр
	если Контрагент = неопределено тогда
		возврат табЗнач1;
	КонецЕсли;
	
	ДатаСреза = ?(Контрагент.ДатаСрезаЦен>'20140101', Контрагент.ДатаСрезаЦен, неопределено );
	
	
	списокНом = неопределено;	//!!!

	
	табЗнач1 = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, списокНом, , , ДатаСреза);  
	

//===================Цена Предоплаты или Мин.Цена >> "Цена" =================
услПредоплаты = // константы.СогласованиеПоСкидкамКлиентов.Получить() и  //10.09.2015 ВСЕГДА по договору
  (Контрагент.ОсновнойДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001")    //Предоплата
  или Контрагент.ОсновнойДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФакторингПредоплата //14.08.2017
  или Контрагент.ОсновнойДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ПредоплатаПоСчетам); 
  
  табЗнач1.Колонки.Добавить("Цена");
  Если услПредоплаты тогда
  	  табЗнач1.ЗагрузитьКолонку( табЗнач1.ВыгрузитьКолонку("ЦенаСоСкидкойПредоплаты"), "Цена");
  Иначе
	  табЗнач1.ЗагрузитьКолонку( табЗнач1.ВыгрузитьКолонку("МинимальнаяЦена"), "Цена");
  КонецЕсли;
  табЗнач1.колонки.Удалить("МинимальнаяЦена");
 //+++ 26.09.2017 - нужна колонка:  табЗнач1.колонки.Удалить("ЦенаСоСкидкойПредоплаты");

  
	Время1 = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	#Если Клиент тогда
	сообщить("получены цены для "+строка(табЗнач1.Количество())+" товаров за "+строка(Время1-Время0)+" сек.");
	#КонецЕсли
	Время0=Время1;	
	
  // Код, Номенклатура, Цена, 
  // доп.поля: Приоритет, ЦенаПоТипуЦен, СкидкаПредоплаты
   товКод0 = ""; Приоритет0=+8000;  i=0; //+++ 17.07.2017  дубли строк!
   Пока i<табЗнач1.Количество()-1 Цикл
		товКод    = табЗнач1[i].Код;
		Приоритет = табЗнач1[i].Приоритет;
		Если товКод0=товКод тогда
			#Если Клиент тогда
			сообщить("Удаляется дубль товара "+товКод0+" Приоритеты: "+Приоритет0+" : "+Приоритет);
			#КонецЕсли
 		   если Приоритет0>Приоритет тогда табЗнач1.Удалить(i-1); //удаляем с большим приоритетом  
		   Иначе  табЗнач1.Удалить(i);   
		   КонецЕсли;	   
	   Иначе i=i+1;
	   КонецЕсли;
	   товКод0=товКод;
	   Приоритет0=Приоритет;
   КонецЦикла;
   
//24.12.2015--------------удаление нулевых цен-------------------
	МассивНулевыхЦен=табЗнач1.НайтиСтроки(новый Структура("Цена",0) );
  	для каждого Стр1 Из МассивНулевыхЦен Цикл
		#Если Клиент тогда
		сообщить("Удаляется товар "+Стр1.Код+" с нулевой ценой.");
		#КонецЕсли
        табЗнач1.Удалить(Стр1);   
	КонецЦикла;
	ТаблЗнач = табЗнач1.скопировать();

  возврат ТаблЗнач;
	
КонецФункции//ПолучитьЦеныПауэр

функция ПроверитьНаличиеРусскихБукв(Строка) Экспорт
            ДлинаНаименования = СтрДлина(Строка);
			ц=0;
			пока Ц < ДлинаНаименования Цикл
				ц = ц+1;
				Если Найти("абвгдеёжзийклмнопрстуфхцчшщьъэюяЙЦУКЕНГШЩЗХЪЭЖДЛОРПАВЫФЯЧСМИТЬБЮ",Сред(Строка,ц,1)) > 0 Тогда
					//Сообщить("Не допустимо наличие русских символов в название модели", СтатусСообщения.Важное);
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			Возврат Ложь;	
		КонецФункции
		
Функция ПолучитьТаблицуЗвонков (ТипЗвонка = 3,Клиент,ДатаНачала,ДатаОкончания) Экспорт
			
     ТЗИтог = Новый ТаблицаЗначений;
	
   ТЗИтог.Колонки.Добавить("Дата");
   ТЗИтог.Колонки.Добавить("Абонент");
   ТЗИтог.Колонки.Добавить("Продолжительность");
   ТЗИтог.Колонки.Добавить("Тип");
   ТЗИтог.Колонки.Добавить("Телефон");
   ТЗИтог.Колонки.Добавить("Ссылка");

   Запрос = Новый запрос;
   запрос.УстановитьПараметр("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон);
   Запрос.Текст = "ВЫБРАТЬ
                  |	ВЫБОР
                  |		КОГДА ТИПЗНАЧЕНИЯ(КонтактнаяИнформация.Объект) = ТИП(Справочник.КонтактныеЛица)
                  |				И ТИПЗНАЧЕНИЯ(КонтактнаяИнформация.Объект.ОбъектВладелец) = ТИП(Справочник.Контрагенты)
                  |			ТОГДА КонтактнаяИнформация.Объект.ОбъектВладелец
                  |		ИНАЧЕ КонтактнаяИнформация.Объект
                  |	КОНЕЦ КАК Объект,
                  |	КонтактнаяИнформация.Представление
                  |ИЗ
                  |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
                  |ГДЕ
                  |	КонтактнаяИнформация.Тип = &Тип
                  |	И КонтактнаяИнформация.Представление ПОДОБНО ""%___""";
				  
   Телефоны = Запрос.Выполнить().Выгрузить();
   Обработать = Телефоны.Скопировать();
   
   
   
   КС = Новый КвалификаторыСтроки(6);
   Массив = Новый Массив;
   Массив.Добавить(Тип("Строка"));
   ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
   Телефоны.Колонки.Добавить("Поиск",ОписаниеТиповС);
   Телефоны.Очистить();
   Для каждого стр из Обработать Цикл
	Строка = Стр.Представление;
    Строка = СтрЗаменить(Строка,"(","");
   	Строка = СтрЗаменить(Строка,")","");
   	Строка = СтрЗаменить(Строка,"-","");
   	Строка = СтрЗаменить(Строка,".",",");
	   //Строка = СтрЗаменить(Строка,",","");
    Строка = СтрЗаменить(Строка," ","");
	Строка = СтрЗаменить(Строка,";",",");
	Строка = СтрЗаменить(Строка,":","");
	
	ТекущаяСтрока = СтрЗаменить(Строка, ",", Символы.ПС); 
	Для Счетчик = 1 По СтрЧислоСтрок(ТекущаяСтрока) Цикл
		Если СтрДлина(СтрПолучитьСтроку(ТекущаяСтрока, Счетчик)) > 2 Тогда
		    Нов = Телефоны.Добавить();
		    Нов.Объект = стр.Объект;
		    Нов.Поиск = Прав(СтрПолучитьСтроку(ТекущаяСтрока, Счетчик),6);
		КонецЕсли;
	КонецЦикла;
	
	//стр.Поиск = Строка;
	
   КонецЦикла;

  // Телефоны.Сортировать("Представление Возр");
   
   //Запрос = Новый запрос;
   //запрос.УстановитьПараметр("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон);
   //запрос.УстановитьПараметр("ДатаН",ДатаНачала);
   //запрос.УстановитьПараметр("ДатаК",ДатаОкончания);
   //Запрос.Текст = "ВЫБРАТЬ
   //			   |	ЖурналЗвонков.Дата,
   //			   |	ЖурналЗвонков.НомерСотрудника,
   //			   |	ЖурналЗвонков.НомерАбонента,
   //			   |	ЖурналЗвонков.ДлительностьЗвонка,
   //			   |	ЖурналЗвонков.Исход_Вход
   //			   |ИЗ
   //			   |	РегистрСведений.ЖурналЗвонков КАК ЖурналЗвонков
   //			   |ГДЕ
   //			   |	ЖурналЗвонков.Дата МЕЖДУ &ДатаН И &ДатаК
   //			   |	И ЖурналЗвонков.ДлительностьЗвонка > 0";
   // 			  
   //Журнал = Запрос.Выполнить().Выгрузить();
   //Для каждого стр из Журнал Цикл
   // Стр.НомерСотрудника = Лев(Стр.НомерСотрудника,6);
   // Стр.НомерАбонента = Лев(Стр.НомерАбонента,6);
   //КонецЦикла;


		ЗапросМобильные = Новый Запрос;
		ЗапросМобильные.УстановитьПараметр("Клиент",Клиент);
		ЗапросМобильные.УстановитьПараметр("Телефоны",Телефоны);
		ЗапросМобильные.УстановитьПараметр("ДатаН",ДатаНачала);
		ЗапросМобильные.УстановитьПараметр("ДатаК",ДатаОкончания);
		//ЗапросМобильные.УстановитьПараметр("Журнал",Журнал);	
		ЗапросМобильные.Текст = "ВЫБРАТЬ
		                        |	Журнал.Дата,
		                        |	Журнал.ПоискСотрудник КАК НомерСотрудника,
		                        |	Журнал.ПоискАбонент КАК НомерАбонента,
		                        |	Журнал.ДлительностьЗвонка,
		                        |	Журнал.Исход_Вход,
		                        |	Журнал.НомерСотрудника КАК НомерСотрудника1,
		                        |	Журнал.НомерАбонента КАК НомерАбонента1,
		                        |	Журнал.Ссылка
		                        |ПОМЕСТИТЬ Журнал
		                        |ИЗ
		                        |	РегистрСведений.ЖурналЗвонков КАК Журнал
		                        |ГДЕ
		                        |	Журнал.Дата МЕЖДУ &ДатаН И &ДатаК
		                        |	И Журнал.ДлительностьЗвонка > 0
		                        |	И Журнал.ПоискАбонент ПОДОБНО ""______""
		                        |;
		                        |
		                        |////////////////////////////////////////////////////////////////////////////////
		                        |ВЫБРАТЬ
		                        |	Телефоны.Объект,
		                        |	Телефоны.Поиск КАК Представление
		                        |ПОМЕСТИТЬ Телефоны
		                        |ИЗ
		                        |	&Телефоны КАК Телефоны
		                        |
		                        |ИНДЕКСИРОВАТЬ ПО
		                        |	Представление
		                        |;
		                        |
		                        |////////////////////////////////////////////////////////////////////////////////
		                        |ВЫБРАТЬ
		                        |	Журнал.Дата,
		                        |	Журнал.НомерСотрудника,
		                        |	Журнал.НомерАбонента,
		                        |	Журнал.ДлительностьЗвонка,
		                        |	Журнал.Исход_Вход,
		                        |	МАКСИМУМ(Телефоны.Объект) КАК Сотрудник,
		                        |	МАКСИМУМ(Телефоны1.Объект) КАК Контрагент,
		                        |	Журнал.НомерСотрудника1,
		                        |	Журнал.НомерАбонента1,
		                        |	Журнал.Ссылка
		                        |ИЗ
		                        |	Журнал КАК Журнал
		                        |		ЛЕВОЕ СОЕДИНЕНИЕ Телефоны КАК Телефоны
		                        |		ПО Журнал.НомерСотрудника = Телефоны.Представление
		                        |		ЛЕВОЕ СОЕДИНЕНИЕ Телефоны КАК Телефоны1
		                        |		ПО Журнал.НомерАбонента = Телефоны1.Представление
		                        |ГДЕ
		                        |	Телефоны1.Объект = &Клиент
		                        |
		                        |СГРУППИРОВАТЬ ПО
		                        |	Журнал.Дата,
		                        |	Журнал.НомерСотрудника,
		                        |	Журнал.НомерАбонента,
		                        |	Журнал.ДлительностьЗвонка,
		                        |	Журнал.Исход_Вход,
		                        |	Журнал.НомерСотрудника1,
		                        |	Журнал.НомерАбонента1,
		                        |	Журнал.Ссылка";
        Рез = ЗапросМобильные.Выполнить().Выгрузить();
				
		Для каждого стр из Рез Цикл
			НовСтр = ТЗИтог.Добавить();
			НовСтр.Дата = стр.Дата;
			НовСтр.Абонент = ?(ЗначениеЗаполнено(стр.Сотрудник),стр.Сотрудник.Наименование+"("+ стр.НомерСотрудника1 +")",стр.НомерСотрудника1);
			НовСтр.Продолжительность = стр.ДлительностьЗвонка;
			НовСтр.Тип = стр.Исход_Вход;
			НовСтр.Телефон = ?(СтрДлина(стр.НомерСотрудника)<=3,"Рабочий","Мобильный");
			НовСтр.Ссылка = стр.Ссылка;
		КонецЦикла;
		
		ТЗИтог.Сортировать("Дата Возр");
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ОтображатьСетку = Ложь;
		макет = ПолучитьОбщийМакет("Звонки");
		Область = Макет.ПолучитьОбласть("Шапка");
        ТабДокумент.Вывести(Область);
		
		Для каждого стр из ТЗИтог Цикл
			Строка = Макет.ПолучитьОбласть("Строка");
			Строка.Параметры.Дата = стр.дата;
			Строка.Параметры.Абонент = стр.Абонент;
			Строка.Параметры.Продолжительность = стр.Продолжительность;
			Строка.Параметры.Тип = стр.Тип;
			Строка.Параметры.Телефон = стр.Телефон;
			Строка.Параметры.ПрослушатьРасш = стр.ссылка;
            ТабДокумент.Вывести(Строка);
		КонецЦикла;
		
		Форма = ПолучитьОбщуюФорму("Звонки");
		Форма.ЭлементыФормы.ПолеТабличногоДокумента.Очистить();
		Форма.ЭлементыФормы.ПолеТабличногоДокумента.Вывести(ТабДокумент);
		
		Возврат Форма;
		
КонецФункции

Процедура ОтправитьПисьмоСКрышки(Ссылка,ДатаСборки, АдресПолучателя = "sbcaps@yandex.ru") Экспорт
	
	Если Не Ссылка.ОтправленоПисьмоСКрышками и Ссылка.СписокПредыдущихЗаказов.Количество() = 0 Тогда
	         ТЗ = Ссылка.Товары.Выгрузить();
			 ТЗ.Свернуть("Номенклатура","Количество");
			 СписокФайловВложений = Новый СписокЗначений;
			 ИмяМакета = "РассылкаКрышек";
			 ОбъектВнешнейФормы = Справочники.ВнешниеОбработки.НайтиПоНаименованию(ИмяМакета).ПолучитьОбъект();
			 ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
						
			 ИмяФайла = КаталогВременныхФайлов()+"Заказ для сборки.xls";
			 ИмяФайла2 = КаталогВременныхФайлов()+"Заказ для клиента.xls";
			 ДвоичныеДанные.Записать(ИмяФайла);
						
			 Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			 Обработка.СсылкаНаОбъект = Ссылка;
			 Обработка.ТЗ = ТЗ;
			 Обработка.Полн = Истина;
			 ТабличныйДокументОбъект  = Обработка.Печать();

			 ТабличныйДокументОбъект.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
			 СписокФайловВложений.Добавить(ИмяФайла);
			 
			 Обработка.Полн = Ложь;
			 ТабличныйДокументОбъект2  = Обработка.Печать();
			 
			 ТабличныйДокументОбъект2.Записать(ИмяФайла2,ТипФайлаТабличногоДокумента.XLS);
			 СписокФайловВложений.Добавить(ИмяФайла2);
											
			 Если СписокФайловВложений.Количество() > 0 Тогда
				 УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
				 Тема = "Наборка комплектующих "+ Ссылка.Контрагент.Наименование +" !!!";
				 ТекстСообщения = "Заказ №" + Ссылка.Номер + ",для контрагента " + Ссылка.Контрагент.Наименование + " собрать к  "+Строка(ДатаСборки);
				 
				 Если ЗначениеЗаполнено(АдресПолучателя) Тогда
					 яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателя,СписокФайловВложений, УЗ, ТекстСообщения, Тема);
				 КонецЕсли;
				 
			 КонецЕсли;
	ИначеЕсли Не Ссылка.ОтправленоПисьмоСКрышками и Ссылка.СписокПредыдущихЗаказов.Количество() > 0 Тогда		 		 
			 СписокЗаказов = Ссылка.СписокПредыдущихЗаказов.ВыгрузитьКолонку("Заказ");
			 Запрос = Новый Запрос;
			 Запрос.УстановитьПараметр("Ссылка",Ссылка);
			 Запрос.УстановитьПараметр("Список",СписокЗаказов);
			 запрос.Текст = "ВЫБРАТЬ
			                |	ЗаказПокупателяТовары.Номенклатура,
			                |	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество
			                |ПОМЕСТИТЬ Пред
			                |ИЗ
			                |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			                |ГДЕ
			                |	ЗаказПокупателяТовары.Ссылка В(&Список)
			                |	И ЗаказПокупателяТовары.Ссылка.ТребуютсяКрышки = ИСТИНА
			                |
			                |СГРУППИРОВАТЬ ПО
			                |	ЗаказПокупателяТовары.Номенклатура
			                |;
			                |
			                |////////////////////////////////////////////////////////////////////////////////
			                |ВЫБРАТЬ
			                |	ЗаказПокупателяТовары.Номенклатура,
			                |	ЕСТЬNULL(ЗаказПокупателяТовары.Количество, 0) - ЕСТЬNULL(Пред.Количество, 0) КАК Количество
			                |ПОМЕСТИТЬ Врем
			                |ИЗ
			                |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			                |		ЛЕВОЕ СОЕДИНЕНИЕ Пред КАК Пред
			                |		ПО ЗаказПокупателяТовары.Номенклатура = Пред.Номенклатура
			                |ГДЕ
			                |	ЗаказПокупателяТовары.Ссылка = &ссылка
			                |;
			                |
			                |////////////////////////////////////////////////////////////////////////////////
			                |ВЫБРАТЬ
			                |	Врем.Номенклатура,
			                |	Врем.Количество
			                |ИЗ
			                |	Врем КАК Врем
			                |ГДЕ
			                |	Врем.Количество > 0";
			 ТЗ = Запрос.Выполнить().Выгрузить();
			 СписокФайловВложений = Новый СписокЗначений;
			 ИмяМакета = "РассылкаКрышек";
			 ОбъектВнешнейФормы = Справочники.ВнешниеОбработки.НайтиПоНаименованию(ИмяМакета).ПолучитьОбъект();
			 ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
						
			 ИмяФайла = КаталогВременныхФайлов()+"Заказ для сборки.xls";
			 ИмяФайла2 = КаталогВременныхФайлов()+"Заказ для клиента.xls";
			 ДвоичныеДанные.Записать(ИмяФайла);
						
			 Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			 Обработка.СсылкаНаОбъект = Ссылка;
			 Обработка.ТЗ = ТЗ;
			 Обработка.Полн = Истина;
			 ТабличныйДокументОбъект  = Обработка.Печать();

			 ТабличныйДокументОбъект.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
			 СписокФайловВложений.Добавить(ИмяФайла);
			 
			 Обработка.Полн = Ложь;
			 ТабличныйДокументОбъект2  = Обработка.Печать();
			 
			 ТабличныйДокументОбъект2.Записать(ИмяФайла2,ТипФайлаТабличногоДокумента.XLS);
			 СписокФайловВложений.Добавить(ИмяФайла2);
											
			 Если СписокФайловВложений.Количество() > 0 Тогда
				 УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
				 Номера = "";
				 Для Каждого с из Ссылка.СписокПредыдущихЗаказов Цикл
					 Если с.Заказ.ТребуютсяКрышки Тогда
						 Номера = Номера + с.Заказ.Номер + ", ";
					 КонецЕсли;
				 КонецЦикла;
				 Тема = "Наборка комплектующих "+ Ссылка.Контрагент.Наименование +" !!!";
				 ТекстСообщения = "Объединенный заказ по " + Ссылка.Контрагент.Наименование + ". 
				 | Требуется перенести в этот заказ крышки из заказов " + Номера + "собрать к  "+Строка(ДатаСборки);  
						
				 //Состояние(строка(ТекущаяДата())+" идет отправка письма на адрес: "+АдресПолучателя);
				 Если ЗначениеЗаполнено(АдресПолучателя) Тогда
					 яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателя,СписокФайловВложений, УЗ, ТекстСообщения, Тема);
				 КонецЕсли;
			 КонецЕсли;
	 КонецЕсли;
	 
 КонецПроцедуры

 Процедура ОтправитьМаршрутСКрышки(Ссылка, АдресПолучателя = "sbcaps@yandex.ru") Экспорт
	 
	 ОбъектВнешнейФормы = Справочники.ВнешниеОбработки.НайтиПоКоду(487).ПолучитьОбъект();
	 ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
				
	 ИмяФайла = КаталогВременныхФайлов()+"Акт передачи "+ссылка.номер+".xls";
	 ДвоичныеДанные.Записать(ИмяФайла);
	 
	 СписокФайловВложений = Новый СписокЗначений;
	
	 Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	 Обработка.СсылкаНаОбъект = Ссылка;
	 ТабличныйДокументОбъект  = Обработка.Печать(Истина);
	 ТабличныйДокументОбъект.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
	  СписокФайловВложений.Добавить(ИмяФайла);

	 УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
		 Тема = "Акт передачи комплектующих по маршруту  "+ Ссылка.номер +" для водителя "+Ссылка.Водитель+" !!!";
		 ТекстСообщения = "";
				
	 //Состояние(строка(ТекущаяДата())+" идет отправка письма на адрес: "+АдресПолучателя);
	 Если ЗначениеЗаполнено(АдресПолучателя) Тогда
		 яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателя,СписокФайловВложений, УЗ, ТекстСообщения, Тема);
	 КонецЕсли;
КонецПроцедуры

Процедура ПроверкаЗаполненияСтатьиЗатратУпр(Объект, Отказ) Экспорт 
	#Если Клиент тогда
		
		ОбъектМетаданные = Объект.метаданные();
		ПустаяСтатьяЗатратУПР = Справочники.СтатьиЗатратУПР.ПустаяСсылка();
		Если ЕстьРеквизитДокумента("Подразделение", ОбъектМетаданные) тогда 
			Если Объект.Подразделение = Справочники.Подразделения.НайтиПоКоду("00139") Тогда 
				
				Если Объект.метаданные().Имя = "АвансовыйОтчет" Тогда 
					
					Для Каждого СтрТЧ из Объект.Прочее Цикл 
						Если СтрТЧ.СтатьяЗатратУПР = ПустаяСтатьяЗатратУПР Тогда 
							Сообщить("В таблице ""Прочее"" в строке №" + СтрТЧ.НомерСтроки + " не заполнена ""Статья затрат Упр""");
							Отказ = Истина;
						КонецЕсли;	
					КонецЦикла;
					
				ИначеЕсли Объект.метаданные().Имя = "ПлатежноеПоручениеВходящее"  Или
					Объект.метаданные().Имя = "ПлатежноеПоручениеИсходящее" Или 
					Объект.метаданные().Имя = "ПрочиеЗатраты"  Тогда 
					
					Для Каждого СтрТЧ из Объект.Затраты Цикл 
						Если СтрТЧ.СтатьяЗатратУПР = ПустаяСтатьяЗатратУПР Тогда 
							Сообщить("В таблице ""Затраты"" в строке №" + СтрТЧ.НомерСтроки + " не заполнена ""Статья затрат Упр""");
							Отказ = Истина;
						КонецЕсли;	
					КонецЦикла;
					
				ИначеЕсли Объект.метаданные().Имя = "ПоступлениеТоваровУслуг" Тогда 
					
					Для Каждого СтрТЧ из Объект.Услуги Цикл 
						Если СтрТЧ.СтатьяЗатратУПР = ПустаяСтатьяЗатратУПР Тогда 
							Сообщить("В таблице ""Услуги"" в строке №" + СтрТЧ.НомерСтроки + " не заполнена ""Статья затрат Упр""");
							Отказ = Истина;
						КонецЕсли;	
					КонецЦикла;
					
				ИначеЕсли Объект.метаданные().Имя = "ТребованиеНакладная" Тогда 
					
					Для Каждого СтрТЧ из Объект.Материалы Цикл 
						Если СтрТЧ.СтатьяЗатратУПР = ПустаяСтатьяЗатратУПР Тогда 
							Сообщить("В таблице ""Материалы"" в строке №" + СтрТЧ.НомерСтроки + " не заполнена ""Статья затрат Упр""");
							Отказ = Истина;
						КонецЕсли;	
					КонецЦикла;
					
				КонецЕсли;
				
				
			КонецЕсли;	
			
		КонецЕсли;	
	#КонецЕсли
КонецПроцедуры 

//возвращает урл картинки
Функция ПолучитьАдресКартинкиТовара(Товар) экспорт
	
	ПутьКФотоНаСайте = "http://photo.yst.ru/";
    имяФайлаПусто = ПутьКФотоНаСайте+"nopic_tyre_s.jpg"; //Фото отсутствует
	типФайла = ".png";
	естьФайлМод = ЗначениеЗаполнено(Товар.Модель);
	
		путьККартинкамДисков      = ПутьКФотоНаСайте+"allwheels/";
		путьККартинкамШин	      = ПутьКФотоНаСайте+"tires/";
		путьККартинкамАксессуаров = ПутьКФотоНаСайте+"accessories/";
		путьККартинкамРеклама     = ПутьКФотоНаСайте+"reklamnaya_produkciya/";
		путьККартинкамАКБ         = ПутьКФотоНаСайте+"batteries/";    //yst.ru/photos/akb/
		
	
		Если Товар.ВидТовара=Перечисления.ВидыТоваров.Диски тогда
			естьФайлМод = ИСТИНА; // только по моделям!
			путьККартинкамТов         = путьККартинкамДисков; // ДИСКИ
			
			//папкаПроизводителя = нрег(Товар.Производитель);
			//если найти(папкаПроизводителя, "replica")>0 тогда
			//	если найти(папкаПроизводителя, "replica td")>0 тогда
			//	папкаПроизводителя = "top driver";
			//	иначе
			//	папкаПроизводителя = "legeartis";
			//	КонецЕсли;
			//КонецЕсли;
			//путьККартинкамМоделей     = путьККартинкамДисков+папкаПроизводителя+"/";
			путьККартинкамМоделей     = путьККартинкамДисков;

			
			//24.03.14 Смирнов для картинки - ТОЛЬКО ДЛЯ ДИСКОВ нужен цвет
			РегСвва=РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			РегСвва.Отбор.Объект.Установить(Товар);
			РегСвва.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Цвет"));
			РегСвва.Прочитать();
			Если РегСвва.Количество()>0 Тогда
				Цвет = СокрЛП(РегСвва.Получить(0).Значение);
			Иначе
				Цвет="";
			КонецЕсли;
			
			ИмяФайлаМод = путьККартинкамМоделей+СокрЛП(нРЕГ(Товар.Модель.Наименование+"_"+Цвет))+типФайла;
		
		иначеЕсли Товар.ВидТовара=Перечисления.ВидыТоваров.Шины тогда
			путьККартинкамТов           = путьККартинкамШин; // ШИНЫ
			путьККартинкамМоделей 		= путьККартинкамШин;
			
			Если естьФайлМод тогда //и так и сяк
				ИмяФайлаМод = путьККартинкамМоделей+сокрЛП(Товар.Модель.Код)+типФайла;
			Иначе	
				ИмяФайлаТов = путьККартинкамТов+сокрЛП(Товар.Код)+типФайла;
			КонецЕсли;
		
		иначеЕсли Товар.ВидТовара=Перечисления.ВидыТоваров.Аксессуары тогда
			естьФайлМод = ЛОЖЬ; // только по товарам!
			путьККартинкамТов			= путьККартинкамАксессуаров;
			путьККартинкамМоделей 		= путьККартинкамАксессуаров;
			//ИмяФайлаМод =путьККартинкамМоделей + строка(ЭтотОбъект.Модель.Код)+типФайла;
			ИмяФайлаТов = путьККартинкамТов+СокрЛП(нРЕГ(Товар.Код))+типФайла;
		иначеЕсли Товар.ВидТовара=Перечисления.ВидыТоваров.АКБ тогда
			естьФайлМод = ЛОЖЬ; // только по товарам!
			путьККартинкамТов			= путьККартинкамАКБ;
			путьККартинкамМоделей 		= путьККартинкамАКБ;
			//ИмяФайлаМод =путьККартинкамМоделей + строка(ЭтотОбъект.Модель.Код)+типФайла;
			ИмяФайлаТов =путьККартинкамТов + строка(Товар.Код) +типФайла;
		иначеЕсли Товар.ВидТовара=Перечисления.ВидыТоваров.РекламнаяПродукция тогда
			естьФайлМод = ЛОЖЬ; // только по товарам!
			путьККартинкамТов			= путьККартинкамРеклама;
			путьККартинкамМоделей 		= путьККартинкамРеклама;
			//ИмяФайлаМод =путьККартинкамМоделей + строка(ЭтотОбъект.Модель.Код)+типФайла;
			ИмяФайлаТов = путьККартинкамТов+СокрЛП(нРЕГ(Товар.Код))+типФайла;
		Иначе
			Возврат "";
 		КонецЕсли;
      Возврат ?(естьФайлМод,ИмяФайлаМод,ИмяФайлаТов);
  КонецФункции
  
Функция ПолучитьHTTPОтвет(ПутьКФайлуНаСервере, ИмяФайла, Соединение, Заголовки, флаг = Истина)
	
	
	HTTPЗапрос = Новый HTTPЗапрос(ПутьКФайлуНаСервере, Заголовки);
	HTTPЗапрос.Заголовки.Вставить("Accept-Charset", "utf-8");
	HTTPОтвет = Соединение.Получить(HTTPЗапрос, ИмяФайла);
	
	Если HTTPОтвет.КодСостояния = 301 или HTTPОтвет.КодСостояния = 302 Тогда		
		ПутьКФайлуНаСервере = HTTPОтвет.Заголовки["Location"];
		URLРазделенный = РазделитьURL(ПутьКФайлуНаСервере);
		ПутьКФайлуНаСервере  = URLРазделенный.ПутьКФайлуНаСервере; 		
		HTTPОтвет = ПолучитьHTTPОтвет(ПутьКФайлуНаСервере, ИмяФайла, Соединение, Заголовки, Флаг);
	КонецЕсли;
	
	файл = Новый Файл(ИмяФайла); 
	
	Если флаг и HTTPОтвет.КодСостояния >= 200 и HTTPОтвет.КодСостояния <= 299 Тогда
		флаг = Ложь;
		ИмяФайлаВр = ПутьКФайлуНаСервере;
		Пока Найти(ИмяФайлаВр,"/") > 0 цикл
			ИмяФайлаВр = Сред(ИмяФайлаВр,Найти(ИмяФайлаВр,"/")+1);						
		КонецЦикла;
		Если НЕ ПустаяСтрока(ИмяФайлаВр) Тогда
			ПереместитьФайл(ИмяФайла, файл.Путь + ИмяФайлаВр);
			ИмяФайла = файл.Путь + ИмяФайлаВр;
		КонецЕсли;
	КонецЕсли;
		
	Возврат HTTPОтвет;    
	
КонецФункции
 
Функция ПолучитьФайлССервера(ФайлНаВебСервере) Экспорт
 
	ВремКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВремКаталог);
	
	ПараметрыПолученияФайлов = Новый Структура;
	
	ПараметрыПолучения	 = Новый Структура("ИмяФайла");
	ПараметрыПолучения. Вставить("ИмяФайла", ВремКаталог);
	
 
	URLРазделенный = РазделитьURL(ФайлНаВебСервере);
	
	ИмяСервера           = URLРазделенный.ИмяСервера;
	ПутьКФайлуНаСервере  = URLРазделенный.ПутьКФайлуНаСервере;
	Протокол             = URLРазделенный.Протокол;
	Заголовки 			 = Новый Соответствие; 		
	СписокФайлов 		 = новый Массив;
 
	Соединение = Новый HTTPСоединение(ИмяСервера, , , , , , ); 
	
	ИмяФайла = ВремКаталог + "\temp.htm";
	
	HTTPОтвет = ПолучитьHTTPОтвет(ПутьКФайлуНаСервере, ИмяФайла, Соединение, Заголовки);
			
	Если HTTPОтвет.КодСостояния < 200 Или HTTPОтвет.КодСостояния >= 300 Тогда
		ФайлОтвета = Новый ЧтениеТекста(ВремКаталог + "\temp.htm", КодировкаТекста.UTF8);
		Возврат "";
	КонецЕсли;  
	
	Возврат ИмяФайла;
 
КонецФункции // ПолучитьФайлССервера()

Функция РазделитьURL(Знач URL) Экспорт
	
	СтруктураURL = СтруктураURI(URL);
	
	Результат = Новый Структура;
	Результат.Вставить("Протокол", ?(ПустаяСтрока(СтруктураURL.Схема), "http", СтруктураURL.Схема));
	Результат.Вставить("ИмяСервера", СтруктураURL.ИмяСервера);
	Результат.Вставить("ПутьКФайлуНаСервере", СтруктураURL.ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции
 
Функция СтруктураURI(Знач СтрокаURI) Экспорт
СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
 
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьПлатежиПоКредитам(ДатаНач,ДатаКон) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеЛинии.КредитныйДоговор,
		|	КредитныеЛинии.Сумма,
		|	КредитныеЛинии.Дата,
		|	КредитныеЛинии.КредитныйДоговор.Владелец как Контрагент
		|ИЗ
		|	РегистрСведений.КредитныеЛинии КАК КредитныеЛинии
		|ГДЕ
		|	КредитныеЛинии.Дата МЕЖДУ &ДатаН И &ДатаК";

	Запрос.УстановитьПараметр("ДатаК",ДатаКон);
	Запрос.УстановитьПараметр("ДатаН",ДатаНач);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
    Текст="Внимание! нужно оплатить кредиты:"+символы.ПС;
	Пока Выборка.Следующий() Цикл
	Текст=Текст+Строка(Выборка.Контрагент)+" Договор: "+Строка(Выборка.КредитныйДоговор)+"  Срок оплаты: "+Строка(Формат(Выборка.Дата,"ДЛФ=Д"))+"  Сумма оплаты: "+Строка(Выборка.Сумма)+" руб."+Символы.ПС;	
	КонецЦикла;
    Возврат(Текст);
	
	
конецфункции	

//+++++ 29.03.2017 - в Заказах и Реализациях - ограничение в Форме!
Функция НайтиДоговорФакторинга(Контрагент1, Дата1) экспорт
	рез=Новый Структура("ЕстьДоговорФакторинга,Договор");
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДоговорыКонтрагентов.Ссылка
	             |ИЗ
	             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	             |ГДЕ
	             |	ДоговорыКонтрагентов.Владелец = &Владелец
	             |	И (ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.Факторинг)
				 //16.06.2017
	              |	 ИЛИ ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.ФакторингПредоплата) )
				  
	        	  |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	             |	И ВЫБОР
	             |			КОГДА ДоговорыКонтрагентов.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	             |				ТОГДА ДоговорыКонтрагентов.ДатаОкончанияДействия >= &Дата
	             |			ИНАЧЕ ИСТИНА
	             |		КОНЕЦ
	             |	И ВЫБОР
	             |			КОГДА ДоговорыКонтрагентов.Дата <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	             |				ТОГДА ДоговорыКонтрагентов.Дата <= &Дата
	             |			ИНАЧЕ ИСТИНА
	             |		КОНЕЦ
	             |	И ДоговорыКонтрагентов.ДеньгиПоФакторингу = ЛОЖЬ
	             |	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	             |
				 //самый свежий!
	             |УПОРЯДОЧИТЬ ПО
	             |	ДоговорыКонтрагентов.Код УБЫВ
	             |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Владелец",Контрагент1);
	Запрос.УстановитьПараметр("Дата",НачалоДня(Дата1));
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()>0 Тогда
		Выборка.Следующий();
		рез.ЕстьДоговорФакторинга=Истина;
		Рез.Договор=Выборка.Ссылка;
	Иначе
		рез.ЕстьДоговорФакторинга=Ложь;
	КонецЕсли;
	Возврат Рез;			 
КонецФункции

//+++++ 29.03.2017
Функция ПолучитьСписокРазрешенныхДоговоров(ВладелецДоговора, Дата1) экспорт 
	//ТОЛЬКО Договоры факторинга
	//Договоры Предоплаты *
	//Договор ФормулаАвто
	СписокКодов=Новый СписокЗначений;
	Запрос= Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДоговорыКонтрагентов.Код
	             |ИЗ
	             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	             |ГДЕ
	             |	ДоговорыКонтрагентов.Владелец = &Владелец
	             |	И (ДоговорыКонтрагентов.ТипДоговора В (&СписокРазрешенныхТиповДоговора)
				 |			ИЛИ (ДоговорыКонтрагентов.ТипДоговора = &ТипПредоплата
				 |				и  ДоговорыКонтрагентов.Наименование ПОДОБНО ""%*%"" )
				 |	  )
	             |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	             |	И ВЫБОР
	             |			КОГДА ДоговорыКонтрагентов.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	             |				ТОГДА ДоговорыКонтрагентов.ДатаОкончанияДействия >= &Дата
	             |			ИНАЧЕ ИСТИНА
	             |		КОНЕЦ
	             |	И ВЫБОР
	             |			КОГДА ДоговорыКонтрагентов.Дата <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	             |				ТОГДА ДоговорыКонтрагентов.Дата <= &Дата
	             |			ИНАЧЕ ИСТИНА
	             |		КОНЕЦ
	             |	И ДоговорыКонтрагентов.ДеньгиПоФакторингу = ЛОЖЬ
	             |	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)";
				 Запрос.УстановитьПараметр("Владелец",ВладелецДоговора);
				 
				 Запрос.УстановитьПараметр("ТипПредоплата",  Справочники.ТипыДоговоров.НайтиПоКоду("00001") ); // "ТипПредоплата"
				  
				 СписокРазрешенныхТиповДоговора = новый СписокЗначений;
				 СписокРазрешенныхТиповДоговора.Добавить( Справочники.ТипыДоговоров.Факторинг );
				 СписокРазрешенныхТиповДоговора.Добавить( Справочники.ТипыДоговоров.ФакторингПредоплата);
				 СписокРазрешенныхТиповДоговора.Добавить( Справочники.ТипыДоговоров.ПредоплатаПоСчетам);//+++ 14.08.2017
				 СписокРазрешенныхТиповДоговора.Добавить( Справочники.ТипыДоговоров.НайтиПоКоду("Я0004")); // "ТипФормулаАвто"
				 СписокРазрешенныхТиповДоговора.Добавить( Справочники.ТипыДоговоров.ВозмещаемыеУслуги );
				 СписокРазрешенныхТиповДоговора.Добавить( Справочники.ТипыДоговоров.Бонусы );				//07.08.2017
				 Запрос.УстановитьПараметр("СписокРазрешенныхТиповДоговора",СписокРазрешенныхТиповДоговора);
				  
				  
				 Запрос.УстановитьПараметр("Дата",Дата1);
				 Рез=Запрос.Выполнить().Выбрать();
				 Пока Рез.Следующий() Цикл
					 СписокКодов.Добавить(Рез.Код);
				 КонецЦикла;
				 Возврат СписокКодов;
КонецФункции

//Миронычев
Процедура ЗаписатьРегистрСтатусов(Первичный, Объединенный = Неопределено, Перечисление = Неопределено, Оплачен = Ложь, Номенклатура = Неопределено, ВозвратПредСостояния = Ложь, ПеречислениеWS = Ложь) Экспорт
	
	Для Каждого стр из Первичный.Товары Цикл
		Если Номенклатура = Неопределено тогда
			Рег = РегистрыСведений.СостояниеЗаказовИМ.СоздатьНаборЗаписей();
			Рег.Записывать = Истина;
			Рег.Отбор.ЗаказПервичный.Установить(Первичный);
			Рег.Отбор.Номенклатура.Установить(стр.Номенклатура);
			Рег.Отбор.НомерИМ.Установить(Первичный.Номервходящегодокумента);
			Попытка
				Рег.Прочитать();
				Если рег.Количество() = 0 Тогда
					Рг  = РегистрыСведений.СостояниеЗаказовИМ.СоздатьМенеджерЗаписи();
					Рг.ЗаказПервичный 			= Первичный;
					Рг.Номенклатура				= стр.Номенклатура;
					Рг.НомерИМ 					= Первичный.Номервходящегодокумента;
					Рг.ВремяИзмененияСтатуса 	= ТекущаяДата();
					Рг.ЗаказОбщий			 	= ?(Объединенный <> Неопределено, Объединенный.Ссылка, Неопределено);
					Рг.Количество 				= Стр.Количество;
					Рг.Оплачен 					= Оплачен;
					Рг.Состояние 				= Перечисление;
					Рг.Отменен 			    	= ПеречислениеWS;
					Рг.Цена 					= стр.Цена;
					Рг.Записать(Истина);
				Иначе
					//Если Рег[0].Состояние <> Перечисления.СостояниеЗаказовИМ.Отменен Тогда 
						Если Оплачен тогда
							Рег[0].Оплачен 				= Оплачен;
							Рег[0].ВремяИзмененияСтатуса 	= ТекущаяДата();
							Рег[0].Количество 				= Стр.Количество;
							Рег[0].Цена 					= стр.Цена;
							Рег.Записать(Истина);
						ИначеЕсли Объединенный <> Неопределено тогда
							Если Рег[0].Состояние <> Перечисления.СостояниеЗаказовИМ.Перемещен или Перечисление <> Перечисления.СостояниеЗаказовИМ.Возвращен или Перечисление <> Перечисления.СостояниеЗаказовИМ.Отгружен Тогда
								Рег[0].ЗаказОбщий			 	= Объединенный.Ссылка;
								Рег[0].ВремяИзмененияСтатуса 	= ТекущаяДата();
								Рег[0].Состояние 				= ?(ПеречислениеWS = Истина, Рег[0].Перечисление, Перечисление);
								Рег[0].Отменен                  = ?(ПеречислениеWS = Истина, ПеречислениеWS, Рег[0].Отменен);
								Рег[0].Количество 				= Стр.Количество;
								Рег[0].Цена 					= стр.Цена;

								Рег.Записать(Истина);
							КонецЕсли;
						Иначе
							Если  Рег[0].Состояние = Перечисления.СостояниеЗаказовИМ.ОтмененПриПеремешении Тогда 
								Если Перечисление <> Перечисления.СостояниеЗаказовИМ.Отгружен  или Перечисление <> Перечисления.СостояниеЗаказовИМ.Возвращен тогда
									Рег[0].ВремяИзмененияСтатуса 	= ТекущаяДата();
									Рег[0].Состояние 				= ?(ПеречислениеWS = Истина, Рег[0].Перечисление, Перечисление);
									Рег[0].Отменен                  =  ?(ПеречислениеWS = Истина, ПеречислениеWS, Рег[0].Отменен);
									Рег[0].Количество 				= Стр.Количество;
									Рег[0].Цена 					= стр.Цена;

									Рег.Записать(Истина);
								КонецЕсли;
							ИначеЕсли  Рег[0].Состояние = Перечисления.СостояниеЗаказовИМ.ОтмененОбщий Тогда 
								Если Перечисление <> Перечисления.СостояниеЗаказовИМ.Отгружен  или Перечисление <> Перечисления.СостояниеЗаказовИМ.Возвращен или Перечисление <> Перечисления.СостояниеЗаказовИМ.Перемещен тогда
									Рег[0].ВремяИзмененияСтатуса 	= ТекущаяДата();
									Рег[0].Состояние 				= ?(ПеречислениеWS = Истина, Рег[0].Перечисление, Перечисление);
									Рег[0].Отменен                  =  ?(ПеречислениеWS = Истина, ПеречислениеWS, Рег[0].Отменен);
									Рег[0].Количество 				= Стр.Количество;
									Рег[0].Цена 					= стр.Цена;

									Рег.Записать(Истина);
								КонецЕсли;
							ИначеЕсли  Рег[0].Состояние = Перечисления.СостояниеЗаказовИМ.ОтмененИМ Тогда 
								Если Перечисление <> Перечисления.СостояниеЗаказовИМ.Отгружен  или Перечисление <> Перечисления.СостояниеЗаказовИМ.Возвращен или Перечисление <> Перечисления.СостояниеЗаказовИМ.Перемещен или Перечисление <> Перечисления.СостояниеЗаказовИМ.Объединен тогда
									Рег[0].ВремяИзмененияСтатуса 	= ТекущаяДата();
									Рег[0].Состояние 				= ?(ПеречислениеWS = Истина, Рег[0].Перечисление, Перечисление);
									Рег[0].Отменен                  =  ?(ПеречислениеWS = Истина, ПеречислениеWS, Рег[0].Отменен);
									Рег[0].Количество 				= Стр.Количество;
									Рег[0].Цена 					= стр.Цена;
	
									Рег.Записать(Истина);
								КонецЕсли;
							иначе
								Рег[0].ВремяИзмененияСтатуса 	= ТекущаяДата();
								Рег[0].Состояние 				= ?(ПеречислениеWS = Истина, Рег[0].Перечисление, Перечисление);
								Рег[0].Отменен                  =  ?(ПеречислениеWS = Истина, ПеречислениеWS, Рег[0].Отменен);
								Рег[0].Количество 				= Стр.Количество;
								Рег[0].Цена 					= стр.Цена;
		
								Рег.Записать(Истина);
								
							КонецЕсли;
						КонецЕсли;	
					//КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
		иначе
			Если не Номенклатура.Услуга тогда

			Рег = РегистрыСведений.СостояниеЗаказовИМ.СоздатьНаборЗаписей();
			Рег.Записывать = Истина;
			Рег.Отбор.ЗаказПервичный.Установить(Первичный);
			Рег.Отбор.Номенклатура.Установить(Номенклатура);
			Рег.Отбор.НомерИМ.Установить(Первичный.Номервходящегодокумента);
			Попытка
				Рег.Прочитать();
				Если рег.Количество() = 0 Тогда
					Рг  = РегистрыСведений.СостояниеЗаказовИМ.СоздатьМенеджерЗаписи();
					Рг.ЗаказПервичный 			= Первичный;
					Рг.Номенклатура				= стр.Номенклатура;
					Рг.НомерИМ 					= Первичный.Номервходящегодокумента;
					Рг.ВремяИзмененияСтатуса 	= ТекущаяДата();
					Рг.ЗаказОбщий			 	= ?(Объединенный <> Неопределено, Объединенный.Ссылка, Неопределено);
					Рг.Количество 				= Стр.Количество;
					Рг.Оплачен 					= Оплачен;
					Рг.Состояние 				= Перечисление;
					Рг.Отменен                  = ПеречислениеWS;
					Рг.Цена 					= стр.Цена;
					Рг.Записать(Истина);
				Иначе
					Рег[0].ВремяИзмененияСтатуса 	= ТекущаяДата();
					Рег[0].Состояние 				= ?(ПеречислениеWS = Истина, Рег[0].Перечисление, Перечисление);
					Рег[0].Отменен                  =  ?(ПеречислениеWS = Истина, ПеречислениеWS, Рег[0].Отменен);
					Рег[0].Количество 				= Стр.Количество;
					Рег[0].Цена 					= стр.Цена;
					Рег.Записать(Истина);
					
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Для Каждого стр из Первичный.Услуги Цикл

			Рег = РегистрыСведений.СостояниеЗаказовИМ.СоздатьНаборЗаписей();
			Рег.Записывать = Истина;
			Рег.Отбор.ЗаказПервичный.Установить(Первичный);
			Рег.Отбор.Номенклатура.Установить(стр.Номенклатура);
			Рег.Отбор.НомерИМ.Установить(Первичный.Номервходящегодокумента);
			Попытка
				Рег.Прочитать();
				Если рег.Количество() = 0 Тогда
					Рг  = РегистрыСведений.СостояниеЗаказовИМ.СоздатьМенеджерЗаписи();
					Рг.ЗаказПервичный 			= Первичный;
					Рг.Номенклатура				= стр.Номенклатура;
					Рг.НомерИМ 					= Первичный.Номервходящегодокумента;
					Рг.ВремяИзмененияСтатуса 	= ТекущаяДата();
					Рг.ЗаказОбщий			 	= ?(Объединенный <> Неопределено, Объединенный.Ссылка, Неопределено);
					Рг.Количество 				= Стр.Количество;
					Рг.Оплачен 					= Оплачен;
					Рг.Состояние 				= Перечисление;
					Рг.Отменен                  = ПеречислениеWS;
					Рг.Цена 					= стр.Цена;
					Рг.Записать(Истина);
				Иначе
					//Если Рег[0].Состояние <> Перечисления.СостояниеЗаказовИМ.Отменен Тогда 
						Если Оплачен тогда
							Рег[0].Оплачен 				= Оплачен;
							Рег[0].ВремяИзмененияСтатуса 	= ТекущаяДата();
							Рег[0].Количество 				= Стр.Количество;
							Рег[0].Цена 					= стр.Цена;

							Рег.Записать(Истина);
						ИначеЕсли Объединенный <> Неопределено тогда
							Если Рег[0].Состояние <> Перечисления.СостояниеЗаказовИМ.Перемещен или Перечисление <> Перечисления.СостояниеЗаказовИМ.Возвращен или Перечисление <> Перечисления.СостояниеЗаказовИМ.Отгружен Тогда
								Рег[0].ЗаказОбщий			 	= Объединенный.Ссылка;
								Рег[0].ВремяИзмененияСтатуса 	= ТекущаяДата();
								Рег[0].Состояние 				= ?(ПеречислениеWS = Истина, Рег[0].Перечисление, Перечисление);
								Рег[0].Отменен                  =  ?(ПеречислениеWS = Истина, ПеречислениеWS, Рег[0].Отменен);
								Рег[0].Количество 				= Стр.Количество;
								Рег[0].Цена 					= стр.Цена;

								Рег.Записать(Истина);
							КонецЕсли;
						Иначе
							Если  Рег[0].Состояние = Перечисления.СостояниеЗаказовИМ.ОтмененПриПеремешении Тогда 
								Если Перечисление <> Перечисления.СостояниеЗаказовИМ.Отгружен  или Перечисление <> Перечисления.СостояниеЗаказовИМ.Возвращен тогда
									Рег[0].ВремяИзмененияСтатуса 	= ТекущаяДата();
									Рег[0].Состояние 				= ?(ПеречислениеWS = Истина, Рег[0].Перечисление, Перечисление);
									Рег[0].Отменен                  =  ?(ПеречислениеWS = Истина, ПеречислениеWS, Рег[0].Отменен);
									Рег[0].Количество 				= Стр.Количество;
									Рег[0].Цена 					= стр.Цена;
		
									Рег.Записать(Истина);
								КонецЕсли;
							ИначеЕсли  Рег[0].Состояние = Перечисления.СостояниеЗаказовИМ.ОтмененОбщий Тогда 
								Если Перечисление <> Перечисления.СостояниеЗаказовИМ.Отгружен  или Перечисление <> Перечисления.СостояниеЗаказовИМ.Возвращен или Перечисление <> Перечисления.СостояниеЗаказовИМ.Перемещен тогда
									Рег[0].ВремяИзмененияСтатуса 	= ТекущаяДата();
									Рег[0].Состояние 				= ?(ПеречислениеWS = Истина, Рег[0].Перечисление, Перечисление);
									Рег[0].Отменен                  =  ?(ПеречислениеWS = Истина, ПеречислениеWS, Рег[0].Отменен);
									Рег[0].Количество 				= Стр.Количество;
									Рег[0].Цена 					= стр.Цена;

									Рег.Записать(Истина);
								КонецЕсли;
							ИначеЕсли  Рег[0].Состояние = Перечисления.СостояниеЗаказовИМ.ОтмененИМ Тогда 
								Если Перечисление <> Перечисления.СостояниеЗаказовИМ.Отгружен  или Перечисление <> Перечисления.СостояниеЗаказовИМ.Возвращен или Перечисление <> Перечисления.СостояниеЗаказовИМ.Перемещен или Перечисление <> Перечисления.СостояниеЗаказовИМ.Объединен тогда
									Рег[0].ВремяИзмененияСтатуса 	= ТекущаяДата();
									Рег[0].Состояние 				= ?(ПеречислениеWS = Истина, Рег[0].Перечисление, Перечисление);
									Рег[0].Отменен                  =  ?(ПеречислениеWS = Истина, ПеречислениеWS, Рег[0].Отменен);
									Рег[0].Количество 				= Стр.Количество;
									Рег[0].Цена 					= стр.Цена;

									Рег.Записать(Истина);
								КонецЕсли;
							иначе
								Рег[0].ВремяИзмененияСтатуса 	= ТекущаяДата();
								Рег[0].Состояние 				= ?(ПеречислениеWS = Истина, Рег[0].Перечисление, Перечисление);
								Рег[0].Отменен                  =  ?(ПеречислениеWS = Истина, ПеречислениеWS, Рег[0].Отменен);
								Рег[0].Количество 				= Стр.Количество;
								Рег[0].Цена 					= стр.Цена;

								Рег.Записать(Истина);
								
							КонецЕсли;
						КонецЕсли;	
					//КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;	

Конецпроцедуры

Функция ПроверимНаличиеИСоответствиеСчетаНаОплату(Заказ) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.ЗаказПокупателя = &ЗаказПокупателя
	|	И СчетНаОплатуПокупателю.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", Заказ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество()> 0 тогда
		Счет = Результат[0].Ссылка;
		
		Если Сред(Заказ.Номер, 3, 6)  	<> Сред(Счет.Номер, 4, 6) тогда
			Возврат ложь;
		ИначеЕсли Заказ.ДоговорКонтрагента  	<> Счет.ДоговорКонтрагента тогда
			Возврат ложь;
		ИначеЕсли Заказ.Контрагент	    <> Счет.Контрагент тогда  
			Возврат ложь;		
		Иначе	
			// если реквизиты совпадают проверяем таблицы
			Запрос = Новый Запрос;
			
			Запрос.Текст = "ВЫБРАТЬ
			|	СчетНаОплатуПокупателюТовары.Номенклатура,
			|	СчетНаОплатуПокупателюТовары.Количество,
			|	СчетНаОплатуПокупателюТовары.ЕдиницаИзмерения,
			|	СчетНаОплатуПокупателюТовары.Цена,
			|	СчетНаОплатуПокупателюТовары.Сумма,
			|	СчетНаОплатуПокупателюТовары.СтавкаНДС
			|ПОМЕСТИТЬ ИсточникТЗтовары
			|ИЗ
			|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
			|ГДЕ
			|	СчетНаОплатуПокупателюТовары.Ссылка = &СсылкаСчет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиентаТовары.Номенклатура,
			|	ЗаказКлиентаТовары.Количество,
			|	ЗаказКлиентаТовары.ЕдиницаИзмерения,
			|	ЗаказКлиентаТовары.Размещение,
			|	ЗаказКлиентаТовары.Цена,
			|	ЗаказКлиентаТовары.Сумма,
			|	ЗаказКлиентаТовары.СтавкаНДС
			|ПОМЕСТИТЬ СтарыеТовары
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК ЗаказКлиентаТовары
			|ГДЕ
			|	ЗаказКлиентаТовары.Ссылка = &СсылкаЗаказ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсточникТЗтовары.Номенклатура КАК НоменклатураНов,
			|	ЗаказКлиентаТовары.Номенклатура КАК НоменклатураСтар
			|ПОМЕСТИТЬ ТабСхлопнутая
			|ИЗ
			|	ИсточникТЗтовары КАК ИсточникТЗтовары
			|		ПОЛНОЕ СОЕДИНЕНИЕ СтарыеТовары КАК ЗаказКлиентаТовары
			|		ПО ИсточникТЗтовары.Номенклатура = ЗаказКлиентаТовары.Номенклатура
			|			И ИсточникТЗтовары.Количество = ЗаказКлиентаТовары.Количество
			|			И ИсточникТЗтовары.ЕдиницаИзмерения = ЗаказКлиентаТовары.ЕдиницаИзмерения
			|			И ИсточникТЗтовары.Цена = ЗаказКлиентаТовары.Цена
			|			И ИсточникТЗтовары.Сумма = ЗаказКлиентаТовары.Сумма
			|			И ИсточникТЗтовары.СтавкаНДС = ЗаказКлиентаТовары.СтавкаНДС
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабСхлопнутая.НоменклатураНов,
			|	ТабСхлопнутая.НоменклатураСтар
			|ИЗ
			|	ТабСхлопнутая КАК ТабСхлопнутая
			|ГДЕ
			|	(ТабСхлопнутая.НоменклатураНов ЕСТЬ NULL 
			|			ИЛИ ТабСхлопнутая.НоменклатураСтар ЕСТЬ NULL )
			|
			//+++ 26.03.2018
			|; уничтожить ИсточникТЗтовары; уничтожить СтарыеТовары; уничтожить ТабСхлопнутая;";
			
			
			Запрос.УстановитьПараметр("СсылкаСчет",Счет);
			Запрос.УстановитьПараметр("СсылкаЗаказ",Заказ);
			рез = Запрос.Выполнить().Выгрузить();		
			Если Рез.Количество()>0 тогда
				Возврат ложь;   
			Иначе
				Запрос = Новый Запрос;
				
				Запрос.Текст = "ВЫБРАТЬ
				|	СчетНаОплатуПокупателюУслуги.Номенклатура,
				|	СчетНаОплатуПокупателюУслуги.Количество,
				|	СчетНаОплатуПокупателюУслуги.Цена,
				|	СчетНаОплатуПокупателюУслуги.Сумма,
				|	СчетНаОплатуПокупателюУслуги.СтавкаНДС
				|ПОМЕСТИТЬ ИсточникТЗтовары
				|ИЗ
				|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
				|ГДЕ
				|	СчетНаОплатуПокупателюУслуги.Ссылка = &СсылкаСчет
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗаказПокупателяУслуги.Номенклатура,
				|	ЗаказПокупателяУслуги.Количество,
				|	ЗаказПокупателяУслуги.Цена,
				|	ЗаказПокупателяУслуги.Сумма,
				|	ЗаказПокупателяУслуги.СтавкаНДС
				|ПОМЕСТИТЬ СтарыеТовары
				|ИЗ
				|	Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателяУслуги
				|ГДЕ
				|	ЗаказПокупателяУслуги.Ссылка = &СсылкаЗаказ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ИсточникТЗтовары.Номенклатура КАК НоменклатураНов,
				|	ЗаказКлиентаТовары.Номенклатура КАК НоменклатураСтар
				|ПОМЕСТИТЬ ТабСхлопнутая
				|ИЗ
				|	ИсточникТЗтовары КАК ИсточникТЗтовары
				|		ПОЛНОЕ СОЕДИНЕНИЕ СтарыеТовары КАК ЗаказКлиентаТовары
				|		ПО ИсточникТЗтовары.Номенклатура = ЗаказКлиентаТовары.Номенклатура
				|			И ИсточникТЗтовары.Количество = ЗаказКлиентаТовары.Количество
				|			И ИсточникТЗтовары.Цена = ЗаказКлиентаТовары.Цена
				|			И ИсточникТЗтовары.Сумма = ЗаказКлиентаТовары.Сумма
				|			И ИсточникТЗтовары.СтавкаНДС = ЗаказКлиентаТовары.СтавкаНДС
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТабСхлопнутая.НоменклатураНов,
				|	ТабСхлопнутая.НоменклатураСтар
				|ИЗ
				|	ТабСхлопнутая КАК ТабСхлопнутая
				|ГДЕ
				|	(ТабСхлопнутая.НоменклатураНов ЕСТЬ NULL 
				|			ИЛИ ТабСхлопнутая.НоменклатураСтар ЕСТЬ NULL )
				//+++ 26.03.2018
				|; уничтожить ИсточникТЗтовары; уничтожить СтарыеТовары; уничтожить ТабСхлопнутая;";
				
				
				Запрос.УстановитьПараметр("СсылкаСчет",Счет);
				Запрос.УстановитьПараметр("СсылкаЗаказ",Заказ);
				рез = Запрос.Выполнить().Выгрузить();		
				Если Рез.Количество()>0 тогда
					Возврат ложь;   
				Иначе
					
					Возврат истина;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат ложь;
	КонецЕсли;
		
КонецФункции 

Процедура ПроверкаСоответствияПланаФактуПоНаправлениюПродаж() Экспорт
Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиОбработок.ТЧ
			|ИЗ
			|	РегистрСведений.НастройкиОбработок КАК НастройкиОбработок
			|ГДЕ
			|	НастройкиОбработок.ВидОбработки = ""МастерПланированияОтделаРазвития""
			|	И НастройкиОбработок.Период = &ДатаМесяца";

		Запрос.УстановитьПараметр("ДатаМесяца", НачалоМесяца(ТекущаяДата()));//'20170401000000'));	
		Результат = Запрос.Выполнить();

		Выборка = Результат.Выбрать();

		Если Выборка.Следующий() Тогда
			ПолученноеЗначение = Выборка.ТЧ.Получить();
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
	|	ПланыПродажПоПоказателямЭффективностиОбороты.ОбъектПланирования
	|ИЗ
	|	РегистрНакопления.ПланыПродажПоПоказателямЭффективности.Обороты(&НачПериода, &КонПериода, , ) КАК ПланыПродажПоПоказателямЭффективностиОбороты";
	Запрос.УстановитьПараметр("НачПериода", НачалоМесяца(ТекущаяДата()));//'20170401000000'));
	Запрос.УстановитьПараметр("КонПериода", КонецМесяца(ТекущаяДата()));
		Результат = Запрос.Выполнить();

		Выборка = Результат.Выгрузить();

		Если Выборка.Количество() > 0 Тогда
			
		
	Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Серков");
	задача.Наименование = "Нескорректированные планы за "+ формат(ТекущаяДата(),"ДФ=ММММ гггг 'г.'") + " по Департаменту продаж!"; 
	//задача.Описание = "Отклоненеие от плана:" + Символы.ПС ;	
	задача.Дата 		    = ТекущаяДата();
	задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
	//задача.Оповещение     = истина;
	задача.СрокОповещения = ТекущаяДата();
    ПоказательПл = 1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", НачалоМесяца(ТекущаяДата()));//'20170401000000'));
	Запрос.УстановитьПараметр("КонДата", КонецДня(КонецМесяца(ТекущаяДата())));//'20170430000000')));
    Запрос.УстановитьПараметр("Серков",  ПолученноеЗначение);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Серков.ПланСерков КАК План,
	               |	Серков.НомерСтрокиТЧПланОтделаРазвития,
	               |	Серков.НаправлениеПродаж
	               |ПОМЕСТИТЬ Серков
	               |ИЗ
	               |	&Серков КАК Серков
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Серков.План,
	               |	Серков.НомерСтрокиТЧПланОтделаРазвития,
	               |	Серков.НаправлениеПродаж,
	               |	ВводПоказателейЭффективностиПоНаправлениямДанные.ПоказательЭффективности,
	               |	ВводПоказателейЭффективностиПоНаправлениямДанные.ПараметрПоказателя
	               |ПОМЕСТИТЬ СерковСвод
	               |ИЗ
	               |	Серков КАК Серков
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводПоказателейЭффективностиПоНаправлениям.Данные КАК ВводПоказателейЭффективностиПоНаправлениямДанные
	               |		ПО Серков.НомерСтрокиТЧПланОтделаРазвития = ВводПоказателейЭффективностиПоНаправлениямДанные.НомерСтроки
	               |ГДЕ
	               |	ВводПоказателейЭффективностиПоНаправлениямДанные.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	               |	И ВводПоказателейЭффективностиПоНаправлениямДанные.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И ВводПоказателейЭффективностиПоНаправлениямДанные.Ссылка.Проведен = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПланыПродажПоПоказателямЭффективностиОбороты.ПоказательЭффективности КАК ПоказательЭффективности,
	               |	СУММА(ПланыПродажПоПоказателямЭффективностиОбороты.ЗначениеПланОборот) КАК ПланОборот,
	               |	ПланыПродажПоПоказателямЭффективностиОбороты.ОбъектПланирования.НаправлениеПродаж КАК НаправлениеПродаж,
	               |	ПланыПродажПоПоказателямЭффективностиОбороты.ПараметрПоказателя,
	               |	ВводПоказателейЭффективностиПоНаправлениямДанные.НомерСтроки
	               |ПОМЕСТИТЬ Менеджеры
	               |ИЗ
	               |	РегистрНакопления.ПланыПродажПоПоказателямЭффективности.Обороты(&НачДата, &КонДата, , ) КАК ПланыПродажПоПоказателямЭффективностиОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводПоказателейЭффективностиПоНаправлениям.Данные КАК ВводПоказателейЭффективностиПоНаправлениямДанные
	               |		ПО ПланыПродажПоПоказателямЭффективностиОбороты.ПоказательЭффективности = ВводПоказателейЭффективностиПоНаправлениямДанные.ПоказательЭффективности
	               |			И ПланыПродажПоПоказателямЭффективностиОбороты.ПараметрПоказателя = ВводПоказателейЭффективностиПоНаправлениямДанные.ПараметрПоказателя
	               |ГДЕ
	               |	ВводПоказателейЭффективностиПоНаправлениямДанные.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	               |	И ВводПоказателейЭффективностиПоНаправлениямДанные.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И ВводПоказателейЭффективностиПоНаправлениямДанные.Ссылка.Проведен = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПланыПродажПоПоказателямЭффективностиОбороты.ПоказательЭффективности,
	               |	ПланыПродажПоПоказателямЭффективностиОбороты.ОбъектПланирования.НаправлениеПродаж,
	               |	ПланыПродажПоПоказателямЭффективностиОбороты.ПараметрПоказателя,
	               |	ВводПоказателейЭффективностиПоНаправлениямДанные.НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СерковСвод.План, 0) КАК План,
	               |	ЕСТЬNULL(Менеджеры.ПланОборот, 0) КАК ПланОборот,
	               |	СерковСвод.НаправлениеПродаж,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Менеджеры.ПоказательЭффективности, 0) = 0
	               |			ТОГДА СерковСвод.ПоказательЭффективности
	               |		ИНАЧЕ Менеджеры.ПоказательЭффективности
	               |	КОНЕЦ КАК ПоказательЭффективности,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Менеджеры.ПараметрПоказателя, 0) = 0
	               |			ТОГДА СерковСвод.ПараметрПоказателя
	               |		ИНАЧЕ Менеджеры.ПараметрПоказателя
	               |	КОНЕЦ КАК ПараметрПоказателя
	               |ИЗ
	               |	СерковСвод КАК СерковСвод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Менеджеры КАК Менеджеры
	               |		ПО СерковСвод.НомерСтрокиТЧПланОтделаРазвития = Менеджеры.НомерСтроки
	               |			И СерковСвод.НаправлениеПродаж = Менеджеры.НаправлениеПродаж
	               |			И СерковСвод.ПоказательЭффективности = Менеджеры.ПоказательЭффективности
	               |			И СерковСвод.ПараметрПоказателя = Менеджеры.ПараметрПоказателя
	               |			И СерковСвод.НомерСтрокиТЧПланОтделаРазвития = Менеджеры.НомерСтроки";

		
	РезультатПлан = Запрос.Выполнить().Выгрузить();			

	Для Каждого Стр из РезультатПлан ЦИКЛ
				
		Если Стр.План <> Стр.ПланОборот Тогда
			Ст = Задача.Планы.Добавить();
			Ст.НаправлениеПродаж = Стр.НаправлениеПродаж;
			Ст.ПланОборот = Стр.ПланОборот;
			Ст.План = Стр.План;
			Ст.ПоказательЭффективности = Стр.ПоказательЭффективности;
			Ст.ПараметрПоказателя = Стр.ПараметрПоказателя;			
        КонецЕсли;
	КонецЦикла;
	попытка
		Если Задача.Планы.Количество() > 0 Тогда
			задача.Записать();	
		КонецЕсли;
	исключение		
	КонецПопытки;

  КонецЕсли;


КонецПроцедуры

Процедура ПредоставитьМенеджеруПросрочкуПоПДЗ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ПДЗ,
		|	ВложенныйЗапрос.Менеджер КАК Менеджер,
		|	ВложенныйЗапрос.Контрагент КАК Контрагент,
		|	ВложенныйЗапрос.ДнейПросрочки
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ЗаказПокупателя
		|					ТОГДА ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты < &МинДата
		|								ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата < &МинДата
		|							ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			КОНЕЦ) КАК ПДЗ,
		|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК Менеджер,
		|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
		|		МАКСИМУМ(РАЗНОСТЬДАТ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, &МинДата, ДЕНЬ)) КАК ДнейПросрочки
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|				,
		|				ДоговорКонтрагента.Владелец.Покупатель = ИСТИНА
		|					И Сделка.ДатаОплаты < &мИНдАТА
		|					И ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж В ИЕРАРХИИ (&направлениепродаж)
		|					И НЕ ДоговорКонтрагента.Владелец В
		|							(ВЫБРАТЬ
		|								СудебныеРазбирательстваСДебиторами.Контрагент КАК Контрагент
		|							ИЗ
		|								РегистрСведений.СудебныеРазбирательстваСДебиторами КАК СудебныеРазбирательстваСДебиторами
		|							СГРУППИРОВАТЬ ПО
		|												СудебныеРазбирательстваСДебиторами.Контрагент)) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	ГДЕ
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо,
		|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВложенныйЗапрос.ДнейПросрочки > 14
		|				ТОГДА ВложенныйЗапрос.ПДЗ > 0
		|			ИНАЧЕ ВложенныйЗапрос.ПДЗ > 500000
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Менеджер,
		|	Контрагент";

	Запрос.УстановитьПараметр("МинДата", ТекущаяДата());
    Запрос.УстановитьПараметр("направлениепродаж", Справочники.НаправленияПродаж.НайтиПоКоду("26"));
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    Менеджер = Неопределено;
	Контр = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Менеджер <> ВыборкаДетальныеЗаписи.Менеджер Тогда
			задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
			Задача.Исполнитель = ВыборкаДетальныеЗаписи.Менеджер;
			задача.НаСогласование = Ложь;
			задача.Наименование = "ПДЗ по контрагентам"; 
			задача.Описание = "Заполните информацию по оплатам для когнтрагентов:";
			задача.Дата 		    = ТекущаяДата();
			задача.СрокИсполнения = КонецДня( ТекущаяДата() );
			//задача.Оповещение     = истина;
			задача.СрокОповещения = ТекущаяДата();
			попытка
				задача.Записать();
            исключение
            КонецПопытки;
		конецЕсли;
		Если Контр <> ВыборкаДетальныеЗаписи.Контрагент Тогда
			
			Рег = РегистрыСведений.ИнформацияПоПДЗОтМенеджера.СоздатьНаборЗаписей();
			Рег.Записывать = Истина;
			
			Рег.Отбор.Менеджер.Установить(ВыборкаДетальныеЗаписи.Менеджер);
			Рег.Отбор.Контрагент.Установить(ВыборкаДетальныеЗаписи.Контрагент);
			Попытка
				Рег.Прочитать();
				Если рег.Количество() = 0 Тогда
					Рг  = РегистрыСведений.ИнформацияПоПДЗОтМенеджера.СоздатьМенеджерЗаписи();
					Рг.Менеджер 		= ВыборкаДетальныеЗаписи.Менеджер;
					Рг.ДнейПросрочки	= ВыборкаДетальныеЗаписи.ДнейПросрочки;
					Рг.Контрагент 		= ВыборкаДетальныеЗаписи.Контрагент;
					Рг.СуммаДолга 		= ВыборкаДетальныеЗаписи.ПДЗ;
					Рг.Записать(Истина);
				Иначе
					Рег[0].ДнейПросрочки = ВыборкаДетальныеЗаписи.ДнейПросрочки;
					Рег[0].СуммаДолга 	 = ВыборкаДетальныеЗаписи.ПДЗ;
					Рег[0].Оплата 	 	 = '00010101';
					Рег[0].Комментарий 	 = "";
					Рег[0].Событие  	 = Документы.Событие.ПустаяСсылка();
					Рег.Записать(Истина);
				конецЕсли;
			Исключение
			КонецПопытки;
			конецЕсли;
		Контр = ВыборкаДетальныеЗаписи.Контрагент;
		Менеджер = ВыборкаДетальныеЗаписи.Менеджер;	
	КонецЦикла;
    
КонецПроцедуры

Процедура ЗапуститьОбработкуНаполеон(РежимЗапуска) Экспорт
	
	Если РежимЗапуска = 1 тогда
		//Выгрузка остатков и долгов
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Выгрузка наполеон"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь);
		Обработка.Настройки();
		Обработка.ВыгрузкаОстатков();

		//Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
		//Форма.Настройки();
		//Форма.ВыгрузкаОстатков();
	Иначе
		// Прием заявок
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Выгрузка наполеон"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь);
		Обработка.Настройки();
		Обработка.ПриемЗаявок();
		
		//Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
		//Форма.Настройки();
		//Форма.ПриемЗаявок();
	КонецЕсли;		
КонецПроцедуры

Процедура ОтправитьПисьмоОНедогрузе(ТекстОповещения, Заказ) Экспорт
	
	УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
	
	//======================Получим адрес эл.почты=================
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Объект", Заказ.Контрагент);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	АдресЭлПочтыКонтрагента = "";
	Если Выборка.Следующий() Тогда
		АдресЭлПочтыКонтрагента = СокрЛП(выборка.Представление);
	КонецЕсли;
	
	//============================================================		
	i=0;
	ВременнаяПапка = КаталогВременныхФайлов(); //+++ 07.08.2013   "\\terminal\RESTORE Userdir\Отправленные документы\"; 
	ТекстПисьма = "";
	Для каждого Стр из ТекстОповещения.Товары Цикл
		ТекстПисьма = ""
		+"Код: "+Стр.Номенклатура.Код+?(Стр.Номенклатура.Артикул<>"" и Стр.Номенклатура.Артикул<>Стр.Номенклатура.Код,", арт.: "+Стр.Номенклатура.Артикул,"")+" Товар: " //27.04.2018
		+ Стр.Номенклатура.НаименованиеПолное + " - в Кол-ве: " + Стр.Количество + " " + Стр.ЕдиницаИзмерения + Символы.ПС;
	КонецЦикла;
	СписокФайловВложений=Новый СписокЗначений;
	
	ТекстСообщения0 ="   Добрый день,
	|
	|Высылаем Вам информацию о Недогрузе товаров по заказу № "+Заказ.Номер+" от "+формат(Заказ.Дата,"ДЛФ=D")+"
	
	|"+ТекстПисьма+"
	|
	|По всем вопросам - обращайтесь к вашему менеджеру.
	|Ваш менеджер: "+?(ЗначениеЗаполнено(Заказ.ДоговорКонтрагента.ОтветственноеЛицо),Заказ.ДоговорКонтрагента.ОтветственноеЛицо.Наименование, Заказ.Ответственный.Наименование)+"
	|
	|Создавать новые заказы и следить за состоянием ваших заказов
	|	Вы можете на нашем сайте: http://terminal.yst.ru
	|
	|       	Это письмо создано автоматически.
	|      Отвечать и писать на этот адрес - НЕ НУЖНО!
	|";
	
	
	ИПП=Новый ИнтернетПочтовыйПрофиль;
	ИПП.АдресСервераSMTP=УЗ.SMTPСервер;
	ИПП.ПортSMTP=УЗ.ПортSMTP;
	Если УЗ.ТребуетсяSMTPАутентификация Тогда
		ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
		ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
	Иначе
		ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		ИПП.ПарольSMTP         = "";
		ИПП.ПользовательSMTP   = "";
	КонецЕсли;
	Письмо=Новый ИнтернетПочтовоеСообщение;
	
	Письмо.Отправитель.Адрес 		   = УЗ.АдресЭлектроннойПочты;
	Письмо.Отправитель.ОтображаемоеИмя = УЗ.АдресЭлектроннойПочты;
	
	
	i = Найти(АдресЭлПочтыКонтрагента,";"); j=Найти(АдресЭлПочтыКонтрагента, ",");
	k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
	
	Если i=0 и j=0 Тогда
		Письмо.Получатели.Добавить(АдресЭлПочтыКонтрагента);
	Иначе
		АдрОстаток = СокрЛП(АдресЭлПочтыКонтрагента);
		Пока (k>0) Цикл
			Адр1 = Лев(АдрОстаток, k-1);
			Если СокрЛП(Адр1)<>"" и Найти(Адр1,"@")>0 и Найти(Адр1,".")>0 Тогда
				Письмо.Получатели.Добавить(Адр1);
			Иначе
				Сообщить("Адрес '"+Адр1+"' не содержит @ или .");
			КонецЕсли;
			АдрОстаток = Прав(АдрОстаток, стрДлина(АдрОстаток)-k);
			i = Найти(АдрОстаток,";"); j=Найти(АдрОстаток, ",");
			k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
		КонецЦикла;
		Если СокрЛП(АдрОстаток)<>"" и Найти(АдрОстаток,"@")>0 и Найти(АдрОстаток,".")>0 Тогда
			Письмо.Получатели.Добавить(АдрОстаток);
		КонецЕсли;
		
	КонецЕсли; //+++ )
	
	Письмо.Тема="Недогруз товара по заказу №"+Заказ.Номер;
	
	
	Письмо.ИмяОтправителя ="";//"ЗАО ТК ""Яршинторг"", г.Ярославль";
	Письмо.Организация ="";   //"ЗАО ТК ""Яршинторг"", г.Ярославль";
	Письмо.Тексты.Добавить(ТекстСообщения0,ТипТекстаПочтовогоСообщения.простойТекст);
	
	Почта=Новый ИнтернетПочта;
	Почта.Подключиться(ИПП);
	
	Попытка
		Почта.Послать(Письмо);
		Почта.Отключиться();
	Исключение
		сообщить("Не удалось отправить письмо! "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
		
КонецПроцедуры

Процедура ПроверкаОтсутствияПФДокументовВозврата() Экспорт
	
Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаявкаНаВозвратТоваровТовары.Ссылка,
		|	НаправленияПродаж.Руководитель,
		|	НаправленияПродаж.Согласование,
		|	ЗаявкаНаВозвратТоваровТовары.Ссылка.Ответственный,
		|	РАЗНОСТЬДАТ(ЗаявкаНаВозвратТоваровТовары.Ссылка.Дата, &ДатаТек, ДЕНЬ) КАК ДнейСоздания,
		|	ЗадачиПользователя.Ссылка КАК Задача,
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(ЗаявкаНаВозвратТоваровТовары.Ссылка.Дата, &ДатаТек, ДЕНЬ) > 14
		|			ТОГДА НаправленияПродаж.Согласование
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РАЗНОСТЬДАТ(ЗаявкаНаВозвратТоваровТовары.Ссылка.Дата, &ДатаТек, ДЕНЬ) > 7
		|					ТОГДА НаправленияПродаж.Руководитель
		|				ИНАЧЕ ЗаявкаНаВозвратТоваровТовары.Ссылка.Ответственный
		|			КОНЕЦ
		|	КОНЕЦ КАК МенеджерСТ,
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(ЗадачиПользователя.Дата, &ДатаТек, ДЕНЬ) > 14
		|			ТОГДА НаправленияПродаж.Согласование
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РАЗНОСТЬДАТ(ЗадачиПользователя.Дата, &ДатаТек, ДЕНЬ) > 7
		|					ТОГДА НаправленияПродаж.Руководитель
		|				ИНАЧЕ ЗаявкаНаВозвратТоваровТовары.Ссылка.Ответственный
		|			КОНЕЦ
		|	КОНЕЦ КАК Менеджер
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияПродаж КАК НаправленияПродаж
		|		ПО ЗаявкаНаВозвратТоваровТовары.Ссылка.Ответственный.НаправлениеПродаж = НаправленияПродаж.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачиПользователя КАК ЗадачиПользователя
		|		ПО ЗаявкаНаВозвратТоваровТовары.Ссылка = ЗадачиПользователя.Объект
		|ГДЕ
		|	НЕ ЗаявкаНаВозвратТоваровТовары.Реализация В
		|				(ВЫБРАТЬ
		|					ВозвратТоваровОтПокупателяТовары.ДокументПартии
		|				ИЗ
		|					Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|				ГДЕ
		|					ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен = ИСТИНА
		|					И ВозвратТоваровОтПокупателяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ)
		|	И ЗаявкаНаВозвратТоваровТовары.Ссылка.Проведен = ИСТИНА
		|	И ЗаявкаНаВозвратТоваровТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ЗаявкаНаВозвратТоваровТовары.Ссылка.нетДокументов = ИСТИНА
		|	И ЕСТЬNULL(ЗадачиПользователя.ЗадачаПоПоискуДокументов, ИСТИНА) = ИСТИНА
		|	И ЕСТЬNULL(ЗадачиПользователя.Исполнитель, """") <> ВЫБОР
		|			КОГДА РАЗНОСТЬДАТ(ЗаявкаНаВозвратТоваровТовары.Ссылка.Дата, &ДатаТек, ДЕНЬ) > 14
		|				ТОГДА НаправленияПродаж.Согласование
		|			ИНАЧЕ ВЫБОР
		|					КОГДА РАЗНОСТЬДАТ(ЗаявкаНаВозвратТоваровТовары.Ссылка.Дата, &ДатаТек, ДЕНЬ) > 7
		|						ТОГДА НаправленияПродаж.Руководитель
		|					ИНАЧЕ ЗаявкаНаВозвратТоваровТовары.Ссылка.Ответственный
		|				КОНЕЦ
		|		КОНЕЦ
		|	И ЕСТЬNULL(ЗадачиПользователя.Исполнитель, """") <> ВЫБОР
		|			КОГДА РАЗНОСТЬДАТ(ЗадачиПользователя.Дата, &Дата, ДЕНЬ) > 14
		|				ТОГДА НаправленияПродаж.Согласование
		|			ИНАЧЕ ВЫБОР
		|					КОГДА РАЗНОСТЬДАТ(ЗадачиПользователя.Дата, &Дата, ДЕНЬ) > 7
		|						ТОГДА НаправленияПродаж.Руководитель
		|					ИНАЧЕ ЗаявкаНаВозвратТоваровТовары.Ссылка.Ответственный
		|				КОНЕЦ
		|		КОНЕЦ";
    Запрос.УстановитьПараметр( "ДатаТек", ТекущаяДата());
	Запрос.УстановитьПараметр( "Дата",ТекущаяДата()- (365*24*60*60));
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
			Задача.Исполнитель = ВыборкаДетальныеЗаписи.Менеджер;
			задача.НаСогласование = Ложь; 
			задача.Наименование = ?(ВыборкаДетальныеЗаписи.ДнейСоздания > 7,  "По менеджеру: " + ВыборкаДетальныеЗаписи.Ответственный + " отсутствуют печатные формы по заявке на возврат"  , "Отсутствуют печатные формы по заявке на возврат"); 
			задача.Описание =   "Задача просрочена " +?(ВыборкаДетальныеЗаписи.ДнейСоздания > 14 ,"руководителем: "+ ВыборкаДетальныеЗаписи.Руководитель , ?(ВыборкаДетальныеЗаписи.ДнейСоздания > 7, "менеджером: " + ВыборкаДетальныеЗаписи.Ответственный, "")) + Символы.ПС +"Предоставте документы в бухгалтерию для проведения возврата по заявке: " + ВыборкаДетальныеЗаписи.Ссылка;
			задача.Дата 		    = ТекущаяДата();
			задача.СрокИсполнения = КонецДня( ТекущаяДата() );
			задача.Оповещение     = истина;
			задача.СрокОповещения = ТекущаяДата();
			задача.Объект = ВыборкаДетальныеЗаписи.Ссылка;
			задача.ЗадачаПоПоискуДокументов = Истина;
			попытка
				задача.Записать();
            исключение
            КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаНовыхКонтрагентовПоБазеФНС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ОсновнойМенеджерКонтрагента КАК ОсновнойМенеджерКонтрагента,
		|	Контрагенты.Ссылка,
		|	Контрагенты.ИНН,
		|	Контрагенты.КПП,
		|	ЗначенияСвойствОбъектов.Свойство,
		|	ЗначенияСвойствОбъектов.Значение
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО Контрагенты.Ссылка = ЗначенияСвойствОбъектов.Объект
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &Свойство1
		|	И не ЗначенияСвойствОбъектов.Значение = &Значение2
		|	И Контрагенты.Ссылка В
		|				(ВЫБРАТЬ
		|					Контрагенты.Ссылка
		|				ИЗ
		|					Справочник.Контрагенты КАК Контрагенты ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|						ПО
		|							Контрагенты.Ссылка = ЗначенияСвойствОбъектов.Объект
		|				ГДЕ
		|					ЗначенияСвойствОбъектов.Свойство = &Свойство
		|					И НЕ ЗначенияСвойствОбъектов.Значение В (&Значение))
		|	И Контрагенты.ЮрФизЛицо = &ЮрФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОсновнойМенеджерКонтрагента";
		
		КатегорииКонтрагента = Новый СписокЗначений;
		КатегорииКонтрагента.Добавить(Перечисления.КатегорииКонтрагентов.ВременноНеРаботаем);
		КатегорииКонтрагента.Добавить(Перечисления.КатегорииКонтрагентов.Закрылись);
		КатегорииКонтрагента.Добавить(Перечисления.КатегорииКонтрагентов.Разобраться);
		КатегорииКонтрагента.Добавить(Перечисления.КатегорииКонтрагентов.НеРаботающиеБольшеГода);
		
		Запрос.УстановитьПараметр("Значение2", 	Перечисления.СтатусКонтрагентаФНС.Статус_0);
		Запрос.УстановитьПараметр("Свойство1", 	ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90270"));
        Запрос.УстановитьПараметр("Значение", 	КатегорииКонтрагента);
		Запрос.УстановитьПараметр("Свойство", 	ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90218"));
		Запрос.УстановитьПараметр("ЮрФизЛицо",	Перечисления.ЮрФизЛицо.ЮрЛицо);
	Результат = Запрос.Выполнить().Выбрать();
	
	Контрагенты = Новый ТаблицаЗначений;
	Контрагенты.Колонки.Добавить("Контрагент");
	Контрагенты.Колонки.Добавить("ИНН");
	Контрагенты.Колонки.Добавить("КПП");
	
	Менеджер = Неопределено;
	Первый = Истина;
	
	Пока Результат.Следующий() Цикл
		
		Если первый тогда 		
		
			Ст = Контрагенты.Добавить();
			Ст.Контрагент = Результат.Ссылка;
			Ст.Инн = СокрЛП(Результат.Инн);
			Ст.Кпп = СокрЛП(Результат.Кпп);

		ИначеЕсли Менеджер = Результат.ОсновнойМенеджерКонтрагента тогда 		
		
			Ст = Контрагенты.Добавить();
			Ст.Контрагент = Результат.Ссылка;
			Ст.Инн = СокрЛП(Результат.Инн);
			Ст.Кпп = СокрЛП(Результат.Кпп);
			
		Иначе
			
			Менеджер = Результат.ОсновнойМенеджерКонтрагента;
			ПроверитьКонтрагентаВ_ФНС(Контрагенты);
			СоздатьЗадачуДляМенеджера(Контрагенты);
			Контрагенты.Очистить();
		КонецЕсли;
		
		ПЕрвый = Ложь;
		Менеджер = Результат.ОсновнойМенеджерКонтрагента;

	КонецЦикла;	
	
КонецПроцедуры

Функция ЗапросПоСтатусуКонтрагентаФНС(Контрагенты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект, ЗначенияСвойствОбъектов.Значение
    |ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	//26.03.2018 - только как Контрагенты!
	|	выразить(ЗначенияСвойствОбъектов.Объект как Справочник.Контрагенты) В (&СписКонтр)
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И не ЗначенияСвойствОбъектов.Значение = &Значение
	|";
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90270")); //Результат проверки ФНС
	Запрос.УстановитьПараметр("Значение", строка(Перечисления.СтатусКонтрагентаФНС.Статус_0) );
	
	Если Контрагенты.Количество()=1 тогда  //26.03.2018 один контр = быстрее в несколько раз
		Запрос.УстановитьПараметр("Контр", Контрагенты[0].Контрагент);
		Запрос.Текст = стрЗаменить(Запрос.Текст , "В (&СписКонтр)","= &Контр");
	Иначе
		Запрос.УстановитьПараметр("СписКонтр", Контрагенты);
	КонецЕсли;

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьЗадачуДляМенеджера(Контрагенты) Экспорт 
	
		Результат = ЗапросПоСтатусуКонтрагентаФНС(Контрагенты);
		Если Результат.Количество() > 0 Тогда
			
			Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
			Задача.Наименование = "Контрагенты которые не прошли проверку в ФНС:";
			Задача.Исполнитель = Результат[0].Объект.ОсновнойМенеджерКонтрагента;
			Задача.Дата = ТекущаяДата();
			Задача.ДатаИсполнения = КонецДня(ТекущаяДата());
			Описание = "Контрагенты которые не прошли проверку в ФНС:";
			Для каждого Ст из Результат цикл
				  Описание = Описание + Символы.ПС +" Код: " + Ст.Объект.Код +" "+Ст.Объект + " Причина: " + Ст.Значение; 
			КонецЦикла;
			Задача.Описание = Описание;
			Задача.Записать();
		КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьКонтрагентаВ_ФНС(Контрагенты = Неопределено) Экспорт
	
	Дата = ТекущаяДата();
	
	УРЛ = "http://npchk.nalog.ru/FNSNDSCAWS_2?wsdl";
	Определения = Новый WSОпределения(УРЛ);
	WSСервис = Определения.Сервисы[0];
	Прокси = Новый WSПрокси(Определения, WSСервис.URIПространстваИмен, WSСервис.Имя, WSСервис.ТочкиПодключения[0].Имя);    
	Фабрика = Прокси.ФабрикаXDTO;
	ТипWSПараметра = Фабрика.Пакеты.Получить("http://ws.unisoft/FNSNDSCAWS2/Request").Получить("NdsRequest2");
	WSПараметры = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	NP = ТипWSПараметра.Свойства[0];
	КоличествоЗаписанных = 1;
	
	Для Каждого Контрагент Из Контрагенты Цикл
		
		Если КоличествоЗаписанных % 10000 = 0 Тогда 
			Проверенные = Прокси.NdsRequest2(WSПараметры);
			ОбработкаРезультата(Проверенные,Контрагенты);	
			WSПараметры.NP.Clear();
			КоличествоЗаписанных = 1;
		КонецЕсли;
		
		Попытка
			КПП = СокрЛП(Строка(Контрагент.КПП));
			DT =  Дата;
			Параметр = Прокси.ФабрикаXDTO.Создать(NP.Тип);
			Параметр.INN = СокрЛП(Строка(Контрагент.ИНН));
			Если Не ПустаяСтрока(КПП) Тогда 
				Параметр.KPP = КПП;
			КонецЕсли;
			Если Не DT = '00010101' Тогда
				Параметр.DT = Формат(DT, "ДФ = ""дд.ММ.гггг""");
			КонецЕсли;
			WSПараметры.NP.Add(Параметр);	
		Исключение
			
		КонецПопытки;
		КоличествоЗаписанных = КоличествоЗаписанных + 1;
	КонецЦикла;
	
	Если WSПараметры.NP.Count() > 0 Тогда 
		Проверенные = Прокси.NdsRequest2(WSПараметры); 	
		ОбработкаРезультата(Проверенные, Контрагенты);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаРезультата(Проверенные, Контрагенты)
	
	Для Каждого Проверенный Из Проверенные.NP Цикл
		 
		ИНН = Строка(Проверенный.INN);
		КПП = Строка(Проверенный.KPP);
		Статус = Проверенный.State;
		Если ИНН <> "" Тогда
			НайденныеСтроки = Контрагенты.НайтиСтроки(Новый Структура("ИНН,КПП", ИНН, КПП));
			Для Каждого Элемент Из НайденныеСтроки Цикл 
				
				Контрагент = Элемент.Контрагент;
				МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	    		МенеджерЗаписи.Объект = Контрагент;
	    		МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90270"); 
	   			МенеджерЗаписи.Значение = СопоставлениеЗначенияСтатуса(Статус);
	    		МенеджерЗаписи.Записать(Истина);

			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	НайденныеСтроки = Контрагенты.НайтиСтроки(Новый Структура("ИНН", ""));	
	
	Для Каждого Элемент Из НайденныеСтроки Цикл 
			
			Контрагент = Элемент.Контрагент;
			МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
    		МенеджерЗаписи.Объект = Контрагент;
    		МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90270"); 
   			МенеджерЗаписи.Значение = СопоставлениеЗначенияСтатуса("6");
    		МенеджерЗаписи.Записать(Истина);

	КонецЦикла;

КонецПроцедуры

Функция СопоставлениеЗначенияСтатуса(Статус) Экспорт
	
	Если Статус = "0" тогда
		возврат Перечисления.СтатусКонтрагентаФНС.Статус_0;	
	ИначеЕсли Статус = "1" тогда
		возврат Перечисления.СтатусКонтрагентаФНС.Статус_1;
	ИначеЕсли Статус = "2" тогда
		возврат Перечисления.СтатусКонтрагентаФНС.Статус_2;	
	ИначеЕсли Статус = "3" тогда
		возврат Перечисления.СтатусКонтрагентаФНС.Статус_3;	
	ИначеЕсли Статус = "4" тогда
		возврат Перечисления.СтатусКонтрагентаФНС.Статус_4;	
	ИначеЕсли Статус = "5" тогда
		возврат Перечисления.СтатусКонтрагентаФНС.Статус_5;	
	ИначеЕсли Статус = "6" тогда
		возврат Перечисления.СтатусКонтрагентаФНС.Статус_6;	
	ИначеЕсли Статус = "7" тогда
		возврат Перечисления.СтатусКонтрагентаФНС.Статус_7;	
	ИначеЕсли Статус = "8" тогда
		возврат Перечисления.СтатусКонтрагентаФНС.Статус_8;	
	ИначеЕсли Статус = "9" тогда
		возврат Перечисления.СтатусКонтрагентаФНС.Статус_9;	
	ИначеЕсли Статус = "10" тогда
		возврат Перечисления.СтатусКонтрагентаФНС.Статус_10;	
	ИначеЕсли Статус = "11" тогда
		возврат Перечисления.СтатусКонтрагентаФНС.Статус_11;	
	ИначеЕсли Статус = "12" тогда
		возврат Перечисления.СтатусКонтрагентаФНС.Статус_12;	
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьСписокГруппыПользователей(Пользователь, Ответственный = Неопределено) Экспорт
 
 Запрос = Новый Запрос;
 Запрос.Текст = 
     "ВЫБРАТЬ
     | ГруппыПользователейПользователиГруппы.Пользователь
     |ИЗ
     | Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
     |ГДЕ
     | ГруппыПользователейПользователиГруппы.Ссылка = &Ссылка" + 
     ?(Ответственный <> Неопределено, " И ГруппыПользователейПользователиГруппы.Пользователь = &Пользователь", "") + "";

 Если Ответственный <> Неопределено Тогда
  Запрос.УстановитьПараметр("Пользователь", Ответственный); 
 КонецЕсли;
 
 Запрос.УстановитьПараметр("Ссылка", (ПолучитьЗначениеПоУмолчанию(Пользователь, "ГруппаПользователейДляРаспределенияЗаказов")));

 результат = Запрос.Выполнить().Выгрузить();
 
 Возврат результат;

КонецФункции
// КонецМирнычев

процедура РаспределитьЗаказНаМаршрут(Заказ,ДатаЗаказа,РегионЭтоГород = Неопределено,сАдрес = неопределено, ВернутьМаршрут = неопределено,Подразделение = неопределено) Экспорт
	
	Если Подразделение = Неопределено Тогда
		Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
	КонецЕсли;
	
	Если РегионЭтоГород = Неопределено или сАдрес = Неопределено Тогда
		сАдрес = ПолучитьСтруктуруАдреса(Заказ);
		РегионЭтоГород = (  найти(сАдрес.Регион,"Москва")>0 
			или найти(сАдрес.Регион,"Санкт-Петербург")>0 
			или найти(сАдрес.Регион,"Севастополь")>0 );
	КонецЕсли;
	
	соответсвиеДней = Новый Соответствие;
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Понедельник,1);
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Вторник,2);
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Среда,3);
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Четверг,4);
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Пятница,5);
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Суббота,6);
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Воскресенье,7);
	
	Попытка
  	    ШиротаОсн  = Число(Прав(сАдрес.Координаты,Найти(сАдрес.Координаты,",")-1));
	    ДолготаОсн = Число(Лев(сАдрес.Координаты,Найти(сАдрес.Координаты,",")-1));
	Исключение
		#Если Клиент тогда
			сообщить("Не правильно заполнены Координаты в Заказе!!!", СтатусСообщения.Внимание);
		#КонецЕсли	
		ШиротаОсн  = 0;
	    ДолготаОсн = 0;
	КонецПопытки;
	
	МаршрутНайден = Ложь;
	маршрут = Справочники.НовМаршруты.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регион",сАдрес.Регион);
	Запрос.УстановитьПараметр("Город",сАдрес.Город);
	Запрос.УстановитьПараметр("РегионЭтоГород",РегионЭтоГород);
	Запрос.УстановитьПараметр("РегионСокр",Прав(сАдрес.Регион,4)+"%");
	Запрос.УстановитьПараметр("ГородСокр",Прав(сАдрес.Город,4)+"%");
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НовМаршрутыГорода.Ссылка,
	               |	1 КАК Приоритет
	               |ИЗ
	               |	Справочник.НовМаршруты.Города КАК НовМаршрутыГорода
	               |ГДЕ
	               |	(ВЫБОР
	               |				КОГДА &РегионЭтоГород = ИСТИНА
	               |					ТОГДА НовМаршрутыГорода.Регион = &Регион
	               |				ИНАЧЕ НовМаршрутыГорода.Регион = &Регион
	               |						И НовМаршрутыГорода.Город = &Город
	               |			КОНЕЦ
	               |			ИЛИ ВЫБОР
	               |				КОГДА &РегионЭтоГород = ИСТИНА
	               |					ТОГДА НовМаршрутыГорода.Регион ПОДОБНО &РегионСокр
	               |				ИНАЧЕ НовМаршрутыГорода.Регион ПОДОБНО &РегионСокр
	               |						И НовМаршрутыГорода.Город ПОДОБНО &ГородСокр
	               |			КОНЕЦ)
	               |	И НовМаршрутыГорода.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И НовМаршрутыГорода.Ссылка.Подразделение = &Подразделение
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НовМаршрутыГорода.Ссылка";
	
	Результат = Запрос.Выполнить();
	Рез = Результат.Выгрузить();
	
	Если Результат.Пустой() Тогда //Ниче не нашли, попробуем по другому
		
	//+++ 11.08.2017 - НЕТ такой ТЧ:  Справочник.НовМаршруты.Зоны !!!
	
		ЗапросКоординаты = Новый Запрос;
		ЗапросКоординаты.УстановитьПараметр("Подразделение",Подразделение);
		ЗапросКоординаты.Текст = "ВЫБРАТЬ
		                         |	НовМаршрутыЗоны.Ссылка,
		                         |	НовМаршрутыЗоны.Координата1,
		                         |	НовМаршрутыЗоны.Координата2,
		                         |	1 КАК Приоритет
		                         |ИЗ
		                         |	Справочник.НовМаршруты.Зоны КАК НовМаршрутыЗоны
		                         |ГДЕ
		                         |	НовМаршрутыЗоны.Ссылка.ПометкаУдаления = ЛОЖЬ
		                         |	И НовМаршрутыЗоны.Ссылка.Подразделение = &Подразделение";
		РезКоординаты = ЗапросКоординаты.Выполнить().Выгрузить();
		
		Для Индекс = -РезКоординаты.Количество() По -1 Цикл
		 	уд = РезКоординаты.Получить(-Индекс-1);
			Широта1Стр  = Число(Лев(уд.Координата1,Найти(уд.Координата1,",")-1));
			Долгота1Стр = Число(Прав(уд.Координата1,Найти(уд.Координата1,",")-1));
			
			Широта2Стр  = Число(Лев(уд.Координата2,Найти(уд.Координата2,",")-1));
			Долгота2Стр = Число(Прав(уд.Координата2,Найти(уд.Координата2,",")-1));
		 	Если ШиротаОсн < Широта2Стр или  ШиротаОсн > Широта1Стр  или ДолготаОсн < Долгота1Стр или ДолготаОсн > Долгота2Стр Тогда
		    	 РезКоординаты.Удалить(-Индекс-1);
		 	КонецЕсли;
		КонецЦикла;
		
		Если РезКоординаты.Количество() > 0 Тогда
		
		    МаршрутНайден = Истина;
		    Поиск = РезКоординаты.Скопировать();
			
		КонецЕсли;
		
	ИначеЕсли Рез.Количество() = 1 Тогда
		
		МаршрутНайден = Истина;
		Поиск = Рез.Скопировать();
		
	ИначеЕсли Рез.Количество()>1 Тогда
		
		МаршрутНайден = Истина;
		Поиск = Рез.Скопировать();
		
	КонецЕсли;
	
	ТаблицаМаршрутИДата = Новый ТаблицаЗначений;
	ТаблицаМаршрутИДата.Колонки.Добавить("Маршрут");
	ТаблицаМаршрутИДата.Колонки.Добавить("Приоритет");
	ТаблицаМаршрутИДата.Колонки.Добавить("Дата");
	
	Если МаршрутНайден Тогда
		
		поиск.Колонки.Добавить("Дата");
		
		Для каждого стрМаршрут из Поиск Цикл
			
			графикРаботыТекущий  = ?(стрМаршрут.Ссылка.Сезон,стрМаршрут.Ссылка.ГрафикРаботы2,стрМаршрут.Ссылка.ГрафикРаботы);
			
			Для каждого стрДень из графикРаботыТекущий Цикл
				Если стрДень.Используется Тогда
					
					ТекДень = ДеньНедели(ДатаЗаказа);
					
					если соответсвиеДней.Получить(стрДень.ДеньНедели) < ТекДень Тогда
						НовСтрокаМаршрутДата = ТаблицаМаршрутИДата.Добавить();
						НовСтрокаМаршрутДата.маршрут = стрмаршрут.ссылка;
						НовСтрокаМаршрутДата.Приоритет = стрмаршрут.Приоритет;
						НовСтрокаМаршрутДата.Дата = ДобавитьИнтервал(ДатаЗаказа,Перечисления.Периодичность.День,7 - ТекДень + соответсвиеДней.Получить(стрДень.ДеньНедели));
					иначеЕсли соответсвиеДней.Получить(стрДень.ДеньНедели) > ТекДень Тогда
						НовСтрокаМаршрутДата = ТаблицаМаршрутИДата.Добавить();
						НовСтрокаМаршрутДата.маршрут = стрмаршрут.ссылка;
						НовСтрокаМаршрутДата.Приоритет = стрмаршрут.Приоритет;
						НовСтрокаМаршрутДата.Дата = ДобавитьИнтервал(ДатаЗаказа,Перечисления.Периодичность.День,соответсвиеДней.Получить(стрДень.ДеньНедели) - ТекДень);
					ИначеЕсли соответсвиеДней.Получить(стрДень.ДеньНедели) = ТекДень Тогда
						Если стрДень.ВремяНачала  = Дата(1,1,1) Тогда
							НовСтрокаМаршрутДата = ТаблицаМаршрутИДата.Добавить();
							НовСтрокаМаршрутДата.маршрут = стрмаршрут.ссылка;
							НовСтрокаМаршрутДата.Приоритет = стрмаршрут.Приоритет;
							НовСтрокаМаршрутДата.Дата = ДатаЗаказа;
						Иначе
							Если ДатаЗаказа < НачалоДня(ДатаЗаказа)+Час(стрДень.ВремяНачала)*3600+Минута(стрДень.ВремяНачала)*60 Тогда
								НовСтрокаМаршрутДата = ТаблицаМаршрутИДата.Добавить();
								НовСтрокаМаршрутДата.маршрут = стрмаршрут.ссылка;
								НовСтрокаМаршрутДата.Приоритет = стрмаршрут.Приоритет;
								НовСтрокаМаршрутДата.Дата = ДатаЗаказа;
							иначе
								НовСтрокаМаршрутДата = ТаблицаМаршрутИДата.Добавить();
								НовСтрокаМаршрутДата.маршрут = стрмаршрут.ссылка;
								НовСтрокаМаршрутДата.Приоритет = стрмаршрут.Приоритет;
								НовСтрокаМаршрутДата.Дата = ДобавитьИнтервал(ДатаЗаказа,Перечисления.Периодичность.День,7);
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		ТаблицаМаршрутИДата.Сортировать("Приоритет Возр , Дата Возр");
		Если ТаблицаМаршрутИДата.Количество() > 0 Тогда
			Маршрут = ТаблицаМаршрутИДата[0].Маршрут;
			ДатаМ = ТаблицаМаршрутИДата[0].Дата;
		Иначе
			маршрут = Справочники.НовМаршруты.НайтиПоКоду("");
			датаМ = Дата(1,1,1);
		КонецЕсли;
		
	Иначе
		
		Маршрут = Справочники.НовМаршруты.НайтиПоКоду("");
		датаМ = Дата(1,1,1);
	КонецЕсли;
	
	Если ВернутьМаршрут = Неопределено Тогда
		
		Набор = РегистрыСведений.ЗаказыМаршруты.СоздатьНаборЗаписей();
		Набор.Отбор.ЗаказПокупателя.Установить(Заказ);
		Набор.Прочитать();
		
		Если набор.Количество()=0 тогда
			нов = Набор.Добавить();
			нов.Активность = Истина;
			нов.Дата = датаМ;
			нов.ЗаказПокупателя = Заказ;
			нов.Маршрут = Маршрут;
		иначе
			Если Маршрут = Набор[0].маршрут Тогда
				//Набор[0].Дата = ДатаМ;
			иначе
				Набор[0].Дата = ДатаМ;
				Набор[0].Маршрут = маршрут;
			КонецЕсли;
			
			
		КонецЕсли;
		
		Набор.Записать();
		
		ДатаЗаказа = ДатаМ; //12.10.2017 - возвращаем обратно! 
		
	Иначе
		
		ВернутьМаршрут = Маршрут;
			
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруАдреса(ссылкаДок) Экспорт
	
	Если НЕ ссылкаДок.Грузополучатель.Пустая() тогда  //13.07.2017
		контр = ссылкаДок.Грузополучатель;
	Иначе	
		контр = ссылкаДок.Контрагент;
	КонецЕсли;
	
	//+++( 05.07.2017 - тестирование --- проверка адреса на "правильность" ---
	Если ЗначениеЗаполнено(ссылкаДок.видАдреса) тогда
		сАдрес = ПолучитьКонтактнуюИнформацию(контр, ссылкаДок.видАдреса);
	Иначе // нет вида адреса... 
		Если ЗначениеЗаполнено(ссылкаДок.АдресДоставки) тогда
			Если ссылкаДок.НомерТорговойТочкиКонтрагента<>0 тогда
				сАдрес = ПолучитьКонтактнуюИнформацию(контр, ссылкаДок.НомерТорговойТочкиКонтрагента); //адрес и координаты Точки!
				
			//08.08.2017 - в 99% случаев, если адрес заполнен, то это адрес точки / адрес доставки
			//Если сАдрес.Адрес <> ссылкаДок.АдресДоставки тогда
			//	сАдрес = ПолучитьКонтактнуюИнформацию(контр, ссылкаДок.АдресДоставки); //это просто строка!
			//КонецЕсли;

			Иначе
				сАдрес = НайтиАдресПоУмолчанию(контр);
			КонецЕсли;
		
					
		Иначе //нет адреса
			сАдрес = НайтиАдресПоУмолчанию(контр);// находим Д-Ф-Ю адрес...
		КонецЕсли;
	КонецЕсли;
	
	Возврат сАдрес;
	
КонецФункции

Функция ПолучитьКонтактнуюИнформацию(Контрагент, Вид)
	
	РезСтруктура =новый Структура("Вид, Адрес, Регион, Город, Улица, Дом, Координаты", 
	                                 "","","","","");
	
	Если типЗнч(Вид)=Тип("Число") тогда // номер точки
		Точка = справочники.Точки.НайтиПоРеквизиту("Номер",Вид);
		Если НЕ Точка.ВидАдреса.Пустая() тогда
			РезСтруктура = ПолучитьКонтактнуюИнформацию(Контрагент, Точка.видАдреса); //рекурентно!
	    Иначе	
			ЗаполнитьЗначенияСвойств(РезСтруктура, точка); // сразу все поля!
		
			РезСтруктура.Вид   = "Адрес точки"; 
			РезСтруктура.Адрес = точка.Адрес
			//+++ 08.08.2017 добавляем Телефон и Контактное Лицо как в Web-сервисе Terminal
			//    +"~"+точка.ИнформацияДляВодителя+" "+точка.КонтактноеЛицо;
				+ ?(СокрЛП(точка.ИнформацияДляВодителя)="", "", 
					"~"+СокрЛП(точка.ИнформацияДляВодителя)+" "+СокрЛП(точка.КонтактноеЛицо) ); 
		КонецЕсли;
				
	ИначеЕсли типЗнч(Вид)=Тип("Строка") тогда // ПРОСТО АДРЕС!
		
		РезСтруктура.Вид   = "Адрес из Заказа покупателя"; 
		РезСтруктура.Адрес = Вид;
		
		i=найти(Вид,"~");
		если i>0 тогда
			стрВид = лев(Вид, i-1);
		Иначе
			стрВид = Вид;
		КонецЕсли;
		
		КоордДШ = ОбменСУТИнтернетМагазин.получитьКоординаты(стрВид);
		РезСтруктура.Координаты = КоордДШ;
		
		//попробуем определить город и регион по строке 
		если КоордДШ<>"" тогда
			поляАдреса = ОбменСУТИнтернетМагазин.ПолучитьАдресПоКоординатам(КоордДШ, Истина);
			РезСтруктура.Регион = поляАдреса.Поле2;
			РезСтруктура.Город  = поляАдреса.Поле4;
			РезСтруктура.Улица  = поляАдреса.Поле6;
			РезСтруктура.Дом	= поляАдреса.Поле7;
		КонецЕсли;
	
	Иначе //---------------------"нормальный" адрес Д/Ф/Ю ------------------------------
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Комментарий,
		
		|	КонтактнаяИнформация.Поле2 как Регион,
		
		|	выбор когда КонтактнаяИнформация.Поле4="""" 
		|		  тогда КонтактнаяИнформация.Поле5
		|			Иначе КонтактнаяИнформация.Поле4 Конец как Город,
		
		//06.07.2017
		|
		| выбор когда КонтактнаяИнформация.Поле6="""" и КонтактнаяИнформация.Поле5<>""""
		| тогда ""нет улиц ""+КонтактнаяИнформация.Поле5 
		| иначе КонтактнаяИнформация.Поле6 Конец как Улица,
		|	КонтактнаяИнформация.Поле7 как Дом,
		
		|	КонтактнаяИнформация.Поле10 как Координаты
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Контрагент
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.УстановитьПараметр("Вид", Вид);
			
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
	 	Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(РезСтруктура, Выборка);
			РезСтруктура.Координаты = стрЗаменить(РезСтруктура.Координаты," ",""); //+++ 21.03.2018 - БЕЗ пробелов!
			РезСтруктура.Адрес = выборка.Представление+?(СокрЛП(выборка.Комментарий)="","", "~"+выборка.Комментарий);
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат РезСтруктура;

КонецФункции	

функция НайтиАдресПоУмолчанию(Контрагент)
	
	//Вид = справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки");    
	Вид = справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00021"); //+++ 16.10.2017   
	сАдрес = ПолучитьКонтактнуюИнформацию(Контрагент, Вид);
	
	Если СокрЛП(сАдрес.Адрес)="" Тогда
		Вид = справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		сАдрес = ПолучитьКонтактнуюИнформацию(Контрагент, Вид);
		
		Если СокрЛП(сАдрес.Адрес)="" Тогда
			Вид = справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			сАдрес = ПолучитьКонтактнуюИнформацию(Контрагент, Вид);
		КонецЕсли;
	КонецЕсли;
	
	возврат сАдрес;
	
КонецФункции

//31.08.17 Смирнов
//Функция ПолучитьБонусы(ПолучитьТаблицу = ложь)
//вход: ПолучитьТаблицу, если истина, то бонусы возвращаем в таблице
//Возвращает структуру с таблицей бонусов (Период, номенклатура, процент бонуса)
//и текст запроса который высчитывает эту таблицу (построитель и СКД не умеют таблицы значений в параметры)
Функция ПолучитьБонусы(ПолучитьТаблицу = ложь, начПериода = неопределено, конПериода = неопределено) экспорт
	ТабПравил = Новый ТаблицаЗначений;
	ТабПравил.Колонки.Добавить("Период"				 , Новый ОписаниеТипов("Дата"	, , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТабПравил.Колонки.Добавить("Приоритет"			 , Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(18, 0)));
	ТабПравил.Колонки.Добавить("ВидТовара"			 , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыТоваров"));
	ТабПравил.Колонки.Добавить("ТипЦен"			     , Новый ОписаниеТипов("СправочникСсылка.ТипыЦенНоменклатуры"));
	ТабПравил.Колонки.Добавить("Производитель"		 , Новый ОписаниеТипов("СправочникСсылка.Производители"));
	ТабПравил.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТабПравил.Колонки.Добавить("ВходитВПапку"		 , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабПравил.Колонки.Добавить("Номенклатура"		 , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабПравил.Колонки.Добавить("Подстрока"			 , Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	ТабПравил.Колонки.Добавить("Диаметр"		 	 , Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	ТабПравил.Колонки.Добавить("Бонус"			     , Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(18, 3)));
	ТабПравил.Колонки.Добавить("ID"			 , Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));

	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",НачПериода);
	Запрос.УстановитьПараметр("КонПериода",?(КонПериода = неопределено,ТекущаяДата(),КонПериода));
	
	Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	ПравилаЦенообразованияВход.Период КАК Период,
	              |	ПравилаЦенообразованияОбщие.Приоритет КАК Приоритет,
	              |	ПравилаЦенообразованияОбщие.ID,
	              |	ПравилаЦенообразованияВход.Бонус
	              |ИЗ
	              |	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаЦенообразованияВход КАК ПравилаЦенообразованияВход
	              |		ПО ПравилаЦенообразованияОбщие.ID = ПравилаЦенообразованияВход.ID
	              |ГДЕ
	              |	ПравилаЦенообразованияВход.ID <> """"
	              |	И 99 = 99
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Приоритет,
	              |	Период
	              |ИТОГИ ПО
	              |	Период
	              |АВТОУПОРЯДОЧИВАНИЕ";
				  Если начПериода <> Неопределено тогда
					  Запрос.Текст = СтрЗаменить(Запрос.Текст,"99 = 99","ПравилаЦенообразованияВход.Период МЕЖДУ &НачПериода И &КонПериода");
				  КонецЕсли;
  ВыборкаПериода =Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
  ТекстЗ="";
  Пока ВыборкаПериода.Следующий() Цикл
	  ТекстЗ = ТекстЗ+?(ТекстЗ="","",Символы.ПС+" Объединить все "+Символы.ПС)+
	  "
	  |ВЫБРАТЬ
	  |НоменклатураСпр.Ссылка КАК Номенклатура,
	  |ДатаВремя("+Формат(Год(ВыборкаПериода.Период),"ЧГ=")+","+Месяц(ВыборкаПериода.Период)+", "+День(ВыборкаПериода.Период)+") КАК Период,
	  |Выбор ";
	  
	  Рез =  ВыборкаПериода.Выбрать();
	  Пока Рез.Следующий() Цикл
		  Правило = получитьСтруктуруПравилаПоID(Рез.ID);
		  Если Найти(Правило.Диаметр,"-")>0 тогда //надо добавить все диаметры из промежутка
			  Врем = СокрЛП(Правило.Диаметр);
			  Врем = СтрЗаменить(Врем," ","");
			  ДиаметрНачало = Лев(Врем,Найти(Врем,"-")-1);
			  ДиаметрКонец = СтрЗаменить(Врем,ДиаметрНачало+"-","");
			  ДиаметрНачало = Число(ДиаметрНачало);
			  ДиаметрКонец = Число(ДиаметрКонец);
			  
			  к = ДиаметрНачало;
			  Пока к <=ДиаметрКонец цикл
				  Правило.Диаметр = к;
				  ДобавитьВТекстЗапросаПравило(ТекстЗ,Правило,-Рез.Бонус);
				  нстр = ТабПравил.Добавить();
				  ЗаполнитьЗначенияСвойств(нстр,Рез);
				  ЗаполнитьЗначенияСвойств(нстр,Правило);
				  //нстр.Диаметр = к;
				  к=к+1;
			  КонецЦикла;
		  иначе
			  ДобавитьВТекстЗапросаПравило(ТекстЗ,Правило,-Рез.Бонус);
			  нстр = ТабПравил.Добавить();
			  ЗаполнитьЗначенияСвойств(нстр,Рез);
			  ЗаполнитьЗначенияСвойств(нстр,Правило);
		  КонецЕсли;
	  КонецЦикла;
	  ТекстЗ = ТекстЗ+"  
	  					|		ИНАЧЕ -6666666
			  			|	КОНЕЦ КАК Бонус
						|ИЗ
						|					Справочник.Номенклатура КАК НоменклатураСпр";
  КонецЦикла;
  ТекстЗ = "Выбрать * Поместить ВтБонусы из ( "+ ТекстЗ+" ) КАК А 
  |ГДЕ А.Бонус <> -6666666
  |";
  //Сообщить(ТекстЗ);
  //ТабПравил.ВыбратьСтроку();
  //ПолучитьНоменклатуруСБонусами(ТабПравил);
  Если ПолучитьТаблицу тогда
	  ТаблицаБонусов = ПолучитьНоменклатуруСБонусами(ТабПравил);
  Иначе
	  ТаблицаБонусов= новый таблицаЗначений;
	  ТаблицаБонусов.Колонки.Добавить("Ссылка" , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	  ТаблицаБонусов.Колонки.Добавить("Номенклатура" , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	  ТаблицаБонусов.Колонки.Добавить("Бонус" , Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(18, 3)));
	  ТаблицаБонусов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"	, , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
  КонецЕсли;
  РезСтруктура = новый Структура("ТекстЗапросаБонусы,ТаблицаБонусов");
  РезСтруктура.ТекстЗапросаБонусы=ТекстЗ;
  РезСтруктура.ТаблицаБонусов = ТаблицаБонусов;
  Возврат РезСтруктура;
КонецФункции

Функция ПолучитьНоменклатуруСБонусами(ТабПравил)
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ТабПравил",ТабПравил);
	Запрос.Текст="ВЫБРАТЬ
	             |	ТабПравил.Период,
	             |	ТабПравил.Приоритет,
	             |	ТабПравил.ВидТовара,
	             |	ТабПравил.Производитель,
	             |	ТабПравил.НоменклатурнаяГруппа,
	             |	ТабПравил.ВходитВПапку,
	             |	ТабПравил.Номенклатура,
	             |	ТабПравил.Подстрока,
	             |	ТабПравил.Диаметр,
	             |	ТабПравил.Бонус,
	             |	ТабПравил.ID
	             |ПОМЕСТИТЬ втПравила
	             |ИЗ
	             |	&ТабПравил КАК ТабПравил
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	НоменклатураСпр.Ссылка,
	             |	втПравила.Период,
	             |	втПравила.Приоритет,
	             |	втПравила.ВидТовара,
	             |	втПравила.Производитель,
	             |	втПравила.НоменклатурнаяГруппа,
	             |	втПравила.ВходитВПапку,
	             |	втПравила.Номенклатура,
	             |	втПравила.Подстрока,
	             |	втПравила.Диаметр,
	             |	втПравила.Бонус,
	             |	втПравила.ID
	             |ПОМЕСТИТЬ вт
	             |ИЗ
	             |	Справочник.Номенклатура КАК НоменклатураСпр
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПравила КАК втПравила
	             |		ПО НоменклатураСпр.Производитель = втПравила.Производитель
	             |			И (ВЫБОР
	             |				КОГДА втПравила.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	             |					ТОГДА НоменклатураСпр.НоменклатурнаяГруппа = втПравила.НоменклатурнаяГруппа
	             |				ИНАЧЕ ИСТИНА
	             |			КОНЕЦ)
	             |			И (ВЫБОР
	             |				КОГДА втПравила.ВходитВПапку <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	             |					ТОГДА НоменклатураСпр.Родитель = втПравила.ВходитВПапку
	             |				ИНАЧЕ ИСТИНА
	             |			КОНЕЦ)
	             |			И (ВЫБОР
	             |				КОГДА втПравила.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	             |					ТОГДА НоменклатураСпр.Ссылка = втПравила.Номенклатура
	             |				ИНАЧЕ ИСТИНА
	             |			КОНЕЦ)
	             |			И (ВЫБОР
	             |				КОГДА втПравила.Подстрока <> """"
	             |					ТОГДА НоменклатураСпр.Наименование ПОДОБНО ""%"" + втПравила.Подстрока + ""%""
	             |				ИНАЧЕ ИСТИНА
	             |			КОНЕЦ)
	             |			И (ВЫБОР
	             |				КОГДА втПравила.Диаметр <> """"
	             |					ТОГДА НоменклатураСпр.Типоразмер.Диаметр = втПравила.Диаметр
	             |				ИНАЧЕ ИСТИНА
	             |			КОНЕЦ)
	             |			И НоменклатураСпр.ВидТовара = втПравила.ВидТовара
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	вт.Ссылка,
	             |	вт.Период,
	             |	МИНИМУМ(вт.Приоритет) КАК Приоритет
	             |ПОМЕСТИТЬ втСПриоритетом
	             |ИЗ
	             |	вт КАК вт
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	вт.Период,
	             |	вт.Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	вт.Ссылка,
	             |	вт.Период,
	             |	вт.Приоритет,
	             |	вт.ВидТовара,
	             |	вт.Производитель,
	             |	вт.НоменклатурнаяГруппа,
	             |	вт.ВходитВПапку,
	             |	вт.Номенклатура,
	             |	вт.Подстрока,
	             |	вт.Диаметр,
	             |	-вт.Бонус КАК Бонус,
	             |	вт.ID
	             |ИЗ
	             |	вт КАК вт
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСПриоритетом КАК втСПриоритетом
	             |		ПО вт.Ссылка = втСПриоритетом.Ссылка
	             |			И вт.Приоритет = втСПриоритетом.Приоритет
	             |			И вт.Период = втСПриоритетом.Период";
				 Возврат Запрос.Выполнить().Выгрузить();
				 
КонецФункции

Процедура ДобавитьВТекстЗапросаПравило(Текст,СтруктураПравила,Бонус)
	
	СтруктураСтр = Новый Структура("СтрВидТовара,КодТипЦен,КодПроизводитель,КодНоменклатурнаяГруппа,КодВходитВПапку,КодНоменклатура,Подстрока,Диаметр");
	СтруктураСтр.СтрВидТовара 			 = ""+СтруктураПравила.ВидТовара;
	СтруктураСтр.КодТипЦен 				 = ""+СтруктураПравила.ТипЦен.Код;
	СтруктураСтр.КодПроизводитель 		 = ""+?(ЗначениеЗаполнено(СтруктураПравила.Производитель),Формат(СтруктураПравила.Производитель.Код,"ЧГ="),"");
	СтруктураСтр.КодНоменклатурнаяГруппа = ""+?(ЗначениеЗаполнено(СтруктураПравила.НоменклатурнаяГруппа),СтруктураПравила.НоменклатурнаяГруппа.Код,"");
	СтруктураСтр.КодВходитВПапку 		 = ""+?(ЗначениеЗаполнено(СтруктураПравила.ВходитВПапку),СтруктураПравила.ВходитВПапку.Код,"");
	СтруктураСтр.КодНоменклатура 		 = ""+?(ЗначениеЗаполнено(СтруктураПравила.Номенклатура),СтруктураПравила.Номенклатура.Код,"");
	СтруктураСтр.Подстрока 				 = ""+СтруктураПравила.Подстрока;
	СтруктураСтр.Диаметр 				 = ""+СтруктураПравила.Диаметр;
	
	Текст=Текст+"
		      |		КОГДА "
			  +?(СтруктураСтр.СтрВидТовара<>"","             НоменклатураСпр.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров."+СтруктураСтр.СтрВидТовара+")","")
		      +?(СтруктураСтр.КодПроизводитель<>"","   		И НоменклатураСпр.Производитель.Код = "+СтруктураСтр.КодПроизводитель,"")
			  +?(СтруктураСтр.КодНоменклатурнаяГруппа<>"","   		И НоменклатураСпр.НоменклатурнаяГруппа.Код = """+СтруктураСтр.КодНоменклатурнаяГруппа+"""","")
		      +?(СтруктураСтр.КодВходитВПапку<>"","   		И НоменклатураСпр.Родитель.Код = """+СтруктураСтр.КодВходитВПапку+"""","")
		      +?(СтруктураСтр.КодНоменклатура<>"","   		И НоменклатураСпр.Код = """+СтруктураСтр.КодНоменклатура+"""","")
              +?(СтруктураСтр.Подстрока<>"","   		И НоменклатураСпр.Наименование ПОДОБНО ""%"+СтруктураСтр.Подстрока+"%""","")
              +?(СтруктураСтр.Диаметр<>"","   		И НоменклатураСпр.Типоразмер.Диаметр = """+СтруктураСтр.Диаметр+"""","")
		      +"			ТОГДА "+СтрЗаменить(Бонус,",",".")+"";
		     
		      //|	КОНЕЦ КАК Бонус,
		      //|	ДАТАВРЕМЯ("+Год(Период)+", "+Месяц(Период)+","+День(Период)+") КАК ПериодБонуса";
		      
		
КонецПроцедуры

функция получитьСтруктуруПравилаПоID(стрID_0)
	СтруктураПравила = Новый Структура("ВидТовара,ТипЦен,Производитель,НоменклатурнаяГруппа,ВходитВПапку,Номенклатура,Подстрока,Диаметр");
	
	спис = новый массив;
	стрID = стрID_0;
	i= найти(стрID, ".");  L=стрДлина(стрID);
	пока i>0 цикл
		стр1 = лев(стрID, i-1);  стрID = прав(стрID, L-i);
		спис.Добавить(стр1);
		i= найти(стрID, ".");  L=стрДлина(стрID);
	КонецЦикла;
	спис.Добавить(стрID);
	//7 полей должно быть
	СтруктураПравила.ВидТовара = Перечисления.ВидыТоваров[СокрЛП(спис[0])];
	СтруктураПравила.ТипЦен = ?(спис[1]="0",Справочники.ТипыЦенНоменклатуры.ПустаяСсылка(), ( справочники.ТипыЦенНоменклатуры.НайтиПоКоду( спис[1] ))  );
	СтруктураПравила.Производитель = ?(спис[2]="0",Справочники.Производители.ПустаяСсылка(), ( справочники.Производители.НайтиПоКоду( спис[2] ))  );
	СтруктураПравила.НоменклатурнаяГруппа = ?(спис[3]="0",Справочники.НоменклатурныеГруппы.ПустаяСсылка(), ( справочники.НоменклатурныеГруппы.НайтиПоКоду( спис[3] ))  );
	Если спис.Количество()>4 тогда
		СтруктураПравила.ВходитВПапку = ?(спис[4]="0",Справочники.Номенклатура.ПустаяСсылка(), ( справочники.Номенклатура.НайтиПоКоду( спис[4] ))  );
	КонецЕсли;
	Если спис.Количество()>5 тогда
		СтруктураПравила.Номенклатура = ?(спис[5]="0",Справочники.Номенклатура.ПустаяСсылка(), ( справочники.Номенклатура.НайтиПоКоду( спис[5] ))  );
	КонецЕсли;
	Если спис.Количество()>6 тогда
		СтруктураПравила.Подстрока = ?(спис[6]="0","", СокрЛП( спис[6] ))  ;
	КонецЕсли;
	
	
	//// 04.10.2016 - в новой системе - с учетом диаметра?  согласование будет по правилу БЕЗ диаметра!!!
	//
	//Флажок3 = константы.ЦенообразованиеПоКатегориям.Получить(); 
	Если спис.Количество()>7 тогда 
		СтруктураПравила.Диаметр = ?(спис[7]="0","", СокрЛП( спис[7] ))  ;

	КонецЕсли;
	
	возврат СтруктураПравила;		
КонецФункции


функция ПолучитьПредставлениеПоВидуАдреса(закОб) Экспорт  //используется 3 раза
	рез = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Представление
	             //  |	, КонтактнаяИнформация.Комментарий
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Объект",	?(закОб.Грузополучатель.Пустая(), закОб.Контрагент, закОб.Грузополучатель) ); //+++ 21.12.2017 - ПО ГРУЗОПОЛУЧАТЕЛЮ!
	Запрос.УстановитьПараметр("Вид", 	закОб.ВидАдреса);
	Запрос.УстановитьПараметр("Тип",	перечисления.ТипыКонтактнойИнформации.Адрес);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
	рез = СокрЛП(Выборка.Представление);
	КонецЕсли;

  возврат рез;
КонецФункции

//по товару или строке
функция ПолучитьМенТовГруппы(текСтр) Экспорт
	
	Если ЗначениеЗаполнено(текСтр.НоменклатурнаяГруппа) тогда  // Менеджер товарной группы
			МенТовГруппы = текСтр.НоменклатурнаяГруппа.Ответственный;
	Иначе
		//автоопределение по виду товара и производителю
		Если текСтр.ВидТовара = перечисления.ВидыТоваров.Диски тогда
			МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Малышев Егор");
		иначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.АКБ тогда
			МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Сухачева А.В.");
		иначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.Аксессуары тогда
			МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Голубева В.С.");
			
		иначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.Шины тогда //все шины - Горохову
			
		//Contyre Avatyre - Вострилов	
			Если СокрЛП(текСтр.Производитель.Код)=109
			 или СокрЛП(текСтр.Производитель.Код)=3434 тогда
			МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Вострилов А.В.");
		//нКШЗ, Кама, Кама EURO, Viatti -  Никитин И.Б., 
			иначеЕсли СокрЛП(текСтр.Производитель.Код)=39
			 или СокрЛП(текСтр.Производитель.Код)=3279
				или СокрЛП(текСтр.Производитель.Код)=3280 
				или СокрЛП(текСтр.Производитель.Код)=3193
				или СокрЛП(текСтр.Производитель.Код)=64 тогда
				МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Никитин");
			ИначеЕсли СокрЛП(текСтр.Производитель.Код)=36
			 или СокрЛП(текСтр.Производитель.Код)=43 тогда
				МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Горохов");
			ИначеЕсли СокрЛП(текСтр.Производитель.Код)=41
			 или СокрЛП(текСтр.Производитель.Код)=777
			 или СокрЛП(текСтр.Производитель.Код)=32 
			 или СокрЛП(текСтр.Производитель.Код)=22 
			 или СокрЛП(текСтр.Производитель.Код)=67 тогда
				МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Кузьмичева");
			//Импортные - Доколин 
			Иначе	 
				МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Доколин");
			КонецЕсли;
			
		Иначе	 // все другое - тоже к Горохову
			МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Горохов");
		КонецЕсли;
		
	КонецЕсли;
		
	Если МенТовГруппы = справочники.Пользователи.ПустаяСсылка() тогда
		МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Горохов");
	КонецЕсли;	

	возврат МенТовГруппы;
	
КонецФункции

функция ВозможностьВыбораПодразделения2018(Дата,Подразделение) экспорт
	Если Дата >=Дата(2018,1,1) тогда
		Если Подразделение.Планирование тогда
			возврат Истина;
		ИначеЕсли Подразделение.Родитель.Планирование И Подразделение.Родитель.ИспользоватьПодчиненные тогда
			возврат Истина;
		иначе
			возврат Ложь;
			
		КонецЕсли;
		
	иначе
		возврат Истина;
	КонецЕсли;
	
КонецФункции


Процедура яшт_ОткрытьОбработкуПомесячногоПланированияДП() экспорт
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Ежемесячное планирование департамента продаж");
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;
		Обработка.ПолучитьФорму("Форма").Открыть();
		//яштОткрытьВнешнююОбработку("Ежемесячное планирование департамента продаж");
КонецПроцедуры

Процедура яшт_ОткрытьОбработкуПланФактДП() экспорт
	
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("План/факт ежемесячного планирования ДП");
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;
		Обработка.ПолучитьФорму("ФормаОтчета").Открыть();

	//яштОткрытьВнешнююОбработку("План/факт ежемесячного планирования ДП");
КонецПроцедуры

Функция ПолучитьЗакрпленныхЗаРегиономОператораПомощника(Регион, Контрагент) Экспорт
	
	запрос = новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК Пользователь
	               |ПОМЕСТИТЬ ВТ_П
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.ОсновноеПодразделение.ОбособленноеПодразделение = ИСТИНА
	               |	И Пользователи.ОсновноеПодразделение.ВЭД = ЛОЖЬ
	               |	И Пользователи.ПометкаУдаления = ЛОЖЬ
	               |	И Пользователи.Заблокирован = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СоответствиеМенеджеровРегионам.Пользователь КАК Пользователь,
	               |	ЗНАЧЕНИЕ(Перечисление.ВидыСотрудниковОтделаПродаж.Оператор) КАК ВидСотрудника
	               |ИЗ
				   |	РегистрСведений.СоответствиеМенеджеровРегионам КАК СоответствиеМенеджеровРегионам
				   |			   ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
				   |		ПО СоответствиеМенеджеровРегионам.Регион = Контрагенты.Регион
				   |ГДЕ
	               |	СоответствиеМенеджеровРегионам.ВидСотрудника = ЗНАЧЕНИЕ(Перечисление.ВидыСотрудниковОтделаПродаж.Оператор)
				   |	И СоответствиеМенеджеровРегионам.Регион = &Регион
				   |    И Контрагенты.Ссылка = &Контрагент
				   |	И НЕ Контрагенты.ОсновнойМенеджерКонтрагента В
				   |				(ВЫБРАТЬ
				   |					ВТ.Пользователь
				   |				ИЗ
				   |					ВТ_П КАК ВТ)	
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СоответствиеМенеджеровРегионам.Пользователь,
	               |	ЗНАЧЕНИЕ(Перечисление.ВидыСотрудниковОтделаПродаж.Помощник)
	               |ИЗ
	               |	РегистрСведений.СоответствиеМенеджеровРегионам КАК СоответствиеМенеджеровРегионам
	               |ГДЕ
	               |	СоответствиеМенеджеровРегионам.ВидСотрудника = ЗНАЧЕНИЕ(Перечисление.ВидыСотрудниковОтделаПродаж.Помощник)
	               |	И СоответствиеМенеджеровРегионам.Регион = &Контрагент
	               |	И НЕ СоответствиеМенеджеровРегионам.Регион.ОсновнойМенеджерКонтрагента В
	               |				(ВЫБРАТЬ
	               |					ВТ.Пользователь
	               |				ИЗ
	               |					ВТ_П КАК ВТ)";
	
	
	запрос.УстановитьПараметр("Регион", Регион);
	запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	выборка = запрос.Выполнить().Выбрать();
	
	оператор = "";
	Помощник = "";
	
	Пока выборка.Следующий() цикл
		
		Если выборка.ВидСотрудника =  Перечисления.ВидыСотрудниковОтделаПродаж.Оператор тогда
			оператор = выборка.Пользователь;
		ИначеЕсли выборка.ВидСотрудника =  Перечисления.ВидыСотрудниковОтделаПродаж.Помощник тогда
			Помощник = выборка.Пользователь;
		иначе
			Помощник = выборка.Пользователь;
		КонецЕсли;  		
		
	КонецЦикла;
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("Оператор", Оператор);
	ВозвращаемаяСтруктура.Вставить("Помощник", Помощник);
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции


