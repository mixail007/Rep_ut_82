// Удаляет повторяющиеся значения из массива
//
// Параметры:
//	Массив
//
Процедура УдалитьПовторяющиесяЭлементы(Массив)
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда
		
		// Удалим повторы
		Инд=0;
		КолВо = Массив.Количество();
		
		Пока Инд<КолВо Цикл
			
			Инд2 = Инд+1;
			Пока Инд2<КолВо Цикл
				
				Если Массив[Инд2] = Массив[Инд] Тогда
					Массив.Удалить(Инд2);
					КолВо = КолВо-1;
				Иначе
					Инд2 = Инд2+1;
				КонецЕсли;
				
			КонецЦикла; 
			
			Инд = Инд+1;
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет пустые значения из массива (для которых ЗначениеНеЗаполнено = Истина)
//
// Параметры:
//	Массив
//
Процедура УдалитьПустыеЭлементы(Массив)

	Если ТипЗнч(Массив) = Тип("Массив") Тогда
		
		Инд=0;
		
		Пока Инд<Массив.Количество() Цикл
			
			Если ЗначениеНеЗаполнено(Массив[Инд]) Тогда
				Массив.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Возвращает таблицу значений с данными учетной политики для всех организаций
// Данные берутся на заданный момент времени 
//
// Параметры:
//	Момент времени, дата
//
// Возварщаемое значение: 
//	Таблица значений
//
Функция ПолучитьУчетнуюПолитику(МоментКон) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	УчетнаяПолитикаСрезПоследних.СпособОценкиМПЗ КАК СпособОценкиМПЗУпр,
	|	УчетнаяПолитикаСрезПоследних.ВестиПартионныйУчетПоСкладам КАК ВестиПартионныйУчетПоСкладамУпр,
	|	УчетнаяПолитикаСрезПоследних.СписыватьПартииПриПроведенииДокументов КАК СписыватьПартииПриПроведенииДокументовУпр,
	|	УчетнаяПолитикаСрезПоследних.СтратегияСписанияПартийТоваровПоСтатусам КАК СтратегияСписанияПоСтатусамУпр,
	|	УчетнаяПолитикаНалСрезПоследних.РозничнаяТорговляОблагаетсяЕНВД КАК РозничнаяТорговляОблагаетсяЕНВДНал
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&МоментКон) КАК УчетнаяПолитикаНалСрезПоследних
	|		ПО УчетнаяПолитикаНалСрезПоследних.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&МоментКон) КАК УчетнаяПолитикаСрезПоследних
	|		ПО (ИСТИНА)");
	
	Запрос.УстановитьПараметр("МоментКон", МоментКон);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьУчетнуюПолитику()

// Получает параметр учетной политики для заданной организации по заданному учету
// Перед использованием функции должна быть заполнена таблица параметров учетной политики
//
// Параметры:
//	ИмяПараметра - Строка, имя запрашиваемого параметра учетной политики,
//	Учет         - Может принимать три значения: "Упр", "Бух", "Нал", "Меж". Задает учет
//	Организация,
//	СтруктураПараметров - структура, содержащая все общие параметры.
//
// Возвращаемое значение: 
//	Значение учетной политики
//
Функция УчетнаяПолитика(ИмяПараметра, Учет, Организация=Неопределено, СтруктураПараметров)
	СтрокаУчетнойПолитики = Неопределено;
	Результат = Ложь;
	
	Если Учет = "Упр" Тогда
		Если СтруктураПараметров.УчетнаяПолитика.Количество()>0 Тогда
			СтрокаУчетнойПолитики = СтруктураПараметров.УчетнаяПолитика[0];
		КонецЕсли;
	Иначе
		СтрокаУчетнойПолитики = СтруктураПараметров.УчетнаяПолитика.Найти(Организация);
	КонецЕсли;
	
	Если СтрокаУчетнойПолитики<>Неопределено Тогда
		Результат = СтрокаУчетнойПолитики[ИмяПараметра+Учет];
	Иначе
		СообщитьОбОшибке("Не задан параметр учетной политики """ +ИмяПараметра+ """ "+Учет+" учета" + ?(Учет<>"Упр", " для организации " + Организация, "")+"!");
		СтруктураПараметров.Вставить("Отказ", Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // УчетнаяПолитика()

// Объект Описание типов с одним типом Подразделения
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Объект Описание типов с типом Подразделения
//
Функция ПолучитьОписаниеТиповПодразделения()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

// Объект Описание типов с типами - заказами
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Объект Описание типов с типом Подразделения
//
Функция ПолучитьОписаниеТиповЗаказ()

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);

КонецФункции // ПолучитьОписаниеТиповЗаказ()

// Возвращает строковое описание регистра-приемника для заданного кода операции
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//	СтатьяЗатрат  - статья затрат, определяющая направление списания в производство.
//
// Возвращаемое значение:
//	Направление списания.
//
Функция ПолучитьНаправлениеСписанияПоКодуОперации(КодОперации, СтатьяЗатрат = Неопределено)
			
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	НаправлениеСписания = "";

	Если КодОперации=КодыОпераций.Реализация
		ИЛИ КодОперации=КодыОпераций.РеализацияКомиссия 
		ИЛИ КодОперации=КодыОпераций.РеализацияРозница
		Тогда
	
		НаправлениеСписания = "СебестоимостьПродаж";
		
	ИначеЕсли КодОперации=КодыОпераций.ВозвратОтПокупателя Тогда
		
		НаправлениеСписания = "СебестоимостьПродаж";
	
	ИначеЕсли КодОперации=КодыОпераций.ПередачаНаКомиссию Тогда
	
		НаправлениеСписания = "Переданные";
		
	ИначеЕсли КодОперации=КодыОпераций.ПеремещениеМеждуСкладами
		ИЛИ КодОперации=КодыОпераций.КорректировкаСерийИХарактеристик
		ИЛИ КодОперации=КодыОпераций.РезервированиеПодЗаказ
		ИЛИ КодОперации=КодыОпераций.СнятиеРезерваПодЗаказ
		ИЛИ КодОперации=КодыОпераций.ПереоценкаПринятыхНаКомиссию 
		ИЛИ КодОперации=КодыОпераций.ВозвратОтКомиссионера 
		ИЛИ КодОперации=КодыОпераций.Комплектация Тогда
		
		НаправлениеСписания = "НаСкладах";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаЗатраты Тогда
		
		НаправлениеСписания = "Затраты";
		
		Если СтатьяЗатрат<>Неопределено Тогда
			
			Если СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
				
				НаправлениеСписания = "";
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаСтроительствоОбъектовОС
	ИЛИ КодОперации=КодыОпераций.ПринятиеКУчетуОС Тогда
		
		НаправлениеСписания = "СтоимостьОСПриПринятииКУчету";
	ИначеЕсли КодОперации=КодыОпераций.ПринятиеКУчетуОССоСписаниемНаЗатраты Тогда
	
		НаправлениеСписания = "ЗатратыПриПринятииКУчету";
	
	КонецЕсли; 
	
	Возврат НаправлениеСписания;

КонецФункции // ПолучитьНаправлениеСписанияПоКодуОперации(КодОперации)

// Возвращает строковое описание регистра-источника для заданного кода операции
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//
// Возвращаемое значение:
//	Источник списания.
//
Функция ПолучитьИсточникПоКодуОперации(КодОперации)
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	Если КодОперации = КодыОпераций.Реализация
		ИЛИ КодОперации = КодыОпераций.РеализацияРозница
		ИЛИ КодОперации = КодыОпераций.ПередачаНаКомиссию 
		ИЛИ КодОперации = КодыОпераций.ВозвратПоставщику
		ИЛИ КодОперации = КодыОпераций.Комплектация
		ИЛИ КодОперации = КодыОпераций.КорректировкаСерийИХарактеристик
		ИЛИ КодОперации = КодыОпераций.ПередачаТарыКонтрагенту
		ИЛИ КодОперации = КодыОпераций.ПеремещениеМеждуСкладами
		ИЛИ КодОперации = КодыОпераций.ПереоценкаПринятыхНаКомиссию
		ИЛИ КодОперации = КодыОпераций.РезервированиеПодЗаказ
		ИЛИ КодОперации = КодыОпераций.СнятиеРезерваПодЗаказ
		ИЛИ КодОперации = КодыОпераций.СписаниеНаЗатраты
		ИЛИ КодОперации = КодыОпераций.СписаниеПоИнвентаризации
		ИЛИ КодОперации = КодыОпераций.СписаниеПоОрдеру

	Тогда
	
		Возврат "НаСкладах";
	КонецЕсли;
	
	Если КодОперации = КодыОпераций.ВозвратОтКомиссионера
		ИЛИ КодОперации = КодыОпераций.РеализацияКомиссия
		
	Тогда
		Возврат "Переданные";
	КонецЕсли;
	
	Возврат "НаСкладах"; // По умолчанию
	
КонецФункции // ПолучитьИсточникПоКоду()

// Возвращает текущий максимальный номер строки в наборе записей регистра
//
Функция МаксНомерСтрокиВНабореЗаписей(ИмяРегистра, Регистратор, ВидРегистра = "РегистрНакопления")

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(Рег.НомерСтроки) КАК МаксНомерСтроки
	                      |ИЗ
	                      |"+ВидРегистра+"." +ИмяРегистра+ " КАК Рег
	                      |
	                      |ГДЕ
	                      |	Рег.Регистратор = &Регистратор");
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МаксНомерСтроки = Выборка.МаксНомерСтроки;
	Иначе
		МаксНомерСтроки = 0;
	КонецЕсли;
	
	Возврат МаксНомерСтроки;

КонецФункции

// Общая процедура для добавления записей в набор записей с сопутствующими действиями.
// Добавляет строку в таблицу движений, инкрементирует номер последней строки,
// устанавливает признак модифицированности.
//
Функция ДобавитьДвижение(ИмяРегистра, СтруктураПараметров)

	Движение = СтруктураПараметров["ТаблицаДвижений" + ИмяРегистра].Добавить();
	
	// Увеличим счетчик движений на 1:
	СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра] = СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра]+1;
	
	// Устанавливаем флаг модификации
	СтруктураПараметров["ИзмененыДвижения"+ИмяРегистра] = Истина;

	
	Возврат Движение;

КонецФункции

Функция ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров) Экспорт

	Движение = СтруктураПараметров["ТаблицаДвижений" + ИмяРегистра].Добавить();
	
	// Увеличим счетчик движений на 1:
	СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра] = СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра]+1;
	
	// Устанавливаем флаг модификации
	СтруктураПараметров["ИзмененыДвижения"+ИмяРегистра] = Истина;

	
	Возврат Движение;

КонецФункции


// Создает наборы записей по регистрам управленческого учета
//
// Параметры:
//	Нет.
//
Процедура СоздатьНаборыЗаписейУпр(СтруктураПараметров, ТаблицаСписания)
	
	ОтражатьВУправленческомУчете = ТаблицаСписания.Найти(Истина, "ОтражатьВУправленческомУчете")<>Неопределено;
	
	Если ОтражатьВУправленческомУчете Тогда
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахУпр",    РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеУпр",   РегистрыНакопления.ПартииТоваровПереданные.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияЗатратыУпр",                   РегистрыНакопления.Затраты.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПродажиСебестоимость",       РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияСтоимостьОСУпр", РегистрыНакопления.СтоимостьОС.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияОССписанныеНаЗатратыУпр", РегистрыНакопления.ОССписанныеНаЗатраты.СоздатьНаборЗаписей());
		// Регистры по НДС
		
		СтруктураПараметров.Вставить("ДвиженияНДСПокупки",                  РегистрыНакопления.НДСПокупки.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСПартииТоваров",            РегистрыНакопления.НДСПартииТоваров.СоздатьНаборЗаписей());
		
		// Сторно выручки для Отката о розн. продажах
		СтруктураПараметров.Вставить("ДвиженияНДСПродажи",                  РегистрыНакопления.НДСПродажи.СоздатьНаборЗаписей());
		
		// Учет реализации принятых на комиссию товаров для отчета комитенту
		СтруктураПараметров.Вставить("ДвиженияРеализованныеТовары",            РегистрыНакопления.РеализованныеТовары.СоздатьНаборЗаписей());
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьНаборыЗаписейУпр()

// Создает наборы записей для заданных учетов.
//
Процедура СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания)
	
	СоздатьНаборыЗаписейУпр(СтруктураПараметров, ТаблицаСписания);

КонецПроцедуры

// Подготовка наборов записей по регистрам Упр учета к добавлению в них строк
//
// Параметры:
//	Нет.
//
Процедура ПодготовитьНаборыЗаписейУпр(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи)
	
	ОтражатьВУправленческомУчете = ТаблицаСписания.Найти(Истина, "ОтражатьВУправленческомУчете")<>Неопределено;
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладахУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровПереданныеУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПродажиСебестоимость", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПартииТоваров",             Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияРеализованныеТовары", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияСтоимостьОСУпр", Ложь);
    СтруктураПараметров.Вставить("ИзмененыДвиженияОССписанныеНаЗатратыУпр", Ложь);

	Если ОтражатьВУправленческомУчете Тогда
		
		СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПокупки", Ложь);
		СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПродажи",          Ложь);
		
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Очистить();
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Очистить();
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияЗатратыУпр.Очистить();
		СтруктураПараметров.ДвиженияЗатратыУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияПродажиСебестоимость.Очистить();
		СтруктураПараметров.ДвиженияПродажиСебестоимость.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияСтоимостьОСУпр.Очистить();
		СтруктураПараметров.ДвиженияСтоимостьОСУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияОССписанныеНаЗатратыУпр.Очистить();
		СтруктураПараметров.ДвиженияОССписанныеНаЗатратыУпр.Отбор.Регистратор.Установить(Регистратор);

		// Таблицы движений:
		
		// Для партий на складах
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахУпр", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Очистить();
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ДокументОприходованияДата", ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СтоимостьПоступление", ПолучитьОписаниеТиповЧисла(15, 2));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаВыручки", ПолучитьОписаниеТиповЧисла(15, 2));
		// Валюты и курсы - для пересчета
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ВалютаДокумента");
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КурсДокумента");
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КратностьДокумента");
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КоличествоПоступление", ПолучитьОписаниеТиповЧисла(15, 3));
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаВыручкиБУ", ПолучитьОписаниеТиповЧисла(15, 2));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаНДСВыручкиБУ", ПолучитьОписаниеТиповЧисла(15, 2));
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахУпр", МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладах", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахУпр", 0);
		КонецЕсли;
		
		
		// Для партий товаров переданных
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеУпр", СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Очистить();
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ДокументОприходованияДата", ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СтоимостьПоступление", ПолучитьОписаниеТиповЧисла(15, 2));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаВыручки", ПолучитьОписаниеТиповЧисла(15, 2));
		// Валюты и курсы - для пересчета
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ВалютаДокумента");
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КурсДокумента");
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КратностьДокумента");
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаВыручкиБУ", ПолучитьОписаниеТиповЧисла(15, 2));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаНДСВыручкиБУ", ПолучитьОписаниеТиповЧисла(15, 2));
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КоличествоПоступление", ПолучитьОписаниеТиповЧисла(15, 3));
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеУпр", МаксНомерСтрокиВНабореЗаписей("ПартииТоваровПереданные", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеУпр", 0);
		КонецЕсли;
		
		// Для товаров, списанных на затраты
		СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыУпр", СтруктураПараметров.ДвиженияЗатратыУпр.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийЗатратыУпр.Очистить();
		
		Если Не ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыУпр", МаксНомерСтрокиВНабореЗаписей("Затраты", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыУпр", 0);
		КонецЕсли;
		
		// Для МПЗ, списанных на себестоимость продаж
		СтруктураПараметров.Вставить("ТаблицаДвиженийПродажиСебестоимость", СтруктураПараметров.ДвиженияПродажиСебестоимость.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПродажиСебестоимость.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПродажиСебестоимость", МаксНомерСтрокиВНабореЗаписей("ПродажиСебестоимость", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПродажиСебестоимость", 0);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийСтоимостьОСУпр", СтруктураПараметров.ДвиженияСтоимостьОСУпр.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда 
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСУпр", МаксНомерСтрокиВНабореЗаписей("СтоимостьОС", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСУпр", 0);
		КонецЕсли;

		// Для принятия к учету ОС
		СтруктураПараметров.Вставить("ТаблицаДвиженийОССписанныеНаЗатратыУпр", СтруктураПараметров.ДвиженияОССписанныеНаЗатратыУпр.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиОССписанныеНаЗатратыУпр", МаксНомерСтрокиВНабореЗаписей("ОССписанныеНаЗатраты", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиОССписанныеНаЗатратыУпр", 0);
		КонецЕсли;

		// Регистры по НДС
		
		СтруктураПараметров.ДвиженияНДСПокупки.Очистить();
		СтруктураПараметров.ДвиженияНДСПокупки.Отбор.Регистратор.Установить(Регистратор);

		// Для декларации по НДС при реализации по ставке 0% - в этом модуле могут выполняться движения при возврате
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПокупки", СтруктураПараметров.ДвиженияНДСПокупки.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийНДСПокупки.Очистить();
		
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСПокупки", 0); // Номера строк не используются
		
		СтруктураПараметров.ДвиженияНДСПродажи.Очистить();
		СтруктураПараметров.ДвиженияНДСПродажи.Отбор.Регистратор.Установить(Регистратор);

		// Для декларации по НДС при реализации по ставке 0% - в этом модуле могут выполняться движения при возврате
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПродажи", СтруктураПараметров.ДвиженияНДСПродажи.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийНДСПродажи.Очистить();
		
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСПродажи", 0); // Номера строк не используются
		
		СтруктураПараметров.ДвиженияНДСПартииТоваров.Очистить();
		СтруктураПараметров.ДвиженияНДСПартииТоваров.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПартииТоваров",               СтруктураПараметров.ДвиженияНДСПартииТоваров.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Колонки.Добавить("СуммаВыручки", ПолучитьОписаниеТиповЧисла(15, 2)); // сумма выручки в валюте бух учета
		СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Колонки.Добавить("СуммаНДСВыручки", ПолучитьОписаниеТиповЧисла(15, 2)); // сумма НДС с выручки в валюте бух учета
		СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Колонки.Добавить("СтавкаНДСВыручки"); // ставка НДС с выручки
		СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Колонки.Добавить("ВидСклада"); // Вид склада
		СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Колонки.Добавить("ДоговорКонтрагента"); // Контрагент
		
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСПартииТоваров", 0);
		
		СтруктураПараметров.ДвиженияРеализованныеТовары.Очистить();
		СтруктураПараметров.ДвиженияРеализованныеТовары.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.Вставить("ТаблицаДвиженийРеализованныеТовары", СтруктураПараметров.ДвиженияРеализованныеТовары.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийРеализованныеТовары.Очистить();
		СтруктураПараметров.Вставить("ТекНомерСтрокиРеализованныеТовары", 0);
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьНаборыЗаписейУпр()

// Подготавливает параметры, необходимые для работы с наборами записей для заданных учетов.
//
Процедура ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи = Истина)
	
	СтруктураПараметров.Вставить("Период",         Период);
	СтруктураПараметров.Вставить("Регистратор",    Регистратор);
	
	ПодготовитьНаборыЗаписейУпр(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи)
	
КонецПроцедуры

// Записывет набор записей в базу данных.
//
Процедура ЗаписатьДвижения(ДвиженияРегистра, ТаблицаДвиженийРегистра, Замещать)

	// При замещении нужно удалять записи, сформированные прошлым списанием партий (СписаниеПартий=Истина),
	// если у регистра есть реквизит СписаниеПартий, то нужно удалить строки с Истина
	ДМ = ДвиженияРегистра.Метаданные();
	ЕстьРеквизитСписаниеПартий = (ДМ.Реквизиты.Найти("СписаниеПартий") <> Неопределено);
	Если Замещать 
		И ЕстьРеквизитСписаниеПартий Тогда
		
		Если ТаблицаДвиженийРегистра=Неопределено Тогда
			ТаблицаДвиженийРегистра = ДвиженияРегистра.Выгрузить();
		КонецЕсли;
		
		ДвиженияРегистра.Прочитать();
		
		Инд=0;
		Пока Инд < ДвиженияРегистра.Количество() Цикл
			Если ДвиженияРегистра[Инд].СписаниеПартий Тогда
				ДвиженияРегистра.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
		КонецЦикла;
		
		ДобавитьСтрокиВНаборЗаписей(ДвиженияРегистра, ТаблицаДвиженийРегистра);
		
		// Заполним параметр "Списание партий"
		Если ЕстьРеквизитСписаниеПартий Тогда
			Для Каждого Запись Из ДвиженияРегистра Цикл
				попытка
					Если запись.ДокументДвиженияПериод = Дата(1,1,1) Тогда
						Запись.СписаниеПартий = Истина;
					КонецЕсли;
				Исключение
					Запись.СписаниеПартий = Истина;
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		
		ДвиженияРегистра.Записать(Истина);
		
	Иначе
		
		Если ТаблицаДвиженийРегистра<>Неопределено Тогда
			ДобавитьСтрокиВНаборЗаписей(ДвиженияРегистра, ТаблицаДвиженийРегистра);
		КонецЕсли;
		
		// Заполним параметр "Списание партий"
		Если ЕстьРеквизитСписаниеПартий Тогда
			Для Каждого Запись Из ДвиженияРегистра Цикл
				Запись.СписаниеПартий = Истина;
			КонецЦикла;
		КонецЕсли;
		
		ДвиженияРегистра.Записать(Замещать);
		
	КонецЕсли;

КонецПроцедуры

// Запись движений по упр. учету
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьДвиженияДокументаУпр(СтруктураПараметров, ТаблицаСписания, Замещать)
	
	ОтражатьВУправленческомУчете = ТаблицаСписания.Найти(Истина, "ОтражатьВУправленческомУчете")<>Неопределено;
	
	Если ОтражатьВУправленческомУчете Тогда
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладахУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровПереданныеУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПродажиСебестоимость Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПродажиСебестоимость, 
			СтруктураПараметров.ТаблицаДвиженийПродажиСебестоимость, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияЗатратыУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыУпр, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияРеализованныеТовары Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияРеализованныеТовары, 
			СтруктураПараметров.ТаблицаДвиженийРеализованныеТовары, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСПартииТоваров, 
			СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСПокупки Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСПокупки, 
			СтруктураПараметров.ТаблицаДвиженийНДСПокупки, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСПродажи Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСПродажи, 
			СтруктураПараметров.ТаблицаДвиженийНДСПродажи, Замещать);
			
		КонецЕсли;
		
			Если СтруктураПараметров.ИзмененыДвиженияСтоимостьОСУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияСтоимостьОСУпр, 
			СтруктураПараметров.ТаблицаДвиженийСтоимостьОСУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияОССписанныеНаЗатратыУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияОССписанныеНаЗатратыУпр, 
			СтруктураПараметров.ТаблицаДвиженийОССписанныеНаЗатратыУпр, Замещать);
			
		КонецЕсли;

	КонецЕсли
	
КонецПроцедуры // ЗаписатьДвиженияДокументаУпр()

// Процедура-вход для записи движений документа в базу данных
//
Процедура ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Замещать = Истина)

	// Управленческий учет
	ЗаписатьДвиженияДокументаУпр(СтруктураПараметров, ТаблицаСписания, Замещать);
	
КонецПроцедуры

// Добавляет записи из таблицы движений в набор записей
//
Процедура ДобавитьСтрокиВНаборЗаписей(НаборЗаписей, Таблица)
	
	НаборМетаданные = НаборЗаписей.Метаданные();
	
	ЭтоРегистрБухгалтерии = (Метаданные.РегистрыБухгалтерии.Найти(НаборМетаданные.Имя)<>Неопределено);
	
	СтруктураПолей  = Новый Структура("Период, Регистратор, ВидДвижения");
	
	Для каждого Измерение Из НаборМетаданные.Измерения Цикл
		
		СтруктураПолей.Вставить(Измерение.Имя);
		
	КонецЦикла;
	
	Для каждого Ресурс Из НаборМетаданные.Ресурсы Цикл
		
		Если НЕ ЭтоРегистрБухгалтерии Тогда
			СтруктураПолей.Вставить(Ресурс.Имя);
		Иначе
			СтруктураПолей.Вставить("Сумма");
			СтруктураПолей.Вставить("КоличествоДт");
			СтруктураПолей.Вставить("КоличествоКт");
			СтруктураПолей.Вставить("ВалютнаяСуммаДт");
			СтруктураПолей.Вставить("ВалютнаяСуммаКт");
		КонецЕсли;
		
	КонецЦикла;
	
	СписокРесурсов = Сред(СписокРесурсов, 2);
		
	Для каждого Реквизит Из НаборМетаданные.Реквизиты Цикл
		
		СтруктураПолей.Вставить(Реквизит.Имя);
		
	КонецЦикла;
	
	Если ЭтоРегистрБухгалтерии Тогда
		
		СтруктураПолей.Вставить("СчетДт");
		СтруктураПолей.Вставить("СчетКт");
		СтруктураПолей.Вставить("СубконтоДт1");
		СтруктураПолей.Вставить("СубконтоДт2");
		СтруктураПолей.Вставить("СубконтоДт3");
		
		СтруктураПолей.Вставить("СубконтоКт1");
		СтруктураПолей.Вставить("СубконтоКт2");
		СтруктураПолей.Вставить("СубконтоКт3");
		
		СтруктураПолей.Вставить("ВалютаДт");
		СтруктураПолей.Вставить("ВалютаКт");
		
	КонецЕсли;

	Для Каждого Строка Из Таблица Цикл
		
		Запись = НаборЗаписей.Добавить();
		
		Запись.Активность = Истина;
		
		Для каждого Колонка Из Таблица.Колонки Цикл
		
			Если Колонка.Имя <> "" 
				И СтруктураПолей.Свойство(Колонка.Имя) Тогда
				
				Если ЭтоРегистрБухгалтерии Тогда
					Если Лев(Колонка.Имя, 10)= "СубконтоДт" Тогда 
						
						НомерСубконто = Сред(Колонка.Имя, 11);
						
						ЗначениеСубконто = Строка[Колонка.Имя];
						
						ВидСубконто = Строка["ВидСубконтоДт" + НомерСубконто];
						
						Если Запись.СчетДт.ВидыСубконто.Найти(ВидСубконто)<> Неопределено Тогда
						
							Запись.СубконтоДт.Вставить(ВидСубконто, ЗначениеСубконто);
							
						КонецЕсли;
						
					ИначеЕсли Лев(Колонка.Имя, 10)= "СубконтоКт" Тогда 
						
						НомерСубконто = Сред(Колонка.Имя, 11);
						
						ЗначениеСубконто = Строка[Колонка.Имя];
						
						ВидСубконто = Строка["ВидСубконтоКт" + НомерСубконто];
						
						Если Запись.СчетКт.ВидыСубконто.Найти(ВидСубконто)<> Неопределено Тогда
						
							Запись.СубконтоКт.Вставить(ВидСубконто, ЗначениеСубконто);
							
						КонецЕсли;
						
					Иначе
						Запись[Колонка.Имя] = Строка[Колонка.Имя];
					КонецЕсли;
					
				Иначе
					
					Запись[Колонка.Имя] = Строка[Колонка.Имя];
					
				КонецЕсли;
			
			КонецЕсли; 
		
		КонецЦикла; 
		
	КонецЦикла;

КонецПроцедуры

// Сортировка партий по стратегии
//
// Параметры:
//	Нет.
//
Процедура ОтсортироватьПартииПоСтратегии(ТаблицаОстатки, СтрокаДокумента, СтруктураПараметров)
	
	ОтсортироватьПартииПоСтратегииУпр(ТаблицаОстатки, СтрокаДокумента, СтруктураПараметров);
	
КонецПроцедуры // ОтсортироватьПартииПоСтратегии()

// Сортировка партий по стратегии для упр учета
//
// Параметры:
//	Нет.
//
Процедура ОтсортироватьПартииПоСтратегииУпр(ТаблицаОстатки, СтрокаДокумента, СтруктураПараметров)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		// Полученную таблицу отсортируем в соответствии со стратегией 
		СпособОценкиМПЗ = Строка(УчетнаяПолитика("СпособОценкиМПЗ", "Упр", СтрокаДокумента.Организация, СтруктураПараметров));
		
		Если СпособОценкиМПЗ = "ЛИФО" Тогда
			НапрДата = "Убыв";
		ИначеЕсли СпособОценкиМПЗ = "ФИФО" Тогда
			НапрДата = "Возр";
		Иначе
			// По средней : партии принятых на комиссию по FIFO
		КонецЕсли; 
		
		
		// В упр учете сортируем по стратегии: собственные - принятые
		Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
			
			СтратегияСтатусПартии = УчетнаяПолитика("СтратегияСписанияПоСтатусам", "Упр", СтрокаДокумента.Организация, СтруктураПараметров);
			
			ТаблицаОстатки.Колонки.Добавить("ЧислоСтатусПартии", ПолучитьОписаниеТиповЧисла(1,0));
			
			Для каждого Строка Из ТаблицаОстатки Цикл
				
				Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию 
					Тогда
					
					Строка.ЧислоСтатусПартии = 1;
					
				Иначе
					
					Строка.ЧислоСтатусПартии = 0;
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			ПоляСортировкиСтатус = "ЧислоСтатусПартии Возр"; // По умолчанию
			
			Если СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаСобственныеПотомПринятые Тогда
				
				ПоляСортировкиСтатус = "ЧислоСтатусПартии Возр";
				
			ИначеЕсли СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные Тогда
				
				ПоляСортировкиСтатус = "ЧислоСтатусПартии Убыв";
				
			КонецЕсли;
			
			// Отсортируем таблицу для получения порядка по датам
			ТаблицаОстатки.Сортировать(ПоляСортировкиСтатус + ", ДокументОприходованияДата " + НапрДата + ", ДокументОприходования " + НапрДата);
			
			ТаблицаОстатки.Колонки.Удалить("ЧислоСтатусПартии");
			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ОтсортироватьПартииПоСтратегии()

// Проверка списываемой партии по упр учету
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево
//
Функция ПроверитьПартиюНаСкладеУпр(СтрокаПартии, СтрокаДокумента, СтруктураПараметров)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		Если НЕ ПроверитьПартиюПоСтатусу(СтрокаПартии, СтрокаДокумента) Тогда Возврат Ложь КонецЕсли;
		
		Возврат  ПроверитьПартиюПоКачеству(СтрокаПартии, СтрокаДокумента)
		И ПроверитьПартиюПоЗаказу(СтрокаПартии, СтрокаДокумента)
		И ПроверитьПартиюПоСкладу(СтрокаПартии, СтрокаДокумента, СтруктураПараметров);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ПроверитьПартиюНаСкладеУпр()

// Проверка списываемой партии переданной
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПроверитьПартиюПереданнуюУпр(СтрокаПартии, СтрокаДокумента, СтруктураПараметров)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Если НЕ ПроверитьПартиюПоСтатусу(СтрокаПартии, СтрокаДокумента) Тогда Возврат Ложь КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПартиюПереданную()


// Проверяет партию по статусу партии
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПроверитьПартиюПоСтатусу(СтрокаПартии, СтрокаДокумента)
	
	// Проверка выполняется, когда заданы условия проверки
	Если НЕ ЗначениеНеЗаполнено(СтрокаПартии.СтатусПартии) 
		И НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ДопустимыйСтатус1)
		И НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ДопустимыйСтатус2)
		И НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ДопустимыйСтатус3) Тогда
		
		Если СтрокаПартии.СтатусПартии <> СтрокаДокумента.ДопустимыйСтатус1
			И СтрокаПартии.СтатусПартии <> СтрокаДокумента.ДопустимыйСтатус2
			И СтрокаПартии.СтатусПартии <> СтрокаДокумента.ДопустимыйСтатус3
			И СтрокаПартии.СтатусПартии <> СтрокаДокумента.ДопустимыйСтатус4
			// Статус "По ордеру" списывается всегда
			И СтрокаПартии.СтатусПартии <> Перечисления.СтатусыПартийТоваров.ПоОрдеру Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции // ПроверитьПартиюПоСтатусу()

// Проверка партии по измерению "Качество"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПроверитьПартиюПоКачеству(СтрокаПартии, СтрокаДокумента)
	
	КачествоНовый = Справочники.Качество.Новый;
	
	Если НЕ ЗначениеНеЗаполнено(СтрокаПартии.Качество) Тогда 
		
		// Если задано, какое качество списывать, проверяем
		Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.Качество) Тогда
			
			Если СтрокаПартии.Качество<>СтрокаДокумента.Качество Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
			// В противном случае списываем только новые
		Иначе
			
			Если СтрокаПартии.Качество <> КачествоНовый Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПартиюПоКачеству()

// Проверка партии по измерению "Склад"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПроверитьПартиюПоСкладу(СтрокаПартии, СтрокаДокумента, СтруктураПараметров)
	
	// Склад, если партионный учет по складам
	Если УчетнаяПолитика("ВестиПартионныйУчетПоСкладам", "Упр", СтрокаДокумента.Организация, СтруктураПараметров) Тогда
		
		Если СтрокаПартии.Склад <> СтрокаДокумента.Склад
			И НЕ ЗначениеНеЗаполнено(СтрокаПартии.Склад) Тогда // пустые склады могут остаться со времени, когда не было партионного учета по складам
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПартиюПоСкладу()

// Проверка партии по измерению "Заказ"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПроверитьПартиюПоЗаказу(СтрокаПартии, СтрокаДокумента)
	
	// Заказ партии, если указан в документе
	Если  СтрокаПартии.Заказ <> СтрокаДокумента.ЗаказПартии 
		И (СтрокаДокумента.СписыватьТолькоПоЗаказу
		ИЛИ	
		НЕ СтрокаДокумента.СписыватьТолькоПоЗаказу 
		И НЕ ЗначениеНеЗаполнено(СтрокаПартии.Заказ))		Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПартиюПоЗаказу()

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЯ (КРЕДИТ)

// Упр учет

// Структура отбора партий по упр учету заполняется нужными значениями
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
		
		Если РегистрУчета="НаСкладах" Тогда
			
			// Серии не отбираются при резервировании т.к. в заказах нет серий
			Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
				И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
				
				СтруктураОтбора.Вставить("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтруктуруОтбораУпр()

// Возвращает имя соответствующего регистра для строки по упр учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Если ВидРегистра="ПартииТоваров" Тогда
			ИмяРегистра = ВидРегистра + РегистрУчета + "Упр";
		Иначе
			ИмяРегистра = ВидРегистра + "Упр";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, "ПартииТоваров", РегистрУчета, СтрокаДокумента)

// Заполняет поля записи списания по упр учету
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоляЗаписиСписанияУпр(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
		
		Если РегистрУчета="НаСкладах" Тогда
			Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;
			Движение.Склад 			        = СтрокаПартии.Склад;
			Движение.Заказ  				= СтрокаПартии.Заказ;
			Движение.Качество  				= СтрокаПартии.Качество;
			
		Иначе // Если РегистрУчета="Переданные" Тогда
			
			Движение.ДоговорКонтрагента	    = СтрокаПартии.ДоговорКонтрагента;
			Движение.ДокументПередачи		= СтрокаПартии.ДокументПередачи;
			
		КонецЕсли;
		
		Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;
		
		Движение.СтатусПартии		    = СтрокаПартии.СтатусПартии;
		
		// Реквизиты
		Движение.Подразделение	        = СтрокаДокумента.Подразделение;
		
		Если РегистрУчета="Переданные" Тогда
			Движение.СтатусПередачи		= СтрокаПартии.СтатусПередачи;
		КонецЕсли;
		
		// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
		
		// Сумма выручки и сумма НДС  - для учета НДС
		Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ*КоэффПоступления, 2);
		Движение.СуммаНДСВыручкиБУ  = Окр(СтрокаДокумента.СуммаНДС *КоэффПоступления, 2);
		
		// Уменьшим сумму в исх. строке
		СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;
		СтрокаДокумента.СуммаНДС = СтрокаДокумента.СуммаНДС - Движение.СуммаНДСВыручкиБУ;
		
		// Сумма выручки в валюте документа - для отчета комитенту
		Движение.СуммаВыручки = Окр(СтрокаДокумента.СуммаЗадолженности*КоэффПоступления, 2);
		// Валюты и курсы - для пересчета
		Движение.ВалютаДокумента = СтрокаДокумента.ВалютаДокумента;
		Движение.КурсДокумента = СтрокаДокумента.КурсДокумента;
		Движение.КратностьДокумента = СтрокаДокумента.КратностьДокумента;
		
		СтрокаДокумента.СуммаЗадолженности = СтрокаДокумента.СуммаЗадолженности - Движение.СуммаВыручки;
		
		Движение.КоличествоПоступление    = Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);
		СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоляЗаписиСписанияУпр()

// Сообщает о нехватке партии в управленческом учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНехваткеПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтрокаСообщения = "Управленческий учет. ";
		
		Если РегистрУчета = "НаСкладах" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ", строка :" + СтрокаДокумента.НомерСтроки + Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + "(" + СтрокаДокумента.Номенклатура.Код + ") " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ?(УчетнаяПолитика("ВестиПартионныйУчетПоСкладам", "Упр", СтрокаДокумента.Организация, СтруктураПараметров), ", со склада: " + СтрокаДокумента.Склад, "");
			
			Если ПараметрыСеанса.ПроведениеПоПартиямДатаПервойОшибки = Дата(1,1,1) Тогда
				ПараметрыСеанса.ПроведениеПоПартиямДатаПервойОшибки = СтрокаДокумента.Регистратор.Дата;
			КонецЕсли;
			
		ИначеЕсли РегистрУчета = "Переданные" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ", строка :" + СтрокаДокумента.НомерСтроки + Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + "(" + СтрокаДокумента.Номенклатура.Код + ") " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ", по договору " + СтрокаДокумента.ДоговорКонтрагента;
			
			Если ПараметрыСеанса.ПроведениеПоПартиямДатаПервойОшибки = Дата(1,1,1) Тогда
				ПараметрыСеанса.ПроведениеПоПартиямДатаПервойОшибки = СтрокаДокумента.Регистратор.Дата;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Отказ", Истина);
		
		//#Если Сервер Тогда
		//	СтруктураПараметров.ТекстСообщений = СтруктураПараметров.ТекстСообщений + Символы.ПС + СтрокаСообщения;
		//#Иначе
			СообщитьОбОшибке(СтрокаСообщения);
		//#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииУпр()

// Общие

// Проверяет партию по дополнительным условиям
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПроверитьПартию(СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
	// Проверка партии по набору признаков для соотв. учета
	Если РегистрУчета = "НаСкладах" Тогда
		Возврат ПроверитьПартиюНаСкладеУпр(СтрокаПартии, СтрокаДокумента, СтруктураПараметров);
	Иначе // Если РегистрУчета = "Переданные"
		Возврат ПроверитьПартиюПереданнуюУпр(СтрокаПартии, СтрокаДокумента, СтруктураПараметров);
	КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ПроверитьПартию()

// Возвращает имя соответствующего регистра для строки
//
// Параметры:
//	Нет.
//
Функция ПолучитьИмяРегистра(ВидРегистра, РегистрУчета, СтрокаДокумента)
	
	ИмяРегистра ="";
	ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента);
	
	Возврат ИмяРегистра;
	
КонецФункции // ПолучитьИмяРегистра("ПартииТоваров", РегистрУчета, СтрокаДокумента)

// Отбирает в партиях строки соответствующие значениям обрабатываемой строки
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив строк
//
Функция ОтобратьСтрокиПартий(ТаблицаПартий, СтрокаДокумента, РегистрУчета)
	
	// Структура отбор строк партий
	СтруктураОтбора = Новый Структура;
	
	ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета);
	
	Возврат ТаблицаПартий.НайтиСтроки(СтруктураОтбора);
	
КонецФункции // ОтобратьСтрокиПартий()

// Заполняет поля записи списания
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоляЗаписиСписания(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления)
	
	ЗаполнитьПоляЗаписиСписанияУпр(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления);
	
КонецПроцедуры // ЗаполнитьПоляЗаписиСписания()

// Списание со склада по строке
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
// Возвращаемое значение:
//   ТаблицаЗначений   – таблица списанных партий
//
Процедура СписаниеПартий(СтрокаДокумента, СтруктураПараметров, РегистрУчета)
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	// Партии для данного учета
	ИмяРегистра = ПолучитьИмяРегистра("ПартииТоваров", РегистрУчета, СтрокаДокумента);
	
	// Если нет регистра, по которому списываем, тогда пропускаем
	Если ИмяРегистра="" Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПартий   = СтруктураПараметров["Таблица"+ИмяРегистра] ;
	
	НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаПартий, СтрокаДокумента, РегистрУчета);
	
	// Найденные строки перенесем в таблицу значений, которую нужно отсортировать в соответствии со стратегией списания
	ТаблицаОстатки = Новый ТаблицаЗначений;
	
	// Добавим колонку с индексом
	ТаблицаОстатки.Колонки.Добавить("ИндексНайденнойСтроки", ПолучитьОписаниеТиповЧисла(15, 2));
	
	Для Каждого Кол Из ТаблицаПартий.Колонки Цикл
		ТаблицаОстатки.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла; 
	
	Сч = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		НоваяСтрока = ТаблицаОстатки.Добавить();
		НоваяСтрока.ИндексНайденнойСтроки = Сч;
		Для Каждого Кол Из ТаблицаПартий.Колонки Цикл
			Если ПустаяСтрока(Кол.Имя) ИЛИ Кол.Имя = "QuieryId" Тогда
				Продолжить;
			КонецЕсли; 
			
			НоваяСтрока[Кол.Имя] = Строка[Кол.Имя];
		КонецЦикла; 
		Сч = Сч + 1;
	КонецЦикла;
	
	// Сортировка партий по стратегии списания (fifo, lifo, по-средней + дополнительные правила)
	ОтсортироватьПартииПоСтратегии(ТаблицаОстатки, СтрокаДокумента, СтруктураПараметров);
	
	// Подлежащее погашению при списании количество
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	
	// В строке может быть указана стоимость поступления, если затем товар будет оприходован с другой стоимостью
	СтоимостьПоступлениеОсталосьПогасить = 0;
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		СтоимостьПоступлениеОсталосьПогасить = СтрокаДокумента.СтоимостьПоступление;
	КонецЕсли;
	
	Для Каждого СтрокаПартии Из ТаблицаОстатки Цикл
		
		Если КоличествоОсталосьПогасить <= 0 Тогда
			Прервать;
		КонецЕсли; 
		
		// Количество по строке больше 0
		Если НЕ СтрокаПартии.Количество > 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		// Проверки доп. условий
		Если НЕ ПроверитьПартию(СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета) Тогда
			Продолжить
		КонецЕсли;
		
		Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
			КоэффСписания = КоличествоОсталосьПогасить/СтрокаПартии.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;
		
		// Добавим новую строку
		Движение = ДобавитьДвижение(ПолучитьИмяРегистра("ПартииТоваров", РегистрУчета, СтрокаДокумента), СтруктураПараметров);
		
		// Свойства
		Движение.Период 				= СтрокаДокумента.Период;
		Движение.Регистратор 			= СтрокаДокумента.Регистратор;
		Движение.Активность 			= Истина;
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.Номенклатура 			= СтрокаПартии.Номенклатура;
		
		// Ресурсы 
		Движение.Количество	= Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
		Движение.Стоимость	= Окр(СтрокаПартии.Стоимость  * КоэффСписания,2,1);
		
		Если Движение.Количество < КоличествоОсталосьПогасить Тогда
			КоэффПоступления = Движение.Количество / КоличествоОсталосьПогасить;
		Иначе
			КоэффПоступления = 1;
		КонецЕсли;
		
		// Вспомогательное поле, не являющееся ресурсом, но используемое
		// для формирования записей по переоценке принятого на комиссию.
		Движение.СтоимостьПоступление = СтоимостьПоступлениеОсталосьПогасить * КоэффПоступления;
		СтоимостьПоступлениеОсталосьПогасить = СтоимостьПоступлениеОсталосьПогасить - Движение.СтоимостьПоступление;
		
		// Реквизиты
		Движение.КодОперации	= СтрокаДокумента.КодОперацииПартииТоваров;
		
		КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
		
		СтрокаПартии.Количество = СтрокаПартии.Количество - Движение.Количество;
		СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - Движение.Стоимость;
		
		// Заполнение полей, специфических для учета
		ЗаполнитьПоляЗаписиСписания(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления);
		
		// Обработка движений, связанных со списанием определенных партий по документу (специфика разных видов учета)
		ВыполнитьСвязанныеСоСписаниемДвижения(СтрокаДокумента, СтруктураПараметров, Движение, КоэффСписания, КоэффПоступления);
		
		// Обработка поступления
		ВыполнитьКорДвижение(РегистрУчета, СтрокаДокумента, СтруктураПараметров, Движение);
		
	КонецЦикла; 
	
	// Таблицу значений перенесем в найденные строки
	Для Каждого Строка Из ТаблицаОстатки Цикл
		Для Каждого Кол Из ТаблицаПартий.Колонки Цикл
			
			Если ПустаяСтрока(Кол.Имя) ИЛИ Кол.Имя = "QuieryId" Тогда
				Продолжить;
			КонецЕсли; 
			
			НайденныеСтроки[Строка.ИндексНайденнойСтроки][Кол.Имя] = Строка[Кол.Имя];
		КонецЦикла; 
	КонецЦикла;
	
	// Товара не хватило
	Если (КоличествоОсталосьПогасить > 0) Тогда
		СообщитьОНехваткеПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	КонецЕсли; 
	
КонецПроцедуры // СписаниеПартий()

// Сообщение о нехватке партий для списания
//
// Параметры:
//	Нет.
//
Процедура СообщитьОНехваткеПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	СообщитьОНехваткеПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
КонецПроцедуры // СообщитьОНехваткеПартии()


/////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ,ВЫПОЛНЯЕМЫЕ ПО РЕЗУЛЬТАТУ СПИСАНИЯ

// Отражение продажи комиссионного товара
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтруктураПараметров, ТаблицаСписания)
	
	МассивДокументов = Новый Массив;
	
	КодОперации = Перечисления.КодыОперацийПартииТоваров;
	
	Для Сч=1 По 2 Цикл
		
		// Первый раз движения по партиям на склаждах, второй - по партиям на комиссии
		Если Сч=1 Тогда
			
			ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Скопировать();
			СписаноИз = "НаСкладах";
			
		Иначе
			ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Скопировать();
			СписаноИз = "Переданные";
		КонецЕсли;
		
		// Из таблицы удалим движения, не относящиеся к продаже купленных товаров
		Инд=0;
		Пока Инд<ТаблицаСписанныхПартий.Количество() Цикл
			Строка = ТаблицаСписанныхПартий[Инд];
			
			// Товар должен быть комиссионным и списываться (операции определенных типов)
			Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию 
				
				И ( Строка.КодОперации = КодОперации.Реализация
				ИЛИ Строка.КодОперации = КодОперации.РеализацияРозница
				ИЛИ Строка.КодОперации = КодОперации.РеализацияКомиссия
				ИЛИ Строка.КодОперации = КодОперации.СписаниеНаЗатраты
				ИЛИ Строка.КодОперации = КодОперации.СписаниеПоИнвентаризации
				ИЛИ Строка.КодОперации = КодОперации.Комплектация
				)Тогда
				
				Инд = Инд+1;
				МассивДокументов.Добавить(Строка.ДокументОприходования);
			Иначе
				ТаблицаСписанныхПартий.Удалить(Инд);
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаСписанныхПартий.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пост.ДоговорКонтрагента КАК ДоговорПоставки,
		|	Пост.Сделка,
		|	Пост.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность,
		|	Пост.Ссылка,
		|	Пост.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Пост
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, ) КАК КурсыВалютСрезПоследних
		|		ПО Пост.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
		|
		|ГДЕ
		|	Пост.Ссылка В(&Ссылка)");
		Запрос.УстановитьПараметр("Ссылка" , МассивДокументов);
		Запрос.УстановитьПараметр("ДатаКурса" , СтруктураПараметров.Период);
		
		Выборка = Запрос.Выполнить().Выбрать();
		СоотвДок = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			СоотвДок.Вставить(Выборка.Ссылка, Новый Структура("ДоговорПоставки, ВедениеВзаиморасчетов, Сделка, Ссылка, Валюта, Курс, Кратность", Выборка.ДоговорПоставки, Выборка.ВедениеВзаиморасчетов, Выборка.Сделка, Выборка.Ссылка, Выборка.Валюта, Выборка.Курс, Выборка.Кратность));
		КонецЦикла;
		
		ДоговорПоставки        = Выборка.ДоговорПоставки;
		ВалютаДоговораПоставки = Выборка.Валюта;
		
		Для Каждого Движение Из ТаблицаСписанныхПартий Цикл
			
			ДвижениеРТ = ДобавитьДвижение("РеализованныеТовары", СтруктураПараметров);
			ДвижениеРТ.Период = СтруктураПараметров.Период;
			
			Если Движение.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
				ДвижениеРТ.ВидДвижения = ВидДвиженияНакопления.Приход;
			Иначе
				ДвижениеРТ.ВидДвижения = ВидДвиженияНакопления.Расход;
			КонецЕсли;
			
			ДвижениеРТ.Номенклатура = Движение.Номенклатура;
			ДвижениеРТ.ХарактеристикаНоменклатуры = Движение.ХарактеристикаНоменклатуры;
			
			Если СписаноИз = "НаСкладах" Тогда
				ДвижениеРТ.СерияНоменклатуры = Движение.СерияНоменклатуры;
			КонецЕсли;
		
			ДвижениеРТ.ДокументПоставки = Движение.ДокументОприходования;
			ДвижениеРТ.Количество = Движение.Количество;
			
			СтруктураДок = СоотвДок[Движение.ДокументОприходования];
			
			Если СтруктураДок <> Неопределено Тогда
				ДвижениеРТ.ДоговорКонтрагента = СтруктураДок.ДоговорПоставки;
				
				Если СтруктураДок.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
					ИЛИ СтруктураДок.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					
					ДвижениеРТ.Сделка = СтруктураДок.Сделка;
				ИначеЕсли СтруктураДок.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
					Если Не ЗначениеНеЗаполнено(СтруктураДок.Сделка) Тогда
						ДвижениеРТ.Сделка = СтруктураДок.Сделка;
					Иначе
						ДвижениеРТ.Сделка = СтруктураДок.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
				Если Движение.СуммаВыручки<>0 Тогда
					// Пересчет в валюту взаиморасчетов с комитентом
					ДвижениеРТ.Выручка = 
					ПересчитатьИзВалютыВВалюту(Движение.СуммаВыручки, 
					Движение.ВалютаДокумента, СтруктураДок.Валюта, 
					Движение.КурсДокумента, СтруктураДок.Курс, 
					Движение.КратностьДокумента, СтруктураДок.Кратность);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтрокаДокумента, СтруктураПараметров, Движение)()

// Связанные со списанием движения по упр учету
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьСвязанныеДвиженияУпр(СтрокаДокумента, СтруктураПараметров, Движение, КоэффСписания, КоэффПоступления)
	
	Если СтрокаДокумента.ОтражатьвУправленческомУчете Тогда
		
		Если СтрокаДокумента.ОтражатьвБухгалтерскомУчете Тогда
		
			ВыполнитьДвиженияПоНДС(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры // ВыполнитьСвязанныеДвиженияУпр()

// Выполнение движений, связанных со списанием партий по документу, имеющих специфику разных в разных видах учета
// Выполняется только при первичном проведении документа, не используется при корректировке списания.
//
Процедура ВыполнитьСвязанныеСоСписаниемДвижения(СтрокаДокумента, СтруктураПараметров, Движение, КоэффСписания, КоэффПоступления)
	
	ВыполнитьСвязанныеДвиженияУпр(СтрокаДокумента, СтруктураПараметров, Движение, КоэффСписания, КоэффПоступления);
	
	// Сюда можно добавить вызов процедур для выполнения движений по другим учетам
	
КонецПроцедуры // ВыполнитьСвязанныеСоСписаниемДвижения()

/////////////////////////////////////////////////////////////////////////////////
// КОРРЕСПОНДИРУЮЩИЕ СПИСАНИЮ ДВИЖЕНИЯ (ДЕБЕТ)

// Упр

// Движение по себестоимости продаж
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПроданныхПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Строка, ТипЗаписи = "Прямая")
	
	Движение = ДобавитьДвижение("ПродажиСебестоимость", СтруктураПараметров);
	
	Количество = Строка.Количество;
	Стоимость = Строка.Стоимость;
	
	Если ТипЗаписи = "Сторно" Тогда
		Количество = - Количество;
		Стоимость  = - Стоимость;
	КонецЕсли;
	
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность = Истина;
	
	Движение.Номенклатура = Строка.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	
	Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ЗаказСписания) Тогда
		
		Движение.ЗаказПокупателя = СтрокаДокумента.ЗаказСписания;
		
	ИначеЕсли НЕ ЗначениеНеЗаполнено(Строка.Заказ) Тогда
		
		Движение.ЗаказПокупателя = Строка.Заказ;
		
	Иначе
		
		Движение.ЗаказПокупателя = Неопределено;
		
	КонецЕсли;
	
	Движение.ДокументОприходования = Строка.ДокументОприходования;
	Движение.Подразделение = СтрокаДокумента.Подразделение;
	
	Движение.Количество = Количество;
	Движение.Стоимость  = Стоимость;
	
	// При внешнем списании оставляем ссылку на исходное движение
	Движение.ДокументДвижения       = Строка.ДокументДвижения;
	Движение.ДокументДвиженияПериод = Строка.ДокументДвиженияПериод;
	
	Строка.НомерКорСтроки = СтруктураПараметров.ТекНомерСтрокиПродажиСебестоимость;

КонецПроцедуры // СписаниеНаСебестоимостьПродаж()

// Поступление товаров на склад
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеНаСкладУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижение("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность = Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	// Измерения
	Если УчетнаяПолитика("ВестиПартионныйУчетПоСкладам", Учет, , СтруктураПараметров) Тогда
		
		// Склад в движении есть, только если списано со склада
		Если СписаноИз = "НаСкладах" Тогда
			Движение.Склад	= Строка.Склад;
		Иначе
			
			Движение.Склад 	= СтрокаДокумента.Склад;
			
		КонецЕсли;
		
		// Если задан новый склад поступления, подставляем его
		Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.СкладПолучатель) Тогда
			Движение.Склад 	= СтрокаДокумента.СкладПолучатель;
			
		КонецЕсли;
		
	Иначе
		
		Движение.Склад      = Неопределено;
	КонецЕсли;
	
	Движение.Номенклатура 	= Строка.Номенклатура;
	
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	
	// Если задана новыя характеристика, подставляем ее
	Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
	КонецЕсли;
	
	// Серия номенклатуры в движении есть, только если списано со склада
	Если СписаноИз = "НаСкладах" Тогда
	
		Движение.СерияНоменклатуры	= Строка.СерияНоменклатуры;
	КонецЕсли;
	
	// Если задана новыя серия, подставляем ее
	Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.СерияНоменклатурыНовая) Тогда
		
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
	КонецЕсли;
	
	// Качество номенклатуры в движении есть только, если списано со склада
	Если СписаноИз = "НаСкладах" Тогда
		
		Движение.Качество	= Строка.Качество;
	КонецЕсли;
	
	// Если задана новыя качество, подставляем его
	Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.КачествоНовое) Тогда
		
		Движение.Качество	= СтрокаДокумента.КачествоНовое;
	КонецЕсли;
	
	// Вместо пустого качества - новый
	Если ЗначениеНеЗаполнено(Движение.Качество) Тогда
		Движение.Качество	= Справочники.Качество.Новый;
	КонецЕсли;
	
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	//Федорова Ек.
	//При проведении Возврата от покупателя (комиссия) заполняется измерение Заказ, даже если по договору не ведется обособленный учет по заказам.
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера Тогда
		СтрокаДокумента.ЗаказСписания = Неопределено;
	КонецЕсли;
	
	Движение.Заказ  				= ?(НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);
	
	Движение.СтатусПартии	    = Строка.СтатусПартии;
	
	// Новая номенклатура-для комплектации: меняется все
	Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.НоменклатураНовая) Тогда
		
		Движение.Номенклатура= СтрокаДокумента.НоменклатураНовая;
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
		Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;
		
		// Комплект(ующее) приходуется как купленный товар
		Движение.СтатусПартии	= Перечисления.СтатусыПартийТоваров.Купленный;
		
	КонецЕсли;
	
	// Вспомогательные поля для списания
	Движение.ДокументОприходованияДата	= Строка.ДокументОприходованияДата;
	
	// Ресурсы
	Движение.Количество	= Строка.Количество;
	Движение.Стоимость	= Строка.Стоимость;
	
	// Новое количество-для комплектации
	
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
		///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////

		///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////
	///////////////////

	Если Строка.КоличествоПоступление<>0 Тогда 
		Движение.Количество	= Строка.КоличествоПоступление;
	КонецЕсли;
	
	// Оприходование может быть с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость		= Строка.СтоимостьПоступление;
		
	КонецЕсли;

	
	// Реквизиты
	Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
						
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];
	
КонецПроцедуры

// Поступление товаров отданных
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеПереданныхУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижение("ПартииТоваровПереданные"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период                 = Строка.Период;
	Движение.Регистратор            = Строка.Регистратор;
	Движение.Активность				= Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	Движение.Номенклатура 			= Строка.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	Движение.СтатусПартии	    = Строка.СтатусПартии;
	Движение.СтатусПередачи		= СтрокаДокумента.СтатусПередачи;
	
	Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;
	Движение.ДокументПередачи   	= СтрокаДокумента.ДокументПередачи;
	
	// Вспомогательные поля для списания
	Движение.ДокументОприходованияДата	= Строка.ДокументОприходованияДата;
	
	// Ресурсы
	Движение.Количество				= Строка.Количество;
		
	Движение.Стоимость	= Строка.Стоимость;
	
	// Оприходование с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость			= Строка.СтоимостьПоступление;
		
	КонецЕсли;
	
	// Реквизиты
	Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
						
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровПереданные"+Учет];

КонецПроцедуры

// Поступление товаров на постоянные затраты
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Строка)

	Учет = "Упр";
	
	Движение = ДобавитьДвижение("Затраты"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность = Истина;
	
	//Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	Движение.Подразделение 			= СтрокаДокумента.Подразделение;
	Движение.НоменклатурнаяГруппа 	= СтрокаДокумента.НоменклатурнаяГруппа;
	
	Движение.СтатьяЗатрат 			= СтрокаДокумента.СтатьяЗатрат;
	
	Движение.Заказ  				= ?(НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);
	
	//Адиянов<<< Начало СтатьяЗатратУпр
	Попытка 
		Движение.СтатьяЗатратУпр        = СтрокаДокумента.СтатьяЗатратУпр;
	Исключение
	КонецПопытки;
	//Адиянов>>> Конец  СтатьяЗатратУпр
	
	// Ресурсы
	Движение.Сумма				    = Строка.Стоимость;
	
	// Реквизиты
	//Движение.КодОперации		    = СтрокаДокумента.КодОперацииЗатраты; 
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет];

КонецПроцедуры

// Общая процедура поступления: маршрутизирует алгоритм поступления
//
Процедура ВыполнитьКорДвижениеУпр(СписаноИз, ПриходоватьВ, СтрокаДокумента, СтруктураПараметров, Движение)
			
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		// Общие для всех учетов алгоритмы
		Если ПриходоватьВ = "НаСкладах" Тогда
			
			ПоступлениеНаСкладУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "Переданные" Тогда
			
			ПоступлениеПереданныхУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "Затраты" Тогда
			
			СписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "СебестоимостьПродаж" Тогда
			
			СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение);
		ИначеЕсли ПриходоватьВ = "СтоимостьОСПриПринятииКУчету" Тогда
			
			СписаниеНаАмортизациюУпр(СтрокаДокумента, СтруктураПараметров, Движение);
		ИначеЕсли ПриходоватьВ = "ЗатратыПриПринятииКУчету" Тогда
			
			СписаниеНаЗатратыОСУпр(СтрокаДокумента, СтруктураПараметров, Движение);
				
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Общие

// Выполняет корреспондирующее движение, связанное со списанием партии
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьКорДвижение(РегистрУчета, СтрокаДокумента, СтруктураПараметров, Движение)
	
	ВыполнитьКорДвижениеУпр(РегистрУчета, ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров, СтрокаДокумента.СтатьяЗатрат), СтрокаДокумента, СтруктураПараметров, Движение);
	
	// Сюда можно добавить вызов процедур для выполнения движений по другим учетам
	
КонецПроцедуры // ВыполнитьКорДвижение()

////////////////////////////////////////////////////////////////////////////////
// СПЕЦИФИЧЕСКИЕ ПРОЦЕДУРЫ ДВИЖЕНИЯ ПАРТИЙ ДЛЯ ОПРЕДЕЛЕННЫХ ВИДОВ ДОКУМЕНТОВ

// Возвращает предыдущий документ, которым реализовался тот же товар
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Предыдущий документ реализации
//
Функция ПредыдущийДокументРеализации(СтрокаДокумента)
	
	
	// Ищем документ того же типа, выписанный с того же склада
	ТипДок = ТипЗнч(СтрокаДокумента.Регистратор);
	
	МетаДок = Метаданные.НайтиПоТипу(ТипДок);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписанныеТовары.Регистратор
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|
	|ГДЕ
	|	СписанныеТовары.Номенклатура = &Номенклатура И
	|	СписанныеТовары.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры И
	|	СписанныеТовары.СерияНоменклатуры = &СерияНоменклатуры И
	|	СписанныеТовары.Склад = &Склад И
	|	СписанныеТовары.Количество >= &Количество И
	|	СписанныеТовары.Период < &Период И
	|	(СписанныеТовары.Регистратор ССЫЛКА Документ."+МетаДок.Имя+")
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписанныеТовары.Период УБЫВ");
	
	Запрос.УстановитьПараметр("Номенклатура", СтрокаДокумента.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
	Запрос.УстановитьПараметр("Склад", СтрокаДокумента.Склад);
	Запрос.УстановитьПараметр("Количество", СтрокаДокумента.Количество);
	Запрос.УстановитьПараметр("Период", СтрокаДокумента.Период);
	Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.Регистратор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Регистратор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПредыдущийДокументРеализации()

// Поступление товаров по возврату от покупателя
//
Процедура ПоступлениеВозвратОтПокупателя(СтрокаДокумента, СтруктураПараметров)
	
	ДокументПартии = СтрокаДокумента.ВозвратОтПокупателяДокументПартии;
	
	Если ЗначениеНеЗаполнено(ДокументПартии) Тогда
		
		// Если документ - отчет о розничных продажах, то в нем не указывается исх документ продажи, а выбирается ближайший предыдущий:
		
		Если ТипЗнч(СтрокаДокумента.Регистратор) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			
			ДокументПартии = ПредыдущийДокументРеализации(СтрокаДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если не найден, тогда 
	// Движения не зависят от предыдущих документов, а значит должны выполняться сразу
	Если ЗначениеНеЗаполнено(ДокументПартии) Тогда
		Возврат;
	КонецЕсли;
	
	
	КачествоНовый = Справочники.Качество.Новый;
	
	Учет = "Упр";
	
	// Если указан партиеобразующий документ, данные берутся из него
	Если Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения.ДокументОприходования.Тип.СодержитТип(ТипЗнч(ДокументПартии)) Тогда
		
		НаборОснование = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
		НаборОснование.Отбор.Регистратор.Установить(ДокументПартии);
		НаборОснование.Прочитать();
		ТаблицаЗаписейОснования = НаборОснование.Выгрузить();
		
		
		// Добавим вспомогательное поле ДокументПоставкиДата
		ТаблицаЗаписейОснования.Колонки.Добавить("ДокументОприходованияДата", ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
		
		СтруктураПоиска = Новый Структура;
		
		СтруктураПоиска.Вставить("Номенклатура", СтрокаДокумента.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
		
		КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
		
		НайденныеСтроки = ТаблицаЗаписейОснования.НайтиСтроки(СтруктураПоиска);
		
		СебеСтоимость = 0;
		СтоимостьПоступления = 0;
		КоличествоПоступления = 0;
		ДокументПартииДата = '00010101';
		Для Каждого СтрокаПоступления Из НайденныеСтроки Цикл
			СтоимостьПоступления = СтоимостьПоступления + СтрокаПоступления.Стоимость;
			КоличествоПоступления = КоличествоПоступления + СтрокаПоступления.Количество;
			
			// дату оприходования определяем из набора записей
			ДокументПартииДата = СтрокаПоступления.Период;
		КонецЦикла;
		
		Если КоличествоПоступления <> 0 Тогда
			
			Себестоимость = Окр(СтоимостьПоступления * СтрокаДокумента.Количество/КоличествоПоступления, 2, РежимОкругления.Окр15как20);
			
			
			Движение = ДобавитьДвижение("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
			
			// Свойства
			Движение.Период      = СтрокаДокумента.Период;
			Движение.Регистратор = СтрокаДокумента.Регистратор;
			Движение.Активность = Истина;
			
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			// Измерения
			Если УчетнаяПолитика("ВестиПартионныйУчетПоСкладам", Учет, СтрокаДокумента.Организация, СтруктураПараметров) Тогда
				
				Движение.Склад	 	= СтрокаДокумента.Склад;
				
				// Если задан новый склад поступления, подставляем его
				Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.СкладПолучатель) Тогда
					Движение.Склад	 	= СтрокаДокумента.СкладПолучатель;
					
				КонецЕсли;
				
			Иначе
				
				Движение.Склад      = Неопределено;
			КонецЕсли;
			
			Движение.Номенклатура 			= СтрокаДокумента.Номенклатура;
			
			
			Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатуры;
			
			// Если задана новыя характеристика, подставляем ее
			Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Тогда
				
				Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
			КонецЕсли;
			
			
			Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатуры;
			
			// Если задана новыя серия, подставляем ее
			Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.СерияНоменклатурыНовая) Тогда
				
				Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
			КонецЕсли;
			
			Движение.ДокументОприходования	= ДокументПартии;
			
			Движение.СтатусПартии	    = Перечисления.СтатусыПартийТоваров.Купленный;
			
			Движение.Качество = СтрокаДокумента.Качество;
			
			Если ЗначениеНеЗаполнено(Движение.Качество) Тогда
				Движение.Качество = КачествоНовый;
			КонецЕсли;
			
			// Вспомогательные поля для списания
			Движение.ДокументОприходованияДата	= ДокументПартииДата;
			
			// Ресурсы
			Движение.Количество				= СтрокаДокумента.Количество;
			Движение.Стоимость				= Себестоимость;
			
			// Реквизиты
			Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
			
			// Списание на себестоимость продаж (сторно)
			Если ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров) = "СебестоимостьПродаж" Тогда
				
				СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение, "Сторно");
				
			КонецЕсли;
			
		Иначе
			
			СообщитьОбОшибке("Управленческий учет. Документ " + СтрокаДокумента.Регистратор + ", строка :" + СтрокаДокумента.НомерСтроки + Символы.ПС
			+ "Не найдено поступление " + СтрокаДокумента.Количество + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ", по документу партии " + ДокументПартии);
			
			СтруктураПараметров.Вставить("Отказ", Истина);
			
		КонецЕсли;
		
		// Если указан документ списания, данные о партиях берутся из него
	Иначе
		
		НаборОснование = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
		
		НаборОснование.Отбор.Регистратор.Установить(ДокументПартии);
		НаборОснование.Прочитать();
		ТаблицаЗаписейОснования = НаборОснование.Выгрузить();
				
		
		// Перед поиском возвращенных партий набор следует свернуть для того, чтобы не учитывать 
		// отсторнированные движения по партиям приходных ордеров
		Измерения = "Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ДокументОприходования, Склад, Заказ";
		Ресурсы = "Количество, Стоимость";
		
		Измерения = Измерения + ", СтатусПартии";
		
		ТаблицаЗаписейОснования.Свернуть(Измерения, Ресурсы);
		
		// Добавим вспомогательное поле ДокументПоставкиДата
		ТаблицаЗаписейОснования.Колонки.Добавить("ДокументОприходованияДата", ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
		
		СтруктураПоиска = Новый Структура;
		
		СтруктураПоиска.Вставить("Номенклатура", СтрокаДокумента.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
		
		КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
		
		НайденныеСтроки = ТаблицаЗаписейОснования.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.Количество <=0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			Движение = ДобавитьДвижение("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
			
			// Свойства
			Движение.Период      = СтрокаДокумента.Период;
			Движение.Регистратор = СтрокаДокумента.Регистратор;
			Движение.Активность = Истина;
			
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			// Измерения
			Если УчетнаяПолитика("ВестиПартионныйУчетПоСкладам", Учет, СтрокаДокумента.Организация, СтруктураПараметров) Тогда
				
				Движение.Склад	 	= СтрокаДокумента.Склад;
				
				// Если задан новый склад поступления, подставляем его
				Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.СкладПолучатель) Тогда
					Движение.Склад	 	= СтрокаДокумента.СкладПолучатель;
					
				КонецЕсли;
				
			Иначе
				
				Движение.Склад      = Неопределено;
			КонецЕсли;
			
			Движение.Номенклатура 			= СтрокаДокумента.Номенклатура;
			
			Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
				Движение.СтатусПартии = Строка.СтатусПартии;
			КонецЕсли;
			
			Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатуры;
			
			// Если задана новыя характеристика, подставляем ее
			Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Тогда
				
				Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
			КонецЕсли;
			
			
			Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатуры;
			
			// Если задана новыя серия, подставляем ее
			Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.СерияНоменклатурыНовая) Тогда
				
				Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
			КонецЕсли;
			
			Движение.ДокументОприходования	= Строка.ДокументОприходования;
			//Движение.Заказ  				= ?(НЕ ЗначениеНеЗаполнено(Строка.Заказ), Строка.Заказ, Неопределено);
			
			Движение.Качество = СтрокаДокумента.Качество;
			
			Если ЗначениеНеЗаполнено(Движение.Качество) Тогда
				Движение.Качество = КачествоНовый;
			КонецЕсли;
			
			// Вспомогательные поля для списания
			Движение.ДокументОприходованияДата	= СтрокаДокумента.Регистратор.Дата;
			
			// Ресурсы 
			Движение.Количество	= Окр(Строка.Количество * КоэффСписания,3,1);
			Движение.Стоимость	= Окр(Строка.Стоимость * КоэффСписания,2,1);
			
			// Реквизиты
			Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
			
			Если Движение.Количество < КоличествоОсталосьПогасить Тогда
				КоэффПоступления = Движение.Количество / КоличествоОсталосьПогасить;
			Иначе
				КоэффПоступления = 1;
			КонецЕсли;
			
			// Сумма выручки в валюте документа - для отчета комитенту
			Движение.СуммаВыручки = Окр(СтрокаДокумента.СуммаЗадолженности*КоэффПоступления, 2);
			// Валюты и курсы - для пересчета
			Движение.ВалютаДокумента = СтрокаДокумента.ВалютаДокумента;
			Движение.КурсДокумента = СтрокаДокумента.КурсДокумента;
			Движение.КратностьДокумента = СтрокаДокумента.КратностьДокумента;
			
			СтрокаДокумента.СуммаЗадолженности = СтрокаДокумента.СуммаЗадолженности - Движение.СуммаВыручки;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
			
			Строка.Количество = Строка.Количество - Движение.Количество;
			Строка.Стоимость  = Строка.Стоимость  - Движение.Стоимость;
			
			// Списание на себестоимость продаж (сторно)
			Если ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров) = "СебестоимостьПродаж" Тогда
				
				СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение, "Сторно");
				
			КонецЕсли;
			
			ВыполнитьДвижениеВозвратаНДСПокупкиНДСПартии(СтрокаДокумента, СтруктураПараметров, Движение, ДокументПартии);
			
		КонецЦикла; 
		Если КоличествоОсталосьПогасить > 0 И НЕ (Учет="Нал" ) Тогда
			
			СообщитьОбОшибке("Управленческий учет. Документ " + СтрокаДокумента.Регистратор + ", строка :" + СтрокаДокумента.НомерСтроки + Символы.ПС
			+ "Не найдено " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ " списанного по документом " + ДокументПартии
			);
			
			СтруктураПараметров.Вставить("Отказ", Истина);
			
		КонецЕсли; 
		
		// по ПартииТоваровПереданные
		НаборПереданные = РегистрыНакопления.ПартииТоваровПереданные.СоздатьНаборЗаписей();
		
		НаборПереданные.Отбор.Регистратор.Установить(ДокументПартии);
		НаборПереданные.Прочитать();
		ТаблицаЗаписейПереданных = НаборПереданные.Выгрузить();
		
		Если ТаблицаЗаписейПереданных.Количество() > 0 Тогда
			
			СтруктураПоискаПереданных = Новый Структура;
			СтруктураПоискаПереданных.Вставить("Номенклатура", СтрокаДокумента.Номенклатура);
			СтруктураПоискаПереданных.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
			
			СтруктураПоискаПереданных.Вставить("СтатусПередачи", СтрокаДокумента.ДопустимыйСтатусПередачи);

			КоличествоОсталосьПогасить = СтрокаДокумента.Количество;		
			НайденныеСтроки = ТаблицаЗаписейПереданных.НайтиСтроки(СтруктураПоискаПереданных);			
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				Если КоличествоОсталосьПогасить <=0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество <=0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				Движение = ДобавитьДвижение("ПартииТоваровПереданные"+Учет, СтруктураПараметров);
				
				// Свойства
				Движение.Период      = СтрокаДокумента.Период;
				Движение.Регистратор = СтрокаДокумента.Регистратор;
				Движение.Активность = Истина;			
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;						
				Движение.Номенклатура 			= СтрокаДокумента.Номенклатура;			
				Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатуры;			
				Движение.ДокументОприходования	= Строка.ДокументОприходования;
				Движение.ДокументПередачи = Строка.ДокументПередачи;
				Движение.ДоговорКонтрагента = Строка.ДоговорКонтрагента;

				Движение.СтатусПартии	    = Строка.СтатусПартии;
				Движение.СтатусПередачи	    = Строка.СтатусПередачи;

				// Вспомогательные поля для списания
				Движение.ДокументОприходованияДата	= СтрокаДокумента.Регистратор.Дата;
				
				// Ресурсы 
				Движение.Количество	= Окр(Строка.Количество * КоэффСписания,3,1);
				Движение.Стоимость	= Окр(Строка.Стоимость * КоэффСписания,2,1);
				
				// Реквизиты
				Движение.КодОперации		= Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера;
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
				
				Строка.Количество = Строка.Количество - Движение.Количество;
				Строка.Стоимость  = Строка.Стоимость  - Движение.Стоимость;
				
			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0	
				//+++ 29.09.2016 - крышки - можно без партий... для Всех! и ничего не пишем!
				И СтрокаДокумента.Номенклатура.ВидТовара <> перечисления.ВидыТоваров.КрышкиНаклейки 
				Тогда
					
				СообщитьОбОшибке("Управленческий учет. Документ " + СтрокаДокумента.Регистратор + ", строка :" + СтрокаДокумента.НомерСтроки + Символы.ПС
				+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
				+ " товара " + "(" + СтрокаДокумента.Номенклатура.Код + ") " + СтрокаДокумента.Номенклатура
				+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
				+ ", по договору " + СтрокаДокумента.ДоговорКонтрагента
				);
					
				СтруктураПараметров.Вставить("Отказ", Истина);
				Если ПараметрыСеанса.ПроведениеПоПартиямДатаПервойОшибки = Дата(1,1,1) Тогда
					ПараметрыСеанса.ПроведениеПоПартиямДатаПервойОшибки = СтрокаДокумента.Регистратор.Дата;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
		
	КонецЕсли;

КонецПроцедуры

// Снятие резерва по заказам покупателей при закрытии заказов
//
Процедура СнятиеРезервовПоЗаказамПокупателей(СтрокаДокумента, СтруктураПараметров)
	
	Учет = "Упр";
	// Партии для данного учета
	ТаблицаПартий   = СтруктураПараметров["ТаблицаПартииТоваровНаСкладах" + Учет] ;
	
	// Отбор значений партий
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("Заказ", СтрокаДокумента.ЗаказПартии);
	СтруктураОтбора.Вставить("Номенклатура", СтрокаДокумента.Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
	
	НайденныеСтроки = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаПартии Из НайденныеСтроки Цикл 
		
		Если СтрокаПартии.Количество=0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим новую строку
		
		// 1. Списание
		Движение = ДобавитьДвижение("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
		
		// Свойства
		Движение.Период 				= СтрокаДокумента.Период;
		Движение.Регистратор 			= СтрокаДокумента.Регистратор;
		Движение.Активность 			= Истина;
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.Номенклатура 			= СтрокаПартии.Номенклатура;
		Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
		Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;
		Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;
		Движение.Склад 			        = СтрокаПартии.Склад;
		Движение.Заказ  				= СтрокаПартии.Заказ;
		Движение.Качество  				= СтрокаПартии.Качество;
		
		Движение.СтатусПартии		= СтрокаПартии.СтатусПартии;
		
		// Ресурсы 
		Движение.Количество	= СтрокаПартии.Количество;
		Движение.Стоимость	= СтрокаПартии.Стоимость;
		
		// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
		
		// ... списания по стратегии FIFO, LIFO
		Движение.ДокументОприходованияДата  	 	= СтрокаПартии.ДокументОприходованияДата;
		
		// Реквизиты
		Движение.Подразделение	        = СтрокаДокумента.Подразделение;
		
		Движение.КодОперации			= СтрокаДокумента.КодОперацииПартииТоваров;
		
		СтрокаПартии.Количество = 0;
		СтрокаПартии.Стоимость  = 0;
		
		Строка = Движение;
		
		
		Движение = ДобавитьДвижение("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
		
		// Свойства
		Движение.Период 				= СтрокаДокумента.Период;
		Движение.Регистратор 			= СтрокаДокумента.Регистратор;
		Движение.Активность 			= Истина;
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.Номенклатура 			= Строка.Номенклатура;
		Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
		Движение.СерияНоменклатуры 		= Строка.СерияНоменклатуры;
		Движение.ДокументОприходования	= Строка.ДокументОприходования;
		Движение.Склад 			        = Строка.Склад;
		Движение.Заказ  				= Неопределено;
		Движение.Качество  				= Строка.Качество;
		
		Движение.СтатусПартии		= Строка.СтатусПартии;
		
		// Ресурсы 
		Движение.Количество	= Строка.Количество;
		Движение.Стоимость	= Строка.Стоимость;
		
		// Вспомогательные поля для списания
		Движение.ДокументОприходованияДата	= Строка.ДокументОприходованияДата;
		
		// Реквизиты
		Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
		
		Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];
		
		
	КонецЦикла;
		
КонецПроцедуры // СнятиеРезервовПоЗаказамПокупателей()

// Списание партий по расходным ордерам
//
// Параметры:
//	Нет.
//
Процедура СписаниеПартийРасходнымОрдером(СтрокаДокумента, СтруктураПараметров)
	
	// Общая часть запроса
	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""СписаниеПартийРасходнымОрдером1"" КАК QuieryId ";
	
	Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Ресурс.Имя;
		
	КонецЦикла; 
	
	Запрос.Текст = 	Запрос.Текст + ",
	|	Регистратор,
	|	Период,
	|	НомерСтроки
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|
	|ГДЕ
	//|	Период Между &ДатаНач И &ДатаКон
	|	Регистратор=&Регистратор
	|	И Номенклатура=&Номенклатура
	|	И ХарактеристикаНоменклатуры=&ХарактеристикаНоменклатуры
	|";
	
	Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.ОсновнойДокумент);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаДокумента.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
	
	ТабИсхДок=Запрос.Выполнить().Выгрузить();
	
	// Если записей по исх. документу нет
	Если ТабИсхДок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""СписаниеПартийРасходнымОрдером2"" КАК QuieryId,
	|	Строки.Регистратор,
	|	Строки.Период,
	|	Строки.НомерСтроки,
	|	СУММА(Строки.Количество) КАК Количество
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|
	|ГДЕ
	|	Строки.Период МЕЖДУ &ДатаНач И &ДатаКон И
	|	Строки.ОсновнойДокумент = &ОсновнойДокумент И
	|	Строки.Номенклатура = &Номенклатура И
	|	Строки.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры И
	|	Строки.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Строки.Регистратор,
	|	Строки.Период,
	|	Строки.НомерСтроки";
	
	Запрос.УстановитьПараметр("ДатаНач", ТабИсхДок[0].Период);
	Запрос.УстановитьПараметр("ДатаКон", СтрокаДокумента.Период);
	Запрос.УстановитьПараметр("ОсновнойДокумент", СтрокаДокумента.ОсновнойДокумент);
	Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.Регистратор);
	
	ВыборкаРасхОрд=Запрос.Выполнить().Выбрать();
	
	
	Для Сч=1 По 2 Цикл
		
		КоличествоОсталосьПогасить = 0;
		Если Сч=1 Тогда
			
			// Если есть другие ордера, сперва погасим их
			Если ВыборкаРасхОрд.Следующий() Тогда
				КоличествоОсталосьПогасить = ВыборкаРасхОрд.Количество;
			КонецЕсли;
			
		ИначеЕсли Сч=2 Тогда
			КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
		КонецЕсли;
		
		Для Каждого Строка Из ТабИсхДок Цикл
				
			// Заполнение параметров для движения по реализованным товарам
			СтрокаДокумента.ВалютаДокумента    = Строка.ВалютаДокумента;
			СтрокаДокумента.КурсДокумента      = Строка.КурсДокумента;
			СтрокаДокумента.КратностьДокумента = Строка.КратностьДокумента;
			
			// Если второй проход, тогда
			Если Сч=2 Тогда
				
				// Во второй проход списываем партию
				СписаниеПартий(Строка, СтруктураПараметров, "НаСкладах");
			КонецЕсли;
			
			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.Количество <=0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Окр(КоэффСписания * Строка.Количество, 2);
			
			Строка.Количество             = Строка.Количество - Окр(КоэффСписания * Строка.Количество, 2);
			Строка.СтоимостьПоступление   = Строка.СтоимостьПоступление - Окр(КоэффСписания * Строка.СтоимостьПоступление, 2);
			Строка.СтоимостьПоступлениеБУ = Строка.СтоимостьПоступлениеБУ - Окр(КоэффСписания * Строка.СтоимостьПоступлениеБУ, 2);
			Строка.СуммаНДС               = Строка.СуммаНДС - Окр(КоэффСписания * Строка.СуммаНДС, 2);
			Строка.СуммаЗадолженности     = Строка.СуммаЗадолженности - Окр(КоэффСписания * Строка.СуммаЗадолженности, 2);
			Строка.КорВалютнаяСуммаЗадолженностиБУ = Строка.КорВалютнаяСуммаЗадолженностиБУ - Окр(КоэффСписания * Строка.КорВалютнаяСуммаЗадолженностиБУ, 2);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // СписаниеПартийРасходнымОрдером()

////////////////////////////////////////////////////////////////////////////////
// ЗАПРОСЫ, ВОЗВРАЩАЮЩИЕ ТАБЛИЦЫ ОСТАТКОВ

// Упр

// Формирует запрос по остаткам партий товаров на конец рабочего периода
//
// Параметры:
//  МоментКон      - момент времени, на которой возвращаются остатки.
//  МассивНоменклатуры - массив номенклатуры, по которой возвращаются остатки.
//
// Возвращаемое значение:
//	Результат запроса, выгруженный в таблицу значений.
//
Функция ПолучитьТаблицуПартийНаСкладахУпр(МоментКон, Отбор = Неопределено) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МоментКон", МоментКон);
	
	Текст = 
	"ВЫБРАТЬ
	|	""ПолучитьТаблицуПартийНаСкладах"" КАК QuieryId,
	|	ДокументОприходования,
	|	ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	Номенклатура,
	|	Склад,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	Качество, 
	|	Заказ, 
	|	КоличествоОстаток КАК Количество,
	|	СтоимостьОстаток КАК Стоимость ";
	
	Текст = Текст + ", СтатусПартии";
	
	Текст = Текст + "
	|ИЗ РегистрНакопления.";
	
	Текст = Текст + "ПартииТоваровНаСкладах";
	
	Текст = Текст + ".Остатки(&МоментКон, ";
	
	ТекстОтбор = "";
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		
		Для Каждого Элемент Из Отбор Цикл
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				ТекстОтбор = ТекстОтбор + " И " + Элемент.Ключ + " В (&Отбор"+Элемент.Ключ+")";
			Иначе
				ТекстОтбор = ТекстОтбор + " И " + Элемент.Ключ + " = &Отбор"+Элемент.Ключ;
			КонецЕсли;
			Запрос.УстановитьПараметр("Отбор"+Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	
	КонецЕсли; 
		
	Запрос.Текст = 	Текст + Сред(ТекстОтбор, 3) + ")";
	
	Возврат Запрос.Выполнить().Выгрузить();
 
КонецФункции

// Формирует запрос по остаткам переданных партий товаров на конец рабочего периода
//
// Параметры:
//  МоментКон      - момент времени, на которой возвращаются остатки.
//  МассивНоменклатуры - массив номенклатуры, по которой возвращаются остатки.
//
// Возвращаемое значение:
//	Результат запроса, выгруженный в таблицу значений.
//
Функция ПолучитьТаблицуПартийПереданныхУпр(МоментКон, Отбор = Неопределено) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("МоментКон", МоментКон);

	Текст = 
	"ВЫБРАТЬ
	|	""ПолучитьТаблицуПартийПереданных"" КАК QuieryId,
	|	ДоговорКонтрагента,
	|	ДокументПередачи,
	|	ДокументОприходования,
	|	ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	КоличествоОстаток КАК Количество,
	|	СтоимостьОстаток КАК Стоимость ";
	
	Текст = Текст + ", СтатусПартии, СтатусПередачи";
	
	Текст = Текст + "
	|ИЗ РегистрНакопления.";
	
	Текст = Текст + "ПартииТоваровПереданные";
	
	Текст = Текст + ".Остатки(&МоментКон, ";
	
	ТекстОтбор = "";
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		
		Для Каждого Элемент Из Отбор Цикл
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				ТекстОтбор = ТекстОтбор + " И " + Элемент.Ключ + " В (&Отбор"+Элемент.Ключ+")";
			Иначе
				ТекстОтбор = ТекстОтбор + " И " + Элемент.Ключ + " = &Отбор"+Элемент.Ключ;
			КонецЕсли;
			Запрос.УстановитьПараметр("Отбор"+Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	
	КонецЕсли; 
		
	Запрос.Текст = 	Текст + Сред(ТекстОтбор, 3) + ")";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Остатки партий на складах по упр.учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиПартийНаСкладахУпр(СтруктураПараметров, МоментКон, МассивНоменклатуры)
	
	// Таблицы остатков партий
	СтруктураПараметров.Вставить("ТаблицаПартииТоваровНаСкладахУпр", Новый ТаблицаЗначений);
	
	СтруктураПараметров.Вставить("ТаблицаПартииТоваровНаСкладахУпр", ПолучитьТаблицуПартийНаСкладахУпр(МоментКон, Новый Структура("Номенклатура", МассивНоменклатуры)));
	
КонецПроцедуры // ПолучитьОстаткиПартийНаСкладахУпр()

// Остатки партий на складах по упр.учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиПартийПереданныхУпр(СтруктураПараметров, МоментКон, МассивНоменклатуры)
	
	// Таблицы остатков партий
	СтруктураПараметров.Вставить("ТаблицаПартииТоваровПереданныеУпр", Новый ТаблицаЗначений);
	
	СтруктураПараметров.Вставить("ТаблицаПартииТоваровПереданныеУпр", ПолучитьТаблицуПартийПереданныхУпр(МоментКон, Новый Структура("Номенклатура", МассивНоменклатуры)));
	
КонецПроцедуры // ПолучитьОстаткиПартийПереданныхУпр()

// Получение остатков по упр. учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиУпр(СтруктураПараметров, ТаблицаСписания, МоментКон, МассивНоменклатуры)
	
	// По партионному учету остатки берутся из двух регистров
	ЕстьНаСкладах=Ложь;
	ЕстьПереданные=Ложь;
	Для Каждого СтрокаСписания Из ТаблицаСписания Цикл
		Источник=ПолучитьИсточникПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров);
		
		Если Источник = "НаСкладах" Тогда
			ЕстьНаСкладах=Истина;
		ИначеЕсли Источник = "Переданные" Тогда
			ЕстьПереданные=Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьНаСкладах Тогда
		
		ПолучитьОстаткиПартийНаСкладахУпр(СтруктураПараметров, МоментКон, МассивНоменклатуры);
		
	КонецЕсли;
	
	Если ЕстьПереданные Тогда
		
		ПолучитьОстаткиПартийПереданныхУпр(СтруктураПараметров, МоментКон, МассивНоменклатуры);
		
	КонецЕсли;
	
	// По учету НДС остатки будут списываться вместе с партиями
	ПолучитьОстаткиПоУчетуНДС(СтруктураПараметров, ТаблицаСписания, МоментКон, МассивНоменклатуры)
	
КонецПроцедуры // ПолучитьОстаткиУпр()

// Общие

// Возвращает таблицу документов
//
// Параметры
//  ДатаНач,
//	ДатаНач         – даты начала и конца периода
//                 <продолжение описания параметра>
//  МассивНоменклатуры – массив для ограничения номенклатуры
//  МассивХарактеристикНоменклатуры – массив для ограничения номенклатуры
//  МассивСерийНоменклатуры – массив для ограничения номенклатуры
//
// Возвращаемое значение:
//   Таблица строк документов
//
Функция ПолучитьТаблицуСтрокДокументов(ДокументСписания=Неопределено, ДатаНач=Неопределено, ДатаКон=Неопределено, МассивНоменклатуры=Неопределено)
	
	// Общая часть запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСписания", ДокументСписания);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""ПолучитьТаблицуСтрокДокументов"" КАК QuieryId ";
	
	Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Ресурс.Имя;
		
	КонецЦикла; 
	
	Запрос.Текст = 	Запрос.Текст + ",
	|	Регистратор,
	|	Период,
	|	НомерСтроки
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|
	|ГДЕ
	|	1=1
	|";
	
	Если ДатаНач <> Неопределено Тогда
	
		Запрос.Текст = Запрос.Текст+ "
		|	И Строки.Период МЕЖДУ &ДатаНач И &ДатаКон ";
	
	КонецЕсли; 
	
	Если ДокументСписания <> Неопределено Тогда
	
		Запрос.Текст = Запрос.Текст+ "
		|	И Строки.Регистратор = &ДокументСписания";
	
	КонецЕсли; 
	
	Если МассивНоменклатуры<>Неопределено Тогда
		
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);

		Запрос.Текст = Запрос.Текст+ "
		|	И Строки.Номенклатура В (&МассивНоменклатуры)";
	
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();

КонецФункции

// Добавление остатков по партионному и остальным видам учетов
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон, МассивНоменклатуры)
	
	ПолучитьОстаткиУпр(СтруктураПараметров, ТаблицаСписания, МоментКон, МассивНоменклатуры)
	
КонецПроцедуры // ПолучитьОстаткиОстальные()

/////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПОДСИСТЕМЫ УЧЕТА НДС

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// Формирует движения, отражающие возврат от покупателя в регистре НДСПродажи
Процедура ВыполнитьДвижениеВозвратаНДСПокупкиНДСПартии(СтрокаДокумента, СтруктураПараметров, Движение, ВозвратОтПокупателяДокументПартии)
	
	СтрокаВозврата = СтрокаДокумента;

	// Возврат купленных товаров
	Если Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный Тогда
	
		Если ТипЗнч(ВозвратОтПокупателяДокументПартии) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		 ИЛИ ТипЗнч(ВозвратОтПокупателяДокументПартии) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			// Нужно сделать движения возврата по регистрам НДСПартииТоваров и НДСПокупки, т.к. указан документ по которому осуществлялась отгрузка
			// а при проведении документа отгрузки могли быть сформированы движения по этим регистрам
			
			// Сначала отражаем движения прихода (обратные отгрузке) в регистре "НДСПартииТоваров"
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументРеализации", ВозвратОтПокупателяДокументПартии);
			Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
			
			Запрос.Текст = "ВЫБРАТЬ
						   |	НДСПартииТоваров.Поставщик,
						   |	НДСПартииТоваров.СчетФактура КАК СчетФактура,
						   |	НДСПартииТоваров.СтавкаНДС КАК СтавкаНДС,
						   |	НДСПартииТоваров.ДокументОприходования,
						   |	НДСПартииТоваров.Стоимость КАК СтоимостьПартии,
						   |	НДСПартииТоваров.НДС КАК НДСПартии,
						   |	НДСПартииТоваров.Количество КАК Количество,
						   |	НДСПартииТоваров.Номенклатура,
						   |	НДСПартииТоваров.Организация
						   |ИЗ
						   |	РегистрНакопления.НДСПартииТоваров КАК НДСПартииТоваров
						   |
						   |ГДЕ
						   |	НДСПартииТоваров.Регистратор = &ДокументРеализации И
						   |	НДСПартииТоваров.ВидДвижения = &ВидДвижения";
							
			СтрРезультатов = Запрос.Выполнить().Выбрать();
			
			Пока СтрРезультатов.Следующий() Цикл
				
				Если (СтрРезультатов.Количество <> 0) Тогда
					
					// Формируем движение, отражающее приход возвращаемого товара по регистру "НДСПартии"
					СтрокаДвижения = ДобавитьДвижение("НДСПартииТоваров", СтруктураПараметров);
					
					СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Приход;
					СтрокаДвижения.Период      = СтруктураПараметров.Период;
					СтрокаДвижения.Регистратор = СтруктураПараметров.Регистратор;
					
					СтрокаДвижения.Организация  = СтрокаДокумента.Организация;
					СтрокаДвижения.Номенклатура = СтрРезультатов.Номенклатура;
					СтрокаДвижения.Поставщик    = СтрРезультатов.Поставщик;
					СтрокаДвижения.СчетФактура  = СтрРезультатов.СчетФактура;
					СтрокаДвижения.СтавкаНДС    = СтрРезультатов.СтавкаНДС;
					СтрокаДвижения.ДокументОприходования = СтрРезультатов.ДокументОприходования;

					СтрокаДвижения.Количество   = СтрРезультатов.Количество;
					СтрокаДвижения.Стоимость    = СтрРезультатов.СтоимостьПартии;
					СтрокаДвижения.НДС          = СтрРезультатов.НДСПартии;
					
				КонецЕсли;
				
			КонецЦикла;
			
			
			// Если документ возврата "Отчет о розничных продажах",
			// нужно добавить движения по НДс с выручки
			Если ТипЗнч(ВозвратОтПокупателяДокументПартии) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
				
				СтрокаДвижения = ДобавитьДвижение("НДСПродажи", СтруктураПараметров);
				СтрокаДвижения.Период      = СтруктураПараметров.Период;
				СтрокаДвижения.Регистратор = СтруктураПараметров.Регистратор;
				
				СтрокаДвижения.Организация = СтрокаДокумента.Организация;
				СтрокаДвижения.Покупатель  = Неопределено; // Продажа в розницу
			    СтрокаДвижения.СчетФактура = ВозвратОтПокупателяДокументПартии;
				СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.Возврат;
				СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.Товары;
				СтрокаДвижения.Номенклатура = СтрокаДокумента.Номенклатура;
				СтрокаДвижения.СтавкаНДС    = СтрокаДокумента.СтавкаНДС;
				СтрокаДвижения.НДС          = - СтрокаДокумента.СуммаНДС;
				СтрокаДвижения.СуммаБезНДС  = - (СтрокаДокумента.СуммаЗадолженностиБУ - СтрокаДокумента.СуммаНДС);
				
				Если (УчетнаяПолитика("РозничнаяТорговляОблагаетсяЕНВД", "Нал", СтрокаДокумента.Организация, СтруктураПараметров) = Истина) Тогда
					СтрокаДвижения.ВариантРеализации = Перечисления.ВариантРеализации.ЕНВД;
				Иначе
					СтрокаДвижения.ВариантРеализации = Перечисления.ВариантРеализации.НеЕНВД;
				КонецЕсли;
			
			КонецЕсли;
			
			
			// Выполняем сторно движений выполненных в регистре "НДСПокупки" в документе реализации
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументРеализации", ВозвратОтПокупателяДокументПартии);
			Запрос.УстановитьПараметр("Организация", СтрокаДокумента.Организация);
			
			Запрос.Текст = "ВЫБРАТЬ
						   |	НДСПродажи.Организация,
						   |	НДСПродажи.ВидЦенности,
						   |	НДСПокупки.Поставщик,
						   |	НДСПокупки.СчетФактура,
						   |	НДСПокупки.Событие,
						   |	НДСПокупки.СтавкаНДС,
						   |	НДСПокупки.СуммаБезНДС КАК СуммаБезНДСПокупка,
						   |	НДСПродажи.СуммаБезНДС КАК СуммаБезНДСВыручка,
						   |	НДСПокупки.НДС КАК НДСПокупка
						   |ИЗ
						   |	РегистрНакопления.НДСПродажи КАК НДСПродажи
						   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПокупки КАК НДСПокупки
						   |		ПО НДСПродажи.Регистратор = НДСПокупки.Регистратор И НДСПродажи.ВидЦенности = НДСПокупки.ВидЦенности И НДСПродажи.ВидЦенности = НДСПокупки.ВидЦенности
						   |
						   |ГДЕ
						   |	НДСПродажи.Регистратор = &ДокументРеализации";
							
			СтрРезультатов = Запрос.Выполнить().Выбрать();
			
			Пока СтрРезультатов.Следующий() Цикл
				
				Если (СтрРезультатов.СуммаБезНДСВыручка <> 0) Тогда
					
					// Формируем движение, отражающее сторнирование событий по регистру "НДСПокупки"
					СтрокаДвижения = ДобавитьДвижение("НДСПокупки", СтруктураПараметров);
					СтрокаДвижения.Период      = СтруктураПараметров.Период;
					СтрокаДвижения.Регистратор = СтруктураПараметров.Регистратор;
					
					СтрокаДвижения.Организация  = СтрокаДокумента.Организация;
					СтрокаДвижения.ВидЦенности  = СтрРезультатов.ВидЦенности;
					СтрокаДвижения.Поставщик    = СтрРезультатов.Поставщик;
					СтрокаДвижения.СчетФактура  = СтрРезультатов.СчетФактура;
					СтрокаДвижения.Событие      = СтрРезультатов.Событие;
					СтрокаДвижения.СтавкаНДС    = СтрРезультатов.СтавкаНДС;
					
					СуммаБезНДС = СтрокаВозврата.СуммаЗадолженностиБУ + СтрокаВозврата.СуммаНДС;

					КоэффВозврата = СуммаБезНДС/СтрРезультатов.СуммаБезНДСВыручка;
					
					СтрокаДвижения.СуммаБезНДС  = - Окр(КоэффВозврата * СтрРезультатов.СуммаБезНДСПокупка, 2);
					СтрокаДвижения.НДС          = - Окр(КоэффВозврата * СтрРезультатов.НДСПокупка, 2);
			
				КонецЕсли;
					
			КонецЦикла;
			
		Иначе
			// Документ отгрузки не указан, поэтому отражать данный возврат в регистре
			// НДСПокупки не имеет смысла, а в регистре НДСПартииТоваров нужно выполнить приход
			СтрокаДвижения = ДобавитьДвижение("НДСПартииТоваров", СтруктураПараметров);
			
			СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Приход;
			СтрокаДвижения.Период      = СтруктураПараметров.Период;
			СтрокаДвижения.Регистратор = СтруктураПараметров.Регистратор;
			
			СтрокаДвижения.Организация  = СтрокаДокумента.Организация;
			СтрокаДвижения.Номенклатура = СтрокаВозврата.Номенклатура;
			
			ТипДок = ТипЗнч(ВозвратОтПокупателяДокументПартии);
			МетаДок = Метаданные.НайтиПоТипу(ТипДок);
			
			Если МетаДок <> Неопределено Тогда
				
				Если МетаДок.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
					
					Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	Поступление.ДоговорКонтрагента
					|ИЗ
					|	Документ."+МетаДок.Имя+" КАК Поступление
					|
					|ГДЕ
					|	Поступление.Ссылка = &Ссылка");
					
					Запрос.УстановитьПараметр("Ссылка", ВозвратОтПокупателяДокументПартии);
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						СтрокаДвижения.Поставщик    = СтрокаВозврата.Поставщик;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
			СтрокаДвижения.СчетФактура  = ВозвратОтПокупателяДокументПартии;
			СтрокаДвижения.СтавкаНДС    = СтрокаВозврата.СтавкаНДС;
			СтрокаДвижения.ДокументОприходования = ВозвратОтПокупателяДокументПартии;

			СтрокаДвижения.Количество   = СтрокаДокумента.Количество;
			СтрокаДвижения.Стоимость    = СтрокаДокумента.СуммаЗадолженностиБУ - СтрокаДокумента.НДС;
			СтрокаДвижения.НДС          = СтрокаДокумента.НДС;
			
		КонецЕсли;	
			
	КонецЕсли;
		
КонецПроцедуры // СформироватьДвиженияВозвратаНДСПокупкиНДСПартии()

// Возвращает таблицу текущих остатков НДС по партии товаров при сложном учете НДС
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Таблица значений
//
Функция ПолучитьТаблицуНДСПартииТоваров(МоментКон, Отбор = Неопределено) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МоментКон", МоментКон);
	
	Текст = 
	"ВЫБРАТЬ
	|	""ПолучитьТаблицуНДСПартииТоваров"" КАК QuieryId,
	|	Номенклатура,
	|	ДокументОприходования,
	|	СчетФактура,
	|	Поставщик,
	|	КоличествоОстаток КАК Количество,
	|	СтоимостьОстаток КАК Стоимость, 
	|	Организация , 
	|	НДСОстаток КАК НДС, 
	|	СтавкаНДС
	|ИЗ РегистрНакопления.НДСПартииТоваров.Остатки(&МоментКон, ";
	
	ТекстОтбор = "";
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		
		Для Каждого Элемент Из Отбор Цикл
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				ТекстОтбор = ТекстОтбор + " И " + Элемент.Ключ + " В (&Отбор"+Элемент.Ключ+")";
			Иначе
				ТекстОтбор = ТекстОтбор + " И " + Элемент.Ключ + " = &Отбор"+Элемент.Ключ;
			КонецЕсли;
			Запрос.УстановитьПараметр("Отбор"+Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	
	КонецЕсли; 
		
	Запрос.Текст = 	Текст + Сред(ТекстОтбор, 3) + ")";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуНДСПартииТоваров()

// Остатки по учету НДС
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиПоУчетуНДС(СтруктураПараметров, ТаблицаСписания, МоментКон, МассивНоменклатуры)
	
	МассивОрганизаций = ТаблицаСписания.ВыгрузитьКолонку("Организация");
	УдалитьПовторяющиесяЭлементы(МассивОрганизаций);
	УдалитьПустыеЭлементы(МассивОрганизаций);
	
	ЕстьСложныйУчетНДС = Истина;
	
	Если ЕстьСложныйУчетНДС Тогда
		
		// Получим таблицу номенклатурных групп для реализации по ставке 0% и без нДС
		
		СтруктураПараметров.Вставить("ТаблицаНДСПартииТоваров", ПолучитьТаблицуНДСПартииТоваров(МоментКон, Новый Структура("Номенклатура", МассивНоменклатуры)));
		
		МассивПартий = СтруктураПараметров.ТаблицаНДСПартииТоваров.ВыгрузитьКолонку("ДокументОприходования");
		УдалитьПовторяющиесяЭлементы(МассивПартий);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПоУчетуНДС()

// Списание НДС партий товаров по бух учету
Процедура ВыполнитьСписаниеНДСПартииТоваров(СтрокаДокумента, СтруктураПараметров, ДвижениеТовара)
			
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;

	// НДС Партии
	ТаблицаНДСПартий   = СтруктураПараметров["ТаблицаНДСПартииТоваров"] ;
	
	// Отбор значений партий
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("Номенклатура",               ДвижениеТовара.Номенклатура);
	СтруктураОтбора.Вставить("Организация",                СтрокаДокумента.Организация);
	
	НайденныеСтроки = ТаблицаНДСПартий.НайтиСтроки(СтруктураОтбора);
	
	// Найденные строки перенесем в таблицу значений, которую нужно отсортировать в соответствии со стратегией списания
	ТаблицаОстатки = Новый ТаблицаЗначений;
	
	// Добавим колонку с индексом
	ТаблицаОстатки.Колонки.Добавить("ИндексНайденнойСтроки", ПолучитьОписаниеТиповЧисла(15, 2));
	
	Для Каждого Кол Из ТаблицаНДСПартий.Колонки Цикл
		ТаблицаОстатки.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла; 
	
	Сч = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		НоваяСтрока = ТаблицаОстатки.Добавить();
		НоваяСтрока.ИндексНайденнойСтроки = Сч;
		Для Каждого Кол Из ТаблицаНДСПартий.Колонки Цикл
			Если ПустаяСтрока(Кол.Имя) ИЛИ Кол.Имя = "QuieryId" Тогда
				Продолжить;
			КонецЕсли; 
			
			НоваяСтрока[Кол.Имя] = Строка[Кол.Имя];
		КонецЦикла; 
		Сч = Сч + 1;
	КонецЦикла;
	
	// Подлежащее погашению при списании количество
	КоличествоОсталосьПогасить = ДвижениеТовара.Количество;
	СуммаВыручкиБУ       = ДвижениеТовара.СуммаВыручкиБУ;
	СуммаНДСВыручкиБУ    = ДвижениеТовара.СуммаНДСВыручкиБУ;
	
	Для Каждого СтрокаПартии Из ТаблицаОстатки Цикл
		
		Если КоличествоОсталосьПогасить <= 0 Тогда
			Прервать;
		КонецЕсли; 
		
		// Количество по строке больше 0
		Если НЕ СтрокаПартии.Количество > 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
			КоэффСписания = КоличествоОсталосьПогасить/СтрокаПартии.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;
		
		// Добавим новую строку
		Движение = ДобавитьДвижение("НДСПартииТоваров", СтруктураПараметров);
		
		// Свойства
		Движение.Период 				= СтрокаДокумента.Период;
		Движение.Регистратор 			= СтрокаДокумента.Регистратор;
		Движение.Активность 			= Истина;
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.Номенклатура 			= СтрокаПартии.Номенклатура;
		Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;
		Движение.СчетФактура	        = СтрокаПартии.СчетФактура;
		Движение.Поставщик	            = СтрокаПартии.Поставщик;
		Движение.Организация	        = СтрокаПартии.Организация;
		Движение.СтавкаНДС              = СтрокаПартии.СтавкаНДС;

		// Ресурсы 
		Движение.Количество	= Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
		Движение.Стоимость	= Окр(СтрокаПартии.Стоимость  * КоэффСписания,2,1);
		Движение.НДС        = Окр(СтрокаПартии.НДС  * КоэффСписания,2,1);
		
		Если Движение.Количество < КоличествоОсталосьПогасить Тогда
			КоэффПоступления = Движение.Количество / КоличествоОсталосьПогасить;
		Иначе
			КоэффПоступления = 1;
		КонецЕсли;
		
		КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
		
		СтрокаПартии.Количество = СтрокаПартии.Количество - Движение.Количество;
		СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - Движение.Стоимость;
		СтрокаПартии.НДС        = СтрокаПартии.НДС        - Движение.НДС;
		
		// Дополнительные Поля :
		// Для учета НДС от реализации
		Движение.СуммаВыручки = Окр(СуммаВыручкиБУ * КоэффПоступления,2,1);
		Движение.СуммаНДСВыручки = Окр(СуммаНДСВыручкиБУ * КоэффПоступления,2,1);
		Движение.СтавкаНДСВыручки = СтрокаДокумента.СтавкаНДС;
		
		Движение.ВидСклада = СтрокаДокумента.ВидСклада;
		Движение.ДоговорКонтрагента = СтрокаДокумента.ДоговорКонтрагента;

		СуммаВыручкиБУ = СуммаВыручкиБУ - Движение.СуммаВыручки;
		СуммаНДСВыручкиБУ = СуммаНДСВыручкиБУ - Движение.СуммаНДСВыручки;
		
		// Списание партий НДС Доп расходов пропорционально списанным партиям
		
		Для Каждого СтрокаПартииДопРасх Из ТаблицаОстатки Цикл
			
			// Доп расходы
			Если СтрокаПартииДопРасх.СчетФактура<>СтрокаПартииДопРасх.ДокументОприходования Тогда
				
				// Доп расходы по той же партии
				Если СтрокаПартииДопРасх.ДокументОприходования = СтрокаПартии.ДокументОприходования
					ИЛИ ЗначениеНеЗаполнено(СтрокаПартииДопРасх.ДокументОприходования) Тогда
					
					// Доп расходы погашаем пропорционально
					// Добавим новую строку
					ДвижениеДопРасх = ДобавитьДвижение("НДСПартииТоваров", СтруктураПараметров);
					
					// Свойства
					ДвижениеДопРасх.Период 				= СтрокаДокумента.Период;
					ДвижениеДопРасх.Регистратор 		= СтрокаДокумента.Регистратор;
					ДвижениеДопРасх.Активность 			= Истина;
					ДвижениеДопРасх.ВидДвижения 		= ВидДвиженияНакопления.Расход;
					
					// Измерения
					ДвижениеДопРасх.Номенклатура 		= СтрокаПартииДопРасх.Номенклатура;
					ДвижениеДопРасх.ДокументОприходования	= СтрокаПартииДопРасх.ДокументОприходования;
					ДвижениеДопРасх.СчетФактура	        = СтрокаПартииДопРасх.СчетФактура;
					ДвижениеДопРасх.Поставщик	        = СтрокаПартииДопРасх.Поставщик;
					ДвижениеДопРасх.Организация	        = СтрокаПартииДопРасх.Организация;
					ДвижениеДопРасх.СтавкаНДС           = СтрокаПартииДопРасх.СтавкаНДС;
					
					// Ресурсы 
					ДвижениеДопРасх.Количество	= 0; // 0 для доп.расходов
					ДвижениеДопРасх.Стоимость	= Окр(СтрокаПартииДопРасх.Стоимость  * КоэффСписания,2,1);
					ДвижениеДопРасх.НДС         = Окр(СтрокаПартииДопРасх.НДС        * КоэффСписания,2,1);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
			
		// Оприходование или другие действия выполняются после списания всех партий по таблице списания
		
	КонецЦикла;
	
	// Таблицу значений перенесем в найденные строки
	Для Каждого Строка Из ТаблицаОстатки Цикл
		Для Каждого Кол Из ТаблицаНДСПартий.Колонки Цикл
			
			Если ПустаяСтрока(Кол.Имя) ИЛИ Кол.Имя = "QuieryId" Тогда
				Продолжить;
			КонецЕсли; 
			
			НайденныеСтроки[Строка.ИндексНайденнойСтроки][Кол.Имя] = Строка[Кол.Имя];
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

// Движения по НДС
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДвиженияПоНДС(СтрокаДокумента, СтруктураПараметров, Движение)
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	// Списание НДС партии товаров, хранящегося в отдельном регистре при сложном учете НДС
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ВозвратПоставщику
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.Комплектация
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаЗатраты 
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.Реализация 
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.РеализацияКомиссия 
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.РеализацияРозница
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ВозвратПоставщику 
			ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПоИнвентаризации
			Тогда 
			
			ВыполнитьСписаниеНДСПартииТоваров(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДвиженияПоНДС()

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ

// Дополнительные движения по результату списания партий
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДопДвиженияПоРезультатуСписания(СтруктураПараметров, ТаблицаСписания)
	
	ВыполнитьДопДвиженияПоРезультатуСписанияУпр(СтруктураПараметров, ТаблицаСписания)
	
КонецПроцедуры // ВыполнитьДопДвиженияПоРезультатуСписания()

// Запускает формирование движений по результату списания партий в упр учете
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДопДвиженияПоРезультатуСписанияУпр(СтруктураПараметров, ТаблицаСписания)
	
	ОтражатьВУправленческомУчете = (ТаблицаСписания.Найти(Истина, "ОтражатьВУправленческомУчете")<>Неопределено);
	Если ОтражатьВУправленческомУчете Тогда
		
		// Запись данных о реализованных товаррах
		ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтруктураПараметров, ТаблицаСписания);
		
		
		// По результату списания должны быть выполнены движения в подсистеме НДС
		ТаблицаСписанныхПартий = СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Выгрузить();
		
		// Из таблицы удалим движения, не относящиеся к продаже купленных товаров
		Инд=0;
		Пока Инд<ТаблицаСписанныхПартий.Количество() Цикл
			Строка = ТаблицаСписанныхПартий[Инд];
			Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный Тогда
				Инд = Инд+1;
			Иначе
				ТаблицаСписанныхПартий.Удалить(Инд);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСписанийНДС = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Скопировать();
		
		
		// Оставим только движения списания (расход или приход с -)
		Инд=0;
		Пока Инд<ТаблицаСписанийНДС.Количество() Цикл
			
			Строка = ТаблицаСписанийНДС[Инд];
			Если Строка.ВидДвижения = ВидДвиженияНакопления.Расход
				ИЛИ Строка.ВидДвижения = ВидДвиженияНакопления.Приход И Строка.Количество<0 Тогда
				
				Инд=Инд+1;
			Иначе
				
				ТаблицаСписанийНДС.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		// Переименование колонок
		ТаблицаСписанийНДС.Колонки.Стоимость.Имя = "СуммаСписания";
		ТаблицаСписанийНДС.Колонки.Добавить("ВидЦенности");
		ТаблицаСписанийНДС.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.Товары, "ВидЦенности");
		ТаблицаСписанийНДС.Колонки.ДокументОприходования.Имя = "Партия";
		ТаблицаСписанийНДС.Колонки.СуммаВыручки.Имя = "Выручка";
		ТаблицаСписанийНДС.Колонки.Добавить("Контрагент");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
		|	ДоговорыКонтрагентов.Ссылка   КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка В(&Ссылка)");
		
		Запрос.УстановитьПараметр("Ссылка", ТаблицаСписанийНДС.ВыгрузитьКолонку("ДоговорКонтрагента"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		СоотвДоговоров = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			СоотвДоговоров.Вставить(Выборка.Договор, Выборка.Контрагент)
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ТаблицаСписанийНДС Цикл
			СтрокаТаблицы.Контрагент = СоотвДоговоров[СтрокаТаблицы.ДоговорКонтрагента];
		КонецЦикла;
		
		ТаблицаСписанийНДС.Колонки.ДоговорКонтрагента.Имя = "Договор";

		// Вызов процедуры, формирующей движения по НДС
		ОтражениеОперацийВыбытияТМЦвРегистрахПодсистемыНДС(ТаблицаСписанийНДС)
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДопДвиженияПоРезультатуСписанияУпр()

Процедура ВыполнитьСписание(ТаблицаСписания, МоментКон, РегламентныйДокумент=Неопределено) Экспорт
	
	// Структура общих параметров, используемых в большинстве процедур
	СтруктураПараметров = Новый Структура;
	
	Если ТаблицаСписания.Количество()>0 Тогда
		
		// Таблица строк документов списания
		МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
		
		УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
		
		СтруктураПараметров.Вставить("УчетнаяПолитика", ПолучитьУчетнуюПолитику(МоментКон));
		
		// Добавление в структуру остатков по партионному учету
		// Добавление в структуру остатков по видам учета, связанным с партионным
		ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон, МассивНоменклатуры);
		
		СтруктураПараметров.Вставить("ТекстСообщений", "");
		
		СтруктураПараметров.Вставить("РегламентныйДокумент", РегламентныйДокумент);
		
		// Движения - наборы записей по регистрам
		СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания);
		
		ОбрабатываемыйДокумент = Неопределено;
		
		Для Каждого СтрокаДокумента Из ТаблицаСписания Цикл
			
			Если СтрокаДокумента.Регистратор <> ОбрабатываемыйДокумент Тогда
				
				Если Не ОбрабатываемыйДокумент = Неопределено Тогда
					
					// Дополнительные движения по результату списания документом определенных партий
					ВыполнитьДопДвиженияПоРезультатуСписания(СтруктураПараметров, ТаблицаСписания);
					
					ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Истина);
					
					#Если Клиент Тогда
						Состояние("Проведен документ " + ОбрабатываемыйДокумент);
					#КонецЕсли
					
				КонецЕсли;
				
				ОбрабатываемыйДокумент = СтрокаДокумента.Регистратор;
				
				ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, СтрокаДокумента.Период, СтрокаДокумента.Регистратор, Истина);
				
			КонецЕсли; 
			
			Если СтрокаДокумента.НеСписывать Тогда // Строка не обрабатывается при списании
				Продолжить;
			КонецЕсли;
			
			// Специфические случаи списания :
			
			// 1. Возврат от покупателя
			Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя Тогда
				//Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ВозвратОтПокупателяДокументПартии) Тогда
				
				ПоступлениеВозвратОтПокупателя(СтрокаДокумента, СтруктураПараметров);
				
				// 2. Поступление товаров по ордеру: корректировка предыдущих списаний
			ИначеЕсли НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ПоступлениеПриходныйОрдер) Тогда
				
				Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
					ПоступлениеТоваровПоОрдеруУпр(СтрокаДокумента, СтруктураПараметров);
				КонецЕсли;
				
				// 3. Закрытие заказов
			ИначеЕсли ТипЗнч(СтрокаДокумента.Регистратор)=Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") Тогда
				
				СнятиеРезервовПоЗаказамПокупателей(СтрокаДокумента, СтруктураПараметров);
				
				// 4. Документ, в котором указываются данные, которых нет в документе списания:
				// - Списание партий по расходному ордеру
				// - Перемещение партий по приходному ордеру
			ИначеЕсли НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ОсновнойДокумент) Тогда
				
				СписаниеПартийРасходнымОрдером(СтрокаДокумента, СтруктураПараметров);
				
				
				// Общий случай списания
			Иначе
				
				// Сначала обрабатывается списание
				СписаниеПартий(СтрокаДокумента, СтруктураПараметров, ПолучитьИсточникПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров));
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Если Не ОбрабатываемыйДокумент = Неопределено Тогда
					
			// Дополнительные движения по результату списания документом определенных партий
			ВыполнитьДопДвиженияПоРезультатуСписания(СтруктураПараметров, ТаблицаСписания);
			
			ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Истина);
			
			#Если Клиент Тогда
				Состояние("Проведен документ " + ОбрабатываемыйДокумент);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Сдвиг ГП партионного учета назад, используемый в неоперативных документах.
//
Процедура СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация = Неопределено, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете) Экспорт

	ИмяПоследовательности = "ПартионныйУчет";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартионныйУчетГраницы.МоментВремени
	|ИЗ
	|	Последовательность."+ИмяПоследовательности+".Границы КАК ПартионныйУчетГраницы
	| ";
	
	Запрос.Текст = Запрос.Текст+"
	|ДЛЯ ИЗМЕНЕНИЯ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МоментВремениДокумента = Новый МоментВремени(Ссылка.Дата, Ссылка);
	
	Если Выборка.Следующий() Тогда
		
		// Граница переносится назад, если документ проводится задним числом
		Если МоментВремениДокумента.Сравнить(Выборка.МоментВремени) = -1 Тогда
			
			Последовательности[ИмяПоследовательности].УстановитьГраницу(МоментВремениДокумента);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОСНОВНАЯ ПРОЦЕДУРА ДЛЯ СПИСАНИЯ ПАРТИЙ ТОВАРОВ ЗА ПЕРИОД

// Процедура списания товаров по партионному учету, и связанных с ним движений:
// по себестоимости продаж
// поступлению партий товаров на склад
// поступлению партий товаров переданных
// поступлению материальных затрат незавершенного производства
// и т.д.
//
// Параметры
//  ДатаНач – ссылка на документ, по которому выполняется списание (если списание выполняется для одного документа)
//	ДатаКон         – период, заданный датами, за который выполняется списание (если списание выполняется для документов в интервале)
//	ТаблицаТоваров  – таблица значений или массив, ограничивающий обрабатываемую номенклатуру.
// 
Процедура СписаниеПартийТоваров(ДатаДокументНач=Неопределено, ДатаКон=Неопределено, ТаблицаТоваров= Неопределено, РегламентныйДокумент = Неопределено, Организация = Неопределено, Упр=Истина, Бух=Истина, Нал=Истина, Меж=Ложь) Экспорт
	
	// Период обработки может быть задан двумя датами или ссылкой на документ
	Если ТипЗнч(ДатаДокументНач) = ТипЗнч('00010101000000') И ТипЗнч(ДатаКон) = ТипЗнч('00010101000000') Тогда
		
		ДатаНач = ДатаДокументНач;
		
		ДокументСписания = Неопределено;
		
		МоментКон = ДатаКон;
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДатаНач)) Тогда
		
		ДокументСписания = ДатаДокументНач;
		
		ДатаНач = Неопределено;
		
		МоментКон = Новый МоментВремени(ДокументСписания.Дата, ДокументСписания);
		
	Иначе
		
		Сообщить("Неверно заданы параметры функции СписаниеПартийТоваров()!");
		Возврат;
		
	КонецЕсли;
	
	// Таблица строк документов списания
	ТаблицаСписания = ПолучитьТаблицуСтрокДокументов(ДокументСписания, ДатаНач, ДатаКон);
	
	ВыполнитьСписание(ТаблицаСписания, МоментКон, РегламентныйДокумент);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПОСТУПЛЕНИЯ НЕОТФАКТУРОВАННЫХ ТОВАРОВ
 
Процедура ПоступлениеТоваровПоОрдеруУпр(СтрокаДокумента, СтруктураПараметровИсх) Экспорт
			
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Ссылка = СтрокаДокумента.Регистратор;
	СсылкаДата = СтрокаДокумента.Период;
	
	ПриходныйОрдер = СтрокаДокумента.ПоступлениеПриходныйОрдер;
	
	Если Не ТипЗнч(ПриходныйОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросДатаОрдера = Новый Запрос("ВЫБРАТЬ Дата ИЗ Документ.ПриходныйОрдерНаТовары ГДЕ Ссылка = &Ссылка");
	ЗапросДатаОрдера.УстановитьПараметр("Ссылка", ПриходныйОрдер);
	Выборка = ЗапросДатаОрдера.Выполнить().Выбрать();
	Выборка.Следующий();
	
	// Дата начала обработки
	ДатаНач = Выборка.Дата;
	
	// Дата конца обработки
	ДатаКон = СтрокаДокумента.Период;
	
	// Партии, поступившие по накладной
	ЗапросПартии = Новый Запрос;
	
	ЗапросПартии.УстановитьПараметр("Регистратор", Ссылка);
	ЗапросПартии.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	
	ЗапросПартии.Текст = 
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ПартииТоваровНаСкладах.Заказ,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
	|	ПартииТоваровНаСкладах.Качество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|
	|ГДЕ
	|	ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход И
	|	ПартииТоваровНаСкладах.ДокументОприходования = &Регистратор И
	|	ПартииТоваровНаСкладах.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Качество";
	
	ТабПартий = ЗапросПартии.Выполнить().Выгрузить();
	
	МассивНоменклатуры = ТабПартий.ВыгрузитьКолонку("Номенклатура");
	
	УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
	
	// Пустая таблица
	ТабПартийПеред = Новый ТаблицаЗначений;
	ТабПартийПеред.Колонки.Добавить("Номенклатура");
	ТабПартийПеред.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабПартийПеред.Колонки.Добавить("ДокументОприходования");
	ТабПартийПеред.Колонки.Добавить("ДокументОприходованияДата");
	ТабПартийПеред.Колонки.Добавить("ДоговорКонтрагента");
	ТабПартийПеред.Колонки.Добавить("ДокументПередачи");
	ТабПартийПеред.Колонки.Добавить("СтатусПартии");
	ТабПартийПеред.Колонки.Добавить("СтатусПередачи");
	ТабПартийПеред.Колонки.Добавить("Количество");
	ТабПартийПеред.Колонки.Добавить("Стоимость");
	
	
	// Запрос по списанию партий ордеров:
	
	Запрос = Новый Запрос;
	
	МассивРеализация = Новый Массив;
	МассивРеализация.Добавить(КодыОпераций.Реализация);
	МассивРеализация.Добавить(КодыОпераций.РеализацияРозница);
	МассивРеализация.Добавить(КодыОпераций.РеализацияКомиссия);
	Запрос.УстановитьПараметр("КодыСписаниеНаСебестоимость", МассивРеализация);
	
	МассивСписаниеНаПереданные = Новый Массив;
	МассивСписаниеНаПереданные.Добавить(КодыОпераций.ПередачаНаКомиссию);
	
	Запрос.УстановитьПараметр("КодыСписаниеНаПереданные",МассивСписаниеНаПереданные);
	
	Запрос.УстановитьПараметр("КодыСписаниеНаЗатраты", КодыОпераций.СписаниеНаЗатраты);
	
	МассивПеремещениеСклад= Новый Массив;
	МассивПеремещениеСклад.Добавить(КодыОпераций.ПеремещениеМеждуСкладами);
	МассивПеремещениеСклад.Добавить(КодыОпераций.ПереоценкаПринятыхНаКомиссию);
	МассивПеремещениеСклад.Добавить(КодыОпераций.КорректировкаСерийИХарактеристик);
	МассивПеремещениеСклад.Добавить(КодыОпераций.РезервированиеПодЗаказ);
	МассивПеремещениеСклад.Добавить(КодыОпераций.СнятиеРезерваПодЗаказ);
	
	Запрос.УстановитьПараметр("КодыПеремещениеСклад", МассивПеремещениеСклад);
	Запрос.УстановитьПараметр("КодыСписаниеНаСклад", КодыОпераций.ВозвратОтКомиссионера);
	
	Запрос.УстановитьПараметр("МассивДокументовОприходования", ПриходныйОрдер);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("КодОперацииСписаниеПоОрдеру", Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НаСкладах"" КАК СписаноИз,
	|	Источник.Период КАК Период,
	|	Источник.Регистратор КАК Регистратор,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	СУММА(Источник.Количество) КАК Количество,
	|	СУММА(Источник.Стоимость) КАК Стоимость,
	|	Источник.КодОперации,
	|	Переданные.СтатусПередачи,
	|	Переданные.ДокументПередачи,
	|	Переданные.ДоговорКонтрагента,
	|	Переданные.КодОперации КАК КодОперацииПартииТоваровПереданные,
	|	НаСкладахПоступление.Склад КАК СкладПолучатель,
	|	НаСкладахПоступление.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыНовая,
	|	НаСкладахПоступление.СерияНоменклатуры КАК СерияНоменклатурыНовая,
	|	Источник.КодОперации КАК КодОперацииПартииТоваров,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР КОГДА НЕ((Затраты.СтатьяЗатрат) ЕСТЬ NULL ) ТОГДА Затраты.СтатьяЗатрат ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР КОГДА НЕ((Затраты.НоменклатурнаяГруппа) ЕСТЬ NULL ) ТОГДА Затраты.НоменклатурнаяГруппа ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР КОГДА НЕ((Затраты.Подразделение) ЕСТЬ NULL ) ТОГДА Затраты.Подразделение КОГДА НЕ((Себестоимость.Подразделение) ЕСТЬ NULL ) ТОГДА Себестоимость.Подразделение ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК Подразделение,
	|	ВЫБОР КОГДА НЕ((Затраты.Заказ) ЕСТЬ NULL ) ТОГДА Затраты.Заказ КОГДА НЕ((Себестоимость.ЗаказПокупателя) ЕСТЬ NULL ) ТОГДА Себестоимость.ЗаказПокупателя КОГДА НЕ((НаСкладахПоступление.Заказ) ЕСТЬ NULL ) ТОГДА НаСкладахПоступление.Заказ ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК ЗаказСписания,
	|	0 КАК СтоимостьПоступление,
	|	Источник.Качество,
	|	НаСкладахПоступление.Качество КАК КачествоНовое
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданные КАК Переданные
	|		ПО Источник.Регистратор = Переданные.Регистратор И Источник.НомерКорСтроки = Переданные.НомерСтроки И (Источник.КодОперации В (&КодыСписаниеНаПереданные))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Затраты КАК Затраты
	|		ПО Источник.Регистратор = Затраты.Регистратор И Источник.НомерКорСтроки = Затраты.НомерСтроки И (Источник.КодОперации В (&КодыСписаниеНаЗатраты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор И Источник.НомерКорСтроки = Себестоимость.НомерСтроки И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладахПоступление
	|		ПО Источник.Регистратор = НаСкладахПоступление.Регистратор И Источник.НомерКорСтроки = НаСкладахПоступление.НомерСтроки И (Источник.КодОперации В (&КодыПеремещениеСклад))
	|
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон И
	|	Источник.ВидДвижения = &ВидДвиженияРасход И
	|	Источник.КодОперации <> &КодОперацииСписаниеПоОрдеру
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	Источник.КодОперации,
	|	Переданные.СтатусПередачи,
	|	Переданные.ДокументПередачи,
	|	Переданные.ДоговорКонтрагента,
	|	Переданные.КодОперации,
	|	НаСкладахПоступление.Склад,
	|	НаСкладахПоступление.ХарактеристикаНоменклатуры,
	|	НаСкладахПоступление.СерияНоменклатуры,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР КОГДА НЕ((Затраты.СтатьяЗатрат) ЕСТЬ NULL ) ТОГДА Затраты.СтатьяЗатрат ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,
	|	ВЫБОР КОГДА НЕ((Затраты.НоменклатурнаяГруппа) ЕСТЬ NULL ) ТОГДА Затраты.НоменклатурнаяГруппа ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,
	|	ВЫБОР КОГДА НЕ((Затраты.Заказ) ЕСТЬ NULL ) ТОГДА Затраты.Заказ КОГДА НЕ((Себестоимость.ЗаказПокупателя) ЕСТЬ NULL ) ТОГДА Себестоимость.ЗаказПокупателя КОГДА НЕ((НаСкладахПоступление.Заказ) ЕСТЬ NULL ) ТОГДА НаСкладахПоступление.Заказ ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,
	|	ВЫБОР КОГДА НЕ((Затраты.Подразделение) ЕСТЬ NULL ) ТОГДА Затраты.Подразделение КОГДА НЕ((Себестоимость.Подразделение) ЕСТЬ NULL ) ТОГДА Себестоимость.Подразделение ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,
	|	Источник.Качество,
	|	НаСкладахПоступление.Качество,
	|	Источник.ДокументОприходования.Дата,
	|	Источник.КодОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Переданные"",
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.Номенклатура,
	|	НаСкладах.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	НаСкладах.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.ДокументОприходования.Дата,
	|	Источник.СтатусПартии,
	|	НаСкладах.Заказ,
	|	СУММА(Источник.Количество),
	|	СУММА(Источник.Стоимость),
	|	Источник.КодОперации,
	|	Источник.СтатусПередачи,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	НаСкладах.КодОперации,
	|	Источник.НомерКорСтроки,
	|	NULL,
	|	NULL,
	|	Себестоимость.Подразделение,
	|	ВЫБОР КОГДА НЕ((Себестоимость.ЗаказПокупателя) ЕСТЬ NULL ) ТОГДА Себестоимость.ЗаказПокупателя ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,
	|	0,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладах
	|		ПО Источник.Регистратор = НаСкладах.Регистратор И Источник.НомерКорСтроки = НаСкладах.НомерСтроки И (Источник.КодОперации В (&КодыСписаниеНаСклад))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор И Источник.НомерКорСтроки = Себестоимость.НомерСтроки И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон И
	|	Источник.ВидДвижения = &ВидДвиженияРасход
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.ДоговорКонтрагента,
	|	Источник.ДокументПередачи,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.СтатусПередачи,
	|	НаСкладах.Склад,
	|	НаСкладах.СерияНоменклатуры,
	|	НаСкладах.Заказ,
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.КодОперации,
	|	НаСкладах.КодОперации,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР КОГДА НЕ((Себестоимость.ЗаказПокупателя) ЕСТЬ NULL ) ТОГДА Себестоимость.ЗаказПокупателя ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,
	|	Себестоимость.Подразделение,
	|	Источник.ДокументОприходования.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ Источник.Номенклатура В (&МассивНоменклатуры)
	|	И Источник.ДокументОприходования В (&МассивДокументовОприходования) И ");
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Пустые колонки для совместимости со структурой регистра СписанныеТовары
	ТаблицаЗапроса.Колонки.Добавить("Организация");
	ТаблицаЗапроса.Колонки.Добавить("НоменклатураНовая");
	ТаблицаЗапроса.Колонки.Добавить("ДокументОприходованияНовый");
	ТаблицаЗапроса.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число"));
	ТаблицаЗапроса.Колонки.Добавить("ОтражатьВУправленческомУчете");
	ТаблицаЗапроса.ЗаполнитьЗначения(Истина, "ОтражатьВУправленческомУчете");

	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("УчетнаяПолитика", ПолучитьУчетнуюПолитику(СсылкаДата));
	
	// Таблицы остатков партий
	СтруктураПараметров.Вставить("ТаблицаПартииТоваровНаСкладах"+"Упр", ТабПартий);
	СтруктураПараметров.Вставить("ТаблицаПартииТоваровПереданные"+"Упр", ТабПартийПеред);
	
	СтруктураПараметров.Вставить("РегламентныйДокумент", Ссылка);
	
	РегламентныйДокумент = ссылка;
	
	// Движения - наборы записей по регистрам
	СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаЗапроса);
	
	// Переменная для отслеживания текущего обрабатываемого документа, которому будут записаны движения
	
	ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаЗапроса, СсылкаДата, Ссылка, Ложь);
	
	Для Каждого ВыборкаДвижений ИЗ ТаблицаЗапроса Цикл
	
		// Сторно списания по ордеру
		Если ВыборкаДвижений.СписаноИз = "НаСкладах" Тогда
			
			СтруктураПоиска = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Склад, Заказ, Качество",
			ВыборкаДвижений.Номенклатура,
			ВыборкаДвижений.ХарактеристикаНоменклатуры,
			ВыборкаДвижений.СерияНоменклатуры,
			ВыборкаДвижений.Склад,
			ВыборкаДвижений.Заказ,
			ВыборкаДвижений.Качество
			);
			
			НайденныеСтроки = СтруктураПараметров["ТаблицаПартииТоваровНаСкладах"+"Упр"].НайтиСтроки(СтруктураПоиска);
			
			КоличествоОсталосьПогасить = ВыборкаДвижений.Количество;
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
		
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				// Ресурсы 
				Количество	= Окр(Строка.Количество * КоэффСписания,3,1);
				Стоимость	= Окр(Строка.Стоимость  * КоэффСписания,2,1);
				
				// Сторно старого движения
				Движение              = ДобавитьДвижение("ПартииТоваровНаСкладах"+"Упр", СтруктураПараметров);
				Движение.Период       = СтрокаДокумента.Период;
				
				Движение.Регистратор  = ВыборкаДвижений.Регистратор;
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.Номенклатура = ВыборкаДвижений.Номенклатура;
				Движение.ХарактеристикаНоменклатуры = ВыборкаДвижений.ХарактеристикаНоменклатуры;
				Движение.СерияНоменклатуры = ВыборкаДвижений.СерияНоменклатуры;
				Движение.Склад        = ВыборкаДвижений.Склад;
				Движение.ДокументОприходования = ВыборкаДвижений.ДокументОприходования;
				
				Движение.СтатусПартии = ВыборкаДвижений.СтатусПартии;
				
				Движение.Заказ        = ВыборкаДвижений.Заказ;
				Движение.Качество     = ВыборкаДвижений.Качество;
				
				Движение.Количество   = -Количество;
				Движение.Стоимость    = 0;
				
				Движение.КодОперации  = ВыборкаДвижений.КодОперации;
				
				Движение.ДокументОприходованияДата = ВыборкаДвижений.ДокументОприходованияДата;
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				ВыполнитьКорДвижениеУпр("НаСкладах",
				ПолучитьНаправлениеСписанияПоКодуОперации(ВыборкаДвижений.КодОперации, ВыборкаДвижений.СтатьяЗатрат), ВыборкаДвижений, СтруктураПараметров, Движение);
				
				
				// Новое движение
				Движение              = ДобавитьДвижение("ПартииТоваровНаСкладах"+"Упр", СтруктураПараметров);
				Движение.Период       = СтрокаДокумента.Период;
				
				Движение.Регистратор  = ВыборкаДвижений.Регистратор;
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.Номенклатура = ВыборкаДвижений.Номенклатура;
				Движение.ХарактеристикаНоменклатуры = ВыборкаДвижений.ХарактеристикаНоменклатуры;
				Движение.СерияНоменклатуры = ВыборкаДвижений.СерияНоменклатуры;
				Движение.Склад        = ВыборкаДвижений.Склад;
				Движение.ДокументОприходования = Строка.ДокументОприходования;
				
				Движение.СтатусПартии = Строка.СтатусПартии;
				
				Движение.Заказ        = ВыборкаДвижений.Заказ;
				Движение.Качество     = ВыборкаДвижений.Качество;
				
				Движение.Количество   = Количество;
				Движение.Стоимость    = Стоимость;
				
				Движение.КодОперации  = ВыборкаДвижений.КодОперации;
				
				Движение.ДокументОприходованияДата = ВыборкаДвижений.ДокументОприходованияДата;
				
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
				
				Строка.Количество = Строка.Количество - Движение.Количество;
				Строка.Стоимость  = Строка.Стоимость  - Движение.Стоимость;
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				ВыполнитьКорДвижениеУпр("НаСкладах",
				ПолучитьНаправлениеСписанияПоКодуОперации(ВыборкаДвижений.КодОперации, ВыборкаДвижений.СтатьяЗатрат), ВыборкаДвижений, СтруктураПараметров, Движение);
			
			КонецЦикла; 
			
		ИначеЕсли ВыборкаДвижений.СписаноИз = "Переданные" Тогда	
			
			СтруктураПоиска = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, ДоговорКонтрагента, ДокументПередачи, СтатусПередачи",
			ВыборкаДвижений.Номенклатура,
			ВыборкаДвижений.ХарактеристикаНоменклатуры,
			ВыборкаДвижений.ДоговорКонтрагента,
			ВыборкаДвижений.ДокументПередачи,
			ВыборкаДвижений.СтатусПередачи,
			);
			
			СтруктураПоиска.Вставить("СтатусПередачи", ВыборкаДвижений.СтатусПередачи);
			
			НайденныеСтроки = СтруктураПараметров["ТаблицаПартииТоваровПереданные"+"Упр"].НайтиСтроки(СтруктураПоиска);
			
			КоличествоОсталосьПогасить = ВыборкаДвижений.Количество;
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
		
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				// Ресурсы 
				Количество	= Окр(Строка.Количество * КоэффСписания,3,1);
				Стоимость	= Окр(Строка.Стоимость  * КоэффСписания,2,1);
				
				// Сторно старого движения
				Движение              = ДобавитьДвижение("ПартииТоваровНаСкладах"+"Упр", СтруктураПараметров);
				Движение.Период       = СтрокаДокумента.Период;
				Движение.Регистратор  = ВыборкаДвижений.Регистратор;
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				
				Движение.Номенклатура = ВыборкаДвижений.Номенклатура;
				Движение.ХарактеристикаНоменклатуры = ВыборкаДвижений.ХарактеристикаНоменклатуры;
				Движение.ДоговорКонтрагента        = ВыборкаДвижений.ДоговорКонтрагента;
				Движение.ДокументОприходования = ВыборкаДвижений.ДокументОприходования;
				
				Движение.СтатусПартии   = ВыборкаДвижений.СтатусПартии;
				Движение.СтатусПередачи = ВыборкаДвижений.СтатусПередачи;
				
				Движение.Количество   = -Количество;
				Движение.Стоимость    = 0;
				
				Движение.КодОперации  = ВыборкаДвижений.КодОперации;
				
				Движение.ДокументОприходованияДата = ВыборкаДвижений.ДокументОприходованияДата;
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				ВыполнитьКорДвижениеУпр("Переданные",
				ПолучитьНаправлениеСписанияПоКодуОперации(ВыборкаДвижений.КодОперации, ВыборкаДвижений.СтатьяЗатрат), ВыборкаДвижений, СтруктураПараметров, Движение);
				
				
				// Новое движение
				Движение              = ДобавитьДвижение("ПартииТоваровНаСкладах"+"Упр", СтруктураПараметров);
				Движение.Период       = СтрокаДокумента.Период;
				Движение.Регистратор  = ВыборкаДвижений.Регистратор;
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.Номенклатура = ВыборкаДвижений.Номенклатура;
				Движение.ХарактеристикаНоменклатуры = ВыборкаДвижений.ХарактеристикаНоменклатуры;
				Движение.ДоговорКонтрагента        = ВыборкаДвижений.ДоговорКонтрагента;
				Движение.ДокументОприходования = Строка.ДокументОприходования;
				
				Движение.СтатусПартии  = Строка.СтатусПартии;
				Движение.СтатусПередачи = ВыборкаДвижений.СтатусПередачи;
				
				Движение.Заказ        = ВыборкаДвижений.Заказ;
				
				Движение.Количество   = Количество;
				Движение.Стоимость    = Стоимость;
				
				Движение.КодОперации  = ВыборкаДвижений.КодОперации;
				
				Движение.ДокументОприходованияДата = ВыборкаДвижений.ДокументОприходованияДата;
				
				// Уменьшение погашаемого количества
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
				
				Строка.Количество = Строка.Количество - Движение.Количество;
				Строка.Стоимость  = Строка.Стоимость  - Движение.Стоимость;
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				ВыполнитьКорДвижениеУпр("Переданные",
				ПолучитьНаправлениеСписанияПоКодуОперации(ВыборкаДвижений.КодОперации, ВыборкаДвижений.СтатьяЗатрат), ВыборкаДвижений, СтруктураПараметров, Движение);
			
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЦикла; 
	
	ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаЗапроса, Ложь);
	
КонецПроцедуры

// Процедура-вход для всех документов. Проводит переданный документ по учету партий товаров
//
// Параметры
//  ОбрабатываемыйДокумент - проводимый документ
//  СтруктураПараметров – Структура – содержит общие параметры

Процедура ДвижениеПартийТоваров(ОбрабатываемыйДокумент, ТаблицаДокумента = Неопределено, КоличествоСтрокВДокументе=0, ОтражатьВУправленческомУчете=Истина, ОтражатьВБухгалтерскомУчете=Истина, ОтражатьВНалоговомУчете=Истина) Экспорт
	
	// Если не переданы строки документа, выбираем из базы.
	Если ТаблицаДокумента = Неопределено Тогда
		
		// Таблица строк документов списания
		ТаблицаДокумента = ПолучитьТаблицуСтрокДокументов(ОбрабатываемыйДокумент);
		
	КонецЕсли;
	
	ТаблицаСписания = ТаблицаДокумента;
	
	Если ТаблицаДокумента.Количество()>0 Тогда
		
		Строка0 = ТаблицаДокумента[0];
		
		Если ЗначениеНеЗаполнено(Строка0.Регистратор) Тогда
			ТаблицаДокумента.ЗаполнитьЗначения(ОбрабатываемыйДокумент, "Регистратор");
		КонецЕсли;
		Если ЗначениеНеЗаполнено(Строка0.Период) Тогда
			ТаблицаДокумента.ЗаполнитьЗначения(ОбрабатываемыйДокумент.Дата, "Период");
		КонецЕсли;
		
		ДокументМоментВремени = Новый МоментВремени(Строка0.Период, Строка0.Регистратор);
		
		ВыполнитьСписание(ТаблицаСписания, ДокументМоментВремени);
		
	КонецЕсли;
	
	КоличествоСтрокВДокументе = ТаблицаДокумента.Количество();

КонецПроцедуры // ДвижениеПартийТоваров()

// Возвращает список документов, которые нужно проводить по партиям
//
Функция ПолучитьСписокДокументов(ПоследнийОбработанныйДокумент, ДатаНач, СсылкаНач, ДатаКон) Экспорт
	
	МоментНач = Новый МоментВремени(ДатаНач, СсылкаНач);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПоследнего",   ПоследнийОбработанныйДокумент.Дата);
	Запрос.УстановитьПараметр("СсылкаПоследнего", ПоследнийОбработанныйДокумент);
	Запрос.УстановитьПараметр("МоментНач", МоментНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	МассивТаблиц = Новый Массив;
	КоличествоСтрокЗаПроход = 1000;// 03.10.2016 - очень мало! у нас количество документов >1,5-2 тыс. в день!

	// ВСЕ ДОКУМЕНТЫ !!! 
	//
	Для каждого МетаданныеДокумент Из Метаданные.Последовательности.ПартионныйУчет.Документы Цикл
		
		ТекстФлаги = "";
		Если МетаданныеДокумент.Реквизиты.Найти("ОтражатьВУправленческомУчете")<>Неопределено Тогда
			ТекстФлаги = ТекстФлаги + ", ОтражатьВУправленческомУчете КАК ОтражатьВУправленческомУчете";
		Иначе			
			ТекстФлаги = ТекстФлаги + ", Ложь КАК ОтражатьВУправленческомУчете";
		КонецЕсли;
		Если МетаданныеДокумент.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете")<>Неопределено Тогда
			ТекстФлаги = ТекстФлаги + ", ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете";
		Иначе			
			ТекстФлаги = ТекстФлаги + ", Ложь КАК ОтражатьВБухгалтерскомУчете";
		КонецЕсли;
		Если МетаданныеДокумент.Реквизиты.Найти("ОтражатьВНалоговомУчете")<>Неопределено Тогда
			ТекстФлаги = ТекстФлаги + ", ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете";
		Иначе			
			ТекстФлаги = ТекстФлаги + ", Ложь КАК ОтражатьВНалоговомУчете";
		КонецЕсли;
		
		ТекстОрганизация = "";
		Если МетаданныеДокумент.Реквизиты.Найти("Организация")<>Неопределено Тогда
			ТекстОрганизация = ТекстОрганизация + ", Организация КАК Организация";
		Иначе			
			ТекстОрганизация = ТекстОрганизация + ", NULL КАК Организация";
		КонецЕсли;
		
		Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ "+Формат(КоличествоСтрокЗаПроход, "ЧГ=0")+" 
		|   Док.Дата, Док.Ссылка  " + ТекстФлаги + ТекстОрганизация + "
		|ИЗ Документ."+МетаданныеДокумент.Имя + " Док"; 
	
	//	 Документы в этой дате
		Запрос.Текст = Текст + "
		|ГДЕ Док.МоментВремени>&МоментНач
		|	И Док.Дата = &ДатаПоследнего И Док.Ссылка > &СсылкаПоследнего 
	//	+++ 03.10.2016
		|	И Док.Проведен
		|УПОРЯДОЧИТЬ ПО Дата, Ссылка";
		
		МассивТаблиц.Добавить(Запрос.Выполнить().Выгрузить());
	
		// Документы в следующей дате
		Запрос.Текст = Текст + " 
		|ГДЕ  Док.МоментВремени>=&МоментНач
		|	И Док.Дата > &ДатаПоследнего И Док.Дата <= &ДатаКон 
	//	+++ 03.10.2016
		|	И Док.Проведен
	 	|УПОРЯДОЧИТЬ ПО Дата, Ссылка";
		
		МассивТаблиц.Добавить(Запрос.Выполнить().Выгрузить());
		
	КонецЦикла;
	
		
	//+++( 03.10.2016 - ТОЛЬКО документы которые ДЕЛАЛИ движения....
	//запрос.Текст = 
	//"ВЫБРАТЬ ПЕРВЫЕ 1000
	//|	ПартииТоваровНаСкладахОбороты.Период как Дата,
	//|	ПартииТоваровНаСкладахОбороты.Регистратор как Ссылка,
	//|	ПартииТоваровНаСкладахОбороты.Регистратор.ОтражатьВУправленческомУчете как ОтражатьВУправленческомУчете,
	//|	ПартииТоваровНаСкладахОбороты.Регистратор.ОтражатьВБухгалтерскомУчете как ОтражатьВБухгалтерскомУчете, 
	//|	ПартииТоваровНаСкладахОбороты.Регистратор.ОтражатьВНалоговомУчете как ОтражатьВНалоговомУчете,
	//|	ПартииТоваровНаСкладахОбороты.Регистратор.Организация как Организация
	//|ИЗ
	//|	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(&ДатаПоследнего, &ДатаКон, Регистратор, ) КАК ПартииТоваровНаСкладахОбороты
	//|ГДЕ ПартииТоваровНаСкладахОбороты.Регистратор >= &СсылкаПоследнего
	//|И ПартииТоваровНаСкладахОбороты.Регистратор.МоментВремени>=&МоментНач 
	//|УПОРЯДОЧИТЬ ПО Дата, Ссылка";
	//Если КоличествоСтрокЗаПроход<>1000 тогда
	//	запрос.Текст  = стрЗаменить(запрос.Текст , "1000",  Формат(КоличествоСтрокЗаПроход, "ЧГ=0") );
	//КонецЕсли;
	//МассивТаблиц.Добавить(Запрос.Выполнить().Выгрузить());
    //+++)
	
	
	Таблица = Новый ТаблицаЗначений;
	
	// После упорядочивания по датам строки должны располагаться в том же порядке, что и в исходном запросе
	// для этого в служебной колонке запомним порядок запроса (таблицы в массиве) и положение строки в запросе в виде 
	// ПорядокТаблицыВМассиве*10^N + ПорядокВТаблице, где N - количество десятичных разрядов в числе КоличествоСтрокЗаПроход.
	СдвигРазряда = Pow(10,Цел(Log10(КоличествоСтрокЗаПроход)+1));
	
	Таблица.Колонки.Добавить("Ключ"); // Исходный индекс строки
	
	// Создаем колонки
	Для Каждого Колонка Из МассивТаблиц[0].Колонки Цикл
		Таблица.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	// Загрузим значения в одну таблицу
	Сч=0;
	Для Каждого Элемент Из МассивТаблиц Цикл
		
		Сч=Сч+1;
		
		Для Каждого Строка Из Элемент Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для Каждого Колонка Из Элемент.Колонки Цикл
				Если ПустаяСтрока(Колонка.Имя) ИЛИ Колонка.Имя = "QuieryId" Тогда
					Продолжить;
				КонецЕсли; 
				
				НоваяСтрока[Колонка.Имя] = Строка[Колонка.Имя];
			КонецЦикла;
			
			НоваяСтрока.Ключ=Сч*СдвигРазряда+Элемент.Индекс(Строка);
		КонецЦикла;
	КонецЦикла; 
	
	Таблица.Сортировать("Дата Возр, Ссылка Возр, Ключ Возр");
	Таблица.Свернуть("Дата, Ссылка, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Организация");
	
	// От таблицы оставим только первые КоличествоСтрокЗаПроход, таким образом получим ограничение
	// обрабатываемого количества строк числом КоличествоСтрокЗаПроход и ограничение выбираемых из  
	// базы данных строк (не более КоличествоСтрокЗаПроход*МассивТаблиц.Количество())
	
	КоличествоЛишнихСтрокСнизу = Таблица.Количество()-КоличествоСтрокЗаПроход;
	
	Если КоличествоЛишнихСтрокСнизу>0 Тогда
		Для Сч=1 По КоличествоЛишнихСтрокСнизу Цикл
			Таблица.Удалить(Таблица[КоличествоСтрокЗаПроход]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ТЕХНОЛОГИЧЕСКИЕ

Процедура ЗаписатьДокументНаСервере(ДокументСсылка, РежимЗаписи) Экспорт

	ДокументСсылка.ПолучитьОбъект().Записать(РежимЗаписи);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОРРЕКТИРОВКА СУММ СПИСАНИЙ, ВЫПОЛНЕННЫХ В ТЕЧЕНИЕ МЕСЯЦА (ТОЛЬКО СУММОВЫЕ ДВИЖЕНИЯ)

////////////////////////////////////////////////////////////////////////////////
// Процедуры списания по-средней, зависящие от структуры данных конфигурации

// СписаниеПоСредней
//
// Параметры:
//	ТаблицаТоваров - содержит товары, списание которых необходимо усреднить. 
//	Каждая колонка соответствует одному из постоянных параметров товара, не изменяемых в ходе перемещений. 
//	По остальным параметрам выполняется усреднение
//
Процедура РассчитатьСписаниеПоСредней(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураДопПараметров) Экспорт
	
	// Основное допущение данного метода - игнорирование замкнутой цепочки перемещений между состояниями ("холостого хода"):
	// считаем, что если товар в ходе перемещений снова попал в исходное состояние, то он как бы не перемещался, 
	// это движение можно исключить из общего оборота, а стоимость движения принять равной 0. Цепочки перемещений 
	// таким образом размыкаются, что позволяет рассчитать стоимости движений, начиная от конца цепочки.
	
	// Получим все состояния для товара, которые он принимал за период в виде таблицы
	//	---------------------------------------------------------------------------------------------------------------------------------
	// |Состояние 1 (Источник) |Состояние 2 (Приемник)| Перемещаемое количество| Стоимость (нужна для упрощения последующей корректировки)
	
	// Последовательно обходя состояния, выделим контуры (пути, начала и концы которых совпадают)
	// В каждом контуре найдем количество, которое совершило перемещение по замкнутому кругу ("холостой ход"), 
	// и уменьшим каждое движение из контура на данное количество.
	// Будем выбирать другие состояния для получения всех контуров и применим к ним то же правило.
	
	// После нахождения контуров в графах перемещений и сокращения "холостого хода" получаем совокупность разомкнутых 
	// путей перехода товара между состояниями (остовные деревья). Внутри каждой такой цепочки выполняем расчет.
	// Важно:  в общем случае результат сокращения зависит от последовательности обхода контуров, поэтому
	// для повторяемости результата она должна подчиняться какому-либо правилу (например, чтобы сводные перемещения
	// упорядочивались по возрастанию даты первого перемещения)
	
	// Получим таблицу перемещений, содержащую суммарные перемещения между состояниями
	
	// Получаемая таблица должна содержать колонку "Количество", "Стоимость" и колонки, описывающие старое и новое состояние,
	// причем имена колонок нового состояния заканчиваются на ПрефиксПараметровНовогоСостояния
	ПрефиксПараметровНовогоСостояния="_НовоеСостояние";
	
	Таб = ПолучитьТаблицуПеремещений(ТаблицаТоваров, ДатаНач, ДатаКон, ПрефиксПараметровНовогоСостояния, СтруктураДопПараметров);
	
	
	//1. Приведем переданную таблицу перемещений к тербуемому виду:
	// Таблица имеет колонки Источник, Приемник, Количество
	// строка таблицы соответствует перемещению из состояния 1 в состояние 2, перемещения не повторяются.
	
	// Количество колонок без ПрефиксПараметровНовогоСостояния должно быть равно количеству колонок с ПрефиксПараметровНовогоСостояния
	// Сформируем также структуру, которая содержит параметры состояния товара
	СтруктураСостояния = Новый Структура;
	
	Инд=0;
	Пока Инд< Таб.Колонки.Количество() Цикл
		
		Колонка = Таб.Колонки[Инд];
		
		Если ВРег(Колонка.Имя) <> ВРег("Количество") 
			И ВРег(Колонка.Имя) <> ВРег("Стоимость") Тогда
			
			// Колонки, оканчивающиеся на ПрефиксПараметровНовогоСостояния - правые (новое состояние), им должны соответствовать такие же левые, оканчивающиеся на ПрефиксПараметровНовогоСостояния
			Если Прав(Колонка.Имя, СтрДлина(ПрефиксПараметровНовогоСостояния)) = ПрефиксПараметровНовогоСостояния  Тогда
				ИмяСоответствующейКолонки=Лев(Колонка.Имя, СтрДлина(Колонка.Имя)-СтрДлина(ПрефиксПараметровНовогоСостояния));
				Если Таб.Колонки.Найти(ИмяСоответствующейКолонки)=Неопределено Тогда
					Таб.Колонки.Добавить(ИмяСоответствующейКолонки, Колонка.ТипЗначения)
				КонецЕсли;
				// И наоборот, колонки, не оканчивающиеся на ПрефиксПараметровНовогоСостояния - левые (новое состояние), им должны соответствовать такие же правые, оканчивающиеся на ПрефиксПараметровНовогоСостояния
			Иначе
				ИмяСоответствующейКолонки=Колонка.Имя+ПрефиксПараметровНовогоСостояния;
				Если Таб.Колонки.Найти(ИмяСоответствующейКолонки)=Неопределено Тогда
					Таб.Колонки.Добавить(ИмяСоответствующейКолонки, Колонка.ТипЗначения)
				КонецЕсли;
				
				СтруктураСостояния.Вставить(Колонка.Имя);
			КонецЕсли;
		КонецЕсли;
		
		Инд=Инд+1;
	КонецЦикла;
	
	//// Из структуры удаляются параметры, на которые наложен отбор
	//Для каждого Параметр Из ПараметрыОтбораТоваров Цикл
	//	СтруктураСостояния.Удалить(Параметр);
	//	СтруктураСостояния.Удалить(Параметр+ПрефиксПараметровНовогоСостояния);
	//КонецЦикла;
	
	
	// В таблице перемещений заменим параметры состояний индексами состояний, сами параметры будут храниться в СоотвПараметровСостояний
	
	Таб.Колонки.Добавить("Источник", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	Таб.Колонки.Добавить("Приемник", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	
	СоотвПараметровСостояний = Новый Соответствие;
	
	Для Каждого Строка Из Таб Цикл // поиск выплняется полным перебором
		
		// Состояния-источники
		// Найдем состояние в соответсвии				
		НайденоСостояние=Ложь;
		Для Каждого ЭлементСостояние Из СоотвПараметровСостояний Цикл
			
			НайденоСостояние=Истина;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				НайденоСостояние = НайденоСостояние И (ЭлементСостояние.Значение[Элемент.Ключ] = Строка[Элемент.Ключ]);
			КонецЦикла;
			
			Если НайденоСостояние Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСостояние Тогда
			ИндексСостояния = ЭлементСостояние.Ключ;
		Иначе
			// Переносим в соответствие
			СтрСост = Новый Структура;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				СтрСост.Вставить(Элемент.Ключ, Строка[Элемент.Ключ]);
			КонецЦикла;
			
			ИндексСостояния = СоотвПараметровСостояний.Количество();
			СоотвПараметровСостояний.Вставить(ИндексСостояния, СтрСост);
		КонецЕсли;
		
		// Оставим в таблице ссылку на состояние
		Строка.Источник = ИндексСостояния;
		
		
		// То же самое для состояний-приемников
		// Найдем состояние в соответсвии				
		НайденоСостояние=Ложь;
		Для Каждого ЭлементСостояние Из СоотвПараметровСостояний Цикл
			
			НайденоСостояние=Истина;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				НайденоСостояние = НайденоСостояние И (ЭлементСостояние.Значение[Элемент.Ключ] = Строка[Элемент.Ключ+ПрефиксПараметровНовогоСостояния]);
			КонецЦикла;
			
			Если НайденоСостояние Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСостояние Тогда
			ИндексСостояния = ЭлементСостояние.Ключ;
		Иначе
			// Переносим в соответствие
			СтрСост = Новый Структура;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				СтрСост.Вставить(Элемент.Ключ, Строка[Элемент.Ключ+ПрефиксПараметровНовогоСостояния]);
			КонецЦикла;
			
			ИндексСостояния = СоотвПараметровСостояний.Количество();
			СоотвПараметровСостояний.Вставить(ИндексСостояния, СтрСост);
		КонецЕсли;
		
		// Оставим в таблице ссылку на состояние
		Строка.Приемник = ИндексСостояния;
		
	КонецЦикла;
	
	//
	//// Удалим ненужные колонки
	//Инд=0;
	//Пока Инд<Таб.Колонки.Количество() Цикл
	//	Колонка=Таб.Колонки[Инд];
	//	Если Колонка.Имя="Источник"
	//		ИЛИ Колонка.Имя="Приемник"
	//		ИЛИ Колонка.Имя="Количество" Тогда
	//		
	//		Инд=Инд+1;
	//	Иначе
	//		Таб.Колонки.Удалить(Колонка);
	//	КонецЕсли;
	//КонецЦикла;
	
	// "Свернем" встречные перемещения: вместо двух перемещений типа 1->2 и 2->1 оставим одно 
	// с количеством |Кол12 - Кол21| в направлении большего перемещения.
	
	// Проведем следующее преобразование: повернем пары так, чтобы количество перемещения стало положительным
	Для Каждого Строка Из Таб Цикл
		
		Если Строка.Количество<0 Тогда
			Буф=Строка.Приемник;
			Строка.Приемник = Строка.Источник;
			Строка.Источник = Буф;
			Строка.Количество = - Строка.Количество;
			Строка.Стоимость = - Строка.Стоимость;
		КонецЕсли;
	КонецЦикла;
	
	// "Свертка" встречных перемещений
	Инд=0;
	КолВо = Таб.Количество();
	
	Пока Инд<КолВо Цикл
		
		Инд2 = Инд+1;
		Пока Инд2<КолВо Цикл
			
			Строка2 = Таб[Инд2];
			Строка  = Таб[Инд];
			
			// Если найдено соответствующее встречное перемещение
			Если Строка.Источник = Строка2.Приемник
				И Строка.Приемник = Строка2.Источник Тогда
				
				Если Строка.Количество>Строка2.Количество Тогда
					УменьшитьНаКоличество = Строка2.Количество;
					УменьшитьНаСтоимость = Строка2.Стоимость;
				Иначе
					УменьшитьНаКоличество = Строка.Количество;
					УменьшитьНаСтоимость = Строка.Стоимость;
				КонецЕсли;
				
				Строка.Количество  = Строка.Количество  - УменьшитьНаКоличество;
				Строка2.Количество = Строка2.Количество - УменьшитьНаКоличество;
				
				// То же самое - со стоимостью
				Строка.Стоимость  = Строка.Стоимость  - УменьшитьНаСтоимость;
				Строка2.Стоимость  = Строка2.Стоимость  - УменьшитьНаСтоимость;
				
				// На этом обход можно прервать: быть не более одной пары встречных перемещений
				Прервать;
				
			Иначе
				Инд2 = Инд2+1;
			КонецЕсли;
			
		КонецЦикла; 
		
		Инд = Инд+1;
		
	КонецЦикла; 
	
	// Удалим обнулившиеся строки
	
	КолВо = Таб.Количество();
	Инд=0;
	Пока Инд<КолВо Цикл
		
		Строка  = Таб[Инд];
		
		Если Строка.Количество = 0 Тогда
			Таб.Удалить(Строка);
			
			КолВо = КолВо-1;
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;
	
	
	// Получили таблицу перемещений в требуемом формате
	ТаблицаПеремещений = Таб;	
	
	// Таблица перемещений содержит несколько несвязанных частей, относящихся к отдельным партиям - строкам таблицы ТаблицаТоваров
	
	// Обработка перемещений: разрыв контуров
	// Получим наборы смежных вершин для каждой вершины
	// Соотв СмежныеВершины Вершина, СмежныеВершины
	
	Источники = Новый Соответствие;
	Приемники = Новый Соответствие;
	МассивНачалДеревьев = Новый Массив;
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		ПараметрыИсточника = Источники[Строка.Источник];
		Если ПараметрыИсточника = Неопределено Тогда
			СмежныеВершины= Новый Соответствие;
			ПараметрыИсточника = Новый Структура("Пройден, СмежныеВершины", Ложь, СмежныеВершины);
		КонецЕсли;
		
		ПараметрыИсточника.СмежныеВершины.Вставить(Строка.Приемник, ТаблицаПеремещений.Индекс(Строка)); // во вложенной структуре храним смежную вершину и номер строки перемещения
		
		Источники.Вставить(Строка.Источник, ПараметрыИсточника);
		
	КонецЦикла;
	
	// Чтобы рассчитать перемещения, заменим каждый связный граф перемещений его остовным дерево
	// Для этого обойдем их все, найдем и разорвем все контуры по предложенному выше правилу.
	Для Каждого Элемент Из Источники Цикл
		ПройденныеВершины = Новый Соответствие;
		НомерВершины = Элемент.Ключ;
		ПройденныеВершины.Вставить(НомерВершины, -1);
		Если НЕ Элемент.Значение.Пройден Тогда // если от вершины еще не строился контур, обрабатываем
			РазорватьКонтуры(НомерВершины, Источники, ПройденныеВершины, ТаблицаПеремещений);
		КонецЕсли;
	КонецЦикла;
	
	// После этого таблица содержит незамкнутую последовательность перемещений. 
	// Стоимость перемещений с количеством = 0 в таблице тоже должна быть приведена к 0.
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Строка.Источник], СоотвПараметровСостояний[Строка.Приемник], Строка.Стоимость, СтруктураДопПараметров)
			
		Иначе
			
			Приемники.Вставить(Строка.Приемник, Строка.Приемник);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Теперь нужно выделить отдельные деревья, определить среднюю стоимость для каждого дерева, 
	// и начиная с самого начала каждого дерева последовательно рассчитать стоимость для каждого состояния/перемещения
	
	// Найдем начало каждого дерева - его нет в приемниках
	Для каждого Строка Из ТаблицаПеремещений Цикл
		
		// Анализируем только ненулевые дуги
		Если Строка.Количество<>0 Тогда
			
			// Если источника нет среди приемников, значит это начало дерева
			Если Приемники[Строка.Источник]=Неопределено Тогда
				МассивНачалДеревьев.Добавить(Строка.Источник);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// На данном этапе нужна информация о начальном состоянии и внешнем поступлении в каждую вершину
	
	// Будем использовать список вершин, для каждой из которых указаны смежные вершины - приемники и 
	Вершины = Новый Соответствие; // здесь нам понадобится общее количество источников, приемники
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Обработаем источник
		ПодчСтруктура = Вершины[Строка.Источник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 0, Новый Соответствие, 0);
		КонецЕсли;
		
		ПодчСтруктура.Приемники.Вставить(Строка.Приемник, Новый Структура("Количество, Стоимость", Строка.Количество, Строка.Стоимость)); // Вместе с вершиной-приемником запоминаем количество перемещения
		
		Вершины.Вставить(Строка.Источник, ПодчСтруктура);
		
		// Обработаем приемник
		ПодчСтруктура = Вершины[Строка.Приемник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 1, Новый Соответствие, 0);
		Иначе
			ПодчСтруктура.КоличествоИсточников = ПодчСтруктура.КоличествоИсточников+1;
		КонецЕсли;
		
		Вершины.Вставить(Строка.Приемник, ПодчСтруктура);
	КонецЦикла;
	
	// В структуру Вершины нужно добавить данные о начальном остатке и внешнем поступлении для каждого из состояний,
	// Можно также добавить состояний, не участвовавших в перемещениях, тогда для них тоже будет рассчитано внешнее списание
	МассивДобавленныеВершины = Новый Массив;
	ДобавитьНачальныйОстатокИВнешнееПоступление(Вершины, СоотвПараметровСостояний, ДатаНач, ДатаКон, СтруктураДопПараметров, МассивДобавленныеВершины);
	
	// Добавдленные состояния возвращаются специальным массивом, который добавляется к началам деревьев
	Для Каждого Элемент Из МассивДобавленныеВершины Цикл
		МассивНачалДеревьев.Добавить(Элемент)
	КонецЦикла;
	
	// Теперь будем обходить деревья с начала, и рассчитывать состояния и переходы между ними
	Для Каждого НачалоДерева Из МассивНачалДеревьев Цикл
		РассчитатьПуть(НачалоДерева, Вершины, СоотвПараметровСостояний, СтруктураДопПараметров);
	КонецЦикла;
	
КонецПроцедуры // СписаниеПоСредней()

// Находит контуры и разрывает их, сокращая на минимальное количество
//
// Параметры:
//	Нет.
//
Процедура РазорватьКонтуры(НомерИсхВершины, Источники, ПройденныеВершины, ТаблицаПеремещений)
	
	Приемники = Источники[НомерИсхВершины].СмежныеВершины;
	
	Для Каждого ЭлементВершина Из Приемники Цикл
		
		НомерВершины=ЭлементВершина.Ключ;
		ИндСтрокиПеремещения=ЭлементВершина.Значение;
		
		// Найдем каждую вершину-приемник в списке источников
		ПараметрыИсточника = Источники[НомерВершины];
		Если ПараметрыИсточника = Неопределено Тогда
			Продолжить; // это висячая вершина (степени 1)
		КонецЕсли;
		СмежныеВершины = ПараметрыИсточника.СмежныеВершины;
		
		// Неплохо бы запоминать уже пройденные контуры, чтобы не разбирать уже разобранные
		// Контур нужно идентифицировать последовательностью входящих в него вершин.
		
		// Проверим на замыкание
		Если ПройденныеВершины[НомерВершины]<>Неопределено Тогда
			
			// Контур найден: можно сокращать на мин. количество перемещения
			
			// Найдем дугу контура с мин. количеством
			
			// Начнем с текущей
			СтрокаЗамыкающая=ТаблицаПеремещений[ИндСтрокиПеремещения];
			МинКоличество=СтрокаЗамыкающая.Количество;
			ИндСтрокиСМинКоличеством = ИндСтрокиПеремещения;
			
			Инд=0;
			НачалсяКонтур = Ложь; // флаг начала контура
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Если Строка.Количество < МинКоличество Тогда 
							МинКоличество = Строка.Количество;
							ИндСтрокиСМинКоличеством = Элемент.Значение;
						КонецЕсли;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
			
			// Вычтем найденное минимальное количество из всех дуг контура
			
			// ... из замыкающей дуги
			СтрокаЗамыкающая.Количество = СтрокаЗамыкающая.Количество - МинКоличество;
			
			// ... из всех пройденных дуг
			Инд=0;
			НачалсяКонтур = Ложь; // флаг начала контура
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Строка.Количество = Строка.Количество - МинКоличество;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если контур разорван, для повторяющейся вершины процедуру не запускаем, пеерходим к следующему приемнику
			Продолжить;
			
		КонецЕсли;
		
		// Сделаем копию ПройденныеВершины и добавим пройденную вершину
		КопияПройденныеВершины=Новый Соответствие;
		Для Каждого Элемент Из ПройденныеВершины Цикл
			КопияПройденныеВершины.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		
		КопияПройденныеВершины.Вставить(НомерВершины, ИндСтрокиПеремещения);
		
		РазорватьКонтуры(НомерВершины, Источники, КопияПройденныеВершины, ТаблицаПеремещений);
		
		// Отметим, что от вершины уже строился контур, чтобы не вызывать аналогичную процедуру повторно
		Источники[НомерВершины].Пройден = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // РазорватьКонтуры()

// Рассчитывает отрезки пути в состояния, в которые есть переход из данной вершины
//
// Параметры:
//	Источник - номер состояния-источника.
//	Состояния - соответствие, содержащее состояния, приемники и т.д.
//	СоотвПараметровСостояний - соответствие, содержащее параметры состояния, как они представлены в БД (измерения, счета, субконто и т.д.)
//
Процедура РассчитатьПуть(Источник, Состояния, СоотвПараметровСостояний, СтруктураДопПараметров)
	
	// Состояние в начале:
	// ............
	// ............
	
	// Расчет состояния.
	// Стоимость в состоянии складывается из:
	// Начального остатка + Внешнего прихода (определяется сразу)
	// Прихода из других состояний (входящих стрелок - оперделяется сложением стрелок)
	
	// Приход из других состояний определяем по таблице перемещений
	
	// Расчет перемещения в другие состояния
	// В каждом состоянии-приемнике КоличествоРассчитанныхВходов = КоличествоРассчитанныхВходов+1
	
	СостояниеИсточник=Состояния[Источник];
	
	// Состояние можно испоьзовать в расчете, если рассчитаны все входящие стрелки
	Если СостояниеИсточник.КоличествоИсточников=СостояниеИсточник.КоличествоРассчитанныхВходов Тогда
		
		СоотвПриемники=СостояниеИсточник.Приемники; // соответствие  - примники
		
		// Рассчитаем перемещения между состояниями
		Для Каждого ЭлементПриемник Из СоотвПриемники Цикл
			
			Приемник = ЭлементПриемник.Ключ;
			Количество = ЭлементПриемник.Значение.Количество;
			СтоимостьПерв = ЭлементПриемник.Значение.Стоимость;
			
			Состояние = Состояния[Приемник];
			
			Если СостояниеИсточник.Количество > Количество Тогда
				Стоимость = Окр(СостояниеИсточник.Стоимость*Количество /СостояниеИсточник.Количество, 2);
			Иначе
				Стоимость = СостояниеИсточник.Стоимость;
			КонецЕсли;
			
			// Теперь можно сформировать записи по перемещению между состояниями
			// Передаем разницу между первоначальным движением и рассчитанным
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Источник], СоотвПараметровСостояний[Приемник], Стоимость-СтоимостьПерв, СтруктураДопПараметров);
			
			// Поступление в состояние
			Состояние.Количество = Состояние.Количество + Количество;
			Состояние.Стоимость  = Состояние.Стоимость + Стоимость;
			
			СостояниеИсточник.Количество = СостояниеИсточник.Количество - Количество;
			СостояниеИсточник.Стоимость = СостояниеИсточник.Стоимость - Стоимость;
			
			Состояние.КоличествоРассчитанныхВходов = Состояние.КоличествоРассчитанныхВходов+1;
			
			// Расчет пути из этой точки
			РассчитатьПуть(Приемник, Состояния, СоотвПараметровСостояний, СтруктураДопПараметров);
			
		КонецЦикла;
		
		// Теперь можем рассчитать внешние выходы:
		// сформируем записи по внешнему списанию из состояния Источник
		ДобавитьЗаписиПоВнешнемуСписанию(СоотвПараметровСостояний[Источник], СостояниеИсточник.Количество, СостояниеИсточник.Стоимость, СтруктураДопПараметров);
		
		// Все выходы из данного состояния рассчитаны.
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьПуть()

// Возвращает таблицу перемещений товаров между состояниями
// Зависит от конкретной структуры данных конфигурации
//
// Параметры:
//	Нет.
//
Функция ПолучитьТаблицуПеремещений(ТаблицаТоваров, ДатаНач, ДатаКон, ПрефиксПараметровНовогоСостояния, СтруктураДопПараметров)
	
	// Из структуры доп параметров добудем дополнительные параметры
	Учет            = "Упр";
	
	ИмяРесурсаСтоимость = "Стоимость";
	
	Таб = Новый ТаблицаЗначений;
	
	//Состояния:
	// Номенклатура
	// ХарактеристикаНоменклатуры
	// СерияНоменклатуры (упр, склад)
	// СтатусПартии (упр, склад)
	// СтатусПередачи (упр, переданные)
	// ДокументПередачи (упр, переданные)
	// ДоговорКонтрагента (упр, переданные)
	// ДокументОприходования
	// Качество (упр, склад)
	// Склад (упр, склад)
	// Заказ (упр, склад)
	
	// Перемещения между состояниями в УПП записываются в регистры ПартииТоваровНаСкладах и ПартииТоваровПереданные
	СтруктураИзмерений=Новый Структура;
	
	ИмяРегистра = "ПартииТоваровНаСкладах";
	СтруктураИзмерений.Вставить(ИмяРегистра, Новый Массив);
	Для Каждого Изм Из Метаданные.РегистрыНакопления[ИмяРегистра].Измерения Цикл
		СтруктураИзмерений[ИмяРегистра].Добавить(Изм.Имя);
	КонецЦикла;
	
	ИмяРегистра = "ПартииТоваровПереданные";
	СтруктураИзмерений.Вставить(ИмяРегистра, Новый Массив);
	Для Каждого Изм Из Метаданные.РегистрыНакопления[ИмяРегистра].Измерения Цикл
		СтруктураИзмерений[ИмяРегистра].Добавить(Изм.Имя);
	КонецЦикла;
	
	КодыОперацийПеремещенияСклад = Новый Массив;
	КодыОперацийПеремещенияСклад.Добавить(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами);
	КодыОперацийПеремещенияСклад.Добавить(Перечисления.КодыОперацийПартииТоваров.КорректировкаСерийИХарактеристик);
	КодыОперацийПеремещенияСклад.Добавить(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ);
	КодыОперацийПеремещенияСклад.Добавить(Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ);
	
	КодыОперацийПередача = Новый Массив;
	КодыОперацийПередача.Добавить(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию);
	КодыОперацийПередача.Добавить(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту);
	
	КодыОперацийВозвратПереданных = Новый Массив;
	КодыОперацийВозвратПереданных.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера);
	КодыОперацийВозвратПереданных.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратТарыОтКонтрагента);
	
	КодыОперацийПеремещенияПереданные = Новый Массив; //(таких движений нет)
	
	СтруктураВсехИзмерений= Новый Структура; // содержит все измерения
	
	Для Каждого Элемент Из СтруктураИзмерений Цикл
		Для Каждого Измерение Из Элемент.Значение Цикл
			
			// Вставляем сразу два поля - источник и приемник
			СтруктураВсехИзмерений.Вставить(Измерение);
			СтруктураВсехИзмерений.Вставить(Измерение+ПрефиксПараметровНовогоСостояния);
			
		КонецЦикла;
	КонецЦикла;
	// В соответствии с метаданными регистров генерируется текст запроса
	ПараметрыОтбораТоваров=Новый Массив;
	
	Запрос = Новый Запрос;
	
	ТекстДопУсловия="";
	
	// Условия отбора по ТаблицаТоваров
	Для каждого Колонка Из ТаблицаТоваров.Колонки Цикл
		
		ИмяПараметра=Колонка.Имя;
		
		ПараметрыОтбораТоваров.Добавить(ИмяПараметра);
		
		ТекстДопУсловия=ТекстДопУсловия+" И Источник."+ ИмяПараметра+" В (&Массив"+ИмяПараметра+")";
		
		Запрос.УстановитьПараметр("Массив"+ИмяПараметра, ТаблицаТоваров.ВыгрузитьКолонку(ИмяПараметра));
	КонецЦикла;
	
	// Заполним структуры измерений в соответствии с метаданными регистров:
	// Если в учете перемешений товаров могут участвовать n регистров, запрос будет состоять
	// из объединения n запросов, в каждом из которых используются n+1 таблица регистра 
	// (таблица i-го регистра, соединеная с таблицами всех регистров)
	ТекстОбщий="";
	Сч=1;
	Инд=0;
	Для Каждого Элемент Из СтруктураИзмерений Цикл
		
		Для Каждого ПодчЭлемент Из СтруктураИзмерений Цикл
			
			Текст="";
			
			// Занулим значения измерений
			Для Каждого ЭлементИзмерение Из СтруктураВсехИзмерений Цикл
				СтруктураВсехИзмерений[ЭлементИзмерение.Ключ] = "NULL";
			КонецЦикла;
			
			// Откуда
			Для Каждого Измерение Из Элемент.Значение Цикл
				СтруктураВсехИзмерений[Измерение]="Источник."+Измерение;
			КонецЦикла;
			
			// Куда - через соединения
			ТекстСоединения="";
			Для Каждого Измерение Из ПодчЭлемент.Значение Цикл
				СтруктураВсехИзмерений[Измерение+ПрефиксПараметровНовогоСостояния]="Приемник."+Измерение;
			КонецЦикла;;
			
			Для каждого ЭлементИзмерение Из СтруктураВсехИзмерений Цикл
				Текст=Текст+", " + Символы.ПС + Символы.Таб + ЭлементИзмерение.Значение + " КАК " + ЭлементИзмерение.Ключ;
			КонецЦикла;
			
			// Если  таблицы - одинаковые, нужно вставить условие на неравенство полей
			// Добавим условие на неравенство текущего и нового состояния
			ТекстУсловияНаНеравенствоПолей = "";
			
			Если Элемент.Ключ = ПодчЭлемент.Ключ Тогда
				Для Каждого ИмяПоля Из ПодчЭлемент.Значение Цикл
					
					ТекстУсловияНаНеравенствоПолей=ТекстУсловияНаНеравенствоПолей+
					Символы.ПС + "ИЛИ Источник." + ИмяПоля + " <> Приемник." + ИмяПоля;
				КонецЦикла;
				
				ТекстУсловияНаНеравенствоПолей = "И ( " + Сред(ТекстУсловияНаНеравенствоПолей, 5) + " )";
			КонецЕсли;
			
			Текст="
			|ОБЪЕДИНИТЬ ВСЕ 
			|ВЫБРАТЬ "+Сред(Текст+", Источник.Количество КАК Количество, Источник."+ИмяРесурсаСтоимость+" КАК Стоимость, Источник.Период КАК Период", 2) + "
			|	ИЗ РегистрНакопления."+Элемент.Ключ+" КАК Источник
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления."+ ПодчЭлемент.Ключ +" КАК Приемник
			|	ПО Источник.Регистратор = Приемник.Регистратор
			|	И Источник.НомерКорСтроки = Приемник.НомерСтроки 
			|	И Источник.КодОперации В (&КодыОпераций"+Инд+")" + "
			|ГДЕ
			|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон И
			|	Источник.ВидДвижения = &ВидДвиженияРасход 
			|" + ТекстУсловияНаНеравенствоПолей; // Количество при перемещении обязательно должно совпадать
			
			ТекстОбщий = ТекстОбщий+Текст;
			
			Инд=Инд+1;
		КонецЦикла;
	КонецЦикла;
	
	ТекстПоля = "";
	Для каждого ЭлементИзмерение Из СтруктураВсехИзмерений Цикл
		ТекстПоля=ТекстПоля + ", 
		|	"+ЭлементИзмерение.Ключ;
	КонецЦикла;
	
	
	
	ТекстПоляРесурсы = ", СУММА(Количество) КАК Количество, СУММА(Стоимость) КАК Стоимость";
	ТекстЗапроса = "ВЫБРАТЬ "+Сред(ТекстПоля+ТекстПоляРесурсы, 2)+" ИЗ(" + Сред(ТекстОбщий, 16) + ") КАК Подзапрос
	|СГРУППИРОВАТЬ ПО "+ Сред(ТекстПоля, 2)+"
	|УПОРЯДОЧИТЬ ПО МИНИМУМ(Подзапрос.Период) "; // Перемещения будут следовать в порядке дат первых движений
	
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("КодыОпераций0", КодыОперацийПеремещенияСклад);
	Запрос.УстановитьПараметр("КодыОпераций1", КодыОперацийПередача);
	Запрос.УстановитьПараметр("КодыОпераций2", КодыОперацийВозвратПереданных);
	Запрос.УстановитьПараметр("КодыОпераций3", КодыОперацийПеремещенияПереданные);
	
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Таб=Запрос.Выполнить().Выгрузить();
	
	// Удалим из таблицы строки, не соответствующие таблице товаров (если в ней есть несколько строк, то в запросе могут быть 
	// другие комбинации значений в разных колонках)
	СтруктураОтбора = Новый Структура;
	Если ТаблицаТоваров.Количество()>1 Тогда
		Инд=0;
		Пока Инд < Таб.Количество() Цикл;
			Строка = Таб[Инд];
			
			Для каждого Параметр Из ПараметрыОтбораТоваров Цикл
				СтруктураОтбора.Вставить(Параметр, Строка[Параметр]);
			КонецЦикла;
			
			Если ТаблицаТоваров.НайтиСтроки(СтруктураОтбора).Количество()=0 Тогда
				Таб.Удалить(Строка);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таб;
	
КонецФункции // ПолучитьТаблицуПеремещений()

// Добавляет данные о начальном остатке и внешнем поступлении в состояниях
//
// Параметры:
//	Нет.
//
Процедура ДобавитьНачальныйОстатокИВнешнееПоступление(Состояния, СоотвПараметровСостояний, ДатаНач, ДатаКон, СтруктураДопПараметров, МассивДобавляемыхВершин)
	
	// Из структуры доп параметров добудем дополнительные параметры
	
	// Запросом получим данные об остатках в состояниях на начало периода
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	ИмяРесурсаСтоимость = "Стоимость";
	
	МассивНоменклатуры  = Неопределено;
	
	ТабПартий = Неопределено;
	
	ЗапросНачОстПлюсПриход = Новый Запрос;
	ЗапросНачОстПлюсПриход.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	ЗапросНачОстПлюсПриход.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	ЗапросНачОстПлюсПриход.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросНачОстПлюсПриход.УстановитьПараметр("ДатаКон", ДатаКон);
	
	// Массив для отбора товаров в запросе
	ИндСостояния=0;
	МассивНоменклатуры  = Новый Массив;
	Для Каждого Состояние Из Состояния Цикл
		
		// Это параметры (значения измерений, счетов, субконто и т.д.), которые имеет состояние
		ПараметрыСостояния = СоотвПараметровСостояний[Состояние.Ключ];
		
		МассивНоменклатуры.Добавить(ПараметрыСостояния.Номенклатура);
		
	КонецЦикла;
	
	УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
	
	// Товары на складах
	Учет = "Упр"; 
	
	ИмяРегистра = "ПартииТоваровНаСкладах";
	
	ДопИзмерения = ", СтатусПартии";
		
	// Переданные	
	ИмяРегистраПеред = "ПартииТоваровПереданные";
	
	ДопИзмеренияПеред = ", СтатусПартии, СтатусПередачи";
	
	Текст = 
	// Партии на складах
	"ВЫБРАТЬ		
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	ДокументОприходования,
	|	СтатусПартии,
	|	Склад,
	|	Заказ,
	|	Качество,
	|	NULL КАК СтатусПередачи,
	|	NULL КАК ДоговорКонтрагента,
	|	NULL КАК ДокументПередачи,
	|	СУММА(Количество) КАК Количество,
	|	СУММА(Стоимость) КАК Стоимость 
	|ИЗ (
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Склад,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	ДокументОприходования,
	|	Заказ,
	|	Качество,
	|	КоличествоОстаток КАК Количество,
	|	"+ИмяРесурсаСтоимость+"Остаток КАК Стоимость " + ДопИзмерения + "
	|ИЗ
	|	РегистрНакопления."+ИмяРегистра+".Остатки(&ДатаНач" + ?(МассивНоменклатуры<>Неопределено, ", Номенклатура В (&МассивНоменклатуры)", "") + ") КАК ПартииОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Склад,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	ДокументОприходования,
	|	Заказ,
	|	Качество,
	|
	|	ВЫБОР 
	|		КОГДА ВидДвижения = &ВидДвиженияПриход ТОГДА Количество
	|		КОГДА ВидДвижения = &ВидДвиженияРасход ТОГДА -Количество
	|		КОНЕЦ КАК Количество,
	|	ВЫБОР 
	|		КОГДА ВидДвижения = &ВидДвиженияПриход ТОГДА "+ИмяРесурсаСтоимость+"
	|		КОГДА ВидДвижения = &ВидДвиженияРасход ТОГДА -"+ИмяРесурсаСтоимость+"
	|		КОНЕЦ КАК Стоимость
	|	 " + ДопИзмерения + "
	|ИЗ
	|	РегистрНакопления."+ИмяРегистра+" КАК ПартииПриход
	|
	|ГДЕ " + ?(МассивНоменклатуры<>Неопределено, " Номенклатура В (&МассивНоменклатуры) И ", "") + "
	|	Период МЕЖДУ &ДатаНач И &ДатаКон И КодОперации В (&СписокКодов)
	|) ОстПлюсПрих
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	ДокументОприходования,
	|	Заказ,
	|	Качество"+ДопИзмерения + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	// Переданные на реализацию партии
	|ВЫБРАТЬ
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	NULL СерияНоменклатуры,
	|	ДокументОприходования,
	|	СтатусПартии,
	|	NULL Склад,
	|	NULL Заказ,
	|	NULL Качество,
	|	СтатусПередачи,
	|	ДоговорКонтрагента,
	|	ДокументПередачи,
	|	СУММА(Количество) КАК Количество,
	|	СУММА(Стоимость) КАК Стоимость 
	|ИЗ	(
	|ВЫБРАТЬ 
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ДокументОприходования,
	|	ДоговорКонтрагента,
	|	ДокументПередачи,
	|	КоличествоОстаток КАК Количество,
	|	"+ИмяРесурсаСтоимость+"Остаток КАК Стоимость " + ДопИзмеренияПеред +"
	|ИЗ
	|	РегистрНакопления." + ИмяРегистраПеред + ".Остатки(&ДатаНач" + ?(МассивНоменклатуры<>Неопределено, ", Номенклатура В (&МассивНоменклатуры)", "") + ") КАК ПартииТоваровПереданныеОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ДокументОприходования,
	|	ДоговорКонтрагента,
	|	ДокументПередачи,
	|	ВЫБОР 
	|		КОГДА ВидДвижения = &ВидДвиженияПриход ТОГДА Количество
	|		КОГДА ВидДвижения = &ВидДвиженияРасход ТОГДА -Количество
	|		КОНЕЦ КАК Количество,
	|	ВЫБОР 
	|		КОГДА ВидДвижения = &ВидДвиженияПриход ТОГДА "+ИмяРесурсаСтоимость+"
	|		КОГДА ВидДвижения = &ВидДвиженияРасход ТОГДА -"+ИмяРесурсаСтоимость+"
	|		КОНЕЦ КАК Стоимость
	|	" + ДопИзмеренияПеред + "
	|ИЗ
	|	РегистрНакопления." + ИмяРегистраПеред + " КАК ПартииТоваровПереданные
	|
	|ГДЕ " + ?(МассивНоменклатуры<>Неопределено, " Номенклатура В (&МассивНоменклатуры) И ", "") + "
	|	Период МЕЖДУ &ДатаНач И &ДатаКон И КодОперации В (&СписокКодов)
	|) ОстПлюсПрих
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ДокументОприходования,
	|	ДокументПередачи,
	|	ДоговорКонтрагента
	|	" + ДопИзмеренияПеред;
	
	ЗапросНачОстПлюсПриход.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	// Коды операций выбираемых в запросе движений (внешнего поступления)
	СписокКодов = Новый Массив;
	СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.Поступление);
	СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя); // продукии текущего месяца
	СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов);
	СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратТарыОтКонтрагента);
	
	// Добавляем коды исключаемого расхода:
	
	// Вычитаем списание по возврату поставщику: оно не должно корректироваться
	СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику);
	
	//// Вычитаем списание на постоянные затраты, если передан такой признак
	//Если НеСписыватьНаПостоянныеЗатраты Тогда
	//	СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеНаЗатраты);
	//КонецЕсли;
	
	ЗапросНачОстПлюсПриход.УстановитьПараметр("СписокКодов", СписокКодов);
	
	ЗапросНачОстПлюсПриход.Текст = Текст;
	
	ТабПартий = ЗапросНачОстПлюсПриход.Выполнить().Выгрузить();
	ТабПартий.Колонки.Добавить("Найдена", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Состояние Из Состояния Цикл
		
		// Это параметры (значения измерений, счетов, субконто и т.д.), которые имеет состояние
		ПараметрыСостояния = СоотвПараметровСостояний[Состояние.Ключ];
		
		Количество=0;
		Стоимость=0;
		
		// Тут должны определяться КолНачОст + КолПриход (внеш), СумНачОст + СумПриход(внеш) по данным из базы
		Парам=Новый Структура;
		Для Каждого Колонка Из ТабПартий.Колонки Цикл
			Если ПараметрыСостояния.Свойство(Колонка.Имя) Тогда
				
				Парам.Вставить(Колонка.Имя, ПараметрыСостояния[Колонка.Имя]);
			КонецЕсли;
		КонецЦикла;
		
		НайдСтроки=ТабПартий.НайтиСтроки(Парам);
		Для Каждого СтрокаПартии Из НайдСтроки Цикл
			Количество = Количество + СтрокаПартии.Количество;
			Стоимость = Стоимость + СтрокаПартии.Стоимость;
			СтрокаПартии.Найдена = Истина;
		КонецЦикла;
		
		Состояние.Значение.Вставить("Количество", Количество);
		Состояние.Значение.Вставить("Стоимость",  Стоимость);
	КонецЦикла;
	
	// Теперь добавим состояния не участвующие в перемещениях (обособленные вершины) - тем, по которым не было перемещений, чтобы по ним внешнее списание рассчиталось той же процедурой, что и для перемещений
	ИндСостояния=Состояния.Количество();
	Для Каждого СтрокаТаблицы Из ТабПартий Цикл
		Если НЕ СтрокаТаблицы.Найдена Тогда
			Количество = СтрокаТаблицы.Количество;
			Сумма      = СтрокаТаблицы.Стоимость;
					   
			ИндСостояния=ИндСостояния+1;
			
			// Добавим состояние со всеми необходимыми параметрами
			Состояния.Вставить(ИндСостояния, 
			Новый Структура("КоличествоИсточников, КоличествоРассчитанныхВходов, Приемники, Количество, Стоимость", 0, 0, Новый Соответствие, Количество, Сумма));
			
			СоотвПараметровСостояний.Вставить(ИндСостояния, 
			Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ДокументОприходования, СтатусПартии, Склад, Заказ, ДоговорКонтрагента, ДокументПередачи, СтатусПередачи, Качество", 
			СтрокаТаблицы.Номенклатура, 
			СтрокаТаблицы.ХарактеристикаНоменклатуры, 
			СтрокаТаблицы.СерияНоменклатуры, 
			СтрокаТаблицы.ДокументОприходования,
			СтрокаТаблицы.СтатусПартии,
			СтрокаТаблицы.Склад,
			СтрокаТаблицы.Заказ,
			СтрокаТаблицы.ДоговорКонтрагента,
			СтрокаТаблицы.ДокументПередачи,
			СтрокаТаблицы.СтатусПередачи,
			СтрокаТаблицы.Качество));
			
			МассивДобавляемыхВершин.Добавить(ИндСостояния);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьНачальныйОстатокИВнешнееПоступление()

// Добавляет в базу данных записи по перемещению в другое состояние
//
// Параметры:
//	Нет.
//
Процедура ДобавитьЗаписиПоПеремещению(ПараметрыСостоянияИсточника, ПараметрыСостоянияПриемника, Стоимость, СтруктураДопПараметров)
	
	// Выполним движение по сторнированию перемещения
	
	// Если сумма движения равна 0, ничего не добавляем
	Если Стоимость=0 Тогда
		Возврат;
	КонецЕсли;
	
	Учет = "Упр";
	
	ИмяРесурсаСтоимость = "Стоимость";
	
	// По параметрам источника и приемника определим вид партий
	Договор = Неопределено;
	ПараметрыСостоянияИсточника.Свойство("ДоговорКонтрагента", Договор);
	Если Не ЗначениеНеЗаполнено(Договор) Тогда
		Источник =  "Переданные";
	Иначе
		Источник =  "НаСкладах";
	КонецЕсли;
	
	Договор = Неопределено;
	ПараметрыСостоянияПриемника.Свойство("ДоговорКонтрагента", Договор);
	Если Не ЗначениеНеЗаполнено(Договор) Тогда
		Приемник =  "Переданные";
	Иначе
		Приемник =  "НаСкладах";
	КонецЕсли;
	
	Если Источник =  "НаСкладах" Тогда
		ИмяРег="ПартииТоваровНаСкладах";
	Иначе
		ИмяРег="ПартииТоваровПереданные";
	КонецЕсли;
	
	
	СтрокаДокумента= Новый Структура;
	
	// Трансляция параметров состояния-источника в формат регистра СписанныеТовары
	СтрокаДокумента.Вставить("Номенклатура", ПараметрыСостоянияИсточника.Номенклатура);
	СтрокаДокумента.Вставить("ХарактеристикаНоменклатуры", ПараметрыСостоянияИсточника.ХарактеристикаНоменклатуры);
	
	Если Источник =  "НаСкладах" Тогда
		СтрокаДокумента.Вставить("Склад", ПараметрыСостоянияИсточника.Склад);
		СтрокаДокумента.Вставить("СерияНоменклатуры", ПараметрыСостоянияИсточника.СерияНоменклатуры);
		СтрокаДокумента.Вставить("Качество", ПараметрыСостоянияИсточника.Качество);
		СтрокаДокумента.Вставить("СтатусПартии", ПараметрыСостоянияИсточника.СтатусПартии);
	Иначе
		СтрокаДокумента.Вставить("ДоговорКонтрагента", ПараметрыСостоянияИсточника.ДоговорКонтрагента);
		СтрокаДокумента.Вставить("ДокументПередачи", ПараметрыСостоянияИсточника.ДокументПередачи);
		СтрокаДокумента.Вставить("СтатусПередачи", ПараметрыСостоянияИсточника.СтатусПередачи);
		СтрокаДокумента.Вставить("СтатусПартии", ПараметрыСостоянияИсточника.СтатусПартии);
	КонецЕсли;
	
	СтрокаДокумента.Вставить("Заказ", ПараметрыСостоянияИсточника.Заказ);
	СтрокаДокумента.Вставить("ДокументОприходования", ПараметрыСостоянияИсточника.ДокументОприходования);
	СтрокаДокумента.Вставить("ДокументОприходованияНовый", ПараметрыСостоянияПриемника.ДокументОприходования);
	
	// Трансляция параметров состояния-приемника в формат регистра СписанныеТовары
	СтрокаДокумента.Вставить("НоменклатураНовая", ПараметрыСостоянияПриемника.Номенклатура);
	СтрокаДокумента.Вставить("ХарактеристикаНоменклатурыНовая", ПараметрыСостоянияПриемника.ХарактеристикаНоменклатуры);
	СтрокаДокумента.Вставить("СерияНоменклатурыНовая", ПараметрыСостоянияПриемника.СерияНоменклатуры);
	
	СтрокаДокумента.Вставить("ЗаказСписания", ПараметрыСостоянияПриемника.Заказ);
	
	Если Приемник = "Переданные" Тогда
		СтрокаДокумента.Вставить("ДоговорКонтрагента", ПараметрыСостоянияПриемника.ДоговорКонтрагента);
		СтрокаДокумента.Вставить("ДокументПередачи", ПараметрыСостоянияПриемника.ДокументПередачи);
		СтрокаДокумента.Вставить("СтатусПартии", ПараметрыСостоянияПриемника.СтатусПартии);
		СтрокаДокумента.Вставить("СтатусПередачи", ПараметрыСостоянияПриемника.СтатусПередачи);
	ИначеЕсли Приемник="НаСкладах" Тогда
		СтрокаДокумента.Вставить("КачествоНовое", ПараметрыСостоянияПриемника.Качество);
		СтрокаДокумента.Вставить("СкладПолучатель", ПараметрыСостоянияПриемника.Склад);
		СтрокаДокумента.Вставить("СтатусПартии", ПараметрыСостоянияПриемника.СтатусПартии);
	КонецЕсли;
	
	
	СтрокаДокумента.Вставить("СтатьяЗатрат", Неопределено);
	СтрокаДокумента.Вставить("ЗаказСписания", Неопределено);
	СтрокаДокумента.Вставить("ОтражатьВУправленческомУчете", Истина);
	СтрокаДокумента.Вставить("КоличествоПоступление", 0);

	
	СуммаКорректировки = (Стоимость);
	
	// Если корректировать нечего, движений не добавляем
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движение              = ДобавитьДвижение(ИмяРег+Учет, СтруктураДопПараметров);
	Движение.Период       = СтруктураДопПараметров.Период;
	Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
	
	Движение.Номенклатура = ПараметрыСостоянияИсточника.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = ПараметрыСостоянияИсточника.ХарактеристикаНоменклатуры;
	
	Если Источник =  "НаСкладах" Тогда
		Движение.Склад      = ПараметрыСостоянияИсточника.Склад;
		Движение.СерияНоменклатуры = ПараметрыСостоянияИсточника.СерияНоменклатуры;
		Движение.Качество = ПараметрыСостоянияИсточника.Качество;
		Движение.СтатусПартии = ПараметрыСостоянияИсточника.СтатусПартии;
	Иначе
		Движение.ДоговорКонтрагента      = ПараметрыСостоянияИсточника.ДоговорКонтрагента;
		Движение.ДокументПередачи = ПараметрыСостоянияИсточника.ДокументПередачи;
		Движение.СтатусПередачи = ПараметрыСостоянияИсточника.СтатусПередачи;
		Движение.СтатусПартии = ПараметрыСостоянияИсточника.СтатусПартии;
	КонецЕсли;
	
	Движение.ДокументОприходования = ПараметрыСостоянияИсточника.ДокументОприходования;
	
	Движение.СтатусПартии = ПараметрыСостоянияИсточника.СтатусПартии;
	
	Движение.Количество   = 0;
	Движение[ИмяРесурсаСтоимость]  = СуммаКорректировки;
	
	// Коды операций
	СтрокаДокумента.Вставить("КодОперацииПартииТоваров", Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами); // по умолчанию
	Если Источник = "НаСкладах" И Приемник = "Переданные" Тогда
		СтрокаДокумента.Вставить("КодОперацииПартииТоваров", Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию);
	ИначеЕсли Источник = "Переданные" И Приемник = "НаСкладах" Тогда
		СтрокаДокумента.Вставить("КодОперацииПартииТоваров", Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера);
	КонецЕсли;
	Движение.КодОперации = СтрокаДокумента.КодОперацииПартииТоваров;
	
	ВыполнитьКорДвижение(Источник, СтрокаДокумента, СтруктураДопПараметров, Движение)	
	
КонецПроцедуры // ДобавитьЗаписиПоПеремещению()

// Здесь формируются все записи по внешнему списанию из состояния ПараметрыСостоянияИсточника
//
// Параметры:
//	Нет.
//
Процедура ДобавитьЗаписиПоВнешнемуСписанию(ПараметрыСостоянияИсточника, Количество, Стоимость, СтруктураДопПараметров)
	
	// Если в состоянии ничего не осталось, ничего не делать
	Если Количество=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Выполним движение по сторнированию перемещения
	
	Учет  = "Упр";
	
	ИмяРесурсаСтоимость = "Стоимость";
	
	// По параметрам источника и приемника определим вид партий
	Договор = Неопределено;
	ПараметрыСостоянияИсточника.Свойство("ДоговорКонтрагента", Договор);
	Если Не ЗначениеНеЗаполнено(Договор) Тогда
		Источник =  "Переданные";
		ИмяРег = "ПартииТоваровПереданные";
	Иначе
		Источник =  "НаСкладах";
		ИмяРег = "ПартииТоваровНаСкладах";
	КонецЕсли;
	
	Ст= Новый Структура;
	
	// Трансляция параметров состояния-источника в формат регистра СписанныеТовары
	Ст.Вставить("Номенклатура", ПараметрыСостоянияИсточника.Номенклатура);
	Ст.Вставить("ХарактеристикаНоменклатуры", ПараметрыСостоянияИсточника.ХарактеристикаНоменклатуры);
	
	Если Источник =  "НаСкладах" Тогда
		Ст.Вставить("Склад", ПараметрыСостоянияИсточника.Склад);
		Ст.Вставить("СерияНоменклатуры", ПараметрыСостоянияИсточника.СерияНоменклатуры);
		Ст.Вставить("Качество", ПараметрыСостоянияИсточника.Качество);
		Ст.Вставить("СтатусПартии", ПараметрыСостоянияИсточника.СтатусПартии);
	Иначе
		Ст.Вставить("ДоговорКонтрагента", ПараметрыСостоянияИсточника.ДоговорКонтрагента);
		Ст.Вставить("ДокументПередачи", ПараметрыСостоянияИсточника.ДокументПередачи);
		Ст.Вставить("СтатусПередачи", ПараметрыСостоянияИсточника.СтатусПередачи);
		Ст.Вставить("СтатусПартии", ПараметрыСостоянияИсточника.СтатусПартии);
	КонецЕсли;
	
	Ст.Вставить("ДокументОприходования", ПараметрыСостоянияИсточника.ДокументОприходования);
	Ст.Вставить("Заказ", ПараметрыСостоянияИсточника.Заказ);
	
	// Найдем уже выполненные движения по списанию из этого состояния
	ВыпДвижения = СтруктураДопПараметров.ТаблицаВыполненныхДвижений.НайтиСтроки(Ст);
	
	//	ИтогоСтоимость = 0;
	Для Каждого ВыпДвижение Из ВыпДвижения Цикл
		
		Если Количество=0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Коды операций
		Ст.Вставить("КодОперацииПартииТоваров", ВыпДвижение.КодОперацииПартииТоваров);
		
		Ст.Вставить("СтатьяЗатрат", ВыпДвижение.СтатьяЗатрат);
		Ст.Вставить("ЗаказСписания", ВыпДвижение.ЗаказСписания);
		Ст.Вставить("ОтражатьВУправленческомУчете", Истина);
		Ст.Вставить("КоличествоПоступление", 0);
		
		СтрокаДокумента = Ст;
		
		Если ВыпДвижение.Количество<Количество Тогда
			КоэффСписания = ВыпДвижение.Количество/Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;
		
		СтоимостьСписанияПоСредней = Окр(Стоимость*КоэффСписания, 2);
		СуммаКорректировки = (СтоимостьСписанияПоСредней - ВыпДвижение.Стоимость);
		
		// Если корректировать нечего, движений не добавляем
		Если СуммаКорректировки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение              = ДобавитьДвижение(ИмяРег+Учет, СтруктураДопПараметров);
		Движение.Период       = СтруктураДопПараметров.Период;
		Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
		
		Движение.Номенклатура = ПараметрыСостоянияИсточника.Номенклатура;
		Движение.ХарактеристикаНоменклатуры = ПараметрыСостоянияИсточника.ХарактеристикаНоменклатуры;
		
		Если Источник =  "НаСкладах" Тогда
			Движение.Склад      = ПараметрыСостоянияИсточника.Склад;
			Движение.СерияНоменклатуры = ПараметрыСостоянияИсточника.СерияНоменклатуры;
			Движение.Качество = ПараметрыСостоянияИсточника.Качество;
			Движение.СтатусПартии = ПараметрыСостоянияИсточника.СтатусПартии;
		Иначе
			Движение.ДоговорКонтрагента      = ПараметрыСостоянияИсточника.ДоговорКонтрагента;
			Движение.ДокументПередачи = ПараметрыСостоянияИсточника.ДокументПередачи;
			Движение.СтатусПередачи = ПараметрыСостоянияИсточника.СтатусПередачи;
			Движение.СтатусПартии = ПараметрыСостоянияИсточника.СтатусПартии;
		КонецЕсли;
		
		Движение.ДокументОприходования = ПараметрыСостоянияИсточника.ДокументОприходования;
		
		Движение.СтатусПартии = ПараметрыСостоянияИсточника.СтатусПартии;
		
		Движение.Количество   = 0;
		Движение[ИмяРесурсаСтоимость]  = СуммаКорректировки; // корректировка выполненного движения
		
		Количество = Количество - ВыпДвижение.Количество;
		Стоимость = Стоимость - СтоимостьСписанияПоСредней;
		
		
		Движение.КодОперации = ВыпДвижение.КодОперацииПартииТоваров;
		
		// При внешнем списании оставляем ссылку на исходное движение
		Движение.ДокументДвиженияПериод = ВыпДвижение.Период;
		Движение.ДокументДвижения = ВыпДвижение.Регистратор;
		
		ВыполнитьКорДвижение(Источник, ВыпДвижение, СтруктураДопПараметров, Движение);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьЗаписиПоВнешнемуСписанию()

// Процедура вызова корректировки списания
//
Процедура СкорректироватьСписание(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры = Неопределено) Экспорт
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	ИмяРесурсаСтоимость = "Стоимость";
	
	// Признак принадлежности формируемых движений регламентному документу
	ДвиженияПоРегламентномуДокументу = РегламентныйДокумент<>Неопределено;
	
	// Сформируем запрос для получения фактических движений 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
	МассивДокументовОприходования = ТаблицаТоваров.ВыгрузитьКолонку("ДокументОприходования");
	УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивДокументовОприходования", МассивДокументовОприходования);
	
	
	// Формирование запроса по списанию
	
	// Общие коды операции, применяемые во всех учетах
	Запрос.УстановитьПараметр("КодОперацииПоступлениеДопРасходов", КодыОпераций.ПоступлениеДопРасходов);
	
	МассивСписаниеНаСебестоимость = Новый Массив;
	МассивСписаниеНаСебестоимость.Добавить(КодыОпераций.Реализация);
	МассивСписаниеНаСебестоимость.Добавить(КодыОпераций.РеализацияРозница);
	МассивСписаниеНаСебестоимость.Добавить(КодыОпераций.РеализацияКомиссия);
	Запрос.УстановитьПараметр("КодыСписаниеНаСебестоимость", МассивСписаниеНаСебестоимость);
	
	Запрос.УстановитьПараметр("КодыСписаниеНаЗатраты", КодыОпераций.СписаниеНаЗатраты);
	
	Запрос.УстановитьПараметр("КодКомплектация", КодыОпераций.Комплектация);
	
	// Все коды внешних списаний
	МассивВнешСписание = Новый Массив;
	МассивВнешСписание.Добавить(КодыОпераций.ВозвратПоставщику);
	МассивВнешСписание.Добавить(КодыОпераций.Комплектация);
	МассивВнешСписание.Добавить(КодыОпераций.ПередачаТарыКонтрагенту);
	МассивВнешСписание.Добавить(КодыОпераций.Реализация);
	МассивВнешСписание.Добавить(КодыОпераций.РеализацияРозница);
	МассивВнешСписание.Добавить(КодыОпераций.РеализацияКомиссия);
	МассивВнешСписание.Добавить(КодыОпераций.СписаниеНаЗатраты);
	МассивВнешСписание.Добавить(КодыОпераций.СписаниеПоИнвентаризации);
	МассивВнешСписание.Добавить(КодыОпераций.СписаниеПоОрдеру);
	
	Запрос.УстановитьПараметр("КодыСписание", МассивВнешСписание);
	
	ЗаполнитьЗапросПоСписаниюУпр(Запрос, МассивНоменклатуры);
	
	// Таблица по списанию
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРезультатаЗапроса.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));
	ТаблицаРезультатаЗапроса.ЗаполнитьЗначения(Истина, "ОтражатьВУправленческомУчете");
	
	// Структура общих параметров, используемых в большинстве процедур
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("УчетнаяПолитика", ПолучитьУчетнуюПолитику(ДатаКон));
	СтруктураПараметров.Вставить("ТаблицаВыполненныхДвижений", ТаблицаРезультатаЗапроса);
	
	СтруктураПараметров.Вставить("РегламентныйДокумент", РегламентныйДокумент);
	
	// Движения - наборы записей по регистрам
	СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаРезультатаЗапроса);
	
	ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаРезультатаЗапроса, РегламентныйДокумент.Дата, РегламентныйДокумент, Ложь);
	
	// Вызов процедуры расчета по средней
	РассчитатьСписаниеПоСредней(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураПараметров);
	
	ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаРезультатаЗапроса, Ложь);
	
КонецПроцедуры

// Запрос по списанию: Упр учет
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьЗапросПоСписаниюУпр(Запрос, МассивНоменклатуры)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НаСкладах"" КАК СписаноИз,
	|	НЕОПРЕДЕЛЕНО КАК Организация,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	СУММА(Источник.Количество) КАК Количество,
	|	СУММА(Источник.Стоимость) КАК Стоимость,
	|	0 КАК СтоимостьПоступление,
	|	NULL КАК СтатусПередачи,
	|	NULL КАК ДокументПередачи,
	|	NULL КАК ДоговорКонтрагента,
	|	ВЫБОР КОГДА НЕ((Себестоимость.ЗаказПокупателя) ЕСТЬ NULL ) ТОГДА Себестоимость.ЗаказПокупателя КОГДА НЕ((Затраты.Заказ) ЕСТЬ NULL ) ТОГДА Затраты.Заказ ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК ЗаказСписания,
	|	Источник.КодОперации КАК КодОперацииПартииТоваров,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвижения ИНАЧЕ Источник.Регистратор КОНЕЦ КАК Регистратор,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвиженияПериод ИНАЧЕ Источник.Период КОНЕЦ КАК Период,
	|	Источник.Качество,
	|	Затраты.СтатьяЗатрат,
	|	ВЫБОР КОГДА НЕ((Себестоимость.Подразделение) ЕСТЬ NULL ) ТОГДА Себестоимость.Подразделение КОГДА НЕ((Затраты.Подразделение) ЕСТЬ NULL ) ТОГДА Затраты.Подразделение ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК Подразделение,
	|	Затраты.НоменклатурнаяГруппа
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Затраты КАК Затраты
	|		ПО Источник.Регистратор = Затраты.Регистратор И Источник.НомерКорСтроки = Затраты.НомерСтроки И (Источник.КодОперации В (&КодыСписаниеНаЗатраты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор И Источник.НомерКорСтроки = Себестоимость.НомерСтроки И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон И
	|	Источник.ВидДвижения = &ВидДвиженияРасход И
	|	Источник.КодОперации В(&КодыСписание)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	Источник.КодОперации,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвижения ИНАЧЕ Источник.Регистратор КОНЕЦ,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвиженияПериод ИНАЧЕ Источник.Период КОНЕЦ,
	|	Источник.Качество,
	|	Затраты.СтатьяЗатрат,
	|	ВЫБОР КОГДА НЕ((Себестоимость.Подразделение) ЕСТЬ NULL ) ТОГДА Себестоимость.Подразделение КОГДА НЕ((Затраты.Подразделение) ЕСТЬ NULL ) ТОГДА Затраты.Подразделение ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,
	|	Затраты.НоменклатурнаяГруппа,
	|	ВЫБОР КОГДА НЕ((Себестоимость.ЗаказПокупателя) ЕСТЬ NULL ) ТОГДА Себестоимость.ЗаказПокупателя КОГДА НЕ((Затраты.Заказ) ЕСТЬ NULL ) ТОГДА Затраты.Заказ ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Источник.Количество) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Переданные"",
	|	НЕОПРЕДЕЛЕНО,
	|	Источник.Номенклатура,
	|	NULL,
	|	Источник.ХарактеристикаНоменклатуры,
	|	NULL,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	NULL,
	|	СУММА(Источник.Количество),
	|	СУММА(Источник.Стоимость),
	|	0,
	|	Источник.СтатусПередачи,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	Себестоимость.ЗаказПокупателя,
	|	Источник.КодОперации,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвижения ИНАЧЕ Источник.Регистратор КОНЕЦ,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвиженияПериод ИНАЧЕ Источник.Период КОНЕЦ,
	|	NULL,
	|	NULL,
	|	Себестоимость.Подразделение,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор И Источник.НомерКорСтроки = Себестоимость.НомерСтроки И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон И
	|	Источник.ВидДвижения = &ВидДвиженияРасход И
	|	Источник.КодОперации В(&КодыСписание)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.ДоговорКонтрагента,
	|	Источник.ДокументПередачи,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.СтатусПередачи,
	|	Себестоимость.ЗаказПокупателя,
	|	Источник.КодОперации,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвижения ИНАЧЕ Источник.Регистратор КОНЕЦ,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвиженияПериод ИНАЧЕ Источник.Период КОНЕЦ,
	|	Себестоимость.Подразделение
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Источник.Количество) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	
	// Добавим дополнительный отбор по номенклатуре
	Если МассивНоменклатуры <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ Источник.Номенклатура В (&МассивНоменклатуры)
		|	И Источник.ДокументОприходования В (&МассивДокументовОприходования) И ");
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗапросПоСписанию()

// Запрос по перемещению: Упр учет
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьЗапросПоПеремещениюУпр(Запрос, МассивНоменклатуры)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НаСкладах"" КАК СписаноИз,
	|	НЕОПРЕДЕЛЕНО КАК Организация,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	СУММА(Источник.Количество) КАК Количество,
	|	СУММА(Источник.Стоимость) КАК Стоимость,
	|	0 КАК СтоимостьПоступление,
	|	Переданные.СтатусПередачи,
	|	Переданные.ДокументПередачи,
	|	Переданные.ДоговорКонтрагента,
	|	НаСкладахПоступление.Склад КАК СкладПолучатель,
	|	НаСкладахПоступление.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыНовая,
	|	НаСкладахПоступление.СерияНоменклатуры КАК СерияНоменклатурыНовая,
	|	Источник.КодОперации КАК КодОперацииПартииТоваров,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвижения ИНАЧЕ Источник.Регистратор КОНЕЦ КАК Регистратор,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвиженияПериод ИНАЧЕ Источник.Период КОНЕЦ КАК Период,
	|	Источник.Качество,
	|	НаСкладахПоступление.Качество КАК КачествоНовое,
	|	ВЫБОР КОГДА Источник.КодОперации = &КодКомплектация ТОГДА НаСкладахПоступление.Номенклатура ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК НоменклатураНовая,
	|	ВЫБОР КОГДА Источник.КодОперации = &КодКомплектация ТОГДА НаСкладахПоступление.Количество ИНАЧЕ 0 КОНЕЦ КАК КоличествоПоступление,
	|	НаСкладахПоступление.ДокументОприходования КАК ДокументОприходованияНовый
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданные КАК Переданные
	|		ПО Источник.Регистратор = Переданные.Регистратор И Источник.НомерКорСтроки = Переданные.НомерСтроки И (Источник.КодОперации В (&КодыСписаниеНаПереданные))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладахПоступление
	|		ПО Источник.Регистратор = НаСкладахПоступление.Регистратор И Источник.НомерКорСтроки = НаСкладахПоступление.НомерСтроки И (Источник.КодОперации В (&КодыПеремещениеСклад))
	|
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон И
	|	Источник.ВидДвижения = &ВидДвиженияРасход
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	Источник.КодОперации,
	|	Переданные.СтатусПередачи,
	|	Переданные.ДокументПередачи,
	|	Переданные.ДоговорКонтрагента,
	|	НаСкладахПоступление.Склад,
	|	НаСкладахПоступление.ХарактеристикаНоменклатуры,
	|	НаСкладахПоступление.СерияНоменклатуры,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвижения ИНАЧЕ Источник.Регистратор КОНЕЦ,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвиженияПериод ИНАЧЕ Источник.Период КОНЕЦ,
	|	Источник.Качество,
	|	НаСкладахПоступление.Качество,
	|	ВЫБОР КОГДА Источник.КодОперации = &КодКомплектация ТОГДА НаСкладахПоступление.Номенклатура ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,
	|	ВЫБОР КОГДА Источник.КодОперации = &КодКомплектация ТОГДА НаСкладахПоступление.Количество ИНАЧЕ 0 КОНЕЦ,
	|	Источник.ДокументОприходования.Дата,
	|	НаСкладахПоступление.ДокументОприходования
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Источник.Количество) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Переданные"",
	|	НЕОПРЕДЕЛЕНО,
	|	Источник.Номенклатура,
	|	НаСкладах.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	НаСкладах.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.ДокументОприходования.Дата,
	|	Источник.СтатусПартии,
	|	НаСкладах.Заказ,
	|	СУММА(Источник.Количество),
	|	СУММА(Источник.Стоимость),
	|	0,
	|	Источник.СтатусПередачи,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Источник.КодОперации,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвижения ИНАЧЕ Источник.Регистратор КОНЕЦ,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвиженияПериод ИНАЧЕ Источник.Период КОНЕЦ,
	|	NULL,
	|	НаСкладах.Качество,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладах
	|		ПО Источник.Регистратор = НаСкладах.Регистратор И Источник.НомерКорСтроки = НаСкладах.НомерСтроки И (Источник.КодОперации В (&КодыСписаниеНаСклад))
	|
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон И
	|	Источник.ВидДвижения = &ВидДвиженияРасход
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.ДоговорКонтрагента,
	|	Источник.ДокументПередачи,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.СтатусПередачи,
	|	НаСкладах.Склад,
	|	НаСкладах.СерияНоменклатуры,
	|	НаСкладах.Заказ,
	|	Источник.КодОперации,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвижения ИНАЧЕ Источник.Регистратор КОНЕЦ,
	|	ВЫБОР КОГДА Источник.ДокументДвижения <> НЕОПРЕДЕЛЕНО ТОГДА Источник.ДокументДвиженияПериод ИНАЧЕ Источник.Период КОНЕЦ,
	|	НаСкладах.Качество,
	|	Источник.ДокументОприходования.Дата
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Источник.Количество) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	
	// Добавим дополнительный отбор по номенклатуре
	Если МассивНоменклатуры <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ Источник.Номенклатура В (&МассивНоменклатуры)
		|	И Источник.ДокументОприходования В (&МассивДокументовОприходования) И ");
		
	КонецЕсли;
КонецПроцедуры // ЗаполнитьЗапросПоПеремещениюУпр()

////////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ ДОП.РАСХОДОВ

// Удаляет даты восстановления последовательности, большие Дата
Процедура УдалитьДатыВосстановленияПозже(Дата) Экспорт

	// Чтобы удалить из регистра записи начиная с Дата, придется переписать весь регистр
	// Набор записей нужно записывать по частям
	Набор = РегистрыСведений.ДатыВосстановленияПоследовательностиПартионныйУчет.СоздатьНаборЗаписей();
	Набор.Прочитать();
	ТаблицаЗаписей = Набор.Выгрузить();
	Набор.Очистить();
	Набор.Записать(Истина);
	
	СтрокВНаборе = 0;
	
	НачатьТранзакцию();
	
	Для Каждого Строка Из ТаблицаЗаписей Цикл
		
		Если НачалоДня(Строка.ДатаВосстановления)<=НачалоДня(Дата) Тогда
			НоваяЗапись = Набор.Добавить();
			НоваяЗапись.ДатаВосстановления = Строка.ДатаВосстановления;
			СтрокВНаборе = СтрокВНаборе +1;
		КонецЕсли;
		
		// В регистр записывается по 150 записей
		Если СтрокВНаборе>=150 Тогда
			Набор.Записать(Ложь);
			Набор.Очистить();
			СтрокВНаборе = 0;
			
			ЗафиксироватьТранзакцию();
			
			НачатьТранзакцию();
			
		КонецЕсли;
	
	КонецЦикла; 
	
	Если СтрокВНаборе>0 Тогда
		Набор.Записать(Ложь);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Распределение за период доп расходов на поступление товаров
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьРаспределениеДопРасходов(ДатаНачалаВосстановления, ДатаКонцаОбработки, СтОтборОстатков = Неопределено, Документ=Неопределено, ДатаДокумента=Неопределено) Экспорт
	
	// Остатки нераспределенных доп.расходов
	Если ТипЗнч(СтОтборОстатков) = Тип("Структура") Тогда
		ТабОстатков = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.Остатки(ДатаКонцаОбработки, СтОтборОстатков);
	Иначе
		ТабОстатков = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.Остатки(ДатаКонцаОбработки);
	КонецЕсли;
	
	// Поступление партий
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Парт.Номенклатура,
	|	Парт.Склад,
	|	Парт.ХарактеристикаНоменклатуры,
	|	Парт.СерияНоменклатуры,
	|	Парт.ДокументОприходования,
	|	Парт.СтатусПартии,
	|	Парт.Заказ,
	|	Парт.Качество,
	|	СУММА(Парт.Количество) КАК Количество,
	|	Парт.Регистратор
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Парт
	|
	|ГДЕ
	|	Парт.КодОперации В(&СписокКодыОперации) И
	|	Парт.ВидДвижения = &ВидДвижения И
	|	Парт.Период МЕЖДУ &ДатаНач И &ДатаКон И
	|	Парт.Номенклатура В(&Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	Парт.Номенклатура,
	|	Парт.Склад,
	|	Парт.ХарактеристикаНоменклатуры,
	|	Парт.СерияНоменклатуры,
	|	Парт.ДокументОприходования,
	|	Парт.СтатусПартии,
	|	Парт.Заказ,
	|	Парт.Качество,
	|	Парт.Регистратор");
	
	
	СписокКодыОперации = Новый Массив;
	СписокКодыОперации.Добавить(Перечисления.КодыОперацийПартииТоваров.Поступление);
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачалаВосстановления);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонцаОбработки);
	Запрос.УстановитьПараметр("СписокКодыОперации", СписокКодыОперации);
	Запрос.УстановитьПараметр("Номенклатура", ТабОстатков.ВыгрузитьКолонку("Номенклатура"));
	
	ТабПоступлений = Запрос.Выполнить().Выгрузить();
	ТабПоступлений.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	СоотвДокументов = Новый Соответствие;
	
	Для Каждого СтрокаОстатка Из ТабОстатков Цикл
		
		НайдСтроки = ТабПоступлений.НайтиСтроки(Новый Структура(
		"Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", 
		СтрокаОстатка.Номенклатура, 
		СтрокаОстатка.ХарактеристикаНоменклатуры,
		СтрокаОстатка.СерияНоменклатуры));
		
		// База распределения - количество
		ВсегоКоличество = 0;
		Для Каждого Строка Из НайдСтроки Цикл
			ВсегоКоличество = ВсегоКоличество + Строка.Количество;
		КонецЦикла;
		
		СуммаРаспределить  = СтрокаОстатка.Сумма;
		КоличествоосталосьПогасить = ВсегоКоличество;
		
		Для Каждого Строка Из НайдСтроки Цикл
			
			Если НЕ (КоличествоосталосьПогасить > 0) Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = Строка.Количество/КоличествоОсталосьПогасить;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			Строка.Стоимость = СуммаРаспределить * КоэффСписания;
			
			КоличествоосталосьПогасить = КоличествоосталосьПогасить - Строка.Количество;
			
			СуммаРаспределить = СуммаРаспределить - Строка.Стоимость;
			
			СоотвДокументов.Вставить(Строка.Регистратор);
		КонецЦикла;
		
	КонецЦикла;
	
	// Запись в регистр
	Если Документ<>Неопределено Тогда
		
		// Партии
		НаборЗаписей = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(Документ);
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		
		ЗагрузитьВТаблицуЗначений(ТабПоступлений, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов, "КодОперации");
		
		НаборЗаписей.мПериод = ДатаДокумента;
		
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		
		НаборЗаписей.ВыполнитьПриход();
		
		НаборЗаписей.Записать();
		
		// Доп расходы
		НаборЗаписей = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(Документ);
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		
		// Стоимостью является сумма
		ТабПоступлений.Колонки.Стоимость.Имя = "Сумма";
		
		ЗагрузитьВТаблицуЗначений(ТабПоступлений, ТаблицаДвижений);
		
		НаборЗаписей.мПериод = ДатаДокумента;
		
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		
		НаборЗаписей.ВыполнитьРасход();
		
		НаборЗаписей.Записать();
	КонецЕсли;

	
КонецПроцедуры // ВыполнитьРаспределениеДопРасходов(ДатаНачалаВосстановления, ДатаКонцаОбработки)

Процедура СписаниеНаАмортизациюУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("СтоимостьОС"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;
	
	Если Учет = "Бух"
		ИЛИ Учет = "Нал" Тогда
		
		Движение.Организация  = СтрокаДокумента.Организация;
		Движение.ВидОперации  = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
		
	КонецЕсли;
	
	Движение.Стоимость = Строка.Стоимость;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиСтоимостьОС"+Учет];
	
КонецПроцедуры

// Списание на затраты

Процедура СписаниеНаЗатратыОСУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ОССписанныеНаЗатраты"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;
	
	Движение.Стоимость = Строка.Стоимость;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиОССписанныеНаЗатраты"+Учет];
	
КонецПроцедуры