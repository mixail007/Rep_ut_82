
Процедура ВыгрузитьПрайсЯрославль() Экспорт
	ВнешОбр = справочники.ВнешниеОбработки.НайтиПоКоду(171);
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ВнешОбр.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	
	Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
	Форма.ДействияФормыВыгрузитьВExcel(Неопределено);	
КонецПроцедуры	

Процедура ВыгрузитьПрайсФилиалов() Экспорт
	ВнешОбр = справочники.ВнешниеОбработки.НайтиПоКоду(210);
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ВнешОбр.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	
	Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
	Форма.ДействияФормыВыгрузитьВExcel(Неопределено);	
КонецПроцедуры	


Процедура ОбменСУТИнтернетМагазин() экспорт
	
		КодПланаОбмена = "IM";
		СерверБД	   = "sigma:2041";
		ИмяБД		   = "v82ib_fedunov_ut"; //"v8_ib_test";
		
		ИмяПользователя    = "Попов";
		ПарольПользователя = "cegthGjg123"; //31-35
		ИмяОбщегоМакета    = "ПравилаВыгрузкиНоменклатуры_ЯШТУТ_ИнтернетМагазин";    // он же имя файла...
		КаталогХраненияПравил = "\\sigma\C$\"; //+++ 19.12.2012
		
	//--------------------------------------------------------------------------------------
	мУниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
	//#Если Клиент Тогда
		//сообщить(строка(ТекущаяДата())+" - начало выполнение выгрузки номенклатуры по плану обмена: "+КодПланаОбмена+" в базу: "+ИмяБД);
		//сообщить("   Правила и протокол обмена см.: "+КаталогХраненияПравил);
	//#КонецЕсли	
	//загружаем файл
	//УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогХраненияПравил + ИмяОбщегоМакета +".xml";
	
//+++ чтобы каждый раз не перезаписывать... и плюс
фс = новый файл(ИмяВременногоФайлаПравилОбмена);
 Если НЕ фс.Существует() Тогда
 	#Если Клиент Тогда
    МакетПравилОбмена = ПолучитьОбщийМакет(ИмяОбщегоМакета);
    МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	#КонецЕсли
 КонецЕсли; 
	мУниверсальнаяВыгрузкаДанных.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	мУниверсальнаяВыгрузкаДанных.ЗагрузитьПравилаОбмена();
	
//+++ удалять надо только сам файл при обновлении
//   УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);


	//устанавливаем настройки обработки 
	// удаление изменений только для метаданныех выгруженных объектов первого уровня 
	мУниверсальнаяВыгрузкаДанных.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 1;
	
	мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки.Строки[0].Строки[0].СсылкаНаУзелОбмена = ПланыОбмена.СинхронизацияНоменклатуры.НайтиПоКоду(КодПланаОбмена);
	//подключимся напрямую к базе	
	мУниверсальнаяВыгрузкаДанных.НепосредственноеЧтениеВИБПриемнике = Истина;
	мУниверсальнаяВыгрузкаДанных.ТипИнформационнойБазыДляПодключения = Ложь; //клиент-сервер
	мУниверсальнаяВыгрузкаДанных.ИмяСервераИнформационнойБазыДляПодключения   = СерверБД;
	мУниверсальнаяВыгрузкаДанных.ИмяИнформационнойБазыНаСервереДляПодключения = ИмяБД;
	мУниверсальнаяВыгрузкаДанных.ПользовательИнформационнойБазыДляПодключения = ИмяПользователя;
	мУниверсальнаяВыгрузкаДанных.ПарольИнформационнойБазыДляПодключения = ПарольПользователя ;
	
	мУниверсальнаяВыгрузкаДанных.РежимОбмена               = "Выгрузка";
	мУниверсальнаяВыгрузкаДанных.ЭтоИнтерактивныйРежим     = Истина;
	мУниверсальнаяВыгрузкаДанных.ПараметрыИнициализированы = Истина;
	
	мУниверсальнаяВыгрузкаДанных.ФлагРежимОтладки = Истина;
	//мУниверсальнаяВыгрузкаДанных.ИмяФайлаПротоколаОбмена =  КаталогХраненияПравил+"протоколОбмена.txt";
	мУниверсальнаяВыгрузкаДанных.ДописыватьДанныеВПротоколОбмена = Ложь;
	
	мУниверсальнаяВыгрузкаДанных.ОптимизированнаяЗаписьОбъектов  = истина;
	
	////+++ для проверки...
	////настройка по умолчанию надо выключить [ ]открывать при открытии
	//форма = мУниверсальнаяВыгрузкаДанных.ПолучитьФорму();
	//форма.ОткрытьМодально();  
	
	мУниверсальнаяВыгрузкаДанных.ВыполнитьВыгрузку();
	//#Если Клиент Тогда
		//сообщить(строка(ТекущаяДата())+" - завершена выгрузка номенклатуры");
	//#КонецЕсли	
КонецПроцедуры

//--------------------номенклатура!---------------------
Процедура ОбменСУТ_ОптИнтернетМагазин_Ном() экспорт
	
		КодПланаОбмена = "oim";
		СерверБД	   = "sigma:2041";
		ИмяБД		   = "v82ib_test"; 
		
		ИмяПользователя    = "Админ";
		ПарольПользователя = "cegthvfhbj"; //31-35
		ИмяОбщегоМакета    = "ПравилаВыгрузкиНоменклатуры_ЯШТУТ_ИнтернетМагазинОпт";    // он же имя файла...
		КаталогХраненияПравил =  "\\sigma\C$\"; //+++ 19.12.2012
		
	//--------------------------------------------------------------------------------------
	мУниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
	#Если Клиент Тогда
		сообщить(строка(ТекущаяДата())+" - начало выполнение выгрузки номенклатуры по плану обмена: "+КодПланаОбмена+" в базу: "+ИмяБД);
		сообщить("   Правила и протокол обмена см.: "+КаталогХраненияПравил);
	#КонецЕсли	
	//загружаем файл
	//УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогХраненияПравил + ИмяОбщегоМакета +".xml";
	
//+++ чтобы каждый раз не перезаписывать... и плюс
фс = новый файл(ИмяВременногоФайлаПравилОбмена);
Если НЕ фс.Существует() Тогда
 	#Если Клиент Тогда
    МакетПравилОбмена = ПолучитьОбщийМакет(ИмяОбщегоМакета);
    МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
    #КонецЕсли	
КонецЕсли; 
	мУниверсальнаяВыгрузкаДанных.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	мУниверсальнаяВыгрузкаДанных.ЗагрузитьПравилаОбмена();
	
//+++ удалять надо только сам файл при обновлении
//   УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);


	//устанавливаем настройки обработки 
	// для всех изменений которые были в плане обмена отменяем регистрацию 
	мУниверсальнаяВыгрузкаДанных.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 1;
	
	мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки.Строки[0].Строки[0].СсылкаНаУзелОбмена = ПланыОбмена.СинхронизацияНоменклатуры.НайтиПоКоду(КодПланаОбмена);
	//подключимся напрямую к базе	
	мУниверсальнаяВыгрузкаДанных.НепосредственноеЧтениеВИБПриемнике = Истина;
	мУниверсальнаяВыгрузкаДанных.ТипИнформационнойБазыДляПодключения = Ложь; //клиент-сервер
	мУниверсальнаяВыгрузкаДанных.ИмяСервераИнформационнойБазыДляПодключения   = СерверБД;
	мУниверсальнаяВыгрузкаДанных.ИмяИнформационнойБазыНаСервереДляПодключения = ИмяБД;
	мУниверсальнаяВыгрузкаДанных.ПользовательИнформационнойБазыДляПодключения = ИмяПользователя;
	мУниверсальнаяВыгрузкаДанных.ПарольИнформационнойБазыДляПодключения = ПарольПользователя ;
	
	мУниверсальнаяВыгрузкаДанных.РежимОбмена               = "Выгрузка";
	мУниверсальнаяВыгрузкаДанных.ЭтоИнтерактивныйРежим     = Истина;
	мУниверсальнаяВыгрузкаДанных.ПараметрыИнициализированы = Истина;
	
	мУниверсальнаяВыгрузкаДанных.ФлагРежимОтладки = Истина;
	мУниверсальнаяВыгрузкаДанных.ИмяФайлаПротоколаОбмена =  КаталогХраненияПравил+"протоколОбмена.txt";
	мУниверсальнаяВыгрузкаДанных.ДописыватьДанныеВПротоколОбмена = истина;
	
	мУниверсальнаяВыгрузкаДанных.ОптимизированнаяЗаписьОбъектов  = истина;
	
	////+++ для проверки...
	////настройка по умолчанию надо выключить [ ]открывать при открытии
	//форма = мУниверсальнаяВыгрузкаДанных.ПолучитьФорму();
	//форма.ОткрытьМодально();  
	
	мУниверсальнаяВыгрузкаДанных.ВыполнитьВыгрузку();
	#Если Клиент Тогда
	    сообщить(строка(ТекущаяДата())+" - завершена выгрузка номенклатуры");
	#КонецЕсли	

КонецПроцедуры

Процедура ОбменСУТ_ОптИнтернетМагазин_Док() экспорт
	
		КодПланаОбмена = "oim";
		СерверБД	   = "sigma:2041";
		ИмяБД		   = "v82ib_test"; 
		
		ИмяПользователя    = "Админ";
		ПарольПользователя = "cegthvfrc"; //31-35
		ИмяОбщегоМакета    = "ПравилаВыгрузки_ЯШТУТ_ИнтернетМагазинОпт_Документы";    // он же имя файла...
		КаталогХраненияПравил =  "\\sigma\C$\"; //+++ 21.05.2013
		
	//--------------------------------------------------------------------------------------
	мУниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
	//#Если Клиент Тогда
	//	сообщить(строка(ТекущаяДата())+" - начало выполнение выгрузки документов по плану обмена: "+КодПланаОбмена+" в базу: "+ИмяБД);
	//	сообщить("   Правила и протокол обмена см.: "+КаталогХраненияПравил);
	//#КонецЕсли	
	//загружаем файл
	//УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогХраненияПравил + ИмяОбщегоМакета +".xml";
	
//+++ чтобы каждый раз не перезаписывать... и плюс
фс = новый файл(ИмяВременногоФайлаПравилОбмена);
 Если НЕ фс.Существует() Тогда
	#Если Клиент Тогда
    МакетПравилОбмена = ПолучитьОбщийМакет(ИмяОбщегоМакета);
    МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	#КонецЕсли
 КонецЕсли; 
	мУниверсальнаяВыгрузкаДанных.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	мУниверсальнаяВыгрузкаДанных.ЗагрузитьПравилаОбмена();
	
//+++ удалять надо только сам файл при обновлении
//   УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);


	//устанавливаем настройки обработки 
	// удаление изменений только для метаданныех выгруженных объектов первого уровня 
	мУниверсальнаяВыгрузкаДанных.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 1;
	
	//заказы и реализации!
	мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки.Строки[0].Строки[0].СсылкаНаУзелОбмена = ПланыОбмена.ПланОбмена_ОИМ.НайтиПоКоду(КодПланаОбмена);
	мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки.Строки[0].Строки[1].СсылкаНаУзелОбмена = ПланыОбмена.ПланОбмена_ОИМ.НайтиПоКоду(КодПланаОбмена);
	
	//подключимся напрямую к базе	
	мУниверсальнаяВыгрузкаДанных.НепосредственноеЧтениеВИБПриемнике = Истина;
	мУниверсальнаяВыгрузкаДанных.ТипИнформационнойБазыДляПодключения = Ложь; //клиент-сервер
	мУниверсальнаяВыгрузкаДанных.ИмяСервераИнформационнойБазыДляПодключения   = СерверБД;
	мУниверсальнаяВыгрузкаДанных.ИмяИнформационнойБазыНаСервереДляПодключения = ИмяБД;
	мУниверсальнаяВыгрузкаДанных.ПользовательИнформационнойБазыДляПодключения = ИмяПользователя;
	мУниверсальнаяВыгрузкаДанных.ПарольИнформационнойБазыДляПодключения = ПарольПользователя ;
	
	мУниверсальнаяВыгрузкаДанных.РежимОбмена               = "Выгрузка";
	мУниверсальнаяВыгрузкаДанных.ЭтоИнтерактивныйРежим     = Истина;
	мУниверсальнаяВыгрузкаДанных.ПараметрыИнициализированы = Истина;
	
	мУниверсальнаяВыгрузкаДанных.ФлагРежимОтладки = Истина;
	//мУниверсальнаяВыгрузкаДанных.ИмяФайлаПротоколаОбмена =  КаталогХраненияПравил+"протоколОбмена.txt";
	мУниверсальнаяВыгрузкаДанных.ДописыватьДанныеВПротоколОбмена = Ложь;
	
	мУниверсальнаяВыгрузкаДанных.ОптимизированнаяЗаписьОбъектов  = истина;
	
	////+++ для проверки...
	////настройка по умолчанию надо выключить [ ]открывать при открытии
	//форма = мУниверсальнаяВыгрузкаДанных.ПолучитьФорму();
	//форма.ОткрытьМодально();  
	
	мУниверсальнаяВыгрузкаДанных.ВыполнитьВыгрузку();
	//#Если Клиент Тогда
	//	сообщить(строка(ТекущаяДата())+" - завершена выгрузка документов");
	//#КонецЕсли	
КонецПроцедуры

//+++ 13.05.2013 +++++++++++++ регистрация в план обмена ОИМ ++++++++++++++++++++++++++++++
Процедура ВключитьРегистрациюОбъектаОИМ_old(ЭтотОбъект1,ПерезаписатьОбъект=Ложь) экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланОбмена_ОИМ.Ссылка
	|ИЗ
	|	ПланОбмена.ПланОбмена_ОИМ КАК ПланОбмена_ОИМ
	|ГДЕ
	|	ПланОбмена_ОИМ.Ссылка <> &ЭтотУзел";
		
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПланОбмена_ОИМ.ЭтотУзел());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
		
	Пока Выборка.Следующий() Цикл
		ЭтотОбъект1.ОбменДанными.Получатели.Автозаполнение=Ложь;
		ЭтотОбъект1.ОбменДанными.Получатели.Добавить(Выборка.Ссылка);
		Если ПерезаписатьОбъект Тогда
			ЭтотОбъект1.записать(РежимЗаписиДокумента.Запись);	
		КонецЕсли;	
	КонецЦикла;
	
	//Если это Заказ покупателя, зарегистрируем все вложенные заказы, для обновления статуса 
	Если ТипЗнч(ЭтотОбъект1)= Тип("ДокументОбъект.ЗаказПокупателя")Тогда
		Если ЭтотОбъект1.Заказы.количество()>0 Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Для каждого стр из ЭтотОбъект1.Заказы Цикл
					Если  Стр.Заказпокупателя.Товары.Количество()>0 Тогда
						СтрокаЗаказ = Стр.Заказпокупателя.получитьОбъект();
						СтрокаЗаказ.записать(РежимЗаписиДокумента.Запись);// перезапишем для регистрации
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;	 
		КонецЕсли;
	КонецЕсли;
 		
КонецПроцедуры

//01.11.2016 - регистрация изменений по ссылке или объекту
Процедура ВключитьРегистрациюОбъектаОИМ(ЭтотОбъект1,ВыгружатьВКоннект24=Ложь) экспорт
	
	ПланыОбмена.ЗарегистрироватьИзменения( ПланыОбмена.ПланОбмена_ОИМ.НайтиПоКоду("sim"), ЭтотОбъект1);
	
	Если ВыгружатьВКоннект24 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(ПланыОбмена.ПланОбмена_ОИМ.НайтиПоКоду("oim"), ЭтотОбъект1);
	КонецЕсли;
	
	Если //ТипЗнч(ЭтотОбъект1)=Тип("ДокументОбъект.ЗаказПокупателя")  //ОБЪЕКТ - будет регистрировать всё, что есть по всем ТЧ ! 
		ТипЗнч(ЭтотОбъект1)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	ПроверитьВложенныеЗаказыДляРегистрации(ЭтотОбъект1);
	КонецЕсли;

КонецПроцедуры

 //+++ регистрация по ссылке!
Процедура  ПроверитьВложенныеЗаказыДляРегистрации(ДокументСсылка)
	
ПланОбмена_sim = ПланыОбмена.ПланОбмена_ОИМ.НайтиПоКоду("sim");

//+++( 19.07.2018 - свой запрос с SX-блокировкой ТЧЗаказы, а не SX-блокирокой Заказа (S в транзакции = X)
//было:  для каждого стр из ДокументСсылка.Заказы цикл  // неявный пратформенный запрос на чтение
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ ЗаказПокупателяЗаказы.ЗаказПокупателя
	|ИЗ Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
	|ГДЕ ЗаказПокупателяЗаказы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результат = Запрос.Выполнить(); //>> ЗаказПокупателя.Заказы - есть только у 6 и 7 типа заказов!
	
	Если НЕ Результат.Пустой() тогда //максимально быстро
		стр = Результат.Выбрать();
		Пока стр.Следующий() Цикл
		 ПланыОбмена.ЗарегистрироватьИзменения(ПланОбмена_sim, стр.заказПокупателя); //ccылка!
		//+++ 18.07.2018 рекурентно не может быть! в Заказы - ТОЛЬКО находятся первичные заказы!
		// ПроверитьВложенныеЗаказыДляРегистрации(стр.заказПокупателя); 
		КонецЦикла;
	КонецЕсли;
//+++)

Конецпроцедуры



//+++ 30.01.2015 -  Возвращает таблицу с текстовыми полями:  Номер, Статус (с сортировкой по номеру!)
функция ПолучитьСтатусыЗаказовПоНомерам(МассивВходящихНомеров, КодКонтрагента="", ЭтоНомераДокументов=ЛОЖЬ, Год=0 ) Экспорт
	
	Если МассивВходящихНомеров.Количество()=0 Тогда
		возврат Неопределено;
	КонецЕсли;
	
	Если Год=0 Тогда // в текущем году
		Дата = ТекущаяДата();
	иначе
		Дата = Дата(Год,1,1);	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка,
				   |	ЗаказПокупателя.Ссылка.Транзит как Транзит,
				   |	ЗаказПокупателя.Ссылка.ПометкаУдаления как ПометкаУдаления,
	               |	ЗаказПокупателя.НомерВходящегоДокумента КАК Номер,
				   |	Выразить(ЗаказПокупателя.Комментарий КАК СТРОКА(500)) КАК Комментарий,
				   |	ЛОЖЬ как ЕстьОбщийЗаказ,
				   |	"""" КАК НомерОбъединенногоЗаказа,
				   //строка 30
	               |	""                              "" КАК Статус
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЗаказПокупателя.НомерВходящегоДокумента В (&МассивНомеров)
	               |    //ЗаменитьУсловиеПоКонтрагенту
	               |УПОРЯДОЧИТЬ ПО
	               |	Номер
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоГода( Дата ) );
	Запрос.УстановитьПараметр("ДатаКон", КонецГода (Дата) );
	Запрос.УстановитьПараметр("МассивНомеров", МассивВходящихНомеров );
	
	
	Если ЭтоНомераДокументов Тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст, "ВходящегоДокумента", "");
	КонецЕсли;
	
	Если  СокрЛП(КодКонтрагента)<>"" Тогда
		Контрагент=Справочники.Контрагенты.НайтиПоКоду(СокрЛП(КодКонтрагента));
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.Текст = стрЗаменить(Запрос.Текст, "//ЗаменитьУсловиеПоКонтрагенту", "И ЗаказПокупателя.Контрагент = &Контрагент");
	КонецЕсли;

	Результат = Запрос.Выполнить();
	ТаблЗнач = Результат.Выгрузить();

	//+++ 29.06.2017 все статусы сразу!
	массивЗаказов = ТаблЗнач.ВыгрузитьКолонку("Ссылка"); 
	статусыЗак = ПолучитьстатусыЗаказов(массивЗаказов);
	
	Для каждого стр1 из ТаблЗнач Цикл
	  Заказ = стр1.Ссылка;
	  
	//+++( 29.06.2017 статус уже получен!
		//статус1    = ПолучитьСтатусЗаказаПоСхеме(Заказ, стр1.Транзит, стр1.ПометкаУдаления); // в лоб!
		//стр1.Статус= статус1;
	   //статусы = статусыЗак.Найти(Заказ, "Ссылка");
	   статусы = статусыЗак.Найти(Заказ, "Заказ");
	   //стр1.Статус = статусы[0].СтатусРасшифровка;
	   // Если статусы[0].Статус = 9 или статусы[0].Статус = 12 Тогда 
	   // ЭтоОтгрузка = (статусы[0].Статус = 9);
	   стр1.Статус = статусы.СтатусРасшифровка;
		Если статусы.Статус = 9 или статусы.Статус = 12 Тогда 
		ЭтоОтгрузка = (статусы.Статус = 9);

		УточнитьСтатусПриОтгрузке(Заказ, ЭтоОтгрузка, стр1.Транзит, стр1.ПометкаУдаления); 
		КонецЕсли;	
	 //+++)
	 
		Если стр1.ПометкаУдаления или 
			(стр1.Транзит и НЕ стр1.ПометкаУдаления) Тогда // только удаленный или транзитный не удаленный заказ - может быть объединеным в Общий
			ОбщийЗаказ 		= ПолучитьОбщийЗаказ(Заказ);
			стр1.ЕстьОбщийЗаказ  = НЕ ОбщийЗаказ.пустая();
			Если стр1.ЕстьОбщийЗаказ Тогда
				стр1.НомерОбъединенногоЗаказа = ОбщийЗаказ.Номер; 
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
    ТаблЗнач.Колонки.Удалить("Ссылка");
	
	возврат ТаблЗнач;
	
КонецФункции

//+++ 29.06.2017 - получаем точный % отгружаемого количества!
функция УточнитьСтатусПриОтгрузке(ЗаказПокупателя, ЭтоОтгрузка=Истина, Транзит=Неопределено, ПометкаУдаления=Неопределено)

таблСтатус = ЗаполнитьСоответствияСтатусовЗаказов(); //+++ 29.06.2017 единая функция списка статусов!
	   мСтатус = таблСтатус.выгрузитьКолонку("СтатусРасшифровка");
	   
  		Если Транзит=Неопределено 
			Тогда  ЗаказТранзитный = ЗаказПокупателя.Транзит;
			Иначе ЗаказТранзитный = Транзит;
		КонецЕсли;
		Если ПометкаУдаления=Неопределено 
			Тогда  ЗаказУдален	  = ЗаказПокупателя.ПометкаУдаления;
			Иначе ЗаказУдален	    = ПометкаУдаления;
		КонецЕсли;
 
		Если ЗаказТранзитный или ЗаказУдален Тогда // общий заказ долго ищется!
		ОбщийЗаказ		= ПолучитьОбщийЗаказ(ЗаказПокупателя);
						
			Если ЗаказТранзитный и не ОбщийЗаказ.пустая() Тогда 
				ОбщийЗаказ2 = ПолучитьОбщийЗаказ(ОбщийЗаказ);     //еще глубже - отгрузка уже с филиала!
				Если не ОбщийЗаказ2.пустая() Тогда //+++ 28.05.2015 - дальше
				ОбщийЗаказ = ОбщийЗаказ2;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОбщийЗаказ = ЗаказПокупателя;
		КонецЕсли;
	   
		массивНомеровЗаказов = новый массив;
		массивНомеровЗаказов.Добавить(ОбщийЗаказ.Номер);
		//процедура взята из списка Заказов покупателей, которая работает с 2013г.
		табл = ПеречитатьПроцентНаОтгрузке(массивНомеровЗаказов, ОбщийЗаказ.Дата, (макс(ОбщийЗаказ.Дата,ОбщийЗаказ.ДатаОтгрузки) + 7*86400) );
		 
		Если табл.Количество()=0 Тогда
			рез = ?(ЭтоОтгрузка, мСтатус[10], мСтатус[13]);
		Иначе
			Если табл[0].Процент<=0 Тогда
			рез = ?(ЭтоОтгрузка, мСтатус[10], мСтатус[13]);
			
			ИначеЕсли табл[0].Процент < 100 Тогда
			рез = ?(ЭтоОтгрузка, мСтатус[9], мСтатус[12]);// +"("+строка(Окр(табл[0].Процент,0))+"%)";
			//------------------------анализ какой именно заказ недогрузился-----------------------------
			процент1 = ПроцентОгрузкиСоСкладаТоваровОбщегоЗаказаПоЗаказу(ОбщийЗаказ, ЗаказПокупателя);
				Если процент1<=0 Тогда 
				рез = ?( ЭтоОтгрузка, мСтатус[10], мСтатус[13] );
				ИначеЕсли процент1 < 100 Тогда
				рез = ?(ЭтоОтгрузка, мСтатус[9], мСтатус[12]);//+"("+строка(Окр(Процент1,0))+"%)";

				ИначеЕсли процент1 >= 100 Тогда
				рез = ?(ЭтоОтгрузка, мСтатус[8], мСтатус[11]);
		  		КонецЕсли;
			//-------------------------------------------------------------------------------------------
			ИначеЕсли табл[0].Процент >= 100 Тогда
			рез = ?(ЭтоОтгрузка, мСтатус[8], мСтатус[11]);
			//------------------------анализ какой именно заказ ПЕРЕгрузился-----------------------------
			
			КонецЕсли;
		КонецЕсли;
		возврат рез;
КонецФункции

//+++ 27.01.2015 - общая функция получения СтатусаЗаказ - по схеме: "СхемаСтатусов.grs" 
//см.  \\PROGRAMMER3\D$\Описание функционала 1С\Статус заказа покупателя (БлокСхема).doc
//
//29.06.2017 - цикломатическая сложность уменьшена с 68 до 2 через 2 функции:
// -> ПолучитьстатусыЗаказов(СписЗаказов)
// -> УточнитьСтатусПриОтгрузке()
//
Функция ПолучитьСтатусЗаказаПоСхеме(ЗаказПокупателя, Транзит=Неопределено, ПометкаУдаления=Неопределено) экспорт
	
	//+++ 29.06.2017  замена функции!
	//СписЗаказов = новый СписокЗначений;
	//СписЗаказов.Добавить(ЗаказПокупателя);
	//статусыЗак = ПолучитьстатусыЗаказов(СписЗаказов);
	//рез = статусыЗак[0].СтатусРасшифровка; //статус всегда есть!
	//
	//// частично на отгрузке или на перемещении??
	//Если статусыЗак[0].Статус = 9 или статусыЗак[0].Статус = 12 Тогда 
	//	ЭтоОтгрузка = (статусыЗак[0].Статус = 9);
	//	УточнитьСтатусПриОтгрузке(ЗаказПокупателя, ЭтоОтгрузка, Транзит, ПометкаУдаления); 
	//КонецЕсли;	
	//
	//ВОЗВРАТ рез;
	//+++)	

	//Получение	"бинарных" статусов
	Если Транзит=Неопределено Тогда  // так долго!
		ЗаказТранзитный = ЗаказПокупателя.Транзит;
	Иначе
		ЗаказТранзитный = Транзит;
	КонецЕсли;
	Если ПометкаУдаления=Неопределено Тогда  // так долго!
		ЗаказУдален	    = ЗаказПокупателя.ПометкаУдаления;
	Иначе
		ЗаказУдален	    = ПометкаУдаления;
	КонецЕсли;
	
	
	 статусыЗак = ЗаполнитьСоответствияСтатусовЗаказов();//----------------------------Единый список!-------------------
	 мСтатус = новый массив;
	 для i=0 по статусыЗак.Количество()-1 цикл
	 	мСтатус.Добавить( статусыЗак[i].СтатусРасшифровка );
 	 КонецЦикла;
 
	
	//30.06.2016 - новый статус при отмене отгрузки через "Заданиче на отгрузку" для ИМ (ДПД  и Подорожник)
	текст15 = прав(мСтатус[15], стрДлина(мСтатус[15])-3);
	Если Найти(ЗаказПокупателя.Комментарий, "#"+текст15)>0 Тогда
		возврат мСтатус[15];
	КонецЕсли;
	
	//+++( 29.06.2017 - СРАЗУ возврат без доп.обработок! 
	закСтатус =ЗаказПокупателя.Статус; // с 16 по 20 статус - прямо по статусу заказа!
	Если закСтатус = перечисления.СтатусыЗаказов.Отменен Тогда
		возврат мСтатус[20];
	ИначеЕсли ЗаказУдален=ЛОЖЬ Тогда 
		Если ЗаказПокупателя.Проведен=ЛОЖЬ Тогда
			возврат мСтатус[0];
		Иначе //проведен
			Если закСтатус = перечисления.СтатусыЗаказов.ВОбработке Тогда
				возврат мСтатус[16];
			ИначеЕсли закСтатус = перечисления.СтатусыЗаказов.Подтвержден Тогда
				возврат мСтатус[17];
			ИначеЕсли закСтатус = перечисления.СтатусыЗаказов.Доставлен Тогда
				возврат мСтатус[18];
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	
	Если ЗаказТранзитный или ЗаказУдален Тогда // общий заказ долго ищется!
		ОбщийЗаказ	= ПолучитьОбщийЗаказ(ЗаказПокупателя);
		
		//+++( 28.05.2015 - дальше ищем для филиалов: СП -> ТК -> общий заказ ЯШТ 
		Если ЗаказТранзитный и не ОбщийЗаказ.пустая() Тогда 
			ОбщийЗаказ2 = ПолучитьОбщийЗаказ(ОбщийЗаказ);
			Если не ОбщийЗаказ2.пустая() Тогда //+++ 28.05.2015 - дальше
			ОбщийЗаказ = ОбщийЗаказ2;
			КонецЕсли;
		КонецЕсли;
		//+++)
		ЕстьОбщийЗаказ  = НЕ ОбщийЗаказ.пустая();
	Иначе
		ЕстьОбщийЗаказ  = Ложь;
	КонецЕсли;

	ЕстьЗаданиеНаОтгрузку = Ложь;
	
	//типЗаказа для дополнительной проверки 6 или 7 типа
	Если ЕстьОбщийЗаказ Тогда
		типЗаказа			= ОбщийЗаказ.ТипЗаказа;
		ЗаказПроделен   	= ОбщийЗаказ.Проведен и ОбщийЗаказ.Проверен; // для типа 6 и 7
		ЗаказСогласован		= ОбщийЗаказ.Согласован;
		
		//+++ 28.05.2015
		//ЗаказЗакрыт 	    = ЗаказПокупателя.Проведен и нетЗаказанныхТоваровПоЗаказу(ЗаказПокупателя);
		//23.12.2015 - вернул обратно анализ общего заказа!
		ЗаказЗакрыт 	    = ОбщийЗаказ.Проведен и нетЗаказанныхТоваровПоЗаказу(ОбщийЗаказ);
		
		
		ЗаказНаПеремещение  = ОбщийЗаказ.ВводитьТолькоПеремещение;
		Если ОбщийЗаказ.Статус.пустая() Тогда
			СтатусУПоставщика   = "";
		иначе	
		ЗначениеПеречисления = ОбщийЗаказ.Статус;
		ИмяПеречисления = "СтатусыЗаказов";
		ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
		СтатусУПоставщика   = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Синоним;
		КонецЕсли;
	Иначе 	
		типЗаказа			= ЗаказПокупателя.ТипЗаказа;
		ЗаказПроделен   	= ЗаказПокупателя.Проведен и ЗаказПокупателя.Проверен;
		ЗаказСогласован		= ЗаказПокупателя.Согласован;
		ЗаказЗакрыт 	    = ЗаказПокупателя.Проведен и нетЗаказанныхТоваровПоЗаказу(ЗаказПокупателя);
		ЗаказНаПеремещение  = ЗаказПокупателя.ВводитьТолькоПеремещение;
		
		Если ЗаказПокупателя.Статус.пустая() Тогда
			СтатусУПоставщика   = "";
		иначе	
		ЗначениеПеречисления = ЗаказПокупателя.Статус;
		ИмяПеречисления = "СтатусыЗаказов";
		ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
		СтатусУПоставщика   = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Синоним;
		КонецЕсли;
	КонецЕсли;
	
//ЕстьРеализация
Если ЗаказНаПеремещение Тогда
	ЕстьРеализация = ЛОЖЬ; // нет и не может быть!	
//-----------------------------------------------------------------------------------------
	Если ЕстьОбщийЗаказ Тогда
		Перемещение = ПолучитьПеремещениеПоЗаказу(ОбщийЗаказ);
		ЕстьПеремещение = НЕ Перемещение.пустая();
	Иначе
		Перемещение = ПолучитьПеремещениеПоЗаказу(ЗаказПокупателя);
		ЕстьПеремещение = НЕ Перемещение.пустая();
	КонецЕсли;
	
Иначе	// на реализацию
	ЕстьПеремещение = Ложь;
	
	Если ЕстьОбщийЗаказ Тогда
		ЕстьРеализация  = ЕстьОтгрузкиПоЗаказу(ОбщийЗаказ); 
		Если ЕстьРеализация Тогда
			Полностью   	= не ЕстьНедогрузТоваровОбщегоЗаказаПоЗаказу(ОбщийЗаказ, ЗаказПокупателя);
		иначе	
			Полностью   = Ложь;
		КонецЕсли;	
	Иначе
		ЕстьРеализация  = ЕстьОтгрузкиПоЗаказу(ЗаказПокупателя); 
		Если ЕстьРеализация Тогда
			Полностью   = нетЗаказанныхТоваровПоЗаказу(ЗаказПокупателя);
		иначе	
			Полностью   = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
КонецЕсли;

//+++ 30.01.2015 - может быть и перемещение по общему заказу (тип=7) 
//                  и реализация по 1 заказу... или 2-му общему (тип=6)
		Если ЕстьРеализация Тогда
			Полностью   = нетЗаказанныхТоваровПоЗаказу(ЗаказПокупателя);
			
			Если ЕстьОбщийЗаказ  Тогда // УЖЕ НЕ смотрим на общий заказ... Если есть реализация по этому заказу
				ЕстьОбщийЗаказ  = ЛОЖЬ;
			КонецЕсли;
				
		иначе	
			Полностью   = Ложь;
		КонецЕсли;	

		
		Если НЕ ЕстьОбщийЗаказ  Тогда
				типЗаказа			= ЗаказПокупателя.ТипЗаказа;
				ЗаказПроделен   	= ЗаказПокупателя.Проведен и ЗаказПокупателя.Проверен;
				ЗаказСогласован		= ЗаказПокупателя.Согласован;
				ЗаказЗакрыт 	    = ЗаказПокупателя.Проведен и нетЗаказанныхТоваровПоЗаказу(ЗаказПокупателя);
				ЗаказНаПеремещение  = ЗаказПокупателя.ВводитьТолькоПеремещение;
				
				Если ЗаказПокупателя.Статус.пустая() Тогда
					СтатусУПоставщика   = "";
				иначе	
				ЗначениеПеречисления = ЗаказПокупателя.Статус;
				ИмяПеречисления = "СтатусыЗаказов";
				ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
				СтатусУПоставщика   = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Синоним;
				КонецЕсли;
		КонецЕсли;
			
//-------------------------23.12.2015 - Если все отгружено - дальше НЕ смотрим!------------------------------------------
Если ЕстьРеализация Тогда
	рез =?(Полностью, мСтатус[4], мСтатус[5]);
	возврат рез;
Иначе	
	Если ЗаказЗакрыт Тогда //после перемещения или Реализации - заказ закрывается...
		резЗакрытИлиПроделен = мСтатус[3];
	Иначе	//есть остатки заказанного товара...
		Если ЗаказПроделен Тогда
			резЗакрытИлиПроделен  = мСтатус[2];
		иначе // не проделен, но проведен!  Если заказа согласован - значит ожидается поступления от стороннего поставщика
			Если ЗаказСогласован Тогда
				резЗакрытИлиПроделен  = мСтатус[1];
			иначе	
				резЗакрытИлиПроделен  = мСтатус[0];// не проделен, но проведен и НЕ согласован - обычный "черновик"... не проделенный и не "к отгрузке"
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецЕсли;

//+++ 21.04.2015 - проверяется +остаток на складах Филиала (ТОЛЬКО по транзитному заказу!)
Если ЗаказПокупателя.Транзит Тогда
	Если ЕстьПеремещение Тогда
		ЕстьПеремещениеНаФилиал = ПеремещениеНаФилиалВыполнено(ЗаказПокупателя, Перемещение.СкладПолучатель.Подразделение); 
	иначе
		ЕстьПеремещениеНаФилиал = Ложь;
	КонецЕсли;	
КонецЕсли;

//ЕстьЗаданиеНаОтгрузку 
Если не (ЕстьРеализация или ЕстьПеремещение) Тогда
	максСрокОтгрузкиСоСклада = 14; // число календарных дней от ДатыОтгрузки по Заказу до реальной Отгрузки
	Если ЕстьОбщийЗаказ Тогда
		
		//+++ 03.06.2015 - полность выполнено
		структураОтгр = ПолучитьСтруктуруРезерваПоЗаказу(ОбщийЗаказ);
		Если структураОтгр.ЭтоРезервПеремещения Тогда
				Если структураОтгр.ПеремещениеВыполнено Тогда
				рез =мСтатус[14];
				возврат рез; // сразу вернём статус
				иначе рез =мСтатус[13]; 
				КонецЕсли;
		ИначеЕсли структураОтгр.ЭтоРезервОтгрузки Тогда
				Если структураОтгр.ОтгрузкаВыполнена Тогда
				рез ="14.Отгрузка Выполнена"; // отгрузка выполнена, а ни реализации ни перемещения нет?!
				//возврат рез; // сразу вернём статус
				иначе рез = мСтатус[10];
				КонецЕсли;
		КонецЕсли;
			
		ВыборкаДок = яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ОбщийЗаказ, Истина);
		Если ВыборкаДок.Следующий() Тогда
		ЭтоОтгрузка = (ВыборкаДок.Тип = "Задание на отгрузку"); //+3
		
		массивНомеровЗаказов = новый массив;
		массивНомеровЗаказов.Добавить(ОбщийЗаказ.Номер);
		//процедура взята из списка Заказов покупателей, которая работает с 2013г.
		табл = ПеречитатьПроцентНаОтгрузке(массивНомеровЗаказов, ОбщийЗаказ.Дата, (макс(ОбщийЗаказ.Дата,ОбщийЗаказ.ДатаОтгрузки) + максСрокОтгрузкиСоСклада*86400) );
		 
		Если табл.Количество()=0 Тогда
			рез = ?(ЭтоОтгрузка, мСтатус[10], мСтатус[13]);
		Иначе
			Если табл[0].Процент<=0 Тогда
			рез = ?(ЭтоОтгрузка, мСтатус[10], мСтатус[13]);
			
			ИначеЕсли табл[0].Процент < 100 Тогда
			рез = ?(ЭтоОтгрузка, мСтатус[9], мСтатус[12]);// +"("+строка(Окр(табл[0].Процент,0))+"%)";
			//------------------------анализ какой именно заказ недогрузился-----------------------------
			процент1 = ПроцентОгрузкиСоСкладаТоваровОбщегоЗаказаПоЗаказу(ОбщийЗаказ, ЗаказПокупателя);
				Если процент1<=0 Тогда 
				рез = ?( ЭтоОтгрузка, мСтатус[10], мСтатус[13] );
				ИначеЕсли процент1 < 100 Тогда
				рез = ?(ЭтоОтгрузка, мСтатус[9], мСтатус[12]);//+"("+строка(Окр(Процент1,0))+"%)";

				ИначеЕсли процент1 >= 100 Тогда
				рез = ?(ЭтоОтгрузка, мСтатус[8], мСтатус[11]);
		  		КонецЕсли;
			//-------------------------------------------------------------------------------------------
			ИначеЕсли табл[0].Процент >= 100 Тогда
			рез = ?(ЭтоОтгрузка, мСтатус[8], мСтатус[11]);
			//------------------------анализ какой именно заказ ПЕРЕгрузился-----------------------------
			
			КонецЕсли;
		КонецЕсли;
		возврат рез; // сразу вернём статус
	КонецЕсли; //ЕстьЗаданиеНаОтгрузку
	
	ИНАЧЕ// по заказу
		
		//+++ 03.06.2015
		структураОтгр = ПолучитьСтруктуруРезерваПоЗаказу(ЗаказПокупателя);
		Если структураОтгр.ЭтоРезервПеремещения Тогда
				Если структураОтгр.ПеремещениеВыполнено Тогда
				рез =мСтатус[14];
				возврат рез; // сразу вернём статус
				иначе рез = мСтатус[13];
				КонецЕсли;
		ИначеЕсли структураОтгр.ЭтоРезервОтгрузки Тогда
				Если структураОтгр.ОтгрузкаВыполнена Тогда
		//		рез ="14.Задание на Отгрузку выполнено"; // отгрузка выполнена, а ни реализации ни перемещения нет?!
		//		возврат рез; // сразу вернём статус
				иначе рез =  мСтатус[10];
				КонецЕсли;
		КонецЕсли;
			
		ВыборкаДок = яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ЗаказПокупателя, Истина);
			Если ВыборкаДок.Следующий() Тогда
	 		ЭтоОтгрузка = (ВыборкаДок.Тип = "Задание на отгрузку"); //+3

			массивНомеровЗаказов = новый массив;
			массивНомеровЗаказов.Добавить(ЗаказПокупателя.Номер);
			//процедура взята из списка Заказов покупателей, которая работает с 2013г.
			табл = ПеречитатьПроцентНаОтгрузке(массивНомеровЗаказов, ЗаказПокупателя.Дата, (макс(ЗаказПокупателя.Дата,ЗаказПокупателя.ДатаОтгрузки)+максСрокОтгрузкиСоСклада*86400) );
			Если табл.Количество()=0 Тогда // нет заказа... Задание не проделено или уже Выполнено...
				рез = ?(ЭтоОтгрузка,  мСтатус[10], мСтатус[13]);
			иначе
				Если табл[0].Процент<=0 Тогда // заказано есть... а в резерве - нет
					рез = ?(ЭтоОтгрузка, мСтатус[10], мСтатус[13]);
				ИначеЕсли табл[0].Процент < 100 Тогда
				рез = ?(ЭтоОтгрузка,  мСтатус[9], мСтатус[12]); //+"("+строка(Окр(табл[0].Процент,0))+"%)";
 				ИначеЕсли табл[0].Процент >= 100 Тогда
				рез = ?(ЭтоОтгрузка, мСтатус[8], мСтатус[11]);
	 			КонецЕсли;
			КонецЕсли;
			возврат рез; // сразу вернём статус
		КонецЕсли; //ЕстьЗаданиеНаОтгрузку
		
	КонецЕсли;	
КонецЕсли;	
		
  //-----------------------------ПО СХЕМЕ-------------------------------------------
  рез = "00";  

ЕСЛИ НЕ ЗаказТранзитный ТОГДА //10-нет  // Заказ НЕ Транзитный
	  
	Если ЗаказУдален Тогда //21 - Да
		
		Если ЕстьОбщийЗаказ Тогда //31
			  рез = ЕстьРеализацияЗадание(ЕстьРеализация, Полностью, ЕстьЗаданиеНаОтгрузку, мСтатус, резЗакрытИлиПроделен);
		иначе //нет
		  рез = мСтатус[3];
		КонецЕсли;
	  
	Иначе //21 - нет : Заказ НЕ Транзитный и НЕ Удален
		Если ЗаказНаПеремещение Тогда //41 - да
			Если ЕстьПеремещение Тогда
				рез = мСтатус[6];
			Иначе
				Если НЕ ЕстьЗаданиеНаОтгрузку Тогда
					рез = резЗакрытИлиПроделен;
				Иначе // 6 - да : уже обработан выше
					рез = мСтатус[10]; // 3 состояния: подготовка 0%, недогруз<100%, Полностью>=100% (+4 состояние: перегруз >100%)
				КонецЕсли;
			КонецЕсли;	
		Иначе //41 - нет //это не заказ на перемещение
			 рез = ЕстьРеализацияЗадание(ЕстьРеализация, Полностью, ЕстьЗаданиеНаОтгрузку, мСтатус, резЗакрытИлиПроделен);
		КонецЕсли;	
	КонецЕсли;
	
ИНАЧЕ //10-да //Заказ Транзитный = Да ============================================================================
	
	Если ЗаказУдален Тогда //22 - Да
		
		Если ЕстьОбщийЗаказ Тогда //31-да
			  рез = ЕстьРеализацияЗадание(ЕстьРеализация, Полностью, ЕстьЗаданиеНаОтгрузку, мСтатус, резЗакрытИлиПроделен);
		иначе //31-нет
		  рез = мСтатус[3];
		КонецЕсли;

	Иначе //22 - нет:  Заказ транзитный, НЕ Удален
		
		Если ЕстьОбщийЗаказ Тогда //32 -да
			
			Если ЕстьПеремещение Тогда // 42-Да
			  Если ЕстьПеремещениеНаФилиал Тогда
				  рез = мСтатус[6];
			  иначе
				  рез = мСтатус[7];
			  КонецЕсли;	  
			Иначе   // 42 - нет => 71
				рез = резЗакрытИлиПроделен;
			КонецЕсли;//ЕстьПеремещение	
			
		Иначе //32 - нет общего заказа
			
			Если ЗаказНаПеремещение Тогда //41 - да  (как и выше!)
				Если ЕстьПеремещение Тогда
					рез = мСтатус[6]; 
				Иначе
					Если НЕ ЕстьЗаданиеНаОтгрузку Тогда
						рез = резЗакрытИлиПроделен;
					Иначе // 6 - да : уже обработан выше
						рез = мСтатус[10]; // 3 состояния: подготовка 0%, недогруз<100%, Полностью>=100% (+4 состояние: перегруз >100%)
					КонецЕсли;
				КонецЕсли;	
			Иначе //41 - нет //это не заказ на перемещение
			  рез = ЕстьРеализацияЗадание(ЕстьРеализация, Полностью, ЕстьЗаданиеНаОтгрузку, мСтатус, резЗакрытИлиПроделен);
			КонецЕсли;	

		КонецЕсли;//ЕстьОбщийЗаказ	
		
	КонецЕсли; //22-ЗаказУдален		
	 		
КОНЕЦЕСЛИ;//1 - ЗаказТранзитный	  
  
возврат рез;
	
КонецФункции

//+++ 27.01.2015 - дополнительная функция, которая вызывается многогратно
//вызывается из предыдущей функции ПолучитьСтатусЗаказаПоСхеме()
функция ЕстьРеализацияЗадание(ЕстьРеализация=Ложь, Полностью=Ложь, ЕстьЗаданиеНаОтгрузку=Ложь, Статус, резЗакрытИлиПроделен)
	
  ЕСЛИ ЕстьРеализация ТОГДА  //51 - да
		
	Если Полностью Тогда
		рез = Статус[4]; 
  	Иначе
	  	рез = Статус[5];
	КонецЕсли;
	
  ИНАЧЕ//нет реализации  51 - нет
	  
	 Если ЕстьЗаданиеНаОтгрузку Тогда // 6 - да : уже обработан выше
 	    рез =  Статус[10]; // 3 состояния: подготовка 0%, недогруз<100%, Полностью>=100% (+4 состояние: перегруз >100%)
	 Иначе 
	 	рез =  резЗакрытИлиПроделен;             // 6 - нет
	 КонецЕсли;
	
  КОНЕЦЕСЛИ;//51 - ЕстьРеализация
  
возврат рез;

КонецФункции


//+++ 20.04.2013 -----------------------------------------------------------------------------------------
Функция ПеречитатьПроцентНаОтгрузке(массивНомеровЗаказов, минДата='20170701', максДата='20171231')
 	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ зак.ссылка
	    |Поместить ВТ_Заказы
		|ИЗ документ.ЗаказПокупателя КАК зак 
		|ГДЕ зак.Дата>=&минДата и зак.Дата<=&максДата 
		|И зак.Проведен
		|И зак.Номер В (&МассивЗаказов) ;
		|//////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РезервНаСкладах.ЗаказПокупателя.Номер КАК ЗаказПокупателяНомер,
				   |	ВЫБОР
	               |		КОГДА ЗаказыПокупателейОстатки.КоличествоОстаток > 0
				   //--------- точность от 0.001% до 9 999,999% (в 100 раз отгружено больше)
				   //          точность до 5-го знака... т.е. 1 шт из 100 000 шт.
	               |		ТОГДА ВЫРАЗИТЬ(100 * РезервНаСкладах.КоличествоОстаток / ЗаказыПокупателейОстатки.КоличествоОстаток КАК ЧИСЛО(15,3))
	               |		ИНАЧЕ выбор когда РезервНаСкладах.КоличествоОстаток>0 Тогда 200 иначе 0 Конец
	               |	КОНЕЦ КАК Процент
	               |ИЗ
	               |	РегистрНакопления.РезервНаСкладах.Остатки(//&ТекДата
				   |,  ЗаказПокупателя В (выбрать ВТ.ссылка из ВТ_Заказы как ВТ)   ) КАК РезервНаСкладах
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(//&ТекДата
				   |,  ЗаказПокупателя В (выбрать ВТ.ссылка из ВТ_Заказы как ВТ)   ) КАК ЗаказыПокупателейОстатки
	               |		ПО РезервНаСкладах.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
	               |ГДЕ
	               |	РезервНаСкладах.КоличествоОстаток <> 0
	    //         |	И ЗаказыПокупателейОстатки.КоличествоОстаток <> 0
		//+++ 17.11.2014 без упорядочивания быстрее запрос, но дольше поиск в таблице!
				   |УПОРЯДОЧИТЬ ПО
				   |	ЗаказПокупателяНомер
				   //|АВТОУПОРЯДОЧИВАНИЕ
				   |";
	Запрос.УстановитьПараметр("МассивЗаказов", массивНомеровЗаказов);
	Запрос.УстановитьПараметр("минДата",Началодня(минДата) );
	Запрос.УстановитьПараметр("максДата",КонецДня(максДата) );
//	Запрос.УстановитьПараметр("ТекДата",КонецДня(ТекущаяДата()) );
	результат = Запрос.Выполнить();
	таблЗнач  = результат.Выгрузить(); // 
	возврат таблЗнач;
КонецФункции


//+++ 03.06.2015 - из обработки рачет поездки в Подмосковье
// проверим есть ли документ перемещения по заказу
// за период с даты отгрузки(даты) заказа - по Конец текущего дня
// при условии, что товар прибыл на Буферный склад
//
Функция ПолучитьСтруктуруРезерваПоЗаказу(СсылкаЗаказ, ДатаНачПроверки='00010101') 
	
	//Если ДатаНачПроверки='00010101' Тогда
		НачДата = НачалоДня( мин(СсылкаЗаказ.Дата, ?(СсылкаЗаказ.ДатаОтгрузки>'00010101',СсылкаЗаказ.ДатаОтгрузки,СсылкаЗаказ.Дата) ) );   //+++ 27.10.2014  мин
	//иначе
	//	НачДата = НачалоДня(ДатаНачПроверки);
	//КонецЕсли;
	
	КонДата = КонецДня( ТекущаяДата() );
	
структура1 = новый Структура;
структура1.Вставить("ЕстьРезерв", Ложь);
структура1.Вставить("ЭтоРезервПеремещения", Ложь);
структура1.Вставить("ЭтоРезервОтгрузки", Ложь);
структура1.Вставить("ПеремещениеВыполнено",Ложь);
структура1.Вставить("ОтгрузкаВыполнена",Ложь);

 	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ТоварыНаСкладахОбороты.Регистратор,
	                |	СУММА(ТоварыНаСкладахОбороты.КоличествоПриход) КАК КоличествоПриход,
	                |	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход,
	                |	ТоварыНаСкладахОбороты.Период КАК Период
	                |ИЗ
	                |	РегистрНакопления.РезервНаСкладах.Обороты(&НачДата, &КонДата, Регистратор, ЗаказПокупателя = &ЗаказПокупателя) КАК ТоварыНаСкладахОбороты
	                |ГДЕ
	                |	(ТоварыНаСкладахОбороты.КоличествоПриход >= 0
	                |			ИЛИ ТоварыНаСкладахОбороты.КоличествоРасход >= 0)
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ТоварыНаСкладахОбороты.Регистратор,
	                |	ТоварыНаСкладахОбороты.Период
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка,
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.КоличествоШтук,
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.КоличествоШтукОтгружено,
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.Дата
	                |ИЗ
	                |	Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ЗаданиеНаПеремещениеЗаказыПокупателей
	                |ГДЕ
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.ЗаказПокупателя = &ЗаказПокупателя
	               |	И ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.Дата >= &НачДата
	                |	И (НЕ ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.ПометкаУдаления)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка,
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.КоличествоШтук,
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.КоличествоШтукОтгружено,
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.Дата
	                |ИЗ
	                |	Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
	                |ГДЕ
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя = &ЗаказПокупателя
	               |	И ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.Дата >= &НачДата
	                |	И (НЕ ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.ПометкаУдаления)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Период
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 Запрос.УстановитьПараметр("НачДата", НачалоНедели(НачДата) ); //Задания и движение резерва - отслеживается за 2-3 дня (не более 7 дней)!
	 Запрос.УстановитьПараметр("КонДата", КонДата );
	 Запрос.УстановитьПараметр("ЗаказПокупателя", СсылкаЗаказ);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл // Если движение за период
		 
		 структура1.ЕстьРезерв = Выборка.Регистратор.Проведен;
		 
		 //Если несколько одинаковых документов - возьмется последний! 
		 Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗаданиеНаПеремещение") Тогда
			 структура1.ЭтоРезервПеремещения = Истина;
			 структура1.ПеремещениеВыполнено = (Выборка.КоличествоПриход=Выборка.КоличествоРасход) или Выборка.Регистратор.Выполнено;
			 
		 ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗаданиеНаОтгрузку") Тогда
			 структура1.ЭтоРезервОтгрузки = Истина;
		     структура1.ОтгрузкаВыполнена    =(Выборка.КоличествоПриход = Выборка.КоличествоРасход) или Выборка.Регистратор.Выполнено;
			 
		 КонецЕсли;
		 
	 КонецЦикла;	 
  
	 возврат структура1;	
	 
КонецФункции



//----выгрузка заказов покупателей в Store---------------
// определяет текстовое наименование Статуса заказа
//
Функция ПолучитьСтатусЗаказа(ЗаказПокупателя) экспорт
	
   рез = "ВОбработке"; // любые изменения в ЯШТ - значит в обработке
 
  //+++ 03.11.2015 - без общего заказа - Сразу смотрим на отмененность 
Если ЗаказПокупателя.ПометкаУдаления Тогда
		рез = "Отменен";    // Если не отгружен, а закрыт или скорректирован в 0 или ПометкаУдаления
		
ИначеЕсли НЕ ЗаказПокупателя.проведен Тогда   //+++ 03.11.2015 сразу проверяем!
		рез = "Новый"; // не проведен, значит новый

Иначе	  // заказ проведен!
		
   Если нетЗаказанныхТоваровПоЗаказу(ЗаказПокупателя) Тогда
	   Если ЕстьОтгрузкиПоЗаказу(ЗаказПокупателя) Тогда
		 рез = "Отгружен";   // есть реализации и нет заказанных товаров - Тогда меняется при записи реализации
	   иначе
		рез = "Отменен";    // Если не отгружен, а закрыт или скорректирован в 0 или ПометкаУдаления
	   КонецЕсли;
	Иначе // есть заказы
		Если ЕстьОтгрузкиПоЗаказу(ЗаказПокупателя) Тогда
		  рез = "ОтгруженЧастично";   // есть реализация - Тогда меняется при записи реализации
	    Иначе	
		  рез = "ВОбработке"; // любые изменения в ЯШТ - значит в обработке
		КонецЕсли;  
	КонецЕсли;
	
КонецЕсли;
	  
	  возврат рез;

КонецФункции

//+++ 29.01.2015 - неточная функция... анализирует только нехватку при отгрузке 1 товара по 1 заказу
функция ПроцентОгрузкиСоСкладаТоваровОбщегоЗаказаПоЗаказу(ЗаказОбщий, Заказ=Неопределено)
рез = ЛОЖЬ;
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателяЗаказы.ЗаказПокупателя) КАК ЗаказПокупателя,
               |	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
               |	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество
               |ПОМЕСТИТЬ ВТ_ТоварыПоЗаказам
               |ИЗ
               |	Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
               |		ПО ЗаказПокупателяЗаказы.ЗаказПокупателя = ЗаказПокупателяТовары.Ссылка
               |ГДЕ
               |	ЗаказПокупателяЗаказы.Ссылка = &Ссылка
               |	И ЗаказПокупателяТовары.Номенклатура В
               |			(ВЫБРАТЬ
               |				ЗакПок.Номенклатура
               |			ИЗ
               |				Документ.ЗаказПокупателя.товары КАК ЗакПок
               |			ГДЕ
               |				ЗакПок.Ссылка = &ЗаказПокупателя)
               |
               |СГРУППИРОВАТЬ ПО
               |	ЗаказПокупателяТовары.Номенклатура
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
               |	МАКСИМУМ(ЗаказПокупателяТовары.Количество) КАК КоличествоВЗаказе,
               |	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)) КАК КоличествоОтгружается,
               |	МАКСИМУМ(ЕСТЬNULL(ДелениеТоваровОбщегоЗаказаПоЗаказам.Количество, 0)) КАК КоличествоВОбщемЗаказе,
               |	ДелениеТоваровОбщегоЗаказаПоЗаказам.ЗаказПокупателя КАК КоличествоЗаказов
               |ИЗ
               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
               |				,
               |				ЗаказПокупателя = &Ссылка
               |					И Номенклатура В
               |						(ВЫБРАТЬ
               |							ЗакПок.Номенклатура
               |						ИЗ
               |							Документ.ЗаказПокупателя.Товары КАК ЗакПок
               |						ГДЕ
               |							ЗакПок.Ссылка = &ЗаказПокупателя)) КАК ЗаказыПокупателейОстатки
               |		ПО ЗаказПокупателяТовары.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
               |			ВТ_ТоварыПоЗаказам.ЗаказПокупателя КАК ЗаказПокупателя,
               |			ВТ_ТоварыПоЗаказам.Номенклатура КАК Номенклатура,
               |			ВТ_ТоварыПоЗаказам.Количество КАК Количество
               |		ИЗ
               |			ВТ_ТоварыПоЗаказам КАК ВТ_ТоварыПоЗаказам) КАК ДелениеТоваровОбщегоЗаказаПоЗаказам
               |		ПО ЗаказПокупателяТовары.Номенклатура = ДелениеТоваровОбщегоЗаказаПоЗаказам.Номенклатура
               |ГДЕ
               |	ЗаказПокупателяТовары.Ссылка = &ЗаказПокупателя
               |
               |СГРУППИРОВАТЬ ПО
               |	ЗаказПокупателяТовары.Номенклатура,
               |	ДелениеТоваровОбщегоЗаказаПоЗаказам.ЗаказПокупателя
               |АВТОУПОРЯДОЧИВАНИЕ";
Запрос.УстановитьПараметр("Ссылка", ЗаказОбщий);
Запрос.УстановитьПараметр("ЗаказПокупателя", Заказ);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
колНедогрузаОбщ = 0; КолТоваровВЗаказе = 0;	
Пока Выборка.Следующий() Цикл
	
		КолТоваровВЗаказе = КолТоваровВЗаказе + Выборка.КоличествоВЗаказе;
			колНедогруза  = Выборка.КоличествоВОбщемЗаказе - Выборка.КоличествоОтгружается;
			Если колНедогруза>0 Тогда
				Если Выборка.КоличествоЗаказов=1 Тогда  // единственный (1 заказ по 1 товару 99% случаев!)
				 колНедогрузаОбщ = колНедогрузаОбщ + колНедогруза;
				 КолТовара = Выборка.КоличествоВЗаказе; // это количество - надо было отгрузить
				//#Если Клиент Тогда
				//	сообщить("НЕДОГРУЗ! Товар: "+строка(выборка.Номенклатура.Код)+" - "+строка(выборка.Номенклатура)+" не будет огружено со склада "+строка(колНедогруза)+" из "+строка(Выборка.КоличествоВЗаказе)+"шт. по заказу "+строка(Заказ)  , СтатусСообщения.Внимание);// !
				//#КонецЕсли
				
				Иначе
				//возможно 7шт отгружается на 2 заказа по 4шт ... и 1 заказ будет отгружен, 
						    //а второй (идет позже в списке Заказы) - не полностью...
							
				 ВыборкаКоличествоОтгружается = Выборка.КоличествоОтгружается; // общее число товаров на отгрузку
				 
				 Запрос1 = Новый Запрос;
				 Запрос1.Текст = "ВЫБРАТЬ
				 |	ЗаказПокупателяЗаказы.НомерСтроки КАК НомерСтроки,
				 |	ЗаказПокупателяЗаказы.ЗаказПокупателя,
				 |	ЗаказПокупателяТовары.Номенклатура,
				 |	ЗаказПокупателяТовары.Количество
				 |ИЗ
				 |	Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
				 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
				 |		ПО ЗаказПокупателяЗаказы.ЗаказПокупателя = ЗаказПокупателяТовары.Ссылка
				 |ГДЕ
				 |	ЗаказПокупателяЗаказы.Ссылка = &Ссылка
				 |	И ЗаказПокупателяТовары.Номенклатура = &Номенклатура
				 |
				 |УПОРЯДОЧИТЬ ПО
				 |	НомерСтроки";
				 
				 Запрос1.УстановитьПараметр("Ссылка", ЗаказОбщий);
				 Запрос1.УстановитьПараметр("Номенклатура", выборка.Номенклатура);
				 
				 Результат = Запрос1.Выполнить();
				 Выборка1 = Результат.Выбрать();
				  колНедогруза = 0;
				 Пока Выборка1.Следующий() Цикл
				 ВыборкаКоличествоОтгружается = ВыборкаКоличествоОтгружается - выборка1.Количество;
					 Если выборка1.ЗаказПокупателя = Заказ 
						 и ВыборкаКоличествоОтгружается<0 Тогда
						колНедогруза = -ВыборкаКоличествоОтгружается;
						прервать;
					 КонецЕсли;	
				 КонецЦикла;
				 
				 Если колНедогруза>0 Тогда
				 колНедогрузаОбщ = колНедогрузаОбщ + колНедогруза;
				 КолТовара = выборка1.Количество; // это количество - надо было отгрузить
				//#Если Клиент Тогда
				//	сообщить("НЕДОГРУЗ! Товар: "+строка(выборка.Номенклатура.Код)+" - "+строка(выборка.Номенклатура)+" не будет огружено со склада "+строка(колНедогруза)+" из "+строка(выборка1.Количество)+"шт. по заказу "+строка(Заказ)  , СтатусСообщения.Внимание);// !
				//#КонецЕсли
				 КонецЕсли;
			
				КонецЕсли;
			КонецЕсли;	
КонецЦикла;

резПроц = ?(КолТоваровВЗаказе>0, Окр(100 - колНедогрузаОбщ*100/КолТоваровВЗаказе,3), ?(колНедогрузаОбщ=0,0, 200) );
возврат резПроц;	

КонецФункции	//недоотгрузка со склада по Заданию на отгрузку...


//+++ 19.01.2015
функция ЕстьНедогрузТоваровОбщегоЗаказаПоЗаказу(ЗаказОбщий, Заказ=Неопределено)
рез = ЛОЖЬ;

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
               |	ЗаказПокупателяТовары.Количество КАК Количество,
               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
               |	ВложенныйЗапрос.Ссылка КАК Заказ,
               |	ЕСТЬNULL(ВложенныйЗапрос.Количество, 0) КАК КоличествоВЗаказе,
               |	ЕСТЬNULL(ВложенныйЗапрос.НомерСтроки, 0) КАК НомерСтроки
               |ИЗ
               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
               |		ПО ЗаказПокупателяТовары.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
               |			ЗаказПокупателяТовары.Ссылка КАК Ссылка,
               |			ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
               |			ЗаказПокупателяТовары.Количество КАК Количество,
               |			ЗаказПокупателяЗаказы.НомерСтроки КАК НомерСтроки
               |		ИЗ
               |			Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
               |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
               |				ПО ЗаказПокупателяЗаказы.ЗаказПокупателя = ЗаказПокупателяТовары.Ссылка
               |		ГДЕ
               |			ЗаказПокупателяЗаказы.Ссылка = &ЗаказПокупателя) КАК ВложенныйЗапрос
               |		ПО ЗаказПокупателяТовары.Номенклатура = ВложенныйЗапрос.Номенклатура
               |ГДЕ
               |	ЗаказПокупателяТовары.Ссылка = &ЗаказПокупателя
               |
               |УПОРЯДОЧИТЬ ПО
               |	Номенклатура,
               |	НомерСтроки
               |ИТОГИ
               |	МАКСИМУМ(Количество),
               |	МАКСИМУМ(КоличествоОстаток),
               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ),
               |	СУММА(КоличествоВЗаказе),
               |	МАКСИМУМ(НомерСтроки)
               |ПО
               |	Номенклатура
               |АВТОУПОРЯДОЧИВАНИЕ";

Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказОбщий);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

Пока Выборка.Следующий() Цикл
	Выборка2 = выборка.Выбрать();
	КолТовара  = выборка.Количество;
	КолОстаток = выборка.КоличествоОстаток;
	Если КолОстаток = 0 Тогда продолжить КонецЕсли;
	колНедогруза = 0;	
	Пока Выборка2.Следующий() Цикл
		Если КолТовара - КолОстаток < Выборка2.КоличествоВЗаказе Тогда
			колНедогруза = Выборка2.КоличествоВЗаказе - ( КолТовара - КолОстаток );
			Если Заказ<>Неопределено 
				и Заказ=выборка2.Заказ Тогда
				рез = истина; прервать;
			КонецЕсли;	
		КонецЕсли;	
		КолТовара = КолТовара - Выборка2.КоличествоВЗаказе; // это количество - отгрузилось
		//#Если Клиент Тогда
		//	Если колНедогруза > 0 Тогда
		//	сообщить("По заказу "+строка(Выборка2.Заказ)+" товар: "+строка(выборка.Номенклатура)+" недогружено "+строка(колНедогруза)+" из "+строка(Выборка2.КоличествоВЗаказе) , СтатусСообщения.Внимание);
		//	КонецЕсли;
		//#КонецЕсли
	КонецЦикла;
	  Если рез Тогда Прервать КонецЕсли;
КонецЦикла;
				   
возврат рез;				   
КонецФункции				   

//получаем последнее проведенное перемещение по заказу
функция ПолучитьПеремещениеПоЗаказу(ЗаказПокупателя)
	
// дата формирования внутреннего заказа должно быть не раньше 
	ЧислоДопДней = 14; // только за этот интервал смотрим + и - по складу получателя!
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ различные
	               |	ВнутренниеЗаказыОбороты.Регистратор
	               |ИЗ
	               |	РегистрНакопления.ВнутренниеЗаказы.Обороты(&НачДата, &КонДата
				   |														    , Регистратор,
	               |	  ВнутреннийЗаказ.ДокументОснование = &ДокументОснование
				   // |	И Номенклатура В (ВЫБРАТЬ ВТ_Товары.Номенклатура ИЗ ВТ_Товары)
	              
				   |) КАК ВнутренниеЗаказыОбороты
				   |ГДЕ
				   |	ВнутренниеЗаказыОбороты.КоличествоРасход > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВнутренниеЗаказыОбороты.Регистратор.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументОснование", ЗаказПокупателя);
	Запрос.УстановитьПараметр("НачДата",  НачалоДня(ЗаказПокупателя.Дата)-ЧислоДопДней*86400 );
	Запрос.УстановитьПараметр("КонДата",  КонецДня(макс(ЗаказПокупателя.Дата, ЗаказПокупателя.ДатаОтгрузки)) + ЧислоДопДней*86400 );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	рез = документы.ПеремещениеТоваров.ПустаяСсылка();
	
	Пока выборка.Следующий() Цикл
		//берем только последнее перемещение
		Если типЗнч(выборка.регистратор)=тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			рез = выборка.Регистратор;
			прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	возврат рез; //точно товар пришел
	
КонецФункции

//смотрим "закрытие" перемещения по "товарам на складах" на складе Получателе
//переписана 21.04.2015 - проверям весь ассортимент по заказу - на складах филиала
функция ПеремещениеНаФилиалВыполнено(ЗаказПокупателя, ПодразделениеПеремещения, ПолучитьТаблицуНЕПеремещенныхТоваров=ЛОЖЬ) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокПерем.Номенклатура,
	               |	СУММА(ДокПерем.Количество) КАК Количество
	               |ПОМЕСТИТЬ ВТ_Перемещение
	               |ИЗ
	               |	Документ.ЗаказПокупателя.Товары КАК ДокПерем
	               |ГДЕ
	               |	ДокПерем.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДокПерем.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	На_Перемещение.Номенклатура,
	               |	ЕСТЬNULL(ОстФилиал.Количество, 0) - На_Перемещение.Количество КАК Количество
	               |ИЗ
	               |	ВТ_Перемещение КАК На_Перемещение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |			СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК Количество
	               |		ИЗ
	               |			РегистрНакопления.ТоварыНаСкладах.Остатки( ,
	               |					Склад.Транзитный
	               |						И НЕ Склад.ЗапретитьИспользование
	               |						И Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ПустаяСсылка)
	               |						И Склад.Подразделение = &Подразделение
	               |						И Номенклатура В (ВЫБРАТЬ Номенклатура	ИЗ ВТ_Перемещение)
				   |													) КАК ТоварыНаСкладахОстатки
	               |		ГДЕ
	               |			ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) > 0
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ТоварыНаСкладахОстатки.Номенклатура) КАК ОстФилиал
	               |		ПО (ОстФилиал.Номенклатура = На_Перемещение.Номенклатура)
	               |ГДЕ
				   // надо найти только то, чего не достаточно! поэтому <0 правильно!
	               |	ЕСТЬNULL(ОстФилиал.Количество, 0) - На_Перемещение.Количество < 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Перемещение";
	
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеПеремещения);
	Запрос.УстановитьПараметр("Ссылка",ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	Если ПолучитьТаблицуНЕПеремещенныхТоваров Тогда
		рез = Результат.Выгрузить();
	иначе
	    рез = Результат.Пустой();  //все есть на складах филиала, поэтому выборка пустая!
	КонецЕсли;
возврат рез;	
КонецФункции

// - определение последнего общего заказа в состав которого вошел этот единичному заказу, 
//
//
функция ПолучитьОбщийЗаказ(ЗаказПокупателя, Подразделение=Неопределено) Экспорт
	
общий = документы.ЗаказПокупателя.ПустаяСсылка(); // нет объединенного заказа, это обычный заказ!

//для ускорения - любой заказа Если имеет общ.заказ то пишется куда он перенесен...
Если Найти(ЗаказПокупателя.Комментарий,"# данные перенесены >>")>0    //99%
	или Найти(ЗаказПокупателя.Комментарий," >>")>0
	или ЗаказПокупателя.транзит Тогда   //+++ 28.05.2015
//1. найдём последний объединённый заказ с этим заказом...  типЗаказа = 6
//2. для перемещения на филиал (295) - типЗаказа = 7 		
//3. для перемещения через склад филиала (293) - типЗаказа = 7 		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ первые 1
	               |	ЗаказПокупателяЗаказы.Ссылка
	               |ИЗ
	               |	Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
	               |ГДЕ
	               |	ЗаказПокупателяЗаказы.ЗаказПокупателя = &ЗаказПокупателя
	               |	И ЗаказПокупателяЗаказы.Ссылка.Дата >= &ДатаЗаказаПокупателя
				    //+++ 28.05.2015 - для филиалов ищем последний заказ ЯШТ!
	               |"+?(ЗаказПокупателя.транзит,""," И ЗаказПокупателяЗаказы.Ссылка.Проведен")+"
				   //17.03.2016
	               |"+?(Подразделение=Неопределено,"", "И ЗаказПокупателяЗаказы.Ссылка.Подразделение = &Подразделение")+"
				   //+++ 21.04.2015 - сортировка увеличивает время запроса в несколько раз
				   |УПОРЯДОЧИТЬ ПО
				   |	ЗаказПокупателяЗаказы.Ссылка.Дата УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ
				  |";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
//Если объединенный заказа ВСЕГДА должен быть позже изначального - Тогда можно добавить еще условие
	Запрос.УстановитьПараметр("ДатаЗаказаПокупателя", НачалоДня(ЗаказПокупателя.Дата) );   // могут быть перепутаны
	
	//17.03.2016
	Если Подразделение<>Неопределено Тогда
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//Если Выборка.Следующий() Тогда
	Если НЕ Результат.Пустой() Тогда //+++ 21.04.2015
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		  общий = Выборка.Ссылка;
	КонецЕсли;
КонецЕсли;

возврат общий;

КонецФункции

функция ЕстьОтгрузкиПоЗаказу(ЗаказПокупателя)
рез = Ложь;
Если ЗаказПокупателя=документы.ЗаказПокупателя.ПустаяСсылка() Тогда
	возврат рез;
КонецЕсли;	
Запрос = Новый Запрос;

Если не ЗаказПокупателя.ВводитьТолькоПеремещение Тогда
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПродажиОбороты.КоличествоОборот
	               |ИЗ
	               |	РегистрНакопления.Продажи.Обороты(&Дата0, , , ЗаказПокупателя = &Заказ) КАК ПродажиОбороты
	               |ГДЕ
	               |	ПродажиОбороты.КоличествоОборот>0";
				   
	// 14.01.2016 - бывает реализация раньше заказа!
	Запрос.УстановитьПараметр("Дата0", ДобавитьМесяц( НачалоМесяца(ЗаказПокупателя.Дата),-1) ); //+++ 09.02.2016 за 2 месяца  
	Запрос.УстановитьПараметр("Заказ", ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//Если Выборка.Следующий() Тогда
	Если НЕ Результат.Пустой() Тогда  //+++ 21.04.2015
		рез = истина;
	КонецЕсли;	
Иначе //--------------------перемещения отслеживаются сложнее, через ВнутреннийЗаказ ---------------------
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВнутренниеЗаказыОбороты.КоличествоОборот
	               |ИЗ
	               |	РегистрНакопления.ВнутренниеЗаказы.Обороты(&Дата0, , , ВнутреннийЗаказ.ДокументОснование = &Заказ) КАК ВнутренниеЗаказыОбороты
	               |ГДЕ
	               |	ВнутренниеЗаказыОбороты.КоличествоОборот>0";
				   
	Запрос.УстановитьПараметр("Дата0", ДобавитьМесяц( НачалоМесяца(ЗаказПокупателя.Дата),-1) ); //+++ 09.02.2016 за 2 месяца  
	Запрос.УстановитьПараметр("Заказ", ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//Если Выборка.Следующий() Тогда
	Если НЕ Результат.Пустой() Тогда //+++ 21.04.2015
		рез = истина;
	КонецЕсли;	
	
КонецЕсли;

	возврат рез;	
	
КонецФункции
	
функция нетЗаказанныхТоваровПоЗаказу(ЗаказПокупателя)  
	
	рез = истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказыПокупателейОстатки.Номенклатура,
	               |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	               |	СУММА(ЗаказыПокупателейОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &Заказ) КАК ЗаказыПокупателейОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыПокупателейОстатки.Номенклатура
	               |
	               |ИМЕЮЩИЕ
	               |	(СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) > 0
	               |		ИЛИ СУММА(ЗаказыПокупателейОстатки.СуммаУпрОстаток) > 0)";
//возврат  - тоже считается?	
	Запрос.УстановитьПараметр("Заказ", ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//Если Выборка.Следующий() Тогда
	Если НЕ Результат.Пустой() Тогда  //+++ 21.04.2015 - так правильнее... без выборки
		 рез = Ложь;
	КонецЕсли;
	
	возврат рез;

КонецФункции





//Определяет цены для Контрагента по Списку товаров 
//1) определяется последняя проведенная "Политика ценообразования"
//2) по правилам из Политики ценообразования для Списка товаров - получаются цены товаров
//3) Если нет цены или правила, то цена = 1 р. 
//4) Если нет документа Политики ценообразования - то выдает ошибку в виде строки: "нет политики ценообразования для контрагента"
//
//Результат: таблица значений с ценами Контрагента, столбцы: 
//1) Приоритет - показывает номер сработавшего правила,
//2) Номенклатура - товар из первоначального Списка Номенклатуры,
//3) МинимальнаяЦена - рассчитаная цена или 1,
//4) ТипЦен - показывает от какого типа цен была скидка
//
//Смирнов 13.02.14 
//добавил возможность получения цен на конкретную дату
Функция ПолучитьЦеныДляКонтрагента(Контрагент,СписокНоменклатуры, ДатаЦены=Неопределено) Экспорт
	// получаетцены
	ЗапросПоискПолитики=Новый Запрос;	
	Если ДатаЦены=Неопределено Тогда
		ЗапросПоискПолитики.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПолитикаЦенообразования.Ссылка
		|ИЗ
		|	Документ.ПолитикаЦенообразования КАК ПолитикаЦенообразования
		|ГДЕ
		|	ПолитикаЦенообразования.Контрагент = &Контрагент
		|	И ПолитикаЦенообразования.Ссылка.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолитикаЦенообразования.Дата УБЫВ";
		
		
		ЗапросПоискПолитики.УстановитьПараметр("Контрагент",Контрагент);
	Иначе
		//Смирнов ++
		//
		ЗапросПоискПолитики.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПолитикаЦенообразования.Ссылка
		|ИЗ
		|	Документ.ПолитикаЦенообразования КАК ПолитикаЦенообразования
		|ГДЕ
		|	ПолитикаЦенообразования.Контрагент = &Контрагент
		|	И ПолитикаЦенообразования.Ссылка.Проведен
		|	И ПолитикаЦенообразования.Дата <= &ДатаЦены
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолитикаЦенообразования.Дата УБЫВ";
		ЗапросПоискПолитики.УстановитьПараметр("Контрагент",Контрагент);
		ЗапросПоискПолитики.УстановитьПараметр("ДатаЦены",ДатаЦены);
		//Смирнов
	КонецЕсли;
	
	РезультатПолитика= ЗапросПоискПолитики.Выполнить();
	
	Если РезультатПолитика.Пустой() Тогда
		Возврат ("нет политики ценообразования для контрагента");
	Иначе
		ВыборкаПолитика=РезультатПолитика.Выбрать();
		ВыборкаПолитика.Следующий();
		ТекущаяПолитика=ВыборкаПолитика.Ссылка;
	КонецЕсли;	     // для контрагента нет политики ценообразования
	
	
	ТекстЗапросаДляВставкиЦена="ВЫБОР ";
	
	Для сч=0 по ТекущаяПолитика.Правила.Количество()-1 Цикл
		ТекстЗапросаДляВставкиЦена=ТекстЗапросаДляВставкиЦена+ " КОГДА " + ТекущаяПолитика.Правила[сч].Правило + " ТОГДА " + ТекущаяПолитика.Правила[сч].ОтпускнаяЦена;
	КонецЦикла;
	ТекстЗапросаДляВставкиЦена=ТекстЗапросаДляВставкиЦена+" ИНАЧЕ 0 КОНЕЦ ";
	
	
	ТекстЗапросаДляВставкиПриоритет="ВЫБОР ";
	
	Для сч=0 по ТекущаяПолитика.Правила.Количество()-1 Цикл
		ТекстЗапросаДляВставкиПриоритет=ТекстЗапросаДляВставкиПриоритет+ " КОГДА " + ТекущаяПолитика.Правила[сч].Правило + " ТОГДА " + ТекущаяПолитика.Правила[сч].НомерСтроки;
	КонецЦикла;
	ТекстЗапросаДляВставкиПриоритет=ТекстЗапросаДляВставкиПриоритет+" ИНАЧЕ 1000 КОНЕЦ Приоритет ";
	
	
	ПостроительОтчетаОтчет = Новый ПостроительОтчета;
	
	ПостроительОтчетаОтчет.Текст="ВЫБРАТЬ
	|   Приоритет, 
	|	Номенклатура,   
	|	ЦенаПоТипуЦен,
	|	МинимальнаяЦена
	|
	|	ПОМЕСТИТЬ ВТ_Товары
	| ИЗ
	| (ВЫБРАТЬ 
	|	Номенклатура,   
	//|	Номенклатура.НоменклатурнаяГруппа, 
	//|	Номенклатура.Производитель, 
	|	ЦенаПоТипуЦен,
	|	0000 МинимальнаяЦена,
	|	1 Приоритет
	|	ИЗ 
	| ( ВЫБРАТЬ Номенклатура, ТипЦен, Цена ЦенаПоТипуЦен 
	|	ИЗ РегистрСведений.ЦеныНоменклатуры.СрезПоследних( //&ДатаЦены
	|       , ТипЦен В (&СписокТиповЦен) 
	| 				И Номенклатура В (&СписокНоменклатуры) )
	|   ГДЕ Цена > 0 )ЦеныНоменклатуры 
	//+++ 22.09.2015 | ГДЕ 0000>0
	|) А
	//+++(------------ 27.08.2014 ---------- Фиксированные цены имеют МИНИМАЛЬНЫЙ приоритет ---------------------
	// Приоритет:
	// -5000  - фиксированные цены
	// -1000 до -800 = это общие спец.правила (по отдельным позициям)
	// от 1000 и более это номер общего правила + 1000
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	-5000,
	|	ЦеныКлиентаСрезПоследних.Номенклатура,    
	//-----------------по фикс. ценам - нет Цены по типу цен--------------------
	|	0,
	|	ЦеныКлиентаСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныКлиента.СрезПоследних(//&ДатаЦены
	|			, Контрагент = &Контрагент
	|			И Номенклатура В (&СписокНоменклатуры) ) КАК ЦеныКлиентаСрезПоследних
	//11.07.2017 было >100
	|ГДЕ ЕстьNull(ЦеныКлиентаСрезПоследних.Цена,0)>0
	//+++)
	|;
	|
	|ВЫБРАТЬ Номенклатура,  МИНИМУМ(Приоритет) Приоритет	
	|ПОМЕСТИТЬ ВТ_ПриоритетыТоваров
	|	ИЗ 
	|ВТ_Товары
	|СГРУППИРОВАТЬ ПО Номенклатура
	|;
	|ВЫБРАТЬ
	| ВТ_Товары.Приоритет, ВТ_Товары.Номенклатура, 
	|ВТ_Товары.ЦенаПоТипуЦен,
	
	////---------------------округление до рублей-------------------
//11.07.2017 убрано    *(1 + ЕстьNull(ТабСкидок.ПроцФиксНаценки,0)/100)
	|Выразить(ВТ_Товары.МинимальнаяЦена как Число(15,2)) как МинимальнаяЦена,
	
//-----------ПО ДОКУМЕНТУ политики ценообразования - скидка по предоплате = 0, цена = минимальной (до копеек!)-------------------------
	|0 как СкидкаПредоплаты,
//11.07.2017 убрано    *(1 + ЕстьNull(ТабСкидок.ПроцФиксНаценки,0)/100)
	|Выразить(ВТ_Товары.МинимальнаяЦена как Число(15,2)) как ЦенаСоСкидкойПредоплаты,
	//05.05.15 Смирнов код для сом-соединения
	|ВТ_Товары.Номенклатура.Код КАК Код
	//--05.05.15
	|
	|
	|ИЗ ВТ_Товары
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриоритетыТоваров
	|ПО  ВТ_Товары.Номенклатура= ВТ_ПриоритетыТоваров.Номенклатура 
	|И ВТ_Товары.Приоритет= ВТ_ПриоритетыТоваров.Приоритет 
	|
	//+++ 29.07.2014 - 11.07.2017  убрано!
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|
	//|( ВЫБРАТЬ
	//|СкидкиНаценки.Номенклатура, 
	//|СкидкиНаценки.ПроцФиксНаценки как  ПроцФиксНаценки
	//| ИЗ
	//|	(выбрать ЦеныКлиентаСкидкиНаценки.Номенклатура,
	//|	         ЦеныКлиентаСкидкиНаценки.Цена как ПроцФиксНаценки
	//| ИЗ
	//|	РегистрСведений.ЦеныКлиента.СрезПоследних(//&ДатаЦены
	//|		,  Контрагент = &Контрагент 
	//|	     и Номенклатура В (&СписокНоменклатуры) ) КАК ЦеныКлиентаСкидкиНаценки
	//|ГДЕ ЕстьNull(ЦеныКлиентаСкидкиНаценки.Цена,0)<>0 
	//|	и ЕстьNull(ЦеныКлиентаСкидкиНаценки.Цена,0)>=-100
	//|	и ЕстьNull(ЦеныКлиентаСкидкиНаценки.Цена,0)<=100 
	//|	) как СкидкиНаценки ) как ТабСкидок
	//|
	//|ПО ВТ_Товары.Номенклатура = ТабСкидок.Номенклатура
 	|";
ПостроительОтчетаОтчет.Параметры.Вставить("Контрагент", Контрагент); //+++ 27.08.2014
	
	Если ДатаЦены<>Неопределено Тогда //+++ 25.02.2014 цены тоже надо брать на дату среза!
		ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"//&ДатаЦены","&ДатаЦены");
		ПостроительОтчетаОтчет.Параметры.Вставить("ДатаЦены", ДатаЦены);
	КонецЕсли; 
		
	ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"0000",ТекстЗапросаДляВставкиЦена);
	ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"1 Приоритет",ТекстЗапросаДляВставкиПриоритет);
	
	СписокТиповЦен=Новый СписокЗначений;  //Базовая, Кр.Опт
	
	Для сч=0 по ТекущаяПолитика.Параметры.Количество()-1 Цикл
		ИмяПараметра =ТекущаяПолитика.Параметры[сч].ИмяПараметра;
		ЗначениеПараметра = ТекущаяПолитика.Параметры[сч].ЗначениеПараметра;
		ПостроительОтчетаОтчет.Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
		
		Если ТипЗнч(ЗначениеПараметра)= Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
			Если  СписокТиповЦен.НайтиПоЗначению(ЗначениеПараметра) =Неопределено Тогда
				СписокТиповЦен.Добавить(ЗначениеПараметра);
			КонецЕсли;	   
		КонецЕсли;	
	КонецЦикла;	 
	
	ПостроительОтчетаОтчет.Параметры.Вставить("СписокТиповЦен", СписокТиповЦен);
	ПостроительОтчетаОтчет.Параметры.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	
	//ПостроительОтчетаОтчет.Параметры.Вставить("ДатаДокумента", Ссылка.Дата);
	
	Результат = ПостроительОтчетаОтчет.ПолучитьЗапрос().Выполнить();
	
	табЗнач1 = Результат.Выгрузить();
	Возврат  табЗнач1;
	
КонецФункции	




//=================Вспомогательные функции 29.05.2017 - выделен текст в отдельную функцию ======================================
функция ПолучитьТекстЗапросаЦенБезКатегорий()
текст = "ВЫБРАТЬ * из (ВЫБРАТЬ
	               |	ПравилаЦенообразования.Приоритет КАК Приоритет,
	               |	ПравилаЦенообразования.ВидТовара,
	               |	ПравилаЦенообразования.Производитель,
	               |	ПравилаЦенообразования.НоменклатурнаяГруппа,
	               |	ПравилаЦенообразования.ВходитВПапку,
	               |	ПравилаЦенообразования.ПодСтрока,
	               |	ПравилаЦенообразования.Диаметр,
	               |	ПравилаЦенообразования.Номенклатура,
	               |	ПравилаЦенообразования.ТипЦен,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)) КАК Правило,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК ОтпускнаяЦена,
	               |	ПравилаЦенообразования.СкидкаНаценка,
	               |	ПравилаЦенообразования.СкидкаПредоплаты
				   
				   //+++ 04.07.2016
				   |	, ПравилаЦенообразования.ВидДефектаДляУценки
				
	               |ИЗ
	               |	РегистрСведений.ПравилаЦенообразования КАК ПравилаЦенообразования
	               |ГДЕ
	               |	ПравилаЦенообразования.Контрагент = &Контрагент
	               |	И ПравилаЦенообразования.Выключено=ЛОЖЬ
				   
				   //+++ 24.08.2016 - "старые" персональные правила - БЕЗ КАТЕГОРИИ !
				   |    И ПравилаЦенообразования.Категория = Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)

				   //24.11.2016
				   |//гр1    И ПравилаЦенообразования.ВидТовара В (&СписокВидовТовара)
				   |//гр1    И ПравилаЦенообразования.Производитель в (&СписокПроизводителей)
				   |//гр1    И ПравилаЦенообразования.НоменклатурнаяГруппа в (&СписокНомГрупп)

	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПравилаЦенообразованияОбщие.Приоритет + 1000,
	               |	ПравилаЦенообразованияОбщие.ВидТовара,
	               |	ПравилаЦенообразованияОбщие.Производитель,
	               |	ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа,
	               |	ПравилаЦенообразованияОбщие.ВходитВПапку,
	               |	ПравилаЦенообразованияОбщие.ПодСтрока,
	               |	ПравилаЦенообразованияОбщие.Диаметр,
	               |	ПравилаЦенообразованияОбщие.Номенклатура,
	               |	ПравилаЦенообразованияОбщие.ТипЦен,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)),
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(50)),
	               |	ПравилаЦенообразованияОбщие.СкидкаНаценка,
	               |	0
				   				   //+++ 04.07.2016
				   |	, ПравилаЦенообразованияОбщие.ВидДефектаДляУценки

				   |ИЗ
	               |	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
				   
				    //+++ 24.08.2016 - "старые" правила - БЕЗ КАТЕГОРИИ !
				   | ГДЕ ПравилаЦенообразованияОбщие.Категория = Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
				   |	) как Правила
				   |
					//25.09.15 или 13.08.16 -- отбор по 1 виду товара из заказа покупателя----
				   |//гр1 ГДЕ Правила.ВидТовара В (&СписокВидовТовара)
				   |//гр1      и Правила.Производитель в (&СписокПроизводителей)
				   |//гр1      и Правила.НоменклатурнаяГруппа в (&СписокНомГрупп)
				   |
				   |УПОРЯДОЧИТЬ ПО
	               |	Правила.Приоритет
				   |АВТОУПОРЯДОЧИВАНИЕ";
возврат текст;
КонецФункции

//29.05.2017 - выделен текст в отдельную функцию
функция ПолучитьТекстЗапросаЦенПоКатегориям(НеУчитыватьТрКлиента, ПодразделениеМенедераКлиента)
	
	ЗапросТекст = "ВЫБРАТЬ
           |	Табл1.ВидТовара,
           |	Табл1.Категория,
		 //12.01.2017 
		   |	Табл1.ТрКлиента
		   
		   |ПОМЕСТИТЬ ВТ_Виды
           |ИЗ
           |	&ТаблВидов КАК Табл1
		   
		   //+++ соединяем только с нужными видами
		   |//гр1 ГДЕ Табл1.ВидТовара В (&СписокВидовТовара)

           |;
           |///////////////////////////////////////////////
		   |ВЫБРАТЬ * из (ВЫБРАТЬ
           |	Правила1.Приоритет КАК Приоритет,
           |	Правила1.ВидТовара,
           |	Правила1.Производитель,
           |	Правила1.НоменклатурнаяГруппа,
           |	Правила1.ВходитВПапку,
           |	Правила1.ПодСтрока,
           |	Правила1.Диаметр,
           |	Правила1.Номенклатура,
           |	Правила1.ТипЦен,
           |	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)) КАК Правило,
           |	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК ОтпускнаяЦена,
			   
		   //!!! учет тр.Наценки филиала - УЖЕ должна быть тут заложена !!! 
		   |	Правила1.СкидкаНаценка//ТрНаценка
		   |	, Правила1.СкидкаПредоплаты
		   
		   //+++ 04.07.2016
		   |	, Правила1.ВидДефектаДляУценки
		   //12.01.2017
		   |	, ВЫБОР когда Правила1.ТрКлиента=0 
		   |		Тогда ЕстьNull(ТаблКатегорий.ТрКлиента,0)
		   |		иначе Правила1.ТрКлиента 
		   |	КОНЕЦ КАК ТрКлиента
		
           |ИЗ
           |	РегистрСведений.ПравилаЦенообразования КАК Правила1
		   //12.01.2017
		   |ЛЕВОЕ СОЕДИНЕНИЕ
		   |	ВТ_Виды как ТаблКатегорий
		   | ПО Правила1.ВидТовара = ТаблКатегорий.ВидТовара
		   
//==========================Тр.Затраты==============================================
|//ОбщиеПравилаДляТрЗатрат

           |ГДЕ
           |	Правила1.Контрагент = &Контрагент
           |	И Правила1.Выключено=ЛОЖЬ
		   
		   //+++ 24.08.2016 - "старые" и "новые" персональные правила - Разделены по измерению Категория!
		   |    И Правила1.Категория <> Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
		   
		     //+++ 24.11.2016 -- в правилах 1 клиента тоже может быть "бардак"----
		   |//гр1 	И Правила1.ВидТовара В (&СписокВидовТовара)
		   |//гр1   И Правила1.Производитель в (&СписокПроизводителей)
		   |//гр1   И Правила1.НоменклатурнаяГруппа в (&СписокНомГрупп)

|
           |ОБЪЕДИНИТЬ ВСЕ
           |
	//======================== Вот здесь отбор по Общим правилам по Категориям Клиента (или 3-я категория!) ==================
           |"+"ВЫБРАТЬ
           |	ЕстьNull(ПравилаОбщие.Приоритет, 1000) + 1000,
		  
		   //24.08.2016 - Вид есть всегда!
		   //|	ПравилаЦенообразованияОбщие.ВидТовара,
		   |	ТаблВидов.ВидТовара,
		   
           |	ЕстьNull(ПравилаОбщие.Производитель, Значение(Справочник.Производители.ПустаяСсылка)) как Производитель,
           |	ЕстьNull(ПравилаОбщие.НоменклатурнаяГруппа, Значение(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) как НоменклатурнаяГруппа,
		   |	ЕстьNull(ПравилаОбщие.ВходитВПапку,  Значение(Справочник.Номенклатура.ПустаяСсылка)) как ВходитВПапку,
           |	ЕстьNull(ПравилаОбщие.ПодСтрока, """") как ПодСтрока,
           |	ЕстьNull(ПравилаОбщие.Диаметр, """") как Диаметр,
           |	ЕстьNull(ПравилаОбщие.Номенклатура, Значение(Справочник.Номенклатура.ПустаяСсылка))  как  Номенклатура,
		   
		   //+++ 29.05.2017 - цены B2B +++
           |	выбор когда ТаблВидов.Категория = Значение(Перечисление.КатегорииСкидок.B2B) 
		   |    	Тогда &ТипЦенB2B
		   |		Иначе ПравилаОбщие.ТипЦен 
		   |	Конец как ТипЦен,
		   
           |	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)),
           |	ВЫРАЗИТЬ("""" КАК СТРОКА(50)),

		//+++ 24.11.2016 --------------Учет Наценки от филиала по 2м условиям-----------------------
		//---------------------------------флТрнаценка и ИспользоватьТранспорт в правиле---------------
		   |	ЕстьNull(ПравилаОбщие.СкидкаНаценка,0)//ТрНаценка
		//---------------------------------------------------------------------------------------------
		// учет клиентов, которые работают БезНДС (экспортные в рублях по договору Экспорт)
		// - делается ниже, при расчете конечной стоимости (чтобы при проверке правил - не было ошибок!

		   //24.08.2016 - в общих правилах у каждой категории - свои скидки предоплаты!
           |	,ЕстьNull(ПравилаОбщие.СкидкаПредоплаты,0)
		   
		   //+++ 04.07.2016
		   |	, ЕстьNull(ПравилаОбщие.ВидДефектаДляУценки, Значение(Справочник.ВидыДефектовДляУценки.ПустаяСсылка) ) как ВидДефектаДляУценки
		   //12.01.2017
           |	, ТаблВидов.ТрКлиента
		   
		   |ИЗ
		   |	ВТ_Виды как ТаблВидов
		   
           |	ЛЕВОЕ СОЕДИНЕНИЕ
		   |		РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаОбщие
		   |	ПО 
		   |		ТаблВидов.ВидТовара = ПравилаОбщие.ВидТовара
		   |		И ТаблВидов.Категория = ПравилаОбщие.Категория
		   
		   //+++ 24.08.2016 - "старые" правила - БЕЗ Категории!
		   | ГДЕ ПравилаОбщие.Категория <> Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
		   
		   |"+") как Правила
		   |
		  //25.09.15 или 13.08.16 -- отбор по 1 виду товара из заказа покупателя----
		   |//гр1 ГДЕ Правила.ВидТовара В (&СписокВидовТовара)
		   |//гр1      и Правила.Производитель в (&СписокПроизводителей)
		   |//гр1      и Правила.НоменклатурнаяГруппа в (&СписокНомГрупп)
		   |
		   |УПОРЯДОЧИТЬ ПО
           |	Правила.Приоритет
		   |АВТОУПОРЯДОЧИВАНИЕ";
		   
	//16.01.2017 - в Заказе покупателя - нужна галка для "выключения" тр.наценки клиента (при самовывозе)!
		текстТрКлиента = "";  
		текстТрКлиента2 ="";
		текстТрКлиента3 ="";
		
		Если НеУчитыватьТрКлиента = ЛОЖЬ Тогда
			текстТрКлиента  = "*(1+ТаблВидов.ТрКлиента/100)";
			текстТрКлиента2 = "*(1+ВЫБОР когда Правила1.ТрКлиента=0 
								|		Тогда ЕстьNull(ТаблКатегорий.ТрКлиента,0)
								|		иначе Правила1.ТрКлиента 
								|КОНЕЦ/100)";
			текстТрКлиента3 ="*(1+ТаблВидов.ТрКлиента/100)";
		КонецЕсли;
		
		//+++ 24.11.2016 --- учет тр.наценки (Филиала и до Клиента всегда в + ) ----
		Если ПодразделениеМенедераКлиента.ОбособленноеПодразделение Тогда
			
			Если ПодразделениеМенедераКлиента=справочники.Подразделения.НайтиПоКоду("00106") Тогда
				ТрФилиал =  "ТрРнД";
			ИначеЕсли ПодразделениеМенедераКлиента=справочники.Подразделения.НайтиПоКоду("00112") Тогда
				ТрФилиал =  "ТрСПб";
			ИначеЕсли ПодразделениеМенедераКлиента=справочники.Подразделения.НайтиПоКоду("00138") Тогда
				ТрФилиал =  "ТрЕкт";
			иначе  // для москвы или Ярославля - нет тр. наценки!
				ТрФилиал=""; 
			КонецЕсли;
			
			Если ТрФилиал<>"" Тогда  //и филиальная и клиентская наценка
			ЗапросТекст = стрЗаменить(ЗапросТекст, "ЕстьNull(ПравилаОбщие.СкидкаНаценка,0)//ТрНаценка",
			"выбор когда ПравилаОбщие.ИспользоватьТранспорт 
			|		Тогда 100*( (1+ЕстьNull(ПравилаОбщие.СкидкаНаценка,0)/100)*(1+ЕстьNull(ПравилаОбщие."+ТрФилиал+",0)/100)
			//+++ 12.01.2017 --- сразу "прибавим" каскадом ТрКлиента!
			|"+текстТрКлиента+" -1)
			|		иначе "+?(текстТрКлиента="","ЕстьNull(ПравилаОбщие.СкидкаНаценка,0)", "100*( (1+ЕстьNull(ПравилаОбщие.СкидкаНаценка,0)/100)
			|"+текстТрКлиента+" -1)")+" Конец ");
			
	//---------------------------------наценка в перс.правила------------------------------------------------
			ЗапросТекст = стрЗаменить(ЗапросТекст, "//ОбщиеПравилаДляТрЗатрат",
		    "ЛЕВОЕ СОЕДИНЕНИЕ(
			|ВЫБРАТЬ
		    |	ПравилаОбщиеТр.ID,
		    |	ПравилаОбщиеТр.Категория,
		    |	ПравилаОбщиеТр.ИспользоватьТранспорт,
			|	ПравилаОбщиеТр."+ТрФилиал+"
			|ИЗ
		    |	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаОбщиеТр
		    |ГДЕ
		    |	ПравилаОбщиеТр.Категория <> Значение(Перечисление.КатегорииСкидок.ПустаяСсылка) 
			|				) как Правила0
			
		//+++( 29.12.2016 с учетом "склейки" правила1 с Диаметром = Правило0 + . Диаметр + ;
		//	|	ПО Правила1.ID = Правила0.ID
			|ПО ВЫБОР КОГДА Правила1.Диаметр="""" 
			|		 ТОГДА Правила1.ID = Правила0.ID+"";""
			|        ИНАЧЕ Правила1.ID = Правила0.ID+"".""+Правила1.Диаметр+"";"" 
			|	КОНЕЦ
		//+++)	
			//может быть и так... что для каждой категории своя наценка?!
			|	И Правила1.Категория = Правила0.Категория
			|");
			
			ЗапросТекст = стрЗаменить(ЗапросТекст, "Правила1.СкидкаНаценка//ТрНаценка",
			"ВЫБОР КОГДА Правила0.ИспользоватьТранспорт 
			|ТОГДА 100*( (1+Правила1.СкидкаНаценка/100)*(1+ЕстьNull(Правила0."+ТрФилиал+",0)/100)
			//+++( 12.01.2017 --- сразу прибавим и ТрКлиента!
			|"+текстТрКлиента2+"  -1)
			|ИНАЧЕ "+?(текстТрКлиента2="","Правила1.СкидкаНаценка",
				"100*( (1+Правила1.СкидкаНаценка/100) 
			//(12.01.2017 - тр.наценка клиента из правил или карточки клиента!
			|"+текстТрКлиента2+" -1)")+" Конец как СкидкаНаценка");
			
			ИначеЕсли текстТрКлиента3<>"" Тогда // 12.01.2017  только Если есть Тр.Клиента!
				 ЗапросТекст = стрЗаменить(ЗапросТекст, "ЕстьNull(ПравилаОбщие.СкидкаНаценка,0)//ТрНаценка",
				" 100*( (1+ЕстьNull(ПравилаОбщие.СкидкаНаценка,0)/100)
				//+++ 12.01.2017 --- сразу прибавим и ТрКлиента3 из карточки!
				|"+текстТрКлиента3+" -1)");

				ЗапросТекст = стрЗаменить(ЗапросТекст, "Правила1.СкидкаНаценка//ТрНаценка",
				" 100*( (1+Правила1.СкидкаНаценка/100)
				//+++ 12.01.2017 --- сразу прибавим и ТрКлиента!
				|"+текстТрКлиента2+" -1) как СкидкаНаценка");
			КонецЕсли;
		
			
		Иначе // 12.01.2017 + ТрКлиента!
			 ЗапросТекст = стрЗаменить(ЗапросТекст, "ЕстьNull(ПравилаОбщие.СкидкаНаценка,0)//ТрНаценка",
			" 100*((1+ЕстьNull(ПравилаОбщие.СкидкаНаценка,0)/100)
			//+++ 12.01.2017 --- сразу прибавим и ТрКлиента3 из карточки!
			|"+текстТрКлиента3+"
			| - 1)");

			ЗапросТекст = стрЗаменить(ЗапросТекст, "Правила1.СкидкаНаценка//ТрНаценка",
			" 100*( (1+Правила1.СкидкаНаценка/100)
			
			//+++ 12.01.2016 --- сразу прибавим и ТрКлиента!
			|"+ТекстТрКлиента2+"
			|- 1)
			|как СкидкаНаценка");
		КонецЕсли;
				  		   
Возврат ЗапросТекст;

КонецФункции

//29.05.2017 - выделен текст в отдельную функцию
функция получитьТаблВидовПоКонтрагенту(Контрагент)
	
	табл1 = Контрагент.КатегорияСкидок.Выгрузить();
	списокВидов = ПолучитьСписокВыгружаемыхТоваров();
	для каждого вид1 из списокВидов цикл
		Если табл1.найти(вид1.Значение, "ВидТовара")=Неопределено Тогда
			стр1 = табл1.Добавить();
			стр1.видТовара = вид1.Значение;
			стр1.Категория = перечисления.КатегорииСкидок.к3;
		КонецЕсли;	
	КонецЦикла;	
	
	для каждого стр1 из табл1 цикл //23.09.2016 НЕ МОЖЕТ БЫТЬ ПУСТОЙ!
		Если стр1.Категория = перечисления.КатегорииСкидок.ПустаяСсылка() Тогда
			стр1.Категория = перечисления.КатегорииСкидок.к3;
		КонецЕсли;
	КонецЦикла;	
	
	возврат табл1;
	
КонецФункции

//29.05.2017 - выделен текст в отдельную функцию
функция ПолучитьТекстОсновногоЗапросаЦен(флЦеныБезНДС = Ложь, ДатаЦены = Неопределено )
текст = "//ОтборДискиНеДиски
|
|ВЫБРАТЬ Номенклатура, ТипЦен, Цена ЦенаПоТипуЦен 
|ПОМЕСТИТЬ ВТ_ВсеЦены
|	ИЗ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(//ДатаЦены_ЗапросИз 
|	, ТипЦен В (&СписокТиповЦен) 
|	//отборНомДнД
|	)
|   ГДЕ Цена > 0 
|;
|ВЫБРАТЬ
|   Приоритет, 
|	Номенклатура, 
//| ТипЦен,
| ЦенаПоТипуЦен,
|	МинимальнаяЦена,
|	СкидкаПредоплаты
|
|	ПОМЕСТИТЬ ВТ_Товары
| ИЗ
| (ВЫБРАТЬ 
|	Номенклатура,   
//|	ТипЦен,
| ЦенаПоТипуЦен,
|	0000 МинимальнаяЦена,
|	0 СкидкаПредоплаты,
|	1 Приоритет
|	ИЗ 
| ( ВЫБРАТЬ Номенклатура, ТипЦен, ЦенаПоТипуЦен 
|	ИЗ ВТ_ВсеЦены как ВсеЦены
|	)ЦеныНоменклатуры 
//+++ 22.09.2015 | ГДЕ 0000>0
|) А


|//ФИКС_Цены

|;

|////////////////////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ Номенклатура,  МИНИМУМ(Приоритет) Приоритет	
|ПОМЕСТИТЬ ВТ_ПриоритетыТоваров
|	ИЗ 
|ВТ_Товары
|СГРУППИРОВАТЬ ПО Номенклатура
|;
|/////////////////////////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
| ВТ_Товары.Приоритет, 
| ВТ_Товары.Номенклатура, 
//+++ 28.01.2015 - для получения кодов в К24 для выгрузки в Store
| ВТ_Товары.Номенклатура.Код как Код, 
//|ВТ_Товары.ТипЦен ТипЦен,

//---------------------округление до рублей-------------------
|Выразить(ВТ_Товары.ЦенаПоТипуЦен как Число(15,2)) как ЦенаПоТипуЦен,
|Выразить(ВТ_Товары.МинимальнаяЦена

//23.09.2016  (1-18/118) = 0,84745762711864406779661016949153
|//БезНДС   * 0.8474576271186441
//| *(1 + ЕстьNull(ТабСкидок.ПроцФиксНаценки,0)/100) 

//+++ 09.02.2017 - на все договоры !!!
| *(1 + ЕстьNull(ТабОТК.СтавкаОТК,0)/100) 

//+++ 17.04.2018 --- округление вниз --- 
|		-0.5			как Число(15,0)) как МинимальнаяЦена,

//+++ 06.02.2015 - скидка в %  и меньше 0, Цена - до копеек
|ЕстьNull(ВТ_Товары.СкидкаПредоплаты,0) как СкидкаПредоплаты,

//---------------------округление до РУБЛЕЙ ВСЕГДА! 11.09.2015-------------------
|Выразить(ВТ_Товары.МинимальнаяЦена
//| *(1 + ЕстьNull(ТабСкидок.ПроцФиксНаценки,0)/100)

//23.09.2016  (1-18/118) = 0,84745762711864406779661016949153
|//БезНДС   * 0.8474576271186441

//+++ 07.10.2016
| *(1 + ЕстьNull(ТабОТК.СтавкаОТК,0)/100) 
| *(1 + ЕстьNull(ВТ_Товары.СкидкаПредоплаты,0)/100)

//+++ 17.04.2018 --- округление вниз --- 
|		 -0.5          как Число(15,0) ) как ЦенаСоСкидкойПредоплаты
|
|
|ИЗ ВТ_Товары
|
|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриоритетыТоваров
|ПО  ВТ_Товары.Номенклатура= ВТ_ПриоритетыТоваров.Номенклатура 
|И ВТ_Товары.Приоритет= ВТ_ПриоритетыТоваров.Приоритет 
|
//+++ 30.05.2017
|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|СтавкиБонусовКонтрагентовСрезПоследних.Значение * СтавкиБонусовКонтрагентовСрезПоследних.Коэффициент КАК СтавкаОТК,
	|СтавкиБонусовКонтрагентовСрезПоследних.ВидТовара КАК ВидТовара
	|ИЗ
	|РегистрСведений.СтавкиБонусовКонтрагентов.СрезПоследних(,Контрагент = &Контрагент ) КАК СтавкиБонусовКонтрагентовСрезПоследних
	|ГДЕ
	|СтавкиБонусовКонтрагентовСрезПоследних.Значение > 0) как ТабОТК
	|ПО ВТ_Товары.Номенклатура.ВидТовара = ТабОТК.ВидТовара
	|

|;
| УНИЧТОЖИТЬ ВТ_Товары;
| УНИЧТОЖИТЬ ВТ_ПриоритетыТоваров;	
| УНИЧТОЖИТЬ ВТ_ВсеЦены;
//+++ 09.11.2016
|//ВТ_ДискиНеДиски_Уничтожить  УНИЧТОЖИТЬ ВТ_ДискиНеДиски;
|";
//+++)

	Если флЦеныБезНДС Тогда
	Текст = стрЗаменить(Текст ,"//БезНДС","");
	КонецЕсли;

	Если ДатаЦены=Неопределено Тогда //+++ 22.09.2015 - БЕЗ СРЕЗОВ 99,9% клиентов!
	Текст=СтрЗаменить(Текст,"//ДатаЦены_ЗапросИз","");
	Текст=СтрЗаменить(Текст,"//отборНомДнД","И  Номенклатура В (&СписокНоменклатуры)");

	Иначе	
	//+++ 09.11.2016 - одна доп. таблица для выбора Диски - не диски
	Текст=СтрЗаменить(Текст,"//ОтборДискиНеДиски","
	|ВЫБРАТЬ спрНоменклатура.Ссылка,
	|Выбор когда спрНоменклатура.ВидТовара = Значение(Перечисление.ВидыТоваров.Диски) 
	|		Тогда Истина
	|		иначе ЛОЖЬ 
	|Конец как ЭтоДиск

	|Поместить ВТ_ДискиНеДиски

	|ИЗ Справочник.Номенклатура КАК спрНоменклатура
	|ГДЕ
	|//СписокНоменклатуры1	спрНоменклатура.Ссылка В (&СписокНоменклатуры) И
	|	спрНоменклатура.ЭтоГруппа = Ложь
	| И	спрНоменклатура.ПометкаУдаления = Ложь
	|;
	|/////////////////////////////////////////////////////////////////////////////////////");


Текст=СтрЗаменить(Текст,"//ВТ_ДискиНеДиски_Уничтожить", "");


Текст=СтрЗаменить(Текст,"//ДатаЦены_ЗапросИз","&ДатаЦены");

Текст=СтрЗаменить(Текст,"//отборНомДнД","
	//23.12.2015 - Очень тормозит!
	//|	и Номенклатура В (&СписокНоменклатуры) И Номенклатура.ВидТовара = Значение(Перечисление.ВидыТоваров.Диски)
	//09.11.2016
	|	И Номенклатура в (ВЫБРАТЬ спрНоменклатура.Ссылка
		|ИЗ ВТ_ДискинеДиски КАК спрНоменклатура
		|ГДЕ спрНоменклатура.ЭтоДиск)
	//+++)
	|	) как ЦеныДисковПоСрезу
	|   ГДЕ Цена > 0 

	//+++ 17.04.2015 - ВСЕГДА БЕЗ СРЕЗА ЦЕН - для НЕ Дисков!----------------------------
	| ОБЪЕДИНИТЬ ВСЕ 
	|	ВЫБРАТЬ Номенклатура, ТипЦен, Цена ЦенаПоТипуЦен 
	|	ИЗ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(	,

	//+++  ------- 17.04.2015 - СРЕЗ ЦЕН - НЕ для Дисков!----------------------------
	|	ТипЦен В (&СписокТиповЦен)    

	//23.12.2015 - Очень тормозит!
	//|	И Номенклатура В (&СписокНоменклатуры) И Номенклатура.ВидТовара <> Значение(Перечисление.ВидыТоваров.Диски)
	//09.11.2016
	|	И Номенклатура в (ВЫБРАТЬ спрНоменклатура.Ссылка
		|ИЗ ВТ_ДискинеДиски КАК спрНоменклатура
		|ГДЕ спрНоменклатура.ЭтоДиск = ЛОЖЬ)
	//+++)
	|" );
КонецЕсли; 

возврат текст;

КонецФункции

// - 7000 - по свойству клиента: "Цены распродажи"  С КОДОМ 90183
функция ЕстьРаспродажаПоКлиенту(Контр)
	Запрос123 = Новый Запрос;
	Запрос123.Текст = "ВЫБРАТЬ 
	 |	ЗначенияСвойствОбъектов.Свойство
	 |ИЗ
	 |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	 |ГДЕ
	 |	ЗначенияСвойствОбъектов.Объект     = &Контрагент
	 |	И ЗначенияСвойствОбъектов.Свойство = &Свойство
	 |	И ЗначенияСвойствОбъектов.Значение = Истина
	 |";
	СвойствоРаспродажи = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90183"); //Цены распродажи
	Запрос123.УстановитьПараметр("Свойство", СвойствоРаспродажи);
	Запрос123.УстановитьПараметр("Контрагент", Контр);
	Результат123 = Запрос123.Выполнить();
	рез = не Результат123.Пустой();
    возврат рез;
КонецФункции	

// - 5000 - по регистру "ЦеныКлиента"
функция ЕстьФиксЦеныПоКлиенту(Контр)
	Запрос123 = Новый Запрос;
	Запрос123.Текст = "ВЫБРАТЬ  фикс.Контрагент   
	|из РегистрСведений.ЦеныКлиента.СрезПоследних( ,  Контрагент = &Контрагент) как фикс";
	Запрос123.УстановитьПараметр("Контрагент", Контр);
	рез123 = Запрос123.Выполнить();
	рез = не рез123.Пустой();
	возврат рез;
КонецФункции

//+++ 07.11.2013
//Определяет цены для Контрагента по Списку товаров 
//1) определяются все правила для Клиента 
//	и все общие правила
//2) по правилам из Политики ценообразования для Списка товаров - получаются цены товаров
//3) Если нет цены или правила, то цена = 1 р. 
//4) Если нет документа Политики ценообразования - то выдает ошибку в виде строки: "нет политики ценообразования для контрагента"
//
//Результат: таблица значений с ценами Контрагента, столбцы: 
//1) Приоритет - показывает номер сработавшего правила,
//2) Номенклатура - товар из первоначального Списка Номенклатуры,
//3) МинимальнаяЦена - рассчитаная цена или 1,
//4) ЦенаПоТипуЦен - Цена без скидок
//
//5) СкидкаПредоплаты - дополнительная "каскадная" скидка на МинимальнуюЦену
//6) ЦенаПоСкидкеПредоплаты - Цена со скидкой и "каскадной" Скидкой предоплаты
//
//
//01.02.2017
// БезФрахта работает только для Турецких клиентов!
//
//ВОЗВРАЩАЕТ таблицу значений:
//
//Номенклатура,
//
//МинимальнаяЦена,
//ЦенаСоСкидкойПредоплаты,
//ЦенаПоТипуЦен,
//
//Приоритет
//
Функция ПолучитьЦеныДляКонтрагента_РегСв(Контрагент,СписокНоменклатуры=Неопределено, получитьПравилаИПараметры=ЛОЖЬ, ТекущаяПолитикаПравила=Неопределено, ДатаЦены=Неопределено, НеУчитыватьТрКлиента=ЛОЖЬ, БезФрахта = Ложь, БезНДС=Неопределено) Экспорт  
	
	Если Контрагент.пустая() Тогда  // для раб.места менеджера
		КонтрагентОб = Контрагент; 
		ОсновнойДоговорКонтрагента = справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе	//+++ 29.05.2017  - для получения реквизитов - делаем 1 раз запрос к серверу(S) 
		КонтрагентОб = Контрагент.ПолучитьОбъект();
		ОсновнойДоговорКонтрагента = КонтрагентОб.ОсновнойДоговорКонтрагента;
	КонецЕсли;
	
	 // вытеснение Экспортными ценами ПО осн.договору
	Если КонтрагентОб.Экспорт И ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов<>справочники.Валюты.НайтиПоКоду("643") Тогда
		Если Контрагент.КлиентТурецкойБазы Тогда //01.02.2017 только для турецких клиентов - с учетом фрахта!
			рез = ПолучитьЦеныДляКонтрагента_РегСвЭкспорт(Контрагент, СписокНоменклатуры, получитьПравилаИПараметры, ТекущаяПолитикаПравила, ДатаЦены, БезФрахта ); 
		Иначе //без фрахта всегда!
			рез = ПолучитьЦеныДляКонтрагента_РегСвЭкспорт(Контрагент, СписокНоменклатуры, получитьПравилаИПараметры, ТекущаяПолитикаПравила, ДатаЦены, ИСТИНА); 
		КонецЕсли;
		
		возврат рез;
	КонецЕсли;	
	
Если ТекущаяПолитикаПравила=Неопределено Тогда
	Запрос = Новый Запрос;
	
	//+++ 24.08.2016 - по "рубильнику" (старые Общие и персональные правила "живут" в пустой Категории! )
	Если Константы.ЦенообразованиеПоКатегориям.Получить() Тогда 
		ПодразделениеКлиента = КонтрагентОб.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение;
		Если не ПодразделениеКлиента.ОбособленноеПодразделение тогда //+++ 11.01.2018
			ПодразделениеКлиента = справочники.Подразделения.НайтиПоКоду("00005");
		КонецЕсли;	
		Запрос.Текст = ПолучитьТекстЗапросаЦенПоКатегориям(НеУчитыватьТрКлиента, ПодразделениеКлиента);
		
		табл1 = получитьТаблВидовПоКонтрагенту(КонтрагентОб);
		Запрос.УстановитьПараметр("ТаблВидов", табл1);
		
		Запрос.УстановитьПараметр("ТипЦенB2B", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00032")); //+++ 06.04.2018 B2B Базовая !!!
		
	Иначе  //================== без учёта категорий - старые перс. и общие правила!
		Запрос.Текст = ПолучитьТекстЗапросаЦенБезКатегорий();
	КонецЕсли;
			   
	Запрос.УстановитьПараметр("Контрагент", Контрагент);

	//+++ 22.09.2015 - Если в заказе только 1 тип товара (90% заказов!) - не надо брать ВСЕ правила и все цены!
	Если СписокНоменклатуры<>Неопределено Тогда
		Если СписокНоменклатуры.Количество()<11000 Тогда    //по 1 виду товара образаем правила: Диски 9-10 тыс., шин 5-8, остальных ещё меньше
			
			//+++ 16.11.2017 - 1 запрос! вместо 3хN
			Запрос11 = Новый Запрос;
			Запрос11.Текст = "ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Номенклатура,
			|	Номенклатура.НоменклатурнаяГруппа,
			|	Номенклатура.Производитель,
			|	Номенклатура.ВидТовара
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&СписокНоменклатуры)";
			Запрос11.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
			Результат11 = Запрос11.Выполнить();
			ТаблВидовТовара = Результат11.Выгрузить();
			
			//ТаблВидовТовара = новый ТаблицаЗначений; // 13.08.2016
			//ТаблВидовТовара.Колонки.Добавить("ВидТовара");
			//ТаблВидовТовара.Колонки.Добавить("НоменклатурнаяГруппа");
			//ТаблВидовТовара.Колонки.Добавить("Производитель");
			//
			//этоСписок = ТипЗнч(СписокНоменклатуры)=ТИП("СписокЗначений");
			//для каждого тов из СписокНоменклатуры цикл
			//	Товар1 = ?(этоСписок, тов.Значение, тов);
			//	стр1 = ТаблВидовТовара.Добавить();
			//	стр1.видТовара 			  = Товар1.видТовара;	
			//	стр1.НоменклатурнаяГруппа = Товар1.НоменклатурнаяГруппа;	
			//	стр1.Производитель 		  = Товар1.Производитель;	
			//КонецЦикла;
			
			Табл1 = ТаблВидовТовара.Скопировать(,"НоменклатурнаяГруппа");
			Табл1.Свернуть("НоменклатурнаяГруппа");    
			спис1 = Табл1.ВыгрузитьКолонку( "НоменклатурнаяГруппа");
			спис1.Добавить( справочники.НоменклатурныеГруппы.ПустаяСсылка() );
			Запрос.УстановитьПараметр("СписокНомГрупп", спис1 );
			
			Табл2 = ТаблВидовТовара.Скопировать(,"Производитель");
			Табл2.Свернуть("Производитель");
			спис2 = Табл2.ВыгрузитьКолонку("Производитель");
			спис2.Добавить( справочники.Производители.ПустаяСсылка() );
			Запрос.УстановитьПараметр("СписокПроизводителей",  спис2);
		
			ТаблВидовТовара.Свернуть("ВидТовара");
			Запрос.УстановитьПараметр("СписокВидовТовара", ТаблВидовТовара.ВыгрузитьКолонку("ВидТовара") );
			
			Запрос.Текст = стрЗаменить(Запрос.Текст, "//гр1 ", "");
		КонецЕсли;
	КонецЕсли;

	Результат = Запрос.Выполнить();
	ТекущаяПолитикаПравила = Результат.Выгрузить();	
	
Иначе
	ТекущаяПолитикаПравила.Колонки.Добавить("Правило");
	ТекущаяПолитикаПравила.Колонки.Добавить("ОтпускнаяЦена");
	Если ТекущаяПолитикаПравила.Колонки.Найти("Приоритет")=Неопределено Тогда
		ТекущаяПолитикаПравила.Колонки.Добавить("Приоритет");
		ТекущаяПолитикаПравила.ЗагрузитьКолонку(ТекущаяПолитикаПравила.ВыгрузитьКолонку("НомерСтроки"),"Приоритет");
	КонецЕсли;
КонецЕсли;

//===============================================================
ТекущаяПолитикаПараметры = новый ТаблицаЗначений;
ТекущаяПолитикаПараметры.Колонки.Добавить("ИмяПараметра");
ТекущаяПолитикаПараметры.Колонки.Добавить("ЗначениеПараметра");

Если ТекущаяПолитикаПравила.Количество()=0 Тогда  //Если нет никаких правил - пустая таблица
	табЗнач1 = новый ТаблицаЗначений;
	табЗнач1.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,0)));
	табЗнач1.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	табЗнач1.Колонки.Добавить("ЦенаПоТипуЦен",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
	табЗнач1.Колонки.Добавить("МинимальнаяЦена",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));  // основная цена
	
	табЗнач1.Колонки.Добавить("СкидкаПредоплаты",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
	табЗнач1.Колонки.Добавить("ЦенаСоСкидкойПредоплаты",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
	возврат табЗнач1;
КонецЕсли;

//================================================================================================================================================
//#Если Клиент Тогда
//Сообщить("Обрабатывается "+строка(ТекущаяПолитикаПравила.Количество())+" правил. Для "+?(СписокНоменклатуры=Неопределено,"всех", строка(СписокНоменклатуры.Количество()) )+" номенклатурных позиций"); 	
//#КонецЕсли

ТекстЗапросаДляВставкиПриоритет="ВЫБОР ";
ТекстЗапросаДляВставкиЦена   ="ВЫБОР ";
//+++ 06.02.2015 - аналогично...
ТекстЗапросаСкидкаПредоплаты ="";

Для сч=0 по ТекущаяПолитикаПравила.Количество()-1 Цикл
						 
	//Главная процедура разбора правил
	ЗаполнитьСтрокуПравилИПараметры(ТекущаяПолитикаПравила[сч], ТекущаяПолитикаПараметры ); 

	ТекстЗапросаДляВставкиПриоритет=ТекстЗапросаДляВставкиПриоритет+ "
			|	КОГДА " + ТекущаяПолитикаПравила[сч].Правило + " ТОГДА " + Формат(ТекущаяПолитикаПравила[сч].Приоритет,"ЧДЦ=0; ЧГ=0");
			
	ТекстЗапросаДляВставкиЦена=ТекстЗапросаДляВставкиЦена+ "
	|	КОГДА " + ТекущаяПолитикаПравила[сч].Правило + " ТОГДА " + ТекущаяПолитикаПравила[сч].ОтпускнаяЦена;

	//+++ 06.02.2015 просто число из перс.правил, ТОЛЬКО Если не ноль!
	//Если ТекущаяПолитикаПравила[сч].СкидкаПредоплаты<>0 Тогда  +++ НУЖНЫ ВСЕ СКИДКИ!!!
		Если ТекстЗапросаСкидкаПредоплаты ="" Тогда
		ТекстЗапросаСкидкаПредоплаты ="ВЫБОР
		|	КОГДА " + ТекущаяПолитикаПравила[сч].Правило + " ТОГДА " + формат(ТекущаяПолитикаПравила[сч].СкидкаПредоплаты,"ЧРД=.; ЧН=0");
	    Иначе
		ТекстЗапросаСкидкаПредоплаты =ТекстЗапросаСкидкаПредоплаты +"
		|	КОГДА " + ТекущаяПолитикаПравила[сч].Правило + " ТОГДА " + формат(ТекущаяПолитикаПравила[сч].СкидкаПредоплаты,"ЧРД=.; ЧН=0");
		КонецЕсли;
	//КонецЕсли;

КонецЦикла;

	ТекстЗапросаДляВставкиПриоритет=ТекстЗапросаДляВставкиПриоритет+"
	|	ИНАЧЕ 99999 
	|КОНЕЦ Приоритет";
	ТекстЗапросаДляВставкиЦена=ТекстЗапросаДляВставкиЦена+"
	|	ИНАЧЕ 0 
	|КОНЕЦ ";

	Если ТекстЗапросаСкидкаПредоплаты ="" Тогда
		ТекстЗапросаСкидкаПредоплаты="0 как СкидкаПредоплаты"; // нет скидок ни по одному из товаров!
	Иначе
		ТекстЗапросаСкидкаПредоплаты=ТекстЗапросаСкидкаПредоплаты+"
	|	ИНАЧЕ 0 
	|КОНЕЦ как СкидкаПредоплаты";
	КонецЕсли;


//========================================================================================================================
флБезНДС = Ложь;
Если Константы.ЦенообразованиеПоКатегориям.Получить() Тогда 
	Если БезНДС = Неопределено Тогда
	флБезНДС = КонтрагентОб.Экспорт И ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов = справочники.Валюты.НайтиПоКоду("643") 
			И найти(врег(ОсновнойДоговорКонтрагента.Наименование),"ЭКСПОРТ")>0
			и найти(ОсновнойДоговорКонтрагента.Наименование,"*")=0;
	иначе
	флБезНДС = БезНДС;
	КонецЕсли;
КонецЕсли;

ПостроительОтчетаОтчет = Новый Запрос;
ПостроительОтчетаОтчет.Текст = ПолучитьТекстОсновногоЗапросаЦен(флБезНДС, ДатаЦены ); //29.05.2017 - весь текст вынесен в отдельную функцию

ПостроительОтчетаОтчет.Параметры.Вставить("Контрагент", Контрагент);//+++ 27.08.2014
ПостроительОтчетаОтчет.Параметры.Вставить("ДатаЦены", ДатаЦены);

 //+++( 27.08.2014 ---------- Фиксированные цены имеют приоритет -5000 ---------------------
// - 5000 - фиксированные цены - ТОЛЬКО ДЛЯ ШинТрейд (вместо ШинТрейд СПб)   и  Шинсервис (Москва) !!! 
//	 естьФиксЦены  = СокрЛП(КонтрагентОб.Код) = "92498" или СокрЛП(КонтрагентОб.Код) = "П001549";
    ЕстьФиксЦены   = ЕстьФиксЦеныПоКлиенту(Контрагент);
	
// - 7000 - цены распродажи - небольшой список клиентов
    ЕстьРаспродажа = ЕстьРаспродажаПоКлиенту(Контрагент);

//07.06.2017 -- единый запрос для -5000 и -7000 правила
Если ЕстьФиксЦены или ЕстьРаспродажа Тогда 
ПостроительОтчетаОтчет.Текст = стрЗаменить(ПостроительОтчетаОтчет.Текст, "//ФИКС_Цены","
|
|ОБЪЕДИНИТЬ ВСЕ 
|	ВЫБРАТЬ 
|	искл.Приоритет,
|	искл.Номенклатура,
|	ЕстьNull(ЦеныСрезПоследних.ЦенаБазовая,0),
|	ЕстьNull(искл.Цена,0),
|	0
| из (
|"+?(ЕстьФиксЦены, "
|	ВЫБРАТЬ
|	-5000 как Приоритет,
|	ЦеныКлиентаСрезПоследних.Номенклатура,
|	ЦеныКлиентаСрезПоследних.Цена
|ИЗ
|	РегистрСведений.ЦеныКлиента.СрезПоследних(//&ДатаЦены
|		,  Контрагент = &Контрагент 
|//СписокНоменклатуры1	     и Номенклатура В (&СписокНоменклатуры)
|		) КАК ЦеныКлиентаСрезПоследних
|","") 
+?(ЕстьРаспродажа, 
      ?(естьФиксЦены,"
       |ОБЪЕДИНИТЬ ВСЕ ", "")+"
|	ВЫБРАТЬ
|	-7000 как Приоритет,
|	ЦеныДляРаспродажи.Номенклатура,
|	ЦеныДляРаспродажи.Цена
|ИЗ
|	РегистрСведений.ЦеныДляРаспродажи как ЦеныДляРаспродажи
|ГДЕ  ЦеныДляРаспродажи.Период = &ДатаЦеныРаспродажи
|	  и ЦеныДляРаспродажи.ЗаписьАктивна = ЛОЖЬ
|//СписокНоменклатуры1	  и ЦеныДляРаспродажи.Номенклатура В (&СписокНоменклатуры)
|","")+"
|   ) как Искл  
|
//-------------------для получения скидок от Базовой цены ------------------------
|ЛЕВОЕ СОЕДИНЕНИЕ (выбрать Номенклатура, ЕстьNull(цена,0) как ЦенаБазовая 
|	из регистрСведений.ЦеныНоменклатуры.СрезПоследних(//&ДатаЦены
|, ТипЦен = &Базовая
//+++ 22.09.2015
|//СписокНоменклатуры1 	И Номенклатура В (&СписокНоменклатуры)
|				  )									  ) КАК	ЦеныСрезПоследних
|ПО Искл.Номенклатура = ЦеныСрезПоследних.Номенклатура
|
//11.07.2017 было >100
|ГДЕ ЕстьNull(Искл.Цена,0)>0 
|");

	//21.03.2017 - распродажа ТОЛЬКО по дискам!
	Если ЕстьРаспродажа Тогда
		ДатаЦеныРаспродажи = ПолучитьДатуЦеныРаспродажи( ЛОЖЬ ); //как ЗаписьАктивна = ЛОЖЬ для рублевых!
		ПостроительОтчетаОтчет.Параметры.Вставить("ДатаЦеныРаспродажи", ДатаЦеныРаспродажи);
	КонецЕсли;

КонецЕсли; //ЕстьРаспродажа или ЕстьФиксЦены


Если СписокНоменклатуры=Неопределено Тогда // полный список номенклатуры
	ПостроительОтчетаОтчет.Текст =стрЗаменить(ПостроительОтчетаОтчет.Текст, "Номенклатура В (&СписокНоменклатуры)","Номенклатура<>Неопределено");	
иначе
	 ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"//СписокНоменклатуры1", "");
	 ПостроительОтчетаОтчет.Параметры.Вставить("СписокНоменклатуры", СписокНоменклатуры);
КонецЕсли;

//+++)

//============================================================================================================
 ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"0000",ТекстЗапросаДляВставкиЦена);
 ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"0 СкидкаПредоплаты", ТекстЗапросаСкидкаПредоплаты);//+++ 06.02.2015
 ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"1 Приоритет",ТекстЗапросаДляВставкиПриоритет);
 
 СписокТиповЦен = новый СписокЗначений;		 //+++ 07.10.2014 - так быстрее отбираем только по типам цен из общих и перс.правил!-----------
 
 Для сч=0 по ТекущаяПолитикаПараметры.Количество()-1 Цикл
	 ИмяПараметра =ТекущаяПолитикаПараметры[сч].ИмяПараметра;
	 ЗначениеПараметра = ТекущаяПолитикаПараметры[сч].ЗначениеПараметра;
	 
	 Если ЗначениеЗаполнено(ИмяПараметра) Тогда //+++ 06.04.2018
 	 	ПостроительОтчетаОтчет.Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
	 КонецЕсли;
	
	 //+++ 07.10.2014---так быстрее отбираем только по нескольким типам цен-----------
	 Если ТипЗнч(ЗначениеПараметра)= Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда 
		Если  СписокТиповЦен.НайтиПоЗначению(ЗначениеПараметра) =Неопределено Тогда
			СписокТиповЦен.Добавить(ЗначениеПараметра);
		КонецЕсли;	   
	 КонецЕсли;	

 КонецЦикла;	 
 
  //+++ 07.10.2014
  ПостроительОтчетаОтчет.Параметры.Вставить("СписокТиповЦен", СписокТиповЦен);
  
  ПостроительОтчетаОтчет.Параметры.Вставить("Базовая", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") );//+++ 01.12.2015	 
  ПостроительОтчетаОтчет.Параметры.Вставить("КрОпт",   справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") );//+++ 12.04.2017	 
  ПостроительОтчетаОтчет.Параметры.Вставить("ТипЦенB2B",   справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00032") );//+++ 06.04.2018	 
  	 
Если получитьПравилаИПараметры Тогда // для "ручного" формирования, например прайс-листа
	структураПарам = новый Структура;
	//-----------------текстовые поля---------------------------------------------------------
	структураПарам.Вставить("ТекстЗапросаДляВставкиЦена", ТекстЗапросаДляВставкиЦена);
	структураПарам.Вставить("ТекстЗапросаСкидкаПредоплаты", ТекстЗапросаСкидкаПредоплаты);//+++ 06.02.2015

	структураПарам.Вставить("ТекстЗапросаДляВставкиПриоритет", ТекстЗапросаДляВставкиПриоритет);
	структураПарам.Вставить("ПолныйТекстЗапроса", ТекстЗапросаДляВставкиЦена+","+ТекстЗапросаДляВставкиПриоритет);
	                         
    структураПарам.Вставить("Правила", ТекущаяПолитикаПравила);
	
	
	структураПарам.Вставить("Параметры",ТекущаяПолитикаПараметры); //ИмяПараметра, ЗначениеПараметра
	структураПарам.Вставить("СписокТиповЦен",СписокТиповЦен);       //+++ 07.10.2014
	
	структураПарам.Вставить("СписокНоменклатуры",СписокНоменклатуры);
	
	возврат структураПарам;
Иначе
	//+++ 22.09.2015 Результат = ПостроительОтчетаОтчет.ПолучитьЗапрос().Выполнить();
	Результат = ПостроительОтчетаОтчет.Выполнить();
	табЗнач1 = Результат.Выгрузить();
	
//======================= Заглушка по 0 ценам  - Крупный опт, =========================================================================
//==========Если и крупного опта нет, то в Заказе покупателя 2-я заглушка по ценам с 17.01.2014:
//==========для дисков<400, для Шин и АКБ <1000 - заказ блокируется в процедкре ОбработкаПроведения()
//==========однако, для Полных прав (но не для роботов!) можно делать и цену = 1р. просто выдает предупреждение!
//
// 23.01.2014 - заглушка "нужна" для Шин и для некоторых других видов товаров,
//				для дисков Если цена = 0, то она так и останется 0
Если СписокНоменклатуры<>Неопределено Тогда

Если табЗнач1.Количество()<СписокНоменклатуры.Количество() Тогда

 //+++ 09.11.2016 - сразу 1 запросом
запрос1 = новый запрос;
запрос1.Текст = "ВЫБРАТЬ
                |	спр.Ссылка как Номенклатура,
                |	спр.Код как Код,
				|	0 как МинимальнаяЦена,
				|	0 как ЦенаСоСкидкойПредоплаты,
				|	0 как СкидкаПредоплаты,
				|	0 как ЦенаПоТипуЦен,
				|	2000 как Приоритет
	           |ИЗ
                |	Справочник.Номенклатура КАК спр
                |ГДЕ
                |	спр.Ссылка В(&СписокНоменклатуры)
                |	И НЕ спр.Ссылка В (&СписокИзТаблицы)";
запрос1.УстановитьПараметр("СписокНоменклатуры",СписокНоменклатуры);
запрос1.УстановитьПараметр("СписокИзТаблицы",табЗнач1.ВыгрузитьКолонку("Номенклатура") );
рез1 = запрос1.Выполнить();
табЗнач2 = рез1.Выгрузить();
списокТовНульЦена = новый СписокЗначений;
списокТовНульЦена.ЗагрузитьЗначения( табЗнач2.ВыгрузитьКолонку("Номенклатура") );
для каждого стр2 из табЗнач2 цикл
	стр1 = табЗнач1.Добавить();
	ЗаполнитьЗначенияСвойств( стр1, стр2);
КонецЦикла;

Если списокТовНульЦена.Количество()>0 Тогда
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	 |	ЦеныНоменклатурыСрезПоследних.Цена как ЦенаПоТипуЦен,
	 |	ЦеныНоменклатурыСрезПоследних.Цена
	 |ИЗ
	 |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(//&ДатаЦены
	 |			, Номенклатура В (&Список0)
	 |				И ТипЦен = &ТипЦенКрОпт) КАК ЦеныНоменклатурыСрезПоследних";
	 
 Если ДатаЦены<>Неопределено Тогда //+++ 25.02.2014 цены надо брать на дату среза! 
	 Запрос.Текст =СтрЗаменить(Запрос.Текст,"//&ДатаЦены","&ДатаЦены");
	 Запрос.УстановитьПараметр("ДатаЦены", ДатаЦены);
КонецЕсли; 

	 Запрос.УстановитьПараметр("Список0", списокТовНульЦена);
	 Запрос.УстановитьПараметр("ТипЦенКрОпт", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") ); // 5 - Крупный опт, 8 - Базовая, 3 - Якорная
	 Результат = Запрос.Выполнить();
	 выборка = Результат.Выбрать();
	 
	 Если выборка.Количество() < списокТовНульЦена.Количество() Тогда
		 delta = списокТовНульЦена.Количество()-выборка.Количество();
 	 КонецЕсли;	 
	 
	delta = 0; 
	 Пока Выборка.Следующий() Цикл  //из этого списка >> обратно в таблицу!
		 
	 	стр1 = табЗнач1.Найти(выборка.Номенклатура, "Номенклатура");
		Если стр1 = Неопределено Тогда // быть такого не может!
			#Если Клиент Тогда
				Сообщить("Не найден товар "+ строка(выборка.Номенклатура) +" в таблице цен!", СтатусСообщения.Внимание);
			#КонецЕсли
        Иначе
			стр1.МинимальнаяЦена = выборка.Цена;
			стр1.ЦенаСоСкидкойПредоплаты = выборка.Цена;
			Если НЕ КонтрагентОб.Экспорт Тогда
				стр1.ЦенаСоСкидкойПредоплаты = выборка.Цена * (1 + ?(стр1.СкидкаПредоплаты=Неопределено,0,стр1.СкидкаПредоплаты)/100);
			КонецЕсли;
		
			Если выборка.Цена<=1 Тогда // меньше рубля это все ноль!
			delta = delta + 1;
			КонецЕсли;
		КонецЕсли;	
		
	 КонецЦикла;
	 
	 #Если Клиент Тогда
		Если delta>0 тогда
	 	 Сообщить("На "+строка(delta)+" товаров - НЕ установлены Цены по типу цен: Базовая, Крупный Опт !",СтатусСообщения.Внимание);
		КонецЕсли; 
 	 #КонецЕсли

	КонецЕсли;	
КонецЕсли; // только при различии списков

КонецЕсли;
//======================================================================================================================================

	Возврат  табЗнач1;
КонецЕсли;

КонецФункции //ПолучитьЦеныДляКонтрагента_РегСв()	







//+++ 10.12.2013 +++++++++++++++++++++++++++++++++++++++++++++++
//Имя параметра = имя для : Производитель, ВидТовара, Тип цен
// из имени Номенклатурная группа - убираются цифры в начале!
//для Номенклатура: Ном_[код],
//для ПодСтроки:    Назв_[подобно] 
//для ВходитВПапку: ГруппаНом_[КодНоменклатуры]
//для Диаметра:     Парам_[диаметр]
//
Процедура ЗаполнитьСтрокуПравилИПараметры( СтрПравил, ТаблПараметры ) ЭКСПОРТ //Главная процедура разбора правил
	//+++ 10.01.2014 ограничения по скидке
	максПроцНаценки = 200; // более этого процента - рубли!
	минПроцСкидки   = -90; // меньше этого быть не должно никогда!
	СтрПравил.ОтпускнаяЦена = ?(СтрПравил.СкидкаНаценка>=максПроцНаценки, формат(СтрПравил.СкидкаНаценка,"ЧДЦ=0; ЧРД=.; ЧН=0; ЧГ=0"),
			?(СтрПравил.СкидкаНаценка<=минПроцСкидки, "ЦенаПоТипуЦен * "+формат(1+минПроцСкидки/100,"ЧРД=.; ЧН=0; ЧГ=0"), 
                  "ЦенаПоТипуЦен" +?(СтрПравил.СкидкаНаценка<>0,"*"+формат(1+СтрПравил.СкидкаНаценка/100,"ЧРД=.; ЧН=0; ЧГ=0") 
				  ,"")));
				  
симвЗамены = новый массив;
симвЗамены.Добавить(" ");симвЗамены.Добавить("."); симвЗамены.Добавить(","); // 0 - 3
симвЗамены.Добавить("""");симвЗамены.Добавить("'");симвЗамены.Добавить("`");
симвЗамены.Добавить("/");симвЗамены.Добавить("\");  симвЗамены.Добавить("|");
симвЗамены.Добавить("-");симвЗамены.Добавить("+"); симвЗамены.Добавить("*");симвЗамены.Добавить("№"); // 8-11
симвЗамены.Добавить("("); симвЗамены.Добавить(")");симвЗамены.Добавить("["); симвЗамены.Добавить("]");//12-15
//симвЗамены.Добавить("0");симвЗамены.Добавить("1");симвЗамены.Добавить("2");симвЗамены.Добавить("3");симвЗамены.Добавить("4");//16-20
//симвЗамены.Добавить("5");симвЗамены.Добавить("6");симвЗамены.Добавить("7");симвЗамены.Добавить("8");симвЗамены.Добавить("9");//21-25

//26.07.2017 - сухачева сделала «кавычки» в Производителе
симвЗамены.Добавить("«");симвЗамены.Добавить("»"); 
симвЗамены.Добавить("<");симвЗамены.Добавить(">"); 
симвЗамены.Добавить("~");

симвЗамены.Добавить("!");симвЗамены.Добавить("@");симвЗамены.Добавить("#");симвЗамены.Добавить("$");симвЗамены.Добавить("%");
симвЗамены.Добавить("^");симвЗамены.Добавить(":");симвЗамены.Добавить(";");симвЗамены.Добавить("&");симвЗамены.Добавить("?");

стр1 = "";

//1) ----первым делом - Вид Товара и Тип цены!-----------
//---------- Вид товара ВСЕГДА ЕСТЬ!-------------------------------------------------
назв = строка(СтрПравил.ВидТовара); назв = стрЗаменить(назв," ","");
стр1 =  стр1+ "Номенклатура.ВидТовара=&"+назв;
Если ТаблПараметры.найти(строка(СтрПравил.ВидТовара), "ИмяПараметра")=Неопределено Тогда
    парам1 = ТаблПараметры.Добавить();
	парам1.ИмяПараметра = строка(СтрПравил.ВидТовара);
	парам1.ЗначениеПараметра = СтрПравил.ВидТовара;
КонецЕсли;

//-----------Тип цен - Есть всегда!-----------------
Если ЗначениеЗаполнено(СтрПравил.ТипЦен) Тогда
	назв = строка(СтрПравил.ТипЦен); назв = стрЗаменить(назв," ","");    //"Крупный Опт Ростов"
	стр1 =  стр1+" И ТипЦен=&"+назв;
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		парам1.ЗначениеПараметра = СтрПравил.ТипЦен;
	КонецЕсли;
КонецЕсли;

//+++ 13.08.2016 Если определен товар - то больше никаких условий и не надо!
Если ЗначениеЗаполнено(СтрПравил.Номенклатура) Тогда
	назв = "Ном_"+сокрЛП(СтрПравил.Номенклатура.Код); 
	стр1 = стр1 + " И Номенклатура=&"+назв;
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		парам1.ЗначениеПараметра = СтрПравил.Номенклатура;
	КонецЕсли;
	
	СтрПравил.Правило = стр1; 
	возврат; // больше условий и не надо!

КонецЕсли;
 
//------Условия складываются по И----------------------------------------------------------
Если ЗначениеЗаполнено(СтрПравил.Производитель) Тогда
	назв = строка(СтрПравил.Производитель)+формат(СтрПравил.Производитель.Код,"ЧГ=0"); назв = стрЗаменить(назв," ","");     //+++ 16.11.2017 +Код т.е. есть 2 производителя FORMULA !
	для i=0 по симвЗамены.Количество()-1 цикл
		назв = стрЗаменить(назв,симвЗамены[i],"");
	КонецЦикла;
стр1 = стр1 + " И Номенклатура.Производитель=&"+назв;
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		парам1.ЗначениеПараметра = СтрПравил.Производитель;
	КонецЕсли;
КонецЕсли;

//+++ 04.07.2016 - правила с дефектом - должы быть раньше чем без ничего...
//--------------------------------------------------------------------------
Попытка
	Если ЗначениеЗаполнено(СтрПравил.ВидДефектаДляУценки) Тогда
		назв = "деф"+строка(СтрПравил.ВидДефектаДляУценки.Код);   // 7 символов    //+++ 16.11.2017 
		//назв = стрЗаменить(назв," ","");
		//для i=0 по симвЗамены.Количество()-1 цикл
		//	назв = стрЗаменить(назв,симвЗамены[i],"");
		//КонецЦикла;
	стр1 = стр1 +" И Номенклатура.ВидДефектаДляУценки=&"+назв;
		Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
		    парам1 = ТаблПараметры.Добавить();
			парам1.ИмяПараметра = назв;
			парам1.ЗначениеПараметра = СтрПравил.ВидДефектаДляУценки;
		КонецЕсли;
	КонецЕсли;
Исключение
КонецПопытки;	

//------------------------------------------
Если ЗначениеЗаполнено(СтрПравил.НоменклатурнаяГруппа) Тогда
	назв = "нг"+строка(СтрПравил.НоменклатурнаяГруппа.Код); // 7 символов //+++ 16.11.2017  и проверки в цикле не нужны
	//назв = строка(СтрПравил.НоменклатурнаяГруппа); назв = стрЗаменить(назв," ","");
	//для i=0 по симвЗамены.Количество()-1 цикл
	//	назв = стрЗаменить(назв,симвЗамены[i],"_");
	//КонецЦикла;
//симвЗаменыЦ = новый массив;	//в номенклатурных группах цифры идут в начале!
//симвЗаменыЦ.Добавить("0");симвЗаменыЦ.Добавить("1");симвЗаменыЦ.Добавить("2");симвЗаменыЦ.Добавить("3");симвЗаменыЦ.Добавить("4");//16-20
//симвЗаменыЦ.Добавить("5");симвЗаменыЦ.Добавить("6");симвЗаменыЦ.Добавить("7");симвЗаменыЦ.Добавить("8");симвЗаменыЦ.Добавить("9");//21-25
// для i=0 по симвЗаменыЦ.Количество()-1 цикл
//	назв = стрЗаменить(назв,симвЗаменыЦ[i],"");
//КонецЦикла;

Если СтрПравил.НоменклатурнаяГруппа.ЭтоГруппа Тогда //13.08.2016
	стр1 = стр1 + " И Номенклатура.НоменклатурнаяГруппа в ИЕРАРХИИ (&"+назв+")";
иначе
	стр1 = стр1 + " И Номенклатура.НоменклатурнаяГруппа=&"+назв;
КонецЕсли;

	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		парам1.ЗначениеПараметра = СтрПравил.НоменклатурнаяГруппа;
	КонецЕсли;
КонецЕсли;


//------------------------------------------
Если ЗначениеЗаполнено(СтрПравил.ВходитВПапку) Тогда
	назв = "ГруппаНом_"+сокрЛП(СтрПравил.ВходитВПапку.Код); 
	//стр1 = стр1 + " И Номенклатура В ИЕРАРХИИ (&"+назв+")";     //+++ 26.07.2017 - ОЧЕНЬ ДОЛГО! до 5 мин 1 прайс!
	стр1 = стр1 + " И Номенклатура.Родитель=&"+назв;              // только для АКБ и Акс.!   до 1 мин.
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		парам1.ЗначениеПараметра = СтрПравил.ВходитВПапку;
	КонецЕсли;
КонецЕсли;

//------------------------------------------
Если СокрЛП(СтрПравил.ПодСтрока)<>"" Тогда
	
	назв = СтрПравил.ПодСтрока; 
	для i=0 по симвЗамены.Количество()-1 цикл
		назв = стрЗаменить(назв,симвЗамены[i],"");
	КонецЦикла;
        назв = "Назв_"+назв; //иногда начинается с цифр
		
	стр1 = стр1 + " И Номенклатура.Наименование ПОДОБНО (&"+назв+")";   
	//прямо в текст запроса!
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
		парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		//Если в подстроке задан явно % то все понятно... это "продвинутый" пользователь
		//иначе в любом месте наименования!
		префСуф =?(Найти(СтрПравил.ПодСтрока,"%")=0, "%","");
		парам1.ЗначениеПараметра =префСуф+СтрПравил.ПодСтрока+префСуф; 
	КонецЕсли;
КонецЕсли;

//------------------------------------------
Если ЗначениеЗаполнено(СтрПравил.Диаметр) Тогда
	назв = сокрЛП(СтрПравил.Диаметр); назв = стрЗаменить(назв," ","");
	знач1 = назв;
	
  поз1 = найти(назв, "-");
  Если поз1>0 Тогда//--------------разбор диапазона диаметров----------------------
		
	знач1 = сокрЛП( лев( назв, поз1-1) ); 					назв1=знач1;
	знач2 = сокрЛП( прав( назв, стрДлина(назв)-поз1) );		назв2=знач2;
	для i=0 по симвЗамены.Количество()-1 цикл
		назв1 = стрЗаменить(назв1, симвЗамены[i],"");
		назв2 = стрЗаменить(назв2, симвЗамены[i],"");
	КонецЦикла;
    назв1 = "Парам_"+назв1;  назв2 = "Парам_"+назв2; 
	стр1 = стр1 + ?(стр1="", "", " И ")+ "(Номенклатура.Типоразмер.Диаметр >= &"+назв1+" И Номенклатура.Типоразмер.Диаметр <= &"+назв2+")";
	
	Если ТаблПараметры.найти(назв1, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв1;
		парам1.ЗначениеПараметра = знач1;
	КонецЕсли;
	Если ТаблПараметры.найти(назв2, "ИмяПараметра")=Неопределено Тогда
		парам2 = ТаблПараметры.Добавить();
		парам2.ИмяПараметра = назв2;
		парам2.ЗначениеПараметра = знач2;
	КонецЕсли;
	
  Иначе	 //----------------------------обработка знаков <, >, =  ---------------------------
	знаки = новый массив;
	знаки.Добавить("="); // значит  просто =
	знаки.Добавить("<="); знаки.Добавить("<"); 
	знаки.Добавить(">="); знаки.Добавить(">");
	k=0;
	для i=1 по знаки.Количество()-1 цикл
		Если найти(назв, знаки[i])=1 Тогда
		    k=i; назв = Прав(назв, стрДлина(назв) - стрДлина(знаки[i]));
				 знач1 = назв;
			прервать;
		КонецЕсли;
	КонецЦикла;	
	
	//---------удаляем из названия все лишнее-----------
	для i=0 по симвЗамены.Количество()-1 цикл
		назв = стрЗаменить(назв, симвЗамены[i],"");
	КонецЦикла;
	назв = "Парам_"+назв; 
	
	стр1 = стр1 + ?(стр1="", "", " И ")+ "Номенклатура.Типоразмер.Диаметр "+знаки[k]+" &"+назв;
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		парам1.ЗначениеПараметра = знач1;
	КонецЕсли;
  КонецЕсли;//Конец разбора


КонецЕсли;

СтрПравил.Правило = стр1;

КонецПроцедуры

//29.05.2017
функция ПолучитьТекстЦенЭкспорт()
	текст = "ВЫБРАТЬ
|   Приоритет, 
|	Номенклатура,   
//| ТипЦен,
| ЦенаПоТипуЦен,
|	МинимальнаяЦена
|
|	ПОМЕСТИТЬ ВТ_Товары
| ИЗ
| (ВЫБРАТЬ 
|	Номенклатура,   
//|	ТипЦен,
| ЦенаПоТипуЦен,
|	0000 МинимальнаяЦена,
|	1 Приоритет
|	ИЗ 
| ( ВЫБРАТЬ
       |	ЦеныТов.Номенклатура,
       |	ЦеныТов.ТипЦен,
	   |	ЦеныТов.Цена КАК ЦенаПоТипуЦен
       |ИЗ
       |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(//&ДатаЦены
       |			, Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
       |				И ТипЦен В (&СписокТиповЦен)
       |				И Номенклатура В (&СписокНоменклатуры)) КАК ЦеныТов
       |ГДЕ
	   //16.02.2016 - нулевые цены тоже надо!
       |	ЦеныТов.Цена >= 0
       |
       |ОБЪЕДИНИТЬ ВСЕ
       |
       |ВЫБРАТЬ
       |	ЦеныКрОпт.Номенклатура,
       |	&ТипКрОпт,
	   //----------------Цена Кр.Опта - пересчет по Курсу $ и -18% в цене -----------------
       |	ВЫРАЗИТЬ(ЦеныКрОпт.Цена / &КурсUSD*100/118 КАК ЧИСЛО(15, 2))
       |ИЗ
       |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(//&ДатаЦены
       |			, Номенклатура.ВидТовара <> ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
       |				И ТипЦен = &ТипКрОпт
       |				И Номенклатура В (&СписокНоменклатуры)   ) КАК ЦеныКрОпт
       |ГДЕ
       |	ЦеныКрОпт.Цена > 0
|)ЦеныНоменклатуры 
//+++ 24.12.2015 | ГДЕ 0000>0
|) А
//
//+++(------------ 27.08.2014 ------- Фиксированные цены имеют МИНИМАЛЬНЫЙ приоритет ---------------------
// Приоритет:
// -7000  - распродажа !
// -5000  - фиксированные цены
// -1000 + Номер общего правила = это исключительные общие правила (по отдельным позициям)

// от -100 до +999 - обычные правила клиента

// от 1000 и более это номер общего правила + 1000
//
// 2000 - это "заглушка" крупный опт
// 9000 - не подошло ни под одно из условий - сработает "заглушка" по Константам мин.цен (по типу товара)

  //=================26.10.2015===-7000 распродажа  ГЛАВНЕЕ фикс.цены!============
   |ОБЪЕДИНИТЬ ВСЕ
   |
   |ВЫБРАТЬ
   |	-7000,
	|	ЦеныДляРаспродажи.Номенклатура,
    |	ЦеныДляРаспродажи.Цена,
    |	ЦеныДляРаспродажи.Цена
	|
//+++ 12.05.2016 - вместо среза - только то, что установлено в последний раз
//
   //|ИЗ  РегистрСведений.ЦеныДляРаспродажи.СрезПоследних(//&ДатаЦены
   //|,ЗаписьАктивна = ИСТИНА) как ЦеныДляРаспродажи
   |ИЗ  РегистрСведений.ЦеныДляРаспродажи как ЦеныДляРаспродажи
   |
   |ГДЕ
    |	ЦеныДляРаспродажи.Номенклатура В (&СписокНоменклатуры)
    |	И ЦеныДляРаспродажи.ЗаписьАктивна = ИСТИНА 
    |	и ЦеныДляРаспродажи.Период = &ДатаЦеныРаспродажи
    |	и ЦеныДляРаспродажи.Цена>0

  //=================================================================================   
|;
|
|ВЫБРАТЬ Номенклатура,  МИНИМУМ(Приоритет) Приоритет	
|ПОМЕСТИТЬ ВТ_ПриоритетыТоваров
|	ИЗ 
|ВТ_Товары
|СГРУППИРОВАТЬ ПО Номенклатура
|;
|ВЫБРАТЬ
//+++ из турецкой базы
| Тов2.Приоритет, 
| Тов2.Код как Код, 
| Тов2.Номенклатура, 
| Тов2.ЦенаПоТипуЦен как ЦенаПоТипуЦен,
|
|Выразить(((Тов2.Цена+&Фрахт/ЕстьNull(Фрахт.Кол,1) + Тов2.Вес*6.27)*1.18) как Число(15,2)) как МинимальнаяЦена,
|Выразить(((Тов2.Цена+&Фрахт/ЕстьNull(Фрахт.Кол,1) + Тов2.Вес*6.27)*1.18) как Число(15,2)) как ЦенаСоСкидкойПредоплаты
|
|ИЗ (выбрать 
|Тов.Приоритет,
|Тов.Номенклатура,
|Тов.ЦенаПоТипуЦен как ЦенаПоТипуЦен,
|Тов.Номенклатура.Код как Код,
|Тов.МинимальнаяЦена как Цена,
|ЕстьNull(Тов.Номенклатура.ЕдиницаХраненияОстатков.Вес,0) как Вес
| из ВТ_Товары как Тов) как Тов2
|ЛЕВОЕ СОЕДИНЕНИЕ
| (выбрать колФрахт.Диаметр, колФрахт.Количество как Кол
|		из регистрСведений.КолФрахт как колФрахт) как Фрахт
| ПО  Тов2.Номенклатура.Типоразмер.Диаметр = Фрахт.Диаметр
//+++)
|
|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриоритетыТоваров
//|ПО  ВТ_Товары.Номенклатура= ВТ_ПриоритетыТоваров.Номенклатура 
//|  И ВТ_Товары.Приоритет= ВТ_ПриоритетыТоваров.Приоритет 
|ПО  Тов2.Номенклатура= ВТ_ПриоритетыТоваров.Номенклатура 
|  И Тов2.Приоритет= ВТ_ПриоритетыТоваров.Приоритет 
//---------------------------------------------------------------------)
|
|";
возврат текст;
КонецФункции

//+++ 12.01.2015 
//Определяет цены для Контрагента по Списку товаров 
//1) определяются все правила для Клиента 
//	и все общие правила
//2) по правилам из Политики ценообразования для Списка товаров - получаются цены товаров
//3) Если нет цены или правила, то цена = 1 р. 
//4) Если нет документа Политики ценообразования - то выдает ошибку в виде строки: "нет политики ценообразования для контрагента"
//
//Результат: таблица значений с ценами Контрагента, столбцы: 
//1) Приоритет - показывает номер сработавшего правила,
//2) Номенклатура - товар из первоначального Списка Номенклатуры,
//3) МинимальнаяЦена - рассчитаная цена или 1,
//4) ТипЦен - показывает от какого типа цен была скидка
//
Функция ПолучитьЦеныДляКонтрагента_РегСвЭкспорт(Контрагент, СписокНоменклатуры=Неопределено, получитьПравилаИПараметры=ЛОЖЬ, ТекущаяПолитикаПравила=Неопределено, ДатаЦены=Неопределено, безФрахта = ИСТИНА, БезРаспродажи = ЛОЖЬ) Экспорт
	
Если ТекущаяПолитикаПравила=Неопределено Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаЦенообразования.Приоритет КАК Приоритет,
	               |	ПравилаЦенообразования.ВидТовара,
	               |	ПравилаЦенообразования.Производитель,
	               |	ПравилаЦенообразования.НоменклатурнаяГруппа,
	               |	ПравилаЦенообразования.ВходитВПапку,
	               |	ПравилаЦенообразования.ПодСтрока,
	               |	ПравилаЦенообразования.Диаметр,
	               |	ПравилаЦенообразования.Номенклатура,
	               |	ПравилаЦенообразования.ТипЦен,
				   // +- $
	               |	ПравилаЦенообразования.СкидкаНаценка,
				   //+++  28.01.2016  * %
	               |	ПравилаЦенообразования.СкидкаПредоплаты,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)) КАК Правило,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК ОтпускнаяЦена
				   
				   |	, ПравилаЦенообразования.ВидДефектаДляУценки
				   
	               |ИЗ
	               |	РегистрСведений.ПравилаЦенообразованияЭкспорт КАК ПравилаЦенообразования
	               |ГДЕ
	               |	ПравилаЦенообразования.Контрагент = &Контрагент
	               |	И (НЕ ПравилаЦенообразования.Выключено)
				   |
	//07.12.2015 - заглушка Базовая USD для Дисков
				   //|
				   |ОБЪЕДИНИТЬ ВСЕ
				   //|
				   |ВЫБРАТЬ различные
				    |	1001,
				    | &Диски,
				    | Null,
				    | Null,
				    | Null,
				    | Null,
				    | Null,
				    | Null,
					| &БазоваяUSD,
				    | 0,
					| 0,
				   |	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)),
				   |	ВЫРАЗИТЬ("""" КАК СТРОКА(50))
				   |,Null
				   |ИЗ
				   |	справочник.типыЦенНоменклатуры КАК Заглушка1
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
//==========================================Базовая====================================				   
    Запрос.УстановитьПараметр("БазоваяUSD",  справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00028")  );
	Запрос.УстановитьПараметр("Диски", перечисления.ВидыТоваров.Диски );   //  1001
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	ТекущаяПолитикаПравила = Результат.Выгрузить();
Иначе
	ТекущаяПолитикаПравила.Колонки.Добавить("Правило");
	ТекущаяПолитикаПравила.Колонки.Добавить("ОтпускнаяЦена");
	Если ТекущаяПолитикаПравила.Колонки.Найти("Приоритет")=Неопределено Тогда
		ТекущаяПолитикаПравила.Колонки.Добавить("Приоритет");
		ТекущаяПолитикаПравила.ЗагрузитьКолонку(ТекущаяПолитикаПравила.ВыгрузитьКолонку("НомерСтроки"),"Приоритет");
	КонецЕсли;
КонецЕсли;
//===============================================================
ТекущаяПолитикаПараметры = новый ТаблицаЗначений;
ТекущаяПолитикаПараметры.Колонки.Добавить("ИмяПараметра");
ТекущаяПолитикаПараметры.Колонки.Добавить("ЗначениеПараметра");

Если ТекущаяПолитикаПравила.Количество()=0 Тогда  //Если нет никаких правил - пустая таблица
	табЗнач1 = новый ТаблицаЗначений;
	табЗнач1.Колонк.Добавить("Номенклатура");
	табЗнач1.Колонки.Добавить("МинимальнаяЦена");
	возврат табЗнач1;
КонецЕсли;

//#Если Клиент Тогда
//Сообщить("Обрабатывается "+строка(ТекущаяПолитикаПравила.Количество())+" правил. Для "+?(СписокНоменклатуры=Неопределено,"всех", строка(СписокНоменклатуры.Количество()) )+" номенклатурных позиций"); 	
//#КонецЕсли

ТекстЗапросаДляВставкиЦена="ВЫБОР ";

Для сч=0 по ТекущаяПолитикаПравила.Количество()-1 Цикл
						 
//Главная процедура разбора правил Экспорт!
ЗаполнитьСтрокуПравилИПараметрыЭкспорт(ТекущаяПолитикаПравила[сч], ТекущаяПолитикаПараметры ); //+++ 12.01.2015 

ТекстЗапросаДляВставкиЦена=ТекстЗапросаДляВставкиЦена+ "
|	КОГДА " + ТекущаяПолитикаПравила[сч].Правило + " ТОГДА " 

//16.02.2016 ------Заглушка!-----------------
//+ ТекущаяПолитикаПравила[сч].ОтпускнаяЦена;
+"
|Выбор Когда "+ ТекущаяПолитикаПравила[сч].ОтпускнаяЦена+"<0 Тогда 0 
|Иначе "+ТекущаяПолитикаПравила[сч].ОтпускнаяЦена+" Конец";

КонецЦикла;

//+++ 24.12.2015 - текст заглушки
ТекстЗапросаДляВставкиЦена=ТекстЗапросаДляВставкиЦена+"
|	КОГДА Номенклатура.ВидТовара <> &Диски И ТипЦен = &ТипКрОпт ТОГДА ЦенаПоТипуЦен";

	ТекстЗапросаДляВставкиЦена=ТекстЗапросаДляВставкиЦена+"
|	ИНАЧЕ 0
|КОНЕЦ ";


ТекстЗапросаДляВставкиПриоритет="ВЫБОР ";

	Для сч=0 по ТекущаяПолитикаПравила.Количество()-1 Цикл
		ТекстЗапросаДляВставкиПриоритет=ТекстЗапросаДляВставкиПриоритет+ "
		|	КОГДА " + ТекущаяПолитикаПравила[сч].Правило + " ТОГДА " + Формат(ТекущаяПолитикаПравила[сч].Приоритет,"ЧДЦ=0; ЧГ=0");
	КонецЦикла;
////+++ 24.12.2015 - текст заглушки
ТекстЗапросаДляВставкиПриоритет=ТекстЗапросаДляВставкиПриоритет+"
|	КОГДА Номенклатура.ВидТовара <> &Диски И ТипЦен = &ТипКрОпт ТОГДА 2000";

ТекстЗапросаДляВставкиПриоритет=ТекстЗапросаДляВставкиПриоритет+"
|	ИНАЧЕ 9000 
|КОНЕЦ Приоритет";


ПостроительОтчетаОтчет = Новый ПостроительОтчета;
ПостроительОтчетаОтчет.Текст = ПолучитьТекстЦенЭкспорт();
//+++)

//24.12.2015 ---------- для всех НЕ ШИН --------------------------------------------------------------------
ПостроительОтчетаОтчет.Параметры.Вставить("ТипКрОпт", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") );
ПостроительОтчетаОтчет.Параметры.Вставить("КурсUSD", константы.КурсUSD.Получить() );

ПостроительОтчетаОтчет.Параметры.Вставить("Контрагент", Контрагент);//+++ 27.08.2014

Если ДатаЦены<>Неопределено Тогда //+++ 25.02.2014 цены надо брать на дату среза!  а правила - не периодические...
	ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"//&ДатаЦены", "&ДатаЦены");
	ПостроительОтчетаОтчет.Параметры.Вставить("ДатаЦены", ДатаЦены);
иначе //26.10.2015 - нужен срез цен ВСЕГДА!
	ПостроительОтчетаОтчет.Параметры.Вставить("ДатаЦены", ТекущаяДата() );
КонецЕсли; 

//+++( 12.05.2016 --- вместо среза цен ------- Валютная -----
Если БезРаспродажи тогда
	ДатаЦеныРаспродажи = Дата(1970,1,1);
иначе
	ДатаЦеныРаспродажи = ПолучитьДатуЦеныРаспродажи( Истина );
КонецЕсли;
ПостроительОтчетаОтчет.Параметры.Вставить("ДатаЦеныРаспродажи", ДатаЦеныРаспродажи);
//+++)

 //+++ 01.02.2017
 Если безФрахта Тогда 
	 ПостроительОтчетаОтчет.Текст =стрЗаменить(ПостроительОтчетаОтчет.Текст, 
	"Выразить(((Тов2.Цена+&Фрахт/ЕстьNull(Фрахт.Кол,1) + Тов2.Вес*6.27)*1.18) как Число(15,2))",
	"Выразить(Тов2.Цена как Число(15,2))");	//+++24.12.2015
иначе
	ПостроительОтчетаОтчет.Параметры.Вставить("Фрахт", Константы.Фрахт.Получить() );
КонецЕсли;


Если СписокНоменклатуры=Неопределено Тогда // полный список номенклатуры
	ПостроительОтчетаОтчет.Текст =стрЗаменить(ПостроительОтчетаОтчет.Текст, "Номенклатура В (&СписокНоменклатуры)","Номенклатура.ЭтоГруппа=ЛОЖЬ");	//+++24.12.2015
иначе
	 ПостроительОтчетаОтчет.Параметры.Вставить("СписокНоменклатуры", СписокНоменклатуры);
КонецЕсли;

 ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"0000",ТекстЗапросаДляВставкиЦена);
 ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"1 Приоритет",ТекстЗапросаДляВставкиПриоритет);
 
 СписокТиповЦен = новый СписокЗначений;		 //+++ 07.10.2014 - так быстрее отбираем только по типам цен из общих и перс.правил!-----------
 
 Для сч=0 по ТекущаяПолитикаПараметры.Количество()-1 Цикл
	 ИмяПараметра =ТекущаяПолитикаПараметры[сч].ИмяПараметра;
	 ЗначениеПараметра = ТекущаяПолитикаПараметры[сч].ЗначениеПараметра;
	 
	 Если ИмяПараметра<>"" Тогда
 	 	ПостроительОтчетаОтчет.Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
	 КонецЕсли;
	
	 //+++ 07.10.2014---так быстрее отбираем только по нескольким типам цен-----------
	 Если ТипЗнч(ЗначениеПараметра)= Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда 
		Если  СписокТиповЦен.НайтиПоЗначению(ЗначениеПараметра) =Неопределено Тогда
			СписокТиповЦен.Добавить(ЗначениеПараметра);
		КонецЕсли;	   
	 КонецЕсли;	

 КонецЦикла;	 
 
  //+++ 07.10.2014
  ПостроительОтчетаОтчет.Параметры.Вставить("СписокТиповЦен", СписокТиповЦен);
	 
	 
Если получитьПравилаИПараметры Тогда // для "ручного" формирования, например прайс-листа
	структураПарам = новый Структура;
	//-----------------текстовые поля---------------------------------------------------------
	структураПарам.Вставить("ТекстЗапросаДляВставкиЦена", ТекстЗапросаДляВставкиЦена);
	структураПарам.Вставить("ТекстЗапросаДляВставкиПриоритет", ТекстЗапросаДляВставкиПриоритет);
	структураПарам.Вставить("ПолныйТекстЗапроса", ТекстЗапросаДляВставкиЦена+","+ТекстЗапросаДляВставкиПриоритет);
	                         
    структураПарам.Вставить("Правила", ТекущаяПолитикаПравила);
	
	
	структураПарам.Вставить("Параметры",ТекущаяПолитикаПараметры); //ИмяПараметра, ЗначениеПараметра
	структураПарам.Вставить("СписокТиповЦен",СписокТиповЦен);       //+++ 07.10.2014
	
	структураПарам.Вставить("СписокНоменклатуры",СписокНоменклатуры);
	
	возврат структураПарам;
Иначе
	Результат = ПостроительОтчетаОтчет.ПолучитьЗапрос().Выполнить();
	табЗнач1 = Результат.Выгрузить();
	
	Возврат  табЗнач1;
КонецЕсли;

КонецФункции // Экспортные цены	

//+++ 12.01.2015 +++++++++++++++++++++++++++++++++++++++++++++++
//Имя параметра = имя для : Производитель, ВидТовара, Тип цен
// из имени Номенклатурная группа - убираются цифры в начале!
//для Номенклатура: Ном_[код],
//для ПодСтроки:    Назв_[подобно] 
//для ВходитВПапку: ГруппаНом_[КодНоменклатуры]
//для Диаметра:     Парам_[диаметр]
//
Процедура ЗаполнитьСтрокуПравилИПараметрыЭкспорт( СтрПравил, ТаблПараметры ) ЭКСПОРТ //Главная процедура разбора правил
	
	//абсолютная скидка +- $
	СтрПравил.ОтпускнаяЦена = "ЦенаПоТипуЦен"+?(СтрПравил.СкидкаНаценка>0,"+","")+формат(СтрПравил.СкидкаНаценка,"ЧРД=.; ЧН=' '; ЧГ=0");
	
	//+++( 28.01.2016 - учет % скидки/Наценки
	Если СтрПравил.СкидкаПредоплаты<>0 Тогда // (ОтпускнаяЦена-12.34)*1.23
	СтрПравил.ОтпускнаяЦена = "("+СтрПравил.ОтпускнаяЦена+")*"+формат(1+СтрПравил.СкидкаПредоплаты/100,"ЧРД=.; ЧН=0; ЧГ=0"); //сразу коэффициент!
	//СтрПравил.ОтпускнаяЦена = "Выразить( "+ ОтпускнаяЦенаСПроцентом + " как число(15,2) )"; // округляем до центов!
	КонецЕсли;
	//+++)
	
симвЗамены = новый массив;
симвЗамены.Добавить(" ");симвЗамены.Добавить("."); симвЗамены.Добавить(",");симвЗамены.Добавить(":"); // 0 -3
симвЗамены.Добавить("""");симвЗамены.Добавить("'");симвЗамены.Добавить("/");симвЗамены.Добавить("\"); // 4-7
симвЗамены.Добавить("-");симвЗамены.Добавить("+"); симвЗамены.Добавить("*");симвЗамены.Добавить("№"); // 8-11
симвЗамены.Добавить("("); симвЗамены.Добавить(")");симвЗамены.Добавить("["); симвЗамены.Добавить("]");//12-15
//симвЗамены.Добавить("0");симвЗамены.Добавить("1");симвЗамены.Добавить("2");симвЗамены.Добавить("3");симвЗамены.Добавить("4");//16-20
//симвЗамены.Добавить("5");симвЗамены.Добавить("6");симвЗамены.Добавить("7");симвЗамены.Добавить("8");симвЗамены.Добавить("9");//21-25

симвЗамены.Добавить("!");симвЗамены.Добавить("@");симвЗамены.Добавить("#");симвЗамены.Добавить("$");симвЗамены.Добавить("%");
симвЗамены.Добавить("^");симвЗамены.Добавить(":");симвЗамены.Добавить("&");симвЗамены.Добавить("?");симвЗамены.Добавить(";");

стр1 = "";
//---------------------------------------Условия складываются по И -------------------------------------------------
стр1 = ?(ЗначениеЗаполнено(СтрПравил.ВидТовара), "Номенклатура.ВидТовара = &"+строка(СтрПравил.ВидТовара), "");
Если ТаблПараметры.найти(строка(СтрПравил.ВидТовара), "ИмяПараметра")=Неопределено Тогда
    парам1 = ТаблПараметры.Добавить();
	парам1.ИмяПараметра = строка(СтрПравил.ВидТовара);
	парам1.ЗначениеПараметра = СтрПравил.ВидТовара;
КонецЕсли;

//------------------------------------------
Если ЗначениеЗаполнено(СтрПравил.Производитель) Тогда
	назв = строка(СтрПравил.Производитель)+формат(СтрПравил.Производитель.Код,"ЧГ=0"); назв = стрЗаменить(назв," ","");     //+++ 16.11.2017
	для i=0 по симвЗамены.Количество()-1 цикл
		назв = стрЗаменить(назв,симвЗамены[i],"");
	КонецЦикла;
стр1 = стр1 + ?(стр1="", "", " И ")+"Номенклатура.Производитель = &"+назв;
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		парам1.ЗначениеПараметра = СтрПравил.Производитель;
	КонецЕсли;
КонецЕсли;

//------------------------------------------
Если ЗначениеЗаполнено(СтрПравил.НоменклатурнаяГруппа) Тогда
	назв ="нг"+ строка(СтрПравил.НоменклатурнаяГруппа.Код); //7 сим. //16.11.2017
//	назв = стрЗаменить(назв," ","");
//	для i=0 по симвЗамены.Количество()-1 цикл
//		назв = стрЗаменить(назв,симвЗамены[i],"_");
//	КонецЦикла;
//	
//симвЗаменыЦ = новый массив;	//в номенклатурных группах цифры идут в начале!
//симвЗаменыЦ.Добавить("0");симвЗаменыЦ.Добавить("1");симвЗаменыЦ.Добавить("2");симвЗаменыЦ.Добавить("3");симвЗаменыЦ.Добавить("4");//16-20
//симвЗаменыЦ.Добавить("5");симвЗаменыЦ.Добавить("6");симвЗаменыЦ.Добавить("7");симвЗаменыЦ.Добавить("8");симвЗаменыЦ.Добавить("9");//21-25
// для i=0 по симвЗаменыЦ.Количество()-1 цикл
//	назв = стрЗаменить(назв,симвЗаменыЦ[i],"");
//КонецЦикла;

стр1 = стр1 + ?(стр1="", "", " И ")+ "Номенклатура.НоменклатурнаяГруппа = &"+назв;
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		парам1.ЗначениеПараметра = СтрПравил.НоменклатурнаяГруппа;
	КонецЕсли;
КонецЕсли;

//+++ 04.07.2016
//------------------------------------------
Если ЗначениеЗаполнено(СтрПравил.ВидДефектаДляУценки) Тогда
	назв = "деф"+строка(СтрПравил.ВидДефектаДляУценки.Код);  //7 симв. //+++ 16.11.2017
	//назв = стрЗаменить(назв," ","");
	//для i=0 по симвЗамены.Количество()-1 цикл
	//	назв = стрЗаменить(назв,симвЗамены[i],"");
	//КонецЦикла;
стр1 = стр1 + ?(стр1="", "", " И ")+"Номенклатура.ВидДефектаДляУценки = &"+назв;
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		парам1.ЗначениеПараметра = СтрПравил.ВидДефектаДляУценки;
	КонецЕсли;
КонецЕсли;



//------------------------------------------
Если ЗначениеЗаполнено(СтрПравил.ВходитВПапку) Тогда
	назв = "ГруппаНом_"+сокрЛП(СтрПравил.ВходитВПапку.Код); 
	стр1 = стр1 + ?(стр1="", "", " И ")+ "Номенклатура В ИЕРАРХИИ (&"+назв+")";
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		парам1.ЗначениеПараметра = СтрПравил.ВходитВПапку;
	КонецЕсли;
КонецЕсли;

//------------------------------------------
Если СокрЛП(СтрПравил.ПодСтрока)<>"" Тогда
	
	назв = СтрПравил.ПодСтрока; 
	для i=0 по симвЗамены.Количество()-1 цикл
		назв = стрЗаменить(назв,симвЗамены[i],"");
	КонецЦикла;
        назв = "Назв_"+назв; //иногда начинается с цифр
		
	стр1 = стр1 + ?(стр1="", "", " И ")+ "( Номенклатура.Наименование ПОДОБНО (&"+назв+") )";   
	//прямо в текст запроса!
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
		парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		//Если в подстроке задан явно % то все понятно... это "продвинутый" пользователь
		//иначе в любом месте наименования!
		префСуф =?(Найти(СтрПравил.ПодСтрока,"%")=0, "%","");
		парам1.ЗначениеПараметра =префСуф+СтрПравил.ПодСтрока+префСуф; 
	КонецЕсли;
КонецЕсли;

//------------------------------------------
Если ЗначениеЗаполнено(СтрПравил.Диаметр) Тогда
	назв = сокрЛП(СтрПравил.Диаметр); назв = стрЗаменить(назв," ","");
	знач1 = назв;
	
  поз1 = найти(назв, "-");
  Если поз1>0 Тогда//--------------разбор диапазона диаметров----------------------
		
	знач1 = сокрЛП( лев( назв, поз1-1) ); 					назв1=знач1;
	знач2 = сокрЛП( прав( назв, стрДлина(назв)-поз1) );		назв2=знач2;
	для i=0 по симвЗамены.Количество()-1 цикл
		назв1 = стрЗаменить(назв1, симвЗамены[i],"");
		назв2 = стрЗаменить(назв2, симвЗамены[i],"");
	КонецЦикла;
    назв1 = "Парам_"+назв1;  назв2 = "Парам_"+назв2; 
	стр1 = стр1 + ?(стр1="", "", " И ")+ "(Номенклатура.Типоразмер.Диаметр >= &"+назв1+" И Номенклатура.Типоразмер.Диаметр <= &"+назв2+")";
	
	Если ТаблПараметры.найти(назв1, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв1;
		парам1.ЗначениеПараметра = знач1;
	КонецЕсли;
	Если ТаблПараметры.найти(назв2, "ИмяПараметра")=Неопределено Тогда
		парам2 = ТаблПараметры.Добавить();
		парам2.ИмяПараметра = назв2;
		парам2.ЗначениеПараметра = знач2;
	КонецЕсли;
	
  Иначе	 //----------------------------обработка знаков <, >, =  ---------------------------
	знаки = новый массив;
	знаки.Добавить("="); // значит  просто =
	знаки.Добавить("<="); знаки.Добавить("<"); 
	знаки.Добавить(">="); знаки.Добавить(">");
	k=0;
	для i=1 по знаки.Количество()-1 цикл
		Если найти(назв, знаки[i])=1 Тогда
		    k=i; назв = Прав(назв, стрДлина(назв) - стрДлина(знаки[i]));
				 знач1 = назв;
			прервать;
		КонецЕсли;
	КонецЦикла;	
	
	//---------удаляем из названия все лишнее-----------
	для i=0 по симвЗамены.Количество()-1 цикл
		назв = стрЗаменить(назв, симвЗамены[i],"");
	КонецЦикла;
	назв = "Парам_"+назв; 
	
	стр1 = стр1 + ?(стр1="", "", " И ")+ "Номенклатура.Типоразмер.Диаметр "+знаки[k]+" &"+назв;
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		парам1.ЗначениеПараметра = знач1;
	КонецЕсли;
  КонецЕсли;//Конец разбора


КонецЕсли;

//------------------------------------------
Если ЗначениеЗаполнено(СтрПравил.Номенклатура) Тогда
	назв = "Ном_"+сокрЛП(СтрПравил.Номенклатура.Код); 
	стр1 = стр1 + ?(стр1="", "", " И ")+ "Номенклатура = &"+назв;
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		парам1.ЗначениеПараметра = СтрПравил.Номенклатура;
	КонецЕсли;
КонецЕсли;

//------------------------------------------
Если ЗначениеЗаполнено(СтрПравил.ТипЦен) Тогда
	назв = строка(СтрПравил.ТипЦен); назв = стрЗаменить(назв," ","");    //"Крупный Опт Ростов"
	назв = стрЗаменить(назв,"$","S"); 
	
	стр1 = стр1 + ?(стр1="", "", " И ")+ "ТипЦен = &"+назв;
	Если ТаблПараметры.найти(назв, "ИмяПараметра")=Неопределено Тогда
	    парам1 = ТаблПараметры.Добавить();
		парам1.ИмяПараметра = назв;
		парам1.ЗначениеПараметра = СтрПравил.ТипЦен;
	КонецЕсли;
КонецЕсли;

СтрПравил.Правило = стр1;

КонецПроцедуры

//---------------------проверка скидок по Контрагенту с макс.скидкой-наценкой-------------
Функция ПолучитьТоварыСНеправильнойЦенойКлиента(Контрагент, СписокНоменклатуры=Неопределено, ТекущиеПравилаКлиента=Неопределено, НомерПравила=ЛОЖЬ, СкидкаРук=ЛОЖЬ) Экспорт
	ТаблПараметры = новый ТаблицаЗначений;
	ТаблПараметры.Колонки.Добавить("ИмяПараметра");
	ТаблПараметры.Колонки.Добавить("ЗначениеПараметра");
	резТабл = ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНоменклатуры, ЛОЖЬ, ТекущиеПравилаКлиента);	

	//--------------общие правила с макс скидкой---------------
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаЦенообразованияОбщие.Приоритет,
	               |	ПравилаЦенообразованияОбщие.ВидТовара,
	               |	ПравилаЦенообразованияОбщие.Производитель,
	               |	ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа,
	               |	ПравилаЦенообразованияОбщие.ВходитВПапку,
	               |	ПравилаЦенообразованияОбщие.Диаметр,
	               |	ПравилаЦенообразованияОбщие.Номенклатура,
	               |	ПравилаЦенообразованияОбщие.ТипЦен,
	               |	ПравилаЦенообразованияОбщие.ПодСтрока,
	               |	"+?(СкидкаРук,
				   	    "ПравилаЦенообразованияОбщие.МаксСкидкаНаценкаРук КАК СкидкаНаценка,
	               |	ПравилаЦенообразованияОбщие.МаксСкидкаПредоплатыРук КАК СкидкаПредоплаты",
				       "ПравилаЦенообразованияОбщие.МаксСкидкаНаценка КАК СкидкаНаценка,
	               |	ПравилаЦенообразованияОбщие.МаксСкидкаПредоплаты КАК СкидкаПредоплаты")+"
	               |ИЗ
	               |	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие";
	
	Результат = Запрос.Выполнить();
	ТекущаяПолитикаПравилаОбщие = Результат.Выгрузить();
	резТаблОбщие = ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНоменклатуры, ЛОЖЬ, ТекущаяПолитикаПравилаОбщие);	
	
//-------------попозиционное сравнение---------------------
Запрос2 = новый Запрос;
Если НомерПравила Тогда // по правилам
		Запрос2.Текст = "ВЫБРАТЬ
		                |	РезТабл.Номенклатура КАК Номенклатура,
		                |	РезТабл.МинимальнаяЦена,
		                |	РезТабл.Приоритет КАК Приоритет
		                |ПОМЕСТИТЬ ВТ_РезТабл
		                |ИЗ
		                |	&РезТабл КАК РезТабл
		                |
		                |ИНДЕКСИРОВАТЬ ПО
		                |	Номенклатура,
		                |	Приоритет
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	резТаблОбщие.Номенклатура КАК Номенклатура,
		                |	резТаблОбщие.МинимальнаяЦена,
		                |	резТаблОбщие.Приоритет КАК Приоритет
		                |ПОМЕСТИТЬ ВТ_резТаблОбщие
		                |ИЗ
		                |	&резТаблОбщие КАК резТаблОбщие
		                |
		                |ИНДЕКСИРОВАТЬ ПО
		                |	Номенклатура,
		                |	Приоритет
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	ЕСТЬNULL(ВТ0.Приоритет, 0) КАК ПриоритетОБЩИЕ,
		                |	ЕСТЬNULL(ВТ1.Приоритет, 0) КАК ПриоритетКлиента,
		                |	МАКСИМУМ(ЕСТЬNULL(ВТ0.МинимальнаяЦена, 0) - ЕСТЬNULL(ВТ1.МинимальнаяЦена, 0)) КАК РазностьЦен
		                |ИЗ
		                |	ВТ_резТаблОбщие КАК ВТ0
		                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                |			ВТ_1.Номенклатура КАК Номенклатура,
		                |			ВТ_1.МинимальнаяЦена КАК МинимальнаяЦена,
		                |			ВТ_1.Приоритет КАК Приоритет
		                |		ИЗ
		                |			ВТ_РезТабл КАК ВТ_1) КАК ВТ1
		                |		ПО (ВТ1.Номенклатура = ВТ0.Номенклатура)
		                |			И (ЕСТЬNULL(ВТ1.МинимальнаяЦена, 0) - ЕСТЬNULL(ВТ0.МинимальнаяЦена, 0) < 0)
		                |ГДЕ
		                |	ЕСТЬNULL(ВТ1.МинимальнаяЦена, 0) > 0
		                |	И ЕСТЬNULL(ВТ0.МинимальнаяЦена, 0) > 0
		                |
		                |СГРУППИРОВАТЬ ПО
		                |	ЕСТЬNULL(ВТ0.Приоритет, 0),
		                |	ЕСТЬNULL(ВТ1.Приоритет, 0)
		                |
		                |УПОРЯДОЧИТЬ ПО
		                |	ПриоритетКлиента,
		                |	ПриоритетОБЩИЕ
		                |АВТОУПОРЯДОЧИВАНИЕ";
Иначе // по номенклатуре
	Запрос2.Текст = "ВЫБРАТЬ
	                |	РезТабл.Номенклатура КАК Номенклатура,
	                |	РезТабл.МинимальнаяЦена
	                |ПОМЕСТИТЬ ВТ_РезТабл
	                |ИЗ
	                |	&РезТабл КАК РезТабл
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Номенклатура
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	резТаблОбщие.Номенклатура КАК Номенклатура,
	                |	резТаблОбщие.МинимальнаяЦена
	                |ПОМЕСТИТЬ ВТ_резТаблОбщие
	                |ИЗ
	                |	&резТаблОбщие КАК резТаблОбщие
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Номенклатура
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ0.Номенклатура КАК Номенклатура,
	                |	ЕСТЬNULL(ВТ0.МинимальнаяЦена, 0) КАК МинимальнаяЦена,
	                |	ЕСТЬNULL(ВТ0.МинимальнаяЦена, 0) - ЕСТЬNULL(ВТ1.МинимальнаяЦена, 0) КАК РазностьЦен
	                |ИЗ
	                |	ВТ_резТаблОбщие КАК ВТ0
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |			ВТ_1.Номенклатура КАК Номенклатура,
	                |			ВТ_1.МинимальнаяЦена КАК МинимальнаяЦена
	                |		ИЗ
	                |			ВТ_РезТабл КАК ВТ_1) КАК ВТ1
	                |		ПО (ВТ1.Номенклатура = ВТ0.Номенклатура)
	                |			И (ЕСТЬNULL(ВТ1.МинимальнаяЦена, 0) - ЕСТЬNULL(ВТ0.МинимальнаяЦена, 0) < 0)
	                |ГДЕ
	                |	ЕСТЬNULL(ВТ1.МинимальнаяЦена, 0) > 0
	                |	И ЕСТЬNULL(ВТ0.МинимальнаяЦена, 0) > 0
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Номенклатура
	                |АВТОУПОРЯДОЧИВАНИЕ";
КонецЕсли;					
	Запрос2.Параметры.Вставить("резТабл",резТабл);
	Запрос2.Параметры.Вставить("резТаблОбщие",резТаблОбщие);
рез2 = Запрос2.Выполнить();
рез = рез2.Выгрузить();

возврат рез;

КонецФункции


//16.02.2018 - вызывается из АвтоКомплектацияЗаказовПоСезонным()
функция ПредварительнаяАвтокомплектацияДляVIPконтрагентов()
	
 	 	КЧ = Новый КвалификаторыЧисла(12,2);
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Контрагенты"));
		ОписаниеТиповК = Новый ОписаниеТипов(Массив, ,);
		Массив.Очистить();
		Массив.Добавить(Тип("Число"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
		
		ТаблицаПриоритетныхКонтрагентов = Новый ТаблицаЗначений();
		ТаблицаПриоритетныхКонтрагентов.Колонки.Добавить("Приоритет",ОписаниеТиповЧ);
		ТаблицаПриоритетныхКонтрагентов.Колонки.Добавить("Контрагент",ОписаниеТиповК);
		ТаблицаПриоритетныхКонтрагентов.Колонки.Добавить("Доля",ОписаниеТиповЧ);
		
		// Резерв ИМ
		Строка = ТаблицаПриоритетныхКонтрагентов.Добавить();
		Строка.Приоритет = 1;
		строка.Контрагент = Справочники.Контрагенты.НайтиПоКоду("П004703");  //резерв им
		Строка.Доля = 0.2;//20%
		
		Строка = ТаблицаПриоритетныхКонтрагентов.Добавить();
		Строка.Приоритет = 2;
		строка.Контрагент = Справочники.Контрагенты.НайтиПоКоду("92228"); //Контаер - только шины
		Строка.Доля = 0.7;
		
		//по 10% на каждый филиал от всего нового....
		Строка = ТаблицаПриоритетныхКонтрагентов.Добавить();
		Строка.Приоритет = 3;
		строка.Контрагент = Справочники.Контрагенты.НайтиПоКоду("93187");  //филиал РнД
		Строка.Доля = 0.1;
		Строка = ТаблицаПриоритетныхКонтрагентов.Добавить();
		Строка.Приоритет = 4;
		строка.Контрагент = Справочники.Контрагенты.НайтиПоКоду("П000835"); //филиал СПб
		Строка.Доля = 0.1;
        Строка = ТаблицаПриоритетныхКонтрагентов.Добавить();
		Строка.Приоритет = 5;
		строка.Контрагент = Справочники.Контрагенты.НайтиПоКоду("94036"); //филиал Ект
		Строка.Доля = 0.1;
		
		Строка.Приоритет = 6;
		строка.Контрагент = Справочники.Контрагенты.НайтиПоКоду("П015036"); //резерв 11 группы - только Штамп
		Строка.Доля = 0.2; //20%
	
		//16.06.16 сначала для интернет-магазина
		//сформируем долю ИМ на сегодня	 смотрим всегда остатки на Ярославле и формируем заказы Ярославля
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.Приоритет,
		|	Таб.Контрагент,
		|	Таб.Доля
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК Заказано,
		|	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) КАК ОстатокНаСкладах,
		|	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК СвободныйОстаток,
		|	ВЫРАЗИТЬ((ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0)) * ВТ.Доля КАК ЧИСЛО(15, 2)) КАК Доля,
		|	ВТ.Контрагент,
		|	ВТ.Приоритет КАК Приоритет,
		|	ОстаткиТоваров.Номенклатура
		|ИЗ
		|	ВТ КАК ВТ,
		|	РегистрНакопления.ТоварыНаСкладах.Остатки( ,
		|			Склад.ЗапретитьИспользование = ЛОЖЬ
		|				И Склад.Транзитный = ЛОЖЬ
		|				И Склад.ТипСклада <> ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ВПути)) КАК ОстаткиТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки( ,
		|				ЗаказПокупателя.Проверен
		|					И ЗаказПокупателя.Транзит=ЛОЖЬ ) КАК ЗаказыПокупателей
		|		ПО (ЗаказыПокупателей.Номенклатура = ОстаткиТоваров.Номенклатура)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		Запрос.УстановитьПараметр("Таб", ТаблицаПриоритетныхКонтрагентов);
		ТабОстатковДляИМ = Запрос.Выполнить().Выгрузить();
		//сделаем остатки кратно 4
		Для каждого стр из ТабОстатковДляИМ Цикл
			Если строка.Контрагент = Справочники.Контрагенты.НайтиПоКоду("П004703") Тогда
				Если стр.доля<4 и стр.СвободныйОстаток>=4 Тогда
					стр.Доля=4;
				иначеЕсли стр.Доля%4<=2 Тогда
					стр.Доля=Мин(Цел(стр.Доля/4)*4,стр.СвободныйОстаток);
				иначе
					стр.Доля=Мин((Цел(стр.Доля/4)+1)*4,стр.СвободныйОстаток);
				КонецЕсли;	
			иначе
				Если стр.доля<4 и стр.СвободныйОстаток>=20 Тогда
					стр.Доля=4;
				иначеЕсли стр.Доля%4<=2 Тогда
					стр.Доля=Мин(Цел(стр.Доля/4)*4,стр.СвободныйОстаток);
				иначе
					стр.Доля=Мин((Цел(стр.Доля/4)+1)*4,стр.СвободныйОстаток);
				КонецЕсли;	
				
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Контр из ТаблицаПриоритетныхКонтрагентов Цикл   
			
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Таб.Номенклатура,
				|	Таб.Доля,
				|	Таб.Контрагент
				|ПОМЕСТИТЬ ДолиИМ
				|ИЗ
				|	&Таб КАК Таб
				|ГДЕ
				|	Таб.Контрагент = &Контрагент
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗаказыПокупателейСезонныеОстатки.Номенклатура,
				|	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток
				|ПОМЕСТИТЬ ВсегоНадоЗаказать
				|ИЗ
				|	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(
				|			,
				|			Контрагент = &Контрагент
				|				И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
				|				И ЗаказПокупателяСезонный.АвтоКомплектация = ИСТИНА) КАК ЗаказыПокупателейСезонныеОстатки
				|ГДЕ
				|	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток > 0
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВсегоНадоЗаказать.Номенклатура КАК Номенклатура,
				|	ВсегоНадоЗаказать.КоличествоОстаток КАК КоличествоОстаток,
				|	ДолиИМ.Доля КАК Доля
				|ИЗ
				|	ВсегоНадоЗаказать КАК ВсегоНадоЗаказать
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДолиИМ КАК ДолиИМ
				|		ПО ВсегоНадоЗаказать.Номенклатура = ДолиИМ.Номенклатура";
				
				
				Запрос.УстановитьПараметр("Таб", ТабОстатковДляИМ);
				Запрос.УстановитьПараметр("Контрагент", Контр.Контрагент);
				
				Результат = Запрос.Выполнить();
				Если не Результат.Пустой() Тогда
				табНом = Результат.Выгрузить();
				списНом = новый СписокЗначений;
				списНом.ЗагрузитьЗначения( Табном.ВыгрузитьКолонку("Номенклатура") );
				
					табЦен = ПолучитьЦеныДляКонтрагента(Контр.Контрагент, списНом);
					Если ТипЗнч(табЦен)=тип("Строка") Тогда
						табЦен = ПолучитьЦеныДляКонтрагента_РегСв(Контр.Контрагент, списНом);
					КонецЕсли;
					
					
					
					ВыборкаВ = Результат.Выбрать();
					
					НовЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
					
					Пока ВыборкаВ.Следующий() Цикл
						Если ВыборкаВ.Доля >0 Тогда
							новСтр = НовЗаказ.Товары.Добавить();
							Если ВыборкаВ.Доля+3>=ВыборкаВ.КоличествоОстаток Тогда
								новСтр.Количество = ВыборкаВ.КоличествоОстаток;
							иначе
								новСтр.Количество = ВыборкаВ.Доля;
							КонецЕсли;
							новСтр.Номенклатура = ВыборкаВ.номенклатура;
							НовСтр.КоличествоМест             = новСтр.Количество;
							НовСтр.Коэффициент                = 1;
							НовСтр.ЕдиницаИзмерения           = ВыборкаВ.номенклатура.ЕдиницаХраненияОстатков;
							НовСтр.ЕдиницаИзмеренияМест       = ВыборкаВ.номенклатура.ЕдиницаХраненияОстатков;
							НовСтр.СтавкаНДС                  = Перечисления.СтавкиНДС.НДС18;
							
							стрЦен = табЦен.найти(НовСтр.Номенклатура, "Номенклатура");
							Если стрЦен=Неопределено Тогда
								//  НоваяСтрока.Цена = ТекСтрокаТовары.Цена; // из сезонного заказа тут не надо! 
								Если НовСтр.Цена = 0 Тогда
									НовСтр.Цена = 5555;
									НовЗаказ.Комментарий = НовЗаказ.Комментарий+ " "+строка(НовСтр.НомерСтроки)+" строка: цена товара "+строка(НовСтр.Номенклатура.Код)+" - неопределена и автоматически установлена = 5 555р.!
									|";
								КонецЕсли;
							иначе	
								НовСтр.Цена = стрЦен.МинимальнаяЦена;
							КонецЕсли;	
							
							
							НовСтр.Сумма                      = НовСтр.Цена*новСтр.Количество;  // может отличаться от цена * количество
							НовСтр.СуммаНДС                   = Окр(НовСтр.Сумма*18/118, 2); //до копеек
							
						КонецЕсли;	
					КонецЦикла;
					
					Если НовЗаказ.Товары.Итог("Количество")>0 Тогда
						//Заполним и запишем документ до конца
						
						глТекущийПользователь1 = Справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
						// Заполнение шапки
						ЗаполнитьШапкуДокумента(НовЗаказ, глТекущийПользователь1, Константы.ВалютаРегламентированногоУчета.Получить(), "Продажа");
						НовЗаказ.ВалютаДокумента  = Константы.ВалютаРегламентированногоУчета.Получить();
						НовЗаказ.Контрагент         = Контр.Контрагент;
						НовЗаказ.ТипЗаказа = 1; 
						НовЗаказ.Комментарий       = "#АвтоКомплектация по Cезонным заказам покупателя#" ;
						НовЗаказ.ДоговорКонтрагента = найтиДоговорФакторингаПоОтветственному(НовЗаказ); // Если пустой - ищет договор
						
						Если НовЗаказ.ДоговорКонтрагента.пустая() Тогда
							Продолжить; // без договора - ничего не делаем!
						КонецЕсли;
						НовЗаказ.Ответственный = НовЗаказ.ДоговорКонтрагента.ОтветственноеЛицо; // Менеджер  - он же и ответственный
						НовЗаказ.Дата = ТекущаяДата(); //момент создания!
						// дата отгрузки = текущий день до 15-00, после этого - следующий
						начДня =  НачалоДня( ТекущаяДата() );
						НовЗаказ.ДатаОтгрузки     = ?( (ТекущаяДата() - начДня)<15*3600, начДня, начДня+86400 );
						днейДоОплаты = 0;   //+++ 02.09.2014 чтобы не пересчитывалось! 
						НовЗаказ.ЧислоДнейСМоментаОтгрузки = ?(НовЗаказ.ДоговорКонтрагента.пустая(), днейДоОплаты, 
						?(НовЗаказ.ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности, НовЗаказ.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности, 
						днейДоОплаты));
						
						НовЗаказ.ДатаОплаты       = НовЗаказ.ДатаОтгрузки + НовЗаказ.ЧислоДнейСМоментаОтгрузки*86400; 
						НовЗаказ.КратностьВзаиморасчетов           = 1;
						НовЗаказ.КурсВзаиморасчетов = 1;
						
						НовЗаказ.Организация        = Справочники.Организации.НайтиПоКоду("00001");
						НовЗаказ.Ответственный      = глТекущийПользователь1;
						НовЗаказ.ТипЦен  		    =	справочники.ТипыЦенНоменклатуры.найтиПоКоду("00006");   //ручная
 						
						НовЗаказ.УчитыватьНДС       = Истина;
						НовЗаказ.СуммаВключаетНДС   = Истина;
						НовЗаказ.Транзит 	   = ЛОЖЬ; 
						НовЗаказ.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
						НовЗаказ.Проверен = Истина;
						
						попытка
						НовЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					исключение
						НовЗаказ.Записать(РежимЗаписиДокумента.Запись);
						КонецПопытки;
					КонецЕсли;
					
				КонецЕсли;
		КонецЦикла;	
		
		масVIPКлиентов = ТаблицаПриоритетныхКонтрагентов.ВыгрузитьКолонку("Контрагент");
	
		ВОЗВРАТ масVIPКлиентов;
КонецФункции


//основная функция по регл.заданию!
процедура АвтоКомплектацияЗаказовПоСезонным() экспорт
	
// предварительная для VIP контрагентов +++ 16.02.2018 - вынесена в отдельную функция
масVIPКонтрагентов = ПредварительнаяАвтокомплектацияДляVIPконтрагентов();

//+++ 11.04.2018 +++ Задача № 40782 - Диски - распределение по долям между отделами/направлениями продаж
//+++ 13.04 - 02.08.2018 выключена/включено  по # Бондаренко --- 65 / 35% -------------------
ДележкаДисковПоНаправлениямПродаж(масVIPКонтрагентов);   

// 1) определение нужных сезонных заказов ---------------------------------------------------------------------------------
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
				|	НоменклатураИмпорт.Номенклатура
				|Поместить ВТ_ЧерныйСписок
				|ИЗ
				|	РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт
				|ГДЕ
				|	НоменклатураИмпорт.ЧерныйЛист = Истина
				|;
				|////////////////////////////////////////////////////////////////
			   |ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный КАК Ссылка,
               |	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный.МоментВремени КАК ЗаказПокупателяСезонныйМоментВремени,
               |	ЗаказыПокупателейСезонныеОстатки.Контрагент.ПриоритетАвтокомплектации КАК КонтрагентПриоритетАвтокомплектации
               |ИЗ
               |	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(,
               |			НЕ ЗаказПокупателяСезонный.Контрагент В (&масVIPКонтрагентов)
			   //+++ 09.08.2018
			   |				и  не Номенклатура в (выбрать вт.Номенклатура из ВТ_ЧерныйСписок как вт)
			   
               |				И (&ТекДата МЕЖДУ ЗаказПокупателяСезонный.Дата И ЗаказПокупателяСезонный.ДатаДействияПо)
               |				И ЗаказПокупателяСезонный.АвтоКомплектация
               |				И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
               |				И ЗаказПокупателяСезонный.ПометкаУдаления = ЛОЖЬ) КАК ЗаказыПокупателейСезонныеОстатки
               |
               |УПОРЯДОЧИТЬ ПО
               |	КонтрагентПриоритетАвтокомплектации УБЫВ,
               |	ЗаказПокупателяСезонныйМоментВремени
               |АВТОУПОРЯДОЧИВАНИЕ";
			   
Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());			   
Запрос.УстановитьПараметр("масVIPКонтрагентов", масVIPКонтрагентов); // это массив!
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

глТекущийПользователь1 = Справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
мВалютаРегламентированногоУчета1 = Справочники.Валюты.НайтиПоКоду("643"); //643 код  - всегда в рублях?!
ПараметрыСеанса.ТекущийПользователь = глТекущийПользователь1;

типФакторинг     = Справочники.ТипыДоговоров.НайтиПоКоду("00002");
ПодразделениеЯШТ = Справочники.Подразделения.НайтиПоКоду("00005");

//+++ ГЛАВНЫЙ ЦИКЛ по сезонным заказам===============================================================================
Пока Выборка.Следующий() Цикл
 	Основание  = выборка.Ссылка; // сезонный заказ
	
	//ФУНКЦИЯ АНАЛИЗА товаров-----------------------------
	Запрос = Новый Запрос;
	Если Основание.СУчетомАналогов Тогда
		//09.08.2018 - без черных списков
			Запрос.Текст = "ВЫБРАТЬ
				|	НоменклатураИмпорт.Номенклатура
				|Поместить ВТ_ЧерныйСписок
				|ИЗ
				|	РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт
				|ГДЕ
				|	НоменклатураИмпорт.ЧерныйЛист = Истина
				|;
						   |ВЫБРАТЬ
			               |	ЗаказыПокупателейСезонныеОстатки.Номенклатура,
			               |	Сумма(ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток) как КоличествоОстаток
			               |ПОМЕСТИТЬ СЗТовары
			               |ИЗ
			               |	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(, ЗаказПокупателяСезонный = &ссылка 
						   |			И естьNull(Подразделение.ВЭД,ЛОЖЬ)=Ложь    ) КАК ЗаказыПокупателейСезонныеОстатки
						   //+++ 16.02.2018 только "+" итоги по остатку нужны...
						   |СГРУППИРОВАТЬ ПО Номенклатура
						   |Имеющие Сумма(ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток)>0
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	Аналоги.Номенклатура,
			               |	Аналоги.Аналог
			               |ПОМЕСТИТЬ АналогиНоменклатуры
			               |ИЗ
			               |	(ВЫБРАТЬ
			               |		АналогиДисков.Номенклатура КАК Номенклатура,
			               |		АналогиДисков.Аналог КАК Аналог
			               |	ИЗ
			               |		РегистрСведений.АналогиДисков КАК АналогиДисков
			               |	ГДЕ
			               |		АналогиДисков.Номенклатура В (ВЫБРАТЬ вт.Номенклатура ИЗ СЗТовары КАК вт)
			               |	
						   //-------обратно Аналог - Ном ------
			               |	ОБЪЕДИНИТЬ ВСЕ
			               |	
			               |	ВЫБРАТЬ
			               |		АналогиДисков.Аналог,
			               |		АналогиДисков.Номенклатура
			               |	ИЗ
			               |		РегистрСведений.АналогиДисков КАК АналогиДисков
			               |	ГДЕ
			               |		АналогиДисков.Аналог В (ВЫБРАТЬ вт.Номенклатура ИЗ СЗТовары КАК вт)
			               |	
			               //-------Аналог Аналога --- Аналог=товар, связка через Номенклатуру -> Аналог2 ------
			               |	ОБЪЕДИНИТЬ ВСЕ
			               |	
			               |	ВЫБРАТЬ
			               |		АналогиДисков.Аналог,
			               |		АналогиДисков2.Аналог
			               |	ИЗ
			               |		РегистрСведений.АналогиДисков КАК АналогиДисков
			               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогиДисков  КАК АналогиДисков2
			               |			ПО АналогиДисков.Номенклатура = АналогиДисков2.Номенклатура
			               |	ГДЕ
			               |		АналогиДисков.Аналог В (ВЫБРАТЬ вт.Номенклатура ИЗ СЗТовары КАК вт)
			               |		И АналогиДисков.Аналог <> ЕСТЬNULL(АналогиДисков2.Аналог, АналогиДисков.Аналог)
			               |	
			                //-------Номенклатура Номенклатуры --- Номенклатуры=товар, связка через Аналог -> Номенклатура2 ------
			             |	ОБЪЕДИНИТЬ ВСЕ
			               |	
			               |	ВЫБРАТЬ
			               |		АналогиДисков.Номенклатура,
			               |		АналогиДисков1.Номенклатура
			               |	ИЗ
			               |		РегистрСведений.АналогиДисков КАК АналогиДисков
			               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогиДисков КАК АналогиДисков1
			               |			ПО АналогиДисков.Аналог = АналогиДисков1.Аналог
			               |	ГДЕ
			               |		АналогиДисков.Номенклатура В (ВЫБРАТЬ вт.Номенклатура ИЗ СЗТовары КАК вт)
			               |		И АналогиДисков.Номенклатура <> ЕСТЬNULL(АналогиДисков1.Номенклатура, АналогиДисков.Номенклатура)
			               |	
			                 //-------Номенклатура - Аналог = Номенклатуры --- Номенклатуры=товар, связка через Аналог=Номенклатура -> Аналог2 ------
			      		    |	ОБЪЕДИНИТЬ ВСЕ
			               |	
			               |	ВЫБРАТЬ
			               |		АналогиДисков.Номенклатура,
			               |		АналогиДисков1.Аналог
			               |	ИЗ
			               |		РегистрСведений.АналогиДисков КАК АналогиДисков
			               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогиДисков КАК АналогиДисков1
			               |			ПО АналогиДисков.Аналог = АналогиДисков1.Номенклатура
			               |	ГДЕ
			               |		АналогиДисков.Номенклатура В (ВЫБРАТЬ вт.Номенклатура ИЗ СЗТовары КАК вт)
			               |		И АналогиДисков.Номенклатура <> ЕСТЬNULL(АналогиДисков1.Аналог, АналогиДисков.Номенклатура)
			               |	
			                 //-------Аналог - Номенклатура=Аналог --- Аналог=товар, связка через Номенклатура=Аналог -> Номенклатура2 ------
			               |	ОБЪЕДИНИТЬ ВСЕ
			               |	
			               |	ВЫБРАТЬ
			               |		АналогиДисков.Аналог,
			               |		АналогиДисков1.Номенклатура
			               |	ИЗ
			               |		РегистрСведений.АналогиДисков КАК АналогиДисков
			               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогиДисков КАК АналогиДисков1
			               |			ПО АналогиДисков.Номенклатура = АналогиДисков1.Аналог
			               |	ГДЕ
			               |		АналогиДисков.Аналог В (ВЫБРАТЬ вт.Номенклатура ИЗ СЗТовары КАК вт)
			               |		И АналогиДисков.Аналог <> ЕСТЬNULL(АналогиДисков1.Номенклатура, АналогиДисков.Аналог)
			               |
						   //--------сам себе аналог... без аналогов ------------------
			               |	ОБЪЕДИНИТЬ ВСЕ
			               |	
			               |	ВЫБРАТЬ
			               |		СЗТовары.Номенклатура,
			               |		СЗТовары.Номенклатура
			               |	ИЗ
			               |		СЗТовары КАК СЗТовары) КАК Аналоги
			               |
						   //+++ 09.08.2018 --- номенклатура может быть в черном, а аналог нет!
						   |ГДЕ не  Аналоги.Аналог в (выбрать вт.Номенклатура из ВТ_ЧерныйСписок как ВТ)
						   |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	СЗТовары.Номенклатура КАК Номенклатура,
			               |	СЗТовары.Номенклатура.Код КАК Код,
			               |	ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК Заказано,
			               |	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) КАК ОстатокНаСкладах,
			               |	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК СвободныйОстаток,
			               |	АналогиНоменклатуры.Аналог,
			               |	ВЫБОР
			               |		КОГДА СЗТовары.Номенклатура = АналогиНоменклатуры.Аналог
			               |			ТОГДА 0
			               |		ИНАЧЕ 1
			               |	КОНЕЦ КАК Порядок,
			               |	СЗТовары.КоличествоОстаток КАК НужноЗаказать
			               |ИЗ
			               |	СЗТовары КАК СЗТовары
			               |		ЛЕВОЕ СОЕДИНЕНИЕ АналогиНоменклатуры КАК АналогиНоменклатуры
			               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки( ,
			               |					ЗаказПокупателя.Проверен
						   //16.02.2018------------------------------------------------
			               |						И ЗаказПокупателя.Транзит = &Транзит
			               |						И выбор когда &Транзит тогда ЗаказПокупателя.Подразделение = &Подразделение иначе Истина Конец
						   
			               |						) КАК ЗаказыПокупателей
			               |			ПО АналогиНоменклатуры.Аналог = ЗаказыПокупателей.Номенклатура
			               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки( ,
			               |					Склад.ЗапретитьИспользование = ЛОЖЬ
			               |						И Склад.ТипСклада <> ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ВПути)
						   
						   	//16.02.2018 -----------------------------------------------
			               |						И Склад.Транзитный = &Транзит
						   |						И выбор когда &Транзит тогда Склад.Подразделение = &Подразделение иначе Истина Конец
						   
						   |) КАК ОстаткиТоваров
			               |			ПО АналогиНоменклатуры.Аналог = ОстаткиТоваров.Номенклатура
			               |		    ПО (АналогиНоменклатуры.Номенклатура = СЗТовары.Номенклатура)
			               |ГДЕ
						   //ЕСТЬ свободный остаток
			               |	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) > 0
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Порядок
						   //+++ 16.02.2018
						   |; 
						   |//////////////////////////////////////////////////////////////////////
						   |Уничтожить СЗТовары; 
						   |Уничтожить АналогиНоменклатуры
						   |";
			
			
		иначе //================ без аналогов ================	
			Запрос=Новый Запрос;
			//09.08.2018 - без черных списков
			Запрос.Текст = "ВЫБРАТЬ
				|	НоменклатураИмпорт.Номенклатура
				|Поместить ВТ_ЧерныйСписок
				|ИЗ
				|	РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт
				|ГДЕ
				|	НоменклатураИмпорт.ЧерныйЛист = Истина
				|;
				|ВЫБРАТЬ
			             |	ЗаказыПокупателейСезонныеОстатки.Номенклатура КАК Номенклатура,
			             |	ЗаказыПокупателейСезонныеОстатки.Номенклатура.Код КАК Код,
			             |	ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК Заказано,
			             |	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) КАК ОстатокНаСкладах,
			             |	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК СвободныйОстаток,
			             |	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток КАК НужноЗаказать
			             |ИЗ
			             |	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(, ЗаказПокупателяСезонный = &Ссылка
							//09.08.2018 - без черных списков сразу
						 |		и не Номенклатура в (выбрать вт.Номенклатура из ВТ_ЧерныйСписок как ВТ)
						 
						 |				И естьNull(Подразделение.ВЭД,ЛОЖЬ)=Ложь) КАК ЗаказыПокупателейСезонныеОстатки
						 
			             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(,
			             |				ЗаказПокупателя.Проверен
						    //16.02.2018------------------------------------------------
			               |						И ЗаказПокупателя.Транзит = &Транзит
			               |						И выбор когда &Транзит тогда ЗаказПокупателя.Подразделение = &Подразделение иначе Истина Конец
						 
						 |) КАК ЗаказыПокупателей
			             |		ПО ЗаказыПокупателейСезонныеОстатки.Номенклатура = ЗаказыПокупателей.Номенклатура
						 
			             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки( ,
			             |				Склад.ЗапретитьИспользование = ЛОЖЬ
			             |							И Склад.ТипСклада <> ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ВПути)
						    	//16.02.2018 -----------------------------------------------
			               |						И Склад.Транзитный = &Транзит
						   |						И выбор когда &Транзит тогда Склад.Подразделение = &Подразделение иначе Истина Конец
			          							
						 |) КАК ОстаткиТоваров
			             |		ПО ЗаказыПокупателейСезонныеОстатки.Номенклатура = ОстаткиТоваров.Номенклатура
			             |ГДЕ
			             |	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) > 0
						 |";
			//+++ 30.07.2014 
			//для Транзитных Сезонных заказов - делаем заказ для перемещение - ТОЛЬКО для Контрагента = филиал !!!
			// и в "свободных" остатках - вычитаем ВСЕ заказы на перемещение, которые Проделены !
			//	// и в "свободных" остатках - вычитаем ВСЕ заказы на перемещение, которые Проделены !
		КонецЕсли;									
		
	Запрос.УстановитьПараметр("ДатаОснования",Основание.Дата);
   //Если Основание.Транзит Тогда // транзитный и автокомплектация >> для перемещения в филиал
	Запрос.УстановитьПараметр("Транзит", Ложь); 
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеЯШТ); 
	
	// Подразделение Филиала!
	Если (Основание.Подразделение<>ПодразделениеЯШТ и НЕ Основание.Подразделение.пустая())  Тогда
		Запрос.УстановитьПараметр("Транзит",истина); 
		Запрос.УстановитьПараметр("Подразделение", Основание.Подразделение ); 
		ДобавитьДокументДляФилиалаПоЯШТ = Истина; // только если это заказ филиала.... ищем и в Ярославле
	КонецЕсли;
	
 	НачДата = НачалоДня(Основание.Дата); // заказы покупателя тем же днем, но раньше сезонного - тоже попадают
    КонДата = ТекущаяДата(); //+++ по текущую дату!!!
  
	Запрос.УстановитьПараметр("ДатаНач",НачДата); // с начала сезона
	Запрос.УстановитьПараметр("ДатаКон",КонДата); // до конца сезона
	Запрос.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()) );

	Запрос.УстановитьПараметр("Ссылка", Основание.Ссылка);

	РезультатПоЗаказу = Запрос.Выполнить();
	Если РезультатПоЗаказу.Пустой() и НЕ ДобавитьДокументДляФилиалаПоЯШТ Тогда  //+++ 16.02.2018 --- для Филиала - надо дальше!
		продолжить; // ДАЛЬШЕ!
	иначе
		ТекТабТовары=РезультатПоЗаказу.Выгрузить();
	КонецЕсли;
  
	//Есть что заказать...
	ЕстьТовары = ЛОЖЬ;
	Если НЕ РезультатПоЗаказу.Пустой() тогда
		
		ЭтотОбъектЗакПок = документы.ЗаказПокупателя.СоздатьДокумент();  // создаём новый документ... каждый раз!
	  
		ДобавитьДокументДляФилиалаПоЯШТ = ЛОЖЬ; // 10.08.2015 - только для филиальных заказов - ищем ещё и в Ярославле... вкл. ниже!
		
		// Заполнение шапки -------------------------------------
			ЗаполнитьШапкуДокумента(ЭтотОбъектЗакПок, глТекущийПользователь1, мВалютаРегламентированногоУчета1, "Продажа");
			ЭтотОбъектЗакПок.АдресДоставки    = Основание.АдресДоставки;
			ЭтотОбъектЗакПок.ВалютаДокумента  = Основание.ВалютаДокумента;
			//ВремяНапоминания = Основание.ВремяНапоминания;
			ЭтотОбъектЗакПок.Контрагент         = Основание.Контрагент;
			Если ЗначениеЗаполнено(Основание.Контрагент.Грузополучатель) Тогда
	         ЭтотОбъектЗакПок.Грузополучатель = Основание.Контрагент.Грузополучатель;
	        КонецЕсли;
			ЭтотОбъектЗакПок.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
			ЭтотОбъектЗакПок.ТипЗаказа = 1; //+++ 21.10.2014
			ЭтотОбъектЗакПок.ДокументОснование = Основание;
			ЭтотОбъектЗакПок.Комментарий       = "#АвтоКомплектация по Cезонному заказу покупателя №"+строка(Основание.Номер)+" от "+Формат(Основание.Дата,"ДЛФ=D")+" # 
			|" +СокрЛП(Лев(Основание.Комментарий,100))+?(Основание.СучетомАналогов,"С учетом аналогов","");
			Если Основание.ДоговорКонтрагента.Пустая() Тогда // Если нет договора в сезонном заказе
				ЭтотОбъектЗакПок.ДоговорКонтрагента = найтиДоговорФакторингаПоОтветственному(Основание); // Если пустой - ищет договор
			КонецЕсли;
			
	    	Если ЭтотОбъектЗакПок.ДоговорКонтрагента.пустая() Тогда
				Продолжить; // без договора - ничего не делаем!
			КонецЕсли;
			ЭтотОбъектЗакПок.Ответственный = ЭтотОбъектЗакПок.ДоговорКонтрагента.ОтветственноеЛицо; // Менеджер  - он же и ответственный
			
			ЭтотОбъектЗакПок.Дата = ТекущаяДата(); //момент создания!
			// дата отгрузки = текущий день до 15-00, после этого - следующий
			ЭтотОбъектЗакПок.ДатаОтгрузки     = ?(ТекущаяДата() - НачалоДня( ТекущаяДата() )<15*3600, НачалоДня( ТекущаяДата() ), НачалоДня( ТекущаяДата() )+86400);
			
			днейДоОплаты = 0;   //+++ 02.09.2014 чтобы не пересчитывалось! 
	    	ЭтотОбъектЗакПок.ЧислоДнейСМоментаОтгрузки = ?(Основание.ДоговорКонтрагента.пустая(), днейДоОплаты, 
				?(Основание.ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности, Основание.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности, 
				                              днейДоОплаты));
			ЭтотОбъектЗакПок.ДатаОплаты       = ЭтотОбъектЗакПок.ДатаОтгрузки + ЭтотОбъектЗакПок.ЧислоДнейСМоментаОтгрузки*86400; 
			
			ЭтотОбъектЗакПок.ИспользоватьПлановуюСебестоимость = Основание.ИспользоватьПлановуюСебестоимость;
			//ИтогПлановаяСебестоимость       = Основание.ИтогПлановаяСебестоимость;
			ЭтотОбъектЗакПок.КратностьВзаиморасчетов           = Основание.КратностьВзаиморасчетов;
				ЭтотОбъектЗакПок.КонтактноеЛицо     = Основание.КонтактноеЛицо;
			ЭтотОбъектЗакПок.КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
			
			ЭтотОбъектЗакПок.Организация        = Основание.Организация;
			ЭтотОбъектЗакПок.Ответственный      = глТекущийПользователь1;
			ЭтотОбъектЗакПок.Склад              = Основание.Склад;
			ЭтотОбъектЗакПок.СтруктурнаяЕдиница = Основание.СтруктурнаяЕдиница;
			//СуммаДокумента     = Основание.СуммаДокумента;
			ЭтотОбъектЗакПок.ТипЦен             = Основание.ТипЦен;
			Если ЭтотОбъектЗакПок.ТипЦен  = справочники.ТипыЦенНоменклатуры.ПустаяСсылка() Тогда  //+++ 30.07.2014
				ЭтотОбъектЗакПок.ТипЦен   =	справочники.ТипыЦенНоменклатуры.найтиПоКоду("00006");
			КонецЕсли;	
			
			ЭтотОбъектЗакПок.УчитыватьНДС       = Основание.УчитыватьНДС;
	        ЭтотОбъектЗакПок.СуммаВключаетНДС   = Основание.СуммаВключаетНДС;
		
			// Подразделение Филиала!
			Если (Основание.Подразделение<>ПодразделениеЯШТ и НЕ Основание.Подразделение.пустая())  Тогда
				ЭтотОбъектЗакПок.Транзит = истина;
				ЭтотОбъектЗакПок.Подразделение = Основание.Подразделение;
			иначе
				ЭтотОбъектЗакПок.Транзит 	   = ЛОЖЬ; 
				ЭтотОбъектЗакПок.Подразделение = ПодразделениеЯШТ;
			КонецЕсли;	
			
			ЗаказыватьАналоги = Основание.АвтокомплектацияСУчетомАналогов;
			ЭтотОбъектЗакПок.Резерв3 = Основание.Резерв3; // 29.02.2016

		//+++( 16.02.2018 - ПодразделениеЯШТ>>ЭтотОбъектЗакПок.Подразделение
		Если Основание.СучетомАналогов Тогда
		ЕстьТовары = Автокомлектация_ЗаполнитьТабЧастьАналоги(ТекТабТовары,ЭтотОбъектЗакПок,ЭтотОбъектЗакПок.Подразделение,ЗаказыватьАналоги,Основание.ПоШтамповке);
		иначе	
		ЕстьТовары = Автокомлектация_ЗаполнитьТабЧасть(ТекТабТовары,ЭтотОбъектЗакПок,ЭтотОбъектЗакПок.Подразделение,Основание.ПоШтамповке);
		КонецЕсли;
		//+++)
		
	КонецЕсли; // конец заказа -----------------------------

	Если ЕстьТовары Тогда //+++ Запись заказа
		 Автокомплектация_ЗаписатьЗаказ(ЭтотОбъектЗакПок, Основание);	
	Иначе 
		#Если Клиент Тогда
		сообщить("  На основании: "+строка(основание)+" - Создание Заказа покупателя - НЕ требуется в подразделении "+строка(ЭтотОбъектЗакПок.Подразделение)+"!");	
		#КонецЕсли	
	КонецЕсли;

	//------------------------------2-ой заказ---------------------
	/// для филиала добавим заказ по остаткам Ярославля
	// {  10.08.2015  Алексеева А.
	Если ДобавитьДокументДляФилиалаПоЯШТ Тогда
		//тот же Главный запрос!
		Запрос.УстановитьПараметр("Транзит",ЛОЖЬ); 
		Запрос.УстановитьПараметр("Подразделение",ПодразделениеЯШТ); 
		РезультатПоЗаказу=Запрос.Выполнить();
		ТекТабТоварыЕще = РезультатПоЗаказу.Выгрузить();
		
		//Есть что заказать... (Копия  выше)
		Если НЕ РезультатПоЗаказу.Пустой() тогда
			
			ЭтотОбъектЗакПок = документы.ЗаказПокупателя.СоздатьДокумент();  // создаём новый документ... каждый раз!
		  
			ДобавитьДокументДляФилиалаПоЯШТ = ЛОЖЬ; // 10.08.2015 - только для филиальных заказов - ищем ещё и в Ярославле... вкл. ниже!
			
			// Заполнение шапки -------------------------------------
				ЗаполнитьШапкуДокумента(ЭтотОбъектЗакПок, глТекущийПользователь1, мВалютаРегламентированногоУчета1, "Продажа");
				ЭтотОбъектЗакПок.АдресДоставки    = Основание.АдресДоставки;
				ЭтотОбъектЗакПок.ВалютаДокумента  = Основание.ВалютаДокумента;
				//ВремяНапоминания = Основание.ВремяНапоминания;
				ЭтотОбъектЗакПок.Контрагент         = Основание.Контрагент;
				Если ЗначениеЗаполнено(Основание.Контрагент.Грузополучатель) Тогда
		         ЭтотОбъектЗакПок.Грузополучатель = Основание.Контрагент.Грузополучатель;
		        КонецЕсли;
				ЭтотОбъектЗакПок.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
				ЭтотОбъектЗакПок.ТипЗаказа = 1; //+++ 21.10.2014
				ЭтотОбъектЗакПок.ДокументОснование = Основание;
				ЭтотОбъектЗакПок.Комментарий       = "#АвтоКомплектация по Cезонному заказу покупателя №"+строка(Основание.Номер)+" от "+Формат(Основание.Дата,"ДЛФ=D")+" # 
				|" +СокрЛП(Лев(Основание.Комментарий,100))+?(Основание.СучетомАналогов,"С учетом аналогов","");
				Если Основание.ДоговорКонтрагента.Пустая() Тогда // Если нет договора в сезонном заказе
					ЭтотОбъектЗакПок.ДоговорКонтрагента = найтиДоговорФакторингаПоОтветственному(Основание); // Если пустой - ищет договор
				КонецЕсли;
				
		    	Если ЭтотОбъектЗакПок.ДоговорКонтрагента.пустая() Тогда
					Продолжить; // без договора - ничего не делаем!
				КонецЕсли;
				ЭтотОбъектЗакПок.Ответственный = ЭтотОбъектЗакПок.ДоговорКонтрагента.ОтветственноеЛицо; // Менеджер  - он же и ответственный
				
				ЭтотОбъектЗакПок.Дата = ТекущаяДата(); //момент создания!
				// дата отгрузки = текущий день до 15-00, после этого - следующий
				ЭтотОбъектЗакПок.ДатаОтгрузки     = ?(ТекущаяДата() - НачалоДня( ТекущаяДата() )<15*3600, НачалоДня( ТекущаяДата() ), НачалоДня( ТекущаяДата() )+86400);
				
				днейДоОплаты = 0;   //+++ 02.09.2014 чтобы не пересчитывалось! 
		    	ЭтотОбъектЗакПок.ЧислоДнейСМоментаОтгрузки = ?(Основание.ДоговорКонтрагента.пустая(), днейДоОплаты, 
					?(Основание.ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности, Основание.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности, 
					                              днейДоОплаты));
				ЭтотОбъектЗакПок.ДатаОплаты       = ЭтотОбъектЗакПок.ДатаОтгрузки + ЭтотОбъектЗакПок.ЧислоДнейСМоментаОтгрузки*86400; 
				
				ЭтотОбъектЗакПок.ИспользоватьПлановуюСебестоимость = Основание.ИспользоватьПлановуюСебестоимость;
				//ИтогПлановаяСебестоимость       = Основание.ИтогПлановаяСебестоимость;
				ЭтотОбъектЗакПок.КратностьВзаиморасчетов           = Основание.КратностьВзаиморасчетов;
					ЭтотОбъектЗакПок.КонтактноеЛицо     = Основание.КонтактноеЛицо;
				ЭтотОбъектЗакПок.КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
				
				ЭтотОбъектЗакПок.Организация        = Основание.Организация;
				ЭтотОбъектЗакПок.Ответственный      = глТекущийПользователь1;
				ЭтотОбъектЗакПок.Склад              = Основание.Склад;
				ЭтотОбъектЗакПок.СтруктурнаяЕдиница = Основание.СтруктурнаяЕдиница;
				//СуммаДокумента     = Основание.СуммаДокумента;
				ЭтотОбъектЗакПок.ТипЦен             = Основание.ТипЦен;
				Если ЭтотОбъектЗакПок.ТипЦен  = справочники.ТипыЦенНоменклатуры.ПустаяСсылка() Тогда  //+++ 30.07.2014
					ЭтотОбъектЗакПок.ТипЦен   =	справочники.ТипыЦенНоменклатуры.найтиПоКоду("00006");
				КонецЕсли;	
				
				ЭтотОбъектЗакПок.УчитыватьНДС       = Основание.УчитыватьНДС;
		        ЭтотОбъектЗакПок.СуммаВключаетНДС   = Основание.СуммаВключаетНДС;
			
				// !!! ТУТ Подразделение ЯРОСЛАВЛЯ!!!!
				//Если (Основание.Подразделение<>ПодразделениеЯШТ и НЕ Основание.Подразделение.пустая())  Тогда
				//	ЭтотОбъектЗакПок.Транзит = истина;
				//	ЭтотОбъектЗакПок.Подразделение = Основание.Подразделение;
				//иначе
					ЭтотОбъектЗакПок.Транзит 	   = ЛОЖЬ; 
					ЭтотОбъектЗакПок.Подразделение = ПодразделениеЯШТ;
				//КонецЕсли;	
				
				ЗаказыватьАналоги = Основание.АвтокомплектацияСУчетомАналогов;
				ЭтотОбъектЗакПок.Резерв3 = Основание.Резерв3; // 29.02.2016

		КонецЕсли; // конец заказа -----------------------------
		 	
		//Если ЭтотОбъектЗакПок.ЭтоНовый() Тогда  ///Если заказ по подразделению филиала не был записан, перезаполним по остаткам Ярославля
		ЭтотОбъектЗакПок.ВводитьТолькоПеремещение     = Истина;   // Если будут перемещать...
		
		ЭтотОбъектЗакПок.ОтгрузкаСПодразделенияСклада = Истина; // для перемещения через 293 обработку
		ЭтотОбъектЗакПок.Склад = основание.Подразделение.Склад;
		
		Если основание.ДоговорКонтрагента.Пустая() Тогда
			ЭтотОбъектЗакПок.ДоговорКонтрагента =основание.Контрагент.ОсновнойДоговорКонтрагента;
			ЭтотОбъектЗакПок.Ответственный = ЭтотОбъектЗакПок.ДоговорКонтрагента.ОтветственноеЛицо; // Менеджер  - он же и ответственный
		Иначе//фикс.договор
			ЭтотОбъектЗакПок.ДоговорКонтрагента =основание.ДоговорКонтрагента;
		КонецЕсли;
		
		ЭтотОбъектЗакПок.Транзит = Ложь;
		ЭтотОбъектЗакПок.Подразделение = ПодразделениеЯШТ;
		
		ЭтотОбъектЗакПок.Товары.Очистить();
		Если Основание.СучетомАналогов Тогда
		ЕстьТовары = Автокомлектация_ЗаполнитьТабЧастьАналоги(ТекТабТоварыЕще,ЭтотОбъектЗакПок,ПодразделениеЯШТ,заказыватьАналоги,Основание.ПоШтамповке);
		иначе	
		ЕстьТовары = Автокомлектация_ЗаполнитьТабЧасть(ТекТабТоварыЕще,ЭтотОбъектЗакПок,ПодразделениеЯШТ,Основание.ПоШтамповке);
		КонецЕсли;

		Если ЕстьТовары Тогда
			Автокомплектация_ЗаписатьЗаказ(ЭтотОбъектЗакПок, основание);
		Иначе 
			#Если Клиент Тогда
				сообщить("  На основании: "+строка(основание)+" - Создание Заказа покупателя в Ярославле - НЕ требуется!");	
			#КонецЕсли	
		КонецЕсли;
	КонецЕсли;	
	// }

КонецЦикла; // Конец главного цикла по Сезонным заказам  ==============================

	#Если Клиент Тогда
		сообщить(строка(ТекущаяДата())+" - Процедура АвтоКомплектации завершена.");
	#КонецЕсли	

КонецПроцедуры//АвтоКомплектацияЗаказовПоСезонным()


//+++ 06-11.04.2018 --- основная функция по Задаче № 40782 ----
процедура ДележкаДисковПоНаправлениямПродаж(масVIPКонтр=неопределено) Экспорт 
	
	ТаблЕсть = ПолучитьТаблЕстьПоНаправлениямПродаж();
	Если ТаблЕсть.Количество()=0 тогда
		возврат;
	КонецЕсли;	
	
	масVIPКонтр = ?(масVIPКонтр=неопределено, новый Массив, масVIPКонтр);
	ТаблНадо = ПолучитьТаблНадоПоНаправлениямПродаж(масVIPКонтр);
	Если ТаблНадо.Количество()=0 тогда
		возврат;
	КонецЕсли;	
	
	ВыборкаЗак  = ПолучитьРезультирующуюТаблицуЗаказовПоНаправлениямПродаж(ТаблЕсть, ТаблНадо); //не готово!
	Если ВыборкаЗак.Количество()=0 тогда
		возврат;
	КонецЕсли;	
	
	СоздатьЗаказыПокупателейПоДискамПоНаправлениямПродаж(ВыборкаЗак);
	
КонецПроцедуры	

//==============вспомогнательные функции для Дележки Дисков по напр.продаж===================================

//возвращает таблицу с полями:   НаправлениеПродаж, Номенклатура,
//
//ДатаСезЗаказа = порядок,
//СезонныйЗаказ, Контрагент, ДоговорКонтрагента, - из Сезонного заказа или из осн.договора контрагента
//
//Надо, Цена
//
функция ПолучитьТаблНадоПоНаправлениямПродаж(масVIPКонтр)
запрос = новый запрос;
запрос.Текст = "
   //+++ 09.08.2018
					|ВЫБРАТЬ
					|	НоменклатураИмпорт.Номенклатура
					|Поместить ВТ_СерыйСписок
					|ИЗ
					|	РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт
					|ГДЕ
					|	НоменклатураИмпорт.ЧерныйЛист = ЛОЖЬ
					|;
					|////////////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
               |	ВЫБОР
               |		КОГДА ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
               |			ТОГДА ЗаказыПокупателейСезонныеОстатки.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж
               |		ИНАЧЕ ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж
               |	КОНЕЦ КАК НаправлениеПродаж,
               |	ЗаказыПокупателейСезонныеОстатки.Контрагент,
               |	ВЫБОР
               |		КОГДА ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
               |			ТОГДА ЗаказыПокупателейСезонныеОстатки.Контрагент.ОсновнойДоговорКонтрагента
               |		ИНАЧЕ ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный.ДоговорКонтрагента
               |	КОНЕЦ КАК ДоговорКонтрагента,
               |	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный КАК СезонныйЗаказ,
               |	ЗаказыПокупателейСезонныеОстатки.Номенклатура,
			   |	(ВЫРАЗИТЬ(ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток / 4 - 0.5 КАК ЧИСЛО(10, 0))) * 4 КАК Надо,
               |	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный.Дата КАК ДатаСезЗаказа,
               |	ЗаказПокупателяСезонныйТовары.Цена
               |ИЗ
               |	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(, 
               |			Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.диски)
			   |			И Номенклатура.НоменклатурнаяГруппа = &Штамп
			   //-------------исключаем VIP клиентов на которые и так уже "упало" нужное количество---------------
			   |			И НЕ Контрагент в (&масVIPКонтр)
			   
			   //+++( 09.08.2018 - разрешен серый список
			   |			и (Контрагент.РазрешитьГрузитьТоварыИзСтопЛиста
			   //иначе "вырезаем" товары серого списка из "надо"
			   |				или (Контрагент.РазрешитьГрузитьТоварыИзСтопЛиста = ЛОЖЬ
			   |					и не Номенклатура в (выбрать вт.Номенклатура из ВТ_СерыйСписок как ВТ) 
			   |			   )    )
			   //+++)
               |			И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
               |				И ЗаказПокупателяСезонный.АвтоКомплектация = ИСТИНА
               |				И ЗаказПокупателяСезонный.ДатаДействияПо > &ТекДата) КАК ЗаказыПокупателейСезонныеОстатки
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателяСезонный.Товары КАК ЗаказПокупателяСезонныйТовары
               |		ПО ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный = ЗаказПокупателяСезонныйТовары.Ссылка
               |			И ЗаказыПокупателейСезонныеОстатки.Номенклатура = ЗаказПокупателяСезонныйТовары.Номенклатура
               |ГДЕ
               |	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток >= 4 
               |	И ВЫБОР
               |			КОГДА ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
               |				ТОГДА ЗаказыПокупателейСезонныеОстатки.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж
               |			ИНАЧЕ ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж
               |		КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.НаправленияПродаж.ПустаяСсылка)
               |
               |УПОРЯДОЧИТЬ ПО
               |	ДатаСезЗаказа
               |АВТОУПОРЯДОЧИВАНИЕ";
Запрос.УстановитьПараметр("ТекДата", ТекущаяДата() );
Запрос.УстановитьПараметр("Штамп", справочники.НоменклатурныеГруппы.НайтиПоКоду("00049") );
Запрос.УстановитьПараметр("масVIPКонтр", масVIPКонтр ); 

	таблНадо = запрос.Выполнить().Выгрузить();
 	возврат	таблНадо;
КонецФункции

//возвращает таблицу с полями: 
//НаправлениеПродаж, Номенклатура,
// СвободныйОстаток,  Процент 
//(для проверки Св.Остаток * Процент/100 = Доля кратная 4 шт.)
функция ПолучитьТаблЕстьПоНаправлениямПродаж()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НаправленияПродаж.Ссылка КАК НаправлениеПродаж,
	               |	НаправленияПродаж.ПроцентДележки КАК Процент
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	Справочник.НаправленияПродаж КАК НаправленияПродаж
	               |ГДЕ
	               |	НаправленияПродаж.ПроцентДележки > 0
				   |	и НаправленияПродаж.ЭтоГруппа = ЛОЖЬ
	               |;
				   |////////////////////////////////////////////////////////////////////////////////
	               
				   //+++ 09.08.2018
					|ВЫБРАТЬ
					|	НоменклатураИмпорт.Номенклатура
					|Поместить ВТ_ЧернСписок
					|ИЗ
					|	РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт
					|ГДЕ
					|	НоменклатураИмпорт.ЧерныйЛист = Истина
					|;
					
	               |////////////////////////////////////////////////////////////////////////////////
				   
	               |ВЫБРАТЬ
	               |	ВТ.НаправлениеПродаж КАК НаправлениеПродаж,
	               |	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	               |	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК СвободныйОстаток,
	               |	ВТ.Процент КАК Процент
	               |ИЗ
	               |	ВТ КАК ВТ,
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки( ,
	               |			Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.диски)
	               |			и Номенклатура.НоменклатурнаяГруппа = &Штамп
				 	   //+++ 09.08.2018
	         	   |			и НЕ Номенклатура в (выбрать вт.Номенклатура из ВТ_ЧернСписок как вт)
                   |				И Склад.ЗапретитьИспользование = ЛОЖЬ
	               |				И Склад.Транзитный = ЛОЖЬ
	               |				И Склад.ТипСклада <> ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ВПути) ) КАК ОстаткиТоваров
				   
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(,
	               |				Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.диски)
				   |				и Номенклатура.НоменклатурнаяГруппа = &Штамп
				  	   //+++ 09.08.2018
	         	   |			и НЕ Номенклатура в (выбрать вт.Номенклатура из ВТ_ЧернСписок как вт)
               
	               |					И ЗаказПокупателя.Проверен
	               |					И ЗаказПокупателя.Транзит = ЛОЖЬ) КАК ЗаказыПокупателей
				   
	               |		ПО ОстаткиТоваров.Номенклатура = ЗаказыПокупателей.Номенклатура
	               |ГДЕ
	               |	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0)>=4
				   |	и ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) >= 4
	                
	               |УПОРЯДОЧИТЬ ПО
	               |	Процент УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ;
				   |УНИЧТОЖИТЬ ВТ_ЧернСписок;
				   |";
		Запрос.УстановитьПараметр("Штамп", справочники.НоменклатурныеГруппы.НайтиПоКоду("00049") );
		результат = Запрос.Выполнить();
		ТаблЕсть = результат.Выгрузить();		
	возврат	ТаблЕсть;
КонецФункции

//---------------результирующая таблица с нормализацией %%----------------------
// выдаёт выборку с 1 группировкой:
//
//--------1 группировка по Сезонным заказам-----------
//ДатаСезЗаказа,
//
//СезонныйЗаказ,
//Контрагент,
//ДоговорКонтрагента - УЖЕ заранее известен!
//
//-----------поля------------------------
//Номенклатура,
//ЕдиницаХраненияОстатков,
//
// Надо,
// Доля,
// СвободныйОстаток,
//
//НаправлениеПродаж, 
//Процент
//---------------------------------------
//находим по минимуму: Надо/Доля  Процент
// НОРМАЛИЗАЦИЯ что надо до 100%
//
//повторный пересчет минимума: Надо/Доля * НовПроцент
//Цена - прилепляется... по контрагенту и договору...
//
функция ПолучитьРезультирующуюТаблицуЗаказовПоНаправлениямПродаж(таблЕсть, таблНадо)
	
	Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	табНадо.НаправлениеПродаж,
	                |	табНадо.Номенклатура,
	                |	табНадо.ДатаСезЗаказа,
	                |	табНадо.СезонныйЗаказ,
	                |	табНадо.Контрагент,
	                |	табНадо.ДоговорКонтрагента,
	                |	табНадо.Надо,
					|	табНадо.Цена
	                |ПОМЕСТИТЬ ВТ_Надо
	                |ИЗ
	                |	&таблНадо КАК табНадо
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	табЕсть.НаправлениеПродаж,
	                |	табЕсть.Номенклатура,
	                |	табЕсть.СвободныйОстаток,
	                |	табЕсть.Процент
	                |ПОМЕСТИТЬ ВТ_Есть
	                |ИЗ
	                |	&таблЕсть КАК табЕсть
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	тНадо.НаправлениеПродаж КАК НаправлениеПродаж,
	                |	тНадо.Номенклатура КАК Номенклатура,
	                |	тНадо.ДатаСезЗаказа КАК ДатаСезЗаказа,
	                |	тНадо.СезонныйЗаказ,
	                |	тНадо.Контрагент,
	                |	тНадо.ДоговорКонтрагента,
	                |	тНадо.Надо КАК Надо,
					|	тНадо.Цена,

	                |	ЕСТЬNULL(тЕсть.СвободныйОстаток, 0) КАК СвободныйОстаток,
	                |	ЕСТЬNULL(тЕсть.Процент, 0) КАК Процент,
				//--------расчет идёт в цикле ниже------------------	
	            //  |	ВЫРАЗИТЬ(ЕСТЬNULL(тЕсть.СвободныйОстаток, 0) * ЕСТЬNULL(тЕсть.Процент, 0) / 100 КАК ЧИСЛО(10, 0)) 
				  | 0 КАК НадоИзДоли
	                |ИЗ
	                |	ВТ_Надо КАК тНадо
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Есть КАК тЕсть
	                |		ПО тНадо.НаправлениеПродаж = тЕсть.НаправлениеПродаж
	                |			И тНадо.Номенклатура = тЕсть.Номенклатура
	                |ГДЕ
	                |	ЕСТЬNULL(тЕсть.СвободныйОстаток, 0) > 0
	                |и 	ЕСТЬNULL(тЕсть.Процент, 0)  >0
					
	                |УПОРЯДОЧИТЬ ПО
	                |	НаправлениеПродаж,
	                |	Номенклатура,
	                |	ДатаСезЗаказа
	                |АВТОУПОРЯДОЧИВАНИЕ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |УНИЧТОЖИТЬ ВТ_Надо
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |УНИЧТОЖИТЬ ВТ_Есть";
	 
	 Запрос.УстановитьПараметр("таблЕсть", таблЕсть);
	 Запрос.УстановитьПараметр("таблНадо", таблНадо);
	 
	 Результат = Запрос.Выполнить();
	 табл1 = Результат.Выгрузить();
	 
	 //============= Нормировка по сумме процентов По каждому товару=============
	 таблПроц = табл1.Скопировать(,"НаправлениеПродаж, Номенклатура, Процент" );
	 таблПроц.свернуть("НаправлениеПродаж, Номенклатура, Процент");
	 таблПроц.Сортировать("Номенклатура, НаправлениеПродаж");
	 тов0 = неопределено;  напр0=неопределено; сумПроц=0;
	 соотв = новый Соответствие;
	 для каждого стр1 из таблПроц цикл
		 тов1 = стр1.Номенклатура; 
		 напр1 = стр1.НаправлениеПродаж;
		 Если тов0<>тов1 тогда
			 если тов0<>неопределено тогда  //пред.значение
				 соотв.Вставить(тов0, сумПроц);
			 КонецЕсли;	 
			 тов0=тов1;
			 напр0=напр1;
			 сумПроц = стр1.Процент;
		 иначе
			 Если напр0<>напр1 тогда
				 напр0=напр1;
		 	 	сумПроц = сумПроц + стр1.Процент;
			//одинаковые направления не суммируем	
			 КонецЕсли;	
		 КонецЕсли;	 
	 КонецЦикла;	 
	 Если тов0<>неопределено тогда
		 соотв.Вставить(тов0, сумПроц);
	 КонецЕсли;	 
	 
	 //========ГЛАВНЫЙ РАСЧЕТ в цикле!==================
	//===== Обрезание по НадоИзДоли не более того, что есть в Доле -- по каждому направлению и номенклатуре =================
	// основное поле: НадоИзДоли
	напр0 = неопределено; тов0 = Неопределено; СумНадоТов = 0;
	для каждого стр1 из табл1 цикл
		напр1 = стр1.НаправлениеПродаж; тов1 = стр1.Номенклатура;
		
		СумПроц = соотв.Получить(тов1); // до 100% по каждому товару 
		
		//Доля1 = стр1.Доля;
		//надо1 = стр1.НадоИзДоли; // ПЕРЕНОРМИРОВКА доли по процентам Надо из того что Есть!
		Доля1 = Цел( стр1.СвободныйОстаток * стр1.Процент/СумПроц /4)*4;
		надо1 = мин( стр1.Надо, Доля1); //ЕЩЁ раз!
		
		Если напр0<>напр1 тогда
			напр0=напр1;  тов0 = тов1; 
			СумНадоТов  = надо1; //1 товар
			стр1.НадоИзДоли = надо1;
			продолжить;
		КонецЕсли;
		Если тов0 <> тов1 тогда
			тов0 = тов1;      //2 товар
			СумНадоТов  = надо1; 
			стр1.НадоИзДоли = надо1;
			Продолжить;
		КонецЕсли;
		
		дельта = Доля1 - СумНадоТов;
		Если дельта>0 тогда //надо 8, дельта2=4 -> минимум
			стр1.НадоИзДоли = Цел( мин(Надо1, Дельта)/4 ) * 4;
			СумНадоТов = СумНадоТов + стр1.НадоИзДоли;
		иначе
			стр1.НадоИзДоли = 0;
		КонецЕсли;	
			
	КонецЦикла;
	
	//---------------------------------итоговый запрос с группировкой по сезоннику-----------------------------
	запрос2 = новый запрос;
	запрос2.Текст = "ВЫБРАТЬ
	                |	табНадо.Номенклатура,
	                |	табНадо.ДатаСезЗаказа КАК ДатаСезЗаказа,
	                |	табНадо.СезонныйЗаказ,
	                |	табНадо.Контрагент,
	                |	табНадо.ДоговорКонтрагента,
	                |	табНадо.Надо,
					|	табНадо.Цена,
					|	табНадо.НадоИзДоли
	                |ПОМЕСТИТЬ ВТ_Табл
	                |ИЗ
	                |	&Табл1 КАК табНадо
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	тНадо.Номенклатура КАК Номенклатура,
	                |	тНадо.ДатаСезЗаказа КАК ДатаСезЗаказа,
	                |	тНадо.СезонныйЗаказ КАК СезонныйЗаказ,
	                |	тНадо.Контрагент КАК Контрагент,
	                |	тНадо.ДоговорКонтрагента КАК ДоговорКонтрагента,
	                |	тНадо.Надо КАК Надо,
	                |	тНадо.Цена,
					|	тНадо.НадоИзДоли КАК НадоИзДоли
	                |ИЗ
	                |	ВТ_Табл КАК тНадо
	                |ГДЕ
	                |	тНадо.НадоИзДоли > 0
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ДатаСезЗаказа,
	                |	СезонныйЗаказ,
	                |	Номенклатура
	                |ИТОГИ
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
	                |	МАКСИМУМ(ДатаСезЗаказа),
	                |	МАКСИМУМ(Контрагент),
	                |	МАКСИМУМ(ДоговорКонтрагента),
	                |	СУММА(Надо),
	                |	СУММА(НадоИзДоли)
	                |ПО
	                |	СезонныйЗаказ
	                |АВТОУПОРЯДОЧИВАНИЕ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |УНИЧТОЖИТЬ ВТ_Табл";
запрос2.УстановитьПараметр("Табл1", Табл1);					
	  рез2 = Запрос2.Выполнить();
	  Выборка2 = рез2.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
	  
	возврат	Выборка2;
	
КонецФункции //ПолучитьРезультирующуюТаблицуЗаказовПоНаправлениямПродаж

//-------- Делаем заказы покупателей ---------------------
Процедура СоздатьЗаказыПокупателейПоДискамПоНаправлениямПродаж(ВыборкаЗак)
	N = ВыборкаЗак.Количество(); i=0;
	#Если Клиент тогда
		сообщить("Нужно сформировать "+строка(N)+" заказов.");
	#КонецЕсли	
пока ВыборкаЗак.Следующий() цикл
	i=i+1;	
	НовЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
	НовЗаказ.ТипЗаказа = 1; 
	
	НовЗаказ.Контрагент         = ВыборкаЗак.Контрагент;
	НовЗаказ.ДоговорКонтрагента = ВыборкаЗак.ДоговорКонтрагента;
	Если НовЗаказ.ДоговорКонтрагента.Владелец <> НовЗаказ.Контрагент Тогда
		НовЗаказ.ДоговорКонтрагента = найтиДоговорФакторингаПоОтветственному(НовЗаказ); // Какой-то левый договор!
	КонецЕсли;

 	Основание = ВыборкаЗак.СезонныйЗаказ;
	НовЗаказ.ДокументОснование  = Основание;
	НовЗаказ.Комментарий        = "#АвтоКомплектация по Cезонному заказу покупателя №"+строка(Основание.Номер)+" от "+Формат(Основание.Дата,"ДЛФ=D")+" # 
				|" +СокрЛП(Лев(Основание.Комментарий,100))+?(Основание.СучетомАналогов,"С учетот аналогов!","")+" (ДИСКИ)";
    	
	ВыборкаВ = ВыборкаЗак.выбрать();
	Пока ВыборкаВ.Следующий() Цикл
		Если ВыборкаВ.НадоИзДоли >0 Тогда
			
			новСтр = НовЗаказ.Товары.Добавить();
			
			новСтр.Номенклатура = ВыборкаВ.Номенклатура;
			НовСтр.Цена			= ВыборкаВ.Цена; //цена из Сезонника!
			
			новСтр.Количество = ВыборкаВ.НадоИзДоли;
			НовСтр.Коэффициент                = 1;
			НовСтр.ЕдиницаИзмерения           = новСтр.Номенклатура.ЕдиницаХраненияОстатков;
			//----------места НЕ заполняются нигде!------------------------
			//НовСтр.КоличествоМест             = новСтр.Количество;
			//НовСтр.КоэффициентМест			= 1;
			//НовСтр.ЕдиницаИзмеренияМест       = новСтр.Номенклатура.ЕдиницаХраненияОстатков;
			
			НовСтр.СтавкаНДС                  = Перечисления.СтавкиНДС.НДС18;
						
			НовСтр.Сумма                      = НовСтр.Цена*новСтр.Количество;  // может отличаться от цена * количество
			НовСтр.СуммаНДС                   = ?(Основание.УчитыватьНДС, Окр(НовСтр.Сумма*18/118, 2), 0); //до копеек
		КонецЕсли;	
	КонецЦикла;

	Если НовЗаказ.Товары.Итог("Количество")>0 Тогда
		//Заполним и запишем документ до конца
		
		глТекущийПользователь1 = Справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		// Заполнение шапки
		валюта = Основание.ВалютаДокумента;// Валюта сезонника!
		ЗаполнитьШапкуДокумента(НовЗаказ, глТекущийПользователь1, валюта, "Продажа");
		НовЗаказ.ВалютаДокумента  		 = валюта;
		НовЗаказ.КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		НовЗаказ.КурсВзаиморасчетов 	 = Основание.КурсВзаиморасчетов;
	
		НовЗаказ.Ответственный = НовЗаказ.ДоговорКонтрагента.ОтветственноеЛицо; // Менеджер  - он же и ответственный
		НовЗаказ.Дата = ТекущаяДата(); //момент создания!
		// дата отгрузки = текущий день до 15-00, после этого - следующий
		начДня =  НачалоДня( ТекущаяДата() );
		НовЗаказ.ДатаОтгрузки     = ?( (ТекущаяДата() - начДня)<15*3600, начДня, начДня+86400 );
		днейДоОплаты = 0;   //+++ 02.09.2014 чтобы не пересчитывалось! 
		НовЗаказ.ЧислоДнейСМоментаОтгрузки = ?(НовЗаказ.ДоговорКонтрагента.пустая(), днейДоОплаты, 
		?(НовЗаказ.ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности, НовЗаказ.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности, 
		днейДоОплаты));
		
		НовЗаказ.ДатаОплаты       = НовЗаказ.ДатаОтгрузки + НовЗаказ.ЧислоДнейСМоментаОтгрузки*86400; 
			
		НовЗаказ.Организация        = Справочники.Организации.НайтиПоКоду("00001");
		НовЗаказ.Ответственный      = глТекущийПользователь1;
		НовЗаказ.ТипЦен  		    =	справочники.ТипыЦенНоменклатуры.найтиПоКоду("00006");   //ручная
	 	
		НовЗаказ.УчитыватьНДС       = Основание.УчитыватьНДС; // из сезонника!
		НовЗаказ.СуммаВключаетНДС   = Истина;
		
		НовЗаказ.Транзит 	   = ЛОЖЬ; 
		НовЗаказ.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
		НовЗаказ.Проверен = Истина;
		
		Попытка
		НовЗаказ.Записать(РежимЗаписиДокумента.Проведение);
			#Если Клиент тогда
			Сообщить(строка(i)+") Сформирован "+строка(НовЗаказ), СтатусСообщения.Информация );
			#КонецЕсли	
		Исключение
//писать НЕ надо!		НовЗаказ.Записать(РежимЗаписиДокумента.Запись);
			#Если Клиент тогда
			Сообщить("ОШИБКА при формировании Заказа по Клиенту: "+строка(ВыборкаЗак.Контрагент)+" по Документу: "+строка(Основание)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			#КонецЕсли	
		КонецПопытки;
	КонецЕсли;
КонецЦикла;

	#Если Клиент тогда
	Сообщить(строка(ТекущаяДата())+" --- закончено формирование "+строка(i)+" заказов по штамп.дискам ---");
	#КонецЕсли	

КонецПроцедуры //СоздатьЗаказыПокупателейПоДискамПоНаправлениямПродаж

//===========================================================================================================





//10.08.2015 Алексеева А.
Функция Автокомлектация_ЗаполнитьТабЧасть(ТекТабТовары,ЭтотОбъектЗакПок,ПодразделениеЯШТ,ПоШтамповке=Ложь)
	
	//---------защита от дублей-------------------
табНом = ТекТабТовары.Скопировать();
табНом.Свернуть("Номенклатура");
списНом = новый СписокЗначений;
списНом.ЗагрузитьЗначения( ТекТабТовары.ВыгрузитьКолонку("Номенклатура") );

//----------------------определение цен-------------------
//+++ с 23.01.2014 по 22.12.2014 включительно - Ложь!  
//с 23.12.2014 - Истина - пересчет по текущим ценам (Горохов В. и Никитин И.Б. )
флПересчетаЦен = ИСТИНА;

Если флПересчетаЦен Тогда
	табЦен = ПолучитьЦеныДляКонтрагента(ЭтотОбъектЗакПок.Контрагент, списНом);
	Если ТипЗнч(табЦен)=тип("Строка") Тогда
		табЦен = ПолучитьЦеныДляКонтрагента_РегСв(ЭтотОбъектЗакПок.Контрагент, списНом);
	КонецЕсли;
КонецЕсли;

//+++ (02.04.2014 -------------------------------Прямые поставки от поставщика на Клиента-------------------------------------
табТоварыВПутиИПроизводстве = новый ТаблицаЗначений;

Если списНом.Количество()>0 Тогда
	
запрос1 = новый запрос;
запрос1.Текст = "ВЫБРАТЬ
                |	табНом.Номенклатура
                |ПОМЕСТИТЬ ВТ_табНом
                |ИЗ
                |	&табНом КАК табНом
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ЗаказыПокупателейСезонныйТовары.Номенклатура,
                |	ЕСТЬNULL(ОстаткиТоваровВПроизводстве.КоличествоОстаток, 0) КАК ВПроизводстве,
                |	ЕСТЬNULL(ОстаткиТоваровВПути.КоличествоОстаток, 0) КАК ВПути
                |ИЗ
                |	ВТ_табНом КАК ЗаказыПокупателейСезонныйТовары
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(,	Номенклатура В (&СписНом)
                |					И ЗаказПоставщикуСезонный.Грузополучатель = &Контрагент
				|					И естьNull(Подразделение.ВЭД,ЛОЖЬ) = ЛОЖЬ
				|					И ЗаказПоставщикуСезонный.ДатаДействияПо >= &ТекДата) КАК ОстаткиТоваровВПроизводстве
                |		ПО ЗаказыПокупателейСезонныйТовары.Номенклатура = ОстаткиТоваровВПроизводстве.Номенклатура
				|
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(  , Номенклатура В (&СписНом)
                |					И ЗаказПоставщику.Грузополучатель = &Контрагент И естьNull(Подразделение.ВЭД,ЛОЖЬ) = ЛОЖЬ) КАК ОстаткиТоваровВПути
                |		ПО ЗаказыПокупателейСезонныйТовары.Номенклатура = ОстаткиТоваровВПути.Номенклатура
                |ГДЕ
                |	(ЕСТЬNULL(ОстаткиТоваровВПроизводстве.КоличествоОстаток, 0) > 0
                |ИЛИ ЕСТЬNULL(ОстаткиТоваровВПути.КоличествоОстаток, 0) > 0)
				|";
 запрос1.УстановитьПараметр("СписНом",СписНом);
 запрос1.УстановитьПараметр("Контрагент",ЭтотОбъектЗакПок.Контрагент);
 запрос1.УстановитьПараметр("Транзит",ЛОЖЬ);
 запрос1.УстановитьПараметр("Подразделение",ПодразделениеЯШТ); 
 запрос1.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()) );
 запрос1.УстановитьПараметр("табНом", табНом); //+++
 
 табТоварыВПутиИПроизводстве = запрос1.Выполнить().Выгрузить();
 
КонецЕсли;
//+++)

i=0; N = ТекТабТовары.Количество();  ЕстьТовары=ЛОЖЬ;
	Пока  i<N Цикл
	ТекСтрокаТовары = ТекТабТовары[i];
   ОстатокНаСкладах = ТекСтрокаТовары.СвободныйОстаток; //всегда по свободным остаткам ( без ОТХ! )

//+++ 02.04.2014
КолПр = 0;
Если табТоварыВПутиИПроизводстве.Количество()>0 Тогда
	стрПр = табТоварыВПутиИПроизводстве.Найти( ТекСтрокаТовары.Номенклатура, "Номенклатура");
	Если стрПр <> Неопределено Тогда
		КолПр = ?(стрПр.ВПроизводстве<=0,0,стрПр.ВПроизводстве) + ?(стрПр.ВПути<=0,0,стрПр.ВПути);
		#Если Клиент Тогда
			Сообщить("Для товара: "+строка(ТекСтрокаТовары.номенклатура.Код)+") Сез.зак.покупателя: "+строка(ТекСтрокаТовары.ОсталосьЗаказать)
			+", доставка от поставщика: "+строка(КолПр)+", а на складах: "+строка(ОстатокНаСкладах), СтатусСообщения.Информация );
		#КонецЕсли	
	КонецЕсли;	
КонецЕсли;	
//+++)
		
		КоличествоОсталосьЗаказать = Макс( Мин (ТекСтрокаТовары.НужноЗаказать,ОстатокНаСкладах),0);
			
		Если (ТекСтрокаТовары.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Диски  и КоличествоОсталосьЗаказать>=4)
		 или (ТекСтрокаТовары.Номенклатура.ВидТовара <> перечисления.ВидыТоваров.Диски и КоличествоОсталосьЗаказать>=1)  //+++ 30.09.2014 для шин и прочего!
			Тогда 
			
	//23.01.2014 ДИСКИ - кратно 4м
	Если (ТекСтрокаТовары.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Диски) Тогда
		КоличествоОсталосьЗаказать = Цел(КоличествоОсталосьЗаказать/4) * 4;
	КонецЕсли;
	
	  ЕстьТовары = Истина;
	//    Если  ПоШтамповке или ТекСтрокаТовары.Номенклатура.НоменклатурнаяГруппа <> Справочники.НоменклатурныеГруппы.НайтиПоКоду("00049") Тогда //временно не берем штамповку
		НоваяСтрока = ЭтотОбъектЗакПок.Товары.Добавить();
		НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
		НоваяСтрока.Количество                 = КоличествоОсталосьЗаказать;
		НоваяСтрока.КоличествоМест             = КоличествоОсталосьЗаказать;
		НоваяСтрока.Коэффициент                = 1;
		НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.Номенклатура.ЕдиницаХраненияОстатков;
		НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.Номенклатура.ЕдиницаХраненияОстатков;
		
		////+++( цена из сезонного заказа >> по правилам
		//НоваяСтрока.Цена                  = ТекСтрокаТовары.Цена;
		Если флПересчетаЦен Тогда //+++ 23.01.2014
			стрЦен = табЦен.найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
			Если стрЦен=Неопределено Тогда
			//  НоваяСтрока.Цена = ТекСтрокаТовары.Цена; // из сезонного заказа тут не надо! 
				Если НоваяСтрока.Цена = 0 Тогда
				НоваяСтрока.Цена = 5555;
				ЭтотОбъектЗакПок.Комментарий = ЭтотОбъектЗакПок.Комментарий+ " "+строка(i)+" строка: цена товара "+строка(ТекСтрокаТовары.Номенклатура.Код)+" - неопределена и автоматически установлена = 5 555р.!
				|";
				КонецЕсли;
			иначе	
				НоваяСтрока.Цена = стрЦен.МинимальнаяЦена;
			КонецЕсли;	
		Иначе	
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена; // из сезонного заказа?
		КонецЕсли;	
		//+++)
		
		НоваяСтрока.СтавкаНДС                  = Перечисления.СтавкиНДС.НДС18;
		НоваяСтрока.Сумма                      = НоваяСтрока.Цена*КоличествоОсталосьЗаказать;  // может отличаться от цена * количество
		НоваяСтрока.СуммаНДС                   = Окр(НоваяСтрока.Сумма*18/118, 2); //до копеек
	//	 КонецЕсли;//штамповка
		КонецЕсли;	
	i=i+1;
	КонецЦикла; // Конец товаров
		Если ЭтотОбъектЗакПок.Товары.Количество()=0 Тогда
		естьТовары = Ложь;
	КонецЕсли;	
		
возврат естьТовары;	
Конецфункции	

//18.01.2016 Алексеева А.
Функция Автокомлектация_ЗаполнитьТабЧастьАналоги(ТекТабТовары,ЭтотОбъектЗакПок,ПодразделениеЯШТ,ЗаказыватьАналоги,ПоШтамповке=Ложь)
	
	//---------защита от дублей-------------------
таб = ТекТабТовары.Скопировать();
таб.Свернуть("Номенклатура");
табНом = ТекТабТовары.Скопировать();
табНом.Свернуть("Аналог");
ИзменяемаяКолонка=табНом.Колонки.Найти("Аналог");
ИзменяемаяКолонка.Имя="Номенклатура";
списНом = новый СписокЗначений;
списНом.ЗагрузитьЗначения( ТекТабТовары.ВыгрузитьКолонку("Аналог") );

//----------------------определение цен-------------------
//+++ с 23.01.2014 по 22.12.2014 включительно - Ложь!  
//с 23.12.2014 - Истина - пересчет по текущим ценам (Горохов В. и Никитин И.Б. )
флПересчетаЦен = ИСТИНА;

Если флПересчетаЦен Тогда
	табЦен = ПолучитьЦеныДляКонтрагента(ЭтотОбъектЗакПок.Контрагент, списНом);
	Если ТипЗнч(табЦен)=тип("Строка") Тогда
		табЦен = ПолучитьЦеныДляКонтрагента_РегСв(ЭтотОбъектЗакПок.Контрагент, списНом);
	КонецЕсли;
КонецЕсли;

//+++ (02.04.2014 -------------------------------Прямые поставки от поставщика на Клиента-------------------------------------
табТоварыВПутиИПроизводстве = новый ТаблицаЗначений;

Если списНом.Количество()>0 Тогда
	
запрос1 = новый запрос;
запрос1.Текст = "ВЫБРАТЬ
                |	табНом.Номенклатура
                |ПОМЕСТИТЬ ВТ_табНом
                |ИЗ
                |	&табНом КАК табНом
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ЗаказыПокупателейСезонныйТовары.Номенклатура,
                |	ЕСТЬNULL(ОстаткиТоваровВПроизводстве.КоличествоОстаток, 0) КАК ВПроизводстве,
                |	ЕСТЬNULL(ОстаткиТоваровВПути.КоличествоОстаток, 0) КАК ВПути
                |ИЗ
                |	ВТ_табНом КАК ЗаказыПокупателейСезонныйТовары
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(,	Номенклатура В (&СписНом)
                |					И ЗаказПоставщикуСезонный.Грузополучатель = &Контрагент
				|                   И естьNull(Подразделение.ВЭД,ЛОЖЬ) = ЛОЖЬ
                |					И ЗаказПоставщикуСезонный.ДатаДействияПо >= &ТекДата) КАК ОстаткиТоваровВПроизводстве
                |		ПО ЗаказыПокупателейСезонныйТовары.Номенклатура = ОстаткиТоваровВПроизводстве.Номенклатура
				|
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(  , Номенклатура В (&СписНом)
                |					И ЗаказПоставщику.Грузополучатель = &Контрагент И естьNull(Подразделение.ВЭД,ЛОЖЬ) = ЛОЖЬ) КАК ОстаткиТоваровВПути
                |		ПО ЗаказыПокупателейСезонныйТовары.Номенклатура = ОстаткиТоваровВПути.Номенклатура
                |ГДЕ
                |	(ЕСТЬNULL(ОстаткиТоваровВПроизводстве.КоличествоОстаток, 0) > 0
                |ИЛИ ЕСТЬNULL(ОстаткиТоваровВПути.КоличествоОстаток, 0) > 0)
				|";
 запрос1.УстановитьПараметр("СписНом",СписНом);
 запрос1.УстановитьПараметр("Контрагент",ЭтотОбъектЗакПок.Контрагент);
 запрос1.УстановитьПараметр("Транзит",ЛОЖЬ);
 запрос1.УстановитьПараметр("Подразделение",ПодразделениеЯШТ); 
 запрос1.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()) );
 запрос1.УстановитьПараметр("табНом", табНом); //+++
 
 табТоварыВПутиИПроизводстве = запрос1.Выполнить().Выгрузить();
 
КонецЕсли;
//+++)

i=0; N = Таб.Количество();  ЕстьТовары=ЛОЖЬ;
Пока  i<N Цикл
	Отбор = Новый Структура("Номенклатура",Таб[i].Номенклатура);
	найденныеСтроки = ТекТабТовары.НайтиСтроки(Отбор); 	
	СтрокаНоменклатуры = НайденныеСтроки[0];
	сч =1 ;
	ОтгруженоАналогов = 0;
	ЗаказаноАналогов = 0;
	КолПрАналогов = 0;

	осталосьЗаказатьНоменклатуры = СтрокаНоменклатуры.НужноЗаказать;
	ТекСтрокаТовары = СтрокаНоменклатуры;
	
	//+++ 02.04.2014
	КолПр = 0;
	Если табТоварыВПутиИПроизводстве.Количество()>0 Тогда
		стрПр = табТоварыВПутиИПроизводстве.Найти( ТекСтрокаТовары.Номенклатура, "Номенклатура");
		Если стрПр <> Неопределено Тогда
			КолПр = ?(стрПр.ВПроизводстве<=0,0,стрПр.ВПроизводстве) + ?(стрПр.ВПути<=0,0,стрПр.ВПути);
		КонецЕсли;	
	КонецЕсли;	
	//+++)
	ОсталосьЗаказать =  ОсталосьЗаказатьНоменклатуры;
	Для каждого стр из НайденныеСтроки Цикл
		ОстатокНаСкладах = стр.СвободныйОстаток; //всегда по свободным остаткам ( без ОТХ! )
		Если Стр = НайденныеСтроки[0] Тогда
			КоличествоОсталосьЗаказать = Макс( Мин (ОсталосьЗаказать - КолПр,ОстатокНаСкладах),0);
		иначе
			Если Не ЗаказыватьАналоги Тогда
			прервать;	
			КонецЕсли;	
			КоличествоОсталосьЗаказать = Макс( Мин (ОсталосьЗаказать,ОстатокНаСкладах),0);
		КонецЕсли;
		Если (Стр.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Диски  и КоличествоОсталосьЗаказать>=4)
			или (Стр.Номенклатура.ВидТовара <> перечисления.ВидыТоваров.Диски и КоличествоОсталосьЗаказать>=1)  //+++ 30.09.2014 для шин и прочего!
			Тогда 
			
			//23.01.2014 ДИСКИ - кратно 4м
			Если (Стр.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Диски) Тогда
				КоличествоОсталосьЗаказать = Цел(КоличествоОсталосьЗаказать/4) * 4;
			КонецЕсли;
			
			ЕстьТовары = Истина;
		//	Если  ПоШтамповке или ТекСтрокаТовары.Номенклатура.НоменклатурнаяГруппа <> Справочники.НоменклатурныеГруппы.НайтиПоКоду("00049") Тогда //временно не берем штамповку

			НоваяСтрока = ЭтотОбъектЗакПок.Товары.Добавить();
			НоваяСтрока.Номенклатура               = стр.аналог;
			НоваяСтрока.Количество                 = КоличествоОсталосьЗаказать;
			НоваяСтрока.КоличествоМест             = КоличествоОсталосьЗаказать;
			НоваяСтрока.Коэффициент                = 1;
			НоваяСтрока.ЕдиницаИзмерения           = Стр.Аналог.ЕдиницаХраненияОстатков;
			НоваяСтрока.ЕдиницаИзмеренияМест       = Стр.Аналог.ЕдиницаХраненияОстатков;
			
			////+++( цена из сезонного заказа >> по правилам
			//НоваяСтрока.Цена                  = ТекСтрокаТовары.Цена;
			Если флПересчетаЦен Тогда //+++ 23.01.2014
				стрЦен = табЦен.найти(НоваяСтрока.Номенклатура, "Номенклатура");
				Если стрЦен=Неопределено Тогда
					//  НоваяСтрока.Цена = ТекСтрокаТовары.Цена; // из сезонного заказа тут не надо! 
					Если НоваяСтрока.Цена = 0 Тогда
						НоваяСтрока.Цена = 5555;
						ЭтотОбъектЗакПок.Комментарий = ЭтотОбъектЗакПок.Комментарий+ " "+строка(i)+" строка: цена товара "+строка(ТекСтрокаТовары.Номенклатура.Код)+" - неопределена и автоматически установлена = 5 555р.!
						|";
					КонецЕсли;
				иначе	
					НоваяСтрока.Цена = стрЦен.МинимальнаяЦена;
				КонецЕсли;	
			Иначе	
				НоваяСтрока.Цена = Стр.Цена; // из сезонного заказа?
			КонецЕсли;	
			//+++)
			
			НоваяСтрока.СтавкаНДС                  = Перечисления.СтавкиНДС.НДС18;
			НоваяСтрока.Сумма                      = НоваяСтрока.Цена*КоличествоОсталосьЗаказать;  // может отличаться от цена * количество
			НоваяСтрока.СуммаНДС                   = Окр(НоваяСтрока.Сумма*18/118, 2); //до копеек
						осталосьЗаказать = ОсталосьЗаказать - КоличествоОсталосьЗаказать;
		//	КонецЕсли; //штамповка
			
		КонецЕсли;	
	КонецЦикла;
	i=i+1;
КонецЦикла; // Конец товаров
  	Если ЭтотОбъектЗакПок.Товары.Количество()=0 Тогда
		естьТовары = Ложь;
	КонецЕсли;	

возврат естьТовары;	
Конецфункции	
//10.08.2015 Алексеева А.
Процедура Автокомплектация_ЗаписатьЗаказ(ЭтотОбъектЗакПок,основание)
	//+++ Запись заказа
		
		    ЭтотОбъектЗакПок.Номер = "";//+++ 15.01.2014 при записи - номер присвоится с префиксом подразделения
		  //+++	ЭтотОбъектЗакПок.УстановитьНовыйНомер("ТК"); //всегда ЯШТ!
			ЭтотОбъектЗакПок.СуммаДокумента    		   =  ЭтотОбъектЗакПок.Товары.Итог("Сумма") + ?(ЭтотОбъектЗакПок.УчитыватьНДС, ?(ЭтотОбъектЗакПок.СуммаВключаетНДС, ЭтотОбъектЗакПок.Товары.Итог("СуммаНДС"),0), 0);
			ЭтотОбъектЗакПок.ИтогПлановаяСебестоимость =  ЭтотОбъектЗакПок.Товары.Итог("ПлановаяСебестоимость");
			
			// проДеливаем - ошибка вылезет в статусе регл.задания 
			ЭтотОбъектЗакПок.Проверен = истина; 
			
		попытка //+++ 07.05.2014 - попытаемся провести
			ЭтотОбъектЗакПок.Записать(РежимЗаписиДокумента.Проведение);
			
			#Если Клиент Тогда
			сообщить("+++ Создан документ: "+строка( ЭтотОбъектЗакПок ) +" на основании: "+строка(основание), СтатусСообщения.Информация);
			#КонецЕсли		
			
		исключение // просто записывать нельзя, Тогда куча дублей будет!
			#Если Клиент Тогда
			Сообщить("--- При проведении 'Заказа покупателя' на основании: "+строка(основание)+" - возникла Ошибка:
						  |          "+ОписаниеОшибки()); //ошибка
			#КонецЕсли		
		КонецПопытки;//+++ в попытке)		
		
		
КонецПроцедуры

//для АвтоКомплектации по сезонным заказам	
//+++ 05.09.2014
функция найтиДоговорФакторингаПоОтветственному(осн) Экспорт
		
	Менеджер = ?(осн.ДоговорКонтрагента.пустая(), 
//+++ ответственный в документе - вообще не причем!	
//?(осн.Ответственный.Пустая(), осн.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо, осн.Ответственный),
	осн.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо, 
	осн.ДоговорКонтрагента.ОтветственноеЛицо);
	
	Транзит = осн.Транзит;
	
	//Обнуляем договор
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если Транзит Тогда
		
		//Сначала ищем договоры Факторинга по обособленному подразделению
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДоговорыКонтрагентов.Ссылка,
		               |	ДоговорыКонтрагентов.ОтветственноеЛицо
		               |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |ГДЕ
		               |	ДоговорыКонтрагентов.Владелец = &Владелец
		               |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		               |	И (ДоговорыКонтрагентов.ТипДоговора = &типФакторинг
					   //16.05.2017
		               |	 ИЛИ ДоговорыКонтрагентов.ТипДоговора = &типФакторингПредоплата
					   |		)
					   |	И НЕ ДоговорыКонтрагентов.ДеньгиПоФакторингу
		               |	И НЕ ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		               |	И ДоговорыКонтрагентов.ОтветственноеЛицо.ОсновноеПодразделение = &ОсновноеПодразделение
		               |	И (ДоговорыКонтрагентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		               |			ИЛИ ДоговорыКонтрагентов.ДатаОкончанияДействия > &ДатаЗаказа)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДоговорыКонтрагентов.Код УБЫВ";//+++
		
		Запрос.УстановитьПараметр("Владелец", осн.Контрагент);
		Запрос.УстановитьПараметр("типФакторинг", Справочники.ТипыДоговоров.Факторинг);
		Запрос.УстановитьПараметр("типФакторингПредоплата", Справочники.ТипыДоговоров.ФакторингПредоплата); //16.05.2017
		Запрос.УстановитьПараметр("ОсновноеПодразделение", осн.Подразделение);
		Запрос.УстановитьПараметр("ДатаЗаказа", осн.Дата);
		ВыборкаФакторингОП = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаФакторингОП.Количество() = 0 Тогда
		//Не нашли по ОП, ищем договоры Факторинга по головному подразделению
		
			//+++ 06.11.2014 - Если у этого менеджера и есть основной договор - доовор Факторинга... 
			Если осн.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо = Менеджер 
			и (осн.Контрагент.ОсновнойДоговорКонтрагента.ТипДоговора =Справочники.ТипыДоговоров.Факторинг 
			или осн.Контрагент.ОсновнойДоговорКонтрагента.ТипДоговора =Справочники.ТипыДоговоров.ФакторингПредоплата) Тогда
				Договор = осн.Контрагент.ОсновнойДоговорКонтрагента;
			Иначе 
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
			               |	ДоговорыКонтрагентов.Ссылка,
			               |	ДоговорыКонтрагентов.ОтветственноеЛицо
			               |ИЗ
			               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			               |ГДЕ
			               |	ДоговорыКонтрагентов.Владелец = &Владелец
			               |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
			               |	И (ДоговорыКонтрагентов.ТипДоговора = &типФакторинг
						   //16.05.2017
			               |	 ИЛИ ДоговорыКонтрагентов.ТипДоговора = &типФакторингПредоплата
						   |		)

			               |	И НЕ ДоговорыКонтрагентов.ДеньгиПоФакторингу
			               |	И НЕ ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
			               |	И ДоговорыКонтрагентов.ОтветственноеЛицо.ОсновноеПодразделение = &ГоловноеПодразделение
			               |	И (ДоговорыКонтрагентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			               |			ИЛИ ДоговорыКонтрагентов.ДатаОкончанияДействия > &ДатаЗаказа)
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ДоговорыКонтрагентов.Код УБЫВ";//+++
				
				Запрос.УстановитьПараметр("Владелец", осн.Контрагент);
				Запрос.УстановитьПараметр("типФакторинг", Справочники.ТипыДоговоров.Факторинг);
				Запрос.УстановитьПараметр("типФакторингПредоплата", Справочники.ТипыДоговоров.ФакторингПредоплата); //16.05.2017
				Запрос.УстановитьПараметр("ГоловноеПодразделение", Справочники.Подразделения.НайтиПоКоду("00005"));
				Запрос.УстановитьПараметр("ДатаЗаказа", осн.Дата);
				ВыборкаФакторингГП = Запрос.Выполнить().Выбрать();
				
				//берем самый старый договор!
				Пока ВыборкаФакторингГП.Следующий() цикл
					Договор = ВыборкаФакторингГП.Ссылка; 
					Если Договор.ОтветственноеЛицо = Менеджер Тогда   //+++ 10.11.2014 опять же по менеджеру...  пример СТЭКО+  >> нужна Марешева
						Прервать; 
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			//Заполняем договор факторинга ОП
			Пока ВыборкаФакторингОП.Следующий() Цикл
				Договор = ВыборкаФакторингОП.Ссылка; //подставляем договор, но перезаписываем его, Если в выборке будет договор с нужным Ответственным = Менеджеру
				Если Договор.ОтветственноеЛицо = Менеджер Тогда   
					Прервать; 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе //не Транзит
		
		//сначала факторинг
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДоговорыКонтрагентов.Ссылка,
		               |	ДоговорыКонтрагентов.ОтветственноеЛицо
		               |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |ГДЕ
		               |	ДоговорыКонтрагентов.Владелец = &Владелец
		               |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		               |	И (ДоговорыКонтрагентов.ТипДоговора = &типФакторинг
					   //16.05.2017
		               |	 ИЛИ ДоговорыКонтрагентов.ТипДоговора = &типФакторингПредоплата
					   |		)
		               |	И НЕ ДоговорыКонтрагентов.ДеньгиПоФакторингу
		               |	И НЕ ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		               |	И ДоговорыКонтрагентов.ОтветственноеЛицо.ОсновноеПодразделение = &ГоловноеПодразделение
		               |	И (ДоговорыКонтрагентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		               |			ИЛИ ДоговорыКонтрагентов.ДатаОкончанияДействия > &ДатаЗаказа)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДоговорыКонтрагентов.Код УБЫВ";//+++
		
		Запрос.УстановитьПараметр("Владелец", осн.Контрагент);
		Запрос.УстановитьПараметр("типФакторинг", Справочники.ТипыДоговоров.Факторинг);
		Запрос.УстановитьПараметр("типФакторингПредоплата", Справочники.ТипыДоговоров.ФакторингПредоплата); //16.05.2017
		Запрос.УстановитьПараметр("ГоловноеПодразделение", Справочники.Подразделения.НайтиПоКоду("00005"));
		Запрос.УстановитьПараметр("ДатаЗаказа", осн.Дата);
		ВыборкаФакторингГП = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаФакторингГП.Следующий() Цикл
			Договор = ВыборкаФакторингГП.Ссылка; //подставляем договор, но перезаписываем его, Если в выборке будет договор с нужным Ответственным = Менеджеру
			Если Договор.ОтветственноеЛицо = Менеджер Тогда   
				Прервать; 
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
	//Факторинг не найден, ищем Договоры продажи по подразделению
	Если Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		
		Если НЕ Транзит 
			//29.09.2015 - и для филиала тоже!
			или осн.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение.ОбособленноеПодразделение 
		Тогда  //+++ 12.11.2014 - для ЯШТ - СНАЧАЛА проверяем осн.договор
			Если Менеджер = осн.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо Тогда
				Договор = осн.Контрагент.ОсновнойДоговорКонтрагента;
				Возврат Договор;
			КонецЕсли;
		КонецЕсли;
		
		// ищем действующий договор по Подразделению (первый попавшийся)
			Запрос = Новый Запрос;    //06.10.2015  только первый и единственный!
			
			ТипыДоговора = Новый СписокЗначений;
			ТипыДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00001")); //Предоплата
			ТипыДоговора.Добавить(Справочники.ТипыДоговоров.ПредоплатаПоСчетам); //+++14.08.2017
			ТипыДоговора.Добавить(Справочники.ТипыДоговоров.ФакторингПредоплата); //ФакторингПредоплата
						Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ДоговорыКонтрагентов.Ссылка КАК Договор,
		               |	ДоговорыКонтрагентов.ОтветственноеЛицо КАК Менеджер
		               |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |ГДЕ
		               |	ДоговорыКонтрагентов.Владелец = &Владелец
		               |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		               |	И ДоговорыКонтрагентов.ОтветственноеЛицо.ОсновноеПодразделение = &ОсновноеПодразделение
		             //Договор Продажи или Отсрочки...без *
		               |	И ДоговорыКонтрагентов.ТипДоговора В (&ТипыДоговора)
					 //+++ 09.09.2015  |	И ДоговорыКонтрагентов.Наименование = &Наименование
					   //как и везде выше
	                   |	И (ДоговорыКонтрагентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		               |			ИЛИ ДоговорыКонтрагентов.ДатаОкончанияДействия > &ДатаЗаказа)
		               |
		               |УПОРЯДОЧИТЬ ПО
					    |	ДоговорыКонтрагентов.ТипДоговора.Код "
					    //+++ 29.09.2015 - сначала Если ОсновнойДоговорКонтрагент - предоплата - то предоплатные,
						+?(ТипыДоговора.НайтиПоЗначению(осн.Контрагент.ОсновнойДоговорКонтрагента.ТипДоговора)<>неопределено, "ВОЗР", "УБЫВ") //16.05.2017 - предоплата
					   +"
					   |,ДоговорыКонтрагентов.Код УБЫВ
		               |АВТОУПОРЯДОЧИВАНИЕ";
		
			Запрос.УстановитьПараметр("Владелец", осн.Контрагент);
			Запрос.УстановитьПараметр("ОсновноеПодразделение", осн.Подразделение);
			//+++ 09.09.2015 
			//Запрос.УстановитьПараметр("Наименование", "Договор продажи");//только по продаже - всегда так называется?!
			ТипыДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00004")); //Отсрочка
			Запрос.УстановитьПараметр("ТипыДоговора",ТипыДоговора); 

			Запрос.УстановитьПараметр("ДатаЗаказа", осн.Дата);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда // 06.10.2015 только первый !!!
				
				Договор = Выборка.Договор; //подставляем договор, но перезаписываем его, Если в выборке будет договор с нужным Ответственным = Менеджеру
				
				//Если Договор.ОтветственноеЛицо = Менеджер Тогда // самый "свежий" договор с этим менеджером
				//	Прервать; 
				//КонецЕсли;
			КонецЕсли;
			//Если не нашли договор по этому менеджеру - будет взят самый ранний действующий договор с любым менеджером этого подразделения...
	
	КонецЕсли;
	
	//не нашли ни факторинг, ни договор продажи по подразделению 
	//-> Тогда проверяем есть ли договор в документе
	//   иначе ставим Основной договор контрагента
	Если Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
	Договор  = ?(осн.ДоговорКонтрагента.Пустая(), осн.Контрагент.ОсновнойДоговорКонтрагента, осн.ДоговорКонтрагента);
	КонецЕсли;
		
	Возврат Договор;
	
КонецФункции




//=======================ВЫГРУЗКИ ДОКУМЕНТОВ для (SIM) SQL Интернет-Магазина (NEW)=================================================
//1) SIM_ВыгрузитьДокументы()
// 		SIM_ВыгрузитьСписокДокументовВФайлXML()
//		SIM_ВыгрузитьФайлНаСервер()

//2) SIM_ВыгрузитьСправочникиXML()

//3) SIM_ВыгрузитьОстаткиTXT()

//  	sim_ВыгрузитьЦеныПродуктов() - общие и рекомендованные цены


//ГЛАВНАЯ процедура (для регл.задания)
процедура SIM_ВыгрузитьДокументы() Экспорт
	
//+++ 30.09.2016 - убраны!
    рез2 = SIM_ВыгрузитьДокументыТерминал();//24.06.2015
	
	//Если рез2 Тогда //и рез2  - очистка регистрации изменений
	//	SIM_ОчиститьРегистрациюИзменений();	
	//КонецЕсли;
	
КонецПроцедуры

 //ГЛАВНАЯ процедура (для регл.задания)
//+++ 24.06.2015 - по всем клиентам, у кого есть точки!
функция SIM_ВыгрузитьДокументыТерминал() 
	
	ИмяФайла1=КаталогВременныхФайлов()+"orders_terminal.xml"; // на сервере - своя папка...
	ИмяФайла2=КаталогВременныхФайлов()+"sales_terminal.xml"; // на сервере - своя папка...
	ИмяФайла3=КаталогВременныхФайлов()+"SeasonOrders_terminal.xml"; // на сервере - своя папка...
	ИмяФайла4=КаталогВременныхФайлов()+"SaleReturn_terminal.xml"; // на сервере - своя папка...
	ИмяФайла5=КаталогВременныхФайлов()+"Claim_terminal.xml"; // на сервере - своя папка...           //***добавлено 2017.11.15
	ИмяФайла6=КаталогВременныхФайлов()+"JobForShipment.xml"; // на сервере - своя папка...           //+++добавлено 2018.02.05
	
	
	СписокЗаказов    = SIM_ПолучитьСписокДокументов("ЗаказПокупателя", Истина);
	списокЗаказовСостатусами = ПолучитьстатусыЗаказов(списокЗаказов);
	СписокРеализаций = SIM_ПолучитьСписокДокументов("РеализацияТоваровУслуг", Истина);
	СписокСезонныхЗаказов = SIM_ПолучитьСписокДокументов("ЗаказПокупателяСезонный",Истина);
	СписокЗаявокНаВозврат = SIM_ПолучитьСписокДокументов("ЗаявкаНаВозвратТоваров",Истина);
	СписокЗаявокНаБрак = SIM_ПолучитьСписокДокументов("ЗаявкаНаБрак", Ложь);
	
//	СписокЗаданийНаОтгрузку = SIM_ПолучитьЗаданияНаОтгрузку(СписокРеализаций, списокЗаказовСостатусами); //05.02.2018 - по измененным Заказам и Реализациям
	
	No=СписокЗаказов.Количество();
	Ns=СписокРеализаций.Количество();
	Nso = СписокСезонныхЗаказов.Количество();
	Nzv = СписокЗаявокНаВозврат.Количество();
	Nzb = СписокЗаявокНаБрак.Количество();
//	Nz =  СписокЗаданийНаОтгрузку.Количество();  //05.02.2018
	
удачно = истина;
	Если No>0 Тогда
	SIM_ВыгрузитьСписокДокументовВФайлXML(СписокЗаказовСостатусами, ИмяФайла1, "Order"); // сохраняет в файл
	ПолныйАдрес=Истина;  
	удачно = SIM_ВыгрузитьФайлНаСервер(ИмяФайла1,"api/ordersapi/importorders", Истина, "terminal.yst.ru", ПолныйАдрес )  //28.07.2017 - полный адрес!
	КонецЕсли;
удачно2 = истина;
	Если Ns>0 Тогда
	SIM_ВыгрузитьСписокДокументовВФайлXML(СписокРеализаций, ИмяФайла2, "Sale");
	УдалятьФайлыSaleПослеВыгрузки = ЛОЖЬ; //НЕ Удалять!
	удачно2 = SIM_ВыгрузитьФайлНаСервер(ИмяФайла2,"importsales", УдалятьФайлыSaleПослеВыгрузки )
	КонецЕсли;
удачно3 = истина;
	Если Nso>0 Тогда
		SIM_ВыгрузитьСписокДокументовВФайлXML(СписокСезонныхЗаказов, ИмяФайла3, "SeasonOrder");
		удачно3 = SIM_ВыгрузитьФайлНаСервер(ИмяФайла3,"importseasonorders" )
	КонецЕсли;
удачно4 = истина;
	Если Nzv>0 Тогда
		SIM_ВыгрузитьСписокДокументовВФайлXML(СписокЗаявокНаВозврат, ИмяФайла4, "SaleReturn");
		удачно4 = SIM_ВыгрузитьФайлНаСервер(ИмяФайла4,"ImportSaleReturns")
	КонецЕсли;
удачно5 = истина;
	Если Nzb>0 Тогда
		SIM_ВыгрузитьСписокДокументовВФайлXML(СписокЗаявокНаБрак, ИмяФайла5, "Claim");
		удачно5 = SIM_ВыгрузитьФайлНаСервер(ИмяФайла5, "ImportClaims");
	КонецЕсли;
	
удачно6 = истина;  //15.01 - 05.02.2018
	//Если Nz>0 Тогда
	//	SIM_ВыгрузитьСписокЗаданийНаОтгрузкуВФайлXML(СписокЗаданийНаОтгрузку, ИмяФайла6, "JobForShipment");
	//	ПолныйАдрес=Истина; // ЛОЖЬ лишняя / >>  /exchange/JobForShipments/    
	//	  удачно6 = SIM_ВыгрузитьФайлНаСервер(ИмяФайла6, "exchange/ImportJobsForShipment", , , ПолныйАдрес);
	//КонецЕсли;
	
	
	удачно = удачно и удачно2 и удачно3 и удачно4 и удачно5 и удачно6;
	
	Если удачно Тогда
		#Если Клиент Тогда
		сообщить(строка(ТекущаяДата())+" Успешно завершена Выгрузка в базу SQL Интернет-Магазина (TERMINAL) измененных заказов("+строка(No)+") и реализаций("+строка(Ns)+") покупателей", СтатусСообщения.Информация);
		#КонецЕсли
		рез = SIM_ОчиститьРегистрациюИзменений();	
	Иначе	
		#Если Клиент Тогда
		сообщить(строка(ТекущаяДата())+" Ошибка при выгрузке в базу SQL Интернет-Магазина (TERMINAL)!", СтатусСообщения.Внимание);
		#КонецЕсли
	КонецЕсли;

	возврат удачно;
	
КонецФункции


//<?xml version="1.0"?>
//<ArrayOfOrder xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
//<Order NumberIn1S="" PartnerId="0123" Total="100" OrderDate="2014-08-31" DeliveryDate="2014-08-31" Comments="" DepartmentId="112" OrderStatus="2">
//   <OrderDetails>
//	  <OrderDetail ProductId="115" Count="4" Price="5000" />
//	  <OrderDetail ProductId="9120102" Count="156" Price="1453" />
//	</OrderDetails>
//</Order>
//</ArrayOfOrder>
// { New =1, Confirmed=2, Chancelled=3, Sold=4 }
// 
Процедура SIM_ВыгрузитьСписокДокументовВФайлXML(СписокЗаказов=Неопределено, ИмяФайла="", ИмяУзла="Order" )Экспорт
	
	максДлинаКомментария = 200;
	Если ИмяФайла="" ИЛИ СписокЗаказов=Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	ОбъектXML.ЗаписатьОбъявлениеXML();  //<?xml version="1.0"?>
	
	//<ArrayOfOrder xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	ОбъектXML.ЗаписатьНачалоЭлемента(ИмяУзла+"s");
	//ОбъектXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	//ОбъектXML.ЗаписатьАтрибут("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
	
	//============================Заказы=============================================================================	
	для ii=0 по СписокЗаказов.Количество()-1 цикл
		Если ТипЗнч(СписокЗаказов) = Тип("ТаблицаЗначений") Тогда
		зак = СписокЗаказов[ii].Заказ;
		иначе	
		зак = СписокЗаказов[ii].Значение;
	    КонецЕсли;
		
		Если  имяУзла = "SaleReturn" Тогда
		//проверим есть ли строка с  пустой реализацией.\
			НеВыгружать =  Ложь;
			Для каждого ст1 из Зак.Товары цикл
				Если не ЗначениеЗаполнено(ст1.Реализация) тогда
				 НеВыгружать =  Истина;	
				конецесли;	
			конецЦикла;
			Если НеВыгружать тогда
				продолжить;
			конецЕсли;	

			
			
			
			ОбъектXML.ЗаписатьНачалоЭлемента("SaleReturn");
			
			ОбъектXML.ЗаписатьАтрибут( "GuidIn1S", СокрЛП(зак.УникальныйИдентификатор()) );
			ОбъектXML.ЗаписатьАтрибут("NumberIn1S",СокрЛП(зак.Номер) );
			ОбъектXML.ЗаписатьАтрибут("PartnerId", СокрЛП(зак.Контрагент.Код) );
			ОбъектXML.ЗаписатьАтрибут("Date", формат(зак.Дата,"ДЛФ=DT") ); // OrderDate / SaleDate
			ОбъектXML.ЗаписатьНачалоЭлемента("Details");
			Для каждого стр из Зак.Товары Цикл 
				ОбъектXML.ЗаписатьНачалоЭлемента("Detail"); //Order/Sale
				ОбъектXML.ЗаписатьАтрибут("RowNumber", формат(стр.НомерСтроки,"ЧДЦ=0; ЧН=0; ЧГ=0") ); //строка
				
				//+++ 29.06.2017 иногда не заполнено поле Реализация (составного типа)
				Если стр.Реализация=Неопределено Тогда 
					ОбъектXML.ЗаписатьАтрибут("SaleDate", "01.01.0001 00:00:00"); //строка
					ОбъектXML.ЗаписатьАтрибут("SaleNumber", ""); 
				Иначе//как было
					ОбъектXML.ЗаписатьАтрибут("SaleDate", формат(стр.Реализация.Дата,"ДЛФ=DT") ); //строка
					ОбъектXML.ЗаписатьАтрибут("SaleNumber", СокрЛП(стр.Реализация.Номер)  ); 
				КонецЕсли;
				
				ОбъектXML.ЗаписатьАтрибут("ProductId", стр.Номенклатура.Код ); //строка
				ОбъектXML.ЗаписатьАтрибут("Count", формат(стр.Количество,"ЧДЦ=0; ЧН=0; ЧГ=0") ); //строка
				ОбъектXML.ЗаписатьАтрибут("Price", формат(стр.ЦенаРеализации,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") ); //цена C копейками!
				ОбъектXML.ЗаписатьКонецЭлемента(); //OrderDetail
			КонецЦикла;
			ОбъектXML.ЗаписатьКонецЭлемента();
			ОбъектXML.ЗаписатьКонецЭлемента();
			
			//ОбъектXML.ЗаписатьКонецЭлемента();
			//ОбъектXML.Закрыть();
			
		ИначеЕсли имяУзла = "Claim" Тогда   //***2017.11.15
			
			ОбъектXML.ЗаписатьНачалоЭлемента("Claim");
			ОбъектXML.ЗаписатьАтрибут("GuidIn1S", 	СокрЛП(зак.УникальныйИдентификатор()));
			ОбъектXML.ЗаписатьАтрибут("NumberIn1S",	СокрЛП(Формат(зак.Номер, "ЧГ=")));
			ОбъектXML.ЗаписатьАтрибут("PartnerId", 	СокрЛП(зак.Контрагент.Код));
			ОбъектXML.ЗаписатьАтрибут("Date", 		Формат(зак.Дата, "ДЛФ=DT")); 
			ОбъектXML.ЗаписатьАтрибут("Status",		СокрЛП(зак.СостояниеЗаявки)); 
			
			ОбъектXML.ЗаписатьНачалоЭлемента("Details");
			Для каждого стр из Зак.Расшифровка Цикл 
				ОбъектXML.ЗаписатьНачалоЭлемента("Detail"); 
				ОбъектXML.ЗаписатьАтрибут("RowNumber",		Формат(стр.НомерСтроки, "ЧДЦ=0; ЧН=0; ЧГ=0")); 
				ОбъектXML.ЗаписатьАтрибут("ProductKind",	СокрЛП(стр.Номенклатура.ВидТовара));
				ОбъектXML.ЗаписатьАтрибут("ProductId",		стр.Номенклатура.Код); 
				ОбъектXML.ЗаписатьАтрибут("Count",			Формат(стр.Количество, "ЧДЦ=0; ЧН=0; ЧГ=0"));  
				ОбъектXML.ЗаписатьАтрибут("SaleDate", 		Формат(стр.ДатаРеализации, "ДЛФ=DT"));  
				ОбъектXML.ЗаписатьАтрибут("SaleNumber", 	СокрЛП(стр.НомерРеализации)); 
				ОбъектXML.ЗаписатьАтрибут("Condition", 		СокрЛП(стр.СостояниеТовара)); 
				ОбъектXML.ЗаписатьАтрибут("Defect", 		СокрЛП(стр.Качество)); 
				ОбъектXML.ЗаписатьАтрибут("DefectComment",	СокрЛП(стр.Комментарий));
				ОбъектXML.ЗаписатьАтрибут("DefectForSale",	СокрЛП(стр.ВидДефектаДляУценки));
				ОбъектXML.ЗаписатьАтрибут("DefectCome",		СокрЛП(стр.ВиновникВозникновенияДефекта));
				ОбъектXML.ЗаписатьАтрибут("InspectionDate",	Формат(стр.ОкончаниеЭкспертизы, "ДЛФ=D"));
				ОбъектXML.ЗаписатьАтрибут("Resolution",		СокрЛП(стр.Заключение));
				ОбъектXML.ЗаписатьАтрибут("ProductionDate",	СокрЛП(стр.ДатаПроизводства));
				ОбъектXML.ЗаписатьАтрибут("AdditionalInfo",	СокрЛП(Строка(стр.СостояниеТовара)) + ", Данные об авто: " + СокрЛП(стр.Марка) + ", Пробег: " + СокрЛП(стр.Пробег) + ?(СтрДлина(СокрЛП(стр.ДополнительныеСвойства))>0, " Дополнительные параметры: " + СокрЛП(стр.ДополнительныеСвойства), ""));
				ОбъектXML.ЗаписатьКонецЭлемента(); 
			конецЦикла;
			ОбъектXML.ЗаписатьКонецЭлемента();
			ОбъектXML.ЗаписатьКонецЭлемента();
			
		иначе
			Если зак.СуммаДокумента=0 Тогда 
				#Если Клиент Тогда
					сообщить("Заказ "+строка(зак)+" - не выгружен, так как Сумма = 0", СтатусСообщения.Внимание);
				#КонецЕсли	
				Продолжить;
			КонецЕсли;
			
			Если ИмяУзла="Sale"  Тогда // для реализаций
				Если Зак.Товары.Количество()=0 или ЗначениеНеЗаполнено(зак.сделка) Тогда
					#Если Клиент Тогда
						сообщить("Документ "+строка(зак)+" - не выгружен, так как нет Товаров или поле Сделка не заполнено!", СтатусСообщения.Внимание);
					#КонецЕсли			
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		//25.04.2018
		ЗакТовары = Зак.Товары.выгрузить(); 
		закСуммаДокумента = зак.СуммаДокумента;

		//+++( 25.04.2018 --- цены B2B ---------Задача № 45011----------------------
		Если ИмяУзла="Order" тогда
		 
			таблB2B = новый ТаблицаЗначений;
			Если Найти(Зак.ДоговорКонтрагента.Наименование,"*")>0 тогда
				спис1 = ЗакТовары.ВыгрузитьКолонку("Номенклатура");
				таблB2B = получитьЦеныB2B(спис1);
			КонецЕсли;

			для каждого стр1 из ЗакТовары цикл	
			 Если таблB2B.Количество()>0 тогда
				стрB2B = таблB2B.Найти(стр1.Номенклатура, "Номенклатура");
				Если стрB2B<>неопределено тогда
					Если стр1.Цена<стрB2B.Цена тогда // подмена на цену B2B +++
					сумма0 = стр1.Сумма;
					стр1.Цена = стрB2B.Цена; //увеличиваем цену и сумму = в таблице ЗакТовары!
					стр1.Сумма = стр1.Цена*стр1.Количество;
					закСуммаДокумента = закСуммаДокумента + (стр1.Сумма - сумма0);
					КонецЕсли;
				КонецЕсли;
			  КонецЕсли;
			КонецЦикла;	

		КонецЕсли;
		//+++)

			
			
			ОбъектXML.ЗаписатьНачалоЭлемента(ИмяУзла);
			//<Order NumberIn1S="" PartnerId="0123" Total="100" OrderDate="2014-08-31" DeliveryDate="2014-08-31" Comments="" DepartmentId="112" OrderStatus="2">
			
			ОбъектXML.ЗаписатьАтрибут( ?(ИмяУзла="Order" или ИмяУзла="SeasonOrder","GUID","GuidIn1S"), СокрЛП(зак.УникальныйИдентификатор()) );
			
			ОбъектXML.ЗаписатьАтрибут("NumberIn1S",СокрЛП(зак.Номер) );
			ОбъектXML.ЗаписатьАтрибут("PartnerId", СокрЛП(зак.Контрагент.Код) );
			ОбъектXML.ЗаписатьАтрибут("Total", формат(закСуммаДокумента,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") ); //25.04.2018
			ОбъектXML.ЗаписатьАтрибут(?(ИмяУзла="SeasonOrder","OrderDate",ИмяУзла+"Date"), формат(зак.Дата,"ДЛФ=DT") ); // OrderDate / SaleDate
			
			Если ИмяУзла="Order" Тогда 
				//заполним код поставщика для заказов в ожидании
				Если Зак.Поставщик.Пустая() Тогда 
					ПоставщикКод = "0";	 
				Иначе	 
					Отбор = Новый Структура;
					Отбор.Вставить("Поставщик",Зак.Поставщик);                                              
					Отбор.Вставить("ОТХ",Ложь);
					ДанныеПоставщика = РегистрыСведений.СрокиДоставки.Получить(Отбор);
					ПоставщикКод = ДанныеПоставщика.Код; 
				КонецЕсли; 
				
				//+++ 29.03.2017
				//НЕ ПЕРЕДАЁМ для объединенных заказов - чтобы поставщики не видел лишнего!
				Если (зак.ТипЗаказа=6 или зак.ТипЗаказа=7) //для любого статуса! не показываем поставщику
					Тогда 
					ОбъектXML.ЗаписатьАтрибут("SupplierId", "0"); 
				иначе	 
					ОбъектXML.ЗаписатьАтрибут("SupplierId", ПоставщикКод);//+++ 19.01.2015 - в обратную сторону
				КонецЕсли;	
				
				ОбъектXML.ЗаписатьАтрибут("IsReserve", ?(зак.Резерв, "1", "0")  );//+++ 19.01.2015 - в обратную сторону
				ОбъектXML.ЗаписатьАтрибут("IsJoined", ?(зак.ТипЗаказа=6 или зак.ТипЗаказа=7, "1", "0")  );//+++ 29.03.2017, 17.02.2016 -объединенный заказ
				
				Если зак.ДатаОтгрузки>'00010101' Тогда
					ОбъектXML.ЗаписатьАтрибут("DeliveryDate", формат(зак.ДатаОтгрузки,"ДЛФ=D") );  //01.09.2014
					//Иначе
					//	ОбъектXML.ЗаписатьАтрибут("DeliveryDate","");  //19.01.2015
				КонецЕсли;
				
				ОбъектXML.ЗаписатьАтрибут("DateOfPayment",  формат(зак.ДатаОплаты,"ДЛФ=D") ); //+++ 18.04.2017
				
				Если найти(ИмяФайла,"terminal")>0 Тогда    //+++ 06.04.2015
					//статус = ПолучитьСтатусЗаказаПоСхеме(зак);
					статус = СписокЗаказов[ii].Статус;
					попытка
						Если статус<>"" Тогда
							OrderStatus = число( лев(статус,2) );
							OrderStatus = ?(OrderStatus = 0, 1, OrderStatus); // 0 и 1 статусы - новый...
						//+++ 17.07.2018  Задача № 50914 слияние статусов
							OrderStatus = ?( (OrderStatus>=8 и OrderStatus<=14) или OrderStatus=21, 8, OrderStatus); 
							Если OrderStatus = 2 и НЕ зак.Резерв тогда //18.07.2018
								OrderStatus = 22;
							КонецЕсли;	

						Иначе
							OrderStatus = 1;
						КонецЕсли;
					исключение
						OrderStatus = 1;
					КонецПопытки;
					
					НомерТочки = зак.НомерТорговойТочкиКонтрагента;
					Если НомерТочки=0 Тогда // ищем головную = первую точку клиента!
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 
						|Точки.Номер,
						|Точки.Наименование
						|ИЗ Справочник.Точки КАК Точки
						|ГДЕ Точки.Владелец = &Владелец И НЕ Точки.ПометкаУдаления
						|УПОРЯДОЧИТЬ ПО	Номер
						|АВТОУПОРЯДОЧИВАНИЕ";
						Запрос.УстановитьПараметр("Владелец", зак.Контрагент);
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						Если Выборка.Следующий() Тогда
							НомерТочки = выборка.Номер;
							Если выборка.Наименование<>"Головной терминал" Тогда
								#Если Клиент Тогда
									сообщить(строка(ii)+") "+строка(зак)+" 1-я точка - НЕ 'Головной терминал'! У клиента "+строка(зак.Контрагент)
									+" установлена 1-я точка № "+формат(НомерТочки,"""ЧГ=0")+" - "+строка(выборка.Наименование), СтатусСообщения.Внимание);
								#КонецЕсли
								//иначе сообщить(строка(ii)+") "+строка(зак)+" - установлена точка № "+формат(НомерТочки,"""ЧГ=0") +" - "+строка(выборка.Наименование), СтатусСообщения.Информация);
							КонецЕсли;
						КонецЕсли;
						
					Иначе//-----------------проверка существования точки у клиента----------------
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ 
						|Точки.Номер,
						|Точки.Наименование
						|ИЗ Справочник.Точки КАК Точки
						|ГДЕ Точки.Владелец = &Владелец 
						|И Точки.Номер = &НомерТочки
						|И НЕ Точки.ПометкаУдаления
						|УПОРЯДОЧИТЬ ПО	Номер
						|АВТОУПОРЯДОЧИВАНИЕ";
						Запрос.УстановитьПараметр("Владелец", зак.Контрагент);
						Запрос.УстановитьПараметр("НомерТочки", НомерТочки);
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						Если НЕ Выборка.Следующий() Тогда
							#Если Клиент Тогда
								сообщить(строка(ii)+") "+строка(зак)+" - НЕ НАЙДЕНА точка № "+строка(НомерТочки) +" у клиента "+строка(зак.Контрагент), СтатусСообщения.Внимание );
							#КонецЕсли
							//Иначе сообщить(строка(ii)+") "+строка(зак)+" - точка № "+строка(НомерТочки) +" - "+строка(выборка.Наименование) );
						КонецЕсли;
						
					КонецЕсли;
					ОбъектXML.ЗаписатьАтрибут("PointId",формат(НомерТочки,"ЧГ=0") ); // "1234" без пробелов!
				КонецЕсли;	
				//+++ -----------------10 статусов -------------------------
				
				ОбъектXML.ЗаписатьАтрибут(ИмяУзла+"Status", Строка(OrderStatus)  ); // число! 1-4
				Если зак.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00004") или зак.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.Факторинг тогда				
				ОбъектXML.ЗаписатьАтрибут("Prepay", "0"); //это предоплата булево
			    иначе
				ОбъектXML.ЗаписатьАтрибут("Prepay", "1"); //это предоплата булево
				конецЕсли;
				Если Найти(Зак.ДоговорКонтрагента.Наименование,"*")  = 0 тогда
					Звезда = "0";
				иначе
					Звезда = "1";
				конецЕсли;	
				ОбъектXML.ЗаписатьАтрибут("IsStar",Звезда ); //это договор со * булево
				Если зак.ПоставитьНаОтгрузку тогда
					Если Зак.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("10") Тогда
						ОбъектXML.ЗаписатьАтрибут("WayOfDelivery", "1"  ); //способ доставки число! 1-0
					иначе
						ОбъектXML.ЗаписатьАтрибут("WayOfDelivery",  "0" ); //способ доставки число! 1-0
					конецесли;
				Если ЗначениеЗаполнено(зак.ВидАдреса)тогда	
				ОбъектXML.ЗаписатьАтрибут("AddressId", Строка(зак.ВидАдреса.код)  ); // строка	
				конецЕсли;
				конецЕсли;
				Если ЗначениеЗаполнено(зак.ТКТерминал) тогда
					  ОбъектXML.ЗаписатьАтрибут("TkId",зак.ТКТерминал );
				конецЕсли;	
			ИначеЕсли ИмяУзла = "Sale" Тогда  
				//===============РЕАЛИЗАЦИИ============================================
				//ссылка из реализации на ЗаказПокупателя
				Если ЗначениеЗаполнено(зак.Сделка) и ТипЗнч(зак.Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					ОбъектXML.ЗаписатьАтрибут( "GuidOfOrderIn1S", Строка(зак.Сделка.УникальныйИдентификатор())  ); // число! 1-4
				КонецЕсли;
				ОбъектXML.ЗаписатьАтрибут( "Driver", СокрЛП(Строка(зак.Водитель)) );
				ОбъектXML.ЗаписатьАтрибут( "PhoneNumberOfDriver",  СокрЛП(Строка(зак.ВидПеревозки)) );
				ОбъектXML.ЗаписатьАтрибут( "BrandOfAuto",      СокрЛП(Строка(зак.МаркаАвтомобиля)) );
				ОбъектXML.ЗаписатьАтрибут( "RegNumOfAuto",     СокрЛП(Строка(зак.ГосНомерАвтомобиля)) );
				ОбъектXML.ЗаписатьАтрибут( "DischargePoint",   ?(СокрЛП(зак.ПунктРазгрузки)="", СокрЛП(зак.АдресДоставки), СокрЛП(зак.ПунктРазгрузки)) );
				
				Если найти(ИмяФайла,"terminal")>0 Тогда    //+++ 04.07.2015
					НомерТочки = зак.Сделка.НомерТорговойТочкиКонтрагента;
					Если НомерТочки=0 Тогда // ищем головную = первую точку клиента!
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 
						|Точки.Номер,
						|Точки.Наименование
						|ИЗ Справочник.Точки КАК Точки
						|ГДЕ Точки.Владелец = &Владелец И НЕ Точки.ПометкаУдаления
						|УПОРЯДОЧИТЬ ПО	Номер
						|АВТОУПОРЯДОЧИВАНИЕ";
						Запрос.УстановитьПараметр("Владелец", зак.Контрагент);
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						Если Выборка.Следующий() Тогда
							НомерТочки = выборка.Номер;
							Если выборка.Наименование<>"Головной терминал" Тогда
								#Если Клиент Тогда
									сообщить(строка(ii)+") "+строка(зак)+" 1-я точка - НЕ 'Головной терминал'! У клиента "+строка(зак.Контрагент)
									+" установлена 1-я точка № "+формат(НомерТочки,"""ЧГ=0")+" - "+строка(выборка.Наименование), СтатусСообщения.Внимание);
								#КонецЕсли
								//иначе сообщить(строка(ii)+") "+строка(зак)+" - установлена точка № "+формат(НомерТочки,"""ЧГ=0") +" - "+строка(выборка.Наименование), СтатусСообщения.Информация);
							КонецЕсли;
						КонецЕсли;
						
					Иначе//-----------------проверка существования точки у клиента----------------
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ 
						|Точки.Номер,
						|Точки.Наименование
						|ИЗ Справочник.Точки КАК Точки
						|ГДЕ Точки.Владелец = &Владелец 
						|И Точки.Номер = &НомерТочки
						|И НЕ Точки.ПометкаУдаления
						|УПОРЯДОЧИТЬ ПО	Номер
						|АВТОУПОРЯДОЧИВАНИЕ";
						Запрос.УстановитьПараметр("Владелец", зак.Контрагент);
						Запрос.УстановитьПараметр("НомерТочки", НомерТочки);
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						Если НЕ Выборка.Следующий() Тогда
							#Если Клиент Тогда
								сообщить(строка(ii)+") "+строка(зак)+" - НЕ НАЙДЕНА точка № "+строка(НомерТочки) +" у клиента "+строка(зак.Контрагент), СтатусСообщения.Внимание );
							#КонецЕсли
							//Иначе сообщить(строка(ii)+") "+строка(зак)+" - точка № "+строка(НомерТочки) +" - "+строка(выборка.Наименование) );
						КонецЕсли;
						
					КонецЕсли;
					ОбъектXML.ЗаписатьАтрибут("PointId",формат(НомерТочки,"ЧГ=0") ); // "1234" без пробелов!
					Если  найти(зак.ДоговорКонтрагента.Наименование,"*")<>0 тогда
				    ОбъектXML.ЗаписатьАтрибут( "IsStar","1");
					конецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла="SeasonOrder" Тогда 
				//===============СЕЗОННЫЕ ЗАКАЗЫ=========================================
				//ОбъектXML.ЗаписатьАтрибут("IsReserve", ?(зак.Резерв, "1", "0")  );//+++ 19.01.2015 - в обратную сторону
				//ОбъектXML.ЗаписатьАтрибут("IsJoined", ?(зак.ТипЗаказа=6, "1", "0")  );//+++ 17.02.2016 -объединенный заказ
				
				Если зак.ДатаДействияПо>'00010101' Тогда
					ОбъектXML.ЗаписатьАтрибут("DeliveryDate", формат(зак.ДатаДействияПо,"ДЛФ=D") );  //01.09.2014
				КонецЕсли;
				Если зак.ПоТоварамВПути Тогда
					ОбъектXML.ЗаписатьАтрибут("FromOnWay","1");
				иначе
					ОбъектXML.ЗаписатьАтрибут("FromOnWay","0");
				КонецЕсли;
				
				Если  Зак.пометкаУдаления Тогда
					OrderStatus = 3; // Cancelled - отменен
				иначеЕсли  Зак.Проведен Тогда
					OrderStatus = 2; //проведен
				иначе
					OrderStatus = 2; //NEW
				КонецЕсли;		
				
				Если найти(ИмяФайла,"terminal")>0 Тогда    //+++ 06.04.2015
					
					НомерТочки = 0;
					Если НомерТочки=0 Тогда // ищем головную = первую точку клиента!
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 
						|Точки.Номер,
						|Точки.Наименование
						|ИЗ Справочник.Точки КАК Точки
						|ГДЕ Точки.Владелец = &Владелец И НЕ Точки.ПометкаУдаления
						|УПОРЯДОЧИТЬ ПО	Номер
						|АВТОУПОРЯДОЧИВАНИЕ";
						Запрос.УстановитьПараметр("Владелец", зак.Контрагент);
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						Если Выборка.Следующий() Тогда
							НомерТочки = выборка.Номер;
							Если выборка.Наименование<>"Головной терминал" Тогда
								#Если Клиент Тогда
									сообщить(строка(ii)+") "+строка(зак)+" 1-я точка - НЕ 'Головной терминал'! У клиента "+строка(зак.Контрагент)
									+" установлена 1-я точка № "+формат(НомерТочки,"""ЧГ=0")+" - "+строка(выборка.Наименование), СтатусСообщения.Внимание);
								#КонецЕсли
								//иначе сообщить(строка(ii)+") "+строка(зак)+" - установлена точка № "+формат(НомерТочки,"""ЧГ=0") +" - "+строка(выборка.Наименование), СтатусСообщения.Информация);
							КонецЕсли;
						КонецЕсли;
						
					Иначе//-----------------проверка существования точки у клиента----------------
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ 
						|Точки.Номер,
						|Точки.Наименование
						|ИЗ Справочник.Точки КАК Точки
						|ГДЕ Точки.Владелец = &Владелец 
						|И Точки.Номер = &НомерТочки
						|И НЕ Точки.ПометкаУдаления
						|УПОРЯДОЧИТЬ ПО	Номер
						|АВТОУПОРЯДОЧИВАНИЕ";
						Запрос.УстановитьПараметр("Владелец", зак.Контрагент);
						Запрос.УстановитьПараметр("НомерТочки", НомерТочки);
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						Если НЕ Выборка.Следующий() Тогда
							#Если Клиент Тогда
								сообщить(строка(ii)+") "+строка(зак)+" - НЕ НАЙДЕНА точка № "+строка(НомерТочки) +" у клиента "+строка(зак.Контрагент), СтатусСообщения.Внимание );
							#КонецЕсли
							//Иначе сообщить(строка(ii)+") "+строка(зак)+" - точка № "+строка(НомерТочки) +" - "+строка(выборка.Наименование) );
						КонецЕсли;
						
					КонецЕсли;
					ОбъектXML.ЗаписатьАтрибут("PointId",формат(НомерТочки,"ЧГ=0") ); // "1234" без пробелов!
				КонецЕсли;	
				
				ОбъектXML.ЗаписатьАтрибут("OrderStatus", Строка(OrderStatus)  ); // число! 1-4
				
			КонецЕсли;	
			кодПодразделения = ?(зак.Подразделение.ОбособленноеПодразделение, число(зак.Подразделение.Код), 5 );
			ОбъектXML.ЗаписатьАтрибут("DepartmentId", строка(кодПодразделения) ); // число! 5, 106, 112, 122
			
			//комментарии в 1С неограничены... поэтому обрезаем...  
			Коммент = СокрЛП(Лев(зак.Комментарий, максДлинаКомментария));
			ОбъектXML.ЗаписатьАтрибут("Comments", Коммент );
			
			Если ИмяУзла = "Sale" Тогда 
				Если ТипЗнч(Зак.Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда // 21.04.2017 - ошибка в "Регламентное задание. Обмен sim интернет магазин док" "Поле объекта не обнаружено (Статус)"
					резСтатус = ?(Зак.Сделка.Статус = Перечисления.СтатусыЗаказов.Доставлен,"1","0");
				Иначе 
					резСтатус = "0"; // реализация без Заказа... не может быть доставлена!
				КонецЕсли;
				ОбъектXML.ЗаписатьАтрибут("IsDelivered", резСтатус);
			КонецЕсли;
			
			
			
			//============================ТОВАРЫ=========================================================
			ОбъектXML.ЗаписатьНачалоЭлемента(?(ИмяУзла ="Sale",ИмяУзла+"Details","OrderDetails"));//Order/Sale/SeasonOrder
						
			Для каждого стр1 из ЗакТовары Цикл  //25.04.2018
				
				Попытка
					номКод = формат( число( СокрЛП(стр1.Номенклатура.Код) ),"ЧДЦ=0; ЧГ=0"); //строка, но с числовым кодом товара (без 0-ей)
					
					ОбъектXML.ЗаписатьНачалоЭлемента(?(ИмяУзла ="Sale",ИмяУзла+"Detail","OrderDetail")); //Order/Sale
					ОбъектXML.ЗаписатьАтрибут("RowNumber", формат(стр1.НомерСтроки,"ЧДЦ=0; ЧН=0; ЧГ=0") ); //строка
					ОбъектXML.ЗаписатьАтрибут("ProductId", номКод ); //строка
					ОбъектXML.ЗаписатьАтрибут("Count", формат(стр1.Количество,"ЧДЦ=0; ЧН=0; ЧГ=0") ); //строка
					ОбъектXML.ЗаписатьАтрибут("Price", формат(стр1.Цена,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") ); //цена C копейками!?
					
					ОбъектXML.ЗаписатьКонецЭлемента(); //OrderDetail
					
				Исключение
					#Если Клиент Тогда
						Сообщить("Товар с кодом '"+СокрЛП(стр1.Номенклатура.Код)+"' в заказе "+строка(Зак)+" - не выгружен!"); 
					#КонецЕсли
				КонецПопытки;
				
			КонецЦикла;//товар
			
			ОбъектXML.ЗаписатьКонецЭлемента(); //OrderDetails
			ОбъектXML.ЗаписатьКонецЭлемента(); //"Order"  //аналог BODY
		КонецЕсли;	
	КонецЦикла; //Конец всех заказов
	
		ОбъектXML.ЗаписатьКонецЭлемента(); //"ArrayOfOrder"  //аналог BODY
		ОбъектXML.Закрыть();
		
		#Если Клиент Тогда
			сообщить(строка(ТекущаяДата())+" Выгрузка "+строка(СписокЗаказов.Количество())+" документов типа '"+ИмяУзла+"' в XML-файл завершена!");
		#КонецЕсли

КонецПроцедуры

//17.04.2018
Функция получитьЦеныB2B(списТов) экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
				   //сразу округлим до рублей!
	               |	выразить(ЦеныНоменклатурыСрезПоследних.Цена как число(15,0)) как Цена
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	               |ГДЕ
	               |	ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен
	               |	И ЦеныНоменклатурыСрезПоследних.Номенклатура В(&списТов)
				    |	И ЦеныНоменклатурыСрезПоследних.Номенклатура.НоменклатурнаяГруппа в (&СписНомГрупп)
	               |	И ЦеныНоменклатурыСрезПоследних.Цена > 0";
	Запрос.УстановитьПараметр("ТипЦен", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00032") ); //B2B Базовая
	Запрос.УстановитьПараметр("списТов", списТов);
	 СписНомГрупп = новый СписокЗначений;
	 СписНомГрупп.Добавить( справочники.НоменклатурныеГруппы.НайтиПоКоду("00016") ); //импорт зима
	 СписНомГрупп.Добавить( справочники.НоменклатурныеГруппы.НайтиПоКоду("00017") ); //импорт лето
	Запрос.УстановитьПараметр("СписНомГрупп", СписНомГрупп);
	Результат = Запрос.Выполнить();
	табл = результат.Выгрузить();
	Возврат табл;
КонецФункции

Функция SIM_ВыгрузитьФайлНаСервер(ИмяФайла="", ИмяПоТипуФайла="importorders", УдалитьФайлПослеУдачнойВыгрузки = Истина, сайт1="terminal.yst.ru",ПолныйАдрес=Ложь, SSL=ЛОЖЬ ) ЭКСПОРТ
	
	Если ИмяФайла="" или ИмяПоТипуФайла="" Тогда 
		возврат ЛОЖЬ 
	КонецЕсли;
	Если ПолныйАдрес Тогда
		Ресурс =  ИмяПоТипуФайла+"/";   //28.07.2017 
	иначе
		Ресурс =  "exchange/"+ИмяПоТипуФайла+"/";
	КонецЕсли;	
		
//СтрокаПодключения =	"LAPENKOV_vi:8090";
СтрокаПодключения =	сайт1; //+":80";
login="admin"; password="cegthvfhbj";

Соединение = Новый HTTPСоединение(СтрокаПодключения, , login, password, , SSL);    //+++ 15.08.2017  https (SSL)!

Если Соединение = Неопределено Тогда
	Возврат Ложь;
КонецЕсли;


Заголовки = Новый Соответствие();
//Заголовки.Вставить("host", СтрокаПодключения+":"+формат(порт,"ЧГ=0"));  //"http://lapenkov_vi:8090    /api/ystapi
//Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
Заголовки.Вставить("HASH", "D5790E89580D8B75927F804E738CFCE");  
 
	// посылаем запрос
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	HTTPОтвет = Соединение.ОтправитьДляОбработки( ИмяФайла, Ресурс, 
													ИмяФайлаРезультата, Заголовки) ;
 
Соединение = Неопределено; // разорвать соединение

 ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
 ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
 СтрокаJSONРезультат = ТекстовыйФайлОтвет.ПолучитьТекст();
 ТекстовыйФайлОтвет = Неопределено; // отключается от файла
#Если Клиент Тогда
сообщить("Статус ответа: "+строка(HTTPОтвет.КодСостояния)+"
		 |Ответ сервера: '"+СтрокаJSONРезультат+"'" );
#КонецЕсли

	Если HTTPОтвет.КодСостояния=200 и СтрокаJSONРезультат="0" Тогда
		рез = Истина;
			файл = новый ФАЙЛ(ИмяФайлаРезультата);
	 		УдалитьФайлы(файл.Путь, файл.Имя);	
			//сообщить("удален временный файл ответа "+ИмяФайлаРезультата);
		
		Если УдалитьФайлПослеУдачнойВыгрузки Тогда
			файл = новый ФАЙЛ(ИмяФайла);
			Если файл.Существует() Тогда
				путь = файл.Путь;
				УдалитьФайлы(путь, файл.Имя);
				#Если Клиент Тогда
				сообщить("После удачной выгрузки - удален файл: "+ИмяФайла);
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		рез = ЛОЖЬ;
		сообщитьобОшибке("Статус ответа: "+строка(HTTPОтвет.КодСостояния)+"
			  		     |Ответ сервера: '"+СтрокаJSONРезультат+"'" );
	КонецЕсли;

возврат рез;

КонецФункции


процедура ЗапуститьЗагрузкуStore(Команда1="/Exchange/ImportProducts", СтрокаПодключения ="store.yst.ru")
	
	login="admin"; password="cegthvfhbj"; SSL=Ложь;

Соединение = Новый HTTPСоединение(СтрокаПодключения, ,login, password,,SSL);   
Если Соединение = Неопределено Тогда
	#Если Клиент Тогда
		сообщить("НЕТ соединения!");
	#КонецЕсли
	Возврат;
КонецЕсли;

Заголовки = Новый Соответствие();
Попытка
	// посылаем запрос
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("host", СтрокаПодключения);  
	
	Запрос1 = Новый HTTPЗапрос("http"+?(SSL,"s","")+"://"+СтрокаПодключения+Команда1, Заголовки);            //  http://store.yst.ru/Exchange/ImportProducts
	HTTPОтвет = Соединение.ОтправитьДляОбработки( Запрос1, ИмяФайлаРезультата);

Соединение = Неопределено; // разорвать соединение

 ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
 ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
 СтрокаJSONРезультат = ТекстовыйФайлОтвет.ПолучитьТекст();
 ТекстовыйФайлОтвет = Неопределено; // отключается от файла
 
 #Если Клиент Тогда
сообщить("Статус ответа: "+строка(HTTPОтвет.КодСостояния)+"
		 |Ответ сервера: '"+СтрокаJSONРезультат+"'" );
#КонецЕсли

Исключение
	рез = ЛОЖЬ;
	сообщитьобОшибке("Ошибка : "+ОписаниеОшибки() );
КонецПопытки;


КонецПроцедуры

 
//------------------------вспомогательные функции-------------------------------------------------

// Очистка регистрации изменений ВСЕХ объектов по узлу SIM
функция SIM_ОчиститьРегистрациюИзменений(ном = +1)
	
	попытка
	КодПланаОбмена = "sim"; // новый узел в базе ЯШТ
	УзелОбмена = ПланыОбмена.ПланОбмена_ОИМ.НайтиПоКоду(КодПланаОбмена);	
	УзелОбменаОб = УзелОбмена.ПолучитьОбъект();
	
	Если ном>0 Тогда
		УзелОбменаОб.НомерПринятого     = УзелОбменаОб.НомерОтправленного;  // Все принято успешно... удаляем регистрацию
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, УзелОбменаОб.НомерОтправленного);//УДАЛИТЬ ВСЮ РЕГИСТРАЦИЮ ИЗМЕНЕНИЙ до номСообщения!
		УзелОбменаОб.НомерОтправленного = УзелОбменаОб.НомерОтправленного + 1;  // отправляемое потом будет формироваться с этого момента!
	Иначе
		УзелОбменаОб.НомерПринятого     = 0;
		УзелОбменаОб.НомерОтправленного = 0;  
	//	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, УзелОбменаОб.НомерОтправленного);
	КонецЕсли;
	
	УзелОбменаОб.Записать();
	ном = УзелОбменаОб.НомерОтправленного;
	рез = Истина;
	
	исключение
	рез = ЛОЖЬ;
	#Если Клиент Тогда
		сообщить("Ошибка при очистке регистрации изменений по узлу "+КодПланаОбмена+" : "+ ОписаниеОшибки(), СтатусСообщения.Внимание );
	#КонецЕсли	
	КонецПопытки;
	
	возврат рез;
	
КонецФункции

//список всех документов 1-го или всех клиентов МиМ за период
Функция SIM_ПолучитьСписокВсехДокументов(ТипДокумента = "ЗаказПокупателя", ДатаНач='00010101', ДатаКон='00010101', Контр=Неопределено , толькоТерминальные=Ложь)
	
	Если ДатаНач='00010101' Тогда
		ДатаНач =НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	Если ДатаКон='00010101' Тогда
		ДатаКон =КонецДня(ТекущаяДата());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка
	               |ИЗ
	               |	Документ."+ТипДокумента+" КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Дата >= &ДатаНач
	               |	И ЗаказПокупателя.Дата <= &ДатаКон
	               |	И ЗаказПокупателя.СуммаДокумента > 0
				   |	И ЗаказПокупателя.Контрагент В (
//--------------------по всем клиентам Terminal (у кого есть точки!)-----------------------				   
				   |"+?(толькоТерминальные, "ВЫБРАТЬ РАЗЛИЧНЫЕ
				                            |	Точки.Владелец
				                            |ИЗ
				                            |	Справочник.Точки КАК Точки
				                            |ГДЕ
				                            |	НЕ Точки.ПометкаУдаления",
//-----------------------по всем клиентам Store (у кого есть авторизация!)-----------------------				   
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	Авторизация.Владелец
						|ИЗ
						|	Справочник.Авторизация КАК Авторизация
						|ГДЕ
						|	НЕ Авторизация.ПометкаУдаления
						|	И Авторизация.Наименование = &Наименование")+"
				   |)
				   |//Контр И ЗаказПокупателя.Контрагент = &Контрагент
				   |";
				   
	Запрос.УстановитьПараметр("Наименование", "Store.YST.ru");//фиксированное наименование!
				   
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач );
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон );
	
	Если Контр<>Неопределено  Тогда
		Запрос.УстановитьПараметр("Контрагент", Контр);
		Запрос.текст = стрЗаменить(	Запрос.текст, "//Контр","");
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	СписокЗаказов = новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения( Выборка.ВыгрузитьКолонку("Ссылка") );
	
	#Если Клиент Тогда
		сообщить("Список документов '"+ТипДокумента+"' с "+строка(ДатаНач)+" по "+строка(ДатаКон)+" содержит "+строка(СписокЗаказов.Количество())+" документов.");
	#КонецЕсли
	
	Возврат СписокЗаказов;
	
КонецФункции

//получаем список ИЗМЕНЕННЫХ документов по плану обмена ПланОбмена_ОИМ и узлу "sim"
функция SIM_ПолучитьСписокДокументов(ТипДокумента = "ЗаказПокупателя", флТерминал=ЛОЖЬ)  Экспорт
	
	КодПланаОбмена = "sim"; // новый узел в базе ЯШТ
	УзелОбмена = ПланыОбмена.ПланОбмена_ОИМ.НайтиПоКоду(КодПланаОбмена);	
	
// ФильтрДокументов = Документы.ЗаказПокупателя.ПустаяСсылка(); //СсылкаНаОбъект
    номСообщ = УзелОбмена.НомерОтправленного;
	СписокОбъектов = новый СписокЗначений;
	
	 ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, номСообщ );
	// 
	// i=0;
	//Пока ВыборкаИзменений.Следующий() цикл
	//	 i=i+1;
	//	 объект1 = ВыборкаИзменений.Получить();
	//	 Если ТипДокумента = "" Тогда  //ВСЕ объекты!
	//		СписокОбъектов.Добавить( объект1.ссылка );
	//	 ИначеЕсли типЗнч(объект1)=Тип("ДокументОбъект."+ТипДокумента) Тогда
	//	  	СписокОбъектов.Добавить( объект1.ссылка ); // список ссылок!
	//  	 КонецЕсли; 
	//КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументИзменения.Ссылка
	|ИЗ
	|	Документ."+ТипДокумента+".Изменения КАК ДокументИзменения
	|ГДЕ
	|	ДокументИзменения.Узел = &Узел
	//|	И ДокументИзменения.НомерСообщения есть Null";
	|	И ДокументИзменения.НомерСообщения = &НомерСообщения";
	
	Запрос.УстановитьПараметр("НомерСообщения", УзелОбмена.НомерОтправленного);
	Запрос.УстановитьПараметр("Узел", УзелОбмена);
	Результат = Запрос.Выполнить().Выгрузить();
	СписокОбъектов.Очистить();
	СписокОбъектов.ЗагрузитьЗначения( Результат.ВыгрузитьКолонку("Ссылка") );
	
	
	//+++( 24.06.2015 - берем только по клиентам, у которых есть Точки
	Если флТерминал Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	док1.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ."+ТипДокумента+" КАК док1
		               |ГДЕ
		               |	док1.Ссылка В (&СписокДок)
					   //список клиентов не велик <100
		               |	И док1.Контрагент В (ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |			Точки.Владелец КАК Владелец
		               |		ИЗ Справочник.Точки КАК Точки
		               |		ГДЕ НЕ Точки.ПометкаУдаления)";
		Запрос.УстановитьПараметр("СписокДок", СписокОбъектов);
		Результат = Запрос.Выполнить();
		табл = Результат.Выгрузить();
		
		СписокОбъектов.Очистить();
		СписокОбъектов.ЗагрузитьЗначения( табл.ВыгрузитьКолонку("Ссылка") );
	КонецЕсли;	
    //+++)
	
	возврат СписокОбъектов;
	
КонецФункции

Функция ЗаполнитьСоответствияСтатусовЗаказов() экспорт
	СоответствиеСтатусов = новый ТаблицаЗначений;
	СоответствиеСтатусов.Колонки.Добавить("Статус", Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(15, 2)));
	СоответствиеСтатусов.Колонки.Добавить("СтатусРасшифровка", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 0;
	нстр.СтатусРасшифровка = "0.Новый";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 1;
	нстр.СтатусРасшифровка = "1.Новый(согласован)";

	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 2;
	нстр.СтатусРасшифровка = "2.Подтвержден";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 3;
	нстр.СтатусРасшифровка = "3.Закрыт";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 4;
	нстр.СтатусРасшифровка = "4.Отгружен Полностью";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 5;
	нстр.СтатусРасшифровка = "5.Отгружен Частично";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 6;
	нстр.СтатусРасшифровка = "6.Доставлен На Склад";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 7;
	нстр.СтатусРасшифровка = "7.В Пути из Ярославля";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 8;
	нстр.СтатусРасшифровка = "8.На Отгрузке(полностью)";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 9;
	нстр.СтатусРасшифровка = "9.На Отгрузке(частично)";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 10;
	нстр.СтатусРасшифровка = "10.На Отгрузке(подготовка)";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 11;
	нстр.СтатусРасшифровка = "11.Вн.Перемещение(полностью)";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 12;
	нстр.СтатусРасшифровка = "12.Вн.Перемещение(частично)";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 13;
	нстр.СтатусРасшифровка = "13.Вн.Перемещение(подготовка)";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 14;
	нстр.СтатусРасшифровка = "14.Вн.Перемещение(Выполнено)";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 15;
	нстр.СтатусРасшифровка = "15.Отгрузка отменена!";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 16;
	нстр.СтатусРасшифровка = "16.Ожидает подтверждения поставщиком";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 17;
	нстр.СтатусРасшифровка = "17.Ожидает поступления на склад";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 18;
	нстр.СтатусРасшифровка = "18.Доставлен";
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 19;
	нстр.СтатусРасшифровка = "19.---------"; // не занято
	
	нстр = СоответствиеСтатусов.Добавить();
	нстр.Статус = 20;
	нстр.СтатусРасшифровка = "20.Отказ поставщика";

	нстр = СоответствиеСтатусов.Добавить(); //+++ 27.06.2018 Поставлен В Маршруте (Подготовка к отгрузке)
	нстр.Статус = 21;
	нстр.СтатусРасшифровка = "21.Поставлен в Маршрут";

 	нстр = СоответствиеСтатусов.Добавить(); //+++ 17.07.2018 разделение 2 статуса на 2
	нстр.Статус = 22;
	нстр.СтатусРасшифровка = "22.В Резерве";

	Возврат СоответствиеСтатусов;
КонецФункции

функция ПолучитьстатусыЗаказов(списокЗаказов) Экспорт
	СоответствиеСтатусов = ЗаполнитьСоответствияСтатусовЗаказов();
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	тзСоответствиеСтатусов.Статус,
	              |	тзСоответствиеСтатусов.СтатусРасшифровка
	              |ПОМЕСТИТЬ втСоответствияСтатусов
	              |ИЗ
	              |	&тзСоответствиеСтатусов КАК тзСоответствиеСтатусов
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	докЗаказПокупателя.Ссылка КАК Ссылка,
	              |	докЗаказПокупателя.Проведен,
	              |	докЗаказПокупателя.Дата,
	              |	докЗаказПокупателя.СуммаДокумента,
	              |	докЗаказПокупателя.ПометкаУдаления,
	              |	докЗаказПокупателя.Номер
	              |ПОМЕСТИТЬ Заказы
	              |ИЗ
	              |	Документ.ЗаказПокупателя КАК докЗаказПокупателя
	              |ГДЕ
	              |	докЗаказПокупателя.Ссылка В(&СписокЗаказов)
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяЗаказы.Ссылка.Дата, Заказы.Дата)) КАК ОбщийДата,
	              |	Заказы.Ссылка КАК Ссылка
	              |ПОМЕСТИТЬ ДатыОбщихЗаказов
	              |ИЗ
	              |	Заказы КАК Заказы
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
	              |		ПО Заказы.Ссылка = ЗаказПокупателяЗаказы.ЗаказПокупателя.Ссылка
	              |			И (НЕ ЗаказПокупателяЗаказы.Ссылка.ВводитьТолькоПеремещение)
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	Заказы.Ссылка
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяЗаказы.Ссылка, ДатыОбщихЗаказов.Ссылка)) КАК Общийссылка,
	              |	ДатыОбщихЗаказов.Ссылка КАК Ссылка
	              |ПОМЕСТИТЬ ОбщиеЗаказыПоследний
	              |ИЗ
	              |	ДатыОбщихЗаказов КАК ДатыОбщихЗаказов
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
	              |		ПО ДатыОбщихЗаказов.Ссылка = ЗаказПокупателяЗаказы.ЗаказПокупателя
	              |			И ДатыОбщихЗаказов.ОбщийДата = ЗаказПокупателяЗаказы.Ссылка.Дата
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ДатыОбщихЗаказов.Ссылка
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Общийссылка,
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	ЕСТЬNULL(ЗаказПокупателяЗаказы.Ссылка, ОбщиеЗаказыПоследний.Ссылка) КАК Общийссылка,
	              |	ОбщиеЗаказыПоследний.Ссылка КАК Ссылка,
	              |	ЕСТЬNULL(ЗаказПокупателяЗаказы.НомерСтроки, 0) КАК НомерСтроки
	              |ПОМЕСТИТЬ ОбщиеЗаказы
	              |ИЗ
	              |	ОбщиеЗаказыПоследний КАК ОбщиеЗаказыПоследний
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
	              |		ПО ОбщиеЗаказыПоследний.Общийссылка = ЗаказПокупателяЗаказы.Ссылка
	              |			И ОбщиеЗаказыПоследний.Ссылка = ЗаказПокупателяЗаказы.ЗаказПокупателя
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Общийссылка,
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ЗаказыПокупателейОстатки.ЗаказПокупателя
	              |ПОМЕСТИТЬ ОстаткиПоЗаказу
	              |ИЗ
	              |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	              |			,
	              |			ЗаказПокупателя В
	              |				(ВЫБРАТЬ
	              |					Заказы.Общийссылка
	              |				ИЗ
	              |					ОбщиеЗаказы КАК Заказы)) КАК ЗаказыПокупателейОстатки
	              |ГДЕ
	              |	ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток > 0
	              |	И ЗаказыПокупателейОстатки.СуммаУпрОстаток > 0
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ПродажиОбороты.ЗаказПокупателя
	              |ПОМЕСТИТЬ ОтгрузкиОбороты
	              |ИЗ
	              |	РегистрНакопления.Продажи.Обороты(
	              |			,
	              |			,
	              |			,
	              |			ЗаказПокупателя В
	              |				(ВЫБРАТЬ
	              |					Заказы.Общийссылка
	              |				ИЗ
	              |					ОбщиеЗаказы КАК Заказы)) КАК ПродажиОбороты
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	ВнутренниеЗаказыОбороты.ВнутреннийЗаказ.ДокументОснование
	              |ИЗ
	              |	РегистрНакопления.ВнутренниеЗаказы.Обороты(
	              |			,
	              |			,
	              |			,
	              |			ВнутреннийЗаказ.ДокументОснование В
	              |				(ВЫБРАТЬ
	              |					Заказы.Общийссылка
	              |				ИЗ
	              |					ОбщиеЗаказы КАК Заказы)) КАК ВнутренниеЗаказыОбороты
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ТоварыВОжиданииОтПоставщикаОбороты.ЗаказПокупателя
	              |ПОМЕСТИТЬ ЗаказыВОжидании
	              |ИЗ
	              |	РегистрНакопления.ТоварыВОжиданииОтПоставщика.Обороты КАК ТоварыВОжиданииОтПоставщикаОбороты
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ОбщиеЗаказы.Общийссылка КАК Общийссылка,
	              |	ОбщиеЗаказы.Ссылка КАК Ссылка,
	              |	МАКСИМУМ(ОстаткиПоЗаказу.ЗаказПокупателя) КАК ОстаткиПоЗаказам,
	              |	МАКСИМУМ(ОтгрузкиОбороты.ЗаказПокупателя) КАК ОтгрузкиПоЗаказам,
	              |	МАКСИМУМ(ОбщиеЗаказы.НомерСтроки) КАК НомерСтроки,
	              |	ЗаказыВОжидании.ЗаказПокупателя КАК ЗаказВОжидании
	              |ПОМЕСТИТЬ СводПоОтгрузкамИОстаткам
	              |ИЗ
	              |	ОбщиеЗаказы КАК ОбщиеЗаказы
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоЗаказу КАК ОстаткиПоЗаказу
	              |		ПО ОбщиеЗаказы.Общийссылка = ОстаткиПоЗаказу.ЗаказПокупателя
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ОтгрузкиОбороты КАК ОтгрузкиОбороты
	              |		ПО ОбщиеЗаказы.Общийссылка = ОтгрузкиОбороты.ЗаказПокупателя
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыВОжидании КАК ЗаказыВОжидании
	              |		ПО ОбщиеЗаказы.Общийссылка = ЗаказыВОжидании.ЗаказПокупателя
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ОбщиеЗаказы.Общийссылка,
	              |	ОбщиеЗаказы.Ссылка,
	              |	ЗаказыВОжидании.ЗаказПокупателя
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Общийссылка,
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	СводПоОтгрузкамИОстаткам.Ссылка КАК Ссылка,
	              |	5 КАК статус
	              |ПОМЕСТИТЬ СтатусыПоЧастичноОтгруженнымЗаказам
	              |ИЗ
	              |	СводПоОтгрузкамИОстаткам КАК СводПоОтгрузкамИОстаткам
	              |ГДЕ
	              |	НЕ СводПоОтгрузкамИОстаткам.ОстаткиПоЗаказам ЕСТЬ NULL 
	              |	И НЕ СводПоОтгрузкамИОстаткам.ОтгрузкиПоЗаказам ЕСТЬ NULL 
	              |	И СводПоОтгрузкамИОстаткам.Ссылка = СводПоОтгрузкамИОстаткам.Общийссылка
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	СводПоОтгрузкамИОстаткам.Общийссылка КАК Общийссылка,
	              |	СводПоОтгрузкамИОстаткам.Ссылка КАК Ссылка,
	              |	СводПоОтгрузкамИОстаткам.НомерСтроки
	              |ПОМЕСТИТЬ ЧастичноОтгруженныеОбщиеЗаказы
	              |ИЗ
	              |	СводПоОтгрузкамИОстаткам КАК СводПоОтгрузкамИОстаткам
	              |ГДЕ
	              |	СводПоОтгрузкамИОстаткам.Общийссылка <> СводПоОтгрузкамИОстаткам.Ссылка
	              |	И НЕ СводПоОтгрузкамИОстаткам.ОстаткиПоЗаказам ЕСТЬ NULL 
	              |	И НЕ СводПоОтгрузкамИОстаткам.ОтгрузкиПоЗаказам ЕСТЬ NULL 
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Общийссылка,
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ЧастичноОтгруженныеОбщиеЗаказы.Общийссылка КАК Общийссылка,
	              |	ЧастичноОтгруженныеОбщиеЗаказы.Ссылка КАК Ссылка,
	              |	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	              |	СУММА(ВЫБОР
	              |			КОГДА ЧастичноОтгруженныеОбщиеЗаказы.Ссылка = ЗаказПокупателяЗаказы.ЗаказПокупателя
	              |				ТОГДА 0
	              |			ИНАЧЕ ЗаказПокупателяТовары.Количество
	              |		КОНЕЦ) КАК Количество
	              |ПОМЕСТИТЬ ТоварыВОбщихЗаказахПослеТекущего
	              |ИЗ
	              |	ЧастичноОтгруженныеОбщиеЗаказы КАК ЧастичноОтгруженныеОбщиеЗаказы
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
	              |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	              |			ПО ЗаказПокупателяЗаказы.ЗаказПокупателя = ЗаказПокупателяТовары.Ссылка
	              |		ПО ЧастичноОтгруженныеОбщиеЗаказы.Общийссылка = ЗаказПокупателяЗаказы.Ссылка
	              |ГДЕ
	              |	ЗаказПокупателяЗаказы.НомерСтроки >= ЧастичноОтгруженныеОбщиеЗаказы.НомерСтроки
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ЧастичноОтгруженныеОбщиеЗаказы.Общийссылка,
	              |	ЧастичноОтгруженныеОбщиеЗаказы.Ссылка,
	              |	ЗаказПокупателяТовары.Номенклатура
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Общийссылка,
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ТоварыВОбщихЗаказахПослеТекущего.Общийссылка КАК Общийссылка,
	              |	ТоварыВОбщихЗаказахПослеТекущего.Ссылка КАК Ссылка,
	              |	СУММА(ВЫБОР
	              |			КОГДА ТоварыВОбщихЗаказахПослеТекущего.Количество < ЗаказыПокупателейОстатки.КоличествоОстаток
	              |				ТОГДА ЗаказыПокупателейОстатки.КоличествоОстаток - ТоварыВОбщихЗаказахПослеТекущего.Количество
	              |			ИНАЧЕ 0
	              |		КОНЕЦ) КАК Недогруз
	              |ПОМЕСТИТЬ НедогрузНаТекущийЗаказ
	              |ИЗ
	              |	ТоварыВОбщихЗаказахПослеТекущего КАК ТоварыВОбщихЗаказахПослеТекущего
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
	              |				,
	              |				ЗаказПокупателя В
	              |					(ВЫБРАТЬ
	              |						Заказы.Общийссылка
	              |					ИЗ
	              |						ОбщиеЗаказы КАК Заказы)) КАК ЗаказыПокупателейОстатки
	              |		ПО ТоварыВОбщихЗаказахПослеТекущего.Общийссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
	              |			И ТоварыВОбщихЗаказахПослеТекущего.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ТоварыВОбщихЗаказахПослеТекущего.Общийссылка,
	              |	ТоварыВОбщихЗаказахПослеТекущего.Ссылка
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Общийссылка,
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	СводПоОтгрузкамИОстаткам.Ссылка КАК Ссылка,
	              |	ВЫБОР
	              |		КОГДА СводПоОтгрузкамИОстаткам.Общийссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.Доставлен)
	              |			ТОГДА 18
	              |		ИНАЧЕ 4
	              |	КОНЕЦ КАК Статус
	              |ПОМЕСТИТЬ статусыОтгруженныеПолностьюПоОбщимЗаказам
	              |ИЗ
	              |	СводПоОтгрузкамИОстаткам КАК СводПоОтгрузкамИОстаткам
	              |ГДЕ
	              |	СводПоОтгрузкамИОстаткам.ОстаткиПоЗаказам ЕСТЬ NULL 
	              |	И НЕ СводПоОтгрузкамИОстаткам.ОтгрузкиПоЗаказам ЕСТЬ NULL 
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	НедогрузНаТекущийЗаказ.Ссылка КАК Ссылка,
	              |	ВЫБОР
	              |		КОГДА НедогрузНаТекущийЗаказ.Недогруз = 0
	              |			ТОГДА ВЫБОР
	              |					КОГДА НедогрузНаТекущийЗаказ.Общийссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.Доставлен)
	              |						ТОГДА 18
	              |					ИНАЧЕ 4
	              |				КОНЕЦ
	              |		ИНАЧЕ 5
	              |	КОНЕЦ КАК Статус
	              |ПОМЕСТИТЬ СтатусыИзЧастичноОтгруженныхОбщихЗаказов
	              |ИЗ
	              |	НедогрузНаТекущийЗаказ КАК НедогрузНаТекущийЗаказ
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	СводПоОтгрузкамИОстаткам.Ссылка КАК Ссылка,
	              |	ВЫБОР
	              |		КОГДА СводПоОтгрузкамИОстаткам.Общийссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.Вобработке)
	              |			ТОГДА 16
	              |		КОГДА СводПоОтгрузкамИОстаткам.Общийссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.Отменен)
	              |			ТОГДА 20
	              |		ИНАЧЕ 3
	              |	КОНЕЦ КАК Статус
	              |ПОМЕСТИТЬ СтатусыПоЗакрытымЗаказам
	              |ИЗ
	              |	СводПоОтгрузкамИОстаткам КАК СводПоОтгрузкамИОстаткам
	              |ГДЕ
	              |	СводПоОтгрузкамИОстаткам.ОстаткиПоЗаказам ЕСТЬ NULL 
	              |	И СводПоОтгрузкамИОстаткам.ОтгрузкиПоЗаказам ЕСТЬ NULL 
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	СводПоОтгрузкамИОстаткам.Ссылка,
	              |	17 КАК Статус
	              |ПОМЕСТИТЬ СтатусыЗаказыВОжидании
	              |ИЗ
	              |	СводПоОтгрузкамИОстаткам КАК СводПоОтгрузкамИОстаткам
	              |ГДЕ
	              |	СводПоОтгрузкамИОстаткам.ОтгрузкиПоЗаказам ЕСТЬ NULL 
	              |	И НЕ СводПоОтгрузкамИОстаткам.ОстаткиПоЗаказам ЕСТЬ NULL 
	              |	И НЕ СводПоОтгрузкамИОстаткам.ЗаказВОжидании ЕСТЬ NULL 
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	СводПоОтгрузкамИОстаткам.Общийссылка КАК Общийссылка,
	              |	СводПоОтгрузкамИОстаткам.Ссылка КАК Ссылка
	              |ПОМЕСТИТЬ НеОтгруженныеЗаказы
	              |ИЗ
	              |	СводПоОтгрузкамИОстаткам КАК СводПоОтгрузкамИОстаткам
	              |ГДЕ
	              |	СводПоОтгрузкамИОстаткам.ОтгрузкиПоЗаказам ЕСТЬ NULL 
	              |	И НЕ СводПоОтгрузкамИОстаткам.ОстаткиПоЗаказам ЕСТЬ NULL 
	              |	И СводПоОтгрузкамИОстаткам.ЗаказВОжидании ЕСТЬ NULL 
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Общийссылка,
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяЗаказы.Ссылка.Дата, НеОтгруженныеЗаказы.Общийссылка.Дата)) КАК ДатаНаперемещение,
	              |	НеОтгруженныеЗаказы.Общийссылка КАК Общийссылка
	              |ПОМЕСТИТЬ ДатыЗаказовНаПеремещение
	              |ИЗ
	              |	НеОтгруженныеЗаказы КАК НеОтгруженныеЗаказы
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
	              |		ПО НеОтгруженныеЗаказы.Общийссылка = ЗаказПокупателяЗаказы.ЗаказПокупателя
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	НеОтгруженныеЗаказы.Общийссылка
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Общийссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ДатыЗаказовНаПеремещение.Общийссылка КАК Общийссылка,
	              |	ЗаказПокупателяЗаказы.Ссылка КАК ПеремещениеСсылка,
	              |	НеОтгруженныеЗаказы.Ссылка КАК Ссылка
	              |ПОМЕСТИТЬ НеотгруженныеСЗаказамиНаПеремещение
	              |ИЗ
	              |	ДатыЗаказовНаПеремещение КАК ДатыЗаказовНаПеремещение
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
	              |		ПО ДатыЗаказовНаПеремещение.Общийссылка = ЗаказПокупателяЗаказы.ЗаказПокупателя
	              |			И ДатыЗаказовНаПеремещение.ДатаНаперемещение = ЗаказПокупателяЗаказы.Ссылка.Дата
	              |		ПОЛНОЕ СОЕДИНЕНИЕ НеОтгруженныеЗаказы КАК НеОтгруженныеЗаказы
	              |		ПО ДатыЗаказовНаПеремещение.Общийссылка = НеОтгруженныеЗаказы.Общийссылка
				  |ИНДЕКСИРОВАТЬ ПО
	              |	Общийссылка,
	              |	ПеремещениеСсылка,
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ВЫБОР
	              |		КОГДА ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка ЕСТЬ NULL 
	              |			ТОГДА ВЫБОР
	              |					КОГДА НЕ ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка ЕСТЬ NULL 
	              |						ТОГДА ВЫБОР
	              |								КОГДА ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.Проведен
	              |									ТОГДА ВЫБОР
	              |											КОГДА ЗаданиеНаОтгрузкуЗаказыПокупателей.КоличествоШтук = ЗаданиеНаОтгрузкуЗаказыПокупателей.КоличествоШтукОтгружено
	              |												ТОГДА ВЫБОР
	              |														КОГДА ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.Выполнено
	              |															ТОГДА 14
	              |														ИНАЧЕ 11
	              |													КОНЕЦ
	              |											ИНАЧЕ 12
	              |										КОНЕЦ
				  //++ 27.06.2018 --- не может быть такого! исключено в выборке!
				  //|								КОГДА ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.ПометкаУдаления = ИСТИНА
				  //|									ТОГДА -1
	              |								ИНАЧЕ 13
	              |							КОНЕЦ
	              |					ИНАЧЕ ВЫБОР
	              |							КОГДА НЕ НеотгруженныеСЗаказамиНаПеремещение.Общийссылка.Транзит
	              |									ИЛИ НеотгруженныеСЗаказамиНаПеремещение.ПеремещениеСсылка ЕСТЬ NULL 
	              |								ТОГДА ВЫБОР
	              |										КОГДА НеотгруженныеСЗаказамиНаПеремещение.Общийссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.Вобработке)
	              |											ТОГДА 16
	              |										КОГДА НеотгруженныеСЗаказамиНаПеремещение.Общийссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.Отменен)
	              |											ТОГДА 20
	              |										КОГДА НеотгруженныеСЗаказамиНаПеремещение.Общийссылка.Проверен
				  //|											ТОГДА 2
	              //+++( 27.06.2018 --- добавляем статус 21 --- проверен и поставлен в маршрут -----------------
	              |											ТОГДА выбор когда НеотгруженныеСЗаказамиНаПеремещение.Общийссылка.ВМаршрут 
				  |												        тогда 21
				  |												        иначе 2 Конец
				  //+++)
	              |										ИНАЧЕ 1
	              |									КОНЕЦ
	              |							ИНАЧЕ NULL
	              |						КОНЕЦ
	              |				КОНЕЦ
	              |		ИНАЧЕ ВЫБОР
	              |				КОГДА ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.Проведен
	              |					ТОГДА ВЫБОР
	              |							КОГДА ЗаданиеНаОтгрузкуЗаказыПокупателей.КоличествоШтук = ЗаданиеНаОтгрузкуЗаказыПокупателей.КоличествоШтукОтгружено
	              |								ТОГДА 8
	              |							ИНАЧЕ 9
	              |						КОНЕЦ
				 //++ 27.06.2018 --- не может быть такого! исключено в выборке!
				  //|				КОГДА ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.ПометкаУдаления = ИСТИНА
				  //|					ТОГДА -1
	              |				ИНАЧЕ 10
	              |			КОНЕЦ
	              |	КОНЕЦ КАК Статус,
	              |	НеотгруженныеСЗаказамиНаПеремещение.Ссылка КАК Ссылка,
	              |	НеотгруженныеСЗаказамиНаПеремещение.ПеремещениеСсылка КАК ПеремещениеСсылка,
	              |	НеотгруженныеСЗаказамиНаПеремещение.Общийссылка КАК Общийссылка
	              |ПОМЕСТИТЬ СтатусыПоЗаказамНаОтгрузке
	              |ИЗ
	              |	НеотгруженныеСЗаказамиНаПеремещение КАК НеотгруженныеСЗаказамиНаПеремещение

//+++ 27.06.2018 - исключение удаленных документов! и ограничение сразу по заказам

	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
	//|		ПО НеотгруженныеСЗаказамиНаПеремещение.Общийссылка = ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ЗаданиеНаПеремещениеЗаказыПокупателей
	//|		ПО НеотгруженныеСЗаказамиНаПеремещение.Общийссылка = ЗаданиеНаПеремещениеЗаказыПокупателей.ЗаказПокупателя
	
 				 |ЛЕВОЕ СОЕДИНЕНИЕ (выбрать * из Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей как ЗадНаОтгрузку 
				 |						 где  ЗадНаОтгрузку.Ссылка.ПометкаУдаления=ЛОЖЬ 
				 |								И ЗадНаОтгрузку.ЗаказПокупателя в (Выбрать ВТ.ОбщийСсылка из НеотгруженныеСЗаказамиНаПеремещение как ВТ) ) КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
				 |		ПО НеотгруженныеСЗаказамиНаПеремещение.Общийссылка = ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя
	             |ЛЕВОЕ СОЕДИНЕНИЕ (выбрать * из Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей как ЗадНаПеремещение
				 |						 где  ЗадНаПеремещение.Ссылка.ПометкаУдаления=ЛОЖЬ 
				 |							  И ЗадНаПеремещение.ЗаказПокупателя в (Выбрать ВТ.ОбщийСсылка из НеотгруженныеСЗаказамиНаПеремещение как ВТ) ) КАК ЗаданиеНаПеремещениеЗаказыПокупателей
				 |		ПО НеотгруженныеСЗаказамиНаПеремещение.Общийссылка = ЗаданиеНаПеремещениеЗаказыПокупателей.ЗаказПокупателя
	 //+++)

	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Ссылка,
	              |	ПеремещениеСсылка,
	              |	Общийссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	СтатусыПоЗаказамНаОтгрузке.Ссылка КАК Ссылка,
	              |	СтатусыПоЗаказамНаОтгрузке.ПеремещениеСсылка КАК ПеремещениеСсылка,
	              |	СтатусыПоЗаказамНаОтгрузке.Общийссылка КАК Общийссылка
	              |ПОМЕСТИТЬ ЗаказыВПутиНаФилиалы
	              |ИЗ
	              |	СтатусыПоЗаказамНаОтгрузке КАК СтатусыПоЗаказамНаОтгрузке
	              |ГДЕ
	              |	СтатусыПоЗаказамНаОтгрузке.Статус ЕСТЬ NULL 
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Ссылка,
	              |	ПеремещениеСсылка,
	              |	Общийссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ЗаказыВПутиНаФилиалы.Ссылка КАК Ссылка,
	              |	МАКСИМУМ(ВЫБОР
	              |			КОГДА НЕ ПеремещениеТоваров.Ссылка ЕСТЬ NULL 
	              |					И ПеремещениеТоваров.Проведен
	            //  |				ТОГДА 6
				   //+++( 27.06.2018 --- добавляем статус 21 --- заказ Доставлен в Филиал и Поставлен в маршрут -----------------
	              |					ТОГДА выбор когда ЗаказыВПутиНаФилиалы.Ссылка.ВМаршрут 
				  |							тогда 21
				  |							иначе 6 Конец
				  //+++ иначе в пути, ещё едет... и даже, если уже поставят в маршрут, будет статус 7
	              |			ИНАЧЕ 7 
				  |		КОНЕЦ) КАК статус
	              |ПОМЕСТИТЬ СтатусыПоФилиаламВПути
	              |ИЗ
	              |	ЗаказыВПутиНаФилиалы КАК ЗаказыВПутиНаФилиалы
				  
				//+++( 27.06.2018 - ограничение по неудаленным и сразу по списку
				//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
				//|			ПО ЗаказыВПутиНаФилиалы.ПеремещениеСсылка = ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя
				//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
				//|			ПО ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация = ПеремещениеТоваров.Перемещение
				 
				 |ЛЕВОЕ СОЕДИНЕНИЕ (выбрать * из Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей как ЗадНаОтгрузку 
				 |						 ГДЕ  ЗадНаОтгрузку.Ссылка.ПометкаУдаления = ЛОЖЬ 
				 |						    И ЗадНаОтгрузку.ЗаказПокупателя в (выбрать вт.ПеремещениеСсылка из ЗаказыВПутиНаФилиалы как ВТ) ) КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
			     |			ПО ЗаказыВПутиНаФилиалы.ПеремещениеСсылка = ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя
					 
	       	     |			ЛЕВОЕ СОЕДИНЕНИЕ (выбрать ДокПеремещение.Ссылка,  ДокПеремещение.Перемещение, ДокПеремещение.Проведен 
				 |								ИЗ Документ.ПеремещениеТоваров как ДокПеремещение
				 |								ГДЕ ДокПеремещение.ПометкаУдаления = ЛОЖЬ
				 |									и ДокПеремещение.Перемещение<>Значение(Документ.ПеремещениеТоваров.ПустаяСсылка) ) КАК ПеремещениеТоваров
	              |			ПО выразить(ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация как Документ.ПеремещениеТоваров).ссылка = ПеремещениеТоваров.Перемещение
         		//+++)
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ЗаказыВПутиНаФилиалы.Ссылка
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	статусыОтгруженныеПолностьюПоОбщимЗаказам.Ссылка,
	              |	статусыОтгруженныеПолностьюПоОбщимЗаказам.Статус
	              |ПОМЕСТИТЬ ВсеЗаказыСоСтатусами
	              |ИЗ
	              |	статусыОтгруженныеПолностьюПоОбщимЗаказам КАК статусыОтгруженныеПолностьюПоОбщимЗаказам
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	СтатусыПоЧастичноОтгруженнымЗаказам.Ссылка,
	              |	СтатусыПоЧастичноОтгруженнымЗаказам.статус
	              |ИЗ
	              |	СтатусыПоЧастичноОтгруженнымЗаказам КАК СтатусыПоЧастичноОтгруженнымЗаказам
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	СтатусыИзЧастичноОтгруженныхОбщихЗаказов.Ссылка,
	              |	СтатусыИзЧастичноОтгруженныхОбщихЗаказов.Статус
	              |ИЗ
	              |	СтатусыИзЧастичноОтгруженныхОбщихЗаказов КАК СтатусыИзЧастичноОтгруженныхОбщихЗаказов
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	СтатусыПоЗакрытымЗаказам.Ссылка,
	              |	СтатусыПоЗакрытымЗаказам.Статус
	              |ИЗ
	              |	СтатусыПоЗакрытымЗаказам КАК СтатусыПоЗакрытымЗаказам
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	СтатусыПоЗаказамНаОтгрузке.Ссылка,
	              |	СтатусыПоЗаказамНаОтгрузке.Статус
	              |ИЗ
	              |	СтатусыПоЗаказамНаОтгрузке КАК СтатусыПоЗаказамНаОтгрузке
	              |ГДЕ
	              |	НЕ СтатусыПоЗаказамНаОтгрузке.Статус ЕСТЬ NULL 
	              |	И СтатусыПоЗаказамНаОтгрузке.Статус > 0
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	СтатусыПоФилиаламВПути.Ссылка,
	              |	СтатусыПоФилиаламВПути.статус
	              |ИЗ
	              |	СтатусыПоФилиаламВПути КАК СтатусыПоФилиаламВПути
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	СтатусыЗаказыВОжидании.Ссылка,
	              |	СтатусыЗаказыВОжидании.Статус
	              |ИЗ
	              |	СтатусыЗаказыВОжидании КАК СтатусыЗаказыВОжидании
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	ВсеЗаказыСоСтатусами.Статус,
	              |	ВсеЗаказыСоСтатусами.Ссылка КАК Заказ,
	              |	ЕСТЬNULL(втСоответствияСтатусов.СтатусРасшифровка, """") КАК СтатусРасшифровка
	              |ИЗ
	              |	ВсеЗаказыСоСтатусами КАК ВсеЗаказыСоСтатусами
	              |		ЛЕВОЕ СОЕДИНЕНИЕ втСоответствияСтатусов КАК втСоответствияСтатусов
	              |		ПО ВсеЗаказыСоСтатусами.Статус = втСоответствияСтатусов.Статус";
	
	//Запрос.МенеджерВременныхТаблиц = МВ;
	Запрос.УстановитьПараметр("тзСоответствиеСтатусов",СоответствиеСтатусов);
	Запрос.УстановитьПараметр("СписокЗаказов",СписокЗаказов);
	//Запрос.УстановитьПараметр("ДатаНач",НачПериода);
	//Запрос.УстановитьПараметр("ДатаКон",КонПериода);

	Результат = Запрос.Выполнить().Выгрузить();
	
возврат Результат;	
КонецФункции
                                                                
//=================Выгрузка справочников=================================
// производится раз в сутки... в XML формате:
// единым запросом получаем сразу все, потом фильтруем только нужные данные
//   ИмяXML = Producer  -> таблица Producer s
//   ИмяXML = Model  -> таблица Model s
//   ИмяXML = Typorazmer -> таблица Typorazmer s
//   ИмяXML = Product -> таблица Product s
//   ИмяXML = PriceOfProduct -> таблица PriceOfProduct s  - общие и рекомендованные цены для всех клиентов
//=============Клиенты и прайсы по клиентам - из МИМ==============================
//   ИмяXML = Partner
//  имяTXTФайла = PriceOfPartners
//

//ГЛАВНАЯ ПРОЦЕДУРА ВЫГРУЗКИ ВСЕХ СПРАВОЧНИКОВ (1 РАЗ В СУТКИ)
процедура SIM_ВыгрузитьСправочникиXML() Экспорт
	
	ТаблНом0 = SIM_ПолучитьТаблицуТоваров(ЛОЖЬ); // БЕЗ остатков!
	
	путь = КаталогВременныхФайлов(); // в темп на сервере
	ВыгружатьВтерминал = истина;  //+++ 27.03.2015 то же самое и в терминал
		
//---------сворачиваем по нужным полям и выгружаем------------------	
ТаблНом = ТаблНом0.Скопировать();
	sim_ВыгрузитьПроизводителей(ТаблНом, путь);	
ТаблНом = ТаблНом0.Скопировать();
	sim_ВыгрузитьМодели(ТаблНом, путь);	
ТаблНом = ТаблНом0.Скопировать();
	sim_ВыгрузитьТипоразмеры(ТаблНом, путь);
	
	sim_ВыгрузитьSuppliers(путь);            // Плотников, 27.10.2016
	//sim_ВыгрузитьRestOfSupplier(путь);       // выгрузки в терминал для сторонних поставщиков
	
ТаблНом=Неопределено;

//+++ 11.08.2016 - 143тыс. товаров нельзя 5 раз объединять!
	ТаблНом1 = ТаблНом0.Скопировать();
   	//ТаблНом1.Свернуть("Номенклатура");
	СписокНом = ТаблНом1.выгрузитьКолонку("Номенклатура");
	sim_ВыгрузитьСвойстваПродуктов(СписокНом, путь);
	ТаблНом1=Неопределено;

	Если ВыгружатьВтерминал Тогда
		ТаблНом2 = ТаблНом0.Скопировать();
		sim_ВыгрузитьЦеныПродуктов(ТаблНом2, путь, Истина);	
		ТаблНом2=Неопределено;
	КонецЕсли;
	
	SIM_ВыгрузитьКлиентовStore(путь);
	SIM_ВыгрузитьАдресаКлиентовStore(путь);//+++ 05.10.2017 по задаче № 34154
	SIM_ВыгрузитьМенеджеровStore(путь);
	SIM_ВыгрузкаПомощниковМенеджеров(путь);
	SIM_ВыгрузитьМенеджеровПоТоварнымГруппамStore(Путь);
	SIM_ВыгрузитьПользователейStore(путь);
	sim_ВыгрузитьSeasonRestofPartners(путь);
	//14.08.18 Смирнов
	SIM_ВыгрузитьRecommendedPrice(путь);
//=========продукты в последнюю очередь======================================	
	ТаблНом3 = ТаблНом0.Скопировать();
	sim_ВыгрузитьПродукты(ТаблНом3, путь);	
    ТаблНом3=Неопределено;
	
	попытка
		врФТП = Новый FTPСоединение("store.yst.ru",,"adminftp", "Hwrsy53#te287",, Истина ); //01.09.2016 - новый пароль!
		#Если Клиент Тогда
			сообщить("Успешно установлено подключение к ftp://store.yst.ru", СтатусСообщения.Информация);
		#КонецЕсли	
	Исключение	
		#Если Клиент Тогда
			сообщить("ошибка подключения к FTP : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли
		возврат;
	КонецПопытки;
	
//--------------------------------------------------------------------------------------------
	списокФайлов = новый массив;
	списокФайлов.Добавить("Producer.xml");
	списокФайлов.Добавить("Model.xml");
	списокФайлов.Добавить("Tiporazmer.xml");
	списокФайлов.Добавить("Product.xml");
	списокФайлов.Добавить("ProductProperties.xml");	
	
	списокФайлов.Добавить("Partner.xml");
	списокФайлов.Добавить("AddressesOfPartners.xml"); //+++ 05.10.2017 по задаче № 34154
	списокФайлов.Добавить("User.xml");
	списокФайлов.Добавить("Manager.xml");
	списокФайлов.Добавить("ManagersOfPartners.xml");
	списокФайлов.Добавить("AssistantsOfManagers.xml"); //27.11.2017 задача 36132 (помощники менеджеров)
	
	списокФайлов.Добавить("Suppliers.xml");
	списокФайлов.Добавить("RestOfSuppliers.xml");

	списокФайлов.Добавить("seasonrestofpartners.txt");
	
	//14.08.18 Смирнов
	списокФайлов.Добавить("RecommendedPrice.txt");
	
	Попытка
		
		Если ВыгружатьВтерминал Тогда
			Для i=0 по списокФайлов.Количество()-1 Цикл
			врФТП.Записать(путь+списокФайлов[i], "terminal.yst.ru/ImportData/"+списокФайлов[i]);
			КонецЦикла;
		КонецЕсли;
		
		ИмяФайлаТерминал = "PriceOfProductTerminal.xml";   
		ИмяФайла = "PriceOfProduct.xml";
		Если ВыгружатьВтерминал Тогда // другой прайс!
			врФТП.Записать(путь+ИмяФайлаТерминал, "terminal.yst.ru/ImportData/"+ИмяФайла);
		КонецЕсли;
			
		#Если Клиент Тогда
	//		сообщить("Успешно скопированы 9 файлов: Producer,Model,Tiporazmer,Product,ProductProperties, PriceOfProduct, Partner,User,Manager  на  ftp://store.yst.ru", СтатусСообщения.Информация);
			Если ВыгружатьВтерминал Тогда
			сообщить("Успешно скопированы "+строка(списокФайлов.Количество()+1)+" файлов на ftp://terminal.yst.ru", СтатусСообщения.Информация);
	        КонецЕсли;
		#КонецЕсли
		
	Исключение	
		#Если Клиент Тогда
			сообщить("ошибка при копировании файлов на FTP : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли
	КонецПопытки;
	 
//28.07.2017-------выключена Store давно уже нет! -------------
	//Попытка	//+++ 31.03.2015 - попытка
	//	ЗапуститьЗагрузкуStore(); //все в Store
	//Исключение	
	//	#Если Клиент Тогда
	//		сообщить("ошибка при выполнении операции загрузки справочников в Store: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	//	#КонецЕсли
	//КонецПопытки;

КонецПроцедуры


//---------таблица ПО ЗНАЧЕНИЮ-------------------------------------

//Producer.xml
процедура sim_ВыгрузитьПроизводителей(ост, путь="")	
//+++ 17.10.2014 - производителей по товарам - больше, чем по моделям!
//
//	ост.Свернуть("МодельПроизводительКод, МодельПроизводитель, ПроизводительАктивен");
//	ост.Сортировать("МодельПроизводительКод");
	ост.Свернуть("ПроизводительКод, Производитель, НомПроизводительАктивен");
	ост.Сортировать("ПроизводительКод");
	
	ост.колонки.добавить("Вид");
	ост.колонки.добавить("Описание");
	таблСоотв = новый СписокЗначений;
		таблСоотв.Добавить("Диски", "2");
		таблСоотв.Добавить("Шины",  "1");
		таблСоотв.Добавить("АКБ",   "3");
   		таблСоотв.Добавить("Аксессуары","4");
 		таблСоотв.Добавить("Автозапчасти","4");
        таблСоотв.Добавить("",    "0");
		N=ост.Количество(); i=0;
	Пока i<N Цикл
		
		Если  НЕ ЗначениеЗаполнено(ост[i].ПроизводительКод)
	//+++ 17.06.2015		или ост[i].ПроизводительКод = 3333 
			Тогда
			#Если Клиент Тогда
			сообщить("Строка удалена: "+строка(ост[i].ПроизводительКод)+" - "+строка(ост[i].Производитель)+" - "+строка(ост[i].Вид) );
			#КонецЕсли	
	//ЗАМЕНА Replica TD >> REPLICA  3333 >>65     ВЫКЛЮЧЕНА с 17.06.2015!
		ост.Удалить(i); N=N-1;
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ост[i].Производитель) Тогда
			стр1 = таблСоотв.НайтиПоЗначению( строка(ост[i].Производитель.Родитель) );
			Если стр1=Неопределено Тогда 
				#Если Клиент Тогда
				сообщить(строка(i)+" не определен вид Производителя: "+строка(ост[i].Производитель) );
				#КонецЕсли	
				ост[i].Вид = "0";
			иначе	
            	ост[i].Вид = стр1.Представление;
			КонецЕсли;
		иначе
			ост[i].Вид = "0";
		КонецЕсли;
		
	//ЗАМЕНА Replica TD >> REPLICA  3333 >>65     ВЫКЛЮЧЕНА с 17.06.2015!
		//Если ост[i].ПроизводительКод=3333 Тогда //Replica TD >> REPLICA
		//	ост[i].ПроизводительКод=65;
		//КонецЕсли;
	
		ост[i].Описание = "";
	i=i+1;	
    КонецЦикла;
	
	выгрузитьВTXT(ост, путь,,"Producer"); //"producers.txt" МодельПроизводительКод, МодельПроизводитель, Вид
КонецПроцедуры	//sim_ВыгрузитьПроизводителей

//Model.xml
процедура sim_ВыгрузитьМодели(ост, путь="")
ост.Свернуть("МодельКод, МодельПроизводительКод, Модель, МодельСезон");
 	
	ост.колонки.добавить("ПроизводительКод");   //строковый
	ост.колонки.добавить("Сезон");
	ост.колонки.добавить("Картинка");
    ост.колонки.добавить("Описание");
   ост.колонки.добавить("МодельКодЧисло");
	  
  	таблСоотв = новый СписокЗначений;
	таблСоотв.Добавить(перечисления.ТипыСезонности.лето,     "summer");
	таблСоотв.Добавить(перечисления.ТипыСезонности.зима,     "winter");
	таблСоотв.Добавить(перечисления.ТипыСезонности.всесезон, "allseason");
	таблСоотв.Добавить(перечисления.ТипыСезонности.грузовые, "cargo");
	таблСоотв.Добавить(перечисления.ТипыСезонности.сельхоз,  "agricult");
	таблСоотв.Добавить(перечисления.ТипыСезонности.ПустаяСсылка(), "");
	N = ост.Количество();  i=0;
	Пока i<N Цикл
		
		Если НЕ ЗначениеЗаполнено(ост[i].МодельКод) Тогда
			#Если Клиент Тогда
			сообщить("Удалена модель '"+строка(ост[i].Модель)+"' без кода.");
			#КонецЕсли
			ост.Удалить(i); N=N-1;
		    Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ост[i].МодельПроизводительКод) Тогда
			#Если Клиент Тогда
			сообщить("Нет производителя у модели: "+ост[i].МодельКод+")"+строка(ост[i].Модель)+" Пустой производитель имеет код = 0");
			#КонецЕсли
			ост[i].ПроизводительКод = "";  //NOT null
		Иначе
			ост[i].ПроизводительКод =СокрЛП( Формат( ост[i].МодельПроизводительКод, "ЧН=0; ЧГ=0") ); //строка!
		КонецЕсли;
		
		попытка
			ост[i].МодельКод = СокрЛП( Формат( число(ост[i].МодельКод), "ЧГ=0") );
			ост[i].МодельКодЧисло = число(ост[i].МодельКод);
		исключение
			#Если Клиент Тогда
			сообщить("Код модели: '"+ост[i].МодельКод+"' ("+строка(ост[i].Модель)+") - не является числом!");
			#КонецЕсли
		   	ост.Удалить(i); N=N-1;
			Продолжить;
		КонецПопытки;
		
		стр1 = таблСоотв.НайтиПоЗначению( ост[i].МодельСезон );
		Если стр1=Неопределено Тогда 
			#Если Клиент Тогда
			сообщить(строка(i)+" нет сезона у модели "+строка(ост[i].Модель), СтатусСообщения.Внимание );
			#КонецЕсли
			ост[i].Сезон = "";
		иначе	
			ост[i].Сезон =стр1.Представление;
		КонецЕсли;
		ост[i].Картинка = "";
		ост[i].Описание = "";
	i=i+1;	
	КонецЦикла;	
	  ост.Колонки.Удалить("МодельСезон");
	  ост.Колонки.Удалить("МодельПроизводительКод");
	  ост.Колонки.Сдвинуть("ПроизводительКод", -1);
	  
	  ост.сортировать("МодельКодЧисло");
	  ост.Колонки.Удалить("МодельКодЧисло");
	  
	  
  	  выгрузитьВTXT(ост,путь,,"Model");  //  МодельКод, ПроизводительКод, Модель,  Сезон, Картинка, Описание
		
КонецПроцедуры //sim_ВыгрузитьМодели

//Tiporazmer.xml
процедура sim_ВыгрузитьТипоразмеры(ост, путь="")
		ост.Свернуть("ТипоразмерКод, Типоразмер, ВидТовара");
		ост.Сортировать("ТипоразмерКод");
		
		ост.колонки.добавить("Диаметр");
		ост.колонки.добавить("Ширина");
		ост.колонки.добавить("Высота");
		ост.колонки.добавить("PCD");
		ост.колонки.добавить("Вылет");
		ост.колонки.добавить("ДиаметрСтупицы");
		ост.колонки.добавить("КоличествоОтверстий"); //Holes
		ост.колонки.добавить("Вид"); //
		
		таблСоотв = новый СписокЗначений;
		таблСоотв.Добавить(перечисления.ВидыТоваров.Диски, "2");
		таблСоотв.Добавить(перечисления.ВидыТоваров.Шины,  "1");
		таблСоотв.Добавить(перечисления.ВидыТоваров.АКБ,   "3");
   		таблСоотв.Добавить(перечисления.ВидыТоваров.Аксессуары,"4");
        таблСоотв.Добавить(перечисления.ВидыТоваров.Прочее,    "0");

		
		N = ост.Количество();  i=0; Код0=0;
		Пока i<N Цикл
			Если НЕ ЗначениеЗаполнено(ост[i].ТипоразмерКод) Тогда
				#Если Клиент Тогда
					сообщить("Удален Типоразмер без кода");
				#КонецЕсли	
			ост.Удалить(i); N=N-1;
		    Продолжить;
			КонецЕсли;
			
			Код1 = ост[i].ТипоразмерКод;
			Если Код0=Код1 Тогда // контроль уникальности
				#Если Клиент Тогда
				сообщить("Удален повотряющийся Типоразмер с кодом "+ строка(Код1)+" и видом товара "+строка(ост[i].ВидТовара));
				#КонецЕсли	
				ост.Удалить(i); N=N-1;
			    Продолжить;
			Иначе Код0=Код1;
			КонецЕсли;
 	
			Если ост[i].Типоразмер<>Null и ост[i].Типоразмер<>Неопределено и ЗначениеЗаполнено(ост[i].Типоразмер) Тогда
			ЗаполнитьЗначенияСвойств( ост[i],  ост[i].Типоразмер);
			КонецЕсли;
			
		//шины или диски
		//ост[i].Вид = ?(ост[i].PCD<>"" или ост[i].Вылет<>""  или ост[i].ДиаметрСтупицы<>"" или или ост[i].ДиаметрСтупицы<>"", "disk", "tyre");
		    ост[i].Вид = таблСоотв.НайтиПоЗначению(ост[i].ВидТовара);
			
		i=i+1;
	   КонецЦикла;
	
		 ост.Колонки.Удалить("ВидТовара");
		 
		выгрузитьВTXT(ост,путь,,"Tiporazmer");  // "types.txt" Типоразмер, Ширина, Высота, Диаметр, КоличествоОтверстий, PCD, ДиаметрСтупицы
	

КонецПроцедуры//sim_ВыгрузитьТипоразмеры

//Product.xml
процедура sim_ВыгрузитьПродукты(остНом, путь="") Экспорт
	
	остНом.Свернуть("НоменклатураКод, Номенклатура, ВидТовара, ПроизводительКод, МодельКод, ТипоразмерКод, СтранаПроисхождения,   Вид, Артикул, Weight, Volume, Завод"); //25.02.2016
	
//	остНом.колонки.добавить("Вид");
//	остНом.колонки.добавить("Артикул");
	остНом.колонки.добавить("Транслит");
	остНом.колонки.добавить("РодительКод");
	остНом.колонки.добавить("ЭтоПапка");

	//+++ 01.02.2017 добавляем штрихКоды +++
	остНом.Колонки.Добавить("ШтрихКод");
	соотвШК = ПолучитьСоотвШК();

	N = остНом.Количество(); i=0;
	Пока i<N Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли	
		попытка
			кодЧисло = число(остНом[i].НоменклатураКод);
	 		i=i+1;
		исключение
			#Если Клиент Тогда
				сообщить("Код 1С: "+остНом[i].Номенклатура.Код+" - "+строка(остНом[i].Номенклатура)+" - не будет записан!", СтатусСообщения.Внимание);
			#КонецЕсли	
			остНом.удалить(i); N=N-1;
		КонецПопытки;
	КонецЦикла;		
	N = остНом.Количество();
	
	 Аксессуары = справочники.Номенклатура.НайтиПоКоду("0000001");
		  Папки = справочники.Номенклатура.НайтиПоКоду("9165781");
		NovLine = справочники.Номенклатура.НайтиПоКоду("9145226"); //яНОМЕНКЛАТУРА NOVLINE

		//остНом.Колонки.Добавить("Weight");
		//остНом.Колонки.Добавить("Volume");	
		
//+++ 28.10.2015 ---------распродажа-------------------------
		остНом.Колонки.Добавить("Sale");	

  Запрос = Новый Запрос;
  Запрос.Текст = "ВЫБРАТЬ
                 |	ЦеныДляРаспродажиСрезПоследних.Номенклатура.Код КАК Код
                 |ИЗ
                 |	РегистрСведений.ЦеныДляРаспродажи КАК ЦеныДляРаспродажиСрезПоследних
                 |ГДЕ
                 |	ЦеныДляРаспродажиСрезПоследних.ЗаписьАктивна = ИСТИНА
                 |	И ЦеныДляРаспродажиСрезПоследних.Период = &ДатаЦеныРаспродажи
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |	Код";
  ДатаЦеныРаспродажи = ПолучитьДатуЦеныРаспродажи(Истина);
  Запрос.УстановитьПараметр("ДатаЦеныРаспродажи", ДатаЦеныРаспродажи );
//+++)
  
  Результат = Запрос.Выполнить();
  таблРаспродажи = Результат.Выгрузить();
  масРаспродажи = новый массив; 
  масРаспродажи = таблРаспродажи.ВыгрузитьКолонку("Код"); //так быстрее!
  //далее поиск в таблице - по коду...
 //+++)		
		
		
		
	Для i=0 по N-1 Цикл //исправление сезонов
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли	
		
		//+++ 01.02.2017 ТОЛЬКО для Акс-ов
		Если остНом[i].Вид = "4" Тогда
			ШтрихКод = соотвШК.получить( остНом[i].НоменклатураКод ); // по соответствию
			Если ШтрихКод = Неопределено Тогда
				остНом[i].ШтрихКод ="";
			Иначе	
				остНом[i].ШтрихКод = ШтрихКод; 
			КонецЕсли;
		иначе
			остНом[i].ШтрихКод ="";
		КонецЕсли;
		
//+++ 28.10.2015 - распродажа по дискам		
		Если остНом[i].Вид = "2" и таблРаспродажи.Количество()>0 Тогда
			стрРаспродажа = масРаспродажи.Найти( СокрЛП(остНом[i].НоменклатураКод) );
			Если стрРаспродажа = Неопределено Тогда
             	остНом[i].Sale = "0";
	        Иначе
				остНом[i].Sale = "1";
			КонецЕсли;
		КонецЕсли;		
//+++)		
		
		//+++ 24.11.2014 только для Аксессуаров - определяем родителей и добавляем всех родителей в Конец списка!
		 остНом[i].РодительКод = "";
		//28.09.2015  "acc" >> "4" или Шины (1) +++ 30.09.2015			 
		Если остНом[i].Вид = "4" 
			или остНом[i].Вид = "1"
			или остНом[i].Вид = "0" Тогда     
			родитель = остНом[i].Номенклатура.Родитель; 
			номВид = остНом[i].Вид;
			//------------------------------------------------------------
				Если номВид="4" Тогда
					Пока ЗначениеЗаполнено(родитель) и
						(родитель = Аксессуары  //выключение 3х папок из иерархии
							или родитель = Папки
							или родитель = NovLine) цикл
					родитель = родитель.Родитель;
					КонецЦикла;					
				КонецЕсли;
				
			Если ЗначениеЗаполнено(родитель) Тогда
				
				попытка//16.02.2017 - у прочих родители с кодами ОС и ]0
					РодительКод = формат(число(родитель.Код),"ЧН=0; ЧГ=0"); //+++ 30.09.2015
				исключение
					РодительКод = "";
				КонецПопытки;	
				остНом[i].РодительКод = РодительКод;
				
				Если РодительКод<>""   //14.03.2017 НЕ НУЖНЫ родители без Кода!
					и остНом.Найти(родитель, "Номенклатура")=Неопределено Тогда
					стр2 = остНом.Добавить();
					стр2.НоменклатураКод = РодительКод; //для шин - есть папки с 00... 30.09.2015
					стр2.Номенклатура = родитель;
					стр2.ЭтоПапка = 1;
					стр2.Вид = номВид;
					стр2.РодительКод = "";
					
					//------------цикл по дереву вверх---------------------
					родитель2 = родитель.Родитель;
					Пока ЗначениеЗаполнено(родитель2) Цикл //иерархия!
						Если номВид="4" Тогда
						  Пока ЗначениеЗаполнено(родитель2)
							  и (родитель2 = Аксессуары
							    или родитель2 = Папки
							    или родитель2 = NovLine) Цикл
							родитель2 = родитель2.Родитель;
					  	  КонецЦикла;
						КонецЕсли;

						  Если ЗначениеЗаполнено(родитель2) Тогда //иерархия!
							попытка //17.02.2017
							РодительКод2 = формат(число(Родитель2.Код),"ЧГ=0"); //30.09.2015
							исключение
							РодительКод2 = "";
							КонецПопытки;
						
						    стр2.РодительКод = РодительКод2; //Если 0 то ничего не будет...
							
 							стр2 = Неопределено;
				 			стр2 = остНом.Найти(родитель2, "Номенклатура");
							
							Если стр2=Неопределено и РодительКод2<>"" Тогда //14.03.2017
								стр2 = остНом.Добавить();
								стр2.НоменклатураКод = РодительКод2;
								стр2.Номенклатура = родитель2;
								стр2.ЭтоПапка = 1;
								стр2.Вид = номВид;
								стр2.РодительКод = "";
								родитель2 = родитель2.Родитель;  //смотрим дальше!
							Иначе
								Прервать; // не надо повторно заполнять дерево вверх... непонятный родитель...
							КонецЕсли;
						 Иначе
							Прервать; // не надо повторно заполнять дерево вверх
						 КонецЕсли;
					КонецЦикла;	//-------------------Конец иерархии---------------------------
						
				КонецЕсли;//Конец проверки родителей	
			КонецЕсли;//Конец заполненности	
				
 		КонецЕсли;//Конец acc
		
		остНом[i].Артикул  = Лев( СокрЛП(остНом[i].Артикул), 25);
		остНом[i].Артикул  = стрЗаменить(остНом[i].Артикул, символ(10), ",");
		остНом[i].Артикул  = стрЗаменить(остНом[i].Артикул, символ(13), "");
		
		остНом[i].Транслит = "";
		
		Если ЗначениеЗаполнено(остНом[i].ПроизводительКод) Тогда  //+++ 17.10.2014 - ПроизводительКод
			попытка
			остНом[i].ПроизводительКод =  СокрЛП(Формат( число(остНом[i].ПроизводительКод), "ЧГ=0"));
			исключение
			остНом[i].ПроизводительКод = "";
			КонецПопытки;
		иначе 
			остНом[i].ПроизводительКод = "";
		КонецЕсли;
	//ЗАМЕНА Replica TD >> REPLICA  3333 >>65     ВЫКЛЮЧЕНА с 17.06.2015!
		//Если остНом[i].ПроизводительКод = 3333 Тогда //ЗАМЕНА Replica TD >> REPLICA
		//	остНом[i].ПроизводительКод = 65;
		//КонецЕсли;
		

		Если ЗначениеЗаполнено(остНом[i].МодельКод) Тогда
			попытка
			остНом[i].МодельКод = Формат(число(остНом[i].МодельКод), "ЧГ=0");
			исключение
			остНом[i].МодельКод = "";
			КонецПопытки;
		иначе 
			остНом[i].МодельКод = "";
		КонецЕсли;
		
		//остНом[i].Цена = "0";
		
		#Если Клиент Тогда
			Если i%100=0 Тогда
				состояние("заполнено "+строка(i)+" из "+строка( N )+" строк по номенклатуре...");
			КонецЕсли;
		#КонецЕсли
	КонецЦикла;                    
	
   	остНом.Колонки.Удалить("ВидТовара");  
	остНом.Колонки.Сдвинуть("ПроизводительКод",+5);
	остНом.Колонки.Сдвинуть("МодельКод",+5);
	остНом.Колонки.Сдвинуть("ТипоразмерКод",+6);
	

	выгрузитьВTXT(остНом, путь, , "Product");  //КодНом, Номенклатура, Вид, МодельПроизводительКод, МодельКод, Артикул, ТипоразмерКод, Цена 

КонецПроцедуры	//sim_ВыгрузитьПродукты

//01.02.2017
функция ПолучитьСоотвШК()
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	Штрихкоды.Владелец.Код КАК НоменклатураКод,
               |	Штрихкоды.Штрихкод как ШтрихКод,
               |	Штрихкоды.Код КАК Код
               |ИЗ
               |	РегистрСведений.Штрихкоды КАК Штрихкоды
               |ГДЕ
               |	Штрихкоды.Штрихкод <> """"
               |
               |УПОРЯДОЧИТЬ ПО
               |	НоменклатураКод,
               |	Код";      // самый "старый" штрихКод
Результат = Запрос.Выполнить();
таблШК = Результат.Выгрузить();

//сразу проверку сделаем на 13 символов
i=0; код0 = "";
пока i<таблШК.Количество() цикл
	Если стрДлина(таблШК[i].ШтрихКод)<>13 Тогда
		таблШК.Удалить(i);
	иначеЕсли код0 = таблШК[i].НоменклатураКод Тогда
		таблШК.Удалить(i);
	КонецЕсли;	
код0 = таблШК[i].НоменклатураКод;
i=i+1;
КонецЦикла;

//для ускорения поиска
соотвШК = новый Соответствие;
для каждого стр1 из таблШК цикл
	соотвШК.Вставить(стр1.НоменклатураКод, стр1.ШтрихКод);
КонецЦикла;

возврат соотвШК; // таблШК;

КонецФункции

//+++ 31.10.2014 >> 11.08.2016 143 тыс.   ProductProperties.xml
процедура sim_ВыгрузитьСвойстваПродуктов(СписНом, путь="") Экспорт
	              //  &СписокНом >> (выбрать Товар из &ВТ_Ном)
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	спрНом.Код КАК Код,
               |	спрНом.Типоразмер КАК Типоразмер,
               |	спрНом.Родитель КАК Родитель,
               |	ВЫБОР
               |		КОГДА спрНом.Наименование ПОДОБНО ""%п.п.%""
               |			ТОГДА ""Прямая""
               |		КОГДА спрНом.Наименование ПОДОБНО ""%о.п.%""
               |			ТОГДА ""Обратная""
               |		ИНАЧЕ """"
               |	КОНЕЦ КАК Полярность,
               |	спрНом.Ссылка КАК Товар,
               |	спрНом.Производитель
               |ПОМЕСТИТЬ ВТ_ном
               |ИЗ
               |	Справочник.Номенклатура КАК спрНом
               |ГДЕ
               |	спрНом.Ссылка В(&СписокНом)
               |	И спрНом.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.АКБ)
               |
               |ИНДЕКСИРОВАТЬ ПО
               |	Код
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	спр1.Код КАК НоменклатураКод,
               |	""polarity"" КАК Свойство,
               |	спр1.Полярность КАК Значение
			   |ИЗ
               |	ВТ_ном КАК спр1
               |ГДЕ
               |	спр1.Полярность <> """"
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	спр2.Код,
               |	""sizes"",
               |	спр2.Типоразмер
               |ИЗ
               |	ВТ_ном КАК спр2
               |ГДЕ
               |	спр2.Типоразмер <> ЗНАЧЕНИЕ(Справочник.Типоразмеры.ПустаяСсылка)
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	спр3.Код,
               |	""brand"",
               |	спр3.Родитель
               |ИЗ
               |	ВТ_ном КАК спр3
               |ГДЕ
               |	спр3.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Номенклатура).Код,
               |	ВЫБОР
               |		КОГДА ЗначенияСвойствОбъектов.Свойство = &Ток1
               |			ТОГДА ""inrush_current""
               |		КОГДА ЗначенияСвойствОбъектов.Свойство = &Знач1
               |			ТОГДА ""volume""
               |		КОГДА ЗначенияСвойствОбъектов.Свойство = &Тип
               |			ТОГДА ""akbtype""
               |		ИНАЧЕ """"
               |	КОНЕЦ,
               |	ВЫБОР
               |		КОГДА ЗначенияСвойствОбъектов.Значение ССЫЛКА Справочник.ЗначенияСвойствОбъектов
               |			ТОГДА ЗначенияСвойствОбъектов.Значение.Наименование
               |		ИНАЧЕ ЗначенияСвойствОбъектов.Значение
               |	КОНЕЦ
               |ИЗ
               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
               |ГДЕ
               |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Номенклатура) В
               |			(ВЫБРАТЬ
               |				спр4.Товар
               |			ИЗ
               |				ВТ_Ном КАК спр4)
               |	И (ЗначенияСвойствОбъектов.Свойство = &Ток1
               |			ИЛИ ЗначенияСвойствОбъектов.Свойство = &Знач1
               |			ИЛИ ЗначенияСвойствОбъектов.Свойство = &Тип)
               |	И ЗначенияСвойствОбъектов.Значение <> 0
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ВТ_ном.Код,
               |	""producer"",
               |	ВТ_ном.Производитель
              	 |ИЗ
               |	ВТ_ном КАК ВТ_ном
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Номенклатура).Код,
               |	""maxload"",
               |	ЗначенияСвойствОбъектов.Значение
              |ИЗ
               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
               |ГДЕ
               |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Номенклатура) В (&СписокНом)
               |	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Номенклатура).ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
               |	И ЗначенияСвойствОбъектов.Свойство = &maxload
			   //10.07.2017
                |	И ЗначенияСвойствОбъектов.Значение <> неопределено
               |	И ЗначенияСвойствОбъектов.Значение > 0
               |	И ЗначенияСвойствОбъектов.Значение <> """"
			   
			 //---------------- 19.07.2017 itemsinbox --------------------	   
        	 |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Номенклатура).Код,
               |	""itemsinbox"",
               |	ЗначенияСвойствОбъектов.Значение
               |ИЗ
               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
               |ГДЕ
               |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Номенклатура) В (&СписокНом)
	//+++ 14.08.2018 - и для акс. и для дисков!		   
            //   |	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Номенклатура).ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Аксессуары)
               |	И ЗначенияСвойствОбъектов.Свойство = &itemsinbox
		       |	И ЗначенияСвойствОбъектов.Значение <> неопределено
               |	И ЕстьNull(ЗначенияСвойствОбъектов.Значение,0) > 0
           //    |	И ЗначенияСвойствОбъектов.Значение <> """"
			   
			   |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	КомплектующиеНоменклатуры.Номенклатура.Код,
               |	""cap"",
               |	МАКСИМУМ(КомплектующиеНоменклатуры.Комплектующая)
			   |ИЗ
               |	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
               |ГДЕ
               |	КомплектующиеНоменклатуры.Номенклатура В(&СписокНом)
               |	И КомплектующиеНоменклатуры.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
               |	И КомплектующиеНоменклатуры.Комплектующая В ИЕРАРХИИ(&Крышки)
               |
               |СГРУППИРОВАТЬ ПО
               |	КомплектующиеНоменклатуры.Номенклатура.Код
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
			   |ВЫБРАТЬ
               |	КомплектующиеНоменклатуры.Номенклатура.Код как НоменклатураКод,
               |	""fixing"" как Свойство,
               |	МАКСИМУМ(КомплектующиеНоменклатуры.Комплектующая) как Комплектующая
                |ИЗ
               |	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
               |ГДЕ
               |	КомплектующиеНоменклатуры.Номенклатура В(&СписокНом)
               |	И КомплектующиеНоменклатуры.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
               |	И НЕ КомплектующиеНоменклатуры.Комплектующая В ИЕРАРХИИ (&Крышки)
               |
               |СГРУППИРОВАТЬ ПО
               |	КомплектующиеНоменклатуры.Номенклатура.Код
			   |
               //26.04.2017 - добавлен ещё одно "сво-во"
			   |ОБЪЕДИНИТЬ ВСЕ
               |ВЫБРАТЬ Крепеж.НоменклатураКод, ""fixingcode"", Крепеж.Комплектующая.Код
			   |	из ( ВЫБРАТЬ
               |	КомплектующиеНоменклатуры.Номенклатура.Код как НоменклатураКод,
               |	""fixing"" как Свойство,
               |	МАКСИМУМ(КомплектующиеНоменклатуры.Комплектующая) как Комплектующая
                |ИЗ
               |	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
               |ГДЕ
               |	КомплектующиеНоменклатуры.Номенклатура В(&СписокНом)
               |	И КомплектующиеНоменклатуры.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
               |	И НЕ КомплектующиеНоменклатуры.Комплектующая В ИЕРАРХИИ (&Крышки)
               |
               |СГРУППИРОВАТЬ ПО
               |	КомплектующиеНоменклатуры.Номенклатура.Код) как Крепеж";

	Запрос.УстановитьПараметр("СписокНом", СписНом);
	                                                          
	//21.02.2017
	//Пусковой ток, Емкость, Полярность
	//90167 Пусковой ток - inrush_current
	//00132 Диаметр/Емкость - volume
	Ток1  = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90167");
	Знач1 = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00132");
	ТипАКБ = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90225"); //90225

 //+++ 18.04.2017 ============================================================================
	//2. В файл ProductProperties выгружать данные по дискам 
	//максимальная нагрузка (<Item ProductId="30051" Name="maxload" Value="строка"/>) 
	//Крышка (<Item ProductId="30051" Name="cap" Value="строка"/>) 
	//Крепёж (<Item ProductId="30051" Name="fixing" Value="строка"/>) 
	  maxload = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90205"); //+++ 07.07.2017  90157 >> 90205
	  itemsinbox = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90251"); //+++ 19.07.2017
	  крышки  = Справочники.Номенклатура.НайтиПоКоду("0080004");
	  Запрос.УстановитьПараметр("maxload", maxload);
	  Запрос.УстановитьПараметр("itemsinbox", itemsinbox);
      Запрос.УстановитьПараметр("Крышки",  крышки );


Запрос.УстановитьПараметр("Ток1",Ток1);
Запрос.УстановитьПараметр("Знач1",Знач1);
Запрос.УстановитьПараметр("Тип",ТипАКБ);
попытка
	Результат = Запрос.Выполнить();
остНомСвва = Результат.Выгрузить();	

остНомСвва.Сортировать("НоменклатураКод");

//-----------------удаляем строки свойств с пустыми значениями-------------------------
          
	выгрузитьВTXT(остНомСвва, путь, , "Item"); 
	
	//	<Items> <Item  ProductId="" Name="" Value="">
		текстФайл = новый ТекстовыйДокумент;
		текстФайл.Прочитать(путь+ "Item.xml");
		
		текстФайла = текстФайл.ПолучитьТекст();
		текстФайла = стрЗаменить(текстФайла, "Items", "ProductProperties");
		текстФайл.УстановитьТекст(текстФайла);
		
		текстФайл.Записать(путь+ "ProductProperties.xml");
исключение
	#Если Клиент Тогда
		Сообщить("Ошибка: "+ОписаниеОшибки() );
	#КонецЕсли	
КонецПопытки;		
	
КонецПроцедуры	//sim_ВыгрузитьСвойстваПродуктов

//25.07.2017 - общая функция для выгрузки Клиентов и Свойств тех же клиентов
//ссылка,
//ЦеныРаспродажи = истина/ложь
//ПроцентНаценкиТранспорта = 0 или более...
//
функция ПолучитьЗапросВсехКлиентовТерминал()
		//+++ ВСЕ у кого есть авторизация в Store
	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	                 |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Контрагенты) КАК Объект1,
	                 |	ЗначенияСвойствОбъектов.Значение
	                 |ПОМЕСТИТЬ ВТ_ПроцентНаценки
	                 |ИЗ
	                 |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                 |ГДЕ
	                 |	ЗначенияСвойствОбъектов.Свойство = &СвойствоПроцентНаценки
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                 |	Авторизация.Владелец КАК ссылка,
	                 |	ЕСТЬNULL(ВложенныйЗапрос.Значение, ЛОЖЬ) КАК ЦеныРаспродажи,
	                 |	ЕСТЬNULL(ПроцентНаценки.Значение, 0) КАК ПроцентНаценкиТранспорта,
	                 |	ВЫБОР
	                 |		КОГДА Авторизация.Владелец.ОсновнойДоговорКонтрагента.ТипДоговора = &Предоплата
	                 |				ИЛИ Авторизация.Владелец.ОсновнойДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.ПредоплатаПоСчетам)
	                 |				ИЛИ Авторизация.Владелец.ОсновнойДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(справочник.ТипыДоговоров.ФакторингПредоплата)
	                 |			ТОГДА 1
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК флагДоговорПредоплаты,
	                 |	ВЫБОР
	                 |		КОГДА Авторизация.Владелец.способОтгрузки = &Самовывоз
	                 |			ТОГДА 1
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК ОснСпособОтгрузки,
	                 |	ДоговорыКонтр.флагЕстьДоговорПредоплаты,
	                 |	ДоговорыКонтр.флагЕстьДоговорСоЗвездой,
	                 |	Авторизация.Владелец.ОсновнойМенеджерКонтрагента КАК ОсновнойМенеджерКонтрагента,
	                 |	Авторизация.Владелец.Код КАК КонтрагентКод,
	                 |	Авторизация.Владелец.ОсновнойДоговорКонтрагента.Номер КАК НомерДоговора,
	                 |	Авторизация.Владелец.ОсновнойДоговорКонтрагента.Дата КАК ДоговорДата,
	                 |	Авторизация.Владелец.ЕстьДоговорДПД КАК ДоговорСТранспортной,
	                 |	Авторизация.Владелец.РазрешитьГрузитьТоварыИзСтопЛиста КАК РазрешитьГрузитьТоварыИзСтопЛиста,
	                 |	Авторизация.Владелец.ИНН КАК ИНН,
	                 |	Авторизация.Владелец.КПП КАК КПП,
	                 |	Авторизация.Владелец.Наименование КАК Наименование,
	                 |	Авторизация.Владелец.НаименованиеПолное КАК НаименованиеПолное,
	                 |	ВЫБОР
	                 |		КОГДА Авторизация.Владелец.Экспорт
	                 |				И Авторизация.Владелец.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов.Код <> ""643""
	                 |			ТОГДА ИСТИНА
	                 |		ИНАЧЕ ЛОЖЬ
	                 |	КОНЕЦ КАК флЭкспортный,
	                 |	ВЫБОР
	                 |		КОГДА Авторизация.Владелец.ПодразделениеЛогистики.ОбособленноеПодразделение
	                 |			ТОГДА Авторизация.Владелец.ПодразделениеЛогистики.Код
	                 |		ИНАЧЕ ""00005""
	                 |	КОНЕЦ КАК ПодразделениеЛогистики,
	                 |	ВЫБОР
	                 |		КОГДА Авторизация.Владелец.ОсновнойДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	                 |			ТОГДА 1
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК IsStar,
	                 |	Авторизация.Владелец.РазрешитьСезоннуюОтсрочку КАК РазрешитьСезоннуюОтсрочку,
					 //21.05.2018
	                 |	СоответствиеМенеджеровРегионам.Пользователь КАК Оператор					 
	                 |ИЗ
	                 |	Справочник.Авторизация КАК Авторизация
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                 |			ЗначенияСвойствОбъектов.Значение КАК Значение,
	                 |			ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Контрагенты) КАК Объект1
	                 |		ИЗ
	                 |			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                 |		ГДЕ
	                 |			ЗначенияСвойствОбъектов.Свойство = &Свойство) КАК ВложенныйЗапрос
	                 |		ПО Авторизация.Ссылка = ВложенныйЗапрос.Объект1
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПроцентНаценки КАК ПроцентНаценки
	                 |		ПО Авторизация.Владелец = ПроцентНаценки.Объект1
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                 |			Договоры.Владелец КАК Владелец,
	                 |			МАКСИМУМ(ВЫБОР
	                 |					КОГДА Договоры.ТипДоговора = &Предоплата
	                 |							ИЛИ Договоры.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.ПредоплатаПоСчетам)
	                 |							ИЛИ Договоры.ТипДоговора = ЗНАЧЕНИЕ(справочник.ТипыДоговоров.ФакторингПредоплата)
	                 |						ТОГДА 1
	                 |					ИНАЧЕ 0
	                 |				КОНЕЦ) КАК флагЕстьДоговорПредоплаты,
	                 |			МАКСИМУМ(ВЫБОР
	                 |					КОГДА Договоры.Владелец.Нал = ИСТИНА
	                 |						ТОГДА 1
	                 |					ИНАЧЕ 0
	                 |				КОНЕЦ) КАК флагЕстьДоговорСоЗвездой
	                 |		ИЗ
	                 |			Справочник.ДоговорыКонтрагентов КАК Договоры
	                 |		ГДЕ
	                 |			Договоры.ПометкаУдаления = ЛОЖЬ
	                 |			И Договоры.ВидДоговора = ЗНАЧЕНИЕ(перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	                 |			И (Договоры.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	                 |					ИЛИ Договоры.ДатаОкончанияДействия >= &ТекущаяДата)
	                 |		
	                 |		СГРУППИРОВАТЬ ПО
	                 |			Договоры.Владелец) КАК ДоговорыКонтр
	                 |		ПО Авторизация.Владелец = ДоговорыКонтр.Владелец
					 //+++( 21.05.2018 ++++++++ 1 оператор на 1 клиента ++++++++++++++++++++++++++++++++++++++++++
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                 |			Операторы.Регион КАК Регион,
	                 |			МАКСИМУМ(Операторы.Пользователь) КАК Пользователь
	                 |		ИЗ
	                 |			РегистрСведений.СоответствиеМенеджеровРегионам КАК Операторы
	                 |		ГДЕ
	                 |			Операторы.ВидСотрудника = ЗНАЧЕНИЕ(Перечисление.ВидыСотрудниковОтделаПродаж.Оператор)
					 |		
	                 |		СГРУППИРОВАТЬ ПО
	                 |			Операторы.Регион) КАК СоответствиеМенеджеровРегионам
	                 |		ПО Авторизация.Владелец.Регион = СоответствиеМенеджеровРегионам.Регион
					 //+++)
	                 |ГДЕ
	                 |	Авторизация.Наименование = &Наименование
	                 |	И НЕ Авторизация.ПометкаУдаления";
		Запрос.УстановитьПараметр("РубКод", 	 справочники.Валюты.НайтиПоКоду("643") );			        
		Запрос.УстановитьПараметр("Предоплата",  справочники.ТипыДоговоров.НайтиПоКоду("00001") );
		Запрос.УстановитьПараметр("Самовывоз",   справочники.СпособыОтгрузкиТовара.НайтиПоКоду(10) ); 
		Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()) ); // ограничение даты действия договора
		
		Запрос.УстановитьПараметр("Наименование", "Store.YST.ru"); 
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90183") );  //ЦеныРаспродажи
		Запрос.УстановитьПараметр("СвойствоПроцентНаценки", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90212") );  // Процент Наценки Транспорта (DPD)
		
	Возврат Запрос;
КонецФункции

//+++ 25.07.2017
//  PartnerId - name - value
функция получитьТаблицуСвойстваКлиентов( СписКонтр )
	
	Запрос = Новый Запрос;
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВсеСвойства.PartnerId КАК PartnerId,
		               |	ВсеСвойства.Name КАК Name,
		               |	ВсеСвойства.Value
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		Контрагенты.Код КАК PartnerId,
		               |		""limit"" КАК Name,
		               |		Контрагенты.ДопустимаяСуммаЗадолженности КАК Value
		               |	ИЗ
		               |		Справочник.Контрагенты КАК Контрагенты
		               |	ГДЕ
		               |		Контрагенты.Ссылка В(&СписКонтр)
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		Дебиторка.ДоговорКонтрагента.Владелец.Код,
		               |		""debt"",
		               |		СУММА(Дебиторка.СуммаВзаиморасчетовОстаток)
		               |	ИЗ
		               |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		               |				,
		               |				ДоговорКонтрагента.Владелец В (&СписКонтр)
		               |					И ДоговорКонтрагента.ВидДоговора В (&СписВидовДоговоров)) КАК Дебиторка
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		Дебиторка.ДоговорКонтрагента.Владелец.Код
		               |	
		               |	ИМЕЮЩИЕ
		               |		СУММА(Дебиторка.СуммаВзаиморасчетовОстаток) > 0
		               |
					   |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		Дебиторка.ДоговорКонтрагента.Владелец.Код,
		               |		""expireddebt"",
		               |		СУММА(ВЫБОР
		               |				КОГДА Дебиторка.Сделка ССЫЛКА Документ.ЗаказПокупателя
		               |					ТОГДА ВЫБОР
		               |							КОГДА Дебиторка.Сделка.ДатаОплаты < &ТекДата
		               |								ТОГДА Дебиторка.СуммаВзаиморасчетовОстаток
		               |							ИНАЧЕ 0
		               |						КОНЕЦ
		               |				ИНАЧЕ ВЫБОР
		               |						КОГДА Дебиторка.Сделка.Дата < &ТекДата
		               |							ТОГДА Дебиторка.СуммаВзаиморасчетовОстаток
		               |						ИНАЧЕ 0
		               |					КОНЕЦ
		               |			КОНЕЦ)
		               |	ИЗ
		               |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		               |				,
		               |				ДоговорКонтрагента.Владелец В (&СписКонтр)
		               |					И ДоговорКонтрагента.ВидДоговора В (&СписВидовДоговоров)) КАК Дебиторка
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		Дебиторка.ДоговорКонтрагента.Владелец.Код
		               |
					   //+++++++++++++++ так правильнее! ++++++++++++++++++
		               |	ИМЕЮЩИЕ
		               |		СУММА(ВЫБОР
		               |				КОГДА Дебиторка.Сделка ССЫЛКА Документ.ЗаказПокупателя
		               |					ТОГДА ВЫБОР
		               |							КОГДА Дебиторка.Сделка.ДатаОплаты < &ТекДата
		               |								ТОГДА Дебиторка.СуммаВзаиморасчетовОстаток
		               |							ИНАЧЕ 0
		               |						КОНЕЦ
		               |				ИНАЧЕ ВЫБОР
		               |						КОГДА Дебиторка.Сделка.Дата < &ТекДата
		               |							ТОГДА Дебиторка.СуммаВзаиморасчетовОстаток
		               |						ИНАЧЕ 0
		               |					КОНЕЦ
		               |			КОНЕЦ) > 0
		               |
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец.Код,
		               |		""orderedsum"",
		               |		СУММА(ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток)
		               |	ИЗ
		               |		РегистрНакопления.ЗаказыПокупателей.Остатки(
		               |				,
		               |				ДоговорКонтрагента.Владелец В (&СписКонтр)
		               |					И ЗаказПокупателя.Проверен) КАК ЗаказыПокупателейОстатки
		               |	ГДЕ
		               |		ЗаказыПокупателейОстатки.КоличествоОстаток > 0
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец.Код
					   
	//+++ 13.09.2017 -------------------------------------------------------------------------------------					   
					   |	ОБЪЕДИНИТЬ ВСЕ
		               |	ВЫБРАТЬ
		               |		Контр.ссылка.Код,
		               |		""akbvip"",
		               |		1
		               |	ИЗ	справочник.Контрагенты.КатегорияСкидок как Контр
					   |ГДЕ 
					   |	Контр.ссылка в (&СписКонтр)
					   |	И Контр.Категория = Значение(перечисление.КатегорииСкидок.VIP)
					   |	И Контр.ВидТовара = Значение(перечисление.ВидыТоваров.АКБ)
					   |
					   
	//+++ 03.10.2017 -------------------------------------------------------------------------------------					   
					   |	ОБЪЕДИНИТЬ ВСЕ
		               |	ВЫБРАТЬ
		               |		Контр.Код,
		               |		""hidenostud"",
		               |		1
		               |	ИЗ	справочник.Контрагенты как Контр
					   |ГДЕ 
					   |	Контр.ссылка в (&СписКонтр)
					   |	И Контр.КатегорияПокупателя = &Категория11
					   
					   |) КАК ВсеСвойства
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	PartnerId,
		               |	Name
					|";
    Запрос.УстановитьПараметр("ТекДата", НачалоДня( ТекущаяДата() ) ); // вчера должы были...
	Запрос.УстановитьПараметр("СписКонтр", СписКонтр );
	Запрос.УстановитьПараметр("Категория11", справочники.КатегорииПокупателей.НайтиПоКоду(11) ); //+++ 03.10.2017  11 - Интернет-магазин	
	
	//дебиторка по всем договорам с Покупателем / Комиссионером
	СписВидовДоговоров = новый СписокЗначений; 
	СписВидовДоговоров.Добавить(перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписВидовДоговоров.Добавить(перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Запрос.УстановитьПараметр("СписВидовДоговоров", СписВидовДоговоров );
	
	Результат = Запрос.Выполнить();
	табл = Результат.Выгрузить();
	
	возврат табл;
	
КонецФункции	
 
 //++ 25.07.2017 PartnerProperties.xml  - выгружается отдельным регл.заданием SIM_ВыгрузитьСвойстваКлиентов с 6 до 18 (раз в час)
 функция SIM_ВыгрузитьСвойстваКлиентов() Экспорт
	 
	 ИмяФайла = "PartnerProperties.xml";
	    путь = КаталогВременныхФайлов();
	выгружатьВтерминал = Истина;
	
// SIM_ВыгрузитьМенеджеровПоТоварнымГруппамStore >> тоже как свойство?	

	Запрос = ПолучитьЗапросВсехКлиентовТерминал();
	Результат    = Запрос.Выполнить();
	таблКлиентов = Результат.Выгрузить();
			
	масКлиентов = таблКлиентов.выгрузитьКолонку("Ссылка");
	таблСвойствКлиентов = получитьТаблицуСвойстваКлиентов(масКлиентов);

	//	<Items> <Item  PartnerId="" Name="" Value="">
	выгрузитьВTXT(таблСвойствКлиентов, путь, , "Item"); 
	
		текстФайл = новый ТекстовыйДокумент;
		текстФайл.Прочитать(путь+ "Item.xml");
		текстФайл.Записать(путь+ ИмяФайла);
	
	Если выгружатьВтерминал Тогда
		удачно = SIM_ВыгрузитьФайлНаСервер(путь + ИмяФайла,"api/partnerapi/importpartnerproperties", Истина, "terminal.yst.ru", Истина ); //полный адрес!
	КонецЕсли;	

	возврат Удачно;
	
КонецФункции	

//================ДЛЯ РЕГЛ.ЗАДАНИЯ============================

//+++ 12.04.2017 - PriceOfProduct.xml для терминала и Store - одинаково: Price2 - рекомендованная РОЗН. цена
//+++ выгружается регл.заданием: Обмен_SIMИнтернетМагазин_Справочники
//
процедура sim_ВыгрузитьЦеныПродуктов(знач ост, путь="", НаТерминал=Истина)
	
	ост.Свернуть("НоменклатураКод, Номенклатура");
	списНом = новый СписокЗначений;
	списНом.ЗагрузитьЗначения( ост.выгрузитьКолонку("Номенклатура") );  //Цены по Всей Номенклатуре
	
	флUSD = Ложь;
	
	// [ProductId] INT             NOT NULL,
	//[Price]     DECIMAL (18, 2) NULL,
	//[Price1]    DECIMAL (18, 2) NULL
	ост.колонки.добавить("Цена");
	ост.колонки.добавить("Цена1"); //рекомендованная опт
	Если флUSD Тогда
		ост.колонки.добавить("Price1usd"); //рекомендованная
	КонецЕсли;	
	
	Если НаТерминал Тогда
	ост.колонки.добавить("Цена2"); //рекомендованная розн
		Если флUSD Тогда
			ост.колонки.добавить("Price2usd"); //рекомендованная
		КонецЕсли;	
	КонецЕсли;	
	
	ост.колонки.добавить("ЦенаМинРозн"); //+++ 13.05.2015 - мин.допустимая розн. цена 
	ост.колонки.добавить("ЦенаБазовая"); //рекомендованная
	ост.колонки.добавить("ЦенаКрОпт"); //12.04.2017
	// TREBL - База
	// Aclasta or CrossStreet  +8
	// Yokatta кованные  +8
	// диски -33
//=========================!!!=========================	


//--------------общие правила с макс скидкой---------------
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаЦенообразованияОбщие.Приоритет + 1000 как Приоритет,
	               |	ПравилаЦенообразованияОбщие.ВидТовара,
	               |	ПравилаЦенообразованияОбщие.Производитель,
	               |	ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа,
	               |	ПравилаЦенообразованияОбщие.ВходитВПапку,
	               |	ПравилаЦенообразованияОбщие.ПодСтрока,
	               |	ПравилаЦенообразованияОбщие.Диаметр,
	               |	ПравилаЦенообразованияОбщие.Номенклатура,
	               |	ПравилаЦенообразованияОбщие.ТипЦен,
	               |	ПравилаЦенообразованияОбщие.СкидкаНаценка,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)) как Правило,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) как ОтпускнаяЦена
				   
				   //+++ 05.07.2016
				   |	, ПравилаЦенообразованияОбщие.ВидДефектаДляУценки
				   
	               |ИЗ
				   
	               |	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
				   //24.10.2016
				   |ГДЕ
				   |	ПравилаЦенообразованияОбщие.Категория=&Категория
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
				   
	//24.10.2016 --- по новому - надо из 3-ей категории брать
	Если Константы.ЦенообразованиеПоКатегориям.Получить() Тогда			   
		Запрос.УстановитьПараметр("Категория", перечисления.КатегорииСкидок.к3);
	иначе //ТОЛЬКО правила с пустой категорией!
		Запрос.УстановитьПараметр("Категория", перечисления.КатегорииСкидок.ПустаяСсылка() );
    КонецЕсли;

	Результат = Запрос.Выполнить();
	ТекущаяПолитикаПравила = Результат.Выгрузить();
 	
//===============================================================
ТекущаяПолитикаПараметры = новый ТаблицаЗначений;
ТекущаяПолитикаПараметры.Колонки.Добавить("ИмяПараметра");
ТекущаяПолитикаПараметры.Колонки.Добавить("ЗначениеПараметра");

#Если Клиент Тогда
Сообщить("Обрабатывается "+строка(ТекущаяПолитикаПравила.Количество())+" правил. Для "+строка(СписНом.Количество()) +" номенклатурных позиций"); 	
#КонецЕсли	

ТекстЗапросаДляВставкиЦена="ВЫБОР ";
Для сч=0 по ТекущаяПолитикаПравила.Количество()-1 Цикл
	//Главная процедура разбора правил
	ЗаполнитьСтрокуПравилИПараметры(ТекущаяПолитикаПравила[сч], ТекущаяПолитикаПараметры ); 
	ТекстЗапросаДляВставкиЦена=ТекстЗапросаДляВставкиЦена+ "
	|	КОГДА (" + ТекущаяПолитикаПравила[сч].Правило + ") ТОГДА " + ТекущаяПолитикаПравила[сч].ОтпускнаяЦена;
КонецЦикла;
		ТекстЗапросаДляВставкиЦена=ТекстЗапросаДляВставкиЦена+"
		//+++ 10.03.2015 - ЦенаКрОпт сразу в запросе!
	|	ИНАЧЕ ЦенаКрОпт 
	|КОНЕЦ ";

//------------------------------------------------------------------
ТекстЗапросаДляВставкиПриоритет="ВЫБОР ";

	Для сч=0 по ТекущаяПолитикаПравила.Количество()-1 Цикл
		ТекстЗапросаДляВставкиПриоритет=ТекстЗапросаДляВставкиПриоритет+ "
		|	КОГДА (" + ТекущаяПолитикаПравила[сч].Правило + ") ТОГДА " + Формат(ТекущаяПолитикаПравила[сч].Приоритет,"ЧДЦ=0; ЧГ=0");
	КонецЦикла;
	ТекстЗапросаДляВставкиПриоритет=ТекстЗапросаДляВставкиПриоритет+"
|	ИНАЧЕ 99999 
|КОНЕЦ Приоритет";




стр1 = ТекущаяПолитикаПараметры.Добавить();
стр1.ИмяПараметра = "Штампованные";
стр1.ЗначениеПараметра = справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Штампованные");

стр1 = ТекущаяПолитикаПараметры.Добавить();
стр1.ИмяПараметра = "Кованные";
стр1.ЗначениеПараметра = справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Кованные");

стр1 = ТекущаяПолитикаПараметры.Добавить();
стр1.ИмяПараметра = "Литые";
стр1.ЗначениеПараметра = справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Литые");

стр1 = ТекущаяПолитикаПараметры.Добавить();
стр1.ИмяПараметра = "КрОпт";
стр1.ЗначениеПараметра = справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Крупный опт");//00005

//+++  13.05.2015  LA Concept или Optima  рек.розн.,  03.06.2015 - рек.опт.
стр1 = ТекущаяПолитикаПараметры.Добавить();
стр1.ИмяПараметра = "Replica";
стр1.ЗначениеПараметра = справочники.Производители.НайтиПоНаименованию("REPLICA");//00005
стр1 = ТекущаяПолитикаПараметры.Добавить();
стр1.ИмяПараметра = "ReplicaYST";
стр1.ЗначениеПараметра = справочники.Производители.НайтиПоНаименованию("REPLICA YST");

//22.06.2015 - все реплики - одинаково!
стр1 = ТекущаяПолитикаПараметры.Добавить();
стр1.ИмяПараметра = "ReplicaTD"; 
стр1.ЗначениеПараметра = справочники.Производители.НайтиПоКоду(3333);//REPLICA TD

стр1 = ТекущаяПолитикаПараметры.Добавить();
стр1.ИмяПараметра = "ReplicaCW";
стр1.ЗначениеПараметра = справочники.Производители.НайтиПоНаименованию("REPLICA CATWILD");


//+++ 03.08.2015 --- по=новому!
//===========Рекомендованная, Мин.цена.Розн/ОПТ + USD ========================================================================
КлиентРозн = справочники.Контрагенты.НайтиПоКоду("11011");
	Запрос1 = Новый Запрос;
	Запрос1.Текст = "ВЫБРАТЬ
	                |	ПравилаЦенообразованияОбщие.Приоритет КАК Приоритет,
	                |	ПравилаЦенообразованияОбщие.ВидТовара,
	                |	ПравилаЦенообразованияОбщие.Производитель,
	                |	ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа,
	                |	ПравилаЦенообразованияОбщие.ВходитВПапку,
	                |	ПравилаЦенообразованияОбщие.ПодСтрока,
	                |	ПравилаЦенообразованияОбщие.Диаметр,
	                |	ПравилаЦенообразованияОбщие.Номенклатура,
	                |	ПравилаЦенообразованияОбщие.ТипЦен,
	                |	ПравилаЦенообразованияОбщие.СкидкаНаценка,
	                |	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)) КАК Правило,
	                |	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК ОтпускнаяЦена
					//+++ 05.07.2016
					|	,ПравилаЦенообразованияОбщие.ВидДефектаДляУценки
	                |ИЗ
	                |	РегистрСведений.ПравилаЦенообразования КАК ПравилаЦенообразованияОбщие
	                |ГДЕ
	                |	ПравилаЦенообразованияОбщие.Контрагент = &Контрагент
					//24.10.2016
	                | И ПравилаЦенообразованияОбщие.Категория<>Значение( перечисление.КатегорииСкидок.ПустаяСсылка ) 
					
	                |УПОРЯДОЧИТЬ ПО
	                |	Приоритет";
					
	//24.10.2016 --- по старому - из пустой категории, по новому - БЕЗ пустой!
	Если НЕ Константы.ЦенообразованиеПоКатегориям.Получить() Тогда			   
	Запрос.текст = стрЗаменить(Запрос.текст, "<>", "=");
	КонецЕсли;
					
Запрос1.Параметры.Вставить("Контрагент", КлиентРозн);				   
	Результат1 = Запрос1.Выполнить();
	ТекущаяПолитикаПравилРозн = Результат1.Выгрузить();
	
ТекущаяПолитикаПараметры1 = новый ТаблицаЗначений;
ТекущаяПолитикаПараметры1.Колонки.Добавить("ИмяПараметра");
ТекущаяПолитикаПараметры1.Колонки.Добавить("ЗначениеПараметра");

ТекстЗапросаДляВставкиЦенаРекомендованной="Выбор ";
//--------вставка правил рознРуб ------------------------
Для сч=0 по ТекущаяПолитикаПравилРозн.Количество()-1 Цикл
	//Главная процедура разбора правил
	ЗаполнитьСтрокуПравилИПараметры(ТекущаяПолитикаПравилРозн[сч], ТекущаяПолитикаПараметры1 ); 
	ТекстЗапросаДляВставкиЦенаРекомендованной=ТекстЗапросаДляВставкиЦенаРекомендованной+ "
	|	КОГДА (" + ТекущаяПолитикаПравилРозн[сч].Правило + ") ТОГДА " + ТекущаяПолитикаПравилРозн[сч].ОтпускнаяЦена;
КонецЦикла;
ТекстЗапросаДляВставкиЦенаРекомендованной=ТекстЗапросаДляВставкиЦенаРекомендованной+"
|ИНАЧЕ 
|	ЦенаКрОпт * (1 + 0.15)
|КОНЕЦ";
//------------------параметры--------------
для каждого стр111 из ТекущаяПолитикаПараметры1 цикл
	Если ТекущаяПолитикаПараметры.Найти(стр111.ИмяПараметра, "ИмяПараметра") = Неопределено Тогда 
	стр1 = ТекущаяПолитикаПараметры.Добавить();
	ЗаполнитьЗначенияСвойств( стр1, стр111 );
	КонецЕсли;
КонецЦикла;


//минимальные розн. цена - это та же рекоментованная
ТекстЗапросаДляВставкиЦенаМинРозничн = ТекстЗапросаДляВставкиЦенаРекомендованной;

 
//--------------------Опт------------------------------------------
//+++  06.08.2015-------------ФИКС.СКИДКИ по дискам--------------------------------------
КлиентОпт  = справочники.Контрагенты.НайтиПоКоду("11022");
	Запрос1 = Новый Запрос;
	Запрос1.Текст = "ВЫБРАТЬ
	                |	ПравилаЦенообразованияОбщие.Приоритет КАК Приоритет,
	                |	ПравилаЦенообразованияОбщие.ВидТовара,
	                |	ПравилаЦенообразованияОбщие.Производитель,
	                |	ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа,
	                |	ПравилаЦенообразованияОбщие.ВходитВПапку,
	                |	ПравилаЦенообразованияОбщие.ПодСтрока,
	                |	ПравилаЦенообразованияОбщие.Диаметр,
	                |	ПравилаЦенообразованияОбщие.Номенклатура,
	                |	ПравилаЦенообразованияОбщие.ТипЦен,
	                |	ПравилаЦенообразованияОбщие.СкидкаНаценка,
	                |	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)) КАК Правило,
	                |	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК ОтпускнаяЦена
					
					|  , ПравилаЦенообразованияОбщие.ВидДефектаДляУценки
	                |ИЗ
	                |	РегистрСведений.ПравилаЦенообразования КАК ПравилаЦенообразованияОбщие
	                |ГДЕ
	                |	ПравилаЦенообразованияОбщие.Контрагент = &Контрагент
	        		//24.10.2016
	                | И ПравилаЦенообразованияОбщие.Категория<>Значение( перечисление.КатегорииСкидок.ПустаяСсылка ) 
			        |
	                |УПОРЯДОЧИТЬ ПО
	                |	Приоритет";
					
	//24.10.2016 --- по старому - из пустой категории, по новому - БЕЗ пустой!
	Если НЕ Константы.ЦенообразованиеПоКатегориям.Получить() Тогда			   
	Запрос.текст = стрЗаменить(Запрос.текст, "<>", "=");
	КонецЕсли;
					
Запрос1.Параметры.Вставить("Контрагент", КлиентОпт);				   
	Результат1 = Запрос1.Выполнить();
	ТекущаяПолитикаПравилОпт = Результат1.Выгрузить();
	
ТекущаяПолитикаПараметры1 = новый ТаблицаЗначений;
ТекущаяПолитикаПараметры1.Колонки.Добавить("ИмяПараметра");
ТекущаяПолитикаПараметры1.Колонки.Добавить("ЗначениеПараметра");

ТекстЗапросаДляВставкиЦенаРекомендованнойОпт="Выбор ";
//--------вставка правил оптРуб ------------------------
Для сч=0 по ТекущаяПолитикаПравилОпт.Количество()-1 Цикл
	//Главная процедура разбора правил
	ЗаполнитьСтрокуПравилИПараметры(ТекущаяПолитикаПравилОпт[сч], ТекущаяПолитикаПараметры1 ); 
	ТекстЗапросаДляВставкиЦенаРекомендованнойОпт=ТекстЗапросаДляВставкиЦенаРекомендованнойОпт+ "
	|	КОГДА (" + ТекущаяПолитикаПравилОпт[сч].Правило + ") ТОГДА " + ТекущаяПолитикаПравилОпт[сч].ОтпускнаяЦена;
КонецЦикла;
ТекстЗапросаДляВставкиЦенаРекомендованнойОпт=ТекстЗапросаДляВставкиЦенаРекомендованнойОпт+"
|ИНАЧЕ 
|	ВЫБОР 
|		 когда Номенклатура.ВидТовара <> Значение(Перечисление.ВидыТоваров.Диски) 
|		 Тогда ЦенаКрОпт иначе 0 
|   КОНЕЦ	
|КОНЕЦ";

//------------------параметры--------------
для каждого стр111 из ТекущаяПолитикаПараметры1 цикл
	Если ТекущаяПолитикаПараметры.Найти(стр111.ИмяПараметра, "ИмяПараметра") = Неопределено Тогда 
	стр1 = ТекущаяПолитикаПараметры.Добавить();
	ЗаполнитьЗначенияСвойств( стр1, стр111);
	КонецЕсли;
КонецЦикла;




//==================================ЭКСПОРТНЫЕ===========================
Если флUSD Тогда
//+++ 22.06.2015-------------цены USD розн +50%--------------------------------------
ТекстЗапросаPriceRoznUsd="Выбор 
|КОГДА (Номенклатура.ВидТовара = Значение(Перечисление.ВидыТоваров.Диски) И ТипЦен=&Базовая) 
|	Тогда ЦенаБазоваяUSD * 1.50

|КОГДА (Номенклатура.ВидТовара <> Значение(Перечисление.ВидыТоваров.Диски) И ТипЦен=&КрОпт) 
|	Тогда ЦенаКрОпт/ &КурсUSD *100/118 * 1.50
|Иначе 0 Конец";


//+++ 22.06.2015-------------цены USD опт +20%--------------------------------------
ТекстЗапросаPriceOptUsd="Выбор 
|КОГДА (Номенклатура.ВидТовара = Значение(Перечисление.ВидыТоваров.Диски) И ТипЦен=&Базовая) 
|	Тогда ЦенаБазоваяUSD * 1.20

|КОГДА (Номенклатура.ВидТовара <> Значение(Перечисление.ВидыТоваров.Диски) И ТипЦен=&КрОпт) 
|	Тогда ЦенаКрОпт/ &КурсUSD *100/118 * 1.20
|Иначе 0 Конец";
стр1 = ТекущаяПолитикаПараметры.Добавить();
стр1.ИмяПараметра = "КурсUSD";
стр1.ЗначениеПараметра = константы.КурсUSD.Получить();

стр1 = ТекущаяПолитикаПараметры.Добавить();
стр1.ИмяПараметра = "ЦенаБазоваяUSD";
стр1.ЗначениеПараметра = справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00028");
КонецЕсли;


//------------------------------Базовая цена--------------------------------------------------------
ТекстЗапросаДляВставкиЦенаБазовой = "Выбор Когда ТипЦен=&Базовая 
									|Тогда ЦенаПоТипуЦен  
									|иначе 0 Конец";
ТекстЗапросаДляВставкиЦенаКрОпт = "Выбор Когда ТипЦен=&КрОпт 
									|Тогда ЦенаПоТипуЦен  
									|иначе 0 Конец";

//==================================================================================================

Запрос222 = Новый Запрос;
Запрос222.Текст="ВЫБРАТЬ
|   Приоритет, 
|	Номенклатура,   
|	МинимальнаяЦена,
|   ЦенаРекомендованная,
|	ЦенаРекомендованнаяРозн,
|	ЦенаМинРозн,

|	PriceRoznUsd,
|	PriceOptUsd,

|	ЦенаБазовая,
|	ЦенаКрОпт
|
|	ПОМЕСТИТЬ ВТ_Товары
| ИЗ
| (ВЫБРАТЬ 
|	Номенклатура,   
|	0000 как МинимальнаяЦена,
|	000 ЦенаРекомендованная,
|	00 ЦенаРекомендованнаяРозн,
|	00 ЦенаМинРозн, 

|	00 PriceRoznUsd,
|	00 PriceOptUsd,

|   00 ЦенаБазовая,
|   00 ЦенаКрОпт,
|	1 Приоритет
|	ИЗ 
| ( ВЫБРАТЬ 
|	ЦеныНоменклатурыСрезПоследних.Номенклатура, 
|	ЦеныНоменклатурыСрезПоследних.ТипЦен, 
|	ЦеныНоменклатурыСрезПоследних.Цена ЦенаПоТипуЦен,
|	ЕстьNull(ЦеныНоменклатурыСрезПоследних1.Цена,0) как ЦенаФедунова,
|	ЕстьNull(ЦеныНоменклатурыСрезПоследних2.Цена,0) как ЦенаКрОпт
|"+?(флUSD,"	, ЕстьNull(ЦеныНоменклатурыСрезПоследних3.Цена,0) как ЦенаБазоваяUSD","")+"

|	ИЗ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(//&ДатаЦены
|		, (ТипЦен В (&СписокТиповЦен)
//|	ИЛИ ТипЦен = &КрОпт 
|		)	И Номенклатура В (&СписокНоменклатуры) ) как ЦеныНоменклатурыСрезПоследних

//+++ 07.11.2014 именно левым соединением - в том же типе цен должна быть еще и цена Федунова... 
//		для Рекомендованной цены по не дискам!
|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &КолесаТУТ


//23.12.2015 - Очень тормозит!   НЕ ДЛЯ ДИСКОВ
//|И Номенклатура В (&СписокНоменклатуры) И (не Номенклатура.ВидТовара = &Диски) 
|	И Номенклатура в (ВЫБРАТЬ
|	спрНоменклатура.Ссылка
|ИЗ
|	Справочник.Номенклатура КАК спрНоменклатура
|ГДЕ
|	спрНоменклатура.Ссылка В (&СписокНоменклатуры)
|	И спрНоменклатура.ВидТовара <> Значение(Перечисление.ВидыТоваров.Диски) )
//+++)


|) КАК ЦеныНоменклатурыСрезПоследних1

|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних1.Номенклатура

//+++ 10.03.2015 именно левым соединением - в том же типе цен должна быть еще и цена Федунова... 
//		для Рекомендованной цены по не дискам!
|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &КрОпт И Номенклатура В (&СписокНоменклатуры)
|		И (не Номенклатура.ВидТовара = &Диски) ) КАК ЦеныНоменклатурыСрезПоследних2

|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних2.Номенклатура

//+++ 22.06.2015 именно левым соединением - в том же типе цен должна быть еще и цена Федунова... 
//		для Рекомендованной цены по не дискам!
|"+?(флUSD,"		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &БазоваяUSD



//23.12.2015 - Очень тормозит!  ТОЛЬКО ДИСКИ
//|		И Номенклатура В (&СписокНоменклатуры) И (Номенклатура.ВидТовара = &Диски)      
|	И Номенклатура в (ВЫБРАТЬ
|	спрНоменклатура.Ссылка
|ИЗ
|	Справочник.Номенклатура КАК спрНоменклатура
|ГДЕ
|	спрНоменклатура.Ссылка В (&СписокНоменклатуры)
|	И спрНоменклатура.ВидТовара = Значение(Перечисление.ВидыТоваров.Диски) )
//+++)



| ) КАК ЦеныНоменклатурыСрезПоследних3

|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних3.Номенклатура
|","")+"
//+++ 03.03.2015 ВСЕ ЦЕНЫ И НУЛЕВЫЕ ТОЖЕ
|   ГДЕ ЦеныНоменклатурыСрезПоследних.Цена > 0 
|)ЦеныНоменклатуры 
//+++ 03.03.2015 ВСЕ ЦЕНЫ И НУЛЕВЫЕ ТОЖЕ
//| ГДЕ 0000>0
|) А
|;
|
|ВЫБРАТЬ Номенклатура,  МИНИМУМ(Приоритет) Приоритет	
|ПОМЕСТИТЬ ВТ_ПриоритетыТоваров
|	ИЗ 
|ВТ_Товары
|СГРУППИРОВАТЬ ПО Номенклатура
|;
//============================================================
|ВЫБРАТЬ  
|Максимум( ВТ_Товары.Приоритет), 
| ВТ_Товары.Номенклатура.Код как НоменклатураКод, 
|Максимум( Выразить(ВТ_Товары.МинимальнаяЦена как число(15,0)) ) как Цена,
|Максимум( Выразить(ВТ_Товары.ЦенаРекомендованная как число(15,0)) ) как Цена1,
//"+?(НаТерминал, "
|Максимум(  Выразить(ЕстьNull(ВТ_Товары.ЦенаРекомендованнаяРозн,0) как число(15,0)) ) как Цена2,

|Максимум( Выразить(ВТ_Товары.ЦенаМинРозн как число(15,0)) ) как ЦенаМинРозн,

|"+?(флUSD,"Максимум( Выразить(ВТ_Товары.PriceRoznUsd как число(15,2)) ) как PriceRoznUsd,
|"    +?(НаТерминал, "Максимум( Выразить(ВТ_Товары.PriceOptUsd как число(15,2)) ) как PriceOptUsd,","")
  ,"")+"
 
|Максимум( Выразить(ВТ_Товары.ЦенаБазовая как число(15,0)) ) как ЦенаБазовая,
|Максимум( Выразить(ВТ_Товары.ЦенаКрОпт как число(15,0)) ) как ЦенаКрОпт
|
|ИЗ ВТ_Товары



|
|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриоритетыТоваров
|ПО  ВТ_Товары.Номенклатура= ВТ_ПриоритетыТоваров.Номенклатура 
|И ВТ_Товары.Приоритет= ВТ_ПриоритетыТоваров.Приоритет 




|ГДЕ
|	ПОДСТРОКА(ВТ_Товары.Номенклатура.Код, 1, 1) В (""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"")
|И Выразить(ВТ_Товары.МинимальнаяЦена как число(15,0))>0


|СГРУППИРОВАТЬ ПО  
| ВТ_Товары.Номенклатура.Код


|УПОРЯДОЧИТЬ ПО НоменклатураКод
|";

 Запрос222.Параметры.Вставить("СписокНоменклатуры", списНом);
 Запрос222.Текст=СтрЗаменить(Запрос222.Текст,"0000",ТекстЗапросаДляВставкиЦена);
 Запрос222.Текст=СтрЗаменить(Запрос222.Текст,"1 Приоритет",ТекстЗапросаДляВставкиПриоритет);
 
 Если НаТерминал Тогда
 	 Запрос222.Текст=СтрЗаменить(Запрос222.Текст,"000 ЦенаРекомендованная",ТекстЗапросаДляВставкиЦенаРекомендованнойОпт+" как ЦенаРекомендованная");
  	Запрос222.Текст=СтрЗаменить(Запрос222.Текст,"00 ЦенаРекомендованнаяРозн",ТекстЗапросаДляВставкиЦенаРекомендованной+" как ЦенаРекомендованнаяРозн");
Иначе
 	Запрос222.Текст=СтрЗаменить(Запрос222.Текст,"000 ЦенаРекомендованная",ТекстЗапросаДляВставкиЦенаРекомендованной+" как ЦенаРекомендованная");
КонецЕсли;

	
Если флUSD Тогда //+++ 22.06.2015
	 Запрос222.Текст=СтрЗаменить(Запрос222.Текст,"00 PriceRoznUsd", ТекстЗапросаPriceRoznUsd+" как PriceRoznUsd");//+++ 22.06.2015
	Если НаТерминал Тогда
 	 Запрос222.Текст=СтрЗаменить(Запрос222.Текст,"00 PriceOptUsd", ТекстЗапросаPriceOptUsd+" как PriceOptUsd");
	КонецЕсли; 
КонецЕсли;

 Запрос222.Текст=СтрЗаменить(Запрос222.Текст,"00 ЦенаМинРозн", ТекстЗапросаДляВставкиЦенаМинРозничн+" как ЦенаМинРозн");//+++ 13.05.2015
 Запрос222.Текст=СтрЗаменить(Запрос222.Текст,"00 ЦенаБазовая", ТекстЗапросаДляВставкиЦенаБазовой+" как ЦенаБазовая"); //+++ 07.11.2014
 Запрос222.Текст=СтрЗаменить(Запрос222.Текст,"00 ЦенаКрОпт", ТекстЗапросаДляВставкиЦенаКрОпт+" как ЦенаКрОпт"); //+++ 12.04.2017
 
 Запрос222.Параметры.Вставить("КолесаТУТ", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00012") );
 Запрос222.Параметры.Вставить("Базовая", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") );
 Запрос222.Параметры.Вставить("КрОпт",   справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") );
  //+++ 07.11.2014
СписокТиповЦен=Новый СписокЗначений;

 Для сч=0 по ТекущаяПолитикаПараметры.Количество()-1 Цикл
	 ИмяПараметра =ТекущаяПолитикаПараметры[сч].ИмяПараметра;
	 ЗначениеПараметра = ТекущаяПолитикаПараметры[сч].ЗначениеПараметра;
	 Если ИмяПараметра<>"" Тогда
 	 	Запрос222.Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
	 КонецЕсли;
	 
	  Если ТипЗнч(ЗначениеПараметра)= Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		Если  СписокТиповЦен.НайтиПоЗначению(ЗначениеПараметра) =Неопределено Тогда
			СписокТиповЦен.Добавить(ЗначениеПараметра);
		КонецЕсли;	   
	 КонецЕсли;	

 КонецЦикла;	 
 
 Если флUSD Тогда //+++ 22.06.2015
	 СписокТиповЦен.Добавить( справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00028") ); // Базовая USD
 КонецЕсли;	 
 
 СписокТиповЦен.Добавить( справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") ); //12.04.2017 Кр.опт	 
 
 Запрос222.Параметры.Вставить("СписокТиповЦен", СписокТиповЦен);  //+++ 07.11.2014

 #Если Клиент Тогда
	 Состояние("Идет получение цен по общим правилам для "+строка(списНом.Количество())+" товаров...");
 #КонецЕсли	 
 
 рез = Запрос222.Выполнить();
 таблРез = рез.Выгрузить();
 
 //===========================Заглушка - в запросе!====================================================
 
#Если Клиент Тогда
	 Состояние(строка(ТекущаяДАта())+"Начат анализ "+строка(списНом.Количество())+" товаров по таблице цен из "+строка(таблРез.Количество())+" товаров...");
	 Сообщить(строка(ТекущаяДАта())+" Начат анализ "+строка(списНом.Количество())+" товаров по таблице цен из "+строка(таблРез.Количество())+" товаров...");
 #КонецЕсли 
 
 //таблРез.Колонки.Удалить(0);//Приоритет
 
 
 //+++++++++++++++++++++++++++Плотников 11.04.2016 Замена цен на шины
 МенеджерВремТаблиц = нОВЫЙ МенеджерВременныхТаблиц;
 
 ЗапросПоЦенамНаШины = Новый Запрос;
 ЗапросПоЦенамНаШины.МенеджерВременныхТаблиц = МенеджерВремТаблиц;
 ЗапросПоЦенамНаШины.УстановитьПараметр("ТЗ_врем",таблРез);
 ЗапросПоЦенамНаШины.УстановитьПараметр("типШины",Перечисления.ВидыТоваров.Шины);
 ЗапросПоЦенамНаШины.УстановитьПараметр("РРЦШины",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00011"));
 ЗапросПоЦенамНаШины.УстановитьПараметр("МРИЦШины",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00025"));
 ЗапросПоЦенамНаШины.Текст = "ВЫБРАТЬ
                             |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.Код, ЦеныНоменклатурыСрезПоследних1.Номенклатура.Код) КАК Номенклатура,
                             |	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК РРЦ,
                             |	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних1.Цена, 0)) КАК МРИЦ
                             |ПОМЕСТИТЬ ЦеныНаШины
                             |ИЗ
                             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
                             |			,
                             |			ТипЦен = &РРЦШины
                             |				И Номенклатура.ВидТовара = &типШины) КАК ЦеныНоменклатурыСрезПоследних
                             |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
                             |				,
                             |				ТипЦен = &МРИЦШины
                             |					И Номенклатура.ВидТовара = &типШины) КАК ЦеныНоменклатурыСрезПоследних1
                             |		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних1.Номенклатура
                             |
                             |СГРУППИРОВАТЬ ПО
                             |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.Код, ЦеныНоменклатурыСрезПоследних1.Номенклатура.Код)
                             |;
                             |
                             |////////////////////////////////////////////////////////////////////////////////
                             |ВЫБРАТЬ
                             |	ТЗ_Врем.НоменклатураКод,
                             |	ТЗ_Врем.Цена,
                             |	ТЗ_Врем.Цена1,
                           //  |	ТЗ_Врем.Цена2,
                             |	ТЗ_Врем.ЦенаМинРозн,
                             |	ТЗ_Врем.ЦенаБазовая,
							 |	ТЗ_Врем.ЦенаКрОпт
                             
                             |ПОМЕСТИТЬ Цены_Все
                             |ИЗ
                             |	&ТЗ_Врем КАК ТЗ_Врем
                             |;
                             |
                             |////////////////////////////////////////////////////////////////////////////////
                             |ВЫБРАТЬ
                             |	Номенклатура1.Код КАК Номенклатура,
                             |	МАКСИМУМ(ЕСТЬNULL(ЦеныНаШины.РРЦ, 0)) КАК РРЦ,
                             |	МАКСИМУМ(ЕСТЬNULL(ЦеныНаШины.МРИЦ, 0)) КАК МРИЦ
                             |ПОМЕСТИТЬ ВсеШины
                             |ИЗ
                             |	Справочник.Номенклатура КАК Номенклатура1
                             |		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНаШины КАК ЦеныНаШины
                             |		ПО Номенклатура1.Код = ЦеныНаШины.Номенклатура
                             |ГДЕ
                             |	Номенклатура1.ВидТовара = &типШины
                             |
                             |СГРУППИРОВАТЬ ПО
                             |	Номенклатура1.Код
                             |;
                             |
                             |////////////////////////////////////////////////////////////////////////////////
                             |ВЫБРАТЬ
                             |	Цены_Все.НоменклатураКод,
                             |	Цены_Все.Цена,
                             |	Цены_Все.Цена1,
                             |	ВЫБОР
                             |		КОГДА ВсеШины.МРИЦ ЕСТЬ NULL 
                             |			ТОГДА ЕстьNull(Цены_Все.ЦенаМинРозн,0)
                             |		ИНАЧЕ ВсеШины.МРИЦ
                             |	КОНЕЦ КАК Цена2,
                             |	ВЫБОР
                             |		КОГДА ВсеШины.РРЦ ЕСТЬ NULL 
                             |			ТОГДА Цены_Все.ЦенаМинРозн
                             |		ИНАЧЕ ВсеШины.РРЦ
                             |	КОНЕЦ КАК ЦенаМинРозн,
                             |	Цены_Все.ЦенаБазовая,
							 |	Цены_Все.ЦенаКрОпт
                             |ИЗ
                             |	Цены_Все КАК Цены_Все
                             |		ЛЕВОЕ СОЕДИНЕНИЕ ВсеШины КАК ВсеШины
                             |		ПО Цены_Все.НоменклатураКод = ВсеШины.Номенклатура";
 таблРез = ЗапросПоЦенамНаШины.Выполнить().Выгрузить();
 
 //+++++++++++++++++++++++++++++++++Плотников
 
 #Если Клиент Тогда
 Состояние("Идет выгрузка цен в файл...");
 #КонецЕсли	 
 выгрузитьВTXT(таблРез, путь, , "Item");  
 
  //	<Items> <Item  Id="" Price="" Price1="" PriceBase="">
		текстФайл = новый ТекстовыйДокумент;
		текстФайл.Прочитать(путь+ "Item.xml");
		
		текстФайла = текстФайл.ПолучитьТекст(); //+++ 
		текстФайла = стрЗаменить(текстФайла, "Items", "PriceOfProducts");
		текстФайла = стрЗаменить(текстФайла, "ProductId", "Id");
		текстФайл.УстановитьТекст(текстФайла);
		
		текстФайл.Записать(путь+ "PriceOfProduct"+?(НаТерминал,"Terminal","")+".xml");

 #Если Клиент Тогда
 Состояние(" ");
 #КонецЕсли	 
 
КонецПроцедуры	//sim_ВыгрузитьЦеныПродуктов

//Partner.xml
процедура SIM_ВыгрузитьКлиентовStore(путь="") 
		
	   Запрос = ПолучитьЗапросВсехКлиентовТерминал(); //25.07.2017
	Результат = Запрос.Выполнить();
	  табл = Результат.выгрузить();
		
		ост = новый ТаблицаЗначений;
		ост.Колонки.Добавить("Guid");          //+++ 09.06 GUID -> 03.09.2015 Guid
		ост.Колонки.Добавить("ОсновнойМенеджер");
		ост.Колонки.Добавить("КонтрагентКод");
		ост.Колонки.Добавить("Наименование");
		ост.Колонки.Добавить("НаименованиеПолное");
		ост.Колонки.Добавить("КонтактФио");
		ост.Колонки.Добавить("Адрес");
		ост.Колонки.Добавить("Телефон");
		ост.Колонки.Добавить("ИНН");
		ост.Колонки.Добавить("КПП");
		ост.Колонки.Добавить("НомерДоговора");
		ост.Колонки.Добавить("ДатаДоговора");
		
		ост.Колонки.Добавить("ДоговорСТранспортной");
		ост.Колонки.Добавить("флагДоговорПредоплаты"); //+++ 14.02.2017
		//+++ 26.09.2017
		ост.Колонки.Добавить("ОснСпособОтгрузки");       //  WayOfDelivery 
		ост.Колонки.Добавить("флагЕстьДоговорПредоплаты"); //HasPrepay 
		ост.Колонки.Добавить("флагЕстьДоговорСоЗвездой"); // HasStar 
		
		ост.Колонки.Добавить("IsStar"); //16.10.2017 IsStar
		ост.Колонки.Добавить("ПодразделениеЛогистики"); //21.11.2017 LogistikDepartment
		
		ост.Колонки.Добавить("ЦеныРаспродажи"); //01.12.2015
		ост.Колонки.Добавить("ПроцентНаценкиТранспорта"); //01.12.2015
		таблКлиентыРаспродажи = получитьКлиентовРаспродажи(); //29.01.2016
		
		ост.Колонки.Добавить("Культура"); //+++ 29.04.2015
		
		ост.Колонки.Добавить("РазСтопЛист"); //+++ 05.07.2017	
		ост.Колонки.Добавить("РазрешитьСезоннуюОтсрочку"); //+++ 22.03.2018
		
		ост.Колонки.Добавить("OperatorId"); //+++ 21.05.2018
		
	//	Для каждого клиент из СписокКлиентовМИМ Цикл
		для каждого стр0 из табл цикл //27.09.2017
			стр1 = ост.Добавить();
			
			//ЗаполнитьЗначенияСвойств(стр1, стр0.Ссылка);
			ЗаполнитьЗначенияСвойств(стр1, стр0);//27.09.2017 - все поля
			
			стр1.Guid =строка( стр0.Ссылка.УникальныйИдентификатор() ); //+++ 09.06.2015
			стр1.ОсновнойМенеджер = строка(стр0.ОсновнойМенеджерКонтрагента.УникальныйИдентификатор() );
			//стр1.ДоговорСТранспортной = стр0.ЕстьДоговорДПД;
 			//стр1.КонтрагентКод = СокрЛП(стр0.КонтрагентКод); 
			//стр1.НомерДоговора = стр0.НомерДоговора;
			стр1.ДатаДоговора  = Формат(стр0.ДоговорДата,"ДЛФ=Д"); // нужна строка
			
			стр1.Адрес   =  ПолучитьАдресИзКонтактнойИнформации(стр0.Ссылка,"Юридический");
			стр1.Телефон =  ПолучитьТелефонИзКонтактнойИнформации(стр0.Ссылка);
			стр1.Телефон = стрЗаменить(стр1.Телефон, ";", ",");
			стр1.Телефон = стрЗаменить(стр1.Телефон, символ(16), ",");                                       
			стр1.Телефон = стрЗаменить(стр1.Телефон, символ(19), ",");
						
			//+++ 21.05.2018 --- UID -----
			если ЗначениеЗаполнено(стр0.Оператор) и ЗначениеЗаполнено(стр0.Оператор.физЛицо) тогда
				стр1.OperatorId = строка( стр0.Оператор.физЛицо.УникальныйИдентификатор() );   //22.05.2018
			иначе
				стр1.OperatorId = "";
			КонецЕсли;
			
			стр1.Культура = ?( стр0.флЭкспортный, "en-US", "");
			
			НайденнаяСтрока = таблКлиентыРаспродажи.Найти( стр0.Ссылка, "Контрагент");
			ЕстьРаспродажа = (НайденнаяСтрока <> Неопределено);
			Если стр0.флЭкспортный или ЕстьРаспродажа Тогда
				стр1.ЦеныРаспродажи = Истина;
			КонецЕсли;
			
			стр1.РазСтопЛист = стр0.флЭкспортный или стр0.РазрешитьГрузитьТоварыИзСтопЛиста;
			
		КонецЦикла;	
		
		выгрузитьВTXT(ост, путь,, "Partner"); // КодКлиента, НаименованиеПолное, , Адрес, Телефон, ИНН, КПП 
		
КонецПроцедуры

//AddressesOfPartners.xml
процедура SIM_ВыгрузитьАдресаКлиентовStore(путь="") 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("адрес",Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	СписокВидов.Добавить(Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00015"));
	
	Запрос.УстановитьПараметр("СписокВидовАлресов",СписокВидов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Авторизация.Владелец
	               |ПОМЕСТИТЬ СписокКонтрагентов
	               |ИЗ
	               |	Справочник.Авторизация КАК Авторизация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Вид,
	               |	КонтактнаяИнформация.Объект КАК Контрагент
	               |ПОМЕСТИТЬ ВсеАдреса
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Тип = &Адрес
	               |	И КонтактнаяИнформация.Объект В
	               |			(ВЫБРАТЬ
	               |				СписокКонтрагентов.Владелец
	               |			ИЗ
	               |				СписокКонтрагентов КАК СписокКонтрагентов)
	               |	И КонтактнаяИнформация.Вид.Наименование <> ""<не используется>""
	               |	И НЕ КонтактнаяИнформация.Вид В (&СписокВидовАлресов)
	               |	И КонтактнаяИнформация.Вид.Наименование ПОДОБНО ""%Адрес доставки%""
	               |	И КонтактнаяИнформация.ВыгружатьВТерминал = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеАдреса.Контрагент.Код КАК Контрагент,
	               |	ВЫРАЗИТЬ(ВсеАдреса.Представление КАК СТРОКА(200)) КАК Адрес,
	               |	Точки.Номер КАК Точка,
	               |	ВсеАдреса.Вид.Код КАК КодАдреса
	               |ПОМЕСТИТЬ АдресаСТочками
	               |ИЗ
	               |	ВсеАдреса КАК ВсеАдреса
				   //11.04.2018
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (выбрать тчк.Номер, тчк.ВидАдреса, тчк.Владелец 
				   |		из Справочник.Точки как тчк
				    //+++ 10.04.2018 - удаленные точки НЕ выгружаем (и их не видно в карточке клиента)
				   |	ГДЕ Тчк.ПометкаУдаления = ЛОЖЬ ) КАК Точки
	               |		ПО ВсеАдреса.Вид = Точки.ВидАдреса
	               |			И ВсеАдреса.Контрагент = Точки.Владелец
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АдресаСТочками.Контрагент,
	               |	АдресаСТочками.Адрес,
	               |	МАКСИМУМ(АдресаСТочками.Точка) КАК Точка,
	               |	МАКСИМУМ(АдресаСТочками.КодАдреса) КАК КодАдреса
	               |ИЗ
	               |	АдресаСТочками КАК АдресаСТочками
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	АдресаСТочками.Контрагент,
	               |	АдресаСТочками.Адрес";
	рез = Запрос.Выполнить().Выгрузить();
	
	Если Путь="" тогда
		ФайлЗапроса =ПолучитьИмяВременногоФайла("xml");
	иначе
		ФайлЗапроса = путь + ?(прав(путь,1)="\","","\") + "AddressesOfPartners.xml"; 
	КонецЕсли;

    // Записываем в файл текстовое содержимое
    // тела запроса (переменная "ТелоЗапроса")	
	Запись = Новый ЗаписьXML();
    Запись.УстановитьСтроку("UTF-8");
    Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("Items");
		
	Для каждого стр из рез Цикл
		Если сокрЛП(стр.Адрес) <> "" Тогда
			Запись.ЗаписатьНачалоЭлемента("Item");
			Запись.ЗаписатьАтрибут("Address",сокрЛП(стр.Адрес));
			Запись.ЗаписатьАтрибут("PointId",?(стр.Точка<>"" и стр.Точка<>Null,СтрЗаменить(строка(стр.Точка),Символы.НПП,""),""));
			Запись.ЗаписатьАтрибут("AddressId",сокрЛП(стр.КодАдреса));
			Запись.ЗаписатьАтрибут("PartnerId",сокрЛП(стр.Контрагент));
			Запись.ЗаписатьКонецЭлемента(); 
		КонецЕсли;
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента(); // Items

    ТелоЗапроса = Запись.Закрыть();
	
    ТекстовыйФайл = Новый ТекстовыйДокумент;
    ТекстовыйФайл.УстановитьТекст(ТелоЗапроса);           
    ТекстовыйФайл.Записать(ФайлЗапроса, КодировкаТекста.UTF8);
 
КонецПроцедуры	



процедура SIM_ВыгрузитьМенеджеровStore(путь="") экспорт
	Запрос = Новый Запрос;
		Запрос.Текст = 
        "ВЫБРАТЬ РАЗЛИЧНЫЕ
        |	Авторизация.Владелец.ОсновнойМенеджерКонтрагента КАК Менеджер,
        |	Авторизация.Владелец.ОсновнойМенеджерКонтрагента.ФизЛицо КАК ФизЛицо,
        |	Авторизация.Владелец.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение.Код КАК ОсновноеПодразделениеКод
        |ПОМЕСТИТЬ ВТМенеджеры
        |ИЗ
        |	Справочник.Авторизация КАК Авторизация
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ПользователиПомощники.Помощник,
        |	ПользователиПомощники.Помощник КАК ФизЛицо,
        |	ПользователиПомощники.Ссылка.ОсновноеПодразделение.Код
        |ПОМЕСТИТЬ втПомощники
        |ИЗ
        |	Справочник.Пользователи.Помощники КАК ПользователиПомощники
        |ГДЕ
        |	ПользователиПомощники.Ссылка В
        |			(ВЫБРАТЬ
        |				ВТМенеджеры.Менеджер
        |			ИЗ
        |				ВТМенеджеры)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ВТМенеджеры.Менеджер КАК Менеджер,
        |	ВТМенеджеры.ФизЛицо,
        |	ВТМенеджеры.ОсновноеПодразделениеКод
        |ПОМЕСТИТЬ ВТ
        |ИЗ
        |	ВТМенеджеры КАК ВТМенеджеры
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	втПомощники.Помощник,
        |	втПомощники.ФизЛицо,
        |	втПомощники.ОсновноеПодразделениеКод
        |ИЗ
        |	втПомощники КАК втПомощники
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	КонтактнаяИнформация.Объект,
        |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК Мобильный
        |ПОМЕСТИТЬ МобильныйП
        |ИЗ
        |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
        |ГДЕ
        |	КонтактнаяИнформация.Вид = &Мобильный
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	КонтактнаяИнформация.Объект,
        |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК Почта
        |ПОМЕСТИТЬ ПочтаП
        |ИЗ
        |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
        |ГДЕ
        |	КонтактнаяИнформация.Вид = &Почта
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	КонтактнаяИнформация.Объект,
        |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК Скайп
        |ПОМЕСТИТЬ СкайпП
        |ИЗ
        |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
        |ГДЕ
        |	КонтактнаяИнформация.Вид = &Скайп
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	КонтактнаяИнформация.Объект,
        |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК Фото
        |ПОМЕСТИТЬ ФотоП
        |ИЗ
        |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
        |ГДЕ
        |	КонтактнаяИнформация.Вид = &Фото
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	КонтактнаяИнформация.Объект,
        |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК Внутренний
        |ПОМЕСТИТЬ ВнутреннийП
        |ИЗ
        |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
        |ГДЕ
        |	КонтактнаяИнформация.Вид = &Внутренний
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	КонтактнаяИнформация.Объект,
        |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК аська
        |ПОМЕСТИТЬ АськаП
        |ИЗ
        |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
        |ГДЕ
        |	КонтактнаяИнформация.Вид = &icq
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ВЫРАЗИТЬ(""Guid"" КАК СТРОКА(38)) КАК Guid,
        |	ВЫБОР
        |		КОГДА ВТ.Менеджер ССЫЛКА Справочник.ФизическиеЛица
        |			ТОГДА ВТ.Менеджер.Представление
        |		КОГДА ВТ.ФизЛицо.Представление ЕСТЬ NULL 
        |			ТОГДА ВТ.Менеджер.Наименование
        |		ИНАЧЕ ВТ.ФизЛицо.Представление
        |	КОНЕЦ КАК ФИО,
        |	NULL КАК Email,
        |	NULL КАК MobilePhoneNumber,
        |	NULL КАК InternalPhoneNumber,
        |	NULL КАК Skype,
        |	ВТ.Менеджер,
        |	NULL КАК Фото,
        |	NULL КАК icq,
        |	ВТ.ОсновноеПодразделениеКод КАК storage
        |ПОМЕСТИТЬ Свод
        |ИЗ
        |	ВТ КАК ВТ
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	NULL,
        |	ВЫБОР
        |		КОГДА ВТ.Менеджер ССЫЛКА Справочник.ФизическиеЛица
        |			ТОГДА ВТ.Менеджер.Представление
        |		КОГДА ВТ.ФизЛицо.Представление ЕСТЬ NULL 
        |			ТОГДА ВТ.Менеджер.Наименование
        |		ИНАЧЕ ВТ.ФизЛицо.Представление
        |	КОНЕЦ,
        |	NULL,
        |	МобильныйП.Мобильный,
        |	NULL,
        |	NULL,
        |	ВТ.Менеджер,
        |	NULL,
        |	NULL,
        |	ВТ.ОсновноеПодразделениеКод
        |ИЗ
        |	ВТ КАК ВТ
        |		ЛЕВОЕ СОЕДИНЕНИЕ МобильныйП КАК МобильныйП
        |		ПО ВТ.ФизЛицо = МобильныйП.Объект
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	NULL,
        |	ВЫБОР
        |		КОГДА ВТ.Менеджер ССЫЛКА Справочник.ФизическиеЛица
        |			ТОГДА ВТ.Менеджер.Представление
        |		КОГДА ВТ.ФизЛицо.Представление ЕСТЬ NULL 
        |			ТОГДА ВТ.Менеджер.Наименование
        |		ИНАЧЕ ВТ.ФизЛицо.Представление
        |	КОНЕЦ,
        |	ПочтаП.Почта,
        |	NULL,
        |	NULL,
        |	NULL,
        |	ВТ.Менеджер,
        |	NULL,
        |	NULL,
        |	ВТ.ОсновноеПодразделениеКод
        |ИЗ
        |	ВТ КАК ВТ
        |		ЛЕВОЕ СОЕДИНЕНИЕ ПочтаП КАК ПочтаП
        |		ПО ВТ.ФизЛицо = ПочтаП.Объект
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	NULL,
        |	ВЫБОР
        |		КОГДА ВТ.Менеджер ССЫЛКА Справочник.ФизическиеЛица
        |			ТОГДА ВТ.Менеджер.Представление
        |		КОГДА ВТ.ФизЛицо.Представление ЕСТЬ NULL 
        |			ТОГДА ВТ.Менеджер.Наименование
        |		ИНАЧЕ ВТ.ФизЛицо.Представление
        |	КОНЕЦ,
        |	NULL,
        |	NULL,
        |	NULL,
        |	СкайпП.Скайп,
        |	ВТ.Менеджер,
        |	NULL,
        |	NULL,
        |	ВТ.ОсновноеПодразделениеКод
        |ИЗ
        |	ВТ КАК ВТ
        |		ЛЕВОЕ СОЕДИНЕНИЕ СкайпП КАК СкайпП
        |		ПО ВТ.ФизЛицо = СкайпП.Объект
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	NULL,
        |	ВЫБОР
        |		КОГДА ВТ.Менеджер ССЫЛКА Справочник.ФизическиеЛица
        |			ТОГДА ВТ.Менеджер.Представление
        |		КОГДА ВТ.ФизЛицо.Представление ЕСТЬ NULL 
        |			ТОГДА ВТ.Менеджер.Наименование
        |		ИНАЧЕ ВТ.ФизЛицо.Представление
        |	КОНЕЦ,
        |	NULL,
        |	NULL,
        |	ВнутреннийП.Внутренний,
        |	NULL,
        |	ВТ.Менеджер,
        |	NULL,
        |	NULL,
        |	ВТ.ОсновноеПодразделениеКод
        |ИЗ
        |	ВТ КАК ВТ
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВнутреннийП КАК ВнутреннийП
        |		ПО ВТ.ФизЛицо = ВнутреннийП.Объект
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	NULL,
        |	ВЫБОР
        |		КОГДА ВТ.Менеджер ССЫЛКА Справочник.ФизическиеЛица
        |			ТОГДА ВТ.Менеджер.Представление
        |		КОГДА ВТ.ФизЛицо.Представление ЕСТЬ NULL 
        |			ТОГДА ВТ.Менеджер.Наименование
        |		ИНАЧЕ ВТ.ФизЛицо.Представление
        |	КОНЕЦ,
        |	NULL,
        |	NULL,
        |	NULL,
        |	NULL,
        |	ВТ.Менеджер,
        |	ФотоП.Фото,
        |	NULL,
        |	ВТ.ОсновноеПодразделениеКод
        |ИЗ
        |	ВТ КАК ВТ
        |		ЛЕВОЕ СОЕДИНЕНИЕ ФотоП КАК ФотоП
        |		ПО ВТ.ФизЛицо = ФотоП.Объект
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	NULL,
        |	ВЫБОР
        |		КОГДА ВТ.Менеджер ССЫЛКА Справочник.ФизическиеЛица
        |			ТОГДА ВТ.Менеджер.Представление
        |		КОГДА ВТ.ФизЛицо.Представление ЕСТЬ NULL 
        |			ТОГДА ВТ.Менеджер.Наименование
        |		ИНАЧЕ ВТ.ФизЛицо.Представление
        |	КОНЕЦ,
        |	NULL,
        |	NULL,
        |	NULL,
        |	NULL,
        |	ВТ.Менеджер,
        |	NULL,
        |	АськаП.аська,
        |	ВТ.ОсновноеПодразделениеКод
        |ИЗ
        |	ВТ КАК ВТ
        |		ЛЕВОЕ СОЕДИНЕНИЕ АськаП КАК АськаП
        |		ПО ВТ.ФизЛицо = АськаП.Объект
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	Свод.Менеджер КАК Менеджер,
        |	МАКСИМУМ(Свод.Guid) КАК Guid,
        |	МАКСИМУМ(Свод.MobilePhoneNumber) КАК MobilePhoneNumber,
        |	МАКСИМУМ(Свод.Email) КАК Email,
        |	МАКСИМУМ(Свод.Skype) КАК Skype,
        |	МАКСИМУМ(Свод.InternalPhoneNumber) КАК InternalPhoneNumber,
        |	МАКСИМУМ(Свод.Фото) КАК personal_photo,
        |	МАКСИМУМ(Свод.icq) КАК personal_icq,
        |	МАКСИМУМ(Свод.storage) КАК storage,
		|	Свод.ФИО
        |ИЗ
        |	Свод КАК Свод
        |
        |СГРУППИРОВАТЬ ПО
        |	Свод.Менеджер,
		|   Свод.ФИО
        |
        |УПОРЯДОЧИТЬ ПО
        |	Менеджер
        |АВТОУПОРЯДОЧИВАНИЕ" ;

	
    Запрос.УстановитьПараметр("Родитель",Справочники.Контрагенты.НайтиПоКоду("00031  "));
	
	Запрос.УстановитьПараметр("Почта",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38852"));
    Запрос.УстановитьПараметр("Скайп",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38874"));
    Запрос.УстановитьПараметр("Мобильный",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00022"));
    Запрос.УстановитьПараметр("Внутренний",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38840"));
    Запрос.УстановитьПараметр("Фото",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38876"));
	Запрос.УстановитьПараметр("icq",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38881"));
	//список = Новый СписокЗначений;
	//Список.Добавить(Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38852"));
	//Список.Добавить(Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38874"));
	//Список.Добавить(Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00222"));
	//Список.Добавить(Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38840"));
	//Запрос.УстановитьПараметр("Вид",Список);
	
	СписокМенеджеров = Запрос.Выполнить().Выгрузить();
		
	
	
	
	
	
	
	
	//ост = новый ТаблицаЗначений;
		//ост.Колонки.Добавить("Guid");          
		//ост.Колонки.Добавить("ФИО");
		//ост.Колонки.Добавить("Почта");
		
		Для каждого мен из СписокМенеджеров Цикл
			//стр1 = ост.Добавить();
			//ЗаполнитьЗначенияСвойств(стр1, мен);
			мен.Guid =строка( мен.Менеджер.УникальныйИдентификатор() ); 
			попытка
				Если не Мен.Менеджер.Основноеподразделение.ОбособленноеПодразделение тогда
					мен.storage = "00005";	
				конецЕсли;
			исключение
			КонецПопытки;
		КонецЦикла;	
		
		выгрузитьВTXT(СписокМенеджеров,путь,, "Manager");  
		
КонецПроцедуры
	
процедура SIM_ВыгрузитьМенеджеровПоТоварнымГруппамStore(путь="") 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыПоТоварнымГруппам.Контрагент.Код КАК PartnerId,
	|	ВЫРАЗИТЬ(""Guid"" КАК СТРОКА(38)) КАК Guid,
	|	ДоговорыПоТоварнымГруппам.Договор.ОтветственноеЛицо КАК Менеджер
	|ИЗ
	|	РегистрСведений.ДоговорыПоТоварнымГруппам КАК ДоговорыПоТоварнымГруппам
	|
	|УПОРЯДОЧИТЬ ПО
	|	PartnerId";
	
	СписокМенеджеров = Запрос.Выполнить().Выгрузить();
		
		Для каждого мен из СписокМенеджеров Цикл
			мен.Guid =строка( мен.Менеджер.УникальныйИдентификатор() ); 
		КонецЦикла;	
		  списокМенеджеров.Колонки.Удалить("Менеджер");
		выгрузитьВTXT(СписокМенеджеров,путь,, "ManagersOfPartners"); 
		
КонецПроцедуры


процедура SIM_ВыгрузитьПользователейStore(путь="")
Запрос = Новый Запрос;
 Запрос.Текст = "ВЫБРАТЬ
                |	Авторизация.Логин,
                |	Авторизация.Пароль,
                |	Авторизация.Владелец.Код КАК КонтрагентКод
                |ИЗ
                |	Справочник.Авторизация КАК Авторизация
                |ГДЕ
                |	Авторизация.Наименование = &Наименование
                |	И НЕ Авторизация.ПометкаУдаления
                |
                |УПОРЯДОЧИТЬ ПО
                |	Авторизация.Код
                |АВТОУПОРЯДОЧИВАНИЕ";
 
 Запрос.УстановитьПараметр("Наименование","Store.YST.ru" );
 
 Результат = Запрос.Выполнить();
 ТаблЛогПароль = Результат.Выгрузить();
 
 выгрузитьВTXT(ТаблЛогПароль, путь, "", "User"); // МодельПроизводительКод, МодельПроизводитель, Вид
КонецПроцедуры 


процедура sim_ВыгрузитьSuppliers(путь="") Экспорт
	
 КодПодразделения ="5";
	
 Запрос = Новый Запрос;
 Запрос.УстановитьПараметр("Ярославль", КодПодразделения);
 Запрос.Текст = "ВЫБРАТЬ
                |	СрокиДоставки.Код КАК Код,
                |	СрокиДоставки.Поставщик.Код КАК КонтрагентКод,
                |	СрокиДоставки.Поставщик.НаименованиеПолное КАК Наименование,
				|	СрокиДоставки.ТолькоПредоплата КАК ТолькоПредоплата,
                |	СрокиДоставки.СрокДоставки,
                |	ВЫБОР
                |		КОГДА ВложенныйЗапрос.КодПодразделения ЕСТЬ NULL 
                |			ТОГДА ЛОЖЬ
                |		ИНАЧЕ ИСТИНА
                |	КОНЕЦ КАК Активен,
                |	ЕСТЬNULL(ВложенныйЗапрос.КодПодразделения, &Ярославль) КАК ПодразделениеКод,
                |	4 КАК Лимит
                |ИЗ
                |	РегистрСведений.СрокиДоставки КАК СрокиДоставки
                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
                |			ОстаткиНоменклатурыКонтрагентов.Контрагент КАК Контрагент,
                |			ВЫБОР
                |				КОГДА ОстаткиНоменклатурыКонтрагентов.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
                |					ТОГДА &Ярославль
                |				ИНАЧЕ ПОДСТРОКА(ОстаткиНоменклатурыКонтрагентов.Подразделение.Код, 3, 3)
                |			КОНЕЦ КАК КодПодразделения
                |		ИЗ
                |			РегистрСведений.ОстаткиНоменклатурыКонтрагентов КАК ОстаткиНоменклатурыКонтрагентов
                |		ГДЕ
                |			ОстаткиНоменклатурыКонтрагентов.Остаток > 0
				   |			) КАК ВложенныйЗапрос
                |		ПО СрокиДоставки.Поставщик = ВложенныйЗапрос.Контрагент
                |ГДЕ
                |	СрокиДоставки.ОТХ = ЛОЖЬ
				|	И СрокиДоставки.СрокДоставки > 0
               
				//+++ 26.07.2017 - ТОЛЬКО Если включён для выгрузки в Терминал
				|	И СрокиДоставки.Включен
				
               //--------------------только Ярославль-----------------------------------------------
				|	И ЕСТЬNULL(ВложенныйЗапрос.КодПодразделения, &Ярославль) = &Ярославль
                |
                |УПОРЯДОЧИТЬ ПО
                |	Код
                |АВТОУПОРЯДОЧИВАНИЕ";
  
 Результат = Запрос.Выполнить();
 Поставщики = Результат.Выгрузить();
 ии=1;
 Для каждого стр1 из Поставщики Цикл
	 Если стр1.Код = "" Тогда     // один 
		 стр1.Код = строка(ии);   //порядковый номер!
	 КонецЕсли;	 
 	ии = ии + 1;
 КонецЦикла;

 выгрузитьВTXT(Поставщики, путь, "", "Supplier"); 
 
 текстФайл = новый ТекстовыйДокумент;
 текстФайл.Прочитать(путь+ "Supplier.xml");
 текстФайл.Записать(путь + "Suppliers.xml");

 sim_ВыгрузитьRestOfSupplier(путь, Поставщики, КодПодразделения);
 
КонецПроцедуры

процедура sim_ВыгрузитьRestOfSupplier(путь="",таблКодовSupplier, КодПодразделения="5")
 Запрос = Новый Запрос;
 Запрос.Текст = "ВЫБРАТЬ
                |	Коды.Код,
                |	Коды.КонтрагентКод,
                |	Коды.ПодразделениеКод
                |ПОМЕСТИТЬ ВТ_КОДЫ
                |ИЗ
                |	&таблКодовSupplier КАК Коды
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	чернСписок.Номенклатура
                |ПОМЕСТИТЬ ВТ_чернСписок
                |ИЗ
                |	РегистрСведений.НоменклатураИмпорт КАК чернСписок
                |ГДЕ
                |	чернСписок.ЧерныйЛист = ИСТИНА
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	Коды.Код КАК СторПоставщикКод,
                |	ОстаткиНоменклатурыКонтрагентов.Номенклатура.Код КАК НоменклатураКод,
                |	ОстаткиНоменклатурыКонтрагентов.Номенклатура,
                |	ОстаткиНоменклатурыКонтрагентов.Остаток,
                |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК ОстатокЯШТ
                |ПОМЕСТИТЬ ВТ_Товары
                |ИЗ
                |	РегистрСведений.ОстаткиНоменклатурыКонтрагентов КАК ОстаткиНоменклатурыКонтрагентов
                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                |			ВТ_Коды.Код КАК Код,
                |			ВТ_Коды.КонтрагентКод КАК КонтрагентКод,
                |			ВТ_Коды.ПодразделениеКод КАК ПодразделениеКод
                |		ИЗ
                |			ВТ_КОДЫ КАК ВТ_Коды
                |		ГДЕ
                |			ВТ_Коды.ПодразделениеКод = &КодПодразделения) КАК Коды
                |		ПО ОстаткиНоменклатурыКонтрагентов.Контрагент.Код = Коды.КонтрагентКод
                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                |			остаткиТотх.Номенклатура КАК Номенклатура,
                |			СУММА(остаткиТотх.КоличествоОстаток) - МАКСИМУМ(ЕСТЬNULL(ЗаказыЯШТ.КоличествоОстаток, 0)) КАК КоличествоОстаток
                |		ИЗ
                |			(ВЫБРАТЬ
                |				Остатки.Номенклатура КАК Номенклатура,
                |				Остатки.КоличествоОстаток КАК КоличествоОстаток
                |			ИЗ
                |				РегистрНакопления.ТоварыНаСкладах.Остатки( ,
                |						Склад.ЗапретитьИспользование = ЛОЖЬ
				//13.08.2018
                  |			и не Номенклатура в (выбрать вт.Номенклатура из ВТ_чернСписок как вт)
                |							И Склад.Транзитный = ЛОЖЬ) КАК Остатки
                |			
                |			ОБЪЕДИНИТЬ ВСЕ
                |			
                |			ВЫБРАТЬ
                |				ТоварыОТХ.Номенклатура,
                |				ТоварыОТХ.КоличествоОстаток
                |			ИЗ
                |				РегистрНакопления.ТоварыНаОтветственномХранении.Остатки( ,
                |						Контрагент В (&СписКлиентовОТХ)
				//13.08.2018
                  |			и не Номенклатура в (выбрать вт.Номенклатура из ВТ_чернСписок как вт)
                |							И Склад.ЗапретитьИспользование = ЛОЖЬ
                |							И Склад.Транзитный = ЛОЖЬ) КАК ТоварыОТХ) КАК остаткиТотх
                |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                |					Зак.Номенклатура КАК Номенклатура,
                |					Зак.КоличествоОстаток КАК КоличествоОстаток
                |				ИЗ
                |					РегистрНакопления.ЗаказыПокупателей.Остатки(,
                |							ЗаказПокупателя.Проверен
				//13.08.2018
                  |			и не Номенклатура в (выбрать вт.Номенклатура из ВТ_чернСписок как вт)
              |								И ЗаказПокупателя.Транзит = ЛОЖЬ) КАК Зак) КАК ЗаказыЯШТ
                |				ПО остаткиТотх.Номенклатура = ЗаказыЯШТ.Номенклатура
                |		
                |		СГРУППИРОВАТЬ ПО
                |			остаткиТотх.Номенклатура) КАК ТоварыНаСкладахОстатки
                |		ПО ОстаткиНоменклатурыКонтрагентов.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
                |ГДЕ
                |	ОстаткиНоменклатурыКонтрагентов.Контрагент В(&СписокСтороннихПоставщиков)
                |	И ОстаткиНоменклатурыКонтрагентов.Остаток > 0
                |	И ОстаткиНоменклатурыКонтрагентов.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
                |	И ОстаткиНоменклатурыКонтрагентов.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
                |	И ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) <= 0
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	Товары.СторПоставщикКод,
                |	Товары.НоменклатураКод,
                |	МАКСИМУМ(Товары.Остаток) КАК Остаток
                |ИЗ
                |	ВТ_Товары КАК Товары
                |ГДЕ
                |	ПОДСТРОКА(Товары.НоменклатураКод, 1, 1) В (""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"")
                |
                |СГРУППИРОВАТЬ ПО
                |	Товары.СторПоставщикКод,
                |	Товары.НоменклатураКод
				|;
				|УНИЧТОЖИТЬ ВТ_КОДЫ;
				|УНИЧТОЖИТЬ ВТ_чернСписок;
				|УНИЧТОЖИТЬ ВТ_Товары;
				|"; 
				
	СписКлиентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);
	Запрос.УстановитьПараметр("СписКлиентовОТХ",СписКлиентовОТХ);
	
    Запрос.УстановитьПараметр("таблКодовSupplier", таблКодовSupplier);
	
	//---------НЕ ТОЛЬКО ЯРОЛАВЛЬ----------------------------
	Запрос.УстановитьПараметр("КодПодразделения", КодПодразделения); //19.12.2016
	Если КодПодразделения<>"5" Тогда
		запрос.Текст = стрЗаменить(запрос.Текст, "ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)","&Подразделение");
		полныйКодПодразделения = формат(число(КодПодразделения),"ЧЦ=5; ЧВН=; ЧГ=0"); //5 символов!
		Подразделение = справочники.Подразделения.НайтиПоКоду( полныйКодПодразделения );
		Запрос.УстановитьПараметр("Подразделение", Подразделение );
		//для отбора складов
		запрос.Текст = стрЗаменить(запрос.Текст, "Склад.Транзитный = ЛОЖЬ", "Склад.Транзитный И Склад.Подразделение = &Подразделение");
	КонецЕсли;	
		
	СписокСтороннихПоставщиков = яштПоставщики.ПолучитьСписокПоставщиков();  //+++ единая функция!
	Запрос.УстановитьПараметр("СписокСтороннихПоставщиков", СписокСтороннихПоставщиков);

	СписокТиповЦен = новый СписокЗначений; //только по 2м типам! и только от них должно быть ценообразование!
	СписокТиповЦен.Добавить( справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") ); //Кр.Опт    - для всего остального!
	СписокТиповЦен.Добавить( справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") ); // Базовая  - только для дисков (и некоторых шин)
	Запрос.УстановитьПараметр("СписокТиповЦен",СписокТиповЦен);

	 Результат = Запрос.Выполнить();
	 Поставщики = Результат.Выгрузить();

//19.12.2016 - не надо цены!	 Поставщики.Колонки.Удалить(3); //цена
	 
	 выгрузитьВTXT(Поставщики, путь, "", "Item"); 
	 
	 текстФайл = новый ТекстовыйДокумент;
	 текстФайл.Прочитать(путь+ "Item.xml");
	 
	 текстФайла = текстФайл.ПолучитьТекст();
	 текстФайла2 = стрЗаменить(текстФайла, "Items", "Rests"); 	
	 текстФайл.УстановитьТекст(текстФайла2);
	    
	 текстФайл.Записать(путь+ "RestOfSuppliers.xml");

КонецПроцедуры

процедура sim_ВыгрузитьSeasonRestofPartners(путь="")
	
 	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СезонныйАссортиментЭкспорт.Номенклатура.Код,
		|	СезонныйАссортиментЭкспорт.Контрагент.Код КАК КонтрагентКод,
		|	СезонныйАссортиментЭкспорт.Контрагент КАК Контрагент,
		|	СезонныйАссортиментЭкспорт.Номенклатура
		|ИЗ
		|	РегистрСведений.СезонныйАссортиментЭкспорт КАК СезонныйАссортиментЭкспорт
		|ИТОГИ
		|	МАКСИМУМ(КонтрагентКод)
		|ПО
		|	Контрагент";

	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	текстФайл = новый ТекстовыйДокумент;
	текстФайл.Очистить();
	текстФайл.Записать(Путь+"seasonrestofpartners.txt", КодировкаТекста.ANSI ); 

	
	Для каждого строка из Результат.Строки Цикл
		списНом = строка.Строки.ВыгрузитьКолонку("Номенклатура");
		табЦен = ПолучитьЦеныДляКонтрагента(строка.Контрагент, списНом);
		Если ТипЗнч(табЦен)=тип("Строка") Тогда
			табЦен = ПолучитьЦеныДляКонтрагента_РегСв(Строка.Контрагент, списНом);
		КонецЕсли;
		Для каждого стр из табЦен цикл
			Если стр.МинимальнаяЦена<>0 Тогда //11.07.2017
			стр1 = строка.КонтрагентКод+";"+стр.Код+";"+ формат(стр.МинимальнаяЦена,"ЧДЦ=0; ЧГ=0") 
			+ ";" //+++ 21.09.2017 цена предоплаты (стр.ЦенаСоСкидкойПредоплаты) у экспортных клиентов её нет!
			; 
			текстФайл.ДобавитьСтроку(стр1);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	текстФайл.Записать(Путь+"seasonrestofpartners.txt", КодировкаТекста.ANSI ); 
КонецПроцедуры

//rests.txt ============ остатки в TXT формате  ===============================
//   имяTXTФайла = rests.txt -> RestOfProducts  по подразделениям
//и отправляются сразу на сервер с удалением файла...
процедура SIM_ВыгрузитьОстаткиTXT() Экспорт
	
	ВыгрузкаXML = истина;
	
	путь = КаталогВременныхФайлов();	//+++ 29.09.2014 - путь уже! содержит \  но на всякий случай допишем, Если это не так
	
	остНом = SIM_ПолучитьТаблицуТоваров(Истина); // с остатками
	остНом.Колонки.Добавить("ПодрКод");
	
	//+++ 10.01.2016 - ограничение на выгрузку новых (по возвратам) товаров
	файлКодов = новый ТекстовыйДокумент;
	путьКФайламКодов = "C:\1C\prices\";
	файлКодов.Прочитать(путьКФайламКодов+"SpisokTovarov.txt", КодировкаТекста.UTF8 ); // файл на \\sigma\C$\ 
	текстКодов = "";
	текстКодов = файлКодов.ПолучитьТекст();
	текстКодовОтказ = "";
	
	N=остНом.Количество(); i=0;
	//-------------------------доп.обработка данных-------------------------------------
	Пока i<N Цикл
		Если НЕ ЗначениеЗаполнено(остНом[i].НоменклатураКод) Тогда
			#Если Клиент Тогда
				сообщить("удален остаток без кода товара");
			#КонецЕсли	
			остНом.Удалить(i); N=N-1;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(остНом[i].СвободныйОстаток) или остНом[i].СвободныйОстаток<1 Тогда
			#Если Клиент Тогда
				сообщить("удален товар "+остНом[i].НоменклатураКод+" с остатком <1");
			#КонецЕсли	
			остНом.Удалить(i); N=N-1;
			Продолжить;
		КонецЕсли;
		
		//+++ 10.01.2016  проверка по файлу кодов
		попытка
			код1 = остНом[i].НоменклатураКод+";";
			Если Найти(текстКодов, код1)=0 Тогда
				#Если Клиент Тогда
					сообщить("Код товара: "+остНом[i].НоменклатураКод+" - отсутствует в ночной выгрузке цен клиентов!");
				#КонецЕсли	
				текстКодовОтказ = текстКодовОтказ + остНом[i].НоменклатураКод+"="+строка(остНом[i].СвободныйОстаток)+";
				|";
				остНом.Удалить(i); N=N-1;
				Продолжить;
			КонецЕсли;
		исключение
			#Если Клиент Тогда
				сообщить("Не удалось удалить Код товара: "+остНом[i].НоменклатураКод+", который отсутствует в ночной выгрузке цен клиентов!", СтатусСообщения.Внимание);
			#КонецЕсли	
		КонецПопытки;	
		
		Если ЗначениеЗаполнено(остНом[i].ПодразделениеКод) Тогда
			остНом[i].ПодрКод = число(остНом[i].ПодразделениеКод);
		иначе
			#Если Клиент Тогда
				Сообщить("НЕ НАЙДЕНО ПОДРАЗДЕЛЕНИЕ для товара "+строка(остНом[i].НоменклатураКод)+" - "+строка(остНом[i].СвободныйОстаток)+"шт.");
			#КонецЕсли
			остНом[i].ПодрКод = 5;
		КонецЕсли;
		остНом[i].СвободныйОстаток = Цел(остНом[i].СвободныйОстаток); //+++ 10.11.2014 всегда ТОЛЬКО Целый остаток!	
		i=i+1;
	КонецЦикла;
	
	//+++ 10.01.2016 ----------- запишем отказы в отдельный файл (каждый раз перезаписываем файл заново!)
	Если текстКодовОтказ <> "" Тогда 
		файлКодовОтказ = новый ТекстовыйДокумент;
		файлКодовОтказ.УстановитьТекст( текстКодовОтказ );
		файлКодовОтказ.Записать(путьКФайламКодов+"SpisokOtkaz.txt",КодировкаТекста.UTF8);
	КонецЕсли;	
	
	остНом.Колонки.Удалить("ПодразделениеКод");
	
	остНом.Сортировать("НоменклатураКод, ПодрКод");
	
	выгрузитьВTXT(остНом, путь, "Rest.txt", ?(ВыгрузкаXML,"Item","") ); //RestOfProduct:  НоменклатураКод, ПодразделениеКод, Остаток
	
	//	<Rests> <Item  ProductId="" Rest="" DepId="">
	Если ВыгрузкаXML Тогда
		текстФайл = новый ТекстовыйДокумент;
		текстФайл.Прочитать(путь+ "Item.xml");
		
		текстФайла = текстФайл.ПолучитьТекст();
		текстФайла2 = стрЗаменить(текстФайла, "Items", "Rests"); 	//	текстФайла = стрЗаменить(текстФайла, "П002948", "П002039");
		текстФайл.УстановитьТекст(текстФайла2);
		
		//----- убираем 30.09.2016 ----------
		//	текстФайл.Записать(путь+ "Rest.xml");  
		текстФайл.Записать(путь+ "RestT.xml"); //06.11.0215
		//SIM_ВыгрузитьФайлНаСервер(путь+ "Rest.xml", "importrests",  Истина, "store.yst.ru");   //store  +++ 06.05.2015!
		SIM_ВыгрузитьФайлНаСервер(путь+ "RestT.xml", "importrests", Истина, "terminal.yst.ru");   //terminal
	КонецЕсли;
	
	//	//////Конецплотников
	
	
	
	//23.01.2017 см. следующую процедуру  - перепривязка клиентов к менеджеру - 3-ий параметр
	SIM_ВыгрузкаРезервов();  // путь, Истина, ЛОЖЬ);
	
КонецПроцедуры

//+++ 20.01.2017 резервы добавляются в Св.остаток Клиента по связке
//	РезервДляИМОстатки.КонтрагентДляРезерваИМ = Контрагенты.КонтрагентДляРезерваИМ
//
процедура SIM_ВыгрузкаРезервов(путь="", флFTP=Истина, НадоПерепривязыватьРезервыПоМенеджеру = Ложь) Экспорт
	
	//  пока выключена !!!
	Если НадоПерепривязыватьРезервыПоМенеджеру Тогда
		
		Запрос0 = новый Запрос; // УДАЛЕНИЕ КонтрагентДляРезерваИМ
		Запрос0.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|   РезервДляИМОстатки.КонтрагентДляРезерваИМ как КонтрагентДляРезерваИМ,
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	РегистрНакопления.РезервДляИМ.Остатки КАК РезервДляИМОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО РезервДляИМОстатки.КонтрагентДляРезерваИМ = Контрагенты.КонтрагентДляРезерваИМ
		|			И (РезервДляИМОстатки.КонтрагентДляРезерваИМ.Наименование ПОДОБНО ""Резерв по менеджеру: %"")
		|			И РезервДляИМОстатки.КонтрагентДляРезерваИМ.ОсновнойМенеджерКонтрагента <> Контрагенты.ОсновнойМенеджерКонтрагента
		|ГДЕ
		|	РезервДляИМОстатки.КонтрагентДляРезерваИМ <> Контрагенты.Ссылка
		|	И ( РезервДляИМОстатки.КонтрагентДляРезерваИМ <> &РезервДляИМ
		//14.03.2017 для Формулы 2015 и Шинтрейд СПб
		//	|      или (РезервДляИМОстатки.КонтрагентДляРезерваИМ = &РезервДляИМ и Контрагенты.НеВыгружать)
		|	  )	
		|	И Контрагенты.Покупатель
		|	И Контрагенты.ЭтоГруппа = ЛОЖЬ
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
		Запрос0.УстановитьПараметр("РезервДляИМ", справочники.Контрагенты.НайтиПоКоду("П004703") );
		выборка0 = Запрос0.Выполнить().Выбрать();
		пока выборка0.Следующий() цикл
			контрОб = выборка0.Контрагент.ПолучитьОбъект();
			контрОб.КонтрагентДляРезерваИМ = справочники.Контрагенты.ПустаяСсылка();
			контрОб.Записать();
			#Если Клиент Тогда
				сообщить("У Клиента: "+строка(выборка0.Контрагент)+" - снята привязка к резерву по менеджеру: "+строка(выборка0.Контрагент.ОсновнойМенеджерКонтрагента) );
			#КонецЕсли
		КонецЦикла;	
		
		//================================================================================================================
		Запрос1 = новый Запрос; // установка КонтрагентДляРезерваИМ
		Запрос1.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|   РезервДляИМОстатки.КонтрагентДляРезерваИМ как КонтрагентДляРезерваИМ,
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	РегистрНакопления.РезервДляИМ.Остатки КАК РезервДляИМОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО РезервДляИМОстатки.КонтрагентДляРезерваИМ <> Контрагенты.КонтрагентДляРезерваИМ
		|			И (РезервДляИМОстатки.КонтрагентДляРезерваИМ.Наименование ПОДОБНО ""Резерв по менеджеру: %"")
		|			И РезервДляИМОстатки.КонтрагентДляРезерваИМ.ОсновнойМенеджерКонтрагента = Контрагенты.ОсновнойМенеджерКонтрагента
		|ГДЕ
		|	РезервДляИМОстатки.КонтрагентДляРезерваИМ <> Контрагенты.Ссылка
		|	И РезервДляИМОстатки.КонтрагентДляРезерваИМ <> &РезервДляИМ
		|	И Контрагенты.Покупатель
		|	И Контрагенты.ЭтоГруппа = ЛОЖЬ
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
		Запрос1.УстановитьПараметр("РезервДляИМ", справочники.Контрагенты.НайтиПоКоду("П004703") );
		выборка1 = Запрос1.Выполнить().Выбрать();
		пока выборка1.Следующий() цикл
			контрОб = выборка1.Контрагент.ПолучитьОбъект();
			контрОб.КонтрагентДляРезерваИМ = выборка1.КонтрагентДляРезерваИМ;
			контрОб.Записать();
			#Если Клиент Тогда
				сообщить("У Клиента: "+строка(выборка1.Контрагент)+" - включена привязка к резерву по менеджеру: "+строка(выборка1.Контрагент.ОсновнойМенеджерКонтрагента) );
			#КонецЕсли
		КонецЦикла;	
	КонецЕсли;  
	//================================================================================================================
	
	Запрос = Новый Запрос;
	//Запрос.Текст = "
	//|ВЫБРАТЬ
	//|	ТоварыНаСкладахОстатки.Номенклатура.Код как НоменклатураКод,
	////+++ 15.01.2018г.
	//|	ТоварыНаСкладахОстатки.КоличествоОстаток - ЕстьNull(ЗаказыПокупателейОстатки.КоличествоОстаток,0) КАК Остаток
	//|ПОМЕСТИТЬ ВТ_ОстаткиСтопЛист
	//|ИЗ
	//|	РегистрНакопления.ТоварыНаСкладах.Остатки( ,
	//|				Склад.ЗапретитьИспользование = ЛОЖЬ
	//|				И Склад.Транзитный = ЛОЖЬ
	//|				И Номенклатура В (ВЫБРАТЬ НИ.Номенклатура
	//|					ИЗ	РегистрСведений.НоменклатураИмпорт КАК НИ) ) КАК ТоварыНаСкладахОстатки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(,
	//|				ЗаказПокупателя.Проверен
	//|					И ЗаказПокупателя.Транзит = ЛОЖЬ
	//|					И Номенклатура В (ВЫБРАТЬ НИ.Номенклатура
	//|						ИЗ	РегистрСведений.НоменклатураИмпорт КАК НИ) ) КАК ЗаказыПокупателейОстатки
	//|		ПО ТоварыНаСкладахОстатки.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Контрагенты.Код КАК КонтрагентКод,
	//|	РезервДляИМОстатки.Номенклатура.Код,
	//|	РезервДляИМОстатки.КоличествоОстаток КАК Остаток
	//|ПОМЕСТИТЬ ВТ_БезСвертки
	//|ИЗ
	//|	РегистрНакопления.РезервДляИМ.Остатки КАК РезервДляИМОстатки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	//|		ПО РезервДляИМОстатки.КонтрагентДляРезерваИМ = Контрагенты.КонтрагентДляРезерваИМ
	//|ГДЕ
	//|	РезервДляИМОстатки.КоличествоОстаток > 0
	//|	И РезервДляИМОстатки.Подразделение = &Подразделение 
	////сам.себе резерв - не нужно выгружать!
	//|	И РезервДляИМОстатки.КонтрагентДляРезерваИМ <> Контрагенты.Ссылка
	////резерв для клиентов КолесаТУТ - не надо выгружать!
	//|	И ( РезервДляИМОстатки.КонтрагентДляРезерваИМ <> &РезервДляИМ
	////20.03.2017 для Формулы 2015 и Шинтрейд СПб
	//|      или (РезервДляИМОстатки.КонтрагентДляРезерваИМ = &РезервДляИМ и Контрагенты.НеВыгружать)
	//|	  )
	//|	И Контрагенты.Покупатель
	//|	И Контрагенты.ЭтоГруппа = ЛОЖЬ
	//|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	спрКонтрагенты.Код,
	//|	ОстаткиСтопЛист.НоменклатураКод,
	//|	ОстаткиСтопЛист.Остаток
	//|ИЗ
	////+++ 15.01.2018г. сначала отбор, потом соединение
	//|	(выбрать спр.Код 
	//|	ИЗ Справочник.Контрагенты как спр
	//|	ГДЕ
	//|	(спр.РазрешитьГрузитьТоварыИзСтопЛиста
	//|			ИЛИ спр.Экспорт)  ) КАК спрКонтрагенты
	//|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиСтопЛист КАК ОстаткиСтопЛист
	//|		ПО (ИСТИНА)
	//|ГДЕ ЕСТЬNULL(ОстаткиСтопЛист.Остаток, 0) > 0;
	//|///////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	БезСвертки.КонтрагентКод,
	//|	БезСвертки.НоменклатураКод,
	//|СУММА(БезСвертки.Остаток) КАК Остаток
	//|ИЗ
	//|	ВТ_БезСвертки КАК БезСвертки
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	БезСвертки.КонтрагентКод,
	//|	БезСвертки.НоменклатураКод
	//|;
	//|///////////////////////////////////////////////////////////////////////////////
	//|Уничтожить ВТ_ОстаткиСтопЛист; 
	//|Уничтожить ВТ_БезСвертки";
	
	//06.03.18 Смирнов Экспортным доступна номенклатура из "Серого" и "Черного" листа, а если галка РазрешитьГрузитьСтопЛист, то только "Серый"
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТоварыНаСкладахОстатки.Номенклатура.Код КАК НоменклатураКод,
		               |	ВЫБОР
		               |		КОГДА НЕ НоменклатураИмпорт.ЧерныйЛист
		               |			ТОГДА ТоварыНаСкладахОстатки.КоличествоОстаток - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК Остаток,
		               |	ВЫБОР
		               |		КОГДА НоменклатураИмпорт.ЧерныйЛист
		               |			ТОГДА ТоварыНаСкладахОстатки.КоличествоОстаток - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК ОстатокЧерныйЛист
		               |ПОМЕСТИТЬ ВТ_ОстаткиСтопЛист
		               |ИЗ
		               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
		               |			,
		               |			Склад.ЗапретитьИспользование = ЛОЖЬ
		               |				И Склад.Транзитный = ЛОЖЬ
		               |				И Номенклатура В
		               |					(ВЫБРАТЬ
		               |						НИ.Номенклатура
		               |					ИЗ
		               |						РегистрСведений.НоменклатураИмпорт КАК НИ)) КАК ТоварыНаСкладахОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
		               |				,
		               |				ЗаказПокупателя.Проверен
		               |					И ЗаказПокупателя.Транзит = ЛОЖЬ
		               |					И Номенклатура В
		               |						(ВЫБРАТЬ
		               |							НИ.Номенклатура
		               |						ИЗ
		               |							РегистрСведений.НоменклатураИмпорт КАК НИ)) КАК ЗаказыПокупателейОстатки
		               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт
		               |		ПО ТоварыНаСкладахОстатки.Номенклатура = НоменклатураИмпорт.Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Контрагенты.Код КАК КонтрагентКод,
		               |	РезервДляИМОстатки.Номенклатура.Код,
		               |	РезервДляИМОстатки.КоличествоОстаток КАК Остаток
		               |ПОМЕСТИТЬ ВТ_БезСвертки
		               |ИЗ
		               |	РегистрНакопления.РезервДляИМ.Остатки КАК РезервДляИМОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		               |		ПО РезервДляИМОстатки.КонтрагентДляРезерваИМ = Контрагенты.КонтрагентДляРезерваИМ
		               |ГДЕ
		               |	РезервДляИМОстатки.КоличествоОстаток > 0
		               |	И РезервДляИМОстатки.Подразделение = &Подразделение
		               |	И РезервДляИМОстатки.КонтрагентДляРезерваИМ <> Контрагенты.Ссылка
		               |	И (РезервДляИМОстатки.КонтрагентДляРезерваИМ <> &РезервДляИМ
		               |			ИЛИ РезервДляИМОстатки.КонтрагентДляРезерваИМ = &РезервДляИМ
		               |				И Контрагенты.НеВыгружать)
		               |	И Контрагенты.Покупатель
		               |	И Контрагенты.ЭтоГруппа = ЛОЖЬ
		               |	И Контрагенты.ПометкаУдаления = ЛОЖЬ
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	спрКонтрагенты.Код,
		               |	ОстаткиСтопЛист.НоменклатураКод,
		               |	ОстаткиСтопЛист.Остаток
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		спр.Код КАК Код
		               |	ИЗ
		               |		Справочник.Контрагенты КАК спр
		               |	ГДЕ
		               |		спр.РазрешитьГрузитьТоварыИзСтопЛиста
		               |		И спр.Экспорт = ЛОЖЬ) КАК спрКонтрагенты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиСтопЛист КАК ОстаткиСтопЛист
		               |		ПО (ИСТИНА)
		               |ГДЕ
		               |	ЕСТЬNULL(ОстаткиСтопЛист.Остаток, 0) > 0
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	спрКонтрагенты.Код,
		               |	ОстаткиСтопЛист.НоменклатураКод,
		               |	ОстаткиСтопЛист.Остаток + ОстаткиСтопЛист.ОстатокЧерныйЛист
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		спр.Код КАК Код
		               |	ИЗ
		               |		Справочник.Контрагенты КАК спр
		               |	ГДЕ
		               |		спр.Экспорт) КАК спрКонтрагенты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиСтопЛист КАК ОстаткиСтопЛист
		               |		ПО (ИСТИНА)
		               |ГДЕ
		               |	ЕСТЬNULL(ОстаткиСтопЛист.Остаток, 0) + ЕСТЬNULL(ОстаткиСтопЛист.ОстатокЧерныйЛист, 0) > 0
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	БезСвертки.КонтрагентКод,
		               |	БезСвертки.НоменклатураКод,
		               |	СУММА(БезСвертки.Остаток) КАК Остаток
		               |ИЗ
		               |	ВТ_БезСвертки КАК БезСвертки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	БезСвертки.КонтрагентКод,
		               |	БезСвертки.НоменклатураКод
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ОстаткиСтопЛист
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_БезСвертки";
	
	Запрос.УстановитьПараметр("Подразделение", справочники.Подразделения.НайтиПоКоду("00005") ); // Головное
	Запрос.УстановитьПараметр("РезервДляИМ", справочники.Контрагенты.НайтиПоКоду("П004703") ); // Резерв для ИМ (Колеса ТУТ) - НЕ УЧИТЫВАЕТСЯ !
	Результат = Запрос.Выполнить();
	табл = Результат.Выгрузить();
	
	//--------------------выгрузка--------------------------
	Если путь="" Тогда
		путь = КаталогВременныхФайлов();	//+++ 29.09.2014 - путь уже! содержит \  но на всякий случай допишем, Если это не так
	КонецЕсли;	
	выгрузитьВTXT(табл, путь, "RestsOfPartners.txt", "Item" ); //RestOfProduct:  НоменклатураКод, ПодразделениеКод, Остаток
	
	текстФайл = новый ТекстовыйДокумент;
	текстФайл.Прочитать(путь+ "Item.xml");
	текстФайла = текстФайл.ПолучитьТекст();
	текстФайла2 = стрЗаменить(текстФайла, "Items", "RestsOfPartners"); 	//	текстФайла = стрЗаменить(текстФайла, "П002948", "П002039");
	текстФайл.УстановитьТекст(текстФайла2);
	
	текстФайл.Записать(путь+ "RestsOfPartners.xml"); //06.11.0215
	
	Если флFTP Тогда	
		SIM_ВыгрузитьФайлНаСервер(путь+ "RestsOfPartners.xml", "importrestsofpartners", Истина, "terminal.yst.ru");   //terminal
	КонецЕсли;
	
КонецПроцедуры	

процедура SIM_ВыгрузкаПомощниковМенеджеров(путь = "") экспорт
	Запрос = новый Запрос;
	Запрос.Текст = 
        "ВЫБРАТЬ РАЗЛИЧНЫЕ
        |	Авторизация.Владелец.ОсновнойМенеджерКонтрагента КАК Менеджер
        |ПОМЕСТИТЬ ВТМенеджеры
        |ИЗ
        |	Справочник.Авторизация КАК Авторизация
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗЛИЧНЫЕ
        |	ПользователиПомощники.Помощник,
        |	ПользователиПомощники.Ссылка КАК Менеджер,
        |	ВЫРАЗИТЬ(""Guid"" КАК СТРОКА(38))  КАК AssistantId,
        |	ВЫРАЗИТЬ(""Guid"" КАК СТРОКА(38))  КАК ManagerId
        |ИЗ
        |	Справочник.Пользователи.Помощники КАК ПользователиПомощники
        |ГДЕ
        |	ПользователиПомощники.Ссылка В
        |			(ВЫБРАТЬ
        |				ВТМенеджеры.Менеджер
        |			ИЗ
        |				ВТМенеджеры)";
		
		СписокМенеджеров = Запрос.Выполнить().Выгрузить();
		
		Для каждого мен из СписокМенеджеров Цикл
			мен.AssistantId = строка(мен.Помощник.УникальныйИдентификатор()); 
			мен.ManagerId   = строка(мен.Менеджер.УникальныйИдентификатор()); 
		КонецЦикла;	
		
		СписокМенеджеров.Колонки.Удалить("Помощник");
		СписокМенеджеров.Колонки.Удалить("Менеджер");
		
		//выгрузитьВTXT(СписокМенеджеров,путь,, "AssistantsOfManagers");
		ЗаписьXML=Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(путь+"/AssistantsOfManagers.xml");
		
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("AssistantsOfManagers");
		
		Для каждого мен из СписокМенеджеров Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Item");
			ЗаписьXML.ЗаписатьАтрибут("ManagerId",мен.ManagerId);
			ЗаписьXML.ЗаписатьАтрибут("AssistantId",мен.AssistantId);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();

КонецПроцедуры

//-----------------------вспомогательные функции для выгрузки справочников----------------------------
//+++ 23.10.2014 по 09.08.2016 - были добавлены остатки Сторонних поставщиков
функция SIM_ПолучитьТаблицуТоваров(СУчетомОстатков=ЛОЖЬ) Экспорт  
	
	ТаблЗначений = Неопределено;
	
	запрос = новый Запрос; 
	
	//29.05.2017 - ВСЯ НОМЕНКЛАТУРА сразу в 1 запросе - около 10 сек
	Если не СУчетомОстатков Тогда
		запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект,
		|	ЗначенияСвойствОбъектов.Значение
		|ПОМЕСТИТЬ Завод
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.Номенклатура
		|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Номенклатура).ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
		|	И ЗначенияСвойствОбъектов.Свойство = &ЗаводДляТерминала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	спрМодель.Производитель.Код КАК МодельПроизводительКод,
		|	спрМодель.Производитель КАК МодельПроизводитель,
		|	ВЫБОР
		|		КОГДА спрМодель.Производитель.ВыгружатьНаСайт
		|				ИЛИ спрПроизводитель.ВыгружатьНаСайт
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК ПроизводительАктивен,
		|	спрПроизводитель.Ссылка КАК Производитель,
		|	спрПроизводитель.Код КАК ПроизводительКод,
		|	ВЫБОР
		|		КОГДА спрПроизводитель.ВыгружатьНаСайт
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК НомПроизводительАктивен,
		
		|	спрМодель.Код КАК МодельКод,
		|	спрМодель.Ссылка КАК Модель,
		|	спрМодель.Сезон КАК МодельСезон,
		//------------------------Номенклатура------------------------------
		|	спр.Типоразмер.Код КАК ТипоразмерКод,
		|	спр.Типоразмер КАК Типоразмер,
		
		|	спр.Код КАК НоменклатураКод,
		|	спр.Артикул КАК Артикул,
		
		|	спр.ЕдиницаХраненияОстатков.Вес КАК Weight,
		|	спр.ЕдиницаХраненияОстатков.Объем КАК Volume,
		
		|	ВЫБОР
		|		КОГДА спр.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.Шины)
		|			ТОГДА ""1""
		|		КОГДА спр.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.Диски)
		|			ТОГДА ""2""
		|		КОГДА спр.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.АКБ)
		|			ТОГДА ""3""
		|		КОГДА спр.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.Аксессуары)
		|			ТОГДА ""4""
		|		КОГДА спр.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.РекламнаяПродукция)
		|			ТОГДА ""5""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК Вид,
		
		|	спр.Ссылка КАК Номенклатура,
		|	спр.ВидТовара КАК ВидТовара,
		|	спр.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ЕСТЬNULL(Завод.Значение, """") КАК Завод
		|ИЗ
		//+++ 10.07.2017 - вместо 210 тыс/ > 81 за 2 сек. - все товары, на которые когда-либо были цены Базовая или Кр.Опт!
		//|	Справочник.Номенклатура 
		|(выбрать РАЗЛИЧНЫЕ 
		|Цены.Номенклатура как ссылка,
		|Цены.Номенклатура.Код как Код,
		|Цены.Номенклатура.Артикул как Артикул,
		|Цены.Номенклатура.Типоразмер как Типоразмер,
		|Цены.Номенклатура.Модель как Модель,
		|Цены.Номенклатура.Производитель как Производитель,
		|Цены.Номенклатура.ВидТовара как ВидТовара,
		|Цены.Номенклатура.ЕдиницаХраненияОстатков как ЕдиницаХраненияОстатков,
		|Цены.Номенклатура.СтранаПроисхождения как СтранаПроисхождения
		//|, Цены.Номенклатура.ПометкаУдаления как ПометкаУдаления
		|из РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен в (&СписокТиповЦен) ) как Цены
		|ГДЕ
		|	Цены.Номенклатура.ВидТовара В (&СписокВидов)
		|	И ПОДСТРОКА(Цены.Номенклатура.Код, 1, 1) В (""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"")
		|)
		
		|КАК спр
		
		//----------------------так запрос для SQL проще и быстрее работает -------------------------   
		|ЛЕВОЕ СОЕДИНЕНИЕ
		| 	Справочник.МоделиТоваров как спрМодель
		|	ПО спр.Модель = спрМодель.Ссылка
		
		|ЛЕВОЕ СОЕДИНЕНИЕ
		| 	Справочник.Производители как спрПроизводитель
		|	ПО спр.Производитель = спрПроизводитель.Ссылка
		
		|ЛЕВОЕ СОЕДИНЕНИЕ Завод КАК Завод
		|		ПО спр.Ссылка = Завод.Объект
		
		//+++ 10.07.2017 условия сразу в спр
		//|ГДЕ
		//| 	спр.ПометкаУдаления = ЛОЖЬ
		//|	И спр.ЭтоГруппа = ЛОЖЬ
		//|	И спр.ВидТовара В (&СписокВидов)
		//|	И ПОДСТРОКА(спр.Код, 1, 1) В (""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"")
		|";
		СписокТиповЦен = новый СписокЗначений;
		СписокТиповЦен.Добавить( справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") );//Базовая
		СписокТиповЦен.Добавить( справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") );//Кр.Опт
		запрос.УстановитьПараметр("СписокТиповЦен", СписокТиповЦен);
	КонецЕсли;			   
	
	
	//09.08.2016 - не обрабатывает строку длинее 8060 байт!
	Если СУчетомОстатков Тогда  //остатки свободные по ярославлю и подразделениям + ОТХ   + остатки сторонних поставщиков
		//29.05.2017 - "склеины" остатки в 1 запрос  ярославль и филиалы  - время сократилось до 5-6 сек
		запрос.Текст = "	
		|ВЫБРАТЬ
		|	спр.Ссылка
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	Справочник.Номенклатура КАК спр
		|ГДЕ
		|	спр.ПометкаУдаления = ЛОЖЬ
		|	И спр.ЭтоГруппа = ЛОЖЬ
		|	И спр.ВидТовара В (&СписокВидов)
		|	И ПОДСТРОКА(спр.Код, 1, 1) В (""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"")
		
		//+++( 10.11.2017 - по задаче № 35392 - исключаем номенклатуру таких Сторонних Поставщиков
		//		которые ВЫКЛЮЧЕН, [ ]ОТХ, и с "0" кодом, даже с 0 количеством!!!
		|	И не спр.Ссылка в (ВЫБРАТЬ
		|	ОстаткиНоменклатурыКонтрагентов.Номенклатура
		|ИЗ
		|	РегистрСведений.СрокиДоставки КАК СрокиДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиНоменклатурыКонтрагентов КАК ОстаткиНоменклатурыКонтрагентов
		|		ПО СрокиДоставки.Поставщик = ОстаткиНоменклатурыКонтрагентов.Контрагент
		|ГДЕ
		|	СрокиДоставки.Включен = ЛОЖЬ
		|	И СрокиДоставки.ОТХ = ЛОЖЬ
		|	И СрокиДоставки.Код = ""0"")
		//+++)							 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Табл1.ПодразделениеКод,
		|	Табл1.НоменклатураКод,
		|	ВЫРАЗИТЬ(Табл1.остаток - Табл1.Заказано КАК ЧИСЛО(15, 2)) КАК СвободныйОстаток,
		|	Табл1.СторПоставщикКод,
		|	СрезЦен.Цена
		|	 
		|ИЗ
		|	(ВЫБРАТЬ
		|		остаткиТр.Подразделение.Код КАК ПодразделениеКод,
		|		остаткиТр.Номенклатура.Код КАК НоменклатураКод,
		|		МАКСИМУМ(остаткиТр.КоличествоОстаток) КАК остаток,
		|		СУММА(ЕСТЬNULL(ЗаказыПокупателейОстаткиТр.КоличествоОстаток, 0)) КАК Заказано,
		|		МАКСИМУМ(остаткиТр.СторПоставщикКод) КАК СторПоставщикКод
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ТоварыНаСкладахТр.Подразделение КАК Подразделение,
		|			ТоварыНаСкладахТр.Номенклатура КАК Номенклатура,
		|			СУММА(ЕСТЬNULL(ТоварыНаСкладахТр.КоличествоОстаток, 0)) КАК КоличествоОстаток,
		|			МИНИМУМ(ТоварыНаСкладахТр.СторПоставщикКод) КАК СторПоставщикКод
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ВЫБОР
		|					КОГДА ТоварыНаСкладахОстатки.Склад.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|						ТОГДА &Ярославль
		|					ИНАЧЕ ТоварыНаСкладахОстатки.Склад.Подразделение
		|				КОНЕЦ КАК Подразделение,
		|				ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|				ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|				0 КАК СторПоставщикКод
		|			ИЗ
		|				РегистрНакопления.ТоварыНаСкладах.Остатки( ,
		|						Склад.ЗапретитьИспользование = ЛОЖЬ
		
		//  //31.05.2017 ---------- есть склады транзитные, но без подразделения!?------------------------------
		// |						И (Склад.Транзитный = ЛОЖЬ 
		// |						или (Склад.Транзитный и Склад.Подразделение.ОбособленноеПодразделение)
		// |                        )
		
		|							И Номенклатура В (ВЫБРАТЬ ВТ.Ссылка ИЗ ВТ_Товары КАК ВТ)   И НЕ Номенклатура В
		|		(ВЫБРАТЬ
		|			НИ.Номенклатура
		|		ИЗ
		|			РегистрСведений.НоменклатураИмпорт КАК НИ)) КАК ТоварыНаСкладахОстатки
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ВЫБОР
		|					КОГДА ТоварыНаОтветственномХраненииОстатки.Склад.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|						ТОГДА &Ярославль
		|					ИНАЧЕ ТоварыНаОтветственномХраненииОстатки.Склад.Подразделение
		|				КОНЕЦ,
		|				ТоварыНаОтветственномХраненииОстатки.Номенклатура,
		|				ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток,
		|				0
		|			ИЗ
		|				РегистрНакопления.ТоварыНаОтветственномХранении.Остатки( ,
		|							Склад.ЗапретитьИспользование = ЛОЖЬ
		
		//  //31.05.2017 ---------- есть склады транзитные, но без подразделения!?------------------------------
		//|						И (Склад.Транзитный = ЛОЖЬ 
		//|						или (Склад.Транзитный и Склад.Подразделение.ОбособленноеПодразделение)
		//|                        )
		
		|				И Контрагент В (&СписокКонтрагентовОТХ)
		|							И Номенклатура В (ВЫБРАТЬ ВТ.Ссылка ИЗ ВТ_Товары КАК ВТ)    ) КАК ТоварыНаОтветственномХраненииОстатки) КАК ТоварыНаСкладахТр
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТоварыНаСкладахТр.Подразделение,
		|			ТоварыНаСкладахТр.Номенклатура) КАК остаткиТр
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки( ,
		|					Номенклатура В (ВЫБРАТЬ ВТ.Ссылка ИЗ ВТ_Товары КАК ВТ) 
		|						И ЗаказПокупателя.Проверен 
		|						И ЗаказПокупателя.Проведен ) КАК ЗаказыПокупателейОстаткиТр
		|			ПО остаткиТр.Номенклатура = ЗаказыПокупателейОстаткиТр.Номенклатура
		|				И остаткиТр.Подразделение = ЗаказыПокупателейОстаткиТр.ЗаказПокупателя.Подразделение
		|	
		|	СГРУППИРОВАТЬ ПО
		|		остаткиТр.Подразделение.Код,
		|		остаткиТр.Номенклатура.Код) КАК Табл1
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЦеныБазовая.Номенклатура.Код КАК НоменклатураКод,
		|			ЦеныБазовая.Цена КАК Цена
		|		ИЗ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(	,
		|					Номенклатура.ВидТовара = &Диски
		|						И ТипЦен = &Базовая) КАК ЦеныБазовая
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЦеныКрОпт.Номенклатура.Код,
		|			ЦеныКрОпт.Цена
		|		ИЗ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних( , 
		|						Номенклатура.ВидТовара <> &Диски
		|						И ТипЦен = &КрОпт) КАК ЦеныКрОпт     ) КАК СрезЦен
		|		ПО Табл1.НоменклатураКод = СрезЦен.НоменклатураКод
		|	
		|ГДЕ
		|	Табл1.остаток - Табл1.Заказано >= 1
		|	И СрезЦен.Цена >= 1";			   
		
		//нулевые цены НЕ выгружаются!
		Запрос.УстановитьПараметр("Диски",перечисления.ВидыТоваров.Диски);
		Запрос.УстановитьПараметр("Базовая", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") );
		Запрос.УстановитьПараметр("КрОпт",   справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") );
		
		
	КонецЕсли;               			   
	Запрос.УстановитьПараметр("Ярославль",справочники.Подразделения.НайтиПоКоду("00005") );
	
	СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);  //+++ 01.10.2014
	Запрос.УстановитьПараметр("СписокКонтрагентовОТХ",СписокКонтрагентовОТХ);
	
	//+++ 23.10.2014 добавлены остатки Аксессуары НовЛайн (АвтоПартсЛогистикс)
	//СписокСтороннихПоставщиков = новый СписокЗначений;
	//СписокСтороннихПоставщиков = яштПоставщики.ПолучитьСписокПоставщиков();  //+++ 16.01.2015
	//Запрос.УстановитьПараметр("СписокСтороннихПоставщиков", СписокСтороннихПоставщиков);
	
	Запрос.УстановитьПараметр("Крышки", справочники.Номенклатура.НайтиПоКоду("0080004") ); //+++ 14.05.2015
	
	Список = ПолучитьСписокВыгружаемыхТоваров();
	Список.Добавить(Перечисления.ВидыТоваров.РекламнаяПродукция);
	
	Запрос.УстановитьПараметр("СписокВидов", Список );
	
	Запрос.УстановитьПараметр("ЗаводДляТерминала", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90185") );
	
	//Запрос.УстановитьПараметр("Крепеж", справочники.Номенклатура.НайтиПоКоду("0000701") ); //Крепежные материалы и комплектующие
	
	
	результат1 = Запрос.Выполнить();
	ТаблЗначений = результат1.Выгрузить(); // таблица!
	
	возврат ТаблЗначений;
КонецФункции

//==============ОБЩАЯ ПРОЦЕДУРА ВЫГРУЗКИ В TXT или XML ФАЙЛ=====================================================================
//   ИмяXML = Producer  -> таблица Producer s
//   ИмяXML = Model  -> таблица Model s
//   ИмяXML = Typorazmer -> таблица Typorazmer s
//   ИмяXML = Product -> таблица Product s
//   ИмяXML = RestOfProduct -> таблица RestOfProduct s
//
// Если ИмяXML="" Тогда выгрузка в TXT !
//
процедура выгрузитьВTXT(табл, путь="", имяTXTФайла, ИмяXML="") Экспорт
	
	Если путь="" Тогда
		путь = КаталогВременныхФайлов();
	КонецЕсли;
	
	имяФайла = путь+?(ИмяXML="",  имяTXTФайла, ИмяXML+".xml" );  //ВыгрузкаXML
	
	ИмяПоляXML = ПолучитьСоответствиеПолей1CиSQL();
	
	// текст в Windows-кодировке ANSI Для SQL,  все xml  обычно в UTF8
	Текст = Новый ЗаписьТекста(имяФайла, ?(ИмяXML="", КодировкаТекста.ANSI, КодировкаТекста.UTF8) ); 
	
	пустСтрока = "";
 	Если ИмяXML="" Тогда //ВыгрузкаXML
		Для j=1 по табл.Колонки.Количество()-1 Цикл
			пустСтрока = пустСтрока+";";
		КонецЦикла;
	Иначе
		пустСтрока="<"+ИмяXML+"/>";  // нет ни одного аттрибута
	КонецЕсли;
	
	
	
	Если ИмяXML<>"" Тогда //ВыгрузкаXML
		Строка1 = "<?xml version=""1.0""?>"; // объявление XML
		Текст.ЗаписатьСтроку(Строка1);
		Строка1 = "<"+ИмяXML+"s>";			// начало элементов... 
		Текст.ЗаписатьСтроку(Строка1);
	КонецЕсли;
	
//==============================================================
	NN = табл.Количество();
	Для i=0 по NN-1 Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		 	Если i%100 = 0 Тогда
			Состояние("Идет запись: "+строка(i)+" / "+строка(NN)+" строки в файл: "+ имяФайла );
		 	КонецЕсли;	
		#КонецЕсли
		
		 Строка1= "";
		 Если ИмяXML<>"" Тогда //ВыгрузкаXML
		 	Строка1="<"+ИмяXML;
		 КонецЕсли;
		ФлПродолжить = Ложь;
		Для j=0 по табл.Колонки.Количество()-1 Цикл
			знач1 = табл[i].получить(j);
			Если типЗнч(знач1)=тип("число") Тогда
				значСтр = СокрЛП( формат( знач1, "ЧРД=.; ЧН=0; ЧГ=0" ) );
				
			ИначеЕсли типЗнч(знач1)=тип("Булево") Тогда //01.12.2015 - ЦеныРаспродажи
				Если знач1 Тогда значСтр = "1";
						   иначе значСтр = "0";
				КонецЕсли;	
						   
			Иначе
				значСтр = СокрЛП( строка(знач1) );
				значСтр = стрЗаменить(значСтр,";", ",");
				значСтр = стрЗаменить(значСтр,символ(10), ","); //#10
				значСтр = стрЗаменить(значСтр,символ(13), ""); //#10
				значСтр = стрЗаменить(значСтр,символ(16), ","); //#10
				значСтр = стрЗаменить(значСтр,символ(19), "");  //#13 	
				
				Если ИмяXML<>"" Тогда //ВыгрузкаXML
					Если Найти(значСтр, """")>0 или Найти(значСтр, "'")>0 или Найти(значСтр, "&")>0 
							или Найти(значСтр, ">")>0 или Найти(значСтр, "<")>0 Тогда
						значСтр = стрЗаменить(значСтр, "&", "&amp;");  //  " заменяется на  &quot;
						значСтр = стрЗаменить(значСтр, """", "&quot;");  //  " заменяется на  &quot;
						значСтр = стрЗаменить(значСтр, "'", "&apos;");  //  " заменяется на  &quot;
						значСтр = стрЗаменить(значСтр, ">", "&gt;");  //  " заменяется на  &quot;
						значСтр = стрЗаменить(значСтр, "<", "&lt;"); //  " заменяется на  &quot;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
			
			Если ИмяXML<>"" Тогда //ВыгрузкаXML
				имяПоля = ИмяПоляXML.Получить( табл.Колонки[j].Имя );
				
				Если имяПоля="ProductId" Тогда
					попытка
						значСтр = формат( число(значСтр),"ЧДЦ=0; ЧГ=0");
					исключение	
						#Если Клиент Тогда
						сообщить("Код номенклатуры: "+строка(значСтр)+" - не является числом!");
						#КонецЕсли
						продолжить;
					КонецПопытки;	
				КонецЕсли;
							
				Если имяПоля=Неопределено Тогда
					#Если Клиент Тогда
					сообщить("Не найдено соответствие Для поля: "+табл.Колонки[j].Имя);
					#КонецЕсли
					имяПоля = табл.Колонки[j].Имя;
				КонецЕсли;	
				
				Если значСтр<>"" Тогда // пустые значения не нужны - вместо них будет NULL !
					Строка1= Строка1 +" "+имяПоля+"="""+значСтр+"""";        // параметры элемента XML
					
				ИначеЕсли имяПоля="Weight" или имяПоля="Volume" Тогда  //14.09.2016 надо 0, а не null
					Строка1= Строка1 +" "+имяПоля+"=""0""";        
					
				КонецЕсли;
				
			Иначе //---------------в TXT---------------------------
				
				Если имяПоля="НоменклатураКод" Тогда
					попытка
						значСтр = формат( число(значСтр),"ЧДЦ=0; ЧГ=0");
					исключение	
						#Если Клиент Тогда
						сообщить("Код номенклатуры: "+значСтр+" - не является числом!");
						#КонецЕсли
						продолжить;
					КонецПопытки;	
				КонецЕсли;

				Строка1= Строка1 +значСтр+";";
			КонецЕсли;	
		КонецЦикла;	
		
		Если ИмяXML<>"" Тогда  //ВыгрузкаXML
			Строка1= Строка1 +"/>"; //КонецЭлемента
		Иначе
			Строка1 = лев(Строка1, стрДлина(Строка1) - 1); // последний ;
		КонецЕсли;	
				
		Если Строка1=пустСтрока Тогда
			#Если Клиент Тогда
			сообщить(строка(i)+" строка пустая - запись пропущена!");
			#КонецЕсли
		Иначе	
			Текст.ЗаписатьСтроку(Строка1);
		КонецЕсли;	
		
	КонецЦикла; 
		Если ИмяXML<>"" Тогда  //ВыгрузкаXML    Конец таблицы  
		Строка1 = "</"+ИмяXML+"s>";
		Текст.ЗаписатьСтроку(Строка1);
	КонецЕсли;
	
	Текст.Закрыть();

	#Если Клиент Тогда
	Состояние(" ");
 	Сообщить(строка(ТекущаяДата())+" выгрузка "+строка(табл.Количество())+" строк в файл: "+имяФайла+" завершена.");
	#КонецЕсли

КонецПроцедуры


//--------------название полей Для XML  Поле >> Тэг---------------------
функция ПолучитьСоответствиеПолей1CиSQL()
	
ИмяПоляXML = новый Соответствие;
ИмяПоляXML.Вставить("Наименование", 		"Name");
ИмяПоляXML.Вставить("МодельПроизводитель",	"Name");
ИмяПоляXML.Вставить("Производитель", 		"Name");
ИмяПоляXML.Вставить("Модель", 				"Name");
ИмяПоляXML.Вставить("Типоразмер", 			"Name");
ИмяПоляXML.Вставить("Номенклатура", 		"Name");
ИмяПоляXML.Вставить("Контрагент", 			"Name");
ИмяПоляXML.Вставить("Подразделение", 		"Name");

ИмяПоляXML.Вставить("Цена",  		"Price");
ИмяПоляXML.Вставить("Цена1", 		"Price1");
ИмяПоляXML.Вставить("Цена2", 		"Price2");
ИмяПоляXML.Вставить("ЦенаМинРозн",  "PriceMin"); 
ИмяПоляXML.Вставить("ЦенаБазовая",  "PriceBase");
ИмяПоляXML.Вставить("ЦенаКрОпт", 	"PriceOpt1");  
ИмяПоляXML.Вставить("ЦеныРаспродажи","Sale");

ИмяПоляXML.Вставить("ПроизводительАктивен",	  "Active"); // 1 или 0
ИмяПоляXML.Вставить("НомПроизводительАктивен","Active"); // 1 или 0
ИмяПоляXML.Вставить("Активен", 				  "Active");

ИмяПоляXML.Вставить("Код", 					  "Id");
ИмяПоляXML.Вставить("МодельПроизводительКод", "ProducerId"); 	//числовой
ИмяПоляXML.Вставить("ПроизводительКод", 	  "ProducerId");    //строковый
ИмяПоляXML.Вставить("МодельКод", 			  "ModelId");
ИмяПоляXML.Вставить("ТипоразмерКод", 		  "TiporazmerId");
ИмяПоляXML.Вставить("НоменклатураКод",	    "ProductId");
ИмяПоляXML.Вставить("НоменклатураКодЧисло", "ProductId");
ИмяПоляXML.Вставить("КонтрагентКод", 		"PartnerId");
ИмяПоляXML.Вставить("ПодразделениеКод", 	"DepartmentId");
ИмяПоляXML.Вставить("ПодрКод", 				"DepId");// для остатков товаров в XML формате

ИмяПоляXML.Вставить("Завод",    "Factory");
ИмяПоляXML.Вставить("Описание", "Description");
ИмяПоляXML.Вставить("Вид", 		"ProductType");
ИмяПоляXML.Вставить("Сезон", 	"Season");
ИмяПоляXML.Вставить("Картинка", "PictureUrl");

ИмяПоляXML.Вставить("Диаметр","Diametr");
ИмяПоляXML.Вставить("Ширина", "Width");
ИмяПоляXML.Вставить("Высота", "Height");
ИмяПоляXML.Вставить("Вылет",  "ET");
ИмяПоляXML.Вставить("ДиаметрСтупицы", 	  "DIA");
ИмяПоляXML.Вставить("КоличествоОтверстий","Holes");
ИмяПоляXML.Вставить("Остаток", 			"Rest");
ИмяПоляXML.Вставить("СвободныйОстаток", "Rest");
ИмяПоляXML.Вставить("Артикул", 			"Article");
ИмяПоляXML.Вставить("Транслит",			"Translit_Name");

ИмяПоляXML.Вставить("ПроцентНаценкиТранспорта", "DeliveryProfitPercent");
ИмяПоляXML.Вставить("Лимит",   					"ProductLimit");
ИмяПоляXML.Вставить("ТолькоПредоплата", 		"PrePay");
ИмяПоляXML.Вставить("флагДоговорПредоплаты",	"PrePay");	  //14.02.2017
ИмяПоляXML.Вставить("флагЕстьДоговорПредоплаты","HasPrepay"); //26.09.2017
ИмяПоляXML.Вставить("флагЕстьДоговорСоЗвездой", "HasStar"); 
ИмяПоляXML.Вставить("ОснСпособОтгрузки",		"WayOfDelivery");

ИмяПоляXML.Вставить("ПодразделениеЛогистики",	"LogistikDepartment");  //21.11.2017

ИмяПоляXML.Вставить("ИНН", "INN");
ИмяПоляXML.Вставить("КПП", "KPP");
ИмяПоляXML.Вставить("НаименованиеПолное",	"FullName");
ИмяПоляXML.Вставить("КонтактФио", 			"ContactFIO");
ИмяПоляXML.Вставить("Адрес", 				"Address");
ИмяПоляXML.Вставить("Телефон",				"PhoneNumber");
ИмяПоляXML.Вставить("Почта",  				"Email");

ИмяПоляXML.Вставить("ДоговорСТранспортной",	"HasDpdContract");
ИмяПоляXML.Вставить("НомерДоговора",		"ActiveContractNumber");
ИмяПоляXML.Вставить("ДатаДоговора",			"ActiveContractDate");

ИмяПоляXML.Вставить("СторПоставщикКод", 	"SupplierId"); 
ИмяПоляXML.Вставить("СрокДоставки",     	"Days");
ИмяПоляXML.Вставить("Культура", 			"Culture");
ИмяПоляXML.Вставить("РазСтопЛист", 			"HasOwnRest");
ИмяПоляXML.Вставить("РазрешитьСезоннуюОтсрочку", "HasSeasonAdjournment"); //22-28.03.2018 англ.

ИмяПоляXML.Вставить("РодительКод",			"ParentId");
ИмяПоляXML.Вставить("ЭтоПапка",    			"IsFolder");
ИмяПоляXML.Вставить("СтранаПроисхождения",	"CountryProducer");   //25.02.2016
ИмяПоляXML.Вставить("ОсновнойМенеджер",		"ManagerGuid");  
ИмяПоляXML.Вставить("ФИО",					"FIO");


ИмяПоляXML.Вставить("Логин",  	"Name");      
ИмяПоляXML.Вставить("Пароль", 	"Password");
ИмяПоляXML.Вставить("Свойство", "Name");
ИмяПоляXML.Вставить("Значение", "Value");
ИмяПоляXML.Вставить("ШтрихКод", "Barcode");  //01.02.2017

//// ============ Поле=Тэг ==============
//ИмяПоляXML.Вставить("PCD", "PCD");
//ИмяПоляXML.Вставить("PriceRoznUsd", "PriceRoznUsd"); //+++ 22.06.2015
//ИмяПоляXML.Вставить("PriceOptUsd", "PriceOptUsd"); 
//ИмяПоляXML.Вставить("Weight", "Weight");  // Вес
//ИмяПоляXML.Вставить("Volume", "Volume");  // Объем
//ИмяПоляXML.Вставить("Guid","Guid");
//ИмяПоляXML.Вставить("Sale", "Sale");  		 
//ИмяПоляXML.Вставить("PartnerId","PartnerId");
//ИмяПоляXML.Вставить("debt","debt");
//ИмяПоляXML.Вставить("expireddebt","expireddebt");
//ИмяПоляXML.Вставить("limit","limit");
//ИмяПоляXML.Вставить("orderedsum","orderedsum");
//ИмяПоляXML.Вставить("akbvip","akbvip");
//ИмяПоляXML.Вставить("hidenostud","hidenostud");

возврат ИмяПоляXML;
КонецФункции

//Загрузка точек НОВАЯ - для регл.задания ЗагрузкаТочек!
процедура ЗагрузкаТочекИзXML() ЭКСПОРТ
	
ПерезаписьТочки   = ЛОЖЬ; // ЛОЖЬ - только новые, Истина - перезапись старых!
флСоздаватьЗадачу = Истина;

Если флСоздаватьЗадачу Тогда
	ТаблНаСогласование  = СоздатьТаблНаСогласование();
КонецЕсли;

Соединение = Новый HTTPСоединение("terminal.yst.ru:80",,"admin","cegthvfhbj" );   
Если Соединение = Неопределено Тогда
	Возврат;
КонецЕсли;

Заголовки = Новый Соответствие();
ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
Ресурс = "api/pointsapi/get/";
Заголовки.Вставить("HASH", "D5790E89580D8B75927F804E738CFCE");  
Заголовки.Вставить("Accept", "application/xml");  

HTTPзапрос = Новый HTTPЗапрос("/"+Ресурс, Заголовки);
HTTPОтвет = Соединение.Получить( HTTPзапрос, ИмяФайлаРезультата);
	
Соединение = Неопределено; // разорвать соединение

 ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
 ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
 
 СтрокаJSONРезультат = ТекстовыйФайлОтвет.ПолучитьТекст();
 #Если Клиент Тогда 
 сообщить("Статус ответа: "+строка(HTTPОтвет.КодСостояния)+" Ответ сервера: '"+СтрокаJSONРезультат+"'" );
 #КонецЕсли

 // ИмяФайлаРезультата - это и есть XML файл
 текстXML = ТекстовыйФайлОтвет.ПолучитьТекст();
 текстXML = стрЗаменить(текстXML, "<PartnerPoint>",символы.ПС+"<PartnerPoint>"+символы.ПС); 
 текстXML = стрЗаменить(текстXML, "</",символы.ПС+"</");
 ТекстовыйФайлОтвет.УстановитьТекст(текстXML);
 N = ТекстовыйФайлОтвет.КоличествоСтрок();
 
 //- <PartnerPoint>
 // <Address>150-14 5 Avenue, Flushing, New York, NY, United States</Address> 
 // <CompanyName>ООО</CompanyName> 
 // <ContactFIO>Иванов</ContactFIO> 
 // <Country>7</Country> 
 // <DaysToDepartment>1</DaysToDepartment> 
 // <DaysToMainDepartment>4</DaysToMainDepartment> 
 // <DepartmentId>112</DepartmentId> 
 // <InternalName>Головной терминал</InternalName> 
 // <Name>Point124</Name> 
 // <PartnerId>92533</PartnerId> 
 // <PartnerPointId>124</PartnerPointId> 
 // <PhoneNumber>+7 (111) 111-1111</PhoneNumber> 
 // <SaleDirection>13</SaleDirection> 
 // </PartnerPoint>
  
КС500 = Новый КвалификаторыСтроки(500);
Массив = Новый Массив;
Массив.Добавить(Тип("Строка"));
ОписаниеТиповС500 = Новый ОписаниеТипов(Массив, , КС500 );
КС200 = Новый КвалификаторыСтроки(200);
Массив = Новый Массив;
Массив.Добавить(Тип("Строка"));
ОписаниеТиповС200 = Новый ОписаниеТипов(Массив, , КС200 );
КЧ2 = Новый КвалификаторыЧисла(2,0);
Массив = Новый Массив;
Массив.Добавить(Тип("Число"));
ОписаниеТиповЧ2 = Новый ОписаниеТипов(Массив, , КЧ2 );
КЧ3 = Новый КвалификаторыЧисла(3,0);
Массив = Новый Массив;
Массив.Добавить(Тип("Число"));
ОписаниеТиповЧ3 = Новый ОписаниеТипов(Массив, , КЧ3 );

КС25 = Новый КвалификаторыСтроки(25);
Массив = Новый Массив;
Массив.Добавить(Тип("Строка"));
ОписаниеТиповС25 = Новый ОписаниеТипов(Массив, , КС25 );

КС9 = Новый КвалификаторыСтроки(9); // PointXXXX
Массив = Новый Массив;
Массив.Добавить(Тип("Строка"));
ОписаниеТиповС9 = Новый ОписаниеТипов(Массив, , КС9 );
КЧ5 = Новый КвалификаторыЧисла(5,0);
Массив = Новый Массив;
Массив.Добавить(Тип("Число"));
ОписаниеТиповЧ5 = Новый ОписаниеТипов(Массив, , КЧ5 );

КС7 = Новый КвалификаторыСтроки(7); // PointXXXX
Массив = Новый Массив;
Массив.Добавить(Тип("Строка"));
ОписаниеТиповС7 = Новый ОписаниеТипов(Массив, , КС7 );

СтруктураТочки = новый ТаблицаЗначений;
 СтруктураТочки.Колонки.Добавить("Address",ОписаниеТиповС500,"Адрес");
 //СтруктураТочки.Колонки.Добавить("CompanyName",ОписаниеТиповС500,"НазваниеКомпании");
// СтруктураТочки.Колонки.Добавить("Country",,"Страна");
 СтруктураТочки.Колонки.Добавить("ContactFIO",ОписаниеТиповС200,"КонтактноеЛицо");
 СтруктураТочки.Колонки.Добавить("DaysToDepartment",ОписаниеТиповЧ2,"ДнейДоПодразделения");
 СтруктураТочки.Колонки.Добавить("DaysToMainDepartment",ОписаниеТиповЧ2,"ДнейДоГоловногоПодразделения");
 СтруктураТочки.Колонки.Добавить("DepartmentId",ОписаниеТиповЧ3,"КодПодразделения");
 СтруктураТочки.Колонки.Добавить("InternalName",ОписаниеТиповС25,"Наименование");
 СтруктураТочки.Колонки.Добавить("Name",ОписаниеТиповС9,"Код");
 СтруктураТочки.Колонки.Добавить("PartnerPointId",ОписаниеТиповЧ5,"Номер");
 СтруктураТочки.Колонки.Добавить("PhoneNumber",ОписаниеТиповС500,"ИнформацияДляВодителя");
 СтруктураТочки.Колонки.Добавить("SaleDirection",ОписаниеТиповЧ2,"НаправлениеПродаж");
 СтруктураТочки.Колонки.Добавить("PartnerId",ОписаниеТиповС7,"Владелец");
 
 //+++ 22.12.2016 
СтруктураТочки.Колонки.Добавить("CompanyName",ОписаниеТиповС200,"НазваниеТочки");
СтруктураТочки.Колонки.Добавить("WebSite", ОписаниеТиповС25, "WebSite");

 для i=1 по N цикл
	 стр1 = ТекстовыйФайлОтвет.ПолучитьСтроку(i);
	 //отрезаем Конец предыдущего конечного тега
	 Если Найти(стр1,"</")=1 и Найти(стр1,"</PartnerPoint>")=0 Тогда
		стр1 = прав(стр1, стрДлина(стр1)-2);
		jj = Найти(стр1,">"); стр1 = прав(стр1, стрДлина(стр1)-jj);
	 КонецЕсли;
	 
	 стр1 = стрЗаменить(стр1, " i:nil=""true"" ","");
	 Если Найти(стр1,"/>")>0 Тогда
		 стр1 = прав(стр1, стрДлина(стр1) - Найти(стр1,"/>") - 1);
	 КонецЕсли;
	 
	 Если СокрЛП(стр1)="" Тогда
		 продолжить;
	 КонецЕсли;
	 
	 Если Найти(стр1, "<PartnerPoint>")>0 Тогда // начало точки    31978
		 Точка = СтруктураТочки.Добавить();
		 продолжить;
	 КонецЕсли;
	 
	 Если Найти(стр1, "</PartnerPoint>")>0 Тогда // Конец точки
		 ЭтоНоваяТочка = ЛОЖЬ;
		 элТочка = справочники.Точки.НайтиПоРеквизиту( "Номер", Точка.PartnerPointId ); // 5 цифр!
		 Если элТочка = Неопределено или элТочка.Пустая() Тогда
			 обТочка = справочники.Точки.СоздатьЭлемент();
			 обТочка.Номер = Точка.PartnerPointId;
			 обТочка.Код   = Точка.Name;
			 #Если Клиент Тогда
			 сообщить("Создана НОВАЯ точка № "+ строка(Точка.PartnerPointId), СтатусСообщения.Информация);
		 	#КонецЕсли	
		    ЭтоНоваяТочка = истина;
		 иначе
			 Если ПерезаписьТочки Тогда // уже есть точка
				 #Если Клиент Тогда
				 сообщить("Перезаписывается точка № "+ строка(Точка.PartnerPointId));
				 #КонецЕсли	 
			 обТочка = элТочка.ПолучитьОбъект();
		 	 иначе продолжить;
			 КонецЕсли;
		 КонецЕсли;
		 
		 попытка //-------------------------------------------------------------
			 для j=0 по СтруктураТочки.Колонки.Количество()-1 цикл
				Если СтруктураТочки.Колонки[j].Имя = "PartnerId" Тогда
		 			обТочка.Владелец = справочники.Контрагенты.НайтиПоКоду( СокрЛП(точка.PartnerId) );
				ИначеЕсли СтруктураТочки.Колонки[j].Имя = "Address" Тогда
		 			обТочка.Адрес = точка["Address"];
		 			обТочка.АдресTerminal = точка["Address"];
				Иначе
					обТочка[ СтруктураТочки.Колонки[j].Заголовок ] = точка[СтруктураТочки.Колонки[j].Имя];
				КонецЕсли;
	 		 КонецЦикла;
		 
			 обТочка.Записать();
			 #Если Клиент Тогда
				 сообщить("Записана точка № "+ строка(Точка.PartnerPointId));
			 #КонецЕсли	
			 
			 
			 //22.10.2015
			 Если флСоздаватьЗадачу и не обТочка.Согласован Тогда 
				 стрЗад = ТаблНаСогласование.Добавить();
				 
				 стрЗад.Исполнитель = обТочка.Владелец.ОсновнойМенеджерКонтрагента;
				// стрЗад.Исполнитель = обТочка.Владелец.ОсновнойДоговорКонтрагента.ОтветственноеЛицо; // по основному договору клиента!
				 
				 стрЗад.Контрагент  = обТочка.Владелец;
				 
				//+++ 19.04.2016 +++
				//1.Wholesale
				//2.Retail
				//4.On-line shop
				//8.End customer
				 НапрПродаж1 = обТочка.НаправлениеПродаж;
				 
				 НапрПродаж  = ?(Цел(НапрПродаж1/8)>=1, "+8.Конечный потребитель(End customer)","");
				 НапрПродаж1 = НапрПродаж1 - 8*Цел(НапрПродаж1/8);
				 
				 НапрПродаж  = ?(Цел(НапрПродаж1/4)>=1, "+4.Интернет-магазин(On-line shop)
				 |","")+НапрПродаж;
				 НапрПродаж1 = НапрПродаж1 - 4*Цел(НапрПродаж1/4);
				 
				 НапрПродаж  = ?(Цел(НапрПродаж1/2)>=1, "+2.Розница(Retail)
				 |","")+НапрПродаж;
				 НапрПродаж1 = НапрПродаж1 - 2*Цел(НапрПродаж1/2);
				 
				 НапрПродаж = ?(НапрПродаж1=1,"+1.Опт(Wholesale)
				 |","")+НапрПродаж;
				 
					 стрЗад.Текст = "- Для клиента: "+строка(обТочка.Владелец)+"
					 		        |  Согласуйте данные точки № "+строка(обТочка.Код)+": "+строка(обТочка.Наименование)+"
				 			        |   * Адрес: "+СокрЛП(обТочка.Адрес)+"
								    |   * Контактное лицо: "+СокрЛП(обТочка.КонтактноеЛицо)+"
								    |   * Телефон: "+СокрЛП(обТочка.ИнформацияДляВодителя)+"
							  	    |   * Направление продаж: "+строка(обТочка.НаправлениеПродаж)+"
									|	    "+НапрПродаж;
								
			 стрЗад.НомерТочки    = обТочка.Номер;
				 стрЗад.Адрес         = строка(обТочка.Владелец)+": "+строка(обТочка.Наименование)+", Адрес:"+СокрЛП(обТочка.Адрес);
				 
			 КонецЕсли;	 
			 
		 исключение
			 #Если Клиент Тогда
				 сообщить("Ошибка при записи точки № "+ строка(Точка.PartnerPointId)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			 #КонецЕсли		
		 КонецПопытки;
		 
		 продолжить;
	 КонецЕсли;
	 
 	 для j=0 по СтруктураТочки.Колонки.Количество()-1 цикл
		 тег = СтруктураТочки.Колонки[j].Имя;
		 Если Найти(стр1,"<"+тег+">")>0 Тогда
			 знач1 = стрЗаменить(стр1, тег, "");  
			 знач1 = стрЗаменить(знач1, "<>","");
			 знач1 = стрЗаменить(знач1, "</>","");
 			 Если типЗнч(точка[тег])=тип("Число") Тогда
				 попытка
					 точка[тег] = число(Знач1);
				 исключение
				 #Если Клиент Тогда 
				 сообщить(Знач1 +" не является числом для "+тег	 );
				 #КонецЕсли
				 КонецПопытки;
		 	Иначе
				 точка[тег] = Знач1;
			КонецЕсли;	
		 КонецЕсли;	 
	КонецЦикла;	 
КонецЦикла;


	//+++ 22.10.2015 формирование задач
	Если флСоздаватьЗадачу Тогда
		ТаблНаСогласование.Сортировать("Исполнитель, Контрагент");
		Исп0 = Неопределено; текст0="";
		
		табл = новый ТаблицаЗначений;
		табл.Колонки.Добавить("НомерСтрокиОснования");
		табл.Колонки.Добавить("Номенклатура");
		
		для каждого стр1 из ТаблНаСогласование цикл
			
			Если исп0=Неопределено Тогда
				Исп0 = стр1.Исполнитель;  текст0=стр1.Текст;
				стрЗад = табл.Добавить();
				стрЗад.НомерСтрокиОснования = стр1.НомерТочки;
				стрЗад.Номенклатура = стр1.Адрес;
				
			////+++ 19.04.2016 - Малышев Егор -> "отдельные задачи на каждую точку"	
			//иначеЕсли исп0 = стр1.Исполнитель Тогда
			//	текст0 = текст0 + "
			//	|"+стр1.Текст;
			//	стрЗад = табл.Добавить();
			//	стрЗад.НомерСтрокиОснования = стр1.НомерТочки;
			//	стрЗад.Номенклатура = стр1.Адрес;
			
			иначе //Если исп0 <> стр1.Исполнитель Тогда
				СоздатьЗадачуНаСогласованиеАдреса(исп0, текст0, табл);
				#Если Клиент Тогда
				сообщить("Сформирована задача для "+строка(исп0));
				#КонецЕсли	
				Исп0 = стр1.Исполнитель;  текст0=стр1.Текст;
				табл.Очистить();
				стрЗад = табл.Добавить();
				стрЗад.НомерСтрокиОснования = стр1.НомерТочки;
				стрЗад.Номенклатура = стр1.Адрес;
			КонецЕсли;	
		КонецЦикла;
		
		//последняя задача
		Если текст0<>"" Тогда
		СоздатьЗадачуНаСогласованиеАдреса(Исп0, текст0, табл);
		#Если Клиент Тогда
			сообщить("Сформирована задача для "+строка(исп0));
		#КонецЕсли	
        КонецЕсли;
	КонецЕсли;
	//+++)

КонецПроцедуры	

//вспомогательные функции при загрузки точек - на согласование
функция СоздатьТаблНаСогласование()
	Табл1 = новый ТаблицаЗначений;
	Табл1.Колонки.Добавить("Исполнитель");
 	Табл1.Колонки.Добавить("Контрагент");
	Табл1.Колонки.Добавить("Текст");
	
	Табл1.Колонки.Добавить("НомерТочки");
	Табл1.Колонки.Добавить("Адрес");
	
	возврат Табл1;
КонецФункции	

процедура СоздатьЗадачуНаСогласованиеАдреса(исп, текст, табл)
	зад = задачи.ЗадачиПользователя.СоздатьЗадачу();
	зад.Исполнитель = исп;
	зад.Инициатор   = справочники.Пользователи.НайтиПоКоду("Тестовый"); //исп;
	
	зад.Дата = текущаяДата();
	зад.ДатаИсполнения = КонецДня( текущаяДата() );  // до конца дня - не просроченная задача
	зад.Оповещение = истина;
	зад.СрокОповещения = текущаяДата();
	
	//14.12.2015 ------- согласование в таблице-----------------
	зад.НаСогласование = истина;
	для каждого стр111 из табл цикл
		стр222 = зад.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(стр222, стр111);
		Если ЗначениеНеЗаполнено(зад.Объект) Тогда
			зад.Объект = справочники.Точки.НайтиПоРеквизиту("Номер", стр111.НомерСтрокиОснования);
		КонецЕсли;
	КонецЦикла;
	
	зад.Наименование = "Согласуйте Адрес и данные точки Вашего клиента!";
 	зад.Описание =  текст;
	
	зад.Записать();
КонецПроцедуры	
//26.11.15 Смирнов выгрузка остатков на колесатут
Процедура ВыгрузкаОстатковKolesaTyt() Экспорт
	попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Выгрузка остатков Kolesatyt");
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,Ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;
		Обработка.АЭ_ВыгрузитьОстаткиТоваров();
	исключение
		ЗаписьЖурналаРегистрации("Выгрузка остатков Kolesatyt",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
КонецПроцедуры


//+++ 01.12.2015 - отправляет 398 отчет  раз в неделю - за пред.неделю
процедура ОтправкаИнфоФОП() Экспорт
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(398); //Контроль цен ФОП
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		
		Обработка = ВнешниеОтчеты.Создать(ИмяФайла); 
		табДок    = Новый ТабличныйДокумент;
		НачДата   = НачалоНедели( ТекущаяДата() ) - 7*86400; // начало пред.недели
		Обработка.ПолучитьОтчет(табДок, НачДата); // из модуля
		
		путь = КаталогВременныхФайлов();
		ИмяФайла = "Контроль цен ФОП.xls"; 
		табДок.Записать(путь+ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
		
	АдресПочты = "malyshev@yst.ru;ogorodnikov@yst.ru";	 //
	СписокФайловВложений = новый СписокЗначений;
	СписокФайловВложений.Добавить(путь+ИмяФайла);
	
	адресОтправки = Константы.НовЛайнЯщикДляПрайсов.Получить(); // вместь no-reply@yst76.ru >> 1с@yst.ru  12.09.2017
	УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(адресОтправки);
	
    Тема = "Контроль цен ФОП за неделю";
	ТекстСообщения = "    Автоматическая отправка 
				      |внешнего отчета № 398 ""Контроль цен ФОП"" за предыдущую неделю 
					  |с " + формат(НачДата,"ДЛФ=DD")+" по "+формат(НачалоНедели( ТекущаяДата() ),"ДЛФ=DD");
	яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
	
КонецПроцедуры

//+++ 12.09.2017 - по задаче № 28154 - Обработка для отбора застойных дисков
Процедура ОтправитьПисьмоОЗастойныхДисках(АдресПочты = "malyshev@yst-group.com;asmirnov83@bk.ru;ogorodnikov@yst.ru", адресОтправки="1c@yst.ru") Экспорт
	    ДатаКон = НачалоМесяца( ТекущаяДата() );
        ДатаНач = ДобавитьМесяц(ДатаКон, -12);
	
		табДок = ПолучитьЗастойныеДиски(ДатаНач, ДатаКон);
		
		путь = КаталогВременныхФайлов();
		ИмяФайла = "Застойные диски без продаж 1 год.xls";
		табДок.Записать(путь+ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
	
		СписокФайловВложений = новый СписокЗначений;
		СписокФайловВложений.Добавить(путь+ИмяФайла);
	// вместь no-reply@yst76.ru >> 1с@yst.ru  12.09.2017
	УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(адресОтправки);
	    Тема = "Контроль Застойных дисков за год";
		ТекстСообщения = "    Автоматическая отправка 
					      |внешнего отчета № 501 ""Обработка для застойных дисков"" за год
						  |с " + формат(ДатаНач,"ДЛФ=DD")+" по "+формат(ДатаКон,"ДЛФ=DD");
		яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
		
// уведомлением в 1С
	задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
	задача.Дата = ТекущаяДата();
	задача.СрокИсполнения = КонецДня(ТекущаяДата());
	задача.Исполнитель = справочники.Пользователи.НайтиПоКоду("Смирнов А");
	задача.Постановщик = справочники.Пользователи.НайтиПоКоду("Малышев Егор");
	задача.Оповещение = истина;
	задача.СрокОповещения = НачалоДня(ТекущаяДата()) + 8*3600;
	задача.Наименование = "Проверьте Застойные диски (501 отчет)";
	задача.Описание = "Данные по Застойным дискам отправлены на эл.почту: "+АдресПочты+"
					  |
					  |Откройте 501 отчет и выполните установку фикс.цен и нового резерва!
					  |
					  |Анализ продаж по резерву ИМ - 467 отчет
					  |Анализ ИМ - 503 отчет";
	задача.Записать();

КонецПроцедуры		
		
//+++ 12.09.2017 - по задаче № 28154
// запрос из 501 обработки
//
Функция ПолучитьЗастойныеДиски(ДатаНач, ДатаКон)  
		Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Номенклатура.Код КАК Код,
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток,
	               |	ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0) КАК Продано,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаБазовая,
				   |	0 как ЦенаМРИЦ,
	               |	ВЫРАЗИТЬ(ЕстьNull(ВложенныйЗапрос.Стоимость,0) / ЕстьNull(ВложенныйЗапрос.Количество,1) КАК ЧИСЛО(15, 2)) КАК Себестоимость,
	               |	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзм
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&ДатаКон,
	               |			Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	               |				И Склад.Транзитный = ЛОЖЬ
	               |				И Склад.ЗапретитьИспользование = ЛОЖЬ) КАК ТоварыНаСкладахОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, , ) КАК ПродажиОбороты
	               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ПродажиОбороты.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				&ДатаКон,
	               |				Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	               |					И ТипЦен = &Базовая) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ПартииТоваровНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |			СУММА(ПартииТоваровНаСкладахОстатки.СтоимостьОстаток) КАК Стоимость,
	               |			СУММА(ПартииТоваровНаСкладахОстатки.КоличествоОстаток) КАК Количество
	               |		ИЗ
	               |			РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	               |					&ДатаКон,
	               |					Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	               |						И Склад.ЗапретитьИспользование = ЛОЖЬ
	               |						И Склад.Транзитный = ЛОЖЬ) КАК ПартииТоваровНаСкладахОстатки
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ПартииТоваровНаСкладахОстатки.Номенклатура) КАК ВложенныйЗапрос
	               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ВложенныйЗапрос.Номенклатура
	               |ГДЕ
	               |	ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0) = 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура
	               |АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("ДатаНач", ДатаНач );
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон );
	Запрос.УстановитьПараметр("Базовая", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") );
	
	Результат = Запрос.Выполнить();
	выборка = Результат.Выбрать();
	
	таблДок = новый ТабличныйДокумент;   
	// прямая запись в табл.док без макета!
	таблДок.Область(1,1).Текст = "Код";
	таблДок.Область(1,2).Текст = "Номенклатура";
	таблДок.Область(1,3).Текст = "Остаток";
	таблДок.Область(1,4).Текст = "Продано";
	таблДок.Область(1,5).Текст = "ЦенаБазовая";
	таблДок.Область(1,6).Текст = "Себестоимость";
	номСтр = 2;	
	пока выборка.Следующий() цикл
		таблДок.Область(номСтр,1).Текст = выборка.Код;
		таблДок.Область(номСтр,2).Текст = выборка.Номенклатура;
		таблДок.Область(номСтр,3).Текст = выборка.Остаток;
		таблДок.Область(номСтр,4).Текст = выборка.Продано;
		таблДок.Область(номСтр,5).Текст = выборка.ЦенаБазовая;
		таблДок.Область(номСтр,6).Текст = выборка.Себестоимость;
		номСтр = номСтр + 1;	
	КонецЦикла;	
	
	возврат таблДок;
	
КонецФункции

//19.01.2016 - по адресу (город, улица, дом) >> возвращает строку Yandex-координат: Долгота + "," + Широта
//
// открыть в браузере можно СРАЗУ:
//URL= "https://maps.yandex.ru/?ll="+Координаты
//		+"&spn=2.124481,0.671008&z=14&l=map&pt="+Координаты+",pmrdm1"
//
функция получитьКоординаты(Адрес2) ЭКСПОРТ
	
рез = "";	
СтрокаXMLРезультат = "";

Соединение = Новый HTTPСоединение("maps.googleapis.com");
    //"http://maps.googleapis.com/maps/api/geocode/xml?address="+Адрес2
	Заголовки = Новый Соответствие();
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	Ресурс = "/maps/api/geocode/xml?address="+Адрес2;
	HTTPзапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	
	попытка
		HTTPОтвет = Соединение.Получить( HTTPзапрос, ИмяФайлаРезультата);
	
	Соединение = Неопределено; // разорвать соединение

 ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
 ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
 СтрокаXMLРезультат = ТекстовыйФайлОтвет.ПолучитьТекст();
 ш = найти(СтрокаXMLРезультат, "<lat>"); ш2 = найти(СтрокаXMLРезультат, "</lat>");
 д = найти(СтрокаXMLРезультат, "<lng>"); д2 = найти(СтрокаXMLРезультат, "</lng>");
 
 Если ш>0 и д>0 Тогда
  широта  = сред(СтрокаXMLРезультат, ш+5, ш2-ш-5);
  долгота = сред(СтрокаXMLРезультат, д+5, д2-д-5);
      рез = долгота+","+широта;
 Иначе
	  рез = "";
 КонецЕсли;
 
 	исключение
    КонецПопытки;

	возврат рез;
	
КонецФункции


//+++ 30.06.2017 =====================maps.googleapis.com===============================
// Если ЗаполнятьПоля = ЛОЖЬ,
//	 то возвращает "нормальный" адрес в виде строки через ,
// рез = <Регион>, <Город>, <Улица>, <Дом>
//
// Если ЗаполнятьПоля = Истина, 
//	 то возвращается:  Структура(
//Представление = полный адрес, как при ЗаполнятьПоля = ЛОЖЬ
//Поле0 = Страна,
//Поле1 = Индекс
//Поле2 = РЕГИОН
//Поле3 = Район
//Поле4 = ГОРОД или Населенный пункт,
//Поле5 = ""
//Поле6 = Улица
//Поле7 = Дом
//Поле8 = Корпус
//Поле9 = кв
//Поле10= КоординатыДШ
//
функция ПолучитьАдресПоКоординатам( КоординатыДШ, ЗаполнятьПоля=Истина) ЭКСПОРТ

 рез = "";	
 СтрокаXMLРезультат = "";

Соединение = Новый HTTPСоединение("maps.googleapis.com");

	Заголовки = Новый Соответствие();
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	
	запятая = найти(КоординатыДШ,","); //для google - нужны координаты наоборот Ш,Д !!!
	КоординатыШД = прав(КоординатыДШ, стрДлина(КоординатыДШ) - запятая)+","+ лев(КоординатыДШ, запятая-1);

	Ресурс = "/maps/api/geocode/xml?latlng="+КоординатыШД+"&language=ru&sensor=true";
	HTTPзапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	
	попытка
		HTTPОтвет = Соединение.Получить( HTTPзапрос, ИмяФайлаРезультата);
	
	Соединение = Неопределено; // разорвать соединение
 
 	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаРезультата);
	ПостроительDOM 			= Новый ПостроительDOM;
	ДокументДОМ 			= ПостроительDOM.Прочитать(ЧтениеXML);
	ТаблицаРезультатов = ДокументДОМ.ПолучитьЭлементыПоИмени("result");
	
 	рез = "";
	Если ДокументДОМ.ПолучитьЭлементыПоИмени("status")[0].ТекстовоеСодержимое <> "OK" ИЛИ ТаблицаРезультатов.Количество() = 0 Тогда 
	//	Предупреждение("Неверный адрес!",10);
		Возврат рез;
	КонецЕсли;
	
	ТекРезультат = 0;
		
		СписокText 	 = ТаблицаРезультатов[ТекРезультат].ПолучитьЭлементыПоИмени("formatted_address");
		Если ТекРезультат = 0 Тогда
			рез = СписокText[0].ТекстовоеСодержимое;
		КонецЕсли;
		
	Если ЗаполнятьПоля Тогда
		address_component = ТаблицаРезультатов[ТекРезультат].ПолучитьЭлементыПоИмени("address_component");
		таблПолей = РазобратьАдресНаПоля(address_component); //см.ниже
		СтруктураПолейАдреса = ЗаполнитьСтруктуруПолейАдресаПоТаблице(таблПолей);
		СтруктураПолейАдреса.Поле10 = КоординатыДШ;
		рез = СтруктураПолейАдреса;
	КонецЕсли;

	исключение
		Сообщить("Ошибка : "+ОписаниеОшибки(), СтатусСообщения.Внимание );
    КонецПопытки;
	
	возврат рез;

КонецФункции

//ещё 4 вспомогательные функции для ПолучитьАдресПоКоординатам()
функция ПолучитьТаблСокращений()
  таблСокр = новый ТаблицаЗначений;
  таблСокр.Колонки.Добавить("Поле");
  таблСокр.Колонки.Добавить("Что");
  таблСокр.Колонки.Добавить("НаЧто");
  
  стр1 = таблСокр.Добавить();
  стр1.Поле = "Дом"; стр1.Что = "корпус";   стр1.НаЧто ="корп."; 
  стр1 = таблСокр.Добавить();
  стр1.Поле = "Дом"; стр1.Что = "строение"; стр1.НаЧто ="стр."; 
  
  стр1 = таблСокр.Добавить();//-------------------------------------------
  стр1.Поле = "Улица"; стр1.Что = "улица";    стр1.НаЧто ="ул."; 
  стр1 = таблСокр.Добавить();
  стр1.Поле = "Улица"; стр1.Что = "проспект"; стр1.НаЧто ="пр-кт"; 
  
  стр1 = таблСокр.Добавить();
  стр1.Поле = "Улица"; стр1.Что = "площадь";  стр1.НаЧто ="пл.";
  стр1 = таблСокр.Добавить();
  стр1.Поле = "Улица"; стр1.Что = "переулок"; стр1.НаЧто ="пер.";
  стр1 = таблСокр.Добавить();
  стр1.Поле = "Улица"; стр1.Что ="набережная";стр1.НаЧто ="наб.";
  стр1 = таблСокр.Добавить();
  стр1.Поле = "Улица"; стр1.Что = "шоссе";    стр1.НаЧто ="ш.";
// проезд, аллея  - так и есть! 
  
  стр1 = таблСокр.Добавить();//-------------------------------------------
  стр1.Поле = "Регион"; стр1.Что = "автономный округ";  стр1.НаЧто ="АО";
  стр1 = таблСокр.Добавить();
  стр1.Поле = "Регион"; стр1.Что = "автономная область";  стр1.НаЧто ="Аобл";
  
  возврат таблСокр;
  
КонецФункции	  

//03.05.2017 - разбор XML-файла на поля Адресного классификатора!
  //<address_component>
  // <long_name>97а</long_name>
  // <short_name>97а</short_name>
  // <type>street_number</type>
  //</address_component>
// 
  //<address_component>
  // <long_name>проспект Октября</long_name>
  // <short_name>пр. Октября</short_name>
  // <type>route</type>
  //</address_component>
//  
  //<address_component>
  // <long_name>Ярославль</long_name>
  // <short_name>Ярославль</short_name>
  // <type>locality</type>
  // <type>political</type>
  //</address_component>
//  
  //<address_component>
  // <long_name>город Ярославль</long_name>
  // <short_name>г. Ярославль</short_name>
  // <type>administrative_area_level_2</type>
  // <type>political</type>
  //</address_component>
//  
  //<address_component>
  // <long_name>Ярославская область</long_name>
  // <short_name>Ярославская обл.</short_name>
  // <type>administrative_area_level_1</type>
  // <type>political</type>
  //</address_component>
//  
  //<address_component>
  // <long_name>Россия</long_name>
  // <short_name>RU</short_name>
  // <type>country</type>
  // <type>political</type>
  //</address_component>
//  
  //<address_component>
  // <long_name>150031</long_name>
  // <short_name>150031</short_name>
  // <type>postal_code</type>
  //</address_component>
//
функция РазобратьАдресНаПоля(address_component)
	
	ТаблицаТочек = новый ТаблицаЗначений;
	ТаблицаТочек.Колонки.Добавить("Поле");
	ТаблицаТочек.Колонки.Добавить("Значение");
	
	 Типы = новый соответствие;
	 Типы.Вставить("street_number", "Дом");    
	 Типы.Вставить("route",         "Улица");
	 
	 Типы.Вставить("locality",      "Город");
	 
	 Типы.Вставить("administrative_area_level_2", "Район");
	 
	 Типы.Вставить("administrative_area_level_1", "Регион"); // обл., край, респ., АО, Аобл
	 Типы.Вставить("country","Страна");
	 Типы.Вставить("postal_code","Индекс");
	 
	  таблЗамены = ПолучитьТаблСокращений();
	 
	
	для i=0 по address_component.Количество()-1 цикл
		Если address_component[i].ДочерниеУзлы.Количество()<3 Тогда
			продолжить;
		КонецЕсли;
	
		type  = address_component[i].ДочерниеУзлы[2];
		Если type.ИмяУзла="type" Тогда
		  тип1  = type.ТекстовоеСодержимое; //	"street_number"	
		  поле1 = типы.Получить( тип1 );
		  Если поле1=неопределено Тогда
			  продолжить;
		  КонецЕсли;	  
	  	иначе
		  продолжить;
	    КонецЕсли;
		
		long  = address_component[i].ДочерниеУзлы[0];  //ИмяУзла	"long_name"  	Строка
		short = address_component[i].ДочерниеУзлы[1];  //ИмяУзла	"short_name"	Строка

	//использование сокращений------------------------
		Если поле1="Страна" или поле1="Город" Тогда 
			Знач1 = long.ТекстовоеСодержимое+?(поле1="Город", " г","");
			
		ИначеЕсли поле1="Дом" Тогда //----------------
			Знач1 = long.ТекстовоеСодержимое;
			
			//доп.поля!
			таблЗамены2 = таблЗамены.НайтиСтроки( новый Структура("Поле","Дом"));
			для каждого поле2 из таблЗамены2 цикл
				Если найти(Знач1,поле2.Что)>0 Тогда
					знач2 = прав( Знач1, стрДлина(Знач1) - найти(Знач1,поле2.Что) - стрДлина(поле2.Что) );
					знач1 = лев( знач1, найти(Знач1, поле2.Что) - 2);  // "35 корпус 2" = 4-2
					
					стрАдр = ТаблицаТочек.Добавить();
					стрАдр.Поле     =  поле2.Что;   //корпус/строение
					стрАдр.Значение =  знач2;
				КонецЕсли;
			КонецЦикла;
						
		ИначеЕсли поле1="Улица" Тогда  //----------------
			Знач1 = short.ТекстовоеСодержимое;  // обл. респ. край
			
			Знач2 = long.ТекстовоеСодержимое; //замена  пр-кт, пр-д
			таблЗамены2 = таблЗамены.НайтиСтроки( новый Структура("Поле","Улица"));
			для каждого поле2 из таблЗамены2 цикл
				Если найти(Знач2,поле2.Что)>0 Тогда  
					Знач1 = стрЗаменить(Знач2,поле2.Что,поле2.НаЧто);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли поле1="Регион" Тогда  //----------------
			Знач1 = short.ТекстовоеСодержимое;  // обл. респ. край
			
			Знач2 = long.ТекстовоеСодержимое; //замена   АО, Аобл
			таблЗамены2 = таблЗамены.НайтиСтроки( новый Структура("Поле","Регион"));
			для каждого поле2 из таблЗамены2 цикл
				Если найти(Знач2,поле2.Что)>0 Тогда
					Знач1 = стрЗаменить(Знач2,поле2.Что,поле2.НаЧто);
				КонецЕсли;
			КонецЦикла;
	        
		иначе //Если short.ИмяУзла="short_name" Тогда
			Знач1 = short.ТекстовоеСодержимое;
		КонецЕсли;
		
		
		Если поле1="Район" и найти(Знач1,"г. ")>0 Тогда
			продолжить; //Район = Город!
		КонецЕсли;	
		
	//------------------------------------------------	
		
		
		j=Найти(Знач1,".");		L= стрДлина(Знач1);
		Если j>0 и j<>L Тогда
		сокр  =	лев(Знач1, j-1);  // "г. Ярославль" >> "Ярославль г"
		
		Знач1 = прав(Знач1, L-j-1)+ " "+сокр;
		иначе
		Знач1 = стрЗаменить(Знач1, ".",""); // без точки! обл  ул  г
	    КонецЕсли;
		
		Если поле1="Регион" Тогда
			Если Знач1 = ТаблицаТочек[ТаблицаТочек.Количество()-1].Значение Тогда // Регион = Город!  Москва, СПб, 
			ТаблицаТочек[ТаблицаТочек.Количество()-1].Поле = "Регион";
			продолжить; //Район = Город!
			КонецЕсли;
		КонецЕсли;	
		
		стрАдр = ТаблицаТочек.Добавить();
		стрАдр.Поле     =  поле1;
		стрАдр.Значение =  Знач1;
	КонецЦикла;
	
	возврат ТаблицаТочек;	
КонецФункции

функция СобратьАдресИзПолей(ТаблицаТочек)  //формат Представления как в 1С!
	
	рез = "";
	для каждого стр1 из ТаблицаТочек цикл // задом наперед...
		
		Если стр1.Поле = "Страна" и стр1.Значение = "Россия" Тогда // страна и индекс НЕ надо!
			Продолжить;
		КонецЕсли;	
				
		Если стр1.Поле = "Город" Тогда
		рез = "г. "+лев(стр1.Значение, стрДлина(стр1.Значение)-2)+", "+рез;
		ИначеЕсли стр1.Поле = "Дом" Тогда
		рез = "д."+ стр1.Значение + ", "+рез;
		ИначеЕсли стр1.Поле = "корпус" Тогда
		рез = "корп. "+ стр1.Значение + ", "+рез;
		ИначеЕсли стр1.Поле = "строение" Тогда
		рез = "стр. "+ стр1.Значение + ", "+рез;
		иначе
		рез = стр1.Значение + ", "+рез;
		КонецЕсли;
	
	КонецЦикла;	
	рез = лев(рез, стрДлина(рез)-2);
	
	возврат рез;
	
КонецФункции

функция ЗаполнитьСтруктуруПолейАдресаПоТаблице(табл)
	СтруктураПолейАдреса = новый Структура("Представление, Поле0, Поле1,Поле2,Поле3,Поле4,Поле5,Поле6,Поле7,Поле8,Поле9,Поле10",
												"", "",  "","","","","","","","","",""); 
	СтруктураПолейАдреса.Представление = СобратьАдресИзПолей( табл );
	
	 Типы = новый соответствие;
	 Типы.Вставить("Квартира",	"Поле9");
		
	 Типы.Вставить("корпус",	"Поле8");
	 Типы.Вставить("строение",  "Поле8");
	 
	 Типы.Вставить("Дом",   	"Поле7");
	 Типы.Вставить("Улица", 	"Поле6");
	 
	 Типы.Вставить("Город", 	"Поле4");
	 Типы.Вставить("Район", 	"Поле3");
	 
	 Типы.Вставить("Регион",	"Поле2"); // обл., край, респ., АО, Аобл
	 Типы.Вставить("Индекс",	"Поле1");
     Типы.Вставить("Страна",	"Поле0"); //для иностранных адресов
	 
	Для каждого стр1 из Табл цикл
		СтруктураПолейАдреса[ типы.Получить(стр1.Поле) ] = стр1.Значение; 
	КонецЦикла;
	
	возврат СтруктураПолейАдреса;

КонецФункции
 //+++)



функция получитьКлиентовРаспродажи() //29.01.2016
	
	СвойствоРаспродажи = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90183"); //Цены распродажи
	
	Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	ЗначенияСвойствОбъектов.Объект как Контрагент
	 |ИЗ
	 |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	 |ГДЕ
	 |	ЗначенияСвойствОбъектов.Свойство = &Свойство
	 |	И ЗначенияСвойствОбъектов.Значение = Истина";
	 
	 Запрос.УстановитьПараметр("Свойство", СвойствоРаспродажи);
	 
	 Результат = Запрос.Выполнить();
	 табл = Результат.Выгрузить();
	 
 	 возврат табл;

КонецФункции	

//12.05.2016 - вместо среза цен - используется дата последнего документа установки цен...Валютная или нет... 
функция ПолучитьДатуЦеныРаспродажи( Валютная = Истина, ДатаДок=Неопределено )  Экспорт
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
               |	УстановкаЦенДляРаспродажиТовары.Ссылка.Дата как ДатаЦеныРаспродажи
               |ИЗ
               |	Документ.УстановкаЦенДляРаспродажи.Товары КАК УстановкаЦенДляРаспродажиТовары
               |ГДЕ
               |	УстановкаЦенДляРаспродажиТовары.Валюта "+?(Валютная,"<>", "=")+" &Валюта
               |	И УстановкаЦенДляРаспродажиТовары.Ссылка.Проведен
			   |	"+?(ДатаДок=Неопределено,""," и УстановкаЦенДляРаспродажиТовары.Ссылка.Дата<=&ДатаДок")+"
               |
               |УПОРЯДОЧИТЬ ПО
               |	УстановкаЦенДляРаспродажиТовары.Ссылка.Дата УБЫВ
               |АВТОУПОРЯДОЧИВАНИЕ";

Запрос.УстановитьПараметр("Валюта", справочники.Валюты.НайтиПоКоду("643") );
Запрос.УстановитьПараметр("ДатаДок", ДатаДок);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
Если Выборка.Следующий() Тогда
	рез = НачалоДня(выборка.ДатаЦеныРаспродажи);
иначе
	рез = НачалоДня(ТекущаяДата());
КонецЕсли;
возврат рез;
КонецФункции

//+++ 20.04.2016 - по заданию Серкова
//
//1) Сделать уведомление для менеджеров 
//   о приближении даты окончания договора (за месяц)
//
//2) Сделать уведомление для менеджеров 
//    о  приближении даты окончания доверенностей  (за месяц)
//
процедура СоздатьЗадачиМенеджерамОбОкончанииДоговоров() ЭКСПОРТ
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БумажныеДоговоры.Контрагент КАК Контрагент,
	               |	БумажныеДоговоры.Контрагент.ОсновнойМенеджерКонтрагента КАК Менеджер,
	               |	БумажныеДоговоры.Номер КАК Номер,
	               |	БумажныеДоговоры.Период КАК Период,
	               |	БумажныеДоговоры.ДатаОкончанияДействия КАК ДатаОкончанияДействия
	               |ИЗ
	               |	РегистрСведений.БумажныеДоговоры КАК БумажныеДоговоры
	               |ГДЕ
	               |	БумажныеДоговоры.ДатаОкончанияДействия >= &ДатаНач
	               |	И БумажныеДоговоры.ДатаОкончанияДействия < &ДатаКонтроля
	               |	И НЕ БумажныеДоговоры.Пролонгируется
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Менеджер,
	               |	Контрагент,
	               |	ДатаОкончанияДействия
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагент),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номер),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Период),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДатаОкончанияДействия)
	               |ПО
	               |	Менеджер
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ДатаНач",      ДобавитьМесяц( НачалоДня(ТекущаяДата()), +1) );          //+++ 05.05.2016 РОВНО За месяц до окончания!
	Запрос.УстановитьПараметр("ДатаКонтроля", ДобавитьМесяц( НачалоДня(ТекущаяДата()), +1) + 86400 );  // За месяц до окончания +  1 день!
	
	Результат = Запрос.Выполнить();
	ВыборкаМен = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	шапка = "Внимание! Заканчивается срок действия договоров";
	
	#Если Клиент Тогда
	  сообщить( строка(ВыборкаМен.Количество())+" задач по окончаниям договоров!" );
	#КонецЕсли
	Пока ВыборкаМен.Следующий() Цикл
		
		 задача1 = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		 задача1.Дата           = ТекущаяДата();
		 задача1.СрокИсполнения = началоДня(ТекущаяДата()) + 17*3600; // до 17:00
		 задача1.Оповещение = Истина;
		 задача1.СрокОповещения = началоДня(ТекущаяДата()) + 8*3600; // оповещение в 8-00
		 задача1.Инициатор  = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		 задача1.Наименование = шапка;
		 
		 задача1.Исполнитель = ВыборкаМен.Менеджер;
		   Описание1 = "";
		   ВыборкаДог = ВыборкаМен.Выбрать();
		   Пока ВыборкаДог.Следующий() Цикл
			   Описание1 = Описание1    + "У контраганта: "+строка(ВыборкаДог.Контрагент)+"
			                              |   Срок действия договора: "+строка(выборкаДог.Номер)+" от "+ строка(выборкаДог.Период)+"
										  |   истекает: "+строка(ВыборкаДог.ДатаОкончанияДействия)+"
										  |----------------------------------------------
										  |";
		   КонецЦикла;
		   Задача1.Описание = Описание1;
		   Задача1.Записать();  
	КонецЦикла;
	
//=================================================================	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = "ВЫБРАТЬ
	                |	ДанныеПоФайламДоверенностей.Контрагент КАК Контрагент,
	                |	ДанныеПоФайламДоверенностей.Номер КАК Номер,
	                |	ДанныеПоФайламДоверенностей.ДатаС КАК ДатаС,
	                |	ДанныеПоФайламДоверенностей.ДатаПо КАК ДатаПо,
	                |	ДанныеПоФайламДоверенностей.Контрагент.ОсновнойМенеджерКонтрагента КАК Менеджер,
	                |	ДанныеПоФайламДоверенностей.ДоверенноеЛицо КАК ДоверенноеЛицо
	                |ИЗ
	                |	РегистрСведений.ДанныеПоФайламДоверенностей КАК ДанныеПоФайламДоверенностей
	                |ГДЕ
	                |	ДанныеПоФайламДоверенностей.ДатаПо > &ДатаНач
	                |	И ДанныеПоФайламДоверенностей.ДатаПо <= &ДатаКонтроля
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Менеджер,
	                |	Контрагент,
	                |	ДоверенноеЛицо,
	                |	ДатаПо
	                |ИТОГИ
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагент),
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номер),
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДатаС),
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДатаПо),
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоверенноеЛицо)
	                |ПО
	                |	Менеджер
	                |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос2.УстановитьПараметр("ДатаНач",      ДобавитьМесяц( НачалоДня(ТекущаяДата()), +1) );          //+++ 05.05.2016 РОВНО За месяц до окончания!
	Запрос2.УстановитьПараметр("ДатаКонтроля", ДобавитьМесяц( НачалоДня(ТекущаяДата()), +1) + 86400 );  // За месяц до окончания +  1 день!
	Результат = Запрос2.Выполнить();
	ВыборкаМен = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	шапка = "Внимание! Заканчивается срок действия доверенностей";
	#Если Клиент Тогда
	  сообщить( строка(ВыборкаМен.Количество())+" задач по окончаниям доверенностей!" );
  	#КонецЕсли
  	Пока ВыборкаМен.Следующий() Цикл
		
		 задача1 = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		 задача1.Дата           = ТекущаяДата();
		 задача1.СрокИсполнения = началоДня(ТекущаяДата()) + 17*3600; // до 17:00
		 задача1.Оповещение = Истина;
		 задача1.СрокОповещения = началоДня(ТекущаяДата()) + 8*3600; // оповещение в 8-00
		 задача1.Инициатор  = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		 задача1.Наименование = шапка;
		 
		 задача1.Исполнитель = ВыборкаМен.Менеджер;
		   Описание1 = "";
		   ВыборкаДог = ВыборкаМен.Выбрать();
		   Пока ВыборкаДог.Следующий() Цикл
			   Описание1 =    Описание1 +"У контраганта: "+строка(ВыборкаДог.Контрагент)+"
			                         	 |  доверенность № "+ строка(выборкаДог.Номер)  +" от "+строка(выборкаДог.датаС)+"
									     |     для: "+строка(выборкаДог.ДоверенноеЛицо) +"
										 |истекает: "+строка(ВыборкаДог.ДатаПо)         +"
										 |----------------------------------------------
										 |";
		   КонецЦикла;
		   Задача1.Описание = Описание1;
 		   Задача1.Записать();  
	КонецЦикла;

	
КонецПроцедуры	

//+++ 25.07.2016 - для регл.задания - для загрузки на Android
 процедура ВыгрузитьФайлПродуктовНаFTP() Экспорт
       ВыгрузитьФайлПродуктов();
	   ВыгрузитьФайлАдресовЯчеек();
КонецПроцедуры

//21.09.2016 - для загрузки на Android
 процедура ВыгрузитьФайлПродуктов() 
	путь = КаталогВременныхФайлов();
	ИмяФайлаСообщения = "Products.txt";
	
	текстДок = новый ТекстовыйДокумент;
	
	запрос = новый Запрос;
	запрос.текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ТоварыНаСкладахОстатки.Код КАК Код,
	                |	ТоварыНаСкладахОстатки.Наименование КАК Наименование,
	                |	ТоварыНаСкладахОстатки.Артикул КАК Артикул,
	                |	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК ШК,
	                |	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК КоличествоШК,
	                |	ВЫБОР
	                |		КОГДА ТоварыНаСкладахОстатки.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.Шины)
	                |			ТОГДА ""1""
	                |		КОГДА ТоварыНаСкладахОстатки.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.диски)
	                |			ТОГДА ""2""
	                |		КОГДА ТоварыНаСкладахОстатки.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.АКБ)
	                |			ТОГДА ""3""
	                |		КОГДА ТоварыНаСкладахОстатки.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.Аксессуары)
	                |			ТОГДА ""4""
	                |		ИНАЧЕ ""0""
	                |	КОНЕЦ КАК Номер
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		Остатки.Номенклатура.Код КАК Код,
	                |		Остатки.Номенклатура.Наименование КАК Наименование,
	                |		Остатки.Номенклатура.Артикул КАК Артикул,
	                |		Остатки.Номенклатура.ВидТовара КАК ВидТовара,
	                |		Остатки.КоличествоОстаток КАК КоличествоОстаток
	                |	ИЗ
	                |		РегистрНакопления.ТоварыНаСкладах.Остатки(
	                |				,
	                |				Номенклатура.ВидТовара В (&СписокВидов)
	             //+++ 30.11.2017 - cо всех складов надо!				И НЕ Склад.ЗапретитьИспользование
				 	|) КАК Остатки
	                |	ГДЕ
	                |		Остатки.КоличествоОстаток > 0
	                |		И ПОДСТРОКА(Остатки.Номенклатура.Код, 1, 1) В (""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"")
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		Заказы.Номенклатура.Код,
	                |		Заказы.Номенклатура.Наименование,
	                |		Заказы.Номенклатура.Артикул,
	                |		Заказы.Номенклатура.ВидТовара,
	                |		Заказы.КоличествоОстаток
	                |	ИЗ
	                |		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	                |				,
	                |				Номенклатура.ВидТовара В (&СписокВидов)
	                |					И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК Заказы
	                |	ГДЕ
	                |		Заказы.КоличествоОстаток > 0
	                |		И ПОДСТРОКА(Заказы.Номенклатура.Код, 1, 1) В (""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"")
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		ВсеАкс.Код,
	                |		ВсеАкс.Наименование,
	                |		ВсеАкс.Артикул,
	                |		ВсеАкс.ВидТовара,
	                |		0
	                |	ИЗ
	                |		Справочник.Номенклатура КАК ВсеАкс
	                |	ГДЕ
	                |		ВсеАкс.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Аксессуары)
	                |		И ВсеАкс.ЭтоГруппа = ЛОЖЬ
	                |		И ВсеАкс.ПометкаУдаления = ЛОЖЬ
	                |		И ПОДСТРОКА(ВсеАкс.Код, 1, 1) В (""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"")) КАК ТоварыНаСкладахОстатки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	                |		ПО (ТоварыНаСкладахОстатки.Код = ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.Номенклатура).Код)
	                |ГДЕ
	                |	ПОДСТРОКА(ТоварыНаСкладахОстатки.Код, 1, 1) В (""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"")
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Код
	                |ИТОГИ
	                |	МАКСИМУМ(Наименование),
	                |	МАКСИМУМ(Артикул),
	                |	МАКСИМУМ(ШК),
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоШК),
	                |	МАКСИМУМ(Номер)
	                |ПО
	                |	Код
	                |АВТОУПОРЯДОЧИВАНИЕ";
					
	 запрос.УстановитьПараметр("Прочее", перечисления.ВидыТоваров.Прочее );
	 
	 //+++ 16.03.2017 - для ЦЦЛ перестало грузиться на Android
	 СписокВидов = новый СписокЗначений;
	 //СписокВидов = ПолучитьСписокВыгружаемыхТоваров(); // Шины, Диски, АКБ, Аксессуары, Прочее
	 
	 СписокВидов.Добавить(перечисления.ВидыТоваров.Диски); //29.11.2017 для 8000. и Ангаров 
	 
	 СписокВидов.Добавить(перечисления.ВидыТоваров.Аксессуары); 
	 СписокВидов.Добавить(перечисления.ВидыТоваров.АКБ); 
	 СписокВидов.Добавить(перечисления.ВидыТоваров.Прочее);  //20.04.2017
	 СписокВидов.Добавить(перечисления.ВидыТоваров.РекламнаяПродукция); //02.09.2016 ещё и это... на ЦЦЛ
	 
	 запрос.УстановитьПараметр("СписокВидов",  СписокВидов);
	 
	 #Если Клиент Тогда
	 Сообщить(строка(ТекущаяДата())+" Начало получение данных...");
	 #КонецЕсли
	 
	 рез = запрос.Выполнить();
	 выборка  = рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //13.07.2017
	 	
	 текстДок.ДобавитьСтроку("Code;Name;ShtrihCode;Type;Art;");
	 пока выборка.Следующий() цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		 
		Если СокрЛП(выборка.Код)="" Тогда   //16.08.2016
			Продолжить;
		КонецЕсли;
			
		//13.07.2017 - несколько ШК для 1 товара!
		Если выборка.КоличествоШК=1 Тогда
		 	ШК = выборка.ШК;
			Если ШК="" или стрДлина(ШК)>13 Тогда //+++ 10.05.2018 - Скад и СкадРеплика: 7 символов
				ШК = "05000"+СокрЛП(выборка.Код); 
			 	ШК = ШК + КонтрольныйСимволEAN(ШК, 13);
			КонецЕсли;
        Иначе // 2 и более ШК
		    выборка2 = выборка.Выбрать();
			ШК="";  
			пока выборка2.Следующий() цикл
			 	ШК2 = выборка2.ШК;
				Если ШК2="" или стрДлина(ШК2)>13 Тогда  //+++ 10.05.2018 - Скад и СкадРеплика: 7 символов
					ШК2 = "05000"+СокрЛП(выборка.Код); 
				 	ШК2 = ШК2 + КонтрольныйСимволEAN(ШК2, 13);
				КонецЕсли;
             ШК = ШК + "|" + ШК2;
		 	КонецЦикла;	
		    ШК= прав(ШК, стрДлина(ШК)-1);
		КонецЕсли;	
		
		 Артикул = СокрЛП(выборка.Артикул);
		 Артикул = стрЗаменить(Артикул, "
		 								|", " ");
		Артикул = стрЗаменить(Артикул,";", ",");
		
		название = выборка.Наименование;
		название =стрЗаменить(название,";", ",");
		
		стр1 = СокрЛП(выборка.Код)+";"+СокрЛП(название)+";"+ШК+";"+выборка.Номер+";"+сокрЛП(Артикул)+";";
		текстДок.ДобавитьСтроку(стр1);
		 
	 КонецЦикла;	 
	 
		 текстДок.Записать( путь+ИмяФайлаСообщения, КодировкаТекста.UTF8); 
		 
		 #Если Клиент Тогда
		Сообщить(строка(ТекущаяДата())+" Записан файл из "+строка(выборка.Количество())+" строк : "+путь+ИмяФайлаСообщения);
		#КонецЕсли
		
		ВыгрузитьФайлНаYST(путь, ИмяФайлаСообщения);

 	
	врФТПвыгр = Неопределено; // отключение
	текстДок = новый ТекстовыйДокумент; //отвязка от файла
 
КонецПроцедуры

//21.09.2016 выгружаем ячейки и склады - для загрузки на Android
Процедура ВыгрузитьФайлАдресовЯчеек()
	Разделитель = ";";
	путь = КаталогВременныхФайлов();
	ИмяФайлаСообщения = "Stores.txt";
	
	текстДок = новый ТекстовыйДокумент;
	текстДок.ДобавитьСтроку("Store;Name;Code;ShtrihCode;");
		
Запрос = Новый Запрос;
            //5000, 8000, ЦЦЛ
	Запрос.Текст ="ВЫБРАТЬ
	              |	Склады.Ссылка КАК Склад,
	              |	Склады.ГруппаСкладов,
	              |	Склады.Родитель КАК Родитель,
	              |	Склады.НомерСекции КАК Префикс
	              |ПОМЕСТИТЬ ВТ_Склады
	              |ИЗ
	              |	Справочник.Склады КАК Склады
	              |ГДЕ
	              |	Склады.АдресноеХранение = ИСТИНА
	              |	И Склады.ЭтоГруппа = ЛОЖЬ
	              |	И Склады.ЗапретитьИспользование = ЛОЖЬ
	              |	И Склады.Транзитный = ЛОЖЬ
				  //+++ 18.09.2017
	              | И Склады.ПометкаУдаления = ЛОЖЬ
				  |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	АдресаХранения.Владелец КАК Склад,
	              |	АдресаХранения.Код КАК Код,
	              |	АдресаХранения.Наименование,
	              |	АдресаХранения.Владелец.НомерСекции КАК Префикс
	              |ИЗ
	              |	Справочник.АдресаХранения КАК АдресаХранения
	              |ГДЕ
	              |	АдресаХранения.Владелец В
	              |			(ВЫБРАТЬ
	              |				ВТ_Склады.Склад
	              |			ИЗ
	              |				ВТ_Склады)
				 //+++ 18.09.2017
	               | И АдресаХранения.ПометкаУдаления = ЛОЖЬ
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	втСкладАХ.Склад,
	              |	Склады.Код,
	              |	Склады.Наименование,
	              |	""9""
	              |ИЗ
	              |	Справочник.Склады КАК Склады
	              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              |			ВтСклады.Родитель КАК Родитель,
	              |			ВтСклады.Склад КАК Склад
	              |		ИЗ
	              |			ВТ_Склады КАК ВтСклады) КАК втСкладАХ
	              |		ПО Склады.Родитель = втСкладАХ.Родитель
	              |ГДЕ
	              |	Склады.Транзитный = ЛОЖЬ
	              |	И Склады.АдресноеХранение = ЛОЖЬ
	              |	И Склады.ЗапретитьИспользование = ЛОЖЬ
	              |	И Склады.ЭтоГруппа = ЛОЖЬ
	              |	И Склады.ПометкаУдаления = ЛОЖЬ
//------------------------- 16.10.2017 ВСЕ склады -------------------------------
				  //|	И Склады.Родитель В
				  //|			(ВЫБРАТЬ
				  //|				ВТ_Склады.Родитель
				  //|			ИЗ
				  //|				ВТ_Склады)
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Префикс,
	              |	Склад,
	              |	Наименование
	              |АВТОУПОРЯДОЧИВАНИЕ";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
	стр1 = строка(выборка.Склад)+Разделитель
	            +выборка.Наименование+Разделитель
				+выборка.Код+Разделитель;
				
	ШтрихКод = СокрЛП(выборка.Код);		
	ШтрихКод = ?(стрДЛИНА(ШтрихКод)=6, строка(выборка.Префикс) + ШтрихКод, 
								?(стрДЛИНА(ШтрихКод)=5,"99"+ШтрихКод, ШтрихКод) );
	
	ШтрихКод = ШтрихКод + КонтрольныйСимволEAN(ШтрихКод, 8);
	стр1 = стр1 +ШтрихКод+Разделитель;
	
	текстДок.ДобавитьСтроку(стр1);
	КонецЦикла;
	
		 текстДок.Записать( путь+ИмяФайлаСообщения, КодировкаТекста.UTF8); 
		#Если Клиент Тогда
		Сообщить(строка(ТекущаяДата())+" Записан файл из "+строка(выборка.Количество())+" строк : "+путь+ИмяФайлаСообщения);
		#КонецЕсли
		
		ВыгрузитьФайлНаYST(путь, ИмяФайлаСообщения);
 	
	врФТПвыгр = Неопределено; // отключение
	текстДок = новый ТекстовыйДокумент; //отвязка от файла

КонецПроцедуры

//21.09.2016 любой файл из путь\ИмяФайлаСообщения  на  www.YST.RU/DATA/ИмяФайлаСообщения
процедура ВыгрузитьФайлНаYST(путь, ИмяФайлаСообщения)
//---------------------выгрузка на FTP-----------------------------------
	
	#Если Клиент Тогда
	Состояние(строка(ТекущаяДата())+" Идет подключение к FTP...");
	#КонецЕсли	

	врФТПвыгр = Новый FTPСоединение("ftp.yst.ru",,"dc140403_yst", "scdi7kRU",, Истина ); //ЭТО ДРУГОЙ логин и другое подключение!
	
	Если врФТПвыгр = Неопределено Тогда
		#Если Клиент Тогда
		Сообщить( "Во время обмена данными произошла ошибка при подключении	к FTP. " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли	
	Иначе
		
		врФТПвыгр.Записать(путь+ИмяФайлаСообщения , "public_html/data/"+ИмяФайлаСообщения);  //29.09.2016   ftp://ftp.yst.ru/public_html/data/
		
		#Если Клиент Тогда
		Сообщить(строка(ТекущаяДата())+" - Файл успешно выгружен на сайт:  www.yst.ru/data/"+ИмяФайлаСообщения, СтатусСообщения.Информация);
		#КонецЕсли	
	
	КонецЕсли;
	
	
КонецПроцедуры

Процедура выгрузитьСправочники() Экспорт
	
План = ПланыОбмена.БазаИмпорт.НайтиПоКоду("ЯШИ");	
	//=============================================================================================
	
	НаименованиеОбработки="УниверсальныйОбменДаннымиXMLv2_1";
	Если Метаданные.Обработки.Найти("УниверсальныйОбменДаннымиXMLv2_1") = Неопределено Тогда
		НаименованиеОбработки="УниверсальныйОбменДаннымиXML";
	КонецЕсли;	
	Обработка = Обработки[НаименованиеОбработки].Создать();
	
	удалитьфайлы(КаталогВременныхФайлов(),"*.mxl");

	Обработка.РежимОбмена = "Выгрузка";
	
	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	//ИмяВременногоФайлаПравилОбмена = "C:\Users\plotnikov\Desktop\Нужные обработки\ПравилаОбменаДанными.xml";
    ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";

	МакетПравилОбмена = ПланыОбмена.БазаИмпорт.ПолучитьМакет("Макет");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	Обработка.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	//МакетПравилОбмена = ПолучитьОбщийМакет("ОбменУТБП");
	//МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	Обработка.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	
	Обработка.ЗагружатьДанныеВРежимеОбмена = Истина;
	Обработка.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
	Обработка.ЗапоминатьЗагруженныеОбъекты = Истина;
	
	Обработка.ВыгружатьТолькоРазрешенные = Истина;
	Обработка.ВерсияПлатформыИнформационнойБазыДляПодключения = "V82";
	
	Обработка.ИмяСервераИнформационнойБазыДляПодключения = "sigma:2041";
	Обработка.ИмяИнформационнойБазыНаСервереДляПодключения = "v82ib_yst_ut_gn";
	Обработка.ПользовательИнформационнойБазыДляПодключения = "Плотников";
	Обработка.ПарольИнформационнойБазыДляПодключения = "1234lammer";
	Обработка.ТипИнформационнойБазыДляПодключения = Ложь;

	
	Обработка.АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;
	Обработка.НепосредственноеЧтениеВИБПриемнике = истина;
	Обработка.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 2; // 0 - не снимать регистрацию,

	
	Массив = новый Массив;
	н = 0;
	Пока н <100 Цикл
	    Массив.Добавить(План);
		Н= н+1;
	КонецЦикла;
	
	
	Обработка.ЗагрузитьПравилаОбмена();
	
	Для каждого стр из Обработка.ТаблицаПравилВыгрузки.Строки Цикл
	    стр.Строки.ЗагрузитьКолонку(Массив,"СсылкаНаУзелОбмена"); 
    КонецЦикла;    
	//Обработка.Параметры.Вставить("ОбъектДляВыгрузки",Список);
	Обработка.ВыполнитьВыгрузку();
		
    #Если Клиент Тогда
	Сообщить(строка(ТекущаяДата())+"Загрузка окончена. ");
    #КонецЕсли

	
КонецПроцедуры

Функция ИмяОбъектаПоТипуДляЗапроса(Объект)
	
	МетаданныеОбъекта = Объект.Метаданные();
	ИмяМетаданных = МетаданныеОбъекта.Имя;
	
	ИмяДляЗапроса = "";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Справочник";
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Документ";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовХарактеристик";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланСчетов";
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовРасчета";
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланОбмена";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "БизнесПроцесс";
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Задача";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяДляЗапроса) Тогда
		Возврат "";
	Иначе
		Возврат ИмяДляЗапроса + "." + ИмяМетаданных;
	КонецЕсли;
	
КонецФункции

//+++ 17.11.2016 -  единая функция для движений по регистру ТоварыВОжиданииОтПоставщиков (ФИФО / ЛИФО )
Процедура ДвижениеТоваровВОжидании( таблТов, Подразделение = Неопределено, массивЗаказов=Неопределено ) ЭКСПОРТ
	
	Если НЕ Константы.ИспользоватьДележкуЗаказовВМинус.Получить() Тогда
		возврат;
	КонецЕсли;

	//16.12.17 Смирнов, для заказов с запрещенными типоразмерами (статус 13) не делаем
	//Если  массивЗаказов<>Неопределено тогда
	//	Если массивЗаказов.Количество()=1 тогда
	//		Если массивЗаказов[0].ТипЗаказа = 13 тогда
	//			Возврат;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	//+++ 07.11.2016 --- анализ ТоварыВОжиданииОтПоставщика --- списание по ФИФО ---
	// Товары на складах (+ ЭтотПриход) - Заказано + ТоварыВОжидании >0 
	
	Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		              |	таблТов.Номенклатура,
		              |	таблТов.Количество
		              |ПОМЕСТИТЬ ВТ_Товары
		              |ИЗ
		              |	&таблТов КАК таблТов
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	Склады.Ссылка
		              |ПОМЕСТИТЬ ВТ_Склады
		              |ИЗ
		              |	Справочник.Склады КАК Склады
		              |ГДЕ
		              |	Склады.ЭтоГруппа = ЛОЖЬ
		              |	И Склады.ПометкаУдаления = ЛОЖЬ
		              |	И Склады.ЗапретитьИспользование = ЛОЖЬ
		              |	И Склады.Транзитный = ЛОЖЬ
		              |;
		              |
		              |
		              |////////////////////////////////////////////////////////////////////////////////
					  
				  
		              |ВЫБРАТЬ
		              |	ОстаткиТоваров.Номенклатура,
		              |	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК КоличествоОстаток
		              |ПОМЕСТИТЬ ВТ_ТоварыНаСкладах
		              |ИЗ
		            		//+++ 21.09.2017 - убрана доп. ВТ 
					  |	(ВЫБРАТЬ
		              |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		              |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
		              |ИЗ
		              |	РегистрНакопления.ТоварыНаСкладах.Остатки(
		              |			,
		              |			Номенклатура В
		              |					(ВЫБРАТЬ
		              |						ВТ_Товары.Номенклатура
		              |					ИЗ
		              |						ВТ_Товары)
		              |				И Склад В
		              |					(ВЫБРАТЬ
		              |						ВТ_Склады.Ссылка
		              |					ИЗ
		              |						ВТ_Склады)) КАК ТоварыНаСкладахОстатки
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	ТоварыНаОтветственномХранении.Номенклатура,
		              |	ТоварыНаОтветственномХранении.КоличествоОстаток
		              |ИЗ
		              |	РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
		              |			,
		              |			Номенклатура В
		              |					(ВЫБРАТЬ
		              |						ВТ_Товары.Номенклатура
		              |					ИЗ
		              |						ВТ_Товары)
		              |				И Склад В
		              |					(ВЫБРАТЬ
		              |						ВТ_Склады.Ссылка
		              |					ИЗ
		              |						ВТ_Склады)
		              |				И Контрагент В (&СписокКонтрагентовОТХ)) КАК ТоварыНаОтветственномХранении
					  |) КАК ОстаткиТоваров
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	ОстаткиТоваров.Номенклатура
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ЭтотПриход.Номенклатура КАК Номенклатура,
		              |	ЕСТЬNULL(ТоварыНаСкладах.КоличествоОстаток, 0) КАК КолОстаток,
		              |	ЭтотПриход.Количество КАК КолПриход,
		              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КолЗаказано,
		              |	ЕСТЬNULL(ТоварыВОжидании.Количество, 0) КАК КолВОжидании,
		              |	ЭтотПриход.Количество + ЕСТЬNULL(ТоварыНаСкладах.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыВОжидании.Количество, 0) КАК КОЛИЧЕСТВО,
		              |	ТоварыВОжидании.ЗаказПокупателя КАК ЗаказВОжидании,
		              |	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		              |	ЗаказыПокупателейОстатки.ЗаказПокупателя.МоментВремени
		              |ИЗ
		              |	ВТ_Товары КАК ЭтотПриход
					  
		              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыНаСкладах КАК ТоварыНаСкладах
		              |		ПО ЭтотПриход.Номенклатура = ТоварыНаСкладах.Номенклатура
					  
		              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
		              |				,
		              |				ЗаказПокупателя.Транзит = ЛОЖЬ
		              |					И ЗаказПокупателя.Проверен
		              |					И ЗаказПокупателя.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		              |					И ЗаказПокупателя.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.ПустаяСсылка)
		              |					И Номенклатура В
		              |						(ВЫБРАТЬ
		              |							ВТ_Товары.Номенклатура
		              |						ИЗ
		              |							ВТ_Товары)) КАК ЗаказыПокупателейОстатки
		              |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		              |				ТоварыВОжиданииОтПоставщика.Номенклатура КАК Номенклатура,
		              |				ТоварыВОжиданииОтПоставщика.КоличествоОборот КАК Количество,
		              |				ТоварыВОжиданииОтПоставщика.ЗаказПокупателя КАК ЗаказПокупателя,
		              |				ТоварыВОжиданииОтПоставщика.ЗаказПокупателя.МоментВремени КАК МоментВремени,
		              |				ТоварыВОжиданииОтПоставщика.ЗаказПокупателя.Поставщик.Наименование КАК Поставщик
		              |			ИЗ
		              |				РегистрНакопления.ТоварыВОжиданииОтПоставщика.Обороты(
		              |						,
		              |						,
		              |						,
		              |						ЗаказПокупателя.Транзит = ЛОЖЬ
		              |							И Номенклатура В
		              |								(ВЫБРАТЬ
		              |									ВТ_Товары.Номенклатура
		              |								ИЗ
		              |									ВТ_Товары)) КАК ТоварыВОжиданииОтПоставщика) КАК ТоварыВОжидании
		              |			ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ТоварыВОжидании.ЗаказПокупателя
		              |				И ЗаказыПокупателейОстатки.Номенклатура = ТоварыВОжидании.Номенклатура
		              |		ПО ЭтотПриход.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		              |
		              |УПОРЯДОЧИТЬ ПО
		              |	Номенклатура,
		              |	ТоварыВОжидании.Поставщик,
		              |	ТоварыВОжидании.МоментВремени
		              |ИТОГИ
		              |	МАКСИМУМ(КолОстаток),
		              |	МАКСИМУМ(КолПриход),
		              |	СУММА(КолЗаказано),
		              |	СУММА(КолВОжидании),
		              |	МАКСИМУМ(КолПриход) + МАКСИМУМ(КолОстаток) - СУММА(КолЗаказано) + СУММА(КолВОжидании) КАК КОЛИЧЕСТВО,
		              |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказВОжидании),
		              |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя)
		              |ПО
		              |	Номенклатура
		              |АВТОУПОРЯДОЧИВАНИЕ;
					  |
					  //+++ 21.09.2017
					  |УНИЧТОЖИТЬ ВТ_Товары;
					  |УНИЧТОЖИТЬ ВТ_Склады;
					  |УНИЧТОЖИТЬ ВТ_ТоварыНаСкладах;
					  |";

				  
	Запрос.УстановитьПараметр("таблТов", таблТов);
	
	Если массивЗаказов<>Неопределено Тогда
		запрос.Текст = стрЗаменить(запрос.Текст , "//массивЗаказов", "");
		запрос.УстановитьПараметр("массивЗаказов", массивЗаказов);
	КонецЕсли;
	
	СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);//+++13.10.2014
	Запрос.УстановитьПараметр("СписокКонтрагентовОТХ",СписокКонтрагентовОТХ);
	
	Если Подразделение = Неопределено Тогда
		Подразделение = справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
	
	//для филиалов
	Если Подразделение.ОбособленноеПодразделение Тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст, "Склады.Транзитный = ЛОЖЬ", "Склады.Транзитный И Склады.Подразделение=&Подразделение");
		Запрос.Текст = стрЗаменить(Запрос.Текст, "ЗаказПокупателя.Транзит = ЛОЖЬ","ЗаказПокупателя.Транзит и ЗаказПокупателя.Подразделение=&Подразделение");
		Запрос.Текст = стрЗаменить(Запрос.Текст, "Значение(Справочник.Подразделения.ПустаяСсылка)", "&Подразделение"); // остатки постащиков по подразделению
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	КонецЕсли;
					  

	Результат = Запрос.Выполнить();
	выборкаТов = Результат.выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	списЗак = новый СписокЗначений;

	Пока выборкаТов.Следующий() цикл
		
		КолДляРаспределения = выборкаТов.Количество;	
					
		Если КолДляРаспределения > 0 Тогда  // Есть что распределить - по ФИФО!
		
			#Если Клиент Тогда
		 	сообщить(строка(выборкаТов.Номенклатура.Код)+" : ("+строка(ВыборкаТов.КолОстаток)+"+"+строка(выборкаТов.КолПриход)+") - "+строка(ВыборкаТов.КолЗаказано)
			+" + "+строка(ВыборкаТов.КолВОжидании)+" = "+строка(КолДляРаспределения)+"
			|будет распределяться по "+строка(выборкаТов.ЗаказВОжидании)+" заказам (по ФИФО):", СтатусСообщения.Информация);
		 	#КонецЕсли
		
			Если КолДляРаспределения>выборкаТов.КолПриход Тогда //28.07.2017 распределяем приходный товар на заказы КолВОжидании
				КолДляРаспределения = выборкаТов.КолПриход;
				#Если Клиент Тогда
				сообщить("Товар "+строка(выборкаТов.Номенклатура.Код)+" - пришел от стороннего поставщика в количестве: "+ строка(выборкаТов.КолПриход)+" шт. К распределению: "+ строка(КолДляРаспределения)+" шт.");
				#КонецЕсли
			КонецЕсли;	

			ВыборкаЗак = выборкаТов.Выбрать();
			
				пока выборкаЗак.Следующий() цикл
				
				КолДвижения = мин(выборкаЗак.КолВОжидании, КолДляРаспределения); // сколько "снимется" с товаров в ожидании
				
				Если КолДвижения>0 Тогда
					
				набор = РегистрыНакопления.ТоварыВОжиданииОтПоставщика.СоздатьНаборЗаписей();
				набор.Отбор.Регистратор.ВидСравнения = ВидСравнения.Равно;
				набор.Отбор.Регистратор.Значение 	 = выборкаЗак.ЗаказВОжидании;
				набор.Отбор.Регистратор.Использование= Истина;
				набор.Прочитать();
				табл = набор.Выгрузить();
				
				Если выборкаЗак.колВожидании - КолДвижения = 0 Тогда // Если в 0 то УДАЛЯЕМ !
					стр1 = табл.Найти(  выборкаЗак.Номенклатура, "Номенклатура" );
					табл.Удалить( стр1 );//06.04.2017
						
				//====================изменение статуса заказ======================================			
				списЗак.добавить( выборкаЗак.ЗаказВОжидании );	
				
				иначеЕсли выборкаЗак.колВожидании - КолДвижения > 0	Тогда
					стр1 = табл.Найти(  выборкаЗак.Номенклатура, "Номенклатура" );
					
					стр1.Активность = истина;
					стр1.ЗаказПокупателя = выборкаЗак.ЗаказВОжидании;
					стр1.Номенклатура    = выборкаЗак.Номенклатура;
					
					стр1.Количество      = выборкаЗак.колВожидании - КолДвижения;  // ОСТАТОК пишется туда же, ЗАМЕЩАЯ!
					
					стр1.Регистратор     = выборкаЗак.ЗаказВОжидании; // !!!  именно так по новой схеме!
					стр1.Период			 = выборкаЗак.ЗаказВОжидании.Дата;
				//====================изменение статуса заказ  - частично получен!=================			
				списЗак.добавить( выборкаЗак.ЗаказВОжидании );	
				КонецЕсли;
				
				набор.Загрузить( табл ); //новая таблица!
				набор.Записать(Истина);  //перезаписать!
			
				#Если Клиент Тогда
		 		сообщить("-> "+строка(выборкаЗак.ЗаказВОжидании.Номер)+" от "+строка(выборкаЗак.ЗаказВОжидании.Дата)
				          +" в ожидании: "+ строка(выборкаЗак.КолВОжидании)+" - "+строка(КолДвижения)+" = "+строка(выборкаЗак.КолВОжидании - КолДвижения) );
				#КонецЕсли
					  
				КолДляРаспределения = КолДляРаспределения - КолДвижения;
				КонецЕсли;
			
				Если КолДляРаспределения=0 Тогда 
				прервать;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		
		// Есть что ВЕРНУТЬ В ожидание - по ЛИФО !!!
		Если КолДляРаспределения < 0 Тогда  
			
		   	#Если Клиент Тогда
		 	сообщить(строка(выборкаТов.Номенклатура.Код)+" : ("+строка(ВыборкаТов.КолОстаток)+" + "+строка(выборкаТов.КолПриход)+") - "+строка(ВыборкаТов.КолЗаказано)
			+" + "+строка(-ВыборкаТов.КолВОжидании)+" = "+строка(КолДляРаспределения)+"
			|будет распределяться по "+строка(выборкаТов.ЗаказПокупателя)+" заказам (обратно по ЛИФО): ", СтатусСообщения.Информация);
		 	#КонецЕсли
			//КолДляРаспределения = - КолДляРаспределения; //так удобнее 
				
			// Нужен контроль !!! на все заказы - 1 приход!
			Если -ВыборкаТов.КолВОжидании + КолДляРаспределения < выборкаТов.КолПриход  Тогда //+++ 28.07.2017 на каждый заказ не более чем Приход от поставщика
				#Если Клиент Тогда
				Если -ВыборкаТов.КолВОжидании + КолДляРаспределения < выборкаТов.КолПриход Тогда
					сообщить("Недостаточно товара "+строка(выборкаТов.Номенклатура.Код)+" - у стороннего поставщика! Пришло: "+ строка(выборкаТов.КолПриход)+" шт. А в ожидании: "+строка(-ВыборкаТов.КолВОжидании + КолДляРаспределения)+" шт.!", СтатусСообщения.Внимание);
				КонецЕсли;	
				#КонецЕсли
				КолДляРаспределения = выборкаТов.КолПриход - ВыборкаТов.КолВОжидании;// не больше чем  Кол х N заказов !
			КонецЕсли;	
 		
			таблЛИФО = Результат.Выгрузить(); // заполяем столбцы
			таблЛИФО.Очистить();
	
			выборкаЗак = выборкаТов.Выбрать();
			пока выборкаЗак.Следующий() цикл
				стр1 = таблЛИФО.Добавить();
				ЗаполнитьЗначенияСвойств( стр1, выборкаЗак); //в обратном порядке !
			КонецЦикла;
			
			таблЛИФО.Сортировать("ЗаказПокупателяМоментВремени УБЫВ"); // в обратном порядке по ЗаказПокупателя!
			
			КолДляРаспределения = -КолДляРаспределения; //+++ 28.07.2017 - здесь для удобства условий - ОБРАТНОЕ распределение!
			
			для каждого выборкаЗак из таблЛИФО цикл
				КолДвижения = мин(выборкаЗак.КолЗаказано - выборкаЗак.КолВОжидании, КолДляРаспределения); // сколько "снимется" с товаров в ожидании
				
				Если КолДвижения>0 Тогда //возврат в Ожидание!
					
				Если массивЗаказов<>Неопределено Тогда // исключаем этот заказ из распределения по тов.в ожидании
					Если массивЗаказов.найти( выборкаЗак.ЗаказПокупателя )<> Неопределено Тогда
						продолжить;
					КонецЕсли;	
				КонецЕсли;	
	
				набор = РегистрыНакопления.ТоварыВОжиданииОтПоставщика.СоздатьНаборЗаписей();
				набор.Отбор.Регистратор.ВидСравнения = ВидСравнения.Равно;
				набор.Отбор.Регистратор.Значение 	 = выборкаЗак.ЗаказПокупателя;
				набор.Отбор.Регистратор.Использование= Истина;
				набор.Прочитать();
				табл = набор.Выгрузить();
				
				Если выборкаЗак.КолЗаказано - выборкаЗак.КолВОжидании >= КолДвижения Тогда //28.07.2017 - Если в 0 то ПОЛНОСТЬЮ в ожидании!
					стр1 = табл.Найти(  выборкаЗак.Номенклатура, "Номенклатура" );
					Если стр1 = Неопределено Тогда // НОВАЯ ЗАПИСЬ!
						стр1 = табл.Добавить();
					КонецЕсли;
					
					стр1.Активность = истина;
					стр1.ЗаказПокупателя = выборкаЗак.ЗаказПокупателя;
					стр1.Номенклатура    = выборкаЗак.Номенклатура;
					
					стр1.Количество      = КолДвижения + выборкаЗак.КолВОжидании;  // меньше чем ! выборкаЗак.КолЗаказано !
					
					стр1.Регистратор     = выборкаЗак.ЗаказПокупателя; // !!!  именно так по новой схеме!
					стр1.Период			 = выборкаЗак.ЗаказПокупателя.Дата;
					
				//====================изменение статуса ПО всем заказам======================================	
					списЗак.добавить( выборкаЗак.ЗаказПокупателя );	
				
				КонецЕсли;
				
				набор.Загрузить( табл ); //новая таблица!
				набор.Записать(Истина);  //перезаписать!
			
				#Если Клиент Тогда
		 		сообщить("-> "+строка(выборкаЗак.ЗаказПокупателя.Номер)+" от "+строка(выборкаЗак.ЗаказПокупателя.Дата)
				          +" Заказано: "+ строка(выборкаЗак.КолЗаказано)+" -> в ожидании: "+строка(выборкаЗак.КолВОжидании)+" + "+строка(КолДвижения)+" = "+строка(выборкаЗак.КолВОжидании + КолДвижения) );
				#КонецЕсли
				
				КолДляРаспределения = КолДляРаспределения - КолДвижения;
	 			КонецЕсли;
			
				Если КолДляРаспределения=0 Тогда 
				прервать;
				КонецЕсли;	
			КонецЦикла;

			
		КонецЕсли;
	
 	КонецЦикла;
	
	//22.11.2016 ==================== проверка и изменение статусов заказов	=================
	//1) списЗак => получен полностью
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	спрЗаказПокупателя.Ссылка КАК ЗаказПокупателя,
	               |	ЕСТЬNULL(ТоварыВОжиданииОтПоставщикаОбороты.КоличествоОборот, 0) КАК КолВОжидании,
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КолЗаказано
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК спрЗаказПокупателя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВОжиданииОтПоставщика.Обороты(, , , ЗаказПокупателя В (&списЗак)) КАК ТоварыВОжиданииОтПоставщикаОбороты
	               |		ПО спрЗаказПокупателя.Ссылка = ТоварыВОжиданииОтПоставщикаОбороты.ЗаказПокупателя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписЗак)
				   
				      //28.07.2017 - для обратного распределения ЛИФО - только по заказам, которые были у стороннего поставщика!
					  // |				И ЗаказПокупателя.Поставщик<>Значение(Справочник.Контрагенты.ПустаяСсылка)
					  // |				И ЗаказПокупателя.Статус<>Значение(Перечисление.СтатусыЗаказов.ПустаяСсылка)
					   
					| 		) КАК ЗаказыПокупателейОстатки
	               |		ПО спрЗаказПокупателя.Ссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
	               |ГДЕ
	               |	спрЗаказПокупателя.Ссылка В (&списЗак)
				   |";
	Запрос.УстановитьПараметр("списЗак", списЗак);
	Результат = Запрос.Выполнить();
	выборка   = результат.Выбрать();
	пока выборка.Следующий() цикл
		зак1 = выборка.ЗаказПокупателя.ПолучитьОбъект();
		Если выборка.КолВОжидании = 0 Тогда
			Если выборка.КолЗаказано>0 Тогда
				зак1.Статус = перечисления.СтатусыЗаказов.Получен;
			КонецЕсли;
// -----------------выборка.КолВОжидании>0---------------------			
		иначеЕсли зак1.Статус = перечисления.СтатусыЗаказов.Подтвержден  //  частично пришло...
			  или зак1.Статус = перечисления.СтатусыЗаказов.ПолученЧастично
			  или зак1.Статус = перечисления.СтатусыЗаказов.Получен Тогда // уже был получен... но отменяется приход... 
		
			Если выборка.КолВОжидании = выборка.КолЗаказано Тогда
				зак1.Статус = перечисления.СтатусыЗаказов.Подтвержден;// статус "сдвигается" назад полностью 
				
			ИначеЕсли выборка.КолВОжидании < выборка.КолЗаказано Тогда
				зак1.Статус = перечисления.СтатусыЗаказов.ПолученЧастично;
			КонецЕсли;
		
		иначеЕсли зак1.Статус = перечисления.СтатусыЗаказов.Новый Тогда
			зак1.Статус       = перечисления.СтатусыЗаказов.ПустаяСсылка();   // БЕЗ статуса!
			зак1.Поставщик    = справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		попытка
			статусСтарый = зак1.ссылка.Статус; 
			Если зак1.Статус <> перечисления.СтатусыЗаказов.ПустаяСсылка() Тогда //надо отпределить поставщика и сдвинуть дату прихода
				зак1.Записать(); //меняется только статус БЕЗ проведения !!!
			КонецЕсли;
			
			#Если Клиент Тогда
			Если статусСтарый <> зак1.Статус Тогда
	 		сообщить(строка(зак1)+" - Cтатус изменен с: "+строка(статусСтарый)+" на: "+строка(зак1.Статус), СтатусСообщения.Информация);
		
			//+++( 11.01.2016 - уведомление менеджеру о приходе товара и готовности Заказа к отгрузке 
			Если зак1.Статус=перечисления.СтатусыЗаказов.Получен
				или зак1.Статус=перечисления.СтатусыЗаказов.ПолученЧастично Тогда
				
					Задача1 = Задачи.ЗадачиПользователя.СоздатьЗадачу();
					Задача1.Исполнитель = зак1.ДоговорКонтрагента.ОтветственноеЛицо;
					Задача1.Инициатор   = глТекущийПользователь;
					//Задача1.Постановщик = глТекущийПользователь;
					
					Задача1.Дата = ТекущаяДата();
					Задача1.СрокОповещения = ТекущаяДата();
					Задача1.Оповещение = истина;
					Задача1.Наименование = ?(зак1.Статус=перечисления.СтатусыЗаказов.Получен, "ПОЛНОСТЬЮ", "ЧАСТИЧНО")
					+" ГОТОВ к отгрузке Заказ "+строка(зак1.Номер)+" от "+формат(зак1.Дата,"ДЛФ=D")
					+" для "+строка(зак1.Контрагент);
					
					Задача1.Описание = ?(зак1.Статус=перечисления.СтатусыЗаказов.Получен,"
					| Установите [v]Категорию отгрузки для доставки товаров покупателю: "+строка(зак1.Контрагент),"")+"
					|
					|Статус заказа изменен с '"+строка(статусСтарый)+"' на '"+строка(зак1.Статус)+"'
					|по Заказу покупателя № "+строка(зак1.Номер)+" от "+формат(зак1.Дата,"ДЛФ=D");
					
					Задача1.Объект = зак1.ссылка;
					Задача1.Записать();
			сообщить("=> Создано уведомление менеджеру: "+строка(зак1.ДоговорКонтрагента.ОтветственноеЛицо), СтатусСообщения.Информация);
			КонецЕсли;
			//+++)
			
			КонецЕсли;
			#КонецЕсли
		
		Исключение
			#Если Клиент Тогда
	 		сообщить(строка(зак1)+" - Статус не изменен! на "+строка(зак1.Статус)+" Ошибка:"+ОписаниеОшибки(), СтатусСообщения.Внимание);
			#КонецЕсли
		КонецПопытки;	
	КонецЦикла;	
	//===========================================================================

КонецПроцедуры

//+++ 15.01.2018
функция SIM_ПолучитьЗаданияНаОтгрузку(сРеал, сЗак)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка
	|ИЗ
	|	Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
	|ГДЕ
	|	ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя В (&сЗак)
	|	ИЛИ ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация В(&сРеал)";
	Запрос.УстановитьПараметр("сРеал", сРеал);
	Запрос.УстановитьПараметр("сЗак", сЗак);
	Результат = Запрос.Выполнить();
	табл = Результат.Выгрузить();
	
	рез = новый СписокЗначений;
	рез.ЗагрузитьЗначения( табл.ВыгрузитьКолонку("Ссылка") );
	возврат рез;
КонецФункции		

//+++ 15.01 - 02.02.2018
//<?xml version="1.0" encoding="UTF-8"?>
//<JobForShipments>
//	<JobForShipment 
//		GuidIn1S="085870a4-f5e0-11e7-bb28-d4ae52b5e909" 
//		NumberIn1S="ТК030339" 
//		DocDate="10.01.2018 18:34:16" 
//		DepartureDate="11.01.2018 5:00:00" 
//		Location="39.838082 57.657312">
//		<Details>
//			<Detail 
//				GuidIn1S="085870a4-f5e0-11e7-bb28-d4ae52b5e909" 
//				NumberOfQueue="1" 
//				GuidOfOrderIn1S="63c4fe12-eae5-11e7-bb28-d4ae52b5e909"
//				IsDelivered="1" 
//				Location="40.9605290 57.7642920" 
//				PlanUnloadTime="420"/>
//		</Details>
//	</JobForShipment>
//</JobForShipments>
//+++ 15.01.2018
//<?xml version="1.0" encoding="UTF-8"?>
//<JobForShipments>
//	<JobForShipment 
//		GuidIn1S="085870a4-f5e0-11e7-bb28-d4ae52b5e909" 
//		NumberIn1S="ТК030339" 
//		DocDate="10.01.2018 18:34:16" 
//		DepartureDate="11.01.2018 5:00:00" 
//		Location="39.838082 57.657312">
//		<Details>
//			<Detail 
//				GuidIn1S="085870a4-f5e0-11e7-bb28-d4ae52b5e909" 
//				NumberOfQueue="1" 
//				GuidOfOrderIn1S="63c4fe12-eae5-11e7-bb28-d4ae52b5e909"
//				IsDelivered="1" 
//				Location="40.9605290 57.7642920" 
//				PlanUnloadTime="420"/>
//		</Details>
//	</JobForShipment>
//</JobForShipments>
//+++ 15.01.2018
//<?xml version="1.0" encoding="UTF-8"?>
//<JobForShipments>
//	<JobForShipment 
//		GuidIn1S="085870a4-f5e0-11e7-bb28-d4ae52b5e909" 
//		NumberIn1S="ТК030339" 
//		DocDate="10.01.2018 18:34:16" 
//		DepartureDate="11.01.2018 5:00:00" 
//		Location="39.838082 57.657312">
//		<Details>
//			<Detail 
//				GuidIn1S="085870a4-f5e0-11e7-bb28-d4ae52b5e909" 
//				NumberOfQueue="1" 
//				GuidOfOrderIn1S="63c4fe12-eae5-11e7-bb28-d4ae52b5e909"
//				IsDelivered="1" 
//				Location="40.9605290 57.7642920" 
//				PlanUnloadTime="420"/>
//		</Details>
//	</JobForShipment>
//</JobForShipments>
Процедура SIM_ВыгрузитьСписокЗаданийНаОтгрузкуВФайлXML(СписокЗаданий=Неопределено, ИмяФайла="", ИмяУзла="JobForShipment" ) 
	
	максДлинаКомментария = 200;
	Если ИмяФайла="" ИЛИ СписокЗаданий=Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	ОбъектXML.ЗаписатьОбъявлениеXML();  //<?xml version="1.0"?>
	
	ОбъектXML.ЗаписатьНачалоЭлемента(ИмяУзла+"s");
	
	//============================Заказы=============================================================================	
	для ii=0 по СписокЗаданий.Количество()-1 цикл
		Если ТипЗнч(СписокЗаданий) = Тип("ТаблицаЗначений") Тогда
		зак = СписокЗаданий[ii].Заказ;
		иначе	
		зак = СписокЗаданий[ii].Значение;
	    КонецЕсли;
		
	 ОбъектXML.ЗаписатьНачалоЭлемента(ИмяУзла);
			
			ОбъектXML.ЗаписатьАтрибут( "GuidIn1S", СокрЛП(зак.УникальныйИдентификатор()) );
			ОбъектXML.ЗаписатьАтрибут("NumberIn1S",СокрЛП(зак.Номер) );
			
			ОбъектXML.ЗаписатьАтрибут("Driver",СокрЛП(зак.Водитель) ); //07.02.2018
		
			ОбъектXML.ЗаписатьАтрибут("DocDate", формат(зак.Дата,"ДЛФ=DT") ); // OrderDate / SaleDate
			ОбъектXML.ЗаписатьАтрибут("DepartureDate", формат(зак.ВремяНапоминания,"ДЛФ=DT") ); 
			
			Location=ПолучитьКоординатыПодразделения( зак.Подразделение.Код );
			//ОбъектXML.ЗаписатьАтрибут("Location", Location );
			i=найти(Location," "); L = стрДлина(Location);
				ОбъектXML.ЗаписатьАтрибут("Longitude",лев(Location,i-1) );//долгота
				ОбъектXML.ЗаписатьАтрибут("Latitude",прав(Location,L-i) ); //широта
	
		ОбъектXML.ЗаписатьНачалоЭлемента("Details");
		ЗаказыРеализации = зак.ЗаказыПокупателей.Выгрузить();
		ЗаказыРеализации.Сортировать("НомерОчереди убыв");
		максОч = ЗаказыРеализации[0].НомерОчереди;
		    Location0 = Location; //переходящая координата
			 PlanUnloadTimeN = 0;  
			 номТочки0=0;
			Для каждого стр из ЗаказыРеализации Цикл 
				ОбъектXML.ЗаписатьНачалоЭлемента("Detail"); //Order/Sale
				ОбъектXML.ЗаписатьАтрибут("GuidIn1S", строка(стр.ЗаказПокупателя.УникальныйИдентификатор()) ); //строка
				номТочки = максОч - стр.НомерОчереди + 1;
				ОбъектXML.ЗаписатьАтрибут("NumberOfQueue", строка(номТочки) ); 
				
				//если другая точка...то считаем координаты!
				Если номТочки<>номТочки0 тогда
					номТочки0 = номТочки;
				Location = получитьКоординатыЗаказа(стр.ЗаказПокупателя);
					Если Location = "" 
						тогда Location = Location0; //пред.точка!
						иначе Location0 =	Location;
					КонецЕсли;	
				КонецЕсли;
				
				//ОбъектXML.ЗаписатьАтрибут("Location",Location);
				i=найти(Location," "); L = стрДлина(Location);
				ОбъектXML.ЗаписатьАтрибут("Longitude",лев(Location,i-1) );//долгота
				ОбъектXML.ЗаписатьАтрибут("Latitude",прав(Location,L-i) ); //широта
				
				ОбъектXML.ЗаписатьАтрибут("IsDelivered", ?(стр.ЗаказПокупателя.статус = перечисления.СтатусыЗаказов.Доставлен,"1","0") );
				
				PlanTimeOfArrival = "";
				Если типЗнч(стр.Реализация)=тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
					 PlanTimeOfArrival = ?(стр.Реализация.СрокДоставки = '00010101', "", Строка(стр.Реализация.СрокДоставки));
				 КонецЕсли;	
				 
				 //+++ 05.02.2018 +++ ФАКТ.время!
				 //Если (стр.ЗаказПокупателя.статус = перечисления.СтатусыЗаказов.Доставлен) тогда
				 //	PlanTimeOfArrival = стр.ЗаказПокупателя.ВремяНапоминания;
				 //КонецЕсли;
				
				 //02.02.2018 --->  ДатаВремяДоставки* и ВремяВыгрузки
				 // ДатаВремяДоставки*  = (расстояние до точки = Rn)/скорость(Rn) - приблизительное...
				стр2= получитьВремяРазгрузкиЗаказа(стр.ЗаказПокупателя, зак);
				
				Если PlanTimeOfArrival="" тогда  //Примерное... скорость доставки до точки N + сумма всех разгрузок пред.точек!
					PlanTimeOfArrival = строка( стр2.ДатаВремяДоставки + PlanUnloadTimeN ); 
				КонецЕсли;		
				ОбъектXML.ЗаписатьАтрибут("PlanTimeOfArrival", PlanTimeOfArrival );
				 
				PlanUnloadTime = стр2.ВремяВыгрузки;
				PlanUnloadTimeN = PlanUnloadTimeN + PlanUnloadTime; //сумма всех разгрузок
				ОбъектXML.ЗаписатьАтрибут("PlanUnloadTime", формат(PlanUnloadTime,"ЧГ=0") );
				
			ОбъектXML.ЗаписатьКонецЭлемента(); //OrderDetail
			КонецЦикла;
		ОбъектXML.ЗаписатьКонецЭлемента();//Details
	ОбъектXML.ЗаписатьКонецЭлемента(); //ИмяУзла
	КонецЦикла;
	
	ОбъектXML.ЗаписатьКонецЭлемента(); //"ИмяУзла+"s"
	ОбъектXML.Закрыть();
		
		#Если Клиент Тогда
			сообщить(строка(ТекущаяДата())+" Выгрузка "+строка(СписокЗаданий.Количество())+" документов типа '"+ИмяУзла+"' в XML-файл завершена!");
		#КонецЕсли

КонецПроцедуры

//+++ 30.10.2017 - вспомогательные функции  для SIM_ВыгрузитьСписокЗаданийНаОтгрузкуВФайлXML
функция ПолучитьКоординатыПодразделения( ПодразделениеКод )
	
	нашиКоординаты = "39.838082 57.657312";  //Ярославль, Базовая, 3
	
	Если ПодразделениеКод = "00106" тогда      // РнД
		нашиКоординаты = "47.245319 39.59017";
	ИначеЕсли ПодразделениеКод = "00112" тогда // СПб
		нашиКоординаты = "59.8424869 30.4261098";// 
	ИначеЕсли ПодразделениеКод = "00138" тогда
		нашиКоординаты = "56.781591 60.64839";// ЕКТ новый  
	КонецЕсли;

	возврат нашиКоординаты;
КонецФункции	
функция получитьКоординатыЗаказа(ЗаказСсылка)
	
	РезСтруктура = ПолучитьСтруктуруАдреса(ЗаказСсылка);
		  Коорд1 = РезСтруктура.Координаты;
		  Коорд1 = стрЗаменить(Коорд1,","," ");
		  
  возврат Коорд1;
  
КонецФункции	
функция получитьСкоростьИВыгрузку(ВесМакс=0, МаксКм=0)
	стр = новый Структура("Скорость, Выгрузка", 65, 1);
	
	Если МаксКм=0 тогда
		возврат стр;
	КонецЕсли;	
		
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ТарифыНаПеревозки.Скорость,
|	ТарифыНаПеревозки.Выгрузка
|ИЗ
|	РегистрСведений.ТарифыНаПеревозки.СрезПоследних КАК ТарифыНаПеревозки
|ГДЕ
|	ТарифыНаПеревозки.Тоннаж = &Тоннаж
|	И ТарифыНаПеревозки.ЗонаКилометража = &ЗонаКилометража";

Тоннаж = 2;
Если ВесМакс<=2 тогда Тоннаж = 2;       //1
ИначеЕсли ВесМакс<=4 тогда Тоннаж = 4;  //2
ИначеЕсли ВесМакс<=7 тогда Тоннаж = 7;  //3
ИначеЕсли ВесМакс<=10 тогда Тоннаж = 10;//4
Иначе Тоннаж = 20;                      //5
КонецЕсли;
Запрос.УстановитьПараметр("Тоннаж", Тоннаж);

ЗонаКилометража = 500;
Если МаксКм<=500 тогда ЗонаКилометража = 500; 		 //1
ИначеЕсли МаксКм<=1000 тогда ЗонаКилометража = 1000; //2
ИначеЕсли МаксКм<=2000 тогда ЗонаКилометража = 2000; //3
Иначе ЗонаКилометража = 5000; // 4
КонецЕсли;
Запрос.УстановитьПараметр("ЗонаКилометража", ЗонаКилометража);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Если Выборка.Следующий() тогда
	стр.Скорость = выборка.Скорость; //* 2.618;
	стр.Выгрузка = выборка.Выгрузка; //* 1.618;
КонецЕсли;

возврат стр;
КонецФункции	
функция получитьСтрИнфоПоПоездке(Заказ, Задание)
	
	рез = новый структура("Заказ, Объём, Расстояние",Заказ,0,0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформацияПоПроезду.Заказ,
	               |	СУММА(ИнформацияПоПроезду.Объём) КАК Объём,
	               |	МАКСИМУМ(ИнформацияПоПроезду.Расстояние) КАК Расстояние
	               |ИЗ
	               |	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
	               |ГДЕ
	               |	ИнформацияПоПроезду.Задание = &Задание
	               |	И ИнформацияПоПроезду.Заказ = &Заказ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ИнформацияПоПроезду.Заказ";
	Запрос.УстановитьПараметр("Заказ", Заказ );
	Запрос.УстановитьПараметр("Задание", Задание );
	
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() тогда
		табл1 = Результат.Выгрузить();
	    рез = табл1[0];
	КонецЕсли;
	
	возврат рез;
КонецФункции
функция получитьВремяРазгрузкиЗаказа( Заказ, Задание )
	
	стрИнфо = получитьСтрИнфоПоПоездке( Заказ, Задание);  //Объём, Расстояние
	
	структура = получитьСкоростьИВыгрузку( Задание.ВесМакс, стрИнфо.Расстояние );
	Csr = структура.Скорость / 3600; // км/сек
	bsr = структура.Выгрузка / 3600; // м3/сек
	Если bsr = 0 тогда 
		bsr= 2/ 3600; // 2 м3/ч
	КонецЕсли;	
		
	Time = стрИнфо.Объём / bsr; //сек
	Time = Окр(Time/60)*60 ; //округляем до 1 мин  
	
	// дата доставки... приблизительно... R до точки / скорость
	DateC = макс(Задание.ВремяНапоминания, Задание.Дата) + Окр(стрИнфо.Расстояние / Csr);
	
	стр2 = новый Структура("ДатаВремяДоставки, ВремяВыгрузки",  DateC, Time);
	
	возврат стр2; // не менее 10 мин!
	
КонецФункции

//***2018.02.13
Процедура ВыгрузкаДанныхОПроверкеНагрузки() Экспорт

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогВременныхФайлов() + "LoadTest.xml", "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("data");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПровереннаяНагрузкаДисков.Дата КАК ДатаПроверки,
	               |	ПровереннаяНагрузкаДисков.Номенклатура.Код КАК Код,
	               |	ПровереннаяНагрузкаДисков.Номенклатура КАК Номенклатура,
	               |	ПровереннаяНагрузкаДисков.ТестПройден,
	               |	ПровереннаяНагрузкаДисков.ПрошедшаяНагрузка
	               |ИЗ
	               |	РегистрСведений.ПровереннаяНагрузкаДисков КАК ПровереннаяНагрузкаДисков
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаПроверки УБЫВ
	               |ИТОГИ ПО
	               |	Номенклатура
	               |АВТОУПОРЯДОЧИВАНИЕ";
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		ВыборкаДетали = ВыборкаНоменклатуры.Выбрать();
		Если ВыборкаДетали.Следующий() Тогда
			
			Если ВыборкаДетали.ТестПройден И ВыборкаДетали.ПрошедшаяНагрузка > 283 Тогда
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("gd");
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("code");
				ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетали.Код));
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("load");
				ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетали.ПрошедшаяНагрузка));
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				
				ГодТеста = Строка(Формат(Год(ВыборкаДетали.ДатаПроверки), "ЧГ=0"));
				МесяцТеста = Строка(Месяц(ВыборкаДетали.ДатаПроверки));
				Если СтрДлина(МесяцТеста) = 1 Тогда
					МесяцТеста = "0" + МесяцТеста;
				КонецЕсли;
				ДеньТеста = Строка(День(ВыборкаДетали.ДатаПроверки));
				Если СтрДлина(ДеньТеста) = 1 Тогда
					ДеньТеста = "0" + ДеньТеста;
				КонецЕсли;
				
				НайденныеФайлы = НайтиФайлы("\\Videolab\videolab\Тест пройден\"+ГодТеста+"\"+МесяцТеста+"\"+ДеньТеста, Строка(ВыборкаДетали.Код)+"*");
				
				Если НайденныеФайлы.Количество() > 0 Тогда
					Для каждого ФайлВидео ИЗ НайденныеФайлы Цикл
						ЗаписьXML.ЗаписатьНачалоЭлемента("video");
						ЗаписьXML.ЗаписатьТекст(Строка(ФайлВидео.ПолноеИмя));
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЦикла;
				КонецЕсли;
								
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	ВыгрузитьФайлНаYST(КаталогВременныхФайлов(), "LoadTest.xml");
 	
	врФТПвыгр = Неопределено; // отключение
	
КонецПроцедуры

процедура SIM_ВыгрузитьRecommendedPrice(путь="")
	
 	НоменклатураНаОстатках = НоменклатураНаОстатках();
	//1. для дисков получаем цены контрагента (11011) "мин.рек.РОЗН.цены" и цены контрагента (94291)"для ценообразования KOLESATYT"
	// цены "для ценообразования KOLESATYT" имеют больший приоритет, чем "мин.рек.РОЗН.цены"
	КонтрагентРРЦ = Справочники.Контрагенты.НайтиПоКоду("11011");
	КонтрагентДляЦенообразованияKOLESATYT = Справочники.Контрагенты.НайтиПоКоду("94291");
	
	отбор = новый структура("ВидТовара");
	отбор.ВидТовара = Перечисления.ВидыТоваров.Диски;
	НайденныеСтроки = НоменклатураНаОстатках.НайтиСтроки(отбор);
	ДискиНаОстатках = новый СписокЗначений;
	для каждого стр из НайденныеСтроки цикл
		ДискиНаОстатках.Добавить(стр.Номенклатура);
	КонецЦикла;
	списНаОстатках = новый СписокЗначений;
	списНаОстатках.ЗагрузитьЗначения( НоменклатураНаОстатках.ВыгрузитьКолонку("Номенклатура") );
	
	РРЦДиски = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(КонтрагентРРЦ, ДискиНаОстатках);
	РРЦ_МРИЦ_ШиныИмпорт = ПолучитьРРЦ_МРИЦ_ШиныИмпорт(НоменклатураНаОстатках);
	
	Если ПолучитьДокПолитикиЦенообразования(КонтрагентДляЦенообразованияKOLESATYT)= неопределено тогда
		//+++ 28.05.2015
		флЭкспорт =  КонтрагентДляЦенообразованияKOLESATYT.Экспорт И КонтрагентДляЦенообразованияKOLESATYT.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов.Код<>"643";
		Если флЭкспорт тогда
			ТабЗнач = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСвЭкспорт(КонтрагентДляЦенообразованияKOLESATYT, списНаОстатках);
		иначе
			ТабЗнач = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(КонтрагентДляЦенообразованияKOLESATYT, списНаОстатках);//+++ 23.10.2014 ДатаСреза !
		КонецЕсли;
	Иначе  //-----------------------------расчет по политике ценообразования----------------------------------------
		ценыДляЦенообразования = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(КонтрагентДляЦенообразованияKOLESATYT, списНаОстатках); 
	КонецЕсли;

	Запрос = новый Запрос;

	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	тзЦеныДляЦенообразования.Номенклатура,
	               |	тзЦеныДляЦенообразования.ЦенаСоСкидкойПредоплаты
	               |ПОМЕСТИТЬ втЦеныКолесатут
	               |ИЗ
	               |	&тзЦеныДляЦенообразования КАК тзЦеныДляЦенообразования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	тзЦеныРРЦДиски.Номенклатура,
	               |	тзЦеныРРЦДиски.ЦенаСоСкидкойПредоплаты КАК ЦенаРРЦ
	               |ПОМЕСТИТЬ втРРЦДиски
	               |ИЗ
	               |	&тзЦеныРРЦ КАК тзЦеныРРЦДиски
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	тзЦеныРРЦШиныИмпорт.Номенклатура,
	               |	тзЦеныРРЦШиныИмпорт.ЦенаРРЦ
	               |ПОМЕСТИТЬ втЦеныРРЦШиныИмпорт
	               |ИЗ
	               |	&РРЦ_МРИЦ_ШиныИмпорт КАК тзЦеныРРЦШиныИмпорт
	               |ГДЕ
	               |	тзЦеныРРЦШиныИмпорт.ЦенаРРЦ > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРРЦДиски.Номенклатура,
	               |	втРРЦДиски.ЦенаРРЦ
	               |ПОМЕСТИТЬ втРРЦ
	               |ИЗ
	               |	втРРЦДиски КАК втРРЦДиски
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	втЦеныРРЦШиныИмпорт.Номенклатура,
	               |	втЦеныРРЦШиныИмпорт.ЦенаРРЦ
	               |ИЗ
	               |	втЦеныРРЦШиныИмпорт КАК втЦеныРРЦШиныИмпорт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втЦеныКолесатут.Номенклатура,
	               |	ЕСТЬNULL(втРРЦ.ЦенаРРЦ, втЦеныКолесатут.ЦенаСоСкидкойПредоплаты) КАК ЦенаРРЦ
	               |ПОМЕСТИТЬ РРЦ
	               |ИЗ
	               |	втРРЦ КАК втРРЦ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныКолесатут КАК втЦеныКолесатут
	               |		ПО (втЦеныКолесатут.Номенклатура = втРРЦ.Номенклатура)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	тзМРИЦШиныИмпорт.Номенклатура,
	               |	тзМРИЦШиныИмпорт.ЦенаМРИЦ
	               |ПОМЕСТИТЬ втМРИЦ
	               |ИЗ
	               |	&РРЦ_МРИЦ_ШиныИмпорт КАК тзМРИЦШиныИмпорт
	               |ГДЕ
	               |	тзМРИЦШиныИмпорт.ЦенаМРИЦ > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(втМРИЦ.Номенклатура, РРЦ.Номенклатура) КАК Номенклатура,
				   |	ЕСТЬNULL(втМРИЦ.Номенклатура.код, РРЦ.Номенклатура.Код) КАК Код,
	               |	ЕСТЬNULL(втМРИЦ.ЦенаМРИЦ, 0) КАК ЦенаМРИЦ,
	               |	ЕСТЬNULL(РРЦ.ЦенаРРЦ, 0) КАК ЦенаРРЦ
	               |ИЗ
	               |	РРЦ КАК РРЦ
	               |		ПОЛНОЕ СОЕДИНЕНИЕ втМРИЦ КАК втМРИЦ
	               |		ПО РРЦ.Номенклатура = втМРИЦ.Номенклатура";
	
	
	Запрос.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()));
	
	Запрос.УстановитьПараметр("КонтрагентДляЦенообразованияКолесаТут",КонтрагентДляЦенообразованияKOLESATYT);
	Запрос.УстановитьПараметр("тзЦеныРРЦ",РРЦДиски);
	Запрос.УстановитьПараметр("РРЦ_МРИЦ_ШиныИмпорт",РРЦ_МРИЦ_ШиныИмпорт);
	
	Запрос.УстановитьПараметр("тзЦеныДляЦенообразования",ценыДляЦенообразования);
	Рез = Запрос.Выполнить().выгрузить();
	
	ИмяФайлаЦен = Путь+"RecommendedPrice.txt";
	
	текстФайл = Новый ЗаписьТекста(ИмяФайлаЦен, КодировкаТекста.ANSI);
	
	//Код;ЦенаРРЦ;ЦенаМРИЦ	
	Для каждого стр из Рез цикл
		текстФайл.ЗаписатьСтроку(СокрЛП(стр.Код)+";"+Формат(стр.ЦенаРРЦ,"ЧДЦ=0; ЧН=0; ЧГ=0")+";"+Формат(стр.ЦенаМРИЦ,"ЧДЦ=0; ЧН=0; ЧГ=0"));
	КонецЦикла;
	текстФайл.Закрыть();
	
	#Если  клиент тогда
		Сообщить(ИмяФайлаЦен);
	#КонецЕсли
КонецПроцедуры




//+++ 19.02.2018 --- заявки на транспорт ---
процедура ВыгрузитьЗаявкиНаТранспортВФайл(ИмяФайла="")
	датаМин = НачалоДня(ТекущаяДата()); 
	СписокДокументов = ПолучитьЗаявкиНаТранспорт(датаМин);
	
	записьXML = новый ЗаписьXML();
	записьXML.ОткрытьФайл( имяФайла );
	записьXML.ЗаписатьНачалоЭлемента("ArrayOfClaimForTransport");
	для i=0 по СписокДокументов.Количество()-1 цикл
		док = СписокДокументов[i].Значение;
		записьXML.ЗаписатьНачалоЭлемента("ClaimForTransport");
		Если НЕ док.Контрагент.пустая() тогда
			записьXML.ЗаписатьНачалоЭлемента("CarrierId");
			записьXML.ЗаписатьТекст( док.Контрагент.Код );
	    	записьXML.ЗаписатьКонецЭлемента();
			
			записьXML.ЗаписатьНачалоЭлемента("Comments");
			записьXML.ЗаписатьТекст( док.Комментарий );
	    	записьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
			
		Если док.ДатаДоставкиС>'00010101' тогда
		записьXML.ЗаписатьНачалоЭлемента("DeadlineDate");
		датаТ = формат(док.ДатаДоставкиС,"ДФ=yyyy-MM-ddThh:mm:ss");  //дата наоборот T время
		записьXML.ЗаписатьТекст( датаТ );
    	записьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	
		записьXML.ЗаписатьНачалоЭлемента("DocDate");
		датаТ = формат(док.Дата,"ДФ=yyyy-MM-ddThh:mm:ss");  //дата наоборот T время
		записьXML.ЗаписатьТекст( датаТ );
		
    	записьXML.ЗаписатьКонецЭлемента();
		записьXML.ЗаписатьНачалоЭлемента("GuidIn1S");
		записьXML.ЗаписатьТекст( строка(док.УникальныйИдентификатор()) );
    	записьXML.ЗаписатьКонецЭлемента();
		записьXML.ЗаписатьНачалоЭлемента("NumberIn1S");
		записьXML.ЗаписатьТекст( СокрЛП(док.Номер) );
    	записьXML.ЗаписатьКонецЭлемента();
		
		записьXML.ЗаписатьНачалоЭлемента("Path");
		маршрут = док.Отправитель;
		маршрут = стрЗаменить(маршрут, "150044, Ярославская обл, ","");
		маршрут = "Из: "+маршрут + " По маршруту: "+СокрЛП(док.Направление);
		записьXML.ЗаписатьТекст( маршрут );
    	записьXML.ЗаписатьКонецЭлемента();
		
		записьXML.ЗаписатьНачалоЭлемента("Volume");
		записьXML.ЗаписатьТекст( строка( ОКР(док.Объем,0) ) );
    	записьXML.ЗаписатьКонецЭлемента();
//-------------------пока не надо ------------------------------------		
		//записьXML.ЗаписатьНачалоЭлемента("Status");
		//СтатусНом = получитьСтатусЗаявкиНаТранспорт(док);
		//записьXML.ЗаписатьТекст( строка( СтатусНом ) );
		//записьXML.ЗаписатьКонецЭлемента();
		
    	записьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    записьXML.ЗаписатьКонецЭлемента();
	записьXML.Закрыть();
	сообщить("-----------------------------");
КонецПроцедуры

функция ПолучитьЗаявкиНаТранспорт(ДатаМин)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаявкаНаТранспорт.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаТранспорт КАК ЗаявкаНаТранспорт
	|ГДЕ
	|	ЗаявкаНаТранспорт.Проведен
	|	И ЗаявкаНаТранспорт.Дата >= &ДатаМин";
	
	Запрос.УстановитьПараметр("ДатаМин", ДатаМин);
	
	Результат = Запрос.Выполнить();
	табл = Результат.Выгрузить();
	
	спис = новый СписокЗначений;
	спис.ЗагрузитьЗначения( табл.ВыгрузитьКолонку("Ссылка") );
	возврат спис;
КонецФункции	

функция получитьСтатусЗаявкиНаТранспорт(ссылка)
	соотв = новый Соответствие;
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.Подготовлен, 0);
	
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.НаТендере, 1);
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.ЕстьОтвет, 2);
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.ПеревозчикВыбран, 3);
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.НаПогрузке, 4);
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.ВПути,5);
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.Доставлен,6);
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.Отменен,7);
	
	номСтатус = соотв.Получить( ссылка.статус );
	Если номСтатус = неопределено тогда
		номСтатус = -1;
	КонецЕсли;
	
	возврат номСтатус;
КонецФункции	

//--------------Перевозчики---------------
//CREATE TABLE [dbo].[Carriers](
// [Id] [nvarchar](7) NOT NULL,
// [FullName] [nvarchar](255) NOT NULL,
// [Inn] [nvarchar](12) NOT NULL,
// [Kpp] [nvarchar](9) NOT NULL,
Процедура ВыгрузитьПеревозчиковВФайл(ПутьКФайлу="")
	
	датаМин = НачалоГода(НачалоГода(ТекущаяДата())-1);
	списПеревозчиков = ПолучитьПеревозчиков(датаМин);
	
	ЗаписьXML = Новый ЗаписьXML;
  	ЗаписьXML.ОткрытьФайл(ПутьКФайлу);
 //   ЗаписьXML.ЗаписатьОбъявлениеXML();    
 
    ЗаписьXML.ЗаписатьНачалоЭлемента("ArrayOfCarrier");
	
	для i=0 по списПеревозчиков.Количество()-1 цикл
    ЗаписьXML.ЗаписатьНачалоЭлемента("Carrier");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Id");
	    	ЗаписьXML.ЗаписатьТекст(списПеревозчиков[i].Значение.Код);
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("FullName");
			ЗаписьXML.ЗаписатьТекст( СокрЛП(списПеревозчиков[i].Значение.НаименованиеПолное) );
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
     
		ЗаписьXML.ЗаписатьНачалоЭлемента("Inn");
			ЗаписьXML.ЗаписатьТекст(списПеревозчиков[i].Значение.ИНН);
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Kpp");
			ЗаписьXML.ЗаписатьТекст(списПеревозчиков[i].Значение.КПП);
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
		
	ЗаписьXML.ЗаписатьКонецЭлемента(); //Carrier
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента(); //Carriers

	ЗаписьXML.Закрыть();
 
	#Если Клиент тогда
		Сообщить("--------Выгрузка "+строка(списПеревозчиков.Количество())+" перевозчников в файл XML завершена-------");	
		сообщить(ПутьКФайлу);
	#КонецЕсли	
	
КонецПроцедуры

функция ПолучитьПеревозчиков(ДатаМин)
	// Вставить содержимое обработчика.
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	ЗаданиеНаОтгрузку.Перевозчик,
               |	Контрагенты.Ссылка КАК Заказчик
               |ИЗ
               |	Документ.ЗаданиеНаОтгрузку КАК ЗаданиеНаОтгрузку
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
               |		ПО ЗаданиеНаОтгрузку.Перевозчик = Контрагенты.НаименованиеПолное
               |ГДЕ
               |	ЗаданиеНаОтгрузку.Дата >= &ДатаМин
               |	И ЗаданиеНаОтгрузку.Проведен
               |	И ЗаданиеНаОтгрузку.Выполнено
               |	И ЗаданиеНаОтгрузку.Перевозчик <> """"
               |	И ЗаданиеНаОтгрузку.Перевозчик <> "".""
			      |	И ЗаданиеНаОтгрузку.Перевозчик <> ""Общество с ограниченной ответственностью""
               |	И Контрагенты.Ссылка <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
               |
               |УПОРЯДОЧИТЬ ПО
               |	Контрагенты.Код
               |АВТОУПОРЯДОЧИВАНИЕ";

Запрос.УстановитьПараметр("ДатаМин", ДатаМин  );

Результат = Запрос.Выполнить();
табл = результат.Выгрузить();
списПеревозчиков = новый СписокЗначений;
списПеревозчиков.Загрузитьзначения(табл.ВыгрузитьКолонку("Заказчик") );
возврат списПеревозчиков;
КонецФункции

Функция ПолучитьРРЦ_МРИЦ_ШиныИмпорт(ДискиНаОстатках)
	НГШиныИмпорт = новый СписокЗначений;
	НГШиныИмпорт.Добавить(Справочники.НоменклатурныеГруппы.НайтиПоКоду("00016")); //Импорт зима
	НГШиныИмпорт.Добавить(Справочники.НоменклатурныеГруппы.НайтиПоКоду("00017")); //Импорт лето
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	тзНаОстатках.Номенклатура,
	             |	тзНаОстатках.НоменклатурнаяГруппа
	             |ПОМЕСТИТЬ втНаОстатках
	             |ИЗ
	             |	&тзНаОстатках КАК тзНаОстатках
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втНаОстатках.Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаРРЦ
	             |ПОМЕСТИТЬ втРРЦ
	             |ИЗ
	             |	втНаОстатках КАК втНаОстатках
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТипРРц) КАК ЦеныНоменклатурыСрезПоследних
	             |		ПО втНаОстатках.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	             |ГДЕ
	             |	втНаОстатках.НоменклатурнаяГруппа В(&НоменклатурнаяГруппаШиныИмпорт)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втНаОстатках.Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаМРИЦ
	             |ПОМЕСТИТЬ втМРИЦ
	             |ИЗ
	             |	втНаОстатках КАК втНаОстатках
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТипМРИЦ) КАК ЦеныНоменклатурыСрезПоследних
	             |		ПО втНаОстатках.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	             |ГДЕ
	             |	втНаОстатках.НоменклатурнаяГруппа В(&НоменклатурнаяГруппаШиныИмпорт)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(втМРИЦ.Номенклатура, втРРЦ.Номенклатура) КАК Номенклатура,
	             |	ЕСТЬNULL(втРРЦ.ЦенаРРЦ, 0) КАК ЦенаРРЦ,
	             |	ЕСТЬNULL(втМРИЦ.ЦенаМРИЦ, 0) КАК ЦенаМРИЦ
	             |ИЗ
	             |	втРРЦ КАК втРРЦ
	             |		ПОЛНОЕ СОЕДИНЕНИЕ втМРИЦ КАК втМРИЦ
	             |		ПО втРРЦ.Номенклатура = втМРИЦ.Номенклатура";
				 Запрос.УстановитьПараметр("тзНаОстатках",ДискиНаОстатках);
				 Запрос.УстановитьПараметр("НоменклатурнаяГруппаШиныИмпорт",НГШиныИмпорт);
				 Запрос.УстановитьПараметр("ТипРРц",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00011"));//РРЦ шины
				 Запрос.УстановитьПараметр("ТипМРИЦ",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00025"));//МРИЦ шины

				 Возврат Запрос.Выполнить().Выгрузить();
				 
КонецФункции

функция ПолучитьДокПолитикиЦенообразования(Контрагент)
	Если Контрагент.Пустая() тогда
		возврат Неопределено;
	КонецЕсли;	
	
	ЗапросПоискПолитики=Новый Запрос;	
	
	ЗапросПоискПолитики.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
	                           |	ПолитикаЦенообразования.Ссылка
	                           |ИЗ
	                           |	Документ.ПолитикаЦенообразования КАК ПолитикаЦенообразования
	                           |ГДЕ
	                           |	ПолитикаЦенообразования.Контрагент = &Контрагент
	                           |	И ПолитикаЦенообразования.Ссылка.Проведен
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	ПолитикаЦенообразования.Дата УБЫВ";
	
	ЗапросПоискПолитики.УстановитьПараметр("Контрагент",Контрагент);
	
	РезультатПолитика= ЗапросПоискПолитики.Выполнить();
	
	Если РезультатПолитика.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		ВыборкаПолитика=РезультатПолитика.Выбрать();
		ВыборкаПолитика.Следующий();
		ТекущаяПолитика=ВыборкаПолитика.Ссылка;
		возврат ТекущаяПолитика;
	КонецЕсли;	     // для контрагента нет политики ценообразования
	
	
КонецФункции

Функция НоменклатураНаОстатках()
	запросПоОстаткам = новый Запрос;
	запросПоОстаткам.Текст ="ВЫБРАТЬ
	                        |	Запрос1.Номенклатура КАК Номенклатура,
	                        |	СУММА(Запрос1.КоличествоОстаток) КАК КоличествоОстаток,
	                        |	Запрос1.Номенклатура.ВидТовара КАК ВидТовара,
	                        |	Запрос1.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	                        |ИЗ
	                        |	(ВЫБРАТЬ
	                        |		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	                        |		ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
	                        |	ИЗ
	                        |		РегистрНакопления.ТоварыНаСкладах.Остатки(, НЕ Склад.ЗапретитьИспользование) КАК ТоварыНаСкладахОстатки
	                        |	
	                        |	ОБЪЕДИНИТЬ ВСЕ
	                        |	
	                        |	ВЫБРАТЬ
	                        |		ТоварыОТХ.Номенклатура,
	                        |		ЕСТЬNULL(ТоварыОТХ.КоличествоОстаток, 0)
	                        |	ИЗ
	                        |		РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
	                        |				,
	                        |				Контрагент В (&СписокКонтрОТХ)
	                        |					И НЕ Склад.Транзитный
	                        |					И НЕ Склад.ЗапретитьИспользование) КАК ТоварыОТХ
	                        |	
	                        |	ОБЪЕДИНИТЬ ВСЕ
	                        |	
	                        |	ВЫБРАТЬ
	                        |		ОстаткиНоменклатурыКонтрагентов.Номенклатура,
	                        |		СУММА(ОстаткиНоменклатурыКонтрагентов.Остаток)
	                        |	ИЗ
	                        |		РегистрСведений.ОстаткиНоменклатурыКонтрагентов КАК ОстаткиНоменклатурыКонтрагентов
	                        |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СрокиДоставки КАК СрокиДоставки
	                        |			ПО ОстаткиНоменклатурыКонтрагентов.Контрагент = СрокиДоставки.Поставщик
	                        |	ГДЕ
	                        |		СрокиДоставки.ОТХ = ЛОЖЬ
	                        |		И СрокиДоставки.Включен
	                        |	
	                        |	СГРУППИРОВАТЬ ПО
	                        |		ОстаткиНоменклатурыКонтрагентов.Номенклатура
	                        |	
	                        |	ОБЪЕДИНИТЬ ВСЕ
	                        |	
	                        |	ВЫБРАТЬ
	                        |		ЗаказыПоставщикамОстатки.Номенклатура,
	                        |		СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток)
	                        |	ИЗ
	                        |		РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
	                        |	
	                        |	СГРУППИРОВАТЬ ПО
	                        |		ЗаказыПоставщикамОстатки.Номенклатура
	                        |	
	                        |	ОБЪЕДИНИТЬ ВСЕ
	                        |	
	                        |	ВЫБРАТЬ
	                        |		Номенклатура.Ссылка,
	                        |		16
	                        |	ИЗ
	                        |		Справочник.Номенклатура КАК Номенклатура
	                        |	ГДЕ
	                        |		Номенклатура.ПометкаУдаления = ЛОЖЬ
	                        |		И Номенклатура.Производитель = &ПроизводительVISSOL
	                        |		И Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппаКованые) КАК Запрос1
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	Запрос1.Номенклатура,
	                        |	Запрос1.Номенклатура.ВидТовара";
	СписокКонтрОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);
	запросПоОстаткам.Параметры.Вставить("СписокКонтрОТХ",СписокКонтрОТХ);
	
	запросПоОстаткам.Параметры.Вставить("Подразделение",справочники.Подразделения.ПустаяСсылка() );  //ЯШТ
	
	запросПоОстаткам.УстановитьПараметр("ПроизводительVISSOL",Справочники.Производители.НайтиПоКоду("3657"));
	запросПоОстаткам.УстановитьПараметр("НоменклатурнаяГруппаКованые",Справочники.НоменклатурныеГруппы.НайтиПоКоду("00022"));

	табЗнач = запросПоОстаткам.Выполнить().Выгрузить();
	возврат табЗнач;
	//списНом = новый СписокЗначений;
	//списНом.ЗагрузитьЗначения( табЗнач.ВыгрузитьКолонку("Номенклатура") );
КонецФункции

