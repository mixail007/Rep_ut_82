//вспомогательные функции для ЗагрузитьОстатки<Поставщик>
Функция ПолучитьТабл()
	
	КЧ = Новый КвалификаторыЧисла(12,2);
    КС = Новый КвалификаторыСтроки(100);
    Массив = Новый Массив;
    Массив.Добавить(Тип("Строка"));
    ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
    Массив.Очистить();
    Массив.Добавить(Тип("Число"));
    ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ.Колонки.Добавить("Цена",ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Количество",ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("КодПоставщика",ОписаниеТиповС);
	
	возврат ТЗ;
КонецФункции	
процедура ПоказатьТоЧтоНеНашли(ТзНеНашли)
	макет = ПолучитьОбщийМакет("НоменклатураПоставщиков");
	табДокумент = Новый ТабличныйДокумент;
	табДокумент.АвтоМасштаб = Истина;
	Для каждого стр11 из ТзНеНашли Цикл
		областьстрока = Макет.ПолучитьОбласть("Строка");
		областьстрока.Параметры.Номенклатура = стр11.Номенклатура;
		областьстрока.Параметры.Артикул = стр11.Артикул;
		табДокумент.Вывести(областьстрока);
	КонецЦикла;
	табДокумент.Показать();
КонецПроцедуры
Процедура СоздатьЗадачуДляРуководителяНомГр(КодНомГр="", Поставщик, КолЗагружено=0, ТзНеНашли) //LINGLONG легковые
	
	Если КодНомГр="" тогда
		возврат;
	КонецЕсли;
	руководительНомГр = справочники.НоменклатурныеГруппы.НайтиПоКоду(КодНомГр).Ответственный;
		
	//23.01.2018 - если всё найдено - тоже пишем задачу
	Если ТзНеНашли.Количество()>=0 Тогда   
		НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		НоваяЗадача.Исполнитель  =руководительНомГр;
		НоваяЗадача.Наименование = "Новые позиции номенклатуры от "+Строка(Поставщик);
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.ДатаИсполнения = КонецДня(ТекущаяДата());
		НоваяЗадача.Оповещение   = Истина;
		НоваяЗадача.СрокОповещения = ТекущаяДата()+60;
		НоваяЗадача.Описание = "Загружено "+строка(КолЗагружено)+" позиций товаров (по артикулу).
		|
		|"+строка(ТзНеНашли.Количество())+" новых позиций товаров:
		|";
		Для каждого стр из ТзНеНашли Цикл 
			НоваяЗадача.Описание = НоваяЗадача.Описание+стр.Номенклатура+Символы.ПС;
		КонецЦикла;
		НоваяЗадача.Записать();
	КонецЕсли;
		
КонецПроцедуры		

//07.08.2018 - Задача № 52100 
Процедура ЗагрузитьОстаткиЧерныйСписок(Печатать = Ложь, ПроверитьЦены = Ложь) экспорт
	КодПоставщика = "П018280";
	КонтрЧерныйСписок = справочники.Контрагенты.НайтиПоКоду(КодПоставщика);
	 
	табл2 = ПолучитьЧерныйСписок(КонтрЧерныйСписок);
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(табл2); // Артикул = Код
	иначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(Табл2, КонтрЧерныйСписок);
	Иначе
		Если НЕ ЗагружатьОстаткиИЦеныПоставщика(КонтрЧерныйСписок) Тогда
		 возврат;
    	КонецЕсли; 

		НаборОстатки = РегистрыСведений.ОстаткиНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
		НаборОстатки.Отбор.Контрагент.Установить(КонтрЧерныйСписок);
		НаборОстатки.Загрузить( Табл2 ); //все поля уже есть!
		НаборОстатки.Записать();
		#Если Клиент тогда
			сообщить("Загружено "+строка(Табл2.Количество())+" товаров черного списка как остатки 'под заказ'.");
		#КонецЕсли	
	КонецЕсли;
	
КонецПроцедуры	//загрузка Черного списка в остатки стор.поставщика
Процедура ЗагрузитьОстаткиТестовый(Печатать = Ложь, ПроверитьЦены = Ложь)
 
  кодПоставщика = "92532";
  тестовыйПокупатель = справочники.Контрагенты.НайтиПоКоду(кодПоставщика);
  табл = ПолучитьVISSOLкованные(кодПоставщика);
  
  Если Печатать тогда
	   ПоказатьТоЧтоНеНашли(табл); // артикул = Код!
  иначеЕсли ПроверитьЦены тогда
	ПроверитьЦены(табл, тестовыйПокупатель);   
  Иначе 	   
	  ЗагрузитьОстаткиВРегистр(табл, тестовыйПокупатель, ЛОЖЬ); //без проверки на цены!
  КонецЕсли;
  
 //30.07.2018 по задаче № 51681
  кодПоставщика = "П008430";
  табл = ПолучитьДискиСПрограммой(кодПоставщика);
  тестовыйПокупатель7дней = справочники.Контрагенты.НайтиПоКоду(кодПоставщика);
  Если Печатать тогда
	ПоказатьТоЧтоНеНашли(табл); // артикул = Код!
  иначеЕсли ПроверитьЦены тогда
	ПроверитьЦены(табл, тестовыйПокупатель7дней);   
  Иначе 
  	ЗагрузитьОстаткиВРегистр(табл, тестовыйПокупатель7дней, ЛОЖЬ); //без проверки на цены!
  КонецЕсли;

КонецПроцедуры	
Процедура ЗагрузитьОстаткиАвторусь(Печатать = Ложь, ПроверитьЦены = Ложь) 
		
	Авторусь = Справочники.Контрагенты.НайтиПоКоду("00379");
	ФайлИсточник = "1.xls";
	ФайлПриемник = "C:\Остатки_склада_Авторусь.xls";
	
	попытка
		врФТП = Новый FTPСоединение("yst.ru",,"dc140403_logisti", "Vh1xvG3S",, Истина, 30);
		врФТП.Получить(ФайлИсточник, ФайлПриемник);
	исключение
		ВызватьИсключение строка(Авторусь)+": Не существует файла на FTP "+ФайлИсточник;
	КонецПопытки;
	
		Ex = Новый COMObject("Excel.Application");
    Ex.Workbooks.Open(ФайлПриемник);
    
    Ex.Visible = 1;    
    ТекЛист=Ex.WorkSheets(1);
    КолС=ТекЛист.UsedRange.SpecialCells(11).Row;
	
	ТЗ = ПолучитьТабл();
	
	ТзНеНашли = Новый ТаблицаЗначений;
	ТзНеНашли.Колонки.Добавить("Номенклатура");
	ТзНеНашли.Колонки.Добавить("Артикул");
	
	Для Ячейка = 2 по КолС Цикл
		Если СокрЛП(ТекЛист.Cells(Ячейка,3).Value) <> "" Тогда
			Артикул = СокрЛП(ТекЛист.Cells(Ячейка,3).Value);
			Артикул = СтрЗаменить(Артикул,Символы.НПП,"");
			//Д = СтрДлина(Артикул);
			Ном = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
			Если Ном <> Справочники.Номенклатура.ПустаяСсылка() Тогда
				Если Ном.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("9139614")) 
					или Ном.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("9135267"))
					или Ном.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("9135002")) Тогда
		               НомСтр = ТЗ.Добавить();
		               НомСтр.Номенклатура = Ном;
				       //Ном.Цена = Число(?(СтрЗаменить(СокрЛП(ТекЛист.Cells(Ячейка,4).Value),Символы.НПП,"")="",0,СтрЗаменить(СокрЛП(ТекЛист.Cells(Ячейка,4).Value),Символы.НПП,"")));
		               НомСтр.Количество = Число(сокрЛП(СтрЗаменить(СтрЗаменить(СокрЛП(ТекЛист.Cells(Ячейка,5).Value),"Более",""),"шт","")));
				КонецЕсли;
			Иначе
				НовСтр = ТзНеНашли.Добавить();
				НовСтр.Номенклатура = СокрЛП(ТекЛист.Cells(Ячейка,4).Value);
				НовСтр.Артикул = Артикул;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	
	ТЗ.Свернуть("Номенклатура,КодПоставщика","Количество");
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(ТзНеНашли);
	иначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(ТЗ, Авторусь);
	Иначе
		ЗагрузитьОстаткиВРегистр(ТЗ,Авторусь);
		//ЗагрузитьЦеныВРегистр(ТЗ,ЛингЛонг);
	КонецЕсли;
	
	Ex.Application.Quit();
    Ex = неопределено;
	
КонецПроцедуры
Процедура ЗагрузитьОстаткиТуле(Печатать = Ложь, ПроверитьЦены = Ложь)
	КодПоставщика = "П014224";
 	Туле = Справочники.Контрагенты.НайтиПоКоду(КодПоставщика);// Престиж (Евротюнинг) 19.02.2018
	
	// прадварительно скопировать файл
	ИмяФайла = "c:/Прайс Thule.xls";
	номерПервойСтроки = 13;
	
	Thule = справочники.Производители.НайтиПоКоду(3313);
	КолонкаАртикул = 14; // поиск по артикулу (и  Поставщику Thule!
	КолонкаЦена    = 16;
	КолонкаКоличества = 17; 
	
	тзЦены=новый ТаблицаЗначений;
	тзЦены.Колонки.Добавить("Артикул",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
	тзЦены.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
	тзЦены.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,0)));
	
	файл1 = новый Файл( ИмяФайла ); //проверка наличия!
	Если НЕ файл1.Существует() тогда
		ВызватьИсключение "Thule: Не существует файла "+ИмяФайла;
	КонецЕсли;

    Ex = Новый COMObject("Excel.Application");
    Ex.Workbooks.Open(ИмяФайла);
    
Ex.Visible = 1;    
    ТекЛист=Ex.WorkSheets(1);
    КолС=ТекЛист.UsedRange.SpecialCells(11).Row;
	
	Для Ячейка = номерПервойСтроки по КолС Цикл
		Артикул = СокрЛП(ТекЛист.Cells(Ячейка,КолонкаАртикул).Value); 
		Если Артикул <> "" Тогда
			стр1 = тзЦены.Добавить();
			стр1.Артикул = Артикул;
			стр1.Цена = ТекЛист.Cells(Ячейка,КолонкаЦена).Value;
			стр1.Количество = ТекЛист.Cells(Ячейка,КолонкаКоличества).Value;
		КонецЕсли;
	КонецЦикла;
Ex.Application.Quit();
Ex = неопределено;
//--------------------------------------------------------------------------

	i=0;  //--- даление с 0 ценой или 0 количеством (пустых)---
	пока i<тзЦены.Количество() цикл
		стр1 = тзЦены[i];
		Если стр1.Цена=0 или стр1.Количество=0 тогда
			тзЦены.Удалить(i);
		Иначе i=i+1;
		КонецЕсли;
	КонецЦикла;
	
#Если Клиент тогда
	сообщить("Получена таблица из "+строка(тзЦены.Количество())+" строк ненулевых цен и остатка."); 
 #КонецЕсли		
 
//--------------------загрузка в регистры-----------------
 Запрос = Новый Запрос;
 Запрос.Текст = "ВЫБРАТЬ
                |	т.Артикул,
                |	т.Цена,
                |	т.Количество
                |ПОМЕСТИТЬ ВТ_таб
                |ИЗ
                |	&тзЦены КАК т
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ РАЗЛИЧНЫЕ
                |	&Контр КАК Контрагент,
				|	&КодПоставщика как КодПоставщика,
                |	&Подр КАК Подразделение,
                |	спрНоменклатура.Номенклатура,
                |	спрНоменклатура.Артикул,
                |	спрНоменклатура.Производитель,
                |	таб.Цена,
                |	таб.Количество КАК Количество,
                |	&ДатаТек КАК ДатаУстановки
                |ИЗ
                |	(ВЫБРАТЬ
                |		ном.Артикул КАК Артикул,
                |		ном.Ссылка КАК Номенклатура,
                |		ном.Производитель КАК Производитель
                |	ИЗ
                |		Справочник.Номенклатура КАК ном
                |	ГДЕ
                |		(ном.ВидТовара = ЗНАЧЕНИЕ(перечисление.видыТоваров.Аксессуары)
                |				ИЛИ ном.ВидТовара = ЗНАЧЕНИЕ(перечисление.видыТоваров.Прочее))
                |		И ном.Производитель = &Thule) КАК спрНоменклатура
                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_таб КАК таб
                |		ПО спрНоменклатура.Артикул = таб.Артикул
                |ГДЕ
                |	спрНоменклатура.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |УНИЧТОЖИТЬ ВТ_таб";
 Запрос.УстановитьПараметр("тзЦены", тзЦены);
 Запрос.УстановитьПараметр("Контр", Туле);
 Запрос.УстановитьПараметр("КодПоставщика", КодПоставщика);
 Запрос.УстановитьПараметр("Thule", Thule);
 Запрос.УстановитьПараметр("Подр", справочники.Подразделения.ПустаяСсылка() ); //Ярославль = пустое!
 Запрос.УстановитьПараметр("ДатаТек",ТекущаяДата() );
 
 Результат = Запрос.Выполнить();
 табл2 = Результат.Выгрузить();
 
 Если Печатать тогда
	 ПоказатьТоЧтоНеНашли(табл2);
 ИначеЕсли ПроверитьЦены тогда
	 ПроверитьЦены(табл2, Туле);
 Иначе	 
	 Если табл2.Количество()>0 тогда
		 #Если Клиент тогда
			 Сообщить("Будет загружено "+строка(табл2.Количество())+" из "+строка(тзЦены.Количество())+" товаров по контрагенту "+строка(Туле), СтатусСообщения.Информация);
		 #КонецЕсли	 
			ЗагрузитьОстаткиВРегистр(табл2,Туле);
			
			#Если Клиент Тогда
				Состояние("Идет запись ""Цен номенклатуры""...");
			#КонецЕсли
			
			ЗагрузитьЦеныВРегистр(табл2, Туле);
			ЗагрузитьЦеныВДокумент(табл2, Туле); //ОДИН производитель!
	 Иначе
		 #Если Клиент тогда
			 Сообщить("Нет товаров для загрузки!");
		 #КонецЕсли	 
	КонецЕсли;
 КонецЕсли;

КонецПроцедуры //Туле


Процедура ЗагрузитьОстаткиЛингЛонг(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт
    КодПоставщика = "93920";
	ЛингЛонг = Справочники.Контрагенты.НайтиПоКоду(КодПоставщика);
	КолДней = 1;
	Если ДеньНедели(ТекущаяДата()) = 7 тогда // в воскресенье - пятничный
		КолДней = 2;
	ИначеЕсли ДеньНедели(ТекущаяДата()) = 1 тогда //в понедельник - пятничный
		КолДней = 3;
	КонецЕсли;	
	предДень = ТекущаяДата() - КолДней*86400; 
	Файл = "Остатки склада на "+ Строка(Формат(предДень,"ДФ=dd.MM.yy")) +".xlsx"; // пред.день!
	ФайлПриемник = "C:\Остатки_склада_ЛингЛонг.xlsx";
	
	//+++ 22.01.2018 количество сдвинулось с 27 на 37!
	КолонкаАртикул = 3; // поиск по артикулу или 2 колонка = Наименование
	КолонкаЦена    = 4;
	//КолонкаКоличества = 26; //31.01.2018 - сдвинулась!  20.02.2018 - поиск с 30-ой колонки!
	КолонкаКоличества = 27; //19.10.2018 - сдвинулась!  
	начСтр = 14;
	
	попытка
		врФТП = Новый FTPСоединение("yst.ru",,"dc140403_93920", "O7GmLquc",, Истина, 30);
		врФТП.Получить(Файл, ФайлПриемник);
	Исключение//01.02.2019
		ВызватьИсключение "ЛингЛонг: Не существует файл FTP: "+Файл;
	КонецПопытки;
	
	Ex = Новый COMObject("Excel.Application");
    Ex.Workbooks.Open(ФайлПриемник);
    
    Ex.Visible = 1;    
    ТекЛист=Ex.WorkSheets(1);
    КолС=ТекЛист.UsedRange.SpecialCells(11).Row;
	
	ТЗ = ПолучитьТабл();
	
	ТзНеНашли = Новый ТаблицаЗначений;
	ТзНеНашли.Колонки.Добавить("Номенклатура");
	ТзНеНашли.Колонки.Добавить("Артикул");
	
	Для Ячейка = начСтр по КолС Цикл
		
		Артикул = СокрЛП(ТекЛист.Cells(Ячейка,КолонкаАртикул).Value); 
		
		Если Артикул <> "" Тогда
			Артикул = СтрЗаменить(Артикул, Символы.НПП, "");
			товар   = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
			Если ЗначениеЗаполнено(товар) Тогда
		        Ном = ТЗ.Добавить();
		        Ном.Номенклатура = товар;
				
				значЦена = СтрЗаменить(СокрЛП(ТекЛист.Cells(Ячейка,КолонкаЦена).Value),Символы.НПП,""); 
			    Ном.Цена = Число(?(значЦена="",0,значЦена));
				
				значКол = СтрЗаменить(СокрЛП(ТекЛист.Cells(Ячейка,КолонкаКоличества).Value),Символы.НПП,"");
		        Ном.Количество = Число(?(значКол="",0,значКол) );
				Ном.КодПоставщика = КодПоставщика;
			Иначе
				НовСтр = ТзНеНашли.Добавить();
				НовСтр.Номенклатура = СокрЛП(ТекЛист.Cells(Ячейка,2).Value); //наименование!
				НовСтр.Артикул = Артикул;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(ТзНеНашли);
	иначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(ТЗ, ЛингЛонг);
	Иначе
		ЗагрузитьОстаткиВРегистр(ТЗ,ЛингЛонг);
		ЗагрузитьЦеныВРегистр(ТЗ,ЛингЛонг);
		СоздатьЗадачуДляРуководителяНомГр("00062", ЛингЛонг, ТЗ.Количество(), ТзНеНашли); //LINGLONG легковые
	КонецЕсли;
	
	Ex.Application.Quit();
	Ex = неопределено;	
КонецПроцедуры

Процедура ЗагрузитьОстаткиХартунг(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт  
	КодПоставщика = "П005296";
	Хартунг = Справочники.Контрагенты.НайтиПоКоду(КодПоставщика);
	НеПолучилось = ложь;
	ФайлИсточник = "Остатки.xls";
	ФайлПриемник = "C:\Остатки_склада_Хартунг.xls";
	
	попытка
		врФТП = Новый FTPСоединение("yst.ru",,"dc140403_hartung", "IXDHK5lc",, Истина, 30);
		врФТП.Получить(ФайлИсточник,ФайлПриемник);
	Исключение//01.02.2019
		ВызватьИсключение строка(Хартунг)+": Не существует файла FTP: "+ФайлИсточник;
	КонецПопытки;
			
	Ex = Новый COMObject("Excel.Application");
	Ex.Workbooks.Open(ФайлПриемник);
	
     Ex.Visible = 1;    
    ТекЛист=Ex.WorkSheets(1);
    КолС=ТекЛист.UsedRange.SpecialCells(11).Row;
	
	ТЗ = ПолучитьТабл();
	
	ТзНеНашли = Новый ТаблицаЗначений;
	ТзНеНашли.Колонки.Добавить("Номенклатура");
	ТзНеНашли.Колонки.Добавить("Артикул");
	
	Для Ячейка = 3 по КолС Цикл
		Если СокрЛП(ТекЛист.Cells(Ячейка,2).Value) <> "" Тогда
			Артикул = СокрЛП(ТекЛист.Cells(Ячейка,2).Value);
			ПП1 = Найти(артикул,"(");
			П1 = СтрДлина(Артикул) - ПП1;
			Артикул = Прав(Артикул,П1);
			П2 = Найти(Артикул,")");
			Артикул = Лев(Артикул,П2-1);
			Если ЗначениеЗаполнено(Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул)) и Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул).ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		        Ном = ТЗ.Добавить();
		        Ном.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
			    //Ном.Цена = Число(?(СтрЗаменить(СокрЛП(ТекЛист.Cells(Ячейка,4).Value),Символы.НПП,"")="",0,СтрЗаменить(СокрЛП(ТекЛист.Cells(Ячейка,4).Value),Символы.НПП,"")));
		        Ном.Количество = Число(СокрЛП(ТекЛист.Cells(Ячейка,4).Value));
				Ном.КодПоставщика = КодПоставщика;
			Иначе
				НовСтр = ТзНеНашли.Добавить();
				НовСтр.Номенклатура = СокрЛП(ТекЛист.Cells(Ячейка,2).Value);
				НовСтр.Артикул = Артикул;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТЗ.Свернуть("Номенклатура, КодПоставщика","Количество");
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(ТзНеНашли);
	ИначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(ТЗ, Хартунг);
	Иначе
		ЗагрузитьОстаткиВРегистр(ТЗ, Хартунг);
		СоздатьЗадачуДляРуководителяНомГр("00013", Хартунг, ТЗ.Количество(), ТзНеНашли); //Грузовые диски
	КонецЕсли;
	
	Ex.Application.Quit();
    Ex = неопределено;
	
КонецПроцедуры

Процедура ЗагрузитьОстаткиДиаДиск(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт
	КодПоставщика = "П002640";
	ДиаДиск  = Справочники.Контрагенты.НайтиПоКоду(КодПоставщика);
    ИмяФайлаПриемника = "C:\Остатки_склада_ДиаДиск.xls"; 
	
	попытка
		ИмяФайлаИсточника = "http://dia-disk.ru/d/51959/d/ostatki--kronprinz-mefroyasht.xls"; 
    	КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
	 Исключение//01.02.2019
		ВызватьИсключение строка(ДиаДиск)+": Не существует файл: "+ИмяФайлаИсточника;
	КонецПопытки;
		
	Ex = Новый COMObject("Excel.Application");
    Ex.Workbooks.Open(ИмяФайлаПриемника);
	
    Ex.Visible = 1;    
    ТекЛист=Ex.WorkSheets(1);
    КолС=ТекЛист.UsedRange.SpecialCells(11).Row;
	
	ТЗ = ПолучитьТабл();
	
	ТзНеНашли = Новый ТаблицаЗначений;
	ТзНеНашли.Колонки.Добавить("Номенклатура");
	ТзНеНашли.Колонки.Добавить("Артикул");
	
	Для Ячейка = 3 по КолС Цикл
		Если СокрЛП(ТекЛист.Cells(Ячейка,1).Value) <> "" Тогда
			Артикул = СокрЛП(ТекЛист.Cells(Ячейка,1).Value);
			Артикул = СтрЗаменить(Артикул,Символы.НПП,"");
			//Артикул = СтрЗаменить(Артикул,"V","");
			Артикул = СтрЗаменить(Артикул,"ОХ","");
			Артикул = СокрЛП(Артикул);

			Д = СтрДлина(Артикул);
			Если ЗначениеЗаполнено(Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул)) Тогда
		        Ном = ТЗ.Добавить();
		        Ном.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
			    //Ном.Цена = Число(?(СтрЗаменить(СокрЛП(ТекЛист.Cells(Ячейка,4).Value),Символы.НПП,"")="",0,СтрЗаменить(СокрЛП(ТекЛист.Cells(Ячейка,4).Value),Символы.НПП,"")));
		        Ном.Количество = Число(СтрЗаменить(СокрЛП(ТекЛист.Cells(Ячейка,5).Value),">",""));
				Ном.КодПоставщика=КодПоставщика;
			Иначе
				НовСтр = ТзНеНашли.Добавить();
				НовСтр.Номенклатура = СокрЛП(ТекЛист.Cells(Ячейка,2).Value);
				НовСтр.Артикул = Артикул;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТЗ.Свернуть("Номенклатура, КодПоставщика","Количество");
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(ТзНеНашли);
	ИначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(ТЗ, ДиаДиск);
	Иначе
		ЗагрузитьОстаткиВРегистр(ТЗ, ДиаДиск);
		СоздатьЗадачуДляРуководителяНомГр("00077", ДиаДиск, ТЗ.Количество(), ТзНеНашли); //Штампованные Европа
 	КонецЕсли;
	
	Ex.Application.Quit();
    Ex = неопределено;
	
КонецПроцедуры

Процедура ЗагрузитьОстаткиHAYESLEMMERZ(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт
	КодПоставщика= "П005784";
	HAYESLEMMERZ = Справочники.Контрагенты.НайтиПоКоду(КодПоставщика);
	ФайлИсточник = "Остатки.xls";
	ФайлПриемник = "C:\Остатки_склада_HAYESLEMMERZ.xls";
	попытка
	врФТП = Новый FTPСоединение("yst.ru",,"dc140403_shinkauc", "dT7cZxUk",, Истина, 30);
	врФТП.Получить(ФайлИсточник, ФайлПриемник);
 	Исключение//01.02.2019
		ВызватьИсключение строка(HAYESLEMMERZ)+": Не существует файла FTP: "+ФайлИсточник;
	КонецПопытки;
	
	Ex = Новый COMObject("Excel.Application");
    Ex.Workbooks.Open(ФайлПриемник);
	
    Ex.Visible = 1;    
    ТекЛист=Ex.WorkSheets(1);
    КолС=ТекЛист.UsedRange.SpecialCells(11).Row;
	
	ТЗ = ПолучитьТабл();
	
	ТзНеНашли = Новый ТаблицаЗначений;
	ТзНеНашли.Колонки.Добавить("Номенклатура");
	ТзНеНашли.Колонки.Добавить("Артикул");
	
	Для Ячейка = 4 по КолС Цикл
		Если СокрЛП(ТекЛист.Cells(Ячейка,1).Value) <> "" Тогда
			Артикул = СокрЛП(СтрЗаменить(ТекЛист.Cells(Ячейка,2).Value,Символы.НПП,""));
			товар = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
			Если ЗначениеЗаполнено(товар) Тогда
		        Ном = ТЗ.Добавить();
		        Ном.Номенклатура =товар;
				Ном.КодПоставщика=КодПоставщика;
		        Попытка
		            Ном.Количество = Число(СокрЛП(ТекЛист.Cells(Ячейка,6).Value));
				Исключение
					Ном.Количество = 0;
				КонецПопытки;
			иначе
				НовСтр = ТзНеНашли.Добавить();
				НовСтр.Номенклатура = СокрЛП(ТекЛист.Cells(Ячейка,3).Value);
				НовСтр.Артикул = Артикул;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТЗ.Свернуть("Номенклатура, КодПоставщика","Количество");
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(ТзНеНашли);
	ИначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(ТЗ, HAYESLEMMERZ);
	Иначе
		ЗагрузитьОстаткиВРегистр(ТЗ, HAYESLEMMERZ);
		СоздатьЗадачуДляРуководителяНомГр("00013", HAYESLEMMERZ, ТЗ.Количество(), ТзНеНашли); //Грузовые диски
 	КонецЕсли;
	
	Ex.Application.Quit();
    Ex = неопределено;
КонецПроцедуры


Процедура ЗагрузитьОстаткиМишлен(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт
	КодПоставщика = "П002640";
	Мишлен = Справочники.Контрагенты.НайтиПоКоду(КодПоставщика);
	ИмяФайла = "C:\Остатки_склада_Мишлен.csv";

	Попытка
		Файл1 = "/CAI.csv";
		врФТП = Новый FTPСоединение("shop.tyreplus.ru",,"tempftpexchange", "af7aeDoo8baeyae",, Истина, 30);
	КолАртикул    = 1;
	КолКоличество = 2;
	ПерваяСтрока  = 1;			
	врФТП.Получить(Файл1, ИмяФайла);
	 Исключение//01.02.2019
		ВызватьИсключение строка(Мишлен)+": Не существует файла FTP: "+Файл1;
	КонецПопытки;
	
		ТекстовыйФайл = Новый Файл(ИмяФайла);
		Если ТекстовыйФайл.Существует() = Ложь Тогда
			Возврат;
		КонецЕсли;
		ПотокСтрок = Новый ТекстовыйДокумент();
		ПотокСтрок.Прочитать(ИмяФайла);
		
	ТЗ = ПолучитьТабл();
	ТзНеНашли = Новый ТаблицаЗначений;
	ТзНеНашли.Колонки.Добавить("Номенклатура");
	ТзНеНашли.Колонки.Добавить("Артикул");
	
	КоличествоСтрок = ПотокСтрок.КоличествоСтрок();

	Для Строка = ПерваяСтрока По КоличествоСтрок Цикл		
		СтрокаИзФайла = ПотокСтрок.ПолучитьСтроку(Строка);
		
		Если найти(СтрокаИзФайла,"LIQ") > 0 Тогда     //не грузим ликвидацию
			Продолжить;
		КонецЕсли;
		
		мас = РазложитьСтрокуВМассивПодстрок(СтрокаИзФайла,";");
		
		Артикул = мас[КолАртикул-1];
		
		Артикул = СтрЗаменить(Артикул,Символы.НПП,"");
		Д = СтрДлина(Артикул);
		Пока Д < 6 Цикл
			Артикул = "0"+Артикул;
			Д=Д+1;
		КонецЦикла;
		
		КоличествоСтр = мас[КолКоличество-1];

		Если КоличествоСтр ="" тогда
			Количество = 0;
		иначе //-------------------------------
			Попытка
				Количество = Число(КоличествоСтр);
			исключение
				Количество = 0;
			КонецПопытки;
		КонецЕсли;
		
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
		
		если ЗначениеЗаполнено(Номенклатура) и Количество > 0 Тогда
			Нов= ТЗ.Добавить();
			Нов.Номенклатура = Номенклатура;
			Нов.Количество = Количество;	
			Нов.КодПоставщика = КодПоставщика;
		ИначеЕсли ЗначениеНеЗаполнено(Номенклатура) Тогда
			Нов= ТзНеНашли.Добавить();
			//Нов.Номенклатура = Номенклатура;
			Нов.Артикул = Артикул;
		КонецЕсли;
		
	КонецЦикла;	
		
	ТЗ.Свернуть("Номенклатура,КодПоставщика","Количество");

        //+++( 26.01.2017 проверка на Базовую цену
	запрос1 = новый запрос;
	запрос1.Текст = "ВЫБРАТЬ
	                |	ТЗ.Номенклатура,
	                |	ТЗ.Количество,
	                |	ТЗ.КодПоставщика
	                |ПОМЕСТИТЬ ВТ_Товары
	                |ИЗ
	                |	&ТЗ КАК ТЗ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	Товары.Номенклатура,
	                |	Товары.Количество,
	                |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	                |	Товары.КодПоставщика
	                |ИЗ
	                |	ВТ_Товары КАК Товары
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних( ,
	                |				ТипЦен = &Базовая
	                |					И Номенклатура В (ВЫБРАТЬ вт.Номенклатура ИЗ ВТ_Товары КАК вт) ) КАК ЦеныНоменклатурыСрезПоследних
	                |		ПО Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	                |ГДЕ
									//шина дешевле 1 000р. ?! не бывает 
	                |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 1000
	                |	И ЦеныНоменклатурыСрезПоследних.Номенклатура.ВидТовара = Значение(Перечисление.ВидыТоваров.Шины) "; 
	запрос1.УстановитьПараметр("ТЗ",ТЗ);
	запрос1.УстановитьПараметр("Базовая", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") );   // 8 - Базовая
	ТЗ = запрос1.Выполнить().Выгрузить(); // Заменяем ТЗ
	//+++)

	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(ТзНеНашли);
	ИначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(ТЗ, Мишлен);
	Иначе
		ЗагрузитьОстаткиВРегистр(ТЗ, Мишлен);
	КонецЕсли;
	ТекстовыйФайл = неопределено;	
	
КонецПроцедуры

Процедура ЗагрузитьОстаткиКайлас(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт
	КодПоставщика = "95695";//17.07.2018 АВС регион П005499 >> Кайлас 95695
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(КодПоставщика); 

	ПроизводителиAVS = новый СписокЗначений;
	ПроизводителиAVS.Добавить(Справочники.Производители.НайтиПоКоду("3067"));
	ПроизводителиAVS.Добавить(Справочники.Производители.НайтиПоКоду("3556"));
	
	тзЦены=новый ТаблицаЗначений;
	тзЦены.Колонки.Добавить("Артикул",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(30)));
	тзЦены.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)));
	тзЦены.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
	тзЦены.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
	тзЦены.Колонки.Добавить("ШтрихКод",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(13)));
	
//----------------------------- Загрузка с HTTPS -------------------	
	попытка
		ФайлИсточник = "catalog_yarshintorg.xml";
		WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
		WinHttp.Open("GET","https://ahax.ru/_yarshintorg/"+ФайлИсточник,0);
		WinHttp.Send();
 	Исключение//01.02.2019
		ВызватьИсключение строка(Контрагент)+": Не существует файла HTTP: "+ФайлИсточник;
	КонецПопытки;
		
	Ответ = WinHttp.ResponseText();
	ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлРезультата,"UTF-8 ");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлРезультата);
	
	Предложения = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Аксы = Предложения.acc; //только аксы
	
	Для каждого акс из Аксы Цикл
		Если ТипЗнч(акс.article)=Тип("Строка") Тогда   //если артикул пустой, то пропускаем
			стр = тзЦены.Добавить();
			стр.Артикул = СокрЛП(акс.article);
			стр.Наименование = СокрЛП(акс.name);
			стр.Цена = Число(акс.price);
			стр.Количество = Число(акс.restore);
			стр.ШтрихКод =акс.barcode; //	"4627103780606"	Строка
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	УдалитьФайлы(ФайлРезультата);
	WinHttp = Неопределено;
//====================================================================

	ТзНеНашли = Новый ТаблицаЗначений;
	ТзНеНашли.Колонки.Добавить("Номенклатура");
	ТзНеНашли.Колонки.Добавить("Артикул");
	
	для каждого стр из тзЦены Цикл
		товар = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",стр.Артикул);
		Если НЕ ЗначениеЗаполнено(товар) Тогда
			Нов = ТзНеНашли.Добавить();
			Нов.Номенклатура = стр.Артикул;
			Нов.Артикул = Стр.Наименование;
		КонецЕсли;
	КонецЦикла;
	
	СписокНомГр = Новый СписокЗначений;
	СписокПапок = Новый СписокЗначений;
	СписокНоменклатуры = Новый СписокЗначений;
	ПолучитьСпискиОграниченийПоАксам(СписокНомГр, СписокПапок, СписокНоменклатуры, Контрагент); //+++ 24.09 - 10.12.2018
		
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	втЦены.Артикул,
	|	втЦены.Наименование,
	|	втЦены.цена,
	|	втЦены.Количество
	|ПОМЕСТИТЬ втЦены
	|ИЗ
	|	&втЦены КАК втЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Контрагент,
	|	втЦены.Артикул,
	|	втЦены.цена,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	втЦены.Наименование,
	|	Номенклатура.Производитель,
	|	втЦены.Количество КАК Остаток
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	втЦены КАК втЦены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (втЦены.Артикул ПОДОБНО Номенклатура.Артикул)
	|ГДЕ
	|	Номенклатура.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.Аксессуары)
	|	И Номенклатура.Производитель В (&ПроизводителиAVS)
//+++ 24.09.2018 ПолучитьСпискиОграниченийПоАксам	
	|   //НомГр И не Номенклатура.НоменклатурнаяГруппа В(&СписокНомГр)
	|   //Папки И не Номенклатура.ссылка В иерархии(&СписокПапок)
	|   //Номен И не Номенклатура.ссылка В(&СписокНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Контрагент,
	|	вт.Артикул,
	|	вт.цена,
	|	вт.Номенклатура,
	|	вт.Наименование,
	|	вт.Производитель,
	|	вт.Остаток как количество,
	|	"""" как КодПоставщика
	|ИЗ
	|	вт КАК вт
	|ГДЕ
	|	НЕ вт.Номенклатура В
	|				(ВЫБРАТЬ
	|					А.Номенклатура
	|				ИЗ
	|					(ВЫБРАТЬ
	|						вт.Номенклатура КАК Номенклатура,
	|						КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт.Наименование) КАК Наименование
	|					ИЗ
	|						вт КАК вт
	|					СГРУППИРОВАТЬ ПО
	|										вт.Номенклатура
	|					) КАК А
	|				ГДЕ
	|					А.Наименование > 1)";
	Запрос.УстановитьПараметр("втЦены",тзЦены);
	Запрос.УстановитьПараметр("ПроизводителиAVS",ПроизводителиAVS);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	
	Если СписокНомГр.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//НомГр","");
		Запрос.УстановитьПараметр("СписокНомГр",СписокНомГр);
	КонецЕсли;
	
	Если СписокПапок.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//Папки","");
		Запрос.УстановитьПараметр("СписокПапок",СписокПапок);
	КонецЕсли;
	
	Если СписокНоменклатуры.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//Номен","");
		Запрос.УстановитьПараметр("СписокНоменклатуры",СписокНоменклатуры);
	КонецЕсли;

	ТабЦеныОстатки = запрос.Выполнить().Выгрузить();
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(ТзНеНашли);
	иначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(ТабЦеныОстатки, Контрагент);
	Иначе
		ЗагрузитьОстаткиВРегистр(ТабЦеныОстатки,Контрагент, ЛОЖЬ); //НЕ проверять цены!
		
		#Если Клиент Тогда
			Состояние("Запись в таблицу ОстаткиНоменклатурыКонтрагентов - завершена.");
			сообщить(строка(ТекущаяДата())+" запись в таблицу ОстаткиНоменклатурыКонтрагентов "+строка(ТабЦеныОстатки.Количество())+" элементов - завершена.");
			Состояние("Установка цен...");
		#КонецЕсли
		
		ЗагрузитьЦеныВРегистр(ТабЦеныОстатки,Контрагент);
		ЗагрузитьЦеныВДокумент(ТабЦеныОстатки,Контрагент);
		
		#Если Клиент Тогда
			Состояние("Установка цен завершена.");
		#КонецЕсли
	КонецЕсли;
	
Конецпроцедуры //Кайлас

Процедура ЗагрузитьОстаткиБерг(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт
   КодПоставщика = "П000727";
	Берг   = справочники.Контрагенты.НайтиПоКоду(КодПоставщика);
   	Папка1 = справочники.Номенклатура.НайтиПоКоду("9270789"); //АвтоМАСЛА
	
  ФайлРезультата = "c:\berg_yar.mxl";
	
   масТов = ПолучитьСписТов( Папка1, Берг); //10.12.2018

  Табл2 = новый ТаблицаЗначений;
   Табл2.Колонки.Добавить("Номенклатура", новый ОписаниеТипов("СправочникСсылка.Номенклатура") );  //17.05.2018 
   Табл2.Колонки.Добавить("Количество");
   
    КЧ = Новый КвалификаторыЧисла(15,2);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);

   Табл2.Колонки.Добавить("Цена", ОписаниеТиповЧ );
   Табл2.Колонки.Добавить("Артикул");
   Табл2.Колонки.Добавить("Производитель"); //+++ 22.06.2018 - ЭТО СТРОКА!
   Табл2.Колонки.Добавить("КодПоставщика");
   Табл2.Колонки.Добавить("Код");
   Табл2.Колонки.Добавить("Наименование");
	
Если Печатать = Ложь и ПроверитьЦены = Ложь  тогда 
	для i=0 по масТов.Количество()-1 цикл
		
		товар = масТов[i];
		
		стр2 = Табл2.Добавить();
		стр2.КодПоставщика = КодПоставщика;
		стр2.Номенклатура = Товар;
		
		стр2.Артикул = сокрЛП(товар.Артикул);
		стр2.Производитель =товар.Производитель; //+++ 22.06 - 02.08.2018  GENERALMOTORS >> "GENERAL MOTORS"

		рез = загрузитьТоварБерг( стр2.Артикул , СокрЛП(товар.Производитель.ПолноеНаименование) );  //02.08.2018
		
	    стр2.Количество = рез.Остаток;
	    стр2.Цена = рез.Цена;

		//+++ 21.05.2018 для регСв.НоменклатураКонтрагентов
		стр2.Код = рез.Код;
		стр2.Наименование = рез.Наименование;
		
	КонецЦикла;

 ЗаписатьНоменклатуруБерга(Табл2);//+++ 21.05.2018 
   
No = Табл2.Количество(); i=0;
	пока i<Табл2.Количество() цикл
		если Табл2[i].Количество=0 тогда  //15.05.2018
			Табл2.Удалить(i);
		иначе
			i=i+1;
		КонецЕсли;	
	КонецЦикла;
N1 = Табл2.Количество(); 
	
#Если Клиент тогда
	Сообщить("Будет загружено "+строка(N1)+" из "+строка(No)+"("+формат(?(No=0,0,N1*100/No),"ЧДЦ=0")+"%) ненулевых строк");
#КонецЕсли

Построитель=Новый ПостроительОтчета;
	Построитель.ИсточникДанных=Новый ОписаниеИсточникаДанных(Табл2);
	ТабДокумент = Новый ТабличныйДокумент;
	Построитель.Вывести(ТабДокумент);
ТабДокумент.Записать(ФайлРезультата, ТипФайлаТабличногоДокумента.MXL);

иначе
	ТабДокумент = Новый ТабличныйДокумент;
    ТабДокумент.Прочитать(ФайлРезультата);
	
	Построитель=Новый ПостроительОтчета;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДокумент.Область(4, 2, ТабДокумент.ВысотаТаблицы-2, ТабДокумент.ШиринаТаблицы));
	Построитель.Выполнить();
    табл1 = Построитель.Результат.Выгрузить();
	
	для каждого стр1 из табл1 цикл
		стр2 = табл2.Добавить();
		стр2.Номенклатура = справочники.Номенклатура.НайтиПоНаименованию(стр1.Номенклатура);
		стр2.Количество = ?(стр1.Количество="",0, стр1.Количество);
		стр2.Цена = ?(стр1.Цена="", 0, стр1.Цена);
		стр2.Производитель =  стр2.Номенклатура.Производитель; //02.08.2018
	КонецЦикла;

КонецЕсли;
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(Табл2);
	ИначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(Табл2, Берг);
	Иначе
	//----------------нужен код поставщика?-----------------	
	табл1 = Табл2.Скопировать();
	  ЗагрузитьОстаткиВРегистр(табл1 , Берг, ЛОЖЬ);
	  
	табл1 = Табл2.Скопировать();
	  ЗагрузитьЦеныВРегистр(Табл1, Берг);
	  
	  //---------------нужен производитель--------------------  
	табл1 = Табл2.Скопировать();
	  ЗагрузитьЦеныВДокумент(Табл1, Берг);  //17.05 - есть таблица
    КонецЕсли;
  
КонецПроцедуры

Процедура ЗагрузитьОстаткиАлькор(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт
	КодПоставщика = "П003301";
	Алькор = Справочники.Контрагенты.НайтиПоКоду(КодПоставщика);
	
	Файл = "/"+ Строка(Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")) +".txt";
	ФайлПриемник = "C:\Остатки_склада_Алькор.txt";
	
	Попытка
		врФТП = Новый FTPСоединение("yst.ru",,"dc140403_alkor", "lXaqsaHc",, Истина, 30);
		врФТП.Получить(Файл, ФайлПриемник);
	Исключение
		ВызватьИсключение Алькор+" ошибка получения файла FTP: "+Файл;
	КонецПопытки;
	
	ТекстовыйФайл = Новый Файл(ФайлПриемник);
	Если ТекстовыйФайл.Существует() = Ложь Тогда
		ВызватьИсключение "Нет файла "+ФайлПриемник;
	КонецЕсли;
	
	ПотокСтрок = Новый ТекстовыйДокумент();
	ПотокСтрок.Прочитать(ФайлПриемник);
	
	ТЗ =ПолучитьТабл();
	ТзНеНашли = Новый ТаблицаЗначений;
	ТзНеНашли.Колонки.Добавить("Номенклатура");
	ТзНеНашли.Колонки.Добавить("Артикул");
	
	КоличествоСтрок = ПотокСтрок.КоличествоСтрок();
		
	Для Строка = 1 По КоличествоСтрок Цикл		
		СтрокаИзФайла = ПотокСтрок.ПолучитьСтроку(Строка);
		
		позиция = Найти(СтрокаИзФайла,";");
		Артикул = СокрЛП(Лев(СтрокаИзФайла,позиция-1));
		Попытка
			Количество = Число(СокрЛП(СтрЗаменить(СтрокаИзФайла,Лев(СтрокаИзФайла,позиция),"")));
		исключение
			Количество = 0;
		КонецПопытки;
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
		Если ЗначениеЗаполнено(Номенклатура) и Количество > 0 Тогда
			Нов=ТЗ.Добавить();
			Нов.Номенклатура  = Номенклатура;
			Нов.Количество    = Количество;
			Нов.КодПоставщика = КодПоставщика;
		Иначе
			Нов= ТзНеНашли.Добавить();
			//Нов.Номенклатура = Номенклатура;
			Нов.Артикул = Артикул;
		КонецЕсли;
	КонецЦикла;	
	
	ТЗ.Свернуть("Номенклатура, КодПоставщика","Количество");
	
	Если ТЗ.Количество() < 10 Тогда
		Возврат;
	КонецЕсли;
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(ТзНеНашли);
	иначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(ТЗ, Алькор);
	иначе	
		ЗагрузитьОстаткиВРегистр(ТЗ, Алькор, ЛОЖЬ);  //только Остатки! без проверки цен!
	КонецЕсли;
	ТекстовыйФайл = неопределено;	
КонецПроцедуры

Процедура ЗагрузитьОстаткиITR(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт
	КодПоставщика = "90342";
	ITR = Справочники.Контрагенты.НайтиПоКоду(КодПоставщика);
	
	Файл = "rests.xml";
	ФайлПриемник = "C:\Остатки_склада_ITR.xml"; 
	попытка
		врФТП = Новый FTPСоединение("yst.ru",,"dc140403_itr", "yokohama123",, Истина, 30);
		врФТП.Получить(Файл, ФайлПриемник);
	Исключение //01.02.2019
		ВызватьИсключение строка(ITR)+" ошибка получения файла FTP: "+Файл;
	КонецПопытки;	
	
	ТЗ = ПолучитьТабл();
	ТзНеНашли = Новый ТаблицаЗначений;
	ТзНеНашли.Колонки.Добавить("Номенклатура");
	ТзНеНашли.Колонки.Добавить("Артикул");
	
	Чтение = Новый ЧтениеXML;
 	Чтение.ОткрытьФайл(ФайлПриемник);
    ИмяТекУзла = "";
	ИмяПредУзла = "";
	Склад = Ложь;  Yok = Ложь;
	
	Пока Чтение.Прочитать() Цикл 
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяПредПредУзла = ИмяПредУзла;
			ИмяПредУзла = ИмяТекУзла;
			ИмяТекУзла = Чтение.Имя;	
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст 
				//и ИмяПредПредУзла = "storages"   //29.01.2018 - НЕ НАДО!
				и ИмяТекУзла = "name" Тогда
			Если Чтение.Значение = "Ямкино" Тогда
				Склад	= Истина;
			Иначе
				Склад	= Ложь;
			КонецЕсли;
			
		ИначеЕсли ИмяТекУзла = "name" Тогда
			
			Наименование = Чтение.Значение;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "article" Тогда
			Артикул = Чтение.Значение;
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Чтение.Значение);   
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "brand" Тогда
			
			Если Найти(Чтение.Значение,"Yokohama") > 0 Тогда
				Yok	= Истина;
			Иначе
				Yok	= Ложь;
			КонецЕсли;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "quantity" и Склад и Yok Тогда //+++ 29.01.2018 только 1 склад!
			
			Кол = Число(СтрЗаменить(Строка(Чтение.Значение),">",""));
			
			Если  ЗначениеЗаполнено(Номенклатура) Тогда
				Нов = ТЗ.Добавить();
				Нов.Номенклатура  = Номенклатура;
				Нов.Количество    = Кол;
				Нов.КодПоставщика = КодПоставщика;
			Иначе
				Нов = ТзНеНашли.Добавить();
				Нов.Номенклатура = Наименование;
				Нов.Артикул = Артикул;
			КонецЕсли;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ИмяТекУзла = "";
 		КонецЕсли;	
	КонецЦикла;	
	
	ТЗ.Свернуть("Номенклатура, КодПоставщика","Количество");
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(ТзНеНашли);
	ИначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(ТЗ, ITR);
	Иначе
		ЗагрузитьОстаткиВРегистр(ТЗ, ITR, ЛОЖЬ);//без проверки цен
	КонецЕсли;
		
КонецПроцедуры

  
Процедура ЗагрузитьОстаткиШинсервис(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт
	КодПоставщика = "92498";
	КонтрагентШинсервис = справочники.Контрагенты.НайтиПоКоду(КодПоставщика); //Шинсервис (Москва)

//1)--------------------Загрузка с сайта---------------
	ИмяСайта = "www.shinservice.ru";
	ИмяСервиса = "/xml/shinservice-b2b.xml?id=8519521";
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
 
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "text/xml");    // ; charset=utf-8
	попытка
	 http = новый HTTPСоединение(ИмяСайта);
	 http.Получить( новый httpЗапрос(ИмяСервиса,ЗаголовокHTTP), ИмяФайлаРезультата);
	Исключение //01.02.2019
		ВызватьИсключение строка(КонтрагентШинсервис)+" ошибка получения файла с сайта: "+ИмяСайта;
	КонецПопытки;	 
	#Если Клиент Тогда	 
		 сообщить("Получен файл "+ИмяФайлаРезультата);
	#КонецЕсли	 
	
	ТаблЗнач1 = новый ТаблицаЗначений;
	
	КС = Новый КвалификаторыСтроки(20);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	ТаблЗнач1.Колонки.Добавить("sku", ОписаниеТиповС);
	
	КЧ = Новый КвалификаторыЧисла(15,0); // целое
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	ТаблЗнач1.Колонки.Добавить("stock", ОписаниеТиповЧ);
	//ТаблЗнач1.Колонки.Добавить("price", ОписаниеТиповЧ);
		
//2)-------------------------разбор файла------------------------------	
	ФайлXML = Новый ЧтениеXML;
	ФайлXML.ОткрытьФайл(ИмяФайлаРезультата);
	Пока ФайлXML.Прочитать() Цикл
	
	Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		если файлXML.Имя <> "tire" Тогда
			продолжить;
		КонецЕсли;	
		если файлXML.Имя = "wheels" Тогда //не нужны диски
			прервать;
		КонецЕсли;	
	 стр2 = ТаблЗнач1.Добавить();
	  	Пока файлXML.ПрочитатьАтрибут() Цикл 
			для каждого столб1 из таблЗнач1.Колонки Цикл
				если столб1.Имя = файлXML.Имя Тогда 
				стр2[столб1.Имя] = файлXML.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	КонецЦикла;
	N = ТаблЗнач1.Количество();	
	#Если Клиент Тогда	 
	сообщить("Прочитано "+строка(N)+" строк");
	#КонецЕсли	 
//3)==============загрузка в 1С==================================================================
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	Табл1.sku,
	                |	Табл1.stock
	                |ПОМЕСТИТЬ ВТ_табл
	                |ИЗ
	                |	&Табл КАК Табл1
	                |ГДЕ
	                |	Табл1.sku <> """"
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
					//|	&КонтрагентШС КАК Контрагент,
					//|	&Пустое КАК Подразделение,
	                //|	Табл.stock КАК Остаток,
	               |	Номенклатура.Ссылка КАК Номенклатура,
				   |	Номенклатура.Артикул,
	                |	Табл.stock КАК Количество,
					|   """" КАК КодПоставщика
	                |ИЗ
	                |	ВТ_табл КАК Табл
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |			спр.Ссылка КАК Ссылка,
	                |			спр.Артикул КАК Артикул
	                |		ИЗ
	                |			Справочник.Номенклатура КАК спр
	                |		ГДЕ
	                |			спр.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)
	                |			И спр.Артикул В (ВЫБРАТЬ вт.sku
	                |								ИЗ	ВТ_табл КАК вт)) КАК Номенклатура
	                |		ПО Табл.sku = Номенклатура.Артикул
	                |ГДЕ
	                |	НЕ Номенклатура.Ссылка ЕСТЬ NULL ";
	 
	 Запрос.УстановитьПараметр("КонтрагентШС", КонтрагентШинсервис);
	 Запрос.УстановитьПараметр("Пустое", справочники.Контрагенты.ПустаяСсылка() );
	 Запрос.УстановитьПараметр("Табл", ТаблЗнач1 );
	 
	 Результат = Запрос.Выполнить();
	 ТЗ = Результат.Выгрузить();
	 
	#Если Клиент Тогда
	сообщить("Найдено "+строка(ТЗ.Количество())+" из "+строка(N)+" строк");
	#КонецЕсли	

//===================что не нашли===========================================================	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	таблИзФайла.sku
	                |ПОМЕСТИТЬ ВТ_изФайла
	                |ИЗ
	                |	&таблИзФайла КАК таблИзФайла
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	Табл.Артикул КАК Артикул2
	                |ПОМЕСТИТЬ ВТ_табл
	                |ИЗ
	                |	&Табл КАК Табл
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	табл_ИзФайла.sku КАК Артикул,
	                |	"""" КАК Номенклатура,
	                |	Табл.Артикул2
	                |ИЗ
	                |	ВТ_изФайла КАК табл_ИзФайла
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_табл КАК Табл
	                |		ПО табл_ИзФайла.sku = Табл.Артикул2
	                |ГДЕ
	                |	Табл.Артикул2 ЕСТЬ NULL ";
	 Запрос.УстановитьПараметр("таблИзФайла", ТаблЗнач1);
	 Запрос.УстановитьПараметр("Табл", ТЗ);
	 
	 Результат = Запрос.Выполнить();
	 ТзНеНашли = Результат.Выгрузить();   
   
//===============================================================================	
	ТЗ.Свернуть("Номенклатура, КодПоставщика","Количество");
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(ТзНеНашли);
	ИначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(ТЗ, КонтрагентШинсервис);
	Иначе
		ЗагрузитьОстаткиВРегистр(ТЗ, КонтрагентШинсервис);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗагрузитьОстаткиСеверАвто(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт
	КодПоставщика = "00282";
	СеверАвто = Справочники.Контрагенты.НайтиПоКоду(КодПоставщика);
	попытка
		WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
		WinHttp.Open("GET","http://webmim.svrauto.ru/api/v1/catalog/unload?access-token=hWF5ofizIMLs1EuFdDvAnf55XCpyG6kz&format=xml",0);
		WinHttp.Send();
	Исключение //01.02.2019
		ВызватьИсключение строка(СеверАвто)+" ошибка получения файла с сайта: webmim.svrauto.ru";
	КонецПопытки;	 
	
	Ответ = WinHttp.ResponseText();
	ФайлРезультата = "C:\Остатки_Север_Авто.xml";
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлРезультата,"UTF-8 ");

	ТЗ = ПолучитьТабл();
	ТзНеНашли = Новый ТаблицаЗначений;
	ТзНеНашли.Колонки.Добавить("Номенклатура");
	ТзНеНашли.Колонки.Добавить("Артикул");
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл("C:\Остатки_Север_Авто.xml");
    ИмяТекУзла = "";
	ИмяПредУзла = "";
	Пока Чтение.Прочитать() Цикл 
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяПредУзла = ИмяТекУзла;
			ИмяТекУзла = Чтение.Имя;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "NNOMMODIF" Тогда
	        КодПоставщика = Чтение.Значение;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "SMODIFNAME" Тогда
	        Наименование = Чтение.Значение;
				
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "SMNFCODE" Тогда
			
			Артикул = Чтение.Значение;
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул); 
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "TERRITORY_NAME" Тогда
	        Склад = Чтение.Значение;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "NREST" Тогда                          
			
			Попытка 
			    Кол = Число(СтрЗаменить(Строка(Чтение.Значение),">",""));
			Исключение
				Кол = 0;
			КонецПопытки;
			
			Если ЗначениеЗаполнено(Номенклатура) и Кол > 0 Тогда
				Нов = ТЗ.Добавить();
				Нов.Номенклатура = Номенклатура;
				Нов.Количество = Кол;
				Нов.КодПоставщика = КодПоставщика+";"+Склад;
			ИначеЕсли Кол > 0 Тогда	
				Нов = ТзНеНашли.Добавить();
				Нов.Номенклатура = Наименование;
				Нов.Артикул = Артикул;
			КонецЕсли;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ИмяТекУзла = "";
 		КонецЕсли;	
	КонецЦикла;	
	
	ТЗ.Свернуть("Номенклатура, КодПоставщика","Количество");
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(ТзНеНашли);
	ИначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(ТЗ, СеверАвто);
	Иначе
		ЗагрузитьОстаткиВРегистр(ТЗ, СеверАвто);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗагрузитьОстаткиПирелли(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт	
	КодПоставщика= "92769";
	Пирелли = Справочники.Контрагенты.НайтиПоКоду(КодПоставщика);
	
	// 22.01.2019 ---  загрузка текущего прайса - через почту... 
	текДата = НачалоДня(ТекущаяДата()); // последний параметр - чистое имя!
	путьЗагрузки  = "\\sigma\D$\1C\Pirelli\";
	списокФайлов  = яштЗаказыСПочты.ПолучитьФайлыСПочты("suppliers@yst.ru", путьЗагрузки, "ContactCenter.Russia@pirelli.com", ЛОЖЬ, текДата, КонецДня(текДата), ЛОЖЬ ); 
	
	ИмяФайлаЗагрузки = "-Unlicensed-Stock_Pirelli.xls";  //01.02.2019 после конвертации!   
	
	Если списокФайлов.Количество()=0 тогда  
		// утром надо грузить вчерашние !
		
	иначеЕсли списокФайлов.Количество()=1 тогда//ДА! есть новый прайс!
		
		ИмяФайла = списокФайлов[0].Значение;
//		дд = формат(день(текДата),"ЧЦ=2; ЧВН="); //текущий прайс!
//		мм = формат(месяц(текДата),"ЧЦ=2; ЧВН=");
//		гг = прав( формат(год(текДата),"ЧЦ=4; ЧГ=0"), 2);
//		ИмяФайла  = "FREE_Stock_Pirelli "+дд+"_"+мм+"_"+гг+"_Summer_Winter - RUS.XLSX";

	//-----------требуется конвертация!-----------------		
		попытка //01.02.2018
			ИмяФайла2 = "Stock_Pirelli.XLSX"; //
			КопироватьФайл( путьЗагрузки+ИмяФайла, путьЗагрузки+ИмяФайла2 ); 
			ЗапуститьПриложение("explorer "+путьЗагрузки+"Pirelli_Convert.bat"); // через проводник!
			//ИмяФайлаЗагрузки = "-Unlicensed-Stock_Pirelli.xls";
		исключение
		    ВызватьИсключение "Ошибка при Конвертации файла Пирелли: XLSX -> XLS!";
		КонецПопытки;
	КонецЕсли;	
	
	МаксНомЛиста=2;
	ФайлПриемник = путьЗагрузки+ИмяФайлаЗагрузки; //
	
	файл1 = новый Файл( ФайлПриемник ); //01.02.2019 проверка наличия!
	Если НЕ файл1.Существует() тогда
		ВызватьИсключение "Пирелли: Не существует файла "+ФайлПриемник;
	КонецЕсли;
	
	Ex = Новый COMObject("Excel.Application");
    Ex.Workbooks.Open(ФайлПриемник);
	
	ТЗ = получитьТабл();
	ТзНеНашли = Новый ТаблицаЗначений;
	ТзНеНашли.Колонки.Добавить("Номенклатура");
	ТзНеНашли.Колонки.Добавить("Артикул");

    Ex.Visible = 1;  
для номЛист=1 по МаксНомЛиста цикл //2 листа !!!
    ТекЛист=Ex.WorkSheets(номЛист);
    КолС=ТекЛист.UsedRange.SpecialCells(11).Row;
		
	Для Ячейка = 10 по КолС Цикл
		Если СокрЛП(ТекЛист.Cells(Ячейка,2).Value) <> "" Тогда
			Артикул = СокрЛП(ТекЛист.Cells(Ячейка,2).Value);
			Артикул = СтрЗаменить(Артикул,Символы.НПП,"");
			Д = СтрДлина(Артикул);
			товар = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
			Если ЗначениеЗаполнено(товар) Тогда
				
				Кол1  = СтрЗаменить(СокрЛП(ТекЛист.Cells(Ячейка,10).Value),">","");
				цена1 = ""; //без цены!
//				цена1 = СтрЗаменить(СокрЛП(ТекЛист.Cells(Ячейка,4).Value),Символы.НПП,"");
		        Ном = ТЗ.Добавить();
		        Ном.Номенклатура 	= товар;
				Ном.КодПоставщика 	= КодПоставщика;
		        Ном.Количество 		= Число(Кол1);
				Ном.Цена 			= ?(цена1="", 0, Число(цена1) );
			Иначе
				НовСтр = ТзНеНашли.Добавить();
				НовСтр.Номенклатура = СокрЛП(ТекЛист.Cells(Ячейка,3).Value);
				НовСтр.Артикул = Артикул;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецЦикла;//--------2 листа !!!	
	ТЗ.Свернуть("Номенклатура, КодПоставщика","Количество");
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли(ТзНеНашли);
	ИначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(ТЗ, Пирелли);
	Иначе
		ЗагрузитьОстаткиВРегистр(ТЗ, Пирелли, ЛОЖЬ); // БЕЗ проверки цен!
	КонецЕсли;
	
	Ex.Application.Quit();
	Ex = неопределено;
	
КонецПроцедуры

//выключены из загрузок уже давно!
Процедура ЗагрузитьОстаткиПауэр(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт
	КодПоставщика = "00128";
	Пауэр = Справочники.Контрагенты.НайтиПоКоду(КодПоставщика);
	попытка
		WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
		WinHttp.Open("GET","https://b2b.pwrs.ru/export_data/Tires.xml",0);
		WinHttp.Send();
	Исключение //01.02.2019
		ВызватьИсключение строка(Пауэр)+" ошибка получения файла с сайта: b2b.pwrs.ru";
	КонецПопытки;
	Ответ = WinHttp.ResponseText();
	ФайлРезультата = "C:\ШИны_Пауэр.xml";
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлРезультата,"UTF-8 ");
	
	
	WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
	WinHttp.Open("GET","https://b2b.pwrs.ru/export_data/rest_moscow.xml",0);
	WinHttp.Send();
	
	Ответ = WinHttp.ResponseText();
	ФайлРезультата = "C:\Остатки_Пауэр.xml";
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлРезультата,"UTF-8 ");
	
	ТЗ = ПолучитьТабл();
	
	ВсяНоменклатура = Новый ТаблицаЗначений;
	ВсяНоменклатура.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	ТзНеНашли = Новый ТаблицаЗначений;
	ТзНеНашли.Колонки.Добавить("Номенклатура");
	ТзНеНашли.Колонки.Добавить("Артикул");
	
	Чтение = Новый ЧтениеXML;

	Чтение.ОткрытьФайл("C:\ШИны_Пауэр.xml");
    ИмяТекУзла = "";
	ИмяПредУзла = "";
	Пока Чтение.Прочитать() Цикл 
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяПредУзла = ИмяТекУзла;
			ИмяТекУзла = Чтение.Имя;
	    ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "cae" Тогда
			Артикул = Чтение.Значение; 
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "brand" Тогда
			Если Чтение.Значение = "Nokian" или Чтение.Значение = "Bridgestone" Тогда
				Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
				Если ЗначениеЗаполнено(Номенклатура) и (Номенклатура.Производитель = Справочники.Производители.НайтиПоКоду("16") или Номенклатура.Производитель = Справочники.Производители.НайтиПоКоду("5")) Тогда
					
					нов = ВсяНоменклатура.Добавить();
					нов.Номенклатура = Номенклатура;
					
				КонецЕсли;
			КонецЕсли;
		иначе
			ИмяТекУзла = "";
 		КонецЕсли;	
	КонецЦикла;	
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл("C:\Остатки_Пауэр.xml");
    ИмяТекУзла = "";
	ИмяПредУзла = "";
	Пока Чтение.Прочитать() Цикл 
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяПредУзла = ИмяТекУзла;
			ИмяТекУзла = Чтение.Имя;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "cae" Тогда
	        Артикул = Чтение.Значение;
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
				
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "rest_mkrs" Тогда               
			
			Попытка 
			    Кол = Число(СтрЗаменить(Строка(Чтение.Значение),"более ",""));
			Исключение
				Кол = 0;
			КонецПопытки;
			
			Отбор = Новый Структура();
            Отбор.Вставить("Номенклатура",Номенклатура);
			
			Стр = ВсяНоменклатура.НайтиСтроки(Отбор);
			
			если Стр.Количество()>0 Тогда
				Загружать = Истина;
			иначе
				Загружать = Ложь;
			КонецЕсли;
			
			Если Кол > 0 и Загружать Тогда
				Нов = ТЗ.Добавить();
				Нов.Номенклатура = Номенклатура;
				Нов.Количество = Кол;
				Нов.КодПоставщика = КодПоставщика;
			ИначеЕсли Кол > 0 Тогда	
				Нов = ТзНеНашли.Добавить();
				//Нов.Номенклатура = Наименование;
				Нов.Артикул = Артикул;
			КонецЕсли;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ИмяТекУзла = "";
 		КонецЕсли;	
	КонецЦикла;
	
	ТЗ.Свернуть("Номенклатура,КодПоставщика","Количество");
	
	Если Печатать Тогда
		ПоказатьТоЧтоНеНашли( ТзНеНашли );		
	иначеЕсли ПроверитьЦены Тогда
		ПроверитьЦены(ТЗ, Пауэр);
	Иначе
		ЗагрузитьОстаткиВРегистр(ТЗ, Пауэр);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗагрузитьОстаткиАйсАвто(Печатать = Ложь, ПроверитьЦены = Ложь) Экспорт
	ЗагрузкаСFTP = Истина;	
	КодПоставщика = "91885";
//+++ 19.11.2014
	АйсАвто = справочники.Контрагенты.НайтиПоКоду(КодПоставщика);	
	ИмяФайлаПриемника = Константы.ПутьКФайлам.получить()+"\Айс-Авто\UpdateAmounts.xml";
	
Если ЗагрузкаСFTP Тогда		
	   #Если Клиент Тогда
			Состояние("Идет подключение к FTP...");
		#КонецЕсли
	попытка	
		FTP = Новый FTPСоединение("188.225.16.76",,"dc140403_ice","OQ24ZVFn",, Истина, 30); // 30 сек
		ИмяФайлаИсточника = "FTP://188.225.16.76/UpdateAmounts.xml";
	    #Если Клиент Тогда
			Состояние("Идет копирование файла с FTP...");
		#КонецЕсли
		 FTP.Получить("UpdateAmounts.xml", имяФайлаПриемника);
	 Исключение //01.02.2019
		ВызватьИсключение строка(АйсАвто)+" ошибка получения файла FTP: UpdateAmounts.xml";
	КонецПопытки;
КонецЕсли;

	#Если Клиент Тогда
		Состояние("Идет чтение файла XML: "+имяФайлаПриемника);
		 Сообщить(строка(ТекущаяДата())+" Идет чтение файла XML: "+имяФайлаПриемника);
	#КонецЕсли
		 
	Файл = Новый ЧтениеXML(); 
	Файл.ОткрытьФайл(имяФайлаПриемника); 
	
	ТЗОстатки = Новый ТаблицаЗначений;
	ТЗОстатки.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(11)) ); //макс
	
	Знак = ДопустимыйЗнак.Неотрицательный;
 	ТЗОстатки.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(10,2,Знак)) ); //число от минОст до максОст
	ТЗОстатки.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(3,0,Знак)) ); //число от минОст до максОст
 	//ТЗОстатки.Колонки.Добавить("Склад2");
	//ТЗОстатки.Колонки.Добавить("Склад3");
   #Если Клиент Тогда
		Состояние("Идет разбор файла XML: "+имяФайлаПриемника);
   #КонецЕсли
	   
	  ДатаУстановки = ТекущаяДата();
	Пока Файл.Прочитать() Цикл
		
		Если Файл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Файл.Имя = "products" Тогда // шапка
				ДатаУстановкиСтр = Файл.ПолучитьАтрибут("date_time"); //"12.01.2014 11:33:32"
				#Если Клиент Тогда
					Сообщить("Файл поставщика сформирован "+ДатаУстановкиСтр);
				#КонецЕсли	
              	если стрДлина(ДатаУстановкиСтр)=19 Тогда
					ДатаУстановкиСтр0 = ДатаУстановкиСтр;
					ДатаУстановкиСтр =сред(ДатаУстановкиСтр,7,4)+сред(ДатаУстановкиСтр,4,2)+лев(ДатаУстановкиСтр,2)
					+сред(ДатаУстановкиСтр,12,2)+сред(ДатаУстановкиСтр,15,2)+сред(ДатаУстановкиСтр,18,2);//формат "ГГГГММДДччммсс"
				КонецЕсли;
				попытка
					ДатаУстановки = Дата(ДатаУстановкиСтр);
				Исключение
					ДатаУстановки = ТекущаяДата();
					#Если Клиент Тогда
						сообщить("Дата формирования '"+ДатаУстановкиСтр0 +"' не распозналась как дата "+ДатаУстановкиСтр );
					#КонецЕсли	
                КонецПопытки;
				продолжить;
			КонецЕсли;	
		КонецЕсли;

		
		Код1 	= Файл.ПолучитьАтрибут("article");
		Остаток = Файл.ПолучитьАтрибут("amount");
		Цена    = Файл.ПолучитьАтрибут("price");
		Если СокрЛП(Код1)<>"" Тогда //И Остаток<>"0"    // грузим только с остатком более 0
		СтрТЗ = ТЗОстатки.Добавить();
			СтрТЗ.Код = СокрЛП(Код1);
			СтрТЗ.Остаток = Остаток;
			СтрТЗ.Цена = Цена;
		КонецЕсли;
		
	КонецЦикла;
	Файл.Закрыть();
	
//====================================================================================	
	  Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	ТЗ.Код,
               |	ТЗ.Остаток КАК Остаток,
               |	ТЗ.Цена КАК Цена
               |ПОМЕСТИТЬ ДанныеАйсАвто
               |ИЗ
               |	&ТЗОстатки КАК ТЗ
               |
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ различные
               |	ЕСТЬNULL(спрНоменклатура.Ссылка, &ПустаяНом) КАК Номенклатура,
			   |	ЕСТЬNULL(спрНоменклатура.Артикул, """") КАК Артикул,
 			   |	&Контрагент КАК Контрагент,
               |	ДанныеАйсАвто.Остаток,
               |	ДанныеАйсАвто.Цена,
               |	&ДатаУстановки КАК ДатаУстановки,
			   |	&Подразделение КАК Подразделение
               |ИЗ
               |	ДанныеАйсАвто КАК ДанныеАйсАвто
               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ различные
               |			спрНоменклатура.Ссылка КАК Ссылка,
               |			спрНоменклатура.Ссылка.Артикул КАК Артикул
               |		ИЗ
               |			Справочник.Номенклатура КАК спрНоменклатура
               |		ГДЕ
               |			спрНоменклатура.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.Шины)
               |			И спрНоменклатура.Артикул В
               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
               |						ДанныеАйсАвто2.Код
               |					ИЗ
               |						ДанныеАйсАвто КАК ДанныеАйсАвто2)) КАК спрНоменклатура
               |		ПО ДанныеАйсАвто.Код = спрНоменклатура.Артикул
               |ГДЕ
               |	ЕСТЬNULL(спрНоменклатура.Ссылка, &ПустаяНом) <> &ПустаяНом";
	//========================================================================================			   
	Запрос.УстановитьПараметр("ТЗОстатки", ТЗОстатки);
	Запрос.УстановитьПараметр("Контрагент",АйсАвто); 
	Запрос.УстановитьПараметр("ДатаУстановки",ДатаУстановки);
	Запрос.УстановитьПараметр("Подразделение", справочники.Подразделения.НайтиПоКоду("00112") );
	Запрос.УстановитьПараметр("ПустаяНом", справочники.Номенклатура.ПустаяСсылка() );

   #Если Клиент Тогда
		Состояние("Идет поиск товаров по "+строка(ТЗОстатки.Количество())+" товарам из файла XML: "+имяФайлаПриемника);
	#КонецЕсли
		
ТабОст = Запрос.Выполнить().Выгрузить();	
	
//====================================================================================	
	
	#Если Клиент Тогда
	проц = ?(ТЗОстатки.Количество()>0, окр( 100*ТабОст.Количество()/ТЗОстатки.Количество(), 0), 0);
			Сообщить("Найдено "+строка(ТабОст.Количество())+" из "+строка(ТЗОстатки.Количество())+" ("+строка(проц)+"%) товаров поставщика "+строка(АйсАвто));
	#КонецЕсли
	
	Если Печатать тогда
		ПоказатьТоЧтоНеНашли( ТабОст ); // то что есть!
	ИначеЕсли ПроверитьЦены тогда
		ПроверитьЦены(ТабОст, АйсАвто);
	Иначе	
		//Удаление старых записей
		МенеджерЗаписи = РегистрыСведений.ОстаткиНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
		МенеджерЗаписи.Отбор.Контрагент.Установить(АйсАвто);
		МенеджерЗаписи.Записать();  //чистка	
			
		МенеджерЗаписи.Загрузить( ТабОст );
		МенеджерЗаписи.Записать();  //новые данные	
		
			#Если Клиент Тогда
				Состояние("Запись в таблицу ОстаткиНоменклатурыКонтрагентов - завершена.");
				сообщить(строка(ТекущаяДата())+" запись в таблицу ОстаткиНоменклатурыКонтрагентов "+строка(ТабОст.Количество())+" элементов - завершена.");
			#КонецЕсли
			
			
		//Удаление старых записей
		МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатурыПоставщиков.СоздатьНаборЗаписей();
		МенеджерЗаписи.Отбор.Контрагент.Установить(АйсАвто);
		МенеджерЗаписи.Записать();  //чистка	
			
		МенеджерЗаписи.Загрузить( ТабОст );
		МенеджерЗаписи.Записать();  //новые данные	
		#Если Клиент Тогда
			Состояние("Запись "+строка(ТабОст.Количество())+" строк в таблицу ЦеныНоменклатурыПоставщиков - завершена.");
			сообщить(строка(ТекущаяДата())+" запись в таблицу ЦеныНоменклатурыПоставщиков "+строка(ТабОст.Количество())+" элементов - завершена.");
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры  //Айс-Авто

//===================================================================================

//+++ 22.01.2019 - единый список процедурЗагрузки: ЗагрузитьОстатки+Название(флПечать, флПроверитьЦены) !
функция ПолучитьСписокФункций(флЧерныйСписок=ЛОЖЬ)
	
	СписКонтр = новый СписокЗначений;
	
	Если флЧерныйСписок тогда // только в Ежедневной загрузке остатков и цен!	
		СписКонтр.Добавить("",		 "ЧерныйСписок"); //0
		СписКонтр.Добавить("92532"	,"Тестовый");
		СписКонтр.Добавить("00379",	 "Авторусь");
		СписКонтр.Добавить("П014224","Туле");
	КонецЕсли;
	
	СписКонтр.Добавить("93920",  "ЛингЛонг");    //0-1
	СписКонтр.Добавить("П005296","Хартунг");
	СписКонтр.Добавить("П002640","ДиаДиск");
	СписКонтр.Добавить("П005784","HAYESLEMMERZ");//3-4
	
	СписКонтр.Добавить("90071",  "Мишлен");
	СписКонтр.Добавить("95695",  "Кайлас");//5-6
	СписКонтр.Добавить("П000727","Берг");
	СписКонтр.Добавить("П003301","Алькор");  
	СписКонтр.Добавить("90342",	 "ITR");
	
	СписКонтр.Добавить("92498",	 "Шинсервис");
	СписКонтр.Добавить("00282",  "СеверАвто");
	СписКонтр.Добавить("92769",	"Пирелли");
	
//выключены	из загрузки и проверок
	//СписКонтр.Добавить("00128",	"Пауэр");
	//СписКонтр.Добавить("91885",	"АйсАвто");
	
	возврат СписКонтр;
	
КонецФункции	

//============================================================================================
Процедура ЕжедневнаяЗагрузкаЦенИОстатков() экспорт
	
	СписКонтр = ПолучитьСписокФункций(Истина); //включая Черный список!
 	текстИскл = "";
	
	для i=0 по СписКонтр.Количество()-1 цикл
		текстОбработки = "ЗагрузитьОстатки"+СписКонтр[i].Представление+"(Ложь,Ложь);";
		флНадоГрузить = ложь;
		Если СписКонтр[i].Значение="" тогда  //черный список
			флНадоГрузить = Истина;
		иначе	
			контр = Справочники.Контрагенты.НайтиПоКоду( СписКонтр[i].Значение );
			флНадоГрузить = ЗагружатьОстаткиИЦеныПоставщика(контр);
		КонецЕсли;
		
		Если флНадоГрузить тогда
			Попытка
				выполнить(текстОбработки);	
			Исключение
				текстИскл = текстИскл + "ОШИБКА загрузки Остатков и Цен поставщика: "+СписКонтр[i].Представление+" :
				|	"+ОписаниеОшибки();
				#Если Клиент тогда
					сообщить(текстИскл, СтатусСообщения.Важное);
				#КонецЕсли	
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если текстИскл <> "" тогда //сразу все ошибки!
		ВызватьИсключение текстИскл;
	КонецЕсли;
	
КонецПроцедуры	

//частичная загрузка только 4х поставшиков?!
	//ЗагрузитьОстаткиЛингЛонг();
	//ЗагрузитьОстаткиХартунг();
	//ЗагрузитьОстаткиДиаДиск();
	//ЗагрузитьОстаткиHAYESLEMMERZ();
//	
Процедура ЗагрузитьОстаткиСтороннихПоставщиков() Экспорт
	СписКонтр = ПолучитьСписокФункций();
	для i=0 по 3 цикл
		текстОбработки = "ЗагрузитьОстатки"+СписКонтр[i].Представление+"(Ложь,Ложь);";
		контр = Справочники.Контрагенты.НайтиПоКоду( СписКонтр[i].Значение );
		Попытка
			выполнить(текстОбработки);	
		Исключение
			текстИскл = "ОШИБКА загрузки Остатков и Цен поставщика: "+СписКонтр[i].Представление+" : "+ОписаниеОшибки(); 
			#Если Клиент тогда
				сообщить(текстИскл, СтатусСообщения.Важное);
			#КонецЕсли	
			ВызватьИсключение текстИскл;	
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьНоменклатуруФайлПоставщика(Поставщик) Экспорт
	
	СписКонтр = ПолучитьСписокФункций();
	
	для i=0 по СписКонтр.Количество()-1 цикл
		
		контр = Справочники.Контрагенты.НайтиПоКоду( СписКонтр[i].Значение );
		
		Если контр = Поставщик тогда
			Попытка
				текстОбработки = "ЗагрузитьОстатки"+СписКонтр[i].Представление+"(Истина,Ложь);";
				выполнить(текстОбработки);	
				прервать;//1 клиент
			Исключение
				текстИскл = "ОШИБКА проверки Номенклатуры поставщика: "+СписКонтр[i].Представление+" : "+ОписаниеОшибки(); 
				#Если Клиент тогда
					сообщить(текстИскл, СтатусСообщения.Важное);
				#КонецЕсли	
				ВызватьИсключение текстИскл;	
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьЦеныФайлПоставщика(Поставщик) Экспорт
	
	СписКонтр = ПолучитьСписокФункций();

	для i=0 по СписКонтр.Количество()-1 цикл
		
		контр = Справочники.Контрагенты.НайтиПоКоду( СписКонтр[i].Значение );
		
		Если контр=Поставщик тогда
			текстОбработки = "ЗагрузитьОстатки"+СписКонтр[i].Представление+"(Ложь,Истина);";
			Попытка
				выполнить(текстОбработки);
				прервать;//1 раз
			Исключение
				текстИскл = "ОШИБКА проверки Цен поставщика: "+СписКонтр[i].Представление+" : "+ОписаниеОшибки(); 
				#Если Клиент тогда
					сообщить(текстИскл, СтатусСообщения.Важное);
				#КонецЕсли	
				ВызватьИсключение текстИскл;	
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

//============================================================================================

функция ПолучитьVISSOLкованные(КодПоставщика="")
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	НоменклатураИмпорт.Номенклатура,
			   |	НоменклатураИмпорт.Номенклатура.Код как Артикул,
               |	МАКСИМУМ(&КодПоставщика) КАК КодПоставщика,
               |	МАКСИМУМ(20) КАК Количество,
               |	МАКСИМУМ(11111) КАК Цена,
               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КомплектующиеНоменклатуры.Комплектующая) КАК Комплектующая
               |ИЗ
               |	РегистрСведений.СезонныйАссортимент КАК НоменклатураИмпорт
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
               |		ПО НоменклатураИмпорт.Номенклатура = КомплектующиеНоменклатуры.Номенклатура
               |ГДЕ
               |	НоменклатураИмпорт.Номенклатура.Производитель = &VISSOL
               |	И НоменклатураИмпорт.Номенклатура.НоменклатурнаяГруппа = &Кованные
			   
			   //+++ 30.07.2018 диски с программой привязываем к "Тест 7 дней" П008430
               |	И НоменклатураИмпорт.Номенклатура.ПутьКфайламСПрограммой = """"
			   
			   //--------ОБЯЗАТЕЛЬНО с комплектующими!-------------------------------
			   |	И НЕ КомплектующиеНоменклатуры.Комплектующая ЕСТЬ NULL 
			   
			   //+++ 08.10.2018 - Задача № 56106 -> НЕ (Был выпуск = Истина)----------
               |    и НЕ НоменклатураИмпорт.Номенклатура в (ВЫБРАТЬ
               |		Выразить(ЗначенияСвойствОбъектов.Объект как Справочник.Номенклатура) как Товар
               |		ИЗ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
               |		ГДЕ ЗначенияСвойствОбъектов.Свойство = &Свойство
               |			И ЗначенияСвойствОбъектов.Значение = ИСТИНА)
			   
               |СГРУППИРОВАТЬ ПО
               |	НоменклатураИмпорт.Номенклатура";
Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90355")); 
Запрос.УстановитьПараметр("VISSOL", справочники.Производители.НайтиПоКоду(3657) ); 
Запрос.УстановитьПараметр("Кованные", справочники.НоменклатурныеГруппы.НайтиПоКоду("00022") );
Запрос.УстановитьПараметр("КодПоставщика",КодПоставщика);
Результат = Запрос.Выполнить();
табл3 = результат.Выгрузить();
возврат табл3;
КонецФункции

//+++ 30.07.2018
функция ПолучитьДискиСПрограммой(кодПоставщика="")
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	Товары.Номенклатура,
			   |	Товары.Номенклатура.Код как Артикул,
               |	&КодПоставщика КАК КодПоставщика,
               |	20 КАК Количество,
               |	11111 КАК Цена
               |ИЗ
               |	(ВЫБРАТЬ
               |		спрНоменклатура.Ссылка КАК Номенклатура
               |	ИЗ
               |		Справочник.Номенклатура КАК спрНоменклатура
               |	ГДЕ
               |		спрНоменклатура.ВидТовара = &Диски
               |		И спрНоменклатура.ПометкаУдаления = ЛОЖЬ
               |		И спрНоменклатура.ПутьКфайламСПрограммой <> """"
               |
			   //08.10.2018 - Задача № 56106 ---- Был выпуск
               |	ОБЪЕДИНИТЬ ВСЕ
               |	
               |	ВЫБРАТЬ
               |		ЗначенияСвойствОбъектов.Объект КАК Номенклатура
               |	ИЗ
               |		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
               |	ГДЕ
               |		ЗначенияСвойствОбъектов.Свойство = &Свойство
               |		И ЗначенияСвойствОбъектов.Значение = ИСТИНА) КАК Товары";
Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90355"));  //08.10.2018 - Задача № 56106 
Запрос.УстановитьПараметр("Диски",перечисления.ВидыТоваров.Диски );
Запрос.УстановитьПараметр("КодПоставщика",КодПоставщика);
Результат = Запрос.Выполнить();
табл3 = результат.Выгрузить();
возврат табл3;
КонецФункции
    
//Пауэр грузится через web-сервис, 
//остальные: novline и автовираж - загрузка Пока не оговорена...
//Пока есть только прайс в Excel формате
//соответствие по артикулу...
//
Процедура ПауэрЗагрузкаНоменклатурыЦен() Экспорт
	
	БратьССайта=Истина;             //yst76_price
	ИмяФайлаИсточника = "https://pro.4tochki.ru/export_data/6027.xml"; //5934 - федунов,   6027 - ЯШТ
	имяФайлаПриемника = Константы.ПутьКФайлам.получить()+"\Пауэр\6027.xml"; //5934.xml";  6027
	
	Если БратьССайта Тогда
		#Если Клиент Тогда
			Состояние(строка(ТекущаяДата())+" идет копирование файла цен номенклатуры с сайта https://pro.4tochki.ru....");
		     сообщить(строка(ТекущаяДата())+" идет копирование файла цен номенклатуры "+ИмяФайлаИсточника);
		#КонецЕсли
		КопироватьФайл(ИмяФайлаИсточника, имяФайлаПриемника);  //16 сек.
	КонецЕсли;	
	
		#Если Клиент Тогда
			Состояние(строка(ТекущаяДата())+" идет чтения файла: "+имяФайлаПриемника);
		    сообщить(строка(ТекущаяДата())+"  идет чтения файла: "+имяФайлаПриемника);
		#КонецЕсли
	Файл = Новый ЧтениеXML(); 
	Файл.ОткрытьФайл(имяФайлаПриемника); 
	
	Запись = Новый Структура;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(25))); // до 100 символов как в регистре
	ТЗ.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(300)));
	ТЗ.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(300)));
//	ТЗ.Колонки.Добавить("НашаНоменклатура");
	Знак = ДопустимыйЗнак.Неотрицательный;
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,новый КвалификаторыЧисла(15,2,Знак)) );
	
		#Если Клиент Тогда
			Состояние(строка(ТекущаяДата())+" идет разбор файла: "+имяФайлаПриемника);
		#КонецЕсли
//--------------------------структура XML полей для Шин--------------------		
//<tires>			
	//<cae>000202</cae>
	
	//<width>195.00</width>  //ширина
	//<height>65.00</height> //высота
	//<diameter>R15,0</diameter> //диаметр
	
	//<load_index>91</load_index>
	//<speed_index>T</speed_index>
	//<model>Energy Saver</model>
	
	//<brand>Michelin</brand>
	//<name>195/65R15 91T Energy Saver G1 GRNX</name>
	
	//<is_summer>лето</is_summer>
	//<is_studded>не шип</is_studded>
	
	//<tiretype>Легковая</tiretype>
	//<diametr_out></diametr_out>
	//<usa></usa>
	//<axle></axle>
	
	//<price_discount>5816</price_discount>
	//<price>6140</price>
	//<price_sk3>5816</price_sk3>
//</tires>	
	

 КолШин = 0;
 	Пока Файл.Прочитать() Цикл
		#Если Клиент Тогда
			Если КолШин%100=0 Тогда
				 Состояние("Прочитано: "+строка(КолШин)+" элементов из файла: "+имяФайлаПриемника);
			КонецЕсли;
	    #КонецЕсли
				 
		Если Файл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Имя = Файл.Имя;
			Если Имя = "rims" Тогда // диски всегда идут после шин!
            	прервать;
			КонецЕсли;
			
		ИначеЕсли Файл.ТипУзла = ТипУзлаXML.Текст Тогда
			Запись.Вставить(Имя, Файл.Значение);      //информацию фнутри блока XML помещаем в структуру
			
		ИначеЕсли Файл.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Если Файл.Имя = "tires" Тогда
				КолШин = КолШин + 1;
				цена = ?( Число(Запись.price_sk3)=0, 0, Число(Запись.price_sk3));       // ЦЕНА у Федунова - price_discount
					если цена>0 Тогда
					СтрТЗ = ТЗ.Добавить();
					СтрТЗ.Код = Запись.cae;
					СтрТЗ.Цена = Цена;
				//	СтрТЗ.Цена2 = Число(Запись.price);
				
				//-------------------"артикул" сравниваем с нашим названием шин-----------------------------------------
					СтрТЗ.Артикул =ВРЕГ(Запись.brand)+" "+ВРЕГ(Запись.model)+" "+
						строка(число(Запись.width))+"/"+строка(число(Запись.height))+лев(Запись.diameter, стрДлина(Запись.diameter)-2)+
						" "+Запись.load_index+Запись.speed_index+?(найти(Запись.is_studded,"не ")>0,""," шип");
						
						//наименование у Пауэра
						//СтрТЗ.Наименование =Запись.name; //+++ 16.07.2014 - нет в файле 6027.xml ?!
						СтрТЗ.Наименование =ВРЕГ(Запись.brand)+" "
						+строка(число(Запись.width))+"/"+строка(число(Запись.height))+лев(Запись.diameter, стрДлина(Запись.diameter)-2)+
						" "+ВРЕГ(Запись.model); 
					
					КонецЕсли;
 			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Файл.Закрыть();
	
	Пауэр = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7703247653");
	
//-----------------------------------Катя-------------------------------------------
    //
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Контрагент", Пауэр);  
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	НоменклатураКонтрагентов.Номенклатура
	//			   |ИЗ
	//			   |	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	//			   |ГДЕ
	//			   |	НоменклатураКонтрагентов.Контрагент = &Контрагент";
	//ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	//
	//Для каждого СтрокаТЗ ИЗ ТЗ Цикл
	//	Если НЕ СтрокаТЗ.НашаНоменклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
	//		
	//		НашлиСоответствие = ТаблицаСоответствий.Найти(СтрокаТЗ.НашаНоменклатура);
	//		Если НашлиСоответствие = Неопределено Тогда
	//			//Добавим соответствие номенклатуры
	//			МенеджерЗаписи = РегистрыСведений.НоменклатураКонтрагентов.СоздатьМенеджерЗаписи(); 
	//			МенеджерЗаписи.Контрагент = Пауэр; 
	//			МенеджерЗаписи.Номенклатура = СтрокаТЗ.НашаНоменклатура; 
	//			МенеджерЗаписи.КодНоменклатурыКонтрагента = СтрокаТЗ.КодПауэр; 
	//			МенеджерЗаписи.Записать(); 
	//		КонецЕсли;
	//		
	//		//Цены номенклатуры поставщиков
	//		Если НЕ СтрокаТЗ.Цена = 0 Тогда 
	//			МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатурыПоставщиков.СоздатьМенеджерЗаписи();
	//			МенеджерЗаписи.Период = ТекущаяДата();
	//			МенеджерЗаписи.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7703247653"); 
	//			МенеджерЗаписи.Номенклатура = СтрокаТЗ.НашаНоменклатура; 
	//			МенеджерЗаписи.Цена = СтрокаТЗ.Цена; 
	//			МенеджерЗаписи.Записать(); 
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//КонецЦикла;
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	ТЗ.Код,
			   |	ТЗ.Артикул,
               |	ТЗ.Наименование,
               |	ТЗ.Цена
               |ПОМЕСТИТЬ ВТ_ДанныеПауэра
               |ИЗ
               |	&ТЗ КАК ТЗ
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ЕСТЬNULL(НоменклатураКонтрагентов.Номенклатура, ВложенныйЗапрос.Ссылка) КАК Номенклатура,
               |	ДанныеПауэра.Цена,
               |	&Контрагент КАК Контрагент,
               |	ДанныеПауэра.Код КАК КодНоменклатурыКонтрагента,
			   |	ДанныеПауэра.Артикул как АртикулНоменклатурыКонтрагента,
               |	ДанныеПауэра.Наименование КАК НаименованиеНоменклатурыКонтрагента
               |ИЗ
               |	ВТ_ДанныеПауэра КАК ДанныеПауэра
               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
               |			НоменклатураКонтрагентов.Контрагент КАК Контрагент,
               |			НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
               |			НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК КодНоменклатурыКонтрагента,
               |			НоменклатураКонтрагентов.НаименованиеНоменклатурыКонтрагента КАК НаименованиеНоменклатурыКонтрагента
               |		ИЗ
               |			РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
               |		ГДЕ
               |			НоменклатураКонтрагентов.Контрагент = &Контрагент) КАК НоменклатураКонтрагентов
               |		ПО (ДанныеПауэра.Код = НоменклатураКонтрагентов.КодНоменклатурыКонтрагента
               |				ИЛИ ДанныеПауэра.Наименование = НоменклатураКонтрагентов.НаименованиеНоменклатурыКонтрагента)
               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
               |			НоменклатураСпр.Ссылка КАК Ссылка,
               |			НоменклатураСпр.Артикул КАК Артикул,
			   |			НоменклатураСпр.Наименование как Наименование
               |		ИЗ
               |			Справочник.Номенклатура КАК НоменклатураСпр
               |		ГДЕ
               |			НоменклатураСпр.Ссылка В ИЕРАРХИИ (&Родитель)
               |			И НЕ НоменклатураСпр.ПометкаУдаления
               |			И НЕ НоменклатураСпр.ЭтоГруппа
               |			И НоменклатураСпр.ВидТовара = &ВидТовара
               |			И ( НоменклатураСпр.Артикул В (выбрать ТЗПауэр.Код из ВТ_ДанныеПауэра как ТЗПауэр)
			   |				или НоменклатураСпр.Наименование в (выбрать ТЗПауэр.Артикул из ВТ_ДанныеПауэра как ТЗПауэр)
               |                )
			   |) КАК ВложенныйЗапрос
               |		ПО (ДанныеПауэра.Код = ВложенныйЗапрос.Артикул 
			   |			или ДанныеПауэра.Артикул = ВложенныйЗапрос.Наименование)
               |ГДЕ
               |	НоменклатураКонтрагентов.Номенклатура ЕСТЬ NULL
			//   |	ЕСТЬNULL(НоменклатураКонтрагентов.Номенклатура, &ПустаяНом) = &ПустаяНом
			 //+++ только новые
			 //  |	И НЕ (ВложенныйЗапрос.Ссылка ЕСТЬ NULL)
               |";
//========================================================================================			   
			              
Запрос.УстановитьПараметр("ТЗ", ТЗ);
Запрос.УстановитьПараметр("ПустаяНом", справочники.Номенклатура.ПустаяСсылка() );
Запрос.УстановитьПараметр("Контрагент",Пауэр); 

 Родитель = справочники.Номенклатура.НайтиПоКоду("0001746"); //Шины группа... 
 запрос.УстановитьПараметр("Родитель",Родитель);
 запрос.УстановитьПараметр("ВидТовара",перечисления.ВидыТоваров.Шины );
 
//-----------------------нет соответствия - пытаемся найти в номенклатуре--------------------------
		#Если Клиент Тогда
			 Состояние("Идет поиск новых соответствий элементов из файла и номенклатуры (по артикулу)...");
	    #КонецЕсли

Результат = Запрос.Выполнить();      //16,6 "
ТЗном	  = Результат.Выгрузить();
	
		#Если Клиент Тогда
			 Состояние("Идет создание новых соответствий для "+строка(ТЗном.Количество())+" элементов номенклатуры (по артикулу)...");
			 
			 //+++ 16.07.2014
			 Если Вопрос( "Очистить старые соответствия товаров и номенклатуры?", РежимДиалогаВопрос.ДаНет, 30)  = КодВозвратаДиалога.Да Тогда
					менЗап = РегистрыСведений.НоменклатураКонтрагентов.СоздатьНаборЗаписей();
					менЗап.Отбор.Контрагент.Установить(Пауэр);
					менЗап.Записать(); // полная очистка
			сообщить(" --------------- соответствия товаров по "+строка(Пауэр)+" очищены--------------- ");					
			КонецЕсли;
 		 #КонецЕсли
		 

		 
       новЭл = 0;
	Для каждого СтрокаТЗ ИЗ ТЗном Цикл
		//Добавим соответствие номенклатуры
		Если СтрокаТЗ.Номенклатура <> Null  Тогда
			МенеджерЗаписи = РегистрыСведений.НоменклатураКонтрагентов.СоздатьМенеджерЗаписи(); 
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Записать();
			новЭл = новЭл + 1;
			# Если Клиент Тогда
				сообщить("+ Найден товар: "+сокрЛП(СтрокаТЗ.Номенклатура.Код)+") "+сокрЛП(СтрокаТЗ.Номенклатура)+" по артикулу или имени Пауэр: "+ сокрЛП(СтрокаТЗ.КодНоменклатурыКонтрагента)+" ) "+сокрЛП(СтрокаТЗ.АртикулНоменклатурыКонтрагента), СтатусСообщения.Информация );
			#КонецЕсли	
		Иначе
			# Если Клиент Тогда
				сообщить(" - Не найден товар в текущей базе по артикулу или имени Пауэр: "+ сокрЛП(СтрокаТЗ.КодНоменклатурыКонтрагента)+" ) "+сокрЛП(СтрокаТЗ.АртикулНоменклатурыКонтрагента), СтатусСообщения.Внимание );
			#КонецЕсли	
		КонецЕсли;		
		
		# Если Клиент Тогда
			Если новЭл%100=0 Тогда 
				Состояние("добавлено "+строка(новЭл)+" ("+формат(новЭл*100/ТЗном.Количество(),"ЧДЦ=1")+"%) новых соответствий....");
				//. Текущий: "+строка(СтрокаТЗ.Номенклатура.Код)+") "+СтрокаТЗ.Номенклатура.Наименование+" = "+ сокрЛП(СтрокаТЗ.КодНоменклатурыКонтрагента)+") "+сокрЛП(СтрокаТЗ.НаименованиеНоменклатурыКонтрагента),  );
			КонецЕсли;
		#КонецЕсли	
	КонецЦикла;

	
		#Если Клиент Тогда
			 сообщить(Строка(ТекущаяДата())+ " добавлено: "+строка(новЭл)+" новых соответствий. Не найдено: "+строка(ТЗном.Количество()-новЭл)+" товаров по артикулу.");
			 Состояние(строка(ТекущаяДата())+" Идет поиск "+строка(ТЗ.Количество())+" элементов из файла по регистру соответствия номенклатуры поставщиков...");
	    #КонецЕсли

	
//========================= а теперь грузим ========================================	
Запрос.Текст =  "ВЫБРАТЬ
                |	ТЗ.Код,
                |	ТЗ.Цена
                |ПОМЕСТИТЬ ДанныеПауэра
                |ИЗ
                |	&ТЗ КАК ТЗ
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ЕСТЬNULL(НоменклатураКонтрагентов.Номенклатура, &ПустаяНом) КАК Номенклатура,
                |	ДанныеПауэра.Цена,
                |	&Контрагент КАК Контрагент
                |ИЗ
                |	ДанныеПауэра КАК ДанныеПауэра
                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                |			НоменклатураКонтрагентов.Контрагент КАК Контрагент,
                |			НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
                |			НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК КодНоменклатурыКонтрагента
                |		ИЗ
                |			РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
                |		ГДЕ
                |			НоменклатураКонтрагентов.Контрагент = &Контрагент) КАК НоменклатураКонтрагентов
                |		ПО ДанныеПауэра.Код = НоменклатураКонтрагентов.КодНоменклатурыКонтрагента
                |ГДЕ
                |	НЕ (НоменклатураКонтрагентов.Номенклатура ЕСТЬ NULL)";
	  
Результат = Запрос.Выполнить();
ТЗцены = Результат.Выгрузить();
	        
текДатаВремя = ТекущаяДата();
ТЗцены.Колонки.Добавить("ДатаУстановки");  // доп. реквизит
ТЗцены.ЗаполнитьЗначения( текДатаВремя, "ДатаУстановки");
  
//-------------------пишем в цены поставщика----------------------------
менЗап = РегистрыСведений.ЦеныНоменклатурыПоставщиков.СоздатьНаборЗаписей();
менЗап.Отбор.Контрагент.Установить(Пауэр);
менЗап.Записать(); // полная очистка

#Если Клиент Тогда
	 Состояние(строка(ТекущаяДата())+" идет запись "+строка(ТЗцены.Количество())+" цен номенклатуры в регистр ЦеныНоменклатурыПоставщиков...");
#КонецЕсли

менЗап.Загрузить(ТЗцены);
менЗап.Записать(); // записывает то что есть

#Если Клиент Тогда
	 Состояние(строка(ТекущаяДата())+" запись "+строка(ТЗцены.Количество())+" цен номенклатуры завершена.");
	 сообщить(строка(ТекущаяДата())+" запись "+строка(ТЗцены.Количество())+" цен номенклатуры завершена.");
#КонецЕсли

УстановитьЦенуПродажи(Пауэр, +5, "00009" );  //В Дилерскую!
КонецПроцедуры

//Пауэр
//11.11.2016 Смирнов
Процедура ПауэрЗагрузкаОстатков() 
	
	СписокПроизводителей = новый СписокЗначений;
	СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(5)); //Bridgestone
	СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(16)); //NOKIAN
	СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(21)); //YOKOHAMA
	
	//СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(15)); //MICHELIN
	//СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(17)); //PIRELLI
	//СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(4)); //BFGoodrich
	//СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(7)); //Dunlop
	//СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(3218)); //Dunlop  GY
	//СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(3344)); //FORMULA
	//СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(10)); //GOODYEAR
	//СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(53)); //NORDMAN
	//СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(17)); //PIRELLI
	//СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(779)); //SAVA
	//СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(739)); //TIGAR
	//СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(404)); // MARSHAL
	
	//артикул может быть "составной" н-р 2391200=2145900, разбиваем такие на 2,3,... строчки
	тзНом=новый ТаблицаЗначений;  
	тзНом.Колонки.Добавить("НоменклатураСсылка",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзНом.Колонки.Добавить("Артикул",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
	тзНом.Колонки.Добавить("АртикулЯШТ",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(120)));
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК НоменклатураСсылка,
	|	Номенклатура.Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.Артикул = """"
	|	И Номенклатура.Производитель В(&СписокПроизводителей)
	|	И Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)";
	Запрос.УстановитьПараметр("СписокПроизводителей",СписокПроизводителей);
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Артикулы = яштРазложитьСтрокуВМассивПодстрок(Рез.Артикул,"=");
		Для каждого Артикул из Артикулы Цикл
			нстр = тзНом.Добавить();
			нстр.НоменклатураСсылка = рез.НоменклатураСсылка;
			нстр.Артикул = СокрЛП(Артикул);
			нстр.АртикулЯШТ = СокрЛП(Рез.Артикул);
		КонецЦикла;
	КонецЦикла;
	
	МинКол      = 1;  // меньше и не грузим...
	МаксКол     = 41;  
	
	ИмяФайлаИсточника = "https://pro.4tochki.ru/export_data/rest_other.xml";
	ИмяФайлаПриемника =  ПолучитьИмяВременногоФайла("xml");
	
	Пауэр = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7703247653");
	
	#Если Клиент Тогда
		Состояние("Идет копирование файла остатков номенклатуры с сайта https://pro.4tochki.ru....");
		Сообщить(строка(ТекущаяДата())+" Идет копирование файла остатков номенклатуры " + ИмяФайлаИсточника+" в "+ИмяФайлаПриемника);
	#КонецЕсли
	КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
	
	#Если Клиент Тогда
		Состояние("Идет чтение файла XML: "+имяФайлаПриемника);
		Сообщить(строка(ТекущаяДата())+" Идет чтение файла XML: "+имяФайлаПриемника);
	#КонецЕсли
	
	ЧтениеXML = Новый ЧтениеXML(); 
	ЧтениеXML.ОткрытьФайл(имяФайлаПриемника); 
	
	ТЗОстатки = Новый ТаблицаЗначений;
	ТЗОстатки.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(11)) ); 
	
	Знак = ДопустимыйЗнак.Неотрицательный;
	ТЗОстатки.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(2,0,Знак)) ); //число от минОст до максОст
	//
	#Если Клиент Тогда
		Состояние("Идет разбор файла XML: "+имяФайлаПриемника);
	#КонецЕсли
	
	ОстаткиXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ОстаткиШиныXDTO = ОстаткиXDTO.Tires;
	
	Для каждого Товар из  ОстаткиШиныXDTO Цикл
		остаток = ?(Товар.rest_mkrs = "более 40", ""+МаксКол,	Товар.rest_mkrs);
		остаток = Число(СокрЛП(остаток));
		Если остаток>=МинКол Тогда
			нстр = ТЗОстатки.Добавить();
			нстр.Артикул = СокрЛП(Товар.cae);
			нстр.Остаток = остаток;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	//====================================================================================	
	//Если одна наша номенклатура соответствует нескольким в Пауэре, то не грузим ее
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ.Артикул,
	               |	ТЗ.Остаток
	               |ПОМЕСТИТЬ ДанныеПауэра
	               |ИЗ
	               |	&ТЗОстатки КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	тзНоменклатура.НоменклатураСсылка,
	               |	тзНоменклатура.Артикул
	               |ПОМЕСТИТЬ втНоменклатура
	               |ИЗ
	               |	&тзНоменклатура КАК тзНоменклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Контрагент КАК Контрагент,
	               |	ДанныеПауэра.Остаток,
	               |	втНоменклатура.НоменклатураСсылка КАК Номенклатура,
	               |	ДанныеПауэра.Артикул
	               |ПОМЕСТИТЬ вт
	               |ИЗ
	               |	ДанныеПауэра КАК ДанныеПауэра
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	               |		ПО (втНоменклатура.Артикул ПОДОБНО ДанныеПауэра.Артикул)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт.Контрагент,
	               |	вт.Остаток,
	               |	вт.Номенклатура,
	               |	вт.Артикул
	               |ИЗ
	               |	вт КАК вт
	               |ГДЕ
	               |	НЕ вт.Номенклатура В
	               |				(ВЫБРАТЬ
	               |					ВложенныйЗапрос.Номенклатура
	               |				ИЗ
	               |					(ВЫБРАТЬ
	               |						вт.Номенклатура КАК Номенклатура,
	               |						КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт.Артикул) КАК Артикул
	               |					ИЗ
	               |						вт КАК вт
	               |					СГРУППИРОВАТЬ ПО
	               |										вт.Номенклатура
	               |					) КАК ВложенныйЗапрос
	               |				ГДЕ
	               |					ВложенныйЗапрос.Артикул > 1)";
	//========================================================================================			   
	Запрос.УстановитьПараметр("ТЗОстатки", ТЗОстатки);
	Запрос.УстановитьПараметр("тзНоменклатура",тзНом);
	Запрос.УстановитьПараметр("Контрагент",Пауэр);
	Рез = Запрос.Выполнить();
	
	ТабОст = Рез.Выгрузить();
	ТабОст.ВыбратьСтроку();
	
	//====================================================================================	
	
	#Если Клиент Тогда
		Состояние("Идет запись таблицы ОстаткиНоменклатурыКонтрагентов...");
	#КонецЕсли
	
	//Удаление старых записей
	НаборЗаписей = РегистрыСведений.ОстаткиНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(Пауэр);
	НаборЗаписей.Записать();  //чистка	
	
	НаборЗаписей.Загрузить( ТабОст );
	НаборЗаписей.Записать();  //новые данные	
	
	#Если Клиент Тогда
		Состояние("Запись в таблицу ОстаткиНоменклатурыКонтрагентов - завершена.");
		сообщить(строка(ТекущаяДата())+" запись в таблицу ОстаткиНоменклатурыКонтрагентов "+строка(ТабОст.Количество())+" элементов - завершена.");
	#КонецЕсли
	
	УдалитьФайлы(имяФайлаПриемника);
КонецПроцедуры

//11.11.2016 Смирнов цены Пауэр
Функция ЗагрузитьЦеныПауэр() 
	Пауэр = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7703247653");
	
	ИмяФайлаИсточника = "https://pro.4tochki.ru/export_data/5934.xml";
	ИмяФайлаПриемника =  ПолучитьИмяВременногоФайла("xml");
	КопироватьФайл(ИмяФайлаИсточника, имяФайлаПриемника);
	
    ЧтениеXML = Новый ЧтениеXML(); 
	ЧтениеXML.ОткрытьФайл(имяФайлаПриемника); 
	
	//
	#Если Клиент Тогда
		Состояние("Идет разбор файла XML: "+имяФайлаПриемника);
		Сообщить("Идет разбор файла XML: "+имяФайлаПриемника);
	#КонецЕсли
	
    СписокПроизводителей = новый СписокЗначений;
	СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(5)); //Bridgestone
	СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(16)); //NOKIAN
	СписокПроизводителей.Добавить(справочники.Производители.НайтиПоКоду(21)); //YOKOHAMA
	
	
	тзНом=новый ТаблицаЗначений;
	тзНом.Колонки.Добавить("НоменклатураСсылка",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзНом.Колонки.Добавить("Артикул",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
	тзНом.Колонки.Добавить("АртикулЯШТ",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(120)));
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК НоменклатураСсылка,
	               |	Номенклатура.Артикул
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.Артикул = """"
	               |	И Номенклатура.Производитель В(&СписокПроизводителей)
	               |	И Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)";
				   Запрос.УстановитьПараметр("СписокПроизводителей",СписокПроизводителей);
				   Рез = Запрос.Выполнить().Выбрать();
				   Пока Рез.Следующий() Цикл
					   Артикулы = яштРазложитьСтрокуВМассивПодстрок(Рез.Артикул,"=");
					   Для каждого Артикул из Артикулы Цикл
						   нстр = тзНом.Добавить();
						   нстр.НоменклатураСсылка = рез.НоменклатураСсылка;
						   нстр.Артикул = СокрЛП(Артикул);
						   нстр.АртикулЯШТ = СокрЛП(Рез.Артикул);
					   КонецЦикла;
				   КонецЦикла;
	
	тзЦеныПауэр=новый ТаблицаЗначений;
	тзЦеныПауэр.Колонки.Добавить("Артикул",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
	тзЦеныПауэр.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
				   
	ЦеныXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЦеныШиныXDTO = ЦеныXDTO.tires;
	
	Для каждого Товар из  ЦеныШиныXDTO Цикл
			нстр = тзЦеныПауэр.Добавить();
			нстр.Артикул = СокрЛП(Товар.cae);
			нстр.Цена = Число(Товар.price_mkrs);
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	//====================================================================================	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ.Артикул,
	               |	ТЗ.Цена
	               |ПОМЕСТИТЬ ДанныеПауэра
	               |ИЗ
	               |	&тзЦеныПауэр КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	тзНоменклатура.НоменклатураСсылка,
	               |	тзНоменклатура.Артикул
	               |ПОМЕСТИТЬ втНоменклатура
	               |ИЗ
	               |	&тзНоменклатура КАК тзНоменклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Контрагент КАК Контрагент,
	               |	ДанныеПауэра.Цена,
	               |	втНоменклатура.НоменклатураСсылка КАК Номенклатура,
	               |	ДанныеПауэра.Артикул
	               |ПОМЕСТИТЬ вт
	               |ИЗ
	               |	ДанныеПауэра КАК ДанныеПауэра
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	               |		ПО (втНоменклатура.Артикул ПОДОБНО ДанныеПауэра.Артикул)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт.Контрагент,
	               |	вт.Цена,
	               |	вт.Номенклатура,
	               |	вт.Артикул
	               |ИЗ
	               |	вт КАК вт
	               |ГДЕ
	               |	НЕ вт.Номенклатура В
	               |				(ВЫБРАТЬ
	               |					ВложенныйЗапрос.Номенклатура
	               |				ИЗ
	               |					(ВЫБРАТЬ
	               |						вт.Номенклатура КАК Номенклатура,
	               |						КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт.Артикул) КАК Артикул
	               |					ИЗ
	               |						вт КАК вт
	               |					СГРУППИРОВАТЬ ПО
	               |										вт.Номенклатура
	               |					) КАК ВложенныйЗапрос
	               |				ГДЕ
	               |					ВложенныйЗапрос.Артикул > 1)";
	//========================================================================================			   
	Запрос.УстановитьПараметр("тзЦеныПауэр", тзЦеныПауэр);
	Запрос.УстановитьПараметр("тзНоменклатура",тзНом);
	Запрос.УстановитьПараметр("Контрагент",Пауэр);
	Рез = Запрос.Выполнить();
	
	ТабЦены = Рез.Выгрузить();
	Сообщить(ТабЦены.Количество());
	
	#Если Клиент Тогда
		Состояние("Запись цен...");
	#КонецЕсли

    Для каждого СтрокаТЗ ИЗ ТабЦены Цикл
    		//Цены номенклатуры поставщиков
    		Если НЕ СтрокаТЗ.Цена = 0 Тогда 
    			МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатурыПоставщиков.СоздатьМенеджерЗаписи();
    			МенеджерЗаписи.ДатаУстановки = ТекущаяДата();
    			МенеджерЗаписи.Контрагент = Пауэр; 
    			МенеджерЗаписи.Номенклатура = СтрокаТЗ.Номенклатура; 
    			МенеджерЗаписи.Цена = СтрокаТЗ.Цена; 
    			МенеджерЗаписи.Записать(); 
    		КонецЕсли;
    КонецЦикла;
КонецФункции

//+++ 10-13.08.2018 - только св.остатки!
//Контрагент,
//Номенклатура,
//Артикул,
//Остаток,
//Подразделение
//
функция ПолучитьЧерныйСписок(КонтрЧерныйСписок)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураИмпорт.Номенклатура КАК Номенклатура,
	               |	НоменклатураИмпорт.Номенклатура.Код КАК Артикул,
	               |	НоменклатураИмпорт.Номенклатура.Производитель КАК Производитель
	               |ПОМЕСТИТЬ ВТ_ЧерныйСписок
	               |ИЗ
	               |	РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт
	               |ГДЕ
	               |	НоменклатураИмпорт.ЧерныйЛист = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&КонтрЧерныйСписок КАК Контрагент,
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.Номенклатура.Код КАК Артикул,
	               |	ТоварыНаСкладахОстатки.Номенклатура.Производитель КАК Производитель,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК Остаток,
	               |	&Ярославль КАК Подразделение
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ОстОТХ.Номенклатура КАК Номенклатура,
	               |		СУММА(ОстОТХ.КоличествоОстаток) КАК КоличествоОстаток
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ост.Номенклатура КАК Номенклатура,
	               |			ост.КоличествоОстаток КАК КоличествоОстаток
	               |		ИЗ
	               |			РегистрНакопления.ТоварыНаСкладах.Остатки( 	,
	               |					Склад.Транзитный = ЛОЖЬ
	               |						И Склад.ЗапретитьИспользование = ЛОЖЬ
	               |						И Номенклатура В (ВЫБРАТЬ вт.Номенклатура ИЗ ВТ_ЧерныйСписок КАК вт)) КАК ост
	               |
				   //13.08.2018
	               |		ОБЪЕДИНИТЬ ВСЕ
				   |ВЫБРАТЬ
	               |			ОстаткиСторПост.Номенклатура КАК Номенклатура,
	               |			ОстаткиСторПост.Количество КАК КоличествоОстаток
	               |		ИЗ
	               |			РегистрНакопления.ТоварыВОжиданииОтПоставщика КАК ОстаткиСторПост
		   	   	   |ГДЕ		 ОстаткиСторПост.Номенклатура В (ВЫБРАТЬ вт.Номенклатура ИЗ ВТ_ЧерныйСписок КАК вт)

	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ОТХ.Номенклатура,
	               |			ОТХ.КоличествоОстаток
	               |		ИЗ
	               |			РегистрНакопления.ТоварыНаОтветственномХранении.Остатки( 	,
	               |					Склад.Транзитный = ЛОЖЬ
	               |						И Склад.ЗапретитьИспользование = ЛОЖЬ
	               |						И Контрагент В (ВЫБРАТЬ котрОТХ.Поставщик
	               |							ИЗ регистрСведений.СрокиДоставки КАК котрОТХ
	               |							ГДЕ котрОТХ.ОТХ = ИСТИНА)
	               |						И Номенклатура В (ВЫБРАТЬ вт.Номенклатура ИЗ ВТ_ЧерныйСписок КАК вт)) КАК ОТХ) КАК ОстОТХ
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ОстОТХ.Номенклатура) КАК ТоварыНаСкладахОстатки
				   
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(,
	               |				ЗаказПокупателя.Транзит = ЛОЖЬ
	               |					И ЗаказПокупателя.Проверен
	               |					И ЗаказПокупателя.Проведен
	               |					И Номенклатура В (ВЫБРАТЬ вт.Номенклатура ИЗ ВТ_ЧерныйСписок КАК вт) ) КАК ЗаказыПокупателейОстатки
	               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
				   |   ГДЕ
				   |  ТоварыНаСкладахОстатки.КоличествоОстаток - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) > 0
	               |;
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ЧерныйСписок";
	Запрос.УстановитьПараметр("КонтрЧерныйСписок", КонтрЧерныйСписок);
	Запрос.УстановитьПараметр("Ярославль", справочники.Подразделения.ПустаяСсылка() );  //для Ярославля - пустое!
	Результат = Запрос.Выполнить();
	рез = Результат.Выгрузить();
	возврат рез;
КонецФункции

//+++ 07.08.2018 --- уже автоПодтвержденные заказы ---
//при выходе товара из черного списка
//ВСЕ товары из черного списка ушли?!
функция получитьЗаказыЧернСписок(КонтрЧерныйСписок=неопределено, списТов=неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	               |	ЗаказПокупателяТовары.Размещение КАК Размещение,
	               |	ЕСТЬNULL(НоменклатураИмпорт.ЧерныйЛист, ЛОЖЬ) КАК ТоварЧернСписок,
	               |	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(	,
	               |			ЗаказПокупателя.Поставщик = &КонтрЧерныйСписок
				   |//тов  		И Номенклатура в (&СписТов)
	               |			И ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗаказов.Подтвержден)) КАК ЗаказыПокупателейОстатки
				   
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	               |		ПО ЗаказыПокупателейОстатки.Номенклатура = ЗаказПокупателяТовары.Номенклатура
				   |			И ЗаказыПокупателейОстатки.ЗаказПокупателя = ЗаказПокупателяТовары.Ссылка
				   
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт
	               |		ПО ЗаказыПокупателейОстатки.Номенклатура = НоменклатураИмпорт.Номенклатура
	               |ГДЕ
	               |	ЗаказПокупателяТовары.Размещение = &СкладАнгарТест
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаказПокупателя
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура)
	               |ПО
	               |	ЗаказПокупателя
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
 		     
Если списТов<>неопределено тогда
	Запрос.УстановитьПараметр("списТов",списТов);
	запрос.Текст = стрЗаменить(запрос.Текст, "//тов", "");
КонецЕсли;	

Если КонтрЧерныйСписок=неопределено тогда
	КонтрЧерныйСписок = справочники.Контрагенты.НайтиПоКоду("П018280");
КонецЕсли;

	Запрос.УстановитьПараметр("КонтрЧерныйСписок", КонтрЧерныйСписок);
	Запрос.УстановитьПараметр("СкладАнгарТест", справочники.Склады.НайтиПоКоду("02332") ); //Ангар-Ремонт Тест (запрещенный!)
	Результат = Запрос.Выполнить();
	выборкаЗак = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	возврат выборкаЗак;
 КонецФункции

 //07.08.2018 --- Задача № 52100 --- 
 //п.5. Контроль изменения чёрного списка - в процедуре проверки заказов поставщиков : 
 //при выходе товара из черного списка - меняем статус заказа и убираем товары в ожидании, 
 // при "попадании" товара в черн.список - проделенные заказы не трогаем?! 
 //
 Процедура ПроверкаЗаказовЧерныйСписок() Экспорт
	КодПоставщика = "П018280";
	КонтрЧерныйСписок = справочники.Контрагенты.НайтиПоКоду(КодПоставщика);
	
	Если НЕ ЗагружатьОстаткиИЦеныПоставщика(КонтрЧерныйСписок) Тогда  //выключалка - прямо здесь!
	 возврат;
    КонецЕсли; 

	выборкаЗаказов = получитьЗаказыЧернСписок(КонтрЧерныйСписок);
	
	пока выборкаЗаказов.Следующий() цикл
		зак1 = выборкаЗаказов.ЗаказПокупателя;
		
		попытка
		
		закОб = зак1.ПолучитьОбъект();
		
		//==========Подтвержден или Частично==============
		выборкаТов = выборкаЗаказов.Выбрать();
		
		ВсеТоварыВышлиИзЧерногоСписка = Истина;
		Пока выборкаТов.Следующий() цикл
			стр1 = закОб.Товары.Найти(выборкаТов.Номенклатура, "Номенклатура");	
			Если выборкаТов.ТоварЧернСписок тогда //Есть ещё товары в черном списке!
				//обратное "включение" в черный список
				стр1.Размещение = справочники.Склады.НайтиПоКоду("02332");  //Ангар-Ремонт Тест (запрещенный!)
				ВсеТоварыВышлиИзЧерногоСписка = ЛОЖЬ;
			Иначе
			   	стр1.Размещение = неопределено;
			КонецЕсли;
		КонецЦикла;
		
		//из Подтвержден >> обычный заказ! чистим все статусы
		Если ВсеТоварыВышлиИзЧерногоСписка тогда
			закОб.Статус = перечисления.СтатусыЗаказов.ПустаяСсылка(); 
			закОб.Поставщик = справочники.Контрагенты.ПустаяСсылка();
			закОб.Согласован = ложь;
			
		//+++ 14.08.2018 --- изменение даты, даты отгрузки и статуса---
			закОб.Дата = ТекущаяДата();
			закОб.ДатаОтгрузки = ТекущаяДата();
			обЗаписатьПротоколИзменений(закОб, ЛОЖЬ);  //изменение 
			
			//без перепроведения!?
			закОб.ОбменДанными.Загрузка = Истина;
			закОб.Записать();  					
			закОб.ОбменДанными.Загрузка = ЛОЖЬ;
			

		//сами удаляем ВСЕ товары в ожидании по Заказу
			регВОжидании = РегистрыНакопления.ТоварыВОжиданииОтПоставщика.СоздатьНаборЗаписей();
			регВОжидании.Отбор.Регистратор.Установить( зак1 );
			регВОжидании.Записать(); // удаляет все записи по заказу!
		
		 #Если Клиент тогда
		   сообщить("Вышел из чёрного списка документ: "+строка(закОб) );
		 #КонецЕсли	
		
		 Иначе //не всё ещё...
			 //статус НЕ меняется! перепроводим заказ (изменяются товары в ожидании)
			 
			 //+++ 14.08.2018 --- изменение товаров - размещение... 
			//обЗаписатьПротоколИзменений(закОб, ЛОЖЬ);  //изменение 
			 
			 закОб.Записать(РежимЗаписиДокумента.Проведение); 
			 #Если Клиент тогда
			   сообщить("Изменен документ: "+строка(закОб) );
			 #КонецЕсли	
		 КонецЕсли;
		
		исключение
			#Если Клиент тогда
				сообщить("Ошибка изменения документа: "+строка(зак1)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание );
			#КонецЕсли	
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры //ПроверкаЗаказовЧерныйСписок()

//+++ 14.05.2018 ===========Автомасла==============
функция ПолучитьСписТов( Папка1,Контрагент1)  //10.12.2018
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	Номенклатура.Ссылка
|ИЗ
|	Справочник.Номенклатура КАК Номенклатура
|ГДЕ
|	Номенклатура.Ссылка В ИЕРАРХИИ (&Папка1)
|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
//ПолучитьСпискиОграниченийПоАксам	
	|   //НомГр И не Номенклатура.НоменклатурнаяГруппа В(&СписокНомГр)
	|   //Папки И не Номенклатура.ссылка В иерархии(&СписокПапок)
	|   //Номен И не Номенклатура.ссылка В(&СписокНоменклатуры)
|";
Запрос.УстановитьПараметр("Папка1", Папка1);

	СписокНомГр = Новый СписокЗначений;
	СписокПапок = Новый СписокЗначений;
	СписокНоменклатуры = Новый СписокЗначений;
	
	ПолучитьСпискиОграниченийПоАксам(СписокНомГр, СписокПапок, СписокНоменклатуры, Контрагент1);  //10.12.2018

	Если СписокНомГр.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//НомГр","");
		Запрос.УстановитьПараметр("СписокНомГр",СписокНомГр);
	КонецЕсли;
	
	Если СписокПапок.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//Папки","");
		Запрос.УстановитьПараметр("СписокПапок",СписокПапок);
	КонецЕсли;
	
	Если СписокНоменклатуры.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//Номен","");
		Запрос.УстановитьПараметр("СписокНоменклатуры",СписокНоменклатуры);
	КонецЕсли;
//+++)

Результат = Запрос.Выполнить();
табл3 = результат.Выгрузить();
масТов = табл3.ВыгрузитьКолонку("Ссылка");
возврат масТов;
КонецФункции

Процедура ЗаписатьНоменклатуруБерга( табл2 )
  Берг   = справочники.Контрагенты.НайтиПоКоду("П000727");
  для каждого стр2 из Табл2 цикл
  регСв = РегистрыСведений.НоменклатураКонтрагентов.СоздатьМенеджерЗаписи();
  регСв.Контрагент = Берг;
  регСв.Номенклатура = стр2.Номенклатура;
  регСв.КодНоменклатурыКонтрагента = стр2.Код;
  регСв.НаименованиеНоменклатурыКонтрагента = стр2.Наименование;
  //регСв.АртикулНоменклатурыКонтрагента = стр2.Артикул;
  //регСв.ЕдиницаНоменклатурыКонтрагента = строка(стр2.Номенклатура.ЕдиницаХраненияОстатков);
  //регСв.ШтрихКодНоменклатурыКонтрагента=
  //регСв.Идентификатор = 
  регСв.Записать();
  КонецЦикла;
 КонецПроцедуры

функция загрузитьТоварБерг(Артикул="1100", Брэнд="MANNOL")
	
   Key1 = "604022ee4a22bc74b167407019525683508c8d38f080ed32c50a08c4d06204e5";
   ФайлРезультата = "c:\berg_yar1.XML";
   СкладЯр = "BERG YAR";
   
   Табл1 = новый ТаблицаЗначений;
   Табл1.Колонки.Добавить("Склад");
   Табл1.Колонки.Добавить("Остаток");
   Табл1.Колонки.Добавить("Цена");
      
   стр2 = новый Структура("Склад, Остаток, Цена, Код, Наименование", "", 0, 0, "", "");
   
попытка
	WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
	WinHttp.Open("GET", "https://api.berg.ru/ordering/get_stock.xml?items[0][resource_article]="+Артикул+"&items[0][brand_name]="+Брэнд+"&key="+Key1,0);
	WinHttp.Send();
	
	Ответ = WinHttp.ResponseText();
	
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлРезультата,"UTF-8");
	
исключение
	#Если Клиент тогда
		Сообщить(Артикул+" "+Брэнд+" Ошибка получения: "+ОписаниеОшибки(), СтатусСообщения.Внимание );
	#КонецЕсли	
КонецПопытки;


//-------------------------------------------------	


попытка
чтение=новый ЧтениеXML;
чтение.ОткрытьФайл(сокрЛП(ФайлРезультата));
пока чтение.Прочитать() цикл
	
	Если Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента и Чтение.Имя="resource" тогда
		//<resource id="184700417" article="550040164" name="Масло моторное синтетическое Helix Ultra 0W-30 1л 550040164" source_idx="0">	  
	  пока Чтение.ПрочитатьАтрибут() цикл
		  Если Чтение.Имя="id" тогда
			  стр2.Код = Чтение.Значение;
		  ИначеЕсли Чтение.Имя="name" тогда
			  стр2.Наименование = Чтение.Значение;
		  КонецЕсли;	  
	  конеццикла;
	  
	ИначеЕсли Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента и  Чтение.Имя="offer" тогда
		 //<offer price="211.52" quantity="62" available_more="false" reliability="100" multiplication_factor="1" average_period="0" assured_period="0" delivery_type="1" is_transit="false">
		стр1 = Табл1.Добавить();
	  пока Чтение.ПрочитатьАтрибут() цикл
		  если Чтение.Имя="price" тогда
		    стр1.Цена = число(Чтение.Значение);
		  ИначеЕсли Чтение.Имя="quantity" тогда
		    стр1.Остаток = число(Чтение.Значение);
		  КонецЕсли;	
	  конеццикла;
	  
  	Иначеесли Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента и  Чтение.Имя="warehouse" тогда  
         // <warehouse id="51" name="BERG YAR" type="1"/>
	  пока Чтение.ПрочитатьАтрибут() цикл
		  если Чтение.Имя="name" тогда
			  стр1.Склад = Чтение.Значение;
		  КонецЕсли;	  
	  конеццикла;
  	КонецЕсли;  
		
конецЦикла;

		для ii=0 по Табл1.Количество()-1 цикл
			Если Табл1[ii].Склад = СкладЯр тогда
			стр2.Склад = СкладЯр;
			стр2.Остаток = Табл1[ii].Остаток;
			стр2.Цена = Табл1[ii].Цена;
				прервать;
			КонецЕсли;
		КонецЦикла;
исключение
	#Если Клиент тогда
	Сообщить(Артикул+" "+Брэнд+" Ошибка при чтении: "+ОписаниеОшибки(), СтатусСообщения.Внимание );
	#КонецЕсли	
КонецПопытки;
		
чтение = неопределено;
Текст  = неопределено;

возврат стр2;
КонецФункции

//+++ 07.08.2018 Задача № 52100 - чёрный список в остатки стор.поставщика


//+++( 21.05.2018 ==========================================================
функция получитьЗаказыБерга()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки( ,
	|			ЗаказПокупателя.Поставщик = &Берг
	//|				И ЗаказПокупателя.Проверен = ЛОЖЬ
	|				И ЗаказПокупателя.Статус =значение(перечисление.СтатусыЗаказов.ВОбработке) ) КАК ЗаказыПокупателейОстатки";
    Берг = справочники.Контрагенты.НайтиПоКоду("П000727");
	Запрос.УстановитьПараметр("Берг", Берг);
	Результат = Запрос.Выполнить();
	табл = результат.Выгрузить();
	мас = табл.ВыгрузитьКолонку("ЗаказПокупателя");
	возврат мас;
 КонецФункции
 
Процедура ПроверкаЗаказовБерг()
	масЗаказов = получитьЗаказыБерга();
	
	для ii=0 по масЗаказов.Количество()-1 цикл
		зак1 = масЗаказов[ii];
        резОтвет = "№"+строка(зак1.Номер);
		резОтвет = СоздатьЗаказБерг(зак1);
		
		закОб = зак1.ПолучитьОбъект();
		 
		Если лев(резОтвет,1) = "№" тогда
		 	
		 	если зак1.ДатаОтгрузки='00010101' тогда
				закОб.ДатаОтгрузки = КонецДня(ТекущаяДата())+1; //на завтра!
			КонецЕсли;	

			попытка
				 закОб.Проверен = истина;
				 закОб.Статус   = Перечисления.СтатусыЗаказов.Подтвержден;
				 //закОб.НомерВходящегоДокумента = резОтвет;
				 //закОб.ДатаВходящегоДокумента  = НачалоДня(ТекущаяДата());
				 закОб.ВремяНапоминания   = ТекущаяДата(); // дата последнего изменения документа 
					//  числоДней = Окр( (закОб.ДатаОтгрузки - началоДня(ТекущаяДата()) )/86400 );
				 закОб.Комментарий  = "СОЗДАН зак."+резОтвет+" # " + закОб.Комментарий; // есть заказ поставщику!
				 закОб.Записать(РежимЗаписиДокумента.Проведение);  //создаётся заказ поставщику...
			исключение
			КонецПопытки;
			
		Иначе //отметка об ошибке... в самом заказе 
			#Если Клиент тогда
				Сообщить(резОтвет, СтатусСообщения.Внимание );
		    #КонецЕсли	

			попытка
			 	 закОб.Статус = перечисления.СтатусыЗаказов.Отменен;
				 i = найти(резОтвет,"<error code");
				 если i>0 тогда
				   резОтвет = прав( резОтвет, стрДлина(резОтвет) - i );//29.06.2018
			 	 КонецЕсли;
			 	закОб.Комментарий = "ОТКАЗАНО "+формат(ТекущаяДата(),"ДФ='dd.MM.yyyy HH:mm'")+" # "+закОб.Комментарий+"
				 |Причина отказа: "+резОтвет;//+++ 14.06.2018 - чтобы видеть что там пишет Берг!
				 
				 закОб.ОбменДанными.Загрузка = истина;
				 закОб.Записать();  //запись без перепроведения
				 закОб.ОбменДанными.Загрузка = ЛОЖЬ;
			исключение
			КонецПопытки;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры


функция СоздатьЗаказБерг(Зак1) 
резОтвет = "";

  Key1 = "604022ee4a22bc74b167407019525683508c8d38f080ed32c50a08c4d06204e5";
  ФайлТелаЗапроса = "c:\berg_yar_zak.XML";
  ФайлРезультат   = "c:\berg_yar_zak_otvet.xml";
  
  warehouse_id  = "51"; //BERG YAR
  dispatch_type = "3";	//	Тип отгрузки ( 2 — самовывоз, 3 — доставка )
 //dispatch_at	+	Дата ДатаОтгрузки ( в формате ГГГГ-ММ-ДД )
 
 //+++ 16.11.2018 - всегда на завтра (до 14-00 - на утро, с 14-00-01  на вечер, после 15-00!)
 ДатаОтгрузкиБерг = КонецДня( ТекущаяДата() )+1; 
 dispatch_at = формат(Год(ДатаОтгрузкиБерг),"ЧГ=0")+"-"+формат(месяц(ДатаОтгрузкиБерг),"ЧЦ=2; ЧВН=")+"-"+формат(день(ДатаОтгрузкиБерг),"ЧЦ=2; ЧВН=");
 текВремя = ( ТекущаяДата()-НачалоДня(ТекущаяДата()) ); 
 dispatch_time= ?( текВремя<14*3600, 1, 2);    //если текущее время - до обеда, то на завтра до обеда 1-до 15-00, иначе 2 - после 15-00

 shipment_address_id="90255";   //# 1:  телефоны: 89201280590/89201276067
 person = "Robot1C"; 	// "Наталья/Валерий"
Коммент = "Order: "+строка(Зак1.Номер);  
is_test ="0";  //+++ В ЖИВУЮ +++ !

попытка
	login = "ogorodnikov";
	password = "berg8153";
	SSL = ЛОЖЬ;
	
	HTTP = Новый HTTPСоединение("api.berg.ru", , login, password, , SSL); 
	СсылкаНаРесурс = "/ordering/place_order.xml?key="+Key1;
	
ТекстЗапроса = "<?xml version=""1.0"" encoding=""UTF-8""?>
|<result force=""1"">
|	<order dispatch_type="""+dispatch_type+""" dispatch_at="""+dispatch_at+""" dispatch_time="""+dispatch_time+""""
+?(dispatch_type="3", " shipment_address_id="""+shipment_address_id+"""","") 
       +" person="""+person+""" comment="""+Коммент+""" is_test="""+is_test+""">
|		<items>";

//=============================Цикл по товарам================================================
Для каждого стр1 из Зак1.Товары цикл
	КодБерга    = НайтиКодБерга(стр1.Номенклатура);
	Если КодБерга = "" тогда // нечего заказывать!
		резОтвет = резОтвет+  "---> Нет кода для товара "+стр1.Номенклатура.Код+" "+строка(стр1.Номенклатура)+"
		|";
		продолжить;
	КонецЕсли;
	ЦенаЗакупки = ПолучитьЦенуЗакупки(стр1.Номенклатура);
	ЦенаЗакупки = ?(ЦенаЗакупки=0, стр1.Цена / 1.05, ЦенаЗакупки);
	
	комментТов  = "art."+сокрЛП(стр1.Номенклатура.Артикул);

	ТекстЗапроса = ТекстЗапроса +"
	|			<item resource_id="""+КодБерга+""" warehouse_id="""+warehouse_id+""" quantity="""+строка(стр1.Количество)
						+""" comment=""" +комментТов +""" max_price="""+формат(ЦенаЗакупки,"ЧДЦ=2; ЧРД=.; ЧГ=0")+"""/>";
КонецЦикла;

ТекстЗапроса = ТекстЗапроса +"
|		</items>
|	</order>
|</result>";

	ТекстФайл = Новый ТекстовыйДокумент; 
	ТекстФайл.УстановитьТекст(ТекстЗапроса); 
	ТекстФайл.Записать(ФайлТелаЗапроса, КодировкаТекста.UTF8); 
	
	// Получим размер данных для передачи в заголовок 
	ФайлНаОтправку = Новый Файл(ФайлТелаЗапроса); 
	РазмерФайлаНаОтправку = XMLСтрока(ФайлНаОтправку.Размер()); 
	// Получим временный файл — тело ответа POST запроса ФайлРезультат = ПолучитьИмяВременногоФайла(); 
	// Заголовок создадим в виде соответствия 
	ЗаголовокЗапросаHTTP = Новый Соответствие(); 
	// Передаем в заголовках размер и тип данных на отправку 

	ЗаголовокЗапросаHTTP.Вставить("Content-Length", РазмерФайлаНаОтправку);
	ЗаголовокЗапросаHTTP.Вставить("Content-Type", "application/xml");  //; charset=utf-8
	// Отсылаем POST запрос на обработку. 
	// СсылкаНаРесурс — ссылка на веб-сервер (страницу), к которой посылается POST запрос 
	HTTP.ОтправитьДляОбработки(ФайлТелаЗапроса, СсылкаНаРесурс, ФайлРезультат, ЗаголовокЗапросаHTTP); 
	
	// Получим ответ 
	ТекстовыйФайлОтвета = Новый ТекстовыйДокумент; 
	ТекстовыйФайлОтвета.Прочитать(ФайлРезультат, КодировкаТекста.UTF8); 
	СтрокаОтветаСервера = ТекстовыйФайлОтвета.ПолучитьТекст(); 
	#Если Клиент тогда
		сообщить(СтрокаОтветаСервера, СтатусСообщения.Информация);
	#КонецЕсли	
	
	Если найти(СтрокаОтветаСервера,"error")>0 тогда // любая ошибка - заказ не создаётся!
		резОтвет = СтрокаОтветаСервера;
	иначе
		ii=найти(СтрокаОтветаСервера,"<order id="); //<order id="2232312"
		Если ii>0 тогда
			стр1 = прав(СтрокаОтветаСервера, стрДлина(СтрокаОтветаСервера)-ii-9-1); // 2232312"
			ном1 = лев(стр1, найти(стр1, """")-1);
			резОтвет ="№"+ном1;
		иначе //ошибок нет, но и заказа тоже нет?!
			резОтвет ="№.....";
		КонецЕсли;	
	КонецЕсли;
	
исключение
	резОтвет = резОтвет+ " Ошибка при создании заказа БЕРГ: "+ОписаниеОшибки();
КонецПопытки;

возврат резОтвет;
КонецФункции

функция НайтиКодБерга(тов1)
	рез = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента как Код
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Контрагент = &Берг
	|	И НоменклатураКонтрагентов.Номенклатура = &Номенклатура";
	Берг = справочники.Контрагенты.НайтиПоКоду("П000727");
	Запрос.УстановитьПараметр("Берг", Берг);
	Запрос.УстановитьПараметр("Номенклатура", тов1);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		рез = выборка.Код;
	КонецЕсли;
	
	возврат рез;
КонецФункции

функция ПолучитьЦенуЗакупки(тов1)
	рез=0;
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ЦеныНоменклатурыСрезПоследних.Цена
|ИЗ
|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
|ГДЕ
|	ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен
|	И ЦеныНоменклатурыСрезПоследних.Номенклатура = &Номенклатура";
Запрос.УстановитьПараметр("ТипЦен", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00001") );
Запрос.УстановитьПараметр("Номенклатура", тов1);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
Если выборка.Следующий() тогда
	рез = выборка.Цена;
КонецЕсли;
возврат рез;
КонецФункции
//+++)




 //--------------в тестовом режиме! Создавать заказы = ложь!--------------------------------------------
// СоздаватьЗаказы = ЛОЖЬ  означает создание заказов в Пауэре в тестовом режиме...
// СоздаватьЗакПост = Истина означает, что будет создаваться 1 зак.поставщику Пауэр за 1 день и туда будут писаться все товары по заказам!
//					одновременно в заказе покупателя - указывается размещение = зак.пост	
//--------------------------------------------------
//	ЗаказПокупателя.Поставщик = &Пауэр
//|	И ЗаказПокупателяТовары.Статус = &ПустойСтатусСтроки
//         
Процедура ПауэрПроверкаЗаказовПокупателей(знач НачПериода='00010101', знач КонПериода='00010101', ТестовыйЗаказ = ЛОЖЬ, СоздаватьЗакПост = Истина) Экспорт
	
	 Пауэр = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7703247653");
	   URL = "https://pro.4tochki.ru/";
	 login = константы.ПауэрWebСервисЛогин.Получить();
	 pass  = Константы.ПауэрWebСервисПароль.Получить();
	 
//запрос по заказам для списания по ФИФО, сортировка по дате и номеру документа
Запрос=Новый Запрос;
    Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
                 |	ЗаказыПокупателей.ЗаказПокупателя
                 |ИЗ
                 |	РегистрНакопления.ЗаказыПокупателей.Обороты(&НачДата,&КонДата,,
                 |			НЕ ЗаказПокупателя.Проверен
                 |				И ЗаказПокупателя.Поставщик = &Пауэр
                 |				И ЗаказПокупателя.Статус = &ПодтвержденПокупателем) КАК ЗаказыПокупателей
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |	ЗаказыПокупателей.ЗаказПокупателя
                 |АВТОУПОРЯДОЧИВАНИЕ";

 Если НачПериода='00010101' Тогда  // за месяц!
	 НачПериода=ДобавитьМесяц(ТекущаяДата(), -1);
 КонецЕсли;	
 Запрос.УстановитьПараметр("НачДата",НачПериода );
 
 Если КонПериода='00010101' Тогда
	 КонПериода=КонецДня(ТекущаяДата());
 КонецЕсли;	 
 Запрос.УстановитьПараметр("КонДата",КонПериода );  // за 1 сек.
 
 //------------------все три статуса - еще не до конца обработаны и требуют проверки----------------------------
 //Запрос.УстановитьПараметр("ПустойСтатусСтроки", перечисления.СтатусыСтрокЗаказа.ПустаяСсылка() );
 Запрос.УстановитьПараметр("ПодтвержденПокупателем", перечисления.СтатусыЗаказов.ПодтвержденПокупателем );
 
 Запрос.УстановитьПараметр("Пауэр",Пауэр);

 массивЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказПокупателя");
 
 Если массивЗаказов.Количество()=0 Тогда // нет заказов для создания
	 #Если Клиент Тогда
	 сообщить("--- Нет Новых, В обработке или Частично Подтвержденных Заказов покупателя для товаров с поставщиком "+строка(Пауэр)+" за период с "+строка(НачПериода)+" по "+строка(КонПериода)+" ---", СтатусСообщения.Внимание);
	 #КонецЕсли
	 Возврат;	 
 иначе
	 #Если Клиент Тогда
	 сообщить(" "); 
	 сообщить(строка(ТекущаяДата())+" Начало обработки "+строка(массивЗаказов.Количество())+" заказов покупателей для товаров с поставщиком "+строка(Пауэр)+" за период с "+строка(НачПериода)+" по "+строка(КонПериода)+"...");
	 #КонецЕсли
 КонецЕсли;	 

 //=========================================================================================================
 Proxy = WSСсылки.СервисДляКлиентов.СоздатьWSПрокси(URL, "ClientService", "BasicHttpBinding_ClientService");
 Proxy.Пользователь = login;
 Proxy.Пароль		= pass;
 //Proxy.ТочкаПодключения.Месторасположение = "httpS://pro.4tochki.ru/ClientService.svc";
 Фабрика = Proxy.ФабрикаXDTO;
  
 N=массивЗаказов.Количество();
 для i=0 по N-1 Цикл
	 заказНаПроверку = массивЗаказов[i].ПолучитьОбъект();
	 
	 Товары  = Фабрика.Создать(Фабрика.Тип(URL, "ArrayOfOrderProductData")); // создаем новый для каждого заказа!
	 
 	 для каждого стр1 из заказНаПроверку.Товары Цикл
		 Если стр1.Статус=перечисления.СтатусыСтрокЗаказа.ПустаяСсылка() и заказНаПроверку.Поставщик = Пауэр Тогда
			 Товар = Фабрика.Создать( Фабрика.Тип(URL, "OrderProductData") );

			КодТовараПауэр = ПолучитьКодНоменклатурыПоставщика(Пауэр, стр1.Номенклатура);
			Если  КодТовараПауэр<>"" Тогда
			 Товар.CAE 		 = КодТовараПауэр;
			 Товар.Quantity  = стр1.Количество; 
			 Товар.Warehouse = 1; // склад с которого забираем - фикс: 1-опт, 3,4 - склад 3 или 4
			 Товары.OrderProductData.Добавить(Товар);
		 	Иначе
			//стр1.ПодтвержденУПоставщика = -1;	
			стр1.статус = перечисления.СтатусыСтрокЗаказа.Отменен;
			#Если Клиент Тогда
	 			сообщить(строка(стр1.НомерСтроки)+") строка -> Не найден Код товара для Номенклатуры: "+строка(стр1.Номенклатура.Код)+") "+строка(стр1.Номенклатура), СтатусСообщения.Внимание); 
			#КонецЕсли	  
				попытка //запишем заказ покупателя сразу!
					заказНаПроверку.Записать();
				исключение
				КонецПопытки;	
			КонецЕсли; 
		 
		 КонецЕсли;
	 КонецЦикла;	
	 	 
	#Если Клиент Тогда
	 сообщить("-> Заказ покупателя № "+строка(заказНаПроверку.Номер)+" >> создается заказ в Пауэр!"); 
    #КонецЕсли	  
	 
  	Попытка
		//http://www.w3.org/2001/XMLSchema
		//login =  Фабрика.Создать(Фабрика.Тип("http://www.w3.org/2001/XMLSchema", "string"));
		//pass  =  Фабрика.Создать(Фабрика.Тип("http://www.w3.org/2001/XMLSchema", "string"));
		//isTestOrder =  Фабрика.Создать(Фабрика.Тип("http://www.w3.org/2001/XMLSchema", "boolean"));
		
		orderProducts = Товары;
		
		Ответ = Proxy.CreateOrder(orderProducts, login, pass, ТестовыйЗаказ, ,,,,,,,,, );  //+++ 08.12.2014 !!! ЗАПЯТЫЕ ОБЯЗАТЕЛЬНО!
		 
	исключение	 
		 #Если Клиент Тогда
		 сообщить("Ошибка создания заказ в Пауэр: "+ОписаниеОшибки(), СтатусСообщения.Внимание); 
	     #КонецЕсли	 
	//	 продолжить;
	КонецПопытки; 

//---------------изменение заказа-------------------
	закОб = заказНаПроверку;
	Если Ответ.Success Тогда
		  #Если Клиент Тогда
			сообщить("		Создан Заказ в Пауэр: "+Ответ.OrderNumber, СтатусСообщения.Информация );
		 	сообщить("		Заказ в web-интерфейсе: "+Ответ.URL, СтатусСообщения.Информация );
		  #КонецЕсли
		
  Если СоздаватьЗакПост Тогда 
		 ЗакПост = документы.ЗаказПоставщику.СоздатьДокумент();
		 
		 ЗакПост.Дата 			 = ТекущаяДата();         // тут специально так!
		 ЗакПост.ДатаПоступления = заказНаПроверку.ДатаОтгрузки; // тут специально так!
		 //------------не пустая дата оплаты!------------
		 ЗакПост.ДатаОплаты      = ?(ЗакПост.ДатаПоступления='00010101',заказНаПроверку.Дата+7*86400, ЗакПост.ДатаПоступления);
		 
		 ЗакПост.Организация = справочники.Организации.НайтиПоКоду("00001");
		 ЗакПост.Контрагент  = Пауэр;
		 ЗакПост.ДоговорКонтрагента = ?(Пауэр.ОсновнойДоговорПоставки.Пустая(), Пауэр.ОсновнойДоговорКонтрагента, Пауэр.ОсновнойДоговорПоставки);
		 ЗакПост.Склад = справочники.Склады.НайтиПоНаименованию("1");
		 
		 ЗакПост.ВалютаДокумента = справочники.Валюты.НайтиПоКоду(643);
		 ЗакПост.КратностьВзаиморасчетов = 1;
		 ЗакПост.КурсВзаиморасчетов = 1;
		 
		 ЗакПост.УчитыватьНДС     = истина;
		 ЗакПост.СуммаВключаетНДС = истина;
		 ЗакПост.Комментарий = Ответ.OrderNumber+" #";
		 
		 //+++ 10.12.2014
		 глТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		 параметрыСеанса.ТекущийПользователь = глТекущийПользователь; //26.05.2017
		 ЗакПост.Ответственный = глТекущийПользователь;
			 
		 попытка
			 закПост.Записать(); //--------------------просто создаётся без товаров сначала----------------
		 исключение
		    #Если Клиент  Тогда
		 	сообщить("При записи заказа поставщику: " + строка(Пауэр)+" по "+строка(закОб)+" Возникла Ошибка: "+ОписаниеОшибки(), СтатусСообщения.Внимание );
 	        #КонецЕсли	 
	 	 КонецПопытки;
 КонецЕсли;	 
		  
		для каждого стр1 из закОб.Товары Цикл  //товары ТОЛЬКО с 0 статусом - подтверждаются!
			Если стр1.Статус = перечисления.СтатусыСтрокЗаказа.ПустаяСсылка()
				и стр1.Размещение = Неопределено Тогда //и стр1.Поставщик = Пауэр Тогда
				
					стр1.Статус = перечисления.СтатусыСтрокЗаказа.ПустаяСсылка();
				
				Если СоздаватьЗакПост Тогда
					стр2 = ЗакПост.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(стр2, стр1);
					стр2.ЗаказПокупателя = закОб.Ссылка; //-----------------------ссылка на заказ покупателя!--------------------
					
					отбор1 = новый Структура;
					отбор1.Вставить("Контрагент", Пауэр);
					отбор1.Вставить("Номенклатура", стр1.Номенклатура);
					регСв = РегистрыСведений.ЦеныНоменклатурыПоставщиков.Получить(отбор1);
					Если регСв<>Неопределено Тогда
						стр2.Цена = регСв.Цена;
					Иначе // быть такого не может!
						стр2.Цена = 1;
					КонецЕсли;
					
					стр2.Сумма = стр2.Цена * стр2.Количество;
					
					стр2.СтавкаНДС = СтавкаНДСнаДату(ТекущаяДата());
					СтавкаНДС = ПолучитьСтавкуНДС(СтавкаНДСнаДату(ТекущаяДата()));
					стр2.СуммаНДС  = стр2.Сумма * СтавкаНДС/(100 + СтавкаНДС);
					
					стр2.Коэффициент = 1;
					стр2.КоличествоМест = стр2.Количество;
					стр2.Статус = перечисления.СтатусыСтрокЗаказа.ПустаяСсылка();		
					
					стр1.Размещение = ЗакПост.Ссылка;	// ссылки еще нет! только в заказе поставщика!
					
				КонецЕсли;

			КонецЕсли;	
		КонецЦикла;	
	    закОб.Комментарий = строка(ТекущаяДата())+" Пауэр >> заказ № "+Ответ.OrderNumber+"
		|"+закОб.Комментарий;
		
		  закОб.Статус = перечисления.СтатусыЗаказов.ВОбработке;
		закПост.Статус = перечисления.СтатусыЗаказов.ВОбработке;

		////+++ НЕ фиксируем в заказе, а храним в регистре уже созданных заказов!!!
		//закОб.НомерВходящегоДокументаЭлектронногоОбмена = Ответ.OrderNumber;
		//закОб.ДатаВходящегоДокументаЭлектронногоОбмена  = ТекущаяДата();
		
					
	ИначеЕсли СокрЛП(Ответ.Error)="" Тогда // без ошибок НЕ создан заказ   - error>> errorCode
		для каждого стр1 из закОб.Товары Цикл
			//Если стр1.ПодтвержденУПоставщика=0 Тогда и стр1.Поставщик = Пауэр Тогда
			//	стр1.ПодтвержденУПоставщика = -1;
			Если стр1.Статус = перечисления.СтатусыСтрокЗаказа.ПустаяСсылка() Тогда
				стр1.Статус = перечисления.СтатусыСтрокЗаказа.Отменен;
			КонецЕсли;
		КонецЦикла;
		закОб.Комментарий = строка(ТекущаяДата())+" Пауэр - товары НЕ подтверждены!
		|"+закОб.Комментарий;
		закОб.НомерВходящегоДокументаЭлектронногоОбмена = "";
		закОб.ДатаВходящегоДокументаЭлектронногоОбмена  = '00010101';
		
		табЗнач = закОб.Товары.выгрузить();
		табЗнач.Свернуть("Статус");
		
		Если табЗнач.Количество()=1 Тогда
			закОб.Статус = перечисления.СтатусыЗаказов.Отменен;
		Иначе //не все отменено
			закОб.Статус = перечисления.СтатусыЗаказов.ВОбработке;
		КонецЕсли;	
		
	 Иначе	
		 #Если Клиент Тогда
		   сообщить("		Ошибка при создании Заказа в Пауэре: "+строка(Ответ.Error), СтатусСообщения.Внимание);
		#КонецЕсли	 
		закОб.Комментарий = строка(ТекущаяДата())+" проверка Пауэр - получена ошибка: "+Ответ.errorCode+"
		|"+закОб.Комментарий;
	 КонецЕсли;
	 
	 попытка
		 
		 //-------------запись Заказа Покупателя в режиме обмена---------------
		 закОб.ОбменДанными.Загрузка = истина; 
		 закОб.Записать(); 
		 закОб.ОбменДанными.Загрузка = ЛОЖЬ; 
		 
		 
		 Если СоздаватьЗакПост Тогда // записываем заказ поставщика
         	ЗакПост.Записать(РежимЗаписиДокумента.Проведение);	
			
			#Если Клиент  Тогда
				Если Ответ.Success Тогда
		 			сообщить("На основании: " + строка(ЗакОб)+" Успешно создан заказ в Пауэр: "+СокрЛП(Ответ.OrderNumber)+" И Создан: "+Строка(ЗакПост), СтатусСообщения.Информация );
				Иначе
					сообщить("На основании: " + строка(ЗакОб)+" Создан: "+Строка(ЗакПост)+" ( Заказ в системе Пауэр - НЕ СОЗДАВАЛСЯ!)", СтатусСообщения.Внимание );
				КонецЕсли; 
	   		#КонецЕсли	 
			
				Если Ответ.Success Тогда
				регСв = РегистрыСведений.СписокУжеСозданныхЗаказов.СоздатьМенеджерЗаписи();
				регСв.Поставщик = Пауэр;
				регСв.ЗаказПокупателя = закОб.ссылка;
				
				регСв.НомерДокумента  = СокрЛП(Ответ.OrderNumber);
				регСв.ДатаДокумента   = ЗакПост.Дата;
				регСв.Записать(Истина);
                КонецЕсли;
	
		 КонецЕсли;
		
	 исключение
        ЗакПост.Записать();	
		 #Если Клиент  Тогда
		 сообщить("При записи: " + строка(закОб)+" Возникла Ошибка: "+ОписаниеОшибки(), СтатусСообщения.Внимание );
 	    #КонецЕсли	 
	 КонецПопытки;
	
 КонецЦикла;
 
 сообщить("-------------Завершена обработка "+строка(N)+" заказов покупателей для поставщика Пауэр");
 
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
Процедура GetALLStatusTypes() экспорт
	
	   URL = "";//константы.ПауэрWebСервисURL.Получить();
		Прокси = WSСсылки.СервисДляКлиентов.СоздатьWSПрокси(URL, "ClientService", "BasicHttpBinding_ClientService");
		Фабрика = Прокси.ФабрикаXDTO;
		
		Ответ = Прокси.GetStatusTypes();
		Сообщить("==== GetStatusTypes() ====");
		Items = Ответ.StatusType;
		Для каждого Элемент ИЗ Items Цикл
			Сообщить("-------------------------------");
			Сообщить(строка(Элемент.StatusID)+" ) "+Элемент.StatusName+" /"+Элемент.StatusDescription+"/");
		КонецЦикла;
	
КонецПроцедуры

//---------20 статусов Пауэр "вмещаем" в наши 5 статусов
Функция ПолучитьСоответствиеСтатусов()

таблСоотв = новый массив;
	таблСоотв.добавить(перечисления.СтатусыЗаказов.ПустаяСсылка() ); // 0
	таблСоотв.добавить( перечисления.СтатусыЗаказов.ВОбработке); //,  "Я формирую");  //1
	таблСоотв.добавить( перечисления.СтатусыЗаказов.ВОбработке); //,  "Отправлен");   //2
	таблСоотв.добавить( перечисления.СтатусыЗаказов.Подтвержден); //, "Подтвержден"); //3
	таблСоотв.добавить( перечисления.СтатусыЗаказов.ВОбработке); //,  "На проверке"); //4
	 для i=5 по 20 Цикл	 
		 таблСоотв.Добавить(Неопределено);
	 КонецЦикла;	 
 	//7 Заказ в архиве
	//8 Документы выписаны
	//9 Водитель в пути
	
	//====================Вставлять можно только с меньшего до большего!============================	
	//10 Отгружено / Оплачено
	таблСоотв.вставить(10, перечисления.СтатусыЗаказов.Подтвержден); 

	//11 Отгрузка не состоялась
	//12 Не подтвержден
	//14 Заказ отменен
	таблСоотв.вставить(12, перечисления.СтатусыЗаказов.Отменен); //,  "Не подтвержден"); //12
	таблСоотв.вставить(14, перечисления.СтатусыЗаказов.Отменен); //,  "Заказ отменен"); //14

	//-------
	//15 К отгрузке
	таблСоотв.вставить(15, перечисления.СтатусыЗаказов.Подтвержден); //, "Подтвержден"); //3

	//-------
	//16 На заказ
	//-------
	//17 Готов к отгрузке / ожидает оплаты
	таблСоотв.вставить(17, перечисления.СтатусыЗаказов.Подтвержден); //, "Подтвержден"); //3


		//-------
	//18 Отгружено / не оплачено
	таблСоотв.вставить(18, перечисления.СтатусыЗаказов.Подтвержден); 
	//-------
	//19 Отгружено / не оплачено / просрочено
	таблСоотв.вставить(19, перечисления.СтатусыЗаказов.Подтвержден); 
	//-------
	//20 Отгружено / Доставлено
	таблСоотв.вставить(20, перечисления.СтатусыЗаказов.Получен); //, "Отгружено / Доставлен
	
	Возврат таблСоотв;
	
КонецФункции


// СписокЗаказовПауэр - тип: СписокЗначений 
//Значение 		= Заказ ЯШТ,  
//Представление = номер Пауэр, 
//Пометка 		= ложь         ( не используется)
//
Процедура ПауэрПроверкаСтатусов(СписокЗаказовПауэр, МенятьСтатусЗаказа=ЛОЖЬ) экспорт
		 
	 Пауэр = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7703247653"); 
	   URL = "https://pro.4tochki.ru/";
	 login = константы.ПауэрWebСервисЛогин.Получить();
	 pass  = Константы.ПауэрWebСервисПароль.Получить();

		Прокси = WSСсылки.СервисДляКлиентов.СоздатьWSПрокси(URL, "ClientService", "BasicHttpBinding_ClientService");
		Фабрика = Прокси.ФабрикаXDTO;
		НомераЗаказов = Фабрика.Создать(Фабрика.Тип("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "ArrayOfstring"));	
	    i=0;
		
		ТаблЗаказовПауэр = новый ТаблицаЗначений;
		ТаблЗаказовПауэр.Колонки.Добавить("НомерПауэр");
		ТаблЗаказовПауэр.Колонки.Добавить("ЗаказПокупателя");
		
		Пока i<СписокЗаказовПауэр.Количество() Цикл
			
			НомерПауэр = ПолучитьНомерЗаказаПоставщика( СписокЗаказовПауэр[i].Значение, Пауэр);
            Если НомерПауэр <> "" Тогда
			НомераЗаказов.string.Добавить( НомерПауэр );
			стр1 = ТаблЗаказовПауэр.Добавить();
			стр1.НомерПауэр 	 = НомерПауэр;
			стр1.ЗаказПокупателя = СписокЗаказовПауэр[i].Значение;
			КонецЕсли;
		
			i=i+1;
		КонецЦикла;
		//НомераЗаказов.string.Добавить("F087342");		
		//НомераЗаказов.string.Добавить("F087337");		
		//НомераЗаказов.string.Добавить("F087502");		
		//НомераЗаказов.string.Добавить("F032738 ");		
		
	//	Ответ = Прокси.GetOrderStatus(НомераЗаказов, login, pass);
	//
	//	#Если Клиент Тогда
	//	Сообщить("==== GetOrderStatus ====");
	//	Сообщить("Ошибка: "+Ответ.Error);
	//	Сообщить("Успешно:"+Ответ.Success);
	//	#КонецЕсли
	
	//=======================================================
	
	//==== GetStatusTypes ====
	таблСоотв = получитьСоответствиеСтатусов();
	
	//========================================================
	//	Items = Ответ.Items.OrderStatusItem;
			
		Для каждого стр1 ИЗ ТаблЗаказовПауэр Цикл
		Элемент = Прокси.GetOrderInfo( стр1.НомерПауэр , login, pass );
		
			#Если Клиент Тогда
		Если (Элемент.errorKey > 0) Тогда
			Сообщить(стр1.НомерПауэр+" - Заказ: "+строка(стр1.ЗаказПокупателя.Номер)+"  Ошибка: " + Элемент.errorKey + " - " + Элемент.errorName);
		Иначе
			 Сообщить(стр1.НомерПауэр+" - Заказ: "+строка(стр1.ЗаказПокупателя.Номер)+"  >> Дата: " 
			 + формат(Элемент.date,"ДЛФ=DT; ДП='Нет даты'")+" Статус: " + Элемент.statusKey + " - " + Элемент.statusName);
        КонецЕсли;
		    #КонецЕсли
			
//-----------------------------------------------------------------------------------------------			
		      заказЯШТ = стр1.ЗаказПокупателя;
			  статусЗак = таблСоотв[Элемент.statusKey];
			   
			   Если статусЗак<>Неопределено и МенятьСтатусЗаказа Тогда
				// если статус не изменился - пропускаем
				// если заказ уже получен - менять статус не нужно!  
				// изменение статуса на Новый  - недопустимо никогда! иначе робот создаст еще 1 заказ поставщику (дубль)
				Если  заказЯШТ.статус <> статусЗак 
					И заказЯШТ.статус <> перечисления.СтатусыЗаказов.Получен 
					И статусЗак <> перечисления.СтатусыЗаказов.Новый Тогда 
					
					заказЯШТоб = заказЯШТ.получитьОбъект();
				 	заказЯШТоб.статус = статусЗак;
					попытка
						//сразу удаляем заказ если он отменен!
						Если  статусЗак = перечисления.СтатусыЗаказов.Отменен Тогда
							заказЯШТоб.ПометкаУдаления = истина;
							 заказЯШТоб.Комментарий = "Удален на сайте: "+ТекущаяДата()+" # "+ заказЯШТоб.Комментарий;
							если заказЯШТоб.Проведен Тогда
								 заказЯШТоб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							иначе
								 заказЯШТоб.Записать();
							КонецЕсли;
						Иначе
							 заказЯШТоб.Записать();
						КонецЕсли;
						
				 	#Если Клиент Тогда
			  		Сообщить(строка(заказЯШТ)+" Статус изменен на "+строка(статусЗак));
					#КонецЕсли
				 	Исключение
					#Если Клиент Тогда
			  		Сообщить(строка(заказЯШТ)+" не удалось изменить Статус на "+строка(статусЗак), СтатусСообщения.Внимание);
					#КонецЕсли
					КонецПопытки;
				
//================================================Статус заказа Поставщика такой же=====================================
				  закПост =  заказЯШТ.Товары[0].Размещение;
				  	закПостоб = закПост.получитьОбъект();
				 	закПостоб.статус = статусЗак;
					попытка
										//сразу удаляем заказ если он отменен!
						Если  статусЗак = перечисления.СтатусыЗаказов.Отменен Тогда
							закПостоб.ПометкаУдаления = истина;
							 закПостоб.Комментарий = "Удален на сайте: "+ТекущаяДата()+" # "+ заказЯШТоб.Комментарий;
							если закПостоб.Проведен Тогда
								 закПостоб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							иначе
								 закПостоб.Записать();
							КонецЕсли;
						Иначе
							 закПостоб.Записать();
						КонецЕсли;

						
					#Если Клиент Тогда
			  	   		 Сообщить(строка(закПост)+" Статус изменен на "+строка(статусЗак));
					#КонецЕсли
				 	Исключение
					#Если Клиент Тогда
			  	   		 Сообщить(строка(закПост)+" не удалось изменить Статус на "+строка(статусЗак), СтатусСообщения.Внимание);
					#КонецЕсли
					КонецПопытки;	
				Иначе
					#Если Клиент Тогда
			  		Сообщить(строка(заказЯШТ)+" Статус: "+строка(заказЯШТ.статус)+" НЕ изменен на "+строка(статусЗак));
					#КонецЕсли
				КонецЕсли;	// если заказ уже получен - менять статус не нужно!   
			

			  КонецЕсли;
			 
		КонецЦикла;
	
КонецПроцедуры

//Процедура сначала получает заказы в статусе1, а затем вызывается ПауэрПроверкаСтатусов(спискуЗаказовПокупателей)
Процедура ПауэрПроверкаСтатусовЗаказовПокупателей(знач НачПериода='00010101', знач КонПериода='00010101', СписокСтатусов=Неопределено) Экспорт
	
	Пауэр = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7703247653"); 
	 
	Запрос=Новый Запрос;
    Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
                 |	ЗаказыПокупателей.ЗаказПокупателя
                 |ИЗ
                 |	РегистрНакопления.ЗаказыПокупателей.Обороты(&НачДата, &КонДата, ,
                 |				ЗаказПокупателя.Поставщик = &Пауэр
                 |				И НЕ ЗаказПокупателя.Проверен
                 |				И ЗаказПокупателя.Статус В (&СписокСтатусов)) КАК ЗаказыПокупателей
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |	ЗаказыПокупателей.ЗаказПокупателя
                 |АВТОУПОРЯДОЧИВАНИЕ";

 Если НачПериода='00010101' Тогда  // за месяц!
	 НачПериода=ДобавитьМесяц(ТекущаяДата(), -1);
 КонецЕсли;	
 Запрос.УстановитьПараметр("НачДата",НачПериода );
 
 Если КонПериода='00010101' Тогда // до конца дня
	 КонПериода=КонецДня(ТекущаяДата());
 КонецЕсли;	 
 Запрос.УстановитьПараметр("КонДата",КонПериода );  // за 1 сек.
 
 //------------------все три статуса - еще не до конца обработаны и требуют проверки----------------------------
 Если СписокСтатусов=Неопределено Тогда
	 СписокСтатусов = новый СписокЗначений; 
	 // новый, отмененный и уже полученные заказы нам не нужны!
	 СписокСтатусов.Добавить(перечисления.СтатусыЗаказов.ВОбработке);
	 СписокСтатусов.Добавить(перечисления.СтатусыЗаказов.ЧастичноПодтвержен);
	 СписокСтатусов.Добавить(перечисления.СтатусыЗаказов.Подтвержден);
 КонецЕсли;	 
 Запрос.УстановитьПараметр("СписокСтатусов",  СписокСтатусов);
 Запрос.УстановитьПараметр("Пауэр",Пауэр);

 СписокЗаказов = новый СписокЗначений;
 табл = Запрос.Выполнить().Выгрузить();
 
 Если  табл.Количество()>0 Тогда
 СписокЗаказов.ЗагрузитьЗначения( табл.ВыгрузитьКолонку("ЗаказПокупателя"));
 ПауэрПроверкаСтатусов(СписокЗаказов);
 Иначе
	 #Если Клиент Тогда
		 сообщить("Не найдены заказы покупателей по поставщику Пауэр в статусе: "+строка(СписокСтатусов));
	 #КонецЕсли	 
КонецЕсли;

 КонецПроцедуры


Процедура CancelOrder(НомерЗаказаПауэр="") экспорт
	
	Если НомерЗаказаПауэр="" Тогда
		Возврат;
	КонецЕсли;	
		
	 Пауэр = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7703247653"); 
	   URL = "https://pro.4tochki.ru/";
	 login = константы.ПауэрWebСервисЛогин.Получить();
	 pass  = Константы.ПауэрWebСервисПароль.Получить();
	 
		Прокси  = WSСсылки.СервисДляКлиентов.СоздатьWSПрокси(URL, "ClientService", "BasicHttpBinding_ClientService");
		Фабрика = Прокси.ФабрикаXDTO;
		
		Ответ = Прокси.CancelOrder(НомерЗаказаПауэр, login, pass);
		
		#Если Клиент Тогда
			Сообщить("===== Отмена заказа № "+НомерЗаказаПауэр+" ===========");
			Сообщить("Успешно: "+Ответ.Success);
			Сообщить("Ошибки: " +Ответ.ErrorCode+") "+Ответ.ErrorComment);
			
		#КонецЕсли
	
КонецПроцедуры

Процедура GetOrderInfo(НомЗакПауэр="") экспорт
	
	Если НомЗакПауэр="" Тогда
		Возврат;
	КонецЕсли;	
	
	 Пауэр = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7703247653"); 
	   URL = "https://pro.4tochki.ru/";
	 login = константы.ПауэрWebСервисЛогин.Получить();
	 pass  = Константы.ПауэрWebСервисПароль.Получить();
	
	 Прокси = WSСсылки.СервисДляКлиентов.СоздатьWSПрокси(URL, "ClientService", "BasicHttpBinding_ClientService");
	Фабрика = Прокси.ФабрикаXDTO;
		
	Сообщить("===== Информация по заказу № "+НомЗакПауэр+" ====");
	
	Ответ = Прокси.GetOrderInfo(НомЗакПауэр, login, pass);
		Если (Ответ.errorKey > 0) Тогда
			Сообщить("Ошибка: " + Ответ.errorKey + " - " + Ответ.errorName);
		Иначе
			Сообщить("Номер заказа: " + НомЗакПауэр);
			Сообщить("Дата: " + формат(Ответ.date,"ДЛФ=DT; ДП='Нет даты'"));
			Сообщить("Статус: " + Ответ.statusKey + " - " + Ответ.statusName);
			Сообщить("Менеджер: " + Ответ.manager);
			Сообщить("Способ оплаты: " + Ответ.payFormaKey + " - " + Ответ.payFormaName);
			Сообщить("Необходима доставка: " + Формат(Ответ.needDelivery,"БЛ=Нет; БИ=Да") ) ;
			Сообщить("Дата доставки: " + формат(Ответ.shipmentDate,"ДЛФ=DD; ДП='Нет даты'") );
			Сообщить("Время доставки: " + Ответ.timeTypeKey + " - " + Ответ.timeTypeName);
			Сообщить("ФИО грузополучателя: " + Ответ.fio);
			Сообщить("Телефон грузополучателя: " + Ответ.phone);
			Сообщить("Город грузополучателя: " + Ответ.city);
			Сообщить("Улица грузополучателя: " + Ответ.street);
			Сообщить("Дом грузополучателя: " + Ответ.house);
			Сообщить("Корпус грузополучателя: " + Ответ.corps);
			Сообщить("Офис грузополучателя: " + Ответ.office);
			Сообщить("Примечание для водителя: " + Ответ.driverNote);

			//Если ТипЗнч(Ответ.orderNotes.orderNote) <> Тип("ОбъектXDTO") Тогда
				Сообщить("Примечание к заказу: ");
				Сообщить("------");
				Для каждого Товар ИЗ Ответ.orderNotes.orderNote Цикл
					Сообщить(Товар.noteCreateDate);
					Сообщить(Товар.noteText);
					Сообщить("------");
				КонецЦикла;
			//КонецЕсли;
			Сообщить("Ассортимент заказа: ");
			Сообщить("------"); i=0;
			Для каждого Товар ИЗ Ответ.goods.Goods Цикл
				i=i+1;
				Сообщить(строка(i)+") "+ Товар.codCAE+" : "+Товар.quantity+" х "+ Товар.price+" р.  /"+ Товар.warehouse+"/");
			КонецЦикла;
			Сообщить("=================================="); 
		КонецЕсли;	
		
КонецПроцедуры
 
 //============================НОВЛАЙН================================
  
  //--------------в тестовом режиме! Создавать заказы = ложь!--------------------------------------------
// СоздаватьЗаказы = ЛОЖЬ  означает создание заказов в Пауэре в тестовом режиме...
// СоздаватьЗакПост = Истина означает, что будет создаваться 1 зак.поставщику Пауэр за 1 день и туда будут писаться все товары по заказам!
//					одновременно в заказе покупателя - указывается размещение = зак.пост	
//--------------------------------------------------
//	ЗаказПокупателя.Поставщик = &Пауэр
//|	И ЗаказПокупателяТовары.Статус = &ПустойСтатусСтроки
//         
Процедура НовЛайнПроверкаЗаказовПокупателей(знач НачПериода='00010101', знач КонПериода='00010101', НовЛайн=Неопределено) Экспорт
	
	Если НовЛайн=Неопределено Тогда
		НовЛайн = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "5050074688");
	КонецЕсли;	
	//заказы поставщику в 1С создаётся при каждой проверке - новый заказ поставщику (для НовЛайна), иначе Один в день!
	
    ОдинЗаказПоставщикуВДень = ЛОЖЬ;
	СрокДоставки = 3;
	ОтправлятьПисьмаПоставщику=ЛОЖЬ;
	
	регСвСроки = РегистрыСведений.СрокиДоставки.Получить(новый Структура("Поставщик, ОТХ",НовЛайн, ЛОЖЬ));
	если регСвСроки<>Неопределено Тогда
		ОдинЗаказПоставщикуВДень 	= регСвСроки.ОдинЗаказПоставщикуВДень;
		СрокДоставки				= регСвСроки.СрокДоставки;
		ОтправлятьПисьмаПоставщику	= регСвСроки.ОтправлятьЗаказыПоставщику;
		
		//01.10.2014 - разделение и проверка заказов по поставщикам ОТХ - ДОЛЖНА быть выключена ДО этого!
		//Если регСвСроки.ОТХ Тогда 
		//	ВОЗВРАТ;
		//КонецЕсли;
		
	КонецЕсли;	
			
//запрос по заказам для списания по ФИФО, сортировка по дате и номеру документа
Запрос=Новый Запрос;
     Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
                  |	ЗаказыПокупателей.ЗаказПокупателя
                  |ИЗ
                  |	РегистрНакопления.ЗаказыПокупателей.Обороты(&НачДата,&КонДата,, ЗаказПокупателя.Поставщик = &НовЛайн
                  |				И НЕ ЗаказПокупателя.Проверен
                  |				И ЗаказПокупателя.Согласован
                  |				И ЗаказПокупателя.Статус = &ПодтвержденПокупателем) КАК ЗаказыПокупателей
                  |
                  |УПОРЯДОЧИТЬ ПО
                  |	ЗаказыПокупателей.ЗаказПокупателя
                  |АВТОУПОРЯДОЧИВАНИЕ";

	 Если НачПериода='00010101' Тогда
		 НачПериода = НачалоДня(ТекущаяДата());
	 КонецЕсли;	 
	 Если КонПериода='00010101' Тогда
		 КонПериода = КонецДня(ТекущаяДата());
	 КонецЕсли;	 
 Запрос.УстановитьПараметр("НачДата",НачПериода );
 Запрос.УстановитьПараметр("КонДата",КонПериода );  // за 1 сек.
 
 //------------------все три статуса - еще не до конца обработаны и требуют проверки----------------------------
// Запрос.УстановитьПараметр("ПустойСтатусСтроки", перечисления.СтатусыСтрокЗаказа.ПустаяСсылка() );
 
 Запрос.УстановитьПараметр("ПодтвержденПокупателем", перечисления.СтатусыЗаказов.ПодтвержденПокупателем );
 Запрос.УстановитьПараметр("НовЛайн",НовЛайн);

 массивЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказПокупателя");
 N=массивЗаказов.Количество();
 
 Если  N=0 Тогда // нет заказов для создания
	 #Если Клиент Тогда
	 сообщить("--- Нет Подтвержденых и Согласованных с Покупателем Заказов для поставщика "+строка(НовЛайн)+" за период с "+строка(НачПериода)+" по "+строка(КонПериода)+" ---", СтатусСообщения.Внимание);
	 #КонецЕсли
	 Возврат;	 
 иначе
	 #Если Клиент Тогда
	 сообщить(" "); 
	 сообщить(строка(ТекущаяДата())+" Начало обработки "+строка( N )+" Подтвержденых и Согласованных с Покупателем заказов покупателей с поставщиком "+строка(НовЛайн)+" за период с "+строка(НачПериода)+" по "+строка(КонПериода)+"...");
	 #КонецЕсли
 КонецЕсли;	 

//==========================================================================================================================  
 ЗакПост = Неопределено;
 Если НЕ ОдинЗаказПоставщикуВДень Тогда   //требуется объединение заказов ПОСТАВЩИКОВ с перекрестным изменением заказов покупателей (размещение!)
		 ЗакПост = документы.ЗаказПоставщику.СоздатьДокумент();
		 
		 ЗакПост.Дата 			 = ТекущаяДата();     		     // тут специально так!
		 ЗакПост.ДатаПоступления = НачалоДня(ТекущаяДата())+СрокДоставки*86400;  // 3 дня на доставку МАКСИМУМ
		 ЗакПост.ДатаОплаты      = ТекущаяДата() + 7*86400;
		 
		 
		 ЗакПост.Организация = справочники.Организации.НайтиПоКоду("00001");
		 ЗакПост.Контрагент  = НовЛайн;
		 ЗакПост.ДоговорКонтрагента = ?(НовЛайн.ОсновнойДоговорПоставки.Пустая(), НовЛайн.ОсновнойДоговорКонтрагента, НовЛайн.ОсновнойДоговорПоставки); // с поставщиком ?!
		 ЗакПост.Склад = Справочники.Склады.НайтиПоНаименованию("1");
		 
		 ЗакПост.ВалютаДокумента = справочники.Валюты.НайтиПоКоду(643);
		 ЗакПост.КратностьВзаиморасчетов = 1;
		 ЗакПост.КурсВзаиморасчетов = 1;
		 
		 ЗакПост.УчитыватьНДС     = истина;
		 ЗакПост.СуммаВключаетНДС = истина;
		 
		 //+++ 10.12.2014
	 	 глТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		  параметрыСеанса.ТекущийПользователь = глТекущийПользователь; //26.05.2017
		 ЗакПост.Ответственный = глТекущийПользователь;
		 
		 попытка
			 закПост.Записать(); //--------------------просто создаётся без товаров сначала----------------
		 исключение
		    #Если Клиент  Тогда
		 	сообщить("При записи заказа поставщику: " + строка(НовЛайн)+" Возникла Ошибка: "+ОписаниеОшибки(), СтатусСообщения.Внимание );
 	        #КонецЕсли	 
		 КонецПопытки;
		
 Иначе //================================ЕДИНЫЕ ЗАКАЗ ПОСТАВЩИКУ за 1 день - просто ИЩЕМ ======================
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ЗаказПоставщику.Ссылка
	                |ИЗ
	                |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	                |ГДЕ
	                |	ЗаказПоставщику.Дата = &Дата
					|	И НЕ ЗаказПоставщику.Проведен
	                |	И ЗаказПоставщику.Контрагент = &Контрагент
	       //         |	И ЗаказПоставщику.Комментарий ПОДОБНО &Комментарий
		   			|";
	 
	 Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()) );
	 Запрос.УстановитьПараметр("Контрагент", НовЛайн );
	// Запрос.УстановитьПараметр("Комментарий", "%АвтоФормирование %" );
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 Если Выборка.Следующий() Тогда
	 	ЗакПост = Выборка.ссылка.ПолучитьОбъект();	
	 Иначе
	 	ЗакПост = документы.ЗаказПоставщику.СоздатьДокумент();
	   	ЗакПост.Дата = НачалоДня(ТекущаяДата());     		     // тут специально так!
        ЗакПост.Контрагент = НовЛайн;
		
		#Если Клиент Тогда
		 сообщить("-> Создан ЕДИНЫЙ Заказ поставщику "+строка(НовЛайн)+" на "+строка(НачалоДня(ТекущаяДата()))+" !"); 
	 	#КонецЕсли	 
	 	Возврат;
 	  КонецЕсли;
 КонецЕсли;	 
		  

 для i=0 по N-1 Цикл
	 заказНаПроверку = массивЗаказов[i].ПолучитьОбъект();
   	 
	#Если Клиент Тогда
	 сообщить("-> Заказ покупателя № "+строка(заказНаПроверку.Номер)+" >> создается заказ поставщику "+строка(НовЛайн)+"!"); 
    #КонецЕсли	  
	 
//---------------изменение заказа-------------------
	закОб = заказНаПроверку;
	
 Если НЕ ОдинЗаказПоставщикуВДень и ЗакПост = Неопределено Тогда 
		 ЗакПост = документы.ЗаказПоставщику.СоздатьДокумент();
		 
		 ЗакПост.Дата 			 = ТекущаяДата();     		     // тут специально так!
		 ЗакПост.ДатаПоступления = ?(ЗаказНаПроверку.ДатаОтгрузки='00010101',
		 									ТекущаяДата() + СрокДоставки*86400, 
											ЗаказНаПроверку.ДатаОтгрузки); 
											
		 //------------ не пустая дата оплаты! ------------
		 ЗакПост.ДатаОплаты      = ?(ЗакПост.ДатаОплаты='00010101',заказНаПроверку.Дата + 7*86400, ЗакПост.ДатаОплаты);
		 
		 ЗакПост.Организация = справочники.Организации.НайтиПоКоду("00001");
		 ЗакПост.Контрагент  = НовЛайн;
		 ЗакПост.ДоговорКонтрагента = ?(НовЛайн.ОсновнойДоговорПоставки.Пустая(), НовЛайн.ОсновнойДоговорКонтрагента, НовЛайн.ОсновнойДоговорПоставки); // с поставщиком ?!
		 ЗакПост.Склад = ЗаказНаПроверку.Склад;
		 
		 ЗакПост.Транзит = ЗаказНаПроверку.Транзит;
		 ЗакПост.Подразделение   = ЗаказНаПроверку.Подразделение;    
		 ЗакПост.Грузополучатель = ЗаказНаПроверку.Грузоотправитель; // филиал!		 
		 
		 ЗакПост.ВалютаДокумента = справочники.Валюты.НайтиПоКоду(643);
		 ЗакПост.КратностьВзаиморасчетов = 1;
		 ЗакПост.КурсВзаиморасчетов = 1;
		 
		 ЗакПост.УчитыватьНДС     = истина;
		 ЗакПост.СуммаВключаетНДС = истина;
		 
		 //+++ 10.12.2014
		глТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		 параметрыСеанса.ТекущийПользователь = глТекущийПользователь; //26.05.2017
		ЗакПост.Ответственный = глТекущийПользователь;
		 попытка
			 закПост.Записать(); //--------------------просто создаётся без товаров сначала----------------
		 исключение
		    #Если Клиент  Тогда
		 	сообщить("При записи заказа поставщику: " + строка(НовЛайн)+" по "+строка(закОб)+" Возникла Ошибка: "+ОписаниеОшибки(), СтатусСообщения.Внимание );
 	        #КонецЕсли	 
	 	 КонецПопытки;
 КонецЕсли;	 
 
 
		для каждого стр1 из закОб.Товары Цикл  //товары ТОЛЬКО с 0 статусом - подтверждаются!
			
			Если  ЗначениеНеЗаполнено(стр1.Размещение) Тогда 
				
					стр2 = ЗакПост.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(стр2, стр1);
					стр2.ЗаказПокупателя = закОб.Ссылка; //-----------------------ссылка на заказ покупателя!--------------------
					отбор1 = новый Структура;
					отбор1.Вставить("Контрагент", НовЛайн);
					отбор1.Вставить("Номенклатура", стр1.Номенклатура);
					регСв = РегистрыСведений.ЦеныНоменклатурыПоставщиков.Получить(отбор1);
					Если регСв<>Неопределено Тогда
						стр2.Цена = регСв.Цена;
					Иначе // быть такого не может!
						стр2.Цена = 1;
					КонецЕсли;
					
					стр2.Сумма = стр2.Цена * стр2.Количество;
					
					стр2.СтавкаНДС = СтавкаНДСнаДату(ТекущаяДата());
					СтавкаНДС = ПолучитьСтавкуНДС(СтавкаНДСнаДату(ТекущаяДата()));					
					стр2.СуммаНДС = стр2.Сумма * СтавкаНДС/(100 + СтавкаНДС);
					
					стр2.Коэффициент = 1;
					стр2.КоличествоМест = стр2.Количество;
					стр2.Статус = перечисления.СтатусыСтрокЗаказа.ПустаяСсылка(); //ничего!		
					
					стр1.Размещение = ЗакПост.Ссылка;	// ссылки еще нет! только в заказе поставщика!
			//	КонецЕсли;

			КонецЕсли;	
		КонецЦикла;	
							 
	 попытка
		 
		 //-------------запись Заказа Покупателя в режиме обмена---------------
		 закОб.ОбменДанными.Загрузка = истина; 
		 	закОб.Статус = перечисления.СтатусыЗаказов.ВОбработке;
			закОб.Записать(); 
		 закОб.ОбменДанными.Загрузка = ЛОЖЬ; 
			 
	   		ЗакПост.Статус = перечисления.СтатусыЗаказов.ВОбработке;
			ЗакПост.Комментарий = "#АвтоФормирование заказов "+строка(ТекущаяДата())+"#";
			
			ЗакПост.Записать();	
			#Если Клиент Тогда
			 сообщить("Записан "+строка(ЗакПост));
			#КонецЕсли	 
		 
			регСв = РегистрыСведений.СписокУжеСозданныхЗаказов.СоздатьМенеджерЗаписи();
			регСв.Поставщик = ЗакПост.Контрагент;
			регСв.ЗаказПокупателя = закОб.ссылка;
			
			регСв.НомерДокумента  = ЗакПост.Номер;
			регСв.ДатаДокумента   = ЗакПост.Дата;
			регСв.Записать(Истина);
			
	 исключение
		 #Если Клиент  Тогда
		 сообщить("При записи: " + строка(закОб)+" Возникла Ошибка: "+ОписаниеОшибки(), СтатусСообщения.Внимание );
 	    #КонецЕсли	 
	 КонецПопытки;
	
	 
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ЕСЛИ  ОтправлятьПисьмаПоставщику Тогда
		  	Попытка
				резОтправки = ОтправитьПисьмоПоставщику(ЗакПост);
				
				//можно обработать резОтправки 
				Если резОтправки Тогда
					ЗакПост.Комментарий = "@ "+формат(ТекущаяДата(),"ДЛФ=D")+" @  " +ЗакПост.Комментарий;
	  				закОб.Комментарий   = "@ "+формат(ТекущаяДата(),"ДЛФ=D")+" @  "+закОб.Комментарий;	
					
				закОб.ОбменДанными.Загрузка = Истина; 
		        закОб.Записать(); 
		 		закОб.ОбменДанными.Загрузка = ЛОЖЬ; 

				Иначе
					ЗакПост.Комментарий = "Письмо НЕ отправлено! "+закОб.Комментарий;
	  			КонецЕсли;
					ЗакПост.Записать(РежимЗаписиДокумента.Проведение);
					
			Исключение	 
				#Если Клиент Тогда
				 сообщить("Ошибка отправки заказа поставщику: "+НовЛайн+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание); 
			 	#КонецЕсли	 
				    ЗакПост.Комментарий = "!ошибка! при отправке эл.почты "+закОб.Комментарий;
					ЗакПост.Записать();	
				 Продолжить;
			 КонецПопытки; 
КОНЕЦЕСЛИ;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 
	 
 КонецЦикла;
 
 
КонецПроцедуры

Функция ПолучитьСписокПоставщиков(толькоОТХ=ложь) экспорт
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	СрокиДоставки.Поставщик
               |ИЗ
               |	РегистрСведений.СрокиДоставки КАК СрокиДоставки
               |ГДЕ
               |	СрокиДоставки.ОТХ = &толькоОТХ
               |"+?(толькоОТХ,"", "	И СрокиДоставки.СрокДоставки > 0"); //25.11.2016 для сторонних поставщиков срок доставки >0
Запрос.УстановитьПараметр("толькоОТХ", толькоОТХ);
табл = Запрос.Выполнить().Выгрузить();
спис = новый СписокЗначений;
спис.ЗагрузитьЗначения( табл.ВыгрузитьКолонку("Поставщик") );

Возврат спис;

КонецФункции



 //=========================загрузка остатков из почты================================
//------------- 1) подключаемся к учетной записи почты: НовЛайнЯщикДляПрайсов-------------
//------------- 2) перебираем все письма из папки Входящие и ищем только с вложениями-------------
//					записываем их в папку Путь
//			    3) если вложение типа Excel и в названии есть "Остатки на "... 
//						пересохраняем только 1 и 5 столбец в TXT файл, закрываем Excel
//				4) записываем текст.файл: артикул - остаток   в таблицу значений 
//					запросом получаем сразу Контрагент, Номенклатура(Аксессуары) и Остаток>=Min
//				5) чистим и записываем в регистр сведений ОстаткиНоменклатурыКонтрагентов
//-------------------------------------------------------------------------------------
Процедура НовЛайнПолучениеОстатков(УдалятьСообщенияССервера=ЛОЖЬ, ДатаПрайса='00010101') Экспорт 
	
//константы	
Если ДатаПрайса='00010101' Тогда
	ДатаПрайса=ТекущаяДата();
КонецЕсли;	
МинДатаОтправления  = НачалоДня(ДатаПрайса); // - только Текущий ДЕНЬ
МаксДатаОтправления = КонецДня(ДатаПрайса);
МинОстаток		   = 1;
//УдалятьСообщенияССервера = ЛОЖЬ;
НовЛайн = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "5050074688");

имяПочтЯщика = константы.НовЛайнЯщикДляПрайсов.Получить();
имяПочтЯщика = ?(имяПочтЯщика="", "1C@yst.ru", имяПочтЯщика);   // "no-reply@yst76.ru" / "1C@yst.ru";

путь =  Константы.ПутьКФайлам.получить()+"\НовЛайн\";
ИмяCSV = "НовЛайнОстатки.txt";  // через табуляцию
текстФайлаСодержит = "Остатки на ";

//------- 1) подключаемся к учетной записи почты: НовЛайнЯщикДляПрайсов-------------
УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(имяПочтЯщика); 
	ИПП=Новый ИнтернетПочтовыйПрофиль;
	//----------для получения только POP3 ----------------
	ИПП.АдресСервераPOP3   = УЗ.POP3Сервер;
	ИПП.ПортPOP3           = УЗ.ПортPOP3;
	ИПП.Пользователь	   = УЗ.АдресЭлектроннойПочты;
	ИПП.Пароль			   = УЗ.Пароль;
	
	//+++ 22.09.2014 - так возможно...
	ИПП.АдресСервераIMAP = "imap.yandex.ru";
	ИПП.ПортIMAP = 993;
	ИПП.ПользовательIMAP = уз.Логин;
	ИПП.ПарольIMAP       = УЗ.Пароль;
	ИПП.ИспользоватьSSLIMAP = истина;
	
попытка
	Почта=Новый ИнтернетПочта;
	Почта.Подключиться(ИПП);
исключение
	#Если Клиент Тогда
		сообщить("Невозможно подключиться к почте: "+имяПочтЯщика+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	#КонецЕсли	
	Возврат;
КонецПопытки;

//---------- 2) перебираем все письма из папки Входящие и ищем только с вложениями-------------
	//для этой цели объект Почта имеет метод "Выбрать". 
	//У метода два параметра: 
	//1-ый отвечает за УдалятьСообщенияССервера
	//2-ой массив с заголовками писем... пустой
	//
// Почта.Выбрать(<УдалятьСообщения>, <МассивЗаголовковСообщенийИлиИдентификаторов>) 

попытка
	Сообщения = Почта.Выбрать(УдалятьСообщенияССервера); // тип: массив из типов: ИнтернетПочтовоеСообщение 
исключение
	Почта.Отключиться();
	#Если Клиент Тогда
		сообщить("Невозможно получить письма с почты: "+имяПочтЯщика+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	#КонецЕсли	
	Возврат;
КонецПопытки;

//----------------Главный Цикл-------------------------
//Далее после выборки сообщений необходимо перебрать их в Цикле и сохранить вложение, 
#Если Клиент Тогда
	сообщить(Строка(ТекущаяДата())+" Начало обработки "+строка(Сообщения.Количество())+" писем.", СтатусСообщения.Информация);
#КонецЕсли	

Для каждого Сообщение Из Сообщения Цикл
	
Получатели = ""; Отправитель = "";

//берем только сегодняшние письма!
Если Сообщение.ДатаОтправления < МинДатаОтправления или Сообщение.ДатаОтправления>МаксДатаОтправления Тогда
  Продолжить;
КонецЕсли;	  

// Перебираем коллекцию получателей сообщения
Для каждого Получатель Из Сообщение.Получатели Цикл
   Получатели = Получатели + Получатель.Пользователь + " <" + Получатель.Адрес + "> ";
КонецЦикла; 

Попытка
	Отправитель = Сообщение.Отправитель.Адрес;
Исключение
	Отправитель = Сообщение.Отправитель;
КонецПопытки;

//ИнтернетПочтовоеСообщение
телоПисьма = " Тема: "+Сообщение.Тема +" (отправлено: "+Сообщение.ДатаОтправления+" >> получено: "+Сообщение.ДатаПолучения+")";

// Перебираем вложения письма
	Влож = ""; 
	Для каждого Вложение Из Сообщение.Вложения Цикл     // ИнтернетПочтовоеВложение
		
		Попытка //возможна ошибка при записи 
			Если Найти(Вложение.ТипСодержимого, "application/")>0 Тогда    
				//"application/vnd.ms-excel" (XLS)  или "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" (XLSX)
			Вложение.Данные.Записать(путь+Вложение.ИмяФайла); 
			Влож=Влож+Вложение.ИмяФайла+", "; //Запоминаем имя вложения прикрепленных к данному письму
	 	  КонецЕсли;
		Исключение
		  Почта.Отключиться();
		  #Если Клиент Тогда
			  сообщить(телоПисьма+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			  сообщить("Невозможно сохранить файл вложения: "+путь+Вложение.ИмяФайла, СтатусСообщения.Внимание);
		  #КонецЕсли	
		  Возврат;
		КонецПопытки;
		
		
//-------------------------перезапись Excel в  csv ---------------------------------------------
				//"application/vnd.ms-excel" (XLS)  
				//"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" (XLSX)
Если  Найти(Вложение.ТипСодержимого, "application/")>0 
	и Найти(Вложение.ТипСодержимого, "excel")>0 
	и Найти(Вложение.ИмяФайла, текстФайлаСодержит)>0 Тогда
			 ПолноеИмяФайла = путь+Вложение.ИмяФайла;
			xlLastCell = 11;
			Попытка
			Excel = Новый COMОбъект("Excel.Application");
			Excel.WorkBooks.Open(ПолноеИмяФайла);
			#Если Клиент Тогда
				Состояние("Обработка файла Microsoft Excel: "+ПолноеИмяФайла);
			#КонецЕсли	
			//ExcelЛист = Excel.Sheets(1);
			Исключение
				Сообщить("Ошибка. Возможно неверно указан номер листа книги Excel.");
				Возврат;
			КонецПопытки;
		
 //=========Пересохраняем в txt формат только 1 и 5 столбец============================
	Попытка
 	xlCSV  = 20; //csv через запятую: xlCSV=6, текст через табуляцию: xlTextWindows =20
	   УдалитьФайлы(Путь, "*.txt"); // удаляем все старые файлы
	//AbcdEf   	- нам надо только 1 и 5 столбец
	Excel.Columns("B:B").Select();
    Excel.Selection.Delete(); // Shift:=xlToLeft
	Excel.Columns("B:B").Select();
    Excel.Selection.Delete(); // Shift:=xlToLeft
	Excel.Columns("B:B").Select();
    Excel.Selection.Delete(); // Shift:=xlToLeft
	
	Excel.Columns("C:C").Select();
	Excel.Selection.Delete(); // Shift:=xlToLeft
	Excel.Columns("C:C").Select();
	Excel.Selection.Delete(); // Shift:=xlToLeft
	
	Excel.ActiveWorkbook.SaveAs(путь+ИмяCSV, xlCSV); //записываем в текст через табуляцию
	Excel.ActiveWorkbook.close(false); // закроем без изменений оригинал
	
	Excel.Application.Quit();  //закрываем приложение
	Excel = "";                //объект "убивается"
	Исключение
	Excel.Application.Quit();
	Excel = "";
	#Если Клиент Тогда	
		сообщить("Ошибка Excel: "+ОписаниеОшибки() );
    #КонецЕсли
	КонецПопытки;	

	
	
//============================загрузка из txt в регистр=============================================================
     файлTXT = новый ТекстовыйДокумент;
	 файлTXT.Прочитать(путь+ИмяCSV); //  , "windows-1251" 
	
	ТЗОстатки = Новый ТаблицаЗначений;
	ТЗОстатки.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)) ); //макс
	
	Знак = ДопустимыйЗнак.Неотрицательный;
 	ТЗОстатки.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(3,0,Знак)) ); //число от минОст до максОст

	СимвРазд = символ(09);
	#Если Клиент Тогда	
 		сообщить("Чтение файла ("+строка(файлTXT.КоличествоСтрок())+" стр.) "+путь+ИмяCSV );
   	 #КонецЕсли
   //1 строка - заголовок
	для i=2 по файлTXT.КоличествоСтрок() Цикл
		стр0 = файлTXT.ПолучитьСтроку(i);
		разд = Найти(стр0, СимвРазд);
		Если разд>0 Тогда	
		стр1 = ТЗОстатки.Добавить();	
		стр1.Код   = СокрЛП(лев(стр0, разд-1));
		остатокСтр = СокрЛП(прав(стр0, стрДлина(стр0)-разд));
		остатокСтр = стрЗаменить(остатокСтр,",",".");           //половинчатые
		остатокСтр = стрЗаменить(остатокСтр," ","");            // более 1 000
		попытка
			стр1.Остаток = число( ?(остатокСтр="", "0", остатокСтр) );
			исключение
			#Если Клиент Тогда	
		 		сообщить(строка(i)+" строка - ошибка в количестве '"+остатокСтр+"'", СтатусСообщения.Внимание);
		   	 #КонецЕсли
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗОстатки.Код,
	               |	ТЗОстатки.Остаток
	               |ПОМЕСТИТЬ ВТ_ТабОстатки
	               |ИЗ
	               |	&ТЗОстатки КАК ТЗОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&НовЛайн КАК Контрагент,
	               |	СПрНоменклатура.Ссылка КАК Номенклатура,
	               |	ТабОстатки.Остаток
	               |ИЗ
	               |	ВТ_ТабОстатки КАК ТабОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СПрНоменклатура
	               |		ПО (ТабОстатки.Код = СПрНоменклатура.Артикул)
	               |ГДЕ
	               |	СПрНоменклатура.ВидТовара = &ВидТовара
	               |	И СПрНоменклатура.Ссылка В ИЕРАРХИИ(&Родитель)
	               |	И СПрНоменклатура.Ссылка <> &Ссылка
				   |	И ТабОстатки.Остаток>=&МинОстаток";
	
	Запрос.УстановитьПараметр("ТЗОстатки", ТЗОстатки);
	Запрос.УстановитьПараметр("Ссылка", справочники.Номенклатура.ПустаяСсылка() ); //Аксессуары
	
	Запрос.УстановитьПараметр("ВидТовара", перечисления.ВидыТоваров.Аксессуары);
	Запрос.УстановитьПараметр("Родитель", справочники.Номенклатура.НайтиПоКоду("0000001") ); //Аксессуары
	Запрос.УстановитьПараметр("НовЛайн", НовЛайн ); //Аксессуары
	Запрос.УстановитьПараметр("МинОстаток", МинОстаток);
	Результат = Запрос.Выполнить();
	ТабОст = Результат.Выгрузить();	
	
	#Если Клиент Тогда
		Состояние("Идет запись таблицы ОстаткиНоменклатурыКонтрагентов НовЛайн: "+строка(ТабОст.Количество())+" записей...");
	#КонецЕсли
		
		
	//Удаление старых записей
	МенеджерЗаписи = РегистрыСведений.ОстаткиНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
	МенеджерЗаписи.Отбор.Контрагент.Установить(НовЛайн);
	МенеджерЗаписи.Записать();  //чистка	
	
	ТабОст.Свернуть("Контрагент, Номенклатура", "Остаток"); 
		
	МенеджерЗаписи.Загрузить( ТабОст );
	МенеджерЗаписи.Записать();  //новые данные	
	#Если Клиент Тогда
		сообщить("Записано: "+строка(ТабОст.Количество())+" записей с количеством не менее "+строка(МинОстаток)+" в регистр ОстаткиНоменклатурыКонтрагентов по контрагенту: "+строка(НовЛайн) );
	#КонецЕсли

	КонецЕсли; //Конец обработки Excel Файла

		
	КонецЦикла;//вложений

	Влож=?(Влож="", "", лев(Влож, стрДлина(Влож) - 2) );
	
	#Если Клиент Тогда
	Сообщить(" Обработано письмо от: "+Отправитель+телоПисьма+" вложения ("+строка(Сообщение.Вложения.Количество())+") : "+Влож);
    #КонецЕсли

КонецЦикла; 

#Если Клиент Тогда
	сообщить(Строка(ТекущаяДата())+" Закончена обработка "+строка(Сообщения.Количество())+" писем.", СтатусСообщения.Информация);
	сообщить("--------------------------------------------------------------------------------");
#КонецЕсли	

Почта.Отключиться();

КонецПроцедуры

//===================================================================================
//Пауэр грузится через web-сервис, 
//остальные: novline и автовираж - загрузка Пока не оговорена...
//Пока есть только прайс в Excel формате
//соответствие по артикулу...
//
Процедура НовЛайнЗагрузкаЦен(путь="", ИмяФайлаExcel="") Экспорт
	
	путь = ?(путь="",  Константы.ПутьКФайлам.получить()+"\НовЛайн\", путь);
	ПолноеИмяФайла = Путь+?(ИмяФайлаExcel="", "Прайс НовЛайн.xls", ИмяФайлаExcel);
	
	ИмяCSV 		   = "Цены_НовЛайн.txt";
	НовЛайн = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "5050074688");

	#Если Клиент Тогда
		Состояние(строка(ТекущаяДата())+" идет чтения файла: "+ПолноеИмяФайла);
	    сообщить(строка(ТекущаяДата())+"  идет чтения файла: "+ПолноеИмяФайла);
	#КонецЕсли
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ПолноеИмяФайла);
		#Если Клиент Тогда
			Состояние("Обработка файла Microsoft Excel: "+ПолноеИмяФайла);
		#КонецЕсли	
		//ExcelЛист = Excel.Sheets(1);
	Исключение
		Сообщить("Ошибка открытия Excel: "+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
		
 //=========Пересохраняем в txt формат только 1 и 5 столбец============================
	Попытка
 	xlCSV  = 20; //csv через запятую: xlCSV=6, текст через табуляцию: xlTextWindows =20
	   УдалитьФайлы(Путь, "*.txt"); // удаляем все старые файлы
	//AbcdE   	- нам надо только 3 и 4 столбец
	
	Excel.Columns("A:A").Select();
    Excel.Selection.Delete(); // Shift:=xlToLeft
	//Excel.Columns("A:A").Select();
	//Excel.Selection.Delete(); // Shift:=xlToLeft
	
	Excel.ActiveSheet.Shapes("Рисунок 1").Select();
	Excel.Selection.Delete();
	
	//Excel.Columns("D:D").Select();
	//Excel.Selection.Delete(); // Shift:=xlToLeft
	// 
	Excel.ActiveWorkbook.SaveAs(путь+ИмяCSV, xlCSV); //записываем в текст через табуляцию
	Excel.ActiveWorkbook.close(false); // закроем без изменений оригинал
		
	Excel.Application.Quit();  //закрываем приложение
	Excel = "";                //объект "убивается"
	Исключение
	Excel.Application.Quit();
	Excel = "";
	#Если Клиент Тогда	
		сообщить("Ошибка Excel: "+ОписаниеОшибки() );
    #КонецЕсли
	КонецПопытки;	
	
	
	#Если Клиент Тогда
		Состояние(строка(ТекущаяДата())+" идет разбор файла: "+путь+ИмяCSV);
	#КонецЕсли
		
//============================загрузка из txt в регистр=============================================================
     файлTXT = новый ТекстовыйДокумент;
	 файлTXT.Прочитать(путь+ИмяCSV); //  , "windows-1251" 
	
	ТЗОстатки = Новый ТаблицаЗначений;
	ТЗОстатки.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)) ); //макс
	
	Знак = ДопустимыйЗнак.Неотрицательный;
 	ТЗОстатки.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,новый КвалификаторыЧисла(15,2)) );

	СимвРазд = символ(09);
	#Если Клиент Тогда	
 		сообщить("Чтение файла ("+строка(файлTXT.КоличествоСтрок())+" стр.) "+путь+ИмяCSV );
   	 #КонецЕсли
   //1 строка - заголовок
	для i=10 по файлTXT.КоличествоСтрок() Цикл
		стр0 = СокрЛП( файлTXT.ПолучитьСтроку(i));
		
		разд = Найти(стр0, СимвРазд); //1 - название
		стр0 = Прав(стр0 , стрДлина(стр0) - разд);

		разд = Найти(стр0, СимвРазд);
		Если разд>0 и стр0<>"" Тогда
		Артикул = СокрЛП(лев(стр0, разд-1));
		остатокСтр = СокрЛП(прав(стр0, стрДлина(стр0)-разд));
		
		разд = Найти(остатокСтр, СимвРазд); //1 - Цена
		остатокСтр = СокрЛП(Лев(остатокСтр, разд-1));

		остатокСтр = стрЗаменить(остатокСтр,",",".");           //половинчатые
		остатокСтр = стрЗаменить(остатокСтр," руб.","");        //уберем рубли
		остатокСтр = стрЗаменить(остатокСтр," ","");            // более 1 000
			Если Артикул<>"" и остатокСтр<>"" Тогда
			стр1 = ТЗОстатки.Добавить();	
			стр1.Код   = Артикул;
				попытка
				стр1.Цена = число( ?(остатокСтр="", "0", остатокСтр) );
				исключение
				#Если Клиент Тогда	
			 		сообщить(строка(i)+" строка. Артикул/Цена: '"+Артикул+"' = '"+остатокСтр+"'", СтатусСообщения.Внимание);
			   	 #КонецЕсли
			 	КонецПопытки;
		 	КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
		          //округляется до 1р.
Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗОстатки.Код,
	               |	&НовЛайн КАК Контрагент,
	               |	&ДатаУстановки КАК ДатаУстановки,
	               |	ВЫРАЗИТЬ(ТЗОстатки.Цена * (1 - &НашаСкидкаДилера) КАК ЧИСЛО(15, 2)) КАК Цена
	               |ПОМЕСТИТЬ ВТ_ТабОстатки
	               |ИЗ
	               |	&ТЗОстатки КАК ТЗОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабОстатки.Контрагент КАК Контрагент,
	               |	СПрНоменклатура.Ссылка КАК Номенклатура,
	               |	МАКСИМУМ(ТабОстатки.Цена) КАК Цена,
	               |	ТабОстатки.ДатаУстановки КАК ДатаУстановки
	               |ИЗ
	               |	ВТ_ТабОстатки КАК ТабОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СПрНоменклатура
	               |		ПО ТабОстатки.Код = СПрНоменклатура.Артикул
	               |ГДЕ
	               |	СПрНоменклатура.ВидТовара = &ВидТовара
	               |	И СПрНоменклатура.Ссылка В ИЕРАРХИИ(&Родитель)
	               |	И СПрНоменклатура.Ссылка <> &Ссылка
	               |	И СПрНоменклатура.Артикул <> """"
	               |	И ТабОстатки.Цена > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СПрНоменклатура.Ссылка,
	               |	ТабОстатки.Контрагент,
	               |	ТабОстатки.ДатаУстановки";
				   
Запрос.УстановитьПараметр("НашаСкидкаДилера", 0.18); // 18%  на начало июля 2014

Запрос.УстановитьПараметр("ТЗОстатки", ТЗОстатки);
Запрос.УстановитьПараметр("ВидТовара", перечисления.ВидыТоваров.Аксессуары);
Запрос.УстановитьПараметр("Родитель", справочники.Номенклатура.НайтиПоКоду("0000001") ); //Аксессуары
Запрос.УстановитьПараметр("Ссылка", справочники.Номенклатура.ПустаяСсылка() );
Запрос.УстановитьПараметр("НовЛайн",НовЛайн); 
Запрос.УстановитьПараметр("ДатаУстановки", ТекущаяДата() );
Результат = Запрос.Выполнить();      //16,6 "
ТЗцены	  = Результат.Выгрузить();

менЗап = РегистрыСведений.ЦеныНоменклатурыПоставщиков.СоздатьНаборЗаписей();
менЗап.Отбор.Контрагент.Установить(НовЛайн);

#Если Клиент Тогда
Режим = РежимДиалогаВопрос.ДаНет;
Ответ = Вопрос("Удалить старые цены?", Режим, 0);
Если Ответ = КодВозвратаДиалога.Да Тогда
	менЗап.Записать(); // полная очистка
Иначе
	менЗап.Прочитать(); // прибавляем к новым
	ТЗцены0 = менЗап.Выгрузить();
	для i=0 по ТЗцены0.Количество()-1 Цикл
		   стр1 = ТЗцены.Добавить();
		   ЗаполнитьЗначенияСвойств(стр1,ТЗцены0[i]);
	КонецЦикла;	
ТЗцены.Свернуть("Контрагент, Номенклатура, ДатаУстановки, Цена");  
	
менЗап1 = РегистрыСведений.ЦеныНоменклатурыПоставщиков.СоздатьНаборЗаписей();
менЗап1.Отбор.Контрагент.Установить(НовЛайн);
менЗап1.Записать(); // полная очистка

КонецЕсли;
#Иначе
	менЗап.Записать(); // полная очистка
 #КонецЕсли



#Если Клиент Тогда
	 Состояние(строка(ТекущаяДата())+" идет запись "+строка(ТЗцены.Количество())+" цен номенклатуры в регистр ЦеныНоменклатурыПоставщиков...");
#КонецЕсли

менЗап.Загрузить(ТЗцены);
менЗап.Записать(Истина); // ПЕРЕзаписывает то что есть

#Если Клиент Тогда
	 Состояние(строка(ТекущаяДата())+" запись "+строка(ТЗцены.Количество())+" цен номенклатуры завершена.");
	 сообщить(строка(ТекущаяДата())+" запись "+строка(ТЗцены.Количество())+" цен номенклатуры завершена.");
#КонецЕсли

УстановитьЦенуПродажи(НовЛайн, +7 );

КонецПроцедуры






//===================ОБЩИЕ====================================================================


//---------------для регламентного задания собираем все -------------------------------
Процедура СформироватьЗаказыПоПоставщикам() экспорт
	
	Если НЕ константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() Тогда	  
		Возврат;
	КонецЕсли;
	
	Пауэр   	   = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7703247653");
    ТестовыйЗаказ  = ЛОЖЬ;  //сразу нормальный заказ
	
   датаКон = ТекущаяДата();
   датаНач =НачалоДня(датаКон); // записать могут текущим днём любым временем
   
//+++---------------анализируем не по всем поставщикам------------------
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	СрокиДоставки.Поставщик,
               |	СрокиДоставки.СрокДоставки КАК СрокДоставки
               |ИЗ
               |	РегистрСведений.СрокиДоставки КАК СрокиДоставки
               |ГДЕ
               |	НЕ СрокиДоставки.ОТХ
               |
               |УПОРЯДОЧИТЬ ПО
               |	СрокДоставки
               |АВТОУПОРЯДОЧИВАНИЕ";
Результат = Запрос.Выполнить();
ВыборкаПоставщиков = Результат.Выбрать();


	Пока ВыборкаПоставщиков.Следующий() Цикл
		
		//+++ Проверяются Заказы покупателей и создаются заказы поставщикам в Пауэр и у Нас в Базе!
		Если ВыборкаПоставщиков.поставщик = Пауэр Тогда  
	     	ПауэрПроверкаЗаказовПокупателей(датаНач, датаКон, ТестовыйЗаказ); 
		Иначе	
			НовлайнПроверкаЗаказовПокупателей(датаНач, датаКон, ВыборкаПоставщиков.Поставщик); 
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры	

 //мин.наценка на Пауэр (как сказал Доколин - 5%)
Процедура УстановитьЦенуПродажи(Контрагент=Неопределено, НаценкаОтНашейЦены=5, КодТипаЦен = "00005" )
	
	Если Контрагент=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипЦенКрОпт = справочники.ТипыЦенНоменклатуры.НайтиПоКоду(КодТипаЦен); //00005 - КрупныйОпт, 00009 - Дилерская!
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЦеныНоменклатурыПоставщиков.Номенклатура,
	|	ЦеныНоменклатурыПоставщиков.Номенклатура.ЕдиницаХраненияОстатков как ЕдиницаИзмерения,
	
	//	|	ЦеныНоменклатурыПоставщиков.Цена как Закупочная,
	|	выразить( ЦеныНоменклатурыПоставщиков.Цена * (1 + &Наценка) как число(15,0) ) КАК Цена,
	|    &Валюта как Валюта,

	|	&ТипЦенКрОпт как ТипЦен,
	|	0 как ИндексСтрокиТаблицыЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыПоставщиков КАК ЦеныНоменклатурыПоставщиков
	|ГДЕ
	|	ЦеныНоменклатурыПоставщиков.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Наценка", НаценкаОтНашейЦены/100);        // +10
	Запрос.УстановитьПараметр("ТипЦенКрОпт", ТипЦенКрОпт);
	Запрос.УстановитьПараметр("Валюта",  справочники.Валюты.НайтиПоКоду(643) ); //руб
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;	
//===============================================================================	
	
	ДокументУстановкиЦен  	  = документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	
	глТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Робот (магазин)"); //10.12.2014
     параметрыСеанса.ТекущийПользователь = глТекущийПользователь; //26.05.2017
		
	ДокументУстановкиЦен.Дата = НачалоДня( ТекущаяДата() );	
	
	стрЦен = ДокументУстановкиЦен.ТипыЦен.Добавить();
	стрЦен.ТипЦен = ТипЦенКрОпт;
	
	N = Выборка.Количество();       i=0;
	#Если Клиент Тогда
	сообщить(строка(ТекущаяДата())+" Начало установки цен для "+строка( N )+" товаров по поставщику "+строка(Контрагент));
	#КонецЕсли
	
	Пока выборка.Следующий() Цикл 
	#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		i=i+1;
		Если i%100=0 Тогда
		Состояние("Обработано "+строка(i)+" из "+строка(N)+" записей установки цен...");
		КонецЕсли;
	#КонецЕсли	
		стрДок  = ДокументУстановкиЦен.Товары.Добавить(); 
	 	ЗаполнитьЗначенияСвойств(стрДок, Выборка);
	 КонецЦикла;
	 
	 ДокументУстановкиЦен.Комментарий = "Установлены цены Кр.Опт для "+строка(N)+" товаров ("+строка(Контрагент.Код)+") #";
	 
	попытка
		глТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		параметрыСеанса.ТекущийПользователь = глТекущийПользователь; //26.05.2017
		ДокументУстановкиЦен.Ответственный = глТекущийПользователь;
		
		ДокументУстановкиЦен.Записать(РежимЗаписиДокумента.Проведение);
		#Если Клиент Тогда
			Сообщить(строка(ТекущаяДата())+" Записан документ установки цен: "+строка(ДокументУстановкиЦен), СтатусСообщения.Информация);
		#КонецЕсли	

	Исключение
		#Если Клиент Тогда
			Сообщить(строка(ТекущаяДата())+" Ошибка при записи установки цен: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли	
	КонецПопытки;	
	
	
КонецПроцедуры
 
//------------------------------------------------------
// через запрос в SQL базе быстрее чем через прямой отбор
//
Функция ПолучитьКодНоменклатурыПоставщика(Пост, Ном) Экспорт
	 
	 рез = "";
	 ////-----------------каждый раз проверять - долго -----------------------
	 //Если ЗначениеНеЗаполнено(Пост) или ЗначениеНеЗаполнено(Ном) Тогда
	 //   #Если Клиент Тогда
	 //	 Сообщить("Не Заполнена номенклатура или поставщик - Код товара поставщика невозможно определить!", СтатусСообщения.Внимание);
	 // 	#КонецЕсли
	 //	 Возврат рез;
	 //КонецЕсли;
	 
	 Запрос = Новый Запрос; 
	 Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента
	                |ИЗ
	                |	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	                |ГДЕ
	                |	НоменклатураКонтрагентов.Контрагент = &Контрагент
	                |	И НоменклатураКонтрагентов.Номенклатура = &Номенклатура";
	 
	 Запрос.УстановитьПараметр("Контрагент", Пост);
	 Запрос.УстановитьПараметр("Номенклатура", Ном);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Количество()=0 Тогда
		#Если Клиент Тогда
    	  Сообщить("Нет соответсствия для: "+Ном.Код+" ) "+строка(Ном)+" - по поставщику "+строка(Пост)+"!", СтатусСообщения.Внимание);
 	 	#КонецЕсли
	ИначеЕсли Выборка.Следующий() Тогда  
		рез = СокрЛП(выборка.КодНоменклатурыКонтрагента);
	КонецЕсли;
	 
	 Возврат рез;
	
 КонецФункции	
  
//====================Общие методы для всех поставщиков=====================================
Функция ОтправитьПисьмоПоставщику(ЗакПоставщику) Экспорт
	рез = ложь;
	//РеальныйАдресОтправки = Константы.НовЛайнЯщикДляПрайсов.Получить();
	РеальныйАдресОтправки = "no-reply@yst76.ru";
	АдресОтветаПоУмолчанию = РеальныйАдресОтправки; //19.12.2016 - адреса должны быть одинаковые

попытка
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	
	УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(РеальныйАдресОтправки);
		
	Тема = "Заказ № "+ ЗакПоставщику.Номер+" от "+формат(ЗакПоставщику.Дата,"ДФ=dd.MM.yyyy");
	ТекстСообщения = "Добрый день,
	|Высылаем Вам Заказ № "+ ЗакПоставщику.Номер+" от "+формат(ЗакПоставщику.Дата,"ДФ=dd.MM.yyyy")+"
	|
	|C Уважением, 
	|"+строка(ЗакПоставщику.ДоговорКонтрагента.ОтветственноеЛицо)+",
	|ЗАО ТК ""Яршинторг"", www.yst.ru
	|(4852)200-200";
				
	АдресПолучателя = ОпределитьАдресПолучателя(ЗакПоставщику.Контрагент); //модуль ЭлектроннаяПочта.
	АдресМенеджера  = ОпределитьАдресПолучателя(ЗакПоставщику.ДоговорКонтрагента.ОтветственноеЛицо); 
	АдресМенеджера = ?(АдресМенеджера="", АдресОтветаПоУмолчанию, АдресМенеджера);
	
	Если ЗначениеЗаполнено(АдресПолучателя) Тогда
		
		
		ИмяФайлаСообщенияСчет   = "Счет N "+ЗакПоставщику.Номер+" от "+формат(ЗакПоставщику.Дата,"ДЛФ=DD")+"XLS";
 	    ТабличныйДокументОбъект = ЗакПоставщику.ПечатьСчетаЗаказа("",Истина);
		ТабличныйДокументОбъект.Записать(КаталогВременныхФайлов + ИмяФайлаСообщенияСчет, ТипФайлаТабличногоДокумента.XLS);
				
		СписокФайловВложений = новый СписокЗначений;
		СписокФайловВложений.Добавить(КаталогВременныхФайлов+ИмяФайлаСообщенияСчет);

		яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателя,СписокФайловВложений, УЗ, ТекстСообщения, Тема, АдресМенеджера);
		
	КонецЕсли;
рез = истина;

Исключение
	#Если Клиент Тогда
		сообщить("Ошибка при отправке письма поставщику: "+строка(ЗакПоставщику.Контрагент)+" по документу: "+строка(ЗакПоставщику)+" : "+ ОписаниеОшибки(), СтатусСообщения.Внимание );
	#КонецЕсли
КонецПопытки;
	
	Возврат рез;
 КонецФункции

//-------------Функция возвращает номер заказа поставщика------------------------------
//    только 1 номер!
// если заказы объединяются, то здесь остаётся изначальный заказ!
//
Функция ПолучитьНомерЗаказаПоставщика(ЗакПокупателя, Поставщик)
	
	запрос = новый Запрос;
	запрос.Текст = "ВЫБРАТЬ  
	               //|	РегСв.ДатаДокумента,
	               |	РегСв.НомерДокумента
	               |ИЗ
	               |	РегистрСведений.СписокУжеСозданныхЗаказов КАК РегСв
	               |ГДЕ
	               |	РегСв.Поставщик = &Поставщик
	               |	И РегСв.ЗаказПокупателя = &ЗаказПокупателя";
	запрос.УстановитьПараметр("Поставщик", Поставщик); 
	запрос.УстановитьПараметр("ЗаказПокупателя",ЗакПокупателя); 
	результат = запрос.Выполнить();
	выборка   = результат.Выбрать();
	
	рез = "";
	Если выборка.Следующий() Тогда
		рез = выборка.НомерДокумента;
		Если выборка.Следующий() Тогда
			#Если Клиент Тогда
				Сообщить("По "+строка(ЗакПокупателя)+" существует: "+строка(выборка.Количество())+" заказа поставщику: "+строка(Поставщик),СтатусСообщения.Внимание); 
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Возврат рез;
	
КонецФункции	


//Функция проверки по регистру РазмещениеЗаказовПокупателей по документу "Заказ покупателя"
//нужна для ограничения доступа к форме Заказа и Корректировки заказов покупателй
//
Функция ЕстьРезервПоЗаказуПоставщика(Заказ=Неопределено, ПолучитьЗаказыПоставщику=ЛОЖЬ) Экспорт
	рез = Ложь;
	Если Заказ=документы.ЗаказПокупателя.ПустаяСсылка() или Заказ=Неопределено Тогда
		Возврат рез;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику,
	               |	РазмещениеЗаказовПокупателейОстатки.Номенклатура,
	               |	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя = &Заказ) КАК РазмещениеЗаказовПокупателейОстатки";
	
	Запрос.УстановитьПараметр("Заказ", Заказ );
	
	Если ПолучитьЗаказыПоставщику Тогда  //20.09.2016
		Запрос.Текст = стрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "");//все
		Результат = Запрос.Выполнить();
		рез = Результат.Выгрузить();   // возвращаем ТаблЗнач!
	Иначе
		Результат = Запрос.Выполнить();
		рез = НЕ Результат.Пустой(); 
	КонецЕсли;
	
	Возврат рез;
	
КонецФункции	

Функция ПолучитьМассивФилиалов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Подразделения.Ссылка
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.ОбособленноеПодразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделения.Код
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	табл = Результат.Выгрузить();
	
	мас = табл.ВыгрузитьКолонку("ссылка");
	мас.Вставить(0,справочники.Подразделения.НайтиПоКоду("00005")); // в 0 элемент - это Головное подразделение!
	
	Возврат мас;

КонецФункции	


// СписокНоменклатуры - Таблица значений с двумя колонками:
// 1. Номенклатура - Ссылка
// 2. Количество   - Требуемое количество
Функция ПолучитьОстаткиНоменклатурыМишлен(СписокНоменклатуры) Экспорт
	
    ФайлЗапроса = ПолучитьИмяВременногоФайла("xml");
	ФайлаОтвета = ПолучитьИмяВременногоФайла("xml");
	
    // Записываем в файл текстовое содержимое
    // тела запроса (переменная "ТелоЗапроса")	
	Запись = Новый ЗаписьXML();

    Запись.УстановитьСтроку("UTF-8");

    Запись.ЗаписатьОбъявлениеXML();
	//Запись.ЗаписатьАтрибут("","DOCTYPEinquiry_A2 SYSTEM ""inquiry_A2.dtd""");
    Запись.ЗаписатьНачалоЭлемента("inquiry_A2");
	Запись.ЗаписатьНачалоЭлемента("DocumentID");
	Запись.ЗаписатьТекст("A2");
	Запись.ЗаписатьКонецЭлемента(); // DocumentID
	Запись.ЗаписатьНачалоЭлемента("Variant");
	Запись.ЗаписатьТекст("5");
	Запись.ЗаписатьКонецЭлемента(); // Variant
	Запись.ЗаписатьНачалоЭлемента("TransportPriority");
	Запись.ЗаписатьТекст("REPL");
	Запись.ЗаписатьКонецЭлемента(); // TransportPriority
	Запись.ЗаписатьНачалоЭлемента("BuyerParty");
	Запись.ЗаписатьНачалоЭлемента("PartyID");
	Запись.ЗаписатьТекст("J0017815");
	Запись.ЗаписатьКонецЭлемента(); // PartyID
	Запись.ЗаписатьНачалоЭлемента("AgencyCode");
	Запись.ЗаписатьТекст("91");
	Запись.ЗаписатьКонецЭлемента(); // AgencyCode
	Запись.ЗаписатьКонецЭлемента(); // BuyerParty
	
	КоличествоНоменклатуры = СписокНоменклатуры.Количество();
		
    Для Индекс = 1 По КоличествоНоменклатуры Цикл

	    Запись.ЗаписатьНачалоЭлемента("OrderLine");
	    Запись.ЗаписатьНачалоЭлемента("LineID");
		Запись.ЗаписатьТекст(Строка(Индекс));
	    Запись.ЗаписатьКонецЭлемента(); // LineID
		Запись.ЗаписатьНачалоЭлемента("OrderedArticle");
		Запись.ЗаписатьНачалоЭлемента("ArticleIdentification");
	    Запись.ЗаписатьНачалоЭлемента("ManufacturersArticleID");
		Запись.ЗаписатьТекст(СокрЛП(СписокНоменклатуры[Индекс-1].Номенклатура.Артикул));
	    Запись.ЗаписатьКонецЭлемента(); // ManufacturersArticleID
		Запись.ЗаписатьКонецЭлемента(); // ArticleIdentification
		Запись.ЗаписатьНачалоЭлемента("RequestedQuantity");
		Запись.ЗаписатьНачалоЭлемента("QuantityValue");
		Запись.ЗаписатьТекст(СокрЛП(Строка(СписокНоменклатуры[Индекс-1].Количество)));
	    Запись.ЗаписатьКонецЭлемента(); // QuantityValue
		Запись.ЗаписатьКонецЭлемента(); // RequestedQuantity
		Запись.ЗаписатьКонецЭлемента(); // OrderedArticle
		Запись.ЗаписатьКонецЭлемента(); // OrderLine

	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента(); // inquiry_A2

    ТелоЗапроса = Запись.Закрыть();
	
    ТекстовыйФайл = Новый ТекстовыйДокумент;
    ТекстовыйФайл.УстановитьТекст(ТелоЗапроса);           
    ТекстовыйФайл.Записать(ФайлЗапроса, КодировкаТекста.UTF8);
    ФайлОтправки = Новый Файл(ФайлЗапроса); 
    РазмерФайлаЗапроса = XMLСтрока(ФайлОтправки.Размер());

    ЗаголовокHTTP = Новый Соответствие();
    ЗаголовокHTTP.Вставить("Authorization", "Basic TVdSMDk5NDpKYTkzMjY2Kg=="); // Login:Password в кодировке XOR base 64 
    ЗаголовокHTTP.Вставить("POST", "/MichelinSCEBE/AdhocA2XML25Servlet HTTP/1.1");
    ЗаголовокHTTP.Вставить("Host", "www.bibserve.com");
    ЗаголовокHTTP.Вставить("Content-Type", "text/xml; charset=utf-8");
    ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");
    ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаЗапроса);

    HTTPСоединение = Новый HTTPСоединение("www.bibserve.com",,,,,);
    HTTPСоединение.ОтправитьДляОбработки(ФайлЗапроса, "/MichelinSCEBE/AdhocA2XML25Servlet", ФайлаОтвета, ЗаголовокHTTP);
	
	Возврат РазобратьФайлОтветаМишлен(ФайлаОтвета);
	
КонецФункции

// СписокНоменклатуры - Таблица значений с двумя колонками:
// 1. Номенклатура - Ссылка
// 2. Количество   - Требуемое количество
// НомерЗаказаВНашейБазе - Строка
Функция СоздатьЗаказМишлен(СписокНоменклатуры, НомерЗаказаВНашейБазе) Экспорт
	
    ФайлЗапроса = ПолучитьИмяВременногоФайла("xml");
	ФайлаОтвета = ПолучитьИмяВременногоФайла("xml");
	
    // Записываем в файл текстовое содержимое
    // тела запроса (переменная "ТелоЗапроса")	
	Запись = Новый ЗаписьXML();

    Запись.УстановитьСтроку("UTF-8");

    Запись.ЗаписатьОбъявлениеXML();
	//Запись.ЗаписатьАтрибут("","DOCTYPEinquiry_A2 SYSTEM ""inquiry_A2.dtd""");
    Запись.ЗаписатьНачалоЭлемента("order_A2");
	Запись.ЗаписатьНачалоЭлемента("DocumentID");
	Запись.ЗаписатьТекст("A2");
	Запись.ЗаписатьКонецЭлемента(); // DocumentID
	Запись.ЗаписатьНачалоЭлемента("Variant");
	Запись.ЗаписатьТекст("5");
	Запись.ЗаписатьКонецЭлемента(); // Variant
	Запись.ЗаписатьНачалоЭлемента("TransportPriority");
	Запись.ЗаписатьТекст("REPL"); 
	Запись.ЗаписатьКонецЭлемента(); // TransportPriority
	Запись.ЗаписатьНачалоЭлемента("CustomerReference");
	Запись.ЗаписатьНачалоЭлемента("DocumentID");
	Запись.ЗаписатьТекст(НомерЗаказаВНашейБазе);  // Номер заказа в нашей базе
	Запись.ЗаписатьКонецЭлемента(); // DocumentID
	Запись.ЗаписатьКонецЭлемента(); // CustomerReference
	Запись.ЗаписатьНачалоЭлемента("BuyerParty");
	Запись.ЗаписатьНачалоЭлемента("PartyID");
	Запись.ЗаписатьТекст("J0017815");
	Запись.ЗаписатьКонецЭлемента(); // PartyID
	Запись.ЗаписатьНачалоЭлемента("AgencyCode");
	Запись.ЗаписатьТекст("91");
	Запись.ЗаписатьКонецЭлемента(); // AgencyCode
	Запись.ЗаписатьКонецЭлемента(); // BuyerParty
	
	КоличествоНоменклатуры = СписокНоменклатуры.Количество();
		
    Для Индекс = 1 По КоличествоНоменклатуры Цикл

	    Запись.ЗаписатьНачалоЭлемента("OrderLine");
	    Запись.ЗаписатьНачалоЭлемента("LineID");
		Запись.ЗаписатьТекст(Строка(Индекс));
	    Запись.ЗаписатьКонецЭлемента(); // LineID
		
		Запись.ЗаписатьНачалоЭлемента("AdditionalCustomerReferenceNumber");
	    Запись.ЗаписатьНачалоЭлемента("DocumentID");
		Запись.ЗаписатьТекст("Product");       // Комментарий к номенклатуре, не знаю че сюда писать
	    Запись.ЗаписатьКонецЭлемента(); // DocumentID
		Запись.ЗаписатьКонецЭлемента(); // AdditionalCustomerReferenceNumber
		
		Запись.ЗаписатьНачалоЭлемента("OrderedArticle");
		Запись.ЗаписатьНачалоЭлемента("ArticleIdentification");
	    Запись.ЗаписатьНачалоЭлемента("ManufacturersArticleID");
		Запись.ЗаписатьТекст(СокрЛП(СписокНоменклатуры[Индекс-1].Номенклатура.Артикул));
	    Запись.ЗаписатьКонецЭлемента(); // ManufacturersArticleID
		Запись.ЗаписатьКонецЭлемента(); // ArticleIdentification
		Запись.ЗаписатьНачалоЭлемента("RequestedQuantity");
		Запись.ЗаписатьНачалоЭлемента("QuantityValue");
		Запись.ЗаписатьТекст(СокрЛП(Строка(СписокНоменклатуры[Индекс-1].Количество)));
	    Запись.ЗаписатьКонецЭлемента(); // QuantityValue
		Запись.ЗаписатьКонецЭлемента(); // RequestedQuantity
		Запись.ЗаписатьКонецЭлемента(); // OrderedArticle
	
		Запись.ЗаписатьКонецЭлемента(); // OrderLine

	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента(); // inquiry_A2

    ТелоЗапроса = Запись.Закрыть();
	
    ТекстовыйФайл = Новый ТекстовыйДокумент;
    ТекстовыйФайл.УстановитьТекст(ТелоЗапроса);           
    ТекстовыйФайл.Записать(ФайлЗапроса, КодировкаТекста.UTF8);
    ФайлОтправки = Новый Файл(ФайлЗапроса); 
    РазмерФайлаЗапроса = XMLСтрока(ФайлОтправки.Размер());

    ЗаголовокHTTP = Новый Соответствие();
    ЗаголовокHTTP.Вставить("Authorization", "Basic TVdSMDk5NDpKYTkzMjY2Kg=="); // Login:Password в кодировке XOR base 64 
    ЗаголовокHTTP.Вставить("POST", "/MichelinSCEBE/AdhocA2XML25Servlet HTTP/1.1");
    ЗаголовокHTTP.Вставить("Host", "www.bibserve.com");
    ЗаголовокHTTP.Вставить("Content-Type", "text/xml; charset=utf-8");
    ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");
    ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаЗапроса);

    HTTPСоединение = Новый HTTPСоединение("www.bibserve.com",,,,,);
    HTTPСоединение.ОтправитьДляОбработки(ФайлЗапроса, "/MichelinSCEBE/AdhocA2XML25Servlet", ФайлаОтвета, ЗаголовокHTTP);
	
	Возврат РазобратьФайлОтветаМишленЗаказ(ФайлаОтвета);
	
КонецФункции

Функция РазобратьФайлОтветаМишленЗаказ(ФайлаОтвета)
	
	ТЗ =Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("ДатаПоставки");
	ТЗ.Колонки.Добавить("КодОшибки");
	ТЗ.Колонки.Добавить("НомерЗаказаМишлен");
	
	Чтение = Новый ЧтениеXML;

	Чтение.ОткрытьФайл(ФайлаОтвета);
    ИмяТекУзла = "";
	Пока Чтение.Прочитать() Цикл 
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяПредУзла = ИмяТекУзла;
			ИмяТекУзла = Чтение.Имя;			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "ManufacturersArticleID" Тогда     //номенклатура
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Чтение.Значение);
				
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "DocumentID" и ИмяПредУзла = "OrderReference" Тогда  //код мишлен
			НомерЗаказаМишлен = Чтение.Значение;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "ErrorCode" и ИмяПредУзла = "Error" Тогда    // код ошибки строки
			КодОшибки = Число(Чтение.Значение);
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "DeliveryDate" Тогда       //дата поставки
			
			Если Найти(Чтение.Значение,"9999") > 0 Тогда
				Новзапись = ТЗ.Добавить();
				Новзапись.Номенклатура = Номенклатура;
			    НовЗапись.ДатаПоставки = Дата(1,1,1);
			Иначе
				Новзапись = ТЗ.Добавить();
				Новзапись.Номенклатура = Номенклатура;
			    НовЗапись.ДатаПоставки = Дата(СтрЗаменить(Чтение.Значение,"-",""));	
			КонецЕсли;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "QuantityValue" и ИмяПредУзла = "ConfirmedQuantity" Тогда  //подтвержденное количество
			НовЗапись.Количество = Число(Чтение.Значение);
			
			НовЗапись.КодОшибки = КодОшибки;
			
			НовЗапись.НомерЗаказаМишлен = НомерЗаказаМишлен;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ИмяТекУзла = "";
 		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ТЗ;
КонецФункции

Функция РазобратьФайлОтветаМишлен(ФайлаОтвета)
	
	ТЗ =Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("ДатаПоставки");
	
	Чтение = Новый ЧтениеXML;

	Чтение.ОткрытьФайл(ФайлаОтвета);
    ИмяТекУзла = "";
	Пока Чтение.Прочитать() Цикл 
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяПредУзла = ИмяТекУзла;
			ИмяТекУзла = Чтение.Имя;			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "ManufacturersArticleID" Тогда
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Чтение.Значение);
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "DeliveryDate" Тогда
			
			Если Найти(Чтение.Значение,"9999") > 0 Тогда
				Новзапись = ТЗ.Добавить();
				Новзапись.Номенклатура = Номенклатура;
			    НовЗапись.ДатаПоставки = Дата(1,1,1);
			Иначе
				Новзапись = ТЗ.Добавить();
				Новзапись.Номенклатура = Номенклатура;
			    НовЗапись.ДатаПоставки = Дата(СтрЗаменить(Чтение.Значение,"-",""));	
			КонецЕсли;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "QuantityValue" и ИмяПредУзла = "AvailableQuantity" Тогда
			НовЗапись.Количество = Число(Чтение.Значение);
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ИмяТекУзла = "";
 		КонецЕсли;	
	КонецЦикла;		
	
	Возврат ТЗ;
КонецФункции


// СписокНоменклатуры - Таблица значений с двумя колонками:
// 1. Номенклатура - Ссылка
// 2. Количество   - Требуемое количество
// НомерЗаказаВНашейБазе - Строка
Функция СоздатьЗаказСеверАвто(СписокНоменклатуры, НомерЗаказаВНашейБазе) Экспорт
	
    ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	ФайлаОтвета = ПолучитьИмяВременногоФайла("json");
		
	Запись = "{" + Символы.ПС;
	
	Запись = Запись + """orderDate"": """+  строка(Формат(ТекущаяДата()+60*60*24*3,"ДФ=dd.MM.yy"))  +"""," + Символы.ПС;  //    ""01.02.17"",");
    Запись = Запись + """paymentType"": 3," + Символы.ПС;
    Запись = Запись + """shipmentType"": 1," + Символы.ПС;
    Запись = Запись + """paymentTerms"": 1," + Символы.ПС;
    Запись = Запись + """deliveryAddressId"": 86523054651," + Символы.ПС;
    Запись = Запись + """deliveryTime"": ""11-00""," + Символы.ПС;
    Запись = Запись + """deliveryPerson"": ""Федоров Максим""," + Символы.ПС;
    Запись = Запись + """deliveryPhone"": ""+7(485)220-02-00""," + Символы.ПС;
    Запись = Запись + """deliveryPhoneAdditional"": ""132""" + Символы.ПС;
	
    Запись = Запись + "}";	
		
	Набор = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	набор.Отбор.Объект.Установить(Справочники.Контрагенты.НайтиПоКоду("00282"));
	набор.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Ключ авторизации"));
	
	набор.Прочитать();
	
	Для каждого стр из Набор Цикл
		Ключ = стр.Значение;	
	КонецЦикла;
		
	WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
	WinHttp.Open("POST","http://mimtest.svrauto.ru/api/v2/orders",0);
	WinHttp.setRequestHeader("Authorization", "Bearer " + СокрЛП(Ключ));
	WinHttp.setRequestHeader("Content-Type",  "application/json");
	WinHttp.Send(Запись);
	
	Ответ = WinHttp.ResponseText();
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлаОтвета,"UTF-8");
	
	СтруктураОтвета = РазобратьФайлОтветаСеверАвтоЗаказ(ФайлаОтвета);
	ИДЗаказа = Строка(СтруктураОтвета.id);
	
	СписокНоменклатуры.Колонки.Добавить("Код");
	СписокНоменклатуры.Колонки.Добавить("Склад");
	
	для каждого стр из СписокНоменклатуры Цикл
		
		набор = РегистрыСведений.ОстаткиНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
		набор.Отбор.Контрагент.Установить(Справочники.Контрагенты.НайтиПоКоду("00282"));
		набор.Отбор.номенклатура.Установить(стр.Номенклатура);
		
		если Набор.Количество() = 0 Тогда  //Такого быть не должно
			Возврат Неопределено;
		КонецЕсли;
		
		Для каждого стр11 из Набор Цикл
			ВсяСтрока = СокрЛП(стр11.КодПоставщика);
			Позиция = Найти(ВсяСтрока,";");
			КодП = Лев(ВсяСтрока,Позиция-1);
			стр.Код = КодП;
			стр.Склад = СокрЛП(стр11.КодПоставщика);
		КонецЦикла;
		
	КонецЦикла;
	
	Запись = "[" + Символы.ПС;
	
	Для каждого стр22 из СписокНоменклатуры Цикл
		
		Запись = Запись + "{" + Символы.ПС;
		
		Запись = Запись + """goodsId"": " + стр22.Код + "," + Символы.ПС;
		Запись = Запись + """quantity"": " + строка(стр22.Количество) + "," + Символы.ПС;
		Запись = Запись + """stockType"": 1," + Символы.ПС;
		Запись = Запись + """territoryId"": " + ?(Найти(стр22.Склад,"Черное")>0,"85858701837","85858701785") + "," + Символы.ПС;
		
		Запись = Запись + "}" + Символы.ПС;
		
	КонецЦикла;
	
	Запись = Запись + "]";
	
	WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
	WinHttp.Open("POST","http://mimtest.svrauto.ru/api/v2/orders/" + ИДЗаказа + "/items",0);
	WinHttp.setRequestHeader("Authorization", "Bearer " + СокрЛП(Ключ));
	WinHttp.setRequestHeader("Content-Type",  "application/json");
	WinHttp.Send(Запись);
	
	Ответ = WinHttp.ResponseText();
	ФайлРезультата = ПолучитьИмяВременногоФайла("json");
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлРезультата,"UTF-8");
	
	СтруктураОтвета2 = РазобратьФайлОтветаСеверАвтоЗаказ(ФайлРезультата);
	
	Если СтруктураОтвета2.sum > 0 Тогда
		Возврат ИДЗаказа;
	КонецЕсли;
КонецФункции


// СписокНоменклатуры - Таблица значений с двумя колонками:
// 1. Номенклатура - Ссылка
// 2. Количество   - Требуемое количество
// НомерЗаказаВНашейБазе - Строка
Функция СоздатьЗаказПауэр(СписокНоменклатуры, НомерЗаказаВНашейБазе) Экспорт	
	
	URL = "http://schemas.datacontract.org/2004/07/TS3.Domain.Models.Client.ClientSoapService.CreateOrder";
	
	Прокси = WSссылки.ЗаказыПауэр.СоздатьWSПрокси("Wcf.ClientService.Client.WebAPI.TS3", "ClientService", "BasicHttpBinding_ClientService");
	
	Фабрика = Прокси.ФабрикаXDTO;	
	Логин = "sa15650";
	Пароль = "4G!vcfC#l%";
	Заказ = Фабрика.Создать(Фабрика.Тип(URL, "Order"));
	
	//Заказ.is_test = Истина;
	
	Заказ.comment = НомерЗаказаВНашейБазе;
	
	Товары = Фабрика.Создать(Фабрика.Тип(URL, "ArrayOfOrderProduct"));
	
	Для каждого стр из СписокНоменклатуры Цикл
		Товар = Фабрика.Создать(Фабрика.Тип(URL, "OrderProduct"));
		Товар.code = стр.Номенклатура.Артикул;
		Товар.quantity = стр.Количество;
		Товар.wrh = 1;
		
		Товары.OrderProduct.Добавить(Товар);
		
	КонецЦикла;
	
	заказ.product_list = Товары;
	
	Результат = Прокси.CreateOrder(Логин,Пароль,Заказ);
	
	Если Результат.success Тогда 
	    Возврат Результат.orderNumber;
	иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции


Функция РазобратьФайлОтветаСеверАвтоЗаказ(ФайлаОтвета)	
	Файл = Новый ЧтениеТекста(ФайлаОтвета); 
	Текст = Файл.Прочитать();
	Файл.Закрыть();
	
	рез = ОбработкаJSON(Текст);
	Возврат Рез;
КонецФункции

Процедура ПолучениеКлючаАвторизацииСеверАвто() Экспорт
	
	WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
	WinHttp.Open("GET","http://mimtest.svrauto.ru/api/v2/token/SEVERAUTO",0);
	WinHttp.setRequestHeader("Authorization", "Basic Qk9USkFSU0hJTlRPUkdUSzAxOk44VEI0Wkkz");
	WinHttp.setRequestHeader("Accept"       ,  "application/json");
	WinHttp.Send();
	
	Ответ = WinHttp.ResponseText();
	ФайлРезультата = ПолучитьИмяВременногоФайла("json");
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлРезультата,"UTF-8 ");
	
	Файл = Новый ЧтениеТекста(ФайлРезультата); 
	Текст = Файл.Прочитать();
	Файл.Закрыть();
	
	рез = ОбработкаJSON(Текст);
	
	Ключ = рез.accessToken;
	
	Набор = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	набор.Отбор.Объект.Установить(Справочники.Контрагенты.НайтиПоКоду("00282"));
	набор.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Ключ авторизации"));
	
	набор.Прочитать();
    Для каждого стр из Набор Цикл
		стр.Значение = Ключ;	
	КонецЦикла;	
	
	Набор.Записать();
	
КонецПроцедуры



// схема переноса авансов по заказам покупателей
Функция РассчитатьСуммуМаксимальнойОплаты(ДокЗаказ,ДатаПроверки)Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("Объект",ДокЗаказ.контрагент);
	Отбор.Вставить("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90217"));
	ЗаписьСвойства = регистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор);
	Если ЗаписьСвойства.значение = Истина Тогда
		МаксОстаток = ДокЗаказ.СуммаДокумента; 
	иначе
		
		Если ДокЗаказ.видЗаказа<>2 Тогда //копия сезонного или обычный
			Запрос = Новый Запрос;                                                
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикамСезонныеОстатки.Номенклатура) КАК Номенклатура,
			|	СУММА(ЗаказыПоставщикамСезонныеОстатки.КоличествоОстаток * ЗаказПоставщикуСезонныйТовары.Цена) КАК СуммаОстатка,
			|	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ЗаказДубль КАК ЗаказПоставщику
			|ПОМЕСТИТЬ ОстаткиНевыполненные
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(&Дата, ЗаказПоставщикуСезонный = &ЗаказСез) КАК ЗаказыПоставщикамСезонныеОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщикуСезонный.Товары КАК ЗаказПоставщикуСезонныйТовары
			|		ПО ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный = ЗаказПоставщикуСезонныйТовары.Ссылка
			|			И ЗаказыПоставщикамСезонныеОстатки.Номенклатура = ЗаказПоставщикуСезонныйТовары.Номенклатура
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ЗаказДубль
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	NULL,
			|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток, 0),
			|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.ЗаказПоставщику, Документ.Ссылка)
			|ИЗ
			|	Документ.ЗаказПоставщику КАК Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&Дата, ЗаказПоставщику = &Заказ) КАК ЗаказыПоставщикамОстатки
			|		ПО (ЗаказыПоставщикамОстатки.ЗаказПоставщику = Документ.Ссылка)
			|ГДЕ
			|	Документ.Ссылка = &Заказ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ВложенныйЗапрос.ЗаказПоставщику) КАК Документ,
			|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
			|				КОГДА ВложенныйЗапрос.ЗаказПоставщику.ВидЗаказа = 0
			|					ТОГДА ВЫБОР
			|							КОГДА ЕСТЬNULL(ВложенныйЗапрос.СуммаОстатка, 0) > ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0)
			|								ТОГДА ЕСТЬNULL(ВложенныйЗапрос.СуммаОстатка, 0) - ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				КОГДА ВложенныйЗапрос.ЗаказПоставщику.ВидЗаказа = 1
			|					ТОГДА ВЫБОР
			|							КОГДА ЕСТЬNULL(ВложенныйЗапрос.СуммаОстатка, 0) * &Коф > ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0)
			|								ТОГДА ЕСТЬNULL(ВложенныйЗапрос.СуммаОстатка, 0) * &Коф - ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК МаксОстаток,
			|	ВложенныйЗапрос.СуммаОстатка КАК СуммаНевыполнено
			|ИЗ
			|	(ВЫБРАТЬ
			|		СУММА(ОстаткиНевыполненные.СуммаОстатка) КАК СуммаОстатка,
			|		ОстаткиНевыполненные.ЗаказПоставщику КАК ЗаказПоставщику
			|	ИЗ
			|		ОстаткиНевыполненные КАК ОстаткиНевыполненные
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ОстаткиНевыполненные.ЗаказПоставщику) КАК ВложенныйЗапрос
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&Дата, Сделка = &Заказ) КАК ВзаиморасчетыСКонтрагентамиОстатки
			|		ПО ВложенныйЗапрос.ЗаказПоставщику = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.СуммаОстатка";
			
			Запрос.УстановитьПараметр("Дата", ДатаПроверки);
			Запрос.УстановитьПараметр("заказ", ДокЗаказ);
			Если ДокЗаказ.ВидЗаказа=1 Тогда
				Запрос.УстановитьПараметр("ЗаказСез", ДокЗаказ.СезонныйЗаказДляСинхронизации);
				// процент можно задавать в сезоннике, по умолчанию 20%
				Запрос.УстановитьПараметр("Коф", ?(ДокЗаказ.СезонныйЗаказДляСинхронизации.ПроцентПредоплаты=0,0.2,ДокЗаказ.СезонныйЗаказДляСинхронизации.ПроцентПредоплаты/100));
			иначе
				Запрос.УстановитьПараметр("заказСез", Null);
				Запрос.УстановитьПараметр("Коф",0.2);

			Конецесли;	
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				МаксОстаток = Выборка.МаксОстаток;
				НевыполненоОстаток = Выборка.СуммаНевыполнено;
			иначе
				МаксОстаток =  0;
				НевыполненоОстаток = 0;
			КонецЕсли;
			
		иначе  // пресформа
			Запрос = Новый Запрос;                                                
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	  ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход КАК МаксОстаток
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, &Кон, , Сделка = &ДокЗаказ) КАК ВзаиморасчетыСКонтрагентамиОбороты";
			
			Запрос.УстановитьПараметр("ДокЗаказ", ДокЗаказ);
			Запрос.УстановитьПараметр("Кон", ДатаПроверки);
			
			Результат = Запрос.Выполнить();
			
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				МаксОстаток = ДокЗаказ.суммаДокумента-  Выборка.МаксОстаток;
			иначе
				МаксОстаток = ДокЗаказ.суммаДокумента ;	 
			КонецЕсли;
				НевыполненоОстаток = 0;

		КонецЕсли;	
	КонецЕсли;
	  Ответ = новый Структура();
	  Ответ.Вставить("МаксОстаток",МаксОстаток);
	  Ответ.Вставить("НевыполненоОстаток",НевыполненоОстаток);
	Возврат  Ответ;
КонецФункции

Функция РассчитатьСуммуЗачетаАванса(ТабДвижений,Дата) Экспорт
				  Запрос = Новый Запрос;
			  Запрос.Текст = 
			  "ВЫБРАТЬ
			  |	Таб.ЗаказПоставщикуСезонный,
			  |	Таб.Номенклатура,
			  |	Таб.Количество
			  |ПОМЕСТИТЬ ВТ
			  |ИЗ
			  |	&Таб КАК Таб
			  |ГДЕ
			  |	Таб.ЗаказПоставщикуСезонный <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщикуСезонный.ПустаяСсылка)
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	ЗаказПоставщикуСезонныйТовары.Номенклатура,
			  |	ЗаказПоставщикуСезонныйТовары.Цена,
			  |	ЗаказПоставщикуСезонныйТовары.Ссылка
			  |ПОМЕСТИТЬ ЦеныНоменклатуры
			  |ИЗ
			  |	Документ.ЗаказПоставщикуСезонный.Товары КАК ЗаказПоставщикуСезонныйТовары
			  |ГДЕ
			  |	ЗаказПоставщикуСезонныйТовары.Ссылка В
			  |			(ВЫБРАТЬ
			  |				ВТ.ЗаказПоставщикуСезонный
			  |			ИЗ
			  |				ВТ КАК ВТ)
			  |	И ЕСТЬNULL(ЗаказПоставщикуСезонныйТовары.Ссылка.Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный,
			  |	ЗаказыПоставщикамСезонныеОстатки.Номенклатура,
			  |	ЗаказыПоставщикамСезонныеОстатки.КоличествоОстаток * ЦеныНоменклатуры.Цена КАК Сумма
			  |ПОМЕСТИТЬ ОстаткиВПроизводстве
			  |ИЗ
			  |	РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(
			  |			&ДатаДокумента,
			  |			ЗаказПоставщикуСезонный В
			  |					(ВЫБРАТЬ
			  |						ВТ.ЗаказПоставщикуСезонный
			  |					ИЗ
			  |						ВТ КАК ВТ)
			  |				И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПоставщикамСезонныеОстатки
			  |		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
			  |		ПО ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный = ЦеныНоменклатуры.Ссылка
			  |			И ЗаказыПоставщикамСезонныеОстатки.Номенклатура = ЦеныНоменклатуры.Номенклатура
			  |ГДЕ
			  |	ЗаказыПоставщикамСезонныеОстатки.КоличествоОстаток > 0
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	ВложенныйЗапрос.ЗаказПоставщикуСезонный КАК ЗаказПоставщикуСезонный,
			  |	ВЫРАЗИТЬ(ВЫБОР
			  |			КОГДА ВложенныйЗапрос.Сумма * ВЫБОР
			  |					КОГДА ВложенныйЗапрос.ЗаказПоставщикуСезонныйПроцентПредоплаты = 0
			  |						ТОГДА 0.2
			  |					ИНАЧЕ ВложенныйЗапрос.ЗаказПоставщикуСезонныйПроцентПредоплаты / 100
			  |				КОНЕЦ < ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0)
			  |				ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.Сумма * ВЫБОР
			  |							КОГДА ВложенныйЗапрос.ЗаказПоставщикуСезонныйПроцентПредоплаты = 0
			  |								ТОГДА 0.2
			  |							ИНАЧЕ ВложенныйЗапрос.ЗаказПоставщикуСезонныйПроцентПредоплаты / 100
			  |						КОНЕЦ КАК ЧИСЛО(15, 2))
			  |			КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) < 0
			  |				ТОГДА 0
			  |			ИНАЧЕ ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0)
			  |		КОНЕЦ / ВложенныйЗапрос.Сумма КАК ЧИСЛО(15, 2)) КАК Коэф,
			  |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК ОстатокУпр,
			  |	ВложенныйЗапрос.Сумма КАК СуммаОстаткаЗаказа,
			  |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Остаток,
			  |	ВЫБОР
			  |		КОГДА ВложенныйЗапрос.Сумма * ВЫБОР
			  |				КОГДА ВложенныйЗапрос.ЗаказПоставщикуСезонныйПроцентПредоплаты = 0
			  |					ТОГДА 0.2
			  |				ИНАЧЕ ВложенныйЗапрос.ЗаказПоставщикуСезонныйПроцентПредоплаты / 100
			  |			КОНЕЦ < ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0)
			  |			ТОГДА 1
			  |		ИНАЧЕ 0
			  |	КОНЕЦ КАК ЕстьОстаток
			  |ПОМЕСТИТЬ КоэфПредоплаты
			  |ИЗ
			  |	(ВЫБРАТЬ
			  |		ОстаткиВПроизводстве.ЗаказПоставщикуСезонный КАК ЗаказПоставщикуСезонный,
			  |		СУММА(ОстаткиВПроизводстве.Сумма) КАК Сумма,
			  |		ОстаткиВПроизводстве.ЗаказПоставщикуСезонный.ПроцентПредоплаты КАК ЗаказПоставщикуСезонныйПроцентПредоплаты
			  |	ИЗ
			  |		ОстаткиВПроизводстве КАК ОстаткиВПроизводстве
			  |	
			  |	СГРУППИРОВАТЬ ПО
			  |		ОстаткиВПроизводстве.ЗаказПоставщикуСезонный) КАК ВложенныйЗапрос
			  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
			  |				&ДатаДокумента,
			  |				Сделка В
			  |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			  |						ЦеныНоменклатуры.Ссылка.ЗаказДубль
			  |					ИЗ
			  |						ЦеныНоменклатуры КАК ЦеныНоменклатуры)) КАК ВзаиморасчетыСКонтрагентамиОстатки
			  |		ПО ВложенныйЗапрос.ЗаказПоставщикуСезонный.ЗаказДубль = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	ВТ.ЗаказПоставщикуСезонный,
			  |	КОЛИЧЕСТВО(ВТ.Номенклатура) КАК Номенклатура,
			  |	СУММА(ВТ.Количество * ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(КоэфПредоплаты.Коэф, 0)) КАК СуммаПредоплаты,
			  |	СРЕДНЕЕ(КоэфПредоплаты.Остаток) КАК Остаток,
			  |	СРЕДНЕЕ(КоэфПредоплаты.ОстатокУпр) КАК ОстатокУпр,
			  |	МАКСИМУМ(КоэфПредоплаты.ЕстьОстаток) КАК ЕстьПереплата,
			  |	СУММА(ВТ.Количество * ЦеныНоменклатуры.Цена) КАК СуммаСписания,
			  |	СРЕДНЕЕ(КоэфПредоплаты.СуммаОстаткаЗаказа) КАК СуммаОстаткаЗаказа
			  |ИЗ
			  |	ВТ КАК ВТ
			  |		ЛЕВОЕ СОЕДИНЕНИЕ КоэфПредоплаты КАК КоэфПредоплаты
			  |		ПО ВТ.ЗаказПоставщикуСезонный = КоэфПредоплаты.ЗаказПоставщикуСезонный
			  |		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
			  |		ПО ВТ.ЗаказПоставщикуСезонный = ЦеныНоменклатуры.Ссылка
			  |			И ВТ.Номенклатура = ЦеныНоменклатуры.Номенклатура
			  |
			  |СГРУППИРОВАТЬ ПО
			  |	ВТ.ЗаказПоставщикуСезонный";
			  
			  Запрос.УстановитьПараметр("ДатаДокумента", Дата);
			  Запрос.УстановитьПараметр("Таб", ТабДвижений);
			  СуммаПредоплат = Запрос.Выполнить().Выгрузить();

Возврат СуммаПредоплат;	
КонецФункции	

Процедура ПроверитьОплатыПоЗаказамПоставщикам() Экспорт
Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикамСезонныеОстатки.Номенклатура) КАК Номенклатура,
		|	СУММА(ЗаказыПоставщикамСезонныеОстатки.КоличествоОстаток * ЗаказПоставщикуСезонныйТовары.Цена) КАК СуммаОстатка,
		|	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ЗаказДубль КАК ЗаказПоставщику
		|ПОМЕСТИТЬ ОстаткиНевыполненные
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(, ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПоставщикамСезонныеОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщикуСезонный.Товары КАК ЗаказПоставщикуСезонныйТовары
		|		ПО ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный = ЗаказПоставщикуСезонныйТовары.Ссылка
		|			И ЗаказыПоставщикамСезонныеОстатки.Номенклатура = ЗаказПоставщикуСезонныйТовары.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ЗаказДубль
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПоставщикамОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.СуммаДокумента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ТипДоговора = 1
		|			ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.СезонныйЗаказДляСинхронизации.ДатаДействияПо
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата, МЕСЯЦ, 2)
		|	КОНЕЦ КАК КонтрольнаяДата,
		|	ЕСТЬNULL(ОстаткиНевыполненные.СуммаОстатка, 0) КАК СуммаОстаткаНевыполненного,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаОстаток,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ВидЗаказа КАК ВидЗаказа
		|ИЗ
		|	ОстаткиНевыполненные КАК ОстаткиНевыполненные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|				,
		|				ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|					И ДоговорКонтрагента.ВалютаВзаиморасчетов <> &Рубли) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|		ПО ОстаткиНевыполненные.ЗаказПоставщику = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ЗаказПоставщику";

	Запрос.УстановитьПараметр("Рубли", Константы.ВалютаРегламентированногоУчета.Получить());

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Документ");
	ТЗ.Колонки.Добавить("Проблема");
	
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидЗаказа =0 Тогда //типовой
			//проверим если прошло 2 месяца и есть ли долг
			Если Выборка.Документ.Контрагент = Справочники.Контрагенты.НайтиПоКоду("") Тогда
			 ДатаОплаты = Выборка.Документ.Дата+7*24*60*60;
			 иначе
			 ДатаОплаты = Выборка.Документ.Дата+30*24*60*60;
			 Конецесли;
			если началоДня(текущаяДата())> началоДня(ДатаОплаты) и выборка.СуммаОстаткаНевыполненного>Выборка.СуммаОстаток Тогда
			новстр = ТЗ.Добавить();
			новстр.Документ = выборка.документ;
			новстр.Проблема = "Заказ плывет более 2х месяцев, оплачен не полностью.";
			Конецесли;	
			если Выборка.СуммаОстаткаНевыполненного< Выборка.СуммаОстаток Тогда
			новстр = ТЗ.Добавить();
			новстр.Документ = выборка.документ;
			новстр.Проблема = "Сумма оплаты по заказу больше суммы невыполненного остатка по документу.";
            КонецЕсли;
		иначеесли Выборка.ВидЗаказа =1 Тогда
			если началоДня(текущаяДата())>Выборка.КонтрольнаяДата Тогда
			новстр = ТЗ.Добавить();
			новстр.Документ = выборка.документ;
			новстр.Проблема = "По закрытому сезонному заказу осталась предоплата.";
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Если ТЗ.Количество()>0 Тогда
		задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
		Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Горицкий А. И.");
		задача.Наименование = "Обратите внимание на оплаты по заказам поставщикам!"; 
		задача.Описание = "проблемы с оплатами: " +"
		|";
		Для каждого стр из ТЗ Цикл
			Задача.Описание = Задача.Описание+ " "+стр.проблема+ " "+стр.документ+"
			|";
		КонецЦикла;
		
		задача.Инициатор   =справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");;
		задача.Дата 		    = ТекущаяДата();
		задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
		задача.СрокОповещения = ТекущаяДата(); 
		
		Попытка 
			задача.Записать();
		исключение
		КонецПопытки;
		попытка
			ДубльЗадача = Задача.Скопировать();
			Дубльзадача.Дата = ТекущаяДата();
			ДубльЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Малышев Егор");
			ДубльЗадача.Записать();
			
		исключение
		КонецПопытки;
		
	КонецЕсли;
	
	
	
Конецпроцедуры	

Процедура ЗагрузитьЗвонкиВБазу() Экспорт
	HTTP = Новый HTTPСоединение("192.168.254.211");       
	
	HTTP.Получить( Новый HTTPЗапрос("/json_getdata_170404.php?start-date=" + строка(Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd")) + "&end-date=" + строка(Формат(КонецДня(ТекущаяДата())+1,"ДФ=yyyy-MM-dd"))), "C:\phone.txt");	
	
	
	Файл = Новый ЧтениеТекста("C:\phone.txt"); 
	Текст = Файл.Прочитать();
	Файл.Закрыть();
	
	рез = ОбработкаJSON(Текст);
	
	Массив = рез.Значение;
	
	Для каждого стр из Массив Цикл
		Если (СтрДлина(СокрЛП(стр.src)) = 3 или СтрДлина(СокрЛП(стр.src)) = 4) и (СтрДлина(СокрЛП(стр.dst)) = 3 или СтрДлина(СокрЛП(стр.dst)) = 4 ) ТОгда   //Между собой, делаем две записи каждому сотруднику
			запись = РегистрыСведений.ЖурналЗвонков.СоздатьМенеджерЗаписи();
			запись.Дата = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(стр.calldate,"-",""),":","")," ",""));
			запись.НомерСотрудника = стр.src;
			запись.НомерАбонента = стр.dst;
			запись.ПоискАбонент = прав(запись.НомерАбонента,6);
			запись.ПоискСотрудник = прав(запись.НомерСотрудника,6);
			запись.ДлительностьЗвонка = Число(Лев(Прав(стр.duration,5),2))*60 + Число(Прав(Прав(стр.duration,5),2));
			//запись.Сотудник = стр.Сотрудник;
			//запись.Контрагент = стр.Контрагент;
			запись.Исход_Вход = "Исходящий";
			запись.Ссылка = СтрЗаменить(стр.recordingfile,"\/","/");
			запись.Записать();
			
			запись = РегистрыСведений.ЖурналЗвонков.СоздатьМенеджерЗаписи();
			запись.Дата = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(стр.calldate,"-",""),":","")," ",""));
			запись.НомерСотрудника = стр.dst;
			запись.НомерАбонента = стр.src;
			запись.ПоискАбонент = прав(запись.НомерАбонента,6);
			запись.ПоискСотрудник = прав(запись.НомерСотрудника,6);
			запись.ДлительностьЗвонка = Число(Лев(Прав(стр.duration,5),2))*60 + Число(Прав(Прав(стр.duration,5),2));
			//запись.Сотудник = стр.Сотрудник;
			//запись.Контрагент = стр.Контрагент;
			запись.Исход_Вход = "Входящий";
			запись.Ссылка = СтрЗаменить(стр.recordingfile,"\/","/");
			запись.Записать();
			
		ИначеЕсли  (СтрДлина(СокрЛП(стр.src)) = 3 или СтрДлина(СокрЛП(стр.src)) = 4) и СтрДлина(СокрЛП(стр.dst)) > 4 ТОгда  //Внешний исходящий
			запись = РегистрыСведений.ЖурналЗвонков.СоздатьМенеджерЗаписи();
			запись.Дата = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(стр.calldate,"-",""),":","")," ",""));
			запись.НомерСотрудника = стр.src;
			запись.НомерАбонента = стр.dst;
			запись.ПоискАбонент = прав(запись.НомерАбонента,6);
			запись.ПоискСотрудник = прав(запись.НомерСотрудника,6);
			запись.ДлительностьЗвонка = Число(Лев(Прав(стр.duration,5),2))*60 + Число(Прав(Прав(стр.duration,5),2));
			//запись.Сотудник = стр.Сотрудник;
			//запись.Контрагент = стр.Контрагент;
			запись.Исход_Вход = "Исходящий";
			запись.Ссылка = СтрЗаменить(стр.recordingfile,"\/","/");
			запись.Записать();
			
		ИначеЕсли  СтрДлина(СокрЛП(стр.src)) > 4 и (СтрДлина(СокрЛП(стр.dst)) = 3 или СтрДлина(СокрЛП(стр.dst)) = 4) ТОгда  //Внешний входящий
			запись = РегистрыСведений.ЖурналЗвонков.СоздатьМенеджерЗаписи();
			запись.Дата = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(стр.calldate,"-",""),":","")," ",""));
			запись.НомерСотрудника = стр.dst;
			запись.НомерАбонента = стр.src;
			запись.ПоискАбонент = прав(запись.НомерАбонента,6);
			запись.ПоискСотрудник = прав(запись.НомерСотрудника,6);
			запись.ДлительностьЗвонка = Число(Лев(Прав(стр.duration,5),2))*60 + Число(Прав(Прав(стр.duration,5),2));
			//запись.Сотудник = стр.Сотрудник;
			//запись.Контрагент = стр.Контрагент;
			запись.Исход_Вход = "Входящий";
			запись.Ссылка = СтрЗаменить(стр.recordingfile,"\/","/");
			запись.Записать();
			
		ИначеЕсли  СтрДлина(СокрЛП(стр.src)) > 4 и СтрДлина(СокрЛП(стр.dst)) = 6 ТОгда  //Внешний входящий
			запись = РегистрыСведений.ЖурналЗвонков.СоздатьМенеджерЗаписи();
			запись.Дата = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(стр.calldate,"-",""),":","")," ",""));
			запись.НомерСотрудника = "999";
			запись.НомерАбонента = стр.src;
			запись.ПоискАбонент = прав(запись.НомерАбонента,6);
			запись.ПоискСотрудник = прав(запись.НомерСотрудника,6);
			запись.ДлительностьЗвонка = Число(Лев(Прав(стр.duration,5),2))*60 + Число(Прав(Прав(стр.duration,5),2));
			//запись.Сотудник = стр.Сотрудник;
			//запись.Контрагент = стр.Контрагент;
			запись.Исход_Вход = "Входящий";
			запись.Ссылка = СтрЗаменить(стр.recordingfile,"\/","/");
			запись.Записать();
	
		КонецЕсли;
		
	КонецЦикла;


КонецПроцедуры

//---------- используется только здесь--------------------------
Функция ОбработкаJSON(ТекстJSON)
	
	Результат = Новый Структура;
	ТекстJSON = СтрЗаменить(ТекстJSON, "\""", """"); // заменим последовательность \" на "
	ТекстJSON = СтрЗаменить(ТекстJSON, """", ""); // а теперь удалим все кавычки
	
	Если Лев(ТекстJSON, 1) = "{" Тогда  // начало структуры
		
		ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, "Структура");
		
	ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда //начало массива
		
		МассивДанных = Новый Массив;
		ЗаполнитьДанныеИзОтветаJSON(МассивДанных, ТекстJSON, "Массив");
		Результат.Вставить("Значение", МассивДанных);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Вспомогательная Функция для ОбработкаJSON
//Заполняет в Результат из ТекстJSON
//Результат может быть ТипДанных = "Структура" или "Массив"
Процедура ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, ТипДанных) 
	
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2)); // удалим открывающий символ структуры(массива)
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		
		ПервыйСимвол = Лев(ТекстJSON, 1);
		
		Если ПервыйСимвол = "{" Тогда //вложенная структура
			
			Значение = Новый Структура;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
			
			Если ТипДанных = "Структура" Тогда
				
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
				
			ИначеЕсли ТипДанных = "Массив" Тогда
				
				Результат.Добавить(Значение);
				
			КонецЕсли;
			
		ИначеЕсли ПервыйСимвол = "[" Тогда //вложенный массив
			
			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Структура" Тогда
				
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
				
			Иначе
				
				Результат.Добавить(Значение);
				
			КонецЕсли;
			
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Структура" Тогда //структура закончилась
			
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			
			Если Лев(ТекстJSON, 1) = "," Тогда
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
				
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда //массив закончился
			
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			
			Если Лев(ТекстJSON, 1) = "," Тогда
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
				
			КонецЕсли;
			
			Возврат;
			
		Иначе
			
			Если ТипДанных = "Структура" Тогда
				
				Поз = Найти(ТекстJSON, ":");
				
				Если Поз = 0 Тогда
					
					Прервать;
					
				КонецЕсли;
				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз - 1));
				ИмяЗначения = СтрЗаменить(ИмяЗначения, """", "");
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда //значение является структурой
					
					Значение = Новый Структура;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
					
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда //значение является массивом
					
					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
					
				Иначе // обычное значение
					
					ПервыйКавычка = Ложь;
					ПредпоследнийКавычка = Ложь;
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						
						Если Символ = """" Тогда
							
							Если ПервыйКавычка Тогда
								
								ПредпоследнийКавычка = Истина;
								
							Иначе
								ПервыйКавычка = Истина;
								
							КонецЕсли;
							
						КонецЕсли;
						
						Если (Символ = "," И ((ПервыйКавычка И ПредпоследнийКавычка) Или (Не ПервыйКавычка И Не ПредпоследнийКавычка))) ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
							
							Поз = Сч;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если Поз = 0 Тогда
						
						Значение = ТекстJSON;
						ТекстJSON = "";
						
					Иначе
						
						Значение = Лев(ТекстJSON, Поз - 1);
						Значение = СтрЗаменить(Значение, """", "");
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
						
					КонецЕсли;
					
					Значение = СокрЛП(Значение);
					
				КонецЕсли;
				
				Результат.Вставить(ИмяЗначения, Значение);
				
			ИначеЕсли ТипДанных = "Массив" Тогда //обычное значение
				
				Поз = 0;
				
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					
					Символ = Сред(ТекстJSON, Сч, 1);
					
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						
						Поз = Сч;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Поз = 0 Тогда
					
					Значение = ТекстJSON;
					ТекстJSON = "";
					
				Иначе
					
					Значение = Лев(ТекстJSON, Поз - 1);
					Значение = СтрЗаменить(Значение, """", "");
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
 
//14.11.16 Смирнов
Функция ЗагружатьОстаткиИЦеныПоставщика(Поставщик)
	списокСтороннихПоставщиков = РегистрыСведений.СрокиДоставки.СоздатьНаборЗаписей();
	списокСтороннихПоставщиков.Отбор.Поставщик.Установить(Поставщик);
	списокСтороннихПоставщиков.Отбор.ОТХ.Установить(ложь);
	списокСтороннихПоставщиков.Прочитать();
	
	ТаблицаСтороннихПоставщиков = списокСтороннихПоставщиков.Выгрузить();
	Для каждого стр из ТаблицаСтороннихПоставщиков Цикл
		если стр.Включен Тогда
			Возврат истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ложь;
КонецФункции


Процедура ПолучитьСпискиОграниченийПоАксам(СписокНомГр, СписокПапок, СписокНоменклатуры, Контр1)//10.12.2018
	
	набор = РегистрыСведений.ОтборДляЗагружаемойНоменклатурыПоАксам.СоздатьНаборЗаписей();
	набор.Отбор.Контрагент.ВидСравнения  = ВидСравнения.Равно; //10.12.2018
	набор.Отбор.Контрагент.Значение      = Контр1;
	набор.Отбор.Контрагент.Использование = Истина;
	набор.Прочитать();
	
	НомГрТЗ = Набор.Выгрузить();
	НомГрТЗ.Свернуть("НоменклатурнаяГруппа");
	массив = НомГрТЗ.ВыгрузитьКолонку("НоменклатурнаяГруппа");
	СписокНомГр.ЗагрузитьЗначения(массив);
	
	НайденныйЭлемент = СписокНомГр.НайтиПоЗначению(Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокНомГр.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ПапкиТЗ = Набор.Выгрузить();
	ПапкиТЗ.Свернуть("Папка");
	массив = ПапкиТЗ.ВыгрузитьКолонку("Папка");
	СписокПапок.ЗагрузитьЗначения(массив);
	
	НайденныйЭлемент = СписокПапок.НайтиПоЗначению(Справочники.Номенклатура.ПустаяСсылка());
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокПапок.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	НоменкТЗ = Набор.Выгрузить();
	НоменкТЗ.Свернуть("Номенклатура");
	массив = НоменкТЗ.ВыгрузитьКолонку("Номенклатура");
	СписокНоменклатуры.ЗагрузитьЗначения(массив);
	
	НайденныйЭлемент = СписокНоменклатуры.НайтиПоЗначению(Справочники.Номенклатура.ПустаяСсылка());
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокНоменклатуры.Удалить(НайденныйЭлемент);
	КонецЕсли;
КонецПроцедуры	
	
Процедура СписаниеДенегСЗакрытыхСезонныхЗаказов() Экспорт
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		//+++ 09.11.2018 так меньше выборка
		|	Выразить(ЗначенияСвойствОбъектов.Объект как Справочник.Контрагенты) как Контрагент,
		|	ЗначенияСвойствОбъектов.Значение
		|ПОМЕСТИТЬ ВТ_Свойство
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &Свойство
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПоставщику) КАК Сделка,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ВидЗаказа,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.СезонныйЗаказДляСинхронизации.ДатаДействияПо КАК ДатаДействияПо,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.КурсВзаиморасчетов КАК Курс
		|ПОМЕСТИТЬ ВТ_Взаиморасчеты
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки( ,
		|			Сделка ССЫЛКА Документ.ЗаказПоставщику
		|				И ДоговорКонтрагента.ВалютаВзаиморасчетов <> &Рубли
		|				И Сделка.ВидЗаказа <> 2) КАК ВзаиморасчетыСКонтрагентамиОстатки
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(, 
		|						ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ    ) КАК ЗаказыПоставщикамОстатки
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Свойство КАК Свойство
		|		ПО (Свойство.Контрагент = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец)
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
		|	И ЗаказыПоставщикамОстатки.СуммаУпрОстаток ЕСТЬ NULL 
		|	И ЕСТЬNULL(Свойство.Значение, ЛОЖЬ) = ЛОЖЬ
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВТ.Сделка,
		|	ВТ.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
		|	ВТ.СуммаУпрОстаток КАК СуммаУпрОстаток,
		|	ВТ.СделкаВидЗаказа,
		|	ВТ.ДатаДействияПо,
		|	ВТ.Курс,
		//+++ 09.11.2018 -> BugFix: ЕстьNull()
		|	ЕстьNull(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход,0) КАК ВалютаПриход,
		|	ЕстьNull(ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход,0) КАК РублиПриход
		|ИЗ
		|	ВТ_Взаиморасчеты КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты( , , ,
		|								Сделка В (ВЫБРАТЬ ВТ.Сделка ИЗ ВТ_Взаиморасчеты КАК ВТ)     ) КАК ВзаиморасчетыСКонтрагентамиОбороты
		|		ПО ВТ.Сделка = ВзаиморасчетыСКонтрагентамиОбороты.Сделка
		|ГДЕ
		|	(ВТ.ДатаДействияПо <= &ДатаДействияПо
		|			ИЛИ ВТ.СделкаВидЗаказа = 0)
		|ИТОГИ
		|	СУММА(СуммаВзаиморасчетовОстаток)
		|ПО
		|	ДоговорКонтрагента;
		//+++ 09.11.2018 - освобождаем память в TempDB
		|Уничтожить ВТ_Свойство; Уничтожить ВТ_Взаиморасчеты";
 	Запрос.УстановитьПараметр("ДатаДействияПо", ДобавитьМесяц( началоДня(ТекущаяДата()), -1)  ); // -30 дн. >> -1 мес.
	Запрос.УстановитьПараметр("Рубли", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Свойство", планывидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90217"));

	Результат = Запрос.Выполнить();
	ВыборкаДоговорКонтрагента = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаДоговорКонтрагента.Следующий() Цикл
		//создадим документ взаимозачет
		Документ=Документы.Взаимозачет.СоздатьДокумент();
		Документ.Дата = ТекущаяДата();
		Документ.Организация = ВыборкаДоговорКонтрагента.ДоговорКонтрагента.Организация;
		Документ.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета;
		Документ.КонтрагентДебитор = ВыборкаДоговорКонтрагента.ДоговорКонтрагента.Владелец;
		Документ.КонтрагентКредитор = ВыборкаДоговорКонтрагента.ДоговорКонтрагента.Владелец;
		Документ.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
		Документ.ОтражатьВБухгалтерскомУчете = Истина;
		Документ.ОтражатьВНалоговомУчете = Истина;
		Документ.ОтражатьВУправленческомУчете = Истина;
		Документ.ВалютаДокумента = ВыборкаДоговорКонтрагента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Документ.СуммаДокумента = ВыборкаДоговорКонтрагента.СуммаВзаиморасчетовОстаток;
		Документ.Комментарий = "Перенос предоплат с закрытых сезонных заказов";	
		
		Выборка = ВыборкаДоговорКонтрагента.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовСтр=Документ.СуммыДолга.Добавить();
			НовСтр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская;
			новСтр.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			НовСтр.Сделка = Неопределено;
			НовСтр.Сумма = Выборка.СуммаВзаиморасчетовОстаток;
			НовСтр.Валюта = Выборка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			//09.11.2018 -> BugFix: Преобразование значения к типу Число не может быть выполнено
			КурсВалюты = ?(Выборка.ВалютаПриход=0, 1, Окр(Выборка.РублиПриход/Выборка.ВалютаПриход,4)); 
 			НовСтр.КурсВзаиморасчетов = КурсВалюты;
			НовСтр.СуммаУпр = Выборка.СуммаВзаиморасчетовОстаток * КурсВалюты;
			
			НовСтр=Документ.СуммыДолга.Добавить();
			НовСтр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;
			новСтр.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			НовСтр.Сделка = Выборка.Сделка;
			НовСтр.Сумма = Выборка.СуммаВзаиморасчетовОстаток;
			НовСтр.Валюта = Выборка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			НовСтр.КурсВзаиморасчетов = КурсВалюты;  //20.11.2018 BugFix: деление на 0!
			НовСтр.СуммаУпр = Выборка.СуммаВзаиморасчетовОстаток*КурсВалюты;
		КонецЦикла;
		Документ.Записать();
		Документ.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;


КонецПроцедуры

Функция яштРазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

Процедура ЗакрытиеСезонныхЗаказовПоставщикам() Экспорт
    // сначала начислим штрафы, потом закроем сезонники
	ДокШтрафы = Документы.НачислениеШтрафовПоставщикам.СоздатьДокумент();
	ДокШтрафы.Дата = ТекущаяДата();
	ДокШтрафы.ЗаполнитьДокумент();
	Если ДокШтрафы.Расшифровка.Количество()>0 Тогда
	ДокШтрафы.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(
	|			,
	|			ЗаказПоставщикуСезонный.ДатаДействияПо < &Дата
	|				И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПоставщикамСезонныеОстатки";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата())-30*24*60*60);
	
	Результат = Запрос.Выполнить();
	
	Если не результат.Пустой() Тогда
		ДокЗакрытия =  Документы.ЗакрытиеЗаказовПоставщикамСезонных.СоздатьДокумент();
		ДокЗакрытия.Дата = ТекущаяДата();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			стр =ДокЗакрытия.Заказы.Добавить();
			стр.ЗаказПоставщикуСезонный = Выборка.ЗаказПоставщикуСезонный;
		КонецЦикла;
		ДокЗакрытия.Комментарий = "Автоматическое закрытие заказов, после недели со срока окончания заказа";
		ДокЗакрытия.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
КонецПроцедуры

//***2017.12.08 регламентное задание
Процедура НачислениеШтрафовЗаНевыполнениеМинимальногоОбъемаСезонногоЗаказаПоставщику() Экспорт
	
	ДокШтрафы = Документы.НачислениеШтрафовПоставщикам.СоздатьДокумент();
	ДокШтрафы.Дата = ТекущаяДата();
	ДокШтрафы.Комментарий = "Расчет штрафов за невыполнение минимального объема сезонного заказа к установленной дате";
	ДокШтрафы.ЗаполнитьДокументШтрафамиЗаНевыполнениеМинимальногоОбъемаСезонногоЗаказа();
	Если ДокШтрафы.Расшифровка.Количество() > 0 Тогда
		ДокШтрафы.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеСтатусовКонтрагентов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект,
		|	ЗначенияСвойствОбъектов.Значение
		|ПОМЕСТИТЬ Первичныйконтрагент
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &ПервичныйКонтрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	ЕСТЬNULL(Первичныйконтрагент.Значение, Контрагенты.Ссылка) КАК ПервичныйКонтрагент
		|ПОМЕСТИТЬ Покупатели
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Первичныйконтрагент КАК Первичныйконтрагент
		|		ПО Контрагенты.Ссылка = Первичныйконтрагент.Объект
		|ГДЕ
		|	Контрагенты.Покупатель = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ПродажиОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг) КАК ДокументПродажи,
		|	ЕСТЬNULL(Первичныйконтрагент.Значение, ПродажиОбороты.ДокументПродажи.Контрагент) КАК Контрагент
		|ПОМЕСТИТЬ ДокументыПродажи
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(, , Регистратор, ) КАК ПродажиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Первичныйконтрагент КАК Первичныйконтрагент
		|		ПО ПродажиОбороты.ДоговорКонтрагента.Владелец = Первичныйконтрагент.Объект
		|ГДЕ
		|	ПродажиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Покупатели.Ссылка,
		|	МАКСИМУМ(ДокументыПродажи.ДокументПродажи.Дата) КАК ДокументПродажиДата,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументыПродажи.ДокументПродажи) КАК ДокументПродажи
		|ПОМЕСТИТЬ СДатойРеализации
		|ИЗ
		|	Покупатели КАК Покупатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыПродажи КАК ДокументыПродажи
		|		ПО Покупатели.ПервичныйКонтрагент = ДокументыПродажи.Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	Покупатели.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект,
		|	ЗначенияСвойствОбъектов.Значение
		|ПОМЕСТИТЬ ТекущиеКатегории
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &Свойство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СДатойРеализации.Ссылка КАК Контрагент,
		|	СДатойРеализации.ДокументПродажиДата КАК Дата,
		|	Авторизация.Ссылка КАК Авторизация,
		|	ВЫБОР
		|		КОГДА СДатойРеализации.ДокументПродажиДата ЕСТЬ NULL 
		|				И Авторизация.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииКонтрагентов.Потенциальные)
		|		КОГДА СДатойРеализации.ДокументПродажиДата ЕСТЬ NULL 
		|				И НЕ Авторизация.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииКонтрагентов.ВРазработке)
		|		КОГДА СДатойРеализации.ДокументПродажиДата < ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, -12)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииКонтрагентов.НеРаботающиеБольшеГода)
		|		КОГДА СДатойРеализации.ДокументПродажи = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииКонтрагентов.ПерваяПродажа)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииКонтрагентов.Работающие)
		|	КОНЕЦ КАК Статус,
		|	ТекущиеКатегории.Значение КАК ТекСтатус
		|ИЗ
		|	СДатойРеализации КАК СДатойРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Авторизация КАК Авторизация
		|		ПО СДатойРеализации.Ссылка = Авторизация.Владелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеКатегории КАК ТекущиеКатегории
		|		ПО СДатойРеализации.Ссылка = ТекущиеКатегории.Объект
		|ГДЕ
		|	ЕСТЬNULL(ТекущиеКатегории.Значение, 0) <> ЗНАЧЕНИЕ(Перечисление.КатегорииКонтрагентов.Закрылись)
		|	И ЕСТЬNULL(ТекущиеКатегории.Значение, 0) <> ЗНАЧЕНИЕ(Перечисление.КатегорииКонтрагентов.ВременноНеРаботаем)
		|	И ЕСТЬNULL(ТекущиеКатегории.Значение, 0) <> ЗНАЧЕНИЕ(Перечисление.КатегорииКонтрагентов.Разобраться)
		|	И ЕСТЬNULL(ТекущиеКатегории.Значение, 0) <> ВЫБОР
		|			КОГДА СДатойРеализации.ДокументПродажиДата ЕСТЬ NULL 
		|					И Авторизация.Ссылка ЕСТЬ NULL 
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииКонтрагентов.Потенциальные)
		|			КОГДА СДатойРеализации.ДокументПродажиДата ЕСТЬ NULL 
		|					И НЕ Авторизация.Ссылка ЕСТЬ NULL 
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииКонтрагентов.ВРазработке)
		|			КОГДА СДатойРеализации.ДокументПродажиДата < ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, -12)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииКонтрагентов.НеРаботающиеБольшеГода)
		|			КОГДА СДатойРеализации.ДокументПродажи = 1
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииКонтрагентов.ПерваяПродажа)
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииКонтрагентов.Работающие)
		|		КОНЕЦ";

	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90218"));
	Запрос.УстановитьПараметр("ПервичныйКонтрагент", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90230"));

	Результат = Запрос.Выполнить().Выгрузить();

	Для каждого стр из Результат Цикл
		
	Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	Запись.Объект = Стр.Контрагент;
	Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90218");
	Запись.Значение = Стр.Статус;
	Запись.Записать(Истина);	
		
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьЗаказыДляВзаимозачета(Контрагент,Договор) экспорт
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикамСезонныеОстатки.Номенклатура) КАК Номенклатура,
		               |	СУММА(ЗаказыПоставщикамСезонныеОстатки.КоличествоОстаток * ЗаказПоставщикуСезонныйТовары.Цена) КАК СуммаОстатка,
		               |	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ЗаказДубль КАК ЗаказПоставщику
		               |ПОМЕСТИТЬ ОстаткиНевыполненные
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(, ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПоставщикамСезонныеОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщикуСезонный.Товары КАК ЗаказПоставщикуСезонныйТовары
		               |		ПО ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный = ЗаказПоставщикуСезонныйТовары.Ссылка
		               |			И ЗаказыПоставщикамСезонныеОстатки.Номенклатура = ЗаказПоставщикуСезонныйТовары.Номенклатура
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ЗаказДубль
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	NULL,
		               |	ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПоставщикамОстатки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
		               |	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
		               |	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.Владелец КАК Контрагент
		               |ПОМЕСТИТЬ Заказы
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента.ВалютаВзаиморасчетов <> &Рубли и ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПоставщикамОстатки
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ЗаказДубль,
		               |	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ДоговорКонтрагента,
		               |	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ДоговорКонтрагента.Владелец
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(, ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПоставщикамСезонныеОстатки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(Заказы.ДоговорКонтрагента, ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента) КАК ДоговорКонтрагента,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(Заказы.ДоговорКонтрагента.Наименование, ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Наименование) ПОДОБНО ""%*%""
		               |			ТОГДА ЕСТЬNULL(Заказы.ДоговорКонтрагента.Наименование, ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Наименование)
		               |		ИНАЧЕ ЕСТЬNULL(Заказы.ЗаказПоставщику, ВзаиморасчетыСКонтрагентамиОстатки.Сделка)
		               |	КОНЕЦ КАК Сделка,
		               |	Заказы.ЗаказПоставщику.СуммаДокумента КАК СделкаСуммаДокумента,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(Заказы.ЗаказПоставщику.ВидЗаказа, ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ВидЗаказа) = 1
		               |			ТОГДА Заказы.ЗаказПоставщику.СезонныйЗаказДляСинхронизации.ДатаДействияПо
		               |		КОГДА ЕСТЬNULL(Заказы.ЗаказПоставщику.ВидЗаказа, ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ВидЗаказа) = 2
		               |			ТОГДА NULL
		               |		КОГДА ЕСТЬNULL(Заказы.ЗаказПоставщику.ВидЗаказа, ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ВидЗаказа) = 0
		               |			ТОГДА ДОБАВИТЬКДАТЕ(ЕСТЬNULL(Заказы.ЗаказПоставщику.Дата, ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата), МЕСЯЦ, 3)
		               |		ИНАЧЕ ЕСТЬNULL(Заказы.ЗаказПоставщику.Дата, ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата)
		               |	КОНЕЦ КАК КонтрольнаяДата,
		               |	ОстаткиНевыполненные.СуммаОстатка КАК СуммаОстаткаНевыполненного,
		               |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,
		               |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток,
		               |	ВЫБОР
		               |		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
		               |			ТОГДА "" Дебеторская ""
		               |		ИНАЧЕ "" Кредиторская ""
		               |	КОНЕЦ КАК ВидЗадолженности,
		               |	ЕСТЬNULL(Заказы.Контрагент, ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец) КАК Контрагент,
		               |	ВЫБОР
		               |		КОГДА ОстаткиНевыполненные.СуммаОстатка = 0
		               |			ТОГДА 100
		               |		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
		               |			ТОГДА 0
		               |		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток / ОстаткиНевыполненные.СуммаОстатка * 100
		               |	КОНЕЦ КАК процент,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(Заказы.ДоговорКонтрагента.Наименование, ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Наименование) ПОДОБНО ""%*%""
		               |			ТОГДА ""Наличные""
		               |		КОГДА ЕСТЬNULL(Заказы.ЗаказПоставщику.ВидЗаказа, ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ВидЗаказа) = 1
		               |			ТОГДА ""Сезонные заказы / Season orders""
		               |		КОГДА ЕСТЬNULL(Заказы.ЗаказПоставщику.ВидЗаказа, ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ВидЗаказа) = 2
		               |			ТОГДА ""Заказы на пресформы/ Mold orders""
		               |		КОГДА ЕСТЬNULL(Заказы.ЗаказПоставщику.ВидЗаказа, ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ВидЗаказа) = 0
		               |			ТОГДА ""Заказы поставщику/Orders""
		               |		ИНАЧЕ ""Прочее/ Other""
		               |	КОНЕЦ КАК ВидДокумента,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(Заказы.ЗаказПоставщику.ВидЗаказа, ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ВидЗаказа) = 0
		               |			ТОГДА ВЫБОР
		               |					КОГДА ЕСТЬNULL(Заказы.ЗаказПоставщику.Контрагент, ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Контрагент) = &Фримен
		               |						ТОГДА ДОБАВИТЬКДАТЕ(ЕСТЬNULL(Заказы.ЗаказПоставщику.Дата, ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата), ДЕНЬ, 7)
		               |					ИНАЧЕ ДОБАВИТЬКДАТЕ(ЕСТЬNULL(Заказы.ЗаказПоставщику.Дата, ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата), ДЕНЬ, 30)
		               |				КОНЕЦ
		               |	КОНЕЦ КАК СрокОплаты
		               |ПОМЕСТИТЬ втОснова
		               |ИЗ
		               |	Заказы КАК Заказы
		               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		               |				,
		               |				ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		               |					И ДоговорКонтрагента.ВалютаВзаиморасчетов <> &Рубли) КАК ВзаиморасчетыСКонтрагентамиОстатки
		               |		ПО Заказы.ЗаказПоставщику = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНевыполненные КАК ОстаткиНевыполненные
		               |		ПО Заказы.ЗаказПоставщику = ОстаткиНевыполненные.ЗаказПоставщику
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втОснова.ДоговорКонтрагента,
		               |	втОснова.Сделка,
		               |	втОснова.СделкаСуммаДокумента,
		               |	втОснова.КонтрольнаяДата,
		               |	втОснова.СуммаОстаткаНевыполненного,
		               |	втОснова.СуммаВзаиморасчетовОстаток,
		               |	втОснова.СуммаУпрОстаток,
		               |	втОснова.ВидЗадолженности,
		               |	втОснова.Контрагент,
		               |	втОснова.процент,
		               |	втОснова.ВидДокумента,
		               |	втОснова.СрокОплаты
		               |ИЗ
		               |	втОснова КАК втОснова
		               |ГДЕ
		               |	(втОснова.процент > 20
		               |				И втОснова.ВидДокумента = ""Сезонные заказы / Season orders""
		               |			ИЛИ втОснова.процент > 100
		               |				И втОснова.ВидДокумента = ""Заказы поставщику/Orders"")
		               |	И 99 = 99
		               |	И втОснова.Контрагент = &Контрагент";
					   
					   Если ЗначениеЗаполнено(Договор) Тогда
						   Запрос.Текст = СтрЗаменить(Запрос.Текст,"99 = 99","втОснова.ДоговорКонтрагента = &Договор");	
						   Запрос.УстановитьПараметр("Договор", Договор);
					   Конецесли;
					   Запрос.УстановитьПараметр("Фримен",Контрагент);
					   Запрос.УстановитьПараметр("Контрагент",Контрагент);
					   Запрос.УстановитьПараметр("Договор",Договор);
					   Запрос.УстановитьПараметр("Рубли",Справочники.Валюты.НайтиПоКоду("643"));

					   Рез = Запрос.Выполнить().Выгрузить();
					   Возврат Рез;
КонецФункции

Процедура НапоминаниеВЭДОЗаказахДляВзаиморасчетов() Экспорт
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			,
	|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|				И ДоговорКонтрагента.ВалютаВзаиморасчетов <> &Рубли) КАК ВзаиморасчетыСКонтрагентамиОстатки";
	Запрос.УстановитьПараметр("Рубли",Справочники.Валюты.НайтиПоКоду("643"));
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Сделки = ПолучитьЗаказыДляВзаимозачета(рез.Контрагент,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Если Сделки.Количество()>0 Тогда
			ТекстОписания="У поставщика "+рез.Контрагент+Символы.ПС+"есть переплаченные заказы: "+символы.ПС;
			Для каждого стр из сделки Цикл
				ТекстОписания = ТекстОписания+стр.Сделка+Символы.ПС;
			КонецЦикла;
			//задача
			задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
			Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Горицкий А. И.");
			задача.Наименование = "Обратите внимание на оплаты по заказам поставщикам!"; 
			задача.Описание = ТекстОписания;
			
			задача.Инициатор   =справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");;
			задача.Дата 		    = ТекущаяДата();
			задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
			задача.СрокОповещения = ТекущаяДата(); 
			
			Попытка 
				задача.Записать();
			исключение
			КонецПопытки;
			
			попытка
				ДубльЗадача = Задача.Скопировать();
				Дубльзадача.Дата = ТекущаяДата();
				ДубльЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Новикова С.");
				ДубльЗадача.Записать();
				
				ДубльЗадача = Задача.Скопировать();
				Дубльзадача.Дата = ТекущаяДата();
				ДубльЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Яхшиян Тигран");
				ДубльЗадача.Записать();
			исключение
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция получитьЧислоДнейДоставки(Поставщик)
	рез = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СрокиДоставки.СрокДоставки
	|ИЗ
	|	РегистрСведений.СрокиДоставки КАК СрокиДоставки
	|ГДЕ
	|	СрокиДоставки.Поставщик = &Поставщик
	|	И СрокиДоставки.ОТХ = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		рез = выборка.СрокДоставки;
	КонецЕсли;
	
Возврат рез;

КонецФункции

//26.01.2017 - в стадии разработки и тестирования...
Процедура ПроверкаЗаказовСтороннихПоставщиков() Экспорт
	
	ПроверкаЗаказовМишлен();
	
	ПроверкаЗаказовПауэр(); //28.03.2017
	
	ПроверкаAquateX(); //+++ 10.11.0217
	
	ПроверкаЗаказовБерг(); // 21 - 22.05.2018
	
	ПроверкаЗаказовЧерныйСписок(); //07.08.2018
	
КонецПроцедуры	

Процедура ПроверкаЗаказовПауэр()
	
	Пауэр = Справочники.Контрагенты.НайтиПоКоду("00128"); 
    ЧислоДнейДоставки = получитьЧислоДнейДоставки(Пауэр);
	
	//собрать заказы Мишлен
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	               |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыПокупателейОстатки.КоличествоОстаток КАК Количество,
	               |	ОстаткиНоменклатурыКонтрагентов.Остаток как Остаток
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |			,
	               |			ЗаказПокупателя.Транзит = ЛОЖЬ
	               |				И ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗаказов.ВОбработке)
	               |				И ЗаказПокупателя.Поставщик = &Пауэр) КАК ЗаказыПокупателейОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиНоменклатурыКонтрагентов КАК ОстаткиНоменклатурыКонтрагентов
	               |		ПО ЗаказыПокупателейОстатки.Номенклатура = ОстаткиНоменклатурыКонтрагентов.Номенклатура
	               |ГДЕ
	               |	ОстаткиНоменклатурыКонтрагентов.Контрагент = &Пауэр
	               |	И ОстаткиНоменклатурыКонтрагентов.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
	               |	СУММА(Количество),
				   |	Максимум(Остаток)
				   
	               |ПО
	               |	ЗаказПокупателя";
	Запрос.УстановитьПараметр("Пауэр", Пауэр);
	Результат = Запрос.Выполнить();
	ВыборкаЗак = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	таблНоменклатуры = новый ТаблицаЗначений;
	таблНоменклатуры.Колонки.Добавить("Номенклатура");
	таблНоменклатуры.Колонки.Добавить("Количество");
	таблНоменклатуры.Колонки.Добавить("Остаток");
	
	Пока ВыборкаЗак.Следующий() Цикл
		
		выборкаТов = выборкаЗак.выбрать();
		таблНоменклатуры.Очистить();
		
		МожноСоздатьЗаказ=Истина;
		
		Пока выборкаТов.Следующий() Цикл
			Если выборкаТов.Остаток>=выборкаТов.Количество Тогда
			стр1 = таблНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств( стр1, выборкаТов );
			иначе // чужой товар или заказ НЕ разделён!
				МожноСоздатьЗаказ=ЛОЖЬ;
			КонецЕсли;
		КонецЦикла;	
		
		Если МожноСоздатьЗаказ Тогда

				//01.02.2017
			НомерЗаказа = ВыборкаЗак.ЗаказПокупателя.Номер;
			НомерЗаказа = прав(НомерЗаказа, стрДлина(НомерЗаказа)-2);
			НомерЗаказаПауэр = СоздатьЗаказПауэр(таблНоменклатуры, НомерЗаказа);

			Если НомерЗаказаПауэр<>Неопределено Тогда
				//изменение заказа и создание заказа поставщику
				закОб = ВыборкаЗак.ЗаказПокупателя.ПолучитьОбъект();
				попытка
					 закОб.Проверен = истина;
					 закОб.Статус   = Перечисления.СтатусыЗаказов.Подтвержден;
					 закОб.НомерВходящегоДокумента = НомерЗаказаПауэр;
					 закОб.ДатаВходящегоДокумента  = НачалоДня(ТекущаяДата());
					 закОб.ВремяНапоминания   = ТекущаяДата(); // дата последнего изменения документа 
					 закОб.ДатаОтгрузки = НачалоДня(ТекущаяДата()) + ЧислоДнейДоставки*86400;
					 закОб.Комментарий  = "&Подтверждена доставка "+строка(ЧислоДнейДоставки)+" дн. # " + закОб.Комментарий; // есть заказ поставщику!
					 закОб.Записать(РежимЗаписиДокумента.Проведение);  //создаётся заказ поставщику...
				исключение
				КонецПопытки;
			Иначе //отметка об ошибке... в самом заказе 
				закОб = выборкаЗак.ЗаказПокупателя.ПолучитьОбъект();
				попытка
				 	 закОб.Статус = перечисления.СтатусыЗаказов.Отменен;
					 закОб.Комментарий = "Отменен поставщиком # "+закОб.Комментарий;
					 закОб.ОбменДанными.Загрузка = истина;
					 закОб.Записать();  //запись без перепроведения
					 закОб.ОбменДанными.Загрузка = ЛОЖЬ;
				исключение
				КонецПопытки;
			КонецЕсли;
			
		Иначе //МожноСоздатьЗаказ=ЛОЖЬ - ошибка в самом заказе! что-то есть лишнее! 
			закОб = выборкаЗак.ЗаказПокупателя.ПолучитьОбъект();
			попытка
				текст1 = "Требуется разбить заказ по наличию!";
				если найти(закОб.Комментарий,текст1)=0 Тогда
				закОб.Комментарий = текст1+закОб.Комментарий;
				 закОб.ОбменДанными.Загрузка = истина;
				 закОб.Записать();  //запись без перепроведения
				 закОб.ОбменДанными.Загрузка = ЛОЖЬ;
				КонецЕсли;
			исключение
			КонецПопытки;
		КонецЕсли;
	
	КонецЦикла;//по заказам	
КонецПроцедуры	

Процедура ПроверкаЗаказовМишлен()
	Мишлен = справочники.Контрагенты.НайтиПоКоду("90071");
	ЧислоДнейДоставки = получитьЧислоДнейДоставки(Мишлен);
	
	//собрать заказы Мишлен
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	               |	ЗаказыПокупателейОстатки.Номенклатура,
	               |	ЗаказыПокупателейОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |			,
	               |			ЗаказПокупателя.Транзит = ЛОЖЬ
	               |				И ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗаказов.ВОбработке)
	               |				И ЗаказПокупателя.Поставщик = &Мишлен) КАК ЗаказыПокупателейОстатки
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
	               |	СУММА(Количество)
	               |ПО
	               |	ЗаказПокупателя";
	Запрос.УстановитьПараметр("Мишлен", Мишлен);
	Результат = Запрос.Выполнить();
	ВыборкаЗак = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	таблНоменклатуры = новый ТаблицаЗначений;
	таблНоменклатуры.Колонки.Добавить("Номенклатура");
	таблНоменклатуры.Колонки.Добавить("Количество");
	
	Пока ВыборкаЗак.Следующий() Цикл
		
		выборкаТов = выборкаЗак.выбрать();
		таблНоменклатуры.Очистить();
		Пока выборкаТов.Следующий() Цикл
			стр1 = таблНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств( стр1, выборкаТов );
		КонецЦикла;	
		
		//проверить остатки
		резТабл = ПолучитьОстаткиНоменклатурыМишлен(таблНоменклатуры);
		рез = истина; // Есть всё = Истина,  или чего-то нет - ЛОЖЬ
		ош  = "";
		если резТабл.Количество()=0 Тогда
			Ош = "Не хватает остатка товаров# ";
			рез = ложь;
		КонецЕсли;	
		для каждого стр0 из таблНоменклатуры Цикл
			стр1 = резТабл.Найти(стр0.Номенклатура, "Номенклатура");
			если стр1 = Неопределено Тогда
				Ош = "Нет товара "+строка(стр0.Номенклатура.Код)+" под заказ # ";
				рез = ложь; прервать;
			иначеЕсли стр1.Количество<стр0.Количество Тогда  // частично есть?!
				Ош = "Нет товара "+строка(стр1.Номенклатура.Код)+" в кол-ве "+строка(стр0.Количество)+" шт. под заказ# ";
				рез = ложь; прервать;
				
			//31.01.2017 дата доставки слишком большая или пустая!
		иначеЕсли НачалоДня(стр1.ДатаПоставки) > НачалоДня(ТекущаяДата()) + ЧислоДнейДоставки*86400
				или НачалоДня(стр1.ДатаПоставки)<НачалоДня(ТекущаяДата()) Тогда 
				 Ош = "Дата доставки товара "+строка(стр1.Номенклатура.Код)+" только на "+формат(стр1.ДатаПоставки,"ДЛФ=D")+" - превышает "+строка(ЧислоДнейДоставки)+" дн. # ";
				рез = ложь; прервать;
			КонецЕсли;	
		КонецЦикла;				
		
		//создать заказ через API
		Если рез Тогда
			
			//01.02.2017
			НомерЗаказа = ВыборкаЗак.ЗаказПокупателя.Номер;
			НомерЗаказа = прав(НомерЗаказа, стрДлина(НомерЗаказа)-2);
			резТабл = СоздатьЗаказМишлен(таблНоменклатуры, НомерЗаказа);
			
			резСоздан = истина; //обработка
			Если резТабл.Количество()=0 Тогда
			резСоздан = ложь; прервать;	
			КонецЕсли;	
			НомерЗаказаМишлен = резТабл[0].НомерЗаказаМишлен;
                ДатаПоставки  = резТабл[0].ДатаПоставки;
				
			для каждого стр1 из резТабл Цикл
				Если стр1.КодОшибки<>0 Тогда
				резСоздан = ложь; 
				//31.01.2017 дата доставки слишком большая!
				иначеЕсли ДатаПоставки<стр1.ДатаПоставки Тогда  
				    ДатаПоставки = стр1.ДатаПоставки; //максимальная
				 	Если НачалоДня(ДатаПоставки) > НачалоДня(ТекущаяДата()) + ЧислоДнейДоставки*86400 Тогда
					 // резСоздан = ложь;  //уже создан... так что поздно отменять....
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;	
			
			Если резСоздан Тогда
				//изменение заказа и создание заказа поставщику
				закОб = ВыборкаЗак.ЗаказПокупателя.ПолучитьОбъект();
				попытка
					 закОб.Проверен = истина;
					 закОб.Статус   = Перечисления.СтатусыЗаказов.Подтвержден;
					 закОб.НомерВходящегоДокумента = НомерЗаказаМишлен;
					 закОб.ДатаВходящегоДокумента  = НачалоДня(ТекущаяДата());
					 закОб.ВремяНапоминания   = ТекущаяДата(); // дата последнего изменения документа 
					 закОб.ДатаОтгрузки = ДатаПоставки;
					 		  числоДней = Окр( (ДатаПоставки - началоДня(ТекущаяДата()) )/86400 );
					 закОб.Комментарий  = "&Подтверждена доставка "+строка(числоДней)+" дн. # " + закОб.Комментарий; // есть заказ поставщику!
					 закОб.Записать(РежимЗаписиДокумента.Проведение);  //создаётся заказ поставщику...
				исключение
				КонецПопытки;
			Иначе //отметка об ошибке... в самом заказе 
				закОб = выборкаЗак.ЗаказПокупателя.ПолучитьОбъект();
				попытка
				 	 закОб.Статус = перечисления.СтатусыЗаказов.Отменен;
					 закОб.Комментарий = "Ошибка заказа на дату: "+строка(ТекущаяДата())+" # "+закОб.Комментарий;
					 закОб.ОбменДанными.Загрузка = истина;
					 закОб.Записать();  //запись без перепроведения
					 закОб.ОбменДанными.Загрузка = ЛОЖЬ;
				исключение
				КонецПопытки;
			КонецЕсли;
			
		Иначе //нет товаров
			закОб = выборкаЗак.ЗаказПокупателя.ПолучитьОбъект();
			попытка
				 закОб.Статус = перечисления.СтатусыЗаказов.Отменен;
				 закОб.Комментарий = Ош + закОб.Комментарий;  //16.03.2017
				 закОб.ОбменДанными.Загрузка = Истина;
				 закОб.Записать();  //запись без перепроведения
				 закОб.ОбменДанными.Загрузка = ЛОЖЬ;
			исключение
			КонецПопытки;
		КонецЕсли;

	КонецЦикла;
	
	
КонецПроцедуры	

//+++( 10.11.0217 - по задаче № 35392
//по списку товаров стороннего поставщика - смотрим св.остаток
//и... 
//если + то делается перемещение на запрещенный склад
//если - то делается обратное перемещение на нормальный склад.
//
Процедура ПроверкаAquateX() 
	
	Поставщик     = справочники.Контрагенты.НайтиПоНаименованию("AquateX");
	
	Подразделение = справочники.Подразделения.НайтиПоКоду("00005");
	Склад  = справочники.Склады.НайтиПоКоду("01480"); // Ц-Рекламация  - Запрещенный
	Склад2 = справочники.Склады.НайтиПоКоду("00821"); // ЦЦЛ-3
	
	масТов = ПолучитьМассивТоваровСторПост(Поставщик, Подразделение);
	для i=0 по масТов.Количество()-1 Цикл
	Товар = масТов[i];	

		СвОст = ПолучитьСвОст(Товар, Подразделение);
		Если СвОст=0 Тогда
			продолжить;
		КонецЕсли;
	
		Если СвОст>0 Тогда
			Коммент = "# Автоматическое устранение + св.остатка "+строка(СвОст)+"шт. по товару "+Товар.Код;
			рез = Переместить12(Склад2, Склад, Подразделение, Товар, +СвОст, Коммент );
		ИначеЕсли СвОст<0 Тогда
			Коммент = "# Автоматическое устранение - св.остатка "+строка(-СвОст)+"шт. по товару "+Товар.Код;
			рез = Переместить12(Склад, Склад2, Подразделение, Товар, -СвОст, Коммент );
		КонецЕсли;
		
		//НУЖНА ОШИБКА!
		Если рез.Пустая() Тогда
			ВызватьИсключение("Ошибка при создании перемещения на "+строка(СвОст)+" шт. по товару "+Товар.Код+" для поставщика "+строка(Поставщик) );
			ВОЗВРАТ;
		КонецЕсли;	
		
	//+++ записать остатки стор.пост!		
	 ЗаписатьОстатокТовараСторПоставщика(Товар, Склад, Поставщик, Подразделение);
	КонецЦикла;
	
КонецПроцедуры	

//вспомогательная Функция для ПроверкаAquateX()
Функция ПолучитьМассивТоваровСторПост(Поставщик, Подразделение)
	запрос = новый Запрос;
запрос.текст = "ВЫБРАТЬ
               |	ОстаткиНоменклатурыКонтрагентов.Номенклатура
               |ИЗ
               |	РегистрСведений.ОстаткиНоменклатурыКонтрагентов КАК ОстаткиНоменклатурыКонтрагентов
               |ГДЕ
               |	ОстаткиНоменклатурыКонтрагентов.Контрагент = &Поставщик
               |	И ОстаткиНоменклатурыКонтрагентов.Подразделение = &Подразделение";
 запрос.УстановитьПараметр("Поставщик",Поставщик);
 запрос.УстановитьПараметр("Подразделение", ?(Подразделение.ОбособленноеПодразделение, Подразделение, справочники.Подразделения.ПустаяСсылка() ) );
 табл = запрос.Выполнить().Выгрузить();
 мас = табл.ВыгрузитьКолонку("Номенклатура");
 Возврат мас;
КонецФункции

//вспомогательная Функция для ПроверкаAquateX()
Функция ПолучитьСвОст(Номенклатура, Подразделение)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Остаток,
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК Заказано,
	               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ОстСв
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура = &Номенклатура
	               |				И склад.ЗапретитьИспользование = ЛОЖЬ
				   |			//Склад!
	               |				И склад.Транзитный = ЛОЖЬ) КАК ТоварыНаСкладахОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки( ,Номенклатура = &Номенклатура
	               |					И ЗаказПокупателя.Проверен
	               |					И ЗаказПокупателя.Подразделение = &Подразделение) КАК ЗаказыПокупателейОстатки
	               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Если Подразделение.ОбособленноеПодразделение Тогда
		запрос.Текст = стрЗаменить(запрос.Текст, "//Склад!"," И Склад.Транзитный = Истина и Склад.Подразделение = &ПодразделениеСк ");
		Запрос.УстановитьПараметр("ПодразделениеСк", Подразделение)
	Иначе
		запрос.Текст = стрЗаменить(запрос.Текст, "//Склад!"," И Склад.Транзитный = ЛОЖЬ");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		рез = выборка.ОстСв;
	иначе
		рез = 0;
	КонецЕсли;
	
	Возврат рез;
КонецФункции

//вспомогательная Функция для ПроверкаAquateX()
Функция Переместить12(ск1, ск2, Подразделение, Номенклатура, кол, Коммент="" )

	докПеремещения = документы.ПеремещениеТоваров.СоздатьДокумент();
	докПеремещения.Дата = ТекущаяДата();
	докПеремещения.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	докПеремещения.СкладОтправитель = ск1;
	докПеремещения.СкладПолучатель  = ск2;
	докПеремещения.Подразделение    = Подразделение;
	докПеремещения.Организация   = справочники.Организации.НайтиПоКоду("00001");
	
	робот = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
	ПараметрыСеанса.ТекущийПользователь = робот; //+++ 23.11.2017 для проведения перемещения
	
	докПеремещения.Ответственный = робот; //13.11.2017
	
	докПеремещения.ОтражатьВУправленческомУчете = истина;
	докПеремещения.Комментарий = Коммент;
	
	тов = докПеремещения.Товары.Добавить();
	тов.Номенклатура = Номенклатура;
	тов.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
	тов.Коэффициент = 1;
	тов.Качество = справочники.Качество.Новый;
	тов.Количество = кол;
	тов.Склад = ск2;
	попытка
		докПеремещения.Записать( РежимЗаписиДокумента.Проведение );
	//	Сообщить("Создан документ перемещения № "+строка(докПеремещения.Номер)+" на "+строка(Кол)+" шт. со склада "+строка(Ск1)+" >> "+строка(Ск2), СтатусСообщения.Информация);
		рез = докПеремещения.Ссылка;
	исключение	
	//	Сообщить("Ошибка при проведении документа перемещения! "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		рез = документы.ПеремещениеТоваров.ПустаяСсылка();
	КонецПопытки;
	Возврат рез;
	
КонецФункции

//-------------вспомогательные функции-----------------------
Функция ПолучитьОстатокНаСкладе(скл, Тов)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки( ,
	|			Номенклатура = &Номенклатура
	|				И Склад = &Склад) КАК ТоварыНаСкладахОстатки";
	Запрос.УстановитьПараметр("Номенклатура", Тов);
	Запрос.УстановитьПараметр("Склад", скл);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	рез = выборка.КоличествоОстаток;
	иначе рез = 0;
	КонецЕсли;

	Возврат рез;
	
КонецФункции	

Процедура ЗаписатьОстатокТовараСторПоставщика(Номенклатура, Склад, Поставщик, Подразделение)
	
	Ост1 = ПолучитьОстатокНаСкладе(Склад, Номенклатура);
	
	регСв = РегистрыСведений.ОстаткиНоменклатурыКонтрагентов.СоздатьМенеджерЗаписи();
	регСв.Контрагент    = Поставщик;
	регСв.Подразделение = ?(Подразделение.ОбособленноеПодразделение, Подразделение, справочники.Подразделения.ПустаяСсылка() ); // для Ярославля не надо!
	регСв.Номенклатура  = Номенклатура;
	регСв.Остаток =  Ост1;
	регСв.Записать(Истина);
	
КонецПроцедуры
//+++)


Процедура ОбновитьПлановыеДатыОплатДопРасходов() Экспорт
//	попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду("553");//РЗ_Обновить плановые даты платежей доп расходов по поступлениям
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;
		Обработка.ОбновитьПлановыеДатыПлатежей(ДобавитьМесяц(НачалоДня(ТекущаяДата()),-1),КонецДня(ТекущаяДата()));
	//исключение
	//	ЗаписьЖурналаРегистрации("Обновить плановые даты платежей доп расходов по поступлениям",
	//	УровеньЖурналаРегистрации.Информация,
	//	,
	//	,
	//	ОписаниеОшибки(),
	//	);
	//КонецПопытки
КонецПроцедуры

Процедура ЗагрузитьОстаткиВРегистр(ТЗ,Контрагент, НадоПроверятьЦены=Истина)
	
	Набор = РегистрыСведений.ОтборДляЗагружаемойНоменлатурыПоставщиков.СоздатьНаборЗаписей();
	Набор.Отбор.Контрагент.Установить(Контрагент);
	набор.Прочитать();
	
	Если Набор.Количество()>0 Тогда
			
		НаборП = РегистрыСведений.ОтборДляЗагружаемойНоменлатурыПоставщиков.СоздатьНаборЗаписей();
	    НаборП.Отбор.Контрагент.Установить(Контрагент);
		НаборП.Отбор.Производитель_Сезон.Установить(Истина);
		наборП.Прочитать();
		
		Производители = НаборП.ВыгрузитьКолонку("Производитель");
		ПроизводителиСписок = Новый СписокЗначений;
		ПроизводителиСписок.ЗагрузитьЗначения(Производители);
		
		НаборС = РегистрыСведений.ОтборДляЗагружаемойНоменлатурыПоставщиков.СоздатьНаборЗаписей();
	    НаборС.Отбор.Контрагент.Установить(Контрагент);
		НаборС.Отбор.Производитель_Сезон.Установить(Ложь);
		НаборС.Прочитать();
		
		Сезоны = НаборС.ВыгрузитьКолонку("Сезон");
		СезоныСписок = Новый СписокЗначений;
		СезоныСписок.ЗагрузитьЗначения(Сезоны);
				
		запрос = новый запрос;
		запрос.Текст = "ВЫБРАТЬ
		               |	ТЗ.Номенклатура,
		               |	ТЗ.Количество,
					   |	ТЗ.КодПоставщика
					   |ПОМЕСТИТЬ ВТ_Товары
		               |ИЗ
		               |	&ТЗ КАК ТЗ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Товары.Номенклатура,
		               |	Товары.Количество,
					    |	Товары.КодПоставщика
		               |ИЗ
		               |	ВТ_Товары КАК Товары
		               |ГДЕ
		               |	1=1
					   |     и 2=2";
					   
		запрос.УстановитьПараметр("ТЗ",ТЗ); 
		Если ПроизводителиСписок.Количество()>0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"1=1","Товары.Номенклатура.Производитель В(&Производители)");
		    запрос.УстановитьПараметр("Производители",ПроизводителиСписок);
		КонецЕсли;
		Если СезоныСписок.Количество()>0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"2=2","Товары.Номенклатура.Модель.Сезон В(&Сезоны)");
		    запрос.УстановитьПараметр("Сезоны",СезоныСписок);
		КонецЕсли;
		ТЗ = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;

	Если ТЗ.Количество()>0 Тогда
		НаборОстатки = РегистрыСведений.ОстаткиНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
		НаборОстатки.Отбор.Контрагент.Установить(Контрагент);
		
		Для каждого стр из ТЗ Цикл
			ЗаписьОст = НаборОстатки.Добавить();
			ЗаписьОст.Контрагент = Контрагент;
			//ЗаписьОст.Подразделение = Справочники.Подразделения.ПустаяСсылка(); 
			ЗаписьОст.Номенклатура = стр.номенклатура;
			ЗаписьОст.Остаток = стр.Количество;
			ЗаписьОст.КодПоставщика = Формат(ТекущаяДата(),"ДФ='dd.MM.yyyy HH:mm:ss'"); //+++ 30.01.2019 >> "30.01.2019 12:33:43" //19 символов
			//ЗаписьОст.КодПоставщика = стр.КодПоставщика;
		КонецЦикла;
		
		НаборОстатки.Записать();
		
	//+++ 16.05.2018 - Удалить из регистра по 0 ценам "Базовая" для Шин и Дисков и "Кр.Опт" 
		Если НадоПроверятьЦены тогда
			ПроверитьЦены(ТЗ, Контрагент, ЛОЖЬ); 
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗагрузитьЦеныВРегистр(ТаблЗнач1,Контрагент)
	
	ПроизводителиСписок = Новый СписокЗначений;
	СезоныСписок = Новый СписокЗначений;

	Набор = РегистрыСведений.ОтборДляЗагружаемойНоменлатурыПоставщиков.СоздатьНаборЗаписей();
	Набор.Отбор.Контрагент.Установить(Контрагент);
	набор.Прочитать();
	Если Набор.Количество()>0 Тогда
			
		НаборП = РегистрыСведений.ОтборДляЗагружаемойНоменлатурыПоставщиков.СоздатьНаборЗаписей();
	    НаборП.Отбор.Контрагент.Установить(Контрагент);
		НаборП.Отбор.Производитель_Сезон.Установить(Истина);
		наборП.Прочитать();
		
		Производители = НаборП.ВыгрузитьКолонку("Значение");
		ПроизводителиСписок.ЗагрузитьЗначения(Производители);
		
		НаборС = РегистрыСведений.ОтборДляЗагружаемойНоменлатурыПоставщиков.СоздатьНаборЗаписей();
	    НаборС.Отбор.Контрагент.Установить(Контрагент);
		НаборС.Отбор.Производитель_Сезон.Установить(Ложь);
		НаборС.Прочитать();
		
		Сезоны = НаборС.ВыгрузитьКолонку("Значение");
		СезоныСписок.ЗагрузитьЗначения(Сезоны);
	КонецЕсли;
			
	запрос = новый запрос;
	запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ.Номенклатура,
	               |	ТЗ.Цена
				       |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	&Контрагент как Контрагент,
	               |	Товары.Номенклатура,
	               |	Товары.Цена,
				   |	&ДатаУстановки как ДатаУстановки
	               |ИЗ
	               |	ВТ_Товары КАК Товары
	               |ГДЕ
	               |	1=1
				   |     и 2=2";
		запрос.УстановитьПараметр("Контрагент",   Контрагент );
		запрос.УстановитьПараметр("ДатаУстановки",   ТекущаяДата() );
		запрос.УстановитьПараметр("ТЗ",ТаблЗнач1);
		
		Если ПроизводителиСписок.Количество()>0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"1=1","Товары.Номенклатура.Производитель В (&Производители)");
		    запрос.УстановитьПараметр("Производители",ПроизводителиСписок);
		КонецЕсли;
		Если СезоныСписок.Количество()>0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"2=2","Товары.Номенклатура.Модель.Сезон В (&Сезоны)");
		    запрос.УстановитьПараметр("Сезоны",СезоныСписок);
		КонецЕсли;
		ТЗ = Запрос.Выполнить().Выгрузить();
		
	
	Если ТЗ.Количество()>0 Тогда		
		НаборЦены = РегистрыСведений.ЦеныНоменклатурыПоставщиков.СоздатьНаборЗаписей();
		НаборЦены.Отбор.Контрагент.Установить(Контрагент);
		
		НаборЦены.Загрузить( ТЗ );
		//Для каждого стр из ТЗ Цикл		   
		//	ЗаписьЦ = НаборЦены.Добавить();
		//	ЗаписьЦ.Контрагент = Контрагент;
		//	ЗаписьЦ.Номенклатура = стр.номенклатура;
		//	ЗаписьЦ.Цена= стр.Цена;
		//	ЗаписьЦ.ДатаУстановки = ТекущаяДата();
		//КонецЦикла;
		
		НаборЦены.Записать();
   КонецЕсли;
   
КонецПроцедуры

//22.02.2018 - вспомогательная функция для ЗагрузитьЦеныВДокумент()
функция ПолучитьКоэффНаценки(Контрагент, Производитель)
	рез = неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ рс.Процент
	|ИЗ РегистрСведений.НаценкаПоПроизводителямДляАксов КАК рс
	|ГДЕ рс.Контрагент = &Контрагент
	|	И рс.Производитель = &Производитель";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		рез = 1 + выборка.Процент/100;
	КонецЕсли;
	
	возврат рез;
	
КонецФункции
	
//"Номенклатура, Производитель, Цена -> Закупочная и Кр.Опт = Закупочная + % из рс.НаценкаПоПроизводителямДляАксов (с отбором по производителю!)
Процедура ЗагрузитьЦеныВДокумент(ТабЦеныОстатки, Контрагент)
	
	Если ТабЦеныОстатки.Количество()=0 тогда возврат КонецЕсли;
	
	текВремя = ТекущаяДата() - НачалоДня(ТекущаяДата());
	Если текВремя > 8*3600 и текВремя<16*3600 тогда //10.12.2018 - НЕ ГРУЗИМ ДНЁМ !!!
		возврат; 
	КонецЕсли;	
		
    ТЗЦены = ТабЦеныОстатки.Скопировать();
	ТЗЦены.Свернуть("Номенклатура, Производитель, Цена");//убираем "лишнее"...
	
	//22.02.2018 ---------------------------
	НЕОдинПроизводитель = истина;    
	КоэффНаценки=Неопределено;
	ТЗЦены1 = ТабЦеныОстатки.Скопировать();
	ТЗЦены1.Свернуть("Производитель");
	Если ТЗЦены1.Количество()=1 тогда
		НЕОдинПроизводитель = ЛОЖЬ;
	 	Производитель = ТЗЦены1[0].Производитель;
		КоэффНаценки  = ПолучитьКоэффНаценки(Контрагент, Производитель);
	КонецЕсли;
	Если НЕОдинПроизводитель=Ложь и КоэффНаценки=неопределено тогда
		Возврат; //нет наценки!
	КонецЕсли;	
	
	
	НовыйДокумент = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	НовыйДокумент.Ответственный = Справочники.Пользователи.НайтиПоКоду("Голубева В.С.");
	
	НовЦена = НовыйДокумент.ТипыЦен.Добавить();
	НовЦена.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00001"); //закупочная
	
	НовЦена = НовыйДокумент.ТипыЦен.Добавить();
	НовЦена.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); // кр.опт
	
	Для каждого стр из ТЗЦены Цикл
		
		Если НЕОдинПроизводитель тогда  //22.02.2018
			КоэффНаценки = ПолучитьКоэффНаценки(Контрагент, Стр.Производитель );  //17.05.2018!
		КонецЕсли;
		
		//24.07.2018 --------------Закупочная------------------------------
		НовТовар = НовыйДокумент.Товары.Добавить();
		НовТовар.Номенклатура = Стр.Номенклатура;
		НовТовар.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00001");
		НовТовар.Цена   = стр.Цена;
		НовТовар.Валюта = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00001").ВалютаЦены;
		НовТовар.ЕдиницаИзмерения = стр.Номенклатура.ЕдиницаХраненияОстатков;
		
		Если КоэффНаценки=Неопределено Тогда
			КоэффНаценки = 1.05; //по умолчанию 5%!
		КонецЕсли;
		НовТовар = НовыйДокумент.Товары.Добавить();
		НовТовар.Номенклатура = Стр.Номенклатура;
		НовТовар.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005");
		НовТовар.Цена = Окр( стр.Цена * КоэффНаценки );
		НовТовар.Валюта = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005").ВалютаЦены;
		НовТовар.ЕдиницаИзмерения = стр.Номенклатура.ЕдиницаХраненияОстатков;
		
	КонецЦикла;
	
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.Комментарий = "# Автоустановка из прайса поставщика: "+строка(Контрагент);
	
	Если ТЗЦены.Количество()>0 тогда
		попытка // а вдруг уже есть...
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		исключение	
			НовыйДокумент.Записать(); //просто запись...
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьОткрытьФайлПоставщика(Поставщик) Экспорт
	Если Поставщик = Справочники.Контрагенты.НайтиПоКоду("93920") Тогда    // ЛингЛонг
		ФайлРезультата = ПолучитьИмяВременногоФайла("xlsx");
		Файл = "/Остатки склада на "+ Строка(Формат(ТекущаяДата(),"ДФ=dd.MM.yy")) +".xlsx";
		Попытка
			врФТП = Новый FTPСоединение("yst.ru",,"dc140403_93920", "O7GmLquc",, Истина, 30);
			врФТП.Получить(Файл, ФайлРезультата);
		Исключение
			Возврат;
		КонецПопытки;
		
		ЗапуститьПриложение(ФайлРезультата);
		
	ИначеЕсли Поставщик = Справочники.Контрагенты.НайтиПоКоду("90071") Тогда  // мишлен
		ФайлРезультата = ПолучитьИмяВременногоФайла("csv");
		Файл = "/CAI.csv";
		Попытка
			врФТП = Новый FTPСоединение("shop.tyreplus.ru",,"tempftpexchange", "af7aeDoo8baeyae",, Истина, 30);
			врФТП.Получить(Файл, ФайлРезультата);
		Исключение
			Возврат;
		КонецПопытки;
		
		ЗапуститьПриложение(ФайлРезультата);
		
	ИначеЕсли Поставщик = Справочники.Контрагенты.НайтиПоКоду("П005296") Тогда  // Хартунг
		ФайлРезультата = ПолучитьИмяВременногоФайла("xls");
		НеПолучилось = ложь;
		Файл = "Остатки.xls";
		Попытка
			врФТП = Новый FTPСоединение("yst.ru",,"dc140403_hartung", "IXDHK5lc",, Истина, 30);
			врФТП.Получить("Остатки.xls", ФайлРезультата);
		Исключение
			НеПолучилось = Истина;
		КонецПопытки;

		ЗапуститьПриложение(ФайлРезультата);
		
	ИначеЕсли Поставщик = Справочники.Контрагенты.НайтиПоКоду("П002640") Тогда  //ДиаДиск
		ФайлРезультата = ПолучитьИмяВременногоФайла("xls");
		Попытка	
			ИмяФайлаИсточника = "http://dia-disk.ru/d/51959/d/ostatki--kronprinz-mefroyasht.xls"; 
			ИмяФайлаПриемника = ФайлРезультата; 
			КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
		Исключение
			Возврат;
		КонецПопытки;
		
		ЗапуститьПриложение(ФайлРезультата);
		
	ИначеЕсли Поставщик = Справочники.Контрагенты.НайтиПоКоду("П005784") Тогда    //ШиныКаучуки
		ФайлРезультата = ПолучитьИмяВременногоФайла("xls");
		Файл = "Остатки.xls";
		Попытка
			врФТП = Новый FTPСоединение("yst.ru",,"dc140403_shinkauc", "dT7cZxUk",, Истина, 30);
			врФТП.Получить("Остатки.xls", ФайлРезультата);
		Исключение
			Возврат;
		КонецПопытки;
		
		ЗапуститьПриложение(ФайлРезультата);
		
	ИначеЕсли Поставщик = Справочники.Контрагенты.НайтиПоКоду("95695") Тогда //AVS П005499 >> 95695
		
		WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
		WinHttp.Open("GET","https://ahax.ru/_yarshintorg/catalog_yarshintorg.xml",0);
		WinHttp.Send();
		
		Ответ = WinHttp.ResponseText();
		ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
		Текст = новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Ответ);
		Текст.Записать(ФайлРезультата,"UTF-8 ");
		
		ЗапуститьПриложение(ФайлРезультата);
				
	ИначеЕсли Поставщик = Справочники.Контрагенты.НайтиПоКоду("П003301") Тогда    //Алькор
		ФайлРезультата = ПолучитьИмяВременногоФайла("txt");
		Файл = "/"+ Строка(Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")) +".txt";
		Попытка
			врФТП = Новый FTPСоединение("yst.ru",,"dc140403_alkor", "lXaqsaHc",, Истина, 30);
			врФТП.Получить(Файл, ФайлРезультата);
		Исключение
			Возврат;
		КонецПопытки;
		
		ЗапуститьПриложение(ФайлРезультата);
		
	ИначеЕсли Поставщик = Справочники.Контрагенты.НайтиПоКоду("90342") Тогда    //АйТиАр
		ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
		Файл = "rests.xml";
		Попытка
			врФТП = Новый FTPСоединение("yst.ru",,"dc140403_itr", "yokohama123",, Истина, 30);
			врФТП.Получить(Файл, ФайлРезультата);
		Исключение
			Возврат;
		КонецПопытки;
		
		ЗапуститьПриложение(ФайлРезультата);
		
	ИначеЕсли Поставщик = Справочники.Контрагенты.НайтиПоКоду("92498") Тогда     //Шинсервис
		
		ИмяСайта = "www.shinservice.ru";
		ИмяСервиса = "/xml/shinservice-b2b.xml?id=8519521";
		ФайлРезультата = ПолучитьИмяВременногоФайла();
		
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Type", "text/xml");    // ; charset=utf-8
		//
		http = новый HTTPСоединение(ИмяСайта);
		http.Получить( новый httpЗапрос(ИмяСервиса,ЗаголовокHTTP), ФайлРезультата);
		
		ЗапуститьПриложение(ФайлРезультата);
		
	ИначеЕсли Поставщик = Справочники.Контрагенты.НайтиПоКоду("00282") Тогда    //северАвто	
		WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
		WinHttp.Open("GET","http://webmim.svrauto.ru/api/v1/catalog/unload?access-token=hWF5ofizIMLs1EuFdDvAnf55XCpyG6kz&format=xml",0);
		WinHttp.Send();
		
		Ответ = WinHttp.ResponseText();
		ФайлРезультата = ПолучитьИмяВременногоФайла();
		Текст = новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Ответ);
		Текст.Записать(ФайлРезультата,"UTF-8 ");
		
		ЗапуститьПриложение(ФайлРезультата);
		
		
	ИначеЕсли Поставщик = Справочники.Контрагенты.НайтиПоКоду("00128") Тогда    //Пауэр	
		WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
		WinHttp.Open("GET","https://b2b.pwrs.ru/export_data/rest_moscow.xml",0);
		WinHttp.Send();
		
		Ответ = WinHttp.ResponseText();
		ФайлРезультата = ПолучитьИмяВременногоФайла();
		Текст = новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Ответ);
		Текст.Записать(ФайлРезультата,"UTF-8 ");
		
		
		ЗапуститьПриложение(ФайлРезультата);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЦены(ТЗ, Поставщик1, Показать=Истина) 
	
	запрос1 = новый запрос;
	запрос1.Текст = "ВЫБРАТЬ
	                |	ТЗ.Номенклатура,
	                |	ТЗ.Количество
	                |ПОМЕСТИТЬ ВТ_Товары
	                |ИЗ
	                |	&ТЗ КАК ТЗ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	Товары.Номенклатура,
	                |	Товары.Количество,
	                |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	                |ИЗ
	                |	ВТ_Товары КАК Товары
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних( , 	
					|			( (ТипЦен = &Базовая И (Номенклатура.ВидТовара = Значение(Перечисление.ВидыТоваров.Шины)
	                |					               ИЛИ Номенклатура.ВидТовара = Значение(Перечисление.ВидыТоваров.ДИСКИ) )
					
					|			  ) или (ТипЦен = &крОпт И (Номенклатура.ВидТовара = Значение(Перечисление.ВидыТоваров.Аксессуары)
	                |					               ИЛИ Номенклатура.ВидТовара = Значение(Перечисление.ВидыТоваров.АКБ) 
					|					               ИЛИ Номенклатура.ВидТовара = Значение(Перечисление.ВидыТоваров.Прочее) )
					|			)       )
	                |					И Номенклатура В (ВЫБРАТЬ вт.Номенклатура ИЗ ВТ_Товары КАК вт) ) КАК ЦеныНоменклатурыСрезПоследних
	                |		ПО Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	                |ГДЕ
	                |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) = 0";   
	запрос1.УстановитьПараметр("ТЗ",ТЗ);
	запрос1.УстановитьПараметр("Базовая", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") );   
	запрос1.УстановитьПараметр("крОпт", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") );   
	ТЗ = запрос1.Выполнить().Выгрузить(); 
	
Если Показать Тогда	
		
	макет = ПолучитьОбщийМакет("НоменклатураПоставщиеовБезЦен");
	табДокумент = Новый ТабличныйДокумент;
	табДокумент.АвтоМасштаб = Истина;
	Для каждого стр11 из ТЗ Цикл
		областьстрока = Макет.ПолучитьОбласть("Строка");
		областьстрока.Параметры.Номенклатура = стр11.Номенклатура;
		областьстрока.Параметры.Код = стр11.Номенклатура.Код;
		табДокумент.Вывести(областьстрока);
	КонецЦикла;
	табДокумент.Показать();
	
Иначе //УДАЛИТЬ!
	
	//21.03.2017 - удаляем из регистра!
	для каждого стр1 из ТЗ Цикл
		 регСв = РегистрыСведений.ОстаткиНоменклатурыКонтрагентов.СоздатьМенеджерЗаписи();
		 регСв.Номенклатура  = стр1.Номенклатура;
		 регСв.Контрагент    = Поставщик1;
		// регСв.Подразделение = справочники.Подразделения.ПустаяСсылка();
		 попытка
			 регСв.Удалить();
		 исключение
		 КонецПопытки;	 
	КонецЦикла;	
	
КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьЦеныB2B() Экспорт
	
	//Северавто+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	СеверАвто = Справочники.Контрагенты.НайтиПоКоду("00282");
	
	WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
	WinHttp.Open("GET","http://webmim.svrauto.ru/api/v1/catalog/unload?access-token=kPIiDC75XLvXrhIXR-GeQGRuUSMnsrJY&format=xml&types=1",0);
	WinHttp.Send();
	
	Ответ = WinHttp.ResponseText();
	ФайлРезультата = "C:\Остатки_Север_Авто.xml";
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлРезультата,"UTF-8 ");

		
	КЧ = Новый КвалификаторыЧисла(12,2);
	КС = Новый КвалификаторыСтроки(100);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура",ОписаниеТиповС);
	ТЗ.Колонки.Добавить("Цена",ОписаниеТиповЧ);
		
	Чтение = Новый ЧтениеXML;

	Чтение.ОткрытьФайл("C:\Остатки_Север_Авто.xml");
	ИмяТекУзла = "";
	ИмяПредУзла = "";
	Пока Чтение.Прочитать() Цикл 
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяПредУзла = ИмяТекУзла;
			ИмяТекУзла = Чтение.Имя;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "NNOMMODIF" Тогда
			КодПоставщика = Чтение.Значение;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "SMODIFNAME" Тогда
			Наименование = Чтение.Значение;
						
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "SMNFCODE" Тогда
			
			Артикул = Чтение.Значение;
			//Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул); 
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "TERRITORY_NAME" Тогда
			Склад = Чтение.Значение;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "NPRICE_PREPAYMENT" Тогда                          
			
			Попытка 
				Цена = Число(Чтение.Значение);
			Исключение
				Цена = 0;
			КонецПопытки;
			
			Если Цена > 0 и Артикул <> "" Тогда
				Нов = ТЗ.Добавить();
				Нов.Номенклатура = Артикул;
				Нов.Цена = Цена;
			КонецЕсли;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ИмяТекУзла = "";
	 	КонецЕсли;	
	КонецЦикла;	
	
	ТЗ.Свернуть("Номенклатура, Цена");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ",ТЗ);
	Запрос.УстановитьПараметр("шины",Перечисления.ВидыТоваров.Шины);
	Запрос.Текст = "ВЫБРАТЬ
				   |	ТЗ.Номенклатура,
				   |	ТЗ.Цена
				   |ПОМЕСТИТЬ ТЗВрем
				   |ИЗ
				   |	&ТЗ КАК ТЗ
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	Номенклатура1.Ссылка КАК Номенклатура,
				   |	ТЗВрем.Цена
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура1
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗВрем КАК ТЗВрем
				   |		ПО Номенклатура1.Артикул = ТЗВрем.Номенклатура
				   |ГДЕ
				   |	Номенклатура1.ВидТовара = &Шины
				   |	И ЕСТЬNULL(ТЗВрем.Цена, 0) > 0";
				   
	 Результат1 = запрос.Выполнить().Выгрузить();
		
	
	//Пауэр++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
	WinHttp.Open("GET","https://b2b.pwrs.ru/export_data/M13541.xml",0);
	WinHttp.Send();
	
	Ответ = WinHttp.ResponseText();
	ФайлРезультата = "C:\Остатки_Пауэр.xml";
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлРезультата,"UTF-8 ");

		
	КЧ = Новый КвалификаторыЧисла(12,2);
	КС = Новый КвалификаторыСтроки(100);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТЗ2 = Новый ТаблицаЗначений;
	ТЗ2.Колонки.Добавить("Номенклатура",ОписаниеТиповС);
	ТЗ2.Колонки.Добавить("Цена",ОписаниеТиповЧ);
		
	Чтение = Новый ЧтениеXML;

	Чтение.ОткрытьФайл("C:\Остатки_Пауэр.xml");
	ИмяТекУзла = "";
	ИмяПредУзла = "";
	Пока Чтение.Прочитать() Цикл 
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяПредУзла = ИмяТекУзла;
			ИмяТекУзла = Чтение.Имя;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "cae" Тогда
			
			Артикул = Чтение.Значение;
			//Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
			Цена = 100000;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и найти(ИмяТекУзла,"price") > 0 Тогда
			
			Если Число(Чтение.Значение) < Цена Тогда
				
				Цена = Число(Чтение.Значение);
				
			КонецЕсли;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст и ИмяТекУзла = "name" Тогда                          
			
			Если Цена <> 100000 и Артикул <> "" Тогда
				Нов = ТЗ2.Добавить();
				Нов.Номенклатура = Артикул;
				Нов.Цена = Цена;
			КонецЕсли;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ИмяТекУзла = "";
	 	КонецЕсли;	
	КонецЦикла;	
	
	ТЗ2.Свернуть("Номенклатура, Цена");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ",ТЗ2);
	Запрос.УстановитьПараметр("шины",Перечисления.ВидыТоваров.Шины);
	Запрос.Текст = "ВЫБРАТЬ
				   |	ТЗ.Номенклатура,
				   |	ТЗ.Цена
				   |ПОМЕСТИТЬ ТЗВрем
				   |ИЗ
				   |	&ТЗ КАК ТЗ
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	Номенклатура1.Ссылка КАК Номенклатура,
				   |	ТЗВрем.Цена
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура1
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗВрем КАК ТЗВрем
				   |		ПО Номенклатура1.Артикул = ТЗВрем.Номенклатура
				   |ГДЕ
				   |	Номенклатура1.ВидТовара = &Шины
				   |	И ЕСТЬNULL(ТЗВрем.Цена, 0) > 0";
				   
	 Результат2 = запрос.Выполнить().Выгрузить();
	
	//ЛигаТайерс++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
	WinHttp.Open("GET","http://b2b.liga-tyres.ru/online/catalog/store.xml?token=c92562041f5456e326617820a3b5b0f8&tire=true",0);
	WinHttp.Send();
	
	Ответ = WinHttp.ResponseText();
	ФайлРезультата = "C:\Остатки_ЛигаТайерс.xml";
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлРезультата,"UTF-8 ");

		
	КЧ = Новый КвалификаторыЧисла(12,2);
	КС = Новый КвалификаторыСтроки(100);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТЗ3 = Новый ТаблицаЗначений;
	ТЗ3.Колонки.Добавить("Номенклатура",ОписаниеТиповС);
	ТЗ3.Колонки.Добавить("Цена",ОписаниеТиповЧ);
		
	Чтение = Новый ЧтениеXML;

	Чтение.ОткрытьФайл("C:\Остатки_ЛигаТайерс.xml");
	Пока Чтение.Прочитать() Цикл 
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента и Чтение.Имя = "gd" Тогда
			
			Пока Чтение.ПрочитатьАтрибут() Цикл
				Если Чтение.Имя = "cae" Тогда
	 				Артикул = Чтение.Значение;
				КонецЕсли;	
			КонецЦикла;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента и Чтение.Имя = "price" Тогда
			
			Пока Чтение.ПрочитатьАтрибут() Цикл
				Если Чтение.Имя = "p1" Тогда
	 				Цена = Чтение.Значение;
				КонецЕсли;	
			КонецЦикла;
			
			Нов = ТЗ3.Добавить();
			Нов.Номенклатура = Артикул;
			Нов.Цена = Цена;
						
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
	 	КонецЕсли;	
	КонецЦикла;	
	
	ТЗ3.Свернуть("Номенклатура, Цена");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ",ТЗ3);
	Запрос.УстановитьПараметр("шины",Перечисления.ВидыТоваров.Шины);
	Запрос.Текст = "ВЫБРАТЬ
				   |	ТЗ.Номенклатура,
				   |	ТЗ.Цена
				   |ПОМЕСТИТЬ ТЗВрем
				   |ИЗ
				   |	&ТЗ КАК ТЗ
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	Номенклатура1.Ссылка КАК Номенклатура,
				   |	ТЗВрем.Цена
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура1
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗВрем КАК ТЗВрем
				   |		ПО Номенклатура1.Артикул = ТЗВрем.Номенклатура
				   |ГДЕ
				   |	Номенклатура1.ВидТовара = &Шины
				   |	И ЕСТЬNULL(ТЗВрем.Цена, 0) > 0";
				   
	 Результат3 = запрос.Выполнить().Выгрузить();
	 
	//ШинСервис++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
	WinHttp.Open("GET","http://www.shinservice.ru/xml/shinservice-b2b-19.xml?id=8519521",0);
	WinHttp.Send();
	
	Ответ = WinHttp.ResponseText();
	ФайлРезультата = "C:\Остатки_ШинСервис.xml";
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлРезультата,"UTF-8 ");

		
	КЧ = Новый КвалификаторыЧисла(12,2);
	КС = Новый КвалификаторыСтроки(100);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТЗ4 = Новый ТаблицаЗначений;
	ТЗ4.Колонки.Добавить("Номенклатура",ОписаниеТиповС);
	ТЗ4.Колонки.Добавить("Цена",ОписаниеТиповЧ);
		
	Чтение = Новый ЧтениеXML;

	Чтение.ОткрытьФайл("C:\Остатки_ШинСервис.xml");
	Пока Чтение.Прочитать() Цикл 
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента и Чтение.Имя = "tire" Тогда
			
			Пока Чтение.ПрочитатьАтрибут() Цикл
				Если Чтение.Имя = "price" Тогда
     				Цена = Чтение.Значение;
				ИначеЕсли Чтение.Имя = "sku" Тогда
     				Артикул = Чтение.Значение;
				КонецЕсли;	
			КонецЦикла;
			
		//ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента и Чтение.Имя = "price" Тогда
			
			//Пока Чтение.ПрочитатьАтрибут() Цикл
			//	Если Чтение.Имя = "p1" Тогда
			//	Цена = Чтение.Значение;
			//	КонецЕсли;	
			//КонецЦикла;
			
			Нов = ТЗ4.Добавить();
		    Нов.Номенклатура = Артикул;
		    Нов.Цена = Цена;
						
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
	 	КонецЕсли;	
	КонецЦикла;	
	
	ТЗ4.Свернуть("Номенклатура, Цена");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ",ТЗ4);
	Запрос.УстановитьПараметр("шины",Перечисления.ВидыТоваров.Шины);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ.Номенклатура,
	               |	ТЗ.Цена
	               |ПОМЕСТИТЬ ТЗВрем
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура1.Ссылка КАК Номенклатура,
	               |	ТЗВрем.Цена
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗВрем КАК ТЗВрем
	               |		ПО Номенклатура1.Артикул = ТЗВрем.Номенклатура
	               |ГДЕ
	               |	Номенклатура1.ВидТовара = &Шины
	               |	И ЕСТЬNULL(ТЗВрем.Цена, 0) > 0";
				   
	 Результат4 = запрос.Выполнить().Выгрузить();
	
	//Обработка +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	Запрос = Новый запрос;
	Запрос.УстановитьПараметр("ТЗ1",Результат1);
	Запрос.УстановитьПараметр("ТЗ2",Результат2);
	Запрос.УстановитьПараметр("ТЗ3",Результат3);
	Запрос.УстановитьПараметр("ТЗ4",Результат4);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗ1.Номенклатура,
	|	ТЗ1.Цена
	|ПОМЕСТИТЬ Т1
	|ИЗ
	|	&ТЗ1 КАК ТЗ1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ2.Номенклатура,
	|	ТЗ2.Цена
	|ПОМЕСТИТЬ Т2
	|ИЗ
	|	&ТЗ2 КАК ТЗ2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ3.Номенклатура,
	|	ТЗ3.Цена
	|ПОМЕСТИТЬ Т3
	|ИЗ
	|	&ТЗ3 КАК ТЗ3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ4.Номенклатура,
	|	ТЗ4.Цена
	|ПОМЕСТИТЬ Т4
	|ИЗ
	|	&ТЗ4 КАК ТЗ4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Т1.Номенклатура, ЕСТЬNULL(Т2.Номенклатура, ЕСТЬNULL(Т3.Номенклатура, Т4.Номенклатура))) КАК Номенклатура,
	|	ЕСТЬNULL(Т1.Номенклатура.Наименование, ЕСТЬNULL(Т2.Номенклатура.Наименование, ЕСТЬNULL(Т3.Номенклатура.Наименование, Т4.Номенклатура.Наименование))) КАК Наименование,
	|	ЕСТЬNULL(Т1.Номенклатура.Артикул, ЕСТЬNULL(Т2.Номенклатура.Артикул, ЕСТЬNULL(Т3.Номенклатура.Артикул, Т4.Номенклатура.Артикул))) КАК Артикул,
	|	ЕСТЬNULL(Т1.Номенклатура.Код, ЕСТЬNULL(Т2.Номенклатура.Код, ЕСТЬNULL(Т3.Номенклатура.Код, Т4.Номенклатура.Код))) КАК Код,
	
	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Т1.Цена, 0) = 0
	|			ТОГДА 100000
	|		ИНАЧЕ Т1.Цена
	|	КОНЕЦ КАК Цена1,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Т2.Цена, 0) = 0
	|			ТОГДА 100000
	|		ИНАЧЕ Т2.Цена
	|	КОНЕЦ КАК Цена2,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Т3.Цена, 0) = 0
	|			ТОГДА 100000
	|		ИНАЧЕ Т3.Цена
	|	КОНЕЦ КАК Цена3,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Т4.Цена, 0) = 0
	|			ТОГДА 100000
	|		ИНАЧЕ Т4.Цена
	|	КОНЕЦ КАК Цена4
	|ПОМЕСТИТЬ ВРЕМ
	|ИЗ
	|	Т1 КАК Т1
	|		ПОЛНОЕ СОЕДИНЕНИЕ Т2 КАК Т2
	|		ПО Т1.Номенклатура = Т2.Номенклатура
	|		ПОЛНОЕ СОЕДИНЕНИЕ Т3 КАК Т3
	|		ПО Т1.Номенклатура = Т3.Номенклатура
	|       ПОЛНОЕ СОЕДИНЕНИЕ Т4 КАК Т4
	|		ПО Т1.Номенклатура = Т4.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВРЕМ.Номенклатура,
	|	ВРЕМ.Цена1,
	|	ВРЕМ.Цена2,
	|	ВРЕМ.Цена3,
	|	ВРЕМ.Цена4,
	| ВЫБОР
	|КОГДА ВРЕМ.Цена1 <= ВРЕМ.Цена2
	|И ВРЕМ.Цена1 <= ВРЕМ.Цена3
	|И ВРЕМ.Цена1 <= ВРЕМ.Цена4
	|ТОГДА ВРЕМ.Цена1
	|КОГДА ВРЕМ.Цена2 <= ВРЕМ.Цена1
	|И ВРЕМ.Цена2 <= ВРЕМ.Цена3
	|И ВРЕМ.Цена2 <= ВРЕМ.Цена4
	|ТОГДА ВРЕМ.Цена2
	|КОГДА ВРЕМ.Цена3 <= ВРЕМ.Цена1
	|И ВРЕМ.Цена3 <= ВРЕМ.Цена2
	|И ВРЕМ.Цена3 <= ВРЕМ.Цена4
	|ТОГДА ВРЕМ.Цена3
	|КОГДА ВРЕМ.Цена4 <= ВРЕМ.Цена1
	|И ВРЕМ.Цена4 <= ВРЕМ.Цена2
	|И ВРЕМ.Цена4 <= ВРЕМ.Цена3
	|ТОГДА ВРЕМ.Цена4
	|КОНЕЦ Как МинЦена,
	|	ВРЕМ.Наименование,
	|	ВРЕМ.Артикул,
	|	ВРЕМ.Код
	|ПОМЕСТИТЬ Врем2

	|ИЗ
	|	ВРЕМ КАК ВРЕМ
	|;
	|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Врем2.Номенклатура,
|	Врем2.Наименование,
|	Врем2.Артикул,
|	Врем2.Код,
|	МИНИМУМ(Врем2.МинЦена) КАК МинЦена
|ИЗ
|	Врем2 КАК Врем2
|
|СГРУППИРОВАТЬ ПО
|	Врем2.Номенклатура,
|   Врем2.Наименование,
|   Врем2.Артикул,
|   Врем2.Код
	|УПОРЯДОЧИТЬ ПО
	|Наименование";
				   
	Результат = Запрос.Выполнить().Выгрузить();
	
	типЦенB2B =  Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00032"); //B2B ! 
    типЦенB2BВалютаЦены = типЦенB2B.ВалютаЦены;
	
	Если Результат.Количество()>0 Тогда
		Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		Док.Ответственный = Справочники.Пользователи.НайтиПоКоду("Алексеева А.Е.");  //10.10.2018 Плотников>>
		НовЦена = док.ТипыЦен.Добавить();
		НовЦена.ТипЦен = типЦенB2B;		
		док.Дата = ТекущаяДата();
		
		для каждого стр из результат Цикл
			Нов = Док.Товары.Добавить();
			Нов.ТипЦен = типЦенB2B;
			нов.Валюта = типЦенB2BВалютаЦены;
			Нов.ИндексСтрокиТаблицыЦен = 0;
			Нов.Номенклатура = стр.Номенклатура;
			нов.ЕдиницаИзмерения = стр.Номенклатура.ЕдиницаХраненияОстатков;
			Нов.Цена = стр.МинЦена;
		КонецЦикла;
		
		док.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗагрузкаЦенМИЦвРРЦ() Экспорт
	
	WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
	WinHttp.Open("GET","http://www.shinservice.ru/xml/shinservice-b2b-19.xml?id=8519521",0);
	WinHttp.Send();
	
	Ответ = WinHttp.ResponseText();
	ФайлРезультата = "C:\Остатки_ШинСервис.xml";
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлРезультата,"UTF-8 ");

		
	КЧ = Новый КвалификаторыЧисла(12,2);
	КС = Новый КвалификаторыСтроки(100);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТЗ4 = Новый ТаблицаЗначений;
	ТЗ4.Колонки.Добавить("Номенклатура",ОписаниеТиповС);
	ТЗ4.Колонки.Добавить("Цена",ОписаниеТиповЧ);
		
	Чтение = Новый ЧтениеXML;

	Чтение.ОткрытьФайл("C:\Остатки_ШинСервис.xml");
	Пока Чтение.Прочитать() Цикл 
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента и Чтение.Имя = "tire" Тогда
			
			Пока Чтение.ПрочитатьАтрибут() Цикл
				Если Чтение.Имя = "sticker_price" Тогда
     				Цена = Чтение.Значение;
				ИначеЕсли Чтение.Имя = "sku" Тогда
     				Артикул = Чтение.Значение;
				КонецЕсли;	
			КонецЦикла;
			
			Нов = ТЗ4.Добавить();
		    Нов.Номенклатура = Артикул;
		    Нов.Цена = Цена;
						
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
	 	КонецЕсли;	
	КонецЦикла;	
	
	ТЗ4.Свернуть("Номенклатура, Цена");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ",ТЗ4);
	Запрос.УстановитьПараметр("шины",Перечисления.ВидыТоваров.Шины);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ.Номенклатура,
	               |	ТЗ.Цена
	               |ПОМЕСТИТЬ ТЗВрем
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	спрНоменклатура.Ссылка КАК Номенклатура,
	               |	МИНИМУМ(ТЗВрем.Цена) КАК Цена
	               |ИЗ
	               |	Справочник.Номенклатура КАК спрНоменклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗВрем КАК ТЗВрем
	               |		ПО спрНоменклатура.Артикул = ТЗВрем.Номенклатура
	               |ГДЕ
	               |	спрНоменклатура.ВидТовара = &Шины
	               |	И ЕСТЬNULL(ТЗВрем.Цена, 0) > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Номенклатура1.Ссылка";
	 Результат = запрос.Выполнить().Выгрузить();
	 
	 типЦенРРЦ = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00011"); //РРЦ шины
	 типЦенРРЦВалютаЦены = типЦенРРЦ.ВалютаЦены;
	 
	 Если Результат.Количество()>0 Тогда
		
		Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		Док.Ответственный = Справочники.Пользователи.НайтиПоКоду("Алексеева А.Е."); //10.10.2018 Плотников>>
		НовЦена = док.ТипыЦен.Добавить();
		НовЦена.ТипЦен = типЦенРРЦ; 
		док.Дата = ТекущаяДата();
		
		для каждого стр из результат Цикл
			Нов = Док.Товары.Добавить();
			Нов.ТипЦен = типЦенРРЦ;
			нов.Валюта = типЦенРРЦВалютаЦены;
			Нов.ИндексСтрокиТаблицыЦен = 0;
			Нов.Номенклатура = стр.Номенклатура;
			нов.ЕдиницаИзмерения = стр.Номенклатура.ЕдиницаХраненияОстатков;
			Нов.Цена = стр.Цена;
		КонецЦикла;
		
		док.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;
	
КонецПроцедуры


//+++( 05.12.2017 - автообъединялка и постановка заказов в маршруты

//1). -----2 Основные функции для вызова из регл.заданий------------
Процедура АвтоОбъединениеЗаказовПокупателей() Экспорт
	списКонтр = ПолучитьКлиентовДляОбъединенияЗаказов(Истина);	
	Если списКонтр.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;	
	
	СписПодр = новый массив; //01.10.2018
	СписПодр.Добавить(справочники.Подразделения.НайтиПоКоду("00005")); //0 - Яр
	
	СписПодр.Добавить(справочники.Подразделения.НайтиПоКоду("00106")); //РнД
	СписПодр.Добавить(справочники.Подразделения.НайтиПоКоду("00112")); //СПб
	//СписПодр.Добавить(справочники.Подразделения.НайтиПоКоду("00138")); //ЕКТ
	//СписПодр.Добавить(справочники.Подразделения.НайтиПоКоду("00172")); //Тл
	
Для iii = 0 по СписПодр.Количество()-1 Цикл
  подр = СписПодр[iii];
	ЧислоДнейВперед = 0;  //0 - только на сегодня, 1 - и завтрашние тоже объединяет?!
	счДней = 0; 	  
	ДатаОтгрузки  = КонецДня(ТекущаяДата());
    ДатаОтгрузки7 = НачалоДня(ДатаОтгрузки) - 14*86400;
  //13.03.2018----------цикл по дням вперед---------------------------------------------------------
  Пока счДней<=ЧислоДнейВперед цикл
    выборкаДоговор = ПолучитьЗаказыДляОбъединения(списКонтр, подр, ДатаОтгрузки, ДатаОтгрузки7 );
	
	Пока выборкаДоговор.Следующий() Цикл
		
		Контр1 = выборкаДоговор.ДоговорКонтрагента.Владелец; 
		Событие1 = "АвтоОбъединениеЗаказовПокупателей";
		текстОшибки1 = "";
		
		//обработка по доп.условиям
		Если выборкаДоговор.ЗаказПокупателя<=1 тогда
			текстОшибки1 = "Найден только 1 заказ - автообъединение не требуется!";
			продолжить; // сразу дальше!!! не пишем в ЖурналИзменений ничего
		КонецЕсли;	
				
	//++++++++++++++++ пишем в Журнал изменений что не так ++++++++++++++++++
		Если текстОшибки1<>"" тогда  
			#Если Клиент тогда
			Сообщить(текстОшибки1,СтатусСообщения.Внимание);
			#КонецЕсли
			ЗаписатьЛОГвЖурналИзменений(Контр1, Событие1, ТекстОшибки1);
			продолжить;
		КонецЕсли;			
		
	//==================Начинаем формировать списки для объединения=============================
			списЗак  = новый СписокЗначений;
			
			//20.02.2018 - массив списков... по Виду адреса... п.8
			таблСписЗак = новый ТаблицаЗначений; 
			таблСписЗак.Колонки.Добавить("ВидАдресаДоставки");
			таблСписЗак.Колонки.Добавить("СписЗак");
		
			выборкаЗак = выборкаДоговор.выбрать();
			ВидАдресаДоставки0 = неопределено;
			Пока выборкаЗак.Следующий() Цикл
				
			//+++ 21.12.2017 - для пустого - автоопределение адреса для склеивания с "нормальным" адресом
				Если выборкаЗак.ВидАдресаДоставки.пустая() тогда
					сАдрес = ПолучитьСтруктуруАдреса(выборкаЗак.ЗаказПокупателя);	 //	"Вид, Адрес, Регион, Город, Улица, Дом, Координаты"
					ВидАдресаДоставки1 = сАдрес.Вид;
				иначе
					ВидАдресаДоставки1 = выборкаЗак.ВидАдресаДоставки;
				КонецЕсли;
				
				Если ВидАдресаДоставки0 = неопределено тогда
                ВидАдресаДоставки0 = ВидАдресаДоставки1;
				стрТабл1 = таблСписЗак.Добавить();       // добавляем 1 строку
				стрТабл1.ВидАдресаДоставки = ВидАдресаДоставки1;
				КонецЕсли;
				
				попытка //могут быть разные типы
					Если ВидАдресаДоставки0 = ВидАдресаДоставки1 тогда
						списЗак.добавить(выборкаЗак.ЗаказПокупателя);
						
						таблСписЗак[0].СписЗак = новый СписокЗначений;
						таблСписЗак[0].СписЗак.ЗагрузитьЗначения( СписЗак.ВыгрузитьЗначения() );
	
					Иначе //20.02.2018 - другой адрес... в следующую строку
						стрТабл1 = таблСписЗак.Найти( ВидАдресаДоставки1, "ВидАдресаДоставки");
						Если стрТабл1 = неопределено тогда
							стрТабл1 = таблСписЗак.Добавить();
							стрТабл1.ВидАдресаДоставки = ВидАдресаДоставки1;
							стрТабл1.СписЗак = новый СписокЗначений;
						КонецЕсли;
						стрТабл1.СписЗак.добавить(выборкаЗак.ЗаказПокупателя); // в 1-ю или N-ю
					КонецЕсли;
				исключение
				КонецПопытки;
				
			КонецЦикла;
			
//==========================Последовательность разделения - ФИКСИРОВАННАЯ ============================			
			//1 - 20.02.2018 ---- п.7 - цикл по разным тов.группам ---------------
			РазделитьТаблицуПоСезоннымЗаказам( таблСписЗак );
			
			//2 - 28.03.2018
			РазделитьТаблицуПоСпособамОтгрузки( таблСписЗак ); 
			
			//3 - 28.03.2018
			РазделитьТаблицуПоСрокамОплаты( таблСписЗак ); 
			
			//4 - 20.02.2018 ---- п.11 - доп.разбивка по видам товаров --------------------------
			флЕстьТовары=ЛОЖЬ;
			Если выборкаДоговор.ДоговорКонтрагента.Владелец.НеОбъединятьРазныеТовГруппы тогда
				РазделитьТаблицуПоВидамТоваров( таблСписЗак ); //+ ВидТовара
				флЕстьТовары = Истина;
			КонецЕсли;	

			//----------------------------------------------
			//08.05.2018  - в пятницу м субботу! заказы могут разделится на 2 части: на Субботу и на Понедельник
			деньНед = ДеньНедели( ТекущаяДата()+ счДней*86400 );
			Если  деньНед=5 или деньНед=6 тогда 
				РазделитьТаблицуПоСвойствуДняОтгрузки( таблСписЗак ); //+ Понедельник
			КонецЕсли;
			
			//5 - 24.07.2018 БонусПрименен
			РазделитьТаблицуПоБонусПрименен( таблСписЗак , флЕстьТовары, (деньНед=5 или деньНед=6) ); //БонусПрименен

		//+++( 24.10.2018 ---------Задача № 57245 п.1-------------------------------
			Для n=0 по таблСписЗак.Количество()-1 цикл
				
				//предварительный расчет
				КолРазрешено = 0; КолНеРазрешено = 0;
				 Ni = таблСписЗак[n].списЗак.Количество(); i=0;
				Пока i<Ni цикл
					 зак1 = таблСписЗак[n].списЗак[i].Значение;
					 Если ЕстьТоварыСтопЛиста(зак1) тогда
						 Если зак1.РазрешитьГрузитьТоварыИзСтопЛиста тогда
							 КолРазрешено=КолРазрешено+1;
						 иначе
							 КолНеРазрешено=КолНеРазрешено+1;
						 КонецЕсли;	 
					КонецЕсли;	
					i=i+1;	
				КонецЦикла;
				
				Если КолРазрешено*КолНеРазрешено<>0 тогда // есть разные заказы
				 Ni = таблСписЗак[n].списЗак.Количество(); i=0;
					Пока i<Ni цикл //------------------------не объединяем заказы не разрешенные стоп-листа--------
						 зак1 = таблСписЗак[n].списЗак[i].Значение;
						Если НельзяОбъединятьНеПодтвержденныйЗаказВКоторомЕстьТоварыСтопЛиста(зак1) тогда
							//в Историю!
							текстОшибки1 = "Заказ содержит диски стоп-листа не разрешенные к отгрузке!";
							ЗаписатьЛОГвЖурналИзменений( зак1,  Событие1, ТекстОшибки1, счДней );
							
							таблСписЗак[n].списЗак.Удалить(i); 
							Ni=Ni-1;
						иначе 
							i=i+1;	
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
				
		    КонецЦикла;
        //+++)
			
			
		//20.02.2018 ---- п.8 - цикл по адресам ---------------------------
			для каждого стр1 из таблСписЗак цикл
				
				текстОшибки1=""; //+++ 16.05.2018 - работает как выключатель!
			
				списЗак = новый СписокЗначений;
				списЗак.ЗагрузитьЗначения( стр1.списЗак.ВыгрузитьЗначения() ); //09.04.2018
				
				зак1 = неопределено;
				//+++ 21.12.2017 
				Если списЗак.Количество()=0 тогда // один заказ НЕ НАДО объединять!
					текстОшибки1 = строка(стр1.ВидАдресаДоставки)+": НЕТ заказов для объединения!";
					продолжить;
				ИначеЕсли списЗак.Количество()=1 тогда // один заказ НЕ НАДО объединять!
					текстОшибки1 = "Один заказ - НЕ НАДО объединять! "
					+" Срок Оплаты: "+строка(стр1.СрокОплаты)+" дн."
					+?(стр1.СезЗак="","",", Сез.зак: "+стр1.СезЗак) 
					+?(стр1.СпособОтгрузки=0, ", на "+строка(стр1.ВидАдресаДоставки), 
						?(стр1.СпособОтгрузки=1,", [v]Самовывоз",
					      ?(стр1.СпособОтгрузки=2, ", [v]Самовывоз с [v]Филиала",""
					   ) ) )
					+?(флЕстьТовары, ", "+ВРЕГ(стр1.ВидТовара), "")
					+?(деньНед=5 или деньНед=6, ", "+?(стр1.Понедельник,"Понедельник", "Суббота") ,"") //11.05.2018
					+?(стр1.БонусПрименен,", [v]БонусПрименен","") //24.07.2018
					+", Заказ: "+строка(списЗак[0].Значение.Номер)
					+", Клиент: "+строка(Контр1);
					
					зак1 = списЗак[0].Значение; // 28.03.2018 привязка к Заказу для просмотра!
					
				ИначеЕсли ЕстьРазныеТипыЗаказа10(списЗак) тогда
					текстОшибки1 = строка(стр1.ВидАдресаДоставки)+": Есть разные типы заказов 10 и другие в списке из "+строка(списЗак.Количество())+" заказов!";
				КонецЕсли;	

				Если текстОшибки1<>"" тогда //+++ 27.03.2018
					#Если Клиент тогда
					Сообщить(текстОшибки1,СтатусСообщения.Внимание);
					#КонецЕсли
					//18.08 - 23.10.2018 - выключено/включено логирование! 
					ЗаписатьЛОГвЖурналИзменений( ?(зак1 = неопределено, Контр1, зак1),  Событие1, ТекстОшибки1, счДней );
					продолжить;
				КонецЕсли;			
				
				ВыполнитьОбъединениеЗаказовПокупателей(стр1, счДней);  //12.04.2018
			КонецЦикла;
		
	
	КонецЦикла;	//по контр.
	
	 ДатаОтгрузки  = КонецДня(КонецДня(ДатаОтгрузки) + 1); // конец Завтрашнего дня
     ДатаОтгрузки7 = НачалоДня(ДатаОтгрузки); // только за 1 завтрашний день!
	 счДней = счДней + 1;// 0 и 1
  КонецЦикла; //конец счДней
КонецЦикла;

КонецПроцедуры	

//20.02.2018 --- п.7 вспомогательная функция для АвтоОбъединения ----
//1 + 1
Процедура РазделитьТаблицуПоСезоннымЗаказам( таблСписЗак )
	//"#АвтоКомплектация по Cезонному заказу покупателя №ТК000285 от 31.01.2018 # "
	СезЗакТек0= "---";
	стрПоиска = "#АвтоКомплектация по Cезонному заказу покупателя №"; 
	jk = стрДлина(стрПоиска);
	таблСписЗак.Колонки.Добавить("СезЗак");
	i=0; N=таблСписЗак.Количество();
	Для i=0 по N-1 цикл
		стр2 = таблСписЗак[i];
		Если стр2.СписЗак.Количество()<=1 тогда  //1 или 0 заказов не надо разделять!
			стр2.СезЗак = СезЗакТек0;
			продолжить;
		КонецЕсли;
		
		всеЗаказыВОдномСезЗаказе = Истина;
		СезЗак1 = "!!!"; 				//+++ 16.05.2018
		
		Nn = стр2.СписЗак.Количество(); ii=0;
		пока ii<Nn цикл //--------------------цикл по заказам-----------------------
			СезЗакТек = СезЗакТек0;
			зак1 = стр2.СписЗак[ii].Значение;
			Коммент1 = зак1.Комментарий;
			   jj = Найти(Коммент1, стрПоиска); 
			   Если jj>0 тогда 
				   СезЗакТек = сред(Коммент1, jj+jk,9); //  "ТК000285 "
				   
			   //+++ 30.07.2018 -> поиск по первичным заказам! #Skype Горелов - Юлтэк Групп # ТК512912 - не влезает уже в Комментарий!
		   	   ИначеЕсли зак1.Заказы.Количество()>0 тогда
				   Коммент1 = зак1.Заказы[0].ЗаказПокупателя.Комментарий; //1-ый заказ в списке!
			  		jj = Найти(Коммент1, стрПоиска); 
			   		Если jj>0 тогда 
				   		СезЗакТек = сред(Коммент1, jj+jk,9); //  "ТК000285 "
					КонецЕсли;
					
			   КонецЕсли;
				
			Если СезЗак1 = "!!!" тогда //1-ый заказ - определяем сез.зак Всей строки
				СезЗак1 = СезЗакТек;
				стр2.СезЗак = СезЗак1; //+++ 27.02.2018 - исправление отделяет 1 сезонный заказ для отделения при поиске

			иначеЕсли СезЗак1 <> СезЗакТек тогда //+++ ИМЕННО с первым!
			//ищем такую строку.... 
				стрТаблСтроки = таблСписЗак.НайтиСтроки( Новый Структура("ВидАдресаДоставки, СезЗак", стр2.ВидАдресаДоставки, СезЗакТек) );
				Если стрТаблСтроки.Количество()=0 тогда //добавляем 
					стрТабл2 = таблСписЗак.Добавить();
					стрТабл2.ВидАдресаДоставки = стр2.ВидАдресаДоставки;
					стрТабл2.СезЗак = СезЗакТек; //другой сез.зак !!!
					стрТабл2.СписЗак = новый СписокЗначений;
				Иначе //не может быть разных строк с одинаковым сез.заказом! только 1-я найденная
					стрТабл2 = стрТаблСтроки[0];
				//	стрТабл2.СезЗак = СезЗакТек; //уже есть такой сез.зак!
				КонецЕсли;
				стрТабл2.СписЗак.добавить(зак1); // добавляем в другую строку
				
				эл1 = стр2.СписЗак.НайтиПоЗначению(зак1);
				стр2.СписЗак.Удалить(эл1); //удаляем из тек.строки

                Nn=Nn-1;
				продолжить;
			//Иначе// сезЗак тот же - оставляем в списке стр2.СписЗак
			КонецЕсли;	
			
		ii=ii+1;
		КонецЦикла;	
	
	КонецЦикла;
КонецПроцедуры

//28.03.2018
//2+1
Процедура РазделитьТаблицуПоСпособамОтгрузки( таблСписЗак )
	таблСписЗак.Колонки.Добавить("СпособОтгрузки");
	
	i=0; N=таблСписЗак.Количество();
	Для i=0 по N-1 цикл // цикл по строкам
		стр1 = таблСписЗак[i];
		Если стр1.СписЗак.Количество()<=1 тогда  //1 или 0 заказов не надо разделять!
			стр1.СпособОтгрузки  = 0;
			продолжить;
		КонецЕсли;
		
		Nn = стр1.СписЗак.Количество(); ii=0;
		номСпособа0 = -1;
		пока ii<Nn цикл  // цикл по заказам
			зак1 = стр1.СписЗак[ii].Значение;
			номСпособа1 = ?(зак1.Самовывоз,1,0) + ?(зак1.ОтгрузкаСПодразделенияСклада, 2,0);
			
			Если номСпособа0 = -1 тогда
				номСпособа0 = номСпособа1;
				стр1.СпособОтгрузки = номСпособа1; // способ по 1-му заказу
				
			ИначеЕсли номСпособа0 <> номСпособа1 тогда
				
				стрТаблСтроки = таблСписЗак.НайтиСтроки( Новый Структура("ВидАдресаДоставки, СезЗак, СпособОтгрузки", стр1.ВидАдресаДоставки, стр1.СезЗак, номСпособа1) );
				Если стрТаблСтроки.Количество()=0 тогда //добавляем 
				
					стрТабл2= таблСписЗак.Добавить(); // добавляем НОВУЮ строку!
					ЗаполнитьЗначенияСвойств(стрТабл2, стр1);
					
					стрТабл2.СпособОтгрузки = номСпособа1;
				 	стрТабл2.СписЗак = новый СписокЗначений;
						
				Иначе //не может быть разных строк!
					стрТабл2 = стрТаблСтроки[0];
				КонецЕсли;
					стрТабл2.СписЗак.добавить(зак1); // добавляем в другую строку
					
					эл1 = стр1.СписЗак.НайтиПоЗначению(зак1);
					стр1.СписЗак.Удалить(эл1); //удаляем из тек.строки
				 Nn=Nn-1;
				 Продолжить;
			 КонецЕсли;
			 
		 ii=ii+1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

//24.07.2018
Процедура РазделитьТаблицуПоБонусПрименен( таблСписЗак, флВидТовара=ложь, ФлПонедельник=ложь )
	
	таблСписЗак.Колонки.Добавить("БонусПрименен");
	i=0; N=таблСписЗак.Количество();
	Для i=0 по N-1 цикл // цикл по строкам
		стр1 = таблСписЗак[i];
		Если стр1.СписЗак.Количество()<=1 тогда  //1 или 0 заказов не надо разделять!
			стр1.БонусПрименен = ложь;   //любое значение
			продолжить;
		КонецЕсли;
		
		Nn = стр1.СписЗак.Количество(); ii=0;
		БонусПрименен0 = НЕОПРЕДЕЛЕНО;
		пока ii<Nn цикл  // цикл по заказам
			зак1 = стр1.СписЗак[ii].Значение;
			БонусПрименен1 = зак1.БонусПрименен;
			
			Если БонусПрименен0 = НЕОПРЕДЕЛЕНО тогда
				БонусПрименен0 = БонусПрименен1;
				стр1.БонусПрименен = БонусПрименен1; // способ по 1-му заказу
				
			ИначеЕсли БонусПрименен0 <> БонусПрименен1 тогда
				
				//4+1 колонки:  ВидАдресаДоставки, СезЗак, СпособОтгрузки, СрокОплаты; списЗак ========================
				Если не флВидТовара и не ФлПонедельник тогда
				стрТаблСтроки = таблСписЗак.НайтиСтроки( Новый Структура("ВидАдресаДоставки, СезЗак, СпособОтгрузки, СрокОплаты, БонусПрименен", 
											стр1.ВидАдресаДоставки, стр1.СезЗак, стр1.СпособОтгрузки, стр1.СрокОплаты, БонусПрименен1) );
															
				//6+1 колонки:  ВидАдресаДоставки, СезЗак, СпособОтгрузки, СрокОплаты, ВидТовара, Понедельник; списЗак ========================
                ИначеЕсли флВидТовара и ФлПонедельник тогда
				стрТаблСтроки = таблСписЗак.НайтиСтроки( Новый Структура("ВидАдресаДоставки, СезЗак, СпособОтгрузки, СрокОплаты, ВидТовара, Понедельник, БонусПрименен", 
								стр1.ВидАдресаДоставки, стр1.СезЗак, стр1.СпособОтгрузки, стр1.СрокОплаты, стр1.ВидТовара, стр1.Понедельник, БонусПрименен1) );
								
				//5а+1 колонки:  ВидАдресаДоставки, СезЗак, СпособОтгрузки, СрокОплаты, ВидТовара; списЗак ========================
                ИначеЕсли флВидТовара и НЕ ФлПонедельник тогда
				стрТаблСтроки = таблСписЗак.НайтиСтроки( Новый Структура("ВидАдресаДоставки, СезЗак, СпособОтгрузки, СрокОплаты, ВидТовара, БонусПрименен", 
								стр1.ВидАдресаДоставки, стр1.СезЗак, стр1.СпособОтгрузки, стр1.СрокОплаты, стр1.ВидТовара, БонусПрименен1) );
														
                //5б+1 колонки:  ВидАдресаДоставки, СезЗак, СпособОтгрузки, СрокОплаты, Понедельник; списЗак ========================
                ИначеЕсли НЕ флВидТовара и ФлПонедельник тогда
				стрТаблСтроки = таблСписЗак.НайтиСтроки( Новый Структура("ВидАдресаДоставки, СезЗак, СпособОтгрузки, СрокОплаты, Понедельник, БонусПрименен", 
								стр1.ВидАдресаДоставки, стр1.СезЗак, стр1.СпособОтгрузки, стр1.СрокОплаты, стр1.Понедельник, БонусПрименен1) );
				КонецЕсли;
								
				Если стрТаблСтроки.Количество()=0 тогда //добавляем 
				
					стрТабл2= таблСписЗак.Добавить(); // добавляем НОВУЮ строку!
					ЗаполнитьЗначенияСвойств(стрТабл2, стр1);
					
					стрТабл2.БонусПрименен = БонусПрименен1;
				 	стрТабл2.СписЗак = новый СписокЗначений;
						
				Иначе //не может быть разных строк!
					стрТабл2 = стрТаблСтроки[0];
				КонецЕсли;
					стрТабл2.СписЗак.добавить(зак1); // добавляем в другую строку
					
					эл1 = стр1.СписЗак.НайтиПоЗначению(зак1);
					стр1.СписЗак.Удалить(эл1); //удаляем из тек.строки
				 Nn=Nn-1;
				 Продолжить;
			 КонецЕсли;
			 
		 ii=ii+1;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

//28.03.2018
//3+1
Процедура РазделитьТаблицуПоСрокамОплаты( таблСписЗак )

	таблСписЗак.Колонки.Добавить("СрокОплаты");
	
	i=0; N=таблСписЗак.Количество();
	Для i=0 по N-1 цикл // цикл по строкам
		стр1 = таблСписЗак[i];
		Если стр1.СписЗак.Количество()<=1 тогда  //1 или 0 заказов не надо разделять!
			стр1.СрокОплаты = 0;
			продолжить;
		КонецЕсли;
		
		Nn = стр1.СписЗак.Количество(); ii=0;
		СрокОплаты0 = -1;
		пока ii<Nn цикл  // цикл по заказам
			зак1 = стр1.СписЗак[ii].Значение;
			СрокОплаты1 = ?(зак1.ЧислоДнейСМоментаОтгрузки>0, зак1.ЧислоДнейСМоментаОтгрузки, Цел((зак1.ДатаОплаты - зак1.ДатаОтгрузки)/86400) );
			
			Если СрокОплаты0 = -1 тогда
				СрокОплаты0 = СрокОплаты1;
				стр1.СрокОплаты = СрокОплаты1; // способ по 1-му заказу
				
			ИначеЕсли СрокОплаты0 <> СрокОплаты1 тогда
				
				стрТаблСтроки = таблСписЗак.НайтиСтроки( Новый Структура("ВидАдресаДоставки, СезЗак, СпособОтгрузки, СрокОплаты", 
															стр1.ВидАдресаДоставки, стр1.СезЗак, стр1.СпособОтгрузки, СрокОплаты1) );
				Если стрТаблСтроки.Количество()=0 тогда //добавляем 
				
					стрТабл2= таблСписЗак.Добавить(); // добавляем НОВУЮ строку!
					ЗаполнитьЗначенияСвойств(стрТабл2, стр1);
					
					стрТабл2.СрокОплаты = СрокОплаты1;
				 	стрТабл2.СписЗак = новый СписокЗначений;
						
				Иначе //не может быть разных строк!
					стрТабл2 = стрТаблСтроки[0];
				КонецЕсли;
					стрТабл2.СписЗак.добавить(зак1); // добавляем в другую строку
					
					эл1 = стр1.СписЗак.НайтиПоЗначению(зак1);
					стр1.СписЗак.Удалить(эл1); //удаляем из тек.строки
				 Nn=Nn-1;
				 Продолжить;
			 КонецЕсли;
			 
		 ii=ii+1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

	
//20.02.2018 --- п.11 вспомогательная функция для АвтоОбъединения ----
//4 + 1
Процедура РазделитьТаблицуПоВидамТоваров( таблСписЗак )
	таблСписЗак.Колонки.Добавить("ВидТовара");
	i=0; N=таблСписЗак.Количество();
	Для i=0 по N-1 цикл
		стр1 = таблСписЗак[i];
		Если стр1.СписЗак.Количество()<=1 тогда  //1 или 0 заказов не надо разделять!
			стр1.ВидТовара = "";
			продолжить;
		КонецЕсли;
		
		видТовара0 = перечисления.ВидыТоваров.ПустаяСсылка();
		
		Nn = стр1.СписЗак.Количество(); ii=0;
		пока ii<Nn цикл
			
			зак1 = стр1.СписЗак[ii].Значение;
			
			всеТоварыВЗаказеОдногоТипа = Истина;
			видТовара1 = неопределено;
			для каждого стрТов из зак1.Товары цикл
				Если видТовара1 = неопределено тогда
					видТовара1 = стрТов.Номенклатура.ВидТовара;
				иначеЕсли видТовара1 <> стрТов.Номенклатура.ВидТовара тогда
					всеТоварыВЗаказеОдногоТипа = ЛОЖЬ;
					#Если Клиент тогда 
						сообщить("разделение по видам товара невозможно для заказа № "+строка(зак1.Номер)+" клиента "+строка(зак1.Контрагент), СтатусСообщения.Внимание);
					#КонецЕсли	
					прервать // НЕЛЬЗЯ объединять заказ с разными типами?!
				КонецЕсли;
			КонецЦикла;
			
			Если всеТоварыВЗаказеОдногоТипа тогда
				Если видТовара0 = перечисления.ВидыТоваров.ПустаяСсылка() тогда
					видТовара0 = видТовара1;
					стр1.видТовара = видТовара0;
					
				ИначеЕсли видТовара0 <> видТовара1 тогда
					//ищем такую строку....  4+1 параметра
					стрТаблСтроки = таблСписЗак.НайтиСтроки( Новый Структура("ВидАдресаДоставки, СезЗак, СпособОтгрузки, СрокОплаты, ВидТовара", 
															стр1.ВидАдресаДоставки, стр1.СезЗак, стр1.СпособОтгрузки, стр1.СрокОплаты, видТовара1) );
					Если стрТаблСтроки.Количество()=0 тогда //добавляем 
						
						стрТабл2 = таблСписЗак.Добавить();
						ЗаполнитьЗначенияСвойств(стрТабл2, стр1);
						
						стрТабл2.ВидТовара = видТовара1; //другой вид товара !!!
						стрТабл2.СписЗак = новый СписокЗначений;
						
					Иначе //не может быть разных строк!
						стрТабл2 = стрТаблСтроки[0];
					КонецЕсли;
					стрТабл2.СписЗак.добавить(зак1); // добавляем в другую строку
					
					эл1 = стр1.СписЗак.НайтиПоЗначению(зак1);
					стр1.СписЗак.Удалить(эл1); //удаляем из тек.строки
					
                    Nn=Nn-1;
					продолжить
				КонецЕсли;	
			Иначе //----------Нельзя объединять заказ с разными товарами внутри....--------------
				#Если Клиент тогда
					Сообщить(строка(зак1)+" - содержит разные виды товаров! Удалён из объединения!");
				#КонецЕсли	
				эл1 = стр1.СписЗак.НайтиПоЗначению(зак1);
				стр1.СписЗак.Удалить(эл1); //удаляем из тек.строки
				Nn=Nn-1;
				продолжить
			КонецЕсли;	
		ii=ii+1;	
		КонецЦикла;	
		
	КонецЦикла;
КонецПроцедуры

//07.04.2018
Процедура РазделитьТаблицуПоСвойствуДняОтгрузки( таблСписЗак )
  	таблСписЗак.Колонки.Добавить("Понедельник"); // сдвиг дня отгрузки на понедельник
	i=0; N=таблСписЗак.Количество();
	Для i=0 по N-1 цикл
		стр1 = таблСписЗак[i];
		если стр1.СписЗак.Количество()<=1 тогда  //1 или 0 заказов не надо разделять!
			стр1.Понедельник = ЛОЖЬ;
			продолжить;
		КонецЕсли;	
		масЗак = стр1.СписЗак.ВыгрузитьЗначения();
		Выборка1 = ПолучитьЗаказыПоСвойству( масЗак );
		
		выборка1.Следующий(); //итоги
		
		Если выборка1.ЗначениеПонедельник=1 тогда
			выборка2 = выборка1.выбрать(); // уже по заказам
			выборка2.следующий();
            стр1.Понедельник = выборка2.ЗначениеПонедельник; //  да / нет  - сразу для всех заказов!
			
		ИначеЕсли выборка1.ЗначениеПонедельник=2 тогда //количество различных вариантов
				
			стр1.СписЗак = новый СписокЗначений; // суббота, 
			стр1.Понедельник = ЛОЖЬ;
			
		    стр2 = таблСписЗак.Добавить(); // Понедельник
			ЗаполнитьЗначенияСвойств(стр2, стр1);   //+++ 11.05.2018 - копируем все св-ва
			стр2.СписЗак = новый СписокЗначений;  
			стр2.Понедельник = Истина;
			
			выборка2 = выборка1.выбрать(); // уже по заказам
			пока выборка2.следующий() цикл
				
				Если выборка2.ЗначениеПонедельник = Истина тогда
					стр2.СписЗак.добавить( выборка2.зак );
				иначе	
					стр1.СписЗак.добавить( выборка2.зак );
				КонецЕсли;	
			КонецЦикла;
		//Иначе //  3 и более??? 	в булевой логике невозможно!
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры	

функция ПолучитьЗаказыПоСвойству( СписЗак1 )

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	Табл.Ссылка КАК Зак
               |ПОМЕСТИТЬ ВТ_табл
               |ИЗ
               |	Документ.ЗаказПокупателя КАК Табл
               |ГДЕ
               |	Табл.Ссылка В (&СписЗак1)
			   |	и Табл.Дата>&НачДата
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ различные
               |	табл.Зак КАК Зак,
			  | 	выбор когда ЕстьNUll(Свва.Значение1, ЛОЖЬ)=Истина 
			  |			или ЕстьNUll(Свва.Значение2, Истина)= ЛОЖЬ тогда Истина иначе ЛОЖЬ Конец как ЗначениеПонедельник
			  	   
               |ИЗ
               |	ВТ_табл КАК табл
               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
               |			Выразить(ЗначенияСвойствОбъектов.Объект как Документ.ЗаказПокупателя).Ссылка КАК Зак,
			   
			   |	выбор когда ЗначенияСвойствОбъектов.Свойство = &свво1 
		   	   |		тогда ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЛОЖЬ) 
		   	   |		иначе ЛОЖЬ Конец как Значение1,
			   
			   |	выбор когда ЗначенияСвойствОбъектов.Свойство = &свво2 
		   	   |		тогда ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЛОЖЬ) 
		   	   |		иначе ЛОЖЬ Конец как Значение2
			   |		ИЗ
               |			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
               |		ГДЕ
               |			(ЗначенияСвойствОбъектов.Свойство = &свво1 или ЗначенияСвойствОбъектов.Свойство = &свво2)
               |			И Выразить(ЗначенияСвойствОбъектов.Объект как Документ.ЗаказПокупателя).Ссылка В (&СписЗак1) ) КАК Свва
               |		ПО табл.Зак = Свва.зак
               |ИТОГИ
               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначениеПонедельник)
              // |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначениеСуббота)
               |ПО
               |	ОБЩИЕ";
свво1 = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90222");  //Понедельник
свво2 = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90223");  //Суббота
Запрос.УстановитьПараметр("свво1", свво1 );
Запрос.УстановитьПараметр("свво2", свво2 );
Запрос.УстановитьПараметр("СписЗак1",СписЗак1);

минДата = НачалоДня(ТекущаяДата());
для i=0 по СписЗак1.Количество()-1 цикл
	если СписЗак1[i].Дата<МинДата тогда
		минДата = СписЗак1[i].Дата;
	КонецЕсли;
КонецЦикла;	
Запрос.УстановитьПараметр("НачДата", минДата - 1 );

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
возврат Выборка;
КонецФункции


Процедура АвтоПостановкаЗаказовВМаршрут() Экспорт
	списКонтр = ПолучитьКлиентовДляОбъединенияЗаказов(ЛОЖЬ);	
	Если списКонтр.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;	
	
    //Пока только по Ярославлю!
	глТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Робот (магазин)"); //21.05.2018
	ПараметрыСеанса.ТекущийПользователь = глТекущийПользователь;
	
    выборкаЗак = ПолучитьЗаказыДляПостановкиВМаршрут(списКонтр);
	Пока выборкаЗак.Следующий() Цикл //послеовательно по клиенту
		
		ОбЗак = выборкаЗак.ЗаказПокупателя.ПолучитьОбъект();
		
		//+++( 22.03.2018 авто-сдвиг дат документа на тек.дату и проверка тоже на тек.дату!
		 ОбЗак.Дата = ТекущаяДата();//ОЧЕНЬ НУЖНО - ИМЕННО ТАК !!!
		ЧислоДнейСМоментаОтгрузки1 = Цел( (ОбЗак.ДатаОплаты - ОбЗак.ДатаОтгрузки)/86400 ); //28.03.2018 число ДНЕЙ
		
		Если ОбЗак.ЧислоДнейСМоментаОтгрузки>0 Тогда   //автопересчет даты оплаты
			ОбЗак.ДатаОплаты = ОбЗак.ДатаОтгрузки + ОбЗак.ЧислоДнейСМоментаОтгрузки * 86400;
		// для "короткой" отсрочки - сдвигаем дату оплаты от даты отгрузки
	 	иначеЕсли ЧислоДнейСМоментаОтгрузки1>0 и ЧислоДнейСМоментаОтгрузки1<=30 тогда
			ОбЗак.ДатаОплаты = ОбЗак.ДатаОтгрузки + ЧислоДнейСМоментаОтгрузки1 * 86400;
		КонецЕсли;	
        //+++)
		
		Если ПроверитьЗаказПередУстановкойВМаршрут(ОбЗак) Тогда
			текст1 = "--- Нельзя устанавливать В Маршрут Заказ "+обЗак.Номер+" ("+строка(обЗак.Контрагент)+") ---";
			#Если Клиент тогда
				Сообщить(текст1, СтатусСообщения.Внимание );
			#КонецЕсли	
			продолжить;
		Иначе
			ОбЗак.Записать(); //Адрес, Адрес ТТН, ВидАдреса
		КонецЕсли;	

		ВыполнитьПостановкуЗаказовВМаршрут(ОбЗак.Ссылка);  //измененный заказ!
		
	КонецЦикла;	//по заказам
	
КонецПроцедуры	


//2). ----- 3 вспомогательные функции выборка-------------------------

//единая Функция для получения клиентов для объединения и для постановки в маршрут
Функция ПолучитьКлиентовДляОбъединенияЗаказов(ДляОбъединения=Истина) экспорт
	спис = новый СписокЗначений;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	Контрагенты.Ссылка
	 |ИЗ
	 |	Справочник.Контрагенты КАК Контрагенты
	 |ГДЕ
	 
	 //доп.условия - покупаль не помеченный на удаление
	 |	Контрагенты.ЭтоГруппа = ЛОЖЬ
	 |	И Контрагенты.ПометкаУдаления = ЛОЖЬ
	 |	И Контрагенты.Покупатель = ИСТИНА
	 
	 //ограничения - запреты
	 |	И Контрагенты.ЗапретОтгрузки = ЛОЖЬ
	 
	 |"+?(ДляОбъединения,"И Контрагенты.АвтоматическиОбъединятьЗаказы = ИСТИНА", "
	 //ограничения для постановки в маршрут
	 |И Контрагенты.АвтоматическиСтавитьВМаршрут = ИСТИНА
	 |И Контрагенты.Родитель <> Значение(справочник.Контрагенты.ПотенциальныеПокупатели)");
	 
	 Результат = Запрос.Выполнить();
	 Если не Результат.Пустой()	Тогда
		 табл = результат.Выгрузить();
		 спис.ЗагрузитьЗначения( табл.ВыгрузитьКолонку("Ссылка") );
	 КонецЕсли;	 
	
	Возврат спис;
КонецФункции	

//выборка для объединения по Договорам клиентов... 
Функция ПолучитьЗаказыДляОбъединения(списКонтр, Подразделение=Неопределено, ДатаОтгрузки, ДатаОтгрузки7 )
	 Запрос = Новый Запрос;      
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЗаказыПокупателейОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	                |	ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	                |	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
			       |	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата КАК ДатаЗаказа,
					|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ВидАдреса как ВидАдресаДоставки,
					//28.03.2018 - динамический расчет срока оплаты.... как разности даты оплаты - даты отгрузки изначальной
					|	выбор когда ЗаказыПокупателейОстатки.ЗаказПокупателя.ЧислоДнейСМоментаОтгрузки=0 
					|		тогда Разностьдат(ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки,ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОплаты,ДЕНЬ) 
					|		Иначе ЗаказыПокупателейОстатки.ЗаказПокупателя.ЧислоДнейСМоментаОтгрузки
					|Конец как СрокОплаты,
					//+++ 22.01.2018
					//|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СпособОтгрузки как СпособОтгрузки,
					//+++ 28.03.2018 - проверка на различные сочетания... 
					// 0 - нормальный, 1 - самовывоз с Ярославля
					// 2 - отгрузка с Филиала, 3 - самовывоз с Филиала
					|	выбор когда ЗаказыПокупателейОстатки.ЗаказПокупателя.Самовывоз тогда 1 иначе 0 Конец
					|	+ выбор когда ЗаказыПокупателейОстатки.ЗаказПокупателя.ОтгрузкаСПодразделенияСклада тогда 2 иначе 0 Конец
					|	 как СпособОтгрузки,
					|	ЗаказыПокупателейОстатки.ЗаказПокупателя.НомерТорговойТочкиКонтрагента как НомерТочки
					
				//+++ 24.07.2018
					|	, ЗаказыПокупателейОстатки.ЗаказПокупателя.БонусПрименен как БонусПрименен 
					
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки(	, 	ДоговорКонтрагента.Владелец В (&СписКонтр)
					
					//------------------исключения---------------------------------------
					//1.Дата отгрузки 
	 				|			И ЗаказПокупателя.ДатаОтгрузки >= &ДатаОтгрузки7
					|			И ЗаказПокупателя.ДатаОтгрузки <= &ДатаОтгрузки
					
					//+++ 16.05.2018 - только если не у стороннего поставщика!
					|			И ( ЗаказПокупателя.Статус = Значение(перечисление.СтатусыЗаказов.ПустаяСсылка)
					|				или ЗаказПокупателя.Статус = Значение(перечисление.СтатусыЗаказов.Получен) )
					
					//+++ 22.01.2018 --------------------------------------------------------
					//4.Способ отгрузки - должен быть Единый! или все заказы - самовывоз или все - нормальные! 
					//|				И ЗаказПокупателя.Самовывоз = ЛОЖЬ
					//|				И ЗаказПокупателя.СпособОтгрузки <> &Самовывоз
					
					//6. Подразделение 
	                |			И ЗаказПокупателя.Подразделение = &Подразделение
					//7. Признак в заказе "К отгрузке" 
	                |				И ЗаказПокупателя.Проверен = ИСТИНА
					//8. Исключить из объединения тип заказов 10 - из интернет-магазина НЕЛЬЗЯ! проверка на различные идёт ниже!
					//нельзя с типом 13 - на Ошиповке
					//|				И ЗаказПокупателя.ТипЗаказа <> 10
					|				И ЗаказПокупателя.ТипЗаказа <> 13
					
					//9. Исключить поставленные в маршрут за последние 7 дней
					|				И ЗаказПокупателя.ВМаршрут = ЛОЖЬ
					
					//10. исключение заказов для перемещения на филиал
					//+++ 28.03.2018 - ЕСТЬ объединение по отгрузкам с филиала!
					//|		И ЗаказПокупателя.ОтгрузкаСПодразделенияСклада = ЛОЖЬ
					|		И ЗаказПокупателя.ВводитьТолькоПеремещение = ЛОЖЬ
					
					//+++ 02.02.2018 01:15
					//11.  (п.6) - по [v] ИсключитьИзАвтоОбъединения   
					|		И ЗаказПокупателя.ИсключитьИзАвтоОбъединения = ЛОЖЬ
					
					//+++ 27.03.2018
					|		И ЗаказПокупателя.СезоннаяПрограмма = ЛОЖЬ

					//+++ 19.02.2018 п.9 исключить из автообъединения заказы с Транспортной компанией
					|		И ЗаказПокупателя.ТранспортнаяКомпания = Значение(Справочник.Контрагенты.ПустаяСсылка)
					
					|) КАК ЗаказыПокупателейОстатки
	                |
	                |УПОРЯДОЧИТЬ ПО
					|	Контрагент,
					|	ДоговорКонтрагента,
	                |	ВидАдресаДоставки,
					|	СрокОплаты,
					|	ДатаЗаказа
					
	                |ИТОГИ
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя),
					
					//5.контроль расхождей по "Адресу доставки" 
				    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидАдресаДоставки),
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НомерТочки),
					
					//2. Количество дней отсрочки
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СрокОплаты),
					//4. разные способы отгрузки  --- 22.01.2018
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпособОтгрузки)
					//3.Объединение по каждому Договору - по отдельности
					
					//24.07.2018
				   	|	,КОЛИЧЕСТВО(РАЗЛИЧНЫЕ БонусПрименен)
					
					 |ПО
	                |	ДоговорКонтрагента
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 Запрос.УстановитьПараметр("списКонтр",списКонтр);
	 //Самовывоз = справочники.СпособыОтгрузкиТовара.НайтиПоКоду(10);
	 //Запрос.УстановитьПараметр("Самовывоз",Самовывоз);
	 
	 Запрос.УстановитьПараметр("ДатаОтгрузки",  ДатаОтгрузки );
	 Запрос.УстановитьПараметр("ДатаОтгрузки7", ДатаОтгрузки7 );//маршрут не более 7-14 дней    	 

	 Подразделение = ?(Подразделение=Неопределено, справочники.Подразделения.НайтиПоКоду("00005"), Подразделение);
  	 Запрос.УстановитьПараметр("Подразделение",Подразделение);
  	 Результат = Запрос.Выполнить();
     Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // по Договорам!
	 
	Возврат Выборка;
КонецФункции	

//выборка по заказам которые надо ставить в маршруты... 
Функция ПолучитьЗаказыДляПостановкиВМаршрут(списКонтр, Подразделение=Неопределено)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	                |	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
					|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СуммаДокумента  как СуммаДокумента,
			     	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата как ДатаДок
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	                |			,
	                |			ДоговорКонтрагента.Владелец В (&СписКонтр)
	                |				И ЗаказПокупателя.ДатаОтгрузки <= &ДатаОтгрузки
	                |				И ЗаказПокупателя.ДатаОтгрузки >= &ДатаНачОтгрузки
	                |				И ЗаказПокупателя.Подразделение = &Подразделение
	                |				И ЗаказПокупателя.Проверен = ИСТИНА
	                |				И ЗаказПокупателя.ВМаршрут = ЛОЖЬ
	                |				И ЗаказПокупателя.ПоставитьНаОтгрузку = ИСТИНА
					
					//+++ 22.03.2018 ОГРАНИЧЕНИЯ!  Нельзя ставить в маршрут заказы Самовывоза!
					|				И ЗаказПокупателя.Самовывоз = ЛОЖЬ
					
					//+++ 27.03.2018
					|		И ЗаказПокупателя.СезоннаяПрограмма = ЛОЖЬ
                    
					//неправильный клиент или заказ!
					|				И ЗаказПокупателя.Контрагент.ЗапретОтгрузки = ЛОЖЬ
					|				И ЗаказПокупателя.Контрагент.Родитель <> Значение( справочник.Контрагенты.ПотенциальныеПокупатели)
					
                	|				И ЗаказПокупателя.ТипЗаказа<>13
					
                 	|				И ( ЗаказПокупателя.ОтгрузкаСПодразделенияСклада = ЛОЖЬ
					//для заказов после перемещения с другого филиала... редкость крайняя!
					//|	или (ЗаказПокупателя.ОтгрузкаСПодразделенияСклада 
					//|		и ЗаказПокупателя.Склад.Подразделение = ЗаказПокупателя.Подразделение)
					
					|				  )    ) КАК ЗаказыПокупателейОстатки
	                |
	                |УПОРЯДОЧИТЬ ПО
					|
				//+++( 13.06.2018 ---- для Горелова... по задаче № 49093 
				   |	Контрагент,
				//	делаем сортировку задом наперед, сначала ставиться будут с максимальной суммой, не по ФИФО!
				   //   |	ДатаДок
				   |	СуммаДокумента УБЫВ
				//+++)   
				   |
				   |АВТОУПОРЯДОЧИВАНИЕ";
	 Запрос.УстановитьПараметр("списКонтр",списКонтр);
	 ДатаОтгрузки = НачалоДня(ТекущаяДата());
	 Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки ); // с датой отгрузки на 1 день!
	 Запрос.УстановитьПараметр("ДатаНачОтгрузки", ДатаОтгрузки - 14*86400 ); // 2 недели
				
	 Подразделение = ?(Подразделение=Неопределено, справочники.Подразделения.НайтиПоКоду("00005"), Подразделение);
  	 Запрос.УстановитьПараметр("Подразделение",Подразделение);
	 Результат = Запрос.Выполнить();
	 
     Выборка = Результат.Выбрать(); // по заказам
	Возврат Выборка;
КонецФункции	


//3). ----2 основные функции изменения заказов--------------------

//- аналог 246 
Процедура ВыполнитьОбъединениеЗаказовПокупателей(стрТабл1, сдвигДатыОтгрузки=0)
	
		СписокЗаказов = новый СписокЗначений;
		СписокЗаказов.ЗагрузитьЗначения( стрТабл1.списЗак.ВыгрузитьЗначения() ); //через значения!
			
	//---------------Заказанные и неотгруженные Товары по этим заказам--------------------------------------- 
	Запрос = Новый Запрос;
	запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	запрос.УстановитьПараметр("Дата", КонецДня(ТекущаяДата()) );  // в пределах дня!
	
	//+++ 28.08.2018 --- перенос статуса согласования цен! Задача № 53197 (Марешева, Сергков, Красюк, Лигута)
	 списПодр7 = новый СписокЗначений; //список подразделенией 7 дней держится "статус" согласования цен
	 списПодр7.Добавить( справочники.Подразделения.НайтиПоКоду("00005")); //Яр
	 списПодр7.Добавить( справочники.Подразделения.НайтиПоКоду("00112")); //СПб
	 списПодр7.Добавить( справочники.Подразделения.НайтиПоКоду("00133")); //Мск 
	 запрос.УстановитьПараметр("списПодр7", списПодр7 );
	 запрос.УстановитьПараметр("ТекДата", ТекущаяДата() );

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПокупателя.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателя.КоличествоОстаток КАК Количество,
	|	ЗаказыПокупателя.СуммаВзаиморасчетовОстаток КАК Сумма,
	|	ЗаказыПокупателя.ЗаказПокупателя
//+++( 28.08.2018 
    |	, ЗаказПокупателяТовары.Статус КАК Статус,
    |	ЗаказПокупателяТовары.Статус КАК СтатусКол,
    |	ЗаказПокупателяТовары.Цена КАК Цена,
    |	РАЗНОСТЬДАТ(ЗаказыПокупателя.ЗаказПокупателя.Дата, &ТекДата, ДЕНЬ) КАК ЧислоДнейЗаказа,
    |	ВЫБОР
    |		КОГДА ЗаказыПокупателя.ЗаказПокупателя.Подразделение В (&списПодр7)
    |			ТОГДА ИСТИНА
    |		ИНАЧЕ ЛОЖЬ
    |	КОНЕЦ КАК Подразделение7
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&Дата, ЗаказПокупателя В (&СписокЗаказов)
	|) КАК ЗаказыПокупателя
//+++( 28.08.2018 
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗакТовары.Статус КАК Статус,
	|			ЗакТовары.Номенклатура КАК Номенклатура,
	|			ЗакТовары.Ссылка КАК Заказ,
	|			ЗакТовары.Цена КАК Цена
	|		ИЗ
	|			Документ.ЗаказПокупателя.Товары КАК ЗакТовары
	|		ГДЕ
	|			ЗакТовары.Ссылка В(&СписокЗаказов)) КАК ЗаказПокупателяТовары
	|		ПО ЗаказыПокупателя.ЗаказПокупателя = ЗаказПокупателяТовары.Заказ
	|			И ЗаказыПокупателя.Номенклатура = ЗаказПокупателяТовары.Номенклатура

	|ГДЕ
	|	ЕСТЬNULL(ЗаказыПокупателя.КоличествоОстаток, 0) > 0
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказыПокупателя.Номенклатура.Производитель,
	|	Номенклатура
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма)
   	//+++( 28.08.2018 
 	|	,МАКСИМУМ(Статус),
    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусКол),
    |	МАКСИМУМ(Цена),
    |	МАКСИМУМ(ЧислоДнейЗаказа),
    |	МАКСИМУМ(Подразделение7)
	|ПО
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ"; 
	ОбщийЗаказТовары = запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	запрос=неопределено;
	
	//---------нужно Содержание Услуг из ТЧ-------------------
	ЗапросУсл = Новый Запрос;
	ЗапросУсл.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	ЗапросУсл.УстановитьПараметр("Дата", КонецДня(ТекущаяДата()) );  // в пределах дня!
	ЗапросУсл.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПокупателяУслуги.Номенклатура,
	|	ЗаказПокупателяУслуги.Содержание,
	|	ЗаказПокупателяУслуги.Количество,
	|	ЗаказПокупателяУслуги.Сумма
	|ИЗ
	|	Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателяУслуги
	|ГДЕ
	|	ЗаказПокупателяУслуги.Ссылка В (&СписокЗаказов)
	|АВТОУПОРЯДОЧИВАНИЕ"; 
	ОбщийЗаказУслуги = ЗапросУсл.Выполнить().Выбрать();
	ЗапросУсл = неопределено;
	
	//17.08.17 Смирнов, объединяем ТЧ Крышки --------------------
	//ТЧ Крышки
	ЗапросКрышки = новый Запрос;
	запросКРышки.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	ЗапросКрышки.Текст = "ВЫБРАТЬ
	 |	ЗаказПокупателяКрышки.Крышка,
	 |	СУММА(ЗаказПокупателяКрышки.Количество) КАК Количество
	 |ИЗ
	 |	Документ.ЗаказПокупателя.Крышки КАК ЗаказПокупателяКрышки
	 |ГДЕ
	 |	ЗаказПокупателяКрышки.Ссылка В(&СписокЗаказов)
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ЗаказПокупателяКрышки.Крышка";
	РезКрышки = ЗапросКрышки.Выполнить().Выбрать();

	
	Если ОбщийЗаказТовары.Количество()=0 тогда 
		#Если НаКлиенте тогда
		Сообщить("--- Нет заказанных товаров для объединения! ---", СтатусСообщения.Внимание);
		#КонецЕсли	
	возврат;
	КонецЕсли;	
	
	
	докОбщийЗаказ = документы.ЗаказПокупателя.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(докОбщийЗаказ, СписокЗаказов[0].Значение); // по 1-му заполняем основные реквизиты Общего документа
	ДатаОтгрузки1 = СписокЗаказов[0].Значение.ДатаОтгрузки;
	ДатаОплаты1   = СписокЗаказов[0].Значение.ДатаОплаты;   //20.03.2018 - по первому заказу
	ЧислоДнейСМоментаОтгрузки1 = СписокЗаказов[0].Значение.ЧислоДнейСМоментаОтгрузки;
	Подразделение = СписокЗаказов[0].Значение.Подразделение;
	
	//чистим поля
	ДокОбщийЗаказ.ДокументОснование ="";
	докОбщийЗаказ.ТипЗаказа = 6; // объединенный заказ имеет отдельный тип
	Преф = ?(Подразделение.Код="00005", "ТК", СокрЛП(Подразделение.ПрефиксИБ) );
	докОбщийЗаказ.НомерВходящегоДокумента="";
	докОбщийЗаказ.ДатаВходящегоДокумента ='00010101';
	докОбщийЗаказ.ССайта = ложь;
	
	докОбщийЗаказ.Поставщик  = справочники.Контрагенты.ПустаяСсылка();
	докОбщийЗаказ.Статус     = перечисления.СтатусыЗаказов.ПустаяСсылка();
	докОбщийЗаказ.Согласован = ложь;
	
	докОбщийЗаказ.Дата         = ТекущаяДата();            //сдвиг на 0 - 1 день!
	докОбщийЗаказ.ДатаОтгрузки = макс( НачалоДня(ТекущаяДата())+сдвигДатыОтгрузки*86400, НачалоДня(ДатаОтгрузки1) );
	докОбщийЗаказ.ДатаОплаты   = макс( НачалоДня(ТекущаяДата())+сдвигДатыОтгрузки*86400, НачалоДня(ДатаОтгрузки1) ) + ЧислоДнейСМоментаОтгрузки1*86400;
	докОбщийЗаказ.ЧислоДнейСМоментаОтгрузки   = ЧислоДнейСМоментаОтгрузки1;  //20.03.2018 - по 1-му заказу!
 	
	докОбщийЗаказ.УстановитьНовыйНомер(Преф); // всегда ТК!
	
	докОбщийЗаказ.Проверен = истина;
	докОбщийЗаказ.АвтоРезервирование = истина;
	
	//+++ 18.10.2017 - для филиалов - заполняем свойство
	Если Подразделение.ОбособленноеПодразделение тогда
		свНаправлениеОтгрузки1 = ПолучитьНаправлениеОтгрузки(СписокЗаказов[0].Значение);
	КонецЕсли;
	
	СписокЗак = новый СписокЗначений;
	
	//Товары
	докОбщийЗаказ.Товары.Очистить();
	если докОбщийЗаказ.ВалютаДокумента.Код="643" //+++ 28.08.2018
		тогда руб = "р."; 
		иначе руб = докОбщийЗаказ.ВалютаДокумента.Наименование;
	КонецЕсли;
	пока ОбщийЗаказТовары.Следующий() цикл
		Если ОбщийЗаказТовары.Номенклатура.Услуга = ЛОЖЬ Тогда
			стр1 = докОбщийЗаказ.Товары.Добавить();
			
			стр1.Номенклатура = ОбщийЗаказТовары.Номенклатура;
			стр1.Количество   = ОбщийЗаказТовары.Количество;
			стр1.Сумма   	  = ОбщийЗаказТовары.Сумма;
			
		//+++( 28.08.2018 --- статус сохраняется если только одинаковый статус 1 товара в разных заказах! и не более 7 дней для Яр,Спб,Мск, иначе не более 14 дней----
			Если ОбщийЗаказТовары.СтатусКол=1 
				и ( (ОбщийЗаказТовары.Подразделение7 и ОбщийЗаказТовары.ЧислоДнейЗаказа<=7)
				или (не ОбщийЗаказТовары.Подразделение7 и ОбщийЗаказТовары.ЧислоДнейЗаказа<=14)
				  ) тогда 
				стр1.Статус = ОбщийЗаказТовары.Статус;
				стр1.Цена   = ОбщийЗаказТовары.Цена;
				#Если Клиент тогда
				сообщить(строка(стр1.НомерСтроки)+") Статус: "+	строка(стр1.Статус)+" для Цены: "+строка(стр1.Цена)+руб
									+" по товару: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура), СтатусСообщения.Информация);
				#КонецЕсли					
			иначе //как всегда было	
				стр1.Цена = ?(стр1.Количество=0, 0, Окр(стр1.Сумма / стр1.Количество, 2) );
				#Если Клиент тогда
				сообщить(строка(стр1.НомерСтроки)+") "+?(ОбщийЗаказТовары.СтатусКол>1,"разные статусы","")
				+" по товару: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура)
				+" Цена средняя: "+строка(стр1.Цена)+руб+?(стр1.Цена = ОбщийЗаказТовары.Цена, " НЕ","")+" отличается от Макс.Цены: "+строка(ОбщийЗаказТовары.Цена)+руб, СтатусСообщения.Внимание);
				#КонецЕсли					
			КонецЕсли;	
		//+++)
			
			стр1.СтавкаНДС = СтавкаНДСнаДату(ТекущаяДата());
			СтавкаНДС = ПолучитьСтавкуНДС(СтавкаНДСнаДату(ТекущаяДата()));
			стр1.СуммаНДС = Окр( стр1.Сумма * СтавкаНДС/(100+СтавкаНДС), 2);
			
			стр1.ЕдиницаИзмерения = стр1.Номенклатура.ЕдиницаХраненияОстатков;
			стр1.Коэффициент = 1;
			стр1.КоличествоМест = стр1.Количество;
		КонецЕсли;
		
		выбЗак = ОбщийЗаказТовары.Выбрать();
		пока выбЗак.Следующий() цикл
			Если СписокЗак.Количество()>0 тогда
				Если СписокЗак.НайтиПоЗначению(выбЗак.ЗаказПокупателя)=неопределено тогда
					СписокЗак.Добавить(выбЗак.ЗаказПокупателя);
				КонецЕсли;
			иначе
				СписокЗак.Добавить(выбЗак.ЗаказПокупателя);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЦикла;

	//Услуги из ТЧ.
	Пока ОбщийЗаказУслуги.Следующий() Цикл
		стр1 = докОбщийЗаказ.Услуги.Добавить();
		
		ЗаполнитьЗначенияСвойств( стр1, ОбщийЗаказУслуги);
		 
		стр1.Цена = ?(стр1.Количество=0, 0, Окр(стр1.Сумма / стр1.Количество, 2) );
		
		стр1.СтавкаНДС =  СтавкаНДСнаДату(ТекущаяДата());
		СтавкаНДС = ПолучитьСтавкуНДС(СтавкаНДСнаДату(ТекущаяДата()));
		стр1.СуммаНДС = Окр( стр1.Сумма * СтавкаНДС/(100 + СтавкаНДС), 2);
	КонецЦикла;

	//Крышки
	Пока РезКрышки.Следующий() Цикл
		стрК = докОбщийЗаказ.Крышки.Добавить();
        ЗаполнитьЗначенияСвойств(стрК,РезКрышки);
	КонецЦикла;
						

	//3.отменяем проведение и ставим X на старых заказах и проводим новый общий заказ в Одной Транзакции!
	коммент = "";
	
	Попытка		
	НачатьТранзакцию();  //14.05.2018 ==================================
		
		СуммаПоДокументам = 0;
		СписокПредыдущихЗаказов = Новый СписокЗначений;//Плотников
		для i=0 по СписокЗак.Количество()-1 цикл
			докОб = СписокЗак[i].Значение.ПолучитьОбъект();
			докОб.ПометкаУдаления = истина;
			докОб.Комментарий = "# данные перенесены >> "+строка(докОбщийЗаказ.Номер)+" # "+докОб.Комментарий;  // сокращаем комментарий!
			
			докОб.мПроведениеИзФормы = ЛОЖЬ;
			докОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
			ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(докОб.ссылка);//+++ 19.01.2015 - 02.11.2016 регистрация для обмена с МИМ
			
			СуммаПоДокументам = СуммаПоДокументам + докОб.суммаДокумента;
			СписокПредыдущихЗаказов.Добавить(докОб.Ссылка);//Плотников
			ДобавитьЗаказВТЧОбщегоЗаказа(СписокЗак[i].Значение, докОбщийЗаказ);	//+++ рекурентная функция
			
			//+++( 13.10.2017 --- по задаче № 34504 -------- все комментарии и адреса--------
			Если докОбщийЗаказ.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = справочники.НаправленияПродаж.НайтиПоКоду(16) тогда
				коммент = коммент + докОб.Номер+"; ";
			Иначе
				коммент = коммент + СокрЛП(докОб.Номер)+"; "; //+ докОб.Комментарий;  28.08.2018 комментарии берем ТОЛЬКО из первичных заказов!
				Если докОбщийЗаказ.ВидАдреса.Пустая() тогда
					 докОбщийЗаказ.ВидАдреса = докОб.ВидАдреса;
					Если докОбщийЗаказ.КоординатыДоставки="" тогда //по адресу
					 докОбщийЗаказ.КоординатыДоставки = докОб.КоординатыДоставки;
					КонецЕсли;
				КонецЕсли;
				
				Если докОбщийЗаказ.НомерТорговойТочкиКонтрагента = 0 тогда
					докОбщийЗаказ.НомерТорговойТочкиКонтрагента = докОб.НомерТорговойТочкиКонтрагента;
				КонецЕсли;
			КонецЕсли;
			//+++)
		КонецЦикла;	
		
		сумТов = докОбщийЗаказ.Товары.Итог("Сумма") + докОбщийЗаказ.Услуги.Итог("Сумма") ;
		Если сумТов <> СуммаПоДокументам тогда
		//!!! 22.01.2018 НЕЛЬЗЯ Так!   ОтменитьТранзакцию();
			#Если Клиент тогда
				Сообщить("Сумма по товарам и услугам "+строка(СписокЗак.Количество())+" документов отличается от суммы общего заказа: "+строка(СуммаПоДокументам)+" - "+строка( сумТов )+" = "+строка(СуммаПоДокументам -  сумТов)+"р.", СтатусСообщения.Внимание);
				Сообщить(" ОБЪЕДИНЕНИЕ по клиенту "+строка(докОбщийЗаказ.Контрагент)+" ОТМЕНЕНО !!!", СтатусСообщения.ОченьВажное );   //+++ 05.06.2014
			#КонецЕсли	
		КонецЕсли;
		
		КомментВодителю = ""; //+++ 15.01.2019 --- Задача № 61873
		////Плотников - запоминаем все мартёшки ?!
		Для Каждого стр из СписокПредыдущихЗаказов Цикл 
			Нов = докОбщийЗаказ.СписокПредыдущихЗаказов.Добавить();
			Нов.Заказ = стр.Значение;
			//+++( 15.01.2019 --- Задача № 61873  - коммент ТОЛЬКО по заказам из которых идёт объединение - через ; _ТК....
			КомментВодителю1 = ПолучитьКомментарийВодителю(стр.Значение);
			КомментВодителю =КомментВодителю+?(КомментВодителю1="", "", "_"+стр.Значение.Номер+":"+КомментВодителю1+"; "); 
			//+++)
		КонецЦикла;//Плотников
		
		//+++( 15.01.2019 --- Задача № 61873 --- Комментиарии по первичным заказам - каждый на новой строке! Номер ---
			Для каждого стр1 из докОбщийЗаказ.Заказы цикл
				КомментВодителю1 = ПолучитьКомментарийВодителю(стр1.ЗаказПокупателя);
				//только если нет уже коммента по этому первичному заказу (без Повторов!)
				Если КомментВодителю1<>"" и Найти(КомментВодителю1, стр1.ЗаказПокупателя.Номер+":")=0 тогда 
					КомментВодителю = КомментВодителю+"
					|"+стр1.ЗаказПокупателя.Номер+":"+КомментВодителю1; 
				КонецЕсли;
			КонецЦикла;
		//+++)
			
		докОбщийЗаказ.ВМаршрут = Ложь;
		докОбщийЗаказ.мПроведениеИзФормы = ЛОЖЬ;
		докОбщийЗаказ.ДатаОтгрузки = НачалоДня(ТекущаяДата()) + сдвигДатыОтгрузки*86400; //+++ 10.05.2018
		
		Если ДеньНедели( докОбщийЗаказ.ДатаОтгрузки )=5 
			или ДеньНедели( докОбщийЗаказ.ДатаОтгрузки )=6 тогда //10.05.2018 - только в пятницу!
		коммент = ?(стрТабл1.Понедельник, "Понедельник! ", "Суббота. ") + коммент;
		КонецЕсли;
		
		Если докОбщийЗаказ.Контрагент.НеОбъединятьРазныеТовГруппы тогда //+++14.05.2018
			коммент = врег( строка(стрТабл1.ВидТовара) ) +", "+коммент;
		КонецЕсли;
		
		коммент =?(стрТабл1.БонусПрименен,"[v]БонусПрименен,","")+коммент; //24.07.2018
		
		//+++( 28.08.2018
		КомментПервичныхЗаказов = ""; 
		Если докОбщийЗаказ.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж <> справочники.НаправленияПродаж.НайтиПоКоду(16) тогда
			стрПеренос = "# данные перенесены >> "; // что ищем 
			для каждого стрЗак1 из докОбщийЗаказ.Заказы цикл
			ком1 = сокрЛП(стрЗак1.ЗаказПокупателя.Комментарий)+"; ";
			ii = найти(ком1, стрПеренос); jj = найти(ком1, " #");
			пока ii>0 и jj>ii цикл //удаляем все переносы!
				ком1 = лев(ком1,ii-1) + прав(ком1, стрДлина(ком1)- jj- 1);
				ii = найти(ком1, "# данные перенесены >> "); jj = найти(ком1, " #");
			КонецЦикла;
			КомментПервичныхЗаказов = КомментПервичныхЗаказов + стрЗак1.ЗаказПокупателя.Номер+":"+ком1+";";
		КонецЦикла;	
		
		КомментПервичныхЗаказов =стрЗаменить(КомментПервичныхЗаказов,"
		|","");
		текстАвтоКомплект = "#АвтоКомплектация по Cезонному заказу покупателя №"; // только 1 раз в конце!
		Nсез = СтрЧислоВхождений(КомментПервичныхЗаказов, текстАвтоКомплект);
		Если Nсез>1 и Nсез=докОбщийЗаказ.Заказы.Количество() тогда // все заказы - по 1 автокомплектации
			ii= Найти(КомментПервичныхЗаказов,текстАвтоКомплект);
			КомментПервичных = прав(КомментПервичныхЗаказов, стрДлина(КомментПервичныхЗаказов)-ii-стрДлина(текстАвтоКомплект));
			КомментПервичных = лев(КомментПервичных, Найти(КомментПервичных," #")-1);
			КомментПервичных = текстАвтоКомплект +КомментПервичных+" #";
		КомментПервичныхЗаказов =стрЗаменить(КомментПервичныхЗаказов, КомментПервичных,"") + КомментПервичных; // в конец
		КонецЕсли;
    	//29.08.2018 убираем повторы символов
	    масСимв = новый массив; 
		масСимв.Добавить(";");масСимв.Добавить("#");масСимв.Добавить("Terminal;");
		для i=0 по масСимв.Количество()-1 цикл 
		КомментПервичныхЗаказов =стрЗаменить(КомментПервичныхЗаказов,масСимв[i]+масСимв[i], масСимв[i]);
		КомментПервичныхЗаказов =стрЗаменить(КомментПервичныхЗаказов,масСимв[i]+" "+масСимв[i], масСимв[i]);
		КонецЦикла;	
		КомментПервичныхЗаказов =стрЗаменить(КомментПервичныхЗаказов,":;",";");
		КомментПервичныхЗаказов =стрЗаменить(КомментПервичныхЗаказов,": ;",";");
		КомментПервичныхЗаказов =стрЗаменить(КомментПервичныхЗаказов,"Terminal:Terminal","Terminal");  
		КомментПервичныхЗаказов =стрЗаменить(КомментПервичныхЗаказов,"Terminal: Terminal","Terminal");  
	
		КонецЕсли;
		//сначала список объединяемых, потом - все комментарии!
		докОбщийЗаказ.Комментарий ="# общ.заказ: "+коммент +?(КомментПервичныхЗаказов="",""," 
		|"+КомментПервичныхЗаказов); //комментарий первичных заказов!
        //+++)
		
		докОбщийЗаказ.Записать(РежимЗаписиДокумента.Проведение);
		ЗаписатьКомментВодителю(докОбщийЗаказ.Ссылка, КомментВодителю);//+++ 15.01.2019 --- Задача № 61873
		
	Если ДеньНедели( докОбщийЗаказ.ДатаОтгрузки )=5 
			или ДеньНедели( докОбщийЗаказ.ДатаОтгрузки )=6 тогда //10.05.2018 - только в пятницу!
		Запись = Регистрысведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		Запись.Объект =  докОбщийЗаказ.Ссылка; 
		Если стрТабл1.Понедельник тогда
			Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90222"); //Понедельник
		иначе
			Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90223"); //Суббота
		КонецЕсли;
		Запись.Значение = Истина;

		Запись.Записать(Истина);
	КонецЕсли;
	
		ЗафиксироватьТранзакцию();//============================================
		
		#Если НаКлиенте тогда
		КолТов = докОбщийЗаказ.Товары.Количество();	
		Сообщить("+++ Успешно создан один общий заказ для "+строка(докОбщийЗаказ.Контрагент)+" по "+строка(СписокЗак.Количество())+" из "+строка(СписокЗаказов.Количество())+" выбранных заказов. "+коммент, СтатусСообщения.Информация);
		Сообщить("Сумма по "+строка(КолТов)+" товарам из "+строка(СписокЗак.Количество())+" объединенных документов полностью совпадает с суммой общего заказа: "+строка(СуммаПоДокументам)+"р.", СтатусСообщения.Информация);
		Сообщить(КомментВодителю, СтатусСообщения.Информация); //+++ 15.01.2019 --- Задача № 61873
		
		Если СписокЗак.Количество()<>СписокЗаказов.Количество() тогда
			Сообщить("Нельзя объединить в общий заказ "+строка(СписокЗаказов.Количество() - СписокЗак.Количество())+" выбранных заказов клиента "+строка(докОбщийЗаказ.Контрагент) );
		КонецЕсли;
		#КонецЕсли	
	
		//+++ 18.10.2017 - для филиалов - заполняем свойство
		Если Подразделение.ОбособленноеПодразделение и НЕ свНаправлениеОтгрузки1.Пустая() тогда
			УстановитьНаправлениеОтгрузки(докОбщийЗаказ.Ссылка, свНаправлениеОтгрузки1);
		КонецЕсли;
			
	Исключение
		
		ОтменитьТранзакцию();//----------------------------------------------------------------
		
		#Если НаКлиенте тогда
		Сообщить("--- не удалось создать общий заказ по клиенту "+строка(докОбщийЗаказ.Контрагент)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли	
	
	КонецПопытки;

	
КонецПроцедуры//автообъединялка	

//+++ 15.01.2019
функция ПолучитьКомментарийВодителю(Заказ) Экспорт
	текст = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИнформацияПоПроезду.Комментарий
	|ИЗ
	|	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
	|ГДЕ
	|	ИнформацияПоПроезду.Заказ = &Заказ
	|	И ИнформацияПоПроезду.НомерОчереди = -1";
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		текст = СокрЛП(выборка.Комментарий);
	КонецЕсли;
	возврат текст;
КонецФункции	

//+++ 15.01.2019
Процедура ЗаписатьКомментВодителю(Заказ, ТрКомментарий="" ) Экспорт
  Если СокрЛП(ТрКомментарий)<>"" Тогда // ЗАПИСЬ Комментария
		регСв = РегистрыСведений.ИнформацияПоПроезду.СоздатьМенеджерЗаписи();
		регСв.Заказ = Заказ;
		регСв.НомерОчереди = -1; // ДО ОТГРУЗКИ:  до -999 !
		регСв.Комментарий  = ТрКомментарий;
//------------------- доп.поля, НЕ меняем !!! -----------------------		
		регСв.ДоставкаНал   = 0;
		регСв.ДоставкаБНал  = 0;
		регСв.ДоставкаВЦене = 0;
		регСв.Записать(Истина); // перезаписать!
	Иначе
		регСв = РегистрыСведений.ИнформацияПоПроезду.СоздатьМенеджерЗаписи();
		регСв.Заказ = Заказ;
		регСв.НомерОчереди = -1; // ДО ОТГРУЗКИ:  до -999 !
        регСв.Удалить();
	КонецЕсли;	
КонецПроцедуры

//- аналог кнопки [ВМаршрут]
Процедура ВыполнитьПостановкуЗаказовВМаршрут(Зак)
	
	ТекущаяДата1 = ОценкаПроизводительностиВызовСервераПолныеПрава.ДатаИВремяНаСервере();
	текДата =  ТекущаяДата1;  //+++ 07.04.2018 на текущую дату!
	
    РаспределитьЗаказНаМаршрут(Зак, текДата,,,,Зак.Подразделение);
	
	Отказ = ЛОЖЬ; 
	ЗакОб = Зак.ПолучитьОбъект();
	ЗакОб.ВМаршрут = истина;     //ВКЛ в любом случае!
	
	Набор = РегистрыСведений.ЗаказыМаршруты.СоздатьНаборЗаписей();
    Набор.Отбор.ЗаказПокупателя.Установить(Зак);
    Набор.Прочитать();
		
	//-----------проверяем заказ на дату отгрузки по маршруту------
	Если Набор.Количество() > 0  Тогда
			Если Набор[0].маршрут <> Справочники.НовМаршруты.ПустаяСсылка() Тогда
		        
				//+++ 06.10.2017 - ещё раз проверяем просрочку на ДатуОтгрузки!
				Если Набор[0].Дата>ЗакОб.ДатаОтгрузки Тогда
				
					ЧислоДнейСМоментаОтгрузки1 = ЗакОб.ДатаОплаты - ЗакОб.ДатаОтгрузки;
					ЗакОб.ДатаОтгрузки = Набор[0].Дата; //НОВАЯ ДАТА Отгрузки!
					
					// для фикс. или "короткой" отсрочки - сдвигаем дату оплаты от даты отгрузки
				 	Если ЗакОб.ЧислоДнейСМоментаОтгрузки>0 Тогда   //автопересчет даты оплаты
						ЗакОб.ДатаОплаты = ЗакОб.ДатаОтгрузки + ЗакОб.ЧислоДнейСМоментаОтгрузки * 86400;
					иначеЕсли ЧислоДнейСМоментаОтгрузки1>0 тогда
						ЗакОб.ДатаОплаты = ЗакОб.ДатаОтгрузки + ЧислоДнейСМоментаОтгрузки1 * 86400;
					КонецЕсли;	
			        				 
					ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(ЗакОб, Отказ); // на ДатуОтгрузки может измениться!
					Если Отказ Тогда
						ЗакОб.ВМаршрут = ЛОЖЬ;
						Набор.Очистить();
						Набор.Записать(); // УДАЛЯЕМ !
					КонецЕсли;
					
				КонецЕсли;
			
				#Если Клиент Тогда
				Если ЗакОб.ВМаршрут Тогда
					Если Набор.Количество() > 1 Тогда //+++ 12.10.2017
						Сообщить("ВНИМАНИЕ! Заказ "+ЗакОб.Номер+" попал в "+строка(Набор.Количество())+" маршрута!!!" , СтатусСообщения.Внимание);
						Для ii=0 по Набор.Количество()-1 Цикл
					  		Сообщить(строка(ii+1)+") Заказ попал в маршрут " + Набор[ii].маршрут.Наименование + " на дату " + Строка(Набор[ii].Дата), СтатусСообщения.Информация);
						КонецЦикла;							
					Иначе	
					Сообщить("Заказ "+ЗакОб.Номер+" попал в маршрут №"+Набор[0].маршрут.Код+" - " + Набор[0].маршрут.Наименование + " на дату " + Строка(Набор[0].Дата), СтатусСообщения.Информация);
					КонецЕсли;
				КонецЕсли;	
                #КонецЕсли	
				
			Иначе 
				#Если Клиент Тогда
				Сообщить("Внимание!!! Заказ "+ЗакОб.Номер+" не попал ни в один маршрут!!!", СтатусСообщения.Внимание);
		        #КонецЕсли	
			КонецЕсли;
	Иначе //нет записей в регистре
		ЗакОб.ВМаршрут = ЛОЖЬ;
		#Если Клиент Тогда
		Сообщить("Внимание!!! Заказ "+ЗакОб.Номер+" не попал ни в один маршрут!!!", СтатусСообщения.Внимание);
        #КонецЕсли	
	КонецЕсли;
		
		Если ЗакОб.ВМаршрут Тогда
			Если ЗакОб.ДатаОтгрузки < НачалоДня(текДата) Тогда// 12.10.2017
				ЗакОб.ДатаОтгрузки = текДата;
				ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(ЗакОб, Отказ); // ЕЩЁ РАЗ! ДатуОтгрузки может измениться!
				Если Отказ Тогда
						ЗакОб.ВМаршрут = ЛОЖЬ;
						Набор.Очистить();
						Набор.Записать(); // УДАЛЯЕМ !
					#Если Клиент Тогда
					Сообщить("--- Заказ "+строка(ЗакОб.Номер)+" УБРАН из всех маршрутов!");	
	 		        #КонецЕсли	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Если ЗакОб.ВМаршрут Тогда
		
		ЗакОб.Дата = ТекущаяДата();//сдвигаем документ на тек.дату
		
		СделатьПроверкуДляОтправкиКрышек(ЗакОб); //+++ по задаче № 34280 - автоОтправка писем по Крышкам!?
		
		 закОб.ОбменДанными.Загрузка = истина;
		 закОб.Записать();  //запись без перепроведения
		 закОб.ОбменДанными.Загрузка = ЛОЖЬ;
		 
	КонецЕсли;

КонецПроцедуры	


//4). =========== ДОП.ФУНКЦИИ для Объединения заказов =====================
функция ЕстьРазныеТипыЗаказа10(списЗак)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПокупателя.ТипЗаказа
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка В (&списЗак)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателя.ТипЗаказа";
	Запрос.УстановитьПараметр("списЗак", списЗак);

	Результат = Запрос.Выполнить();
	табл  = Результат.Выгрузить();
	Отбор = Новый Структура("ТипЗаказа",10);
	стоп = ЛОЖЬ;
	Если табл.Количество()>1 Тогда //разные типы
		Если табл.НайтиСтроки(Отбор).Количество() > 0 Тогда 
			#Если Клиент тогда
				Сообщить("Нельзя объединять Заказ Интернет-магазина и Заказы терминала в один заказ!", СтатусСообщения.Внимание);
			#КонецЕсли	
			стоп = Истина;
		КонецЕсли;
	КонецЕсли;
Возврат стоп;
КонецФункции

Процедура ДобавитьЗаказВТЧОбщегоЗаказа(Зак1, ЗакОб)
	
		Если Зак1.Заказы.Количество()=0 тогда
		   стрЗак = ЗакОб.Заказы.Добавить();
		   стрЗак.ЗаказПокупателя = Зак1;
	    Иначе
			для каждого стр1 из Зак1.Заказы цикл
				ДобавитьЗаказВТЧОбщегоЗаказа(стр1.ЗаказПокупателя, ЗакОб);
			КонецЦикла;
		КонецЕсли;
		
КонецПроцедуры

функция ПолучитьНаправлениеОтгрузки(зак1)
	
	СвойствоНаправлениеОтгрузки = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90175");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект", зак1 );
	Запрос.УстановитьПараметр("Свойство", СвойствоНаправлениеОтгрузки );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() тогда
		рез = выборка.Значение;
	Иначе 
		рез = справочники.ЗначенияСвойствОбъектов.ПустаяСсылка();
	КонецЕсли;
	
	возврат рез;
		
КонецФункции

Процедура УстановитьНаправлениеОтгрузки(зак0, свво)
	
	СвойствоНаправлениеОтгрузки = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90175");
	
	 регСв = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	 регСв.Объект   = зак0;
	 регСв.Свойство = СвойствоНаправлениеОтгрузки;
	 регСв.Значение = свво;
	 регСв.Записать();
КонецПроцедуры

 //10.10.2018 - проверка сразу и Серого и Черного списков!
функция ЕстьДискиСтопЛиста(таблТовары) экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	   |	НоменклатураСтопЛист.Номенклатура
	   |ИЗ
	   |	РегистрСведений.НоменклатураИмпорт КАК НоменклатураСтопЛист
	   |ГДЕ
	   |	НоменклатураСтопЛист.Номенклатура В (&СписНом)";
	табл1 = таблТовары.Выгрузить(,"Номенклатура");
	СписНом = новый СписокЗначений;
	СписНом.ЗагрузитьЗначения( табл1.ВыгрузитьКолонку("Номенклатура") );
	Запрос.УстановитьПараметр("СписНом", СписНом);
	Результат = Запрос.Выполнить();
		
	возврат НЕ Результат.Пустой();
	
КонецФункции

//4). ======= Фунции для ПостановкуЗаказовВМаршрут =========================
//Все проверки как в Заказе - нужна Единая Функция!
Функция ПроверитьЗаказПередУстановкойВМаршрут(обДок) Экспорт 
	Отказ = ЛОЖЬ;
	
	Если ОбДок.ВМаршрут тогда  //+++ 13.03.2018 уже в маршруте - не надо еще раз ставить!
		Текст1 = "Заказ "+обДок.Номер+" уже в Маршруте!";
		Отказ = Истина;
		ВОЗВРАТ Отказ; //сразу!
	КонецЕсли;
	
//+++ 10.10.2018 -----------------------------------------------------------------------------	
Если ОбДок.Подразделение=Справочники.Подразделения.НайтиПоКоду("00005")тогда   // с 20.02.19 только  по головному подразделению
	Если НЕ ОбДок.РазрешитьГрузитьТоварыИзСтопЛиста и ЕстьДискиСтопЛиста(ОбДок.Товары) тогда
		Текст1 = "Заказ "+обДок.Номер+" содержит диски стоп-листа! Требуется [v] разрешить отгрузку таких дисков ДО постановки в маршрут!";
		Отказ = Истина;
		ВОЗВРАТ Отказ; //сразу!
	КонецЕсли;	
КонецЕсли;	
//02.04.2015 не проделенный или Резервный заказ - можно только посчитать R13
	Если (НЕ обДок.Проверен) или обДок.Резерв Тогда
		Текст1 ="НЕЛЬЗЯ ставить ""К отгрузке"" Заказ "+обДок.Номер+", которые не В резерве!";
		Отказ = Истина;
	КонецЕсли;
	
	//+++ 13.03.2018 заказы с сайта, не установленные в маршрут - не надо обрабатывать !
	Если не ОбДок.ПоставитьНаОтгрузку и ОбДок.ТипЗаказа = 8 тогда
		Текст1 = "Для Заказа "+обДок.Номер+" (с сайта) выключена [ ] На отгрузку!";
		Отказ = Истина;
	КонецЕсли;
	
	//+++ 02.08.2018 - по примеру заказа ТК513660 от Челышевой - не надо ставить в маршрут заказы, созданные и объединенные по Автокомплектации?!	 
	КомментЗапрета = "#АвтоКомплектация по Cезонному заказу покупателя №"; 
	Если Найти(ОбДок.Комментарий, КомментЗапрета)>0 тогда
		Текст1 ="Заказ "+обДок.Номер+" -> создан по АвтоКомплектации и автоматически НЕ ставится в Маршрут!";
		Отказ = Истина;
    КонецЕсли;
	
	//+++27.03.2018
	минСумма = 10000;  
//1)----------------------------------------------------------------------------------------------------------------------		
	Если ОбДок.Товары.Итог("Количество")<4 тогда
	
		СуммаДругихЗаказов = СуммаЗаказовВЭтойЖЕТочке(ОбДок); //+++ 29.03.2019 Задача № 46148 п.2
		СуммаВсех = СуммаДругихЗаказов+ОбДок.СуммаДокумента;
		
		Если СуммаДругихЗаказов=0 тогда
			Текст1 ="Заказ "+обДок.Номер+" - слишком маленький! Количество <4 шт. Других заказов на тот же Адрес доставки - НЕТ.";
			Отказ = Истина;
		иначеЕсли СуммаВсех<минСумма тогда
			Текст1 ="Заказ "+обДок.Номер+" - слишком маленький! Количество <4 шт. Сумма всех заказов на тот же Адрес доставки: "+строка(СуммаВсех)+" < "+строка(минСумма)+" руб.";
			Отказ = Истина;
		иначе
			Текст1 ="Есть другие Заказы в маршруте, поэтому "+обДок.Номер+" - слишком маленький! Количество <4 шт. Поставлен в Маршрут!";
		КонецЕсли;
//2)----------------------------------------------------------------------------------------------------------------------		
	ИначеЕсли ОбДок.Товары.Итог("Количество")>4 и ОбДок.СуммаДокумента<минСумма тогда	//06.04.2018
		
		СуммаДругихЗаказов = СуммаЗаказовВЭтойЖЕТочке(ОбДок); //+++ 29.03.2019 Задача № 46148 п.2
		СуммаВсех = СуммаДругихЗаказов + ОбДок.СуммаДокумента;
		
		Если СуммаДругихЗаказов=0 тогда
			Текст1 ="Заказ "+обДок.Номер+" - слишком маленький! Сумма заказа "+строка(ОбДок.СуммаДокумента)+" < "+строка(минСумма)+". Других заказов на тот же Адрес доставки - НЕТ.";
			Отказ = Истина;
		иначеЕсли СуммаВсех < минСумма тогда
			Текст1 ="Заказ "+обДок.Номер+" - слишком маленький! Сумма всех заказов на тот же Адрес доставки: "+строка(СуммаВсех)+" < "+строка(минСумма)+" руб.";
			Отказ = Истина;
		Иначе
			Текст1 ="Есть другие Заказы в маршруте! Количество: "+строка(ОбДок.Товары.Итог("Количество"))+", Сумма всех заказов на тот же Адрес доставки "+строка(СуммаВсех)+" >= "+строка(минСумма)+" руб. - поэтому Заказ Поставлен в Маршрут!";
		КонецЕсли;
		
//3)------------------------------------------------------------------------------------------------------------------------------------------------		
	ИначеЕсли ОбДок.Товары.Итог("Количество")=4	 тогда //+++ 29.03.2019 - Задача № 65704 - не 4 шины или не 4 диска - отказ с проверкой по сумме!
		
		масТов = ОбДок.Товары.выгрузитьКолонку("Номенклатура");
		масВидовТовара = получитьМассивВидовТоваров(масТов); //1 запросом!
		
		флОтказ = (масВидовТовара.Количество()<>1)//+++ 29.03.2019  - не разные виды не могут быть в сумме 4 шт. !
			  или ( масВидовТовара[0]<>перечисления.ВидыТоваров.Шины 
			      и масВидовТовара[0]<>перечисления.ВидыТоваров.Диски);
				  
		Если флОтказ 
		    и ОбДок.СуммаДокумента<минСумма  //ещё и по сумме ?!
		Тогда 
			Текст1 = "Заказ "+обДок.Номер+" - слишком маленький! Количество=4шт. (НЕ 4 Диска и НЕ 4 Шины!)"
					+" Сумма заказа "+строка(ОбДок.СуммаДокумента)+" < "+строка(минСумма)+".";//ещё и по сумме ?!
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;	
		
	
	//=======================ФИЛИАЛЫ пока выключаем!==========================	
	Если  обДок.Подразделение.ОбособленноеПодразделение Тогда
		Текст1 ="Для Заказа "+обДок.Номер+" Автопостановка в Маршрут работает только по Ярославлю!";
		Отказ = истина;
	КонецЕсли;
	
	//+++ 10.10.2017  по задаче № 34344
	Если обДок.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
		НетТНВЭД = ЛОЖЬ;	
		для каждого стр1 из ОбДок.Товары Цикл
			Если НЕ ЗначениеЗаполнено(стр1.КодТНВЭД) Тогда
				НетТНВЭД = Истина;
			КонецЕсли;	
		КонецЦикла;
		
		Если НетТНВЭД Тогда
			Текст1 ="Для Заказа "+обДок.Номер+" в строке № "+Строка(стр1.НомерСтроки)+" - нет кода ТНВЭД! ";
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	
	//+++ 10.10.2017 - авто-определение адреса	
	Если СокрЛП(обДок.АдресДоставки)="" Тогда // попробуем его заполнить...
		стрАдрес = ПолучитьСтруктуруАдреса(обДок); //Структура("Вид, Адрес, Регион, Город, Улица, Дом, Координаты"
		Если  стрАдрес.Адрес="" Тогда
			Текст1 ="Для Заказа "+обДок.Номер+" НЕ установлен и не удалось автоматически определить 'Адрес доставки'!";
			Отказ =Истина;
		Иначе
			обДок.АдресДоставки = стрАдрес.Адрес;
			Если обДок.ВидАдреса.Пустая()
				и ТипЗнч( стрАдрес.Вид) = тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				обДок.ВидАдреса = стрАдрес.Вид;
			КонецЕсли;
			#Если Клиент Тогда
			Сообщить("Для Заказа "+обДок.Номер+" Автоматически установлен 'Адрес доставки': "+ОбДок.АдресДоставки);
			#КонецЕсли
		КонецЕсли;	
    КонецЕсли;
	
	//+++ 10.10.2017 - авто-определение адреса ТТН	
	Если СокрЛП(обДок.АдресДляТТН)="" Тогда
		Если НЕ обДок.ВидАдреса.Пустая() Тогда
			обДок.АдресДляТТН = ПолучитьПредставлениеПоВидуАдреса(обДок); //яштПрочее
			#Если Клиент Тогда
			Сообщить("Для Заказа "+обДок.Номер+" Автоматически установлен 'Адрес для ТТН': "+обДок.АдресДляТТН);
			#КонецЕсли
		Иначе
			Текст1 = "НЕ установлен и не удалось автоматически определить 'Адрес для ТТН' для Заказа "+обДок.Номер+"!";
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
		
 	
	Если обДок.Резерв или обДок.ДатаОтгрузки='00010101' Тогда 
		Текст1 = "Нельзя отгружать Заказ "+обДок.Номер+" без Даты отгрузки!";
		Отказ = истина;//01.12.2016 запрет!
	КонецЕсли;

	//01.12.2016 запрет отгрузки!
	Если не (обДок.Статус.Пустая()
		     или обДок.Статус = перечисления.СтатусыЗаказов.Получен
			 или обДок.Статус = перечисления.СтатусыЗаказов.ПолученЧастично) Тогда  // частично получен... частично отгружается...
			 
		 Если обДок.Статус = перечисления.СтатусыЗаказов.Доставлен Тогда//Доставлен клиенту?!
         	Текст1 = "Заказ уже ДОСТАВЛЕН клиенту! Нельзя повторно ставить на отгрузку уже отгруженный заказ!"
		 Иначе		   
		   	Текст1 = "Нельзя отгружать Заказ со статусом  '"+строка(обДок.Статус)+"' Заказ ожидает поступления товаров от поставщиков!";
		 КонецЕсли;  
        Отказ = истина;
	КонецЕсли;
	
	//Миронычев
	Если не Отказ и обДок.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда//+++14.08.2017
		Если не ПроверимНаличиеИСоответствиеСчетаНаОплату(обДок.Ссылка) Тогда	
			Текст1 = "Нельзя выставлять категорию Если документ ""Счет на оплату"" не соответствует заказу!";
			Отказ = Истина;
		КонецЕсли;
		Если не ЗначениеЗаполнено(ОбДОк.ДатаОплаты) Тогда
			Текст1 = "Для Заказа "+обДок.Номер+" - Укажите Дату оплаты!";
			Отказ = Истина;
		КонецЕсли;
		//Миронычев проверка заполненного адреса ТТН

		Если не ЗначениеЗаполнено(ОбДок.АдресДляТТН) Тогда
			Текст1 ="Заполните Обязательное поле ""Адрес для ТТН"" Для Заказа "+обДок.Номер;
			Отказ = Истина;
		КонецЕсли;
	
		Если ОбДок.ДатаОплаты > ОбДок.ДатаОтгрузки Тогда
			Текст1 ="Для Заказа "+обДок.Номер+" Нельзя по договору ""Предоплата по счетам"" устанавливать ""Дату Оплаты"" позже ""Даты отгрузки""!";
			Отказ = истина;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента
		|	И Сделка = &Сделка ) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|";
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ОбДок.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Сделка", ОбДок.Ссылка);
		
		Результат = Запрос.Выполнить();
		Если не Результат.Пустой() Тогда
			выборка = результат.Выбрать(); 
			выборка.Следующий();
			Если выборка.СуммаВзаиморасчетовОстаток < 0 Тогда
				Если -выборка.СуммаВзаиморасчетовОстаток < ОбДок.СуммаДокумента Тогда
					Текст1 = "Нельзя по договору ""Предоплата по счетам"" ставить к отгрузке если нет 100% предоплаты!";
					Отказ = истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Текст1 = "Нельзя по договору ""Предоплата по счетам"" ставить к отгрузке если нет 100% предоплаты!";
			Отказ = истина;
		КонецЕсли;
	КонецЕсли;
	
			
	Если обДок.ОтгрузкаСПодразделенияСклада Тогда
		Текст1 ="Нельзя ставить Заказ "+обДок.Номер+" - на отгрузку!
						|Этот заказ уже предназначен [v]Для отгрузки (через 293 обработку)
						|с подразделения склада: "+сокрЛП(обДок.Склад.Наименование)+" !";
		Отказ = Истина;
	КонецЕсли;
		
	//Если есть не согласованая реклама, то грузить нельзя
	Если НЕ Отказ и обДок.ТипЗаказа = 12 Тогда 
		Для каждого стр из обДок.Товары Цикл
			Если стр.Статус <> Перечисления.СтатусыСтрокЗаказа.ПустаяСсылка() 
				и стр.Статус <> Перечисления.СтатусыСтрокЗаказа.Подтвержден Тогда
				Текст1 = "Внимание! Заказ на согласовании по рекламе! Нельзя отгружать!!!";
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;				
	КонецЕсли;
	
	// Сакулина 23.11.2016
	Если обДок.ТипЗаказа = 13 Тогда
		Текст1 = "Нельзя ставить на отгрузку заказ, который находится на Ошиповке!";
		Отказ = Истина;
	КонецЕсли;
	
	//+++ 15.02.2017 
	Если обДок.Контрагент.ЗапретОтгрузки Тогда
		Текст1 = "Клиенту: "+строка(обДок.Контрагент)+" - ЗАПРЕЩЕНА ОТГРУЗКА!";
		Отказ = истина;
	КонецЕсли;
	Если обДок.Контрагент.Родитель = справочники.Контрагенты.ПотенциальныеПокупатели Тогда
		Текст1 = "Клиент: "+строка(обДок.Контрагент)+" - находится в ""Потенциальных покупателях!"" Отгрузки таким клиентам - запрещены!";
		Отказ = истина;
	КонецЕсли;
	
//проверка полей адреса Регион, Город, Улица, Дом, Координаты (исключая заказы Интернет-магазина и экспорт клиентов)!	
Если ОбДок.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = справочники.НаправленияПродаж.НайтиПоКоду(16) или ОбДок.Контрагент.Экспорт Тогда
	сАдрес =новый Структура("Вид, Адрес, Регион, Город, Улица, Дом, Координаты", "","","","","","",""); //15.10.2017
Иначе
	сАдрес = ПолучитьСтруктуруАдреса(обДок);
	//05.07.2017 - исключение из правил 3х городов - регионального значения
	РегионЭтоГород = (  найти(сАдрес.Регион,"Москва")>0 
					или найти(сАдрес.Регион,"Санкт-Петербург")>0 
					или найти(сАдрес.Регион,"Севастополь")>0 );
	
	//------------обработка найденной структуры полей сАдрес--------------------
	Если сАдрес.Координаты = "" Тогда
		Текст1 = "Для Заказа "+ОбДок.Номер+" Ошибка по виду адреса '"+строка(сАдрес.Вид)+"' - не заполнено поле: 'Координаты'
		|в адресе: "+сАдрес.Адрес+"
		|Заполните все необходимые поля перед отгрузкой!";
		Отказ = истина;
	ИначеЕсли сАдрес.Регион= "" Тогда
		Текст1 = "Для Заказа "+ОбДок.Номер+" Ошибка по виду адреса '"+строка(сАдрес.Вид)+"' - не заполнено поле: 'Регион'!
		|в адресе: "+сАдрес.Адрес+"
		|Заполните все необходимые поля перед отгрузкой!";
		Отказ = истина;
	ИначеЕсли сАдрес.Город= "" и не РегионЭтоГород Тогда 
		Текст1 = "Для Заказа "+ОбДок.Номер+" Ошибка по виду адреса '"+строка(сАдрес.Вид)+"' - не заполнено поле: 'Город'!
		|в адресе: "+сАдрес.Адрес+"
		|Заполните все необходимые поля перед отгрузкой!";
		Отказ = Истина;
	//------------------должна быть привязка с детализацией до Улицы и Дома!----------------------------				
	ИначеЕсли сАдрес.Улица= "" Тогда
		Текст1 ="Для Заказа "+ОбДок.Номер+" Ошибка по виду адреса '"+строка(сАдрес.Вид)+"' - не найдено поле: 'Улица'!
		|в адресе: "+сАдрес.Адрес+"
		|Заполните все необходимые поля перед отгрузкой!";
		Отказ = Истина;
	ИначеЕсли сАдрес.Дом= "" Тогда
		Текст1 ="Для Заказа "+ОбДок.Номер+" Ошибка по виду адреса '"+строка(сАдрес.Вид)+"' - не найдено поле: 'Дом'!
		|в адресе: "+сАдрес.Адрес+"
		|Заполните все необходимые поля перед отгрузкой!";
		Отказ = Истина;
	КонецЕсли;	
КонецЕсли;

//---- проверка необходимости согласования литых дисков с Егором---------------------
Если НЕ Отказ тогда 
	//12,02,19 алексеева проверяем    на 8 дисков в заказе
	Если не обДок.РазрешитьГрузитьДиски Тогда
	//	Если обДок.Контрагент<>Справочники.Контрагенты.НайтиПоКоду("94247") и обДок.Контрагент<>Справочники.Контрагенты.НайтиПоКоду("П005342") тогда
		ЛитыеДиски = Ложь;
		ЕстьДиски  = Ложь;
		ТаБдокД =  обДок.Товары.Выгрузить();
		ТабДокД.Свернуть("Номенклатура","Количество");
		массив = ТаБдокД.ВыгрузитьКолонку("Номенклатура");
		СписНом = Новый СписокЗначений;
		СписНом.ЗагрузитьЗначения(массив);
		
		  Для каждого стр из ТабДокД цикл
			  Если стр.номенклатура.номенклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026") и 
				   стр.Номенклатура.Родитель <> Справочники.Номенклатура.НайтиПоКоду("9289310")  и стр.количество>7 тогда
		           Отказ = истина;
		        	Текст1 = "Согласуйте заказ на Литые диски у Егора Малышева!!!";
		      КонецЕсли;
		  конеццикла;
	конецЕсли;	  
	КонецЕсли;

	//проверка на кратность 4 шт диски литые
	//Если не   обДок.РазрешитьНекомплект и обДок.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж <> Справочники.НаправленияПродаж.НайтиПоКоду("16")  тогда
	//	ТаБдокД =  обДок.Товары.Выгрузить();
	//	ТабДокД.Свернуть("Номенклатура","Количество");
	//	Для каждого стр из ТабДокД цикл
	//		Если стр.номенклатура.номенклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026") и 
	//			стр.Номенклатура.Родитель <> Справочники.Номенклатура.НайтиПоКоду("9289310")  и Цел(стр.количество/4)*4<>стр.количество тогда
	//			Отказ = истина;
	//			Текст1 = "Согласуйте некомплект по литым дискам у Егора Малышева!!!";
	//		КонецЕсли;
	//	конеццикла;
	//конецесли;
	
	
	//Подарки - Плотников
	Отбор = Новый Структура;
	Отбор.Вставить("Бонус",Ложь);
	Строки = ОбДок.Бонусы.НайтиСтроки(Отбор);
	Если Строки.Количество()>0 и не обДок.СогласованаТребованиеНакладная Тогда
		Текст1 = "Внимание! Подарки не согласованы,  Нельзя отгружать заказ "+ОбДок.Номер+"!!!";
		Отказ = истина;
	КонецЕсли;
	//Плотников
	
	//Миронычев
	Если НЕ Отказ и обДок.ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда
		ТекущаяДата1 = ОценкаПроизводительностиВызовСервераПолныеПрава.ДатаИВремяНаСервере();
		текДата = макс(обДок.ДатаОтгрузки, ТекущаяДата1 );
		ПроверитьДоговорВЗаказеПокупателя(обДок, Отказ, Истина, текДата ); 
		Текст1 = "Неправильный договор контрагента: "+строка(обДок.Контрагент);
	КонецЕсли;
	//КонецМиронычев
	
	
	//проверка лимита, дог.поручительства и просроченного долга > 7 дней на Дату отгрузки!
	Если НЕ Отказ Тогда  //только при ВКЛючении 
		ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(обДок, Отказ); 
		если Отказ тогда 
			Текст1 = "Превышен лимит или есть просроченные заказы более 7 дней по контрагенту: "+строка(обДок.Контрагент);
		КонецЕсли;	
	КонецЕсли;
	
	Если Текст1<>"" тогда //+++ 27.03.2018 - единая функция 
		#Если Клиент Тогда
			Если Отказ тогда
				Сообщить(Текст1, СтатусСообщения.Внимание);
			иначе	
				Сообщить(Текст1, СтатусСообщения.Информация);
			КонецЕсли;	
		#КонецЕсли
		
		//18.08.2018 - только если отказ!  
		//ЗаписатьЛОГвЖурналИзменений( обДок.Ссылка, "АвтоПостановкаВМаршрут", Текст1 );
	КонецЕсли;
	
Возврат Отказ;	

КонецФункции//ВСЕ Проверки

//29.03.2019
// на входе -> массив Товаров
//на выходе -> массив ВидовТоваров 
функция получитьМассивВидовТоваров(масТов)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.ВидТовара
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&масТов)";
	Запрос.УстановитьПараметр("масТов", масТов);
	Результат = Запрос.Выполнить();
	табл = Результат.Выгрузить();
	масВидов = табл.ВыгрузитьКолонку("ВидТовара");
	возврат масВидов;
КонецФункции

//11.05.2018 - переформулирована задача - поиск не всех заказов, а только в том же маршруте
функция СуммаЗаказовВЭтойЖЕТочке(ЗакОб)
	СуммаДрЗаказов = 0;
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПокупателей.ЗаказПокупателя) КАК КоличествоДругихЗаказов,
	                |	СУММА(ЗаказыПокупателей.КоличествоОстаток) КАК КоличествоОстаток как Количество,
	                |	СУММА(ЗаказыПокупателей.СуммаУпрОстаток) КАК Сумма
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки(,
	                |			ЗаказПокупателя.Контрагент = &Контрагент
	                |				И ЗаказПокупателя.Подразделение = &Подразделение
	                |				И ЗаказПокупателя.ДатаОтгрузки  = &ДатаОтгрузки
	                |				И ЗаказПокупателя.ВМаршрут = ИСТИНА
	                |				И ЗаказПокупателя.Проведен = ИСТИНА
	                |				И ЗаказПокупателя.Проверен = ИСТИНА
	                |				И (ЗаказПокупателя.ВидАдреса = &ВидАдресаЗаказа
	                |					ИЛИ (ВЫРАЗИТЬ(ЗаказПокупателя.АдресДоставки КАК СТРОКА(500))) = &АдресДоставки)
	                |				И ЗаказПокупателя.Грузополучатель = &ГрузополучательЗаказа) КАК ЗаказыПокупателей
	                |ГДЕ
	                |	ЗаказыПокупателей.КоличествоОстаток > 0";
	 Запрос.УстановитьПараметр("Контрагент", ЗакОб.Контрагент );
	 Запрос.УстановитьПараметр("Подразделение", ЗакОб.Подразделение );
	 Запрос.УстановитьПараметр("ДатаОтгрузки", ЗакОб.ДатаОтгрузки );
	 
	 Запрос.УстановитьПараметр("АдресДоставки", СокрЛП(ЗакОб.АдресДоставки) ); //адрес в точности совпадает... скопировали...
	 Запрос.УстановитьПараметр("ВидАдресаЗаказа",ЗакОб.ВидАдреса );
	 Запрос.УстановитьПараметр("ГрузополучательЗаказа",ЗакОб.Грузополучатель );
	 	 
	 Результат = Запрос.Выполнить();
	 Если НЕ результат.Пустой() тогда
		табл = Результат.Выгрузить();
		СуммаДрЗаказов = табл[0].Сумма;
	 КонецЕсли;
	
	возврат СуммаДрЗаказов;
	
КонецФункции	

//5). проверка заказа после установки в маршрут 
Процедура СделатьПроверкуДляОтправкиКрышек(обДок)
	
	Если обДок.ВМаршрут и НЕ обДок.ТребуютсяКрышки Тогда  //[ ]Крышки выключена
		масПост = новый массив; 
		масПост.Добавить( справочники.Производители.НайтиПоКоду(65)  );
		масПост.Добавить( справочники.Производители.НайтиПоКоду(3333)); 
		масПост.Добавить( справочники.Производители.НайтиПоКоду(3754));
		
		ЕстьРеплика = ЛОЖЬ;
		Для каждого стр1 из обДок.Товары Цикл
			для ii=0 по масПост.Количество()-1 Цикл
				если стр1.Номенклатура.Производитель = масПост[ii] Тогда
					ЕстьРеплика = истина;
					прервать; //хотя бы 1 товар есть
				КонецЕсли;
			КонецЦикла;	
			если ЕстьРеплика Тогда прервать; КонецЕсли;
		КонецЦикла;	
		
		Если ЕстьРеплика Тогда
			обДок.ДатаГотовностиНаборки = обДок.ДатаОтгрузки + 17*3600;
			обДок.ТребуютсяКрышки = Истина; 
			
			//--- при сборке на любую дату - будет отправляться письмо по крышкам!
			//Если обДок.ДатаОтгрузки = НачалоДня( ТекущаяДата() ) Тогда 
			ТребуютсяКрышкиПриИзменении(обДок); 
			//КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

Процедура ТребуютсяКрышкиПриИзменении(обДок)
	//проверим наличие крышек на складе
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Номенклатура,
		|	ЗаказПокупателяТовары.Количество
		|ПОМЕСТИТЬ Док_ТЧ
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(Док_ТЧ.Количество) КАК Количество,
		|	КомплектующиеНоменклатуры.Комплектующая
		|ПОМЕСТИТЬ НужноКрышек
		|ИЗ
		|	Док_ТЧ КАК Док_ТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
		|		ПО Док_ТЧ.Номенклатура = КомплектующиеНоменклатуры.Номенклатура
		|ГДЕ
		|	КомплектующиеНоменклатуры.Комплектующая В ИЕРАРХИИ(&Крышки)
		|
		|СГРУППИРОВАТЬ ПО
		|	КомплектующиеНоменклатуры.Комплектующая
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НужноКрышек.Комплектующая,
		|	НужноКрышек.Количество КАК КоличествоТребуется,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток,
		|	НужноКрышек.Количество - ТоварыНаСкладахОстатки.КоличествоОстаток КАК Разница
		|ИЗ
		|	НужноКрышек КАК НужноКрышек
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				Склад.ЗапретитьИспользование = ЛОЖЬ
		|					И Склад.Транзитный = &Транзит) КАК ТоварыНаСкладахОстатки
		|		ПО НужноКрышек.Комплектующая = ТоварыНаСкладахОстатки.Номенклатура
		|ГДЕ
		|	НужноКрышек.Количество > ТоварыНаСкладахОстатки.КоличествоОстаток";

	Запрос.УстановитьПараметр("Крышки", Справочники.Номенклатура.НайтиПоКоду("0080004"));
	Запрос.УстановитьПараметр("Ссылка", обДок.Ссылка);
	Запрос.УстановитьПараметр("Транзит", ?(обДок.Подразделение.ОбособленноеПодразделение,Истина,Ложь));

	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой()Тогда
		Нехватка = Результат.Выгрузить();
		Для каждого стр из Нехватка Цикл
			#Если Клиент Тогда
				Сообщить("На складах не достаточно крышек "+стр.Комплектующая+" : "+стр.Разница+" шт.");
			#КонецЕсли	
	    КонецЦикла;                                      
	КонецЕсли;
	
	Если ЗначениеЗаполнено(обДок.ДатаГотовностиНаборки) Тогда
		//Плотников, отправлять печатную форму с крышками на почту наборщицам
		Если обДок.ТребуютсяКрышки и не обДок.ОтправленоПисьмоСКрышками и обДок.Проведен Тогда
				
			Если обДок.Подразделение.ОбособленноеПодразделение Тогда
				адр = ""; 
				Если обДок.Подразделение.Код = "00112" Тогда //24.04.2017 задача №25771 от Красюк
					//адр = "krishtop@yst.ru; smirnov@yst.ru"; 
					адр = "krishtop@yst.ru"; 
				КонецЕсли;
			Иначе	
				адр = "sbcaps@yandex.ru";
				//адр = "sbcaps@yandex.ru; smirnov@yst.ru";
			КонецЕсли;
			
			Если адр = "" Тогда 
				Возврат;
			КонецЕсли;	
				
				ОтправитьПисьмоСКрышки(обДок.Ссылка, обДок.ДатаГотовностиНаборки, адр);
				обДок.ОтправленоПисьмоСКрышками = Истина;
				обДок.КудаНестиКрышки="на склад";
				
				обДок.ОбменДанными.Загрузка = Истина; //запись в режиме обмена 
				обДок.Записать();
				обДок.ОбменДанными.Загрузка = ЛОЖЬ;
				
				ТРКомментарий = ПолучитьКомментарийДляВодителя(обДок.Ссылка);
				ТрКомментарий=ТрКомментарий+" ПЕРЕДАТЬ КРЫШКИ!!" ;
				ЗаписатьКомментарийДляВодителя(обДок.Ссылка, ТрКомментарий);
				
				#Если Клиент Тогда
					Сообщить("По заказу "+обДок.Номер+" Отправлено Письмо с крышками на "+адр);
				#КонецЕсли	
						
		ИначеЕсли обДок.ОтправленоПисьмоСКрышками Тогда	 	
			#Если Клиент Тогда
			Сообщить("По заказу "+обДок.Номер+" Письмо с крышками УЖЕ было отправлено ранее.");
			#КонецЕсли
		КонецЕсли;
	Иначе
		#Если Клиент Тогда
		Сообщить("По заказу "+обДок.Номер+" Не заполнена дата сборки и Письмо с крышками НЕ отправлено!", СтатусСообщения.Внимание);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры


//6).-------чтение и запись комментария для водителя-------------------
Функция ПолучитьКомментарийДляВодителя(ЗакСсылка)
Комм = ""; 	

	Запрос = Новый Запрос;  //все отгрузки по 1 заказу
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформацияПоПроезду.Заказ КАК Заказ,
	               |	ИнформацияПоПроезду.Комментарий
	               |ИЗ
	               |	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
	               |ГДЕ
	               |	ИнформацияПоПроезду.Заказ = &Заказ
	               |	И ИнформацияПоПроезду.НомерОчереди = -1
	               |";
	Запрос.УстановитьПараметр("Заказ", ЗакСсылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если  Выборка.Следующий() Тогда
		Комм = выборка.Комментарий;
	КонецЕсли;
 Возврат Комм;
КонецФункции

Процедура ЗаписатьКомментарийДляВодителя(ЗакСсылка, ТрКомментарий)

    Если СокрЛП(ТрКомментарий)<>"" Тогда // ЗАПИСЬ Комментария
		регСв = РегистрыСведений.ИнформацияПоПроезду.СоздатьМенеджерЗаписи();
		регСв.Заказ = ЗакСсылка;
		регСв.НомерОчереди = -1; // ДО ОТГРУЗКИ:  до -999 !
		регСв.Комментарий  = ТрКомментарий;
//------------------- доп.поля, НЕ меняем !!! -----------------------		
		регСв.ДоставкаНал   = 0;
		регСв.ДоставкаБНал  = 0;
		регСв.ДоставкаВЦене = 0;
		
		регСв.Записать(Истина); // перезаписать!
	Иначе
		регСв = РегистрыСведений.ИнформацияПоПроезду.СоздатьМенеджерЗаписи();
		регСв.Заказ = ЗакСсылка;
		регСв.НомерОчереди = -1; // ДО ОТГРУЗКИ:  до -999 !
        регСв.Удалить();
	КонецЕсли;	
КонецПроцедуры

//27.03.2018 - вспомогательная функция для АвтоОбъединения и АвтоПостановки в Маршрут
Процедура ЗаписатьЛОГвЖурналИзменений(Объект1, Событие1="", текст1 = "", НомЗаписи1 = 0 )
	стр1 = регистрыСведений.ЖурналИзменений.СоздатьМенеджерЗаписи();
	стр1.Период = ТекущаяДата();
	стр1.Объект  = Объект1;
	стр1.Событие = Событие1;
	стр1.Комментарий = текст1;
	стр1.НомерЗаписи = НомЗаписи1;
	//стр1.НомерСтроки = 1;
	//стр1.ОбъектМетаданных = Событие1;
	стр1.Компьютер = "SIGMA";
	стр1.Записать();
КонецПроцедуры
//+++)

//+++ 06.12.2018 - полная фнкция - делает расчет бонусов на дату документа
// возвращает таблицу значений: 
// Документ, 
// Номенклатура, 
// Бонус(руб)
//----------- дополнительно Цена и ПроцентБонуса ---------------
//
Функция ПолучитьБонусыПоставщиков( ДокСсылка, ТолькоНеНулевые = ИСТИНА) Экспорт
Запрос = Новый Запрос;       //  .СрезПоследних(&ДатаДок, БонусОтПродаж//УсловиеОтбора
Запрос.Текст = "ВЫБРАТЬ
               |	&ДокСсылка КАК Документ,
               |	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
               |	ВложенныйЗапрос.Цена * ЕСТЬNULL(ПравилаУстановкиБонусовПоставщиковСрезПоследних.ПроцентБонуса, 0) / 100 КАК Бонус,
               |	ВложенныйЗапрос.Цена КАК Цена,
               |	ЕСТЬNULL(ПравилаУстановкиБонусовПоставщиковСрезПоследних.ПроцентБонуса, 0) КАК ПроцентБонуса,
               |	ЕСТЬNULL(ПравилаУстановкиБонусовПоставщиковСрезПоследних.Приоритет, 99999) КАК Приоритет,
			   |	ЕСТЬNULL(ПравилаУстановкиБонусовПоставщиковСрезПоследних.СписокИсключений,"""") как СписокИсключенийКодовПокупателей
               |ИЗ
               |	(ВЫБРАТЬ
               |		ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
               |		ПоступлениеТоваровУслугТовары.Номенклатура.Производитель КАК Производитель,
               |		ПоступлениеТоваровУслугТовары.Номенклатура.НоменклатурнаяГруппа КАК НомГруппа,
               |		ПоступлениеТоваровУслугТовары.Номенклатура.Модель КАК Модель,
               |		ПоступлениеТоваровУслугТовары.Номенклатура.Типоразмер.Диаметр КАК Диаметр,
               |		ПоступлениеТоваровУслугТовары.Цена КАК Цена
               |	ИЗ
               |		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
               |	ГДЕ
               |		ПоступлениеТоваровУслугТовары.Ссылка = &ДокСсылка) КАК ВложенныйЗапрос
               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
               |			ПравилаУстановкиБонусов.Приоритет КАК Приоритет,
               |			ПравилаУстановкиБонусов.Производитель КАК Производитель,
               |			ПравилаУстановкиБонусов.НоменклатурнаяГруппа КАК НомГруппа,
               |			ПравилаУстановкиБонусов.ПроцентБонуса КАК ПроцентБонуса,
               |			ПравилаУстановкиБонусов.Модель КАК Модель,
               |			ПравилаУстановкиБонусов.Диаметр КАК Диаметр,
               |			ПравилаУстановкиБонусов.Номенклатура КАК Номенклатура,
			   |			ПравилаУстановкиБонусов.СтрокаСпискаИсключений как СписокИсключений
               |		ИЗ
               |			РегистрСведений.ПравилаУстановкиБонусовПоставщиков.СрезПоследних(&ДатаДок, 
			    |							     БонусОтПродаж=ЛОЖЬ И Контрагент=&Контрагент ) КАК ПравилаУстановкиБонусов
               |		ГДЕ
			   //действующие -----------------------------------------------------------------------------------------------
               |			ПравилаУстановкиБонусов.ПроцентБонуса <> 0) КАК ПравилаУстановкиБонусовПоставщиковСрезПоследних
			   
               |		ПО ВложенныйЗапрос.Производитель = ПравилаУстановкиБонусовПоставщиковСрезПоследних.Производитель
               |			И ВложенныйЗапрос.НомГруппа = ПравилаУстановкиБонусовПоставщиковСрезПоследних.НомГруппа
			   
			   //--- необязательные поля могут быть пустыми ----------------------------------------------------------------
               |			И (ВложенныйЗапрос.Номенклатура = ПравилаУстановкиБонусовПоставщиковСрезПоследних.Номенклатура
               |				ИЛИ ПравилаУстановкиБонусовПоставщиковСрезПоследних.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
               |			И (ВложенныйЗапрос.Модель = ПравилаУстановкиБонусовПоставщиковСрезПоследних.Модель
               |				ИЛИ ПравилаУстановкиБонусовПоставщиковСрезПоследних.Модель = ЗНАЧЕНИЕ(Справочник.МоделиТоваров.ПустаяСсылка))
               |			И (ВложенныйЗапрос.Диаметр = ПравилаУстановкиБонусовПоставщиковСрезПоследних.Диаметр
               |				ИЛИ ПравилаУстановкиБонусовПоставщиковСрезПоследних.Диаметр = """")
               |
			   |//НеНулевые  ГДЕ  ЕСТЬNULL(ПравилаУстановкиБонусовПоставщиковСрезПоследних.ПроцентБонуса, 0)<>0
               |
               |УПОРЯДОЧИТЬ ПО
               |	Номенклатура,
               |	Приоритет";
	Если ТолькоНеНулевые тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//НеНулевые", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	ДокСсылкаДата = ДокСсылка.Дата;
	ДокСсылкаДата = ?(ДокСсылкаДата = КонецДня(ДокСсылкаДата), ДокСсылкаДата-1, ДокСсылкаДата); //14.12.2018 устранение 0% последней секунды дня!
	Запрос.УстановитьПараметр("ДатаДок", ДокСсылкаДата);
	КодКонтрагента = ""; // для поиска исключений!    
	Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда //без ограничений по ИНН или первые 3 цифры
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ПоступлениеТоваровУслуг.", ".РеализацияТоваровУслуг.");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "=ЛОЖЬ И Контрагент=&Контрагент", " И (ИНН=&ИНН или ИНН="""") "); // необязательный параметр!
		Запрос.УстановитьПараметр("ИНН", Лев(ДокСсылка.Контрагент.ИНН,2) );
		КодКонтрагента = ","+сокрЛП(ДокСсылка.Контрагент.Код)+","; //в 2х запятых!
	Иначе//Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") тогда
		Запрос.УстановитьПараметр("Контрагент", ДокСсылка.Контрагент);
	КонецЕсли;	
	Результат = Запрос.Выполнить();
	табЗнач1 = Результат.Выгрузить(); 
	
//---------Обработка правил в порядке очередности----------
	ном0 = неопределено; i=0; N=табЗнач1.Количество();
	пока i<N цикл // число строк в документе небольшое N = 1-10, иногда N = 100-200
		стр1=табЗнач1[i];
		
		Если КодКонтрагента<>"" тогда
			Если Найти(стр1.СписокИсключенийКодовПокупателей, КодКонтрагента)>0 тогда //учёт исключений по покупателям
			табЗнач1.Удалить(i); N=N-1;
			КонецЕсли;
		КонецЕсли;
		
		Если ном0=стр1.Номенклатура тогда
			//+++ 27.12.2018 - складываем бонусы по 1 товару!
			Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда  
				табЗнач1[i-1].Бонус = табЗнач1[i-1].Бонус + табЗнач1[i].Бонус;
				табЗнач1[i-1].ПроцентБонуса = табЗнач1[i-1].ПроцентБонуса + табЗнач1[i].ПроцентБонуса;
			КонецЕсли;	
			//для Поступлений - действует ТОЛЬКО 1-ый по Приоритету! остальные удаляем!
			табЗнач1.Удалить(i); N=N-1;
		иначе	
			ном0=стр1.Номенклатура;
			i=i+1;		
		КонецЕсли;
	КонецЦикла;	
	
	возврат табЗнач1;
	
КонецФункции