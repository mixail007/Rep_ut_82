#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// РАБОЧЕЕ МЕСТО МЕНЕДЖЕРА ПО ПРОДАЖАМ

Процедура ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ИмяТЧ) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Структура") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	Если ((ИмяТЧ = "Товары" ИЛИ ИмяТЧ = "ВозвратнаяТара") И ПараметрыПеретаскивания.Значение.Номенклатура.Услуга)
	 ИЛИ (ИмяТЧ = "Услуги" И НЕ ПараметрыПеретаскивания.Значение.Номенклатура.Услуга) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСтрокуВТабличнуюЧастьЗаказа(СтруктураДанныхДобавления, ИмяТЧ, ЭтотОбъект, ЭтаФорма) Экспорт

	// Спросим про добавляемое количество
	КоличествоДобавления = 1;
	Если НЕ ВвестиЧисло(КоличествоДобавления, "Введите количество", 15, 3) Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоДобавления = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура", СтруктураДанныхДобавления.Номенклатура);
	Если ИмяТЧ = "Товары" Тогда
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтруктураДанныхДобавления.ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтруктураДанныхДобавления.ЕдиницаЦены);
	КонецЕсли;

	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ЭтотОбъект[ИмяТЧ], СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ИмяТЧ = "Товары" Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + КоличествоДобавления;
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			//РассчитатьСуммуСоСкидкамиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ИмяТЧ = "ВозвратнаяТара" Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + КоличествоДобавления;

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ИмяТЧ = "Услуги" Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + КоличествоДобавления;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			//РассчитатьСуммуСоСкидкамиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ЭтотОбъект[ИмяТЧ].Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = СтруктураДанныхДобавления.Номенклатура;

		Если ИмяТЧ = "Товары" Тогда

			СтрокаТабличнойЧасти.Количество       = КоличествоДобавления;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанныхДобавления.ЕдиницаЦены;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтруктураДанныхДобавления.ХарактеристикаНоменклатуры;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(СтруктураДанныхДобавления.ЦенаНоменклатуры, СтруктураДанныхДобавления.ВалютаЦены, ЭтотОбъект.ВалютаДокумента, КурсДокумента(ЭтотОбъект, ЭтотОбъект.мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, ЭтотОбъект.мВалютаРегламентированногоУчета), ЭтотОбъект.Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,,
			                                                 ЭтотОбъект.ТипЦен.ЦенаВключаетНДС,
			                                                 ЭтотОбъект.УчитыватьНДС,
			                                                 ЭтотОбъект.СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			// Рассчитываем плановую себестоимость.
			РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ЭтотОбъект.мВалютаРегламентированногоУчета);

		ИначеЕсли ИмяТЧ = "ВозвратнаяТара" Тогда

			СтрокаТабличнойЧасти.Количество       = КоличествоДобавления;

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(СтруктураДанныхДобавления.ЦенаНоменклатуры, СтруктураДанныхДобавления.ВалютаЦены, ЭтотОбъект.ВалютаДокумента, КурсДокумента(ЭтотОбъект, ЭтотОбъект.мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, ЭтотОбъект.мВалютаРегламентированногоУчета), ЭтотОбъект.Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НД
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,,
			                                     ЭтотОбъект.ТипЦен.ЦенаВключаетНДС,
			                                     ЭтотОбъект.УчитыватьНДС,
			                                     Истина,
			                                     ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ИмяТЧ = "Услуги" Тогда

			СтрокаТабличнойЧасти.Количество       = КоличествоДобавления;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(СтруктураДанныхДобавления.ЦенаНоменклатуры, СтруктураДанныхДобавления.ВалютаЦены, ЭтотОбъект.ВалютаДокумента, КурсДокумента(ЭтотОбъект, ЭтотОбъект.мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, ЭтотОбъект.мВалютаРегламентированногоУчета), ЭтотОбъект.Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,,
			                                                 ЭтотОбъект.ТипЦен.ЦенаВключаетНДС,
			                                                 ЭтотОбъект.УчитыватьНДС,
			                                                 ЭтотОбъект.СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ИмяТЧ, ЭтотОбъект, ЭтаФорма) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Структура") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	Если ((ИмяТЧ = "Товары" ИЛИ ИмяТЧ = "ВозвратнаяТара") И ПараметрыПеретаскивания.Значение.Номенклатура.Услуга)
	 ИЛИ (ИмяТЧ = "Услуги" И НЕ ПараметрыПеретаскивания.Значение.Номенклатура.Услуга) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	ДобавитьСтрокуВТабличнуюЧастьЗаказа(ПараметрыПеретаскивания.Значение, ИмяТЧ, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура РегистрироватьНовогоКонтрагента(Элемент, Текст, Значение, СтандартнаяОбработка, мТайпингКонтрагента, мТекстТайпингаКонтрагента, мПоследнееЗначениеЭлементаТайпингаКонтрагент, ЭтаФорма, Контрагент, КонтактноеЛицо, Модифицированность, ДанныеНезарегистрированногоКонтрагента) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Элемент.Значение) <> Тип("Строка") Тогда
	
		ТекстВопроса = "Контрагент не найден. Зарегистрировать данные нового контрагента?";
		
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
		
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
				мТайпингКонтрагента = Истина;
				мТекстТайпингаКонтрагента = Текст;
			Иначе
				Значение = мПоследнееЗначениеЭлементаТайпингаКонтрагент;
			КонецЕсли; 
			Возврат;
		КонецЕсли;
		
		ОбработкаРедактирования = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
		ОбработкаРедактирования.Запись = ДанныеНезарегистрированногоКонтрагента;
		ФормаРегистрацииНовогоКонтрагента = ОбработкаРедактирования.ПолучитьФорму(, ЭтаФорма);
		
		ФормаРегистрацииНовогоКонтрагента.ЗаполнитьНачальныеДанные();
		ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента = Текст;
		Если ТипЗнч(КонтактноеЛицо) = Тип("Строка") Тогда
			ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица = КонтактноеЛицо;
		КонецЕсли; 
		
		ФормаРегистрацииНовогоКонтрагента.ОткрытьМодально();
		
		Значение       = ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента;
		Контрагент     = ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента;
		КонтактноеЛицо = ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица;
		
		//Модифицированность = Истина;
		
	Иначе
		
		Значение = Текст;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура перехватывает событие начала выбора контактного лица контрагента
//
// Параметры
//  Элемент - элемент управления, выбора контактного лица контрагента
//  СтандартнаяОбработка - булево
//  СтандартнаяОбработка - булево
//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
//
Процедура НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.КонтактныеЛица.ПолучитьФормуВыбора(, Элемент);
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Отбор.Сбросить();
	КонецЕсли; 
	Если ЗначениеНеЗаполнено(Контрагент) ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		ФормаВыбора.Отбор.ВидКонтактногоЛица.Значение      = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
		ФормаВыбора.Отбор.ВидКонтактногоЛица.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидКонтактногоЛица.Доступность = Ложь;
	Иначе
		ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.Видимость = Ложь;
		ФормаВыбора.Отбор.ОбъектВладелец.Значение      = Контрагент;
		ФормаВыбора.Отбор.ОбъектВладелец.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ОбъектВладелец.Доступность = Ложь;
	КонецЕсли; 
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.ТекстШапки = "Контрагент";
	ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ВидКонтактногоЛица.Видимость = Ложь;
	
	ФормаВыбора.Заголовок = "Справочник Контактные лица контрагентов";
	
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура перехватывает событие начала выбора прочего контактного лица
//
// Параметры
//  Элемент - элемент управления, выбора контактного лица контрагента
//  СтандартнаяОбработка - булево
//  СтандартнаяОбработка - булево
//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
//
Процедура НачалоВыбораПрочегоКонтактногоЛица(Элемент, СтандартнаяОбработка, Пользователь = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.КонтактныеЛица.ПолучитьФормуВыбора(, Элемент);
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Отбор.Сбросить();
	КонецЕсли; 
	
	ФормаВыбора.Отбор.ВидКонтактногоЛица.Значение      = Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо;
	ФормаВыбора.Отбор.ВидКонтактногоЛица.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидКонтактногоЛица.Доступность = Ложь;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") И НЕ ЗначениеНеЗаполнено(Пользователь) Тогда
		ФормаВыбора.Отбор.ОбъектВладелец.Значение      = Пользователь;
		ФормаВыбора.Отбор.ОбъектВладелец.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ОбъектВладелец.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ВидКонтактногоЛица.Видимость = Ложь;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.ТекстШапки = "Ответственный";
	
	ФормаВыбора.Заголовок = "Справочник Прочие контактные лица";
	
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура перехватывает событие начала выбора прочего контактного лица
//
// Параметры
//  Элемент - элемент управления, выбора контактного лица контрагента
//  СтандартнаяОбработка - булево
//  СтандартнаяОбработка - булево
//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
//
Процедура НачалоВыбораЛичныхКонтактов(Элемент, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.КонтактныеЛица.ПолучитьФормуВыбора(, Элемент);
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Отбор.Сбросить();
	КонецЕсли; 
	
	ФормаВыбора.Отбор.ВидКонтактногоЛица.Значение      = Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт;
	ФормаВыбора.Отбор.ВидКонтактногоЛица.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидКонтактногоЛица.Доступность = Ложь;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ВидКонтактногоЛица.Видимость = Ложь;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.ТекстШапки = "Ответственный";
	ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.Видимость = Ложь;
	
	ФормаВыбора.Заголовок = "Справочник Личные контакты";
	
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура открывает форму списка справочника контактные лица,
//с признаком контактные лица контрагентов
///
Процедура ОткрытьСписокКонтактныхЛицКонтрагентов() Экспорт

	ФормаСписка = Справочники.КонтактныеЛица.ПолучитьФормуСписка(,, "КонтактныеЛицаКонтрагентов");
	Если ФормаСписка.Открыта() Тогда
		ФормаСписка.Активизировать();
		Возврат;
	КонецЕсли; 
	
	ФормаСписка.Отбор.ВидКонтактногоЛица.Значение      = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
	ФормаСписка.Отбор.ВидКонтактногоЛица.Использование = Истина;
	
	ФормаСписка.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.ТекстШапки = "Контрагент";
	ФормаСписка.ЭлементыФормы.СправочникСписок.Колонки.ВидКонтактногоЛица.Видимость = Ложь;
	
	ФормаСписка.Заголовок = "Справочник Контактные лица контрагентов";
	
	ФормаСписка.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидКонтактногоЛица.Доступность = Ложь;
	
	ФормаСписка.Открыть();

КонецПроцедуры

// Процедура открывает форму списка справочника контактные лица,
//с признаком контактные лица контрагентов
///
Процедура ОткрытьСписокПрочихКонтактныхЛиц() Экспорт

	ФормаСписка = Справочники.КонтактныеЛица.ПолучитьФормуСписка(,, "ПрочиеКонтактныеЛица");
	Если ФормаСписка.Открыта() Тогда
		ФормаСписка.Активизировать();
		Возврат;
	КонецЕсли;
	
	ФормаСписка.Отбор.ВидКонтактногоЛица.Значение      = Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо;
	ФормаСписка.Отбор.ВидКонтактногоЛица.Использование = Истина;
	
	ФормаСписка.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.ТекстШапки = "Ответственный";
	
	ФормаСписка.ЭлементыФормы.СправочникСписок.Колонки.ВидКонтактногоЛица.Видимость = Ложь;
	
	ФормаСписка.Заголовок = "Справочник Прочие контактные лица";
	
	ФормаСписка.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидКонтактногоЛица.Доступность = Ложь;
	
	ФормаСписка.Открыть();

КонецПроцедуры

// Процедура открывает форму списка справочника контактные лица,
//с признаком личные контакты
///
Процедура ОткрытьСписокЛичныхКонтактов() Экспорт

	ФормаСписка = Справочники.КонтактныеЛица.ПолучитьФормуСписка(,, "ЛичныеКонтакты");
	Если ФормаСписка.Открыта() Тогда
		ФормаСписка.Активизировать();
		Возврат;
	КонецЕсли;
	
	ФормаСписка.Отбор.ВидКонтактногоЛица.Значение      = Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт;
	ФормаСписка.Отбор.ВидКонтактногоЛица.Использование = Истина;
	
	ФормаСписка.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.ТекстШапки = "Ответственный";
	
	ФормаСписка.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.Видимость     = Ложь;
	ФормаСписка.ЭлементыФормы.СправочникСписок.Колонки.ВидКонтактногоЛица.Видимость = Ложь;
	
	ФормаСписка.Заголовок = "Справочник Личные контакты";
	
	ФормаСписка.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидКонтактногоЛица.Доступность = Ложь;
	
	ФормаСписка.Открыть();

КонецПроцедуры

// Процедура обрабатывает событие ПередНачаломДобавления в форме списка
// справочника КонтактныеЛицаКонтрагентов
//
Процедура ПередНачаломДобавленияКонтактногоЛица(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, СправочникСписок, ЭтаФорма) Экспорт

	Если НЕ ЭтоГруппа
	   И НЕ Копирование
	   И ((СправочникСписок.Отбор.ОбъектВладелец.Использование И СправочникСписок.Отбор.ОбъектВладелец.ВидСравнения = ВидСравнения.Равно)
	 ИЛИ (СправочникСписок.Отбор.ВидКонтактногоЛица.Использование И СправочникСписок.Отбор.ВидКонтактногоЛица.ВидСравнения = ВидСравнения.Равно)) Тогда
	
		Отказ = Истина;
		
		НовыйОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
		Если СправочникСписок.Отбор.ОбъектВладелец.Использование Тогда
			НовыйОбъект.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
			НовыйОбъект.ОбъектВладелец     = СправочникСписок.Отбор.ОбъектВладелец.Значение;
		Иначе
			НовыйОбъект.ВидКонтактногоЛица = СправочникСписок.Отбор.ВидКонтактногоЛица.Значение;
		КонецЕсли; 
		
		НовыйОбъект.ПолучитьФорму(, ЭтаФорма).Открыть();
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ НАПОМИНАНИЙ

// Функция Определяет картинку дял напоминания
//
// Параметры
//  Напоминание - Произвольный, объект напоминания
//
// Возвращаемое значение:
//  Картинка - Картинка
//
Функция ПолучитьКартинкуНапоминания(Напоминание) Экспорт

	ИндексВозврата = ОпределитьИндексКартинкиВидаСобытия(Напоминание);

	Если ИндексВозврата = 0 Тогда
		Возврат БиблиотекаКартинок.ПрочееСобытие;

	ИначеЕсли ИндексВозврата = 1 Тогда
		Возврат БиблиотекаКартинок.ТелефонныйЗвонок;

	ИначеЕсли ИндексВозврата = 2 Тогда
		Возврат БиблиотекаКартинок.ЛичнаяВстреча;

	ИначеЕсли ИндексВозврата = 3 Тогда
		Возврат БиблиотекаКартинок.ЭлектронноеПисьмо;

	ИначеЕсли ИндексВозврата = 4 Тогда
		Возврат БиблиотекаКартинок.ПочтовоеПисьмо;
		
	ИначеЕсли ИндексВозврата = 5 Тогда
		Возврат БиблиотекаКартинок.ЖурналБанковскиеВыписки;
	

	ИначеЕсли ИндексВозврата = 6 Тогда
		Возврат БиблиотекаКартинок.ЗаказПокупателя;

	ИначеЕсли ИндексВозврата = 9 Тогда
		Возврат БиблиотекаКартинок.ЗаказПоставщику;

	ИначеЕсли ИндексВозврата = 8 Тогда
		Возврат Новый Картинка;

	Иначе
		Возврат БиблиотекаКартинок.Важно;

	КонецЕсли;

КонецФункции //ПолучитьКартинкуНапоминания()

// Процедура показывает формы Напоминаний.
// 
//  Параметры
//   ТаблицаНапоминаний - ТаблицаЗначений, с Напоминаниями
//
Процедура ОбработкаСпискаНапоминаний(ТаблицаНапоминаний)

	ФормаНапоминания = ПолучитьОбщуюФорму("ФормаНапоминания",,"Уникум");
	ФормаНапоминания.ОбновитьТаблицуНапоминаний(ТаблицаНапоминаний);

	Если ФормаНапоминания.Открыта() Тогда
		ФормаНапоминания.Активизировать();
	Иначе
		ФормаНапоминания.Открыть();
	КонецЕсли;

КонецПроцедуры // ОбработкаСпискаНапоминаний()

// Процедура вызывается по событию НачалоВыбораИзСписка
// у полей ввода, в которых редактируются даты со временем.
// 
//  Параметры
//   ЭлементУправления - ПолеВвода, в котором редактируется значение даты
//   ЭтаФорма - Форма
//   Пользователь - СправочникСсылка.Пользователи
//   СтандартнаяОбработка - булево
//   ПолныйГод - Булево, предсавление года даты в списке выбора
//
Процедура ВыбратьВремяИзСписка(ЭлементУправления, ЭтаФорма, Пользователь, СтандартнаяОбработка, ПолныйГод = Истина) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ДатаВремени = ЭлементУправления.Значение;
	
	СтруктураРабочихВремен = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
	
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоДня(ДатаВремени)+Час(СтруктураРабочихВремен.ДатаНачала)*60*60+Минута(СтруктураРабочихВремен.ДатаНачала)*60;
	ОкончаниеРабочегоДня = НачалоДня(ДатаВремени)+Час(СтруктураРабочихВремен.ДатаОкончания)*60*60+Минута(СтруктураРабочихВремен.ДатаОкончания)*60 - 60*60;

	НачалоРабочегоДняДляСпискаВыбора = НачалоЧаса(НачалоРабочегоДня);
	а = 0;
	Пока 1=1 Цикл
		ВремяСписка = НачалоРабочегоДняДляСпискаВыбора + а*30*60;
		Если НачалоЧаса(ВремяСписка) > НачалоЧаса(ОкончаниеРабочегоДня) Тогда
			Прервать;
		КонецЕсли;
		Если ПолныйГод Тогда
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гггг ЧЧ:мм'"));
		Иначе
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг ЧЧ:мм'"));
		КонецЕсли; 
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремени);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ЭлементУправления);
	Иначе
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ЭлементУправления, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ЭлементУправления.Значение = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура проверяет Напоминания из регистра.
// 
//  Параметры
//   ТаблицаНапоминаний - ТаблицаЗначений, с Напоминаниями
//
Процедура ПроверитьНапоминанияПользователя(ВыбПользователь, ПроверятьДеньРождения = Ложь) Экспорт

	РезультирующаяТаблица = Новый ТаблицаЗначений;
	РезультирующаяТаблица.Колонки.Добавить("ДокументНапоминания");
	РезультирующаяТаблица.Колонки.Добавить("Пользователь");
	РезультирующаяТаблица.Колонки.Добавить("ДатаНапоминания");
	РезультирующаяТаблица.Колонки.Добавить("Тема");
	РезультирующаяТаблица.Колонки.Добавить("Контрагент");
	РезультирующаяТаблица.Колонки.Добавить("КонтактноеЛицо");
	РезультирующаяТаблица.Колонки.Добавить("ТекстНапоминания");
	РезультирующаяТаблица.Колонки.Добавить("ФлагДеньРождения");
	
	Запрос = Новый Запрос;
	
	ЗадержкаВСекундах = ПолучитьЗначениеПоУмолчанию(ВыбПользователь, "ИнтервалНапоминанияДоНачалаСобытия") * 60; // в минутах до 99!
	Если ЗадержкаВСекундах = 0 тогда
		ЗадержкаВСекундах = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();  //300 сек. = 5 мин
	КонецЕсли;
	
	ДатаСреза = ТекущаяДата() - ЗадержкаВСекундах;  // в течение ИнтервалПроверкиНапоминанийВСекундах - не показывать ничего
	
	Запрос.УстановитьПараметр("ДатаСреза"       , ДатаСреза);
	Запрос.УстановитьПараметр("ДатаСрезаНач"       , НачалоДня(ДатаСреза) );
	Запрос.УстановитьПараметр("ДатаСрезаКон"       , КонецДня(ДатаСреза) );
	
//+++( 17.03.2017 --- по задаче от Хачатурян - нужны напоминания по всем её пользователям
//был 1 пользователь: Запрос.УстановитьПараметр("ВыбПользователь" , ВыбПользователь);
	Если ЗначениеЗаполнено(ВыбПользователь.ФизЛицо) Тогда
	     Запрос1 = Новый Запрос;
		 Запрос1.Текст = "ВЫБРАТЬ Ссылка как Пользователь
						|ИЗ Справочник.Пользователи КАК Пользователи
		 				|ГДЕ ФизЛицо = &ФизЛицо";
		 Запрос1.УстановитьПараметр("ФизЛицо", ВыбПользователь.ФизЛицо); // по себе
		 Результат1 = Запрос1.Выполнить();
		 табл1 = Результат1.Выгрузить();
		СписокВыбПользователей = новый СписокЗначений;
		СписокВыбПользователей.ЗагрузитьЗначения( табл1.ВыгрузитьКолонку("Пользователь") );
	Иначе //как было раньше
		СписокВыбПользователей = новый СписокЗначений;
		СписокВыбПользователей.Добавить(ВыбПользователь);
	КонецЕсли;
Запрос.УстановитьПараметр("СписокВыбПользователей" , ВыбПользователь);
//+++)

	Запрос.УстановитьПараметр("СостояниеСобытия", Перечисления.СостоянияСобытий.Запланировано);
	
	//24.08.2016 - для ускорения - уменьшаем выборку,  очень старые события - НЕ выкидываем в напоминалке!
	Запрос.УстановитьПараметр("НачДата", ДобавитьМесяц( НачалоДня( ТекущаяДата() ), -1) ); 
	
	Запрос.Текст = "ВЫБРАТЬ 
	            	|	""Событие"" как ТипДок,
				   |	Событие.Ссылка КАК ДокументНапоминания,
	               |	Событие.Ответственный КАК Пользователь,
	               |	Событие.ВремяНапоминания КАК ДатаНапоминания,
	               |	Событие.ВидСобытия КАК Тема,
	               |	Событие.Контрагент КАК Контрагент,
	               |	Событие.КонтактноеЛицо КАК КонтактноеЛицо,
	               |	Событие.ОписаниеСобытия КАК ОписаниеСобытия,
	               |	Событие.НачалоСобытия КАК НачалоСобытия,
	               |	Событие.ОкончаниеСобытия КАК ОкончаниеСобытия
	             //  |	, NULL КАК Склад,
	             //  |	NULL КАК СтруктурнаяЕдиница
				   |	, 0 как СуммаДокумента,
	               |	""руб."" КАК ВалютаДокумента
	               |ИЗ
	               |	Документ.Событие КАК Событие
	               |ГДЕ
	               |	Событие.НапомнитьОСобытии = ИСТИНА
	               |	И Событие.Дата >= &НачДата
	               |	И Событие.ВремяНапоминания <= &ДатаСреза
				   
				   //17.03.2017 |	И Событие.Ответственный = &ВыбПользователь
				   |	И Событие.Ответственный В (&СписокВыбПользователей)
				   
	               |	И Событие.Проведен
	               |	И Событие.СостояниеСобытия = &СостояниеСобытия
	               |
				//   |ОБЪЕДИНИТЬ ВСЕ
				//   |
				//   |ВЫБРАТЬ
				//|	""зак.покупателю"",
				//   |	Заказы.ЗаказПокупателя,
				//   |	Заказы.ЗаказПокупателя.Ответственный,
				//   |	Заказы.ЗаказПокупателя.ВремяНапоминания,
				//   |	""Заказ с сайта"",
				//   |	Заказы.ДоговорКонтрагента.Владелец,
				//   |	Заказы.ЗаказПокупателя.КонтактноеЛицо,
				//   |	NULL,
				//   |	NULL,
				//   |	NULL
				// //  |	, Заказы.ЗаказПокупателя.Склад,
				// //  |	Заказы.ЗаказПокупателя.СтруктурнаяЕдиница,
				//   |	, Заказы.ЗаказПокупателя.СуммаДокумента,
				//   |	Заказы.ЗаказПокупателя.ВалютаДокумента
				//   |ИЗ
				//   |	регистрНакопления.ЗаказыПокупателей.Обороты(&ДатаСрезаНач, &ДатаСрезаКон, ,
				//   |	ЗаказПокупателя.НапомнитьОСобытии
				//   |	И ЗаказПокупателя.ССайта
				//   |	И ЗаказПокупателя.Дата >= &НачДата
				//  	
				//   //17.03.2017 - всегда меньше текущей даты и поле не индексное очень долго ищет!
				//	//  |	И ЗаказПокупателя.ВремяНапоминания <= &ДатаСреза
				//	
				//  //17.03.2017 |	И ДоговорКонтрагента.ОтветственноеЛицо = &ВыбПользователь
				//   |	И ДоговорКонтрагента.ОтветственноеЛицо В (&СписокВыбПользователей)
				//   
				//   |	)  КАК Заказы

				//   |
				   |ОБЪЕДИНИТЬ ВСЕ
							   
				    |ВЫБРАТЬ
					|	""зак.поставщику"",
				   |	Заказы2.ЗаказПоставщику,
				   |	Заказы2.ЗаказПоставщику.Ответственный,
				   |	Заказы2.ЗаказПоставщику.ВремяНапоминания,
				    |	""Заказ с сайта"",
				   |	Заказы2.ДоговорКонтрагента.Владелец,
				   |	Заказы2.ЗаказПоставщику.КонтактноеЛицо,
				   |	NULL,
				   |	NULL,
				   |	NULL
				 |	, Заказы2.ЗаказПоставщику.СуммаДокумента,
				 |	Заказы2.ЗаказПоставщику.ВалютаДокумента
				   |ИЗ
				   |	РегистрНакопления.ЗаказыПоставщикам.Остатки(,
				   |	ЗаказПоставщику.НапомнитьОСобытии = ИСТИНА 
				   |	И естьNull(Подразделение.ВЭД,ЛОЖЬ) = ЛОЖЬ
				   
				   //17.03.2017 - всегда меньше текущей даты!
				  //|	И ЗаказПоставщику.ВремяНапоминания <= &ДатаСреза
				  
				   |	И ЗаказПоставщику.Дата>=&ДатаСрезаНач 
				   //|	И ЗаказПоставщику.Дата<=&ДатаСрезаКон
				   
				   //+++ 17.03.2017 |	И ДоговорКонтрагента.ОтветственноеЛицо = &ВыбПользователь
				   |	И ДоговорКонтрагента.ОтветственноеЛицо В (&СписокВыбПользователей) 
				   
				   |)  КАК Заказы2

				   |";
				   
	//========================Задачи======================================
   
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

  		//+++ 24.08.2016 =====================================================
		//ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
        //Для каждого Напоминание Из ТаблицаЗапроса Цикл
		Напоминание = РезультатЗапроса.выбрать();
		Пока Напоминание.Следующий() цикл
			 Если ЗначениеНеЗаполнено(Напоминание.ДокументНапоминания) Тогда
                 продолжить;
			 КонецЕсли;
			 
				Док = Напоминание.ДокументНапоминания;

				СтрокаРезТаблицы = РезультирующаяТаблица.Добавить();
				СтрокаРезТаблицы.ДокументНапоминания = Напоминание.ДокументНапоминания;
				СтрокаРезТаблицы.Пользователь        = ВыбПользователь;
				СтрокаРезТаблицы.ДатаНапоминания     = Напоминание.ДатаНапоминания;
				СтрокаРезТаблицы.Контрагент          = Напоминание.Контрагент;
				СтрокаРезТаблицы.КонтактноеЛицо      = Напоминание.КонтактноеЛицо;
				
				СтрокаРезТаблицы.ТекстНапоминания = Строка(Док);
				//Если ТипЗнч(Док) = Тип("ДокументСсылка.Событие") И СтрЧислоВхождений(Док.ОписаниеСобытия, "День рождения") > 0 Тогда
				//	СтрокаРезТаблицы.ФлагДеньРождения = Истина;
				//Иначе
					СтрокаРезТаблицы.ФлагДеньРождения = Ложь;
				//КонецЕсли; 
				
			//	Если ТипЗнч(Док) = Тип("ДокументСсылка.Событие") Тогда
				Если Напоминание.ТипДок = "Событие" тогда
					СтрокаРезТаблицы.Тема = Строка(Напоминание.Тема);
					СтрокаРезТаблицы.ТекстНапоминания = Напоминание.ОписаниеСобытия + Символы.ПС + "с " + ?(ЗначениеНеЗаполнено(Напоминание.НачалоСобытия), "Не задано",Формат(Напоминание.НачалоСобытия, "ДФ='dd.MM.yyyy (HH:mm)'")) + " по " + ?(ЗначениеНеЗаполнено(Напоминание.ОкончаниеСобытия), "Не задано",Формат(Напоминание.ОкончаниеСобытия, "ДФ='dd.MM.yyyy (HH:mm)'")) + Символы.ПС + СтрокаРезТаблицы.ТекстНапоминания;
				Иначе
					СтрокаРезТаблицы.Тема = Напоминание.Тема;
					СуммаДокумента = //ФорматСумм(ПолучитьСуммуДокументаСНДС(Док, "Товары"));
									  Напоминание.СуммаДокумента;
					//СтрокаРезТаблицы.ТекстНапоминания = "Склад: " + Строка(Напоминание.Склад) + ", Банк/Касса: " + Строка(Напоминание.СтруктурнаяЕдиница) + Символы.ПС + "Сумма заказа: " + СуммаДокумента + " " + ?(ЗначениеНеЗаполнено(Напоминание.ВалютаДокумента),"",СокрЛП(Напоминание.ВалютаДокумента)) + Символы.ПС + СтрокаРезТаблицы.ТекстНапоминания;
					СтрокаРезТаблицы.ТекстНапоминания = "Получен заказ через интернет: "+ Символы.ПС + "Сумма заказа: " + СуммаДокумента + " " + ?(ЗначениеНеЗаполнено(Напоминание.ВалютаДокумента),"",СокрЛП(Напоминание.ВалютаДокумента)) + Символы.ПС + СтрокаРезТаблицы.ТекстНапоминания;
				КонецЕсли;

		
		КонецЦикла; 

	КонецЕсли;

	ОбработкаСпискаНапоминаний(РезультирующаяТаблица);

	ПроверитьНапоминанияПользователяПоЗадачам(ВыбПользователь);  //+++ вызовем тут же !

	
КонецПроцедуры // ПроверитьНапоминанияПользователя()

//+++ из УТ10.3
// Процедура проверяет Задачи.
//
Процедура ПроверитьНапоминанияПользователяПоЗадачам(ВыбПользователь)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗадачиПользователяЗадачиПоИсполнителю.Ссылка
	               |ИЗ
	               |	Задача.ЗадачиПользователя.ЗадачиПоИсполнителю( &ТекПользователь,
	               |			Выполнена = ЛОЖЬ
	               |				И Оповещение = ИСТИНА
	               |				И СрокОповещения >= &ДатаНач
	               |				И СрокОповещения <= &ДатаСреза
	               |				И ПометкаУдаления = ЛОЖЬ) КАК ЗадачиПользователяЗадачиПоИсполнителю
	                |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗадачиПользователяЗадачиПоИнициатору.Ссылка
	               |ИЗ
	               |	Задача.ЗадачиПользователя.ЗадачиПоИсполнителю( ,
	               |			Инициатор = &ТекПользователь
	               |				И Инициатор <> Исполнитель
	               |				И Выполнена = ИСТИНА
	               |				И Оповещение = ИСТИНА
	               |				И СрокОповещения >= &ДатаНач
	               |				И СрокОповещения < &ДатаСреза
	               |				И ПометкаУдаления = ЛОЖЬ) КАК ЗадачиПользователяЗадачиПоИнициатору
	               |";


	Запрос.УстановитьПараметр("ТекПользователь", ВыбПользователь);
	Запрос.УстановитьПараметр("ДатаНач"        , ДобавитьМесяц( ТекущаяДата(), -1) ); //24.08.2016 не более 1 месяца!
	Запрос.УстановитьПараметр("ДатаСреза"      , ТекущаяДата());
	
	ФормаОповещения = задачи.ЗадачиПользователя.ПолучитьФорму("ФормаОповещенияОЗадачах");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Если НЕ ФормаОповещения.Открыта() Тогда
			
			ФормаОповещения.Открыть();
			
		КонецЕсли;
		
		ВыгрузкаДляСверки = РезультатЗапроса.Выгрузить();
		ФормаОповещения.АктивизироватьФорму(ВыгрузкаДляСверки);
		
	Иначе
		
		Если ФормаОповещения.Открыта() Тогда
			ФормаОповещения.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНапоминанияПользователя()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДОПОЛНИТЕЛЬНЫХ УСЛОВИЙ ПО ДОГОВОРАМ ВЗАИМОРАСЧЕТОВ

// Процедура формирует отчет для анализа условий поставок по договорам взаиморасчетов
//
// Параметры:
//  Ссылка - ДокументСсылка.УсловияПоставокПоДоговорамКонтрагентов
//
Процедура СформироватьАнализУсловийДоговораВзаиморасчетов(ТекущийПользователь, Ссылка) Экспорт

	Если ТипЗнч(Ссылка) <> Тип("ДокументСсылка.УсловияПоставокПоДоговорамКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	
	Отчет = Отчеты.ВыполнениеУсловийПоДоговорамКонтрагентов.Создать();
	Отчет.ДатаНачала                           = ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяДатаНачалаОтчетов");
	Отчет.ДатаОкончания                        = ТекущаяДата();
	Отчет.ГруппировкаКонтрагент                = Истина;
	Отчет.ГруппировкаДоговорКонтрагента        = Истина;
	Отчет.ГруппировкаДокументУсловий           = Истина;
	Отчет.ГруппировкаДокументВыполненияУсловий = Истина;
	Отчет.РаскрашиватьГруппировки              = Истина;
	
	ЭлементОтбора = Отчет.Отбор.Добавить("ДокументУсловий",, "Документ условий");
	ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
	ЭлементОтбора.Значение      = Ссылка;
	ЭлементОтбора.Использование = Истина;
	
	ФормаОтчета = Отчет.ПолучитьФорму("Форма");
	
	ФормаОтчета.НеЗаполнятьНастройкиПриОткрытии = Истина;
	
	Отчет.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ТабличныйДокумент);
	
	ФормаОтчета.Открыть();

КонецПроцедуры

// Функция определяет календарные потребности в номенклатуре с учетом планируемых и реальных складских остатков и резервов номенклатуры
//
// Параметры
//  
//  ДатаНачала            - Дата, дата начала периода анализа потребностей
//  ДатаОкончания         - Дата, дата окончания периода анализа потребностей
//  ФильтрПоНоменклатуре  - Маасив, номенклатура по которой необходимо производить анализ
//  МассивПолейТаблицы    - Массив, имена полей результирующей таблицы, как они заданы в конфигураторе в 
//                          регистре сведений КалендарныеПотребностиВНоменклатуре, которые надо формировать помимо обязательных
//                          обязательнями являются: Номенклатура, ХарактеристикаНоменклатуры, ДатаПотребности, ЗаказПокупателя, КоличествоПлана
//
// Возвращаемое значение:
//   ТаблицаЗначений - потребности в номенклатуре, колонки:
//     Номенклатура, ДатаПотребности, ХарактеристикаНоменклатуры, ЗаказПокупателя, КоличествоПлана
//
Функция ПолучитьПотребностиВНоменклутуре(ДатаНачала, ДатаОкончания, ФильтрПоНоменклатуре = Неопределено, МассивПолейТаблицы = Неопределено, ВидСравненияНоменклатура = Неопределено) Экспорт

	// Потребность в номенкатуре
	Запрос = Новый Запрос;
	
	Если ВидСравненияНоменклатура = Неопределено Тогда
		ВидСравненияНоменклатура = ВидСравнения.ВСпискеПоИерархии;
	КонецЕсли;
	
	СписокОбязательныхПолей = Новый СписокЗначений;
	СписокОбязательныхПолей.Добавить("Номенклатура"              , "Номенклатура");
	СписокОбязательныхПолей.Добавить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СписокОбязательныхПолей.Добавить("ДатаПотребности"           , "ДатаПотребности");
	СписокОбязательныхПолей.Добавить("Заказ"                     , "ЗаказПокупателя");
	
	Если ТипЗнч(МассивПолейТаблицы) = Тип("Массив") Тогда
		Для каждого ИмяПоля Из МассивПолейТаблицы Цикл
			Если СписокОбязательныхПолей.НайтиПоЗначению(ИмяПоля) <> Неопределено Тогда
				Продолжить;
			Иначе
				СписокОбязательныхПолей.Добавить(ИмяПоля, ИмяПоля);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ДатаНачала",           КонецДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",        КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ТекущаяДата",          КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ФильтрПоНоменклатуре", ФильтрПоНоменклатуре);
	Запрос.УстановитьПараметр("Тара",                 Перечисления.ТоварТара.Тара);
	
	СтрокаУсловия = "";
	Если ФильтрПоНоменклатуре <> Неопределено Тогда
		СтрокаУсловия = ", (" + ПолучитьСтрокуОтбора(ВидСравненияНоменклатура, "&ФильтрПоНоменклатуре", "Номенклатура") + ")";
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|";
	
	Для каждого ЭлементСписка Из СписокОбязательныхПолей Цикл
	
		Запрос.Текст = Запрос.Текст + "
		|	КалендарныеПотребностиВНоменклатуре." + ЭлементСписка.Значение + " КАК " + ЭлементСписка.Представление + ",
		|";
	
	КонецЦикла; 
	
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБОР КОГДА КалендарныеПотребностиВНоменклатуре.ТоварТара = &Тара ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК Тара,
	|	Сумма(КалендарныеПотребностиВНоменклатуре.Количество) КАК КоличествоПлана
	|ИЗ
	|	РегистрСведений.КалендарныеПотребностиВНоменклатуре.СрезПоследних(&ТекущаяДата" + СтрокаУсловия + ") КАК КалендарныеПотребностиВНоменклатуре
	|ГДЕ
	|	КалендарныеПотребностиВНоменклатуре.ДатаПотребности >= &ДатаНачала
	|";
	
	Если ДатаОкончания <> '00010101000000' Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	КалендарныеПотребностиВНоменклатуре.ДатаПотребности <= &ДатаОкончания
		|";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА КалендарныеПотребностиВНоменклатуре.ТоварТара = &Тара ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ,
	|";
	
	Для каждого ЭлементСписка Из СписокОбязательныхПолей Цикл
	
		Запрос.Текст = Запрос.Текст + "
		|	КалендарныеПотребностиВНоменклатуре." + ЭлементСписка.Значение + ?(СписокОбязательныхПолей.Индекс(ЭлементСписка) = (СписокОбязательныхПолей.Количество() - 1), "", ",") + "
		|";
	
	КонецЦикла; 
	
	ТаблицаПотребности = Запрос.Выполнить().Выгрузить();
	
	// Планируемые остатки номенклатуры
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ФильтрПоНоменклатуре", ФильтрПоНоменклатуре);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА НЕ ПлановыеОстаткиТоваровНачало.Номенклатура ЕСТЬ NULL ТОГДА
	|		ПлановыеОстаткиТоваровНачало.Номенклатура
	|	ИНАЧЕ
	|		ПлановыеОстаткиТоваровОкончание.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|
	|	ВЫБОР КОГДА НЕ ПлановыеОстаткиТоваровНачало.ХарактеристикаНоменклатуры ЕСТЬ NULL ТОГДА
	|		ПлановыеОстаткиТоваровНачало.ХарактеристикаНоменклатуры
	|	ИНАЧЕ
	|		ПлановыеОстаткиТоваровОкончание.ХарактеристикаНоменклатуры
	|	КОНЕЦ КАК ХарактеристикаНоменклатуры,
	|
	|	СУММА(ВЫБОР КОГДА ПлановыеОстаткиТоваровОкончание.Количество ЕСТЬ NULL ТОГДА
	|		(0 - ПлановыеОстаткиТоваровНачало.Количество)
	|	КОГДА ПлановыеОстаткиТоваровНачало.Количество ЕСТЬ NULL ТОГДА
	|		ПлановыеОстаткиТоваровОкончание.Количество
	|	ИНАЧЕ
	|		(ПлановыеОстаткиТоваровОкончание.Количество - ПлановыеОстаткиТоваровНачало.Количество)
	|	КОНЕЦ) КАК Количество
	|
	|ИЗ
	|	РегистрСведений.ПлановыеОстаткиТоваров.СрезПоследних(&ДатаНачала" + СтрокаУсловия + ") КАК ПлановыеОстаткиТоваровНачало
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПлановыеОстаткиТоваров.СрезПоследних(&ДатаОкончания" + СтрокаУсловия + ") КАК ПлановыеОстаткиТоваровОкончание
	|
	|ПО
	|	ПлановыеОстаткиТоваровОкончание.Номенклатура = ПлановыеОстаткиТоваровНачало.Номенклатура
	|	И
	|	ПлановыеОстаткиТоваровОкончание.ХарактеристикаНоменклатуры = ПлановыеОстаткиТоваровНачало.ХарактеристикаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА НЕ ПлановыеОстаткиТоваровНачало.Номенклатура ЕСТЬ NULL ТОГДА
	|		ПлановыеОстаткиТоваровНачало.Номенклатура
	|	ИНАЧЕ
	|		ПлановыеОстаткиТоваровОкончание.Номенклатура
	|	КОНЕЦ,
	|
	|	ВЫБОР КОГДА НЕ ПлановыеОстаткиТоваровНачало.ХарактеристикаНоменклатуры ЕСТЬ NULL ТОГДА
	|		ПлановыеОстаткиТоваровНачало.ХарактеристикаНоменклатуры
	|	ИНАЧЕ
	|		ПлановыеОстаткиТоваровОкончание.ХарактеристикаНоменклатуры
	|	КОНЕЦ
	|
	|";
	
	ТаблицаПлановыеОстаткиНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	// Скорректируем план потребности с учетом плановых остатков номенклатуры
	СтруктураПоиска = Новый Структура("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	Если СписокОбязательныхПолей.НайтиПоЗначению("КонечнаяПродукция") <> Неопределено Тогда
		СтруктураПоиска.Вставить("КонечнаяПродукция", Справочники.Номенклатура.ПустаяСсылка());
	КонецЕсли; 
	Если СписокОбязательныхПолей.НайтиПоЗначению("Проект") <> Неопределено Тогда
		СтруктураПоиска.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из ТаблицаПлановыеОстаткиНоменклатуры Цикл
		
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("ДатаПотребности", НачалоДня(НачалоДня(ДатаОкончания) - 60*60*24));
		СтрокиТаблицыПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя, Тара", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, Документы.ЗаказПокупателя.ПустаяСсылка(), Ложь));
		
		Если СтрокиТаблицыПотребности.Количество() > 0 И НЕ СтрокиТаблицыПотребности[0].Тара Тогда
			СтрокаТаблицыПотребности = СтрокиТаблицыПотребности[0];
		Иначе
			СтрокаТаблицыПотребности = ТаблицаПотребности.Добавить();
			СтрокаТаблицыПотребности.Номенклатура               = СтрокаТаблицы.Номенклатура;
			СтрокаТаблицыПотребности.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаТаблицыПотребности.ДатаПотребности            = НачалоДня(НачалоДня(ДатаОкончания) - 60*60*24);
			СтрокаТаблицыПотребности.ЗаказПокупателя            = Документы.ЗаказПокупателя.ПустаяСсылка();
			Если СписокОбязательныхПолей.НайтиПоЗначению("КонечнаяПродукция") <> Неопределено Тогда
				СтрокаТаблицыПотребности.КонечнаяПродукция = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли; 
			Если СписокОбязательныхПолей.НайтиПоЗначению("Проект") <> Неопределено Тогда
				СтрокаТаблицыПотребности.Проект = Справочники.Проекты.ПустаяСсылка();
			КонецЕсли; 
			СтрокаТаблицыПотребности.КоличествоПлана = 0;
			СтрокаТаблицыПотребности.Тара            = Перечисления.ТоварТара.Товар;
		КонецЕсли; 
		
		СтрокаТаблицыПотребности.КоличествоПлана = СтрокаТаблицыПотребности.КоличествоПлана + СтрокаТаблицы.Количество;
		
	КонецЦикла; 
	
	// Резерывы по заказам покупателей
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ФильтрПоНоменклатуре", ФильтрПоНоменклатуре);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТоварыВРезервеНаСкладахОстатки.Номенклатура               КАК Номенклатура,
	|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыВРезервеНаСкладахОстатки.ДокументРезерва            КАК ДокументРезерва,
	|	СУММА(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток)   КАК ОстатокРезерва
	|
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ТекущаяДата, ДокументРезерва ССЫЛКА Документ.ЗаказПокупателя" + ?(ФильтрПоНоменклатуре <> Неопределено, " И Номенклатура В ИЕРАРХИИ (&ФильтрПоНоменклатуре)", "") + ") КАК ТоварыВРезервеНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВРезервеНаСкладахОстатки.Номенклатура,
	|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры,
	|	ТоварыВРезервеНаСкладахОстатки.ДокументРезерва
	|";
	
	ТаблицаРезервовПоЗаказамПокупателей = Запрос.Выполнить().Выгрузить();
	
	// Скорректируем план потребности с учетом резервов по заказам покупателей
	ТаблицаПотребности.Сортировать("ДатаПотребности ВОЗР");
	Для каждого СтрокаРезерваПоЗаказуПокупателя Из ТаблицаРезервовПоЗаказамПокупателей Цикл
		ОстатокРезерваПоЗаказу = СтрокаРезерваПоЗаказуПокупателя.ОстатокРезерва;
		// Скорректируем товары
		СтрокиПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("ЗаказПокупателя, Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаРезерваПоЗаказуПокупателя.ДокументРезерва, СтрокаРезерваПоЗаказуПокупателя.Номенклатура, СтрокаРезерваПоЗаказуПокупателя.ХарактеристикаНоменклатуры, Ложь));
		Для каждого СтрокаПотребности Из СтрокиПотребности Цикл
			Если ОстатокРезерваПоЗаказу = 0 Тогда
				Прервать;
			КонецЕсли; 
			Если СтрокаПотребности.КоличествоПлана > ОстатокРезерваПоЗаказу Тогда
				СтрокаПотребности.КоличествоПлана = СтрокаПотребности.КоличествоПлана - ОстатокРезерваПоЗаказу;
				ОстатокРезерваПоЗаказу = 0;
			Иначе
				ОстатокРезерваПоЗаказу = ОстатокРезерваПоЗаказу - СтрокаПотребности.КоличествоПлана;
				ТаблицаПотребности.Удалить(СтрокаПотребности);
			КонецЕсли; 
		КонецЦикла;
		
		Если ОстатокРезерваПоЗаказу > 0 Тогда
			// Скорректируем тару
			СтрокиПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("ЗаказПокупателя, Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаРезерваПоЗаказуПокупателя.ДокументРезерва, СтрокаРезерваПоЗаказуПокупателя.Номенклатура, СтрокаРезерваПоЗаказуПокупателя.ХарактеристикаНоменклатуры, Истина));
			Для каждого СтрокаПотребности Из СтрокиПотребности Цикл
				Если ОстатокРезерваПоЗаказу = 0 Тогда
					Прервать;
				КонецЕсли; 
				Если СтрокаПотребности.КоличествоПлана > ОстатокРезерваПоЗаказу Тогда
					СтрокаПотребности.КоличествоПлана = СтрокаПотребности.КоличествоПлана - ОстатокРезерваПоЗаказу;
					ОстатокРезерваПоЗаказу = 0;
				Иначе
					ОстатокРезерваПоЗаказу = ОстатокРезерваПоЗаказу - СтрокаПотребности.КоличествоПлана;
					ТаблицаПотребности.Удалить(СтрокаПотребности);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла; 
	
	// Остатки без резервов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата" , КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ФильтрПоНоменклатуре", ФильтрПоНоменклатуре);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|
	|	ВЫБОР КОГДА РезервыНеЗаказов.КоличествоОстатокРезерва ЕСТЬ NULL ТОГДА
	|		ОстаткиНоменклатуры.ОстатокНоменклатуры
	|	ИНАЧЕ
	|		ОстаткиНоменклатуры.ОстатокНоменклатуры - РезервыНеЗаказов.КоличествоОстатокРезерва
	|	КОНЕЦ КАК ОстатокНоменклатуры,
	|	ОстаткиНоменклатуры.Номенклатура               КАК Номенклатура,
	|	ОстаткиНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		РегистрНакопленияОстаткиТоваров.Номенклатура               КАК Номенклатура,
	|		РегистрНакопленияОстаткиТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(РегистрНакопленияОстаткиТоваров.КоличествоОстаток)   КАК ОстатокНоменклатуры
	|	
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(&ТекущаяДата" + СтрокаУсловия + ") КАК РегистрНакопленияОстаткиТоваров
	|
	|	СГРУППИРОВАТЬ ПО
	|		РегистрНакопленияОстаткиТоваров.Номенклатура,
	|		РегистрНакопленияОстаткиТоваров.ХарактеристикаНоменклатуры
	|
	|	) КАК ОстаткиНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ
	|		ТоварыВРезервеНаСкладахОстатки.Номенклатура               КАК Номенклатура,
	|		ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток)   КАК КоличествоОстатокРезерва
	|
	|	ИЗ
	|		РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ТекущаяДата, " + ?(ФильтрПоНоменклатуре <> Неопределено, " Номенклатура В ИЕРАРХИИ (&ФильтрПоНоменклатуре)", "") + ") КАК ТоварыВРезервеНаСкладахОстатки
	|
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыВРезервеНаСкладахОстатки.Номенклатура,
	|		ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
	|
	|	) КАК РезервыНеЗаказов
	|
	|	ПО
	|		ОстаткиНоменклатуры.Номенклатура = РезервыНеЗаказов.Номенклатура
	|		И
	|		ОстаткиНоменклатуры.ХарактеристикаНоменклатуры = РезервыНеЗаказов.ХарактеристикаНоменклатуры
	|
	|";
	
	ТаблицаОстатковБезРезервов = Запрос.Выполнить().Выгрузить();
	
	// Разделим остатки на товары и тару
	ЗапросОстаткиТара = Новый Запрос;
	
	ЗапросОстаткиТара.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
	ЗапросОстаткиТара.УстановитьПараметр("Тара", Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
	ЗапросОстаткиТара.УстановитьПараметр("КомиссияПокупателя", Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия);
	ЗапросОстаткиТара.УстановитьПараметр("КомиссияПоставщика", Перечисления.ВидыОперацийЗаказПоставщику.ПокупкаКомиссия);
	ЗапросОстаткиТара.УстановитьПараметр("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	ЗапросОстаткиТара.УстановитьПараметр("ПустойЗаказПоставщику", Документы.ЗаказПоставщику.ПустаяСсылка());
	ЗапросОстаткиТара.УстановитьПараметр("ФильтрПоНоменклатуре", ФильтрПоНоменклатуре);
	
	ЗапросОстаткиТара.Текст = "
	|
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА НЕ ТоварыПолученныеОстатки.Номенклатура ЕСТЬ NULL ТОГДА ТоварыПолученныеОстатки.Номенклатура ИНАЧЕ ТоварыПереданныеОстатки.Номенклатура КОНЕЦ КАК Номенклатура,
	|	ВЫБОР КОГДА НЕ ТоварыПолученныеОстатки.ХарактеристикаНоменклатуры ЕСТЬ NULL ТОГДА ТоварыПолученныеОстатки.ХарактеристикаНоменклатуры ИНАЧЕ ТоварыПереданныеОстатки.ХарактеристикаНоменклатуры КОНЕЦ КАК ХарактеристикаНоменклатуры,
	|	СУММА(ВЫБОР КОГДА (НЕ ТоварыПолученныеОстатки.Номенклатура ЕСТЬ NULL И НЕ ТоварыПереданныеОстатки.Номенклатура ЕСТЬ NULL) ТОГДА (ТоварыПолученныеОстатки.КоличествоОстаток - ТоварыПереданныеОстатки.КоличествоОстаток)
	|				КОГДА ТоварыПолученныеОстатки.Номенклатура ЕСТЬ NULL ТОГДА (-1 * ТоварыПереданныеОстатки.КоличествоОстаток)
	|				ИНАЧЕ ТоварыПолученныеОстатки.КоличествоОстаток КОНЕЦ) КАК Количество
	|
	|ИЗ
	|	РегистрНакопления.ТоварыПолученные.Остатки(&ТекущаяДата" + ?(ПустаяСтрока(СтрокаУсловия), ", СтатусПолучения = &Тара", (СтрокаУсловия + " И СтатусПолучения = &Тара")) + ") КАК ТоварыПолученныеОстатки
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(&ТекущаяДата" + ?(ПустаяСтрока(СтрокаУсловия), ", СтатусПередачи = &Тара", (СтрокаУсловия + " И СтатусПередачи = &Тара")) + ") КАК ТоварыПереданныеОстатки
	|
	|ПО
	|	ТоварыПереданныеОстатки.Номенклатура = ТоварыПолученныеОстатки.Номенклатура
	|	И
	|	ТоварыПереданныеОстатки.ХарактеристикаНоменклатуры = ТоварыПолученныеОстатки.ХарактеристикаНоменклатуры
	|	И
	|	НЕ (ТоварыПереданныеОстатки.Сделка <> &ПустойЗаказПокупателя
	|	И
	|	ТоварыПереданныеОстатки.Сделка.ВидОперации = &КомиссияПокупателя)
	|
	|ГДЕ
	|	НЕ (ТоварыПолученныеОстатки.Сделка <> &ПустойЗаказПоставщику
	|	И
	|	ТоварыПолученныеОстатки.Сделка.ВидОперации = &КомиссияПоставщика)
	|
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА НЕ ТоварыПолученныеОстатки.Номенклатура ЕСТЬ NULL ТОГДА ТоварыПолученныеОстатки.Номенклатура ИНАЧЕ ТоварыПереданныеОстатки.Номенклатура КОНЕЦ,
	|	ВЫБОР КОГДА НЕ ТоварыПолученныеОстатки.ХарактеристикаНоменклатуры ЕСТЬ NULL ТОГДА ТоварыПолученныеОстатки.ХарактеристикаНоменклатуры ИНАЧЕ ТоварыПереданныеОстатки.ХарактеристикаНоменклатуры КОНЕЦ
	|
	|";
	
	ОстаткиТарыДополнительные = ЗапросОстаткиТара.Выполнить().Выгрузить();
	ТаблицаОстатковБезРезервовКонечная = Новый ТаблицаЗначений;
	ТаблицаОстатковБезРезервовКонечная.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОстатковБезРезервовКонечная.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОстатковБезРезервовКонечная.Колонки.Добавить("ОстатокНоменклатуры", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаОстатковБезРезервовКонечная.Колонки.Добавить("Тара", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаОстатковБезРезервов Из ТаблицаОстатковБезРезервов Цикл
	
		СтрокиТары = ОстаткиТарыДополнительные.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаОстатковБезРезервов.Номенклатура, СтрокаОстатковБезРезервов.ХарактеристикаНоменклатуры));
		Если СтрокиТары.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаОстатковБезРезервовКонечная.Добавить();
			НоваяСтрока.Номенклатура = СтрокаОстатковБезРезервов.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатковБезРезервов.ХарактеристикаНоменклатуры;
			НоваяСтрока.ОстатокНоменклатуры = СтрокаОстатковБезРезервов.ОстатокНоменклатуры;
			НоваяСтрока.Тара = Ложь;
			Продолжить;
		КонецЕсли;
		
		СтрокаТары = СтрокиТары[0];
		
		Если СтрокаТары.Количество <= 0 Тогда
			НоваяСтрока = ТаблицаОстатковБезРезервовКонечная.Добавить();
			НоваяСтрока.Номенклатура = СтрокаОстатковБезРезервов.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатковБезРезервов.ХарактеристикаНоменклатуры;
			НоваяСтрока.ОстатокНоменклатуры = СтрокаОстатковБезРезервов.ОстатокНоменклатуры;
			НоваяСтрока.Тара = Ложь;
		ИначеЕсли СтрокаТары.Количество >= СтрокаОстатковБезРезервов.ОстатокНоменклатуры Тогда
			НоваяСтрока = ТаблицаОстатковБезРезервовКонечная.Добавить();
			НоваяСтрока.Номенклатура = СтрокаОстатковБезРезервов.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатковБезРезервов.ХарактеристикаНоменклатуры;
			НоваяСтрока.ОстатокНоменклатуры = СтрокаОстатковБезРезервов.ОстатокНоменклатуры;
			НоваяСтрока.Тара = Истина;
		ИначеЕсли СтрокаТары.Количество < СтрокаОстатковБезРезервов.ОстатокНоменклатуры Тогда
			НоваяСтрока = ТаблицаОстатковБезРезервовКонечная.Добавить();
			НоваяСтрока.Номенклатура = СтрокаОстатковБезРезервов.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатковБезРезервов.ХарактеристикаНоменклатуры;
			НоваяСтрока.ОстатокНоменклатуры = СтрокаТары.Количество;
			НоваяСтрока.Тара = Истина;
			НоваяСтрока = ТаблицаОстатковБезРезервовКонечная.Добавить();
			НоваяСтрока.Номенклатура = СтрокаОстатковБезРезервов.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатковБезРезервов.ХарактеристикаНоменклатуры;
			НоваяСтрока.ОстатокНоменклатуры = СтрокаОстатковБезРезервов.ОстатокНоменклатуры - СтрокаТары.Количество;
			НоваяСтрока.Тара = Ложь;
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Теперь скорректируем остатки товарами к передаче со складов
	
	ЗапросТоварыКПередаче = Новый Запрос;
	
	ЗапросТоварыКПередаче.УстановитьПараметр("ТекущаяДата" , КонецДня(ТекущаяДата()));
	ЗапросТоварыКПередаче.УстановитьПараметр("ФильтрПоНоменклатуре", ФильтрПоНоменклатуре);
	
	ЗапросТоварыКПередаче.Текст = "
	|ВЫБРАТЬ
	|	ТоварыКПередачеСоСкладовОстатки.Номенклатура               КАК Номенклатура,
	|	ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток)   КАК КоличествоОстатокРезерва
	|
	|ИЗ
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ТекущаяДата" + СтрокаУсловия + ") КАК ТоварыКПередачеСоСкладовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПередачеСоСкладовОстатки.Номенклатура,
	|	ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
	|
	|";
	
	ТаблицаТоваровКПередаче = ЗапросТоварыКПередаче.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваровКПередаче Цикл
		
		ОстатокКПередаче = СтрокаТаблицы.КоличествоОстатокРезерва;
		
		СтрокиОстатков = ТаблицаОстатковБезРезервовКонечная.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, Истина));
		Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
			Если ОстатокКПередаче = 0 Тогда
				Прервать;
			КонецЕсли; 
			Если СтрокаОстатков.ОстатокНоменклатуры >= ОстатокКПередаче Тогда
				СтрокаОстатков.ОстатокНоменклатуры = СтрокаОстатков.ОстатокНоменклатуры - ОстатокКПередаче;
				ОстатокКПередаче = 0;
			Иначе
				ОстатокКПередаче = ОстатокКПередаче - СтрокаОстатков.ОстатокНоменклатуры;
				ТаблицаОстатковБезРезервовКонечная.Удалить(СтрокаОстатков);
			КонецЕсли; 
		КонецЦикла;
		
		Если ОстатокКПередаче > 0 Тогда
			СтрокиОстатков = ТаблицаОстатковБезРезервовКонечная.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, Ложь));
			Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
				Если ОстатокКПередаче = 0 Тогда
					Прервать;
				КонецЕсли; 
				Если СтрокаОстатков.ОстатокНоменклатуры >= ОстатокКПередаче Тогда
					СтрокаОстатков.ОстатокНоменклатуры = СтрокаОстатков.ОстатокНоменклатуры - ОстатокКПередаче;
					ОстатокКПередаче = 0;
				Иначе
					ОстатокКПередаче = ОстатокКПередаче - СтрокаОстатков.ОстатокНоменклатуры;
					ТаблицаОстатковБезРезервовКонечная.Удалить(СтрокаОстатков);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Скорректируем план потребности с учетом остатков на складе
	ТаблицаПотребности.Сортировать("ДатаПотребности ВОЗР, ЗаказПокупателя ВОЗР");
	Для каждого СтрокаТаблицыОстатков Из ТаблицаОстатковБезРезервовКонечная Цикл
		ОстатокТовара = СтрокаТаблицыОстатков.ОстатокНоменклатуры;
		СтрокиПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицыОстатков.Номенклатура, СтрокаТаблицыОстатков.ХарактеристикаНоменклатуры, СтрокаТаблицыОстатков.Тара));
		Если СтрокиПотребности.Количество() > 0 И ЗначениеНеЗаполнено(СтрокиПотребности[0].ЗаказПокупателя) Тогда
			СтрокиПотребности.Добавить(СтрокиПотребности[0]);
			СтрокиПотребности.Удалить(0);
		КонецЕсли; 
		Для каждого СтрокаПотребности Из СтрокиПотребности Цикл
			Если ОстатокТовара = 0 Тогда
				Прервать;
			КонецЕсли; 
			Если СтрокаПотребности.КоличествоПлана > ОстатокТовара Тогда
				СтрокаПотребности.КоличествоПлана = СтрокаПотребности.КоличествоПлана - ОстатокТовара;
				ОстатокТовара = 0;
			Иначе
				ОстатокТовара = ОстатокТовара - СтрокаПотребности.КоличествоПлана;
				ТаблицаПотребности.Удалить(СтрокаПотребности);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	// Уберем отрицательные количества потребности
	
	Индекс = 0;
	Пока 1 = 1 Цикл
	
		Если Индекс > ТаблицаПотребности.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаПотребности = ТаблицаПотребности[Индекс];
		
		Если СтрокаПотребности.КоличествоПлана <= 0 Тогда
			ТаблицаПотребности.Удалить(СтрокаПотребности);
			Продолжить;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	
	КонецЦикла; 
	
	Возврат ТаблицаПотребности;
	
КонецФункции

#КонецЕсли



////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ ДАННЫХ НЕЗАРЕГИСТРИРОВАННЫХ КОНТРАГЕНТОВ, БЕЗ ДОБАВЛЕНИЯ В СПРАВОЧНИК

Процедура ЗаписатьДанныеНезарегистрированногоКонтрагента(Ссылка, ДанныеНезарегистрированногоКонтрагента, Отказ) Экспорт

	ДанныеНезарегистрированногоКонтрагента.ОбъектРегистратор = Ссылка;
	
	Попытка
		ДанныеНезарегистрированногоКонтрагента.Записать(Истина);
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать данные контрагента.");
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры

Процедура ПрочитатьДанныеНезарегистрированногоКонтрагента(Ссылка, ДанныеНезарегистрированногоКонтрагента) Экспорт

	Если НЕ ЗначениеНеЗаполнено(Ссылка) Тогда
		ДанныеНезарегистрированногоКонтрагента.ОбъектРегистратор = Ссылка;
		ДанныеНезарегистрированногоКонтрагента.Прочитать();
	КонецЕсли; 

КонецПроцедуры

Процедура УдалитьДанныеНезарегистрированногоКонтрагента(Ссылка, Отказ) Экспорт

	НаборЗаписей = РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРегистратор.Использование = Истина;
	НаборЗаписей.Отбор.ОбъектРегистратор.Значение      = Ссылка;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Очистить();
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			СообщитьОбОшибке(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли; 

КонецПроцедуры

// Процедура заполняет реквизиты предопределенных элементов справочника ВидыКонтактнойИнформации
//  и заполняет константу шаблонов телефонов.
Процедура ЗаполнитьДанныеПоУмолчаниюДляКонтактнойИнформации() Экспорт

	// Элементы справочника ВидыКонтактнойИнформации заполнились еще при переходе с 10.0.5 на 10.1.1

	Если ТипЗнч(Константы.ШаблоныТелефонныхНомеров.Получить().Получить()) <> Тип("Соответствие") Тогда
	
		ТаблицаСоответствий = Новый Соответствие;
		ТаблицаСоответствий.Вставить(7,"999-99-99");
		ТаблицаСоответствий.Вставить(6,"99-99-99");
		ТаблицаСоответствий.Вставить(5,"9-99-99");
		ТаблицаСоответствий.Вставить(4,"99-99");

		ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);

		Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);
	
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДанныеПоУмолчаниюДляКонтактнойИнформации()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ СОБЫТИЙ И КАЛЕНДАРЕМ ПОЛЬЗОВАТЕЛЯ

// Функция Определяет индекс картинки
//
// Параметры
//  ВидСобытия - ПеречислениеСсылка.ВидыСобытий
//
// Возвращаемое значение:
//  Индекс - число
//
Функция ОпределитьИндексКартинкиВидаСобытия(Напоминание) Экспорт

	Если ТипЗнч(Напоминание) = Тип("ДокументСсылка.Событие") Тогда
		Если Напоминание.ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок Тогда
			Возврат 1;
		ИначеЕсли Напоминание.ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
			Возврат 2;
		ИначеЕсли Напоминание.ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
			Возврат 3;
		ИначеЕсли Напоминание.ВидСобытия = Перечисления.ВидыСобытий.ПочтовоеПисьмо Тогда
			Возврат 4;
		ИначеЕсли Напоминание.ВидСобытия = Перечисления.ВидыСобытий.КомментарийПДЗ Тогда
			Возврат 5;
		Иначе
			Возврат 0;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Напоминание) = Тип("ПеречислениеСсылка.ВидыСобытий") Тогда
		Если Напоминание = Перечисления.ВидыСобытий.ТелефонныйЗвонок Тогда
			Возврат 1;
		ИначеЕсли Напоминание = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
			Возврат 2;
		ИначеЕсли Напоминание = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
			Возврат 3;
		ИначеЕсли Напоминание = Перечисления.ВидыСобытий.ПочтовоеПисьмо Тогда
			Возврат 4;
		ИначеЕсли Напоминание = Перечисления.ВидыСобытий.КомментарийПДЗ Тогда
			Возврат 5;
		Иначе
			Возврат 0;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Напоминание) = Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипЗнч(Напоминание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Возврат 6;
	ИначеЕсли ТипЗнч(Напоминание) = Тип("ДокументСсылка.ЗаказПоставщику") ИЛИ ТипЗнч(Напоминание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		Возврат 9;
	Иначе
		Возврат 8;
	КонецЕсли;

КонецФункции // ОпределитьИндексКартинкиВидаСобытия()

// Процедура выполняется при проведении или отмене проведения документа Событие
//  и переписывает записи регитра сведений СобытияКалендаряПользователя.
Процедура РаспределитьСобытияДня(ДатаРаспределения, Пользователь) Экспорт

	Запрос = Новый Запрос;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СобытияКалендаряПользователяОбобщенные.Событие КАК Событие,
	|	СобытияКалендаряПользователяОбобщенные.НомерНачальнойСтроки КАК НомерНачальнойСтроки,
	|	СобытияКалендаряПользователяОбобщенные.НомерКонечнойСтроки КАК НомерКонечнойСтроки
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.Дата = &ВыбДата
	|	И
	|	СобытияКалендаряПользователяОбобщенные.Пользователь = &ВыбПользователь
	|";

	Запрос.УстановитьПараметр("ВыбДата", ДатаРаспределения);
	Запрос.УстановитьПараметр("ВыбПользователь", Пользователь);

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	НомерСтрокиНачало = 0;
	НомерСтрокиКонец  = 0;
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
	
		КопияТаблицыЗапроса = ТаблицаЗапроса.Скопировать();

		КопияТаблицыЗапроса.Сортировать("НомерНачальнойСтроки ВОЗР");
		НомерСтрокиНачало = КопияТаблицыЗапроса[0].НомерНачальнойСтроки;
		
		КопияТаблицыЗапроса.Сортировать("НомерКонечнойСтроки УБЫВ");
		НомерСтрокиКонец = КопияТаблицыЗапроса[0].НомерКонечнойСтроки;
		
	КонецЕсли; 

	СписокЗначенийВремен = Новый СписокЗначений;
	
	Если НомерСтрокиНачало <> 0 И НомерСтрокиКонец <> 0 Тогда
		
		Для а=1 По 48 Цикл
			НовыйСписок = Новый СписокЗначений;
			СписокЗначенийВремен.Добавить(НовыйСписок);
		КонецЦикла;
		
		Для а=НомерСтрокиНачало По НомерСтрокиКонец Цикл

			НовыйСписок = СписокЗначенийВремен[а-1].Значение;

			ИндексСтрокиТаблицы = 0;
			Пока 1 = 1 Цикл

				Если ИндексСтрокиТаблицы > ТаблицаЗапроса.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаТаблицы = ТаблицаЗапроса[ИндексСтрокиТаблицы];

				Если СтрокаТаблицы.НомерНачальнойСтроки <= а И СтрокаТаблицы.НомерКонечнойСтроки >= а Тогда
				
					ЕстьСвободноеМесто = Ложь;

					Для каждого ЭлементНовогоСписка Из НовыйСписок Цикл
					
						Если ЭлементНовогоСписка.Значение = Неопределено Тогда
						
							ЭлементНовогоСписка.Значение = СтрокаТаблицы.Событие;
							
							ЕстьСвободноеМесто = Истина;
							ИндексСписка = НовыйСписок.Индекс(ЭлементНовогоСписка);
							Прервать;
						
						КонецЕсли;
					
					КонецЦикла;

					Если НЕ ЕстьСвободноеМесто Тогда

						Если НовыйСписок.Количество() >= 18 Тогда
							Прервать;
						КонецЕсли; 
						
						ВновьВведенныйЭлемент = НовыйСписок.Добавить(СтрокаТаблицы.Событие);
						ИндексСписка = НовыйСписок.Индекс(ВновьВведенныйЭлемент);
					
					КонецЕсли;

					Если а <= СписокЗначенийВремен.Количество() Тогда
					
						ИндексТекущегоСписка = а - 1 + 1;
						Для б = а По СтрокаТаблицы.НомерКонечнойСтроки - 1 Цикл
						
							ТекущийСписок = СписокЗначенийВремен[б].Значение;

							Если ТекущийСписок.Количество() < (ИндексСписка + 1) Тогда
							
								Для с = (ТекущийСписок.Количество() + 1) По (ИндексСписка + 1) Цикл
								
									ТекущийСписок.Добавить(Неопределено);
								
								КонецЦикла;
							
							КонецЕсли;

							ТекущийСписок[ИндексСписка].Значение = СтрокаТаблицы.Событие;
						
						КонецЦикла; 
					
					КонецЕсли; 

					ТаблицаЗапроса.Удалить(СтрокаТаблицы);
					Продолжить;
					
				КонецЕсли;

				ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЕсли; 
	

	// Очистим значения предидущего распределния
	НаборЗаписейРегистра = РегистрыСведений.СобытияКалендаряПользователя.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Пользователь.Значение      = Пользователь;
	НаборЗаписейРегистра.Отбор.Пользователь.Использование = Истина;
	НаборЗаписейРегистра.Отбор.Дата.Значение              = ДатаРаспределения;
	НаборЗаписейРегистра.Отбор.Дата.Использование         = Истина;
	НаборЗаписейРегистра.Прочитать();
	НаборЗаписейРегистра.Очистить();

	// Проведем распределение заново
	Для каждого СтрокаВремени Из СписокЗначенийВремен Цикл
	
		СписокТекущегоВремени = СтрокаВремени.Значение;

		Если ТипЗнч(СписокТекущегоВремени) = Тип("СписокЗначений") И СписокТекущегоВремени.Количество() > 0 Тогда
		
			Для каждого ЭлементДокумента Из СписокТекущегоВремени Цикл

				НоваяЗаписьРегистра = НаборЗаписейРегистра.Добавить();
				НоваяЗаписьРегистра.Событие = ЭлементДокумента.Значение;
				НоваяЗаписьРегистра.НомерСтрокиТаблицы = СписокЗначенийВремен.Индекс(СтрокаВремени) + 1;
				НоваяЗаписьРегистра.Дата = ДатаРаспределения;
				НоваяЗаписьРегистра.Пользователь = Пользователь;
				НоваяЗаписьРегистра.ПорядковыйНомерВДне = СписокТекущегоВремени.Индекс(ЭлементДокумента) + 1;
			
			КонецЦикла; 
		
		КонецЕсли; 
	
	КонецЦикла;

	НаборЗаписейРегистра.Записать();

	Если ТипЗнч(КопияТаблицыЗапроса) = Тип("ТаблицаЗначений") Тогда
	
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(КопияТаблицыЗапроса.ВыгрузитьКолонку("Событие"));

		Для каждого ДокументСписка Из СписокДокументов Цикл
		
			НаборЗаписейРегистра = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
			НаборЗаписейРегистра.Отбор.Пользователь.Значение      = Пользователь;
			НаборЗаписейРегистра.Отбор.Пользователь.Использование = Истина;
			НаборЗаписейРегистра.Отбор.Дата.Значение              = ДатаРаспределения;
			НаборЗаписейРегистра.Отбор.Дата.Использование         = Истина;
			НаборЗаписейРегистра.Отбор.Событие.Значение           = ДокументСписка.Значение;
			НаборЗаписейРегистра.Отбор.Событие.Использование      = Истина;
			НаборЗаписейРегистра.Прочитать();
			
			Для каждого ЗаписьРегистра Из НаборЗаписейРегистра Цикл
				КоличествоДокументов = 0;
				Для б = ЗаписьРегистра.НомерНачальнойСтроки - 1 По ЗаписьРегистра.НомерКонечнойСтроки - 1 Цикл
					ТекСписок = СписокЗначенийВремен[б].Значение;
					Если ТекСписок.Количество() > КоличествоДокументов Тогда
						КоличествоДокументов = ТекСписок.Количество();
					КонецЕсли; 
				КонецЦикла;
				ЗаписьРегистра.КоличествоОдновременныхДокументов = КоличествоДокументов;
			
			КонецЦикла;

			НаборЗаписейРегистра.Записать(Истина);
		
		КонецЦикла; 
	
	КонецЕсли; 

КонецПроцедуры

// Функция определяет начало и окончание рабочего дня пользователя, по его графику работы
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи, пользователь по которому определяются
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ОпределитьНачалоИОкончениеРабочегоДняПользователя() Экспорт

	ДатаНачала    = Константы.НачалоРабочегоДня.Получить();
	ДатаОкончания = Константы.ОкончаниеРабочегоДня.Получить();
	Если ЗначениеНеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = '00010101235959';
	КонецЕсли; 
	
	Возврат Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
	
КонецФункции // ОпределитьНачалоИОкончениеРабочегоДняПользователя()

//Функция определяет контактных лиц контрагента
//Параметры:
//Контрагент - СправочникСсылка.Контрагенты, по которому происходит отбор
//ВыбТипКЛ - Тип контактного лица
//Возвращается таблица значений с колонками
//КонтактноеЛицо, ДолжностьКЛ
Функция ОпределитьКонтактноеЛицоКонтрагента(Контрагент, ВыбТипКЛ = "") Экспорт
	
	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КЛ.Ссылка    КАК КонтактноеЛицо,
	|	КЛ.Должность КАК ДолжностьКонтактногоЛица,
	|	КЛ.Роль      КАК РольКонтактногоЛица
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КЛ
	|
	|ГДЕ
	|	КЛ.Владелец = &ВыбКонтрагент";

	Если ВыбТипКЛ <> "" Тогда
		Запрос.Текст = Запрос.Текст + " И КЛ.Роль = &ВыбТипКЛЗапроса";
		Запрос.УстановитьПараметр("ВыбТипКЛЗапроса", ВыбТипКЛ);
	КонецЕсли; 

	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	КонтактноеЛицо";

	Запрос.УстановитьПараметр("ВыбКонтрагент", Контрагент);

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗапроса;
	
КонецФункции // ОпределитьКонтактноеЛицоКонтрагента()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ ОБЪМНО-КАЛЕНДАРНОГО ПЛАНИРОВАНИЯ ЗАКУПОК

// Функция формирует структуру с данными из объекта в принципе любого, но
//  писалась конкретно для документа ЗаказПоставщику
//
// Параметры
//  Объект - ДокументОбъект.ЗаказПоставщику, но в принципе может быть любой, объект, данные которого необходимо сохранить
//
// Возвращаемое значение:
//   Структура, с данными объекта
//
Функция СкопироватьДанныеОбъектаВСтруктуру(Объект) Экспорт

	СтруктураДанныхОбъекта = Новый Структура("___ИмяОбъекта___", Объект.Метаданные().Имя);
	
	Для каждого РеквизитОбъекта Из Объект.Метаданные().Реквизиты Цикл
		СтруктураДанныхОбъекта.Вставить(РеквизитОбъекта.Имя, Объект[РеквизитОбъекта.Имя]);
	КонецЦикла;
	
	Для каждого ТЧОбъекта Из Объект.Метаданные().ТабличныеЧасти Цикл
		СтруктураДанныхОбъекта.Вставить(ТЧОбъекта.Имя, Объект[ТЧОбъекта.Имя].Выгрузить());
	КонецЦикла;

	Возврат СтруктураДанныхОбъекта;
	
КонецФункции

// Функция заполняет объект данными из структуры
//
// Параметры
//  Объект - объект, который необходимо заполнить данными
//  СтруктураДанныхОбъекта - структура, с данными, которыми надо заполнить объект
//
// Возвращаемое значение:
//   Булево, успешно ли прошла данная операция
//
Функция ВосстановитьДанныеОбъектаИзСтруктуры(Объект, СтруктураДанныхОбъекта) Экспорт
	
	РезультатРаботы = Истина;
	
	ИмяОбъекта = "";
	Если НЕ СтруктураДанныхОбъекта.Свойство("___ИмяОбъекта___", ИмяОбъекта) Тогда
		РезультатРаботы = Ложь;
	КонецЕсли;
	
	Если ИмяОбъекта <> Объект.Метаданные().Имя Тогда
		РезультатРаботы = Ложь;
	КонецЕсли; 
	
	Если РезультатРаботы Тогда
	
		ЗначениеЭлементаСтруктуры = Неопределено;
		
		Для каждого РеквизитОбъекта Из Объект.Метаданные().Реквизиты Цикл
			
			Если НЕ СтруктураДанныхОбъекта.Свойство(РеквизитОбъекта.Имя, ЗначениеЭлементаСтруктуры) Тогда
				РезультатРаботы = Ложь;
				Продолжить;
			КонецЕсли;
			
			Попытка
				Объект[РеквизитОбъекта.Имя] = ЗначениеЭлементаСтруктуры;
			Исключение
				РезультатРаботы = Ложь;
			КонецПопытки;
			
		КонецЦикла;
		
		Для каждого ТЧОбъекта Из Объект.Метаданные().ТабличныеЧасти Цикл
			
			Если НЕ СтруктураДанныхОбъекта.Свойство(ТЧОбъекта.Имя, ЗначениеЭлементаСтруктуры) Тогда
				РезультатРаботы = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеЭлементаСтруктуры) <> Тип("ТаблицаЗначений") Тогда
				РезультатРаботы = Ложь;
				Продолжить;
			КонецЕсли; 
			
			Попытка
				Объект[ТЧОбъекта.Имя].Загрузить(ЗначениеЭлементаСтруктуры);
			Исключение
				РезультатРаботы = Ложь;
			КонецПопытки;
			
		КонецЦикла;
	
	КонецЕсли; 
	
	Возврат РезультатРаботы;

КонецФункции

// Функция сравнивает данные из структуры с данными объекта, для определения их идентичности
//
// Параметры
//  Объект - Объект с данными для сравнения
//  СтруктураДанныхОбъекта - структура с данными для сравнения
//
// Возвращаемое значение:
//   Булево - идентичны ли данные объета и структуры
//
Функция СравнитьСтруктуруДанныхОбъектаИОбъект(Объект, СтруктураДанныхОбъекта) Экспорт

	ИмяОбъекта = "";
	Если НЕ СтруктураДанныхОбъекта.Свойство("___ИмяОбъекта___", ИмяОбъекта) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяОбъекта <> Объект.Метаданные().Имя Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеЭлементаСтруктуры = Неопределено;
	
	Для каждого РеквизитОбъекта Из Объект.Метаданные().Реквизиты Цикл
		
		Если НЕ СтруктураДанныхОбъекта.Свойство(РеквизитОбъекта.Имя, ЗначениеЭлементаСтруктуры) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			Если Объект[РеквизитОбъекта.Имя] <> ЗначениеЭлементаСтруктуры Тогда
				Возврат Ложь;
			КонецЕсли;
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Для каждого ТЧОбъекта Из Объект.Метаданные().ТабличныеЧасти Цикл
		
		Если НЕ СтруктураДанныхОбъекта.Свойство(ТЧОбъекта.Имя, ЗначениеЭлементаСтруктуры) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеЭлементаСтруктуры) <> Тип("ТаблицаЗначений") Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Если НЕ СравнитьТаблицыЗначений(Объект[ТЧОбъекта.Имя].Выгрузить(), ЗначениеЭлементаСтруктуры) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции // СравнитьСтруктуруОбъектаИОбъект()

// Функция сравнивает две таблицы значений на идентичность структуры и данных
//
// Параметры
//  ТаблицаЗначений1 - ТаблицаЗначений для сравнения
//  ТаблицаЗначений2 - ТаблицаЗначений для сравнения
//
// Возвращаемое значение:
//   Булево, идентичны или нет две таблицы
//
Функция СравнитьТаблицыЗначений(ТаблицаЗначений1, ТаблицаЗначений2)

	Если ТипЗнч(ТаблицаЗначений1) <> Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаЗначений2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТаблицаЗначений1.Количество() <> ТаблицаЗначений2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли; 

	Если ТаблицаЗначений1.Колонки.Количество() <> ТаблицаЗначений2.Колонки.Количество() Тогда
		Возврат Ложь;
	КонецЕсли; 

	Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
		
		Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
		
			Попытка
			
				Если СтрокаТаблицы[Колонка.Имя] <> ТаблицаЗначений2[ТаблицаЗначений1.Индекс(СтрокаТаблицы)][Колонка.Имя] Тогда
				
					Возврат Ложь;
				
				КонецЕсли;
			
			Исключение
				
				Возврат Ложь;
				
			КонецПопытки;
		
		КонецЦикла; 
	
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции // СравнитьТаблицыЗначений()

// Функция производит распределние заказов поставщикам из таблицы ИсходнаяТаблицаНоменклатурыЗаказов
//  по строкам таблицы потребности в номенклатуре ИсходнаяТаблицаПотребности по дополнительному полю "Индекс"
//
// Параметры
//  ИсходнаяТаблицаПотребности - ТаблицаЗначений, таблица потребности в номенклатуре
//  ИсходнаяТаблицаНоменклатурыЗаказов - ТаблицаЗначений, таблица заказов поставщикам
//
// Возвращаемое значение:
//   Структура, ключ ТаблицаПотребности - исходная таблица потребности с дополнительным полем "Индекс" (число) , где
//                                        значения соответствуют строкам таблицы ТаблицаНоменклатурыЗаказов в поле "Индекс"
//            , ключ ТаблицаНоменклатурыЗаказов - исходная таблица закзов поставщикам с дополнительным полем "Индекс" (число) , где
//                                        значения соответствуют строкам таблицы ТаблицаПотребности в поле "Индекс"
//
Функция ПолучитьСтруктуруРаспределенныхТаблиц(ИсходнаяТаблицаПотребности, ИсходнаяТаблицаНоменклатурыЗаказов, МаксимальноеЗначениеПрогрессора = 0, ТекущееЗначениеПрогрессора = 0) Экспорт

	ТаблицаПотребности = ИсходнаяТаблицаПотребности.Скопировать();
	ТаблицаНоменклатурыЗаказов = ИсходнаяТаблицаНоменклатурыЗаказов.Скопировать();
	
	ТаблицаНоменклатурыЗаказов.Сортировать("Контрагент ВОЗР, ДатаПоступленияЗаказа УБЫВ");

	ТаблицаЗаказовПоставщикам = Новый ТаблицаЗначений;
	ТаблицаЗаказовПоставщикам.Колонки.Добавить("Индекс", ПолучитьОписаниеТиповЧисла(15,0));
	ТаблицаЗаказовПоставщикам.Колонки.Добавить("ЗаказПоставщику");
	ТаблицаЗаказовПоставщикам.Колонки.Добавить("Количество", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаЗаказовПоставщикам.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаЗаказовПоставщикам.Колонки.Добавить("ИДОбъекта");

	Если ТаблицаПотребности.Колонки.Найти("Индекс") = Неопределено Тогда
		ТаблицаПотребности.Колонки.Добавить("Индекс", ПолучитьОписаниеТиповЧисла(15,0));
	КонецЕсли; 
	Если ТаблицаПотребности.Колонки.Найти("КоличествоПланаОстаток") = Неопределено Тогда
		ТаблицаПотребности.Колонки.Добавить("КоличествоПланаОстаток", ПолучитьОписаниеТиповЧисла(15,3));
	КонецЕсли; 

	ТаблицаПотребности.Сортировать("Номенклатура ВОЗР, ХарактеристикаНоменклатуры ВОЗР, ДатаПотребности ВОЗР");

	МаксимальноеЗначениеПрогрессора = ТаблицаПотребности.Количество();
	Для каждого СтрокаПотребности Из ТаблицаПотребности Цикл
		ТекущееЗначениеПрогрессора = ТаблицаПотребности.Индекс(СтрокаПотребности) + 1;
		СтрокаПотребности.КоличествоПланаОстаток = СтрокаПотребности.КоличествоПлана;
		СтрокаПотребности.Индекс = ТаблицаПотребности.Индекс(СтрокаПотребности);
	КонецЦикла; 

	// Сначала распределим все заказы поставщикам, которые предназначены под конкретные заказы покупателей
	МаксимальноеЗначениеПрогрессора = ТаблицаНоменклатурыЗаказов.Количество();
	Для каждого СтрокаТаблицыНоменклатурыЗаказов Из ТаблицаНоменклатурыЗаказов Цикл
		
		ТекущееЗначениеПрогрессора = ТаблицаНоменклатурыЗаказов.Индекс(СтрокаТаблицыНоменклатурыЗаказов) + 1;
		
		Если СтрокаТаблицыНоменклатурыЗаказов.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ЗначениеНеЗаполнено(СтрокаТаблицыНоменклатурыЗаказов.ЗаказПокупателя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиТаблицыПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя, Тара", СтрокаТаблицыНоменклатурыЗаказов.Номенклатура, СтрокаТаблицыНоменклатурыЗаказов.ХарактеристикаНоменклатуры, СтрокаТаблицыНоменклатурыЗаказов.ЗаказПокупателя, СтрокаТаблицыНоменклатурыЗаказов.Тара));
		Для каждого СтрокаТаблицыПотребности Из СтрокиТаблицыПотребности Цикл
			
			Если СтрокаТаблицыПотребности.КоличествоПланаОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыПотребности.КоличествоПланаОстаток <= СтрокаТаблицыНоменклатурыЗаказов.Количество Тогда
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Индекс          = СтрокаТаблицыПотребности.Индекс;
				НоваяСтрока.ЗаказПоставщику = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику;
				Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
					НоваяСтрока.ИДОбъекта = СтрокаТаблицыНоменклатурыЗаказов.ИДОбъекта;
				КонецЕсли; 
				НоваяСтрока.Количество      = СтрокаТаблицыПотребности.КоличествоПланаОстаток;
				Если СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
					НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.Контрагент;
				Иначе
					НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
				КонецЕсли; 
				
				СтрокаТаблицыНоменклатурыЗаказов.Количество = СтрокаТаблицыНоменклатурыЗаказов.Количество - СтрокаТаблицыПотребности.КоличествоПланаОстаток;
				СтрокаТаблицыПотребности.КоличествоПланаОстаток = 0;
				
			Иначе
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Индекс          = СтрокаТаблицыПотребности.Индекс;
				НоваяСтрока.ЗаказПоставщику = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику;
				Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
					НоваяСтрока.ИДОбъекта = СтрокаТаблицыНоменклатурыЗаказов.ИДОбъекта;
				КонецЕсли; 
				НоваяСтрока.Количество      = СтрокаТаблицыНоменклатурыЗаказов.Количество;
				Если СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
					НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.Контрагент;
				Иначе
					НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
				КонецЕсли; 
				
				СтрокаТаблицыПотребности.КоличествоПланаОстаток = СтрокаТаблицыПотребности.КоличествоПланаОстаток - СтрокаТаблицыНоменклатурыЗаказов.Количество;
				СтрокаТаблицыНоменклатурыЗаказов.Количество = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокиТаблицыПотребности.Количество() > 0 И СтрокаТаблицыНоменклатурыЗаказов.Количество > 0 Тогда
			
			НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
			НоваяСтрока.Индекс          = СтрокиТаблицыПотребности[0].Индекс;
			НоваяСтрока.ЗаказПоставщику = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику;
			Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
				НоваяСтрока.ИДОбъекта = СтрокаТаблицыНоменклатурыЗаказов.ИДОбъекта;
			КонецЕсли; 
			НоваяСтрока.Количество      = СтрокаТаблицыНоменклатурыЗаказов.Количество;
			Если СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
				НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.Контрагент;
			Иначе
				НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
			КонецЕсли; 
			
			СтрокаТаблицыНоменклатурыЗаказов.Количество = 0;
			
		Иначе
			
			СтрокаТаблицыНоменклатурыЗаказов.Количество = 0;
			
		КонецЕсли; 
			
	КонецЦикла;

	// После этого в таблице ТаблицаНоменклатурыЗаказов не осталост строк с заказами поставщикам, которым в соответствие
	// проставлены определенные заказы покупателей

	// Теперь удовлетворим оставшиеся потребности, у которых указаны заказы покупателей, теми заказами поставщикам, у которых
	// заказы покупателей не указаны (собственно только они и остались)
	МаксимальноеЗначениеПрогрессора = ТаблицаПотребности.Количество();
	Для каждого СтрокаПотребности Из ТаблицаПотребности Цикл
		
		ТекущееЗначениеПрогрессора = ТаблицаПотребности .Индекс(СтрокаПотребности) + 1;
		
		Если СтрокаПотребности.КоличествоПланаОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли; 
			
		СтрокиТаблицаНоменклатурыЗаказов = ТаблицаНоменклатурыЗаказов.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаПотребности.Номенклатура, СтрокаПотребности.ХарактеристикаНоменклатуры, СтрокаПотребности.Тара));
		
		Для каждого СтрокаТаблицаНоменклатурыЗаказов Из СтрокиТаблицаНоменклатурыЗаказов Цикл
			
			Если ЗначениеНеЗаполнено(СтрокаТаблицаНоменклатурыЗаказов.ЗаказПокупателя) Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаТаблицаНоменклатурыЗаказов.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицаНоменклатурыЗаказов.ДатаПоступленияЗаказа > СтрокаПотребности.ДатаПотребности Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаТаблицаНоменклатурыЗаказов.Количество >= СтрокаПотребности.КоличествоПланаОстаток Тогда
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Индекс          = СтрокаПотребности.Индекс;
				НоваяСтрока.ЗаказПоставщику = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику;
				Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
					НоваяСтрока.ИДОбъекта = СтрокаТаблицаНоменклатурыЗаказов.ИДОбъекта;
				КонецЕсли; 
				НоваяСтрока.Количество      = СтрокаПотребности.КоличествоПланаОстаток;
				Если СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.Контрагент;
				Иначе
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
				КонецЕсли; 
				
				СтрокаТаблицаНоменклатурыЗаказов.Количество = СтрокаТаблицаНоменклатурыЗаказов.Количество - СтрокаПотребности.КоличествоПланаОстаток;
				
				СтрокаПотребности.КоличествоПланаОстаток = 0;
				
			Иначе
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Индекс          = СтрокаПотребности.Индекс;
				НоваяСтрока.ЗаказПоставщику = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику;
				Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
					НоваяСтрока.ИДОбъекта = СтрокаТаблицаНоменклатурыЗаказов.ИДОбъекта;
				КонецЕсли; 
				НоваяСтрока.Количество      = СтрокаТаблицаНоменклатурыЗаказов.Количество;
				Если СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.Контрагент;
				Иначе
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
				КонецЕсли; 
				
				СтрокаПотребности.КоличествоПланаОстаток = СтрокаПотребности.КоличествоПланаОстаток - СтрокаТаблицаНоменклатурыЗаказов.Количество;
				
				СтрокаТаблицаНоменклатурыЗаказов.Количество = 0;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла; 

	// Теперь удовлетворим оставшиеся потребности у которых заказы покупателей не указаны
	МаксимальноеЗначениеПрогрессора = ТаблицаПотребности.Количество();
	Для каждого СтрокаПотребности Из ТаблицаПотребности Цикл
		
		ТекущееЗначениеПрогрессора = ТаблицаПотребности.Индекс(СтрокаПотребности) + 1;
		
		Если СтрокаПотребности.КоличествоПланаОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли; 
			
		СтрокиТаблицаНоменклатурыЗаказов = ТаблицаНоменклатурыЗаказов.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаПотребности.Номенклатура, СтрокаПотребности.ХарактеристикаНоменклатуры, СтрокаПотребности.Тара));
		
		Для каждого СтрокаТаблицаНоменклатурыЗаказов Из СтрокиТаблицаНоменклатурыЗаказов Цикл
			
			Если СтрокаТаблицаНоменклатурыЗаказов.ЗаказПокупателя <> Неопределено Тогда
				Если НЕ СтрокаТаблицаНоменклатурыЗаказов.ЗаказПокупателя.Пустая() Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			
			Если СтрокаТаблицаНоменклатурыЗаказов.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицаНоменклатурыЗаказов.ДатаПоступленияЗаказа > СтрокаПотребности.ДатаПотребности Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаТаблицаНоменклатурыЗаказов.Количество >= СтрокаПотребности.КоличествоПланаОстаток Тогда
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Индекс          = СтрокаПотребности.Индекс;
				НоваяСтрока.ЗаказПоставщику = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику;
				Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
					НоваяСтрока.ИДОбъекта = СтрокаТаблицаНоменклатурыЗаказов.ИДОбъекта;
				КонецЕсли; 
				НоваяСтрока.Количество      = СтрокаПотребности.КоличествоПланаОстаток;
				Если СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.Контрагент;
				Иначе
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
				КонецЕсли; 
				СтрокаТаблицаНоменклатурыЗаказов.Количество = СтрокаТаблицаНоменклатурыЗаказов.Количество - СтрокаПотребности.КоличествоПланаОстаток;
				
				СтрокаПотребности.КоличествоПланаОстаток = 0;
				
			Иначе
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Индекс          = СтрокаПотребности.Индекс;
				НоваяСтрока.ЗаказПоставщику = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику;
				Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
					НоваяСтрока.ИДОбъекта = СтрокаТаблицаНоменклатурыЗаказов.ИДОбъекта;
				КонецЕсли; 
				НоваяСтрока.Количество      = СтрокаТаблицаНоменклатурыЗаказов.Количество;
				Если СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.Контрагент;
				Иначе
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
				КонецЕсли; 
				
				СтрокаПотребности.КоличествоПланаОстаток = СтрокаПотребности.КоличествоПланаОстаток - СтрокаТаблицаНоменклатурыЗаказов.Количество;
				
				СтрокаТаблицаНоменклатурыЗаказов.Количество = 0;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла; 

	// Если остались свободные остатки по заказам не вошедшие в планы потребности, запишем их новыми строками
	// в план потребности с пустыми ссылками кроме Номенклатуры, Характеристики номенклатуры, Заказа покупателя. Дата портебности - пустая.

	МаксимальноеЗначениеПрогрессора = ТаблицаНоменклатурыЗаказов.Количество();
	Для каждого СтрокаТаблицыНоменклатурыЗаказов Из ТаблицаНоменклатурыЗаказов Цикл

		ТекущееЗначениеПрогрессора = ТаблицаНоменклатурыЗаказов.Индекс(СтрокаТаблицыНоменклатурыЗаказов) + 1;
		
		Если СтрокаТаблицыНоменклатурыЗаказов.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиТаблицыПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ДатаПотребности, Тара", СтрокаТаблицыНоменклатурыЗаказов.Номенклатура, СтрокаТаблицыНоменклатурыЗаказов.ХарактеристикаНоменклатуры, '00010101000000', СтрокаТаблицыНоменклатурыЗаказов.Тара));
		Если СтрокиТаблицыПотребности.Количество() > 0 Тогда
			СтрокаТаблицыПотребности = СтрокиТаблицыПотребности[0];
		Иначе
			СтрокаТаблицыПотребности = ТаблицаПотребности.Добавить();
			СтрокаТаблицыПотребности.Номенклатура = СтрокаТаблицыНоменклатурыЗаказов.Номенклатура;
			СтрокаТаблицыПотребности.ХарактеристикаНоменклатуры = СтрокаТаблицыНоменклатурыЗаказов.ХарактеристикаНоменклатуры;
			СтрокаТаблицыПотребности.ЗаказПокупателя = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПокупателя;
			СтрокаТаблицыПотребности.ДатаПотребности = '00010101000000';
			СтрокаТаблицыПотребности.Тара = СтрокаТаблицыНоменклатурыЗаказов.Тара;
			Если ТаблицаПотребности.Колонки.Найти("ОтветственныйЗаПокупки") <> Неопределено И НЕ ЗначениеНеЗаполнено(СтрокаТаблицыНоменклатурыЗаказов.Номенклатура) Тогда
				СтрокаТаблицыПотребности.ОтветственныйЗаПокупки = СтрокаТаблицыНоменклатурыЗаказов.Номенклатура.ОтветственныйМенеджерЗаПокупки;
			КонецЕсли; 
			Попытка
				СтрокаТаблицыПотребности.КонечнаяПродукция = Справочники.Номенклатура.ПустаяСсылка();
				СтрокаТаблицыПотребности.Проект = Справочники.Проекты.ПустаяСсылка();
			Исключение
			КонецПопытки;
			СтрокаТаблицыПотребности.Индекс = ТаблицаПотребности.Индекс(СтрокаТаблицыПотребности);
			СтрокаТаблицыПотребности.КоличествоПлана = 0;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
		НоваяСтрока.Индекс          = СтрокаТаблицыПотребности.Индекс;
		НоваяСтрока.ЗаказПоставщику = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику;
		Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
			НоваяСтрока.ИДОбъекта = СтрокаТаблицыНоменклатурыЗаказов.ИДОбъекта;
		КонецЕсли; 
		НоваяСтрока.Количество      = СтрокаТаблицыНоменклатурыЗаказов.Количество;
		Если СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
			НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.Контрагент;
		Иначе
			НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
		КонецЕсли; 
		
		СтрокаТаблицыНоменклатурыЗаказов.Количество = 0;
		
	КонецЦикла; 

	Если ТаблицаЗаказовПоставщикам.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
		ТаблицаЗаказовПоставщикам.Свернуть("ЗаказПоставщику, ИДОбъекта, Индекс, Поставщик", "Количество");
	Иначе
		ТаблицаЗаказовПоставщикам.Свернуть("ЗаказПоставщику, Индекс, Поставщик", "Количество");
	КонецЕсли; 
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ТаблицаПотребности", ТаблицаПотребности);
	СтруктураВозврата.Вставить("ТаблицаЗаказовПоставщикам", ТаблицаЗаказовПоставщикам);

	Возврат СтруктураВозврата;
	
КонецФункции

// Функция формирует дерево значений, с распределенными заказами поставщикам под потребности в номенклатуре
//  для нужд производства и отдела продаж
//
// Параметры
//  ТаблицаСтрокГруппировки             - ТаблицаЗначений, таблица потребностей в номенклатуре
//  ТаблицаЗаказовПоставщикам           - ТаблицаЗначений, заказы поставщикам, которые необходимо распределить по потребностям
//  СтруктураЗначенийГруппировок        - Структура, содержащая значения группировок, которыми должн быть ограничен вывод строк,
//                                        точнее это своеобразный отбор по значениям группировок дерева
//  Группировки                         - ТаблицаЗначений, группировки дерева, точнее в каком порядке и какую информацию надо
//                                        отображать в основной колонке дерева
//  ПоказыватьПустыеСтрокиНижнихУровней - Булево, показывать ли в дереве строки, у которых все подчиненные строки содержат пустые значения
//
// Возвращаемое значение:
//   ДеревоЗначений
//
Функция ПолучитьДеревоРаспределенияПотребностей(ТаблицаСтрокГруппировки, ТаблицаЗаказовПоставщикам, СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора = 0, ТекущееЗначениеПрогрессора = 0) Экспорт

	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("ЗначениеГруппировки");
	Дерево.Колонки.Добавить("КоличествоПлана", ПолучитьОписаниеТиповЧисла(15,3));
	Дерево.Колонки.Добавить("КоличествоФакта", ПолучитьОписаниеТиповЧисла(15,3));
	Дерево.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Дерево.Колонки.Добавить("ИДОбъекта", ПолучитьОписаниеТиповСтроки(50));
	Дерево.Колонки.Добавить("Тара", Новый ОписаниеТипов("Булево"));
	
	МаксимальноеЗначениеПрогрессора = ТаблицаСтрокГруппировки.Количество();
	
	СформироватьСтрокиДерева(Дерево, ТаблицаСтрокГруппировки, ТаблицаЗаказовПоставщикам, 0, СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
	
	Возврат Дерево;

КонецФункции

// Процедура рекурсивно формирует строки дерева для функции ПолучитьДеревоРаспределенияПотребностей
//
// Параметры
//  СтрокаДереваПрошлогоУровня          - СтрокаДереваЗначений, строки подчиненные которой необходимо формировать
//  ТаблицаСтрокГруппировки             - ТаблицаЗначений, таблица потребностей в номенклатуре
//  ТаблицаЗаказовПоставщикам           - ТаблицаЗначений, заказы поставщикам, которые необходимо распределить по потребностям
//  ИндексГруппировки                   - Число, индекс группировки, строки для которой мы формируем
//  СтруктураЗначенийГруппировок        - Структура, содержащая значения группировок, которыми должн быть ограничен вывод строк,
//                                        точнее это своеобразный отбор по значениям группировок дерева
//  Группировки                         - ТаблицаЗначений, группировки дерева, точнее в каком порядке и какую информацию надо
//                                        отображать в основной колонке дерева
//  ПоказыватьПустыеСтрокиНижнихУровней - Булево, показывать ли в дереве строки, у которых все подчиненные строки содержат пустые значения
//
//
// Возвращаемое значение:
//   НЕТ
//
Процедура СформироватьСтрокиДерева(СтрокаДереваПрошлогоУровня, ТаблицаСтрокГруппировки, ТаблицаЗаказовПоставщикам, ИндексГруппировки, СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора)

	Если ИндексГруппировки > Группировки.Количество() - 1 Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТаблицаСтрокГруппировки <> МаксимальноеЗначениеПрогрессора И ИндексГруппировки = 1 Тогда
		ТекущееЗначениеПрогрессора = ТекущееЗначениеПрогрессора + ТаблицаСтрокГруппировки.Количество();
	КонецЕсли; 
	
	ИмяГруппировки = Группировки[ИндексГруппировки].Имя;
	
	Если ИмяГруппировки = "Поставщик" ИЛИ ИмяГруппировки = "ЗаказПоставщику" ИЛИ ИмяГруппировки = "ИДОбъекта" Тогда
		// Поля правой таблицы
		
		ЗначенияГруппировки = Неопределено;
		СтруктураЗначенийГруппировок.Свойство(ИмяГруппировки, ЗначенияГруппировки);
		Если ЗначенияГруппировки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаСтрокДаннойГруппировки = ТаблицаСтрокГруппировки.Скопировать();
		ТекущаяТаблицаЗаказовПоставщикам = ТаблицаЗаказовПоставщикам.Скопировать();
		ИндексСтроки = 0;
		Пока 1 = 1 Цикл
		
			Если ИндексСтроки > ТекущаяТаблицаЗаказовПоставщикам.Количество() - 1 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаТекущейТаблицыЗаказовПоставщикам = ТекущаяТаблицаЗаказовПоставщикам[ИндексСтроки];
			
			Если ТаблицаСтрокДаннойГруппировки.Найти(СтрокаТекущейТаблицыЗаказовПоставщикам.Индекс, "Индекс") = Неопределено Тогда
				ТекущаяТаблицаЗаказовПоставщикам.Удалить(СтрокаТекущейТаблицыЗаказовПоставщикам);
				Продолжить;
			КонецЕсли; 
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
		Если ТекущаяТаблицаЗаказовПоставщикам.Количество() = 0 Тогда
			
			СтрокаДереваТекущегоУровня = СтрокаДереваПрошлогоУровня.Строки.Добавить();
			СтрокаДереваТекущегоУровня.ЗначениеГруппировки = "<...>";
			
			СформироватьСтрокиДерева(СтрокаДереваТекущегоУровня, ТаблицаСтрокДаннойГруппировки, ТекущаяТаблицаЗаказовПоставщикам, (ИндексГруппировки + 1), СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
			
			Если ТипЗнч(СтрокаДереваПрошлогоУровня) = Тип("СтрокаДереваЗначений") Тогда
				СтрокаДереваПрошлогоУровня.КоличествоФакта = СтрокаДереваПрошлогоУровня.КоличествоФакта + СтрокаДереваТекущегоУровня.КоличествоФакта;
			КонецЕсли; 
			
			Если НЕ ПоказыватьПустыеСтрокиНижнихУровней И СтрокаДереваТекущегоУровня.Строки.Количество() = 0 Тогда
				СтрокаДереваПрошлогоУровня.Строки.Удалить(СтрокаДереваТекущегоУровня);
			КонецЕсли; 
			
		Иначе
			
			// Сначала обработаем те строки левой таблицы, которых нет в правой
			
			КопияТаблицаСтрокДаннойГруппировки = ТаблицаСтрокДаннойГруппировки.Скопировать();
			ИндексСтроки = 0;
			Пока 1 = 1 Цикл
			
				Если ИндексСтроки > КопияТаблицаСтрокДаннойГруппировки.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаКопияТаблицаСтрокДаннойГруппировки = КопияТаблицаСтрокДаннойГруппировки[ИндексСтроки];
			
				Если ТаблицаЗаказовПоставщикам.Найти(СтрокаКопияТаблицаСтрокДаннойГруппировки.Индекс, "Индекс") <> Неопределено Тогда
					КопияТаблицаСтрокДаннойГруппировки.Удалить(СтрокаКопияТаблицаСтрокДаннойГруппировки);
					Продолжить;
				КонецЕсли; 
				
				ИндексСтроки = ИндексСтроки + 1;
			
			КонецЦикла;
			
			Если КопияТаблицаСтрокДаннойГруппировки.Количество() > 0 Тогда
			
				СтрокаДереваТекущегоУровня = СтрокаДереваПрошлогоУровня.Строки.Добавить();
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = "<...>";
				
				ТекущаяТаблицаЗаказовПоставщикам = ТаблицаЗаказовПоставщикам.Скопировать();
				
				СформироватьСтрокиДерева(СтрокаДереваТекущегоУровня, КопияТаблицаСтрокДаннойГруппировки, ТекущаяТаблицаЗаказовПоставщикам, (ИндексГруппировки + 1), СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
				
				Если ТипЗнч(СтрокаДереваПрошлогоУровня) = Тип("СтрокаДереваЗначений") Тогда
					СтрокаДереваПрошлогоУровня.КоличествоФакта = СтрокаДереваПрошлогоУровня.КоличествоФакта + СтрокаДереваТекущегоУровня.КоличествоФакта;
				КонецЕсли; 
			
				Если НЕ ПоказыватьПустыеСтрокиНижнихУровней И СтрокаДереваТекущегоУровня.Строки.Количество() = 0 Тогда
					СтрокаДереваПрошлогоУровня.Строки.Удалить(СтрокаДереваТекущегоУровня);
				КонецЕсли; 
			
			КонецЕсли;
			
			Для каждого ЗначениеГруппировки Из ЗначенияГруппировки Цикл
				
				Если ТекущаяТаблицаЗаказовПоставщикам.Найти(ЗначениеГруппировки, ИмяГруппировки) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокиТекущейТаблицыЗаказовПоставщикам = ТекущаяТаблицаЗаказовПоставщикам.НайтиСтроки(Новый Структура(ИмяГруппировки, ЗначениеГруппировки));
				
				КопияТаблицаСтрокДаннойГруппировки = ТаблицаСтрокДаннойГруппировки.Скопировать();
			
				ИндексСтрокиКопии = 0;
				Пока 1 = 1 Цикл
					
					Если ИндексСтрокиКопии > КопияТаблицаСтрокДаннойГруппировки.Количество() - 1 Тогда
						Прервать;
					КонецЕсли; 
					
					СтрокаКопии = КопияТаблицаСтрокДаннойГруппировки[ИндексСтрокиКопии];
					
					НайденаСтрокаПоИндексу = Ложь;
					Для каждого Строка Из СтрокиТекущейТаблицыЗаказовПоставщикам Цикл
						Если Строка.Индекс = СтрокаКопии.Индекс Тогда
							НайденаСтрокаПоИндексу = Истина;
							Прервать;
						КонецЕсли; 
					КонецЦикла;
					
					Если НайденаСтрокаПоИндексу = Ложь Тогда
						КопияТаблицаСтрокДаннойГруппировки.Удалить(СтрокаКопии);
						Продолжить;
					КонецЕсли;
					
					ИндексСтрокиКопии = ИндексСтрокиКопии + 1;
				
				КонецЦикла;
				
				КоличествоФакта = 0;
				КопияТаблицаЗаказовПоставщикам = ТекущаяТаблицаЗаказовПоставщикам.Скопировать();
				ИндексСтроки = 0;
				Пока 1 = 1 Цикл
					
					Если ИндексСтроки > КопияТаблицаЗаказовПоставщикам.Количество() - 1 Тогда
						Прервать;
					КонецЕсли;
					
					СтрокаКопияТаблицаЗаказовПоставщикам = КопияТаблицаЗаказовПоставщикам[ИндексСтроки];
					
					Если СтрокаКопияТаблицаЗаказовПоставщикам[ИмяГруппировки] <> ЗначениеГруппировки Тогда
						КопияТаблицаЗаказовПоставщикам.Удалить(СтрокаКопияТаблицаЗаказовПоставщикам);
						Продолжить;
					КонецЕсли; 
					
					КоличествоФакта = КоличествоФакта + СтрокаКопияТаблицаЗаказовПоставщикам.Количество;
					
					ИндексСтроки = ИндексСтроки + 1;
					
				КонецЦикла; 
				
				Если (ИмяГруппировки = "ЗаказПоставщику" ИЛИ ИмяГруппировки = "ИДОбъекта") И КоличествоФакта <= 0 Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаДереваТекущегоУровня = СтрокаДереваПрошлогоУровня.Строки.Добавить();
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = ЗначениеГруппировки;
				Если ИмяГруппировки = "ЗаказПоставщику" ИЛИ ИмяГруппировки = "ИДОбъекта" Тогда
					СтрокаДереваТекущегоУровня.КоличествоФакта = КоличествоФакта;
					СтрокаЗаказаПоставщику = ТекущаяТаблицаЗаказовПоставщикам.Найти(ЗначениеГруппировки, ИмяГруппировки);
					Если СтрокаЗаказаПоставщику <> Неопределено И ТекущаяТаблицаЗаказовПоставщикам.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
						СтрокаДереваТекущегоУровня.ИДОбъекта = СтрокаЗаказаПоставщику.ИДОбъекта;
					КонецЕсли; 
				КонецЕсли;
				
				СформироватьСтрокиДерева(СтрокаДереваТекущегоУровня, КопияТаблицаСтрокДаннойГруппировки, КопияТаблицаЗаказовПоставщикам, (ИндексГруппировки + 1), СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
				
				Если ТипЗнч(СтрокаДереваПрошлогоУровня) = Тип("СтрокаДереваЗначений") Тогда
					СтрокаДереваПрошлогоУровня.КоличествоФакта = СтрокаДереваПрошлогоУровня.КоличествоФакта + СтрокаДереваТекущегоУровня.КоличествоФакта;
				КонецЕсли; 
				
				Если ИмяГруппировки = "Поставщик" И НЕ ПоказыватьПустыеСтрокиНижнихУровней И СтрокаДереваТекущегоУровня.Строки.Количество() = 0 Тогда
					СтрокаДереваПрошлогоУровня.Строки.Удалить(СтрокаДереваТекущегоУровня);
				КонецЕсли; 
			
			КонецЦикла;
			
		КонецЕсли; 
		
	Иначе
		// Поля левой таблицы
		
		ЗначенияГруппировки = Неопределено;
		СтруктураЗначенийГруппировок.Свойство(ИмяГруппировки, ЗначенияГруппировки);
		Если ЗначенияГруппировки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого ЗначениеГруппировки Из ЗначенияГруппировки Цикл
			
			ТекЗначениеГруппировки = ЗначениеГруппировки;
			
			Если ИмяГруппировки = "Номенклатура" Тогда
				Если ТаблицаСтрокГруппировки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", ТекЗначениеГруппировки.Номенклатура, ТекЗначениеГруппировки.ХарактеристикаНоменклатуры, ТекЗначениеГруппировки.Тара)).Количество() = 0 Тогда
					Продолжить;
				КонецЕсли; 
			Иначе
				Если ТаблицаСтрокГруппировки.Найти(ТекЗначениеГруппировки, ИмяГруппировки) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
			
			СтрокаГруппировки = "";
			Если ИмяГруппировки = "Номенклатура" Тогда
				ТекЗначениеГруппировки = ЗначениеГруппировки.Номенклатура;
				ХарактеристикаНоменклатуры = ЗначениеГруппировки.ХарактеристикаНоменклатуры;
				Тара = ЗначениеГруппировки.Тара;
			Иначе
				СтрокаГруппировки = Строка(ЗначениеГруппировки);
			КонецЕсли;
			
			КоличествоПлана = 0;
			
			ТаблицаСтрокДаннойГруппировки = ТаблицаСтрокГруппировки.Скопировать();
			ИндексСтроки = 0;
			Пока 1 = 1 Цикл
			
				Если ИндексСтроки > ТаблицаСтрокДаннойГруппировки.Количество() - 1 Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаТаблицы = ТаблицаСтрокДаннойГруппировки[ИндексСтроки];
				
				Если ИмяГруппировки = "Номенклатура" Тогда
					Если СтрокаТаблицы.Номенклатура <> ЗначениеГруппировки.Номенклатура ИЛИ СтрокаТаблицы.ХарактеристикаНоменклатуры <> ЗначениеГруппировки.ХарактеристикаНоменклатуры ИЛИ СтрокаТаблицы.Тара <> ЗначениеГруппировки.Тара Тогда
						ТаблицаСтрокДаннойГруппировки.Удалить(СтрокаТаблицы);
						Продолжить;
					КонецЕсли; 
				Иначе
					Если СтрокаТаблицы[ИмяГруппировки] <> ЗначениеГруппировки Тогда
						ТаблицаСтрокДаннойГруппировки.Удалить(СтрокаТаблицы);
						Продолжить;
					КонецЕсли; 
				КонецЕсли;
			
				КоличествоПлана = КоличествоПлана + СтрокаТаблицы.КоличествоПлана;
			
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла;
			
			СтрокаДереваТекущегоУровня = СтрокаДереваПрошлогоУровня.Строки.Добавить();
			Если ИмяГруппировки = "Номенклатура" Тогда
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = ЗначениеГруппировки.Номенклатура;
				СтрокаДереваТекущегоУровня.ХарактеристикаНоменклатуры = ЗначениеГруппировки.ХарактеристикаНоменклатуры;
				СтрокаДереваТекущегоУровня.Тара = ЗначениеГруппировки.Тара;
			Иначе
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = ?(ПустаяСтрока(СтрокаГруппировки), ЗначениеГруппировки, СтрокаГруппировки);
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = ЗначениеГруппировки;
			КонецЕсли; 
			СтрокаДереваТекущегоУровня.КоличествоПлана = КоличествоПлана;
			
			СформироватьСтрокиДерева(СтрокаДереваТекущегоУровня, ТаблицаСтрокДаннойГруппировки, ТаблицаЗаказовПоставщикам, (ИндексГруппировки + 1), СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
		
			Если ТипЗнч(СтрокаДереваПрошлогоУровня) = Тип("СтрокаДереваЗначений") Тогда
				СтрокаДереваПрошлогоУровня.КоличествоФакта = СтрокаДереваПрошлогоУровня.КоличествоФакта + СтрокаДереваТекущегоУровня.КоличествоФакта;
			КонецЕсли; 
			
			Если ТипЗнч(СтрокаДереваТекущегоУровня.ЗначениеГруппировки) = Тип("Дата") И СтрокаДереваТекущегоУровня.ЗначениеГруппировки = '00010101' И СтрокаДереваТекущегоУровня.Строки.Количество() = 0 Тогда
				СтрокаДереваПрошлогоУровня.Строки.Удалить(СтрокаДереваТекущегоУровня);
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

// Функция возвращает интервалы напоминаний и представлениями.
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//  СписокЗначений
//
Функция ПолучитьСписокИнтерваловНапоминания() Экспорт

	СписокИнтервалов = Новый СписокЗначений;
	СписокИнтервалов.Добавить(5*60,"5 мин.");
	СписокИнтервалов.Добавить(10*60,"10 мин.");
	СписокИнтервалов.Добавить(15*60,"15 мин.");
	СписокИнтервалов.Добавить(30*60,"30 мин.");
	СписокИнтервалов.Добавить(1*60*60,"1 час");
	СписокИнтервалов.Добавить(2*60*60,"2 часа");
	
	//+++ 12.11.2015 - больше нельзя (Егор Малышев)
	
	//СписокИнтервалов.Добавить(4*60*60,"4 часа");
	//СписокИнтервалов.Добавить(8*60*60,"8 часов");
	//СписокИнтервалов.Добавить(1*24*60*60,"1 день");
	//СписокИнтервалов.Добавить(2*24*60*60,"2 дня");
	//СписокИнтервалов.Добавить(3*24*60*60,"3 дня");
	//СписокИнтервалов.Добавить(4*24*60*60,"4 дня");
	//СписокИнтервалов.Добавить(1*7*24*60*60,"1 неделя");
	Возврат СписокИнтервалов;

КонецФункции
