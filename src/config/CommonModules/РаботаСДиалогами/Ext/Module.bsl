// Этот модуль предназачен для реализации алгоритмов работы форм и 
// содержит процедуры и функции работы с формами и элементами форм,
// а также подготовки данных для представления информации в формах.
// Временно присутствует секция поддержки формирования печатных форм.


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧЕНИЯ ТАЙПИНГА В ПОЛЕ ВВОДА

// Функция формирует список выбора значений, для события ОкончаниеВводаТекста.
//
// Параметры
//  РезультатЗапроса - РезультатЗапроса при тайпинге
//  Текст - Строка, текст тайпинга
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
// Возвращаемое значение:
//   Список значений
//
Функция СформироватьСписокВыбораЗначенийТайпинга(РезультатЗапроса, Знач Текст, ТипСправочника)

	ПустаяСсылка = Новый(ТипСправочника);
	КоллекцияЗначенийПоискаПоПодстроке = ПустаяСсылка.Метаданные().ВводПоСтроке;
	
	СписокВозврата = Новый СписокЗначений;
	
	Текст = ВРег(Текст);
	ДлинаТекста = СтрДлина(Текст);
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	ЕстьНаименование = (ТаблицаЗапроса.Колонки.Найти("Наименование") <> Неопределено);
	ЕстьКод          = (ТаблицаЗапроса.Колонки.Найти("Код") <> Неопределено);
	
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
	
		Если ЕстьНаименование И КоллекцияЗначенийПоискаПоПодстроке.Найти("Наименование") <> Неопределено И ВРег(Лев(СтрокаТаблицы.Наименование, ДлинаТекста)) = Текст Тогда
			СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, (СтрокаТаблицы.Наименование + ?(ЕстьКод, (" (" + Строка(СтрокаТаблицы.Код) + ")"), "")));
			Продолжить;
		КонецЕсли;
		
		Если ЕстьКод И КоллекцияЗначенийПоискаПоПодстроке.Найти("Код") <> Неопределено И ВРег(Лев(СтрокаТаблицы.Код, ДлинаТекста)) = Текст Тогда
			Если ЕстьНаименование Тогда
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, (СтрокаТаблицы.Наименование + " (" + Строка(СтрокаТаблицы.Код) + ")"));
			Иначе
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, Строка(СтрокаТаблицы.Код));
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Для каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
		
			Если Колонка.Имя = "Наименование" ИЛИ Колонка.Имя = "Код" ИЛИ Колонка.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли; 
		
			Если ВРег(Лев(СтрокаТаблицы[Колонка.Имя], ДлинаТекста)) = Текст Тогда
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, ("" + СтрокаТаблицы[Колонка.Имя] + ?(ЕстьНаименование, (" (" + Строка(СтрокаТаблицы.Наименование) + ")"), "")));
			КонецЕсли
			
		КонецЦикла; 
	
	КонецЦикла; 

	Возврат СписокВозврата;
	
КонецФункции

// Функция выполняет запрос при автоподборе текста  и при окончании ввода текста в поле ввода.
//
// Параметры
//  Текст - Строка, текст введенный в поле ввода видв контактной информации, по которому необходимо строить поиск
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//  КоличествоЭлементов - Число, количество элементов в результирующей таблице запроса
//
// Возвращаемое значение
//  РезультатЗапроса
//
Функция ПолучитьРезультатЗапросаАвтоподбора(Знач Текст, СтруктураПараметров, ТипСправочника, КоличествоЭлементов) Экспорт

	ПустаяСсылкаТипа = Новый(ТипСправочника);
	
	МетаданныеОбъекта = ПустаяСсылкаТипа.Метаданные();
	
	КоллекцияПоискаПоПодстроке = МетаданныеОбъекта.ВводПоСтроке;
	Если КоллекцияПоискаПоПодстроке.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ИмяТаблицыСправочника = МетаданныеОбъекта.Имя;
	
	Запрос = Новый Запрос;
	
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Запрос.УстановитьПараметр("ТекстАвтоПодбора"     , (Текст + "%"));
	Попытка
		Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Число(Текст));
	Исключение
		Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Неопределено);
	КонецПопытки;
	
	СтрокаОтборовПоСтруктуре = "";
	Для каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + "
		|		И
		|		" + ?(КоллекцияПоискаПоПодстроке.Количество() = 1, "ТаблицаВложенногоЗапроса.", "ТаблицаСправочника.") + ЭлементСтруктуры.Ключ + " = &"+ ЭлементСтруктуры.Ключ;
	КонецЦикла; 
	
	СтрокаПолей = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
	|	ТаблицаВложенногоЗапроса.Ссылка КАК Ссылка,
	|";
	
	Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
		СтрокаПолей = СтрокаПолей + "
		|	ТаблицаВложенногоЗапроса.Ссылка.Наименование КАК Наименование,";
	КонецЕсли;
	
	Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
		СтрокаПолей = СтрокаПолей + "
		|	ТаблицаВложенногоЗапроса.Ссылка.Код КАК Код,";
	КонецЕсли; 
	
	Если КоллекцияПоискаПоПодстроке.Количество() = 1 Тогда
		
		ЭлементКоллекции = КоллекцияПоискаПоПодстроке[0];
		
		Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
			СтрокаПолей = СтрокаПолей + "
			|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя;
			ТипЗначенияПоиска = МетаданныеОбъекта.Реквизиты[ЭлементКоллекции.Имя].Тип.Типы()[0];
		Иначе
			Если ЭлементКоллекции.Имя = "Наименование" Тогда
				ТипЗначенияПоиска = Тип("Строка");
			Иначе
				Если МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
					ТипЗначенияПоиска = Тип("Строка");
				Иначе
					ТипЗначенияПоиска = Тип("Число");
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
		|ИЗ
		|	Справочник." + ИмяТаблицыСправочника + " КАК ТаблицаВложенногоЗапроса
		|ГДЕ
		|	ТаблицаВложенногоЗапроса." + ЭлементКоллекции.Имя + ?(ТипЗначенияПоиска = Тип("Строка"), (" ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"""), (" =  &ТекстАвтоПодбораЧисло")) + СтрокаОтборовПоСтруктуре;
	
	Иначе
		
		ПервыйЭлемент = Истина;
		СтрокаТаблиц = "";
		Для каждого ЭлементКоллекции Из КоллекцияПоискаПоПодстроке Цикл
			
			Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
				СтрокаПолей = СтрокаПолей + "
				|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя + ",";
				ТипЗначенияПоиска = МетаданныеОбъекта.Реквизиты[ЭлементКоллекции.Имя].Тип.Типы()[0];
			Иначе
				Если ЭлементКоллекции.Имя = "Наименование" Тогда
					ТипЗначенияПоиска = Тип("Строка");
				Иначе
					Если МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
						ТипЗначенияПоиска = Тип("Строка");
					Иначе
						ТипЗначенияПоиска = Тип("Число");
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
			
			Если НЕ ПервыйЭлемент Тогда
				СтрокаТаблиц = СтрокаТаблиц + "
				|	ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли; 
			ПервыйЭлемент = Ложь;
			
			СтрокаТаблиц = СтрокаТаблиц + "
			|	ВЫБРАТЬ
			|		ТаблицаСправочника.Ссылка КАК Ссылка
			|	ИЗ
			|		Справочник." + ИмяТаблицыСправочника + " КАК ТаблицаСправочника
			|	ГДЕ
			|		ТаблицаСправочника." + ЭлементКоллекции.Имя + ?(ТипЗначенияПоиска = Тип("Строка"), (" ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"""), (" =  &ТекстАвтоПодбораЧисло")) + СтрокаОтборовПоСтруктуре;
		
		КонецЦикла; 
		
		Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
		|ИЗ
		|
		|	(
		|" + СтрокаТаблиц + "
		|	) КАК ТаблицаВложенногоЗапроса";
	
	КонецЕсли; 
	
	Возврат Запрос.Выполнить();

КонецФункции

// Процедура обслуживает событие ОбновлениеОтображения в форме, где расположен ЭУ тайпинга.
//
// Параметры
//  ЭтаФорма - Форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент управления в котором происводится тайпинг
//
Процедура ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, Элемент, ОбработкаТайпинга, ТекстТайпинга) Экспорт

	Если ОбработкаТайпинга Тогда
		ЭтаФорма.ТекущийЭлемент = Элемент;
		Элемент.ВыделенныйТекст = ТекстТайпинга;
		ОбработкаТайпинга = Ложь;
		ТекстТайпинга = "";
	КонецЕсли; 
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		Элемент.ЦветТекстаПоля = ЦветаСтиля.ТекстИнформационнойНадписи;
	Иначе
		Элемент.ЦветТекстаПоля = Новый Цвет;
	КонецЕсли;

КонецПроцедуры

// Процедура обслуживает событие АвтоПодборТекста элемента управления ПолеВвода для подмены автопоиска по тексту.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  ТекстАвтоПодбора - текст автоподбора в поле Вид
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, ТипСправочника) Экспорт

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 2);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ПустаяСсылка = Новый(ТипСправочника);
			КоллекцияЭлементовПоиска = ПустаяСсылка.Метаданные().ВводПоСтроке;
			Для каждого ЭлементКоллекции Из КоллекцияЭлементовПоиска Цикл
				Если Лев(Врег(Выборка[ЭлементКоллекции.Имя]), СтрДлина(Текст)) = ВРег(Текст) Тогда
					Если Врег(Текст) <> Врег(Выборка[ЭлементКоллекции.Имя]) Тогда
						ТекстАвтоподбора = Выборка[ЭлементКоллекции.Имя];
					КонецЕсли;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления Вид в форме записи регистра
// сведений Контактная информация.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  Значение - данные элемента управления поле ввода
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ЭтаФорма - форма записи регистра сведений контактная информация
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
&НаКлиенте
Процедура ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, ТипСправочника, ОбработкаТайпинга = Неопределено, ТекстТайпинга = Неопределено, ПоследнееЗначениеЭлементаТайпинга = Неопределено, ПриОтсутствииЗначенияОставлятьТекст = Истина) Экспорт

	Если ПустаяСтрока(Текст) Тогда
		Значение = Новый(ТипСправочника);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 51);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
		ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			ОбработкаТайпинга = Истина;
			ТекстТайпинга = Текст;
		Иначе
			Значение = Текст;
		КонецЕсли;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Значение = Выборка.Ссылка;
		ИначеЕсли Выборка.Количество() > 50 Тогда
			Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора.
						   |Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
			Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
				Значение = Текст;
			Иначе
				Значение = ПоследнееЗначениеЭлементаТайпинга;
			КонецЕсли; 
		Иначе
			Если Выборка.Количество() = 0 Тогда
				ВыбранныйЭлемент = Неопределено;
			Иначе
				СписокВыбора = СформироватьСписокВыбораЗначенийТайпинга(РезультатЗапроса, Текст, ТипСправочника);
				ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
			КонецЕсли; 
			Если ВыбранныйЭлемент = Неопределено Тогда
				ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
				Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
					Значение = Текст;
				Иначе
					Значение = ПоследнееЗначениеЭлементаТайпинга;
				КонецЕсли; 
				Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
					ОбработкаТайпинга = Истина;
					ТекстТайпинга = Текст;
				КонецЕсли;
			Иначе
				Значение = ВыбранныйЭлемент.Значение;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

///////////////// ПРИ ИЗМЕНЕНИИ ////////////////////////

// Процедура выполняет общие действия при изменнении договора взаиморасчетов
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  СпособЗаполненияЦен            - значение перечисления "Способы заполнения цен", определяет по какому из 
//                                   регистров ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос;
//  СтараяВалютаВзаиморасчетов     - ссылка на справочник валют, определяет валюту взаиморасчетов 
//                                   до изменения договора;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа;
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа");
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//  ИмяТабличнойЧасти	           - имя табличной части
//  СтарыйДоговорКонтрагента       - старый договор контрагента, который был до изменения
//  СтруктураЗначений              - структура, в эту переменную возвращаются значения элементов диалога выбора валюты.
//
&НаКлиенте
Процедура ПриИзмененииЗначенияДоговора(ДокументОбъект, СтараяВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
	                             СпособЗаполненияЦен, СтруктураРеквизитовДокумента, ТипОперации = "", ИмяТабличнойЧасти, 
	                             СтарыйДоговорКонтрагента = Неопределено,
	                             СтруктураЗначений = Неопределено) Экспорт

	Перем Договор, ТипЦенВДоговоре;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Договор = ДокументОбъект.ДоговорКонтрагента;

	Если ЗначениеНеЗаполнено(Договор) Тогда

		// Если ДоговорКонтрагента не заполнен то не проводим никаких изменений.
		Возврат;

	Иначе

		// Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
		// и догоров взаиморасчетов имеет тип не договор поставщика, то это неправильно и надо вернуть старый договор
		// Аналогично если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
		// и догоров взаиморасчетов имеет тип не договор покупателя
		МожноПродолжать = Истина;
		Если (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
		     И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			 И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
		 ИЛИ (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
		     И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			 И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
			МожноПродолжать = Ложь;
			СтрокаВозможныхВыборов = ?(СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, "покупателями или с комиссионерами", "поставщиками или комитентами");
		КонецЕсли;
		
		Если НЕ МожноПродолжать Тогда

			Если ЗначениеНеЗаполнено(СтарыйДоговорКонтрагента) Тогда
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			Иначе
				ТекстПредупреждения = "В документе можно выбирать только договора с "
				                    + СтрокаВозможныхВыборов + "!" + Символы.ПС;

				Если СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
					ТекстПредупреждения               = ТекстПредупреждения + "Будет восстановлен старый договор.";
					ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
				Иначе
					ТекстПредупреждения               = ТекстПредупреждения + "Договор будет очищен.";
					ДокументОбъект.ДоговорКонтрагента = Неопределено;
				КонецЕсли;

				Предупреждение(ТекстПредупреждения);
			КонецЕсли;

			Возврат; // дальше ничего пересчитывать не надо

		КонецЕсли;
	КонецЕсли;

	Если ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента)Тогда
		ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли; 

	Если ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда

		ДокументОбъект.Контрагент = Договор.Владелец;

	ИначеЕсли Не ЗначениеНеЗаполнено(Договор)
	        И ДокументОбъект.Контрагент <> Договор.Владелец Тогда //Владелец нового договора должен совпадать с контрагентом документа.

			Предупреждение("Выбранный договор принадлежит другому контрагенту. 
			               |Будет восстановлен старый договор.");
			Договор = СтарыйДоговорКонтрагента;

	КонецЕсли;

	//Владелец нового договора должен совпадать с контрагентом документа.
	
	Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		 И ЗначениеНеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.Организация = Договор.Организация;
	КонецЕсли;

	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если НадоПересчитывать = Ложь Тогда

		Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.ВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента = ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);

			// В некоторых документах курс и кратность документа отсутствуют.
			Если ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			Если ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

		Если ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
			Если Не ЗначениеНеЗаполнено(Договор.ТипЦен) Тогда
				ДокументОбъект.ТипЦен = Договор.ТипЦен;
				Если ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
				   И ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
				   И ДокументОбъект.УчитыватьНДС Тогда
					ДокументОбъект.СуммаВключаетНДС= Договор.ТипЦен.ЦенаВключаетНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	Иначе // ДокументОбъект.[ИмяТабличнойЧасти].Количество() > 0

		// Если заполнен и по другим параметрам, то предварительно спрашиваем
		НеобходимоПересчитать = Ложь;
		ТекстВопроса = "Договор с контрагентом предусматривает параметры взаиморасчетов,
		               |отличные от установленных в документе:";

		// Валюта документа
		Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
		   И (Не ЗначениеНеЗаполнено(Договор.ВалютаВзаиморасчетов)) Тогда
			НовыйВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента = ПолучитьКурсВалюты(НовыйВалютаДокумента, ДокументОбъект.Дата);
			Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КурсВзаиморасчетов", СтруктураКурсаДокумента.Курс);
			КонецЕсли;
			Если СтруктураРеквизитовДокумента.Свойство("КратностьВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КратностьВзаиморасчетов", СтруктураКурсаДокумента.Кратность);
			КонецЕсли;

			Если  ДокументОбъект.ВалютаДокумента <> НовыйВалютаДокумента Тогда
				НеобходимоПересчитать = Истина;
				ТекстВопроса = ТекстВопроса + Символы.ПС + 
				                 "Валюта документа: """ +
				                ?(ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента), "Не задана",СокрЛП(ДокументОбъект.ВалютаДокумента)) +
				                  """, договора: """ +  СокрЛП(НовыйВалютаДокумента) + """.";
			КонецЕсли;
		КонецЕсли;

		// Тип цен
		НадоПередаватьНовыйТипЦен = Ложь;
		Если ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
			НовыйТипЦен = ДокументОбъект.ТипЦен;
			Если Не ЗначениеНеЗаполнено(Договор.ТипЦен) Тогда
				НовыйТипЦен = Договор.ТипЦен;
			КонецЕсли;

			Если ДокументОбъект.ТипЦен <> НовыйТипЦен Тогда
				НеобходимоПересчитать = Истина;
				НадоПередаватьНовыйТипЦен = Истина;
				ТекстВопроса = ТекстВопроса + Символы.ПС +
				                 "Тип цен документа: """ +
				                 ?(ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен), "Не задан",СокрЛП(ДокументОбъект.ТипЦен)) +
				                   """, договора: """ + СокрЛП(НовыйТипЦен) + """.";
			КонецЕсли;
		КонецЕсли;

		Если НеобходимоПересчитать Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС + "Пересчитать документ в соответствии с договором?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда

				// Вызов общей формы "Цены и валюта" и пересчеты по результата выбора в этой форме
				СтруктураРеквизитовДокумента.Вставить("ВызовПриИзмененииЗначенияДоговора");
				ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента,, ИмяТабличнойЧасти, ВалютаРегламентированногоУчета,, СтруктураЗначений, ?(НадоПередаватьНовыйТипЦен, НовыйТипЦен, Неопределено));

				// Если в форме "Цены и валюта" бала нажата кнопка отмена то проверим реквизиты
				// КурсВзаиморасчетов и КратностьВзаиморасчетов на заполнение
				ЕстьКурсВзаиморасчетов      = ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента);
				ЕстьКратностьВзаиморасчетов = ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);
				Если ЕстьКурсВзаиморасчетов ИЛИ ЕстьКратностьВзаиморасчетов Тогда

					СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
					Если ЕстьКурсВзаиморасчетов И ЗначениеНеЗаполнено(ДокументОбъект.КурсВзаиморасчетов)Тогда
						ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
					КонецЕсли;
					Если ЕстьКратностьВзаиморасчетов И ЗначениеНеЗаполнено(ДокументОбъект.КратностьВзаиморасчетов) Тогда
						ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					КонецЕсли;

				КонецЕсли;

			Иначе

				ЕстьКурсВзаиморасчетов      = ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента);
				ЕстьКратностьВзаиморасчетов = ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);
				Если ЕстьКурсВзаиморасчетов ИЛИ ЕстьКратностьВзаиморасчетов Тогда

					СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
					Если ЕстьКурсВзаиморасчетов Тогда
						ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
					КонецЕсли;
					Если ЕстьКратностьВзаиморасчетов Тогда
						ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;
		Иначе

			// Установим курс и кратность взаиморасчетов
			Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) 
			   И (Не ЗначениеНеЗаполнено(Договор.ВалютаВзаиморасчетов)) Тогда
				СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
				Если ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
				КонецЕсли;
				Если ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; // ДокументОбъект.[ИмяТЧ].Количество() = 0

	// если валюта документа после выбора договора не совпадала с валютой договора или с регламентированной, 
	// очистим договор
	Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) 
	   И ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета
	   И ДокументОбъект.ВалютаДокумента <> ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда

		Если ЗначениеНеЗаполнено(СтарыйДоговорКонтрагента) Тогда
			ДокументОбъект.ДоговорКонтрагента = Неопределено;
		Иначе
			ТекстПредупреждения = "Валюта документа не совпадает ни с валютой договора, ни с валютой регламентированного учета!"
			                    + Символы.ПС;

			Если СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
				ТекстПредупреждения               = ТекстПредупреждения + "Будет восстановлен старый договор.";
				ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
			Иначе
				ТекстПредупреждения               = ТекстПредупреждения + "Договор будет очищен.";
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;

			Предупреждение(ТекстПредупреждения);
		КонецЕсли;

		Возврат; // дальше ничего пересчитывать не надо
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияДоговора()

// Процедура выполняет общие действия при изменнении даты документа
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ФлагИзмененияКурса             - валюта регламентированного учета
//

&НаКлиенте
Процедура ПриИзмененииЗначенияДатыДокумента(ДокументОбъект, ВалютаРегламентированногоУчета, ФлагИзмененияКурса = Неопределено) Экспорт

	МетаданныеДокумента            = ДокументОбъект.Метаданные();
	ЕстьВалютаДокумента            = ЕстьРеквизитДокумента("ВалютаДокумента",    МетаданныеДокумента);
	ЕстьДоговорКонтрагента         = ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);
	ПроверкаПоВалютеВзаиморасчетов = Ложь;
	ФлагИзмененияКурса             = Ложь;
	
	// В некоторых документах нет валюты документа и договора.
	Если ЕстьВалютаДокумента Тогда
		Если ЕстьДоговорКонтрагента Тогда
			Договор = ДокументОбъект.ДоговорКонтрагента;

			Если НЕ ЗначениеНеЗаполнено(Договор) Тогда
				Валюта = Договор.ВалютаВзаиморасчетов;
				ПроверкаПоВалютеВзаиморасчетов = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Валюта = ДокументОбъект.ВалютаДокумента;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	СтруктураНовогоКурсаВалюты  = ПолучитьКурсВалюты(Валюта, ДокументОбъект.Дата);
	НовыйКурс                   = СтруктураНовогоКурсаВалюты.Курс;
	НоваяКратность              = СтруктураНовогоКурсаВалюты.Кратность;

	ЕстьКурсДокумента           = ЕстьРеквизитДокумента("КурсДокумента",           МетаданныеДокумента);
	ЕстьКратностьДокумента      = ЕстьРеквизитДокумента("КратностьДокумента",      МетаданныеДокумента);
	ЕстьКурсВзаиморасчетов      = ЕстьРеквизитДокумента("КурсВзаиморасчетов",      МетаданныеДокумента);
	ЕстьКратностьВзаиморасчетов = ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);

	// В некоторых документах курс и кратность документа отсутствуют
	Если ПроверкаПоВалютеВзаиморасчетов И ЕстьКурсВзаиморасчетов И ЕстьКратностьВзаиморасчетов Тогда
		СтарыйКурс      = ДокументОбъект.КурсВзаиморасчетов;
		СтараяКратность = ДокументОбъект.КратностьВзаиморасчетов;
	ИначеЕсли НЕ ПроверкаПоВалютеВзаиморасчетов И ЕстьКурсДокумента И ЕстьКратностьДокумента Тогда
		СтарыйКурс      = ДокументОбъект.КурсДокумента;
		СтараяКратность = ДокументОбъект.КратностьДокумента;
	Иначе
		Возврат;
	КонецЕсли;

	// Если курс и кратность неизменилась, то выход.
	Если НовыйКурс = СтарыйКурс И НоваяКратность = СтараяКратность Тогда
		Возврат;
	КонецЕсли;

	ТекстВалюты     = ?(ПроверкаПоВалютеВзаиморасчетов, "взаиморасчетов ", "документа ");
	ТекстНовыйКурс  = СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, НовыйКурс,  НоваяКратность,  ВалютаРегламентированногоУчета, Истина));
	ТекстСтарыйКурс = СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, СтарыйКурс, СтараяКратность, ВалютаРегламентированногоУчета, Истина));
	ТекстВопроса    = "На дату документа у валюты "  + ТекстВалюты+ ТекстСтарыйКурс + " был задан другой курс."
	                + Символы.ПС+ "Установить курс " + ТекстВалюты+ ТекстНовыйКурс + " в соответствии с курсом валюты?";
	Ответ           = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ЕстьКурсДокумента Тогда
			ДокументОбъект.КурсДокумента           = НовыйКурс;
		КонецЕсли;
		Если ЕстьКратностьДокумента Тогда
			ДокументОбъект.КратностьДокумента      = НоваяКратность;
		КонецЕсли;
		Если ЕстьКурсВзаиморасчетов Тогда
			ДокументОбъект.КурсВзаиморасчетов      = НовыйКурс;
		КонецЕсли;
		Если ЕстьКратностьВзаиморасчетов Тогда
			ДокументОбъект.КратностьВзаиморасчетов = НоваяКратность;
		КонецЕсли;

		ФлагИзмененияКурса = Истина;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияДатыДокумента()

// Процедура вызывается из форм платежных документов при смене кассы или 
// банковского счета. Меняет валюту, курс документа и предлагает пересчитать сумму.
//
// Параметры:
//  ВалютаДокумента  - ссылка на справочник, валюта документа до изменения;
//  КурсДокумента    - число, курс документа до изменения; 
//  ДатаДокумента    - дата, дата на которую будем получать новый курс; 
//  СуммаДокумента   - число, сумма документа; 
//  ВалютаДенежныхСредств - ссылка на справочник, валюта выбранного счета или кассы 
//                     (новая валюта документа);
//
&НаКлиенте
Процедура ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаДокумента, 
	                                        СуммаДокумента, ВалютаДенежныхСредств) Экспорт

	// Поменяем валюту до вопроса о пересчете, чтобы было видно, что она действительно поменялась.
	СтараяВалюта    = ВалютаДокумента; 
	СатрыйКурс      = КурсДокумента;
	СтараяКратность = КратностьДокумента;
	ВалютаДокумента = ВалютаДенежныхСредств; // должны строго совпадать

	СтруктураКурсаВалютаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

	Если ВалютаДокумента <>  СтараяВалюта
	   И СуммаДокумента > 0 Тогда

		// Надо предложить пересчитать сумму.
		Ответ = Вопрос("Изменилась валюта документа. Пересчитать сумму документа?", 
		               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СуммаДокумента = ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтараяВалюта, ВалютаДокумента, СатрыйКурс,
									    КурсДокумента,СтараяКратность,КратностьДокумента);
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияКассыБанковскогоСчета()

// Процедура - обработчик события ПриИзменении поля ввода Организация
//
// Параметры:
//		ДокументОбъект - объект документ в форме которого произошло событие
//
&НаКлиенте
Процедура ПриИзмененииЗначенияОрганизации(ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда

		Если ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
		   И Не ЗначениеНеЗаполнено(ДокументОбъект.Организация)
		   И Не ЗначениеНеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)
		   И Не ДокументОбъект.ПодразделениеОрганизации.Владелец = ДокументОбъект.Организация Тогда

			ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			Предупреждение("Выбранное подразделение не соответствует организации!");

		КонецЕсли;

		Если ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)
		   И Не ЗначениеНеЗаполнено(ДокументОбъект.Организация)
		   И Не ЗначениеНеЗаполнено(ДокументОбъект.ДоговорКонтрагента)
		   И Не ДокументОбъект.ДоговорКонтрагента.Организация = ДокументОбъект.Организация Тогда

				ДокументОбъект.ДоговорКонтрагента = Неопределено;

		КонецЕсли;

		Если ЕстьРеквизитДокумента("БанковскийСчетОрганизации", МетаданныеДокумента) Тогда
			ДокументОбъект.БанковскийСчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияОрганизации()

// Процедура выполняет общие действия при изменнении учетной политики розничная торговля облагается ЕНВД
//
// Параметры:
//  ДокументОбъект                  - объект редактируемого документа
//  ВалютаРегламентированногоУчета  - валюта регламентированного учета
//  СпособЗаполненияЦен             - значение перечисления "Способы заполнения цен", определяет по какому из 
//                                    регистров ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос
//  ТипОперации                     - тип операции, строка вида операции ("Покупка" или "Продажа")
//  РежимВызова                     - режим вызова, строка режима вызова ("ДатаДокумента", "Организация" или "Склад")
//  ИмяТабличнойЧасти               - имя табличной части
//  РозничнаяТорговляОблагаетсяЕНВД - текущий флаг учетной политики документа (изменяется в процедуре)
//  Склад                           - текущий склад документа (изменяется в процедуре)
//
&НаКлиенте
Процедура ПриИзмененииРозничнаяТорговляОблагаетсяЕНВД(ДокументОбъект,
	                                                  ВалютаРегламентированногоУчета,
	                                                  СпособЗаполненияЦен,
	                                                  ТипОперации,
	                                                  РежимВызова,
	                                                  ИмяТабличнойЧасти,
	                                                  РозничнаяТорговляОблагаетсяЕНВД,
	                                                  Склад) Экспорт

	// Если учетная политика неопределена
	Если РозничнаяТорговляОблагаетсяЕНВД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Организация         = ДокументОбъект.Организация;
	Дата                = ДокументОбъект.Дата;

	// Если изменился склад
	Если РежимВызова = "Склад" Тогда
		Если ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента) Тогда
			Если ДокументОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				НовыйСклад = ДокументОбъект.СкладОрдер;
			Иначе
				НовыйСклад = ДокументОбъект.СкладОрдер.Склад;
			КонецЕсли;
		Иначе
			НовыйСклад     = ДокументОбъект.Склад;
		КонецЕсли;

		СтарыйВидСклада = Склад.ВидСклада;
		НовыйВидСклада  = НовыйСклад.ВидСклада;
		Склад           = НовыйСклад;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;

	// Определим значения учетной политики
	СтарыйРозничнаяТорговляОблагаетсяЕНВД = РозничнаяТорговляОблагаетсяЕНВД;
	НовыйРозничнаяТорговляОблагаетсяЕНВД  = УчетнаяПолитикаНалоговыйУчет("РозничнаяТорговляОблагаетсяЕНВД", Организация, Дата);

	// Проверим необходимость выполнения пересчета
	МожноНеВыполнятьПересчет = Истина;
	Если ТипОперации = "Покупка" Тогда
		Если НЕ ДокументОбъект.НДСВключенВСтоимость Тогда
			МожноНеВыполнятьПересчет = Ложь;
		КонецЕсли;
	Иначе
		Если ДокументОбъект.УчитыватьНДС Тогда
			МожноНеВыполнятьПересчет = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если МожноНеВыполнятьПересчет Тогда
		РозничнаяТорговляОблагаетсяЕНВД = НовыйРозничнаяТорговляОблагаетсяЕНВД;
		Возврат;
	КонецЕсли;

	Если НЕ НовыйРозничнаяТорговляОблагаетсяЕНВД Тогда
		РозничнаяТорговляОблагаетсяЕНВД = НовыйРозничнаяТорговляОблагаетсяЕНВД;
		Возврат;
	КонецЕсли;

	// Если изменилась дата
	Если РежимВызова = "ДатаДокумента"
	   И СтарыйРозничнаяТорговляОблагаетсяЕНВД = НовыйРозничнаяТорговляОблагаетсяЕНВД Тогда
		РозничнаяТорговляОблагаетсяЕНВД = НовыйРозничнаяТорговляОблагаетсяЕНВД;
		Возврат;
	КонецЕсли;

	// Если изменился склад
	Если РежимВызова = "Склад" Тогда
		ВидСкладаОптовый = Перечисления.ВидыСкладов.Оптовый;

		Если (СтарыйВидСклада <> ВидСкладаОптовый И НовыйВидСклада <> ВидСкладаОптовый)
		 ИЛИ (СтарыйВидСклада =  ВидСкладаОптовый И НовыйВидСклада =  ВидСкладаОптовый) Тогда
			РозничнаяТорговляОблагаетсяЕНВД = НовыйРозничнаяТорговляОблагаетсяЕНВД;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// Если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если НадоПересчитывать Тогда
		ТекстВопроса = "При изменении ";

		Если РежимВызова = "ДатаДокумента" Тогда
			ТекстВопроса = ТекстВопроса + "даты документа";
		ИначеЕсли РежимВызова = "Организация" Тогда
			ТекстВопроса = ТекстВопроса + "организации";
		ИначеЕсли РежимВызова = "Склад" Тогда
			ТекстВопроса = ТекстВопроса + "склада (места хранения)";
		КонецЕсли;

		ТекстВопроса = ТекстВопроса + " сменилась учетная политика ""Розничная торговля облагается ЕНВД"".";
		ТекстВопроса = ТекстВопроса + Символы.ПС + "Пересчитать документ в соответствии с новой учетной политикой?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			СтруктураЗначений = Неопределено;

			// Задать набор реквизитов для редактирования.
			СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокументОбъект);

			// Структура не редактируемых реквизитов
			СтруктураНередактируемыхРеквизитов = Новый Структура;
			СтруктураНередактируемыхРеквизитов.Вставить(?(ТипОперации = "Покупка", "НДСВключенВСтоимость", "УчитыватьНДС"));

			СтруктураРеквизитовДокумента.Вставить("ВызовПриИзмененииУчетнойПолитикиЕНВД", ТипОперации);
			ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента,
			                   СтруктураНередактируемыхРеквизитов, ИмяТабличнойЧасти,
			                   ВалютаРегламентированногоУчета,, СтруктураЗначений);

			Если СтруктураЗначений = Неопределено Тогда
				РозничнаяТорговляОблагаетсяЕНВД = СтарыйРозничнаяТорговляОблагаетсяЕНВД;
			КонецЕсли;
		Иначе
			РозничнаяТорговляОблагаетсяЕНВД = НовыйРозничнаяТорговляОблагаетсяЕНВД;
		КонецЕсли;
	Иначе
		РозничнаяТорговляОблагаетсяЕНВД = НовыйРозничнаяТорговляОблагаетсяЕНВД;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииРозничнаяТорговляОблагаетсяЕНВД()

// Процедура выполняет общие действия при изменнении учетной политики организация является плательщиком ЕНВД
//
// Параметры:
//  ДокументОбъект                      - объект редактируемого документа
//  РежимВызова                         - режим вызова, строка режима вызова ("ДатаДокумента" или "Организация")
//  ТабличнаяЧасть                      - табличная часть
//  ОрганизацияЯвляетсяПлательщикомЕНВД - текущий флаг учетной политики документа (изменяется в процедуре)
//  Организация                         - текущая организация документа (изменяется в процедуре)
//
Процедура ПриИзмененииОрганизацияЯвляетсяПлательщикомЕНВД(ДокументОбъект,
	                                                      РежимВызова,
	                                                      ТабличнаяЧасть,
	                                                      ОрганизацияЯвляетсяПлательщикомЕНВД,
	                                                      Организация) Экспорт

	// Если учетная политика неопределена
	Если ОрганизацияЯвляетсяПлательщикомЕНВД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Дата                = ДокументОбъект.Дата;
	СтараяОрганизация   = Организация;

	Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
		НоваяОрганизация = ДокументОбъект.Организация;
	ИначеЕсли ЕстьРеквизитДокумента("ЗаказПокупателя", МетаданныеДокумента) Тогда
		НоваяОрганизация = ДокументОбъект.ЗаказПокупателя.Организация;
	Иначе
		Возврат;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(НоваяОрганизация) Тогда
		Возврат;
	КонецЕсли;

	// Определим значения учетной политики
	СтарыйОрганизацияЯвляетсяПлательщикомЕНВД = ОрганизацияЯвляетсяПлательщикомЕНВД;
	НовыйОрганизацияЯвляетсяПлательщикомЕНВД  = УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", НоваяОрганизация, Дата);

	ОрганизацияЯвляетсяПлательщикомЕНВД = НовыйОрганизацияЯвляетсяПлательщикомЕНВД;
	Организация                         = НоваяОрганизация;

	// Проверим необходимость выполнения пересчета
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	Иначе
		Если РежимВызова = "ДатаДокумента" Тогда
			Если СтарыйОрганизацияЯвляетсяПлательщикомЕНВД = НовыйОрганизацияЯвляетсяПлательщикомЕНВД Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Если СтараяОрганизация = НоваяОрганизация Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Пересчет табличной части
	Если РежимВызова = "ДатаДокумента" Тогда
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			// Если услуга облагается ЕНВД, устанавливаем ставку БезНДС,
			// если нет, то устанавливаем ставку НДС по умолчанию.
			Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, НоваяОрганизация, Дата,
				                               НовыйОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,    ДокументОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			// Если ставка БезНДС, проверяем по "старой" организации
			// если находим, то устанавливаем ставку НДС по умолчанию.
			Если СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, СтараяОрганизация, Дата,
					                               СтарыйОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
					ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				КонецЕсли;
			КонецЕсли;

			// Для "новой" организации заполняем ставку БезНДС, если услуга облагается ЕНВД
			// если нет, то устанавливаем ставку НДС по умолчанию.
			Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, НоваяОрганизация, Дата,
				                               НовыйОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,    ДокументОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОрганизацияЯвляетсяПлательщикомЕНВД()

//////////////// НАЧАЛО ВЫБОРА //////////////////////////

// Процедура выполняет стандартные действия при начале выбора сделки в формах документов.
//
// Параметры:
//  ДокументОбъект        - объект редактируемого документа;
//  ФормаДокумента        - форма редактируемого документа;
//  ЭлементФормы          - элемент формы документа, который надо заполнить; 
//  ДоговорКонтрагента - ссылка на справочник, определяет договор контрагента по сделке;
//  Сделка                - ссылка на документ, определяет собственно сделку;
//  СтандартнаяОбработка, - булево, признак выполнения стандартной (системной) обработки события 
//                          начала выбора для данного элемента формы документа;
//  СтрокаВидаДвижения    - строка, "Приход" или "Расход", определяет какие документы могут выступать
//                          в качестве расчетных: если документ выполняет расход по регистру то берем те,
//                          которые выполняют приход, и наоборот;
//  СтрокаТипаЗаказа      - строка, содержащая тип заказа (поставщику или покупателя).
//
&НаКлиенте
Процедура НачалоВыбораЗначенияСделки(ДокументОбъект, ФормаДокумента, ЭлементФормы, ДоговорКонтрагента, Сделка,
	                          СтандартнаяОбработка, СтрокаВидаДвижения, Знач СтрокаТипаЗаказа) Экспорт

	// Тип выбираемого значения зависит от договора.
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбран договор контрагента!");
		ФормаДокумента.ТекущийЭлемент = ФормаДокумента.ЭлементыФормы.Контрагент;
		Возврат;
	КонецЕсли;
	
	// Тип выбираемого значения зависит от договора.
	Если ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("По договорам с видом ""Прочее"" не ведутся взаиморасчеты по сделкам!");
		ФормаДокумента.ТекущийЭлемент = ФормаДокумента.ЭлементыФормы.Контрагент;
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	Если ДоговорКонтрагента.ВедениеВзаиморасчетов = 
		 Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда

		// Заполним возможный список типов документов, которые могут быть расчетными.
		СписокТипов = Новый СписокЗначений;
		Если СтрокаВидаДвижения = "Приход" Тогда

			// Заполним список документов, которые могут делать расход по регистру.
			// Список документов зависит от вида договора
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			 Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,         		Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, 		Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 		Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,             		Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,         		Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,				 		Метаданные.Документы["АккредитивПолученный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Имя,				Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,			Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя,	Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["НачислениеПени"].Имя,							Метаданные.Документы["НачислениеПени"].Представление());

				Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,               Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
				КонецЕсли;
				
			ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			      Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, 		Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 		Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,            		Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеДопРасходов"].Имя,             		Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,            		Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"].Имя, Метаданные.Документы["ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,             		Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,         		Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,				 		Метаданные.Документы["АккредитивПолученный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Имя,				Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,			Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя,	Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());

			Иначе // Прочее

				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,         		Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, 		Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 		Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,            		Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеДопРасходов"].Имя,             		Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,            		Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"].Имя, Метаданные.Документы["ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,            	 	Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,         		Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,				 		Метаданные.Документы["АккредитивПолученный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Имя,				Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,			Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя,	Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());

			КонецЕсли;
		Иначе

			// Заполним список документов, которые могут делать приход по регистру.
			// Список документов зависит от вида договора
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			 Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, 	Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 	Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,         	Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,             	Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,             	Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        	Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,        			Метаданные.Документы["АккредитивПереданный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Имя,        	Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,        	Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя,	Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["НачислениеПени"].Имя,							Метаданные.Документы["НачислениеПени"].Представление());

			ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			      Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

				СписокТипов.Добавить(Метаданные.Документы["АвансовыйОтчет"].Имя,                     	Метаданные.Документы["АвансовыйОтчет"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,           	Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки"].Имя, Метаданные.Документы["ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, 	Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 	Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,             	Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        	Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,        			Метаданные.Документы["АккредитивПереданный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Имя,        	Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,        	Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя,	Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());

				Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,               Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
				КонецЕсли;

			Иначе // Прочее

				СписокТипов.Добавить(Метаданные.Документы["АвансовыйОтчет"].Имя,                     	Метаданные.Документы["АвансовыйОтчет"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,           	Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки"].Имя, Метаданные.Документы["ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, 	Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 	Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,         	Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,             	Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,             	Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        	Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,        			Метаданные.Документы["АккредитивПереданный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Имя,        	Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,        	Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя,	Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());

			КонецЕсли;
		КонецЕсли;

		// Пользователь выбирает тип расчетного документа
		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат; // пользователь отказался от выбора
		КонецЕсли;

		ТипДокументаСделки = ВыбранныйЭлемент.Значение;

	ИначеЕсли СтрокаТипаЗаказа = "ЗаказПоставщику" Тогда

		ТипДокументаСделки = СтрокаТипаЗаказа;
		Если ДокументОбъект.Метаданные().Реквизиты.Найти("Сделка") = Неопределено Тогда
			ЕстьТипСчет = Истина;
		Иначе
			ЕстьТипСчет = ДокументОбъект.Метаданные().Реквизиты.Сделка.Тип.СодержитТип( Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
		КонецЕсли;
		Если ЕстьТипСчет Тогда
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

				ТипДокументаСделки = "СчетНаОплатуПоставщика";
				Сделка = Документы[ТипДокументаСделки].ПустаяСсылка();

			ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			      Или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда

				ТипДокументаСделки = СтрокаТипаЗаказа;
				Сделка = Документы[ТипДокументаСделки].ПустаяСсылка();

			КонецЕсли; 
		Иначе
			СписокТипов = Новый СписокЗначений;
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя, Метаданные.Документы["ЗаказПоставщику"].Представление());
		КонецЕсли;

	ИначеЕсли СтрокаТипаЗаказа = "ЗаказПокупателя" Тогда

		ТипДокументаСделки = СтрокаТипаЗаказа;
		Если ДокументОбъект.Метаданные().Реквизиты.Найти("Сделка") = Неопределено Тогда
			ЕстьТипСчет = Истина;
		Иначе
			ЕстьТипСчет = ДокументОбъект.Метаданные().Реквизиты.Сделка.Тип.СодержитТип( Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		КонецЕсли;

		Если ЕстьТипСчет Тогда
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

				ТипДокументаСделки = "СчетНаОплатуПокупателю";
				Сделка = Документы[ТипДокументаСделки].ПустаяСсылка();
				
			ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			      Или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда

				ТипДокументаСделки = СтрокаТипаЗаказа;
				Сделка = Документы[ТипДокументаСделки].ПустаяСсылка();


			КонецЕсли; 
			СписокТипов = Новый СписокЗначений;
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя, Метаданные.Документы["ЗаказПоставщику"].Представление());
		КонецЕсли; 
	//Смирнов
	ИначеЕсли СтрокаТипаЗаказа = "ЗаказПоПрессФормам" Тогда
                СписокТипов = Новый СписокЗначений;
				СписокТипов.Добавить( Метаданные.Документы["ЗаказПоПрессФормам"].Имя, Метаданные.Документы["ЗаказПоПрессФормам"].Представление());
				ТипДокументаСделки = СтрокаТипаЗаказа;
	ИначеЕсли СтрокаТипаЗаказа = "ЗаказПокупателяСезонный" Тогда
                СписокТипов = Новый СписокЗначений;
				СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателяСезонный"].Имя, Метаданные.Документы["ЗаказПокупателяСезонный"].Представление());
				ТипДокументаСделки = СтрокаТипаЗаказа;
	Иначе // сделка может быть только заказом (поставщику или покупателя)
		Если ТипЗнч(Сделка) <> Тип("ДокументСсылка." + СтрокаТипаЗаказа) Тогда
			Сделка = Документы[СтрокаТипаЗаказа].ПустаяСсылка();
		КонецЕсли;

	КонецЕсли; 

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,ЭлементФормы,);

	// Отфильруем список документов по договору.
	Если ТипДокументаСделки = "ЗаказПокупателяСезонный" Тогда
		ФормаВыбора.Отбор.ДоговорКонтрагента.Значение      = ДоговорКонтрагента;
	    ФормаВыбора.Отбор.ДоговорКонтрагента.Использование = Истина;
	иначе
	    ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ДоговорКонтрагента;
	    ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	КонецЕсли;
	Если ТипДокументаСделки = "НачислениеПени" Тогда
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Ложь;
		ФормаВыбора.Отбор.Контрагент.Значение = ДоговорКонтрагента.Владелец;
		ФормаВыбора.Отбор.Контрагент.Использование = Истина;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСделки()

// Процедура выполняет стандартные действия при начале выбора документа составного типа в формах документов.
//
// Параметры:
//  ДокументОбъект       - объект редактируемого документа;
//  ФормаДокумента       - форма редактируемого документа;
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//  СтруктураОтбора      - структура, содержащая имена и значения отборов в форме выбора.
//  ИмяТабличнойЧасти    - имя табличной части
//
Процедура НачалоВыбораЗначенияДокументаСоставногоТипа(ДокументОбъект, ФормаДокумента, ЭлементФормы, 
	                   СтандартнаяОбработка, СтруктураОтбора, ИмяТабличнойЧасти) Экспорт

	СтандартнаяОбработка = Ложь;

	// Заполним возможный список типов документов, которые могут быть в этом реквизите.
	СписокТипов = Новый СписокЗначений;

	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда // Шапка документа
		МассивТипов = ДокументОбъект.Метаданные().Реквизиты[ЭлементФормы.Данные].Тип.Типы();
	Иначе // Табличная часть
		ИмяКолонки  = ФормаДокумента.ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяКолонка.Имя;
		МассивТипов = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонки].Тип.Типы();
	КонецЕсли;

	Если МассивТипов.Количество() = 1 Тогда
		ОбъектОписанияМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		ВыбранныйТип = ОбъектОписанияМетаданных.Имя;
	Иначе

		Для каждого ЭлементМассива Из МассивТипов Цикл

			ПустоеЗначение = Новый(ЭлементМассива);
			ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
			СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());

		КонецЦикла; 

		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

		Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
			Возврат;
		КонецЕсли;
		ВыбранныйТип = ВыбранныйЭлемент.Значение;
	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
		ЭлементФормы.Значение = Документы[ВыбранныйТип].ПустаяСсылка();
	КонецЕсли; 

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ВыбранныйТип].ПолучитьФормуВыбора(,ЭлементФормы,);

	// Проверка возможности отбора по сделке
	Если СтруктураОтбора.Свойство("Сделка") Тогда
		Если ФормаВыбора.Отбор.Найти("Сделка")= Неопределено Тогда
			СтруктураОтбора.Удалить("Сделка");
		КонецЕсли;
	КонецЕсли;

	// Отфильруем список документов.
	Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
		КонецЕсли;
		ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
		ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
	КонецЦикла; 
	Если Не ЗначениеНеЗаполнено(ЭлементФормы.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДокументаСоставногоТипа()

// Процедура выполняет стандартные действия при начале выбора структурной единицы контрагента в формах документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа;
//  ФормаДокумента                 - форма редактируемого документа;
//  ЭлементФормы                   - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,          - булево, признак выполнения стандартной (системной) обработки события 
//                                   начала выбора для данного элемента формы документа.
//
Процедура НачалоВыбораЗначенияСтруктурнойЕдиницы(ДокументОбъект, ФормаДокумента, ЭлементФормы, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Справочники.БанковскиеСчета.Имя, Метаданные.Справочники.БанковскиеСчета.Синоним);
	СписокТипов.Добавить(Метаданные.Справочники.Кассы.Имя, Метаданные.Справочники.Кассы.Синоним);

	ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов,ЭлементФормы);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныйЭлемент.Значение = Метаданные.Справочники.БанковскиеСчета.Имя Тогда

		НачалоВыбораЗначенияБанковскогоСчета(ДокументОбъект.Организация, ЭлементФормы, СтандартнаяОбработка, Неопределено); 

	Иначе

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,ЭлементФормы,);

		ФормаВыбора.Открыть();

	КонецЕсли;

КонецПроцедуры // НачалоВыбораЗначенияСтруктурнойЕдиницы()

// Процедура выполняет стандартные действия при начале выбора структурной единицы контрагента в формах документов.
//
// Параметры:
//  ВладелецБанковскогоСчета - ссылка на справочник, определяет владельца банковского счета;
//  ЭлементФормы             - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,    - булево, признак выполнения стандартной (системной) обработки события 
//                             начала выбора для данного элемента формы документа.
//  ВалютаБанковскогоСчета   - ссылка на справочник, определяет валюту банковского счета,
//                             если неп заполнено, то список банковских счетов не фильтруется по валюте;
//
Процедура НачалоВыбораЗначенияБанковскогоСчета(ВладелецБанковскогоСчета,ЭлементФормы, СтандартнаяОбработка, 
	                                   ВалютаБанковскогоСчета = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбораБанковскогоСчета = Справочники.БанковскиеСчета.ПолучитьФормуСписка(, ЭлементФормы);
	ФормаВыбораБанковскогоСчета.ПараметрОтборПоВладельцу = ВладелецБанковскогоСчета;

	Если Не ЗначениеНеЗаполнено(ВалютаБанковскогоСчета) Тогда

		ФормаВыбораБанковскогоСчета.Отбор.ВалютаДенежныхСредств.Значение      = ВалютаБанковскогоСчета;
		ФормаВыбораБанковскогоСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;

	КонецЕсли;

	ФормаВыбораБанковскогоСчета.РежимВыбора = Истина;
	ФормаВыбораБанковскогоСчета.Открыть();


КонецПроцедуры // НачалоВыбораЗначенияБанковскогоСчета()

// Процедура выполняет стандартные действия при начале выбора размещения в формах документов.
//
// Параметры:
//  ФормаДокумента           - форма редактируемого документа;
//  ЭлементФормы             - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,    - булево, признак выполнения стандартной (системной) обработки события 
//                             начала выбора для данного элемента формы документа.
//
Процедура НачалоВыбораЗначенияРазмещения(ФормаДокумента, ЭлементФормы, СтандартнаяОбработка, СписокСкладов=неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Документы.ЗаказПоставщику.Имя, Метаданные.Документы.ЗаказПоставщику.Синоним);
	СписокТипов.Добавить(Метаданные.Справочники.Склады.Имя, Метаданные.Справочники.Склады. Синоним);

  Если ЭлементФормы.Значение=неопределено тогда

	ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов,ЭлементФормы);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
  Иначе
	  Если ТипЗнч(ЭлементФормы.Значение)=Тип("СправочникСсылка.Склады") тогда
	  	ВыбранныйЭлемент = СписокТипов[1];
	  иначе
		ВыбранныйЭлемент = СписокТипов[0];
	  КонецЕсли;	
  КонецЕсли;
  
	Если ВыбранныйЭлемент.Значение = Метаданные.Документы.ЗаказПоставщику.Имя Тогда

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Документы[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,ЭлементФормы,);

	Иначе

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,ЭлементФормы,);
		ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;

		// уберем из выбора неавтоматизированные торговые точки
		ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Значение                            = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка;
		ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Использование                       = Истина;
		ФормаВыбора.СправочникСписок.Отбор.ВидСклада.ВидСравнения                        = ВидСравнения.НеРавно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
		
		Если СписокСкладов<>неопределено тогда//+++
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.ВидСравнения                        = ВидСравнения.ВСписке;
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Значение                            = СписокСкладов;
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Ложь;
		
		ФормаВыбора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = ЛОЖЬ;

		КонецЕсли;
		
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияРазмещения()

// Процедура выполняет стандартные действия при начале выбора договора контрагента в формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ФормаДокумента                    - форма редактируемого документа;
//  ЭлементФормы                      - элемент формы документа, который надо заполнить; 
//  Контрагент                        - ссылка на справочник, определяет контрагента по договору;
//  ДоговорКонтрагента                - ссылка на справочник, определяет договор контрагента;
//  ВидДоговораВзаиморасчетов         - вид договора взаиморасчетов для отбора, значение перечисления ВидыДоговоровКонтрагентов;
//  СтандартнаяОбработка              - булево, признак выполнения стандартной (системной) обработки события,
//  СтруктураДополнительныхПараметров - структура, содержит дополнительные значения отбора, необязаетльный,
//                                      ключ - имя отбора, значение - структура, определяющая отбор с ключами:
//                                      ЗначениеОтбора (если не задан, то отбор не устанавливается), 
//                                      ВидСравненияОтбора (если не задан, то ВидСравнения.Равно), 
//                                      ДоступностьОтбора (если не задан, то Ложь).
//
Процедура НачалоВыбораЗначенияДоговораКонтрагента(ДокументОбъект, ФормаДокумента, ЭлементФормы, Контрагент, ДоговорКонтрагента,
                                                  ВидыДоговораВзаиморасчетов, СтандартнаяОбработка,
                                                  СтруктураДополнительныхПараметров = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	//// Тип выбираемого значения зависит от договора.
	//Если ЗначениеНеЗаполнено(Контрагент) Тогда
	//	Предупреждение("Не выбран контрагент!");
	//	ФормаДокумента.ТекущийЭлемент = ФормаДокумента.ЭлементыФормы.Контрагент;
	//	Возврат;
	//КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,ЭлементФормы,);

	// Владельца менять по умолчанию не даем.
	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	Если ВидыДоговораВзаиморасчетов<>Неопределено Тогда

		// Оставим в выборе только "правильные" договоры
		Если ТипЗнч(ВидыДоговораВзаиморасчетов) = Тип("СписокЗначений") Тогда
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
		Иначе
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.Равно;
		КонецЕсли;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговораВзаиморасчетов;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
	КонецЕсли;

	// Еще надо фильтровать по организации, если она заполнена
	Если ЕстьРеквизитДокумента("Организация",МетаданныеДокумента)
	   И Не ЗначениеНеЗаполнено(ДокументОбъект.Организация) Тогда
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = ДокументОбъект.Организация;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;

	// Добавим фильтры по дополнительным параметрам отбора
	Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура") Тогда
		Для каждого ЭлементСтруктуры Из СтруктураДополнительныхПараметров Цикл

			СтруктураОтбора = ЭлементСтруктуры.Значение;
			
			ЗначениеОтбора     = Неопределено;
			ВидСравненияОтбора = Неопределено;
			ДоступностьОтбора  = Неопределено;

			Если СтруктураОтбора.Свойство("ЗначениеОтбора", ЗначениеОтбора) Тогда

				Если СтруктураОтбора.Свойство("ВидСравненияОтбора", ВидСравненияОтбора) Тогда
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравненияОтбора;
				Иначе
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.Равно;
				КонецЕсли;

				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЗначениеОтбора;
				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;

				Если СтруктураОтбора.Свойство("ДоступностьОтбора", ДоступностьОтбора) Тогда
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = ДоступностьОтбора;
				Иначе
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ДоговорКонтрагента;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДоговораКонтрагента()

// Процедура выполняет стандартные действия при начале выбора склада в формах документов.
//
// Параметры:
//  ДокументОбъект        - объект редактируемого документа;
//  ФормаДокумента        - форма редактируемого документа;
//  ЭлементФормы          - элемент формы документа, который надо заполнить; 
//  Склад                 - текущий склад в форме;
//  ВидСравненияНТТ       - Вид сравнения - равно или не равно неавтоматизированной торговой точке;
//  СтандартнаяОбработка, - булево, признак выполнения стандартной (системной) обработки события 
//                          начала выбора для данного элемента формы документа;
//
Процедура НачалоВыбораСкладаНТТ(ДокументОбъект, ФормаДокумента, ЭлементФормы, Склад, ВидСравненияНТТ,
	                          СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(,ЭлементФормы,);

	// уберем из выбора неавтоматизированные торговые точки
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Значение                            = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Использование                       = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.ВидСравнения                        = ВидСравненияНТТ;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ЭлементФормы.ВыборГруппИЭлементов;

	Если ТипЗнч(Склад) = Тип("СправочникСсылка.Склады") Тогда
		ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Склад;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораСкладаНТТ()

// Процедура вызывается в обработчике события "Начало выбора" в форме документов.
// Выполняет выбор даты курса и устанавливает курс взаиморасчетов по выбранной дате.
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//
&НаКлиенте
Процедура ВыбратьКурсВзаиморасчетов(ДокументОбъект) Экспорт

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли; 
	
	// Выберем курс.
	ВыбратьКурсВалюты(ДокументОбъект.КурсВзаиморасчетов,ДокументОбъект.КратностьВзаиморасчетов,
	                   ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
	                   ДокументОбъект.Дата); //По умолчанию курс всегда на дату документа

КонецПроцедуры // ВыбратьКурсВзаиморасчетов()

// Процедура вызывается в обработчике события "Начало выбора" в форме документов.
// Выполняет выбор даты курса и устанавливает переданный курс по выбранной дате.
//
// Параметры:
//  Курс   - число, курс валюты, который надо установить;
//  Валюта - ссылка на справочник, определяет валюту чей курс надо выбрать;
//  Дата   - дата, дата курса по умолчанию.
//
&НаКлиенте
Процедура ВыбратьКурсВалюты(Курс, Кратность, Валюта, Дата) Экспорт

	// Если не заполнена валюта, то курс выбрать нельзя.
	Если ЗначениеНеЗаполнено(Валюта) Тогда
		Предупреждение("Для выбора курса нужно выбрать валюту."); 
		Возврат;
	КонецЕсли; 
	
	// Выберем дату курса
	ДатаУстановкиКурса = Дата; 
	Если ВвестиДату(ДатаУстановкиКурса, "Выберите дату установки курса.", ЧастиДаты.Дата) Тогда
		
		// Если дата введена, заполним значение курса и кратности
		СтруктураВалюты = ПолучитьКурсВалюты(Валюта, ДатаУстановкиКурса);
		Курс            = СтруктураВалюты.Курс;
		Кратность       = СтруктураВалюты.Кратность;

	КонецЕсли; 

КонецПроцедуры // ВыбратьКурсВалюты()

// Вызывается в обработчике события "Начало выбора" при выборе номенклатуры поставщика.
//
Процедура НачалоВыбораНоменклатурыКонтрагента(Элемент, СтандартнаяОбработка, Контрагент, Номенклатура) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.КонтрагентОтбораНоменклатуры = Контрагент;

	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Номенклатура;

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура",Номенклатура);
	СтруктураОтбора.Вставить("Контрагент",Контрагент);
	ФормаВыбора.ЭлементыФормы.СписокНоменклатурыКонтрагента.ТекущаяСтрока = РегистрыСведений.НоменклатураКонтрагентов.СоздатьКлючЗаписи(СтруктураОтбора);

	ФормаВыбора.Открыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

// Активизирует один из реквизитов при открытии документа.
//
// Параметры:
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура АктивизироватьРеквизитВФорме(ДокументОбъект, ФормаДокумента) Экспорт

	// Структура - порядок актиизации реквизитов.
	// Активизируется первый не заполненный.
	СтруктураРеквизитов = Новый Структура();
	
	СтруктураРеквизитов.Вставить("Дата");
	СтруктураРеквизитов.Вставить("Номер");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Касса");
	СтруктураРеквизитов.Вставить("БанковскийСчет");
	СтруктураРеквизитов.Вставить("Склад");
	СтруктураРеквизитов.Вставить("СкладОрдер");
	СтруктураРеквизитов.Вставить("Контрагент");
	СтруктураРеквизитов.Вставить("Получатель");
	СтруктураРеквизитов.Вставить("Плательщик");
	СтруктураРеквизитов.Вставить("ФизЛицо");

	Для каждого Элемент Из СтруктураРеквизитов Цикл

		// Определим, есть ли ЭУ с таким именем.
		ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(Элемент.Ключ);
		Если ЭлементУправления <> Неопределено Тогда // есть такой
			Если ЗначениеНеЗаполнено(ЭлементУправления.Значение)
			   И ЭлементУправления.Доступность
			   И ЭлементУправления.Видимость
			   И Не ЭлементУправления.ТолькоПросмотр Тогда 

				// Нашли не заполненный ЭУ. Делаем его текущим и прекращаем цикл.
				ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
				Прервать;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // АктивизироватьРеквизитВФорме()

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументОбъект.ЭтоНовый() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументОбъект.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Формирует и устанавливает текст заголовка формы документа с учетом вида склада
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа,
//  ДокументОбъект     - объект документа,
//  ФормаДокумента     - форма документа,
//  СкладДляЗаголовка  - склад, вид которого нужно вынести в заголовок
//
Процедура УстановитьЗаголовокФормыДокументаСУчетомСклада(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента, СкладДляЗаголовка = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ДобавитьКЗаголовкуФормы = "";
	Если СкладДляЗаголовка <> Неопределено Тогда
		Если СкладДляЗаголовка.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ДобавитьКЗаголовкуФормы = "неавтоматизированная торговая точка";
		ИначеЕсли СкладДляЗаголовка.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ДобавитьКЗаголовкуФормы = "розница";
		КонецЕсли;
	ИначеЕсли ЕстьРеквизитДокумента("Склад", МетаданныеДокумента) Тогда
		Если ДокументОбъект.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ДобавитьКЗаголовкуФормы = "неавтоматизированная торговая точка";
		ИначеЕсли ДокументОбъект.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ДобавитьКЗаголовкуФормы = "розница";
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеНеЗаполнено(СтрокаВидаОперации) И Не ЗначениеНеЗаполнено(ДобавитьКЗаголовкуФормы) Тогда
		ДобавитьКЗаголовкуФормы = ", "+ДобавитьКЗаголовкуФормы;
	КонецЕсли;
	УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации + ДобавитьКЗаголовкуФормы, ДокументОбъект, ФормаДокумента)

КонецПроцедуры // УстановитьЗаголовокФормыДокументаСУчетомСклада()

// Формирует и устанавливает текст заголовка формы элемента
//
// Параметры:
//  СтрокаЗаголовка - строка заголовка формы, 
//  ФормаОбъекта    - форма элемента справочника.
//
Процедура УстановитьЗаголовокФормыДокументаЭлемента(СтрокаЗаголовка, ФормаОбъекта) Экспорт

	ФормаОбъекта.АвтоЗаголовок = Ложь; // заголовок будем писать сами

	Заголовок = СтрокаЗаголовка;

	ФормаОбъекта.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокументаЭлемента()

// Устанавливает тип сделки документа
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ЗаказПокупателя - признак заказа покупателю/поставщику
//
Процедура УстановитьТипСделки(ДокументОбъект, ЗаказПокупателя = Истина) Экспорт

	Сделка = Неопределено;

	ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;

	Если Не ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 Или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			Сделка = Документы["Заказ"+?(ЗаказПокупателя, "Покупателя", "Поставщику")].ПустаяСсылка()

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам тогда

			НадписьСделка = "Счет "+?(ЗаказПокупателя,"покупателю:", "поставщика:");
			Сделка = Документы["СчетНаОплату"+?(ЗаказПокупателя, "Покупателю", "Поставщика")].ПустаяСсылка()

		КонецЕсли;
	КонецЕсли;

	// Поменяем значение сделки, если она не того типа.
	Если ЗначениеНеЗаполнено(ДокументОбъект.Сделка)
	   И ТипЗнч(ДокументОбъект.Сделка) <> ТипЗнч(Сделка) Тогда

		ДокументОбъект.Сделка = Сделка;

	КонецЕсли;

КонецПроцедуры // УстановитьТипСделки()

// Устанавливает текст надписи сделки на форме документа
//
// Параметры:
//  ДокументОбъект - объект документа, 
//  ФормаДокумента - форма документа.
// ЗаказПокупателя - признак заказа покупателю/поставщику
//
Процедура УстановитьНадписьСделки(ДокументОбъект, ФормаДокумента, ЗаказПокупателя = Истина) Экспорт

	НадписьСделка = "Сделка:";

	ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;

	Если Не ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда

			НадписьСделка = "Расчетный документ:";

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		      Или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			НадписьСделка = "Заказ "+?(ЗаказПокупателя,"покупателя:", "поставщику:");

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам тогда

			НадписьСделка = "Счет "+?(ЗаказПокупателя,"покупателю:", "поставщика:");

		КонецЕсли;
	КонецЕсли;

	ФормаДокумента.ЭлементыФормы.НадписьСделка.Заголовок = НадписьСделка;

	УстановитьТипСделки(ДокументОбъект, ЗаказПокупателя);

КонецПроцедуры // УстановитьНадписьСделки()

// Устанавливает текст надписи заголовка суммы взаиморасчетов на форме документа
//
// Параметры:
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьНадписьСуммыВзаиморасчетов(ДокументОбъект, ФормаДокумента) Экспорт

	ВалютаВзаиморасчетовПоДоговору = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
		ФормаДокумента.ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
	Иначе	
		ФормаДокумента.ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
	КонецЕсли;	

КонецПроцедуры // УстановитьНадписьСуммыВзаиморасчетов()

// Устанавливает видимость переданных колонок в табличной части документа.
//
// Параметры:
//  КолонкиТабПоля   - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых надор установить,
//  ПризнакВидимости - булево, признак видимости.
//
Процедура УстновитьВидимостьКолонок(КолонкиТабПоля, СтруктураКолонок, ПризнакВидимости) Экспорт

	Если ПризнакВидимости Тогда
		Для каждого ТекКолонка из СтруктураКолонок Цикл
			ИмяКолонки                                   = ТекКолонка.Ключ;
			КолонкиТабПоля[ИмяКолонки].ИзменятьВидимость = Истина;
		КонецЦикла;
	Иначе
		Для каждого ТекКолонка из СтруктураКолонок Цикл
			ИмяКолонки                                   = ТекКолонка.Ключ;
			КолонкиТабПоля[ИмяКолонки].ИзменятьВидимость = Ложь;
			КолонкиТабПоля[ИмяКолонки].Видимость         = Ложь;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстновитьВидимостьКолонок()

// Устанавливает видимость колоки "ХарактеристикаНоменклатуры" в табличной части документа
//
// Параметры:
//  КолонкиТабПоля   - коллекция колонок табличного поля
//  СтруктураКолонок - структура, содержащая имена колонок
//                     по умолчанию "ХарактеристикаНоменклатуры"
//
Процедура УстановитьВидимостьХарактеристикиНоменклатуры(КолонкиТабПоля, СтруктураКолонок = Неопределено) Экспорт

	Если СтруктураКолонок = Неопределено Тогда
		СтруктураКолонок = Новый Структура("ХарактеристикаНоменклатуры");
	КонецЕсли;

	ИспользоватьХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();

	УстновитьВидимостьКолонок(КолонкиТабПоля, СтруктураКолонок, ИспользоватьХарактеристики);

КонецПроцедуры // УстановитьВидимостьХарактеристикиНоменклатуры()

// Устанавливает видимость колонки "СерияНоменклатуры" в табличной части документа
//
// Параметры:
//  КолонкиТабПоля   - коллекция колонок табличного поля
//  СтруктураКолонок - структура, содержащая имена колонок
//                     по умолчанию "СерияНоменклатуры"
//
Процедура УстановитьВидимостьСерииНоменклатуры(КолонкиТабПоля, СтруктураКолонок = Неопределено) Экспорт

	Если СтруктураКолонок = Неопределено Тогда
		СтруктураКолонок = Новый Структура("СерияНоменклатуры");
	КонецЕсли;

	ИспользоватьСерии = Константы.ИспользоватьСерииНоменклатуры.Получить();

	УстновитьВидимостьКолонок(КолонкиТабПоля, СтруктураКолонок, ИспользоватьСерии);

КонецПроцедуры // УстановитьВидимостьСерииНоменклатуры()

// Устанавлеивает видимость колонки "Склад" в табличной части формы документа 
// в зависимости от настройки использования складов в табличных частях документов.
//
// Параметры:
//  КолонкиТовары         – коллекция колонок табличного поля "Товары",
//  КолонкиВозвратнаяТара – коллекция колонок табличного поля "ВозвратнаяТара", 
//                          необязательный, если не передан, то видимость колонки не устанавливается,
//  ЭУСклад               - ЭУ формы, в который вводится склад в шапке,
//  ИмяКолонкиСклад       - Строка, имя колонки склада, в которые вводится склад в ТЧ (имена должны быть одинаковыми в обоих ТЧ),
// ВидОперации            - строка, определяет вид операции,возможнве значения "Поступление", "Реализация",
//                          по умолчанию "Реализация".
//
Процедура УстановитьВидимостьОбязательностьСклада(КолонкиТовары, КолонкиВозвратнаяТара = Неопределено, ЭУСклад, ИмяКолонкиСклад = "Склад", ВидОперации = "Реализация") Экспорт

	ИспользоватьКолонкуСклад = Истина; // начальная инициализация;

	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

	Если ВидОперации = "Реализация" Тогда
		ИспользоватьКолонкуСклад =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		                          Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
	ИначеЕсли ВидОперации = "Поступление" Тогда
		ИспользоватьКолонкуСклад =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		                          Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);
	Иначе
		СообщитьОбОшибке("УстановитьВидимостьКолонкиСклад: передан не верный вид операции документа.");
		Возврат;
	КонецЕсли;

	// Установим видимость колонки
	СтруктураКолонок = Новый Структура("Склад");

	УстновитьВидимостьКолонок(КолонкиТовары, СтруктураКолонок, ИспользоватьКолонкуСклад);

	Если КолонкиВозвратнаяТара <> Неопределено Тогда
		УстновитьВидимостьКолонок(КолонкиВозвратнаяТара, СтруктураКолонок, ИспользоватьКолонкуСклад);
	КонецЕсли;

	//Установим автоотметки незаполненного.
	Если ИспользоватьКолонкуСклад Тогда
		КолонкиТовары[ИмяКолонкиСклад].АвтоотметкаНеЗаполненного = Истина;
		Если КолонкиВозвратнаяТара <> Неопределено Тогда
			КолонкиВозвратнаяТара[ИмяКолонкиСклад].АвтоотметкаНеЗаполненного = Истина;
		КонецЕсли;
		ЭУСклад.АвтоотметкаНеЗаполненного   = Ложь;
		ЭУСклад.ОтметкаНеЗаполненного       = Ложь;
	Иначе
		ЭУСклад.АвтоотметкаНеЗаполненного = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьКолонкиСклад()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ГПУ ПРЕДСТАВЛЕНИЯ ДАННЫХ

// Формирует текст про счет-фактуру для показа в форме документа
//
// Параметры: 
//  СчетФактура - ссылка на документ, определяет счет-фактуру, про который надо получить текстовую строку .
//
// Возвращаемое значение:
//  Текстовая строка про счет-фактуру.
//
Функция ПолучитьТекстСчетаФактуры(СчетФактура) Экспорт
	
	Если ЗначениеНеЗаполнено(СчетФактура) Тогда
		Возврат "Ввести счет-фактуру";
	Иначе
		Возврат Строка(СчетФактура) + ?(СчетФактура.ПометкаУдаления, " (помечен на удаление)", "");
	КонецЕсли; 
	
КонецФункции // ПолучитьТекстСчетаФактуры()

Функция ПолучитьТекстСпецификации(Спецификация) Экспорт
	
	Если ЗначениеНеЗаполнено(Спецификация)   Тогда
		Возврат "Требуется ввести";
	Иначе
		Возврат Строка(Спецификация) + ?(Спецификация.ПометкаУдаления, " (помечен на удаление)", "");
	КонецЕсли; 
	
КонецФункции // ПолучитьТекстСчетаФактуры()


// Процедура формирует и выводит текст в информационной надписи о величине долга контрагента.
//
// Параметры:
//  ДоговорКонтрагента    - ссылка на справочник, определяет договор контрагента; 
//  Сделка                   - ссылка на документ или Неопределено, определяет сделку; 
//  ЭлементФормыНадписьДолга - элемент формы, содержащий надпись долга;
//  СсылкаДокумент           - ссылка на документ, из которого вызывается процедура.
//  МожноНеРассчитывать      - если можно не рассчитывать долг, а в дополнительных правах "Рассчитывать долг при открытии форм" = ложь,
//                             то величина долга рассчитываться не будет
//
Процедура СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементФормыНадписьДолга, 
	                                 СсылкаДокумент = Неопределено, МожноНеРассчитывать = Ложь) Экспорт

	Если МожноНеРассчитывать Тогда
		Если НЕ РассчитыватьДолгПриОткрытииФорм() Тогда
			ЭлементФормыНадписьДолга.Заголовок = ПолучитьТекстДолга(ДоговорКонтрагента, Неопределено);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		СуммаДолга = ТекущийДолг(ДоговорКонтрагента, Сделка, СсылкаДокумент);

		ТекстДолга = ПолучитьТекстДолга(ДоговорКонтрагента, СуммаДолга);

		Если СуммаДолга > 0 Тогда // Долг контрагента, покрасим текст в особый цвет
			ЭлементФормыНадписьДолга.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		Иначе
			ЭлементФормыНадписьДолга.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		КонецЕсли; 

		ЭлементФормыНадписьДолга.Заголовок = ТекстДолга;
	Иначе
		ЭлементФормыНадписьДолга.Заголовок = "";
	КонецЕсли; 

КонецПроцедуры // СформироватьНадписьДолга()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ГПУ ВВОДА ДАННЫХ

// Выполняет общие для всех документов действия при нажатии на гиперссылку на Счет-фактуру
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ФормаДокумента  - форма документа.
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
&НаКлиенте
Процедура ВвестиСчетФактуру(ДокументОбъект, ФормаДокумента, ВидСчетаФактуры = "СчетФактураВыданный") Экспорт

	Если (Не ДокументОбъект.Проведен) и (Не ДокументОбъект.ПометкаУдаления) Тогда
		Ответ = Вопрос("Счет-фактуру нельзя вводить на основании не проведенного документа! Провести документ?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Попытка
				// выполняем проведение документа
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Возврат;
			КонецПопытки;
			
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	//Попытаемся найти счет фактуру
	СчетФактура = НайтиПодчиненныйДокумент(ДокументОбъект.Ссылка, ВидСчетаФактуры);
	
	ОбъектСчетаФактуры = Неопределено;
	
	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (ЗначениеНеЗаполнено(СчетФактура))
	   И (Не ДокументОбъект.ПометкаУдаления) Тогда
		//Вводим новый документ на основании нашего
		Если ДокументОбъект.Модифицированность() Тогда
			Предупреждение("Документ был изменен! Сначала следует записать документ!");
			Возврат;
		КонецЕсли;
		
		ОбъектСчетаФактуры = Документы[ВидСчетаФактуры].СоздатьДокумент();
		ОбъектСчетаФактуры.Заполнить(ДокументОбъект); 
		
	ИначеЕсли Не ЗначениеНеЗаполнено(СчетФактура) Тогда
		ОбъектСчетаФактуры = СчетФактура.ПолучитьОбъект();
		
	Иначе
		Предупреждение("На основании документов, помеченных на удаление, ввод счетов-фактур не предусмотрен.");
		
	КонецЕсли;

	Если ОбъектСчетаФактуры <> Неопределено Тогда
		// Откроем форму для редактирования счета фактуры
		ОбъектСчетаФактуры.ПолучитьФорму( , ФормаДокумента, Строка(ДокументОбъект)).Открыть();
		
	КонецЕсли;
		
КонецПроцедуры // ВвестиСчетФактуру()

&НаКлиенте
Процедура ВвестиСпецификацию(ДокументОбъект, ФормаДокумента, ВидСпецификации = "Спецификация") Экспорт

	Если (Не ДокументОбъект.Проведен) и (Не ДокументОбъект.ПометкаУдаления) Тогда
		Ответ = Вопрос("Спецификацию нельзя вводить на основании не проведенного документа! Провести документ?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Попытка
				// выполняем проведение документа
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Возврат;
			КонецПопытки;
			
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	//Попытаемся найти спецификацию
	Спецификация = НайтиПодчиненныйДокумент(ДокументОбъект.Ссылка, ВидСпецификации);
	
	ОбъектСпецификации = Неопределено;
	
	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (ЗначениеНеЗаполнено(Спецификация))
	   И (Не ДокументОбъект.ПометкаУдаления) Тогда
		//Вводим новый документ на основании нашего
		Если ДокументОбъект.Модифицированность() Тогда
			Предупреждение("Документ был изменен! Сначала следует записать документ!");
			Возврат;
		КонецЕсли;
		
		ОбъектСпецификации = Документы[ВидСпецификации].СоздатьДокумент();
		ОбъектСпецификации.Заполнить(ДокументОбъект.Ссылка); 
		
	ИначеЕсли Не ЗначениеНеЗаполнено(Спецификация) Тогда
		ОбъектСпецификации = Спецификация.ПолучитьОбъект();
		
	Иначе
		Предупреждение("На основании документов, помеченных на удаление, ввод спецификации не предусмотрен.");
		
	КонецЕсли;

	Если ОбъектСпецификации <> Неопределено Тогда
		// Откроем форму для редактирования спецификации
		ОбъектСпецификации.ПолучитьФорму( , ФормаДокумента, Строка(ДокументОбъект)).Открыть();
		
	КонецЕсли;
		
КонецПроцедуры // ВвестиСпецификацию()


Процедура УстановитьСписокПоляВыбора(ПолеВыбора, Список) Экспорт

	ПрошлоеЗначение = ПолеВыбора.Значение;
	ПолеВыбора.СписокВыбора = Список;
	Если НЕ ЗначениеНеЗаполнено(ПрошлоеЗначение) Тогда
		Если  Список.НайтиПоЗначению(ПрошлоеЗначение) <> Неопределено Тогда
			Если НЕ ПолеВыбора.Значение = ПрошлоеЗначение Тогда
				ПолеВыбора.Значение = ПрошлоеЗначение;
			КонецЕсли;
		Иначе
			ПолеВыбора.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСписокПоляВыбора()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ

//  Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) Экспорт   // в разработке

	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;

	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - ДокументОбъект.Дата;

	Иначе
		Возврат;

	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		УстановитьНомерДокумента(ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ПроверитьНомерДокумента()

// Процедура устанавливает номер документа.
//
// Параметры:
//  ДокументОбъект  - ДокументОбъект. Экземпляр документа, которому 
//                    необходимо присвоить новый номер
//
Процедура УстановитьНомерДокумента(ДокументОбъект) Экспорт
  МетаданныеДокумента = ДокументОбъект.Метаданные();

	СтрокаПрефикс="00";
	
	Если МетаданныеДокумента.Имя = "ЗаказПоставщикуСезонный" Тогда // префикса нет
		СтрокаПрефикс="00";

	ИначеЕсли ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента) И 
		ЗначениеЗаполнено(ДокументОбъект.Подразделение.ПрефиксИБ) Тогда
		СтрокаПрефикс=СокрЛП(ДокументОбъект.Подразделение.ПрефиксИБ);
	ИначеЕсли ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) И
		ЗначениеЗаполнено(ДокументОбъект.Организация.Префикс) Тогда
		СтрокаПрефикс=СокрЛП(ДокументОбъект.Организация.Префикс);
		
	ИначеЕсли ЕстьРеквизитДокумента("ЗаказПокупателя", МетаданныеДокумента) тогда //+++ 21.08.2012 для Корректировок
		// префикс - аналогично, но по Заказу покупателя, реквизиты есть точно,
		//но могут быть не заполнены
		ДокументОбъектЗаказПокупателя = ДокументОбъект.ЗаказПокупателя;
		Если ЗначениеЗаполнено(ДокументОбъектЗаказПокупателя.Подразделение)
			и ЗначениеЗаполнено(ДокументОбъектЗаказПокупателя.Подразделение.ПрефиксИБ) Тогда
			СтрокаПрефикс=СокрЛП(ДокументОбъектЗаказПокупателя.Подразделение.ПрефиксИБ);
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъектЗаказПокупателя.Организация) 
			и ЗначениеЗаполнено(ДокументОбъектЗаказПокупателя.Организация.Префикс) Тогда
			СтрокаПрефикс=СокрЛП(ДокументОбъектЗаказПокупателя.Организация.Префикс);  //ТК
		Иначе // если нет организации в заказе покупателя?!
			СтрокаПрефикс="0";
		КонецЕсли;

	Иначе
		СтрокаПрефикс="00";
	КонецЕсли;

		
	ДокументОбъект.УстановитьНовыйНомер(СтрокаПрефикс);	
    

КонецПроцедуры // УстановитьНомерДокумента()

// Функция спрашивает пользователя записать ли объект, или нет, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
&НаКлиенте
Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта) Экспорт

	Если ФормаОбъекта.ЭтоНовый() Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.ЭтотОбъект.Ссылка)) Тогда
			ТекстВопроса = "Для выполнения данной операции необходимо записать документ. Записать?";
		Иначе // Справочник
			ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";
		КонецЕсли; 
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		Иначе
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЗаписатьНовыйОбъектВФорме()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ

// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры: 
//  Валюта                         - Валюта, курс которой необходимо отобразить
//  Курс                           - курс, которой необходимо отобразить
//  Кратность                      - кратность, которую необходимо отобразить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СформироватьСкобки             - признак необходимости скобок
//
// Возвращаемое значение:
//  Строка с данными о курсе и кратности валюты
//
Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета, СформироватьСкобки = Ложь) Экспорт

	Если ЗначениеНеЗаполнено(Валюта) Тогда
		Возврат "";

	Иначе
		Возврат ?(СформироватьСкобки, "   ( ", "") + Кратность + " "
		      + СокрЛП(Валюта)
		      + " = "
		      + Курс + " " 
		      + СокрЛП(ВалютаРегламентированногоУчета)
		      + ?(СформироватьСкобки, " )", "");
	КонецЕсли;

КонецФункции // ПолучитьИнформациюКурсаВалютыСтрокой()

// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры: 
//  ФизЛицо - ссылка на элемент справочника "Физические лица",по которму необходимо
//            получить паспортные данные.
//
// Возвращаемое значение:
//  Строка с данными об удостоверении личности физичского лица
//
&НаКлиенте
Функция ПолучитьПаспорныеДанныеСтрокой(ФизЛицо) Экспорт

	СтруктураПаспортныхДанных	= РегистрыСведений.ПаспортныеДанныеФизЛиц.ПолучитьПоследнее(РабочаяДата, Новый Структура("ФизЛицо",ФизЛицо));
	ВидДокумента				= СтруктураПаспортныхДанных.ДокументВид;
	Серия						= СтруктураПаспортныхДанных.ДокументСерия;
	Номер						= СтруктураПаспортныхДанных.ДокументНомер;
	ДатаВыдачи					= СтруктураПаспортныхДанных.ДокументДатаВыдачи;
	КемВыдан					= СтруктураПаспортныхДанных.ДокументКемВыдан;
	НомерПодразделения			= СтруктураПаспортныхДанных.ДокументКодПодразделения;

	Если НЕ (ЗначениеНеЗаполнено(ДатаВыдачи)
		   И ЗначениеНеЗаполнено(ВидДокумента)
		   И ЗначениеНеЗаполнено(Серия + Номер + КемВыдан + НомерПодразделения)) Тогда

		Возврат ?(ВидДокумента.Пустая(),"","" + ВидДокумента + ", ") 
				+ "Серия: " + Серия + ", № " + Номер 
				+ ", Выдан: " + Формат(ДатаВыдачи,"ДФ='дд ММММ гггг'") + " года, " 
				+ КемВыдан + "; № подр. " + НомерПодразделения;

	Иначе
		Возврат "Отсутствуют данные об удостоверении личности."
	КонецЕсли;

КонецФункции // ПолучитьПаспорныеДанныеСтрокой()

// Формирует текст о долге контрагента для вывода его в форме документа
//
// Параметры: 
//  ДоговорКонтрагента - ссылка на элемент справочника, определяет договор контрагента
//  Долг                  - число, сумма долга.
//
// Возвращаемое значение:
//  Строка, сформированный текст про долг контрагента.
//
Функция ПолучитьТекстДолга(ДоговорКонтрагента, Знач Долг) Экспорт

	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат "Введена не вся информация для расчета долга.";
	КонецЕсли;

	ТекстПодписи = ?(ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом,
	               "По договору","По сделке");

	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ТекстПодписи = ТекстПодписи + " """ + Нрег(ДоговорКонтрагента.ВидДоговора) + """";
	Иначе
		ТекстПодписи = ТекстПодписи + " " + Нрег(ДоговорКонтрагента.ВидДоговора);
	КонецЕсли;

	Если Долг = Неопределено Тогда
		ТекстПодписи = ТекстПодписи + " долг не рассчитан";

	ИначеЕсли Долг = 0 Тогда
		ТекстПодписи = ТекстПодписи + " нет долга";

	Иначе
		Если Долг > 0 Тогда
			ТекстПодписи = ТекстПодписи + " долг контрагента";
		Иначе
			ТекстПодписи = ТекстПодписи + " долг компании";
			Долг = (-1) * Долг;
		КонецЕсли;

		ТекстПодписи = ТекстПодписи + " " +
		               ФорматСумм(Долг, ДоговорКонтрагента.ВалютаВзаиморасчетов);

	КонецЕсли;

	Возврат ТекстПодписи;

КонецФункции // ПолучитьТекстДолга()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Заполняет список пунктов подменю выбора печатных форм значениями переданного соответствия.
// Всем кнопкам назначается одно переданное действие.
//
// Параметры:
//  ЭлементМеню            - кнопка командной панели формы, соответствующая подменю выбора печатных форм, 
//                           которое надо заполнить, 
//  СоответствиеМакетов    - соответствие, содержащее список макетов печатных форм 
//                           объекта для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбора  - действие, которое надо выполнить при выборе любого пункта подменю.
//
&НаКлиенте
Процедура УстановитьПодменюВыбораПечатнойФормы(ЭлементМеню, СписокМакетов, ОбъектОбработкиВыбора) Экспорт

	Если ТипЗнч(СписокМакетов) = Тип("Соответствие") Тогда
		Для каждого ЭлементЗаполнения Из СписокМакетов Цикл
			ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Значение, ТипКнопкиКоманднойПанели.Действие, 
			                            ЭлементЗаполнения.Ключ, ОбъектОбработкиВыбора);
		КонецЦикла;
	ИначеЕсли ТипЗнч(СписокМакетов) = Тип("СписокЗначений") Тогда
		Для каждого СтрокаМакетаВСписке Из СписокМакетов Цикл			
			Если СтрокаМакетаВСписке.Значение = Неопределено Тогда
				ЭлементМеню.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			Иначе			
				Если ТипЗнч(СтрокаМакетаВСписке.Значение) = Тип("Строка") Тогда
					ЭлементМеню.Кнопки.Добавить(СтрокаМакетаВСписке.Значение, ТипКнопкиКоманднойПанели.Действие, 
					                            СтрокаМакетаВСписке.Представление, ОбъектОбработкиВыбора); 
				Иначе
					ЭлементМеню.Кнопки.Добавить(СтрЗаменить(СтрокаМакетаВСписке.Значение.УникальныйИдентификатор(), "-", "_"), ТипКнопкиКоманднойПанели.Действие, 
					                            СтрокаМакетаВСписке.Представление, ОбъектОбработкиВыбора); 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
 	КонецЕсли;


КонецПроцедуры // УстановитьПодменюВыбораПечатнойФормы()

// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//
&НаКлиенте
Процедура УстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации) Экспорт

	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		ПунктМеню = ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
		                                        ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
		ПунктМеню.ИзменяетДанные = Истина;
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

// Процедура вызывается формирования кнопки "Подбор" для формы видов расчетов Планов Видов Расчетов.
//
// Параметры:
//  СсылкаПВР 	   	   - ссылка на ПВР;
//  ФормаЭлемента 	   - Форма вида расчета.
//  ВедущиеВидыРасчета - булево, Истина - если нужно формировать кнопку в командной
//						 панели ТЧ "ВедущиеВидыРасчета".
//
&НаКлиенте
Процедура СоздатьКнопкуПодбораДляПВР(СсылкаПВР, ФормаЭлемента, ВедущиеВидыРасчета = Ложь) Экспорт

	МассивДоступныхТипов = Новый Массив;
	
	КоллекцияБазовыхВидовРасчета = Метаданные.ПланыВидовРасчета[СсылкаПВР.Метаданные().Имя].БазовыеВидыРасчета;
	
	Если КоллекцияБазовыхВидовРасчета.Количество() > 1 Тогда
		
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		
		Если ВедущиеВидыРасчета Тогда
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		КонецЕсли;
		
		Для каждого СтрокаКолекции Из КоллекцияБазовыхВидовРасчета Цикл
			
			ДействиеПоКнопке = Новый Действие("КоманднаяПанельБазовыеВидыРасчетаПодборПодМеню");
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.Кнопки.Добавить(СтрокаКолекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКолекции.Синоним, ДействиеПоКнопке);
			
			Если ВедущиеВидыРасчета Тогда
				
				ДействиеПоКнопке = Новый Действие("КоманднаяПанельВедущиеВидыРасчетаПодМеню");
				ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.Кнопки.Добавить(СтрокаКолекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКолекции.Синоним, ДействиеПоКнопке);
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКолекции.Имя));
				
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		ДействиеПоКнопке = Новый Действие("КоманднаяПанельБазовыеВидыРасчетаПодбор");
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.Действие  = ДействиеПоКнопке;
		
		Если ВедущиеВидыРасчета Тогда
			
			ДействиеПоКнопке = Новый Действие("КоманднаяПанельВедущиеВидыРасчетаПодбор");
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.Действие = ДействиеПоКнопке;
			
			Для каждого СтрокаКолекции Из КоллекцияБазовыхВидовРасчета Цикл
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКолекции.Имя));
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ВедущиеВидыРасчета Тогда
		
		ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(МассивДоступныхТипов);
		Если КоллекцияБазовыхВидовРасчета.Количество() = 1 Тогда
			ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ВыбиратьТип = Ложь;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // СоздатьКнопкуПодбораДляПВР()

//настройка подменю Клиент-Банк
Процедура УстановкаПодменюКлиентБанк(Кнопка, Объект) Экспорт

	Если Объект.РеквизитыКонтрагента.Количество() = 0 Тогда
		Кнопка.Очистить();
	КонецЕсли; 

КонецПроцедуры // УстановкаПодменюКлиентБанк()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ и ФУНКЦИИ ИНФОРМИРОВАНИЯ ПОЛЬЗОВАТЕЛЯ

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//
&НаКлиенте
Функция ПроверитьМодифицированность(Документ) Экспорт

	Результат = Ложь;

	Если Документ.Модифицированность() Тогда

		Проведен = ?(Документ.Проведен, " и провести","");

		Ответ = Вопрос("Документ изменен. Для печати его необходимо записать "+ Проведен +".
		               |Записать" + Проведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Документ.Проведен Тогда

				ДатаДока = НачалоДня(Документ.Дата);
				ДатаДня  = НачалоДня(ТекущаяДата());

				Попытка
					
					Если ДатаДока = ДатаДня и Документ.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Иначе
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				Документ.Записать();
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//  Форма    - форма проверяемого документа
//
&НаКлиенте
Функция ПроверитьМодифицированностьВФорме(Документ, Форма) Экспорт

	Результат = Ложь;

	Если Форма.Модифицированность Тогда

		Проведен = ?(Документ.Проведен, " и провести","");

		Ответ = Вопрос("Документ изменен. Для печати его необходимо записать "+ Проведен +".
		               |Записать" + Проведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Документ.Проведен Тогда

				Попытка

					Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				Форма.ЗаписатьВФорме();
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Проверяет модифицированность документа перед заполнением на основании
// 
// Параметры
//  Документ - проверяемый документ основания
//
Функция ПроверитьМодифицированностьДокументаОснования(Документ) Экспорт

	Результат = Ложь;

	Если НЕ ЗначениеНеЗаполнено(Документ) Тогда

		ФормаДокумента = Документ.ПолучитьФорму();

		Если ФормаДокумента.Модифицированность() Тогда
		#Если Клиент Тогда
			ОчиститьСообщения();
		#КонецЕсли
			СообщитьОбОшибке("Документ " + СокрЛП(Документ) + " был изменен! Сначала следует записать документ!");
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированностьДокументаОснования()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ ДЕЙСТВИЙ В ФОРМЕ

// Процедура вызывает сервисный механизм для изменения общих для
// всей табличной части Товары реквизитов, таких, например, как
// тип цен, валюта и т. д.
//
// Параметры:
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СпособЗаполненияЦен                - значение перечисления "Способы заполнения цен", определяет по какому из 
//                                       регистров ("Цены компании" или "Цены контрагентов") будет строиться запрос.
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр;
//  ИмяТабличнойЧасти                  - строка, имя табличной части, которую надо пересчитать;
//  ВалютаРегламентированногоУчета     - валюта регламентированного учета
//  СтруктураЗначений                  - для эмуляции ввода пользователем валюты, типа цен и пр. Применяется при
//                                       автоматическом заполнении документов.
//  НовыйТипЦенДляУстановки            - тип цен, который по возможности нужно установить как новый в форме;
//  СтруктураНеобрабатываемыхТабличныхЧастей - структура, содержащая имена табличных частей, которые не надо 
//                                       обрабатывать при изменении цен/валюты;
//
Процедура ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, 
	                           СтруктураНеРедактируемыхРеквизитов = Неопределено, ИмяТабличнойЧасти,
	                           ВалютаРегламентированногоУчета,
	                           СкидкаУстановлена = Ложь,
	                           СтруктураЗначений = Неопределено,
	                           НовыйТипЦенДляУстановки = Неопределено,
	                           СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено) Экспорт

	// Откроем модально форму "Цены и Налоги" и получим структуру старых и новых значений реквизитов документа
	Автозаполнение = Ложь;
	Если СтруктураЗначений = Неопределено Тогда
		
		СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, ВалютаРегламентированногоУчета,
		                              СтруктураНеРедактируемыхРеквизитов, ИмяТабличнойЧасти, НовыйТипЦенДляУстановки);
	Иначе

		Автозаполнение = Истина;

	КонецЕсли;

	// Если в форме отказались от изменений, то необходимо прекратить обработку
	Если СтруктураЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	//обрабатываем изменения Товаров, Услуг, ВозворатнойТары 
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Для каждого ТЧОбъекта Из МетаданныеДокумента.ТабличныеЧасти Цикл
		ТекущееИмяТабличнойЧасти = ТЧОбъекта.Имя;
		Если (СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено
		      ИЛИ Не СтруктураНеобрабатываемыхТабличныхЧастей.Свойство(ТекущееИмяТабличнойЧасти))
		   И (ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ЕстьРеквизитТабЧастиДокумента("ФактурнаяСтоимость", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ЕстьРеквизитТабЧастиДокумента("ЦенаПоступления", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ЕстьРеквизитТабЧастиДокумента("СуммаПоступления", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ЕстьРеквизитТабЧастиДокумента("ЦенаПередачи", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ЕстьРеквизитТабЧастиДокумента("СуммаПередачи", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ЕстьРеквизитТабЧастиДокумента("ЦенаСтарая", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ЕстьРеквизитТабЧастиДокумента("СуммаСтарая", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)) Тогда

			ОбработатьИзмененияПоКнопкеЦеныВалюта(ДокументОбъект,
			                                      СпособЗаполненияЦен,
			                                      СтруктураРеквизитовДокумента,
			                                      ТекущееИмяТабличнойЧасти,
			                                      ВалютаРегламентированногоУчета,
			                                      СкидкаУстановлена,
			                                      СтруктураЗначений,
			                                      Автозаполнение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ИзменитьЦеныВалюту()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ

// Процедура выполняет открытие формы работы со свойствами документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
&НаКлиенте
Процедура ОткрытьСвойстваДокумента(ДокументОбъект, ФормаДокумента) Экспорт
	Если Найти (Строка(ТипЗнч(ДокументОбъект)),"ссылка") = 0 Тогда // // ДокументОбъект
		Если ДокументОбъект.ЭтоНовый() Тогда
			Вопрос = "Перед началом работы со свойствами необходимо записать документ. Записать?";
			Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
			
			Если Ответ = КодВозвратаДиалога.ОК Тогда
				ФормаДокумента.ЗаписатьВФорме();
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	
	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);

	НазначениеДокумента = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоНаименованию("Документ_"+ДокументОбъект.Метаданные().Имя);
	Если ЗначениеНеЗаполнено(НазначениеДокумента) Тогда
		НазначениеДокумента = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
	Конецесли;	
	//Форма.НазначениеСвойств      = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
	//Форма.НазначениеСвойств      = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_Реализация;
	Форма.НазначениеСвойств      = НазначениеДокумента;
	Форма.ОбъектОтбораЗначений   = ДокументОбъект.Ссылка;
	Форма.ОбъектОтбораНазначений = ДокументОбъект.Ссылка;

	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();

КонецПроцедуры // ОткрытьСвойстваДокумента()

// Процедура выполняет открытие формы работы с категориями документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
&НаКлиенте
Процедура ОткрытьКатегорииДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Если ДокументОбъект.ЭтоНовый() Тогда
		Вопрос = "Перед началом работы с категориями необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ФормаДокумента.ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);

//+++ 05.08.2011
//было	Форма.НазначениеКатегорий   = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
	списЗнач = новый СписокЗначений;
		списЗнач.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);
		
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		списЗнач.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_РеализацияТоваровУслуг);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОперацияПоОтветственномуХранению") Тогда
		списЗнач.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ОперацияПоОтветственномуХранению);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КорректировкаЗаказаПоставщику") Тогда
		списЗнач.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_КорректировкаЗаказаПоставщику);	
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		списЗнач.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПоставщику);	
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаданиеНаОтгрузку") Тогда//+++ 25.05.2017
		списЗнач.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаданиеНаОтгрузку);	
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаявкаНаТранспорт")Тогда
		
		Если РольДоступна("МенеджерПоПродажам") или РольДоступна("ПолныеПрава") Тогда
			списЗнач.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя);
		КонецЕсли;
		
	КонецЕсли;	
	Форма.НазначениеКатегорий   = списЗнач;
	//+++)
	
	Форма.ОбъектОтбораКатегорий = ФормаДокумента.Ссылка;

	Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
	//+++ 25.03.2015 Форма.Открыть();
    Форма.ОткрытьМодально();
	
КонецПроцедуры // ОткрытьКатегорииДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

// Получает из текущих настроек пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
// Если не найдено, то берется первый макет в структуре макетов печатных форм,
// и сохраняется в настройках пользователя.
//
// Параметры: 
//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  ФормаДиалога        - форма редактируемого объекта,
//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
//                        макетов печатных форм документа
//
&НаКлиенте
Процедура УстановитьКнопкуПечати(ИмяОбъекта, ФормаДиалога, СписокМакетов, МакетФормыПоУмолчанию = Неопределено) Экспорт

	Перем НазваниеМакета;
	
	МакетПоУмолчанию = ВосстановитьЗначение(ИмяОбъекта + "МакетПечати");
	
	Если ТипЗнч(СписокМакетов) = Тип("Соответствие") Тогда
		// Пытаемся найти форму в соответствии
		ИмяМакета = СписокМакетов[МакетПоУмолчанию];

		Если ЗначениеНеЗаполнено(ИмяМакета) Тогда
		
			// Текущая печатная форма еще не найдена
			// Установим по умолчанию первую из сп иска
			Для каждого Элемент Из СписокМакетов Цикл
				МакетПоУмолчанию = Элемент.Ключ;
				Прервать;
			КонецЦикла; 
			СохранитьТекущуюКнопкуПечати(ИмяОбъекта, МакетПоУмолчанию);
		КонецЕсли;
	ИначеЕсли ТипЗнч(СписокМакетов) = Тип("СписокЗначений") Тогда
		
		Если ТипЗнч(МакетПоУмолчанию) = Тип("Строка") Тогда			
			СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
			Для Каждого СтрокаМакетаВСписке Из СписокМакетов Цикл
				Если СтрокаМакетаВСписке.Представление = МакетПоУмолчанию Тогда
					СтруктураМакета.Макет =  СтрокаМакетаВСписке.Значение;
					СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
					Прервать;
				КонецЕсли;
			КонецЦикла;   			
		ИначеЕсли ТипЗнч(МакетПоУмолчанию) = Тип("Структура") Тогда
			ЕстьВСписке = СписокМакетов.НайтиПоЗначению(МакетПоУмолчанию.Макет)<>Неопределено;
			Если ЕстьВСписке Тогда
				СтруктураМакета = МакетПоУмолчанию;
			Иначе
				СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
			КонецЕсли;
		Иначе			
			СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		КонецЕсли;
		
		Если СтруктураМакета.Макет = Неопределено И СписокМакетов.Количество() > 0 Тогда			
			СтрокаМакетаВСписке = СписокМакетов[0];
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
		КонецЕсли;
		
		СохранитьТекущуюКнопкуПечати(ИмяОбъекта, СтруктураМакета);
		МакетПоУмолчанию = СтруктураМакета.ПредставлениеМакета;
		
		МакетФормыПоУмолчанию = СтруктураМакета.Макет;
		
	КонецЕсли;

	// Изменим название кнопки печати
	ФормаДиалога.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = МакетПоУмолчанию;

КонецПроцедуры // УстановитьКнопкуПечати()


// Получает из текущих настроек пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
// Если не найдено, то берется первый макет в структуре макетов печатных форм,
// и сохраняется в настройках пользователя.
//
// Параметры: 
//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
//                        макетов печатных форм документа
//
&НаКлиенте
Функция ПолучитьПечатнуюФормуПоУмолчанию(ИмяОбъекта, СписокМакетов) Экспорт

	Перем НазваниеМакета;
	
	МакетПоУмолчанию = ВосстановитьЗначение(ИмяОбъекта + "МакетПечати");
	
	Если ТипЗнч(СписокМакетов) = Тип("Соответствие") Тогда
	
		// Пытаемся найти форму в соответствии
		ИмяМакета = СписокМакетов[МакетПоУмолчанию];

		Если ЗначениеНеЗаполнено(ИмяМакета) Тогда
		
			// Текущая печатная форма еще не найдена
			// Установим по умолчанию первую из списка
			Для каждого Элемент Из СписокМакетов Цикл
				МакетПоУмолчанию = Элемент.Ключ;
				Прервать;
			КонецЦикла; 
			СохранитьТекущуюКнопкуПечати(ИмяОбъекта, МакетПоУмолчанию);
		КонецЕсли;
	ИначеЕсли ТипЗнч(СписокМакетов) = Тип("СписокЗначений") Тогда
		
		Если ТипЗнч(МакетПоУмолчанию) = Тип("Строка") Тогда			
			СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
			Для Каждого СтрокаМакетаВСписке Из СписокМакетов Цикл
				Если СтрокаМакетаВСписке.Представление = МакетПоУмолчанию Тогда
					СтруктураМакета.Макет =  СтрокаМакетаВСписке.Значение;
					СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли МакетПоУмолчанию = Неопределено Тогда
			СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		Иначе			
			СтруктураМакета = МакетПоУмолчанию;
		КонецЕсли;
		
		Если СтруктураМакета.Макет = Неопределено Тогда
			Если СписокМакетов.Количество() <> 0 Тогда
				СтрокаМакетаВСписке = СписокМакетов[0];
				СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
				СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
        		
		МакетПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ИмяОбъекта, СтруктураМакета);		
		
	КонецЕсли;
	
	Возврат МакетПоУмолчанию;

	
КонецФункции // ПолучитьПечатнуюФормуПоУмолчанию()

// Сохраняет в настройках пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
//
// Параметры:
//  ИмяОбъекта     - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  НазваниеМакета - строка, определяет название текущего макета печатной формы,
//                   которое совпадает с текстом на кнопке печати в диалоге.
//
&НаКлиенте
Процедура СохранитьТекущуюКнопкуПечати(ИмяОбъекта, НазваниеМакета) Экспорт

	СохранитьЗначение(ИмяОбъекта + "МакетПечати", НазваниеМакета);

КонецПроцедуры // СохранитьТекущуюКнопкуПечати()

// В зависимости от настроек текущего пользователя выводит для ДокументаОбъекта 
// печатную форму по умолчанию на экран или на принтер.
//
// Параметры:
//  ДокументОбъект - печатаемый документ.
//  НазваниеМакета - строка, определяет название текущего макета печатной формы,
//                   которое совпадает с текстом на кнопке печати в диалоге.
//  ФормаДокумента - форма печатаемого документа.
//
Процедура НапечататьДокументПоУмолчанию(ДокументОбъект, Пользователь, НазваниеМакета, ФормаДокумента = Неопределено) Экспорт

	Если ФормаДокумента = Неопределено Тогда
		Если ПолучитьЗначениеПоУмолчанию(Пользователь,"ПечатьДокументовБезПредварительногоПросмотра") Тогда
			ДокументОбъект.Печать(НазваниеМакета, , Истина);
		Иначе
			ДокументОбъект.Печать(НазваниеМакета);
		КонецЕсли;
	Иначе
		Если ПолучитьЗначениеПоУмолчанию(Пользователь,"ПечатьДокументовБезПредварительногоПросмотра") Тогда
			ДокументОбъект.Печать(НазваниеМакета, , Истина, ФормаДокумента);
		Иначе
			ДокументОбъект.Печать(НазваниеМакета, , , ФормаДокумента);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // НапечататьДокументПоУмолчанию()

// Процедура дополняет список печатных форм объекта из справочника "Дополнительные печатные формы"
Процедура ДобавитьВСписокДополнительныеФормы(СписокМакетов, МетаданныеОбъекта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеПечатныеФормыПринадлежность.Ссылка,
	               |	ДополнительныеПечатныеФормыПринадлежность.Ссылка.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.ДополнительныеПечатныеФормы.Принадлежность КАК ДополнительныеПечатныеФормыПринадлежность
	               |ГДЕ
	               |	НЕ ДополнительныеПечатныеФормыПринадлежность.Ссылка.ПометкаУдаления
	               |	И ДополнительныеПечатныеФормыПринадлежность.СсылкаОбъекта = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
	Иначе
		Возврат;
	КонецЕсли;
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	БылРазделитель = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не БылРазделитель Тогда
			СписокМакетов.Добавить(Неопределено);			
			БылРазделитель = Истина;
		КонецЕсли;
		СписокМакетов.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;	
	
КонецПроцедуры // ДобавитьВСписокДополнительныеФормы()

// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, "L=ru_RU", Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

// Функция формирует представление заголовка документа
//
// Возвращаемое значение:
//  Строка - представление номера документа
//
Функция СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "") Экспорт

	Возврат НазваниеДокумента + " № " + ПолучитьНомерНаПечать(ДокументОбъект)
	                          + " от " + Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг'");

КонецФункции // СформироватьЗаголовокДокумента()

// Выводит на печать подготовленный макет 
//
// Параметры:
//  ПечДокумент           - ТабличыйДокумент, макет на печать,
//  КоличествоЭкземпляров - Число, количество экземпляров на печать,
//  НаПринтер             - Булево, Если истина, то выводим сразу на принтер.
//  Заголовок             - Заголовок окна табличного документа
//
Процедура НапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "") Экспорт

	Если ПечДокумент = Неопределено тогда
		Возврат;
	КонецЕсли;

	// Получить необходимое количество копий
	Если КоличествоЭкземпляров < 1 Тогда
		ПечДокумент.КоличествоЭкземпляров = 1;
	Иначе
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;

	ПечДокумент.ПолеСверху=0;
	ПечДокумент.ПолеСлева=0;
	ПечДокумент.ПолеСнизу=0;
	ПечДокумент.ПолеСправа=0;
	
	Если НаПринтер Тогда

		ПечДокумент.Напечатать();

	Иначе
		
		// Отобразить печатный документ на экране
		ПечДокумент.ОтображатьЗаголовки = Ложь;
		ПечДокумент.ОтображатьСетку     = Ложь;
		ПечДокумент.Защита              = ЗащитаТаблиц();
		ПечДокумент.ТолькоПросмотр      = Истина;
		ПечДокумент.Показать(Заголовок);

	КонецЕсли;

КонецПроцедуры // НапечататьДокумент()

// Функция по виду сравнения возвращает текстовый параметр для запроса.
// 
// Параметры
//  ВидСравнения - Вид сравнения, для которого получается представление
// 
Функция ПолучитьПредставлениеИнтервала(Сравнение)

	Результат = Новый Структура("Тип, Представление");

	Если      Сравнение         = ВидСравнения.Больше Тогда
		Результат.Представление = " > ";
	ИначеЕсли Сравнение         = ВидСравнения.БольшеИлиРавно Тогда
		Результат.Представление = " >=";
	ИначеЕсли Сравнение         = ВидСравнения.Меньше Тогда
		Результат.Представление = " < ";
	ИначеЕсли Сравнение         = ВидСравнения.МеньшеИлиРавно Тогда
		Результат.Представление = " <=";
	ИначеЕсли Сравнение         = ВидСравнения.НеРавно Тогда
		Результат.Представление = " <> ";
	ИначеЕсли Сравнение         = ВидСравнения.Равно Тогда
		Результат.Представление = " = ";
	ИначеЕсли Сравнение         = ВидСравнения.Интервал Тогда
		Результат.Тип           = "Интервал";
		Результат.Представление = " МЕЖДУ ";
	ИначеЕсли Сравнение         = ВидСравнения.ИнтервалВключаяГраницы Тогда
		Результат.Тип           = "Интервал";
		Результат.Представление = " МЕЖДУ ";
	ИначеЕсли Сравнение         = ВидСравнения.ИнтервалВключаяНачало Тогда
		Результат.Тип           = "Интервал";
		Результат.Представление = " МЕЖДУ";
	ИначеЕсли Сравнение         = ВидСравнения.ИнтервалВключаяОкончание Тогда
		Результат.Тип           = "Интервал";
		Результат.Представление = " МЕЖДУ";
	ИначеЕсли Сравнение         = ВидСравнения.Содержит Тогда
		Результат.Тип           = "";
		Результат.Представление = "";
	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПредставлениеИнтервала()

// Печатает документ полученный по нажатию кнопки в форме списка
//
// Параметры
//  Документ - документ,который нужно отпечатать
//
&НаКлиенте
Процедура НапечататьДокументИзФормыСписка(Документ) Экспорт

	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Попытка
		СоответствиеМакетов = Документ.ПолучитьСписокПечатныхФорм();
	Исключение
		Предупреждение("Документ не имеет печатных форм!");
		Возврат;
	КонецПопытки;

	НазваниеМакета = ПолучитьПечатнуюФормуПоУмолчанию(Документ.Метаданные().Имя, СоответствиеМакетов);
	Документ.Печать(НазваниеМакета);

КонецПроцедуры // НапечататьДокументИзФормыСписка()

// Формирует цену для печати ценников.
//
// Параметры:
//  Цена - число, цена которую нужно отформатировать.
//
Функция ПолучитьЦенуДляПечати(Знач Цена)

	Цена         = Окр(Цена, 2, РежимОкругления.Окр15как20);
	ЦелаяЧасть   = Цел(Цена);
	ДробнаяЧасть = (Цена - ЦелаяЧасть) * 100;
	Если ДробнаяЧасть = 0 Тогда
		ДробнаяЧасть = "00";
	КонецЕсли;

	Возврат "" + ЦелаяЧасть + " р " + ДробнаяЧасть + " к";

КонецФункции // ПолучитьЦенуДляПечати()

// Печатает ценники по указанным товарам.
//
// Параметры:
//  Данные - структура, содержащая данные для печати.
//           Поля:
//            - Организация   - Организация, от лица которой печатаются ценники.
//            - ТаблицаДанных - Таблица значений с данными о ценниках.
//
Функция НапечататьЦенники(Данные) Экспорт

	ТабДокумент                     = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Ценник";
	Макет                           = ПолучитьОбщийМакет("Ценник");
	ОбластьЦенника                  = Макет.ПолучитьОбласть("Строка|Столбец");

	Если ТипЗнч(Данные) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Организация   = Неопределено;
	ТаблицаДанных = Неопределено; 
	ДатаПечати    = Неопределено;
	Если НЕ Данные.Свойство("Организация",   Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ Данные.Свойство("ТаблицаДанных", ТаблицаДанных) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	Данные.Свойство("ДатаПечати", ДатаПечати);

	ТекСтолбец = 0;
	ТекСтрока  = 0;

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл

		ОбластьЦенника.Параметры.Заполнить(СтрокаТаблицы);
		ОбластьЦенника.Параметры.Цена        = ФорматСумм(СтрокаТаблицы.Цена, СтрокаТаблицы.Валюта, "00");
		ОбластьЦенника.Параметры.ДатаПечати  = ДатаПечати;
		ОбластьЦенника.Параметры.Организация = Организация;
		ОбластьЦенника.Параметры.ОрганизацияНаименование = Организация.Наименование;

		Если ТекСтолбец = 0 Тогда
			ТабДокумент.Вывести(ОбластьЦенника);
		Иначе
			ТабДокумент.Присоединить(ОбластьЦенника);
		КонецЕсли;

		ТекСтолбец = ТекСтолбец + 1;

		Если ТекСтолбец = 5 Тогда
			ТекСтрока  = ТекСтрока + 1;
			ТекСтолбец = 0;
		КонецЕсли;

		Если ТекСтрока = 3 Тогда
			ТекСтрока = 0;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции // НапечататьЦенники()

// Печатает составы по указанной номенклатуре.
//
// Параметры:
//  МассивНоменклатуры - массив, содержащий номенклатуру, для которой печатается состав
//
// Возвращаемое значение:
//  Сформированный табличный документ.
//
Функция НапечататьКомплектующие(МассивНоменклатуры) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура                  КАК Номенклатура,
	|	ХарактеристикаНоменклатуры    КАК ХарактеристикаНоменклатуры,
	|	Комплектующая                 КАК Комплектующая,
	|	ХарактеристикаКомплектующей   КАК ХарактеристикаКомплектующей,
	|	Количество                    КАК Количество,
	|	ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	ДоляСтоимости                 КАК ДоляСтоимости
	|ИЗ
	|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	|
	|ГДЕ
	|	Номенклатура В ИЕРАРХИИ (&Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Макет = ПолучитьОбщийМакет("СписокКомплектующих");

	ТабДокумент = Новый ТабличныйДокумент;
	
	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ХарактеристикаНоменклатуры") Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок"+?(Выборка.Номенклатура.Набор, "|Набор", ""));
			ОбластьМакета.Параметры.Заполнить(Выборка);
			НомерСтроки = 1;
			Если Выборка.Номенклатура.Набор Тогда
				ОбластьМакета.Параметры.ТекстЗаголовка = "Состав набора """+СокрЛП(Выборка.Номенклатура)+"""";
			Иначе
				ОбластьМакета.Параметры.ТекстЗаголовка = "Состав комплекта """+СокрЛП(Выборка.Номенклатура)+"""";
				Если Не ЗначениеНеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
					ОбластьМакета.Параметры.ТекстЗаголовка = ОбластьМакета.Параметры.ТекстЗаголовка + " ("+СокрЛП(Выборка.ХарактеристикаНоменклатуры)+")";
				КонецЕсли;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы"+?(Выборка.Номенклатура.Набор, "|Набор", ""));
			ТабДокумент.Вывести(ОбластьМакета);
			Пока Выборка.Следующий() Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("Строка"+?(Выборка.Номенклатура.Набор, "|Набор", ""));
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				ТабДокумент.Вывести(ОбластьМакета);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал"+?(Выборка.Номенклатура.Набор, "|Набор", ""));
			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции // НапечататьКомплектующие()

// Печатает движения документа
//
// Параметры:
//  ДокументСсылка - ссылка на документ, движения которого печатаем
//
&НаКлиенте
Процедура НапечататьДвиженияДокумента(ДокументСсылка) Экспорт

	// может, ссылки еще не существует? надо сначала записать документ
	Если ЗначениеНеЗаполнено(ДокументСсылка) Тогда
		Предупреждение("Сначала запишите документ!");
		Возврат;
	КонецЕсли;
	
	// Получим контекст отчета
	ПечатьДвиженийДокумента = Отчеты.ДвиженияДокумента.Создать();

	//Установим реквизиты и переменые отчета
	ПечатьДвиженийДокумента.Документ = ДокументСсылка;

	// Напечатаем движения
	ПечатьДвиженийДокумента.СформироватьОтчет();

КонецПроцедуры // НапечататьДвиженияДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЛАНОВОЙ СЕБЕСТОИМОСТЬЮ

// Процедура выполняет стандартные действия при изменении режима использования плановой себестоимости
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа
//  ФормаДокумента                   - форма редактируемого документа
//  ВалютаРегламентированногоУчета   - валюта регламентированного учета
//  СтароеЗначениеРежимаИспользовать - предыдущее значение режима использования плановой себестоимости
//
Процедура ИзмененитьРежимИспользованияПлановойСебестоимости(ДокументОбъект, ФормаДокумента, ВалютаРегламентированногоУчета, СтароеЗначениеРежимаИспользовать = Неопределено) Экспорт

	Колонки = ФормаДокумента.ЭлементыФормы.Товары.Колонки;
	Надпись = ФормаДокумента.ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости;

	Если ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда

		Если СтароеЗначениеРежимаИспользовать = Ложь Тогда

			// Пользователь изменил режим с "не использовать" на "использовать".
			// Заполним плановую себестоимость во всех строках документа.
			РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ДокументОбъект, ВалютаРегламентированногоУчета);
		КонецЕсли;

		// Устанавливаем режим видимости колонок и надписи.
		Колонки.ПлановаяСебестоимость.Видимость                         = Истина;
		Колонки.СуммаПлановойСебестоимости.Видимость                    = Истина;
		Колонки.СуммаОтклоненияОтСуммыПлановойСебестоимости.Видимость   = Истина;
		Колонки.ПроцентОтклоненияОтСуммыПлановойСебестоимости.Видимость = Истина;

		Надпись.Видимость	= Истина;
	Иначе

		// Устанавливаем режим видимости колонок и надписи.
		Колонки.ПлановаяСебестоимость.Видимость                         = Ложь;
		Колонки.СуммаПлановойСебестоимости.Видимость                    = Ложь;
		Колонки.СуммаОтклоненияОтСуммыПлановойСебестоимости.Видимость   = Ложь;
		Колонки.ПроцентОтклоненияОтСуммыПлановойСебестоимости.Видимость = Ложь;

		Надпись.Видимость	= Ложь;
	КонецЕсли;

КонецПроцедуры // ИзмененитьРежимИспользованияПлановойСебестоимости()

// Процедура формирует и выводит текст в информационной надписи об итоговом отклонение 
// от плановой себестоимости.
//
// Параметры:
//  ЭлементФормыНадписьОтклонение - элемент формы, содержащий надпись итогового отклонения;
//  ДокументОбъект                - ссылка на документ, из которого вызывается процедура.
//
Процедура СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементФормыНадписьОтклонение, ДокументОбъект) Экспорт

	Перем ПроцентОтклоненияОтПлановойСебестоимости;

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда

		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;

	ИтоговоеОтклонение = ПолучитьИтоговоеОтклонениеОтПлановойСебестоимости(ДокументОбъект, ПроцентОтклоненияОтПлановойСебестоимости);

	Если ИтоговоеОтклонение = Неопределено Тогда

		// Если итоговая отклонение неопределено, 
		// информация об отклонении не показываем.
		ЭлементФормыНадписьОтклонение.Заголовок = "";
	Иначе
		// Если итоговое отклонение определено, показываем.
		
		// В документах корректировки показываем сумму изменения отклонения, процент не указываем
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КорректировкаЗаказаПоставщику") 
			 ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КорректировкаЗаказаПокупателя") Тогда
			 
			ЭлементФормыНадписьОтклонение.Заголовок = "Изменение отклонения от плановой себестоимости: "
			                                          + ФорматСумм(ИтоговоеОтклонение,
			                                                         ДокументОбъект.ВалютаДокумента, "0,00");
			
		Иначе // В остальных документах показываем сумму и процент отклонения от плановой себестоимости
			 
			ЭлементФормыНадписьОтклонение.Заголовок = "Отклонение от плановой себестоимости: "
			                                          + ФорматСумм(ИтоговоеОтклонение,
			                                                         ДокументОбъект.ВалютаДокумента, "0,00");

			Если ПроцентОтклоненияОтПлановойСебестоимости <> Неопределено Тогда
				ЭлементФормыНадписьОтклонение.Заголовок = ЭлементФормыНадписьОтклонение.Заголовок
				                                          + " (" 
				                                          + ФорматСумм(ПроцентОтклоненияОтПлановойСебестоимости, , 
				                                                         "0,00") + "%).";
			КонецЕсли;
		КонецЕсли;

		// Отрицательное отклонение выделяем красным цветом.
		Если ИтоговоеОтклонение < 0 Тогда
			ЭлементФормыНадписьОтклонение.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		Иначе
			ЭлементФормыНадписьОтклонение.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ВВОДА ЗНАЧЕНИЙ

// Функция по для переданной строке пути возвращает список заполненных значений
//
// Параметры
//  Путь - Строка .с указанием объекта метаданных и поля ввода 
// сокращением
//
// Возвращаемые значения
//  Возвращается список значений с историей ввода в это поле
//
&НаКлиенте
Функция ПолучитьСписокИсторииВвода(Путь) Экспорт

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		Возврат Новый СписокЗначений();
	КонецЕсли;

	СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);

	Если ТипЗнч(СписокИстории) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементСписка из СписокИстории Цикл
			Если ТипЗнч(ЭлементСписка.Значение) <> Тип("Строка") Тогда
				СписокИстории.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;

		Для каждого ЭлементСписка из СписокИстории Цикл
			Если ТипЗнч(ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение)) <> Тип("Строка") Тогда
				ЭлементСписка.Значение = ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение);
				ЭлементСписка.Представление = Строка(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;

		Возврат СписокИстории;

	Иначе
		Возврат Новый СписокЗначений();

	КонецЕсли;

КонецФункции // ПолучитьСписокИсторииВвода()

// Процедура по для переданной строке пути и строковому представлению //
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которго необходимо составить список сокращений
//
&НаКлиенте
Процедура ДополнитьСписокИсторииВвода(Путь, Знач Значение) Экспорт

	Если ЗначениеНеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		СписокИстории = Новый СписокЗначений();
	Иначе
		СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);
	КонецЕсли;

	Если ТипЗнч(СписокИстории) <> Тип("СписокЗначений") Тогда
		СписокИстории = Новый СписокЗначений();
	КонецЕсли;

	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Значение = ЗначениеВСтрокуВнутр(Значение);
	КонецЕсли;

	Если СписокИстории.НайтиПоЗначению(Значение) <> Неопределено Тогда
		 СписокИстории.Удалить(СписокИстории.НайтиПоЗначению(Значение));
	КонецЕсли;

	СписокИстории.Вставить(0, Значение, Значение);

	Пока СписокИстории.Количество() > 5 Цикл
		СписокИстории.Удалить(СписокИстории.Получить(СписокИстории.Количество() - 1));
	КонецЦикла;

	СохранитьЗначение(Путь, ЗначениеВСтрокуВнутр(СписокИстории));

КонецПроцедуры // ДополнитьСписокИсторииВвода()

// Процедура добавляет информацию о коде и/или артикуле в ячейки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля - коллекция колонок табличного поля
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля
//  Номенклатура - СправочникСсылка.Номенклатура, товар, по которому надо вывести код и/или артикул
//
Процедура ПоказатьКодАртикул(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, Номенклатура) Экспорт

	Если КолонкиТабПоля.Код.Видимость
	 ИЛИ КолонкиТабПоля.Артикул.Видимость Тогда

		Если КолонкиТабПоля.Код.Видимость Тогда
			Если Номенклатура <> Неопределено Тогда
				ЯчейкиСтрокиТабПоля.Код.УстановитьТекст(Номенклатура.Код);
			Иначе
				ЯчейкиСтрокиТабПоля.Код.УстановитьТекст("");
			КонецЕсли;
		КонецЕсли;

		Если КолонкиТабПоля.Артикул.Видимость Тогда
			Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст(Номенклатура.Артикул);
			Иначе
				ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст("");
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПоказатьКодАртикул()

// Процедура добавляет информацию о сумме без скидок в ячейки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля      - коллекция колонок табличного поля,
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля,
//  Цена                - число, цена номенклатуры в строке,
//  Количество          - число, количество номенклатуры в строке.
//
Процедура ПоказатьСуммуБезСкидок(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, Цена, Количество) Экспорт

	Если КолонкиТабПоля.СуммаБезСкидок.Видимость Тогда

		Сумма = ФорматСумм(Цена * Количество);
		ЯчейкиСтрокиТабПоля.СуммаБезСкидок.УстановитьТекст(Сумма);

	КонецЕсли;

КонецПроцедуры // ПоказатьСуммуБезСкидок()

// Процедура добавляет информацию о коэффициенте мест в ячеки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля - коллекция колонок табличного поля
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля
//  ЕдиницаИзмерения - СправочникСсылка.ЕдиницаИзмерения, единица измерения по которой надо коэффициент мест
//
////-------------------СТАРАЯ процедура!------------------------------------------------
//Процедура ПоказатьКоэффициентМест(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, ЕдиницаИзмерения) Экспорт

//	Если ЗначениеНеЗаполнено(ЕдиницаИзмерения) Тогда
//		ЯчейкиСтрокиТабПоля.КоличествоМест.ТолькоПросмотр = Истина;
//	Иначе
//		ЯчейкиСтрокиТабПоля.КоличествоМест.ТолькоПросмотр = Ложь;

//		Если КолонкиТабПоля.КоэффициентМест.Видимость Тогда
//			Коэффициент = ЕдиницаИзмерения.Коэффициент;

//			Если Коэффициент > 0 Тогда
//				ЯчейкиСтрокиТабПоля.КоэффициентМест.УстановитьТекст(Формат(Коэффициент, "ЧЦ=10; ЧДЦ=3"));
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;

//КонецПроцедуры // ПоказатьКоэффициентМест()

//+++( 14.08.2017 - по задаче № 29456 - кол-во штук в упаковке (только для Аксессуаров! ) показываем в столбце "К.Мест"
процедура ПоказатьКоэффициентМест(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, ЕдиницаИзмерения) Экспорт
	
	Если КолонкиТабПоля.КоэффициентМест.Видимость 
		 и ЯчейкиСтрокиТабПоля.Номенклатура.Значение.ВидТовара = перечисления.ВидыТоваров.Аксессуары тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &Объект
		|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
		Запрос.УстановитьПараметр("Объект", ЯчейкиСтрокиТабПоля.Номенклатура.Значение);
		колВУпаковке =  ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90251");
		Запрос.УстановитьПараметр("Свойство", колВУпаковке);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() тогда
			Коэффициент = Выборка.Значение;
        Иначе // как было!
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда // по настоящей единице мест! как было - стандартно!
				Коэффициент = ЕдиницаИзмерения.Коэффициент;
			Иначе 
				Коэффициент = 0; //по умолчанию Упаковка = Ед.Изм = 1
			КонецЕсли;	
 		КонецЕсли;			
		
	 Иначе // как было!
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда // по настоящей единице мест! как было - стандартно!
			Коэффициент = ЕдиницаИзмерения.Коэффициент;
		Иначе 
			Коэффициент = 0; //по умолчанию Упаковка = Ед.Изм = 1
		КонецЕсли;	
 	КонецЕсли;			
	
	
	Если Коэффициент=0 тогда  //ничего не выводит как и раньше!
		ЯчейкиСтрокиТабПоля.КоличествоМест.ТолькоПросмотр = Истина;
	Иначе
		ЯчейкиСтрокиТабПоля.КоличествоМест.ТолькоПросмотр = Ложь;
 		Если КолонкиТабПоля.КоэффициентМест.Видимость Тогда
			ЯчейкиСтрокиТабПоля.КоэффициентМест.УстановитьТекст(Формат(Коэффициент, "ЧЦ=10; ЧДЦ=3"));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьКоэффициентМест()



////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает видимость реквизитов в зависимости от типа учета
//
//		Параметры:
//
//
Процедура ВидимостьРеквизитовПоТипуУчета(ДокументОбъект, ФормаДокумента, Знач РеквизитыУпрУчета, Знач РеквизитыБухУчета, Знач РеквизитыНалУчета = "") Экспорт

	СтрРеквУпр = СтрЗаменить(РеквизитыУпрУчета, " ", "");
	СтрРеквУпр = СтрЗаменить(СтрРеквУпр, Символы.ПС,  "");
	СтрРеквУпр = СтрЗаменить(СтрРеквУпр, Символы.Таб, "");
	
	Пока Не ПустаяСтрока(СтрРеквУпр) Цикл
		
		Поз = Найти(СтрРеквУпр, ",");
		Если Поз = 0 Тогда
			ИмяРекв    = СтрРеквУпр;
			СтрРеквУпр = "";
		Иначе
			ИмяРекв    = Лев (СтрРеквУпр, Поз - 1);
			СтрРеквУпр = Сред(СтрРеквУпр, Поз + 1);
		КонецЕсли;
		Если ПустаяСтрока(ИмяРекв) Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(ИмяРекв, ".");
		Если Поз = 0 Тогда
			ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = ДокументОбъект.ОтражатьВУправленческомУчете;
		Иначе
			ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = ДокументОбъект.ОтражатьВУправленческомУчете;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрРеквБух = СтрЗаменить(РеквизитыБухУчета, " ", "");
	СтрРеквБух = СтрЗаменить(СтрРеквБух, Символы.ПС,  "");
	СтрРеквБух = СтрЗаменить(СтрРеквБух, Символы.Таб, "");
	Пока Не ПустаяСтрока(СтрРеквБух) Цикл
		
		Поз = Найти(СтрРеквБух, ",");
		Если Поз = 0 Тогда
			ИмяРекв    = СтрРеквБух;
			СтрРеквБух = "";
		Иначе
			ИмяРекв    = Лев (СтрРеквБух, Поз - 1);
			СтрРеквБух = Сред(СтрРеквБух, Поз + 1);
		КонецЕсли;
		Если ПустаяСтрока(ИмяРекв) Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(ИмяРекв, ".");
		Если Поз = 0 Тогда
			ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = ДокументОбъект.ОтражатьВБухгалтерскомУчете;
		Иначе
			ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = ДокументОбъект.ОтражатьВБухгалтерскомУчете;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрРеквНал = СтрЗаменить(РеквизитыНалУчета, " ", "");
	СтрРеквНал = СтрЗаменить(СтрРеквНал, Символы.ПС,  "");
	СтрРеквНал = СтрЗаменить(СтрРеквНал, Символы.Таб, "");
	Пока Не ПустаяСтрока(СтрРеквНал) Цикл
		
		Поз = Найти(СтрРеквНал, ",");
		Если Поз = 0 Тогда
			ИмяРекв    = СтрРеквНал;
			СтрРеквНал = "";
		Иначе
			ИмяРекв    = Лев (СтрРеквНал, Поз - 1);
			СтрРеквНал = Сред(СтрРеквНал, Поз + 1);
		КонецЕсли;
		Если ПустаяСтрока(ИмяРекв) Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(ИмяРекв, ".");
		Если Поз = 0 Тогда
			ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = ДокументОбъект.ОтражатьВНалоговомУчете;
		Иначе
			ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = ДокументОбъект.ОтражатьВНалоговомУчете;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВидимостьРеквизитовПоТипуУчета()

// Процедура открывает форму выбора документа и устанавливает отбор
//	Параметры:
//		ФормаДокумента  - форма редактируемого документа;
//		ЭлементФормы    - элемент формы документа, который надо заполнить;
//		СписокТипов     - список типов документов (необязательный);
//		СтруктураОтбора - структура отбора, который надо установить при открытии формы.
//
Процедура ОткрытьФормуДокументаСОтбором(ФормаДокумента, ЭлементФормы, СписокТипов = Неопределено, СтруктураОтбора) Экспорт

	Если СписокТипов = Неопределено Тогда
		
		ИмяДокумента = ЭлементФормы.Значение.Метаданные().Имя; // считаем, что в этом случае составного типа не будет.
	Иначе

		// Пользователь выбирает тип документа
		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат; // пользователь отказался от выбора
		КонецЕсли;

		ИмяДокумента = ВыбранныйЭлемент.Значение;

	КонецЕсли;

	ФормаВыбора = Документы[ИмяДокумента].ПолучитьФормуВыбора(,ЭлементФормы,);

	// Отфильруем список документов.
	Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
		КонецЕсли;
		ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
		ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
	КонецЦикла;

	ФормаВыбора.Открыть();

КонецПроцедуры // ОткрытьФормуДокументаСОтбором()

// Процедура - установка вида поступления/передачи
//
// Параметры:
//  ДокументОбъект - объект документа, для которого надо проверить вид поступления / вид передачи.
//  ФормаДокумента - форма документа, для которого надо проверить вид поступления / вид передачи.
//
Процедура ПроверитьВидПоступленияПередачи(ДокументОбъект, ФормаДокумента) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если НЕ ДокументОбъект.ОтражатьВУправленческомУчете Тогда
		Если ЕстьРеквизитДокумента("ВидПоступления", МетаданныеДокумента) Тогда
			Если ДокументОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				ДокументОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
				Если ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента) Тогда
					ДокументОбъект.СкладОрдер = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			ФормаДокумента.ЭлементыФормы.ВидПоступления.ТолькоПросмотр = Истина;
			ФормаДокумента.ЭлементыФормы.ВидПоступления.КнопкаВыбора = Ложь;
			ФормаДокумента.ЭлементыФормы.ВидПоступления.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);
		ИначеЕсли ЕстьРеквизитДокумента("ВидПередачи", МетаданныеДокумента) Тогда
			Если ДокументОбъект.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
				ДокументОбъект.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
			КонецЕсли;
			ФормаДокумента.ЭлементыФормы.ВидПередачи.ТолькоПросмотр = Истина;
			ФормаДокумента.ЭлементыФормы.ВидПередачи.КнопкаВыбора = Ложь;
			ФормаДокумента.ЭлементыФормы.ВидПередачи.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);
		КонецЕсли;
	Иначе
		Если ЕстьРеквизитДокумента("ВидПоступления", МетаданныеДокумента) Тогда
			ФормаДокумента.ЭлементыФормы.ВидПоступления.ТолькоПросмотр = Ложь;
			ФормаДокумента.ЭлементыФормы.ВидПоступления.КнопкаВыбора = Истина;
			ФормаДокумента.ЭлементыФормы.ВидПоступления.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		ИначеЕсли ЕстьРеквизитДокумента("ВидПередачи", МетаданныеДокумента) Тогда
			ФормаДокумента.ЭлементыФормы.ВидПередачи.ТолькоПросмотр = Ложь;
			ФормаДокумента.ЭлементыФормы.ВидПередачи.КнопкаВыбора = Истина;
			ФормаДокумента.ЭлементыФормы.ВидПередачи.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьВидПоступленияПередачи()

// Процедура устанавливает видимость колонок суммы таб. части
//
Процедура УстановитьПараметрыКолонокСуммы( ФормаТабЧасть, УпрУчет, БухУчет) Экспорт
	
	ФормаТабЧасть.Колонки.Сумма    .Видимость = УпрУчет;
	ФормаТабЧасть.Колонки.СуммаРегл.Видимость = БухУчет;
	ФормаТабЧасть.Колонки.Сумма    .ИзменятьВидимость = Ложь;
	ФормаТабЧасть.Колонки.СуммаРегл.ИзменятьВидимость = Ложь;
	
	Если УпрУчет Тогда
		ФормаТабЧасть.Колонки.Цена.ТекстШапки = "Цена";
	ИначеЕсли БухУчет Тогда
		ФормаТабЧасть.Колонки.Цена.ТекстШапки = "Цена (регл.)";
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыКолонокСуммы()

// Функция устанавливает цены в колонке Цена в зависимости от типа учета
//
&НаКлиенте
Процедура УстановитьЦеныПоТипуУчета(ТабЧасть, УпрУчет, Спрашивать = Истина) Экспорт
	
	ВалютаБух = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	
	Если ВалютаУпр = ВалютаБух ИЛИ ТабЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Спрашивать Тогда
		Если УпрУчет Тогда
			ТекстВопроса = "Пересчитать цены в валюту управленческого учета?"
		Иначе
			ТекстВопроса = "Пересчитать цены в валюту регламентированного учета?"
		КонецЕсли;
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТабЧасть Цикл
		Если СтрокаТЧ.Количество = 0 Тогда
			СтрокаТЧ.Цена = 0;
		Иначе
			Если УпрУчет Тогда
				СтрокаТЧ.Цена = СтрокаТЧ.Сумма / СтрокаТЧ.Количество;
			Иначе
				СтрокаТЧ.Цена = СтрокаТЧ.СуммаРегл / СтрокаТЧ.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат;
	
КонецПроцедуры // УстановитьЦеныПоТипуУчета()

// Процедура инициирует диалог выбора времени.
//
// Параметры
//  Форма - Форма, в которой производится выбор
//  ДатаВремен - дата для выбора времени
//  ТекЭлемент - элемент формы
//  ПолныйГод - булево, показывать год 4-мя цифрами или 2-мя
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ВыбратьВремяДня(Форма, ДатаВремен, ТекЭлемент, Пользователь, ПоГрафику = Истина, ПолныйГод = Истина) Экспорт

	ДлинаЧаса = 3600;
	
	Если ПоГрафику Тогда
		СтруктураРабочегоВремени = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
		
		НачалоРабочегоДняКонстанта    = СтруктураРабочегоВремени.ДатаНачала;
		ОкончаниеРабочегоДняКонстанта = СтруктураРабочегоВремени.ДатаОкончания;
	Иначе
		НачалоРабочегоДняКонстанта      = '00010101000000';
		ОкончаниеРабочегоДняКонстанта   = '00010101235959';
	КонецЕсли;
		
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоЧаса(НачалоДня(ДатаВремен) + Час(НачалоРабочегоДняКонстанта) * ДлинаЧаса + Минута(НачалоРабочегоДняКонстанта)*60);
	ОкончаниеРабочегоДня = КонецЧаса(НачалоДня(ДатаВремен) + Час(ОкончаниеРабочегоДняКонстанта) * ДлинаЧаса + Минута(ОкончаниеРабочегоДняКонстанта)*60) - ДлинаЧаса;

	а = 0;
	ВремяСписка = НачалоРабочегоДня; 
	Пока НачалоЧаса(ВремяСписка) <= НачалоЧаса(ОкончаниеРабочегоДня) Цикл
		ВремяСписка = НачалоРабочегоДня + а * ДлинаЧаса / 2; // по полчаса
		СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг" + ?(ПолныйГод,"гг","") + " ЧЧ:мм'"));
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремен);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ТекЭлемент);
	Иначе
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ТекЭлемент, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаВремен = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьВремя()

 // Процедура открывает форму новой серии, подчиненую ячейке табличного поля.
// Используется в документах прихода товаров.
// 
// Параметры:
//   Элемент       - элемент формы (ячейка табличного поля), которой будет подчинена открываемая форма
//   ТекущиеДанные - данные текущей строки табличного поля
//   НомерГТД      - номер ГТД, если он уже известен (документ "ГТД по импорту")
//	
Процедура ОткрытьФормуСерии(Элемент, ТекущиеДанные, НомерГТД = Неопределено) Экспорт
	
	СерияНоменклатуры = ТекущиеДанные.СерияНоменклатуры;
	Если ЗначениеНеЗаполнено(СерияНоменклатуры) Тогда
		СпрСерии         = Справочники.СерииНоменклатуры;
		ФормаНовойСерии = СпрСерии.ПолучитьФормуНовогоЭлемента(, Элемент);
		ФормаНовойСерии.ЭлементыФормы.Владелец.Значение  = ТекущиеДанные.Номенклатура;
		ФормаНовойСерии.ЭлементыФормы.НомерГТД.Значение  = НомерГТД;
		ФормаНовойСерии.Открыть();
	Иначе
		ФормаСерии = СерияНоменклатуры.ПолучитьФорму(, Элемент);
		ФормаСерии.ЭлементыФормы.Владелец.Значение  = ТекущиеДанные.Номенклатура;
		ФормаСерии.Открыть();
	КонецЕсли;
	
 КонецПроцедуры // ОткрытьФормуСерии()

// Процедура открывает форму для отправки сообщения по электронной почте на линию
// технической поддержки пользователей
// 
// Параметры:
//  НЕТ
//
&НаКлиенте
Процедура ОтправитьСообщениеВОтделТехническойПоддержки() Экспорт

	Адрес = "";
	
	ЗначениеКонстанты = Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить();
	
	Если ТипЗнч(ЗначениеКонстанты) = Тип("ТаблицаЗначений") Тогда
		ПараметрыОтправки = ЗначениеКонстанты.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");
		Если ПараметрыОтправки <> Неопределено Тогда
			Адрес = ПараметрыОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1];
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Адрес"        , Адрес);
		СтруктураПараметров.Вставить("Представление", Адрес);
		СтруктураПараметров.Вставить("Текст"        , ПолучитьТекстСообщенияВОтделТехническойПоддержки());
		СтруктураПараметров.Вставить("Тема"         , "Сообщение в отдел технической поддержки");
		ОткрытьПисьмоПочтовогоКлиентаОперационнойСистемы(СтруктураПараметров);
		
	Иначе
		
		СтруктураНовогоПисьма = Новый Структура;
		Если НЕ ПустаяСтрока(Адрес) Тогда
			СписокКому = Новый СписокЗначений;
			СписокКому.Добавить(Адрес, Адрес);
			СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
		КонецЕсли; 
		СтруктураНовогоПисьма.Вставить("Тело"     , ПолучитьТекстСообщенияВОтделТехническойПоддержки());
		СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
		СтруктураНовогоПисьма.Вставить("Тема"     , "Сообщение в отдел технической поддержки");
		
		НаписатьПисьмо(ПараметрыСеанса.ТекущийПользователь, СтруктураНовогоПисьма,,, (НЕ ПустаяСтрока(Адрес)));
		
	КонецЕсли; 

КонецПроцедуры

// Процедура устанавливает видимость реквизита проект в зависимости от учетной политики
//
//		Параметры:
//
//
&НаКлиенте
Процедура ВидимостьРеквизитаПроект(ДокументОбъект = Неопределено, ЭлементыФормы, Знач Реквизиты) Экспорт
	
	Если ПустаяСтрока(Реквизиты) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		
		Дата = РабочаяДата;
		
	Иначе
		
		Дата = ДокументОбъект.Дата;
		
	КонецЕсли;
	
	ВедениеУчетаПоПроектам = ПолучитьПараметрыУчетнойПолитики(Дата, Неопределено)["ВедениеУчетаПоПроектам"];
	
	Если ВедениеУчетаПоПроектам = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Реквизиты = СтрЗаменить(Реквизиты, ",", Символы.ПС);
	
	Для Индекс = 1 По СтрЧислоСтрок(Реквизиты) Цикл
		
		ИмяРеквизита = СтрПолучитьСтроку(Реквизиты, Индекс);
		
		Если Найти(ИмяРеквизита, ".") > 0 Тогда
			
			ИмяРеквизита = СтрЗаменить(ИмяРеквизита, ".", Символы.ПС);
			ИмяТабличногоПоля = СтрПолучитьСтроку(ИмяРеквизита, 1);
			ИмяКолонки = СтрПолучитьСтроку(ИмяРеквизита, 2);
			
			ЭлементыФормы[ИмяТабличногоПоля].Колонки[ИмяКолонки].Видимость = Ложь;
			ЭлементыФормы[ИмяТабличногоПоля].Колонки[ИмяКолонки].ИзменятьВидимость = Ложь;
			
		Иначе
			
			ЭлементыФормы[ИмяРеквизита].Видимость = Ложь;
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ВидимостьРеквизитаПроект()

// Процедура выводить форму структуры подчиненности документа
Процедура ПоказатьСтруктуруПодчиненностиДокумента(ДокументСсылка) Экспорт
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОграниченныйИнтерфейс") = Истина Тогда
       Возврат;
	конецЕсли;
	ФормаСтруктурыПодчиненности = ПолучитьОбщуюФорму("ФормаСтруктурыПодчиненности");
	Если ФормаСтруктурыПодчиненности.Открыта() Тогда
		ФормаСтруктурыПодчиненности.Закрыть();
	КонецЕсли;
	ФормаСтруктурыПодчиненности.ДокументСсылка = ДокументСсылка;
	ФормаСтруктурыПодчиненности.Открыть();
	 
КонецПроцедуры

Функция ПолучитьДатуИзПредставленияПериода(ПредставлениеПериода) Экспорт

	Если ЗначениеНеЗаполнено(ПредставлениеПериода) Тогда
		Возврат '00010101';
	КонецЕсли; 
	
	СоответствиеИменМесяцев = Новый Соответствие;
	СоответствиеИменМесяцев.Вставить("Январь"  , "01");
	СоответствиеИменМесяцев.Вставить("Февраль" , "02");
	СоответствиеИменМесяцев.Вставить("Март"    , "03");
	СоответствиеИменМесяцев.Вставить("Апрель"  , "04");
	СоответствиеИменМесяцев.Вставить("Май"     , "05");
	СоответствиеИменМесяцев.Вставить("Июнь"    , "06");
	СоответствиеИменМесяцев.Вставить("Июль"    , "07");
	СоответствиеИменМесяцев.Вставить("Август"  , "08");
	СоответствиеИменМесяцев.Вставить("Сентябрь", "09");
	СоответствиеИменМесяцев.Вставить("Октябрь" , "10");
	СоответствиеИменМесяцев.Вставить("Ноябрь"  , "11");
	СоответствиеИменМесяцев.Вставить("Декабрь" , "12");

	ПозицияПробела = Найти(ПредставлениеПериода, " ");
	Если ПозицияПробела = 0 Тогда
		Возврат '00010101';
	КонецЕсли; 
	
	ИмяМесяца = Сред(ПредставлениеПериода, 1, (ПозицияПробела - 1));
	ЭлементСоответствия = СоответствиеИменМесяцев.Получить(ИмяМесяца);
	Если ЭлементСоответствия = Неопределено Тогда
		Возврат '00010101';
	КонецЕсли;
	
	СтрокаГода = Сред(ПредставлениеПериода, (ПозицияПробела + 1));
	
	Возврат Дата(СтрокаГода + ИмяМесяца + "01000000");

КонецФункции

// Функция преобразовывает дату в представление периода
//
// Параметры:
//   ПериодРегистрации - Дата периода
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации) Экспорт

	Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");

КонецФункции

// Процедура обрабатывает событие регулирования в поле периода регистрации
//
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если Направление = 1 Тогда
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1);
	КонецЕсли;

	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры

// Процедура обрабатывает событие начала выбора из списка в поле периода регистрации
//
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ПолучитьПредставлениеПериодаРегистрации(НачалоМесяцаЗаполнения));
		Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = ВыбранныйЭлемент.Значение;
	Элемент.Значение  = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	
КонецПроцедуры

Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
    Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
КонецФункции

//==================Задачи из УТ 10.3 ================================
// Процедура открывает форму списка задач текущего пользователя
//
Процедура ОткрытьЗадачиТекущегоПользователя(ОтборПоОбъекту = Неопределено) Экспорт
	
	ФормаСпискаЗадач = Задачи.ЗадачиПользователя.ПолучитьФорму("РабочаяФормаСпискаЗадачПользователя", , "СписокЗадачОригинал");
	
	Если ОтборПоОбъекту <> Неопределено Тогда
		
		ФормаСпискаЗадач.Отбор.Объект.ВидСравнения       = ВидСравнения.Равно;
		ФормаСпискаЗадач.Отбор.Объект.Использование      = Истина;
		ФормаСпискаЗадач.Отбор.Объект.Значение           = ОтборПоОбъекту;
		
	КонецЕсли;
	
	Если НЕ ФормаСпискаЗадач.Открыта() Тогда
		ФормаСпискаЗадач.Отбор.Исполнитель.ВидСравнения     = ВидСравнения.Равно;
		ФормаСпискаЗадач.Отбор.Исполнитель.Использование    = Истина;
		ФормаСпискаЗадач.Отбор.Исполнитель.Значение         = ПараметрыСеанса.ТекущийПользователь;
		ФормаСпискаЗадач.Открыть();
	Иначе
		ФормаСпискаЗадач.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает форму списка задач текущего пользователя
// используется для открытия из меню интерфейсов
//
Процедура ОткрытьСписокЗадач() Экспорт
	
	ОткрытьЗадачиТекущегоПользователя();
	
КонецПроцедуры

// Процедура проверяет задачи текущего пользователя связанные с заданным объектом
//
&НаКлиенте
Процедура ПроверитьЗадачиПоОбъекту(ОбъектЗадачи) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	Задача.ЗадачиПользователя.ЗадачиПоИсполнителю(
		|		&ТекПользователь,
		|		Выполнена = ЛОЖЬ И Объект = &ОбъектЗадачи)
		|";
		
	Запрос.УстановитьПараметр("ТекПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ОбъектЗадачи"   , ОбъектЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выполнение = Вопрос("Обнаружены незавершенные задачи по заданному объекту!" + Символы.ПС + " Желаете просмотреть список этих задач вместо создания новой?", РежимДиалогаВопрос.ДаНет, 0);
		Если Выполнение = КодВозвратаДиалога.Да Тогда
			
			ОткрытьЗадачиТекущегоПользователя(ОбъектЗадачи);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	НоваяЗадача.Объект       = ОбъектЗадачи;
	НоваяЗадача.Наименование = "Напоминание по объекту: " + ОбъектЗадачи.Метаданные().Синоним;
	НоваяЗадача.Оповещение   = Истина;
	ФормаНовой = НоваяЗадача.ПолучитьФорму();
	ФормаНовой.Открыть();
	
КонецПроцедуры

