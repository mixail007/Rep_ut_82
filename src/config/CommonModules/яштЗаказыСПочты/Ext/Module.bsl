
 //ОСНОВНАЯ функция для регл.задания
 //загрузки файлов с почты, создание заказов покупателей и создание событий для Менеджера----------
процедура ЗагрузитьЗаказыСПочты() ЭКСПОРТ
рез = "";
имяПочтЯщика="xls@yst.ru";
Путь="\\sigma\Общая папка\Файлы с почты\";	

ТаблНастроек = ПолучитьНастройкиЗагрузкиЗаказовИзExcel();

для каждого стр1 из ТаблНастроек цикл
	Если стр1.ОтправителиКлиента="" тогда 
		#Если Клиент тогда
			сообщить("Для настройки клиента "+строка(стр1.Контрагент)+" - нет Отправителей!", СтатусСообщения.Внимание);
		#КонецЕсли
		Продолжить;
	КонецЕсли;
путь1 = Путь;	

стр1.списокФайлов = ПолучитьФайлыСПочты(имяПочтЯщика, путь1, стр1.ОтправителиКлиента ); 
рез1 = СоздатьЗаказыИзФайловExcel(стр1, путь1, имяПочтЯщика);
рез = рез + рез1;
КонецЦикла;

#Если Клиент тогда
	сообщить(рез);
#КонецЕсли
//рез - в лог файл! 
КонецПроцедуры


//+ 26.04.2018
//ОБЩАЯ ФУНКЦИЯ загрузки файлов с почты
//- загружает письма с почты: имяПочтЯщика 
//	за период [МинДатаОтправления - МаксДатаОтправления]
//	все вложения (application) - пишет в папку:  Путь (если пустая, то КаталогВременныхФайлов )
//  фильтр по строке ОтправителиПисьма, если "" тогда ото всех!
// УдалятьСообщенияССервера  - удалять письма посде загрузки или нет...
//
//возвращает: списокФайлов
//
функция ПолучитьФайлыСПочты(имяПочтЯщика="", Путь="", ОтправителиПисьма="", УдалятьСообщенияССервера = ЛОЖЬ, МинДатаОтправления=неопределено, МаксДатаОтправления=неопределено)  Экспорт
	списокФайлов = Новый СписокЗначений;

	имяПочтЯщика = ?(имяПочтЯщика="", "1C@yst.ru", имяПочтЯщика);   // "no-reply@yst76.ru" / "1C@yst.ru";
	Путь=?(Путь="",  КаталогВременныхФайлов(), Путь);
	МинДатаОтправления = ?(МинДатаОтправления=неопределено, НачалоДня(ТекущаяДата()), МинДатаОтправления);
	МаксДатаОтправления =?(МаксДатаОтправления=неопределено, КонецДня(ТекущаяДата()), МаксДатаОтправления);
	
//путь =  Константы.ПутьКФайлам.получить()+"\НовЛайн\";
//текстФайлаСодержит = "Остатки на ";

//------- 1) подключаемся к учетной записи почты: НовЛайнЯщикДляПрайсов-------------
УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(имяПочтЯщика); 
	ИПП=Новый ИнтернетПочтовыйПрофиль;
	//----------для получения только POP3 ----------------
	ИПП.АдресСервераPOP3   = УЗ.POP3Сервер;
	ИПП.ПортPOP3           = УЗ.ПортPOP3;
	ИПП.Пользователь	   = УЗ.АдресЭлектроннойПочты;
	ИПП.Пароль			   = УЗ.Пароль;
	
	//+++ 22.09.2014 - так возможно...
	ИПП.АдресСервераIMAP = уз.POP3Сервер; 
	ИПП.ПортIMAP 		 = уз.ПортPOP3 ;
	ИПП.ПользовательIMAP = уз.Логин;
	ИПП.ПарольIMAP       = УЗ.Пароль;
	ИПП.ИспользоватьSSLIMAP = истина;
	
попытка
	Почта=Новый ИнтернетПочта;
	Почта.Подключиться(ИПП);
исключение
	#Если Клиент Тогда
		сообщить("Невозможно подключиться к почте: "+имяПочтЯщика+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	#КонецЕсли	
	Возврат списокФайлов;
КонецПопытки;

//---------- 2) перебираем все письма из папки Входящие и ищем только с вложениями-------------
	//для этой цели объект Почта имеет метод "Выбрать". 
	//У метода два параметра: 
	//1-ый отвечает за УдалятьСообщенияССервера
	//2-ой массив с заголовками писем... пустой
	//
// Почта.Выбрать(<УдалятьСообщения>, <МассивЗаголовковСообщенийИлиИдентификаторов>) 

попытка
	Сообщения = Почта.Выбрать(УдалятьСообщенияССервера); // тип: массив из типов: ИнтернетПочтовоеСообщение 
исключение
	Почта.Отключиться();
	#Если Клиент Тогда
		сообщить("Невозможно получить письма с почты: "+имяПочтЯщика+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	#КонецЕсли	
	Возврат списокФайлов;
КонецПопытки;

//----------------Главный Цикл-------------------------
//Далее после выборки сообщений необходимо перебрать их в Цикле и сохранить вложение, 
#Если Клиент Тогда
	сообщить(Строка(ТекущаяДата())+" Начало обработки "+строка(Сообщения.Количество())+" писем.", СтатусСообщения.Информация);
#КонецЕсли	

Для каждого Сообщение Из Сообщения Цикл
	
	//берем только сегодняшние письма!
	Если Сообщение.ДатаОтправления < МинДатаОтправления или Сообщение.ДатаОтправления>МаксДатаОтправления Тогда
	  Продолжить;
	КонецЕсли;	  

	Попытка
		ОтправительПисьма = Сообщение.Отправитель.Адрес;
	Исключение
		ОтправительПисьма = Сообщение.Отправитель;
	КонецПопытки;

	Если ОтправителиПисьма<>"" тогда
		Если Найти(ОтправителиПисьма, ОтправительПисьма)=0 тогда
			#Если Клиент Тогда
				Сообщить("Не найден отправитель: "+ ОтправительПисьма + " в списке:  "+ОтправителиПисьма, СтатусСообщения.Важное);
			#КонецЕсли	
		продолжить;
		КонецЕсли;
	КонецЕсли;	

//ИнтернетПочтовоеСообщение
темаПисьма = ОтправительПисьма+" Тема "+Сообщение.Тема +" (отправлено "+Сообщение.ДатаОтправления+") ";
темаПисьма = стрЗаменить(темаПисьма,":","-"); темаПисьма = стрЗаменить(темаПисьма,"/","_");темаПисьма = стрЗаменить(темаПисьма,"\","_");
// Перебираем вложения письма
	Влож = "";  i=0;
	Для каждого Вложение Из Сообщение.Вложения Цикл     // ИнтернетПочтовоеВложение
		Попытка //возможна ошибка при записи 
			Если Найти(Вложение.ТипСодержимого, "application/")>0 Тогда    
				//"application/vnd.ms-excel" (XLS)  или "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" (XLSX)
			имя1 = темаПисьма+Вложение.ИмяФайла;
			
				файл1 = новый Файл(путь+имя1);
				если файл1.Существует() тогда
					#Если Клиент Тогда
					Сообщить("УЖЕ существует файл: "+имя1, СтатусСообщения.Внимание);
					#КонецЕсли	
				Иначе
					Вложение.Данные.Записать(путь+имя1);
					списокФайлов.Добавить( имя1 );  
					Влож=Влож+Вложение.ИмяФайла+", "; //Запоминаем имя вложения прикрепленных к данному письму
				КонецЕсли;
			    файл1 = неопределено;
				
		    КонецЕсли;
		
		Исключение
		  Почта.Отключиться();
		  #Если Клиент Тогда
			  сообщить(темаПисьма+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			  сообщить("Невозможно сохранить файл вложения: "+путь+Вложение.ИмяФайла+"
			  		   |"+темаПисьма, СтатусСообщения.Внимание);
		  #КонецЕсли	
		  Возврат списокФайлов;
	    КонецПопытки;
	  
	 i=i+1;
	КонецЦикла;	
	
	#Если Клиент Тогда
    сообщить(темаПисьма+" : "+Влож, СтатусСообщения.Информация);
	#КонецЕсли

КонецЦикла;	//по письмам

возврат списокФайлов;
КонецФункции

//+ из рег.св. НастройкаЗагрузкиЗаказовИзExcel + адреса отправителей из КонтактнаяИнформация
функция ПолучитьНастройкиЗагрузкиЗаказовИзExcel() экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкаЗагрузкиЗаказовИзExcel.Контрагент.Код как КодКлиента,
				   |	НастройкаЗагрузкиЗаказовИзExcel.Контрагент,
	               |	НастройкаЗагрузкиЗаказовИзExcel.Артикул,
	               |	НастройкаЗагрузкиЗаказовИзExcel.Количество,
	               |	НастройкаЗагрузкиЗаказовИзExcel.Цена,
	               |	НастройкаЗагрузкиЗаказовИзExcel.ПерваяСтрока,
	                |	НастройкаЗагрузкиЗаказовИзExcel.Код,
	               |	НастройкаЗагрузкиЗаказовИзExcel.КоличествоОтказ,
	               |	НастройкаЗагрузкиЗаказовИзExcel.ПричинаОтказа,
	               |	КонтактнаяИнформация.Представление как ОтправителиКлиента
	               |ИЗ
	               |	РегистрСведений.НастройкаЗагрузкиЗаказовИзExcel КАК НастройкаЗагрузкиЗаказовИзExcel
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			КИ.Объект КАК Контрагент,
	               |			КИ.Представление КАК Представление,
	               |			КИ.Комментарий КАК Комментарий
	               |		ИЗ
	               |			РегистрСведений.КонтактнаяИнформация КАК КИ
	               |		ГДЕ
	               |			ВЫРАЗИТЬ(КИ.Объект КАК Справочник.Контрагенты).Ссылка В
	               |					(ВЫБРАТЬ нн.Контрагент ИЗ РегистрСведений.НастройкаЗагрузкиЗаказовИзExcel КАК нн)
	               |			И КИ.Тип = &Тип
	               |			И КИ.Вид = &Вид) КАК КонтактнаяИнформация
	               |		ПО НастройкаЗагрузкиЗаказовИзExcel.Контрагент = КонтактнаяИнформация.Контрагент";
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);				   
	Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.НайтиПоКоду("39245")  ); //E-mail отправителей для загрузки заказов через @				   
		Результат = Запрос.Выполнить();
		табл = результат.Выгрузить();
	для каждого стр1 из табл цикл
		стр1.КодКлиента = сокрЛП(стр1.КодКлиента);
		стр1.ОтправителиКлиента = СокрЛП(стр1.ОтправителиКлиента);
		стр1.ОтправителиКлиента = стрЗаменить(стр1.ОтправителиКлиента," ","");
		стр1.ОтправителиКлиента = стрЗаменить(стр1.ОтправителиКлиента,",",";");
	КонецЦикла;
    табл.Колонки.Добавить("списокФайлов");
	возврат табл;
КонецФункции	

//+ возвращает табл.знач
функция РазобратьExcelФайлВТабЗнач(ИмяФайлаПолное, стр1) экспорт
	
	//+++ 17.05.2018
	ВидТов1 = перечисления.ВидыТоваров.ПустаяСсылка();
	
	Если Найти(врег(ИмяФайлаПолное)," ШИНЫ ")>0 тогда
		ВидТов1 = перечисления.ВидыТоваров.Шины;
	ИначеЕсли Найти(врег(ИмяФайлаПолное)," ДИСКИ ")>0 тогда
		ВидТов1 = перечисления.ВидыТоваров.Диски;
	ИначеЕсли Найти(нрег(ИмяФайлаПолное)," аксессуары ")>0 тогда
		ВидТов1 = перечисления.ВидыТоваров.Аксессуары;
	КонецЕсли;
	
	НомерЛистаExcel = 1;
	xlLastCell = 11;
	
	табЗнач = новый ТаблицаЗначений;
	табЗнач.Колонки.Добавить("НомерСтроки");
	табЗнач.Колонки.Добавить("Артикул");
	табЗнач.Колонки.Добавить("Номенклатура"); //если найдём такую
	табЗнач.Колонки.Добавить("Количество");
	табЗнач.Колонки.Добавить("Цена");
	
	//разбор Excel-файла: ИмяФайла  по полям  стр1
	//НомерСтроки  = от стр1.ПерваяСтрока до конца...
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайлаПолное);
		#Если Клиент тогда
			Состояние("Обработка файла Microsoft Excel...");
		#КонецЕсли	
		ExcelЛист = Excel.Sheets(НомерЛистаExcel);
	Исключение
		#Если Клиент тогда
		Сообщить("Ошибка. Невозможно открыть файл Excel:  "+ИмяФайлаПолное);
		#КонецЕсли	
		Возврат табЗнач;
	КонецПопытки;
	
	ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);
	RowCount = ActiveCell.Row;
	//ColumnCount = ActiveCell.Column;
	ПустаяНом = справочники.Номенклатура.ПустаяСсылка();
	нн=1; 
	Для Row = стр1.ПерваяСтрока По RowCount Цикл
		
		СтрТЗ = табЗнач.Добавить(); //всегда!
		 СтрТЗ.НомерСтроки = нн;
		 СтрТЗ.Артикул     = "";
		 СтрТЗ.Количество  = 0;
		 СтрТЗ.Цена	       = 0;
		 СтрТЗ.Номенклатура = ПустаяНом;
		 
		Попытка
		 СтрТЗ.Артикул   =  СокрЛП(ExcelЛист.Cells(Row,стр1.Артикул).Text);
		 
		 кол1 =   СокрЛП(ExcelЛист.Cells(Row,стр1.Количество).Text);
		 	кол1 = стрЗаменить(кол1,",","."); кол1 = стрЗаменить(кол1," ",""); кол1 = стрЗаменить(кол1,символ(160) ,"");
		  	СтрТЗ.Количество = число(кол1);
		  
		 Цена1=   СокрЛП(ExcelЛист.Cells(Row,стр1.Цена).Text);
		 	Цена1= стрЗаменить(Цена1,",","."); Цена1= стрЗаменить(Цена1," ",""); Цена1= стрЗаменить(Цена1,символ(160) ,"");
		  	СтрТЗ.Цена = число(Цена1);
		  
		 Код1   =  ?(стр1.Код>0, СокрЛП(ExcelЛист.Cells(Row,стр1.Код).Text), "");
		 СтрТЗ.Номенклатура = НайтиТовар(СтрТЗ.Артикул, Код1, ВидТов1);
		 
	 	Исключение
			#Если Клиент тогда
				Сообщить(строка(нн)+") Артикул: "+СтрТЗ.Артикул+" Кол-во: "+кол1+" шт. Цена: "+Цена1+"р. Ошибка: "+ОписаниеОшибки(), СтатусСообщения.Внимание );
			#КонецЕсли	
		КонецПопытки; 
		
	нн=нн+1;	
	КонецЦикла;
	
	Excel.WorkBooks.Close();
	Excel = 0;
	
	возврат табЗнач;
КонецФункции	

// приоритет поиска:
// 1) по Коду, если он есть
// 2) по Артикулу 
//ограничение видов товаров - АКБ, АКС, Шины, Диски
Функция НайтиТовар(Артикул="", Код="", ВидТовара1=неопределено)	
	тов1 = справочники.Номенклатура.ПустаяСсылка();
	Если Артикул="" тогда
		возврат тов1;
	КонецЕсли;	
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	спрНоменклатура.Номенклатура КАК Ссылка
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		ост.Номенклатура КАК Номенклатура
	                |	ИЗ
	                |		РегистрНакопления.ТоварыНаСкладах.Остатки(
	                |				,
	                |				Склад.ЗапретитьИспользование = ЛОЖЬ
	                |					И Склад.Транзитный = ЛОЖЬ
	                |					И Номенклатура.ВидТовара В (&ВидыТоваров)
	                |					И Номенклатура.Артикул = &Артикул) КАК ост
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		отх.Номенклатура
	                |	ИЗ
	                |		РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
	                |				,
	                |				Склад.ЗапретитьИспользование = ЛОЖЬ
	                |					И Склад.Транзитный = ЛОЖЬ
	                |					И Контрагент В (&СписокКонтрагентовОТХ)
	                |					И Номенклатура.ВидТовара В (&ВидыТоваров)
	                |					И Номенклатура.Артикул = &Артикул) КАК отх) КАК спрНоменклатура
//+++( 17.05.2018-----------------------------------------------------------------------------------------------------		
	                |//ВидТовара ГДЕ спрНоменклатура.Номенклатура.ВидТовара = &ВидТовара1
					|";
	 Если Код="" и ЗначениеЗаполнено(ВидТовара1) тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст, "//ВидТовара","");
		Запрос.УстановитьПараметр("ВидТовара1", ВидТовара1);
	 КонецЕсли;
//+++)

    СписокКонтрагентовОТХ = Новый СписокЗначений;
	СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);
	Запрос.УстановитьПараметр("СписокКонтрагентовОТХ", СписокКонтрагентовОТХ);

	 ВидыТоваров = новый СписокЗначений;
	 ВидыТоваров.Добавить(перечисления.ВидыТоваров.АКБ);
	 ВидыТоваров.Добавить(перечисления.ВидыТоваров.Аксессуары);
	 ВидыТоваров.Добавить(перечисления.ВидыТоваров.Шины);
	 ВидыТоваров.Добавить(перечисления.ВидыТоваров.Диски);
	Запрос.УстановитьПараметр("ВидыТоваров", ВидыТоваров);
	 
	 Если Код<>"" тогда //по коду точнее
	 	Запрос.Текст = стрЗаменить(запрос.Текст,"Артикул = &Артикул","Код = &Код");
	 	Запрос.УстановитьПараметр("Код",Код);
	 иначе
	 	Запрос.УстановитьПараметр("Артикул",Артикул);
 	 КонецЕсли;
 	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 Если выборка.Следующий() тогда
		 
		Если Выборка.Количество()>1 тогда
			#Если Клиент тогда
			сообщить("Найдено "+строка(Выборка.Количество())+" товаров по артикулу: "+Артикул, СтатусСообщения.Внимание);
			#КонецЕсли	
		Иначе
		 	тов1 = выборка.Ссылка;
		КонецЕсли;
		
	Иначе
		
		//+++ 07.05.2018 поиск по части артикула!
		запрос.Текст = стрЗаменить(запрос.Текст, "Номенклатура.Артикул = &Артикул",
		"( Номенклатура.Артикул подобно (&Арт1) 
		|	или Номенклатура.Артикул подобно (&Арт2) 
		|	или Номенклатура.Артикул подобно (&Арт3) 
		|) ");
	 	Запрос.УстановитьПараметр("Арт1",Артикул+"=%"); // в начале
	 	Запрос.УстановитьПараметр("Арт2","%="+Артикул); //в конце
	 	Запрос.УстановитьПараметр("Арт3","%="+Артикул+"=%"); // в середине
		 Результат = Запрос.Выполнить();
		 Выборка = Результат.Выбрать();
		 
		 	Если Выборка.Количество()>1 тогда
		 		#Если Клиент тогда
				сообщить("Найдено "+строка(Выборка.Количество())+" товаров по Артикулу: "+Артикул+" через знак = ", СтатусСообщения.Внимание);
				#КонецЕсли	
            иначеЕсли Выборка.Количество()=1 тогда
		 		Выборка.Следующий();
	    	 	тов1 = выборка.Ссылка;
				
		 		#Если Клиент тогда
				сообщить("Найден Товар по Артикулу: "+Артикул+" через знак = ("+тов1.Артикул+") "+тов1.Наименование, СтатусСообщения.Информация);
				#КонецЕсли	

			иначе
			 	#Если Клиент тогда
				сообщить("НЕ Найден товар по Артикулу: "+Артикул, СтатусСообщения.Внимание);
				#КонецЕсли	
            КонецЕсли;

	 КонецЕсли;
	
 возврат тов1;
КонецФункции

//Функция разбора Excel файлов и создание заказа покупателя,
 //стр1 =  списокФайлов,
// для: КодКлиента, Контрагент,
 //из столбцов Excel: Артикул, Количество, Цена, ПерваяСтрока,
 //доп.поля: Код,
//--------------------
 //поля возврата при ошибке: КоличествоОтказ, ПричинаОтказа,
 //---------------------------------
 //связка:	ОтправителиКлиента
 //===============================================
//возвращает количество созданных Заказов
функция СоздатьЗаказыИзФайловExcel(стр1, Путь="", элПочтаОтКого="")
	рез = "";
	для i=0 по стр1.списокФайлов.Количество()-1 цикл
	  ИмяФайла = стр1.списокФайлов[i].Значение;
	  табЗнач = РазобратьExcelФайлВТабЗнач(Путь + ИмяФайла, стр1);
	  
	  ЗаказСсылка = документы.ЗаказПокупателя.ПустаяСсылка();
	  табЗначОтвет = СоздатьЗаказПоТабЗнач(табЗнач, стр1.Контрагент, ИмяФайла, ЗаказСсылка );
	  
	  СоздатьУведомлениеОбОшибке(Путь + ИмяФайла, стр1, табЗначОтвет, ЗаказСсылка);
	  
	  ОтправитьОтветОбратно(Путь, ИмяФайла, ЗаказСсылка, элПочтаОтКого); 
	КонецЦикла;
	возврат рез;
КонецФункции

//возвращает: табЗначОтвет с полями:
//НомерСтроки - число
//("Артикул");
//("Номенклатура"); //если найдём такую
//("Количество"); - число
//("Цена");        - число
//
//дополнительные поля:
//КоличествоОтказ, ПричинаОтказа 
//
функция СоздатьЗаказПоТабЗнач(табЗнач, Контр, ИмяФайла = "", ЗаказСсылка) экспорт
	
	табЗначОтвет = новый ТаблицаЗначений;
	табЗначОтвет = табЗнач.Скопировать(); //все колонки как есть...
	
	табЗначОтвет.Колонки.Добавить("КоличествоОтказ");
	табЗначОтвет.Колонки.Добавить("ПричинаОтказа");
	
	Для каждого стр1 из табЗначОтвет цикл
		стр1.КоличествоОтказ = 0;
		стр1.ПричинаОтказа = "";
	КонецЦикла;
	
	//+++( 17.05.2018 проверка на дубли и "Перенос количества ++++
		ТабБезДублей =  табЗнач.Скопировать();
		ТабБезДублей.Свернуть("Артикул, Номенклатура", "Количество");
		Если ТабБезДублей.Количество()<табЗначОтвет.Количество() Тогда // Есть дубли! 
			Для каждого стр1 из ТабБезДублей Цикл
				стр2 = табЗначОтвет.НайтиСтроки( новый Структура("Артикул", стр1.Артикул) );
				Если стр2.Количество()>1 Тогда
					
					стр2[0].ПричинаОтказа = "ДУБЛЬ по Артикулу: "+стр1.Артикул+" Общ.Кол-во: "+строка(стр1.Количество);	
				    стр2[0].Количество = стр1.Количество; //ОБЩЕЕ!
						
					для ii=1 по стр2.Количество()-1 цикл
					    стр2[ii].КоличествоОтказ = стр2[ii].Количество;							
						стр2[ii].ПричинаОтказа = "ДУБЛЬ по Артикулу: "+стр1.Артикул;	
					    стр2[ii].Количество = 0;							
					КонецЦикла;	
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	//+++)
	
    таблСоглЦен = новый ТаблицаЗначений;
	таблСоглЦен.Колонки.Добавить("НомерСтрокиОснования");
	таблСоглЦен.Колонки.Добавить("Номенклатура");
	таблСоглЦен.Колонки.Добавить("Количество");
	таблСоглЦен.Колонки.Добавить("Цена");
	таблСоглЦен.Колонки.Добавить("ЦенаМин");
	таблСоглЦен.Колонки.Добавить("ЦенаПоТипуЦен");
	
	//предварительный анализ ТЗ
	СписокНом   = новый СписокЗначений;
	
	для каждого стрТЗ из табЗначОтвет цикл
		Если стрТЗ.Номенклатура.Пустая() тогда
			стрТЗ.КоличествоОтказ = стрТЗ.Количество;
			стрТЗ.ПричинаОтказа   = "Не найден Товар по Артикулу!";
		ИначеЕсли стрТЗ.Количество=0 и стрТЗ.ПричинаОтказа<>"" тогда 
			 продолжить;			//+++ 17.05.2018 - проверка дублей
		ИначеЕсли стрТЗ.Количество=0 и стрТЗ.ПричинаОтказа="" тогда   
			стрТЗ.КоличествоОтказ = 99;
			стрТЗ.ПричинаОтказа   = "Неверный формат поля Количество или Количество=0!";
		ИначеЕсли стрТЗ.Цена=0 тогда
			стрТЗ.КоличествоОтказ = стрТЗ.Количество;
			стрТЗ.ПричинаОтказа   = "Неверный формат поля Цена или Цена=0!";
		иначе
			стрТЗ.КоличествоОтказ = 0;
			стрТЗ.ПричинаОтказа   = "";
			СписокНом.Добавить( стрТЗ.Номенклатура );
		КонецЕсли;	
	КонецЦикла;	
	
	//условие, что не надо делать заказ
	Если табЗначОтвет.Количество()=0 
		или  табЗначОтвет.Итог("Количество")=0
		или  табЗначОтвет.Итог("КоличествоОтказ")>=табЗначОтвет.Итог("Количество") тогда
		#Если Клиент тогда
			Сообщить("Все товары из Excel-файла отказаны! Создавать заказ НЕ нужно!",СтатусСообщения.Внимание);
		#КонецЕсли	
    возврат табЗначОтвет;
	КонецЕсли;

	//создаём заказ на Ярославль, на Контр по осн.договору (с учётом вида товаров!)
	закОб = документы.ЗаказПокупателя.СоздатьДокумент();
	ЗаполнитьШапкуЗаказаПокупателя( закОб, Контр );
	
	закОб.Комментарий = "E-mail: "+ИмяФайла;
	
	//табЗначОтвет - чего нет, что не нашли... и т.д.
	табЗначЦен    = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контр, СписокНом); //из регистра сведений
	клиентРезерва = закОб.ДоговорКонтрагента.КонтрагентДляРезерваИМ; //доп.остаток!
	таблСвОстаток = получитьСвободныеОстаткиТоваров(СписокНом, клиентРезерва);
	
	флПредоплата = 	закОб.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001") 
				или закОб.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ПредоплатаПоСчетам 
				или закОб.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФакторингПредоплата; 
				
	Для каждого стрТЗ из табЗначОтвет цикл
					
		Если стрТЗ.КоличествоОтказ>0 тогда
			продолжить;
		КонецЕсли;	
		
//----------------------------проверка св.остатка-------------------------------------------		
		стр2 = таблСвОстаток.найти(стрТЗ.Номенклатура,"Номенклатура");
		Если стр2=неопределено тогда 
			стрТЗ.КоличествоОтказ = стрТЗ.Количество;
			стрТЗ.ПричинаОтказа = "Свободного остатка товара - не достаточно!"; 
		Иначе	 //--------------------------------------------------------
			если стрТЗ.Количество > стр2.СвободныйОстаток тогда
				если стрТЗ.Количество<4 тогда
					стрТЗ.КоличествоОтказ = стрТЗ.Количество - стр2.СвободныйОстаток;
				иначе //кратно 4
					стр2СвободныйОстаток4 = цел(стр2.СвободныйОстаток/4)*4;
					стрТЗ.КоличествоОтказ = стрТЗ.Количество - стр2СвободныйОстаток4;
				КонецЕсли;	
				стрТЗ.ПричинаОтказа = "Свободного остатка товара - не достаточно!"; 
			конецЕсли;	
		КонецЕсли;
		
		Если стрТЗ.Количество - стрТЗ.КоличествоОтказ = 0 тогда
			продолжить;
		КонецЕсли;
		
		стр1 = закОб.Товары.Добавить();
		стр1.Номенклатура = стрТЗ.Номенклатура; 
		стр1.Количество   = стрТЗ.Количество - стрТЗ.КоличествоОтказ;
		стр1.Цена  		  = стрТЗ.Цена;
		
//--------------------проверка цен клиента-----------------------------------------------------
		стр2 = табЗначЦен.найти(стрТЗ.Номенклатура,"Номенклатура");
		Если стр2=неопределено тогда //НЕТ цены!
			стрТЗ.ПричинаОтказа = "Цена: "+строка(стр1.Цена)+", а текущая цены Клиента - не определена!";
		иначе	
			ценаКлиента = ?(флПредоплата, стр2.ЦенаСоСкидкойПредоплаты, стр2.МинимальнаяЦена);
			если стр1.Цена < ценаКлиента тогда
				
				стрСогл = таблСоглЦен.Добавить(); //-----------------------таблица согласования!
				стрСогл.НомерСтрокиОснования = стр1.НомерСтроки;
				стрСогл.Номенклатура = стрТЗ.Номенклатура;
				стрСогл.Цена 		 = стрТЗ.Цена;
				стрСогл.Количество   = стр1.Количество; //кол - колОтказ
				стрСогл.ЦенаМин	     = ЦенаКлиента;
				стрСогл.ЦенаПоТипуЦен= стр2.ЦенаПоТипуЦен;
				
				ЗакОб.ПоставитьНаОтгрузку = ЛОЖЬ; // пока не согласуют - в отгрузку на автомате
                ЗакОб.ИсключитьИзАвтоОбъединения = Истина; // объединять с другими заказами ТОЖЕ нельзя!
				
				стрТЗ.ПричинаОтказа = "Цена: "+строка(стр1.Цена)+" меньше текущей цены Клиента: "+строка(ценаКлиента)+"р. - Цена отправлена на Согласовании!";
				
				стр1.Статус = перечисления.СтатусыСтрокЗаказа.НаСогласовании;
				стр1.Цена   = ценаКлиента;
				
			КонецЕсли;	
		КонецЕсли;	
		
		ЗаполнитьДопПоляСтрокиТоваров(стр1);

    КонецЦикла; 
	
	//=============Запись заказа====================
	попытка
		Если таблСоглЦен.Количество()=0 тогда
			закОб.ПоставитьНаОтгрузку = Истина; // [v] На отгрузку (для автоВМаршрут!)
		иначе
			закОб.ИсключитьИзАвтоОбъединения = Истина; // НЕЛЬЗЯ объединять, пока цены не согласуют!
		КонецЕсли;
				
		закОб.Записать( РежимЗаписиДокумента.Проведение );
		
		СоздатьЗадачуНаСогласованиеЦенДляОтгрузки(таблСоглЦен, закОб, флПредоплата);
		
		ЗаказСсылка = закОб.Ссылка; //возвращаем назад!

	исключение
		#Если Клиент тогда
			сообщить("Заказ не может быть проведен! "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли	
		
		для каждого стрТЗ из табЗначОтвет цикл
			Если стрТЗ.КоличествоОтказ<стрТЗ.Количество тогда	
			стрТЗ.КоличествоОтказ=стрТЗ.Количество;
			КонецЕсли;
		    стрТЗ.ПричинаОтказа = стрТЗ.ПричинаОтказа+" Ошибка: "+ОписаниеОшибки();
		КонецЦикла;		
	КонецПопытки;
	
	возврат табЗначОтвет;
	
КонецФункции

//ост на не запрещенных складах + ОТХ по клиентамОТХ  + резерв (по КлиентРезерв)
функция получитьСвободныеОстаткиТоваров(СписокНом, КлиентРезерва=неопределено, Storage = "00005")
	табл = новый ТаблицаЗначений;
	
	Если СписокНом.Количество()=0 Тогда
		возврат табл;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНом", СписокНом);
	СписокКонтрагентовОТХ = Новый СписокЗначений;
	СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);
	Запрос.УстановитьПараметр("СписокКонтрагентовОТХ", СписокКонтрагентовОТХ);
	
	Подразделение = справочники.Подразделения.НайтиПоКоду(Storage);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//++++++++++ ПРИ ИЗМЕНЕНИИ ЗАПРОСА - НУЖНО ДОБАВИТЬ  //ДопОстаткиРезера  +++++++++++++++++++++
		
	Если Storage = "00005" Тогда  //Головное
		Запрос.Текст = "ВЫБРАТЬ
       |	А.Номенклатура,
       |	А.КоличествоОстаток - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК СвободныйОстаток
       |ИЗ
       |	(ВЫБРАТЬ
       |		ВсеОстатки.Номенклатура КАК Номенклатура,
       |		СУММА(ВсеОстатки.КоличествоОстаток) КАК КоличествоОстаток
       |	ИЗ
       |		(ВЫБРАТЬ
       |			ост.Номенклатура КАК Номенклатура,
       |			ост.КоличествоОстаток КАК КоличествоОстаток
       |		ИЗ
       |			РегистрНакопления.ТоварыНаСкладах.Остатки(,
       |					Склад.ЗапретитьИспользование = ЛОЖЬ
       |						И Склад.Транзитный = ЛОЖЬ
       |						И Номенклатура В (&СписокНом)) КАК ост
       |		ГДЕ ост.КоличествоОстаток > 0
       |		
       |		ОБЪЕДИНИТЬ ВСЕ
       |		
       |		ВЫБРАТЬ
       |			отх.Номенклатура,
       |			отх.КоличествоОстаток
       |		ИЗ
       |			РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(,
       |					Склад.ЗапретитьИспользование = ЛОЖЬ
       |						И Склад.Транзитный = ЛОЖЬ
       |						И Номенклатура В (&СписокНом)
       |						И Контрагент В (&СписокКонтрагентовОТХ)) КАК отх
       |		ГДЕ отх.КоличествоОстаток > 0
       |		
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
       |//ДопОстаткиРезера
	   |
	   | ) КАК ВсеОстатки
       |	
       |	СГРУППИРОВАТЬ ПО
       |		ВсеОстатки.Номенклатура) КАК А
	   
       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(,
       |				ЗаказПокупателя.Проверен
       |					И ЗаказПокупателя.Транзит = ЛОЖЬ
       |					И Номенклатура В (&СписокНом)) КАК ЗаказыПокупателейОстатки
       |		ПО А.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура";
	   Если КлиентРезерва<>неопределено тогда
	     Запрос.УстановитьПараметр("КлиентРезерва", КлиентРезерва);
		запрос.Текст = СтрЗаменить(запрос.Текст, "//ДопОстаткиРезера","		ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |		ВЫБРАТЬ
		               |			резерв.Номенклатура,
		               |			резерв.КоличествоОстаток
		               |		ИЗ
		               |			РегистрНакопления.РезервДляИМ.Остатки( ,
		               |					КонтрагентДляРезерваИМ = &КлиентРезерва
		               |						И Номенклатура В (&СписокНом)
		               |						И Подразделение = &Подразделение) КАК резерв
		               |		ГДЕ резерв.КоличествоОстаток > 0");
	   КонецЕсли;					   
					   
	Иначе //Обособленное --------------Транзит!--------------------------------------
		Запрос.Текст = "ВЫБРАТЬ
		|	А.Номенклатура,
		|	А.КоличествоОстаток - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК СвободныйОстаток
		|ИЗ
		|	(ВЫБРАТЬ
       |		ВсеОстатки.Номенклатура КАК Номенклатура,
       |		СУММА(ВсеОстатки.КоличествоОстаток) КАК КоличествоОстаток
       |	ИЗ
       |		(ВЫБРАТЬ
       |			ост.Номенклатура КАК Номенклатура,
       |			ост.КоличествоОстаток КАК КоличествоОстаток
       |		ИЗ
       |			РегистрНакопления.ТоварыНаСкладах.Остатки(,
       |					Склад.ЗапретитьИспользование = ЛОЖЬ
       |						И Склад.Транзитный = Истина
       |						И Склад.Подразделение = &Подразделение
       |						И Номенклатура В (&СписокНом)) КАК ост
       |		ГДЕ ост.КоличествоОстаток > 0
       |		
       |		ОБЪЕДИНИТЬ ВСЕ
       |		
       |		ВЫБРАТЬ
       |			отх.Номенклатура,
       |			отх.КоличествоОстаток
       |		ИЗ
       |			РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(,
       |					Склад.ЗапретитьИспользование = ЛОЖЬ
       |						И Склад.Транзитный = Истина
       |						И Склад.Подразделение = &Подразделение
       |						И Номенклатура В (&СписокНом)
       |						И Контрагент В (&СписокКонтрагентовОТХ)) КАК отх
       |		ГДЕ отх.КоличествоОстаток > 0
       |
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
       |//ДопОстаткиРезера
	   |
	   | ) КАК ВсеОстатки
       |	
       |	СГРУППИРОВАТЬ ПО
       |		ВсеОстатки.Номенклатура) КАК А
	   
	    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(,
		|				ЗаказПокупателя.Проверен
		|					И ЗаказПокупателя.Транзит
		|					И Номенклатура В (&СписокНом)
		|					И ЗаказПокупателя.Подразделение = &Подразделение) КАК ЗаказыПокупателейОстатки
		|		ПО А.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура";
		
   		Если КлиентРезерва<>неопределено тогда
	   Запрос.УстановитьПараметр("КлиентРезерва", КлиентРезерва);
		запрос.Текст = СтрЗаменить(запрос.Текст, "//ДопОстаткиРезера","		ОБЪЕДИНИТЬ ВСЕ
       |		
       |		ВЫБРАТЬ
       |			резерв.Номенклатура,
       |			резерв.КоличествоОстаток
       |		ИЗ
       |			РегистрНакопления.РезервДляИМ.Остатки( ,
       |					КонтрагентДляРезерваИМ = &КлиентРезерва
       |						И Номенклатура В (&СписокНом)
       |						И Подразделение = &Подразделение) КАК резерв
       |		ГДЕ резерв.КоличествоОстаток > 0");
   		КонецЕсли;
   
	КонецЕсли;
	
	таблСвОст = Запрос.Выполнить().Выгрузить();
	возврат таблСвОст;
	
КонецФункции

процедура ЗаполнитьШапкуЗаказаПокупателя( Заказ, Контрагент )
	
	Заказ.Дата = ТекущаяДата();
	Заказ.Организация   = Справочники.Организации.НайтиПоКоду("00001");
	Заказ.Подразделение = справочники.Подразделения.НайтиПоКоду("00005");  //всегда Ярославль!

	Заказ.Резерв = ЛОЖЬ;
	Заказ.Проверен = Истина;//сразу резервируем!
	Заказ.ДатаОтгрузки = Заказ.Дата ; // в тот же день!
	Заказ.ПоставитьНаОтгрузку = Контрагент.АвтоматическиСтавитьВМаршрут; //если [v] в карточке - надо и в заказе [v] На отгрузку!
	
	//Если Контрагент.АвтоматическиОбъединятьЗаказы тогда
	Заказ.ИсключитьИзАвтоОбъединения = Истина;  // НЕ объединять с другими заказами Автоматически - никогда!
	//КонецЕсли;
	
	Заказ.ВыписатьСпецификацию = Контрагент.ПечататьСпецификацию;
	Заказ.ПечататьСчетИзРеализации    = Контрагент.ПечатьСчетаИзРеализации; //+++ 07.05.2018 исправлено
	Заказ.СпособОтгрузки       		  = Контрагент.способОтгрузки;
	
	Заказ.Контрагент = Контрагент;
    Если ЗначениеЗаполнено(Контрагент.Грузополучатель) Тогда
		Заказ.Грузополучатель = Контрагент.Грузополучатель;
	КонецЕсли;
	Заказ.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента; //ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(Заказ);
	Заказ.ЧислоДнейСМоментаОтгрузки = Заказ.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности; 
	Заказ.ДатаОплаты = Заказ.ДатаОтгрузки + Заказ.ЧислоДнейСМоментаОтгрузки*86400;
	
	Заказ.Ответственный  = Заказ.ДоговорКонтрагента.ОтветственноеЛицо;
	
	Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00006"); //Ручная
	Заказ.ВалютаДокумента = константы.ВалютаРегламентированногоУчета.Получить(); // Заказ.ДоговорКонтрагента.ВалютаВзаиморасчетов);  //РУБ.
	Заказ.КурсВзаиморасчетов = 1;
	Заказ.КратностьВзаиморасчетов = 1;
	
   //29.11.2016 - Экспортные рублевые Клиенты  - БЕЗ НДС
	Если  заказ.Контрагент.Экспорт
		и заказ.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код="643"
		и Найти( нрег(заказ.ДоговорКонтрагента.Наименование) ,"экспорт")>0 
		и Найти( заказ.ДоговорКонтрагента.Наименование,"*" )=0 Тогда
		Заказ.СуммаВключаетНДС = ЛОЖЬ;
		Заказ.УчитыватьНДС 	   = ЛОЖЬ;
	Иначе	
		Заказ.СуммаВключаетНДС = Истина;
		Заказ.УчитыватьНДС 	   = Истина;
	КонецЕсли;
				
	Заказ.АвтоРезервирование = Истина;
	Заказ.ССайта = ложь;
	
	Заказ.НапомнитьОСобытии = Истина;
	Заказ.ВремяНапоминания  = ТекущаяДата();
	Заказ.ТипЗаказа = 16;
								
КонецПроцедуры

процедура ЗаполнитьДопПоляСтрокиТоваров(стр1)
	
	стр1.Коэффициент = 1;
	стр1.ЕдиницаИзмерения = стр1.Номенклатура.ЕдиницаХраненияОстатков;
	стр1.Вес = стр1.ЕдиницаИзмерения.Вес * стр1.Количество;
	
	стр1.Сумма = стр1.Цена * стр1.Количество;
	стр1.СтавкаНДС = перечисления.СтавкиНДС.НДС18;
	стр1.СуммаНДС = Окр(стр1.Сумма *18/118);
	
	стр1.КодТНВЭД = стр1.Номенклатура.КодТНВЭД;
	
КонецПроцедуры

процедура СоздатьЗадачуНаСогласованиеЦенДляОтгрузки(таблСогл, ЗаказОб, флПредоплата=ЛОЖЬ)
	
	Если таблСогл.Количество()=0 тогда
		Возврат;
	КонецЕсли;	
	
	Задача1 = задачи.ЗадачиПользователя.СоздатьЗадачу();
	Задача1.Инициатор   = ЗаказОб.Ответственный; //ответ после согласования...
	Задача1.Постановщик = ЗаказОб.Ответственный; // = Менеджеру по договору ВСЕГДА!
	
	 //+++ 04.05.2018 - меняется! 
	//Задача1.Исполнитель = справочники.Пользователи.НайтиПоКоду("Бондаренко Е.Д. (снабжение)");
	  Задача1.Исполнитель = ЗаказОб.Ответственный.НаправлениеПродаж.Руководитель;	
	
	Задача1.Наименование =  "Согласуйте Цены по @ Заказу покупателя: "+строка(ЗаказОб.Контрагент)
			+" по договору "+?(флПредоплата,"ПРЕДОПЛАТЫ","Отсрочки") +?(Найти(ЗаказОб.ДоговорКонтрагента.Наименование,"*")>0,"( со * )","");
	Задача1.Дата = ТекущаяДата();
	Задача1.СрокИсполнения = ЗаказОб.ДатаОтгрузки + 16*3600; // до 16-00
	Задача1.СрокОповещения = Задача1.Дата;
	Задача1.Оповещение = Истина;
	
	Задача1.НаСогласование = Истина;
	Задача1.Объект = ЗаказОб.ссылка;
	нн=1;
	Задача1.Описание = "
	|"+Задача1.Наименование+",
	|созданному на основании Excel-файла, полученному через эл.почту
	|от "+ЗаказОб.Комментарий+"
	|
	|";
	//---------------Результат согласования цен-------------------------
	//Задача1.РеквизитДляСогласования = "ПоставитьНаОтгрузку";
	//задача1.ЗначениеРеквизитаДляСогласования = Истина;
	
	для каждого стр1 из таблСогл цикл
		
		стр2 = Задача1.Товары.Добавить();
		ЗаполнитьЗначенияСвойств( стр2, стр1 );
		
		стр2.Сумма  = стр2.Количество * стр2.Цена;
		стр2.Статус = перечисления.СтатусыСтрокЗаказа.НаСогласовании;
		стр2.Скидка = ?(стр2.ЦенаПоТипуЦен>0, (стр2.Цена / стр2.ЦенаПоТипуЦен-1)*100, 0);
		стр2.СкидкаМин = ?(стр2.ЦенаПоТипуЦен>0, (стр2.ЦенаМин / стр2.ЦенаПоТипуЦен-1)*100, 0);
		
		строка1 = строка(стр1.НомерСтрокиОснования)+") "+стр1.Номенклатура.Код+" - "+строка(стр1.Номенклатура)
		+"  Цена: "+строка(стр2.Цена)+" меньше цены Клиента: "+строка(стр2.ЦенаМин)+"р. на "+строка(стр2.ЦенаМин - стр2.Цена)+" р.";
		
		Задача1.Описание = Задача1.Описание +строка1+символы.ПС;
		
	нн=нн+1;
	КонецЦикла;	
	
	попытка
		Задача1.Записать();
		#Если Клиент тогда
			Сообщить("Cоздана Задача на согласование "+строка(таблСогл.Количество())+" цен для на сотрудника: "+строка(Задача1.Исполнитель)+"!",СтатусСообщения.Информация); 
		#КонецЕсли	
	исключение
		#Если Клиент тогда
			Сообщить("Ошибка при создании задачи на согласование "+строка(таблСогл.Количество())+" цен!",СтатусСообщения.Внимание);
		#КонецЕсли	
	КонецПопытки;	
	
КонецПроцедуры

//сразу несколько действий по флагам: 
//1) создавать задачу менеджеру об ошибках
//2) писать в текст.лог на диск С:
//3) менять Excel-файлы
//
процедура СоздатьУведомлениеОбОшибке(ИмяФайлаПолное, стр1, табЗначОтвет, ЗаказСсылка) экспорт
	
	ЕстьОтказы = (табЗначОтвет.Итог("КоличествоОтказ")<>0); 
	флСоздаватьЗадачуМенеджеру = ЕстьОтказы; //только если ЕстьОшибки !
	
	флПисатьВлог = Истина;   //всегда
	ИмяЛОГ = "C:\лог_загрузкаФайловСПочты.txt";
	
	флПисатьВExcel    = Истина; //всегда
	ФлМенятьКоличество= Истина; // кол = кол0 - колОтказа
	ТекстОк = "Ok.";
	
//1) --------------создаём задачу для Менеджера по Заказу ----------------------
Если флСоздаватьЗадачуМенеджеру тогда
	Задача1 = задачи.ЗадачиПользователя.СоздатьЗадачу();
	Задача1.Инициатор   = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
	мен = ?(ЗаказСсылка.Пустая(), стр1.Контрагент.ОсновнойМенеджерКонтрагента, ЗаказСсылка.ДоговорКонтрагента.ОтветственноеЛицо);
	Задача1.Постановщик = мен;
	Задача1.Исполнитель = мен;
	    
	Задача1.Наименование =  ?(ЕстьОтказы,"НЕ ПОЛНОСТЬЮ", "УСПЕШНО")+" Загружен с эл.почты @ файла Excel в Заказ для покупателя "+строка(стр1.Контрагент);
	Задача1.Дата = ТекущаяДата();
	Задача1.СрокИсполнения = НачалоДня(ТекущаяДата())+ 16*3600; // до 16-00
	Задача1.СрокОповещения = ТекущаяДата();
	Задача1.Оповещение = Истина;
	
	Задача1.НаСогласование = ЛОЖЬ;
	Задача1.Объект = ЗаказСсылка;
	нн=1;
	Задача1.Описание = "
	|"+Задача1.Наименование+",
	|созданному на основании Excel-файла, полученному через эл.почту.
	|
	|";
	нн=1;
	для каждого стр2 из табЗначОтвет цикл
		Если стр2.КоличествоОтказ=0 и стр2.ПричинаОтказа="" тогда
	//// НЕ НАДО ничего писать в задачу!
		//Задача1.Описание = Задача1.Описание + " + "+строка(нн)+") арт.: "+стр2.Артикул+" ("+строка(стр2.Номенклатура)+") "
		//+строка(стр2.Количество)+"шт. х "+строка(стр2.Цена)+"р. = "+строка(стр2.Количество*стр2.Цена)+"р.
		//|";
		Иначе
		Задача1.Описание = Задача1.Описание + "---"+строка(нн)+") арт.: "+стр2.Артикул+" ("+строка(стр2.Номенклатура)+") "+строка(стр2.Количество)+"шт. х "+строка(стр2.Цена)+"р."
		+" -> " + ?(стр2.КоличествоОтказ>0,"Отказано: "+строка(стр2.КоличествоОтказ)+" шт. ","")
			    + стр2.ПричинаОтказа+"
		|";
		КонецЕсли;
	нн=нн+1;
	КонецЦикла;
	
	попытка
		Задача1.Записать();
		#Если Клиент тогда
			сообщить(" Создана задача для "+строка(Задача1.Исполнитель), СтатусСообщения.Информация);
		#КонецЕсли	
	исключение
		#Если Клиент тогда
			сообщить(" Ошибка при записи задачи для "+строка(Задача1.Исполнитель)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли	
	КонецПопытки;	
	
КонецЕсли;

//2)--------------- пишем ВСЁ в лог-файл ---------------------------------------
Если флПисатьВлог тогда
	попытка
		текстФайл = новый ТекстовыйДокумент;
		текстФайл.Прочитать(ИмяЛОГ,  КодировкаТекста.UTF8);
		
		текстФайл.ДобавитьСтроку("----- Загрузка: "+строка(ТекущаяДата())+" -----" );
		текстФайл.ДобавитьСтроку(ИмяФайлаПолное);
		текстФайл.ДобавитьСтроку(сокрЛП(ЗаказСсылка.Комментарий));
		Если флСоздаватьЗадачуМенеджеру тогда
			текстФайл.ДобавитьСтроку("+ Создана задача для менеджера: "+строка(мен)+" по Клиенту: "+строка(ЗаказСсылка.Контрагент) );
		иначе
			текстФайл.ДобавитьСтроку("- НЕ Создана задача для менеджера: "+строка(мен)+" по Клиенту: "+строка(ЗаказСсылка.Контрагент) );
		КонецЕсли;	
		текстФайл.ДобавитьСтроку(">>> Создан заказ: "+строка(ЗаказСсылка));
		нн=1;
		для каждого стр2 из табЗначОтвет цикл
		текстФайл.ДобавитьСтроку( ?(стр2.КоличествоОтказ=0 и стр2.ПричинаОтказа="", " + ", "---")
		+строка(нн)+") арт.: "+стр2.Артикул+" ("+строка(стр2.Номенклатура)+") "+строка(стр2.Количество)+"шт. х "+строка(стр2.Цена)+"р. "
		+?(стр2.КоличествоОтказ<>0 или стр2.ПричинаОтказа<>"", "-> "
					+?(стр2.КоличествоОтказ<>0,"Отказано: "+строка(стр2.КоличествоОтказ)+" шт. ","")
						+стр2.ПричинаОтказа, "") 
							     );
		нн=нн+1;
		КонецЦикла;

		текстФайл.Записать(ИмяЛОГ,  КодировкаТекста.UTF8);
	исключение
		#Если Клиент тогда
			сообщить(" Ошибка при записи файла "+ИмяЛОГ+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли	
	КонецПопытки;	
КонецЕсли;	

//3)------------- пишем обратно в тот же файл Excel:----------------------------
Если флПисатьВExcel	тогда
	//- КоличествоОтказ и ПричинаОтказа в соответствующие столбцы стр1.КоличествоОтказ и стр1.ПричинаОтказа
НомерЛистаExcel = 1;	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайлаПолное);
		#Если Клиент тогда
			Состояние("Запись результата в файл Microsoft Excel...");
		#КонецЕсли	
		ExcelЛист = Excel.Sheets(НомерЛистаExcel);
	Исключение
		#Если Клиент тогда
		Сообщить("Ошибка. Невозможно открыть файл Excel:  "+ИмяФайлаПолное);
		#КонецЕсли	
		Возврат;
	КонецПопытки;
	
	i=0;
	для каждого стр2 из табЗначОтвет цикл
		Row = стр1.ПерваяСтрока + i;
		если ФлМенятьКоличество тогда
		ExcelЛист.Cells(Row,стр1.Количество).Value = строка( стр2.Количество - стр2.КоличествоОтказ ); //04.05.2018 сразу в количество!
		КонецЕсли;
		ExcelЛист.Cells(Row,стр1.КоличествоОтказ).Value = строка( стр2.КоличествоОтказ);
		ExcelЛист.Cells(Row,стр1.ПричинаОтказа).Value   = ?(стр2.ПричинаОтказа="", ТекстОк , стр2.ПричинаОтказа);
	i=i+1;	
	КонецЦикла;
	
	Попытка
		Excel.ActiveWorkbook.Save();
		#Если Клиент тогда
			Сообщить("Записаны причины отказа в файл: "+ИмяФайлаПолное, СтатусСообщения.Информация);
		#КонецЕсли
	исключение
		#Если Клиент тогда
			Сообщить("Ошибка записи файла: "+ИмяФайлаПолное+"
			|"+ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли
	КонецПопытки;
	
	Excel.WorkBooks.Close();
	Excel = 0;
КонецЕсли;

//4)----------- отправлять письмо-отчет Клиенту (обратно)-----------------------
//из ЗаказСсылка.Комментарий = "E-mail: invoice@autodoc.ru Тема..." -> адрес
//сообщить о создании заказа: ЗаказСсылка.Номер
//прикрепить файл: ИмяФайлаПолное
//отправлять с xls@yst.ru ?

КонецПроцедуры

//отправить Excel-файл назад
процедура ОтправитьОтветОбратно( Путь="", ИмяФайлаОтвета="", ЗаказПокупателя=неопределено, имяПочтЯщика="xls@yst.ru" ) 
	
	УЗ = справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду(имяПочтЯщика);
	
	i= найти(ИмяФайлаОтвета,"Тема");  //  invoice@autodoc.ru Тема Заказ № 685 от АВТОДОК аксессуары (отправлено 11.05.2018 15-35-41) sklad685.xls
	j= найти(ИмяФайлаОтвета,"(");
	
	АдресПочтыКлиента = лев(ИмяФайлаОтвета, i-2);  		//"invoice@autodoc.ru"
	   
	Тема0 = сред(ИмяФайлаОтвета, i+4, j-2 - (i+4)+1 ); //"Заказ № 685 от АВТОДОК аксессуары"
   	Тема = "ОТЧЕТ : "+Тема0;
		
		ТекстСообщения = "
		|Автоматиский ответ по загрузке Заказа из Excel в базу Яршинторг:
		|
		|по Вашему письму: "+ИмяФайлаОтвета+"
		|
		|"+?(не ЗначениеЗаполнено(ЗаказПокупателя),"НИЧЕГО НЕТ или Заказа НЕ СОЗДАН! (подробнее см. файл)", 
		             "Создан Заказ покупателя № "+ЗаказПокупателя.Номер+" от "+строка(ЗаказПокупателя.Дата))+"
		|
		|В файле-ответе: 
		|В отдельном столбце - отражается Ok. или указана Причина отказа
		|Если есть причина отказа - Количество уже уменьшено.
		|
		|  Письмо создано автоматически. ОТВЕЧАТЬ на него НЕ НАДО!
		|
		|По всем вопросам - связывайтесь с менеджером: Иван Горелов 
		|		тел.: (4852) 200-200  доб. 232
		|";
		
		СписокФайловВложений = новый СписокЗначений;
		СписокФайловВложений.Добавить( Путь + ИмяФайлаОтвета);
		
		яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо( АдресПочтыКлиента, СписокФайловВложений, УЗ, ТекстСообщения, Тема, "", "ogorodnikov@yst.ru");
	
КонецПроцедуры	
