////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ ТЕКСТЫ СООБЩЕНИЙ ОБ ОШИБКАХ ПРОВЕДЕНИЯ

// Формирует стандартный текст сообщения при ошибках проведения, когда не хватает остатка в регистре.
//
// Параметры: 
//  ТекстСообщения - Исходный текст выводимого сообщения.
//  Остаток        - Текущий остаток ресурса в регистре.
//  Требуется      - Требуемый остаток ресурса в регистре.
//  ЕИ             - Единица измерения ресурса (единица измерения, валюта и т.д.).
//  Отказ          - Флаг отказа в проведении докумета,
//  Заголовок      - Заголовок начала серии сообщений об ошибках проведения (не обязательный).
//
Процедура ОшибкаНетОстатка(ТекстСообщения, Остаток, Требуется, ЕИ, Отказ, Заголовок="") Экспорт

	Если НЕ ЗначениеНеЗаполнено(Заголовок) Тогда
		Сообщить(Заголовок);
		Заголовок = "";
	КонецЕсли;

	ОшибкаПриПроведении(ТекстСообщения + Символы.ПС + Символы.Таб +
					   "Не хватает " + ?(Остаток > 0 , Требуется - Остаток, Требуется) + " " + ЕИ +
					   "; Остаток " + Остаток + " " + ЕИ +
					   "; Требуется " + Требуется + " " + ЕИ, Отказ);

КонецПроцедуры // ОшибкаНетОстатка()

// Формирует строку представления номенклатуры с учетом характеристики и серий.
//
// Параметры
//  НоменклатураПредставление   - представление номенклатуры.
//  ХарактеристикаПредставление - представление характеристики.
//  СерияПредставление          - представление серии.
//
// Возвращаемое значение
//  Строка с представлением номенклатуры.
//
Функция ПредставлениеНоменклатуры(НоменклатураПредставление, ХарактеристикаПредставление = "", 
	                                 СерияПредставление = "") Экспорт

	СтрПредставление = """" + СокрЛП(НоменклатураПредставление) + """";

	Если Не ЗначениеНеЗаполнено(ХарактеристикаПредставление)Тогда

		СтрПредставление = СтрПредставление + " / """ + СокрЛП(ХарактеристикаПредставление) + """";

	КонецЕсли;

	Если Не ЗначениеНеЗаполнено(СерияПредставление) Тогда

		СтрПредставление = СтрПредставление + " (""" + СокрЛП(СерияПредставление) + """)";

	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции // ПредставлениеНоменклатуры()

// Заполняет структуру полей стандартными для табличной части "Товары" колонками.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруПолейТовары() Экспорт

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");

	Возврат СтруктураПолей;

КонецФункции // СформироватьСтруктуруПолейТовары()

// Заполняет структуру полей стандартными для табличной части "Товары" колонками,
// обязательными к заполнению в документах.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруОбязательныхПолейТовары() Экспорт

	Возврат Новый Структура("Номенклатура, Количество, Сумма");
	
КонецФункции // СформироватьСтруктуруОбязательныхПолейТовары()

// Заполняет структуру полей стандартными для табличной части "Возвратная тара" колонками.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруПолейТара() Экспорт

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");

	Возврат СтруктураПолей;

КонецФункции // СформироватьСтруктуруПолейТара()

// Заполняет структуру полей стандартными для табличной части "Возвратная тара" колонками,
// обязательными к заполнению в документах.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруОбязательныхПолейТара() Экспорт

	Возврат Новый Структура("Номенклатура, Количество, Сумма");

КонецФункции // СформироватьСтруктуруОбязательныхПолейТара()

// Формирует структуру дерева значений, содержащего имена полей, которые
// нужно заполнить в запросе по шапке документа.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Дерево значений.
//
Функция СформироватьДеревоПолейЗапросаПоШапке()  Экспорт

	ДеревоПолейЗапросаПоШапке = Новый ДеревоЗначений;

	ОписаниеТиповСтрока = ПолучитьОписаниеТиповСтроки(100);
	
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Объект"   , ОписаниеТиповСтрока);
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Поле"     , ОписаниеТиповСтрока);
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Псевдоним", ОписаниеТиповСтрока);
	
	Возврат ДеревоПолейЗапросаПоШапке;

КонецФункции // СформироватьДеревоПолейЗапросаПоШапке()

// Вставляет строку в дерево полей запроса по шапке, если ее там еще нет,
// если есть, то ничего не делает.
//
// Параметры:
//  ДеревоПолейЗапросаПоШапке - дерево значений, содержащего имена полей, 
//                              которые нужно заполнить в запросе по шапке документа, 
//  ИмяОбъекта                - строка, имя объекта (справочник, регистр и т.д.), 
//  ИмяПоля                   - строка, имя поля объекта,
//  ИмяПсевдонима             - строка, имя псевдонима в запросе поля объекта (необязательный).
//
Процедура ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, ИмяОбъекта, ИмяПоля, ИмяПсевдонима = Неопределено) Экспорт

	// Поищем нужную строку.
	// Вначале ищем объект.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти(ИмяОбъекта, "Объект");

	Если СтрокаОбъекта = Неопределено Тогда // нужно добавить.
		
		СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Добавить();
		СтрокаОбъекта.Объект    = ИмяОбъекта;
		СтрокаОбъекта.Поле      = ИмяПоля;
		СтрокаОбъекта.Псевдоним = ИмяПсевдонима;


	КонецЕсли;

	// Ищем поле.
	СтрокаПоля = СтрокаОбъекта.Строки. Найти(ИмяПоля,"Поле");

	Если СтрокаПоля = Неопределено Тогда // нужно добавить

		СтрокаПоля = СтрокаОбъекта.Строки.Добавить();

		СтрокаПоля.Поле      = ИмяПоля;
		СтрокаПоля.Псевдоним = ИмяПсевдонима;

	КонецЕсли;

	// Ищем псевдоним.
	СтрокаПоля = СтрокаОбъекта.Строки.Найти( ИмяПсевдонима, "Псевдоним");

	Если СтрокаПоля = Неопределено Тогда // нужно добавить

		СтрокаПоля = СтрокаОбъекта.Строки.Добавить();

		СтрокаПоля.Поле      = ИмяПоля;
		СтрокаПоля.Псевдоним = ИмяПсевдонима;

	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДеревоПолейЗапросаПоШапке()

// Формирует запрос на дополнительные параметры, нужные при проведении документа.
//
// Параметры: 
//  ДокументОбъект                 - объект проводимого документа, 
//  ДеревоПолейЗапросаПоШапке      - дерево значений, содержащего имена полей, 
//                                   которые нужно заполнить в запросе по шапке документа.
//  СтруктураШапкиДокумента        - структура, содержащая значения реквизитов, относящихся к шапке документа,
//                                   необходимых для его проведения.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Дополненная по результату запроса структура СтруктураШапкиДокумента.
//
Функция СформироватьЗапросПоДеревуПолей(ДокументОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета)  Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ";

	СтрокиЗапроса           = "";
	ТаблицыЗапроса          = "";
	НуженКурсВалютыУпрУчета = Ложь;
	ЕстьУчетнаяПолитика     = Ложь;
	
	// Реквизиты договора взаиморасчетов.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДоговорыКонтрагентов", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДоговорКонтрагента." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты договора взаиморасчетов регл.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДоговорыКонтрагентовРегл", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДоговорКонтрагентаРегл." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты сделки.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Сделка", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Сделка." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Склад", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Склад." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладОтправитель", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладОтправитель." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументПеремещения", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументПеремещения." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументПередачи", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументПередачи." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-получателя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладПолучатель", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладПолучатель." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-ордера
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладОрдер", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладОрдер." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Заказ", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Заказ." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ВнутреннийЗаказ", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ВнутреннийЗаказ." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты заказа покупателя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ЗаказыПокупателей", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ЗаказПокупателя." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты заказа поставщику
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ЗаказыПоставщикам", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ЗаказПоставщику." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты номенклатуры
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Номенклатура", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Номенклатура." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты документа основания
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументОснование", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументОснование." + СокрЛП(СтрокаПоля.Поле) +
			?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Константы.
	ТаблицыЗапроса = ТаблицыЗапроса + ", Константы";

	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Константы", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			Если СтрокаПоля.Поле = "КурсВалютыУправленческогоУчета" Тогда

				СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
				Символы.Таб + "КурсыВалютСрезПоследних.Курс КАК КурсВалютыУправленческогоУчета";
			
				СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
				Символы.Таб + "КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыУправленческогоУчета";
			
				НуженКурсВалютыУпрУчета = Истина;

			Иначе

				СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
				Символы.Таб + "Константы." + СокрЛП(СтрокаПоля.Поле) +
				?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("УчетнаяПолитика", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда
		ЕстьУчетнаяПолитика = Истина;
		
		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл
			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС + 
			Символы.Таб + "УчетнаяПолитикаСрезПоследних." + СокрЛП(СтрокаПоля.Поле) +
				?(ЗначениеНеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));
		КонецЦикла;
			
	КонецЕсли;

	// Надо добавить константу ВалютаРегламнтированногоУчета
	СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС + 
	Символы.Таб + "Константы.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета";

	СтрокаЗапросаКурсВалютыУпрУчета = Символы.ПС + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента,) КАК КурсыВалютСрезПоследних
	|	ПО Константы.ВалютаУправленческогоУчета = КурсыВалютСрезПоследних.Валюта";

	СтрокаРегистраУчетнойПолитики = Символы.ПС + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаДокумента,) КАК УчетнаяПолитикаСрезПоследних
	|	ПО Истина";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ " + Сред(СтрокиЗапроса, 2) + "
	                | ИЗ 
	                |      Документ." + ДокументОбъект.Метаданные().Имя + " КАК Док "+ ТаблицыЗапроса +
	                ?(НуженКурсВалютыУпрУчета, СтрокаЗапросаКурсВалютыУпрУчета,"") + Символы.ПС + 
	                ?(ЕстьУчетнаяПолитика, СтрокаРегистраУчетнойПолитики,"") + Символы.ПС + "
	                |     ГДЕ Док.Ссылка = &ДокументСсылка";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", ДокументОбъект.Дата);

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	Для каждого Колонка из ТаблицаЗапроса.Колонки Цикл
		Если ТаблицаЗапроса.Количество() = 0 Тогда
			СтруктураШапкиДокумента.Вставить(Колонка.Имя, Неопределено);
		Иначе
			СтруктураШапкиДокумента.Вставить(Колонка.Имя, ТаблицаЗапроса[0][Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.Свойство("ВалютаДокумента") Тогда
		Если ЕстьРеквизитДокумента("ВалютаДокумента", ДокументОбъект.Метаданные()) Тогда
			СтруктураШапкиДокумента.Вставить("КурсДокумента", 		КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
			СтруктураШапкиДокумента.Вставить("КратностьДокумента", 	КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // СформироватьЗапросПоДеревуПолей()

// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетУслуг(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если Не ЗначениеНеЗаполнено(СтрокаТаблицы.Номенклатура)
		   И  СтрокаТаблицы.Услуга Тогда

				ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "содержится услуга. " +
				                   "Услуг здесь быть не должно!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоНетУслуг()

// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетТоваров(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если Не ЗначениеНеЗаполнено(СтрокаТаблицы.Номенклатура)
		   И  Не СтрокаТаблицы.Услуга Тогда

				ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, не являющаяся услугой. " +
				                   "Здесь могут быть только услуги!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоНетУслуг)

// Проверяет, что в табличной части нет наборов.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетНаборов(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если Не ЗначениеНеЗаполнено(СтрокаТаблицы.Номенклатура) И ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		   И  СтрокаТаблицы.Набор Тогда

				ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "содержится набор. " +
				                   "Наборов здесь быть не должно!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоНетНаборов()

// Проверяет, что в размещение, указанное в табиличной части, не на складе НТТ.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоСкладНеНТТ(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок, ИмяВидаСкладаРазмещения = "ВидСкладаРазмещения") Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если СтрокаТаблицы[ИмяВидаСкладаРазмещения] = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда

				ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "содержится размещение по неавтоматизированной торговой точке. " +
				                   "Такого быть не должно!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоСкладНеНТТ()

// Проверяет, что в табличной части нет номенклатуры, учет которой ведется по характеристикам.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак учет по характеристикам
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетНоменклатурыСХарактеристиками(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если Не ЗначениеНеЗаполнено(СтрокаТаблицы.Номенклатура)
		   И  СтрокаТаблицы.ВестиУчетПоХарактеристикам Тогда

				ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, по которой ведется учет по характеристикам. " +
				                   "По возвратной таре не ведется учет по характеристикам!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоНетНоменклатурыСХарактеристиками()

// .Корректирует структуру обязательных полей в зависимости от настроек пользователей.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  ВидСклада                  - вид склада,
//  СтруктураОбязательныхПолей - корректируемая структура обязательных полей.
//
Процедура КорректировкаСтруктурыОбязательныхПолей(ДокументОбъект, ИмяТабличнойЧасти, ВидСклада = Неопределено, СтруктураОбязательныхПолей) Экспорт

	РазрешитьНулевыеСуммыИЦены = Ложь;
	Если ВидСклада = Перечисления.ВидыСкладов.Оптовый
	 Или ВидСклада = Неопределено Тогда
		РазрешитьНулевыеСуммыИЦены = РазрешитьНулевыеЦеныВОпте();
	ИначеЕсли (ВидСклада = Перечисления.ВидыСкладов.Розничный) Или (ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		РазрешитьНулевыеСуммыИЦены = РазрешитьНулевыеЦеныВРознице();
	КонецЕсли;

	Если РазрешитьНулевыеСуммыИЦены Тогда
		Если СтруктураОбязательныхПолей.Свойство("Сумма") Тогда
			СтруктураОбязательныхПолей.Удалить("Сумма");
		КонецЕсли;
		Если СтруктураОбязательныхПолей.Свойство("Цена") Тогда
			СтруктураОбязательныхПолей.Удалить("Цена");
		КонецЕсли;
		Если СтруктураОбязательныхПолей.Свойство("ЦенаВРознице") Тогда
			СтруктураОбязательныхПолей.Удалить("ЦенаВРознице");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КорректировкаСтруктурыОбязательныхПолей()

// По переданной структуре полей формирует запрос по табличной части документа.
//
// Параметры: 
//  ДокументОбъект        - объект проводимого документа, 
//  ИмяТабличнойЧасти     - строка, имя табличной части,
//  СтруктураПолей        - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//  СтруктураСложныхПолей - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//                          необязательный параметр, служит для передачи конструкций типа "ВЫБОР" и т.д.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураПолей,
                                           СтруктураСложныхПолей = Неопределено) Экспорт


	ТекстЗапроса = "";

	Для Каждого Реквизит Из СтруктураПолей Цикл

		ТекстЗапроса  = ТекстЗапроса + ",
		|Док." + Реквизит.Значение + 
		?(ЗначениеНеЗаполнено(Реквизит.Ключ), "", " КАК " + СокрЛП(Реквизит.Ключ));

	КонецЦикла;

	Если ТипЗнч(СтруктураСложныхПолей) = Тип("Структура") Тогда // Добавим к запросу конструкции.
	
		Для Каждого Элемент Из СтруктураСложныхПолей Цикл

			ТекстЗапроса  = ТекстЗапроса + ",
			| " + Элемент.Значение + 
			?(ЗначениеНеЗаполнено(Элемент.Ключ), "", " КАК " + СокрЛП(Элемент.Ключ));

		КонецЦикла;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	                | Док.НомерСтроки " + ТекстЗапроса + "
	                | ИЗ 
	                |      Документ." + ДокументОбъект.Метаданные().Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + 
	                " КАК Док 
	                |     ГДЕ Док.Ссылка = &ДокументСсылка";


	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТабличнойЧасти()

// Формирует список остатков по сериям по регистрам "Товары организаций" и "Товары на складах", с фильтром
// по переданным значениям параметров
//
// Параметры:
//	Организация         - организация, по которой определяются остатки по сериям
//  Номенклатура        - номенклатура, по которой определяются остатки
//  Единица		        - единица, в которой	возварщаются остатки
//  СтранаПроисхождения - если не задана, то по всем
//	Комиссионер	        - комиссионер, если не задан, то по пустому
//
Функция ПолучитьСписокТекущихСерийНоменклатуры(Организация, Номенклатура, ХарактеристикаНоменклатуры, Единица, Комиссионер = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Если Комиссионер = Неопределено Тогда
		Запрос.УстановитьПараметр("Комиссионер", Справочники.Контрагенты.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Комиссионер", Комиссионер);
	КонецЕсли;
	
	СписокСерий = Новый СписокЗначений;

	Запрос.УстановитьПараметр("КоэффициентЕдиницы"        , Единица.Коэффициент);
	Запрос.УстановитьПараметр("КоэффициентЕдиницыХранения", Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, 
	|         Номенклатура               = &Номенклатура
	|       И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ТоварыНаСкладахОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыОрганизацийОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(,
	|			Организация                = &Организация
	|         И Номенклатура               = &Номенклатура
	|         И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|		  И Комиссионер                = &Комиссионер
	|   ) КАК ТоварыОрганизацийОстатки 
	|ИТОГИ МИНИМУМ(Остаток) ПО СерияНоменклатуры";

	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		СписокСерий.Добавить(Выборка.СерияНоменклатуры, СокрЛП(Выборка.СерияНоменклатуры) 
		+ " (" + Формат(Выборка.Остаток, "ЧЦ=15;ЧДЦ=3") + " " + СокрЛП(Единица) + ")");	
	КонецЦикла;

	Возврат СписокСерий;
	
КонецФункции // ПолучитьСписокТекущихСерийНоменклатуры()

// Возвращает таблицу остатков по сериям на заданом складе в заданной организации.
// Используется при заполении по кнопке "Заполнить и провести" в документах, списывающих товары.
//
// Параметры:
//  Склад              - склад, на котором получаются остатки,
//  Организация        - организация, по которой получаются остатки
//  МассивНоменклатуры - массив, содержащий номенклатуру, по которой необходимо получить остатки
//
// Используется при заполении по кнопке "Заполнить и провести" в документах, списывающих товары.
//
// Параметры:
//  Склад              - склад, на котором получаются остатки,
//  Организация        - организация, по которой получаются остатки
//  МассивНоменклатуры - массив, содержащий номенклатуру, по которой необходимо получить остатки
//
Функция ПолучитьТаблицуОстатковПоСериям(СкладДоговор, Организация, МассивНоменклатуры, Комиссионер = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);

	Если Комиссионер = Неопределено Тогда
		Если ТипЗнч(СкладДоговор) = Тип("Массив") Тогда
			МассивСклады = СкладДоговор;
		Иначе
			МассивСклады = Новый Массив;
			МассивСклады.Добавить(СкладДоговор);
		КонецЕсли;

		ИмяРегистра = "ТоварыНаСкладах";
		Запрос.УстановитьПараметр("Комиссионер",        Справочники.Контрагенты.ПустаяСсылка());
		Запрос.УстановитьПараметр("Склад",              МассивСклады);
	Иначе
		ИмяРегистра = "ТоварыПереданные";
		Запрос.УстановитьПараметр("Комиссионер",        Комиссионер);
		Запрос.УстановитьПараметр("Новый",              Справочники.Качество.Новый);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", СкладДоговор);
	КонецЕсли;
	
	ТекстЗапросаПоОрганизации = "
	|ВЫБРАТЬ
	|	ТоварыОрганизацийОстатки.Номенклатура                   КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры     КАК ХарактеристикаНоменклатуры,
	|	ТоварыОрганизацийОстатки.СерияНоменклатуры              КАК СерияНоменклатуры,
	|	ТоварыОрганизацийОстатки.СерияНоменклатуры.СрокГодности КАК СрокГодности,
	|	ТоварыОрганизацийОстатки.Качество                       КАК Качество,
	|	NULL                                                    КАК Склад,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток              КАК Остаток
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(,
	|		    Организация                = &Организация
	|		  И Номенклатура               В (&Номенклатура)
	|		  И Комиссионер                = &Комиссионер
	|	) КАК ТоварыОрганизацийОстатки";

	Если Комиссионер = Неопределено Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура                                     КАК Номенклатура,
		|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.СерияНоменклатуры                                КАК СерияНоменклатуры,
		|	ВложенныйЗапрос.СерияНоменклатуры.СрокГодности                   КАК СрокГодности,
		|	ВложенныйЗапрос.Качество                                         КАК Качество,
		|	ВложенныйЗапрос.Склад                                            КАК Склад,
		|	МИНИМУМ(ВложенныйЗапрос.Остаток)                                 КАК Остаток
		|ИЗ
		|	(ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура                   КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры     КАК ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.СерияНоменклатуры              КАК СерияНоменклатуры,
		|	ТоварыНаСкладахОстатки.СерияНоменклатуры.СрокГодности КАК СрокГодности,
		|	"+ ?(ИмяРегистра = "ТоварыНаСкладах", "ТоварыНаСкладахОстатки.Качество", "&Новый") + " КАК Качество,
		|	"+ ?(ИмяРегистра = "ТоварыНаСкладах", "ТоварыНаСкладахОстатки.Склад",     "NULL")  + " КАК Склад,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток              КАК Остаток
		|ИЗ
		|	РегистрНакопления."+ ИмяРегистра + ".Остатки(, "+ ?(ИмяРегистра = "ТоварыНаСкладах", "Склад В (&Склад)", "ДоговорКонтрагента = &ДоговорКонтрагента") + " И
		|         Номенклатура               В (&Номенклатура)) КАК ТоварыНаСкладахОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|"
		+ ТекстЗапросаПоОрганизации + ") КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.СерияНоменклатуры,
		|	ВложенныйЗапрос.Качество,
		|	ВложенныйЗапрос.Склад
		|";
	Иначе
		
		Запрос.Текст = ТекстЗапросаПоОрганизации;
		
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	// Таблица остатков по организации
	ТаблицаПоОрганизации = РезультатЗапроса.Выгрузить();
	
	Если Комиссионер = Неопределено Тогда
		
		Сч = 0;
		Пока Сч < ТаблицаПоОрганизации.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоОрганизации.Получить(Сч);
			Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Склад) Тогда
				ТаблицаПоОрганизации.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;

		// Таблица остатков на складах
		ТаблицаПоСкладам = РезультатЗапроса.Выгрузить();
		Сч = 0;
		Пока Сч < ТаблицаПоСкладам.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоСкладам.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.Склад) Тогда
				ТаблицаПоСкладам.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;

		// Корректировка остатков склада
		Для Каждого СтрокаОрганизации ИЗ ТаблицаПоОрганизации Цикл

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура",               СтрокаОрганизации.Номенклатура);
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаОрганизации.ХарактеристикаНоменклатуры);
			СтруктураПоиска.Вставить("СерияНоменклатуры",          СтрокаОрганизации.СерияНоменклатуры);
			СтруктураПоиска.Вставить("Качество",                   СтрокаОрганизации.Качество);

			СтрокиПоСкладам      = ТаблицаПоСкладам.НайтиСтроки(СтруктураПоиска);
			ОстатокПоОрганизации = ?(ЗначениеНеЗаполнено(СтрокаОрганизации.Остаток), 0, СтрокаОрганизации.Остаток);

			Для Каждого СтрокаСклада Из СтрокиПоСкладам Цикл

				ОстатокПоСкладу      = ?(ЗначениеНеЗаполнено(СтрокаСклада.Остаток), 0, СтрокаСклада.Остаток);
				МинимальныйОстаток   = Мин(ОстатокПоСкладу, ОстатокПоОрганизации);
				МинимальныйОстаток   = ?(МинимальныйОстаток < 0, 0, МинимальныйОстаток);
				ОстатокПоОрганизации = ОстатокПоОрганизации - МинимальныйОстаток;
				СтрокаСклада.Остаток = МинимальныйОстаток;

			КонецЦикла;
		КонецЦикла;
		
		ТаблицаПоСкладам.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, СрокГодности, Качество, Склад,", "Остаток");

		ТаблицаСерий = ТаблицаПоСкладам.Скопировать();
		
	Иначе
		ТаблицаПоОрганизации.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, СрокГодности, Качество", "Остаток");
		ТаблицаСерий = ТаблицаПоОрганизации.Скопировать();
	КонецЕсли;
	
	ТаблицаСерий.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, СрокГодности");

	Возврат ТаблицаСерий;

КонецФункции // ПолучитьТаблицуОстатковПоСериям()
