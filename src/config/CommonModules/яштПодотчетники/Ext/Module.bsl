Процедура СоздатьЗаданияПодотчетникам() Экспорт
	ДатаПодотчетов = ТекущаяДата() + 60*60*24;
	ДокументыКОплате = НайтиПодотчетыНаДату(ДатаПодотчетов);
	
	Для каждого стр из ДокументыКОплате Цикл
		//Задача Подотчетнику
		Если ЗначениеЗаполнено(стр.ПодотчетникПользователь) Тогда
	    НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	    НоваяЗадача.Исполнитель  = стр.ПодотчетникПользователь;
	    НоваяЗадача.Наименование = "Напоминание о необходимости предоставления отчета об использовании денежных средств";
	    НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.ДатаИсполнения = стр.ДатаПогашенияАванса;
	    НоваяЗадача.Оповещение   = Истина;
	    НоваяЗадача.СрокОповещения = ТекущаяДата()+60;
		НоваяЗадача.Описание = "Необходимо предоставить в бухгалтерию отчет 
		| об использовании наличных денежных средств, 
		| выданных "+ Формат(стр.ДатаПолученияАванса,"ДФ=dd.MM.yyyy") +" в размере "+стр.Сумма+" руб. 
		| по заявке на расходование "+Строка(стр.Заявка)+".
        | Срок предоставления отчета - "+Формат(стр.ДатаПогашенияАванса,"ДФ=dd.MM.yyyy");
		НоваяЗадача.Записать();
		КонецЕсли;
		//Задача кассиру
		НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	    НоваяЗадача.Исполнитель  = стр.Кассир;
		НоваяЗадача.Объект = стр.Документ;
	    НоваяЗадача.Наименование = "Напоминание о необходимости предоставления отчета об использовании денежных средств";
	    НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.ДатаИсполнения = стр.ДатаПогашенияАванса;
	    НоваяЗадача.Оповещение   = Истина;
	    НоваяЗадача.СрокОповещения = ТекущаяДата()+60;
		НоваяЗадача.Описание = "Сотруднику "+Строка(стр.ПодотчетникФизЛицо) +" необходимо предоставить в бухгалтерию отчет 
		| об использовании наличных денежных средств, 
		| выданных "+ Формат(стр.ДатаПолученияАванса,"ДФ=dd.MM.yyyy") +" в размере "+стр.Сумма +" руб.
		| по заявке на расходование "+Строка(стр.Заявка)+".
        | Срок предоставления отчета - "+Формат(стр.ДатаПогашенияАванса,"ДФ=dd.MM.yyyy");
		НоваяЗадача.Записать();
	КонецЦикла;
КонецПроцедуры
	
Функция НайтиПодотчетыНаДату(ДатаПодотчетов)
	ЗапросПоПодотчетам = Новый Запрос;
	ЗапросПоПодотчетам.УстановитьПараметр("Дата1",НачалоДня(ДатаПодотчетов));
	ЗапросПоПодотчетам.УстановитьПараметр("Дата2",КонецДня(ДатаПодотчетов));
	ЗапросПоПодотчетам.УстановитьПараметр("ТекДата",ТекущаяДата());
	ЗапросПоПодотчетам.УстановитьПараметр("Подотчет",Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику);
	ЗапросПоПодотчетам.Текст = "ВЫБРАТЬ
	                           |	МИНИМУМ(Пользователи.Ссылка) КАК Ссылка,
	                           |	Пользователи.ФизЛицо
	                           |ПОМЕСТИТЬ Пользователи
	                           |ИЗ
	                           |	Справочник.Пользователи КАК Пользователи
	                           |
	                           |СГРУППИРОВАТЬ ПО
	                           |	Пользователи.ФизЛицо
	                           |;
	                           |
	                           |////////////////////////////////////////////////////////////////////////////////
	                           |ВЫБРАТЬ
	                           |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.Ссылка КАК Документ,
	                           |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.Номер КАК Номер,
	                           |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.Дата КАК ДатаПолученияАванса,
	                           |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.ДатаПогашенияАванса КАК ДатаПогашенияАванса,
	                           |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.Организация КАК Организация,
	                           |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.Подразделение КАК Подразделение,
	                           |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.Контрагент КАК ПодотчетникФизЛицо,
	                           |	Пользователи.Ссылка КАК ПодотчетникПользователь,
	                           |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаУпрОстаток КАК Сумма,
	                           |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.ЗаявкаНаРасходованиеСредств КАК Заявка,
	                           |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки1.СуммаВзаиморасчетовОстаток КАК ОбщаяСуммаЗадолженности,
	                           |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.Ответственный КАК Кассир
	                           |ИЗ
	                           |	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ТекДата, РасчетныйДокумент.ДатаПогашенияАванса МЕЖДУ &Дата1 И &Дата2) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	                           |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ТекДата, ) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки1
	                           |		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ФизЛицо = ВзаиморасчетыСПодотчетнымиЛицамиОстатки1.ФизЛицо
	                           |		ЛЕВОЕ СОЕДИНЕНИЕ Пользователи КАК Пользователи
	                           |		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ФизЛицо = Пользователи.ФизЛицо";
	результат = ЗапросПоПодотчетам.Выполнить().Выгрузить();						   
	Возврат результат;	
КонецФункции

Процедура ПроверитьНаличиеДолгаЗаПодотчетником(ДокументСсылка,Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("Подотчетник", ДокументСсылка.Контрагент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ФизЛицо,
	               |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта,
	               |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент,
	               |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток,
	               |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаУпрОстаток,
	               |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.ДатаПогашенияАванса КАК ДатаПогашенияАванса
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	               |			&Период,
	               |			ФизЛицо = &Подотчетник
	               |				И РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	               |ГДЕ
	               |	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.ДатаПогашенияАванса < &Период
	               |	И ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаУпрОстаток > 0";
				   
	Результат = Запрос.Выполнить().Выбрать();			   
	Если Результат.Количество() > 0 Тогда
		Если РольДоступна("яштФинДиректор") Тогда
			Сообщить("Внимание! У подотчетника есть долги");
		Иначе
			Сообщить("Документ не может быть проведен, т.к. у подотчетника есть долги");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Пока Результат.Следующий() Цикл
		Сообщить(Строка(Результат.РасчетныйДокумент) + " срок погашения аванса " + ?(Результат.ДатаПогашенияАванса = Дата(1,1,1), "не заполнен", Строка(Лев(Результат.ДатаПогашенияАванса, 10))) + ", сумма долга " + Строка(Результат.СуммаУпрОстаток) + " руб.");
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДолгиПередПодотчетником(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент КАК Документ,
	|	-ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&Дата, ФизЛицо = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток < 0";
	
	Запрос.УстановитьПараметр("Дата", ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("ФизЛицо", ДокументСсылка.Контрагент);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции


///Плотников 

Процедура ИзвеститьМенеджеровОДолгахВодителей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаС",НачалоДня(ТекущаяДата()-24*60*60*5));
	Запрос.УстановитьПараметр("ДатаПо",КонецДня(ТекущаяДата()-24*60*60*5));
	Запрос.Текст = "ВЫБРАТЬ
	|	УчетДенежныхСредствВПодотчетеУВодителейОстатки.Заказ.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	СУММА(ЕСТЬNULL(УчетДенежныхСредствВПодотчетеУВодителейОстатки.СуммаОстаток, 0) + ЕСТЬNULL(УчетДенежныхСредствВПодотчетеУВодителейОстатки.СуммаТранспортОстаток, 0) + ЕСТЬNULL(УчетДенежныхСредствВПодотчетеУВодителейОстатки.СуммаПредыдущийДолгОстаток, 0)) КАК Сумма,
	|	УчетДенежныхСредствВПодотчетеУВодителейОстатки.Заказ
	|ПОМЕСТИТЬ Врем
	|ИЗ
	|	РегистрНакопления.УчетДенежныхСредствВПодотчетеУВодителей.Остатки КАК УчетДенежныхСредствВПодотчетеУВодителейОстатки
	|ГДЕ
	|	УчетДенежныхСредствВПодотчетеУВодителейОстатки.ЗаданиеНаОтгрузку.Дата МЕЖДУ &ДатаС И &ДатаПо
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетДенежныхСредствВПодотчетеУВодителейОстатки.Заказ.ДоговорКонтрагента.ОтветственноеЛицо,
	|	УчетДенежныхСредствВПодотчетеУВодителейОстатки.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Врем.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	Врем.Заказ,
	|	Врем.Сумма
	|ИЗ
	|	Врем КАК Врем
	|ГДЕ
	|	Врем.Сумма > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтветственноеЛицо";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПоМенеджерам = Результат.Скопировать();
	ПоМенеджерам.Свернуть("ОтветственноеЛицо");
	
	для Каждого стр из ПоМенеджерам Цикл
		
		отбор = новый Структура;
		отбор.Вставить("ОтветственноеЛицо",стр.ОтветственноеЛицо);
		
		Рез = Результат.Скопировать(Отбор);
		
		Текст = "";
		
		Для каждого стр1 из Рез Цикл
			Текст = Текст + "По заказу " + Строка(стр.Заказ) + " машина была отправлена 5 дней назад,
			|водитель на сегодняшний день не сдал по этому заказу " + стр.Сумма + ";" + Символы.ПС;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(стр.ОтветственноеЛицо) Тогда
			НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
			НоваяЗадача.Исполнитель  = стр.ОтветственноеЛицо;
			НоваяЗадача.Наименование = "Напоминание о необходимости проконтролировать сдачу денег водителем по вашим заказам.";
			НоваяЗадача.Дата = ТекущаяДата();
			НоваяЗадача.ДатаИсполнения = ТекущаяДата();
			НоваяЗадача.Оповещение   = Истина;
			НоваяЗадача.СрокОповещения = ТекущаяДата()+60*60*8;
			НоваяЗадача.Описание = Текст;
			НоваяЗадача.Записать();
		КонецЕсли;
	КонецЦикла;
		
	
	
	
	
	
	
КонецПроцедуры

//14.10.16 Смирнов
Процедура ВыгрузитьДокументыРеализацийНаКолесаТУТ() Экспорт
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Выгрузить реализации на КОЛЕСАТУТ"); 
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
		ОбработкаВыгрузитьРеализации = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
	Иначе 
		ОбработкаВыгрузитьРеализации = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
	КонецЕсли; 
	ОбработкаВыгрузитьРеализации.ВыгрузитьДокументы(НачалоДня(НачалоДня(ТекущаяДата())-1),КонецДня(ТекущаяДата()));

КонецПроцедуры
