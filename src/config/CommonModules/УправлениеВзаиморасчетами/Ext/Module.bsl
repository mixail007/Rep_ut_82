////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ПРИ ПРОВЕДЕНИИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ


// Проверяет, что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//  при несовпадении устанавливается флаг отказа в проведении.
//
// Параметры:
//  Организация           - ссылка на организацию, выбранную в документе,
//  ДоговорКонтрагента - ссылка на договор, выбранный в документе,
//  ДоговорОрганизация    - ссылка на Организацию, выбранную в договоре,
//  Отказ                 - флаг отказа в проведении.
//  Заголовок             - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, 
	                                                  ДоговорОрганизация, Отказ, Заголовок) Экспорт

	// Если не заполнен договор или организация, то не ругаемся.
	Если Не ЗначениеНеЗаполнено(Организация) 
	   И Не ЗначениеНеЗаполнено(ДоговорКонтрагента)
	   И Организация <> ДоговорОрганизация Тогда
		СообщитьОбОшибке("Выбран договор контрагента, не соответстветствующий организации, указанной в документе!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов()

// Для документов, у которых договор контрагента находится в табличной части
// что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части,
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		// Если не заполнен договор или организация, то не ругаемся.
		Если Не ЗначениеНеЗаполнено(ДокументОбъект.Организация) 
		   И Не ЗначениеНеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)
		   И ДокументОбъект.Организация <> СтрокаТаблицы.ДоговорОрганизация Тогда
			СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке 
			                 + " выбран договор контрагента, не соответстветствующий организации, указанной в документе!", Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти()

// Для документов, у которых договор контрагента и сделка находятся в табличной части
// (например, "Авансовый отчет", "Корректировка долга") проверяет заполнена ли сделка, если
// в договоре взаиморасчетов установлено ведение взаиморасчетов по заказам.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьСделкуВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

	    СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

	    Если (СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		  ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) 
		   И ЗначениеНеЗаполнено(СтрокаТаблицы.Сделка) Тогда

				ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "выбран договор, по которому взаиморасчеты ведутся по заказам. " +
				                   "Необходимо заполнить заказ поставщику!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьСделкуВТабличнойЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ 

// Вычисляет текущий долг контрагента по заданному договору и сделке в валюте взаиморасчетов 
// по данному договору
//
// Параметры: 
//  Договор - ссылка на элемент справочника, определяет договор контрагента, по которому надо получить долг, 
//  Сделка  - ссылка на документ, определяет сделку (заказ, накладную, платежный документ) по которому надо получить долг.
//  СсылкаДокумент           - ссылка на документ, для которого рассчитывается долг.
//
// Возвращаемое значение:
//  Число -  текущий размер долга, если удалось вычислить текущий долг, иначе - 0.
//
Функция ТекущийДолг(Договор, Сделка = Неопределено, СсылкаДокумент) Экспорт

	ТекущийДолг = 0;
	СтруктураОтбора = Новый Структура(); // для отбора остатков взаиморасчетов
	СтруктураОтбора.Вставить("ДоговорКонтрагента", Договор);
	
	Если Не ЗначениеНеЗаполнено(Договор) Тогда
		Если Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ТекущийДолг = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
						СтруктураОтбора,"ДоговорКонтрагента","СуммаВзаиморасчетов").Итог("СуммаВзаиморасчетов");
						
		Иначе // Взаиморасчеты ведутся по сделкам
			Если Не ЗначениеНеЗаполнено(Сделка) Тогда
				СтруктураОтбора.Вставить("Сделка", Сделка);
				ТекущийДолг = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
				СтруктураОтбора,"ДоговорКонтрагента,Сделка","СуммаВзаиморасчетов").Итог("СуммаВзаиморасчетов");
			ИначеЕсли Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				Если Не ЗначениеНеЗаполнено(СсылкаДокумент) Тогда
					СтруктураОтбора.Вставить("Сделка", СсылкаДокумент);
					ТекущийДолг = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
									СтруктураОтбора,"ДоговорКонтрагента,Сделка","СуммаВзаиморасчетов").Итог("СуммаВзаиморасчетов");
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 

	Возврат ТекущийДолг;
	
КонецФункции // ТекущийДолг()

// Функция возвращает список значений видов договоров взаиморасчетов для поставщика.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокВидовДоговоровВзаиморасчетовДляПоставщика() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Возврат СписокПеречисления;

КонецФункции // ПолучитьСписокВидовДоговоровВзаиморасчетовДляПоставщика()

// Функция возвращает список значений видов договоров взяиморасчетов для покупателя.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокВидовДоговоровВзаиморасчетовДляПокупателя() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Возврат СписокПеречисления;

КонецФункции // ПолучитьСписокВидовДоговоровВзаиморасчетовДляПокупателя()

// Функция возвращает список значений видов договоров взаиморасчетов когда
// контрагент не является ни поставщиком не покупателем.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокВидовДоговоровВзаиморасчетовПрочее() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Возврат СписокПеречисления;

КонецФункции // ПолучитьСписокВидовДоговоровВзаиморасчетовПрочее()

// Определяет сделку, по которой надо провести документ
//
// Параметры: 
//  ДокументОбъект          - объект проводимого документа, 
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  ИмяРеквизитаСделка      - необязательный параметр, имя реквизита "сделка".
//  Расчеты                 - флаг, показывающий, что сделка определяется для записи в регистр расчетов,
// при этом сделка прописывается, даже, если взаиморасчеты ведутся по договору в целом
//  ВозвратнаяТара          - флаг, показывающий, что определяется сделка для формирования движений по 
// возвратной таре регистров "Товары полученные" и "Товары переданные". В этом случае при ведении 
// взаиморасчетов по расчетным документам сделка не прописывается.
//
// Возвращаемое значение:
//  Ссылка на документ или Неопределно, т.е. значение, которое надо записать в измерение Сделка регистра.
//
Функция ОпределитьСделку(ДокументОбъект, ВыборкаПоШапкеДокумента, ИмяРеквизитаСделка = "Сделка", Расчеты = Ложь, ВозвратнаяТара = Ложь) Экспорт

	// Возвращаемое значение.
	Сделка = Неопределено;
	
	Если ВыборкаПоШапкеДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		
		Если ВозвратнаяТара Тогда

			Сделка = Неопределено;

		// Если сделка не указана, то документ сам становится сделкой
		ИначеЕсли ЗначениеНеЗаполнено(ДокументОбъект[ИмяРеквизитаСделка]) Тогда

			Сделка = ДокументОбъект.Ссылка;

		// Если указана, то происходит движение по указанной сделке.
		Иначе

			Сделка = ДокументОбъект[ИмяРеквизитаСделка];

		КонецЕсли;
		
	ИначеЕсли ВыборкаПоШапкеДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		  ИЛИ ВыборкаПоШапкеДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам 
		  ИЛИ Расчеты Тогда

		Сделка = ДокументОбъект[ИмяРеквизитаСделка];

	КонецЕсли;

	Возврат Сделка;

КонецФункции // ОпределитьСделку()

// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	// Если валюта документа совпадает с валютой регл. учета, то курс 1.
	Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
	
		МетаданныеДокумента = ДокументОбъект.Метаданные();

		// Если есть реквизит КурсДокумента - его и вернем
		Если ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КурсДокумента;
		КонецЕсли;

		// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета, 
		// то такой документ может быть выписан только в валюте взаиморасчетов,
		// если есть реквизит КурсВзаиморасчетов - его и вернем.
		Если ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КурсВзаиморасчетов;
		КонецЕсли;

	КонецЕсли;

	Возврат 1;

КонецФункции // КурсДокумента()

// Определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	// Если валюта документа совпадает с валютой регл. учета, то кратность 1.
	Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
	
		МетаданныеДокумента = ДокументОбъект.Метаданные();

		// Если есть реквизит КратностьДокумента - его и вернем
		Если ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КратностьДокумента;
		КонецЕсли;

		// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета, 
		// то такой документ может быть выписан только в валюте взаиморасчетов,
		// если есть реквизит КратностьВзаиморасчетов - его и вернем.
		Если ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КратностьВзаиморасчетов;
		КонецЕсли;

	КонецЕсли;

	Возврат 1;

КонецФункции // КратностьДокумента()

// Функция определяет конрагента, соответствующего указанной организации
//
// Параметры
//  Организация - организация, по которой определяется конрагент
//
// Возвращаемое значение:
//  Контрагент - контрагент, соответствующий указанной организации
//
Функция ПолучитьКонтрагентаПоОрганизации(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСвязи"  , Перечисления.ВидыСобственныхКонтрагентов.Организация);
	Запрос.УстановитьПараметр("Организация" , Организация);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|   Контрагент
	|ИЗ
	|   РегистрСведений.СобственныеКонтрагенты 
	|ГДЕ Объект     = &Организация
	|    И ВидСвязи = &ВидСвязи";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контрагент;
	КонецЕсли;

	Возврат Справочники.Контрагенты.ПустаяСсылка();

КонецФункции // ПолучитьКонтрагентаПоОрганизации()

// Функция определяет организацию, соответствующего указанному юр/физ лицу конрагента
//
// Параметры
//  Контрагент - конрагент, по которому определяется организация
//
// Возвращаемое значение:
//  Организации - организация, соответствующий указаннму юр/физ лицу конрагента
//
Функция ПолучитьОрганизациюПоКонтрагенту(Контрагент) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ВидСвязи"   , Перечисления.ВидыСобственныхКонтрагентов.Организация);
	Запрос.УстановитьПараметр("Контрагент" , Контрагент);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|   Объект
	|ИЗ
	|   РегистрСведений.СобственныеКонтрагенты 
	|ГДЕ Контрагент = &Контрагент
	|    И ВидСвязи = &ВидСвязи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Объект;
	КонецЕсли;

	Возврат Справочники.Организации.ПустаяСсылка();

КонецФункции // ПолучитьОрганизациюПоКонтрагенту()

// Дополняет дерево полей запроса по шапке реквизитами договора, нужными для контроля остатков взаиморасчетов.
//
// Параметры
//  ДеревоПолейЗапросаПоШапке - дерево, дополняемое дерево полей запроса,
//  РежимПроведения           - режим проведения документа.
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения) Экспорт

	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                       , "ВедениеВзаиморасчетов");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                        , "ВалютаВзаиморасчетов");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "КонтролироватьСуммуЗадолженности" , "КонтролироватьСуммуЗадолженности");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ДопустимаяСуммаЗадолженности" , "ДопустимаяСуммаЗадолженности");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ПроцентПредоплаты" , "ПроцентПредоплаты");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "КонтролироватьЧислоДнейЗадолженности" , "КонтролироватьЧислоДнейЗадолженности");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ДопустимоеЧислоДнейЗадолженности" , "ДопустимоеЧислоДнейЗадолженности");
	КонецЕсли;

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр()

//Функция подготовки таблицы значений для целей приобретения и еализации
Процедура ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаЗначений, СтруктураШапкиДокумента, ВключитьНДСВОсновнуюСумму, ВалютаРегламентированногоУчета = "") Экспорт

	Перем СуммаВключаетНДС,ВидРасчетовПоДоговору;

	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	ЕстьНДС    = Не(ТаблицаЗначений.Колонки.Найти("НДС")=Неопределено);
	ЕстьВознаграждение = Не(ТаблицаЗначений.Колонки.Найти("СуммаВознаграждения")=Неопределено);
	
	ЕстьВалюта = СтруктураШапкиДокумента.Свойство("ВалютаДокумента");

	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС", СуммаВключаетНДС);
	СуммаВключаетНДС = (СуммаВключаетНДС = Истина);

	//Дополним колонки ТЗ при необходимости
	СтруктураОбязательныхКолонок = Новый Структура("Сумма"+?(ЕстьНДС,",НДС,СуммаБезНДС","") + ?(ЕстьВознаграждение,",НДСВознаграждения,СуммаБезНДСВознаграждения","") + ?(ЕстьВалюта,",СуммаВал"+?(ЕстьНДС,",НДСВал,СуммаБезНДСВал",""),""));

	Для Каждого Колонка Из СтруктураОбязательныхКолонок Цикл

		Если ТаблицаЗначений.Колонки.Найти(Колонка.Ключ) = Неопределено тогда
			ТаблицаЗначений.Колонки.Добавить(Колонка.Ключ, ПолучитьОписаниеТиповЧисла(15, 2));
		КонецЕсли;

	КонецЦикла;
	
	Если ТаблицаЗначений.Колонки.Найти("ВидЦенности") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("ВидЦенности");
	КонецЕсли;		
	
	Если ТаблицаЗначений.Колонки.Найти("Ценность") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("Ценность");
	КонецЕсли;		
		
	//Определим суммы по документу (Сумму без НДС и корректную основную сумму)
	Если ЕстьНДС или ЕстьВознаграждение тогда

		Для каждого СтрокаТаблицы из ТаблицаЗначений цикл
			
			Если ЕстьВознаграждение Тогда
				// надо посчитать сумму и НДС с комиссионного вознаграждения
				СтрокаТаблицы.СуммаБезНДСВознаграждения = СтрокаТаблицы.СуммаВознаграждения - ?(СуммаВключаетНДС, СтрокаТаблицы.НДСВознаграждения, 0);
				СтрокаТаблицы.СуммаВознаграждения       = СтрокаТаблицы.СуммаБезНДСВознаграждения + ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДСВознаграждения, 0);
			КонецЕсли;
			
			Если ЕстьНДС Тогда
				СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма       - ?(СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
				СтрокаТаблицы.Сумма       = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДС, 0);
			КонецЕсли;
				
		КонецЦикла;

	КонецЕсли;

	Если ЕстьВалюта тогда

		//Заполним валютные колонки суммами документа
		Для каждого Колонка Из СтруктураОбязательныхКолонок Цикл

			Если Прав(Колонка.Ключ, 3) = "Вал" Тогда
				ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку(Лев(Колонка.Ключ, СтрДлина(Колонка.Ключ) - 3)), Колонка.Ключ);
			КонецЕсли;

		КонецЦикла;

		Если Не(СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда

			Если Число(СтруктураШапкиДокумента.КурсДокумента) = 0 или Число(СтруктураШапкиДокумента.КратностьДокумента)=0 тогда
				КоэффициентПересчета=1;
			Иначе
				КоэффициентПересчета = СтруктураШапкиДокумента.КурсДокумента/СтруктураШапкиДокумента.КратностьДокумента;
			КонецЕсли;

			Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл

				СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаВал * КоэффициентПересчета;

				Если ЕстьНДС тогда
					
					СтрокаТаблицы.НДС         = СтрокаТаблицы.НДСВал * КоэффициентПересчета;
					СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДС, 0);

				КонецЕсли;

			КонецЦикла;

		Иначе
			//Необходимо определить сумму расчетов с контрагентом в валюте договора
			Если Число(СтруктураШапкиДокумента.КурсДокумента) = 0 или Число(СтруктураШапкиДокумента.КратностьДокумента) = 0 тогда
				КоэффициентПересчета = 1;
			Иначе
				КоэффициентПересчета = СтруктураШапкиДокумента.КратностьДокумента / СтруктураШапкиДокумента.КурсДокумента;
			КонецЕсли;

			Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл

				СтрокаТаблицы.СуммаВал = СтрокаТаблицы.Сумма*КоэффициентПересчета;

				Если ЕстьНДС тогда

					СтрокаТаблицы.НДСВал         = СтрокаТаблицы.НДС * КоэффициентПересчета;
					СтрокаТаблицы.СуммаБезНДСВал = СтрокаТаблицы.СуммаВал - ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДСВал, 0);

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС(СтруктураШапкиДокумента, ТаблицаЗначений);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРИ ИЗМЕНЕНИИ

// Процедура выполняет общие действия при изменнении контрагента
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//
Процедура ПриИзмененииЗначенияКонтрагента(ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если ДокументОбъект.Контрагент = Неопределено Тогда
		ДокументОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 
	
	Если ТипЗнч(ДокументОбъект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Если ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("Строка") Тогда
				КонтактноеЛицо = "";
			Иначе
				КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе
		Если Константы.ИспользоватьОграниченияСписковВыбора.Получить()
			И НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РазрешитьПолныйСписокДоговоров") Тогда
			
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
		Иначе
		
			ДоговорКонтрагента = ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента;
		
		КонецЕсли; 
		
		Если ЕстьРеквизитДокумента("КонтактноеЛицо", МетаданныеДокумента) Тогда
			Если ЗначениеНеЗаполнено(ДокументОбъект.КонтактноеЛицо)
			 ИЛИ ТипЗнч(ДокументОбъект.КонтактноеЛицо) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
				КонтактноеЛицо = ДокументОбъект.Контрагент.ОсновноеКонтактноеЛицо;
			Иначе
				Если ДокументОбъект.КонтактноеЛицо.Владелец <> ДокументОбъект.Контрагент Тогда
					КонтактноеЛицо = ДокументОбъект.Контрагент.ОсновноеКонтактноеЛицо;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

	Если ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда
		Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
			Если ЗначениеНеЗаполнено(ДокументОбъект.Организация) Тогда
				ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
				ДокументОбъект.Организация           = ДоговорКонтрагента.Организация;
			ИначеЕсли ДокументОбъект.Организация = ДоговорКонтрагента.Организация Тогда
				ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
			Иначе
				ДокументОбъект.ДоговорКонтрагента = Неопределено; // Очистить старый договор
			КонецЕсли;
		Иначе
			ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьРеквизитДокумента("КонтактноеЛицо", МетаданныеДокумента) И КонтактноеЛицо <> Неопределено Тогда
		ДокументОбъект.КонтактноеЛицо = КонтактноеЛицо;
	КонецЕсли; 

	Если ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда
		ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли;

	Если ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И Не ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен)
	   И ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатурыКонтрагентов"
	   И Не ДокументОбъект.ТипЦен.Владелец = ДокументОбъект.Контрагент Тогда
		// очистим тип цен
		ДокументОбъект.ТипЦен =  Неопределено;
	КонецЕсли;

	Если ЕстьРеквизитДокумента("БанковскийСчетКонтрагента", МетаданныеДокумента) Тогда
		ДокументОбъект.БанковскийСчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияКонтрагента()
