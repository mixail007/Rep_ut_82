Процедура ЗарегистрироватьОбъект(Объект,Отказ,ЗаписьИзФормы,ПерезаписатьОбъект=Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат
	КонецЕсли; 
	
	Если Не ЗаписьИзФормы и Объект.ПометкаУдаления = Объект.Ссылка.ПометкаУдаления Тогда
		Возврат
	КонецЕсли; 
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Номенклатура") Тогда
		Если РегистрироватьНоменклатуру(Объект) Тогда
			ВключитьРегистрациюОбъекта(Объект);
		КонецЕсли; 
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		Для каждого Запись Из Объект Цикл
			
			Если ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.Контрагенты")
				или ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.ФизическиеЛица") 
				или ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.Организации")Тогда
				ВключитьРегистрациюОбъекта(Объект);
			КонецЕсли; 
		
		КонецЦикла; 
	ИначеЕсли НЕ Метаданные.Документы.Найти(Объект.Метаданные().Имя) = Неопределено Тогда
		
		Регистрировать = Истина;
		
		Если ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете",Объект.Метаданные()) Тогда
			Регистрировать = Объект.ОтражатьВБухгалтерскомУчете;
		КонецЕсли; 
		
		Если Регистрировать Тогда
			Регистрировать = ОтобратьДокументыПоДопПараметрам(Объект);
		КонецЕсли; 
		
		Если Регистрировать Тогда
			
			//дата документа
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее")
				или ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
				ДатаРегистрации = Объект.ДатаОплаты;
			Иначе
				ДатаРегистрации = Объект.Дата;
			КонецЕсли;
			
			ВключитьРегистрациюОбъекта(Объект,ДатаРегистрации,ПерезаписатьОбъект);
		КонецЕсли; 
	Иначе
		Сообщить("Не определены параметры регистрации объекта: " + Объект); 
	КонецЕсли; 	

КонецПроцедуры

Функция ОтобратьДокументыПоДопПараметрам(Объект) Экспорт
	
	Регистрировать = Истина;
	Причина = "";
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда
		//Регистрировать = (Объект.Склад = Справочники.Склады.НайтиПоНаименованию("Склад ошиповка",Истина));
		Если Регистрировать И Объект.ВидКомплектации =Перечисления.ВидыКомплектации.Производство Тогда
			Регистрировать = ЕстьДопРасходыДляКомплектации(Объект);
		КонецЕсли; 
	
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда	
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			Регистрировать = Ложь;
					 
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
			//должна быть статья затрат "Оплата труда"
			Если не (Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаТруда) Тогда
				Регистрировать = Ложь;
					 
			КонецЕсли;	
		КонецЕсли;
		Регистрировать = Ложь;
	//ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда	
	//	Если  Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
	//		//должна быть статья затрат "Оплата труда"
	//		Регистрировать = (Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаТруда)
	//					или (Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.УслугиБанка)
	//					или (Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПроцентыПоКредитамИЗаймам);
	//		Причина="Статья движения денежных средств должна быть ""Оплата труда"", ""Услуги банка"" или ""Проценты по кредитам и займам""";
	//		
	//	ИначеЕсли  Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда	
	//		//должны быть предопределенные статьи затрат
	//		Если НЕ (Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.КраткосрочныеКредиты 
	//			или Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ДолгосрочныеКредиты
	//			или Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратЗайма) Тогда
	//			Регистрировать = Ложь;
	//			
	//			Причина="Статья движения денежных средств должна быть ""Краткосрочные кредиты"", ""Долгосрочные кредиты"" или ""Возврат займа""";
	//		КонецЕсли;		
	//	КонецЕсли; 
	//ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") Тогда
	//	//должны быть предопределенные статьи затрат
	//	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
	//		Если НЕ (Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.КраткосрочныеКредиты 
	//			или Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ДолгосрочныеКредиты
	//			или Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратЗайма
	//			или Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратПроцентовЗайма) Тогда
	//			Регистрировать = Ложь;
	//			
	//			Причина="Статья движения денежных средств должна быть ""Краткосрочные кредиты"", ""Долгосрочные кредиты"", ""Возврат займа"" или ""Возврат процентов займа""";
	//		КонецЕсли;		
	//	КонецЕсли;	
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда	
		Если  Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
			или Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее
			или Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами Тогда
			Регистрировать = Ложь;
		КонецЕсли; 
		Регистрировать = Ложь;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеДопРасходов") Тогда	
		//если документ-основание "Поступление товаров, услуг", то регистрируем
		//если документ-основание "КомплектацияНоменклатуры", то регистрируем "КомплектацияНоменклатуры"
		Регистрировать = РегистрироватьДопРасходы(Объект);
	КонецЕсли;  
	
	Если не Регистрировать Тогда
		Сообщить("Документ не зарегистрирован для выгрузки в бухгалтерию по причине:"+Символы.ПС+Причина, СтатусСообщения.Информация);
	КонецЕсли;				 
		
	Возврат Регистрировать;
	
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ЕстьДопРасходыДляКомплектации(Объект)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеДопРасходовТовары.Ссылка
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|ГДЕ
	|	ПоступлениеДопРасходовТовары.ДокументПартии = &Док";
	
	Запрос.УстановитьПараметр("Док", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции // ЕстьДопРасходы()
 
// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция РегистрироватьДопРасходы(Объект)
	
	Регистрировать = Ложь;
 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеДопРасходовТовары.Ссылка КАК Ссылка,
	|	ПоступлениеДопРасходовТовары.ДокументПартии,
	|	ВЫБОР
	|		КОГДА ПоступлениеДопРасходовТовары.ДокументПартии ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Регистрировать,
	|	ВЫБОР
	|		КОГДА ПоступлениеДопРасходовТовары.ДокументПартии ССЫЛКА Документ.КомплектацияНоменклатуры
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РегистрироватьДругойДокумент
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|ГДЕ
	|	ПоступлениеДопРасходовТовары.Ссылка = &Ссылка";
	
    Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Регистрировать Тогда
			Регистрировать = Истина;
			Прервать;
		ИначеЕсли Выборка.РегистрироватьДругойДокумент Тогда
			ВключитьРегистрациюОбъекта(Выборка.ДокументПартии.ПолучитьОбъект(),Выборка.ДокументПартии.Дата,Истина);
		КонецЕсли; 
	
	КонецЦикла;
	 	
    Возврат Регистрировать ;

	
КонецФункции // РегистрироватьДопРасходы()

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция РегистрироватьНоменклатуру(Объект)

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				НоменклатураБП.Номенклатура КАК Номенклатура
		|			ИЗ
		|				РегистрСведений.НоменклатураБП КАК НоменклатураБП)
		|	И Номенклатура.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		
		Возврат (НЕ Результат.Пустой())
		 
	
	
КонецФункции // ()
 

//Процедура ВключитьРегистрациюОбъекта(Объект,Дата = Неопределено)

//	ОбменДанными = Объект.ОбменДанными;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ОбменУТ_БП.Ссылка,
//	|	ОбменУТ_БП.ДатаНачалаОбмена
//	|ИЗ
//	|	ПланОбмена.ОбменУТ_БП КАК ОбменУТ_БП
//	|ГДЕ
//	|	ОбменУТ_БП.Ссылка <> &ЭтотУзел";
//	Если НЕ Дата = Неопределено Тогда
//		Запрос.Текст = Запрос.Текст + "
//		|	И ОбменУТ_БП.ДатаНачалаОбмена <= &ДатаОбъекта"; 
//		Запрос.УстановитьПараметр("ДатаОбъекта", Дата);
//	КонецЕсли; 
//	
//	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУТ_БП.ЭтотУзел());
//	
//	Результат = Запрос.Выполнить();
//	Выборка = Результат.Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		ОбменДанными.Получатели.Добавить(Выборка.Ссылка);
//		//Сообщить("Регистрация: " + Объект); 
//		ЗаписатьРегистрацию(Выборка.Ссылка,Объект);
//	КонецЦикла;
//	
//КонецПроцедуры

Процедура ВключитьРегистрациюОбъекта(Объект,Дата = Неопределено,ЭтоДругойДокумент=Ложь) экспорт

	ОбменДанными = Объект.ОбменДанными;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменУТ_БП.Ссылка,
	|	ОбменУТ_БП.ДатаНачалаОбмена
	|ИЗ
	|	ПланОбмена.ОбменУТ_БП КАК ОбменУТ_БП
	|ГДЕ
	|	ОбменУТ_БП.Ссылка <> &ЭтотУзел";
	Если НЕ Дата = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ОбменУТ_БП.ДатаНачалаОбмена <= &ДатаОбъекта"; 
		Запрос.УстановитьПараметр("ДатаОбъекта", Дата);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУТ_БП.ЭтотУзел());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЭтоДругойДокумент Тогда // требуется ЯВНО записать объект
			ОбменДанными.Получатели.Автозаполнение=Ложь;
			ОбменДанными.Получатели.Добавить(Выборка.Ссылка);
			Объект.Записать();
		Иначе // явной записи не требуется, т.к. вызов из процедуры 'ПередЗаписью'
			ОбменДанными.Получатели.Добавить(Выборка.Ссылка);
		КонецЕсли;
	//	ЗаписатьРегистрацию(Выборка.Ссылка,Объект);
	КонецЦикла;
	
КонецПроцедуры


//Процедура ЗаписатьРегистрацию(УзелОбмена,Объект)
//	
//	Если  (Метаданные.Справочники.Найти(Объект.Метаданные().Имя) = Неопределено) 
//		И (Метаданные.Документы.Найти(Объект.Метаданные().Имя) = Неопределено) Тогда
//		Возврат
//	КонецЕсли;

//	Запись = РегистрыСВедений.РегистрацияОбъектов.СоздатьМенеджерЗаписи();
//	Запись.Время = ТекущаяДата();
//	Запись.НомерСообщения =  УзелОбмена.НомерОтправленного;
//	если Объект.ЭтоНовый() Тогда
//		ИД = Новый УникальныйИдентификатор;
//		Если НЕ Метаданные.Справочники.Найти(Объект.Метаданные().Имя) = Неопределено Тогда
//			Ссылка = Справочники[Объект.Метаданные().Имя].ПолучитьСсылку(ИД);
//		ИначеЕсли НЕ Метаданные.Документы.Найти(Объект.Метаданные().Имя) = Неопределено Тогда
//			Ссылка = Документы[Объект.Метаданные().Имя].ПолучитьСсылку(ИД);
//		КонецЕсли;
//		
//		Объект.УстановитьСсылкуНового(Ссылка);
//		Запись.Объект	= Объект.ПолучитьСсылкуНового();
//	Иначе
//		Запись.Объект	= Объект.Ссылка;
//	КонецЕсли;
//	Запись.УзелОбмена = УзелОбмена;
//	Запись.Записать();

//КонецПроцедуры
 
 
// функция по двум узлам возвращает имя самого файла обмена информацией, без пути к файлам
Функция СформироватьИмяФайлаОбменаМеждуУзлами(УзелОтправитель, УзелПолучатель, Знач РасширениеФайла = ".xml") Экспорт
	
	Возврат "Message_" + СокрЛП(УзелОтправитель.Код) + "_" + СокрЛП(УзелПолучатель.Код) + РасширениеФайла;
	
КонецФункции

// Функция возвращает список вышестоящих групп указанного элемента справочника.
// 
// Параметры:
//  СписокГрупп  - Коллекция значений, куда передаются группы
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Список вышестояших групп
//
Процедура ПолучитьСписокВышестоящихГрупп(СписокГрупп, Элемент) Экспорт
	
	Если ЗначениеНеЗаполнено(Элемент) Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Элемент.Родитель) тогда
		Возврат;
	ИначеЕсли Элемент.Родитель <> Элемент Тогда
		СписокГрупп.Добавить(Элемент.Родитель);
		ПолучитьСписокВышестоящихГрупп(СписокГрупп, Элемент.Родитель);
	КонецЕсли;

КонецПроцедуры // ПолучитьСписокВышестоящихГрупп()

