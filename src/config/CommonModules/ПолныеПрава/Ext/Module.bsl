
Функция ЕстьДоступныеПраваДляЗапускаКонфигурации() Экспорт

	ЕстьДоступнаяРоль = Ложь;
	
	МетаданныеНабораПрав  = Метаданные.Перечисления.НаборПравПользователей.ЗначенияПеречисления;
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Для каждого РольПользователя Из ТекущийПользователь.Роли Цикл
		ИмяРоли = СтрЗаменить(РольПользователя.Имя, "СОграничениемПравДоступа", "");
		Если МетаданныеНабораПрав.Найти(ИмяРоли) <> Неопределено Тогда
			ЕстьДоступнаяРоль = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьДоступнаяРоль;
	
КонецФункции

Процедура УстановитьПараметрыСеанса(ТекущийПользователь) Экспорт
	
	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
	
	ПараметрыСеанса.ОбластьДанныхМенеджераПоПродажам  = Перечисления.НаборПравПользователей.МенеджерПоПродажам;
	ПараметрыСеанса.ОбластьДанныхМенеджераПоЗакупкам  = Перечисления.НаборПравПользователей.МенеджерПоЗакупкам;
	ПараметрыСеанса.ОбластьДанныхЗаведующегоСкладом   = Перечисления.НаборПравПользователей.ЗаведующийСкладом;
	ПараметрыСеанса.ОбластьДанныхКладовщика           = Перечисления.НаборПравПользователей.Кладовщик;
	ПараметрыСеанса.ОбластьДанныхКассира              = Перечисления.НаборПравПользователей.Кассир;
	ПараметрыСеанса.ОбластьДанныхОператораККМ         = Перечисления.НаборПравПользователей.ОператорККМ;
	ПараметрыСеанса.ОбластьДанныхАдминистратораККМ    = Перечисления.НаборПравПользователей.АдминистраторККМ;
	
	УстановитьИзменяемыеПараметрыСеансаПользователя();
	
	ПараметрыСеанса.ПустаяОрганизация    = Справочники.Организации.ПустаяСсылка();
	ПараметрыСеанса.ПустойКонтрагент     = Справочники.Контрагенты.ПустаяСсылка();
	ПараметрыСеанса.ПустоеКонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
	ПараметрыСеанса.ПустойПользователь   = Справочники.Пользователи.ПустаяСсылка();
	ПараметрыСеанса.ПрочееКонтактноеЛицо = Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо;
	ПараметрыСеанса.ИмяЛогаКассы		 = СтрЗаменить(СтрЗаменить(СтрЗаменить(Формат(ТекущаяДата(),"ДЛФ=ДВ"),":",""),".","")," ","") + "LogFR.txt";
	//18.04.14 Смирнов
	УстановитьДоступныеУчетныеЗаписиЭлектроннойПочты();
КонецПроцедуры
//18.04.14 Смирнов
Процедура УстановитьДоступныеУчетныеЗаписиЭлектроннойПочты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	// Группы доступа пользователя
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты.ДоступКУчетнойЗаписи КАК УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Пользователь = &ТекущийПользователь";
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ПараметрыСеанса.ДоступныеУчетныеЗаписиЭлектроннойПочты = Новый ФиксированныйМассив(Массив);
КонецПроцедуры


Процедура УстановитьИзменяемыеПараметрыСеансаПользователя() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	// Группы доступа пользователя
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справочник.ГруппыПользователей.Ссылка КАК Значение
	|ИЗ
	|	Справочник.ГруппыПользователей
	|ГДЕ
	|	Справочник.ГруппыПользователей.ПользователиГруппы.Пользователь = &ТекущийПользователь
	|";
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
	Массив.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
	Массив.Добавить(ПараметрыСеанса.ТекущийПользователь);
	ПараметрыСеанса.ГруппыТекущегоПользователя = Новый ФиксированныйМассив(Массив);
	
	СписокГруппПользователей = Новый СписокЗначений;
	СписокГруппПользователей.ЗагрузитьЗначения(Массив);
	
	Запрос.УстановитьПараметр("СписокГруппПользователей", СписокГруппПользователей);
	
КонецПроцедуры

Функция ВыполнитьУстановкуПериодаИтогов(СписокРегистровКРассчету, ПредпочтительнаяДатаРасчетаИтогов) Экспорт
	СписокРассчитанных = Новый СписокЗначений;
	Для Каждого РегистрИзСписка Из СписокРегистровКРассчету Цикл
		РегистрИзСписка.Значение.УстановитьПериодРассчитанныхИтогов(ПредпочтительнаяДатаРасчетаИтогов );
		МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(РегистрИзСписка.Значение));
		
		// повторная проверка прав нужна, так как процедура экспортная
		Если Не ПравоДоступа("УправлениеИтогами", МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра) Тогда
			ТипРегистра = " накопления ";
		Иначе
			ТипРегистра = " бухгалтерии "
		КонецЕсли;
		
		СписокРассчитанных.Добавить(ТипРегистра, МетаданныеРегистра.Синоним);
		
	КонецЦикла;
	
	Возврат СписокРассчитанных;
	
КонецФункции

Функция ОпределитьНаличиеДвиженийПоРегистратору(ДокументСсылка) Экспорт
	ТекстЗапроса = "";	
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданнныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданнныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданнныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции
