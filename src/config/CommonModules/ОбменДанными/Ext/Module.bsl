//Функция ПолучитьВходящуюЦену(Дата, Номенклатура)
//	
//	Если ЗначениеНеЗаполнено(Константы.ПродажиЧерезЧПТипЦенЗакупкиПриВыгрузке.Получить()) Тогда
//		
//		Возврат 0;
//		
//	Иначе
//		
//		Отбор = Новый Структура("ТипЦен, Номенклатура");
//		
//		Отбор.ТипЦен = Константы.ПродажиЧерезЧПТипЦенЗакупкиПриВыгрузке.Получить();
//		Отбор.Номенклатура = Номенклатура;

//		ТЦен = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(НачалоДня(Дата), Отбор);
//		
//		Возврат ?(ТЦен.Количество() > 0, ТЦен[0].Цена, 0);
//		
//	
//	КонецЕсли; 
//	
//	
//КонецФункции

//Функция СоздатьФайлДокумента(НомерДокумента, ИмяДокумента, ЭлементМассива, ГрупповаяОбработка = Ложь, ОписаниеОшибки = "")
//	
//	ИмяФайлаДокумента = СокрЛП(Константы.ПродажиЧерезЧПКаталогВыгрузкиДокументовРеализации.Получить()) + 
//						?(Прав(СокрЛП(Константы.ПродажиЧерезЧПКаталогВыгрузкиДокументовРеализации.Получить()), 1) = "\", "", "\") +
//						 НомерДокумента + ".dbf";
//	
//	ФайлД = Новый Файл(ИмяФайлаДокумента);					 
//	
//	Если ФайлД.Существует() Тогда
//	
//		ОписаниеОшибки = "Файл документа уже существует! Документ выгружался!";
//		Возврат Ложь;
//	
//	КонецЕсли;
//	
//	
//	ДБФДокумента = Новый XBase;
//	ДБФДокумента.Кодировка = КодировкаXBase.ANSI;
//	ДБФДокумента.поля.Добавить("CODE", "S", 7);
//	ДБФДокумента.поля.Добавить("PRICE", "N", 15, 2);
//	ДБФДокумента.поля.Добавить("SUM", "N", 15, 2);
//	ДБФДокумента.поля.Добавить("QTY", "N", 15, 3);
//	ДБФДокумента.поля.Добавить("INPRICE", "N", 15, 2);
//	ДБФДокумента.поля.Добавить("GOOD", "S", 255);
//	
//	ДБФДокумента.СоздатьФайл(ИмяФайлаДокумента);
//	
//	Для каждого СтрокаДока Из ЭлементМассива.Товары Цикл
//	
//		ДБФДокумента.Добавить();
//		ДБФДокумента.CODE = СтрокаДока.Номенклатура.Код;
//		ДБФДокумента.PRICE = СтрокаДока.Цена;
//		ДБФДокумента.SUM = СтрокаДока.Сумма;
//		ДБФДокумента.QTY = СтрокаДока.Количество;
//		ДБФДокумента.INPRICE = ПолучитьВходящуюЦену(ЭлементМассива.Дата, СтрокаДока.Номенклатура);
//		ДБФДокумента.GOOD = СтрокаДока.Номенклатура.Наименование;
//		ДБФДокумента.Записать();
//	
//	КонецЦикла; 
//	
//	
//	
//	ДБФДокумента.ЗакрытьФайл();
//	
//	Если ГрупповаяОбработка Тогда
//		
//		ДокОбъект = ЭлементМассива.ПолучитьОбъект();
//		ДокОбъект.Выгружен = Истина;
//		Записан = Ложь;
//		
//		Пока НЕ Записан Цикл
//			
//			Состояние("Попытка изменить статус документа ""Выгружен""");
//			
//			Попытка
//				
//				ДокОбъект.Записать();
//				Записан = Истина;
//				
//			Исключение
//				
//				Записан = Ложь;
//				
//			КонецПопытки; 	
//			
//			
//		КонецЦикла; 
//		
//		
//		
//	КонецЕсли; 

//	Возврат Истина;	
//	
//КонецФункции

//Функция ПолучитьДБФДоков(ОписаниеОшибки = "")

//	Если ЗначениеНеЗаполнено(Константы.ПродажиЧерезЧПКаталогВыгрузкиДокументовРеализации.Получить()) Тогда
//	
//		ОписаниеОшибки = "Не установлено значение каталога выгрузки!";
//		Возврат Ложь;
//	
//	КонецЕсли; 
//	
//	СоздатьКаталог(СокрЛП(Константы.ПродажиЧерезЧПКаталогВыгрузкиДокументовРеализации.Получить()));
//	
//	
//	ИмяФайла = СокрЛП(Константы.ПродажиЧерезЧПКаталогВыгрузкиДокументовРеализации.Получить()) + 
//					?(Прав(СокрЛП(Константы.ПродажиЧерезЧПКаталогВыгрузкиДокументовРеализации.Получить()), 1) = "\", "", "\") +
//					"ExpList.dbf";
//					
//	Файл = Новый Файл(ИмяФайла);
//	
//	Если НЕ Файл.Существует() Тогда
//	
//		ДБФДоков = Новый XBase;
//		ДБФДоков.Кодировка = КодировкаXBase.ANSI;
//		ДБФДоков.поля.Добавить("DOCNUM", "S", 8);
//		ДБФДоков.поля.Добавить("DOCNAME", "S", 16);
//		ДБФДоков.поля.Добавить("DOCDATE", "D");
//		ДБФДоков.поля.Добавить("SUM", "N", 15, 2);
//		ДБФДоков.поля.Добавить("COMMENT", "S", 255);
//		ДБФДоков.поля.Добавить("KONTRAGENT", "S", 255);
//		ДБФДоков.поля.Добавить("INN", "S", 14);
//		ДБФДоков.поля.Добавить("KPP", "S", 14);
//		ДБФДоков.поля.Добавить("URLIC", "L");
//		ДБФДоков.поля.Добавить("FULLNAME", "S", 255);
//		ДБФДоков.поля.Добавить("FIO", "S", 14);
//		ДБФДоков.поля.Добавить("DOC", "S", 14);
//		ДБФДоков.поля.Добавить("TAKED", "L");
//		ДБФДоков.поля.Добавить("FILENAME", "S", 50);
//		ДБФДоков.поля.Добавить("ORDER", "S", 50);
//		ДБФДоков.СоздатьФайл(ИмяФайла);
//		ДБФДоков.ЗакрытьФайл();
//		ДБФДоков = ИмяФайла;
//	
//	КонецЕсли; 
//	
//	Возврат ИмяФайла;
//	
//	
//КонецФункции

//Функция НайтиДок(ДБФДоков, ИмяДокумента, НомерДокумента, ДатаДокумента)
//	
//	ДБФ = Новый XBase;
//	
//	Пока НЕ ДБФ.Открыта() Цикл
//	
//		ДБФ.ОткрытьФайл(ДБФДоков);
//		Состояние("Попытка открыть файл данных " + ДБФДоков);
//		
//	КонецЦикла; 
//	
//	ДБФ.Первая();
//	
//	Пока НЕ ДБФ.ВКонце() Цикл
//	
//		Если (СокрЛП(ДБФ.DOCNUM) = НомерДокумента
//			 ИЛИ СокрЛП(ДБФ.DOCNAME) = ИмяДокумента) 
//			 И (НачалоДня(ДБФ.DOCDATE) = НачалоДня(ДатаДокумента)) Тогда
//			 
//			 ДБФ.ЗакрытьФайл();
//			 
//			 Возврат Истина;
//			
//		 КонецЕсли; 
//		 
//		 ДБФ.Следующая();
//	
//	КонецЦикла; 
//	
//	ДБФ.ЗакрытьФайл();
//	
//	Возврат Ложь;
//	
//КонецФункции

//Функция ДобавитьДокументВСписокВыгрузки(ДБФДоков, ИмяДокумента, НомерДокумента, ЭлементМассива, ОписаниеОшибки = "")
//	
//	ДБФСписка = Новый XBase;
//	
//	Пока НЕ ДБФСписка.Открыта() Цикл
//	
//		ДБФСписка.ОткрытьФайл(ДБФДоков);
//		Состояние("Попытка открыть файл данных " + ДБФДоков);
//		
//	КонецЦикла;
//	
//	ДБФСписка.Добавить();
//	ДБФСписка.DOCNUM = НомерДокумента;	
//	ДБФСписка.DOCDATE = ЭлементМассива.Дата;
//	ДБФСписка.DOCNAME = ИмяДокумента;
//	ДБФСписка.SUM = ЭлементМассива.СуммаДокумента;
//	ДБФСписка.COMMENT = ЭлементМассива.Комментарий;
//	ДБФСписка.KONTRAGENT = ЭлементМассива.Контрагент.Наименование;
//	ДБФСписка.INN = ЭлементМассива.Контрагент.ИНН;
//	ДБФСписка.KPP = ЭлементМассива.Контрагент.КПП;
//	ДБФСписка.URLIC = ?(ЭлементМассива.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, Истина, Ложь);
//	ДБФСписка.FULLNAME = ЭлементМассива.Контрагент.НаименованиеПолное;
//	ДБФСписка.DOC = ЭлементМассива.Контрагент.ДокументУдостоверяющийЛичность;
//	ДБФСписка.FILENAME = НомерДокумента + ".DBF";
//	ДБФСписка.ORDER = ?(ЗначениеНеЗаполнено(ЭлементМассива.Сделка), "", Строка(ЭлементМассива.Сделка.Номер) + " от " + Строка(Формат(ЭлементМассива.Сделка.Дата, "ДЛФ=Д")));
//	ДБФСписка.Записать();
//	ДБФСписка.ЗакрытьФайл();
//	
//	Возврат Истина;
//	
//	
//КонецФункции
// 

//Функция ВыгрузитьДокументы(СписокДляВыгрузки, ГрупповаяОбработка = Ложь, ОписаниеОшибки = "")

//	ДБФДоков = ПолучитьДБФДоков(ОписаниеОшибки);
//	
//	Если ДБФДоков = Ложь Тогда
//	
//		Возврат Ложь;
//	
//	КонецЕсли; 
//	
//	Если СписокДляВыгрузки.Количество() > 0 Тогда
//		
//		Для каждого ЭлементМассива Из СписокДляВыгрузки Цикл
//			
//			ИмяДокумента = СокрЛП(Строка(ЭлементМассива.Номер)) + "_" + СокрЛП(СтрЗаменить(Формат(ЭлементМассива.Дата, "ДЛФ=Д"), ".", ""));
//			НомерДокумента = СокрЛП(Строка(ЭлементМассива.Номер));
//			
//			Если НЕ НайтиДок(ДБФДоков, ИмяДокумента, НомерДокумента, ЭлементМассива.Дата) Тогда
//				
//				Если НЕ СоздатьФайлДокумента(НомерДокумента, ИмяДокумента, ЭлементМассива, ГрупповаяОбработка, ОписаниеОшибки) Тогда
//				
//					Возврат Ложь;	
//				
//				КонецЕсли; 
//				
//				Если НЕ ДобавитьДокументВСписокВыгрузки(ДБФДоков, ИмяДокумента, НомерДокумента, ЭлементМассива, ОписаниеОшибки) Тогда
//				
//					Возврат Ложь;	
//				
//				КонецЕсли;
//				
//			Иначе 
//				
//				Предупреждение("Данный документ уже был выгружен!", 5);
//			
//			КонецЕсли; 
//		
//		КонецЦикла; 
//		
//	Иначе
//		
//		Предупреждение("За выбранный период нет документов для выгрузки!", 5); 
//	
//	КонецЕсли; 
//	
//	Возврат Истина;
//	
//КонецФункции 

//Функция СоставитьСписокДокументовДляВыгрузки(НачПериода, КонПериода)
//	
//	СписокДляВыгрузки = Новый СписокЗначений;
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ДатаНач", НачПериода);
//	Запрос.УстановитьПараметр("ДатаКон", КонПериода);
//	
//	Запрос.Текст =
//	
//	"ВЫБРАТЬ
//	|	РеализацияТоваровУслуг.Ссылка КАК Док
//	|ИЗ
//	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
//	|ГДЕ
//	|	РеализацияТоваровУслуг.ОтгрузкаЧерезЧП = ИСТИНА
//	|	И РеализацияТоваровУслуг.Выгружен = ЛОЖЬ
//	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон";
//	
//	Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Док");
//	
//	
//КонецФункции

//Процедура ВыгрузитьДанныеПоОтгрузкамНаЧП(ДокументСсылка = Неопределено, Статус = Ложь, ОписаниеОшибки = "") Экспорт

//	Если ДокументСсылка = Неопределено Тогда
//	
//		ФормаВводаПериода = ПолучитьОбщуюФорму("ВводПериода");
//		ФормаВводаПериода.Заголовок = "Выберите период выгрузки документов";
//		ФормаВводаПериода.НачПериода = НачалоДня(ТекущаяДата());
//		ФормаВводаПериода.КонПериода = КонецДня(ТекущаяДата());
//		
//		Если ФормаВводаПериода.ОткрытьМодально() <> Истина Тогда
//			
//			Статус = Ложь;
//			Возврат;
//		
//		КонецЕсли;
//		
//		Если ЗначениеНеЗаполнено(ФормаВводаПериода.НачПериода) ИЛИ ЗначениеНеЗаполнено(ФормаВводаПериода.КонПериода) Тогда
//			
//			Сообщить("Необходимо указать период. Выгрузка не будет производится!", СтатусСообщения.Важное);
//			Статус = Ложь;
//			Возврат;
//		
//		КонецЕсли;
//		
//		Если ФормаВводаПериода.НачПериода > ФормаВводаПериода.КонПериода Тогда
//		
//			Сообщить("Необходимо указать верный период. Выгрузка не будет производится!", СтатусСообщения.Важное);
//			Статус = Ложь;
//			Возврат;
//		
//		КонецЕсли;
//		
//		СписокДляВыгрузки = СоставитьСписокДокументовДляВыгрузки(ФормаВводаПериода.НачПериода, ФормаВводаПериода.КонПериода);
//		ГрупповаяОбработка = Истина;
//		
//	Иначе
//		
//		СписокДляВыгрузки = Новый Массив;
//		СписокДляВыгрузки.Добавить(ДокументСсылка);
//		ГрупповаяОбработка = Ложь;
//	
//	КонецЕсли; 
//	
//	Статус = ВыгрузитьДокументы(СписокДляВыгрузки, ГрупповаяОбработка, ОписаниеОшибки);

//КонецПроцедуры

//Функция СоздатьДокументПрихода(СтруктураДоков, ТабДока, ДокПрихода, ОписаниеОшибки = "")

//	Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
//	Док.Дата = ТекущаяДата();
//	Док.Организация = Константы.ПродажиЧерезЧПТоргующаяОрганизация.Получить();
//	Док.Контрагент = Константы.ПродажиЧерезЧПОрганизацияДляЗагрузки.Получить();
//	Док.СкладОрдер = Константы.ПродажиЧерезЧПСкладОтгрузки.Получить();
//	Док.ТипЦен = Константы.ПродажиЧерезЧПТипЦенПриходаПриЗагрузке.Получить();
//	Док.ОтражатьВУправленческомУчете = Истина;
//	Док.ОтражатьВБухгалтерскомУчете = Истина;
//	Док.ОтражатьВНалоговомУчете = Истина;
//	Док.СуммаВключаетНДС = Истина;
//	Док.УчитыватьНДС = Истина;
//	Док.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
//	Док.ДоговорКонтрагента = Константы.ПродажиЧерезЧПДоговорЗакупки.Получить();
//	Док.ВалютаДокумента = Док.ДоговорКонтрагента.ВалютаВзаиморасчетов;
//	Док.КурсВзаиморасчетов = 1;
//	Док.КратностьВзаиморасчетов = 1;
//	Док.Комментарий = "Приход по заказу " + СтруктураДоков.Заказ + " " + СтруктураДоков.КомментарийРеализации; 

//	Для каждого СтрокаДока Из ТабДока Цикл
//	
//		СтрДока = Док.Товары.Добавить();
//		СтрДока.Номенклатура = СтрокаДока.Номенклатура;
//		СтрДока.Количество = СтрокаДока.Количество;
//		СтрДока.Цена = ?(СтрокаДока.ЦенаВходящая = 0, 1, СтрокаДока.ЦенаВходящая);
//		СтрДока.Сумма = СтрДока.Количество * СтрДока.Цена;
//		СтрДока.ЕдиницаИзмерения = СтрДока.Номенклатура.ЕдиницаХраненияОстатков;
//		СтрДока.Коэффициент = 1;
//		СтрДока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
//		СтрДока.СуммаНДС = СтрДока.Сумма*18/118;
//	
//	КонецЦикла;
//	
//	Попытка
//		
//		Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
//		ДокПрихода = Док.Ссылка;
//		
//	Исключение
//		
//		ОписаниеОшибки = "Невозможно провести документ.";
//		Возврат Ложь;
//		
//	КонецПопытки;
//	
//	Возврат Истина;
//	
//КонецФункции

//Функция РазбитьПоКоличеству(ТабДока)
//	
//	МаксимальноеКоличество = Константы.ПродажиЧерезЧПМаксимальноеКоличествоТоваровВПродаже.Получить();
//	
//	ТаблицаДоков = ТабДока.Скопировать();
//	ТаблицаДоков.Очистить();
//	ТаблицаДоков.Колонки.Добавить("НомерДока");
//	
//	НомерДока = 1;
//	Остаток = 0;
//	
//	Для каждого СтрокаТаб Из ТабДока Цикл
//		
//		Если Остаток > 0 Тогда
//			
//			Если Остаток + СтрокаТаб.Количество <= МаксимальноеКоличество Тогда
//			
//				СтрокаТаблицы = ТаблицаДоков.Добавить();
//				СтрокаТаблицы.НомерДока = НомерДока;
//				СтрокаТаблицы.Количество = СтрокаТаб.Количество;
//				СтрокаТаблицы.Цена = СтрокаТаб.Цена;
//				СтрокаТаблицы.Сумма = СтрокаТаб.Количество * СтрокаТаб.Цена;
//				СтрокаТаблицы.Номенклатура = СтрокаТаб.Номенклатура;
//				Остаток = Остаток - СтрокаТаб.Количество;
//				
//				Если Остаток = 0 Тогда
//				
//					НомерДока = НомерДока + 1;	
//				
//				КонецЕсли; 
//				
//				Продолжить;
//				
//			Иначе
//				
//				СтрокаТаблицы = ТаблицаДоков.Добавить();
//				СтрокаТаблицы.НомерДока = НомерДока;
//				СтрокаТаблицы.Количество = МаксимальноеКоличество - Остаток;
//				СтрокаТаблицы.Цена = СтрокаТаб.Цена;
//				СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество * СтрокаТаб.Цена;
//				СтрокаТаблицы.Номенклатура = СтрокаТаб.Номенклатура;
//				Остаток = 0;
//				НомерДока = НомерДока + 1;
//				КолвоСтроки = СтрокаТаб.Количество - СтрокаТаблицы.Количество;
//				//Продолжить;
//				
//			
//			КонецЕсли; 
//			
//		Иначе
//			
//			КолвоСтроки = СтрокаТаб.Количество;	
//		
//		КонецЕсли; 
//		
//		
//		КоличествоИтераций = КолвоСтроки / МаксимальноеКоличество;
//		
//		Если КоличествоИтераций < 1 Тогда
//			
//			Остаток = МаксимальноеКоличество - КолвоСтроки;
//			Повторов = 1;
//			
//		Иначе
//			
//			Если Цел(КоличествоИтераций) <> КоличествоИтераций Тогда
//			
//				Остаток = КолвоСтроки - (Цел(КоличествоИтераций) * МаксимальноеКоличество);
//				Повторов = Цел(КоличествоИтераций) + 1;
//			
//			КонецЕсли; 
//		
//		КонецЕсли; 
//		
//		
//		Для Сч=1 По Повторов Цикл
//		
//			СтрокаТаблицы = ТаблицаДоков.Добавить();
//			СтрокаТаблицы.НомерДока = НомерДока;
//			СтрокаТаблицы.Количество = ?(Сч = Повторов, Остаток, МаксимальноеКоличество);
//			СтрокаТаблицы.Цена = СтрокаТаб.Цена;
//			СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество * СтрокаТаб.Цена;
//			СтрокаТаблицы.Номенклатура = СтрокаТаб.Номенклатура;
//			
//			Если НЕ((Сч = Повторов)
//				 И (Остаток > 0)) Тогда
//				 
//				НомерДока = НомерДока + 1;
//				
//			
//			КонецЕсли; 
//			
//		КонецЦикла; 
//		
//	
//	КонецЦикла; 
//	
//	Возврат ТаблицаДоков;
//	
//КонецФункции

//Функция РазбитьПоСумме(ТабДока)
//	
//	МаксимальнаяСумма = Константы.ПродажиЧерезЧПМаксимальноеКоличествоТоваровВПродаже.Получить();
//	
//КонецФункции

//Функция СоздатьДокументыРасхода(СтруктураДока, ТабДока, ДокПрихода, ОписаниеОшибки = "")

//	Если (?(НЕ ЗначениеНеЗаполнено(СтруктураДока.ИНН), Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СтруктураДока.ИНН) = Справочники.Контрагенты.ПустаяСсылка(), Ложь)) 
//		ИЛИ (Справочники.Контрагенты.НайтиПоНаименованию(СтруктураДока.Контрагент) = Справочники.Контрагенты.ПустаяСсылка()) Тогда
//		
//		ГруппаПокупателей = Справочники.Контрагенты.НайтиПоНаименованию("Розничные покупатели");
//		
//		Если ГруппаПокупателей = Справочники.Контрагенты.ПустаяСсылка() Тогда
//			
//			НоваяГруппа = Справочники.Контрагенты.СоздатьГруппу();
//			НоваяГруппа.Наименование = "Розничные покупатели";
//			НоваяГруппа.Родитель = Справочники.Номенклатура.ПустаяСсылка();
//			НоваяГруппа.Записать();
//			ГруппаПокупателей = НоваяГруппа.Ссылка;
//		
//		Иначе
//			
//			Если НЕ ГруппаПокупателей.ЭтоГруппа Тогда
//			
//				НоваяГруппа = Справочники.Контрагенты.СоздатьГруппу();
//				НоваяГруппа.Наименование = "Розничные покупатели";
//				НоваяГруппа.Родитель = Справочники.Номенклатура.ПустаяСсылка();
//				НоваяГруппа.Записать();
//				ГруппаПокупателей = НоваяГруппа.Ссылка;
//			
//			КонецЕсли; 
//		
//		КонецЕсли;
//		
//		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
//		НовыйКонтрагент.Родитель = ГруппаПокупателей;
//		НовыйКонтрагент.Наименование = СтруктураДока.Контрагент;
//		НовыйКонтрагент.ИНН = СтруктураДока.ИНН;
//		НовыйКонтрагент.КПП = СтруктураДока.КПП;
//		НовыйКонтрагент.ЮрФизЛицо = ?(СтруктураДока.ПризнакЮрЛица, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
//		НовыйКонтрагент.НаименованиеПолное = СтруктураДока.КонтрагентНаименованиеПолное;
//		НовыйКонтрагент.ДокументУдостоверяющийЛичность = СтруктураДока.КонтрагентДокумент;
//		НовыйКонтрагент.Покупатель = Истина;
//		НовыйКонтрагент.Записать();
//		КонтрагентСсылка = НовыйКонтрагент.Ссылка;
//		
//	Иначе
//		
//		Если НЕ ЗначениеНеЗаполнено(СтруктураДока.ИНН) Тогда
//			
//			КонтрагентСсылка = ?(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СтруктураДока.ИНН) = Справочники.Контрагенты.ПустаяСсылка(), 
//							 Справочники.Контрагенты.НайтиПоНаименованию(СтруктураДока.Контрагент), 
//							 Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СтруктураДока.ИНН));
//		Иначе
//							 
//			КонтрагентСсылка = Справочники.Контрагенты.НайтиПоНаименованию(СтруктураДока.Контрагент);
//			
//		КонецЕсли;					 
//		
//	КонецЕсли; 
//	
//	Если Константы.ПродажиЧерезЧПИспользоватьОграничения.Получить() Тогда
//	
//		Если Константы.ПродажиЧерезЧПВидОграничения.Получить() = 0 Тогда
//		
//			ТаблицаЗаполнения = РазбитьПоКоличеству(ТабДока);
//			
//		Иначе
//			
//			ТаблицаЗаполнения = РазбитьПоСумме(ТабДока);
//			
//		КонецЕсли; 	
//		
//	Иначе
//		
//		ТаблицаЗаполнения = ТабДока.Скопировать();
//		ТаблицаЗаполнения.Колонки.Добавить("НомерДока");
//		ТаблицаЗаполнения.ЗаполнитьЗначения(1, "НомерДока");
//	
//	КонецЕсли; 
//	
//	ТаблицаЗаполнения.Сортировать("НомерДока ВОЗР");
//	
//	//НачатьТранзакцию();
//	
//	Если ТаблицаЗаполнения.Количество() > 0 Тогда
//		
//		
//		Док = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
//		Док.Дата = ТекущаяДата();
//		НомерДока = ТаблицаЗаполнения[0].НомерДока;
//		Док.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
//		Док.КассаККМ = Константы.ПродажиЧерезЧПККМ.Получить();
//		Док.Контрагент = КонтрагентСсылка;
//		Док.Организация = Константы.ПродажиЧерезЧПТоргующаяОрганизация.Получить();
//		Док.КассаККМ = Константы.ПродажиЧерезЧПККМ.Получить();
//		Док.Склад = Константы.ПродажиЧерезЧПСкладОтгрузки.Получить();
//		Док.Комментарий = "Документ по заказу " + СтруктураДока.Заказ + " " + СтруктураДока.КомментарийРеализации;
//		//-----
//		Док.ОтражатьВУправленческомУчете = Истина;
//		Док.ОтражатьВБухгалтерскомУчете = Истина;
//		Док.ОтражатьВНалоговомУчете = Истина;
//		
//		
//		Для каждого Стр Из ТаблицаЗаполнения Цикл
//			
//			Если НомерДока <> Стр.НомерДока Тогда
//				
//				НомерДока = Стр.НомерДока;
//				
//				Попытка
//				
//					Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
//				
//				Исключение
//					
//					ОписаниеОшибки = "Невозможно провести документ расхода.";
//					Возврат Ложь;

//				КонецПопытки; 
//				
//				Док = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
//				Док.Дата = ТекущаяДата();
//				Док.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
//				Док.КассаККМ = Константы.ПродажиЧерезЧПККМ.Получить();
//				Док.Контрагент = КонтрагентСсылка;
//				Док.Организация = Константы.ПродажиЧерезЧПТоргующаяОрганизация.Получить();
//				Док.КассаККМ = Константы.ПродажиЧерезЧПККМ.Получить();
//				Док.Склад = Константы.ПродажиЧерезЧПСкладОтгрузки.Получить();
//				Док.Комментарий = "Документ по заказу " + СтруктураДока.Заказ + " " + СтруктураДока.КомментарийРеализации;
//				Док.ОтражатьВУправленческомУчете = Истина;
//				Док.ОтражатьВБухгалтерскомУчете = Истина;
//				Док.ОтражатьВНалоговомУчете = Истина;
//				Док.ТипЦен = Константы.ПродажиЧерезЧПТипЦенПродажиПриЗагрузке.Получить();
//		
//			КонецЕсли; 
//			
//			СтрокаТоваров = Док.Товары.Добавить();
//			СтрокаТоваров.ДокументОснование = ДокПрихода;
//			СтрокаТоваров.Номенклатура = Стр.Номенклатура;
//			СтрокаТоваров.Количество = Стр.Количество;
//			СтрокаТоваров.Цена = Стр.Цена;
//			СтрокаТоваров.Сумма = Стр.Сумма;
//			СтрокаТоваров.Коэффициент = 1;
//			СтрокаТоваров.ЕдиницаИзмерения = СтрокаТоваров.Номенклатура.ЕдиницаХраненияОстатков;
//			СтрокаТоваров.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
//						
//			
//		КонецЦикла; 
//		
//		Попытка
//			
//			Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
//			
//		Исключение
//			
//			ОписаниеОшибки = "Невозможно провести документ расхода.";
//			Возврат Ложь;
//			
//		КонецПопытки; 
//		
//	КонецЕсли;
//		
//	Возврат Истина;
//	
//КонецФункции


//Функция СоздатьДокументыОРПиПриход(СтруктураДоков, ОписаниеОшибки = "")
//	
//	ДБФДока = Новый XBase;
//	
//	ИмяФайла = СтруктураДоков.Каталог + 
//			   ?(Прав(СокрЛП(СтруктураДоков.Каталог), 1) = "\", "", "\") +
//			   СтруктураДоков.ИмяФайла;
//			   
//	Ф = Новый Файл(ИмяФайла);
//	
//	Если НЕ Ф.Существует() Тогда
//	
//		ОписаниеОшибки = "Файл " + ИмяФайла + " не найден. Возможно был удален!";
//		Возврат Ложь;
//		
//	КонецЕсли; 
//	
//	Пока НЕ ДБФДока.Открыта() Цикл
//	
//		ДБФДока.ОткрытьФайл(ИмяФайла);
//		Состояние("Попытка открыть файл данных " + ИмяФайла);
//		
//	КонецЦикла;

//	
//	ТабДока = Новый ТаблицаЗначений;
//	ТабДока.Очистить();
//	ТабДока.Колонки.Добавить("НоменклатураКод");
//	ТабДока.Колонки.Добавить("НоменклатураНаименование");
//	ТабДока.Колонки.Добавить("Номенклатура");
//	ТабДока.Колонки.Добавить("Цена");
//	ТабДока.Колонки.Добавить("Количество");
//	ТабДока.Колонки.Добавить("Сумма");
//	ТабДока.Колонки.Добавить("ЦенаВходящая");
//	
//	ДБФДока.Первая();
//	
//	Состояние("Чтение данных из файла " + ИмяФайла);
//	
//	Пока НЕ ДБФДока.ВКонце() Цикл
//	
//		СтрокаДока = ТабДока.Добавить();
//		СтрокаДока.НоменклатураКод = СокрЛП(ДБФДока.CODE);
//		СтрокаДока.НоменклатураНаименование = СокрЛП(ДБФДока.GOOD);
//		СтрокаДока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(ДБФДока.CODE));
//		СтрокаДока.Цена = ДБФДока.PRICE;
//		СтрокаДока.Количество = ДБФДока.QTY;
//		СтрокаДока.Сумма = ДБФДока.SUM;
//		СтрокаДока.ЦенаВходящая = ДБФДока.INPRICE;
//		
//		ДБФДока.Следующая();
//		
//	КонецЦикла;
//	
//	ДокПрихода = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
//	
//	НачатьТранзакцию();
//	
//	Если НЕ СоздатьДокументПрихода(СтруктураДоков, ТабДока, ДокПрихода, ОписаниеОшибки) Тогда
//		
//		ОтменитьТранзакцию();
//		ОписаниеОшибки = "Не удалось создать документ прихода!";
//		Возврат Ложь;
//		
//	КонецЕсли; 

//	Если НЕ СоздатьДокументыРасхода(СтруктураДоков, ТабДока, ДокПрихода, ОписаниеОшибки) Тогда
//		
//		ОтменитьТранзакцию();
//		ОписаниеОшибки = "Не удалось создать документы расхода!";
//		Возврат Ложь;
//		
//	КонецЕсли; 

//	ЗафиксироватьТранзакцию();
//	Возврат Истина;
//	
//КонецФункции


//Функция ЗагрузитьДокументы(ИмяФайла, ОписаниеОшибки = "")
//	
//	ДБФДоков = Новый XBase;
//		
//	Пока НЕ ДБФДоков.Открыта() Цикл
//	
//		ДБФДоков.ОткрытьФайл(ИмяФайла);
//		Состояние("Попытка открыть файл данных " + ИмяФайла);
//		
//	КонецЦикла;

//	ДБФДоков.Первая();
//	
//	Пока НЕ ДБФДоков.ВКонце() Цикл
//	
//		Если НЕ ДБФДоков.TAKED Тогда
//			
//			СтруктураДоков = Новый Структура(
//									"НомерДокумента,
//									|ИмяДокумента,
//									|ДатаДокумента,
//									|СуммаДокумента,
//									|КомментарийРеализации,
//									|Контрагент,
//									|ИНН,
//									|КПП,
//									|ПризнакЮрЛица,
//									|КонтрагентНаименованиеПолное,
//									|КонтрагентФИО,
//									|КонтрагентДокумент,
//									|ИмяФайла,
//									|Заказ,
//									|Каталог",
//									СокрЛП(ДБФДоков.DOCNUM),
//									СокрЛП(ДБФДоков.DOCNAME),
//									ДБФДоков.DOCDATE,
//									ДБФДоков.SUM,
//									СокрЛП(ДБФДоков.COMMENT),
//									СокрЛП(ДБФДоков.KONTRAGENT),
//									СокрЛП(ДБФДоков.INN),
//									СокрЛП(ДБФДоков.KPP),
//									ДБФДоков.URLIC,
//									СокрЛП(ДБФДоков.FULLNAME),
//									СокрЛП(ДБФДоков.FIO),
//									СокрЛП(ДБФДоков.DOC),
//									СокрЛП(ДБФДоков.FILENAME),
//									СокрЛП(ДБФДоков.ORDER),
//									Константы.ПродажиЧерезЧПКаталогВыгрузкиДокументовРеализации.Получить());
//									
//			Если СоздатьДокументыОРПиПриход(СтруктураДоков, ОписаниеОшибки) Тогда
//				
//				ДБФДоков.TAKED = Истина;
//				ДБФДоков.Записать();
//				ДБФДоков.Первая();
//				
//			Иначе
//				
//				ДБФДоков.ЗакрытьФайл();
//				//ОписаниеОшибки = "Не удалость создать документы!";
//				Возврат Ложь;
//				
//			КонецЕсли;
//			
//			ДБФДоков.Следующая();
//		
//		КонецЕсли; 
//		
//		ДБФДоков.Следующая();
//	
//	КонецЦикла;
//	
//	Возврат Истина;

//КонецФункции
// 

//Процедура ЗагрузитьДанныеПоОтгрузкамНаЧП(Статус = Ложь, ОписаниеОшибки = "") Экспорт
	
//	Если ЗначениеНеЗаполнено(Константы.ПродажиЧерезЧПКаталогВыгрузкиДокументовРеализации.Получить()) Тогда
//	
//		ОписаниеОшибки = "Не установлено значение каталога выгрузки!";
//		Статус = Ложь;
//		Возврат;
//	
//	КонецЕсли; 
//	
//	СоздатьКаталог(СокрЛП(Константы.ПродажиЧерезЧПКаталогВыгрузкиДокументовРеализации.Получить()));
//	
//	
//	ИмяФайла = СокрЛП(Константы.ПродажиЧерезЧПКаталогВыгрузкиДокументовРеализации.Получить()) + 
//					?(Прав(СокрЛП(Константы.ПродажиЧерезЧПКаталогВыгрузкиДокументовРеализации.Получить()), 1) = "\", "", "\") +
//					"ExpList.dbf";
//					
//	Файл = Новый Файл(ИмяФайла);
//	
//	Если НЕ Файл.Существует() Тогда
//		
//		ОписаниеОшибки = "Выгрузок не производилость!";
//		Статус = Ложь;
//		Возврат;
//		
//	КонецЕсли;
//	
//	Статус = ЗагрузитьДокументы(ИмяФайла, ОписаниеОшибки);	

//КонецПроцедуры

Функция ПолучитьПрименяемостьДискаПоAPITerminal(Номенклатура) Экспорт
	
	Сервер = "terminal.yst.ru";
	Ресурс = "/api/apptocarsapi/get?ids=" + Номенклатура.Код;
	HTTP = Новый HTTPСоединение(Сервер,,,,,Истина);
	ФайлРезультата = ПолучитьИмяВременногоФайла("txt");
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept","application/txt");
	ОтветHTTP = HTTP.Получить(Новый HTTPЗапрос(Ресурс,ЗаголовокHTTP),ФайлРезультата);
	
	ТекстПрименяемости = Новый ТекстовыйДокумент;
	ТекстПрименяемости.Прочитать(ФайлРезультата);
	ТекстПрименяемости = ТекстПрименяемости.ПолучитьТекст();
	ТекстПрименяемости = СтрЗаменить(ТекстПрименяемости, Лев(ТекстПрименяемости,25), ""); //убираем лишние символы
	ТекстПрименяемости = СтрЗаменить(ТекстПрименяемости, Прав(ТекстПрименяемости,5), ""); 
	
	Если СтрДлина(ТекстПрименяемости) > 0 Тогда
		НоваяЗапись = РегистрыСведений.СоответствиеТипоразмеровАвтомобилям.СоздатьМенеджерЗаписи();
		НоваяЗапись.Номенклатура = Номенклатура;
		НоваяЗапись.Автомобили = ТекстПрименяемости;
		НоваяЗапись.Записать();
	КонецЕсли;
	
КонецФункции
