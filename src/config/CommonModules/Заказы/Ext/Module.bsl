////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ЗАКАЗАМИ

// Функция возвращает флаг использования подсистемы внутренних заказов
//
Функция ИспользоватьВнутренниеЗаказы(Сообщать = Ложь) Экспорт
	
	Флаг = Константы.ИспользоватьВнутренниеЗаказы.Получить();
	Если Не Флаг И Сообщать Тогда
		Сообщить("Использование внутренних заказов в данной конфигурации отключено.", СтатусСообщения.ОченьВажное);
	КонецЕсли;
	
	Возврат Флаг;
	
КонецФункции // ИспользоватьВнутренниеЗаказы()

// Процедура выполняет стандартные действия при начале выбора документа составного типа в формах документов.
//
// Параметры:
//  ДокументОбъект       - объект редактируемого документа;
//  ФормаДокумента       - форма редактируемого документа;
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//  СтруктураОтбора      - структура, содержащая имена и значения отборов в форме выбора.
//  ИмяТабличнойЧасти    - имя табличной части
//
Процедура НачалоВыбораДокументаЗаказа(ДокументОбъект, ФормаДокумента, ЭлементФормы, 
	                   СтандартнаяОбработка, СтруктураОтбора, ИмяТабличнойЧасти) Экспорт

	СтандартнаяОбработка = Ложь;

	// Заполним возможный список типов документов, которые могут быть в этом реквизите.
	СписокТипов = Новый СписокЗначений;

	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда // Шапка документа
		МассивТипов = ДокументОбъект.Метаданные().Реквизиты[ЭлементФормы.Данные].Тип.Типы();
	Иначе // Табличная часть
		ИмяКолонки  = ФормаДокумента.ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяКолонка.Имя;
		МассивТипов = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонки].Тип.Типы();
	КонецЕсли;

	Если МассивТипов.Количество() = 1 Тогда
		ОбъектОписанияМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		ВыбранныйТип = ОбъектОписанияМетаданных.Имя;
	Иначе

		Для каждого ЭлементМассива Из МассивТипов Цикл
			ПустоеЗначение = Новый(ЭлементМассива);
			ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
			СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());
		КонецЦикла;

		ЭлемСписка = СписокТипов.НайтиПоЗначению("ВнутреннийЗаказ");
		Если ЭлемСписка <> Неопределено
		   И Не ИспользоватьВнутренниеЗаказы() Тогда
			СписокТипов.Удалить(ЭлемСписка);
		КонецЕсли;

		Если СписокТипов.Количество() = 1 Тогда
			ВыбранныйТип = СписокТипов[0].Значение;
		Иначе
			ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

			Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
				Возврат;
			КонецЕсли;

			ВыбранныйТип = ВыбранныйЭлемент.Значение;
		КонецЕсли;

	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
		ЭлементФормы.Значение = Документы[ВыбранныйТип].ПустаяСсылка();
	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ВыбранныйТип].ПолучитьФормуВыбора(,ЭлементФормы,);

	// Проверка возможности отбора по сделке
	Если СтруктураОтбора.Свойство("Сделка") Тогда
		Если ФормаВыбора.Отбор.Найти("Сделка")= Неопределено Тогда
			СтруктураОтбора.Удалить("Сделка");
		КонецЕсли;
	КонецЕсли;

	// Отфильруем список документов.
	Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
		КонецЕсли;
		ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
		ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
	КонецЦикла;

	Если Не ЗначениеНеЗаполнено(ЭлементФормы.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораДокументаЗаказа()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОЛУЧЕНИЕ ОСТАТКА ПО ЗАКАЗУ

// Функция формирует таблицу содержащую остатки товаров (неотгруженные товары) по заказу покупателя
//
//	Параметры:
//		Заказ - заказ покупателя, остатки по которому требуется получить
//		Дата  - дата на которую надо получить остатки
//	Возврат:
//		Таблица с остатками, со следующей структурой:
//			Номенклатура               - товар,
//			ХарактеристикаНоменклатуры - хар-ка товара,
//			Цена                       - цена
//			КолОстаток                 - количество неотгруженного товара по заказу
//			ПроцентСкидкиНаценки       - % скидки / наценки
//			ЕдиницаИзмерения           - ед. изм. товаров в заказе
//			Коэффициент                - коэфф. ед. измерения товара в заказе
//
Функция ОстаткиТоваровПоЗаказуПокупателя( Заказ, Договор, КонДата) Экспорт
	
//+++ 23.09.2011 - добавлено поле НомерСтроки для "правильной" сортировки при заполнении документов на основании...
//так было
//ТекстЗапроса = "
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	РегЗаказы.Номенклатура КАК Номенклатура,
//	|	РегЗаказы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
//	|	РегЗаказы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
//	|	РегЗаказы.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
//	|	РегЗаказы.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
//	|	РегЗаказы.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
//	|	РегЗаказы.Цена,
//	|	РегЗаказы.ЕдиницаИзмерения,
//	|	РегЗаказы.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
//	|	СУММА(РегЗаказы.КоличествоОстаток) КАК КолОстаток,
//	|	РегЗаказы.Номенклатура.СтавкаНДС КАК СтавкаНДС


//	|ИЗ
//	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&КонДата, ЗаказПокупателя = &Заказ 
//	|	                                                    И ДоговорКонтрагента = &Договор 
//	|	                                                    И СтатусПартии = &Статус
//	|	                                                    И Не Номенклатура.Услуга) КАК РегЗаказы
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	РегЗаказы.Номенклатура,
//	|	РегЗаказы.ХарактеристикаНоменклатуры,
//	|	РегЗаказы.ПроцентСкидкиНаценки,
//	|	РегЗаказы.ПроцентАвтоматическихСкидок,
//	|	РегЗаказы.УсловиеАвтоматическойСкидки,
//	|	РегЗаказы.ЗначениеУсловияАвтоматическойСкидки,
//	|	РегЗаказы.Цена,
//	|	РегЗаказы.ЕдиницаИзмерения,
//	|	РегЗаказы.ЕдиницаИзмерения.Коэффициент,
//	|	РегЗаказы.Номенклатура.СтавкаНДС";
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегЗаказы.Номенклатура КАК Номенклатура,
	               |	РегЗаказы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	РегЗаказы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	               |	РегЗаказы.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	               |	РегЗаказы.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	               |	РегЗаказы.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	               |	РегЗаказы.Цена,
	               |	РегЗаказы.ЕдиницаИзмерения,
	               |	РегЗаказы.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	               |	СУММА(РегЗаказы.КоличествоОстаток) КАК КолОстаток,
	               |	РегЗаказы.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |			&КонДата,
	               |			ЗаказПокупателя = &Заказ
	               |				И ДоговорКонтрагента = &Договор
	               |				И СтатусПартии = &Статус
	               |				И (НЕ Номенклатура.Услуга)) КАК РегЗаказы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	               |		ПО РегЗаказы.Номенклатура = ЗаказПокупателяТовары.Номенклатура
	               |			И РегЗаказы.ХарактеристикаНоменклатуры = ЗаказПокупателяТовары.ХарактеристикаНоменклатуры
	               |ГДЕ
	               |	ЗаказПокупателяТовары.Ссылка = &Заказ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РегЗаказы.Номенклатура,
	               |	РегЗаказы.ХарактеристикаНоменклатуры,
	               |	РегЗаказы.ПроцентСкидкиНаценки,
	               |	РегЗаказы.ПроцентАвтоматическихСкидок,
	               |	РегЗаказы.УсловиеАвтоматическойСкидки,
	               |	РегЗаказы.ЗначениеУсловияАвтоматическойСкидки,
	               |	РегЗаказы.Цена,
	               |	РегЗаказы.ЕдиницаИзмерения,
	               |	РегЗаказы.ЕдиницаИзмерения.Коэффициент,
	               |	РегЗаказы.Номенклатура.СтавкаНДС,
	               |	ЗаказПокупателяТовары.НомерСтроки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки
	               |АВТОУПОРЯДОЧИВАНИЕ";
 //+++)
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
	Запрос.УстановитьПараметр( "Договор", Договор);
	Запрос.УстановитьПараметр( "Статус",  Перечисления.СтатусыПартийТоваров.Купленный);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ОстаткиТоваровПоЗаказуПокупателя()

// Функция формирует таблицу содержащую остатки услуг (неоказанные услуги) по заказу покупателя
//
//	Параметры:
//		Заказ - заказ покупателя, остатки по которому требуется получить
//		Дата  - дата на которую надо получить остатки
//	Возврат:
//		Таблица с остатками, со следующей структурой:
//			Номенклатура  - товар,
//			Цена          - цена
//			КолОстаток    - количество неоказанных услуг по заказу
//
Функция ОстаткиУслугПоЗаказуПокупателя( Заказ, Договор, Знач КонДата, Знач СтатусПартии = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если СтатусПартии = Неопределено Тогда
		СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	КонецЕсли;
	
ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегЗаказы.Номенклатура КАК Номенклатура,
	|	РегЗаказы.Цена,
	|	РегЗаказы.ПроцентСкидкиНаценки,
	|	СУММА(РегЗаказы.КоличествоОстаток)          КАК КолОстаток,
	|	СУММА(РегЗаказы.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетов,
	|	СУММА(РегЗаказы.СуммаУпрОстаток)            КАК СуммаУпр,
	|	ДокЗаказ.Содержание                         КАК Содержание,
	|	ДокЗаказ.СтавкаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокЗаказы.Номенклатура КАК Номенклатура,
	|		ДокЗаказы.Цена         КАК Цена,
	|		ДокЗаказы.Содержание   КАК Содержание,
	|		ДокЗаказы.СтавкаНДС    КАК СтавкаНДС
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДокЗаказУслуги.Номенклатура КАК Номенклатура,
	|			ДокЗаказУслуги.Цена         КАК Цена,
	|			ДокЗаказУслуги.Содержание   КАК Содержание,
	|			ДокЗаказУслуги.СтавкаНДС    КАК СтавкаНДС
	|		ИЗ
	|			Документ.ЗаказПокупателя.Услуги КАК ДокЗаказУслуги
	|		
	|		ГДЕ
	|			ДокЗаказУслуги.Ссылка = &Заказ     И
	|			ДокЗаказУслуги.Ссылка.Проведен     И
	|			ДокЗаказУслуги.Номенклатура.Услуга И
	|			НЕ ДокЗаказУслуги.Ссылка.ПометкаУдаления
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДокКорректировкаУслуги.Номенклатура,
	|			ДокКорректировкаУслуги.Цена,
	|			ДокКорректировкаУслуги.Содержание,
	|			ДокКорректировкаУслуги.СтавкаНДС
	|		ИЗ
	|			Документ.КорректировкаЗаказаПокупателя.Услуги КАК ДокКорректировкаУслуги
	|		
	|		ГДЕ
	|			ДокКорректировкаУслуги.Ссылка.ЗаказПокупателя = &Заказ И
	|			ДокКорректировкаУслуги.Номенклатура.Услуга             И
	|			ДокКорректировкаУслуги.Ссылка.Проведен                 И
	|			НЕ ДокКорректировкаУслуги.Ссылка.ПометкаУдаления) КАК ДокЗаказы
	|		) КАК ДокЗаказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&КонДата, ДоговорКонтрагента = &Договор 
	|		                                                                          И ЗаказПокупателя = &Заказ 
	|		                                                                          И СтатусПартии = &Статус) КАК РегЗаказы
	|		ПО ДокЗаказ.Номенклатура = РегЗаказы.Номенклатура
	|		 И ДокЗаказ.Цена = РегЗаказы.Цена
	|
	|СГРУППИРОВАТЬ ПО
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.Цена,
	|	РегЗаказы.ПроцентСкидкиНаценки,
	|	ДокЗаказ.Содержание,
	|	ДокЗаказ.СтавкаНДС";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
	Запрос.УстановитьПараметр( "Договор", Договор);
	Запрос.УстановитьПараметр( "Статус",  СтатусПартии);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ОстаткиУслугПоЗаказуПокупателя()

// Функция формирует таблицу содержащую остатки товаров (неотгруженные товары) по заказу поставщику
//
//	Параметры:
//		Заказ - заказ поставщику, остатки по которому требуется получить
//		Дата  - дата на которую надо получить остатки
//	Возврат:
//		Таблица с остатками, со следующей структурой:
//			Номенклатура               - товар,
//			ХарактеристикаНоменклатуры - хар-ка товара,
//			Цена                       - цена
//			КолОстаток                 - количество неотгруженного товара по заказу
//			ПроцентСкидкиНаценки       - % скидки / наценки
//			ЕдиницаИзмерения           - ед. изм. товаров в заказе
//			Коэффициент                - коэфф. ед. измерения товара в заказе
//
Функция ОстаткиТоваровПоЗаказуПоставщику( Заказ, Договор, КонДата, ДопПараметры = Неопределено) Экспорт
	
	ТоварТара    = Перечисления.ТоварТара.Товар;
	СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("ТоварТара") Тогда
			ТоварТара = ДопПараметры["ТоварТара"];
		КонецЕсли;
		Если ДопПараметры.Свойство("СтатусПартии") Тогда
			СтатусПартии = ДопПараметры["СтатусПартии"];
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегЗаказы.Номенклатура КАК Номенклатура,
	|	РегЗаказы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РегЗаказы.Цена КАК Цена,
	|	РегЗаказы.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	РегЗаказы.ЕдиницаИзмерения,
	|	РегЗаказы.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	СУММА(РегЗаказы.КоличествоОстаток) КАК КолОстаток,
	|	ВЫБОР КОГДА РегРазмещениеЗаказов.ЗаказПокупателя ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		РегРазмещениеЗаказов.ЗаказПокупателя
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	СУММА(ВЫБОР КОГДА РегРазмещениеЗаказов.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		РегРазмещениеЗаказов.КоличествоОстаток
	|	КОНЕЦ) КАК КолРазмещено
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&КонДата, ДоговорКонтрагента = &Договор 
	|	                                                    И ЗаказПоставщику = &Заказ 
	|	                                                    И Не Номенклатура.Услуга
	|	                                                    И СтатусПартии = &Статус) КАК РегЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&КонДата, ЗаказПоставщику = &Заказ И ТоварТара = &ТоварТара) КАК РегРазмещениеЗаказов
	|		ПО РегЗаказы.ЗаказПоставщику            = РегРазмещениеЗаказов.ЗаказПоставщику
	|		 И РегЗаказы.Номенклатура               = РегРазмещениеЗаказов.Номенклатура
	|		 И РегЗаказы.ХарактеристикаНоменклатуры = РегРазмещениеЗаказов.ХарактеристикаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.ХарактеристикаНоменклатуры,
	|	РегЗаказы.Цена,
	|	РегЗаказы.ЕдиницаИзмерения,
	|	ВЫБОР КОГДА РегРазмещениеЗаказов.ЗаказПокупателя ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		РегРазмещениеЗаказов.ЗаказПокупателя
	|	КОНЕЦ
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата",   КонДата);
	Запрос.УстановитьПараметр( "Заказ",     Заказ);
	Запрос.УстановитьПараметр( "Договор",   Договор);
	Запрос.УстановитьПараметр( "Статус",    СтатусПартии);
	Запрос.УстановитьПараметр( "ТоварТара", ТоварТара);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ОстаткиТоваровПоЗаказуПоставщику()

// Функция формирует таблицу содержащую остатки услуг (неоказанные услуги) по заказу поставщику
//
//	Параметры:
//		Заказ - заказ покупателя, остатки по которому требуется получить
//		Дата  - дата на которую надо получить остатки
//	Возврат:
//		Таблица с остатками, со следующей структурой:
//			Номенклатура  - товар,
//			Цена          - цена
//			КолОстаток    - количество неоказанных услуг по заказу
//
Функция ОстаткиУслугПоЗаказуПоставщику( Заказ, Договор, Знач КонДата, Знач СтатусПартии = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если СтатусПартии = Неопределено Тогда
		СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегЗаказы.Номенклатура КАК Номенклатура,
	|	РегЗаказы.Цена,
	|	СУММА(РегЗаказы.КоличествоОстаток)          КАК КолОстаток,
	|	СУММА(РегЗаказы.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетов,
	|	СУММА(РегЗаказы.СуммаУпрОстаток)            КАК СуммаУпр,
	|	ДокЗаказ.Содержание                         КАК Содержание,
	|	ДокЗаказ.СтавкаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокЗаказы.Номенклатура КАК Номенклатура,
	|		ДокЗаказы.Цена         КАК Цена,
	|		ДокЗаказы.Содержание   КАК Содержание,
	|		ДокЗаказы.СтавкаНДС    КАК СтавкаНДС
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДокЗаказУслуги.Номенклатура КАК Номенклатура,
	|			ДокЗаказУслуги.Цена         КАК Цена,
	|			ДокЗаказУслуги.Содержание   КАК Содержание,
	|			ДокЗаказУслуги.СтавкаНДС    КАК СтавкаНДС
	|		ИЗ
	|			Документ.ЗаказПоставщику.Услуги КАК ДокЗаказУслуги
	|		
	|		ГДЕ
	|			ДокЗаказУслуги.Ссылка = &Заказ     И
	|			ДокЗаказУслуги.Ссылка.Проведен     И
	|			ДокЗаказУслуги.Номенклатура.Услуга И
	|			НЕ ДокЗаказУслуги.Ссылка.ПометкаУдаления
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДокКорректировкаУслуги.Номенклатура,
	|			ДокКорректировкаУслуги.Цена,
	|			ДокКорректировкаУслуги.Содержание,
	|			ДокКорректировкаУслуги.СтавкаНДС
	|		ИЗ
	|			Документ.КорректировкаЗаказаПоставщику.Услуги КАК ДокКорректировкаУслуги
	|		
	|		ГДЕ
	|			ДокКорректировкаУслуги.Ссылка.ЗаказПоставщику = &Заказ И
	|			ДокКорректировкаУслуги.Номенклатура.Услуга             И
	|			ДокКорректировкаУслуги.Ссылка.Проведен                 И
	|			НЕ ДокКорректировкаУслуги.Ссылка.ПометкаУдаления) КАК ДокЗаказы
	|		) КАК ДокЗаказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&КонДата, ДоговорКонтрагента = &Договор И ЗаказПоставщику = &Заказ И СтатусПартии = &Статус) КАК РегЗаказы
	|		ПО ДокЗаказ.Номенклатура = РегЗаказы.Номенклатура
	|		 И ДокЗаказ.Цена = РегЗаказы.Цена
	|
	|СГРУППИРОВАТЬ ПО
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.Цена,
	|	ДокЗаказ.Содержание,
	|	ДокЗаказ.СтавкаНДС";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
	Запрос.УстановитьПараметр( "Договор", Договор);
	Запрос.УстановитьПараметр( "Статус",  СтатусПартии);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ОстаткиУслугПоЗаказуПоставщику()

// Функция формирует таблицу содержащую остатки товаров (неотгруженные товары) по заказу покупателя
//
//	Параметры:
//		Заказ - заказ покупателя, остатки по которому требуется получить
//		Дата  - дата на которую надо получить остатки
//	Возврат:
//		Таблица с остатками, со следующей структурой:
//			Номенклатура               - товар,
//			ХарактеристикаНоменклатуры - хар-ка товара,
//			КолОстаток                 - количество неотгруженного товара по заказу
//			ЕдиницаИзмерения           - ед. изм. товаров в заказе
//			Коэффициент                - коэфф. ед. измерения товара в заказе
//
Функция ОстаткиТоваровПоВнутреннемуЗаказу( Заказ, Знач КонДата, СтатусыПартий = Неопределено) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнутренниеЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ВнутренниеЗаказыОстатки.КоличествоОстаток) КАК КолОстаток,
	|	ВнутренниеЗаказыОстатки.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ВнутренниеЗаказыОстатки.СтатусПартии,
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ КАК Заказ,
	|	ВнутренниеЗаказыОстатки.Заказчик
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&КонДата, ВнутреннийЗаказ = &Заказ И СтатусПартии В (&СтатусыПартий)) КАК ВнутренниеЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутренниеЗаказыОстатки.Номенклатура,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры,
	|	ВнутренниеЗаказыОстатки.СтатусПартии,
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ,
	|	ВнутренниеЗаказыОстатки.Заказчик";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
	Если СтатусыПартий = Неопределено Тогда
		Статусы = Новый Массив;
		Статусы.Добавить(Перечисления.СтатусыПартийТоваров.Купленный);
	Иначе
		Статусы = СтатусыПартий;
	КонецЕсли;
	
	Запрос.УстановитьПараметр( "СтатусыПартий", Статусы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ОстаткиТоваровПоВнутреннемуЗаказу()

Функция ОстаткиТоваровПоСкладамПоВнутреннемуЗаказу(Заказ) Экспорт
	Запрос=Новый Запрос;
	
ТекстЗапроса =	 "ВЫБРАТЬ
|	ТоварыНаСкладахОстатки.Номенклатура.Код,
|	ТоварыНаСкладахОстатки.Номенклатура,
|	ТоварыНаСкладахОстатки.Склад,
|	ТоварыНаСкладахОстатки.КоличествоОстаток  КоличествоОстаток
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Остатки (,
|	Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ Документ.ВнутреннийЗаказ.Товары ГДЕ Ссылка=&Заказ)
|	)КАК ТоварыНаСкладахОстатки      
|	ЛЕВОЕ СОЕДИНЕНИЕ
| (  ВЫБРАТЬ
| ТоварыНаСкладахОстатки.Номенклатура.Код,
|	ТоварыНаСкладахОстатки.Номенклатура,
|	МАКСИМУМ (ТоварыНаСкладахОстатки.КоличествоОстаток)  КоличествоОстаток
|	ИЗ
|(ВЫБРАТЬ Номенклатура,Склад,КОличествоОстаток ИЗ	
|	РегистрНакопления.ТоварыНаСкладах.Остатки (,
|	Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ Документ.ВнутреннийЗаказ.Товары ГДЕ Ссылка=&Заказ)
|	))КАК ТоварыНаСкладахОстатки 
|	СГРУППИРОВАТЬ ПО Номенклатура )МаксимальныйОстатокНаСкладе
|	ПО ТоварыНаСкладахОстатки.Номенклатура=МаксимальныйОстатокНаСкладе.Номенклатура
|	ГДЕ ТоварыНаСкладахОстатки.КоличествоОстаток=МаксимальныйОстатокНаСкладе.КоличествоОстаток
|		УПОРЯДОЧИТЬ ПО ТоварыНаСкладахОстатки.Номенклатура.Код";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
Возврат Запрос.Выполнить().Выгрузить();
	
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОГАШЕНИЯ РЕГИСТРОВ ЗАКАЗЫ

// Процедура погашения регистра ВнутренниеЗаказы
//
Процедура ДвижениеПоВнутреннимЗаказам( ДокОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок) Экспорт

	ТабПоЗаказам = ТабИсходная.Скопировать();
	СтатусПартии       = ДопПараметры["СтатусПартии"];
	ОперативныйРежим   = ДопПараметры["РежимПроведения"] = РежимПроведенияДокумента.Оперативный;
	ЕстьХарактеристика = Не ТабИсходная.Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено;
	ЗаказВШапке        = ДопПараметры["ЗаказВШапке"];
	ИмяРеквизитаЗаказ  = ДопПараметры["ИмяРеквизитаЗаказ"];
	
	Если Не ЗаказВШапке Тогда
		ВсегоСтрок = ТабПоЗаказам.Количество() - 1;
		К = 0;
		Пока К <= ВсегоСтрок Цикл
			ДокЗаказ = ТабПоЗаказам[К][ИмяРеквизитаЗаказ];
			Если ЗначениеНеЗаполнено(ДокЗаказ) ИЛИ ТипЗнч(ДокЗаказ) <> Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
				ТабПоЗаказам.Удалить(К);
				ВсегоСтрок = ВсегоСтрок - 1;
			Иначе
				К = К + 1;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Не ТипЗнч(ДокОбъект[ИмяРеквизитаЗаказ]) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТабПоЗаказам.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;		

	НаборДвижений = ДокОбъект.Движения.ВнутренниеЗаказы;
	Если ОперативныйРежим Тогда
		НаборДвижений = ДокОбъект.Движения.ВнутренниеЗаказы;
		НаборДвижений.КонтрольОстатков( ДокОбъект, ДопПараметры, Отказ, Заголовок);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаДок Из ТабПоЗаказам Цикл
		Заказ = ?( ЗаказВШапке, ДокОбъект[ИмяРеквизитаЗаказ], СтрокаДок[ИмяРеквизитаЗаказ]);
		Если Не ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.ВнутреннийЗаказ            = Заказ;
		НоваяСтрока.Заказчик                   = Заказ.Заказчик;
		НоваяСтрока.СтатусПартии               = СтатусПартии;
		НоваяСтрока.Номенклатура               = СтрокаДок.Номенклатура;
		НоваяСтрока.Количество                 = СтрокаДок.Количество;
		Если ЕстьХарактеристика Тогда
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаДок.ХарактеристикаНоменклатуры;
		КонецЕсли;
	КонецЦикла;
	
	НаборДвижений.мПериод          = ДокОбъект.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьРасход();
	
КонецПроцедуры // ДвижениеПоВнутреннимЗаказам( СтруктураШапкиДокумента, ТаблицаПоТаре,    Отказ, Заголовок)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ОСТАТКАМИ ПО ЗАКАЗУ

// Процедура заполняет табличную часть документа по данным заказа
//
//	Параметры:
//		ТабЧасть - табличная часть документа, которую необходимо заполнить
//		ТабОстатки - таблица неотгружененых товаров по заказу
//
Процедура ЗаполнитьТабЧастьТоварыПоЗаказу(ДокСсылка, ТабЧасть, ТабОстатки, ДопПараметры = Неопределено) Экспорт
	
	Если ТабОстатки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабЧасть.Очистить();
	
	ФлагУчитыватьНДС        = Истина;
	ФлагСуммаВключаетНДС    = Ложь;
	ФлагЕстьЗаказПокупателя = Ложь;
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("УчитыватьНДС") Тогда
			ФлагУчитыватьНДС = ДопПараметры["УчитыватьНДС"];
		КонецЕсли;
		Если ДопПараметры.Свойство("СуммаВключаетНДС") Тогда
			ФлагСуммаВключаетНДС = ДопПараметры["СуммаВключаетНДС"];
		КонецЕсли;
		Если ДопПараметры.Свойство("ЕстьЗаказПокупателя") Тогда
			ФлагЕстьЗаказПокупателя = ДопПараметры["ЕстьЗаказПокупателя"];
		КонецЕсли;
	КонецЕсли;
	
	МетаТабЧасть = Метаданные.НайтиПоТипу( Тип(ТабЧасть));
	ФлагЕстьРучнаяСкидка         = Не ТабОстатки  .Колонки  .Найти( "ПроцентСкидкиНаценки"       ) = Неопределено;
	ФлагЕстьАвтоматическаяСкидка = Не ТабОстатки  .Колонки  .Найти( "ПроцентАвтоматическихСкидок") = Неопределено;
	ФлагЕстьХарактеристика       = Не МетаТабЧасть.Реквизиты.Найти( "ХарактеристикаНоменклатуры" ) = Неопределено;
	ФлагЕстьЕдИзм                = Не МетаТабЧасть.Реквизиты.Найти( "ЕдиницаИзмерения"           ) = Неопределено;
	ФлагЕстьНДС                  = Не МетаТабЧасть.Реквизиты.Найти( "СтавкаНДС"                  ) = Неопределено;
	ФлагЕстьЦенаВРознице         = Не МетаТабЧасть.Реквизиты.Найти( "ЦенаВРознице"               ) = Неопределено;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Для Каждого СтрокаОстатков Из ТабОстатки Цикл
		
		Если СтрокаОстатков.КолОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаОстатков.Номенклатура;
		НоваяСтрока.Количество                 = СтрокаОстатков.КолОстаток;
		НоваяСтрока.Цена                       = СтрокаОстатков.Цена;
		
		Если ФлагЕстьХарактеристика Тогда
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатков.ХарактеристикаНоменклатуры;
		КонецЕсли;
		Если ФлагЕстьЗаказПокупателя Тогда
			НоваяСтрока.ЗаказПокупателя = СтрокаОстатков.ЗаказПокупателя;
		КонецЕсли;
		Если ФлагЕстьЕдИзм Тогда
			НоваяСтрока.ЕдиницаИзмерения           = СтрокаОстатков.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = СтрокаОстатков.Коэффициент;
		КонецЕсли;
		Если ФлагЕстьРучнаяСкидка Тогда
			НоваяСтрока.ПроцентСкидкиНаценки   = СтрокаОстатков.ПроцентСкидкиНаценки;
		КонецЕсли;
		Если ФлагЕстьАвтоматическаяСкидка Тогда
			НоваяСтрока.ПроцентАвтоматическихСкидок         = СтрокаОстатков.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = СтрокаОстатков.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = СтрокаОстатков.ЗначениеУсловияАвтоматическойСкидки;
		КонецЕсли;
		Если ФлагЕстьЦенаВРознице Тогда
			РассчитатьРозничнуюЦенуВСтрокеТабЧасти(ДокСсылка, НоваяСтрока, ВалютаРегламентированногоУчета);
		КонецЕсли;
		
		РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ДокСсылка); 
		РассчитатьСуммуТабЧасти         ( НоваяСтрока, ДокСсылка); 
		
		Если ФлагЕстьНДС Тогда
			НоваяСтрока.СтавкаНДС = СтрокаОстатков.СтавкаНДС;
			НоваяСтрока.СуммаНДС  = РассчитатьСуммуНДС(
				НоваяСтрока.Сумма,
				ФлагУчитыватьНДС,
				ФлагСуммаВключаетНДС,
				ПолучитьСтавкуНДС( НоваяСтрока.СтавкаНДС));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабЧастьТоварыПоЗаказу()

// Процедура заполняет табличную часть документа по данным заказа поставщику
//
//	Параметры:
//		ДокОбъект  - документ-объект, который надо заполнить
//		ТабЧасть   - табличная часть документа, которую необходимо заполнить
//		ТабОстатки - таблица неотгружененых товаров по заказу
//
Процедура ЗаполнитьТабЧастьТоварыПоЗаказуПоставщику(ДокОбъект, ТабЧасть, ТабОстатки, ДопПараметры = Неопределено) Экспорт
	
	Если ТабОстатки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабЧасть.Очистить();
	
	ФлагУчитыватьНДС     = Истина;
	ФлагСуммаВключаетНДС = Ложь;
	ФлагЭтоТара          = Ложь;
	ЗнакКоличества       = 1;
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("УчитыватьНДС") Тогда
			ФлагУчитыватьНДС = ДопПараметры["УчитыватьНДС"];
		КонецЕсли;
		Если ДопПараметры.Свойство("СуммаВключаетНДС") Тогда
			ФлагСуммаВключаетНДС = ДопПараметры["СуммаВключаетНДС"];
		КонецЕсли;
		Если ДопПараметры.Свойство("ФлагЭтоТара") Тогда
			ФлагЭтоТара = ДопПараметры["ФлагЭтоТара"];
		КонецЕсли;
		Если ДопПараметры.Свойство("ЗнакКоличества") Тогда
			ЗнакКоличества = ДопПараметры["ЗнакКоличества"];
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаОстатков Из ТабОстатки Цикл
		
		// Возможно требуется строку остатков разбить на две строки документа
		// с размещением под заказ покупателя (внутренний заказ) и без размещения.
		КолРазмещено     = СтрокаОстатков.КолРазмещено;
		КолБезРазмещения = СтрокаОстатков.КолОстаток - СтрокаОстатков.КолРазмещено;
		
		// Есть количество с размещением
		Если КолРазмещено > 0 Тогда
			
			НоваяСтрока = ТабЧасть.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаОстатков.Номенклатура;
			НоваяСтрока.Количество                 = ЗнакКоличества * КолРазмещено;
			НоваяСтрока.Цена                       = СтрокаОстатков.Цена;
			НоваяСтрока.ЗаказПокупателя            = СтрокаОстатков.ЗаказПокупателя;
			
			Если ФлагЭтоТара Тогда
				НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
			Иначе // Товары
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатков.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения           = СтрокаОстатков.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = СтрокаОстатков.Коэффициент;
				НоваяСтрока.СтавкаНДС                  = СтрокаОстатков.СтавкаНДС;
				
				РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ДокОбъект); 
				РассчитатьСуммуТабЧасти         ( НоваяСтрока, ДокОбъект); 
				
				НоваяСтрока.СуммаНДС = РассчитатьСуммуНДС(
					НоваяСтрока.Сумма,
					ФлагУчитыватьНДС,
					ФлагСуммаВключаетНДС,
					ПолучитьСтавкуНДС( НоваяСтрока.СтавкаНДС));
			КонецЕсли;
			
		КонецЕсли;
		
		Если КолБезРазмещения <> 0 Тогда //+++ 13.03.2012 для "корректировки" корректировок.... было >  только по заказу
			
			НоваяСтрока = ТабЧасть.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаОстатков.Номенклатура;
			НоваяСтрока.Количество                 = ЗнакКоличества * КолБезРазмещения;
			НоваяСтрока.Цена                       = СтрокаОстатков.Цена;
			
			Если ФлагЭтоТара Тогда
				НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
			Иначе // Товары
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатков.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения           = СтрокаОстатков.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = СтрокаОстатков.Коэффициент;
				НоваяСтрока.СтавкаНДС = СтрокаОстатков.СтавкаНДС;
				
				РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ДокОбъект); 
				РассчитатьСуммуТабЧасти         ( НоваяСтрока, ДокОбъект); 
				
				НоваяСтрока.СуммаНДС  = РассчитатьСуммуНДС(
					НоваяСтрока.Сумма,
					ФлагУчитыватьНДС,
					ФлагСуммаВключаетНДС,
					ПолучитьСтавкуНДС( НоваяСтрока.СтавкаНДС));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабЧастьТоварыПоЗаказуПоставщику()

// Процедура заполняет табличную часть Услуги по данным заказа
//
//	Параметры:
//		ТабЧасть   - табличная часть документа, которую необходимо заполнить
//		ТабОстатки - таблица неотгружененых товаров по заказу
//
Процедура ЗаполнитьТабЧастьУслугиПоЗаказу(ДокОбъект, ТабЧасть, ТабОстатки, ДопПараметры = Неопределено) Экспорт
	
	Если ТабОстатки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабЧасть.Очистить();
	
	ФлагУчитыватьНДС     = Истина;
	ФлагСуммаВключаетНДС = Ложь;
	ЗнакКоличества       = 1;
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("УчитыватьНДС") Тогда
			ФлагУчитыватьНДС = ДопПараметры["УчитыватьНДС"];
		КонецЕсли;
		Если ДопПараметры.Свойство("СуммаВключаетНДС") Тогда
			ФлагСуммаВключаетНДС = ДопПараметры["СуммаВключаетНДС"];
		КонецЕсли;
		Если ДопПараметры.Свойство("ЗнакКоличества") Тогда
			ЗнакКоличества = ДопПараметры["ЗнакКоличества"];
		КонецЕсли;
	КонецЕсли;
	
	ФлагЕстьРучнаяСкидка = Не ТабОстатки.Колонки.Найти("ПроцентСкидкиНаценки") = Неопределено;
	
	Для Каждого СтрокаОстатков Из ТабОстатки Цикл
		
		Если СтрокаОстатков.КолОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.Номенклатура = СтрокаОстатков.Номенклатура;
		НоваяСтрока.Количество   = СтрокаОстатков.КолОстаток * ЗнакКоличества;
		НоваяСтрока.Цена         = СтрокаОстатков.Цена;

		Если ФлагЕстьРучнаяСкидка Тогда
			НоваяСтрока.ПроцентСкидкиНаценки   = СтрокаОстатков.ПроцентСкидкиНаценки;
		КонецЕсли;

		НоваяСтрока.Содержание   = СтрокаОстатков.Содержание;
		НоваяСтрока.СтавкаНДС    = СтрокаОстатков.СтавкаНДС;
		
		РассчитатьСуммуТабЧасти( НоваяСтрока, ДокОбъект); 
		
		НоваяСтрока.СуммаНДС = РассчитатьСуммуНДС(
			НоваяСтрока.Сумма,
			ФлагУчитыватьНДС,
			ФлагСуммаВключаетНДС,
			ПолучитьСтавкуНДС( НоваяСтрока.СтавкаНДС));
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабЧастьУслугиПоЗаказу()

// Процедура заполняет табличную часть Тара данными по заказа
//
//		Параметры:
//			ТабЧасть - табличная часть документа, которую необходимо заполнить
//			ТабОстатки - таблица неотгружененых товаров по заказу
//		Возврат:
//			Истина - заполнение произведено
//			Ложь   - нет данных для заполнения
//
Процедура ЗаполнитьТабЧастьТараПоЗаказуПокупателя(ТабЧасть, Заказ, Договор, КонДата) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.КоличествоОстаток КАК Количество,
	|	РегЗаказы.СуммаУпрОстаток КАК СуммаУпр,
	|	РегЗаказы.Цена,
	|	РегЗаказы.ЕдиницаИзмерения,
	|	РегЗаказы.ЕдиницаИзмерения.Коэффициент КАК Коэффициент
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&КонДата, ДоговорКонтрагента = &Договор И СтатусПартии = &Статус И ЗаказПокупателя = &Заказ) КАК РегЗаказы
	|
	|ГДЕ
	|	НЕ РегЗаказы.Номенклатура.Услуга И
	|	РегЗаказы.КоличествоОстаток > 0";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
	Запрос.УстановитьПараметр( "Договор", Договор);
	Запрос.УстановитьПараметр( "Статус",  Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	
	Обход = Запрос.Выполнить().Выбрать();
	Пока Обход.Следующий() Цикл
		
		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.Номенклатура = Обход.Номенклатура;
		НоваяСтрока.Количество   = Обход.Количество;
		НоваяСтрока.Сумма        = Обход.СуммаУпр;
		НоваяСтрока.Цена         = Обход.Цена;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабЧастьТараПоЗаказуПокупателя()

// Процедура заполняет табличную часть документа по данным внутреннего заказа
//
//	Параметры:
//		ТабЧасть - табличная часть документа, которую необходимо заполнить
//		ТабОстатки - таблица неотгружененых товаров по заказу
//
Процедура ЗаполнитьТабЧастьТоварыПоВнутреннемуЗаказу(ДокСсылка, ТабЧасть, ТабОстатки, ДопПараметры = Неопределено) Экспорт
	
	Если Не ИспользоватьВнутренниеЗаказы() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТабОстатки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("НеОчищатьТабЧасть") Тогда
			Если Не ДопПараметры["НеОчищатьТабЧасть"] Тогда
				ТабЧасть.Очистить();
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТабЧасть.Очистить();
	КонецЕсли;
	
	ЕстьКачество = Не Метаданные.НайтиПоТипу(ТипЗнч(ТабЧасть)).Реквизиты.Найти("Качество") = Неопределено;
	
	Для Каждого СтрокаОстатков Из ТабОстатки Цикл
		
		Если СтрокаОстатков.КолОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаОстатков.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатков.ХарактеристикаНоменклатуры;
		НоваяСтрока.Количество                 = СтрокаОстатков.КолОстаток;
		НоваяСтрока.ЕдиницаИзмерения           = СтрокаОстатков.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = СтрокаОстатков.Коэффициент;
		
		Если ЕстьКачество Тогда
			НоваяСтрока.Качество = Справочники.Качество.Новый;
		КонецЕсли;
		
		РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ДокСсылка); 
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабЧастьТоварыПоВнутреннемуЗаказу()

// Процедура заполняет табличную часть документа по данным внутреннего заказа
//
//	Параметры:
//		ТабЧасть - табличная часть документа, которую необходимо заполнить
//		ТабОстатки - таблица неотгружененых товаров по заказу
//
Процедура ЗаполнитьТабЧастьТараПоВнутреннемуЗаказу(ДокСсылка, ТабЧасть, ТабОстатки, ДопПараметры = Неопределено) Экспорт
	
	Если Не ИспользоватьВнутренниеЗаказы() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТабОстатки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("НеОчищатьТабЧасть") Тогда
			Если Не ДопПараметры["НеОчищатьТабЧасть"] Тогда
				ТабЧасть.Очистить();
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТабЧасть.Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаОстатков Из ТабОстатки Цикл
		
		Если СтрокаОстатков.КолОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаОстатков.Номенклатура;
		НоваяСтрока.Количество                 = СтрокаОстатков.КолОстаток;
		
		РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ДокСсылка); 
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабЧастьТоварыПоВнутреннемуЗаказу()

// Процедура формирует таблицу содержащую остатки товаров (неотгруженные товары) по заказу покупателя
//
Процедура ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Заказ, ТабЧасть, Склад, Знач КонДата, СтатусыПартий = Неопределено) Экспорт
	
	Если Не ИспользоватьВнутренниеЗаказы() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнутренниеЗаказыОстатки.Номенклатура                                     КАК Номенклатура,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	СУММА(ВнутренниеЗаказыОстатки.КоличествоОстаток)                         КАК КолОстаток,
	|	ВнутренниеЗаказыОстатки.Номенклатура.СтавкаНДС                           КАК СтавкаНДС,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ВнутренниеЗаказыОстатки.СтатусПартии                    КАК СтатусПартии,
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ                 КАК Заказ,
	|	ВнутренниеЗаказыОстатки.Заказчик                        КАК Заказчик,
	|	СУММА(ВЫБОР КОГДА ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток
	|	КОНЕЦ) КАК КолРезерв
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&КонДата, ВнутреннийЗаказ = &Заказ И СтатусПартии В (&СтатусыПартий)) КАК ВнутренниеЗаказыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&КонДата, Склад = &Склад И ДокументРезерва = &Заказ) КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО ВнутренниеЗаказыОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|		 И ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутренниеЗаказыОстатки.Номенклатура,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры,
	|	ВнутренниеЗаказыОстатки.СтатусПартии,
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ,
	|	ВнутренниеЗаказыОстатки.Заказчик";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
	Запрос.УстановитьПараметр( "Склад",   Склад);
	Если СтатусыПартий = Неопределено Тогда
		Статусы = Новый Массив;
		Статусы.Добавить(Перечисления.СтатусыПартийТоваров.Купленный);
	Иначе
		Статусы = СтатусыПартий;
	КонецЕсли;
	ФлагТары = СтатусыПартий = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара;
	
	Запрос.УстановитьПараметр( "СтатусыПартий", Статусы);
	
	ТабОстатки   = Запрос.Выполнить().Выгрузить();
	
	ЕстьКачество = Не Метаданные.НайтиПоТипу(ТипЗнч(ТабЧасть)).Реквизиты.Найти("Качество") = Неопределено;
	
	Для Каждого СтрокаОстатков Из ТабОстатки Цикл
		
		Если СтрокаОстатков.КолОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаОстатков.КолРезерв > 0 Тогда
			НоваяСтрока = ТабЧасть.Добавить();
			НоваяСтрока.Номенклатура                 = СтрокаОстатков.Номенклатура;
			НоваяСтрока.Количество                   = СтрокаОстатков.КолРезерв;
			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
			
			Если Не ФлагТары Тогда
				
				НоваяСтрока.ЕдиницаИзмерения             = СтрокаОстатков.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                  = СтрокаОстатков.Коэффициент;
				НоваяСтрока.ХарактеристикаНоменклатуры   = СтрокаОстатков.ХарактеристикаНоменклатуры;
				Если ЕстьКачество Тогда
					НоваяСтрока.Качество = Справочники.Качество.Новый;
				КонецЕсли;
				РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ЭтотОбъект); 
				
			КонецЕсли;
			
		КонецЕсли;
		
		КолСписатьСоСклада = Макс(СтрокаОстатков.КолОстаток - СтрокаОстатков.КолРезерв, 0);
		Если КолСписатьСоСклада > 0 Тогда
			НоваяСтрока = ТабЧасть.Добавить();
			НоваяСтрока.Номенклатура                 = СтрокаОстатков.Номенклатура;
			НоваяСтрока.Количество                   = КолСписатьСоСклада;
			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			
			Если Не ФлагТары Тогда
			
				НоваяСтрока.ХарактеристикаНоменклатуры   = СтрокаОстатков.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения             = СтрокаОстатков.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                  = СтрокаОстатков.Коэффициент;
				Если ЕстьКачество Тогда
					НоваяСтрока.Качество = Справочники.Качество.Новый;
				КонецЕсли;
				РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ЭтотОбъект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу()

Процедура ЗаполнитьСкладыВТабЧастиТоварыПоВнутреннемуЗаказу (ДокСсылка, ТабЧасть, ТабОстаткиПоСкладам) Экспорт
	Если ТабОстаткиПоСкладам.Количество()>0 Тогда
		Для каждого СтрокаТабличнойЧасти  ИЗ ТабЧасть Цикл
			СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров=Перечисления.СпособыСписанияОстаткаТоваров.СоСклада; 
			 НайденнаяСтрока=ТабОстаткиПоСкладам.Найти(СтрокаТабличнойЧасти.Номенклатура,"Номенклатура");
			 Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				//СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров=Перечисления.СпособыСписанияОстаткаТоваров.СоСклада; 
				СтрокаТабличнойЧасти.Склад=НайденнаяСтрока.Склад; 
			 КонецЕсли;	 
		 КонецЦикла;	 
		 
	КонецЕсли;	
КонецПроцедуры	
