
// Процедура устанавливает параметры номер сессии и имя и пароль пользователя
//
Процедура УстановитьПараметры() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	смсПараметры.НомерСессии КАК НомерСессии
	|ИЗ
	|	РегистрСведений.смсПараметры КАК смсПараметры";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		ПараметрыСеанса.смсНомерСессии = РезультатЗапроса[0].НомерСессии;
	Иначе 
		ПараметрыСеанса.смсНомерСессии = 0;
	КонецЕсли; 
	
	смсКоммуникатор.УстановитьИмяПользователяИПароль(Константы.смсИмяПользователя.Получить(), Константы.смсПарольПользователя.Получить());
	
КонецПроцедуры

// Функция читает параметры с регистра сведений "смсПараматеры"
// 
// Возвращаемое значение (Структура):
// 
// Возвращает стуктуру параметров
//
Функция ПолучитьПараметры() Экспорт
	
	Структура = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	смсПараметры.НомераОтправителя,
	|	смсПараметры.ОстатокСМС,
	|	смсПараметры.МаксДлительностьДоставки,
	|	смсПараметры.МаксАктуальностьДоставки,
	|	смсПараметры.ДатаПолученияСМС,
	|	смсПараметры.Миллисекунда,
	|	смсПараметры.КоличествоНомеров
	|ИЗ
	|	РегистрСведений.смсПараметры КАК смсПараметры";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Строка = РезультатЗапроса[0];
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Структура.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Структура;
	
КонецФункции

// Процедура записывает параметры сессии в регист сведений "смсПараметры"
//
// Параметры:
//
//  ПараметрыСессии (структура)- содержит параметры которые необходимо записать в регистр.
//							
//Процедура ЗаписатьПараметры(ПараметрыСессии) Экспорт 
//	
//	НоваяЗапись = РегистрыСведений.смсПараметры.СоздатьМенеджерЗаписи();
//	НоваяЗапись.Прочитать();
//	Если ПараметрыСессии.Свойство("Номера") Тогда
//		НоваяЗапись.НомераОтправителя = ПараметрыСессии.Номера;
//	КонецЕсли;	
//	Если ПараметрыСессии.Свойство("ОстатокСМС") Тогда
//		НоваяЗапись.ОстатокСМС = ПараметрыСессии.ОстатокСМС;
//	КонецЕсли;	
//	Если ПараметрыСессии.Свойство("МаксАктуальностьДоставки") Тогда
//		НоваяЗапись.МаксАктуальностьДоставки = ПараметрыСессии.МаксАктуальностьДоставки;
//	КонецЕсли;	
//	Если ПараметрыСессии.Свойство("МаксДлительностьДоставки") Тогда
//		НоваяЗапись.МаксДлительностьДоставки = ПараметрыСессии.МаксДлительностьДоставки;
//	КонецЕсли;	
//	Если ПараметрыСессии.Свойство("КолНомеров") Тогда
//		НоваяЗапись.КоличествоНомеров = ПараметрыСессии.КолНомеров;
//	КонецЕсли;	
//	Если ПараметрыСессии.Свойство("ДатаПолученияСМС") Тогда
//		НоваяЗапись.ДатаПолученияСМС = ПараметрыСессии.ДатаПолученияСМС;
//	КонецЕсли;	
//	НоваяЗапись.НомерСессии = смсКоммуникатор.ПолучитьНомерСессии();
//	НоваяЗапись.Записать();
//	
//КонецПроцедуры

// Функция предназначена для перевода числового кода статуса в перечисление 
//
// Параметры:
//
//  КодСтатуса (число)- числовой код статуса.
// 
// Возвращаемое значение (Перечисления.смсСостоянияСообщений):
// 
// Возвращает представление статуса
//
//Функция КодВСтатус(КодСтатуса) Экспорт
//	
//	Если КодСтатуса = 1 Тогда
//		Статус = Перечисления.смсСостоянияСообщений.Доставка;
//	ИначеЕсли КодСтатуса = 2 Тогда 
//		Статус = Перечисления.смсСостоянияСообщений.ВОчереди;
//	ИначеЕсли КодСтатуса = 3 Тогда 
//		Статус = Перечисления.смсСостоянияСообщений.Отправлено;
//	ИначеЕсли КодСтатуса = 4 Тогда 
//		Статус = Перечисления.смсСостоянияСообщений.НеОтправлено;
//	ИначеЕсли КодСтатуса = 5 Тогда 
//		Статус = Перечисления.смсСостоянияСообщений.Доставлено;
//	ИначеЕсли КодСтатуса = 6 Тогда 
//		Статус = Перечисления.смсСостоянияСообщений.НеДоставлено;
//	ИначеЕсли КодСтатуса = 7 Тогда 
//		Статус = Перечисления.смсСостоянияСообщений.Ошибка;
//	ИначеЕсли КодСтатуса = 8 Тогда 
//		Статус = Перечисления.смсСостоянияСообщений.Получено;
//	ИначеЕсли КодСтатуса = 9 Тогда 
//		Статус = Перечисления.смсСостоянияСообщений.ПолученоЧастично;
//	КонецЕсли; 
//	
//	Возврат Статус;
//	
//КонецФункции

// Функция предназначена для перевода статуса в числовое представление  
//
// Параметры:
//
//  Статус (Перечисления.смсСостоянияСообщений)- Статус.
// 
// Возвращаемое значение (число):
// 
// Возвращает числово представление статуса
//
//Функция СтатусВКод(Статус) Экспорт
//	
//	Если Статус = Перечисления.смсСостоянияСообщений.Доставка Тогда
//		КодСтатуса = 1;
//	ИначеЕсли Статус = Перечисления.смсСостоянияСообщений.ВОчереди Тогда
//		КодСтатуса = 2;
//	ИначеЕсли Статус = Перечисления.смсСостоянияСообщений.Отправлено Тогда
//		КодСтатуса = 3;
//	ИначеЕсли Статус = Перечисления.смсСостоянияСообщений.НеОтправлено Тогда
//		КодСтатуса = 4;
//	ИначеЕсли Статус = Перечисления.смсСостоянияСообщений.Доставлено Тогда
//		КодСтатуса = 5;
//	ИначеЕсли Статус = Перечисления.смсСостоянияСообщений.НеДоставлено Тогда
//		КодСтатуса = 6;
//	ИначеЕсли Статус = Перечисления.смсСостоянияСообщений.Ошибка Тогда
//		КодСтатуса = 7;
//	ИначеЕсли Статус = Перечисления.смсСостоянияСообщений.Получено Тогда
//		КодСтатуса = 8;
//	ИначеЕсли Статус = Перечисления.смсСостоянияСообщений.ПолученоЧастично Тогда
//		КодСтатуса = 9;
//	КонецЕсли; 
//	
//	Возврат КодСтатуса;
//	
//КонецФункции

// Функция убирает лишнии символы и разделители из строки с номером телефона
// 
// Параметры:
//	Телефон	- Строка	- Номер телефона
//
// Возвращаемое значение:
//	Строка	- Номер телефона после обработки
//
Функция УбратьЛишниеСимволыТелефона(Телефон) Экспорт
	// Убираем все ненужные символы
	ДлинаНомера = СтрДлина(Телефон);
	НовыйТелефон = "";
	Для а = 1 По ДлинаНомера Цикл
		Симв 		= Сред(Телефон, а, 1);
		КодСимвола 	= КодСимвола(Симв);
		Если КодСимвола < 58 И КодСимвола > 47 Тогда
			НовыйТелефон = НовыйТелефон + Симв;
		КонецЕсли;	
	КонецЦикла;
	// Проверяем полученный номер телефона
	Если НЕ ПустаяСтрока(НовыйТелефон) Тогда
		Если СтрДлина(НовыйТелефон) > 7 Тогда
			Если Лев(НовыйТелефон, 1) = "8" Тогда 
				НовыйТелефон = "7" + Сред(НовыйТелефон, 2, СтрДлина(НовыйТелефон));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат НовыйТелефон;
КонецФункции // УбратьЛишниеСимволыТелефона()

// Функция расчитывает длину сообщения в символах и число частей, на которое будет разбито сообщения при отправке 
//
// Параметры:
//	Сообщение	- Строка	- Текст сообщения
//
// Возвращаемое значение:
//	Структура	- Структура, содержащая длину сообщения и количество частей
//
Функция ВернутьДлинуТекстаСМС(Сообщение) Экспорт
	
	СтруктураВозврата = Новый Структура;
	// Максимальная длинна T-UD (User Data) в октетах
	МаксДлинаСообщения  =  140;
	// Длинна заголовка пользовательских данных в октетах
	ДлинаЗаголовка = 6;
	// Максимальная длинна данных в UCS2 (16 бит представляются 2 октктами)
	МаксДлинаСМС_UCS2 = Цел(МаксДлинаСообщения / 2); // 70;
	// Максимальная длинна данных в UCS2 минус заголовок пользовательских данных
	МаксДлинаСМС_UCS2_БезUDH =  Цел((МаксДлинаСообщения  - ДлинаЗаголовка - 1) / 2);
	// Максимальная длинна данных в 7 bit
	МаксДлинаСМС_7bit = МаксДлинаСообщения + Цел(МаксДлинаСообщения / 7); // 160
	// Максимальная длинна данных в  8 bit минус заголовок пользовательских данных
	МаксДлинаСМС_7bit_БезUDH = МаксДлинаСМС_7bit - (ДлинаЗаголовка + 1);
	// Определяем из скольких частей будет состоять SMS
	ДлинаСообщения = СтрДлина(Сообщение);
	
	СтруктураВозврата.Вставить("ДлинаСообщения", ДлинаСообщения);
	
	Кодировка = смсКоммуникатор.Использовать7БитСообщение(Сообщение);
	Если Кодировка = 0 Тогда
		Если ДлинаСообщения > МаксДлинаСМС_7bit Тогда 
			МаксДлина = МаксДлинаСМС_7bit_БезUDH;
			КолвоЧастей = Цел(ДлинаСообщения / МаксДлина);
			Если (ДлинаСообщения / МаксДлина - Цел(ДлинаСообщения / МаксДлина) > 0) Тогда 
				КолвоЧастей = КолвоЧастей + 1; 
			КонецЕсли;
		Иначе
			МаксДлина = МаксДлинаСМС_7bit;
			КолвоЧастей = 1;			
		КонецЕсли;
	Иначе
		Если ДлинаСообщения > МаксДлинаСМС_UCS2 Тогда
			МаксДлина = МаксДлинаСМС_UCS2_БезUDH;
			КолвоЧастей = Цел(ДлинаСообщения / МаксДлина);
			Если (ДлинаСообщения / МаксДлина - Цел(ДлинаСообщения / МаксДлина) > 0) Тогда
				КолвоЧастей = КолвоЧастей + 1;
			КонецЕсли;
		Иначе
			МаксДлина = МаксДлинаСМС_UCS2;
			КолвоЧастей = 1;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("КоличествоЧастей", КолвоЧастей);
	
	Возврат СтруктураВозврата;
	
КонецФункции // кмВернутьДлинуТекстаSMS()

// Функция возвращает список элементов справочника "ВидыКонтактнойИнформации", с видом мобильный или сотовый телефон 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- Список элементов справочника "ВидыКонтактнойИнформации"
//
Функция ПолучитьСписокВидовТелефонов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	(НЕ ВидыКонтактнойИнформации.ПометкаУдаления)
	|	И ВидыКонтактнойИнформации.Тип = &Тип
	|	И (ВидыКонтактнойИнформации.Наименование ПОДОБНО ""%мобильный%""
	|			ИЛИ ВидыКонтактнойИнформации.Наименование ПОДОБНО ""%сотовый%"")";
	СписокВидовТелефонов = Новый СписокЗначений;
	СписокВидовТелефонов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокВидовТелефонов;
	
КонецФункции // ПолучитьСписокВидовТелефонов()

// Функция проверяет заполнение констант для подключения к сервису SMS
//
// Параметры:
//	СтруктураКонстант	- Структура	- Структура, содержащая значения констант
//
// Возвращаемое значение:
//	Булево	- Заполненность констант 
//
Функция ПроверитьНастройкиПодключения() Экспорт
	НетОшибок = Истина;
	Если ПустаяСтрока(Константы.смсИмяПользователя.Получить()) Тогда
		НетОшибок = Ложь;
		смсРаботаССообщениями.ВывестиСообщение(НСтр("ru = 'Не указано имя пользователя для подключения к серверу SMS4B.'"), СтатусСообщения.Важное,
		"Подключение SMS", УровеньЖурналаРегистрации.Предупреждение);
	КонецЕсли;	
	Если ПустаяСтрока(Константы.смсПарольПользователя.Получить()) Тогда
		НетОшибок = Ложь;
		смсРаботаССообщениями.ВывестиСообщение(НСтр("ru = 'Не указан пароль пользователя для подключения к серверу SMS4B.'"), СтатусСообщения.Важное,
		"Подключение SMS", УровеньЖурналаРегистрации.Предупреждение);
	КонецЕсли;
	
	Возврат НетОшибок;
	
КонецФункции // кмПроверитьНастройкиПодключения()	

// Функция получает сообщений из регистра сведений, предназначенные для отправки
//
// Возвращаемое значение:
//	Результат запроса - сообщения для отправки 
//
Функция ПолучитьСообщенияДляОтправки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	смсСостоянияСообщений.Сообщение КАК Сообщение,
	|	смсСостоянияСообщений.НомерСтрокиДокумента,
	|	смсСообщениеПолучатели.НомерТелефона КАК НомерПолучателя,
	|	смсСообщениеПолучатели.ТекстСообщения КАК ТекстСообщения,
	|	смсСостоянияСообщений.GUID,
	|	0 КАК КодОшибки
	|ИЗ
	|	РегистрСведений.смсСостоянияСообщений КАК смсСостоянияСообщений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.смсСообщение.Получатели КАК смсСообщениеПолучатели
	|		ПО смсСостоянияСообщений.Сообщение = смсСообщениеПолучатели.Ссылка
	|			И смсСостоянияСообщений.НомерСтрокиДокумента = смсСообщениеПолучатели.НомерСтроки
	|ГДЕ
	|	смсСостоянияСообщений.Статус = ЗНАЧЕНИЕ(Перечисление.смсСостоянияСообщений.Доставка)
	|ИТОГИ ПО
	|	Сообщение";
	
	Возврат Запрос.Выполнить();
	 
КонецФункции


//Орлов +++
функция ОтправитьSMS(КонтрагентSMS=неопределено, ТекстСообщенияSMS = "") Экспорт
	 результат = истина;
	 
	Если НЕ смсРаботаССообщениями.ПроверитьЗаполнениеКонстант(Истина) Тогда
		Возврат ложь;
	КонецЕсли;

	Если ТекстСообщенияSMS="" или КонтрагентSMS=Неопределено тогда
		возврат ложь;
	КонецЕсли;
	
	смсИмяПользователя    = Константы.смсИмяПользователя.Получить();
	смсПарольПользователя = Константы.смсПарольПользователя.Получить();
	
//	смсКоммуникатор.УстановитьИмяПользователяИПароль(смсИмяПользователя, смсПарольПользователя);

	ПрерватьОбработку = Ложь;
	
	Если ЗначениеЗаполнено(смсИмяПользователя) И ЗначениеЗаполнено(смсПарольПользователя) Тогда
		Результат = смсКоммуникатор.Подключиться();
		Если Результат = 1 Тогда 
			//Предупреждение(НСтр("ru = 'Вы успешно подключились к серверу SMS4B!'"));
			ПараметрыСессии = Новый Структура;
			смсКоммуникатор.ПолучитьПараметрыСессии(ПараметрыСессии);
		//	смсРаботаССообщениями.ЗаписатьПараметры(ПараметрыСессии); //!!!!!
		Иначе
			#Если Клиент тогда
			сигнал();
			Предупреждение(НСтр("ru = 'Ошибка при попытке подключения: " + смсКоммуникатор.ОписаниеОшибокВебСервиса(Результат)+"'"), 30);
			#иначе
			Сообщить(НСтр("ru = 'Ошибка при попытке подключения: " + смсКоммуникатор.ОписаниеОшибокВебСервиса(Результат)+"'"), СтатусСообщения.Внимание);
		#КонецЕсли
			ПрерватьОбработку = истина;
		КонецЕсли;
	КонецЕсли;
	
	// Обновляем параметры сессии
	ПараметрыСессии = Новый Структура;
	смсКоммуникатор.ПолучитьПараметрыСессии(ПараметрыСессии);
	//смсРаботаССообщениями.ЗаписатьПараметры(ПараметрыСессии);
	
	КодОшибки = 0;
	
	// Отправка сообщений
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерПолучателя");
	Таблица.Колонки.Добавить("GUID");
	Таблица.Колонки.Добавить("ТекстСообщения");
	Таблица.Колонки.Добавить("КодОшибки");
	Таблица.Колонки.Добавить("НомерСтрокиДокумента");
	
	Таблица.Очистить();
	
	НовСтрока = Таблица.Добавить();
	
	//Получим телефон контрагента
	НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(КонтрагентSMS);
	НаборЗаписей.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	НаборЗаписей.Отбор.Вид.Установить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0 Тогда
		НомерПолучателя = НаборЗаписей[0].Представление;
	КонецЕсли;
	НомерПолучателя = СтрЗаменить(НомерПолучателя, "+", "");
	НомерПолучателя = СтрЗаменить(НомерПолучателя, " ", "");
	НомерПолучателя = СтрЗаменить(НомерПолучателя, "(", "");
	НомерПолучателя = СтрЗаменить(НомерПолучателя, ")", "");
	НомерПолучателя = СтрЗаменить(НомерПолучателя, "-", "");
	
	Если Лев(НомерПолучателя, 1) = "7" Тогда
		НомерПолучателя = Прав(НомерПолучателя, 10);
	КонецЕсли;
	
	Если СтрДлина(НомерПолучателя) = 10 Тогда
		НомерПолучателя = "8"+НомерПолучателя;
	КонецЕсли;
	
	НовСтрока.НомерПолучателя = НомерПолучателя;
	НовСтрока.GUID = Строка(Новый УникальныйИдентификатор);
	НовСтрока.ТекстСообщения = текстСообщенияSMS; //" не более 160 символов!;
	НовСтрока.КодОшибки = 0;
	НовСтрока.НомерСтрокиДокумента = 1;
	
	// Заполняем параметры отправки сообщений
	СписокСообщений = смсКоммуникатор.ТаблицаЗначенийВМассивСтруктур(Таблица);
	НомерОтправителя = Константы.НомераОтправителя.Получить();
	ТекстСообщенияПоУмолчанию = "";
	ДатаОтправки			  = ТекущаяДата();
	Актуальность 	 		  = '00010101';
	НачалоПериодаЗапрета 	  = '00010101';
	КонецПериодаЗапрета 	  = '00010101';
	РавномернаяРассылка 	  = Истина;
	
	// Отправляем сообщения
	КодОшибки = смсКоммуникатор.ОтправитьСообщения(СписокСообщений, НомерОтправителя, ТекстСообщенияПоУмолчанию, ДатаОтправки,
	Актуальность, НачалоПериодаЗапрета, КонецПериодаЗапрета, РавномернаяРассылка);
	
	Если КодОшибки < -100000 Тогда //Перешли на другой сервер
		ПрерватьОбработку = Истина;
		КодОшибки = КодОшибки + 100000;
	КонецЕсли;
		
	Если ПрерватьОбработку тогда //перешли на другой сервер, прерываем рагламентное задание
		результат = истина;	
	КонецЕсли;
	
	
	возврат результат;
	
КонецФункции

//процедура "без вопросов", аналог отправки SMS
//процедура Email(записьРегистра) Экспорт

//	Если ЗначениеЗаполнено(записьРегистра.Документ) тогда
//		ДокОбъект 		  = записьРегистра.Документ;
//		ТекстСообщенияSMS = записьРегистра.ТекстСообщения;
//		
//		Email  = записьРегистра.Email;
//		
//		регион = ?(ЗначениеЗаполнено(ДокОбъект.Регион), сокрЛП(ДокОбъект.Регион.Наименование), "");
//		Контр  = ?(ЗначениеЗаполнено(ДокОбъект.Контрагент), сокрЛП(ДокОбъект.Контрагент.Наименование), "");
//		Email  = ?(ЗначениеЗаполнено(Email),Email,"");
//		
//		сайт=?(регион="Ярославль", "koleso76.ru", "kolesatyt.ru");
//		текстПисьма = Константы.EmailТекст.Получить();
//		Если текстПисьма="" тогда
//			текстПисьма = "Уважаемый [Контрагент],
//						  |
//						  |Для просмотра товаров по своему заказу
//						  |
//					  	  |1) Войдите в свой личный кабинет на сайте:
//						  |www.[сайт]/personal/profile/?login=yes
//						  |
//						  |2) Откройте раздел: Мой кабинет -> Заказы -> Ознакомиться с состоянием заказов
//						  |http://www.[сайт].ru/personal/order/
//						  |
//					  	  |С уважением, 
//						  |Интернет-магазин [сайт]
//						  |
//						  |ТЕЛЕФОНЫ: 
//						  | 8-800-100-22-90,
//						  | 8-930-1000-633
//						  | (БЕСПЛАТНЫЙ ЗВОНОК ПО Российской Федерации)
//						  |
//						  |телефон представительства в вашем регионе
//						  |смотрите на странице: http://www.[сайт]/contacts/";
//		КонецЕсли;
//		текстПисьма = стрЗаменить(текстПисьма, "[сайт]", сайт);
//		текстПисьма = стрЗаменить(текстПисьма, "[Контрагент]", ДокОбъект.Контрагент.Наименование);
//				
//		ИнтернетМагазин.ПослатьОтКолес(Email, ТекстСообщенияSMS, текстПисьма, регион);
//		
//	иначе
//		ИнтернетМагазин.ПослатьОтКолес(записьРегистра.Email, записьРегистра.ТекстСообщения, ,записьРегистра.Регион);
//	КонецЕсли;

//КонецПроцедуры

//ТекстСообщенияSMS = "Ваш Интернет-заказ № "+Ссылка.НомерВходящегоДокументаЭлектронногоОбмена+" на сумму: "+формат(сылка.СуммаДокумента,"ЧДЦ=2")+" р. - "+Строка(Ссылка.Статус); // Проверен / Отгружен / Отменен 
//регистрация по документу
Процедура ЗаписатьДвиженияSMSРассылки(знач ДокументСсылка=неопределено, ТекстСообщенияSMS = "", ДатаВремяSMS='00010101') Экспорт
	
	Если ТекстСообщенияSMS="" тогда //или ДокументСсылка=Неопределено тогда
		возврат;
	КонецЕсли;

попытка
	//Получим телефон контрагента
	НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка.Контрагент);
	НаборЗаписей.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	НаборЗаписей.Отбор.Вид.Установить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0 Тогда
		НомерПолучателя = НаборЗаписей[0].Представление;
	КонецЕсли;
	НомерПолучателя = СтрЗаменить(НомерПолучателя, "+", "");
	НомерПолучателя = СтрЗаменить(НомерПолучателя, " ", "");
	НомерПолучателя = СтрЗаменить(НомерПолучателя, "(", "");
	НомерПолучателя = СтрЗаменить(НомерПолучателя, ")", "");
	НомерПолучателя = СтрЗаменить(НомерПолучателя, "-", "");
	
	Если Лев(НомерПолучателя, 1) = "7" Тогда
		НомерПолучателя = Прав(НомерПолучателя, 10);
	КонецЕсли;
	
	Если СтрДлина(НомерПолучателя) = 10 Тогда
		НомерПолучателя = "8"+НомерПолучателя;
	КонецЕсли;
	
//+++( ----------------------------@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@-----------------------------
	НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка.Контрагент);
	НаборЗаписей.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	НаборЗаписей.Отбор.Вид.Установить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0 Тогда
		АдресЭлПочты = СокрЛП(НаборЗаписей[0].Представление);
	иначе
		АдресЭлПочты = "";
	КонецЕсли;
	
	РегионТекст = СокрЛП(строка(ДокументСсылка.Регион));
	РегионТекст = ?(РегионТекст ="", СокрЛП(строка(ДокументСсылка.Контрагент.Регион)), РегионТекст);
	
//+++)

	// регистр SMSРассылка
	НаборЗаписей = РегистрыСведений.SMSРассылка.СоздатьНаборЗаписей(); 

	Если ТипЗнч(ДокументСсылка) = Тип("ДокументОбъект.ЗаказПокупателя") тогда
		ДокументСсылка = ДокументСсылка.ссылка;
	КонецЕсли;	
	
	Если СтрДлина(НомерПолучателя) = 11 И Найти(НомерПолучателя, "9") = 2 Тогда 
		
	// тому же самому - ищем телефон, емайл и документ...
	НаборЗаписей.отбор.Email.Установить( АдресЭлПочты );
	НаборЗаписей.отбор.НомерПолучателя.Установить( НомерПолучателя ); // тому же самому - номер мог поменяться...
	НаборЗаписей.отбор.Документ.Установить(ДокументСсылка);  //отбор по документу... на все случаи жизни...
	//НаборЗаписей.отбор.ДатаОтправления.Установить( '00010101' );// чтобы оставались записи об отправленных SMS
	НаборЗаписей.Прочитать();

		Если НаборЗаписей.Выбран() и НаборЗаписей.Количество()>0 Тогда //уже записывался
			
			Если ТекстСообщенияSMS<>НаборЗаписей[0].ТекстСообщения тогда  //+++ 12.11.2012 не повторять одно и то же !!!
			НаборЗаписей[0].ДатаОтправления = ДатаВремяSMS; // ДатаВремяSMS='00010101'
			НаборЗаписей[0].GUID  = СокрЛП(Строка(Новый УникальныйИдентификатор)); 
			НаборЗаписей[0].ТекстСообщения  = ТекстСообщенияSMS;  //перезатираем старое сообщение
			
			НаборЗаписей[0].Email  = АдресЭлПочты;
    		НаборЗаписей[0].Регион = РегионТекст;
			
			НаборЗаписей.Записать(Истина); // перезапись!
			КонецЕсли;
		
		Иначе               //новая запись
			НовЗапись = НаборЗаписей.Добавить();
			НовЗапись.ДатаОтправления = ДатаВремяSMS;
			НовЗапись.НомерПолучателя = НомерПолучателя;
			НовЗапись.GUID            = СокрЛП(Строка(Новый УникальныйИдентификатор));
			НовЗапись.Документ        = ДокументСсылка.ссылка;//пустой!
			НовЗапись.ТекстСообщения  = ТекстСообщенияSMS;
			
			НаборЗаписей[0].Email  = АдресЭлПочты;
    		НаборЗаписей[0].Регион = РегионТекст;

			НаборЗаписей.Записать();
		КонецЕсли;
		
	иначеЕсли СокрЛП(АдресЭлПочты)<>"" тогда // нет телефона но есть эл.адрес
		
	// тому же самому - ищем телефон, емайл и документ...
	НаборЗаписей.отбор.Email.Установить( АдресЭлПочты );
	НаборЗаписей.отбор.НомерПолучателя.Установить( "" ); // тому же самому - номер мог поменяться...
	НаборЗаписей.отбор.Документ.Установить(ДокументСсылка);  //отбор по документу... на все случаи жизни...
	//НаборЗаписей.отбор.ДатаОтправления.Установить( '00010101' );// чтобы оставались записи об отправленных SMS
	НаборЗаписей.Прочитать();

		Если (НаборЗаписей.Выбран() и НаборЗаписей.Количество()>0) Тогда
		НовЗапись = НаборЗаписей[0]; // первая попавшаяся... должна быть 1 для 1 документа
		иначе
		НовЗапись = НаборЗаписей.Добавить();
		КонецЕсли;	
		
		НовЗапись.ДатаОтправления = ДатаВремяSMS;
		НовЗапись.НомерПолучателя = "";
		НовЗапись.GUID            = СокрЛП(Строка(Новый УникальныйИдентификатор));  // Уникальный для каждой записи!!!
		НовЗапись.Документ        = ДокументСсылка;  //пустой
		
		НовЗапись.ТекстСообщения  = ТекстСообщенияSMS;
		НаборЗаписей[0].Email     = АдресЭлПочты;
 		НаборЗаписей[0].Регион 	  = РегионТекст;
		НаборЗаписей.Записать();
	иначе
		Сообщить("Не заполнены или заполнены неверно Телефон и Email у "+строка(ДокументСсылка.Контрагент)+". Уведомления создать невозможно!", СтатусСообщения.Внимание);
	КонецЕсли;

исключение
	#Если Клиент тогда
		Сообщить("Ошибка при записи уведомления: "+ТекстСообщенияSMS+" - "+ОписаниеОшибки());
	#КонецЕсли	
КонецПопытки;

КонецПроцедуры

Функция ПолучитьДанныеДляОтправки()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК КодОшибки,
	|	1 КАК НомерСтрокиДокумента,
	|	SMSРассылка.НомерПолучателя,
	|	SMSРассылка.GUID,
	|	SMSРассылка.Документ,
	|	SMSРассылка.ДатаОтправления,
	|	SMSРассылка.ТекстСообщения КАК ТекстСообщения,
	|	SMSРассылка.Email,
//	|	SMSРассылка.Регион,
	|	SMSРассылка.Срочное КАК Срочное
	|ИЗ
	|	РегистрСведений.SMSРассылка КАК SMSРассылка
	|ГДЕ
	|	SMSРассылка.ДатаОтправления = &ДатаОтправления
	|	И НЕ SMSРассылка.НомерПолучателя = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТекстСообщения
	|АВТОУПОРЯДОЧИВАНИЕ";
			
	Запрос.Параметры.Вставить("ДатаОтправления", Дата("00010101000000"));
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляОтправки()
//Орлов ---

// Функция проверяет есть в базе дубли сообщений
//
// Параметры:
//	СписокГУИД	- массив - Массив GUID сообщений
//	ДатаВхСообщения	- Дата	- Дата входящего сообщений
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Найденные в базе сообщения 
//
Функция ПроверитьДублиСообщений(СписокГУИД, ДатаВхСообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	смсСообщениеПолучатели.GUID,
	|	смсСообщениеПолучатели.Статус,
	|	смсСообщениеПолучатели.ТекстСообщения,
	|	смсСообщениеПолучатели.Ссылка.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.смсСообщение.Получатели КАК смсСообщениеПолучатели
	|ГДЕ
	|	смсСообщениеПолучатели.GUID В(&Массив)
	|	И смсСообщениеПолучатели.Ссылка.Дата > &Дата";
	Запрос.УстановитьПараметр("Массив", СписокГУИД);
	Запрос.УстановитьПараметр("Дата", ДатаВхСообщения-86400);
	
	Возврат Запрос.Выполнить().Выгрузить();
	 
КонецФункции

// Функция получает сообщения статусы которых нужно обновить
//
Функция ПолучитьСообщенияДляОбновления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	смсСостоянияСообщений.GUID КАК GUID,
	|	смсСостоянияСообщений.Статус КАК СтатусСообщения,
	|	смсСостоянияСообщений.ОписаниеОшибки КАК ОписаниеОшибки,
	|	смсСостоянияСообщений.Сообщение,
	|	смсСостоянияСообщений.НомерСтрокиДокумента
	|ИЗ
	|	РегистрСведений.смсСостоянияСообщений КАК смсСостоянияСообщений
	|ГДЕ
	|	(смсСостоянияСообщений.Статус = ЗНАЧЕНИЕ(Перечисление.смсСостоянияСообщений.ВОчереди)
	|			ИЛИ смсСостоянияСообщений.Статус = ЗНАЧЕНИЕ(Перечисление.смсСостоянияСообщений.Отправлено))";
	
	Возврат Запрос.Выполнить().Выгрузить();
	 
КонецФункции

// Проверяет заполение констант имя и пароль ползователя
//
Функция ПроверитьЗаполнениеКонстант(ИзКонстант=Ложь) Экспорт

	ТекстСооб = ?(ИзКонстант, НСтр("ru = 'Не'"), НСтр("ru = 'В константах не'"));
	
	// Проверка заполнения констант
	Если НЕ ЗначениеЗаполнено(Константы.смсИмяПользователя.Получить()) Тогда 
		смсРаботаССообщениями.ВывестиСообщение(ТекстСооб+НСтр("ru = ' заполнен логин для подключения к sms4b.ru из внешних программ!'"), СтатусСообщения.Важное,
		"Отправка сообщений", УровеньЖурналаРегистрации.Предупреждение);
		Возврат Ложь;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Константы.смсПарольПользователя.Получить()) Тогда 
		смсРаботаССообщениями.ВывестиСообщение(ТекстСооб+НСтр("ru = ' заполнен пароль для подключения к sms4b.ru из внешних программ!'"), СтатусСообщения.Важное,
		"Отправка сообщений", УровеньЖурналаРегистрации.Предупреждение);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

//+++ Основаная процедура +++
//
// Процедура регламентного задания для получения/отправки/обновления статусов сообщений
Процедура РегламентноеЗаданиеПроверкаСМС() Экспорт
	
	
	//+++++++++++++ отправка эл.писем +++++++++++++++++
	//РезультатЗапроса = ПолучитьДанныеДляОтправки();
	//Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если НЕ ПроверитьЗаполнениеКонстант() Тогда
		Возврат;
	КонецЕсли; 
	
	//СтруктураПараметров = ПолучитьПараметры();
	
	смсИмяПользователя    = Константы.смсИмяПользователя.Получить();
	смсПарольПользователя = Константы.смсПарольПользователя.Получить();
	
	//смсКоммуникатор.УстановитьИмяПользователяИПароль(смсИмяПользователя, смсПарольПользователя);
	
	Если ЗначениеЗаполнено(смсИмяПользователя) И ЗначениеЗаполнено(смсПарольПользователя) Тогда
		Результат = смсКоммуникатор.Подключиться();
		Если Результат = 1 Тогда 
			//Предупреждение(НСтр("ru = 'Вы успешно подключились к серверу SMS4B!'"));
			ПараметрыСессии = Новый Структура;
			смсКоммуникатор.ПолучитьПараметрыСессии(ПараметрыСессии);
			//смсРаботаССообщениями.ЗаписатьПараметры(ПараметрыСессии);
		Иначе
			сообщить(НСтр("ru = 'Ошибка при попытке подключения: " + смсКоммуникатор.ОписаниеОшибокВебСервиса(Результат)+"'"), СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
	
	КодОшибки = 0;
	ПрерватьОбработку = Ложь;											
	
	//////////////////////////////////////////////////////////////
	// Отправка сообщений
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерПолучателя");
	Таблица.Колонки.Добавить("GUID");
	Таблица.Колонки.Добавить("ТекстСообщения");
	Таблица.Колонки.Добавить("КодОшибки");
	Таблица.Колонки.Добавить("НомерСтрокиДокумента");
	
	ТаблицаСрочные = Таблица.Скопировать();
	
	РезультатЗапроса = ПолучитьДанныеДляОтправки();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Таблица.Очистить();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Срочное тогда
			НовСтрока = ТаблицаСрочные.Добавить();
		иначе
			НовСтрока = Таблица.Добавить();
		КонецЕсли;
		НовСтрока.НомерПолучателя = Выборка.НомерПолучателя;
		НовСтрока.GUID            = СокрЛП(Выборка.GUID);
		НовСтрока.ТекстСообщения  = Выборка.ТекстСообщения;
		НовСтрока.КодОшибки       = Выборка.КодОшибки;
		НовСтрока.НомерСтрокиДокумента = Выборка.НомерСтрокиДокумента;	
		
	КонецЦикла;
	// Заполняем параметры отправки сообщений
	СписокСообщений = смсКоммуникатор.ТаблицаЗначенийВМассивСтруктур(Таблица);
	НомерОтправителя = Константы.НомераОтправителя.Получить();
	ТекстСообщенияПоУмолчанию = "";
	ДатаОтправки			  = ТекущаяДата();
	Актуальность 	 		  = '00010101';
	//НачалоПериодаЗапрета 	  = '00010101';
	//КонецПериодаЗапрета 	  = '00010101';
	//Смирнов 01.10.15 с 21 до 9 не отправляем
	НачалоПериодаЗапрета = '20121030210000';
	КонецПериодаЗапрета = '20121030090000';
	РавномернаяРассылка 	  = Ложь;
	
	// Отправляем сообщения
	КодОшибки = смсКоммуникатор.ОтправитьСообщения(СписокСообщений, НомерОтправителя, ТекстСообщенияПоУмолчанию, ДатаОтправки,
	Актуальность, НачалоПериодаЗапрета, КонецПериодаЗапрета, РавномернаяРассылка);
	
	Если КодОшибки < -100000 Тогда //Перешли на другой сервер
		ПрерватьОбработку = Истина;
		КодОшибки = КодОшибки + 100000;
	КонецЕсли;	
	
	////// Может быть что отправились не все сообщения, а только часть из них
	////КолОтправленных=0;
	////ВсегоСообщений = СписокСообщений.Количество();
	////Для Каждого Строка Из СписокСообщений Цикл
	////	Если Строка.КодОшибки >= 1 Тогда // Отправленное(ые) сообщение(я), части сообщений
	////		КолОтправленных = КолОтправленных + 1;
	////	КонецЕсли; 
	////КонецЦикла;  	
	
	//21.12.15 Смирнов отправляем срочные, без ограничений по времени отправки
	СписокСообщений = смсКоммуникатор.ТаблицаЗначенийВМассивСтруктур(ТаблицаСрочные);

	НачалоПериодаЗапрета 	  = '00010101';
	КонецПериодаЗапрета 	  = '00010101';
	
	// Отправляем сообщения
	КодОшибки = смсКоммуникатор.ОтправитьСообщения(СписокСообщений, НомерОтправителя, ТекстСообщенияПоУмолчанию, ДатаОтправки,
	Актуальность, НачалоПериодаЗапрета, КонецПериодаЗапрета, РавномернаяРассылка);
	
	Если КодОшибки < -100000 Тогда //Перешли на другой сервер
		ПрерватьОбработку = Истина;
		КодОшибки = КодОшибки + 100000;
	КонецЕсли;	
	
	////// Может быть что отправились не все сообщения, а только часть из них
	////КолОтправленных=0;
	////ВсегоСообщений = СписокСообщений.Количество();
	////Для Каждого Строка Из СписокСообщений Цикл
	////	Если Строка.КодОшибки >= 1 Тогда // Отправленное(ые) сообщение(я), части сообщений
	////		КолОтправленных = КолОтправленных + 1;
	////	КонецЕсли; 
	////КонецЦикла; 
	
	
	
	//+++ @@@
	
	
	//+++++++++++++ Для записей где нет телефона, а только Email !!! +++++++++++++++++
	// зафиксируем дату
	////РезультатЗапроса = ПолучитьДанныеДляОтправки();
	////Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	////Пока Выборка.Следующий() Цикл
	////	//+++ заполняем дату при любом условии!!
	////	Если Выборка.ДатаОтправления = '00010101' тогда
	////		РегСв = РегистрыСведений.SMSРассылка.СоздатьМенеджерЗаписи();
	////		ЗаполнитьЗначенияСвойств( РегСв, Выборка);
	////		РегСв.Прочитать();
	////		Если Выборка.Email<>"" тогда
	////			РегСв.ДатаОтправления = ТекущаяДата();
	////		иначеЕсли РегСв.ДатаОтправления = '00010101' тогда
	////			// возможно какая то ошибка при отправлении SMS, чтобы не зациклило... фиксируем дату
	////			РегСв.ДатаОтправления = '11111111'; // 11.11.1111
	////		КонецЕсли;	
	////		РегСв.Записать();
	////	КонецЕсли;	
	////КонецЦикла;
	//////+++++++++++++ отправка эл.писем +++++++++++++++++

КонецПроцедуры

// Функция ИнформационнаяБазаФайловая определяет режим эксплуатации
// информационной базы файловый (Истина) или Серверный (Ложь).
//  При проверке используется СтрокаСоединенияИнформационнойБазы, которую
// можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
            
    Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
        СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
    КонецЕсли;
    Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
    
КонецФункции // ИнформационнаяБазаФайловая()

// Процедура выводит переданное сообщение
//
// Параметры:
//	Сообщение	- Строка					- Текст сообщения
//	Статус		- СтатусСообщения			- Статус сообщения
//	Заголовок	- Строка					- Событие для журнала регистрации
//	Уровень		- УровеньЖурналаРегистрации	- Уровень для журнала регистрации
//
Процедура ВывестиСообщение(Сообщение, Статус, Заголовок = "Сообщение", Уровень) Экспорт
	
	ЗаписьЖурналаРегистрации(Заголовок, Уровень,,, Сообщение);
	#Если Клиент Тогда
		Сообщить(Сообщение, Статус);
	#КонецЕсли
	
КонецПроцедуры	// ВывестиСообщение()

// Установить константы по умолчанию
//
Процедура УстановитьКонстанты() Экспорт
#Если Сервер Тогда
	
	//Если Константы.смсСрокЖизниSMS.Получить() = 0 Тогда
	//	Константы.смсСрокЖизниSMS.Установить(24);
	//КонецЕсли; 
	
#КонецЕсли

КонецПроцедуры

Функция ПолучитьРегламентноеЗаданиеПроверкаСМС() Экспорт
    Возврат РегламентныеЗадания.НайтиПредопределенное("ПроверкаСМС");
КонецФункции

Процедура ОбработатьРеглЗадание() Экспорт
    
    Попытка
        Задание = ПолучитьРегламентноеЗаданиеПроверкаСМС();
        ОбработатьРегламентноеЗадание = Задание.Расписание.ТребуетсяВыполнение();
			
        Если ОбработатьРегламентноеЗадание Тогда
            Выполнить("РегламентноеЗаданиеПроверкаСМС()");
        КонецЕсли; 
    Исключение
        смсРаботаССообщениями.ВывестиСообщение(НСтр("ru = 'Не удалось обработать регламентное задание.'"), СтатусСообщения.Важное,
        "Регламентное задание", УровеньЖурналаРегистрации.Предупреждение);
    КонецПопытки; 

КонецПроцедуры



 // Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ДокументОбъект             - объект проводимого документа, 
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
//Процедура ПроверитьЗаполнениеШапкиДокумента(ДокументОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт
//	
//	МетаданныеРеквизиты = ДокументОбъект.Метаданные().Реквизиты;
//	
//	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

//		Значение = ДокументОбъект[КлючЗначение.Ключ];
//		Если НЕ ЗначениеЗаполнено(Значение) Тогда
//			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
//				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
//				СтрокаСообщения = НСтр("ru = 'Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!'");
//			Иначе
//				СтрокаСообщения = НСтр("ru = '"+КлючЗначение.Значение+"'");
//			КонецЕсли;
//			смсРаботаССообщениями.ВывестиСообщение(СтрокаСообщения, СтатусСообщения.Важное,
//			"Проверка реквизитов документа", УровеньЖурналаРегистрации.Предупреждение);
//			Отказ = Истина;
//		КонецЕсли;

//	КонецЦикла;

//КонецПроцедуры // ПроверитьЗаполнениеШапкиДокумента()


#Если Клиент Тогда
// Процедура выполняет сворачивание/разворачивание элементов форм
//
// Параметры:
//  Видимость         - Булево, признак "развернутости" элемент. 
//  ГлавныйЭлемент    - Элемент формы который сворачиваем.
//  Главный разделить - Разделитель.
//  Панель формы      - панель или главная панель формы.
//  Направление       - Строка, направление сворачивания.
//  Пропорционально   - Булево - Истина, если разделитель привязывается пропорционально
//
Процедура УправлениеВидимостиЭлементов(Видимость, ГлавныйЭлемент, ГлавныйРазделитель, ПанельФормы, Направление, Пропорционально = Истина) Экспорт
	Если ВРег(Направление) =  "ЛЕВО" Тогда
		Если Видимость Тогда
			// откроем 
			ГлавныйРазделитель.Свертка=РежимСверткиЭлементаУправления.Нет;
			ГлавныйЭлемент.Свертка=РежимСверткиЭлементаУправления.Нет;
			ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ГлавныйРазделитель, ГраницаЭлементаУправления.Право);
			Если Пропорционально Тогда
				ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельФормы, ГраницаЭлементаУправления.Право, ПанельФормы, ГраницаЭлементаУправления.Лево);
			Иначе
				ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельФормы, ГраницаЭлементаУправления.Право);
			КонецЕсли;	
			ГлавныйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Право,ГлавныйРазделитель,ГраницаЭлементаУправления.Лево);
			ГлавныйРазделитель.Ширина = 4;
		Иначе	
			// скроем 
			ГлавныйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Право);
			ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ГлавныйЭлемент,ГраницаЭлементаУправления.Право);
			ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право);
			ГлавныйЭлемент.Свертка=РежимСверткиЭлементаУправления.Лево;
			ГлавныйРазделитель.Свертка=РежимСверткиЭлементаУправления.Лево;
		КонецЕсли;
	ИначеЕсли ВРег(Направление) = "ПРАВО" Тогда
		
		Если Видимость Тогда
			// Показать
			ГлавныйРазделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			ГлавныйЭлемент.Свертка = РежимСверткиЭлементаУправления.Нет;
			ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ГлавныйРазделитель, ГраницаЭлементаУправления.Право);
			Если Пропорционально Тогда
				ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельФормы, ГраницаЭлементаУправления.Право,  ПанельФормы, ГраницаЭлементаУправления.Лево);
			Иначе
				ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельФормы, ГраницаЭлементаУправления.Право);
			КонецЕсли;	
			ГлавныйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ГлавныйРазделитель, ГраницаЭлементаУправления.Право);
			ГлавныйРазделитель.Ширина = 4;
		Иначе 
			//скрыть 
			ГлавныйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ГлавныйЭлемент, ГраницаЭлементаУправления.Лево);
			ГлавныйЭлемент.Свертка = РежимСверткиЭлементаУправления.Право;
			ГлавныйРазделитель.Свертка = РежимСверткиЭлементаУправления.Право;
		КонецЕсли;	
		
	ИначеЕсли ВРег(Направление) = "НИЗ" Тогда
		
		Если Видимость Тогда
			// Откроем
			ГлавныйРазделитель.Свертка  = РежимСверткиЭлементаУправления.Нет;
			ГлавныйЭлемент.Свертка		= РежимСверткиЭлементаУправления.Нет;
			ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ГлавныйРазделитель,ГраницаЭлементаУправления.Низ);
			Если Пропорционально Тогда
				ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ПанельФормы, ГраницаЭлементаУправления.Низ,ПанельФормы, ГраницаЭлементаУправления.Верх);
			Иначе
				ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ПанельФормы, ГраницаЭлементаУправления.Низ);
			КонецЕсли;	
			ГлавныйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ГлавныйРазделитель,ГраницаЭлементаУправления.Низ);
			ГлавныйРазделитель.Высота 	= 4;
		Иначе // Скроем 
			ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
			ГлавныйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
			ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ГлавныйЭлемент,ГраницаЭлементаУправления.Верх);
			ГлавныйЭлемент.Свертка 		= РежимСверткиЭлементаУправления.Низ;		
			ГлавныйРазделитель.Свертка	= РежимСверткиЭлементаУправления.Низ;		
		КонецЕсли;
		
	ИначеЕсли ВРег(Направление) = "ВЕРХ" Тогда
		Если Видимость Тогда
			// Откроем
			ГлавныйРазделитель.Свертка  = РежимСверткиЭлементаУправления.Нет;
			ГлавныйЭлемент.Свертка		= РежимСверткиЭлементаУправления.Нет;
			ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ГлавныйРазделитель,ГраницаЭлементаУправления.Низ);
			Если Пропорционально Тогда
				ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПанельФормы, ГраницаЭлементаУправления.Низ, ПанельФормы, ГраницаЭлементаУправления.Верх);
			Иначе
				ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПанельФормы, ГраницаЭлементаУправления.Низ);
			КонецЕсли;	
			ГлавныйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ГлавныйРазделитель,ГраницаЭлементаУправления.Верх);
			ГлавныйРазделитель.Высота 	= 4;
		Иначе // Скроем 
			ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
			ГлавныйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
			ГлавныйРазделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ГлавныйЭлемент, ГраницаЭлементаУправления.Низ);
			ГлавныйЭлемент.Свертка 		= РежимСверткиЭлементаУправления.Верх;		
			ГлавныйРазделитель.Свертка	= РежимСверткиЭлементаУправления.Верх;		
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры	// обУправлениеВидимостиЭлементов()
#КонецЕсли

//07.08.2017 Смирнов
Функция ОтправитьSMSНаНомер(НомерТелефона,ТекстСМС,Срочное = истина) Экспорт
	Если СокрЛП(ТекстСМС)<>"" и СокрЛП(НомерТелефона)<>"" тогда
		МенеджерЗаписи = РегистрыСведений.SMSРассылка.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.GUID = СокрЛП(Строка(Новый УникальныйИдентификатор));
		МенеджерЗаписи.НомерПолучателя = смсРаботаССообщениями.УбратьЛишниеСимволыТелефона(НомерТелефона);
		МенеджерЗаписи.Срочное=Срочное;
		МенеджерЗаписи.ТекстСообщения = ТекстСМС;
		МенеджерЗаписи.Активность = истина;
		
		МенеджерЗаписи.Записать();
		
		смсРаботаССообщениями.РегламентноеЗаданиеПроверкаСМС();
	Иначе
	КонецЕсли;
КонецФункции
