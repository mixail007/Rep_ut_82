
// Проверяет правильность заполнения событий в шапке документов ОС
// Параметры
//  Событие (Перечисление ВыдыСобытийОС): вид события
//  ВидыСобытий (Перечисление ВыдыСобытийОС,СписокЗначений): правильные события
//  ПредставлениеРеквизита: Представление проверяемого реквизита
//  Отказ : отказ от проведения документа
//
Процедура ПроверкаЗаполненияСобытий(Событие,ВидыСобытий,ПредставлениеРеквизита,Отказ) Экспорт
	
	ПравильноеСобытие = Истина;
	Если ВидыСобытий <> Неопределено Тогда
		Если НЕ ЗначениеНеЗаполнено(Событие) тогда
			Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
				ПравильноеСобытие = ВидыСобытий.НайтиПоЗначению(Событие)<>Неопределено;
			Иначе
				ПравильноеСобытие = Событие = ВидыСобытий;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПравильноеСобытие тогда
		
		СтрокаСообщения = "Неправильное значение реквизита шапки """ + СокрЛП(ПредставлениеРеквизита) + """!";
		Сообщить(СтрокаСообщения,СтатусСообщения.Важное);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры// ПроверкаЗаполненияСобытий()

// Функция возвращает соответствие значений перечисления Виды событий ОС
// значениям перечисления СостоянияОС
Функция ПолучитьСоответствиеСобытийСостояниямОС()
	
	СоответствиеСобытийСостояниям = Новый Соответствие;
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.ВведеноВЭксплуатацию,Перечисления.ВидыСобытийОС.ВводВЭксплуатацию);
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.ПринятоКУчету,Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.СнятоСУчета,Перечисления.ВидыСобытийОС.Списание);
	
	Возврат СоответствиеСобытийСостояниям;
	
КонецФункции

// Возвращает параметры состояния ОС 
// 
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Состояние			- Перечисление.ВидыСостоянийОС
//  УпрУчет				- Булево, Учет, 
//  Организация		    - СправочникСсылка.Организации
// Возвращаемое значение структура с полями:
//	Дата,НомерДок,ИмяДок,Сумма,Регистратор
//
Функция ПолучитьАтрибутыСостоянияОС(ОС, Состояние, УпрУчет = Истина, Организация =  Неопределено) Экспорт 
	
	РегистрСобытий 	 = "СобытияОС";
	РегистрСостояний = "СостоянияОС";
	СуммаЗатрат 	 = "СуммаЗатрат";
	
	Если НЕ УпрУчет тогда
		
		РегистрСобытий 	 = РегистрСобытий   + "Организаций";
		РегистрСостояний = РегистрСостояний + "Организаций";
		СуммаЗатрат 	 = СуммаЗатрат		+ "БУ";
		
	КонецЕсли;
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	"+РегистрСостояний+".Регистратор,
	|	"+РегистрСостояний+".ОсновноеСредство,
	|	"+РегистрСостояний+".Состояние,
	|	"+РегистрСостояний+".ДатаСостояния,
	|	"+РегистрСобытий+".Событие,
	|	"+РегистрСобытий+".НомерДокумента,
	|	"+РегистрСобытий+".НазваниеДокумента,
	|	"+РегистрСобытий+"."+СуммаЗатрат+"   КАК Сумма
	|ИЗ
	|	РегистрСведений."+РегистрСостояний+" КАК "+РегистрСостояний+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+РегистрСобытий+" КАК "+РегистрСобытий+"
	|		ПО "+РегистрСостояний+".Регистратор = "+РегистрСобытий+".Регистратор 
	|		И "+РегистрСостояний+".ОсновноеСредство = "+РегистрСобытий+".ОсновноеСредство 
	|ГДЕ
	|		"+РегистрСостояний+".ОсновноеСредство = &ОсновноеСредство 
	|		И "+РегистрСостояний+".Состояние = &Состояние 
	|		И "+РегистрСобытий+".Событие.ВидСобытияОС в (&ВидСобытияОС)";
	
	ЗапросСостоянияОС = Новый Запрос;
	ЗапросСостоянияОС.УстановитьПараметр("Состояние",Состояние);
	СоответствиеСобытийСостояниям = ПолучитьСоответствиеСобытийСостояниямОС();
	ВидСобытия = Новый СписокЗначений;
	Событие    = СоответствиеСобытийСостояниям.Получить(Состояние);
	ВидСобытия.Добавить(Событие);
	Если Событие = Перечисления.ВидыСобытийОС.Списание тогда
		 ВидСобытия.Добавить(Перечисления.ВидыСобытийОС.Передача);
	КонецЕсли;

	ЗапросСостоянияОС.УстановитьПараметр("ВидСобытияОС",ВидСобытия);
	ЗапросСостоянияОС.УстановитьПараметр("ОсновноеСредство",ОС);
	Если Не УпрУчет тогда
		ЗапросСостоянияОС.УстановитьПараметр("Организация",Организация);
		ТекстЗапроса= ТекстЗапроса+"
		|   И  "+РегистрСобытий+".Организация	= &Организация
		|   И  "+РегистрСостояний+".Организация = &Организация";
	КонецЕсли;
	
	ЗапросСостоянияОС.Текст	= ТекстЗапроса;
		
	ВыборкаСостояний = ЗапросСостоянияОС.Выполнить().Выбрать();
	СтруктураСостояния = Новый Структура;
	
	Если ВыборкаСостояний.Следующий() тогда
		
		СтруктураСостояния.Вставить( "Дата"        , ВыборкаСостояний.ДатаСостояния);
		СтруктураСостояния.Вставить( "ИмяДок"      , ВыборкаСостояний.НазваниеДокумента);
		СтруктураСостояния.Вставить( "НомерДок"    , ВыборкаСостояний.НомерДокумента);
		СтруктураСостояния.Вставить( "Сумма"	   , ВыборкаСостояний.Сумма);
		СтруктураСостояния.Вставить( "Регистратор" , ВыборкаСостояний.Регистратор);
		
	Иначе	                                              
		
		СтруктураСостояния.Вставить( "Дата"		   , '00010101000000');
		СтруктураСостояния.Вставить( "ИмяДок"	   , "");
		СтруктураСостояния.Вставить( "НомерДок"	   , "");
		СтруктураСостояния.Вставить( "Сумма"	   , 0);
		СтруктураСостояния.Вставить( "Регистратор" , Неопределено);
		
	КонецЕсли;	
	
	Возврат СтруктураСостояния;
	
КонецФункции

// Возвращает сведения об ОС на дату
// 
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  ДатаСведений	    - Дата
//  Организация		    - СправочникСсылка.Организации
//
Функция ПолучитьСведенияОбОС(ОсновноеСредство,ДатаСведений,Организация = Неопределено, ВидУчета = "Упр") Экспорт
	
	ЗапросСведений  = Новый Запрос;
	
	Если ВидУчета  = "Бух" и Организация <> Неопределено тогда
		
		НазваниеРегистраПервоначальныхСведений = "ПервоначальныеСведенияОСБухгалтерскийУчет";
		НазваниеРегистраПараметровАмортизации  = "ПараметрыАмортизацииОСБухгалтерскийУчет";
		НазваниеРегистраМестонахожденияОС 	   = "МестонахождениеОСБухгалтерскийУчет";
		
		ТекстУсловия  	   = "&ДатаСведений, Организация = &Организация И ОсновноеСредство = &ОсновноеСредство";
		СтрокиСчетов	   = "	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СубСчет,
		                	  |	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации,";
		СоединениеПоСчетам = "		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних("+ТекстУсловия+") КАК СчетаБухгалтерскогоУчетаОС
							  |		ПО ПервоначальныеСведенияОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство";
	    ИнвентарныйНомер   = "	ПервоначальныеСведенияОС.ИнвентарныйНомер КАК ИнвентарныйНомер,";
		ЗапросСведений.УстановитьПараметр("Организация",Организация);
		СтрокаОрганизация  = "  МестонахождениеОС.Организация.Наименование КАК Организация,";
		
	ИначеЕсли ВидУчета  = "Упр" тогда
		
		НазваниеРегистраПервоначальныхСведений = "ПервоначальныеСведенияОС";
		НазваниеРегистраПараметровАмортизации  = "ПараметрыАмортизацииОС";
		НазваниеРегистраМестонахожденияОС 	   = "МестонахождениеОС";
		ТекстУсловия  	   = "&ДатаСведений, ОсновноеСредство = &ОсновноеСредство";
	    ИнвентарныйНомер   = "	ПервоначальныеСведенияОС.ОсновноеСредство.Код КАК ИнвентарныйНомер,";
		СоединениеПоСчетам = "";
		СтрокаОрганизация  = "";
		СтрокиСчетов	   = "";
		
	ИначеЕсли ВидУчета  = "Нал" тогда	
		Возврат Неопределено;
	Иначе
		// передан непонятный параметр ничего не возвращаем
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапросСведений.УстановитьПараметр("ДатаСведений", ДатаСведений);
	ЗапросСведений.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);

	ЗапросСведений.Текст =" 
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОС.СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОС.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОС.КоэффициентАмортизации,
	|	ПараметрыАмортизацииОС.КоэффициентУскорения,
	|	ПараметрыАмортизацииОС.Период,
	|	ПараметрыАмортизацииОС.СрокПолезногоИспользования,
	|"+СтрокиСчетов
	+ИнвентарныйНомер
	+СтрокаОрганизация+"
	|	МестонахождениеОС.Местонахождение,
	|	МестонахождениеОС.МОЛ,
	|	МестонахождениеОС.Местонахождение.Наименование КАК МестонахождениеОС,
	|	МестонахождениеОС.Местонахождение.Наименование КАК Подразделение,
	|	ПервоначальныеСведенияОС.СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОС.ОсновноеСредство,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.КодПоОКОФ КАК КодПоОКОФ,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.АмортизационнаяГруппа КАК НомерГруппы,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеПолное,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.Наименование КАК Наименование,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.Изготовитель КАК ИзготовительОС
	|ИЗ
	|	РегистрСведений."+НазваниеРегистраПервоначальныхСведений+".СрезПоследних("+ТекстУсловия+") КАК ПервоначальныеСведенияОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраПараметровАмортизации+".СрезПоследних("+ТекстУсловия+") КАК ПараметрыАмортизацииОС
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = ПараметрыАмортизацииОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраМестонахожденияОС+".СрезПоследних("+ТекстУсловия+") КАК МестонахождениеОС
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|"+СоединениеПоСчетам;
	
	РезультатЗапроса = ЗапросСведений.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
	     Возврат Неопределено;
	Иначе
		 ТекущиеСведенияОС = РезультатЗапроса.Выбрать();
		 ТекущиеСведенияОС.Следующий();
		 Возврат ТекущиеСведенияОС;
	КонецЕсли;
	
КонецФункции//ПолучитьСведенияОбОС

// Функция определяет фактический срок использования актива (в месяцах)
// исходя из даты принятия актива к учету и даты выбытия
//
// Параметры:
//   ДатаПринятияКУчету - дата принятия актива к учету
//   ДатаВыбытия - дата выбытия актива
//
// Возвращаемое значение:
//   Число месяцев.
//
Функция ОпределитьФактическийСрокИспользования(ДатаПринятияКУчету, ДатаВыбытия) Экспорт
	
	КоличествоЛет     = Год(ДатаВыбытия) - Год(ДатаПринятияКУчету);
	КоличествоМесяцев = Месяц(ДатаВыбытия) - Месяц(ДатаПринятияКУчету);
	
	Возврат КоличествоЛет * 12 + КоличествоМесяцев;
	
КонецФункции // ОпределитьФактическийСрокИспользования()

#Если Клиент Тогда

// Возвращает сведения о руководителе и главбухе
// 
// Параметры
//
Функция ПолучитьСведенияОРуководителеГлавБухе(Организация,Дата) Экспорт
	
	СтруктураСведений	= Новый Структура;
	
	//Если Организация <> Неопределено тогда
	//	Если Организация.Метаданные().Имя = "Организации" тогда
	//		Руководители = ОтветственныеЛицаОрганизаций(Организация,Дата,);
	//		СтруктураСведений.Вставить("Руководитель"	 , Руководители.Руководитель);
	//		СтруктураСведений.Вставить("ДолжностьРуководителя" , Руководители.РуководительДолжность);
	//		СтруктураСведений.Вставить("ГлавБух" , Руководители.ГлавныйБухгалтер);
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат СтруктураСведений;
	
КонецФункции


// Возвращает сведения о поставщике и получателе на дату
// 
// Параметры
//
Функция ПолучитьСведенияОПоставщикеПолучателе(Поставщик,Получатель,Дата) Экспорт
	
	СтруктураСведений	= Новый Структура;
	// { Лапенков
	//Если Поставщик <> Неопределено тогда
	//	
	//	СведенияОПоставщике = СведенияОЮрФизЛице(Поставщик,Дата);
	//	СтруктураСведений.Вставить("АдресСдатчика" , ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,Телефоны,"));
	//	СтруктураСведений.Вставить("РеквСдатчика"  , ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,БИК,"));

	//	Если Поставщик.Метаданные().Имя = "Организации" тогда
	//		Руководители = ОтветственныеЛицаОрганизаций(Поставщик,Дата,);
	//		СтруктураСведений.Вставить("РукСдатчика"	 , Руководители.Руководитель);
	//		СтруктураСведений.Вставить("ДолжРукСдатчика" , Руководители.РуководительДолжность);
	//		СтруктураСведений.Вставить("ГлавБухСдатчика" , Руководители.ГлавныйБухгалтер);
	//	КонецЕсли;
	//КонецЕсли;
	//	
	//Если Получатель <> Неопределено тогда
	//	
	//	СведенияОПокупателе = СведенияОЮрФизЛице(Получатель,Дата);
	//	
	//	СтруктураСведений.Вставить("АдресПолучателя" , ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,Телефоны,"));
	//	СтруктураСведений.Вставить("РеквПолучателя"  , ОписаниеОрганизации(СведенияОПокупателе, "НомерСчета,Банк,БИК,"));

	//	Если Получатель.Метаданные().Имя = "Организации" тогда
	//		Руководители = ОтветственныеЛицаОрганизаций(Получатель,Дата,);
	//		СтруктураСведений.Вставить("РукПолучателя"	   , Руководители.Руководитель);
	//		СтруктураСведений.Вставить("ДолжРукПолучателя" , Руководители.РуководительДолжность);
	//		СтруктураСведений.Вставить("ГлавБухПолучателя" , Руководители.ГлавныйБухгалтер);
	//	КонецЕсли;
	//КонецЕсли;
	// } Лапенков
	Возврат СтруктураСведений;
	
КонецФункции

#КонецЕсли
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПРОВЕРКИ СОСТОЯНИЙ И СОБЫТИЙ ОС

// Проверяет возможность принятия к учету ОС по управленческому и регламентированному учету. 
// Используется документами ВводНачальныхОстатковОС и ПринятиеКУчетуОС
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Дата				- Дата, дата принятия к учету
//  Отказ 				- Булево
//  Организация		    - СправочникСсылка.Организации. Если значение = неопределено - упр. учет.
Процедура ПроверитьВозможностьПринятияКУчетуОС(ОсновноеСредство,Дата,Отказ,Организация = Неопределено) Экспорт
	
	Если Организация  = Неопределено тогда
		// упр. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОС";
		НазваниеРегистраСобытий   	= "РегистрСведений.СобытияОС";
		УсловиеОрганизацииСостояний = "";
		УсловиеОрганизацииСобытий	= "";
	Иначе // бух. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОСОрганизаций";
		НазваниеРегистраСобытий   	= "РегистрСведений.СобытияОСОрганизаций";
		УсловиеОрганизацииСостояний = "И СостоянияОС.Организация = &Организация ";
		УсловиеОрганизацииСобытий	= "СобытияОС.Организация = &Организация И ";
	КонецЕсли;
	
	ЗапросСостоянийИСобытий = Новый Запрос;
	
	
	ЗапросСостоянийИСобытий.Текст =    "ВЫБРАТЬ
									   |    СостоянияОС.Регистратор КАК Регистратор,
						               |	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
						               |	СостоянияОС.Состояние КАК Состояние,
									   |	NULL КАК Событие,
									   |	СостоянияОС.ДатаСостояния КАК Дата
						               |ИЗ
						               |	"+НазваниеРегистраСостояний+" КАК СостоянияОС
						               |
						               |ГДЕ
									   |	(СостоянияОС.Состояние = &СостояниеПринятоКУчету 
									   |	ИЛИ СостоянияОС.Состояние = &СостояниеСнятоСУчета 
									   |	И СостоянияОС.ДатаСостояния <= &Дата 
									   |	ИЛИ СостоянияОС.Состояние = &СостояниеВведеноВЭксплуатацию 
									   |	И СостоянияОС.ДатаСостояния <= &Дата) 
									   |	"+УсловиеОрганизацииСостояний+" 
									   |	И СостоянияОС.ОсновноеСредство = &ОсновноеСредство
						               |
						               |ОБЪЕДИНИТЬ
						               |
						               |ВЫБРАТЬ
									   |	СобытияОС.Регистратор,
						               |	СобытияОС.ОсновноеСредство,
									   |	NULL,
						               |	СобытияОС.Событие.ВидСобытияОС,
									   |	СобытияОС.Период
						               |ИЗ
						               |	"+НазваниеРегистраСобытий+" КАК СобытияОС
						               |
						               |ГДЕ
						               |	СобытияОС.ОсновноеСредство = &ОсновноеСредство И
									   | 	"+УсловиеОрганизацииСобытий+"
						               |	СобытияОС.Событие.ВидСобытияОС <> &ВидСобытияПрочее
									   |	И СобытияОС.Период < &Дата
									   |";
									   
	ЗапросСостоянийИСобытий.УстановитьПараметр("Дата",Дата);
	ЗапросСостоянийИСобытий.УстановитьПараметр("ОсновноеСредство",ОсновноеСредство);
	ЗапросСостоянийИСобытий.УстановитьПараметр("ВидСобытияПрочее",Перечисления.ВидыСобытийОС.Прочее);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеСнятоСУчета",Перечисления.СостоянияОС.СнятоСУчета);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеВведеноВЭксплуатацию",Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеПринятоКУчету",Перечисления.СостоянияОС.ПринятоКУчету);
	Если Организация <> Неопределено тогда
		ЗапросСостоянийИСобытий.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	
	Результат = ЗапросСостоянийИСобытий.Выполнить();
	
	Если Не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		СтрокаСообщения = "Для основного средства <"+ОсновноеСредство.Наименование;
		Если Организация<> Неопределено тогда
			СтрокаСообщения = СтрокаСообщения +"> в организации <"+Строка(Организация);
		КонецЕсли;
		СтрокаСообщения = СтрокаСообщения + "> уже зафиксированы состояния или события:";
		Сообщить(СтрокаСообщения);
		Пока Выборка.Следующий() Цикл
			СтрокаСообщения = "";
			Если Выборка.Состояние <> NULL тогда
				СтрокаСообщения = СтрокаСообщения + "состояние <"+Строка(Выборка.Состояние)
			ИначеЕсли Выборка.Событие <> NULL тогда
				СтрокаСообщения = СтрокаСообщения + "событие <"+Строка(Выборка.Событие)
			КонецЕсли;
			СтрокаСообщения = СтрокаСообщения+"> документ <"+Строка(Выборка.Регистратор);
			СтрокаСообщения = СтрокаСообщения + ">. Дата : "+Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"); 
			ОшибкаПриПроведении(СтрокаСообщения,Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность снятия с учета ОС по управленческому и регламентированному учету. 
// Используется документами ВводНачальныхОстатковОС и ПринятиеКУчетуОС
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Дата				- Дата, дата снятия с учета
//  Отказ 				- Булево
//  Организация		    - СправочникСсылка.Организации. Если значение = неопределено - упр. учет.
Процедура ПроверитьВозможностьСнятияСУчета(ОсновноеСредство,Дата,Отказ,Организация = Неопределено) Экспорт
	
	Если Организация  = Неопределено тогда
		// упр. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОС";
		НазваниеРегистраСобытий   	= "РегистрСведений.СобытияОС";
		УсловиеОрганизацииСостояний = "";
		УсловиеОрганизацииСобытий	= "";
	Иначе // бух. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОСОрганизаций";
		НазваниеРегистраСобытий   	= "РегистрСведений.СобытияОСОрганизаций";
		УсловиеОрганизацииСостояний = "И СостоянияОС.Организация = &Организация ";
		УсловиеОрганизацииСобытий	= "СобытияОС.Организация = &Организация И ";
	КонецЕсли;
	
	ЗапросСостоянийИСобытий = Новый Запрос;
	
	ЗапросСостоянийИСобытий.Текст =    "ВЫБРАТЬ
									   |    СостоянияОС.Регистратор КАК Регистратор,
						               |	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
						               |	СостоянияОС.Состояние КАК Состояние,
									   |	СостоянияОС.ДатаСостояния КАК Дата
						               |ИЗ
						               |	"+НазваниеРегистраСостояний+" КАК СостоянияОС
						               |
						               |ГДЕ
						               |	(СостоянияОС.ОсновноеСредство = &ОсновноеСредство И
									   |     СостоянияОС.Состояние <> &СостояниеСнятоСУчета
									   | 	"+УсловиеОрганизацииСостояний+"
									   |	)
									   |	ИЛИ 
									   |	(СостоянияОС.Состояние = &СостояниеСнятоСУчета И
						               |	 СостоянияОС.ОсновноеСредство = &ОсновноеСредство И
									   |	 СостоянияОС.ДатаСостояния <= &Дата
									   | 	"+УсловиеОрганизацииСостояний+"
									   |	)
									   |";
									   
	ЗапросСостоянийИСобытий.УстановитьПараметр("Дата",Дата);
	ЗапросСостоянийИСобытий.УстановитьПараметр("ОсновноеСредство",ОсновноеСредство);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеСнятоСУчета",Перечисления.СостоянияОС.СнятоСУчета);
	Если Организация <> Неопределено тогда
		ЗапросСостоянийИСобытий.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	
	Результат = ЗапросСостоянийИСобытий.Выполнить();
	
	Если Результат.Пустой() тогда
		СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> не принималось ";
		Если Организация<> Неопределено тогда
			СтрокаСообщения = СтрокаСообщения +"к бухгалтерскому учету в организации <"+Строка(Организация) +">";
		Иначе
			СтрокаСообщения = СтрокаСообщения +"к управленческому учету";
		КонецЕсли;
		ОшибкаПриПроведении(СтрокаСообщения,Отказ);
	Иначе	
		Выборка = Результат.Выбрать();
		Если Организация = Неопределено тогда
			СтрокаВидаУчета = "управленческо";
		Иначе
			СтрокаВидаУчета = "бухгалтерско";
		КонецЕсли;			
		Пока Выборка.Следующий() Цикл
			СтрокаСообщения = Неопределено;
			Если Выборка.Состояние = Перечисления.СостоянияОС.ПринятоКУчету и Выборка.Дата > Дата тогда
				
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> принято к "+ СтрокаВидаУчета +"му учету";
				
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.СнятоСУчета тогда
				
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> снято с "+ СтрокаВидаУчета +"го учета";
				
			КонецЕсли;			
			Если СтрокаСообщения <> Неопределено тогда
				Если Организация <> Неопределено тогда
					СтрокаСообщения = СтрокаСообщения +" в организации <"+Строка(Организация)+">";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения+" документ <"+Строка(Выборка.Регистратор)
								  + ">. Дата: "+Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"); 
				ОшибкаПриПроведении(СтрокаСообщения,Отказ);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры//ПроверитьВозможностьСнятияСУчета

// Проверяет возможность изменения состояния  ОС по управленческому и регламентированному учету. 
// Используется документами ВводНачальныхОстатковОС и ПринятиеКУчетуОС
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Дата				- Дата, дата изменения состояния
//  Отказ 				- Булево
//  Организация		    - СправочникСсылка.Организации. Если значение = неопределено - упр. учет.
Процедура ПроверитьВозможностьИзмененияСостоянияОС(ОсновноеСредство,Дата,Событие,Отказ,Организация = Неопределено) Экспорт
	
	Если Организация  = Неопределено тогда
		// упр. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОС";
		УсловиеОрганизацииСостояний = "";
	Иначе // бух. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОСОрганизаций";
		УсловиеОрганизацииСостояний = "И СостоянияОС.Организация = &Организация ";
	КонецЕсли;
	
	ЗапросСостоянийИСобытий = Новый Запрос;
	
	ЗапросСостоянийИСобытий.Текст =    "ВЫБРАТЬ
									   |    СостоянияОС.Регистратор КАК Регистратор,
						               |	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
						               |	СостоянияОС.Состояние КАК Состояние,
									   |	СостоянияОС.ДатаСостояния КАК Дата
						               |ИЗ
						               |	"+НазваниеРегистраСостояний+" КАК СостоянияОС
						               |
						               |ГДЕ
						               |	(СостоянияОС.ОсновноеСредство = &ОсновноеСредство И
									   |     СостоянияОС.Состояние <> &СостояниеСнятоСУчета
									   | 	"+УсловиеОрганизацииСостояний+"
									   |	)
									   |	ИЛИ 
									   |	(СостоянияОС.Состояние = &СостояниеСнятоСУчета И
						               |	 СостоянияОС.ОсновноеСредство = &ОсновноеСредство И
									   |	 СостоянияОС.ДатаСостояния <= &Дата
									   | 	"+УсловиеОрганизацииСостояний+"
									   |	)
									   |";
									   
	ЗапросСостоянийИСобытий.УстановитьПараметр("Дата",Дата);
	ЗапросСостоянийИСобытий.УстановитьПараметр("ОсновноеСредство",ОсновноеСредство);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеСнятоСУчета",Перечисления.СостоянияОС.СнятоСУчета);
	Если Организация <> Неопределено тогда
		ЗапросСостоянийИСобытий.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	
	Результат = ЗапросСостоянийИСобытий.Выполнить();
	
	Если Результат.Пустой() тогда
		СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> не принималось к учету";
		Если Организация<> Неопределено тогда
			СтрокаСообщения = СтрокаСообщения +" в организации <"+Строка(Организация) +">";
		КонецЕсли;
		ОшибкаПриПроведении(СтрокаСообщения,Отказ);
	Иначе	
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаСообщения = Неопределено;
			Если Выборка.Состояние = Перечисления.СостоянияОС.ВведеноВЭксплуатацию и 
				Событие.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию тогда
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> уже введено в эксплуатацию";
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.ПринятоКУчету и Выборка.Дата > Дата тогда
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> принято к учету";
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.СнятоСУчета тогда
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> снято с учета";
			КонецЕсли;			
			Если СтрокаСообщения <> Неопределено тогда
				Если Организация <> Неопределено тогда
					СтрокаСообщения = СтрокаСообщения +" в организации <"+Строка(Организация)+">";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения+" документ <"+Строка(Выборка.Регистратор)+
								  ">. Дата: "+Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"); 
				ОшибкаПриПроведении(СтрокаСообщения,Отказ);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АМОРТИЗАЦИИ

Функция ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, График, ДатаРасчета, ТипГодовой = Неопределено)

	КоэффициентАмортизации = 0;

	СтрокаТЧ = ТаблицаГрафиков.Найти(График, "График");
	Если СтрокаТЧ = Неопределено Тогда
		Возврат 0;
	КонецЕсли;

	Если ТипГодовой = Неопределено Тогда

		СуммаВсех   = СтрокаТЧ.СуммаКоэффициентов;
		СуммаОдного = СтрокаТЧ["Коэффициент" + Месяц(ДатаРасчета)];

	Иначе

		Если ТипГодовой = ТипЗнч(График) Тогда

			СуммаВсех   = СтрокаТЧ.СуммаКоэффициентов;
			СуммаОдного = СтрокаТЧ["Коэффициент" + Месяц(ДатаРасчета)];

		Иначе

			ТаблицаМесяцев = СтрокаТЧ.ТаблицаМесяцев;
			СтрокаМесяца   = ТаблицаМесяцев.Найти(НачалоМесяца(ДатаРасчета), "МесяцРасчета");

			СуммаВсех      = ТаблицаМесяцев.Итог("Коэффициент");
			СуммаОдного    = ?(СтрокаМесяца = Неопределено, 0, СтрокаМесяца.Коэффициент);

		КонецЕсли;

	КонецЕсли;

	КоэффициентАмортизации = СуммаОдного / ?(СуммаВсех = 0 ИЛИ СуммаВсех = NULL, 1, СуммаВсех);

	Возврат КоэффициентАмортизации;

КонецФункции // ПолучитьКоэффициентАмортизацииИзГрафика()

// Получает сводную таблицу графиков - годовых и индивидуальных одним запросом - чтобы потом можно было 
// данные ез нее дергать, а не лазить в справочник за каждым значеним
//
Функция ПолучитьТаблицуГрафиков()

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка КАК График,
	|	Коэффициент1,
	|	Коэффициент2,
	|	Коэффициент3,
	|	Коэффициент4,
	|	Коэффициент5,
	|	Коэффициент6,
	|	Коэффициент7,
	|	Коэффициент8,
	|	Коэффициент9,
	|	Коэффициент10,
	|	Коэффициент11,
	|	Коэффициент12,
	|	Коэффициент1 + Коэффициент2 + Коэффициент3 + Коэффициент4 + Коэффициент5 + Коэффициент6 + Коэффициент7 + Коэффициент8 + Коэффициент9 + Коэффициент10 + Коэффициент11 + Коэффициент12 КАК СуммаКоэффициентов,
	|	ПУСТАЯТАБЛИЦА.(
	|		КАК График,
	|		КАК МесяцРасчета,
	|		КАК Коэффициент
	|	) КАК ТаблицаМесяцев
	|ИЗ
	|	Справочник.ГодовыеГрафикиАмортизацииОС КАК ГодовыеГрафикиАмортизацииОС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	График.(
	|		Ссылка,
	|		Месяц,
	|		Коэффициент
	|	)
	|ИЗ
	|	Справочник.ИндивидуальныеГрафикиАмортизации КАК ИндивидуальныеГрафикиАмортизации";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуГрафиков

// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииБухРегл(ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",                     Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаБУ",            Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииБУ",      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",            ПолучитьОписаниеТиповСтроки(16));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Бух",                    ПолучитьОписаниеТиповЧисла(15,2));

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("НачалоГода",	      Новый Граница(НачалоГода(ДатаРасчета)));
	Запрос.УстановитьПараметр("НачалоПериода",    Новый Граница(НачалоМесяца(ДатаРасчета)));
	Запрос.УстановитьПараметр("КонецПериода",     Новый Граница(КонецМесяца(ДатаРасчета)));
	Запрос.УстановитьПараметр("Период",           ДатаРасчета);
	Запрос.УстановитьПараметр("СнятоСУчета",      Перечисления.СостоянияОС.СнятоСУчета);
	
	УсловиеПоОС      = ?( ОсновноеСредство = Неопределено, "", " И ОсновноеСредство В (&ОсновноеСредство) ");
	УсловиеПоОС_БезИ = ?( ОсновноеСредство = Неопределено, "", " ОсновноеСредство В (&ОсновноеСредство) ");

	Запрос.Текст = "ВЫБРАТЬ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство                                                              КАК ОсновноеСредство,
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство.Код                                                          КАК Код,
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство.ПодлежитАмортизации                                          КАК ПодлежитАмортизации,
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию                                                          КАК НачислятьАмортизацию,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.СтоимостьНачальныйОстаток, 0)                                                КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.АмортизацияНачальныйОстаток, 0)                                              КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.АмортизацияКонечныйОстаток, 0)                                               КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.АмортизацияОборот, 0)                                                        КАК АмортизацияОборот,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.СтоимостьКонечныйОстаток, 0)                                                 КАК БалансоваяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0)                         КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0)                                 КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0)                       КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0)                                            КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0)                                              КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.Период                                                                         КАК Период,
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации                                                                КАК ГрафикАмортизации,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета                                                                    КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации                                                    КАК СчетНачисленияАмортизации,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации                                     КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость, 0)                            КАК ПервоначальнаяСтоимость,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации                                          КАК СпособыОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(АмортизацияНаНачалоГода.СтоимостьНачальныйОстаток, 0) - ЕСТЬNULL(АмортизацияНаНачалоГода.АмортизацияНачальныйОстаток, 0) КАК СтоимостьНаНачалоГода,
	|	ЕСТЬNULL(ОсновныеСредстваСписанныеНаЗатратыОрганизацииОстатки.СтоимостьОстаток, 0)                                                КАК СтоимостьОстаток,
	|	ЕСТЬNULL(ВыработкаОС.ОбъемВыработки, 0)                                                                                           КАК ОбъемВыработки
	|ИЗ
	|		РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + "
	|		И ОсновноеСредство НЕ В (ВЫБРАТЬ
	|			СостоянияОСОрганизаций.ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ГДЕ
	|			СостоянияОСОрганизаций.Состояние = &СнятоСУчета И
	|			СостоянияОСОрганизаций.ДатаСостояния < &Период И
	|			СостоянияОСОрганизаций.Организация = &Организация " + УсловиеПоОС + ")) КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + " ) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + " ) КАК ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + " ) КАК ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + " ) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСБухгалтерскийУчет.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, ,, Организация = &Организация " + УсловиеПоОС + " ) КАК АмортизацияБухгалтерскийУчетОстаткиИОбороты
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = АмортизацияБухгалтерскийУчетОстаткиИОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(&НачалоПериода, &КонецПериода,, " + УсловиеПоОС_БезИ + " ) КАК ВыработкаОСОбороты
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&КонецПериода, Организация = &Организация " + УсловиеПоОС + " ) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСБухгалтерскийУчет.ОстаткиИОбороты(&НачалоГода, , ,, Организация = &Организация " + УсловиеПоОС + " ) КАК АмортизацияНаНачалоГода
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = АмортизацияНаНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОССписанныеНаЗатратыОрганизаций.Остатки(&КонецПериода, Организация = &Организация " + УсловиеПоОС + " ) КАК ОсновныеСредстваСписанныеНаЗатратыОрганизацииОстатки
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ОсновныеСредстваСписанныеНаЗатратыОрганизацииОстатки.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВыработкаОС.ОсновноеСредство КАК ОсновноеСредство,
	|			ВыработкаОС.КоличествоОборот КАК ОбъемВыработки
	|		ИЗ
	|			РегистрНакопления.ВыработкаОС.Обороты( &НачалоПериода, &КонецПериода,, " + УсловиеПоОС_БезИ + " ) КАК ВыработкаОС
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних( &КонецПериода, Организация = &Организация " + УсловиеПоОС + " ) КАК ПервСведенияОС
	|				ПО ВыработкаОС.ОсновноеСредство = ПервСведенияОС.ОсновноеСредство И ВыработкаОС.ПараметрВыработки = ПервСведенияОС.ПараметрВыработки) КАК ВыработкаОС
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК НачислениеАмортизацииКонецПериода
	|	ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = НачислениеАмортизацииКонецПериода.ОсновноеСредство";
	
	ВыборкаПоОС     = Запрос.Выполнить().Выбрать();
	ТаблицаГрафиков = ПолучитьТаблицуГрафиков();

	Пока ВыборкаПоОС.Следующий() Цикл

		Если НЕ ВыборкаПоОС.СтоимостьОстаток = 0 Тогда
			Продолжить; // ОС списано на затраты - не обрабатывается.
		КонецЕсли;
		
		Если НЕ ВыборкаПоОС.НачислятьАмортизацию Тогда
			Продолжить; // ОС на консервации
		КонецЕсли;
		
		ТекстСообщения = "Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство 
						 + " код " + СокрЛП(ВыборкаПоОС.Код);
		
		Если (ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.АмортизацияНачальныйОстаток) = 0 Тогда
			Если ВыдаватьСообщения Тогда
				СообщитьОбОшибке(ТекстСообщения + " остаточная стоимость на начало месяца равна 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВыборкаПоОС.АмортизацияОборот = 0 Тогда
			Если ВыдаватьСообщения = Истина и не (ОсновноеСредство = Неопределено) Тогда
				СообщитьОбОшибке(ТекстСообщения + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				СообщитьОбОшибке(ТекстСообщения + " не указан способ амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				СообщитьОбОшибке(ТекстСообщения + " стоимость равна 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации)
		И НЕ ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			Если ВыдаватьСообщения = Истина Тогда
				СообщитьОбОшибке(ТекстСообщения + " срок использования равен 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		СуммаАмортизации = 0;
		
		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
 
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации /
			                          ?(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = 0, 1, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) * 12;

			Если ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда

			Если ВыборкаПоОС.ОбъемВыработки = 0 Тогда
				Продолжить;
			КонецЕсли;

			СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации *
			                   ВыборкаПоОС.ОбъемВыработки / 
			                   ?(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации = 0, 1, ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации);

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда

			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.КоэффициентАмортизации / 100;

			Если ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда

			Если ВыборкаПоОС.ОбъемВыработки = 0 Тогда
				Продолжить;
			КонецЕсли;

			СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации *
			                   ВыборкаПоОС.ОбъемВыработки * //  %     км.
			                   ВыборкаПоОС.КоэффициентАмортизации / 100 / 1000

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда

			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
			Иначе
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
			КонецЕсли;

			СуммаГодовойАмортизации = СтоимостьИтоговая / 
			                          ?(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = 0, 1, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) * 12;

			Если ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

			КоэффициентУскорения = ВыборкаПоОС.КоэффициентУскорения;
			Если ЗначениеНеЗаполнено(ВыборкаПоОС.КоэффициентУскорения) Тогда
				КоэффициентУскорения = 1;
				Если ВыдаватьСообщения = Истина Тогда
					СообщитьОбОшибке(ТекстСообщения + " коэффициент ускорения не заполнен");
				КонецЕсли;
			КонецЕсли;

			СуммаАмортизации = СуммаАмортизации * КоэффициентУскорения;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда

			ДатаНачалаРаботы = Неопределено;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
			|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Организация,
			|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период
			|ИЗ
			|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних( &КонецПериода, Организация = &Организация  И ОсновноеСредство = &ОсновноеСредство )  КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних";
			Запрос.УстановитьПараметр("КонецПериода",ДатаРасчета);
			Запрос.УстановитьПараметр("Организация",Организация);
			Запрос.УстановитьПараметр("ОсновноеСредство",ВыборкаПоОС.ОсновноеСредство);
			ВыборкаНачалаРаботы  = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаНачалаРаботы.Следующий() тогда
				ДатаНачалаРаботы =  ВыборкаНачалаРаботы.Период;
			Иначе			
				СообщитьОбОшибке(ТекстСообщения + " не определилась дата начала работы!");
				Продолжить;
			КонецЕсли;

			ЧислоЛетПользования       = ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации / 12;
			ЧислоЛетПользования       = Макс( 1, ЧислоЛетПользования);

			СуммаЧислеЛет             = 0;
			ГодИспользования          = Макс( Год(ДатаРасчета) - Год(ДатаНачалаРаботы) + 1, 1);

			// Формула суммы чисел от 1 до N
			//		S = (N + 1) * N / 2
			СуммаЧислеЛет = (ЧислоЛетПользования + 1) * ЧислоЛетПользования / 2;
			
			ПроцентГодовойАмортизации = (ЧислоЛетПользования - ГодИспользования + 1) / СуммаЧислеЛет;
			СуммаГодовойАмортизации   = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ПроцентГодовойАмортизации;

			Если ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		КонецЕсли;

		Если КоэффициентПериода = 0 Тогда
			Если ВыдаватьСообщения = Истина Тогда
				СообщитьОбОшибке(ТекстСообщения + " коэффициент амортизации равен 0");
			КонецЕсли;
		КонецЕсли;

		ВсегоОсталосьСписать = ВыборкаПоОС.БалансоваяСтоимость - ВыборкаПоОС.АмортизацияКонечныйОстаток;
							   
		// Балансовая стоимость не может быть меньше 0
		СуммаАмортизации  = Макс( Мин( СуммаАмортизации, ВсегоОсталосьСписать), 0);

		СтрокаАмортизации = ТаблицаАмортизации.Добавить();
		СтрокаАмортизации.ОС                     = ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.СчетУчетаБУ            = ВыборкаПоОС.СчетУчета;
		СтрокаАмортизации.СчетАмортизацииБУ      = ВыборкаПоОС.СчетНачисленияАмортизации;
		СтрокаАмортизации.ИмяСубконто            = "ОсновныеСредства";
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.Бух                    = СуммаАмортизации;

		Если СуммаАмортизации = 0 Тогда
			Если ВыдаватьСообщения = Истина Тогда
				СообщитьОбОшибке(ТекстСообщения + " амортизация равна 0");
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииБухРегл()

// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииНалогРегл(Объект,ДатаРасчета,Организация,ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",                                         Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаНУ",                                Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииНУ",                          Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",                                ПолучитьОписаниеТиповСтроки(16));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации",                     Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Налог",                                      ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", ПолучитьОписаниеТиповЧисла(15,2));

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",                       Организация);
	Запрос.УстановитьПараметр("НачалоПериода",                     Новый Граница(НачалоМесяца(ДатаРасчета)));
	Запрос.УстановитьПараметр("КонецПериода",                      Новый Граница(КонецМесяца(ДатаРасчета)));
	Запрос.УстановитьПараметр("Период",                            ДатаРасчета);
	Запрос.УстановитьПараметр("ОсновноеСредство",                  ОсновноеСредство);
	Запрос.УстановитьПараметр("НачислениеАмортизации",             Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
	Запрос.УстановитьПараметр("СчетРасходовНаКапитальныеВложения", ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения);
	Запрос.УстановитьПараметр("СнятоСУчета",                       Перечисления.СостоянияОС.СнятоСУчета);
	
	УсловиеПоОС = ?(ОсновноеСредство = Неопределено, "", " И ОсновноеСредство В (&ОсновноеСредство) ");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство                                                     КАК ОсновноеСредство,
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство.Код                                                 КАК Код,
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство.ПодлежитАмортизации                                 КАК ПодлежитАмортизации,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации                                           КАК СчетНачисленияАмортизации,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета                                                           КАК СчетУчета,
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.НачислятьАмортизацию                                                 КАК НачислятьАмортизацию,
	|	ЕСТЬNULL(ПараметрыАмортизацииНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0)                               КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.МетодНачисленияАмортизации                         КАК МетодНачисленияАмортизации,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.АмортизацияПриход, 0)                                               КАК АмортизацияВМесяце,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.СтоимостьНачальныйОстаток, 0)                                       КАК СтоимостьНаНачалоМесяца,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.СтоимостьКонечныйОстаток, 0)                                        КАК СтоимостьНаКонецМесяца,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.АмортизацияНачальныйОстаток, 0)                                     КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.АмортизацияКонечныйОстаток, 0)                                      КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0)                   КАК СпециальныйКоэффициент,
	|	НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ПризнакНачисленияПоБазовойСтоимости                КАК ПризнакНачисленияПоБазовойСтоимости,
	|	ЕСТЬNULL(НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.СуммаНакопленнойАмортизации, 0)           КАК СуммаНакопленнойАмортизации,
	|	ЕСТЬNULL(НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ФактическийСрокполезногоИспользования, 0) КАК ФактическийСрокполезногоИспользования,
	|	НаправленияАмортизации.СпособыОтраженияРасходовПоАмортизации                                                         КАК НаправлениеАмортизации,
	|	ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0)                                                                         КАК СуммаКапитальныхВложенийВключаемыхВРасходы
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + "
	|		И ОсновноеСредство НЕ В (ВЫБРАТЬ
	|			СостоянияОСОрганизаций.ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ГДЕ
	|			СостоянияОСОрганизаций.Состояние = &СнятоСУчета И
	|			СостоянияОСОрганизаций.ДатаСостояния < &Период И
	|			СостоянияОСОрганизаций.Организация = &Организация " + УсловиеПоОС + ")) КАК НачислениеАмортизацииНалоговыйУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация И ПорядокВключенияСтоимостиВСоставРасходов = &НачислениеАмортизации " + УсловиеПоОС + " ) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + " ) КАК ПараметрыАмортизацииНалоговыйУчетСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСНалоговыйУчет.ОстаткиИОбороты(&НачалоПериода,&КонецПериода, , , Организация = &Организация " + УсловиеПоОС + " ) КАК АмортизацияНалоговыйУчетОстаткиИОбороты
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = АмортизацияНалоговыйУчетОстаткиИОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + " ) КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + " ) КАК СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + " ) КАК НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + " ) КАК НаправленияАмортизации
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = НаправленияАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&НачалоПериода, Счет = &СчетРасходовНаКапитальныеВложения, , Организация = &Организация) КАК НалоговыйОстатки	
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = НалоговыйОстатки.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК НачислениеАмортизацииКонецПериода
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = НачислениеАмортизацииКонецПериода.ОсновноеСредство";

	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоОС.Следующий() Цикл

		Если НЕ ВыборкаПоОС.АмортизацияВМесяце = 0 Тогда
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		Если ВыборкаПоОС.СтоимостьНаНачалоМесяца = 0 Тогда
			Продолжить; // стоимость на начало месяца равна нулю 
		КонецЕсли;
		
		Если НЕ ВыборкаПоОС.НачислятьАмортизацию Тогда
			Продолжить; // ОС на консервации
		КонецЕсли;
		
		ТекстСообщения = "Нал. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство 
						 + " код " + СокрЛП(ВыборкаПоОС.Код);
		
		Если ЗначениеНеЗаполнено(ВыборкаПоОС.МетодНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				СообщитьОбОшибке(ТекстСообщения + " не указан метод амортизации");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ВыборкаПоОС.СрокПолезногоИспользования) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				СообщитьОбОшибке(ТекстСообщения + " не указан срок полезного использования");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				СообщитьОбОшибке(ТекстСообщения + " не указан счет для начисления амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		СуммаАмортизации       = 0;
		СтоимостьДляВычисления = ВыборкаПоОС.СтоимостьНаНачалоМесяца - ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы;
		СрокИспользованияДляВычисления = Макс(1,ВыборкаПоОС.СрокПолезногоИспользования);

		Если ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда

			СуммаАмортизации = СтоимостьДляВычисления / СрокИспользованияДляВычисления *
			                   ?(ВыборкаПоОС.СпециальныйКоэффициент = 0, 1, ВыборкаПоОС.СпециальныйКоэффициент);

		ИначеЕсли ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда

			Если (ВыборкаПоОС.ПризнакНачисленияПоБазовойСтоимости = Истина) тогда

				СтоимостьДляВычисления         = СтоимостьДляВычисления - ВыборкаПоОС.СуммаНакопленнойАмортизации;
				СрокИспользованияДляВычисления = Макс(1, СрокИспользованияДляВычисления - ВыборкаПоОС.ФактическийСрокполезногоИспользования);

				СуммаАмортизации               = СтоимостьДляВычисления / СрокИспользованияДляВычисления *
				                                 ?(ВыборкаПоОС.СпециальныйКоэффициент = 0, 1, ВыборкаПоОС.СпециальныйКоэффициент);

			Иначе

				СтоимостьДляВычисления = СтоимостьДляВычисления - ВыборкаПоОС.АмортизацияКонечныйОстаток;
				СуммаАмортизации       = СтоимостьДляВычисления * 2 / СрокИспользованияДляВычисления *
				                         ?(ВыборкаПоОС.СпециальныйКоэффициент = 0, 1, ВыборкаПоОС.СпециальныйКоэффициент);

				СуммаАмортизации       = Макс(0, Мин(ВыборкаПоОС.СтоимостьНаНачалоМесяца - ВыборкаПоОС.АмортизацияКонечныйОстаток, СуммаАмортизации));

				//Перешли 20% барьер. Переходим к начислению по базовой стоимости.
				Если (ВыборкаПоОС.СтоимостьНаКонецМесяца-ВыборкаПоОС.АмортизацияКонечныйОстаток-СуммаАмортизации)<= (ВыборкаПоОС.СтоимостьНаКонецМесяца*0.2) тогда

					Запрос.УстановитьПараметр("Период",           ДатаРасчета);
					Запрос.УстановитьПараметр("Организация",      Организация);
					Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаПоОС.ОсновноеСредство);
					Запрос.Текст = "
					|ВЫБРАТЬ
					|	АмортизацияНалоговыйУчетОбороты.Период КАК Период,
					|	АмортизацияНалоговыйУчетОбороты.АмортизацияПриход
					|ИЗ
					|	РегистрНакопления.СтоимостьОСНалоговыйУчет.Обороты(, КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), Месяц, Организация = &Организация) КАК АмортизацияНалоговыйУчетОбороты
					|
					|ГДЕ
					|	АмортизацияНалоговыйУчетОбороты.ОсновноеСредство = &ОсновноеСредство";
					ФактыНачисленияАмортизации  = Запрос.Выполнить().Выгрузить();
					ПереходКНачислениюПоБазовой = Объект.Движения.НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет;

					СтрокаДвижения                             = ПереходКНачислениюПоБазовой.Добавить();
					СтрокаДвижения.Период                      = ДатаРасчета;
					СтрокаДвижения.Регистратор                 = Объект;
					СтрокаДвижения.ОсновноеСредство            = ВыборкаПоОС.ОсновноеСредство; 
					СтрокаДвижения.ПризнакНачисленияПоБазовойСтоимости   = Истина;
					СтрокаДвижения.Организация                 = Организация;
					СтрокаДвижения.СуммаНакопленнойАмортизации = ВыборкаПоОС.АмортизацияКонечныйОстаток+СуммаАмортизации;
					СтрокаДвижения.ФактическийСрокПолезногоИспользования = ФактыНачисленияАмортизации.Количество()+1;

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Остатки = ВыборкаПоОС.СтоимостьНаКонецМесяца - ВыборкаПоОС.АмортизацияКонечныйОстаток;
		
		СуммаАмортизации  = Макс(0, Мин(Остатки, СуммаАмортизации));

		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС                                         = ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.СчетУчетаНУ                                = ВыборкаПоОС.СчетУчета;
		СтрокаАмортизации.СчетАмортизацииНУ                          = ВыборкаПоОС.СчетНачисленияАмортизации;
		СтрокаАмортизации.ИмяСубконто                                = "ОсновныеСредства";
		СтрокаАмортизации.НаправлениеАмортизации                     = ВыборкаПоОС.НаправлениеАмортизации;
		СтрокаАмортизации.Налог                                      = СуммаАмортизации;
		СтрокаАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы = ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы;		

		Если СуммаАмортизации = 0 Тогда
			Если ВыдаватьСообщения = Истина Тогда
				СообщитьОбОшибке(ТекстСообщения + " амортизация равна 0");
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииНалогРегл

// Расчитывает сумму амортизации по указаному основному средству по упр учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииУпр(ДатаРасчета,ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС");
	ТаблицаАмортизации.Колонки.Добавить("Упр", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",    НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	УсловиеПоОС = ?( ОсновноеСредство = Неопределено, "", " ОсновноеСредство В (&ОсновноеСредство) ");

	Запрос.Текст = "
|	ВЫБРАТЬ
|		СписокАмортизируемыхОС.ОсновноеСредство                     КАК ОсновноеСредство,
|		СписокАмортизируемыхОС.ОсновноеСредство.Код                 КАК Код,
|		СписокАмортизируемыхОС.НачалоНачислятьАмортизацию           КАК НачалоНачислятьАмортизацию,
|		СписокАмортизируемыхОС.КонецНачислятьАмортизацию            КАК КонецНачислятьАмортизацию,
|		СписокАмортизируемыхОС.КонецНачислятьВТекущемМесяце         КАК КонецНачислятьВТекущемМесяце,
|		СтоимостьОС.АмортизацияКонечныйОстаток                      КАК АмортизацияКонечныйОстаток,
|		СтоимостьОС.АмортизацияОборот                               КАК АмортизацияОборот,
|		СтоимостьОС.СтоимостьКонечныйОстаток                        КАК БалансоваяСтоимость,
|		СтоимостьОС.СтоимостьНачальныйОстаток                       КАК СтоимостьНачальныйОстаток,
|		АмортизацияОстаткиИОбороты.СтоимостьНачальныйОстаток - АмортизацияОстаткиИОбороты.АмортизацияНачальныйОстаток КАК СтоимостьНаНачалоГода,
|		ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.СпособНачисленияАмортизации                            КАК СпособНачисленияАмортизации,
|		ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПервоначальнаяСтоимость                                КАК ПервоначальнаяСтоимость,
|		ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце   КАК ПрименитьВТекущемМесяце,
|		ПараметрыАмортизацииСрезПоследних.Период                    КАК Период,
|	
|// параметры зависящие от ПрименитьВТекущемМесяце	
|	ВЫБОР 
|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
|		ТОГДА СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации
|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца.СпособыОтраженияРасходовПоАмортизации 
|	КОНЕЦ КАК СпособыОтраженияРасходовПоАмортизации,
|		
|		ВЫБОР 
|			КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
|			ТОГДА ПараметрыАмортизацииСрезПоследних.СрокИспользованияДляВычисленияАмортизации
|			ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.СрокИспользованияДляВычисленияАмортизации 
|		КОНЕЦ КАК СрокИспользованияДляВычисленияАмортизации,
|	
|		ВЫБОР 
|			КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
|			ТОГДА ПараметрыАмортизацииСрезПоследних.СтоимостьДляВычисленияАмортизации
|			ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.СтоимостьДляВычисленияАмортизации 
|		КОНЕЦ КАК СтоимостьДляВычисленияАмортизации,
|	
|		ВЫБОР 
|			КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
|			ТОГДА ПараметрыАмортизацииСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации
|			ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ОбъемПродукцииРаботДляВычисленияАмортизации 
|		КОНЕЦ КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
|	
|		ВЫБОР 
|			КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
|			ТОГДА ПараметрыАмортизацииСрезПоследних.КоэффициентУскорения
|			ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.КоэффициентУскорения 
|		КОНЕЦ КАК КоэффициентУскорения,
|	
|		ВЫБОР 
|			КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
|			ТОГДА ПараметрыАмортизацииСрезПоследних.КоэффициентАмортизации
|			ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.КоэффициентАмортизации
|		КОНЕЦ КАК КоэффициентАмортизации,
|// конец параметры зависящие от ПрименитьВТекущемМесяце	
|	
|		ОсновныеСредстваСписанныеНаЗатратыОстатки.СтоимостьОстаток  КАК СтоимостьОстаток,
|		ВЫБОР КОГДА ИзменениеПризнакаАмортизации.ИзменениеНачислАморт ЕСТЬ NULL ТОГДА
|			Ложь
|		ИНАЧЕ
|			ИзменениеПризнакаАмортизации.ИзменениеНачислАморт
|		КОНЕЦ КАК ИзменениеНачислАморт,
|		ВЫБОР КОГДА ИзменениеПризнакаАмортизации.НачислятьВТекМесяце ЕСТЬ NULL ТОГДА
|			Ложь
|		ИНАЧЕ
|			ИзменениеПризнакаАмортизации.НачислятьВТекМесяце
|		КОНЕЦ КАК НачислятьВТекМесяце
|	ИЗ
|		(ВЫБРАТЬ
|			СрезПервых.НачислятьАмортизацию КАК НачалоНачислятьАмортизацию,
|			СрезПоследних.НачислятьАмортизацию КАК КонецНачислятьАмортизацию,
|			СрезПоследних.НачислятьАмортизациюВТекущемМесяце КАК КонецНачислятьВТекущемМесяце,
|			СрезПоследних.ОсновноеСредство КАК ОсновноеСредство
|		ИЗ
|			(ВЫБРАТЬ
|				НачислениеАмортизацииСрезПервых.ОсновноеСредство КАК ОсновноеСредство,
|				НачислениеАмортизацииСрезПервых.НачислятьАмортизацию КАК НачислятьАмортизацию,
|				НачислениеАмортизацииСрезПервых.НачислятьАмортизациюВТекущемМесяце КАК НачислятьАмортизациюВТекущемМесяце,
|				НачислениеАмортизацииСрезПервых.Период КАК Период
|			ИЗ
|				РегистрСведений.НачислениеАмортизацииОС.СрезПоследних(&НачалоПериода," + УсловиеПоОС + " ) КАК НачислениеАмортизацииСрезПервых) КАК СрезПервых
|				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
|					НачислениеАмортизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
|					НачислениеАмортизацииСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию,
|					НачислениеАмортизацииСрезПоследних.НачислятьАмортизациюВТекущемМесяце КАК НачислятьАмортизациюВТекущемМесяце,
|					НачислениеАмортизацииСрезПоследних.Период КАК Период
|				ИЗ
|					РегистрСведений.НачислениеАмортизацииОС.СрезПоследних(&КонецПериода," + УсловиеПоОС + " ) КАК НачислениеАмортизацииСрезПоследних) КАК СрезПоследних
|				ПО СрезПервых.ОсновноеСредство = СрезПоследних.ОсновноеСредство) КАК СписокАмортизируемыхОС
|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.ОстаткиИОбороты(&НачалоГода, , ,, " + УсловиеПоОС + ") КАК АмортизацияОстаткиИОбороты
|			ПО СписокАмортизируемыхОС.ОсновноеСредство = АмортизацияОстаткиИОбороты.ОсновноеСредство
|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, ,," + УсловиеПоОС + "  ) КАК СтоимостьОС
|			ПО СписокАмортизируемыхОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
|	
|// нчало параметры зависящие от применить в текущем месяце
|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&КонецПериода, " + УсловиеПоОС + " ) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
|   		ПО СписокАмортизируемыхОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство
|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&КонецПериода," + УсловиеПоОС + "  ) КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
|			ПО СписокАмортизируемыхОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство
|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОС.СрезПоследних(&КонецПериода," + УсловиеПоОС + " ) КАК ПараметрыАмортизацииСрезПоследних
|			ПО СписокАмортизируемыхОС.ОсновноеСредство = ПараметрыАмортизацииСрезПоследних.ОсновноеСредство
|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&НачалоПериода, " + УсловиеПоОС + " ) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца
|			ПО СписокАмортизируемыхОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство
|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОС.СрезПоследних(&НачалоПериода, " + УсловиеПоОС + " ) КАК ПараметрыАмортизацииСрезПоследнихНачалоМесяца
|			ПО СписокАмортизируемыхОС.ОсновноеСредство = ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство	
|// конец параметры зависящие от применить в текущем месяце
|   		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОССписанныеНаЗатраты.Остатки(&КонецПериода, " + УсловиеПоОС + " ) КАК ОсновныеСредстваСписанныеНаЗатратыОстатки
|	    	ПО СписокАмортизируемыхОС.ОсновноеСредство = ОсновныеСредстваСписанныеНаЗатратыОстатки.ОсновноеСредство
|	
|			ЛЕВОЕ СОЕДИНЕНИЕ (
|				ВЫБРАТЬ
|					КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИСТИНА) КАК ИзменениеНачислАморт,
|					НачислениеАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
|					НачислениеАмортизацииСрезПоследних.НачислятьАмортизациюВТекущемМесяце КАК НачислятьВТекМесяце
|				ИЗ
|					РегистрСведений.НачислениеАмортизацииОС КАК НачислениеАмортизацииОС
|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОС.СрезПоследних(&КонецПериода," + УсловиеПоОС + "  ) КАК НачислениеАмортизацииСрезПоследних
|					ПО НачислениеАмортизацииОС.ОсновноеСредство = НачислениеАмортизацииСрезПоследних.ОсновноеСредство
|				ГДЕ
|					НачислениеАмортизацииОС.Период МЕЖДУ &НачалоПериода И &КонецПериода
|				СГРУППИРОВАТЬ ПО
|					НачислениеАмортизацииОС.ОсновноеСредство,
|					НачислениеАмортизацииСрезПоследних.НачислятьАмортизациюВТекущемМесяце) КАК ИзменениеПризнакаАмортизации
|			ПО СписокАмортизируемыхОС.ОсновноеСредство = ИзменениеПризнакаАмортизации.ОсновноеСредство";

	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	//ТипГодовой  = Тип ("СправочникСсылка.ГодовыеГрафикиАмортизацииОС");

	//ТаблицаГрафиков = ПолучитьТаблицуГрафиков();

	Пока ВыборкаПоОС.Следующий() Цикл

		// Если были изменения флага начисления амортизации, то анализируем
		// признак необходимости начисления амортизации в текущем месяце.
		Если ВыборкаПоОС.ИзменениеНачислАморт Тогда
			Если Не ВыборкаПоОС.НачислятьВТекМесяце Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если ВыборкаПоОС.КонецНачислятьВТекущемМесяце = Истина Тогда
				Если ВыборкаПоОС.КонецНачислятьАмортизацию = NULL 
				 ИЛИ ВыборкаПоОС.КонецНачислятьАмортизацию = Ложь Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли (ВыборкаПоОС.КонецНачислятьВТекущемМесяце = Ложь) 
				    И (ВыборкаПоОС.НачалоНачислятьАмортизацию = NULL) Тогда 
					Продолжить;
			ИначеЕсли ВыборкаПоОС.КонецНачислятьВТекущемМесяце = Ложь Тогда
				Если ВыборкаПоОС.КонецНачислятьАмортизацию = Ложь Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекстСообщения = "Упр. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство 
						 + " код " + СокрЛП(ВыборкаПоОС.Код);
		
		Если (ВыборкаПоОС.АмортизацияОборот <> 0) И
			(ВыборкаПоОС.АмортизацияОборот <> Null)Тогда
			Если ВыдаватьСообщения = Истина и не (ОсновноеСредство = Неопределено) Тогда
				СообщитьОбОшибке(ТекстСообщения + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;
		
		Если ВыборкаПоОС.СтоимостьОстаток <> 0 И
			 ВыборкаПоОС.СтоимостьОстаток <> Null Тогда
			Продолжить; // ОС списано на затраты - не обрабатывается.
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				СообщитьОбОшибке(ТекстСообщения + " не указан способ амортизации");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				СообщитьОбОшибке(ТекстСообщения + " стоимость равна 0");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		//Если ЗначениеНеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации)
		//И Не  (ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции
		//  ИЛИ  ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ
		//  ИЛИ  ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега) Тогда
		//	Если ВыдаватьСообщения = Истина Тогда
		//		СообщитьОбОшибке(ТекстСообщения + " срок использования равен 0");
		//	КонецЕсли;
		//	Продолжить;
		//КонецЕсли;

		Если ЗначениеНеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				СообщитьОбОшибке(ТекстСообщения + " срок использования равен 0");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		СуммаАмортизации = 0;

		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда

			СуммаГодовойАмортизации = ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации          = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) /
			                          ?((ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = NULL
			                            ИЛИ ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = 0), 1, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) * 12;

			//Если ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;

			//Иначе
			//	КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета, ТипГодовой);
			//	СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;

			//КонецЕсли;

		//ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда

		//	Если ВыборкаПоОС.ОбъемВыработки = NULL ИЛИ ВыборкаПоОС.ОбъемВыработки = 0 Тогда
		//		Продолжить;
		//	КонецЕсли;

		//	СуммаАмортизации = ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) *
		//					   ВыборкаПоОС.ОбъемВыработки / 
		//					   ?(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации = NULL, 1, ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации);

		//ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда

		//	СуммаГодовойАмортизации = ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) *
		//							  ?(ВыборкаПоОС.КоэффициентАмортизации           = NULL, 0, ВыборкаПоОС.КоэффициентАмортизации) / 100;

		//	Если ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
		//		СуммаАмортизации = СуммаГодовойАмортизации / 12;

		//	Иначе
		//		КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета, ТипГодовой);
		//		СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;

		//	КонецЕсли;

		//ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда

		//	Если ВыборкаПоОС.ОбъемВыработки = NULL ИЛИ ВыборкаПоОС.ОбъемВыработки = 0 Тогда
		//		Продолжить;
		//	КонецЕсли;

		//	СуммаАмортизации = ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) *
		//					   ВыборкаПоОС.ОбъемВыработки * //  %     км.
		//					   ?(ВыборкаПоОС.КоэффициентАмортизации = NULL, 0, ВыборкаПоОС.КоэффициентАмортизации) / 100 / 1000;

		//ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда

		//	Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
		//		СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;

		//	Иначе
		//		СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;

		//	КонецЕсли;

		//	СуммаГодовойАмортизации = ?(СтоимостьИтоговая = NULL, 0, СтоимостьИтоговая) / 
		//							  ?(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = NULL, 1, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) * 12;

		//	Если ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
		//		СуммаАмортизации   = СуммаГодовойАмортизации / 12;

		//	Иначе
		//		КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета, ТипГодовой);
		//		СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;

		//	КонецЕсли;

		//	КоэффициентУскорения = ВыборкаПоОС.КоэффициентУскорения;
		//	Если ЗначениеНеЗаполнено(ВыборкаПоОС.КоэффициентУскорения) Тогда
		//		КоэффициентУскорения = 1;
		//		Если ВыдаватьСообщения = Истина Тогда
		//			СообщитьОбОшибке(ТекстСообщения + " коэффициент ускорения не заполнен");
		//		КонецЕсли;
		//	КонецЕсли;

		//	СуммаАмортизации = СуммаАмортизации * КоэффициентУскорения;

		//ИначеЕсли ВыборкаПоОС.СпособНачисленияАморизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
		//	
		//	Запрос = Новый Запрос;
		//	Запрос.Текст = "ВЫБРАТЬ
		//				   |	ПараметрыАмортизацииОС.ОсновноеСредство,
		//				   |	ПараметрыАмортизацииОС.Период
		//				   |ИЗ
		//				   |	РегистрСведений.ПараметрыАмортизацииОС.СрезПоследних( &КонецПериода, ОсновноеСредство = &ОсновноеСредство ) КАК ПараметрыАмортизацииОС";
		//	Запрос.УстановитьПараметр("КонецПериода",ДатаРасчета);
		//	Запрос.УстановитьПараметр("ОсновноеСредство",ВыборкаПоОС.ОсновноеСредство);
		//	ВыборкаНачалаРаботы  = Запрос.Выполнить().Выбрать();
		//	
		//	Если ВыборкаНачалаРаботы.Следующий() тогда
		//		ДатаНачалаРаботы = ВыборкаНачалаРаботы.Период;
		//	Иначе			
		//		СообщитьОбОшибке(ТекстСообщения + " не определилась дата начала работы!");
		//		Продолжить;
		//	КонецЕсли;

		//	ЧислоЛетПользования       = ?(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) / 12;
		//	ЧислоЛетПользования       = Макс( 1, ЧислоЛетПользования);

		//	СуммаЧислеЛет             = 0;
		//	ГодИспользования          = Макс( Год(ДатаРасчета) - Год(ДатаНачалаРаботы) + 1, 1);

		//	// Формула суммы чисел от 1 до N
		//	//		S = (N + 1) * N / 2
		//	СуммаЧислеЛет = (ЧислоЛетПользования + 1) * ЧислоЛетПользования / 2;

		//	ПроцентГодовойАмортизации = (ЧислоЛетПользования - ГодИспользования + 1) / СуммаЧислеЛет;
		//	СуммаГодовойАмортизации   = ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) * 
		//								  ПроцентГодовойАмортизации;

		//	Если ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
		//		СуммаАмортизации = СуммаГодовойАмортизации / 12;

		//	Иначе
		//		КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета, ТипГодовой);
		//		СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;

		//	КонецЕсли;

		//ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда

		//	КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета, ТипГодовой);

		//	СуммаАмортизации = ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) * 
		//						 КоэффициентАмортизации;

		КонецЕсли;

		//Если КоэффициентАмортизации = 0 И ВыдаватьСообщения = Истина Тогда
		//	СообщитьОбОшибке(ТекстСообщения + " коэффициент аммортизации равен 0");
		//КонецЕсли;

		ПервоначальнаяСтоимость = ВыборкаПоОС.ПервоначальнаяСтоимость;
		Если ПервоначальнаяСтоимость = NULL Тогда
			Если ВыдаватьСообщения = Истина Тогда
				СообщитьОбОшибке(ТекстСообщения + " первоначальная стоимость равна 0");
			КонецЕсли;
			ПервоначальнаяСтоимость = 0;
		КонецЕсли;

		ВсегоОсталосьСписать = ?( ВыборкаПоОС.БалансоваяСтоимость        = NULL, 0, ВыборкаПоОС.БалансоваяСтоимость)
			                 - ?( ВыборкаПоОС.АмортизацияКонечныйОстаток = NULL, 0, ВыборкаПоОС.АмортизацияКонечныйОстаток);
							 
		// Балансовая стоимость не может быть меньше 0
		СуммаАмортизации     = Макс( Мин( СуммаАмортизации, ВсегоОсталосьСписать), 0);
		СтрокаАмортизации    = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС                     = ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.Упр                    = СуммаАмортизации;

		Если СуммаАмортизации = 0 И ВыдаватьСообщения = Истина Тогда
			СообщитьОбОшибке(ТекстСообщения + " амортизация равна 0");
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииУпр()

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияОС(ОсновноеСредство, Организация, ВидСостояния, ДокРегистратор, ДатаДокРегистратора) Экспорт

	ДокРегистратор      = Неопределено;
	ДатаДокРегистратора = 0;
	СтруктПараметров 	= ПолучитьАтрибутыСостоянияОС( ОсновноеСредство,ВидСостояния,Ложь,Организация);
	ДокРегистратор      = СтруктПараметров["Регистратор"];
	ДатаДокРегистратора = СтруктПараметров["Дата"];

КонецПроцедуры

//Получает документ и дату для указанного состояния нематериального актива по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияНМА(НематериальныйАктив, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеНМА", 	Состояние);
	Запрос.УстановитьПараметр("НМА",            НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияНМАОрганизаций.Регистратор КАК Документ
		|ИЗ
		|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
		|ГДЕ
		|	СостоянияНМАОрганизаций.НематериальныйАктив = &НМА
		|	И СостоянияНМАОрганизаций.Организация = &Организация
		|	И СостоянияНМАОрганизаций.Состояние = &СостояниеНМА
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияНМАОрганизаций.Регистратор.Дата УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Документ.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьАналитикуСчетаЗатрат(ПодразделениеОрганизации,СтатьяЗатрат,НоменклатурнаяГруппа,ОбъектСтроительства,ЗнСубконто1, ЗнСубконто2, ЗнСубконто3) Экспорт

	СтруктураПолей = Новый Структура;

	Субконто1 = Неопределено;
	Субконто2 = Неопределено;
	Субконто3 = Неопределено;

	Если (СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы)
	 ИЛИ (СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве) Тогда

		Субконто1 = ПодразделениеОрганизации;
		Субконто2 = НоменклатурнаяГруппа;
		Субконто3 = СтатьяЗатрат;

	ИначеЕсли (СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы) 
		  ИЛИ (СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы ) Тогда

		Субконто1 = ПодразделениеОрганизации;
		Субконто2 = СтатьяЗатрат;

	ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда

		Субконто1 = ОбъектСтроительства;
		Субконто2 = СтатьяЗатрат;
		Субконто3 = Перечисления.СпособыСтроительства.Хозспособ;

	ИначеЕсли (СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы) 
		  ИЛИ (СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения) Тогда

		Субконто1 = СтатьяЗатрат;
		Субконто2 = ПодразделениеОрганизации;

	ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда

		Субконто1 = ЗнСубконто1;
		Субконто2 = ЗнСубконто2;
		Субконто3 = ЗнСубконто3;

	КонецЕсли;

	СтруктураПолей.Вставить("Субконто1", Субконто1);
	СтруктураПолей.Вставить("Субконто2", Субконто2);
	СтруктураПолей.Вставить("Субконто3", Субконто3);

	Возврат СтруктураПолей;

КонецФункции

//Функция получает таблицу значений с указанием списка ОС и сумм амортизации
//возвращает таблицу значений с распределенными значениями амортизации
//
Функция ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ДокОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента) Экспорт

	Если ЕстьРеквизитДокумента("ПериодРегистрации", ДокОбъект.Метаданные()) Тогда
		ДатаРасчета = КонецМесяца(ДокОбъект.ПериодРегистрации);
	Иначе
		ДатаРасчета = ДокОбъект.Дата;
	КонецЕсли; 

	// определим структуру выходной таблицы
	ТабЗатрат = Новый ТаблицаЗначений;
	ТабЗатрат.Колонки.Добавить("СтатьяЗатрат",            Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТабЗатрат.Колонки.Добавить("Сумма",                   ПолучитьОписаниеТиповЧисла( 15, 2));
	ТабЗатрат.Колонки.Добавить("Продукция",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабЗатрат.Колонки.Добавить("ХарактеристикаПродукции", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТабЗатрат.Колонки.Добавить("СерияПродукции",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТабЗатрат.Колонки.Добавить("НоменклатурнаяГруппа",    Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТабЗатрат.Колонки.Добавить("ОбъектСтроительства",     Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства"));
	ТабЗатрат.Колонки.Добавить("Подразделение",           Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТабЗатрат.Колонки.Добавить("Заказ",                   Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТабЗатрат.Колонки.Добавить("Проект");
//	ТабЗатрат.Колонки.Добавить("СпособРаспределенияЗатратНаВыпуск", Новый ОписаниеТипов("СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск"));

	МассивКоэф = Новый Массив;

	// цикл по Объектам из ТабАмортизации
	Для Каждого СтрокаТЗ Из ТабАмортизации Цикл
		Если СтрокаТЗ.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(СтрокаТЗ.НаправлениеАмортизации) Тогда
			Сообщить("В Упр. учете для объекта "+ СтрокаТЗ.ОбъектУчета+" не указан способ отражения расходов по амортизации",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 0 Тогда
			Сообщить("В Упр. учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в списке способов отражения расходов по амортизации нет записей",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		МассивКоэф.Очистить();
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
		КонецЦикла;

		МассивСумм = РаспределитьПропорционально( СтрокаТЗ.Сумма, МассивКоэф, 2);
		Если МассивСумм = Неопределено Тогда
			Сообщить("В Упр. учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения расходов по амортизации не проставлены коэффициенты",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если МассивСумм.Количество() <> МассивКоэф.Количество() Тогда
			Сообщить("В Упр. учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения расходов по амортизации есть нулевые коэффициенты",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл

			НоваяСтрока = ТабЗатрат.Добавить();
			НоваяСтрока.Подразделение           = СтрокаНапр.Подразделение;
			НоваяСтрока.СтатьяЗатрат            = СтрокаНапр.СтатьяЗатрат;
			НоваяСтрока.НоменклатурнаяГруппа    = СтрокаНапр.НоменклатурнаяГруппа;
			НоваяСтрока.ОбъектСтроительства     = СтрокаНапр.ОбъектСтроительства;
			НоваяСтрока.Продукция               = СтрокаНапр.Продукция;
			НоваяСтрока.Проект                  = СтрокаНапр.Проект;
			НоваяСтрока.ХарактеристикаПродукции = СтрокаНапр.ХарактеристикаПродукции;
			НоваяСтрока.СерияПродукции          = СтрокаНапр.СерияПродукции;
	//		НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = СтрокаТЗ.НаправлениеАмортизации.СпособРаспределенияЗатратНаВыпуск;
			НоваяСтрока.Сумма                   = МассивСумм[СтрокаНапр.НомерСтроки - 1];

		КонецЦикла;

	КонецЦикла;

	//записи в регистра по учету затрат
	ДопПараметры = Новый Структура;

	ДвиженияПоПрочимЗатратамУпр( ДокОбъект, ТабЗатрат, СтруктураШапкиДокумента, Неопределено, ДопПараметры);

	Возврат ТабЗатрат;

КонецФункции // ПолучитьРаспределениеАмортизацииПоНаправлениямУпр()

//Функция получает таблицу значений с указанием списка ОС и сумм амортизации
//возвращает таблицу значений с распределенными значениями амортизации
//Параметры входной таблицы значений:
// - ОС
//
//
//Параметры выходной таблицы значений:
// - "ОсновноеСредство"
//
Функция ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ДокОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, ТипУчета, НомерЖурнала, ТекстПроводки = Неопределено) Экспорт

	Если ЕстьРеквизитДокумента("ПериодРегистрации", ДокОбъект.Метаданные()) Тогда
		ДатаРасчета = КонецМесяца(ДокОбъект.ПериодРегистрации);
	Иначе
		ДатаРасчета = ДокОбъект.Дата;
	КонецЕсли; 

	// определим структуру выходной таблицы
	ТабЗатрат = Новый ТаблицаЗначений;
	ТабЗатрат.Колонки.Добавить("СтатьяЗатрат",            Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТабЗатрат.Колонки.Добавить("Сумма",                   ПолучитьОписаниеТиповЧисла( 15, 2));
	ТабЗатрат.Колонки.Добавить("Продукция",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабЗатрат.Колонки.Добавить("ХарактеристикаПродукции", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТабЗатрат.Колонки.Добавить("СерияПродукции",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТабЗатрат.Колонки.Добавить("НоменклатурнаяГруппа",    Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТабЗатрат.Колонки.Добавить("ОбъектСтроительства",     Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства"));
	ТабЗатрат.Колонки.Добавить("ПодразделениеОрганизации",Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТабЗатрат.Колонки.Добавить("Заказ",                   Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТабЗатрат.Колонки.Добавить("СчетЗатрат");
	ТабЗатрат.Колонки.Добавить("СчетЗатратНУ");
	ТабЗатрат.Колонки.Добавить("СчетАмортизации");
	ТабЗатрат.Колонки.Добавить("СчетАмортизацииНУ");
	ТабЗатрат.Колонки.Добавить("ИмяСубконто");
	ТабЗатрат.Колонки.Добавить("ОбъектУчета");
	ТабЗатрат.Колонки.Добавить("Субконто1");
	ТабЗатрат.Колонки.Добавить("Субконто2");
	ТабЗатрат.Колонки.Добавить("Субконто3");
	ТабЗатрат.Колонки.Добавить("СубконтоНУ1");
	ТабЗатрат.Колонки.Добавить("СубконтоНУ2");
	ТабЗатрат.Колонки.Добавить("СубконтоНУ3");
	ТабЗатрат.Колонки.Добавить("МодельНУостатковНЗП");
//	ТабЗатрат.Колонки.Добавить("СпособРаспределенияЗатратНаВыпуск", Новый ОписаниеТипов("СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск"));

	МассивКоэф = Новый Массив;

	// цикл по Объектам из ТабАмортизации
	Для Каждого СтрокаТЗ Из ТабАмортизации Цикл
		Если СтрокаТЗ.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(СтрокаТЗ.НаправлениеАмортизации) Тогда
			Сообщить("В "+ТипУчета+" учете для объекта "+ СтрокаТЗ.ОбъектУчета+" не указаны способы отражения расходов по амортизации",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 0 Тогда
			Сообщить("В "+ТипУчета+" учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения затрат по амортизации нет записей",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		МассивКоэф.Очистить();
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
		КонецЦикла;

		МассивСумм = РаспределитьПропорционально( СтрокаТЗ.Сумма, МассивКоэф, 2);
		Если МассивСумм = Неопределено Тогда
			Сообщить("В "+ТипУчета+" учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения расходов по амортизации не проставлены коэффициенты",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если МассивСумм.Количество() <> МассивКоэф.Количество() Тогда
			Сообщить("В "+ТипУчета+" учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения затрат по амортизации есть нулевые коэффициенты",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл

				НоваяСтрока = ТабЗатрат.Добавить();
				НоваяСтрока.ПодразделениеОрганизации = СтрокаНапр.ПодразделениеОрганизации;
				НоваяСтрока.СчетЗатрат               = СтрокаНапр.СчетЗатрат;
				НоваяСтрока.СчетЗатратНУ             = СтрокаНапр.СчетЗатратНУ;
				НоваяСтрока.СтатьяЗатрат             = СтрокаНапр.СтатьяЗатрат;
				НоваяСтрока.Продукция                = СтрокаНапр.Продукция;
				НоваяСтрока.ХарактеристикаПродукции  = СтрокаНапр.ХарактеристикаПродукции;
				НоваяСтрока.СерияПродукции           = СтрокаНапр.СерияПродукции;
				НоваяСтрока.НоменклатурнаяГруппа     = СтрокаНапр.НоменклатурнаяГруппа;
				НоваяСтрока.ОбъектУчета              = СтрокаТЗ.ОбъектУчета;
				НоваяСтрока.СчетАмортизации          = СтрокаТЗ.СчетАмортизации;
				НоваяСтрока.СчетАмортизацииНУ        = СтрокаТЗ.СчетАмортизацииНУ;
				НоваяСтрока.ИмяСубконто              = СтрокаТЗ.ИмяСубконто;
				НоваяСтрока.ОбъектСтроительства      = СтрокаНапр.ОбъектСтроительства;
				НоваяСтрока.Субконто1                = СтрокаНапр.Субконто1;
				НоваяСтрока.Субконто2                = СтрокаНапр.Субконто2;
				НоваяСтрока.Субконто3                = СтрокаНапр.Субконто3;
				НоваяСтрока.СубконтоНУ1              = СтрокаНапр.СубконтоНУ1;
				НоваяСтрока.СубконтоНУ2              = СтрокаНапр.СубконтоНУ2;
				НоваяСтрока.СубконтоНУ3              = СтрокаНапр.СубконтоНУ3;

				НоваяСтрока.Сумма                    = МассивСумм[СтрокаНапр.НомерСтроки - 1];
//				НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = СтрокаТЗ.НаправлениеАмортизации.СпособРаспределенияЗатратНаВыпуск;

		КонецЦикла;

	КонецЦикла;
     //{ Лапенков
	//Если ТипУчета = "Бух" Тогда

	//	ДопПараметры = Новый Структура;

	//	ВремСтруктураШапкиДокумента = Новый Структура;

	//	Для каждого Строка Из СтруктураШапкиДокумента Цикл

	//		Если Строка.Ключ = "ОтражатьВНалоговомУчете" Тогда
	//			ВремСтруктураШапкиДокумента.Вставить(Строка.Ключ,Ложь);
	//		ИначеЕсли Строка.Ключ <> "ВалютаДокумента" Тогда
	//			ВремСтруктураШапкиДокумента.Вставить(Строка.Ключ,Строка.Значение);
	//		КонецЕсли;

	//	КонецЦикла;
	//	  // {Лапенков
	//	//ДвиженияПоПрочимЗатратамРегл( ДокОбъект, ТабЗатрат, ВремСтруктураШапкиДокумента, Неопределено, ДопПараметры);
	//	// }Лапенков
	//	
	//	//формирование проводок
	//	Проводки = ДокОбъект.Движения.Хозрасчетный;

	//	Для каждого СтрокаЗатрат из ТабЗатрат Цикл

	//		// Не добавляем незаконченные проводки и проводки в которых один из счетов забалансовый
	//		Если ЗначениеНеЗаполнено(СтрокаЗатрат.Сумма) 
	//			ИЛИ СтрокаЗатрат.СчетАмортизации.Забалансовый <> СтрокаЗатрат.СчетЗатрат.Забалансовый
	//			ИЛИ ЗначениеНеЗаполнено(СтрокаЗатрат.СчетЗатрат) 
	//			ИЛИ ЗначениеНеЗаполнено(СтрокаЗатрат.СчетАмортизации)
	//			   тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Проводка = Проводки.Добавить();

	//		Проводка.Период       = ДатаРасчета;
	//		Проводка.Содержание   = ?(ЗначениеНеЗаполнено(ТекстПроводки), "Начислена амортизация", ТекстПроводки);
	//		Проводка.НомерЖурнала = НомерЖурнала;
	//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//		Проводка.Сумма        = СтрокаЗатрат.Сумма;

	//		Проводка.СчетДт = СтрокаЗатрат.СчетЗатрат;
	//		Аналитика       = ПолучитьАналитикуСчетаЗатрат(СтрокаЗатрат.ПодразделениеОрганизации,СтрокаЗатрат.СтатьяЗатрат,СтрокаЗатрат.НоменклатурнаяГруппа,СтрокаЗатрат.ОбъектСтроительства,СтрокаЗатрат.Субконто1, СтрокаЗатрат.Субконто2, СтрокаЗатрат.Субконто3);
	//		УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 1, Аналитика.Субконто1);
	//		УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 2, Аналитика.Субконто2);
	//		УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 3, Аналитика.Субконто3);

	//		Проводка.СчетКт = СтрокаЗатрат.СчетАмортизации;
	//		УстановитьСубконто(СтрокаЗатрат.СчетАмортизации, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтрокаЗатрат.ОбъектУчета);

	//	КонецЦикла;

	//КонецЕсли;
	
	//Если ТипУчета = "Нал" Тогда

	//	ДопПараметры = Новый Структура;

	//	ВремСтруктураШапкиДокумента = Новый Структура;

	//	Для каждого Строка Из СтруктураШапкиДокумента Цикл

	//		Если Строка.Ключ = "ОтражатьВБухгалтерскомУчете" Тогда
	//			ВремСтруктураШапкиДокумента.Вставить(Строка.Ключ,Ложь);
	//		ИначеЕсли Строка.Ключ <> "ВалютаДокумента" Тогда
	//			ВремСтруктураШапкиДокумента.Вставить(Строка.Ключ,Строка.Значение);
	//		КонецЕсли;

	//	КонецЦикла;

	//	ДвиженияПоПрочимЗатратамРегл( ДокОбъект, ТабЗатрат, ВремСтруктураШапкиДокумента, Неопределено, ДопПараметры);
	//	

	//	//формирование проводок
	//	Проводки = ДокОбъект.Движения.Налоговый;

	//	Для каждого СтрокаЗатрат из ТабЗатрат Цикл

	//		Если ЗначениеНеЗаполнено(СтрокаЗатрат.Сумма) тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Проводка = Проводки.Добавить();

	//		Проводка.Период       = ДатаРасчета;
	//		Проводка.Содержание   = ?(ЗначениеНеЗаполнено(ТекстПроводки), "Начислена амортизация", ТекстПроводки);
	//		Проводка.НомерЖурнала = НомерЖурнала;
	//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//		Проводка.Сумма        = СтрокаЗатрат.Сумма;

	//		Проводка.СчетДт = СтрокаЗатрат.СчетЗатратНУ;
	//		Аналитика       = ПолучитьАналитикуСчетаЗатрат(СтрокаЗатрат.ПодразделениеОрганизации,СтрокаЗатрат.СтатьяЗатрат,СтрокаЗатрат.НоменклатурнаяГруппа,СтрокаЗатрат.ОбъектСтроительства,СтрокаЗатрат.СубконтоНУ1, СтрокаЗатрат.СубконтоНУ2, СтрокаЗатрат.СубконтоНУ3);
	//		УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 1, Аналитика.Субконто1);
	//		УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 2, Аналитика.Субконто2);
	//		УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 3, Аналитика.Субконто3);

	//		Проводка.СчетКт = СтрокаЗатрат.СчетАмортизацииНУ;
	//		УстановитьСубконто(СтрокаЗатрат.СчетАмортизацииНУ, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтрокаЗатрат.ОбъектУчета);

	//	КонецЦикла;

	//КонецЕсли;
	
	//Если ТипУчета = "ПР" Тогда

	//	//формирование проводок
	//	Проводки = ДокОбъект.Движения.Налоговый;

	//	Для каждого СтрокаЗатрат из ТабЗатрат Цикл
	//		
	//		Если ЗначениеНеЗаполнено(СтрокаЗатрат.Сумма) тогда
	//			Продолжить;
	//		КонецЕсли;

	//		Проводка = Проводки.Добавить();

	//		Проводка.Период       = ДатаРасчета;
	//		Проводка.Содержание   = ?(ЗначениеНеЗаполнено(ТекстПроводки), "Начислена амортизация", ТекстПроводки);
	//		Проводка.НомерЖурнала = НомерЖурнала;
	//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//		Проводка.Сумма        = СтрокаЗатрат.Сумма;

	//		Проводка.СчетДт = СтрокаЗатрат.СчетЗатратНУ;
	//		Аналитика       = ПолучитьАналитикуСчетаЗатрат(СтрокаЗатрат.ПодразделениеОрганизации,СтрокаЗатрат.СтатьяЗатрат,СтрокаЗатрат.НоменклатурнаяГруппа,СтрокаЗатрат.ОбъектСтроительства,СтрокаЗатрат.СубконтоНУ1, СтрокаЗатрат.СубконтоНУ2, СтрокаЗатрат.СубконтоНУ3);
	//		УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 1, Аналитика.Субконто1);
	//		УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 2, Аналитика.Субконто2);
	//		УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 3, Аналитика.Субконто3);
	//		Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;

	//		Проводка.СчетКт = СтрокаЗатрат.СчетАмортизацииНУ;
	//		УстановитьСубконто(СтрокаЗатрат.СчетАмортизацииНУ, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтрокаЗатрат.ОбъектУчета);
	//		Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;

	//	КонецЦикла;

	//КонецЕсли;
	//
	//Если ТипУчета = "ВР" Тогда

	//	//формирование проводок
	//	Проводки = ДокОбъект.Движения.Налоговый;

	//	Для каждого СтрокаЗатрат из ТабЗатрат Цикл
	//		
	//		Если ЗначениеНеЗаполнено(СтрокаЗатрат.Сумма) тогда
	//			Продолжить;
	//		КонецЕсли;

	//		Проводка = Проводки.Добавить();

	//		Проводка.Период       = ДатаРасчета;
	//		Проводка.Содержание   = ?(ЗначениеНеЗаполнено(ТекстПроводки), "Начислена амортизация", ТекстПроводки);
	//		Проводка.НомерЖурнала = НомерЖурнала;
	//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//		Проводка.Сумма        = СтрокаЗатрат.Сумма;

	//		Проводка.СчетДт = СтрокаЗатрат.СчетЗатратНУ;
	//		Аналитика       = ПолучитьАналитикуСчетаЗатрат(СтрокаЗатрат.ПодразделениеОрганизации,СтрокаЗатрат.СтатьяЗатрат,СтрокаЗатрат.НоменклатурнаяГруппа,СтрокаЗатрат.ОбъектСтроительства,СтрокаЗатрат.СубконтоНУ1, СтрокаЗатрат.СубконтоНУ2, СтрокаЗатрат.СубконтоНУ3);
	//		УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 1, Аналитика.Субконто1);
	//		УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 2, Аналитика.Субконто2);
	//		УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 3, Аналитика.Субконто3);
	//		Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;

	//		Проводка.СчетКт = СтрокаЗатрат.СчетАмортизацииНУ;
	//		УстановитьСубконто(СтрокаЗатрат.СчетАмортизацииНУ, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтрокаЗатрат.ОбъектУчета);
	//		Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;

	//	КонецЦикла;

	//КонецЕсли;
	//} Лапенков
	
	Возврат ТабЗатрат;

КонецФункции // ПолучитьРаспределениеАмортизацииПоНаправлениямРегл()

// Процедура выполняет стандартные действия при начале выбора события ОС в формах документов.
//
// Параметры:
//  ЭлементФормы                      - элемент формы документа, который надо заполнить; 
//  ВидыСостояний                     - вид состояний ОС для отбора, значение перечисления ВидыСостоянийОС;
//  СтандартнаяОбработка              - булево, признак выполнения стандартной (системной) обработки события,
//
Процедура НачалоВыбораЗначенияСобытияОС(ЭлементФормы, ВидыСобытий, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.СобытияОС.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если ВидыСобытий <> Неопределено Тогда

		// Оставим в выборе только "правильные" состояния
		Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
			ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.ВСписке;
		Иначе
			ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.Равно;
		КонецЕсли;

		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Значение         = ВидыСобытий;
		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Использование    = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСобытияОС.Доступность = Ложь;

	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСобытияОС()

// Функция ТекущееСостояниеОСБух()
//
//		Параметры:
//			КонДата     - дата на которую надо получить состояние ОС
//			ОС          - основное средство
//			Организация - организация
//
//		Возврат: текущее состояние ОС по данным бух. учета
//
Функция ТекущееСостояниеОСБух( КонДата, ОС, Организация) Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостояниеОсновногоСредстваОрганизацииСрезПоследних.Событие,
		|	СостояниеОсновногоСредстваОрганизацииСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(&КонДата, ОсновноеСредство = &ОС И Организация = &Организация) КАК СостояниеОсновногоСредстваОрганизацииСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата",     КонДата);
	Запрос.УстановитьПараметр( "Организация", Организация);
	Запрос.УстановитьПараметр( "ОС",          ОС);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Событие = Справочники.СобытияОС.ПустаяСсылка();
	Иначе
		Обход = РезультатЗапроса.Выбрать();
		Обход.Следующий();
		Событие = Обход.Событие;
	КонецЕсли;
	
	Возврат Событие;
	
КонецФункции // ТекущееСостояниеОСБух()

// Функция ТекущееСостояниеОСУпр()
//
//		Параметры:
//			КонДата     - дата на которую надо получить состояние ОС
//			ОС          - основное средство
//
//		Возврат: текущее состояние ОС по данным упр. учета
//
Функция ТекущееСостояниеОСУпр( КонДата, ОС) Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостояниеОсновногоСредстваСрезПоследних.Событие,
		|	СостояниеОсновногоСредстваСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.СобытияОС.СрезПоследних(&КонДата, ОсновноеСредство = &ОС) КАК СостояниеОсновногоСредстваСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата",     КонДата);
	Запрос.УстановитьПараметр( "ОС",          ОС);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Событие = Справочники.СобытияОС.ПустаяСсылка();
	Иначе
		Обход = РезультатЗапроса.Выбрать();
		Обход.Следующий();
		Событие = Обход.Событие;
	КонецЕсли;
	
	Возврат Событие;
	
КонецФункции // ТекущееСостояниеОСУпр()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ С ИМУЩЕСТВОМ В ЭКСПЛУАТАЦИИ

// Функция возвращает расшифровку срока полезного использования в годах и 
// месяцах.
//
// Параметры:
//  СрокПолезногоИспользования - срок полезного использования (в месяцах),
//                 подлежащий расшифровке
//
// Возвращаемое значение:
//  Строка       - расшифровка срока полезного использования в годах и 
//                 месяцах
//
Функция РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользования) Экспорт
	
	РасшифровкаСрокаПолезногоИспользования = "";
	
	Если НЕ ЗначениеНеЗаполнено(СрокПолезногоИспользования) Тогда
	
		ЧислоЛет     = Цел(СрокПолезногоИспользования / 12);
		ЧислоМесяцев = (СрокПолезногоИспользования % 12);
		
		Если НЕ (ЧислоЛет = 0) Тогда
			
			// Построим строку с числом лет
			Если (СтрДлина(ЧислоЛет) > 1) И (Число(Сред(ЧислоЛет, СтрДлина(ЧислоЛет) - 1, 1)) = 1) Тогда
				СтрокаГод = " лет";
			ИначеЕсли Число(Прав(ЧислоЛет, 1)) = 1 Тогда
				СтрокаГод = " год";
			ИначеЕсли (Число(Прав(ЧислоЛет, 1)) > 1) И (Число(Прав(ЧислоЛет, 1)) < 5) Тогда
				СтрокаГод = " года";
			Иначе
				СтрокаГод = " лет";
			КонецЕсли;
			
			РасшифровкаСрокаПолезногоИспользования = РасшифровкаСрокаПолезногоИспользования + Строка(ЧислоЛет) + СтрокаГод;
			
		КонецЕсли;
		
		Если НЕ (ЧислоМесяцев = 0) Тогда
			
			// Построим строку с числом месяцев
			Если (СтрДлина(ЧислоМесяцев) > 1) И (Число(Сред(ЧислоМесяцев, СтрДлина(ЧислоМесяцев) - 1, 1)) = 1) Тогда
				СтрокаМесяц = " месяцев";
			ИначеЕсли Число(Прав(ЧислоМесяцев, 1)) = 1 Тогда
				СтрокаМесяц = " месяц";
			ИначеЕсли (Число(Прав(ЧислоМесяцев, 1)) > 1) И (Число(Прав(ЧислоМесяцев, 1)) < 5) Тогда
				СтрокаМесяц = " месяца";
			Иначе
				СтрокаМесяц = " месяцев";
			КонецЕсли;
			
			РасшифровкаСрокаПолезногоИспользования = РасшифровкаСрокаПолезногоИспользования + ?(ЗначениеНеЗаполнено(РасшифровкаСрокаПолезногоИспользования), "", " ") + Строка(ЧислоМесяцев) + СтрокаМесяц;
		
		КонецЕсли;
		
		РасшифровкаСрокаПолезногоИспользования = "(" + РасшифровкаСрокаПолезногоИспользования + ")";
		
	КонецЕсли;
	
	Возврат РасшифровкаСрокаПолезногоИспользования;
	                                        	
КонецФункции // РасшифровкаСрокаПолезногоИспользования()

#Если Клиент Тогда

// Функция расчитывает стоимость объекта строительства по разным видам учета
// Возвращает структуру со значениями стоимостей по видам учета, поля:
//- СтоимостьУУ
// - СтоимостьБУ
// - СтоимостьБУХоз
// - СтоимостьНУ
// - СтоимостьНУХоз
//
Функция РасчитатьСтоимостьОбъектаСтроительства(ОтражатьВУправленческомУчете,
	                                           ОтражатьВБухгалтерскомУчете,
	                                           ОтражатьВНалоговомУчете,
	                                           СчетУчетаБУВнеоборотногоАктива,
	                                           СчетУчетаНУВнеоборотногоАктива,
	                                           ОбъектСтроительства,
	                                           Организация,
	                                           Период = Неопределено) Экспорт

	СтруктураСтоимость = Новый Структура;
	СтруктураСтоимость.Вставить("СтоимостьУУ",0);
	СтруктураСтоимость.Вставить("СтоимостьБУ",0);
	СтруктураСтоимость.Вставить("СтоимостьБУХоз",0);
	СтруктураСтоимость.Вставить("СтоимостьНУ",0);
	СтруктураСтоимость.Вставить("СтоимостьНУХоз",0);
	СтруктураСтоимость.Вставить("СтоимостьПР",0);
	СтруктураСтоимость.Вставить("СтоимостьПРХоз",0);
	СтруктураСтоимость.Вставить("СтоимостьВР",0);
	СтруктураСтоимость.Вставить("СтоимостьВРХоз",0);

	Если ЗначениеНеЗаполнено(ОбъектСтроительства) Тогда
		Предупреждение("Не выбран объект строительства", 60);
		Возврат СтруктураСтоимость;
	КонецЕсли;

	Если (ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете) И (ЗначениеНеЗаполнено(Организация)) Тогда
		Предупреждение("Не выбрана организация", 60);
		Возврат СтруктураСтоимость;
	КонецЕсли;

	Если (ОтражатьВБухгалтерскомУчете) И (ЗначениеНеЗаполнено(СчетУчетаБУВнеоборотногоАктива)) Тогда
		Предупреждение("Не выбран счет бухгалтерского учета объекта строительства", 60);
		Возврат СтруктураСтоимость;
	КонецЕсли;

	Если (ОтражатьВНалоговомУчете) И (ЗначениеНеЗаполнено(СчетУчетаНУВнеоборотногоАктива)) Тогда
		Предупреждение("Не выбран счет налогового учета объекта строительства", 60);
		Возврат СтруктураСтоимость;
	КонецЕсли;

	Если ОтражатьВУправленческомУчете Тогда
		ВыборкаЗаписей = РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.Остатки(Период, Новый Структура("ОбъектСтроительства", ОбъектСтроительства));
		СтруктураСтоимость.СтоимостьУУ = ?(ВыборкаЗаписей.Количество() > 0, ВыборкаЗаписей[0].Сумма, 0);
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда

		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекОрганизация",      Организация);
		Запрос.УстановитьПараметр("ТекСчетБУ",           СчетУчетаБУВнеоборотногоАктива);
		Запрос.УстановитьПараметр("ТекСчетНУ",           СчетУчетаНУВнеоборотногоАктива);
		Запрос.УстановитьПараметр("ОбъектСтроительства", ОбъектСтроительства);
		Запрос.УстановитьПараметр("Хоз",                 Перечисления.СпособыСтроительства.Хозспособ);
		Запрос.УстановитьПараметр("ПорядокСубконто",     ПорядокСубконто);
		Запрос.УстановитьПараметр("Период",              Период);
		Запрос.УстановитьПараметр("ВидУчетаНУ",          Перечисления.ВидыУчетаПоПБУ18.НУ);
		Запрос.УстановитьПараметр("ВидУчетаПР",          Перечисления.ВидыУчетаПоПБУ18.ПР);
		Запрос.УстановитьПараметр("ВидУчетаВР",          Перечисления.ВидыУчетаПоПБУ18.ВР);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СтоимостьБУ,
		|	НалоговыйОстаткиНУ.СуммаОстатокДт КАК СтоимостьНУ,
		|	НалоговыйОстаткиПР.СуммаОстатокДт КАК СтоимостьПР,
		|	НалоговыйОстаткиВР.СуммаОстатокДт КАК СтоимостьВР,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Субконто2 = &Хоз
		|		ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтоимостьБУХоз,
		|	ВЫБОР 
		|		КОГДА НалоговыйОстаткиНУ.Субконто2 = &Хоз
		|		ТОГДА НалоговыйОстаткиНУ.СуммаОстатокДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтоимостьНУХоз,
		|	ВЫБОР 
		|		КОГДА НалоговыйОстаткиПР.Субконто2 = &Хоз
		|		ТОГДА НалоговыйОстаткиПР.СуммаОстатокДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтоимостьПРХоз,
		|	ВЫБОР 
		|		КОГДА НалоговыйОстаткиВР.Субконто2 = &Хоз
		|		ТОГДА НалоговыйОстаткиВР.СуммаОстатокДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтоимостьВРХоз
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &ТекСчетБУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Организация = &ТекОрганизация) КАК ХозрасчетныйОстатки	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&Период, Счет = &ТекСчетНУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Организация = &ТекОрганизация и ВидУчета=&ВидУчетаНУ) КАК НалоговыйОстаткиНУ
		|		ПО ХозрасчетныйОстатки.Субконто1 = НалоговыйОстаткиНУ.Субконто1 и ХозрасчетныйОстатки.Субконто2 = НалоговыйОстаткиНУ.Субконто2
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&Период, Счет = &ТекСчетНУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Организация = &ТекОрганизация и ВидУчета=&ВидУчетаПР) КАК НалоговыйОстаткиПР
		|		ПО ХозрасчетныйОстатки.Субконто1 = НалоговыйОстаткиПР.Субконто1 и ХозрасчетныйОстатки.Субконто2 = НалоговыйОстаткиПР.Субконто2
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&Период, Счет = &ТекСчетНУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Организация = &ТекОрганизация и ВидУчета=&ВидУчетаВР) КАК НалоговыйОстаткиВР
		|		ПО ХозрасчетныйОстатки.Субконто1 = НалоговыйОстаткиВР.Субконто1 и ХозрасчетныйОстатки.Субконто2 = НалоговыйОстаткиВР.Субконто2";
		ТЗ = Запрос.Выполнить().Выгрузить();

		Если ТЗ.Количество()>0 Тогда

			СтруктураСтоимость.Вставить("СтоимостьБУ"	,ТЗ.Итог("СтоимостьБУ"));
			СтруктураСтоимость.Вставить("СтоимостьБУХоз",ТЗ.Итог("СтоимостьБУХоз"));
			СтруктураСтоимость.Вставить("СтоимостьНУ"	,ТЗ.Итог("СтоимостьНУ"));
			СтруктураСтоимость.Вставить("СтоимостьНУХоз",ТЗ.Итог("СтоимостьНУХоз"));
			СтруктураСтоимость.Вставить("СтоимостьПР"   , ТЗ.Итог("СтоимостьПР"));
			СтруктураСтоимость.Вставить("СтоимостьПРХоз", ТЗ.Итог("СтоимостьПРХоз"));
			СтруктураСтоимость.Вставить("СтоимостьВР"   , ТЗ.Итог("СтоимостьВР"));
			СтруктураСтоимость.Вставить("СтоимостьВРХоз", ТЗ.Итог("СтоимостьВРХоз"));

		КонецЕсли;

	КонецЕсли;

	Возврат СтруктураСтоимость;

КонецФункции // РасчитатьСтоимостьОбъектаСтроительства()


#КонецЕсли

Процедура ДвиженияПриПоступленииОбъектовСтроительства( ДокОбъект, ТабЧасть, СтруктураШапкиДокумента) Экспорт

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	НаборДвиженийОбъектыСтроительства      = ДокОбъект.Движения.СтроительствоОбъектовОсновныхСредств;
	ТаблицаДвиженийОбъектыСтроительства    = НаборДвиженийОбъектыСтроительства.Выгрузить();
	ТаблицаДвиженийОбъектыСтроительства.Очистить();

	
	
	Если ТипЗнч(ТабЧасть) <> Тип("ТаблицаЗначений") Тогда
		ТабличнаяЧасть = ТабЧасть.Выгрузить();
	Иначе
		ТабличнаяЧасть = ТабЧасть;
	КонецЕсли;
	
	ЕстьСуммаУпр = Ложь;
	Если Не ТабличнаяЧасть.Колонки.Найти("СуммаУпр") = Неопределено Тогда
		ЕстьСуммаУпр = Истина;
	КонецЕсли;
	
	// Обход таб. части
	Для Каждого СтрокаТЧ Из ТабЧасть Цикл
		
		Если ЗначениеНеЗаполнено(СтрокаТЧ.ОбъектСтроительства) Тогда
			Продолжить;
		КонецЕсли;
		
			СуммаУпр = СтрокаТЧ.СуммаУпр;
			
		Если СуммаУпр = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ТаблицаДвиженийОбъектыСтроительства.Добавить();
		
		НоваяСтрока.ОбъектСтроительства = СтрокаТЧ.ОбъектСтроительства;
		НоваяСтрока.Сумма                = СуммаУпр;

	КонецЦикла;

	// Записать движения
	НаборДвиженийОбъектыСтроительства.мПериод             = ДокОбъект.Дата;
	НаборДвиженийОбъектыСтроительства.мТаблицаДвижений    = ТаблицаДвиженийОбъектыСтроительства;

	НаборДвиженийОбъектыСтроительства .ВыполнитьПриход();
	//НаборДвиженийОбъектыСтроительства.Записать(Ложь);

КонецПроцедуры // ДвиженияПоПрочимЗатратамУпр()
