//////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ

// Данная процедура пополняет состав одной таблицы значений данными из другой.
//
// Аргументы:
//	ТаблицаПриемник		- пополняемая таблица
//	ТаблицаИсточник 	- таблица-источник данных. Если не указана - создается новая. 
//						Если не содержит колонок - создаются колонки как в источнике.
//	СПозиции 			- номер строки пополняемой таблицы, с которой производится добавление
//	НомерСтрокиИсточника - если указан номер строки таблимцы-источника
//						- добавляется данные только из нее
//
//
Процедура ДополнитьТаблицу(ТаблицаПриемник, ТаблицаИсточник, СПозиции = -1, НомерСтрокиИсточника = -1) Экспорт

	Если НЕ ТипЗнч(ТаблицаПриемник) = Тип("ТаблицаЗначений") Тогда

		ТаблицаПриемник = Новый ТаблицаЗначений();

	КонецЕсли;

	Если (НЕ ТаблицаПриемник.Колонки.Количество()) Тогда

		Если НомерСтрокиИсточника < 0 Тогда

			ТаблицаПриемник = ТаблицаИсточник.Скопировать();
			Возврат;

		Иначе

			Для каждого Колонка из ТаблицаИсточник.Колонки Цикл

				ТаблицаПриемник.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если НомерСтрокиИсточника < 0 Тогда

		Для каждого СтрокаИсточник из ТаблицаИсточник Цикл

			// добавляем (вставляем) строку
			Если СПозиции < 0 Тогда

				НоваяСтрокаПриемник = ТаблицаПриемник.Добавить();

			Иначе

				НоваяСтрокаПриемник = ТаблицаПриемник.Вставить(СПозиции + ТаблицаИсточник.Индекс(СтрокаИсточник));

			КонецЕсли;

			// по колонкам 
			Для каждого Колонка Из ТаблицаИсточник.Колонки Цикл

				ИмяКолонки = Колонка.Имя;
				НоваяСтрокаПриемник[ИмяКолонки] = СтрокаИсточник[ИмяКолонки];

			КонецЦикла;

		КонецЦикла;

	Иначе

		// добавляем (вставляем) строку
		Если СПозиции < 0 Тогда

			НоваяСтрокаПриемник = ТаблицаПриемник.Добавить();

		Иначе

			НоваяСтрокаПриемник = ТаблицаПриемник.Вставить(СПозиции);

		КонецЕсли;

		// по колонкам 
		Для каждого Колонка Из ТаблицаИсточник.Колонки Цикл

			ИмяКолонки = Колонка.Имя;
			НоваяСтрокаПриемник[ИмяКолонки] = ТаблицаИсточник[НомерСтрокиИсточника][ИмяКолонки];

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Данная функция определяет, возможна ли предполагаемая корректировка
// плановых данны исходня из того, попадает ли корректировка в закрытые даты
//
// Аргументы:
//  ВидПланирования - 
//  Подразделение (необязательный) - Значение по умолчанию - пустое подразделение.
//  Проект (необязательный) - Значение по умолчанию - пустой проект.
//  Сценарий (необязательный) - Значение по умолчанию - пустой сценарий.
//  ДатаЛимита (необязательный) - Значение по умолчанию - пустая дата ('00010101000000').
//
//
// Возвращаемое значение:
//  Дата, являющаяся границей фиксации периодов
//
Функция ПолучитьГраницуФиксацииПериодов(ВидПланирования, Знач Подразделение = Неопределено,	Проект = Неопределено, Знач Сценарий = Неопределено, Знач ДатаЛимита = '00010101000000') Экспорт

	Если Подразделение = Неопределено Тогда

		Подразделение = Справочники.Подразделения.ПустаяСсылка();

	КонецЕсли; 

	Если Проект = Неопределено Тогда

		Проект = Справочники.Проекты.ПустаяСсылка();

	КонецЕсли; 

	Если Сценарий = Неопределено Тогда

		Сценарий = Справочники.СценарииПланирования.ПустаяСсылка();

	КонецЕсли; 

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГраницыПериодовПланирования.ВидПланирования,
	|	ГраницыПериодовПланирования.ГраницаФиксации,
	|	ГраницыПериодовПланирования.Подразделение,
	|	ГраницыПериодовПланирования.Проект,
	|	ГраницыПериодовПланирования.Сценарий
	|ИЗ
	|	РегистрСведений.ГраницыПериодовПланирования КАК ГраницыПериодовПланирования
	|
	|ГДЕ
	|	ГраницыПериодовПланирования.ВидПланирования = &ВидПланирования И
	|	(ГраницыПериодовПланирования.Подразделение В (&Подразделение, &ПустоеПодразделение)) И
	|	(ГраницыПериодовПланирования.Проект В (&Проект, &ПустойПроект)) И
	|	(ГраницыПериодовПланирования.Сценарий В (&Сценарий, &ПустойСценарий)) И
	|	(ГраницыПериодовПланирования.ГраницаФиксации > &ДатаПланирования)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГраницаФиксации УБЫВ");

	Запрос.УстановитьПараметр("ВидПланирования", ВидПланирования);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.Подразделения.ПустаяСсылка());
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ПустойПроект", Справочники.Проекты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ПустойСценарий", Справочники.СценарииПланирования.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаПланирования", ДатаЛимита);

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда

		Возврат ДатаЛимита; // нет ограничений

	Иначе

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		Возврат Выборка.ГраницаФиксации;

	КонецЕсли; 

КонецФункции // ПолучитьГраницуФиксацииПериодов()


//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ПЕРИОДАМИ

// Присваивает, если нужно новое значение дате, соответсвующее началу
// интервала в который попала дата. Тип интервала также передается.
//
// Параметры
//  ДатаПланирования- дата, над которой нужно провести операцию
//  Периодичность 	- тип интервала для выравнивания на начало
//  НазваниеДаты 	- наименование типа даты для вывода диагностики
//  Периодичность	- тип интервала для выравнивания на начало
//
Процедура ВыровнятьДатуПоНачалуПериода(ДатаПланирования, Периодичность, НазваниеДаты = "Дата начала периода", ВыводитьСообщение = Ложь) Экспорт

	Если ТипЗнч(ДатаПланирования) <> Тип("Дата") Тогда

		Возврат;

	КонецЕсли;

	Если ЗначениеНеЗаполнено(ДатаПланирования) Тогда

		Возврат;

	КонецЕсли;

	Если Периодичность = Перечисления.Периодичность.Неделя Тогда

		Если ДатаПланирования <> НачалоНедели(ДатаПланирования) Тогда

			ДатаИзменена = Истина;
			ДатаПланирования = НачалоНедели(ДатаПланирования);

		КонецЕсли;

	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда

		Если ДатаПланирования <> НачалоМесяца(ДатаПланирования) Тогда

			ДатаИзменена = Истина;
			ДатаПланирования = НачалоМесяца(ДатаПланирования);

		КонецЕсли;

	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда

		Если ДатаПланирования <> НачалоКвартала(ДатаПланирования) Тогда

			ДатаИзменена = Истина;
			ДатаПланирования = НачалоКвартала(ДатаПланирования);

		КонецЕсли;

	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда

		Если ДатаПланирования <> НачалоГода(ДатаПланирования) Тогда

			ДатаИзменена = Истина;
			ДатаПланирования = НачалоГода(ДатаПланирования);

		КонецЕсли;

	КонецЕсли;

	Если ВыводитьСообщение И ДатаИзменена Тогда

		СообщитьОбОшибке(НазваниеДаты + " изменена в соответствии с установленной периодичностью.");

	КонецЕсли;

КонецПроцедуры // ВыровнятьДатуПоНачалуПериода()

// Присваивает, если нужно новое значение дате, соответсвующее концу
// интервала в который попала дата. Тип интервала также передается.
//
// Параметры:
//  ДатаПланирования- дата, над которой нужно провести операцию.
//  Периодичность - тип интервала для выравнивания на Конец.
//  НазваниеДаты 	- наименование типа даты для вывода диагностики
//
Процедура ВыровнятьДатуПоКонцуПериода(ДатаПланирования, Периодичность, НазваниеДаты = "Дата окончания периода", ВыводитьСообщение = Ложь) Экспорт

	Если ТипЗнч(ДатаПланирования) <> Тип("Дата") Тогда

		Возврат;

	КонецЕсли;

	Если ЗначениеНеЗаполнено(ДатаПланирования) Тогда

		Возврат;

	КонецЕсли;

	ДатаИзменена = Ложь;

	Если Периодичность = Перечисления.Периодичность.Неделя Тогда

		Если ДатаПланирования <> КонецНедели(ДатаПланирования) Тогда

			ДатаИзменена = Истина;
			ДатаПланирования = КонецНедели(ДатаПланирования);

		КонецЕсли;

	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда

		Если ДатаПланирования <> КонецМесяца(ДатаПланирования) Тогда

			ДатаИзменена = Истина;
			ДатаПланирования = КонецМесяца(ДатаПланирования);

		КонецЕсли;

	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда

		Если ДатаПланирования <> КонецКвартала(ДатаПланирования) Тогда

			ДатаИзменена = Истина;
			ДатаПланирования = КонецКвартала(ДатаПланирования);

		КонецЕсли;

	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда

		Если ДатаПланирования <> КонецГода(ДатаПланирования) Тогда

			ДатаИзменена = Истина;
			ДатаПланирования = КонецГода(ДатаПланирования);

		КонецЕсли;

	КонецЕсли;

	Если ВыводитьСообщение и ДатаИзменена Тогда

		СообщитьОбОшибке(НазваниеДаты + " изменена в соответствии с установленной периодичностью.");

	КонецЕсли;

КонецПроцедуры // ВыровнятьДатуПоКонцуПериода()

// Процедура выравнивает начальнаю и конечную даты по границам указанной периодичности
// 		ДатаНачПериода - дата, которую нужно выровнять по началу указанной периодичностью
// 		ДатаКонПериода - дата, которую нужно выровнять по окончанию указанной периодичностью
// 		Периодичность - периодичность, определяющая границы выравнивания
// 
Процедура ВыровнятьПериод(ДатаНачПериода, ДатаКонПериода, Периодичность) Экспорт

	Если Периодичность = Перечисления.Периодичность.День Тогда

		ДатаНачПериода = НачалоДня(ДатаНачПериода);
		ДатаКонПериода = КонецДня(ДатаКонПериода);

	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда

		ДатаНачПериода = НачалоНедели(ДатаНачПериода);
		ДатаКонПериода = КонецНедели(ДатаКонПериода);

	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда

		ДатаНачПериода = НачалоМесяца(ДатаНачПериода);
		ДатаКонПериода = КонецМесяца(ДатаКонПериода);

	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда

		ДатаНачПериода = НачалоКвартала(ДатаНачПериода);
		ДатаКонПериода = КонецКвартала(ДатаКонПериода);

	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда

		ДатаНачПериода = НачалоГода(ДатаНачПериода);
		ДатаКонПериода = КонецГода(ДатаКонПериода);

	КонецЕсли;

КонецПроцедуры // ВыровнятьПериод()
