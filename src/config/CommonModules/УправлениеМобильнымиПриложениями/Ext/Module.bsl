// Функция возвращает обработку "МенеджерУправленияМобильнымиПриложениями"
// Параметры - нет
//
// Возвращаемое значение
//  Обработка "МенеджерУправленияМобильнымиПриложениями"
//
Функция ПолучитьМенеджерМобильныхПриложений() Экспорт	
	
	МенеджерМобильныхПриложений = Обработки.МенеджерМобильныхПриложений.Создать();	
	
	Возврат МенеджерМобильныхПриложений;
	
КонецФункции

// Получает перечень метаданных, используемых мобильным приложением, в виде xml
// Параметры:
//  СтруктураПараметровНастроекПользователя - структура, содержащая настройки мобильного пользователя
//
// Возвращаемое значение
//  ИспользуемыеМетаданныеСтрокой - перечень используемых метаданных в виде xml-строки
//
Функция ПолучитьПереченьИспользуемыхМетаданных(СтруктураПараметровНастроекПользователя) Экспорт
			    	
	Отбор = Новый Структура();
	Отбор.Вставить("МобильноеПриложение", СтруктураПараметровНастроекПользователя.МобильноеПриложение);
	Отбор.Вставить("ВерсияМобильногоПриложения", СтруктураПараметровНастроекПользователя.ВерсияМобильногоПриложения);
		
	СтруктураРесурсовРегистра = РегистрыСведений.ХранилищеМобильныхПриложений.Получить(Отбор);				
	ИспользуемыеМетаданныеСтрокой = СтруктураРесурсовРегистра.ОписаниеИспользуемыхМетаданных;	
			
	Возврат ИспользуемыеМетаданныеСтрокой;
	
КонецФункции

// Получает дерево схемы обмена данными, соответствующее настройкам мобильного пользователя
//
Функция ПолучитьДеревоСхемыОбменаДанными(СтруктураПараметровНастроекПользователя) Экспорт
	
	СхемаОбменаДанными = СтруктураПараметровНастроекПользователя.СхемаОбменаДанными;
	ДеревоСхемыОбменаДанными = СхемаОбменаДанными.ДеревоСхемы.Получить();
	
	Возврат ДеревоСхемыОбменаДанными;	
	
КонецФункции	

// Возвращает таблицу значений, содержащую объекты метаданных
//
Функция СоздатьТаблицуОбъектовМетаданных(МетаданныеОбъектов) Экспорт
	
	ТаблицаМетаданных = Новый ТаблицаЗначений();
	ТаблицаМетаданных.Колонки.Добавить("Объект");
	
	Для Каждого Объект Из МетаданныеОбъектов Цикл
		СтрокаТаблицы = ТаблицаМетаданных.Добавить();
		СтрокаТаблицы.Объект = Объект;
	КонецЦикла;	

	Возврат ТаблицаМетаданных;
	
КонецФункции

//Определяет, требуется ли регистрация изменений объекта, исходя из схемы обмена
//
Функция НужнаРегистрацияИзменений(МетаданныеОбъекта, ДеревоПараметровВыгрузки, СтруктураСтрокКлассов,
								  МетаданныеКонстант, МетаданныеСправочников, МетаданныеДокументов, МетаданныеРегистровСведений) Экспорт

	Если МетаданныеКонстант.Найти(МетаданныеОбъекта) <> Неопределено Тогда
		Если СтруктураСтрокКлассов.Константы <> Неопределено Тогда
			СтрокаДерева = СтруктураСтрокКлассов.Константы.Строки.Найти(МетаданныеОбъекта.Имя, "Имя");
			Если СтрокаДерева <> Неопределено Тогда
				Возврат СтрокаДерева.ВыгружатьТолькоИзменения;
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли МетаданныеСправочников.Найти(МетаданныеОбъекта) <> Неопределено Тогда
		Если СтруктураСтрокКлассов.Справочники <> Неопределено Тогда
			СтрокаДерева = СтруктураСтрокКлассов.Справочники.Строки.Найти(МетаданныеОбъекта.Имя, "Имя");
			Если СтрокаДерева <> Неопределено Тогда
				Возврат СтрокаДерева.ВыгружатьТолькоИзменения;
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли МетаданныеДокументов.Найти(МетаданныеОбъекта) <> Неопределено Тогда
		Если СтруктураСтрокКлассов.Документы <> Неопределено Тогда
			СтрокаДерева = СтруктураСтрокКлассов.Документы.Строки.Найти(МетаданныеОбъекта.Имя, "Имя");
			Если СтрокаДерева <> Неопределено Тогда
				Возврат СтрокаДерева.ВыгружатьТолькоИзменения;
			КонецЕсли;		
		КонецЕсли;
	ИначеЕсли МетаданныеРегистровСведений.Найти(МетаданныеОбъекта) <> Неопределено Тогда	
		Если СтруктураСтрокКлассов.РегистрыСведений <> Неопределено Тогда
			СтрокаДерева = СтруктураСтрокКлассов.РегистрыСведений.Строки.Найти(МетаданныеОбъекта.Имя, "Имя");
			Если СтрокаДерева <> Неопределено Тогда
				Возврат СтрокаДерева.ВыгружатьТолькоИзменения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получает структуру параметров настроек мобильного пользователя
// Параметры:
//  Пользователь - мобильный пользователь (элемент справочника "Пользователи")
//  Мобильный компьютер - мобильный компьютер пользователя (элемент справочника "Мобильные компьютеры") 
//
// Возвращаемое значение - СтруктураПараметров. Структура, содержащая параметры настроек пользователя
//
Функция СтруктураПараметровНастроекПользователяМобильногоКомпьютера(Пользователь, МобильныйКомпьютер) Экспорт
		
	Отбор = Новый Структура();
	Отбор.Вставить("Пользователь", Пользователь);
	Отбор.Вставить("МобильныйКомпьютер", МобильныйКомпьютер);
	
	НастройкиПользователейМобильныхПриложений = РегистрыСведений.НастройкиПользователейМобильныхПриложений;
	СтруктураПараметров = НастройкиПользователейМобильныхПриложений.Получить(Отбор);
	
	СхемаОбменаДанными = СтруктураПараметров.СхемаОбменаДанными;		
	СтруктураПараметров.Вставить("ВерсияМобильногоПриложения",СхемаОбменаДанными.ВерсияМобильногоПриложения);
			
	Возврат СтруктураПараметров;
	
КонецФункции

// Получает пользователя по его коду
// Параметры:
//  Код - код пользователя
//
Функция ПользовательПоКоду(Код) Экспорт
	
	Возврат Справочники.Пользователи.НайтиПоКоду(Код);
	
КонецФункции

// Получает мобильный компьютер по его коду
// Параметры:
//  Код - код мобильного компьютера
//
Функция МобильныйКомпьютерПоКоду(Код) Экспорт
	
	Возврат Справочники.МобильныеКомпьютеры.НайтиПоКоду(Код);
	
КонецФункции

// Осуществляет проверку наличия в ИБ информации о пользователе и мобильном компьютере
// Параметры:
//  Пользователь - мобильный пользователь
//  Имя пользователя - имя мобильного пользователя
//  Мобильный компьютер - мобильный компьютер
//  КодМобильногоКомпьютера - код мобильного компьютера
//
// Возвращаемое значение 
//  Текст ошибки. Если ошибок нет, возвращается пустая строка
//
Функция ОтсутствиеРегистрацииВСистеме(Пользователь, ИмяПользователя, МобильныйКомпьютер, КодМобильногоКомпьютера) Экспорт
	
	Если Пользователь.Пустая() Тогда
		ТекстОшибки = "Пользователь " + ИмяПользователя + " не зарегистрирован в системе!";
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если МобильныйКомпьютер.Пустая() Тогда
		ТекстОшибки = "Мобильный компьютер с кодом " + КодМобильногоКомпьютера + " не зарегистрирован в системе!";		
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Осуществляет проверку наличия настроек для связки "мобильный пользователь + мобильный компьютер"
// Параметры:
//  СтруктураПараметровНастроекПользователя - структура, содерщащая параметры настроек мобильного пользователя 
//  ИмяПользователя - имя мобильного пользователя
//  КодМобильногоКомпьютера - код мобильного компьютера
//
// Возвращаемое значение 
//  Текст ошибки. Если ошибок нет, возвращается пустая строка
//
Функция ОтсутствиеНастроекПользователяМобильногоКомпьютера(СтруктураПараметровНастроекПользователя, ИмяПользователя, КодМобильногоКомпьютера) Экспорт
		
	СхемаОбменаДанными =  СтруктураПараметровНастроекПользователя.СхемаОбменаДанными;
	МобильноеПриложение = СтруктураПараметровНастроекПользователя.МобильноеПриложение;
    ВерсияМобильногоПриложения = СтруктураПараметровНастроекПользователя.ВерсияМобильногоПриложения;
	УзелОбмена = СтруктураПараметровНастроекПользователя.УзелОбмена;
	
	Если СхемаОбменаДанными.Пустая()
		ИЛИ МобильноеПриложение.Пустая() 
	    ИЛИ ВерсияМобильногоПриложения.Пустая() Тогда
		ТекстОшибки = "Не обнаружены настройки пользователя "+ ИмяПользователя+ " для мобильного компьютера с кодом "+ КодМобильногоКомпьютера;		
		Возврат ТекстОшибки;
	КонецЕсли;	

	Возврат "";
	
КонецФункции	

// Разбирает xml-строку параметров обмена данными и формирует структуру параметров на ее основе
//
Функция ПолучитьСтруктуруПараметровОбменаДанными(ПараметрыОбменаДанными) Экспорт
	
	СтруктураПараметров = Новый Структура();
	
	ЧтениеXML = Новый ЧтениеXML();
		
	Попытка
		ЧтениеXML.УстановитьСтроку(ПараметрыОбменаДанными);
	Исключение
		СообщитьОбОшибке("Во время чтения параметров обмена данными произошла ошибка: " + ОписаниеОшибки());		
	КонецПопытки;	
	
	Попытка		
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
				
				ИмяПараметра = ЧтениеXML.Имя;
				ЗначениеПараметра = ПрочитатьXML(ЧтениеXML);
				
				СтруктураПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
				
			КонецЦикла;
			
		КонецЦикла;		
				
	Исключение
		
		СообщитьОбОшибке("Во время чтения параметров обмена данными произошла ошибка: " + ОписаниеОшибки());	
		
	КонецПопытки;

	Возврат СтруктураПараметров;
	
КонецФункции	
	
//Представляет таблицу значений в XML-виде, пригодном для загрузки в ТЗ в Расширении для КПК
//
Функция ПолучитьТаблицуЗначенийВВидеXML(Таблица, УказыватьТипКолонок = Ложь, ОпределятьТипКолонкиПоПервойСтроке = Ложь, УказыватьТипСтрок = Ложь, УказыватьЗаголовкиКолонок = Ложь, УказыватьШиринуКолонок = Ложь) Экспорт
	
	// Создаем объект записи XML
	ЗаписьXML = Новый ЗаписьXML;
		
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("DataExchangeTable");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");

	
	// Запишем колонки
	Если Таблица.Колонки.Количество()>0 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Columns");		
	КонецЕсли;	
		
	НазначениеТипаСтроки  = ?(УказыватьТипСтрок,НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное);
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(Колонка.Имя);		
		
		Если УказыватьТипКолонок Тогда
			
			Если ОпределятьТипКолонкиПоПервойСтроке Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Тип");
				ПерваяСтрока = Таблица[0];
				ЗначениеВПервойСтроке = ПерваяСтрока[Колонка.Имя];			
				СтрокаТипа = XMLТип(ТипЗнч(ЗначениеВПервойСтроке)).ИмяТипа;
				ЗаписьXML.ЗаписатьТекст(СтрокаТипа);
				ЗаписьXML.ЗаписатьКонецЭлемента();	// Тип колонки				
			Иначе				
				МассивТипов = Колонка.ТипЗначения.Типы();
				Если МассивТипов.Количество()=1 Тогда	// Остальные случаи не рассматриваем
					ЗаписьXML.ЗаписатьНачалоЭлемента("Тип");
					СтрокаТипа = XMLТип(МассивТипов[0]).ИмяТипа; 
					ЗаписьXML.ЗаписатьТекст(СтрокаТипа);
					ЗаписьXML.ЗаписатьКонецЭлемента();	// Тип колонки
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Если УказыватьЗаголовкиКолонок Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Заголовок");		
			ЗаписьXML.ЗаписатьТекст(Колонка.Заголовок);
			ЗаписьXML.ЗаписатьКонецЭлемента();	// Заголовок
		КонецЕсли;	
		
		Если УказыватьШиринуКолонок Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Ширина");		
			ЗаписьXML.ЗаписатьТекст(Строка(Колонка.Ширина));
			ЗаписьXML.ЗаписатьКонецЭлемента();	// Ширина
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();	// Имя колонки

	КонецЦикла;
	
	Если Таблица.Колонки.Количество()>0 Тогда
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Columns
	КонецЕсли;	
    	
	// Запишем строки
	
	Для Каждого Строка из Таблица Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Row");		
		
		Для Каждого Колонка из Таблица.Колонки Цикл			
			Значение = Строка[Колонка.Имя];			
			ЗаписатьXML(ЗаписьXML, Значение, Колонка.Имя, НазначениеТипаСтроки);			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Row
		
	КонецЦикла;	
			
	ЗаписьXML.ЗаписатьКонецЭлемента(); // DataExchangeTable
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции