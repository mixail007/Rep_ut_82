////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ РАБОТЫ С МОБИЛЬНЫМИ ПРИЛОЖЕНИЯМИ И ИХ ВЕРСИЯМИ


// Получает группу справочника "Версии мобильных приложений", соответствующую указанному приложению 
//
// Параметры:
//  ИмяМобильногоПриложения - имя мобильного приложения, для которого необходимо получить группу
//
// Возвращаемое значение:
//  Группа справочника, соответствующая мобильному приложения. Если не найдено - возвращается пустая ссылка
//
Функция ПолучитьГруппуПриложения(ИмяМобильногоПриложения) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииМобильныхПриложений.Ссылка
	|ИЗ
	|	Справочник.ВерсииМобильныхПриложений КАК ВерсииМобильныхПриложений
	|ГДЕ
	|	ВерсииМобильныхПриложений.ЭтоГруппа
	|	И ВерсииМобильныхПриложений.Наименование = &ИмяМобильногоПриложения"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяМобильногоПриложения", ИмяМобильногоПриложения);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		Возврат Справочники.ВерсииМобильныхПриложений.ПустаяСсылка();
	КонецЕсли;

КонецФункции

// Получает элемент справочника "Версии мобильных приложений", соответствующий указанной версии приложения 
//
// Параметры:
//  ИмяМобильногоПриложения - имя мобильного приложения, для которого необходимо получить элемент
//  ВерсияМобильногоПриложения - версия мобильного приложения, для которого необходимо получить элемент
//
// Возвращаемое значение:
//  Элемент справочника, соответствующий указанной версии мобильного приложения.Если не найдено - возвращается пустая ссылка
//
Функция ПолучитьЭлементПриложения(ИмяМобильногоПриложения, ВерсияМобильногоПриложения) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииМобильныхПриложений.Ссылка
	|ИЗ
	|	Справочник.ВерсииМобильныхПриложений КАК ВерсииМобильныхПриложений
	|ГДЕ
	|	(НЕ ВерсииМобильныхПриложений.ЭтоГруппа)
	|	И ВерсииМобильныхПриложений.Родитель.Наименование = &ИмяМобильногоПриложения
	|	И ВерсииМобильныхПриложений.Код = &ВерсияМобильногоПриложения"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяМобильногоПриложения", ИмяМобильногоПриложения);
	Запрос.УстановитьПараметр("ВерсияМобильногоПриложения", ВерсияМобильногоПриложения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		Возврат Справочники.ВерсииМобильныхПриложений.ПустаяСсылка();
	КонецЕсли;

КонецФункции

// Получает структуру, содержащую данные о версии мобильного приложения
//
// Параметры:
//  ИмяПриложения - строка с именем мобильного приложения
//  НомерВерсии - строка, содержащая номер версии мобильного приложения
//
// Возвращаемое значение:
//  Структура, содержащая данные о версии мобильного приложения
//
Функция ПолучитьСтруктуруПриложения(ИмяПриложения, НомерВерсии) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВерсииМобильныхПриложений.Ссылка,
	|	ВерсииМобильныхПриложений.ЭтоГруппа
	|ИЗ
	|	Справочник.ВерсииМобильныхПриложений КАК ВерсииМобильныхПриложений
	|ГДЕ
	|	(НЕ ВерсииМобильныхПриложений.ЭтоГруппа)
	|	И ВерсииМобильныхПриложений.Код = &НомерВерсии
	|	И ВерсииМобильныхПриложений.Родитель.Наименование = &ИмяПриложения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииМобильныхПриложений.Ссылка,
	|	ВерсииМобильныхПриложений.ЭтоГруппа
	|ИЗ
	|	Справочник.ВерсииМобильныхПриложений КАК ВерсииМобильныхПриложений
	|ГДЕ
	|	ВерсииМобильныхПриложений.ЭтоГруппа
	|	И ВерсииМобильныхПриложений.Наименование = &ИмяПриложения"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НомерВерсии", НомерВерсии);
	Запрос.УстановитьПараметр("ИмяПриложения", ИмяПриложения);
	
	СтруктураПриложения = Новый Структура("Приложение,Версия",Неопределено,Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			СтруктураПриложения.Вставить("Приложение", Выборка.Ссылка);
		Иначе
			СтруктураПриложения.Вставить("Версия", Выборка.Ссылка);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СтруктураПриложения;
	
КонецФункции

// Загружает данные о версии мобильного приложения из макета конфигурации
//
// Параметры:
//  ИмяМакета - имя макета, из которого производится загрузка
//
Процедура ЗагрузитьВерсиюПриложенияИзМакета(ИмяМакета) Экспорт

	СтрокаДанныхЗагрузки = Справочники.ВерсииМобильныхПриложений.ПолучитьXMLДанныеВерсииПриложения(ИмяМакета);
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаДанныхЗагрузки);
	
	Попытка
		
		Если ЧтениеXML.Прочитать() Тогда
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Имя <> "MobileApplicationVersionData" Тогда
					ТекстСообщения = НСтр("ru='Ошибка загрузки мобильного приложения из макета'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат;
				КонецЕсли;	
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru='Ошибка загрузки мобильного приложения из макета'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;	
		
		ИмяТекущегоЭлемента = Неопределено;

		ИмяПриложения = Неопределено;
		НомерВерсии = Неопределено;
		Приложение = Неопределено;
		ИспользуемыеМетаданные = Неопределено;
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяТекущегоЭлемента = ЧтениеXML.Имя;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				
				Если ИмяТекущегоЭлемента = "ApplicationName" Тогда
					ИмяПриложения = ЧтениеXML.Значение;
				ИначеЕсли ИмяТекущегоЭлемента = "Version" Тогда
					НомерВерсии = ЧтениеXML.Значение;
				ИначеЕсли ИмяТекущегоЭлемента = "Application" Тогда
					Приложение = ЧтениеXML.Значение;
				ИначеЕсли ИмяТекущегоЭлемента = "Metadata" Тогда
					ИспользуемыеМетаданные = ЧтениеXML.Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураПриложения = ПолучитьСтруктуруПриложения(ИмяПриложения, НомерВерсии);
		ЗаписатьПриложение(ИмяПриложения, НомерВерсии, Приложение, ИспользуемыеМетаданные, СтруктураПриложения);
		
	Исключение
		
		ТекстСообщения = НСтр("ru='Ошибка загрузки мобильного приложения из макета'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	ЧтениеXML.Закрыть();

КонецПроцедуры

// Записывает версию мобильного приложения в справочник на основании переданных данных
//
// Параметры:
//  ИмяПриложения - строка с именем мобильного приложения
//  НомерВерсии - строка, содержащая номер версии мобильного приложения
//  Приложение - мобильное приложение в виде кодированной строки
//  ИспользуемыеМетаданные - строка, содержащая информацию об используемых приложением метаданных в XML-виде
//  СтруктураПриложения - структура, содержащая информацию о приложении
//
Процедура ЗаписатьПриложение(ИмяПриложения, НомерВерсии, Приложение, ИспользуемыеМетаданные, СтруктураПриложения) Экспорт
	
	Если СтруктураПриложения.Приложение = Неопределено Тогда
		ПриложениеОбъект = Справочники.ВерсииМобильныхПриложений.СоздатьГруппу();
		ПриложениеОбъект.Наименование = ИмяПриложения;
		ПриложениеОбъект.Записать();
		ПриложениеСсылка = ПриложениеОбъект.Ссылка;
	Иначе
		ПриложениеСсылка = СтруктураПриложения.Приложение;

		Если ПриложениеСсылка.ПометкаУдаления Тогда
            ПриложениеОбъект = ПриложениеСсылка.ПолучитьОбъект();
            ПриложениеОбъект.ПометкаУдаления = Ложь;
            ПриложениеОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПриложения.Версия = Неопределено Тогда
		ВерсияОбъект = Справочники.ВерсииМобильныхПриложений.СоздатьЭлемент();
		ВерсияОбъект.Родитель = ПриложениеСсылка;
		ВерсияОбъект.Код = НомерВерсии;
		ВерсияОбъект.Наименование = ИмяПриложения + ", версия: " + НомерВерсии;
	Иначе
		ВерсияОбъект = СтруктураПриложения.Версия.ПолучитьОбъект();
	КонецЕсли;
	
	ВерсияОбъект.МобильноеПриложение = Приложение;
	ВерсияОбъект.ИспользуемыеМетаданные = ИспользуемыеМетаданные;
    ВерсияОбъект.ПометкаУдаления = Ложь;
	
	ВерсияОбъект.Записать();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С УЗЛАМИ ОБМЕНА


// Получает узел обмена, соответствующий мобильному подключению (т.е. паре пользователь + компьютер)
//
// Параметры:
//  ИмяПользователя - имя мобильного пользователя
//  КодМобильногоКомпьютера - код (серийный номер или сетевое имя) мобильного компьютера)
//
// Возвращаемое значение:
//  УзелОбмена - ссылка на соответствующий узел обмена
//
Функция ПолучитьУзелОбменаДляМобильногоПодключения(ИмяПользователя, КодМобильногоКомпьютера) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МобильноеПриложение.Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.Пользователь.Код = &ИмяПользователя
	|	И МобильноеПриложение.МобильныйКомпьютер.СерийныйНомер = &КодМобильногоКомпьютера
	|	И МобильноеПриложение.Ссылка <> &ЭтотУзел"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяПользователя", ИмяПользователя);
	Запрос.УстановитьПараметр("КодМобильногоКомпьютера", КодМобильногоКомпьютера);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.МобильноеПриложение.ЭтотУзел());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		Возврат ПланыОбмена.МобильноеПриложение.ПустаяСсылка();
	КонецЕсли;

КонецФункции

// Проверяет, существует ли узел, соответствующий указанному подключению
//
// Параметры:
//  ИмяПользователя - имя мобильного пользователя
//  КодМобильногоКомпьютера - код (серийный номер или сетевое имя) мобильного компьютера)
//  ПроверяемыйУзел - ссылка на узел плана обмена, для которого проверяется существование
//  узла с аналогичными параметрами подключения (пользователь и компьютер)
//
// Возвращаемое значение:
//  Существование узла. Истина - узел существует, Ложь - не существует.
//
Функция УзелДляПодключенияСуществует(ИмяПользователя, КодМобильногоКомпьютера, ПроверяемыйУзел) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МобильноеПриложение.Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.Пользователь.Код = &ИмяПользователя
	|	И МобильноеПриложение.МобильныйКомпьютер.СерийныйНомер = &КодМобильногоКомпьютера
	|	И МобильноеПриложение.Ссылка <> &ЭтотУзел
	|	И МобильноеПриложение.Ссылка <> &ПроверяемыйУзел"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяПользователя", ИмяПользователя);
	Запрос.УстановитьПараметр("КодМобильногоКомпьютера", КодМобильногоКомпьютера);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.МобильноеПриложение.ЭтотУзел());
	Запрос.УстановитьПараметр("ПроверяемыйУзел", ПроверяемыйУзел);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ПАКЕТА ОБМЕНА


// Выполняет запись данных в пакет обмена
//
// Параметры:
//  Узел обмена - узел плана обмена, для которого необходимо зарегистрировать изменение данных
//  ПараметрыОбменаДанными строка, содержащая параметры обмена данными в xml-виде
//
// Возвращаемое значение:
//  Строка, содержащая данные пакета обмена
//
Функция СформироватьПакетОбмена(УзелОбмена, ПараметрыОбменаДанными) Экспорт

	ЗаписьXML = Новый ЗаписьXML();
	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8MobileAppData", "http://www.1c.ru/V8/1CV8MobileAppData/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8MobileAppExch", "http://www.1c.ru/V8/1CV8MobileAppData/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	
	ВременнаяЗаписьXML = Новый ЗаписьXML();
	ВременнаяЗаписьXML.УстановитьСтроку();
	ЗаписьСообщения.НачатьЗапись(ВременнаяЗаписьXML, УзелОбмена);
	
	СтруктураПараметровОбменаДанными = ПолучитьСтруктуруПараметровОбменаДанными(ПараметрыОбменаДанными);
	
	// В начало пакета обмена помещается секция очистки данных
	ЗаписатьСекциюОчисткиДанных(УзелОбмена, ЗаписьXML, СтруктураПараметровОбменаДанными);
	
	// Далее помещаем секцию хранимых данных
	ЗаписатьСекциюХранимыхДанных(УзелОбмена, ЗаписьXML, СтруктураПараметровОбменаДанными);
	
	ДеревоИспользуемыхМетаданных = ПолучитьДеревоИспользуемыхМетаданных(УзелОбмена.ВерсияМобильногоПриложения.ИспользуемыеМетаданные);
	
	// Выберем все данные, удовлетворяющие схеме обмена
	МетаданныеПланаОбмена = УзелОбмена.Метаданные();
	
	Для Каждого ЭлементСоставаПланаОбмена Из МетаданныеПланаОбмена.Состав Цикл

		ОбъектМетаданных = ЭлементСоставаПланаОбмена.Метаданные;
		
		СтруктураОписанияОбъекта = ОбменДаннымиСМобильнымиПриложениямиСобытия.ПолучитьСтруктуруОписанияОбъекта(ОбъектМетаданных, Истина);

        Если СтруктураОписанияОбъекта.ИмяКласса = "Справочники" ИЛИ СтруктураОписанияОбъекта.ИмяКласса = "Документы" Тогда
			СтруктураСостава = ПолучитьСтруктуруСоставаОбъекта(ОбъектМетаданных, СтруктураОписанияОбъекта.ИмяКласса, СтруктураОписанияОбъекта.ИмяОбъекта, ДеревоИспользуемыхМетаданных);
        Иначе
            СтруктураСостава = Неопределено;
		КонецЕсли;
		
		Если НЕ ВключатьДанныеВПакетОбмена(СтруктураОписанияОбъекта, СтруктураПараметровОбменаДанными) Тогда
			Продолжить;
		КонецЕсли;
				
		Если СтруктураОписанияОбъекта.ИмяКласса = "РегистрыСведений" Тогда
					
            СтруктураНастроекОтбора = ПолучитьСтруктуруНастроекОтбора(УзелОбмена);
            СтруктураПараметровНастройкиОбмена = ПолучитьСтруктуруПараметровНастройкиОбмена(УзелОбмена);

            МассивКлючевыхПолей = ПолучитьМассивКлючевыхПолейРегистраСведений(ОбъектМетаданных);
            МассивПолей = ПолучитьМассивПолейРегистраСведенийДляВыборки(ОбъектМетаданных);
			
			// Необходимо проставить в таблицах изменений номер сообщения для последующего удаления регистрации изменений
			ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения, ОбъектМетаданных);

            // Формируем таблицу значений, содержащую все комбинации ключевых полей регистра, по которым есть изменения
    		ТаблицаКлючей = ПолучитьТаблицуКлючейНабораЗаписей(СтруктураОписанияОбъекта, СтруктураНастроекОтбора, МассивКлючевыхПолей, СтруктураПараметровНастройкиОбмена, Истина, УзелОбмена, ЗаписьСообщения.НомерСообщения);

			МассивВыбранныхПолей = Новый Массив();
			Для Каждого Колонка из ТаблицаКлючей.Колонки Цикл
				МассивВыбранныхПолей.Добавить(Колонка.Имя);
			КонецЦикла;
			
            СтруктураОписанияОбъекта = ОбменДаннымиСМобильнымиПриложениямиСобытия.ПолучитьСтруктуруОписанияОбъекта(ОбъектМетаданных, Ложь);
            ТаблицаЗаписей = ПолучитьТаблицуЗаписейРегистраСведений(СтруктураОписанияОбъекта, СтруктураНастроекОтбора, МассивПолей, СтруктураПараметровНастройкиОбмена, УзелОбмена);

            СтруктураОтбора = Новый Структура();

            Для Каждого КомбинацияКлючей из ТаблицаКлючей Цикл

				Для Каждого КлючевоеПоле из МассивКлючевыхПолей Цикл
					Если МассивВыбранныхПолей.Найти(КлючевоеПоле) <> Неопределено Тогда
                    	СтруктураОтбора.Вставить(КлючевоеПоле, КомбинацияКлючей[КлючевоеПоле]);
					КонецЕсли;
                КонецЦикла;
                
				МассивСтрокТаблицыЗаписей = ТаблицаЗаписей.НайтиСтроки(СтруктураОтбора);
                НаборЗаписей = СформироватьНаборЗаписейДляВыгрузки(СтруктураОписанияОбъекта.ИмяОбъекта, КомбинацияКлючей, МассивСтрокТаблицыЗаписей, МассивКлючевыхПолей, МассивПолей, МассивВыбранныхПолей);
                ЗаписатьДанныеВПакетОбмена(НаборЗаписей, СтруктураОписанияОбъекта.ИмяКласса, СтруктураОписанияОбъекта.ИмяОбъекта, СтруктураСостава, ЗаписьXML);

            КонецЦикла;

		Иначе
			// Данные констант, справочников и документов прямо из выборки пишем в XML
			ВыборкаДанных = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения, ОбъектМетаданных);
			
			Пока ВыборкаДанных.Следующий() Цикл
				Объект = ВыборкаДанных.Получить();
				ЗаписатьДанныеВПакетОбмена(Объект, СтруктураОписанияОбъекта.ИмяКласса, СтруктураОписанияОбъекта.ИмяОбъекта, СтруктураСостава, ЗаписьXML);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьСообщения.ЗакончитьЗапись();
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //_1CV8MobileAppData
	
	Возврат ЗаписьXML.Закрыть();

КонецФункции

// Записывает в пакет обмена специальную секцию ClearData, руководствуясь схемой обмена,
// определенной для указанного узла обмена
//
// Параметры:
//  УзелОбмена - узел плана обмена, для которого требуется сформировать секию очистки данных
//  ЗаписьXML - объект ЗаписьXML, при помощи которого производится запись пакета обмена
//  СтруктураПараметровОбменаДанными - структура, содержащая параметры обмена данными
//
Процедура ЗаписатьСекциюОчисткиДанных(УзелОбмена, ЗаписьXML, СтруктураПараметровОбменаДанными)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ClearData");
	
	// Очистка заказов по требованию пользователя
	Если СтруктураПараметровОбменаДанными.Свойство("УдалятьЗаказы") И СтруктураПараметровОбменаДанными.Свойство("ДатаГраницыОчисткиЗаказов") Тогда
		Если СтруктураПараметровОбменаДанными.УдалятьЗаказы Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Document.ЗаказКлиента");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Filter");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Дата");
			ЗаписатьXML(ЗаписьXML, КонецДня(СтруктураПараметровОбменаДанными.ДатаГраницыОчисткиЗаказов), "Value", НазначениеТипаXML.Неявное);
			ЗаписатьXML(ЗаписьXML, "МеньшеИлиРавно", "ComparisonType", НазначениеТипаXML.Неявное);
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "Дата"
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Для тега "Filter"
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Для тега "Document.ЗаказКлиента"
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Для тега ClearData
	
КонецПроцедуры

// Записывает в пакет обмена специальную секцию хранимых данных, руководствуясь схемой обмена,
// определенной для указанного узла обмена
//                                                       o
// Параметры:
//  УзелОбмена - узел плана обмена, для которого требуется сформировать секию очистки данных
//  ЗаписьXML - объект ЗаписьXML, при помощи которого производится запись пакета обмена
//  СтруктураПараметровОбменаДанными - структура, содержащая параметры обмена данными
//
Процедура ЗаписатьСекциюХранимыхДанных(УзелОбмена, ЗаписьXML, СтруктураПараметровОбменаДанными)

	Если СтруктураПараметровОбменаДанными.Свойство("ПолучатьОстаткиВВидеТаблицыЗначений") И СтруктураПараметровОбменаДанными.ПолучатьОстаткиВВидеТаблицыЗначений Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("PersistentDataList");
			ЗаписатьXML(ЗаписьXML, ПодготовкаДанныхСервер.ПолучитьТаблицуОстатковВВидеXML(), "ТаблицаОстатковНоменклатуры", НазначениеТипаXML.Неявное);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // PersistentDataList
	
	КонецЕсли;
	
КонецПроцедуры

// Записывает в пакет обмена реквизиты указанного элемента справочника
//
// Параметры:
//  Объект - объект, подлежащий записи
//  ЭтоГруппа - признак, определяющий, является ли объект группой
//  СтруктураСостава - структура, описывающая набор используемых полей объекта
//  ЗаписьXML - объект ЗаписьXML, который выполняет запись
//
Процедура ЗаписатьРеквизитыСправочникаВПакетОбмена(Объект, ЭтоГруппа, СтруктураСостава, ЗаписьXML)

	СтруктураРеквизитов = СтруктураСостава.Реквизиты;

	Для Каждого Реквизит из СтруктураРеквизитов Цикл

		СтруктураОписанияРеквизита = Реквизит.Значение;

		Если НеобходимоУказаниеСвойства(ЭтоГруппа, СтруктураОписанияРеквизита) Тогда
			ЗаписатьXML(ЗаписьXML, Объект[Реквизит.Ключ], Реквизит.Ключ, СтруктураОписанияРеквизита.УказаниеТипа);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Записывает в пакет обмена табличные части указанного элемента справочника
//
// Параметры:
//  Объект - объект, подлежащий записи
//  ЭтоГруппа - признак, определяющий, является ли объект группой
//  СтруктураСостава - структура, описывающая набор используемых полей объекта
//  ЗаписьXML - объект ЗаписьXML, который выполняет запись
//
Процедура ЗаписатьТабличныеЧастиСправочникаВПакетОбмена(Объект, ЭтоГруппа, СтруктураСостава, ЗаписьXML)

	СтруктураТабличныхЧастей = СтруктураСостава.ТабличныеЧасти;

	Для Каждого ТабличнаяЧасть из СтруктураТабличныхЧастей Цикл

		СтруктураОписанияТабличнойЧасти = ТабличнаяЧасть.Значение;

		Если НеобходимоУказаниеСвойства(ЭтоГруппа, СтруктураОписанияТабличнойЧасти) Тогда

			// Запишем поочередно каждую табличную часть объекта
			ЗаписьXML.ЗаписатьНачалоЭлемента(ТабличнаяЧасть.Ключ);

			Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть.Ключ] Цикл
				
				// Запишем строки табличной части
				ЗаписьXML.ЗаписатьНачалоЭлемента("Row");
				
				СтруктураРеквизитов = СтруктураОписанияТабличнойЧасти.СтруктураРеквизитов;

				Для Каждого ЭлементСтруктурыРеквизитов Из СтруктураРеквизитов Цикл
					
					ИмяРеквизита = ЭлементСтруктурыРеквизитов.Ключ;
					СтруктураОписанияРеквизита = ЭлементСтруктурыРеквизитов.Значение;
					
					// Для каждой строки табличной части запишем используемые реквизиты
					ЗаписатьXML(ЗаписьXML, СтрокаТабличнойЧасти[ИмяРеквизита], ИмяРеквизита, СтруктураОписанияРеквизита.УказаниеТипа);
					
				КонецЦикла;
				
				ЗаписьXML.ЗаписатьКонецЭлемента(); // Row

			КонецЦикла;

			ЗаписьXML.ЗаписатьКонецЭлемента(); // Имя табличной части

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Записывает в пакет обмена данные объекта, подлежащие записи (используемые и системные реквизиты)
//
// Параметры:
//  Объект - объект, подлежащий записи
//  ИмяОбъекта - имя записываемого объекта
//  СтруктураСостава - структура, описывающая набор используемых полей объекта
//  ЗаписьXML - объект ЗаписьXML, который выполняет запись
//
Процедура ЗаписатьЭлементСправочникаВПакетОбмена(Объект, ИмяОбъекта, СтруктураСостава, ЗаписьXML)

	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject." + ИмяОбъекта);
	
	ЭтоГруппа = Объект.ЭтоГруппа;

	//Запишем реквизиты справочника
	ЗаписатьРеквизитыСправочникаВПакетОбмена(Объект, ЭтоГруппа, СтруктураСостава, ЗаписьXML);

	// Запишем табличные части справочника
	ЗаписатьТабличныеЧастиСправочникаВПакетОбмена(Объект, ЭтоГруппа, СтруктураСостава, ЗаписьXML);

	ЗаписьXML.ЗаписатьКонецЭлемента(); // CatalogObject
	
КонецПроцедуры

// Записывает в пакет обмена реквизиты указанного документа
//
// Параметры:
//  Объект - объект, подлежащий записи
//  СтруктураСостава - структура, описывающая набор используемых полей объекта
//  ЗаписьXML - объект ЗаписьXML, который выполняет запись
//
Процедура ЗаписатьРеквизитыДокументаВПакетОбмена(Объект, СтруктураСостава, ЗаписьXML)

	СтруктураРеквизитов = СтруктураСостава.Реквизиты;

	Для Каждого Реквизит из СтруктураРеквизитов Цикл

		СтруктураОписанияРеквизита = Реквизит.Значение;
		ЗаписатьXML(ЗаписьXML, Объект[Реквизит.Ключ], Реквизит.Ключ, СтруктураОписанияРеквизита.УказаниеТипа);

	КонецЦикла;

КонецПроцедуры

// Записывает в пакет обмена табличные части указанного документа
//
// Параметры:
//  Объект - объект, подлежащий записи
//  СтруктураСостава - структура, описывающая набор используемых полей объекта
//  ЗаписьXML - объект ЗаписьXML, который выполняет запись
//
Процедура ЗаписатьТабличныеЧастиДокументаВПакетОбмена(Объект, СтруктураСостава, ЗаписьXML)

	СтруктураТабличныхЧастей = СтруктураСостава.ТабличныеЧасти;
	
	Для Каждого ТабличнаяЧасть из СтруктураТабличныхЧастей Цикл
		
		СтруктураОписанияТабличнойЧасти = ТабличнаяЧасть.Значение;
		
		// Запишем поочередно каждую табличную часть объекта
		ЗаписьXML.ЗаписатьНачалоЭлемента(ТабличнаяЧасть.Ключ);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть.Ключ] Цикл
			
			// Запишем строки табличной части
			ЗаписьXML.ЗаписатьНачалоЭлемента("Row");
			
			СтруктураРеквизитов = СтруктураОписанияТабличнойЧасти.СтруктураРеквизитов;
			
			Для Каждого ЭлементСтруктурыРеквизитов Из СтруктураРеквизитов Цикл
				
				ИмяРеквизита = ЭлементСтруктурыРеквизитов.Ключ;
				СтруктураОписанияРеквизита = ЭлементСтруктурыРеквизитов.Значение;

				// Для каждой строки табличной части запишем используемые реквизиты
				ЗаписатьXML(ЗаписьXML, СтрокаТабличнойЧасти[ИмяРеквизита], ИмяРеквизита, СтруктураОписанияРеквизита.УказаниеТипа);
				
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Row
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Имя табличной части
		
	КонецЦикла;

КонецПроцедуры

// Записывает в пакет обмена данные объекта, подлежащие записи (используемые и системные реквизиты)
//
// Параметры:
//  Объект - объект, подлежащий записи
//  ИмяОбъекта - имя записываемого объекта
//  СтруктураСостава - структура, описывающая набор используемых полей объекта
//  ЗаписьXML - объект ЗаписьXML, который выполняет запись
//
Процедура ЗаписатьДокументВПакетОбмена(Объект, ИмяОбъекта, СтруктураСостава, ЗаписьXML)

	ЗаписьXML.ЗаписатьНачалоЭлемента("DocumentObject." + ИмяОбъекта);

	//Запишем реквизиты документа
	ЗаписатьРеквизитыДокументаВПакетОбмена(Объект, СтруктураСостава, ЗаписьXML);

	// Запишем табличные части справочника
	ЗаписатьТабличныеЧастиДокументаВПакетОбмена(Объект, СтруктураСостава, ЗаписьXML);

	ЗаписьXML.ЗаписатьКонецЭлемента(); // DocumentObject	

КонецПроцедуры	

// Записывает данные по конкретному объекту в пакет обмена
//
// Параметры:
//  Объект - объект, подлежащий записи
//  ИмяКласса - имя класса, к которому принадлежит объект (Справочники, Документы и т.д.)
//  ИмяОбъекта - имя объекта метаданных, данные которого требуется записать
//  СтруктураСостава - структура, описывающая набор используемых полей объекта
//  ЗаписьXML - объект ЗаписьXML, который выполняет запись
//
Процедура ЗаписатьДанныеВПакетОбмена(Объект, ИмяКласса, ИмяОбъекта, СтруктураСостава, ЗаписьXML)

	Если ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда
		ЗаписатьXML(ЗаписьXML, Объект);
		Возврат;
	КонецЕсли;

	Если ИмяКласса = "Константы" ИЛИ ИмяКласса = "РегистрыСведений" Тогда

		ЗаписатьXML(ЗаписьXML, Объект);

	ИначеЕсли ИмяКласса = "Справочники" Тогда

		ЗаписатьЭлементСправочникаВПакетОбмена(Объект, ИмяОбъекта, СтруктураСостава, ЗаписьXML);

	ИначеЕсли ИмяКласса = "Документы" Тогда

		ЗаписатьДокументВПакетОбмена(Объект, ИмяОбъекта, СтруктураСостава, ЗаписьXML);

	КонецЕсли;

КонецПроцедуры

// Определяет и возвращает признак необходимости указания свойства объекта метаданных
//
// Параметры:
//  ЭтоГруппаСправочника - признак, определяющий, является ли объект группой
//  СтруктураОписанияСвойства - структура, содержащая описание свойства (вариант использования реквизита или ТЧ)
//
// Возвращаемое значение:
//  Истина - свойство необходимо указать, Ложь - указание не требуется
//
Функция НеобходимоУказаниеСвойства(ЭтоГруппаСправочника, СтруктураОписанияСвойства)

	Если ЭтоГруппаСправочника Тогда
		Возврат СтруктураОписанияСвойства.ИспользуетсяДляГруппы;
	Иначе
		Возврат СтруктураОписанияСвойства.ИспользуетсяДляЭлемента;
	КонецЕсли;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОЛУЧЕННЫМИ ПАКЕТАМИ ОБМЕНА


// Выполняет запись данных, содержащихся в полученном пакете обмена, в ИБ
//
// Параметры:
//  УзелОбмена - узел плана обмена, для которого предназначен полученный пакет обмена
//  ДанныеМобильногоПриложения - пакет обмена в виде xml-строки
//
Процедура ЗаписатьДанныеПолученногоПакетаОбмена(УзелОбмена, ДанныеМобильногоПриложения) Экспорт

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеМобильногоПриложения);
	
	// проверка формата файла обмена
	Если Не ЧтениеXML.Прочитать() Или
		ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или 
		ЧтениеXML.ЛокальноеИмя <> "_1CV8MobileAppData" Или 
		ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8MobileAppData/" Тогда
		
		#Если ВнешнееСоединение Тогда
			ТекстСообщения = НСтр("ru = 'Неверный формат данных: некорректное начало файла'");
			ВызватьИсключение(ТекстСообщения);
		#КонецЕсли

		Возврат;
		
	КонецЕсли;

	СтруктураОписанияИспользуемыхОбъектов = ПолучитьСтруктуруОписанияИспользуемыхОбъектов(УзелОбмена);
			
	// чтение и запись в ИБ данных пакета обмена
	Если Не ЧтениеXML.Прочитать() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровНастройкиОбмена = ПолучитьСтруктуруПараметровНастройкиОбмена(УзелОбмена);

	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		ТипXML = ПолучитьXMLТип(ЧтениеXML);

		Если ТипXML = Неопределено Тогда
			ЧтениеXML.Пропустить();
			Продолжить;
		КонецЕсли; 
		
		ИмяКласса = "";
		ИмяОбъекта = "";
		ОпределитьПоТипуДанныхКлассИИмяТипа(ТипXML.ИмяТипа, ИмяКласса, ИмяОбъекта);
		
		// непосредственно само чтение данных
		ОбъектЧтения = Неопределено;
		
		Если ИмяКласса = "CATALOGOBJECT" Тогда

			// читаем элемент справочника
			СтруктураСоставаОбъекта = СтруктураОписанияИспользуемыхОбъектов["Справочники" + ИмяОбъекта];
			ОбъектЧтения = ПрочитатьИИзменитьЭлементСправочника(ЧтениеXML, ИмяОбъекта, СтруктураСоставаОбъекта);

		ИначеЕсли ИмяКласса = "DOCUMENTOBJECT" Тогда

			//читаем документ
			СтруктураСоставаОбъекта = СтруктураОписанияИспользуемыхОбъектов["Документы" + ИмяОбъекта];
			ОбъектЧтения = ПрочитатьИИзменитьДокумент(ЧтениеXML, ИмяОбъекта, СтруктураСоставаОбъекта);
			
		Иначе
			// Константы и наборы записей регистров сведений читаем без дополнительного анализа,
			// поскольку эти значения в пакете обмена представлены целостно
			ОбъектЧтения = ПрочитатьXML(ЧтениеXML);

		КонецЕсли;
		
		// нечего записывать, когда ничего не прочитали
		Если ОбъектЧтения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПланыОбмена.ИзменениеЗарегистрировано(УзелОбмена, ОбъектЧтения) Тогда
			// Изменения, выполненные в центральной ИБ, не должны быть затерты изменениями в мобильной ИБ.
			Продолжить;
		КонецЕсли;
		
		ОбъектЧтения.ОбменДанными.Загрузка = Истина;

		МетаданныеПланаОбмена = УзелОбмена.Метаданные();
		Если МетаданныеПланаОбмена.Состав.Содержит(ОбъектЧтения.Метаданные()) Тогда
			ОбъектЧтения.ОбменДанными.Отправитель = УзелОбмена;
		КонецЕсли;
		
		ОбъектЧтения.Записать();

	КонецЦикла;

	ЧтениеXML.Закрыть();

КонецПроцедуры

// Выполняет чтение данных объекта из пакета обмена и отражение этих данных в ИБ
//
// Параметры:
//  ЧтениеXML - объект ЧтениеXML, при помощи которого выполняется чтение пакета
//  ИмяОбъекта - имя объекта данных, подлежащего чтению
//  СтруктураСоставаОбъекта - структура, описывающая состав объекта данных
//
// Возвращаемое значение:
//  Справочник-объект, обновленный или созданный по данным пакета обмена
//
Функция ПрочитатьИИзменитьЭлементСправочника(ЧтениеXML, ИмяОбъекта, СтруктураСоставаОбъекта)

	ДеревоОбъекта = ПолучитьДеревоОбъектаИЗXML(ЧтениеXML, "Справочники", ИмяОбъекта, СтруктураСоставаОбъекта);
	СтрокаИдентификатора = ПолучитьИдентификаторСсылкиИзДереваОбъекта(ДеревоОбъекта);

	СсылкаНаОбъект = ПолучитьСсылку(СтрокаИдентификатора, "Справочники", ИмяОбъекта);
	ОбъектДанных = СсылкаНаОбъект.ПолучитьОбъект();

	Если ОбъектДанных = Неопределено Тогда
		// Создадим новый объект
		ЭтоГруппа = ПолучитьЗначениеРеквизитаИзДереваОбъекта("IsFolder", ДеревоОбъекта);
		Если ЭтоГруппа Тогда
			ОбъектДанных = Справочники[ИмяОбъекта].СоздатьГруппу();
		Иначе
			ОбъектДанных = Справочники[ИмяОбъекта].СоздатьЭлемент();
		КонецЕсли;

		ОбъектДанных.УстановитьСсылкуНового(СсылкаНаОбъект);

	КонецЕсли;

	ЗаполнитьОбъектПоДереву(ОбъектДанных, ДеревоОбъекта);

	Возврат ОбъектДанных;

КонецФункции

// Выполняет чтение данных объекта из пакета обмена и отражение этих данных в ИБ
//
// Параметры:
//  ЧтениеXML - объект ЧтениеXML, при помощи которого выполняется чтение пакета
//  ИмяОбъекта - имя объекта данных, подлежащего чтению
//  СтруктураСоставаОбъекта - структура, описывающая состав объекта данных
//
// Возвращаемое значение:
//  Документ-объект, обновленный или созданный по данным пакета обмена
//
Функция ПрочитатьИИзменитьДокумент(ЧтениеXML, ИмяОбъекта, СтруктураСоставаОбъекта)

	ДеревоОбъекта = ПолучитьДеревоОбъектаИЗXML(ЧтениеXML, "Документы", ИмяОбъекта, СтруктураСоставаОбъекта);

	СтрокаИдентификатора = ПолучитьИдентификаторСсылкиИзДереваОбъекта(ДеревоОбъекта);

	СсылкаНаОбъект = ПолучитьСсылку(СтрокаИдентификатора, "Документы", ИмяОбъекта);
	ОбъектДанных = СсылкаНаОбъект.ПолучитьОбъект();

	Если ОбъектДанных = Неопределено Тогда
		// Создадим новый объект
		ОбъектДанных = Документы[ИмяОбъекта].СоздатьДокумент();
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНаОбъект);
	КонецЕсли;

	ЗаполнитьОбъектПоДереву(ОбъектДанных, ДеревоОбъекта);

	Возврат ОбъектДанных;

КонецФункции

// Выполняет заполнение свойств переданного объекта данных на
// основании считанных из XML  в дерево объекта данных
//
// Параметры:
//  ОбъектДанных - элемент справочника иди документ
//  ДеревоОбъекта - дерево значений, содержащее считанные из пакета обмена данные объекта
//
Процедура ЗаполнитьОбъектПоДереву(ОбъектДанных, ДеревоОбъекта)

	// Заполним реквизиты объекта
	СтрокаРеквизитов = ДеревоОбъекта.Строки.Найти("Реквизиты", "Имя");

	Для Каждого СтрокаРеквизита из СтрокаРеквизитов.Строки Цикл

		Если (СтрокаРеквизита.Имя <> "Ref") И (СтрокаРеквизита.Имя <> "IsFolder") Тогда // Ссылка проставляется отдельно
			ЗначениеРеквизита = ПолучитьЗначениеИзXMLСтроки(СтрокаРеквизита.Тип, СтрокаРеквизита.Значение);
			ОбъектДанных[СтрокаРеквизита.Имя] = ЗначениеРеквизита;
		КонецЕсли;

	КонецЦикла;

	// Заполним табличные части объекта
	СтрокаТабличныхЧастей = ДеревоОбъекта.Строки.Найти("ТабличныеЧасти", "Имя");

	Если СтрокаТабличныхЧастей <> Неопределено Тогда
		// Для каждой строки дерева, соответствующей табличной части, нужно заполнить строки этой ТЧ
		Для Каждого СтрокаТЧ из СтрокаТабличныхЧастей.Строки Цикл

			ТабличнаяЧасть = ОбъектДанных[СтрокаТЧ.Имя];
			ТабличнаяЧасть.Очистить();

			// Просматриваем каждую строку табличной части
			Для Каждого СтрокаТабличнойЧасти из СтрокаТЧ.Строки Цикл

				НоваяСтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

				// Заполняем каждый реквизит строки табличной части
				Для Каждого СтрокаРеквизитаТЧ из СтрокаТабличнойЧасти.Строки Цикл

					ЗначениеРеквизита = ПолучитьЗначениеИзXMLСтроки(СтрокаРеквизитаТЧ.Тип, СтрокаРеквизитаТЧ.Значение);
					НоваяСтрокаТабличнойЧасти[СтрокаРеквизитаТЧ.Имя] = ЗначениеРеквизита;
					
				КонецЦикла;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Формирует и возвращает дерево объекта, сформированное на соновании данных, считанных из XML
//
// Параметры:
//  ЧтениеXML - объект ЧтениеXML, при помощи которого производится чтение
//  ИмяКласса - ИмяКласса - имя класса, к которому принадлежит объект (Справочники, Документы и т.д.)
//  ИмяОбъекта - имя объекта, который читается и для которого требуется сформировать дерево
//  СтруктураСоставаОбъекта - структура, описывающая состав объекта
//
// Возвращаемое значение:
//  Дерево, содержащее прочитанные данные объекта
//
Функция ПолучитьДеревоОбъектаИЗXML(ЧтениеXML, ИмяКласса, ИмяОбъекта, СтруктураСоставаОбъекта)

	ДеревоОбъекта = Новый ДеревоЗначений();

	ДеревоОбъекта.Колонки.Добавить("Имя");
	ДеревоОбъекта.Колонки.Добавить("Тип");
	ДеревоОбъекта.Колонки.Добавить("Значение");

	Реквизиты = ДеревоОбъекта.Строки.Добавить();
	Реквизиты.Имя = "Реквизиты";

	ТабличныеЧасти = ДеревоОбъекта.Строки.Добавить();
	ТабличныеЧасти.Имя = "ТабличныеЧасти";
	
	ТекущаяСтрока = Неопределено;
	ТабличнаяЧасть = Неопределено;
	СтрокаТабличнойЧасти = Неопределено;

	УровеньВложенности = 1;

	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			УровеньВложенности = УровеньВложенности + 1;
			
			// Читаем элемент
			Если УровеньВложенности = 2 Тогда

				// Это либо реквизит, либо табличная часть - нужно определить, что именно
				Если СвойствоЯвляетсяРеквизитом(ИмяКласса, ИмяОбъекта, ЧтениеXML.Имя, СтруктураСоставаОбъекта) Тогда
					ТекущаяСтрока = Реквизиты.Строки.Добавить();
				Иначе	
					ТекущаяСтрока = ТабличныеЧасти.Строки.Добавить();
					ТабличнаяЧасть = ТекущаяСтрока;
				КонецЕсли;

			ИначеЕсли УровеньВложенности = 3 Тогда

				// Это строка табличной части
				Если ТабличнаяЧасть <> Неопределено Тогда
					ТекущаяСтрока = ТабличнаяЧасть.Строки.Добавить();
					СтрокаТабличнойЧасти = ТекущаяСтрока;
				КонецЕсли;

			ИначеЕсли УровеньВложенности = 4 Тогда
		
				// Это реквизиты строки табличной части
				Если СтрокаТабличнойЧасти <> Неопределено Тогда
					ТекущаяСтрока = СтрокаТабличнойЧасти.Строки.Добавить();
				КонецЕсли;

			КонецЕсли;
			
			Если ТекущаяСтрока <> Неопределено Тогда
				
				ТекущаяСтрока.Имя = ЧтениеXML.Имя;
				
				// Читаем атрибуты элемента
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл

					Тип = Неопределено;

					// Если указан тип, прочитаем его
					Если ЧтениеXML.Имя = "xsi:type" Тогда 
						Тип = ПолучитьТипПоСтроке(ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.Имя = "xsi:nil" Тогда
						Тип = Неопределено;
					КонецЕсли;
					
					ТекущаяСтрока.Тип = Тип;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ТекущаяСтрока <> Неопределено Тогда

				Если ТекущаяСтрока.Тип = Неопределено Тогда
					
					ЭтоРеквизит = Ложь;

					ИмяТабличнойЧасти = "";
					Если УровеньВложенности = 4 Тогда // Если это реквизит табличной части

						Если ТабличнаяЧасть <> Неопределено Тогда
							ЭтоРеквизит = Истина;
							ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
						КонецЕсли;

					ИначеЕсли УровеньВложенности = 2 Тогда
						ЭтоРеквизит = СвойствоЯвляетсяРеквизитом(ИмяКласса, ИмяОбъекта, ЧтениеXML.Имя, СтруктураСоставаОбъекта);
					КонецЕсли;

					Если ЭтоРеквизит Тогда
						ТекущаяСтрока.Тип = ПолучитьТипПоМетаданным(ТекущаяСтрока.Имя, ИмяТабличнойЧасти, СтруктураСоставаОбъекта);
					КонецЕсли;

				КонецЕсли;

				Если ТекущаяСтрока.Значение = Неопределено Тогда
					ТекущаяСтрока.Значение = "";
				КонецЕсли;

			КонецЕсли;

			УровеньВложенности = УровеньВложенности - 1;

			Если УровеньВложенности <= 0 Тогда
				ЧтениеXML.Прочитать();
				Возврат ДеревоОбъекта;
			КонецЕсли;
			
		Иначе

			Если ТекущаяСтрока <> Неопределено Тогда
				// Возьмем значение
				ТекущаяСтрока.Значение = ЧтениеXML.Значение;

				ИмяТабличнойЧасти = "";
				Если УровеньВложенности = 4 Тогда // Если это реквизит табличной части
					Если ТабличнаяЧасть <> Неопределено Тогда
						ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
					КонецЕсли;
				КонецЕсли;

				Если ТекущаяСтрока.Тип = Неопределено Тогда
					ТекущаяСтрока.Тип = ПолучитьТипПоМетаданным(ТекущаяСтрока.Имя, ИмяТабличнойЧасти, СтруктураСоставаОбъекта);
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ДеревоОбъекта;

КонецФункции

// Получает и возвращает значение указанного реквизита, содержащееся в 
// дереве объекта
//
// Параметры:
//  ИмяРеквизита - имя реквизита, значение которого требуется получить
//  ДеревоОбъекта - дерево значений, содержащее данные объекта
//
// Возвращаемое значение:
//  Значение реквизита
//
Функция ПолучитьЗначениеРеквизитаИзДереваОбъекта(ИмяРеквизита, ДеревоОбъекта)

	СтрокаРеквизитов = ДеревоОбъекта.Строки.Найти("Реквизиты", "Имя");
	СтрокаРеквизита = СтрокаРеквизитов.Строки.Найти(ИмяРеквизита, "Имя");

	Если СтрокаРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтроковоеЗначение = СтрокаРеквизита.Значение;
	Тип = СтрокаРеквизита.Тип;

	Возврат ПолучитьЗначениеИзXMLСтроки(Тип, СтроковоеЗначение);

КонецФункции

// Определяет, является ли указанное свойство реквизитом объекта или нет
//
// Параметры:
//  ИмяКласса - имя класса, к которому принадлежит объект (Справочники, Документы и т.д.)
//  ИмяОбъекта - имя объекта, свойство которого надо проанализировать
//  СтруктураСоставаОбъекта - структура, описывающая состав объекта метаданных
//
// Возвращаемое значение:
//  Истина - свойство является реквизитом, Ложь - не является
//  
Функция СвойствоЯвляетсяРеквизитом(ИмяКласса, ИмяОбъекта, ИмяСвойства, СтруктураСоставаОбъекта)

	// Сразу проверим системные реквизиты
	Если ИмяКласса = "Справочники" Тогда
		Если ИмяСвойства = "Ref"
			ИЛИ ИмяСвойства = "IsFolder"
			ИЛИ ИмяСвойства = "DeletionMark"
			ИЛИ ИмяСвойства = "Parent"
			ИЛИ ИмяСвойства = "Code"
			ИЛИ ИмяСвойства = "Description"
			ИЛИ ИмяСвойства = "Owner" Тогда

			Возврат Истина;

		КонецЕсли;

	ИначеЕсли ИмяКласса = "Документы" Тогда

		Если ИмяСвойства = "Ref"
			ИЛИ ИмяСвойства = "DeletionMark"
			ИЛИ ИмяСвойства = "Date"
			ИЛИ ИмяСвойства = "Number"
			ИЛИ ИмяСвойства = "Posted" Тогда

			Возврат Истина;

		КонецЕсли;

	КонецЕсли;

	СтруктураРеквизитов = СтруктураСоставаОбъекта["Реквизиты"];

	Возврат СтруктураРеквизитов.Свойство(ИмяСвойства);

КонецФункции

// Получает и возвращает ссылку на объект по строковому уникальному идектификатору
//
// Параметры:
//  СтрокаИД - строка уникального идентификатора ссылки
//  ИмяКласса - имя класса, к которому принадлежит объект (Справочники, Документы  и т.д.)
//  ИмяОбъекта - имя объекта метаданных, ссылку для которого требуется получить
//
// Возвращаемое значение:
//  Ссылка на объект
//
Функция ПолучитьСсылку(СтрокаИдентификатора, ИмяКласса, ИмяОбъекта)

	Если СтрокаИдентификатора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;		
	
	Если ИмяКласса = "Справочники" Тогда
		
		СсылкаНаОбъект = XMLЗначение(Тип("СправочникСсылка." + ИмяОбъекта), СтрокаИдентификатора);
				
	ИначеЕсли ИмяКласса = "Документы" Тогда
		
		СсылкаНаОбъект = XMLЗначение(Тип("ДокументСсылка." + ИмяОбъекта), СтрокаИдентификатора);
			
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;

КонецФункции

// Получает и возвращает строковый идентификатор ссылки из дерева объекта
//
// Параметры:
//  ДеревоОбъекта - дерево значений, содержащее данные объекта
//
// Возвращаемое значение:
//  Строка-идентификатор ссылки
//
Функция ПолучитьИдентификаторСсылкиИзДереваОбъекта(ДеревоОбъекта)

	СтрокаРеквизитов = ДеревоОбъекта.Строки.Найти("Реквизиты", "Имя");
	СтрокаСсылки = СтрокаРеквизитов.Строки.Найти("Ref", "Имя");

	Возврат СтрокаСсылки.Значение;

КонецФункции

// Получает и возвращает значение, считанное из XML,
// в виде значение требуемого типа
//
// Параметры:
//  Тип - Тип для значения
//  СтрокаЗначения - значение строкой, полученное из XML
//
// Возвращаемое значение:
//  Значение, полученное из XML-строки
//
Функция ПолучитьЗначениеИзXMLСтроки(Тип, СтрокаЗначения)

	Если Тип = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат XMLЗначение(Тип, СтрокаЗначения);
	КонецЕсли;

КонецФункции

// Получает и возвращает тип для указанного реквизита объекта метаданных
//
// Параметры:
//  ИмяРеквизита - имя реквизита, тип которого требуется получить
//  ИмяТабличнойЧасти - имя табличной части, которой принадлежит реквизит
//  СтруктураСоставаОбъекта - структура, содержащая описание объекта
//
// Возвращаемое значение:
//  Тип - тип реквизита
//
Функция ПолучитьТипПоМетаданным(ИмяРеквизита, ИмяТабличнойЧасти, СтруктураСоставаОбъекта)

	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		// Это реквизит объекта
		СтруктураРеквизитов = СтруктураСоставаОбъекта["Реквизиты"];
		СтруктураОписанияРеквизита = СтруктураРеквизитов[ИмяРеквизита];
		Тип = СтруктураОписанияРеквизита["Тип"];
	Иначе
		 // Это реквизит табличной части
		СтруктураТабличныхЧастей = СтруктураСоставаОбъекта["ТабличныеЧасти"];
		СтруктураОписанияТабличнойЧасти = СтруктураТабличныхЧастей[ИмяТабличнойЧасти];
		СтруктураРеквизитовТабличнойЧасти = СтруктураОписанияТабличнойЧасти["СтруктураРеквизитов"];
		СтруктураОписанияРеквизита = СтруктураРеквизитовТабличнойЧасти[ИмяРеквизита];
		Тип = СтруктураОписанияРеквизита.Тип;
	КонецЕсли;

	Возврат Тип;

КонецФункции

// Получает и возвращает тип на основании строки типа, полученной из XML
//
// Параметры:
//  XMLСтрокаТипа - строковое описание типа
//
// Возвращаемое значение:
//  Тип
//
Функция ПолучитьТипПоСтроке(XMLСтрокаТипа)

	ИмяКласса = "";
	ИмяОбъекта = "";
	ОпределитьПоТипуДанныхКлассИИмяТипа(XMLСтрокаТипа, ИмяКласса, ИмяОбъекта);

	Если ПустаяСтрока(ИмяКласса) Тогда

		Возврат Неопределено;
	
	ИначеЕсли ИмяКласса = "CATALOGREF" Тогда

		Возврат Тип("СправочникСсылка." + ИмяОбъекта);

	ИначеЕсли ИмяКласса = "DOCUMENTREF" Тогда

		Возврат Тип("ДокументСсылка." + ИмяОбъекта);

	ИначеЕсли ИмяКласса = "ENUMREF" Тогда

		Возврат Тип("ПеречислениеСсылка." + ИмяОбъекта);

	ИначеЕсли ИмяКласса = "XSD:STRING" Тогда

		Возврат Тип("Строка");

	ИначеЕсли ИмяКласса = "XSD:DECIMAL" Тогда

		Возврат Тип("Число");
		
	ИначеЕсли ИмяКласса = "XSD:DATETIME" Тогда

		Возврат Тип("Дата");
		
	ИначеЕсли ИмяКласса = "XSD:BOOLEAN" Тогда

		Возврат Тип("Булево");
		
	ИначеЕсли ИмяКласса = "XSI:NIL" Тогда

		Возврат Неопределено;
		
	ИначеЕсли ИмяКласса = "XSD:BASE64BINARY" Тогда

		Возврат Тип("ДвоичныеДанные");
		
	ИначеЕсли ИмяКласса = "V8:VALUESTORAGE" Тогда	
		
		Возврат Тип("ХранилищеЗначения");
						
	Иначе
		#Если ВнешнееСоединение Тогда
			ТекстСообщения = НСтр("ru = 'Неизвестный тип данных в пакете обмена'");
			ВызватьИсключение(ТекстСообщения);
		#КонецЕсли
	КонецЕсли;

КонецФункции

// Определяет по типу данных, полученному из XML, имя соответствующего класса и объекта
//
// Параметры:
//  ТипДанных - строка типа данных
//  ИмяКласса - имя класса объекта (Справочники, Документы и т.д.)
//  ИмяОбъекта - имя конкретного объекта метаданных
//
Процедура ОпределитьПоТипуДанныхКлассИИмяТипа(Знач ТипДанных, ИмяКласса, ИмяОбъекта)

	ПозицияТочки = Найти(ТипДанных, ".");
	ИмяТипаДанных = "";
	Если ПозицияТочки > 0 Тогда
			
		ИмяКласса = Врег(Сред(ТипДанных, 1, ПозицияТочки - 1)); 
		ИмяОбъекта = Сред(ТипДанных, ПозицияТочки + 1);
			
	Иначе
		// тип не удалось определить
		ИмяКласса = Врег(ТипДанных);
			
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ РЕГИСТРАЦИЕЙ ИЗМЕНЕНИЙ И ВЫБОРКИ ДАННЫХ


// Определяет необходимость регистрации изменений в указанном узле плана обмена, исходя из
// схемы обмена, определенной для данного узла обмена
//
// Параметры:
//  СтруктураРеквизитовОбъекта - структура, содержащая реквизиты проверяемого объекта
//  СтруктураОписанияОбъекта - структура, содержащая описание объекта метаданных
//  МассивПолей - массив, содержащий имена полей объекта
//  ТаблицаДанныхОбъекта - таблица значений, содержащая данные полей объекта
//  УзелОбмена - узел плана обмена, в котором регистрируются изменения
//
// Возвращаемое значение:
//  Признак необходимости регистрации изменений по объекту
//   Истина - регистрация требуется
//	 Ложь   - регистрация не требуется	
//
Функция ТребуетсяРегистрацияИзмененийОбъекта(СтруктураРеквизитовОбъекта, СтруктураОписанияОбъекта, МассивПолей, ТаблицаДанныхОбъекта, УзелОбмена) Экспорт

	ИмяКласса = СтруктураОписанияОбъекта.ИмяКласса;
	ИмяОбъекта = СтруктураОписанияОбъекта.ИмяОбъекта;
	
	СтруктураПараметровНастройкиОбмена = ПолучитьСтруктуруПараметровНастройкиОбмена(УзелОбмена);
	
	СтруктураНастроекОтбора = ПолучитьСтруктуруНастроекОтбора(УзелОбмена);
	
	Если ИспользованиеОбъектаОтключено(ИмяКласса, ИмяОбъекта) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СхемаКомпоновки = ПолучитьСхемуКомпоновкиДанныхДляОбъекта(МассивПолей);
	НастройкиКомпоновки = СкомпоноватьНастройки(СхемаКомпоновки);
	
	ДобавитьОтборыИзСхемыОбмена(НастройкиКомпоновки, СтруктураНастроекОтбора, ИмяКласса, ИмяОбъекта, Ложь, СтруктураПараметровНастройкиОбмена, Ложь);
	
	МакетКомпоновки = ПолучитьМакетКомпоновки(СхемаКомпоновки, НастройкиКомпоновки);
	
	ВнешниеНаборыДанных = Новый Структура("ОбъектДанных", ТаблицаДанныхОбъекта);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ТаблицаРезультата = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаРезультата.Количество()>0;

КонецФункции

// Выбирает и возвращает данные, подлежащие регистрации изменения, исходя из схемы обмена,
// определенной для узла
//
// Параметры:
//  УзелОбмена - узел плана обмена, по которому регистрируются изменения
//  СтруктураОписанияОбъекта - структура, в которой хранится описание объекта метаданных
//  СтруктураНастроекОтбора - структура, содержащая настройки обмена
//  СтруктураПараметровНастройкиОбмена - структура, содержащая параметры настройки обмена
//
// Возвращаемое значение:
//  Выборка данных, подлежащих регистрации изменений
//
Функция ВыбратьСсылкиДляРегистрацииИзменений(УзелОбмена, СтруктураОписанияОбъекта, СтруктураНастроекОтбора, СтруктураПараметровНастройкиОбмена)
	
	ТекстЗапроса = ПолучитьТекстЗапросаДляВыборкиСсылочныхДанных(СтруктураОписанияОбъекта, СтруктураПараметровНастройкиОбмена);
	Запрос = ПолучитьЗапросДляОбъекта(ТекстЗапроса, СтруктураОписанияОбъекта, СтруктураНастроекОтбора, СтруктураПараметровНастройкиОбмена);

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();

КонецФункции

// Регистрирует изменения для указанного узла обмена в соответствии
// со схемой обмена, определенной для этого узла
//
// Параметры:
// УзелОбмена - узел плана обмена, для которого нужно зарегистрировать изменения
//
Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт

	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	
	СтруктураПараметровНастройкиОбмена = ПолучитьСтруктуруПараметровНастройкиОбмена(УзелОбмена);
	
	СтруктураНастроекОтбора = ПолучитьСтруктуруНастроекОтбора(УзелОбмена);
	
	// В цикле обходятся все объекты метаданных, входящие в состав плана обмена и по каждому из них
	// регистрируются изменения с учетом настроек схемы обмена

	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		СтруктураОписанияОбъекта = ОбменДаннымиСМобильнымиПриложениямиСобытия.ПолучитьСтруктуруОписанияОбъекта(ЭлементСоставаПланаОбмена.Метаданные, Ложь);

		ИмяКласса = СтруктураОписанияОбъекта.ИмяКласса;
		ИмяОбъекта = СтруктураОписанияОбъекта.ИмяОбъекта;
	
		Если ИмяКласса = "Константы" Тогда
			
			// Для констант никаких условий отбора не задается, поэтому сразу зарегистрируем изменения
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,ЭлементСоставаПланаОбмена.Метаданные);

		ИначеЕсли ИмяКласса = "Справочники" ИЛИ ИмяКласса = "Документы" Тогда
			
			Если ИспользованиеОбъектаОтключено(ИмяКласса, ИмяОбъекта) Тогда
				Продолжить;
			КонецЕсли;	
			
			// Для справочников и документов выберем ссылки, по которым зарегистрируем изменения
			ВыборкаДанных = ВыбратьСсылкиДляРегистрацииИзменений(УзелОбмена, СтруктураОписанияОбъекта, СтруктураНастроекОтбора, СтруктураПараметровНастройкиОбмена);
			
			Пока ВыборкаДанных.Следующий() Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,ВыборкаДанных.Ссылка);
				
			КонецЦикла;
			
		ИначеЕсли ИмяКласса = "РегистрыСведений" Тогда
			
			МассивПолей = ПолучитьМассивКлючевыхПолейРегистраСведений(ЭлементСоставаПланаОбмена.Метаданные);
			ТаблицаКлючей = ПолучитьТаблицуКлючейНабораЗаписей(СтруктураОписанияОбъекта, СтруктураНастроекОтбора, МассивПолей, СтруктураПараметровНастройкиОбмена);
			
			МассивВыбранныхПолей = Новый Массив();
			Для Каждого Колонка из ТаблицаКлючей.Колонки Цикл
				МассивВыбранныхПолей.Добавить(Колонка.Имя);
			КонецЦикла;			

			// Для каждой уникальной комбинации полей сформируем наборы записей с такими отборами и зарегистрируем по ним изменения
			Для Каждого КомбинацияКлючей из ТаблицаКлючей Цикл

				НаборЗаписей = ПолучитьНаборЗаписейРегистраСведенийПоКомбинацииКлючей(СтруктураОписанияОбъекта, КомбинацияКлючей, МассивПолей, МассивВыбранныхПолей);
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,НаборЗаписей);

			КонецЦикла;
		Иначе
			// Если в плане обмена участвуют объекты, не поддерживаемые Расширением для КПК - это ошибка
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Формирует и возращает таблицу значений, содержащую записи регистра сведений, отобранные по условиям схемы обмена
//
// Параметры:
//  СтруктураОписанияОбъекта - структура, содержашая описание объекта
//  СтруктураНастроекОтбора -  Структура, включающая настройки отбора по схеме обмена
//  МассивПолей - массив, содержащий имена полей регистра
//  СтруктураПараметровНастройкиОбмена - структура, содержащая параметры настройки обмена
//  УзелОбмена - узел обмена, для которого выбираются данные
//
// Возвращаемое значение:
//  Таблица значений, содержащая записи регистра сведений, отобранные по условиям схемы обмена
//
Функция ПолучитьТаблицуЗаписейРегистраСведений(СтруктураОписанияОбъекта, СтруктураНастроекОтбора, МассивПолей, СтруктураПараметровНастройкиОбмена, УзелОбмена)

    // Выбираем данные с учетом отборов, определеных в настройках обмена
    ТекстЗапроса = ПолучитьТекстЗапросаДляВыборкиПолейРегистраСведений(СтруктураОписанияОбъекта.ИмяОбъекта, СтруктураОписанияОбъекта.ИмяТаблицы, МассивПолей, Ложь);
    Запрос = ПолучитьЗапросДляОбъекта(ТекстЗапроса, СтруктураОписанияОбъекта, СтруктураНастроекОтбора, СтруктураПараметровНастройкиОбмена,,, УзелОбмена, Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Формирует и возращает набор записей регистра сведений, сформированный из переданных данных
//
// Параметры:
//  ИмяОбъекта - имя регистра сведений
//  Комбинация ключей - строка таблицы значений, в свойствах которой - значения полей набора записей
//  МассивСтрокТаблицыЗаписей - массив, содержащий строки таблицы значений с записями регистра
//  МассивКлючевыхПолей - массив, содержащий имена ключевых полей регистра сведений
//  МассивПолей - массив, содержащий имена полей регистра сведений
//
// Возвращаемое значение:
//  Таблица значений, содержащая записи регистра сведений, отобранные по условиям схемы обмена
//
Функция СформироватьНаборЗаписейДляВыгрузки(ИмяОбъекта, КомбинацияКлючей, МассивСтрокТаблицыЗаписей, МассивКлючевыхПолей, МассивПолей, МассивВыбранныхПолей)

	НаборЗаписей = РегистрыСведений[ИмяОбъекта].СоздатьНаборЗаписей();

	Для Каждого КлючевоеПоле из МассивКлючевыхПолей Цикл
		Если МассивВыбранныхПолей.Найти(КлючевоеПоле) = Неопределено Тогда
			ТипИзмерения = Метаданные.РегистрыСведений[ИмяОбъекта].Измерения[КлючевоеПоле].Тип;
			ЗначениеОтбора = ТипИзмерения.ПривестиЗначение();
			НаборЗаписей.Отбор[КлючевоеПоле].Установить(ЗначениеОтбора, Истина);
		Иначе
        	НаборЗаписей.Отбор[КлючевоеПоле].Установить(КомбинацияКлючей[КлючевоеПоле], Истина);
		КонецЕсли;
    КонецЦикла;

    Для Каждого СтрокаТаблицыЗаписей из МассивСтрокТаблицыЗаписей Цикл
        Запись = НаборЗаписей.Добавить();
		Для Каждого Поле из МассивПолей Цикл
			Попытка
            	Запись[Поле] = СтрокаТаблицыЗаписей[Поле];
			Исключение
			КонецПопытки;	
        КонецЦикла;
    КонецЦикла;

    Возврат НаборЗаписей;
    
КонецФункции

// Формирует и возвращает таблицу значений, в строках которой содержатся уникальные комбинации
// значений полей регистра сведений, на основании которых можно задавать отборя для наборов записей
//
// Параметры:
//  СтруктураОписанияОбъекта - структура, содержащая описание объекта метаданных (Имя, имя таблицы и т.д.)
//  СтруктураНастроекОтбора - структура, содержащая настройки отбора
//  СтруктураПараметровНастройкиОбмена - структура, содержащая параметры настройки обмена
//  Изменения - признак того, что выбираются только изменения по таблице изменений
//  НомерСообщения - номер сообщения обмена, в рамках которого ведется выборка данных
//
// Возвращаемое значение:
//  Таблица значений, содержащая уникальные наборы значений полей регистра сведений
//
Функция ПолучитьТаблицуКлючейНабораЗаписей(СтруктураОписанияОбъекта, СтруктураНастроекОтбора, МассивПолей, СтруктураПараметровНастройкиОбмена, Изменения = Ложь, УзелОбмена = Неопределено, НомерСообщения = Неопределено)

	ТекстЗапроса = ПолучитьТекстЗапросаДляВыборкиПолейРегистраСведений(СтруктураОписанияОбъекта.ИмяОбъекта, СтруктураОписанияОбъекта.ИмяТаблицы, МассивПолей, Изменения, НомерСообщения);
	Запрос = ПолучитьЗапросДляОбъекта(ТекстЗапроса, СтруктураОписанияОбъекта, СтруктураНастроекОтбора, СтруктураПараметровНастройкиОбмена,,Изменения, УзелОбмена,,НомерСообщения);

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

// Формирует и возвращает набор записей для указанного регистра сведений.
// При этом отбор для набора записей устанавливается по указанным значениям комбинации полей отбора
//
// Параметры:
//  СтруктураОписанияОбъекта - структура, содержащая описание объекта метаданных
//  КомбинацияКлючей - коллекция (в частности, строка таблицы значений), содержащая значения полей отбора
//  МассивПолей - массив, содержащий имена полей регистра, по которым устанавливается отбор
//
// Возвращаемое значение:
//  Набор записей с установленным отборам
//
Функция ПолучитьНаборЗаписейРегистраСведенийПоКомбинацииКлючей(СтруктураОписанияОбъекта, КомбинацияКлючей, МассивПолей, МассивВыбранныхПолей)

	НаборЗаписей = РегистрыСведений[СтруктураОписанияОбъекта.ИмяОбъекта].СоздатьНаборЗаписей();
	
	Для Каждого Поле из МассивПолей Цикл

		ЭлементОтбора = НаборЗаписей.Отбор.Найти(Поле);
		Если ЭлементОтбора <> Неопределено Тогда
			Если МассивВыбранныхПолей.Найти(Поле) = Неопределено Тогда
				ТипИзмерения = Метаданные.РегистрыСведений[СтруктураОписанияОбъекта.ИмяОбъекта].Измерения[Поле].Тип;
				ЗначениеОтбора = ТипИзмерения.ПривестиЗначение();
				ЭлементОтбора.Установить(ЗначениеОтбора, Истина);
			Иначе
				ЭлементОтбора.Установить(КомбинацияКлючей[Поле], Истина);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат НаборЗаписей;

КонецФункции

// Формирует и возвращает текст запроса по данным объекта определенного вида с учетом
// полей, на которые будет налагаться отбор
//
// Параметры:
// СтруктураОписанияОбъекта - структура, содержащая описание объекта
//  СтруктураПараметровНастройкиОбмена - структура, содержащая параметры настройки обмена
//
// Возвращаемое значение:
//  Сформированный текст запроса
//
Функция ПолучитьТекстЗапросаДляВыборкиСсылочныхДанных(СтруктураОписанияОбъекта, СтруктураПараметровНастройкиОбмена)

	// Для справочников и документов
    ИмяКласса = СтруктураОписанияОбъекта.ИмяКласса;
    ИмяОбъекта = СтруктураОписанияОбъекта.ИмяОбъекта;
    ИмяТаблицы = СтруктураОписанияОбъекта.ИмяТаблицы;
    
	МассивПолейОтбора = ОбменДаннымиСМобильнымиПриложениямиСобытия.ПолучитьМассивПолейОтбораДляОбъекта(ИмяКласса, ИмяОбъекта);

    ТекстЗапроса = ПолучитьТекстЗапросаДляОбъекта(ИмяОбъекта, ИмяТаблицы, МассивПолейОтбора, СтруктураПараметровНастройкиОбмена);

	Если ТекстЗапроса <> "" Тогда
        Возврат ТекстЗапроса;
    КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ИмяОбъекта + ".Ссылка ИЗ " + ИмяТаблицы + " КАК " + ИмяОбъекта;	

   	КоличествоПолейОтбора = МассивПолейОтбора.Количество();

	Если КоличествоПолейОтбора > 0 Тогда

		ТекстДополнения = " {ГДЕ ";

		Индекс = 0;

		Для Каждого Поле из МассивПолейОтбора Цикл

			ТекстДополнения = ТекстДополнения + Поле;

			Если Индекс < КоличествоПолейОтбора-1 Тогда
				ТекстДополнения = ТекстДополнения + ",";
			КонецЕсли;	
			
			Индекс = Индекс + 1;

		КонецЦикла;

		ТекстДополнения = ТекстДополнения + "}";

		ТекстЗапроса = ТекстЗапроса + ТекстДополнения;

	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

// Формирует и возвращает текст запроса для выборки полей регистра сведений
// При этом выбираются различные комбинации указанных полей
//
// Параметры:
//  ИмяОбъекта - имя регистра сведений
//  ИмяТаблицы - Имя таблицы, из которой производится выборка
//  МассивПолей - массив, содержащий имена полей регистра, подлежащих выборке
//  Изменения - признак того, что выбираются только изменения по таблице изменений
//  НомерСообщения - номер сообщения обмена. Используется призапросе по таблицам изменений
//
// Возвращаемое значение:
//  Сформированный текст запроса
//
Функция ПолучитьТекстЗапросаДляВыборкиПолейРегистраСведений(ИмяОбъекта, ИмяТаблицы, МассивПолей, Изменения = Ложь, НомерСообщения = Неопределено)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ";
	
	КоличествоПолей = МассивПолей.Количество();

	Если КоличествоПолей > 0 Тогда	

		Индекс = 0;

		Для Каждого Поле из МассивПолей Цикл
			
			ТекстЗапроса = ТекстЗапроса + "Таблица." + Поле;

			Если Индекс < КоличествоПолей-1 Тогда
				ТекстЗапроса = ТекстЗапроса + ",";
			КонецЕсли;	
			
			Индекс = Индекс + 1;
			
		КонецЦикла;

		ТекстЗапроса = ТекстЗапроса + " ИЗ " + ИмяТаблицы + " КАК Таблица";

	КонецЕсли;

	Если Изменения Тогда
        МассивПолейОтбора = Новый Массив();
    	МассивПолейОтбора.Добавить("Узел");
		
		Если НомерСообщения <> Неопределено Тогда
			МассивПолейОтбора.Добавить("НомерСообщения");
		КонецЕсли;	
    Иначе
        МассивПолейОтбора = ОбменДаннымиСМобильнымиПриложениямиСобытия.ПолучитьМассивПолейОтбораДляОбъекта("РегистрыСведений", ИмяОбъекта);
    КонецЕсли;

    КоличествоПолейОтбора = МассивПолейОтбора.Количество();

	Если КоличествоПолейОтбора > 0 Тогда

		ТекстДополнения = " {ГДЕ ";

		Индекс = 0;

		Для Каждого Поле из МассивПолейОтбора Цикл

			ТекстДополнения = ТекстДополнения + Поле;

			Если Индекс < КоличествоПолейОтбора-1 Тогда
				ТекстДополнения = ТекстДополнения + ",";
			КонецЕсли;	
			
			Индекс = Индекс + 1;

		КонецЦикла;

		ТекстДополнения = ТекстДополнения + "}";

		ТекстЗапроса = ТекстЗапроса + ТекстДополнения;

	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

// Формирует и возвращает текст запроса для выборки данных конкретного объекта
//
// Параметры:
//  ИмяОбъекта - имя объекта, по которому необходимо сформировать текст запроса
//  ИмяТаблицы - имя таблицы данных, по которой необходимо сформировать текст запроса
//  МассивПолейОтбора - массив, содержащий имена полей, которые могут участвовать в отборе
//  СтруктураПараметровНастройкиОбмена - структура, содержащая параметры настройки обмена
//
// Возвращаемое значение:
//  Текст запроса, если он определен для объекта. В противном случае возвращается пустая строка - при этом будет
//  использован "стандартный" текст запроса по таблице, без дополнительных условий
//
Функция ПолучитьТекстЗапросаДляОбъекта(ИмяОбъекта, ИмяТаблицы, МассивПолейОтбора, СтруктураПараметровНастройкиОбмена)

	ТекстЗапроса = "";
	
	Если ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		
		ТекстЗапроса = 	 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказКлиента.Ссылка
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|   {ГДЕ Партнер}"
		;

	КонецЕсли;

    // Добавим поля, по которым возможен отбор

	Если ТекстЗапроса <> "" Тогда

		КоличествоПолей = МассивПолейОтбора.Количество();
		
		Если КоличествоПолей > 0 Тогда
			
			ТекстДополнения = " {ГДЕ ";
			
			Индекс = 0;
			
			Для Каждого Поле из МассивПолейОтбора Цикл
				
				ТекстДополнения = ТекстДополнения + Поле;
				
				Если Индекс < КоличествоПолей-1 Тогда
					ТекстДополнения = ТекстДополнения + ",";
				КонецЕсли;	
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
			ТекстДополнения = ТекстДополнения + "}";
			
			ТекстЗапроса = ТекстЗапроса + ТекстДополнения;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

// Формирует и возвращает запрос на основании переданного текста запроса
// и структуры настроек, содержащей отборы для объекта
//
// Параметры:
//  ТекстЗапроса - текст запроса
//  СтруктураОписанияОбъекта - структура, содержащая описание объекта
//  СтруктураНастроекОтбора - структура, содержащая настройки отбора для обмена
//  СтруктураПараметровНастройкиОбмена - структура, содержащая парметры настройки обмена
//  Ссылка - Ссылка на объект, запрос для которого ребуется получить
//  Изменения - признак того, что отбираются только изменения по таблице изменений
//  УзелОбмена - узел обмена, для которого выбираются данные
//  ИспользоватьДополнительныеОтборы - признак использования дополнительных отборов
//
// Возвращаемое значение:
//  Сформированный запрос
//
Функция ПолучитьЗапросДляОбъекта(ТекстЗапроса, СтруктураОписанияОбъекта, СтруктураНастроекОтбора, 
								СтруктураПараметровНастройкиОбмена, Ссылка = Неопределено, Изменения = Ложь, 
								УзелОбмена = Неопределено, ИспользоватьДополнительныеОтборы = Ложь, НомерСообщения = Неопределено)

 	ИмяКласса = СтруктураОписанияОбъекта.ИмяКласса;
	ИмяОбъекта = СтруктураОписанияОбъекта.ИмяОбъекта;

	СхемаКомпоновки = ПолучитьСхемуКомпоновкиДанныхДляВыборки(ТекстЗапроса);
	НастройкиКомпоновки = СкомпоноватьНастройки(СхемаКомпоновки);

	ДобавитьОтборыИзСхемыОбмена(НастройкиКомпоновки, СтруктураНастроекОтбора, ИмяКласса, ИмяОбъекта, ИспользоватьДополнительныеОтборы, СтруктураПараметровНастройкиОбмена, Истина);

	Если Ссылка <> Неопределено Тогда
		ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Ссылка", ВидСравненияКомпоновкиДанных.Равно, Истина, Ссылка);
    КонецЕсли;

    Если Изменения Тогда
        ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Узел", ВидСравненияКомпоновкиДанных.Равно, Истина, УзелОбмена);
		Если НомерСообщения <> Неопределено Тогда
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "НомерСообщения", ВидСравненияКомпоновкиДанных.Равно, Истина, НомерСообщения);
		КонецЕсли;	
    КонецЕсли;
	
	Макет = ПолучитьМакетКомпоновки(СхемаКомпоновки, НастройкиКомпоновки);
	
	Запрос = ПолучитьЗапросИзМакетаКомпоновки(Макет, "Запрос");

	Возврат Запрос;

КонецФункции

// Определяет, отключено ли использование конкретного объекта функциональной опцией
//
// Параметры:
//  ИмяКласса - имя класса, которому принадлежит объект (Справочники, Документы и т.д.)
//  ИмяОбъекта - имя объекта, для которого проверяется факт исключения
//
// Возвращаемое значение:
//  Признак отключения использования. Истина - использование отключено, Ложь - объект используется
//
Функция ИспользованиеОбъектаОтключено(ИмяКласса, ИмяОбъекта)
		
	Возврат Ложь;
	
КонецФункции

// Анализирует, требуется ли включать данные объекта в пакет обмена
//
// Параметры:
//  СтруктураОписанияОбъекта - структура, содержащая описание объекта
//  СтруктураПараметровОбменаДанными - структура, содержащая параметры обмена данными
//
// Возвращаемое значение:
//  Истина - данные нужно включать в пакет обмена, Ложь - не нужно.
//
Функция ВключатьДанныеВПакетОбмена(СтруктураОписанияОбъекта, СтруктураПараметровОбменаДанными)
	
	Если СтруктураОписанияОбъекта.ИмяКласса = "Справочники" Тогда
		
		Если СтруктураОписанияОбъекта.ИмяОбъекта = "НоменклатураПрисоединенныеФайлы" Тогда
			
			ПолучатьИзображенияНоменклатуры = Ложь;
			Если СтруктураПараметровОбменаДанными.Свойство("ПолучатьИзображенияНоменклатуры") Тогда
				ПолучатьИзображенияНоменклатуры = СтруктураПараметровОбменаДанными.ПолучатьИзображенияНоменклатуры;
			КонецЕсли;
			
			Возврат ПолучатьИзображенияНоменклатуры;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураОписанияОбъекта.ИмяКласса = "РегистрыСведений" Тогда
		
		Если СтруктураОписанияОбъекта.ИмяОбъекта = "ОстаткиНоменклатурыДляМобильныхПользователей" Тогда
			
			ПолучатьОстаткиРегистром = Ложь;
			Если СтруктураПараметровОбменаДанными.Свойство("ПолучатьОстаткиВВидеРегистраСведений") Тогда
				ПолучатьОстаткиРегистром = СтруктураПараметровОбменаДанными.ПолучатьОстаткиВВидеРегистраСведений;
			КонецЕсли;
			
			Возврат ПолучатьОстаткиРегистром;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С КОМПОНОВКОЙ ДАННЫХ


// Формирует и возвращает схему компоновки данных на основании текста запроса
// для выборки данных по конкретному объекту
//
// Параметры:
//  ТекстЗапроса - текст запроса для источника данных схемы компоновки
//
// Возвращаемое значение:
//  Схема компоновки данных
//
Функция ПолучитьСхемуКомпоновкиДанныхДляВыборки(ТекстЗапроса)

	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();
	
	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "Источник1";
	Источник.СтрокаСоединения="";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "Запрос";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИсточникДанных = "Источник1";
	
	Возврат СхемаКомпоновки;

КонецФункции

// Формирует и возвращает схему компоновки данных для объекта
//
// Параметры:
//  Объект - объект, для которого требуется получить схему
//
// Возвращаемое значение:
//  Схема компоновки данных
//
Функция ПолучитьСхемуКомпоновкиДанныхДляОбъекта(МассивПолей)

	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();
	
	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "Источник1";
	Источник.СтрокаСоединения="";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "Объект";
	НаборДанных.ИмяОбъекта = "ОбъектДанных";
	НаборДанных.ИсточникДанных = "Источник1";
	
	Для Каждого Поле из МассивПолей Цикл
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле = Поле;
		ПолеНабораДанных.ПутьКДанным = Поле;
	КонецЦикла;
	
	Возврат СхемаКомпоновки;

КонецФункции

// Получает и возвращает запрос из переданного макета компоновки данных
//
// Параметры:
//  Макет - макет компоновки данных, из которого требуется получить запрос.
//  ИмяНабораДанных - имя набора данных из макета, для которого получается запрос.
//
// Возвращаемое значение:
//  Запрос, сформированный на основании макета компоновки
//
Функция ПолучитьЗапросИзМакетаКомпоновки(Макет, ИмяНабораДанных) Экспорт

	Запрос = Новый Запрос(Макет.НаборыДанных[ИмяНабораДанных].Запрос);

	Для Каждого Параметр Из Макет.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, Параметр.Значение);
	КонецЦикла;

	Возврат Запрос;

КонецФункции

// Получает и возвращает макет компоновки данных для схемы компоновки
//
// Параметры:
//  СхемаКомпоновки - схема компоновки данных, для которой получается макет компоновки
//  Настройки - настройки компоновки, применяемые к схеме
//
// Возвращаемое значение:
//  Макет компоновки данных
//
Функция ПолучитьМакетКомпоновки(СхемаКомпоновки, Настройки) Экспорт

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	Возврат КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

КонецФункции

// Формирует и возвращает настройки компоновщика для переданной схемы компоновки
//
// Параметры:
//  СхемаКомпоновки - схема компоновки данных, для которой компонуются настройки
//
// Возвращаемое значение:
//  Настройки компоновщика
//
Функция СкомпоноватьНастройки(СхемаКомпоновки) Экспорт

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	// Добавим выбранные поля
	Для Каждого Элемент из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		
		Если НЕ Элемент.Папка Тогда
			ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Поле = Элемент.Поле;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим группировку
	ГруппировкаНастроек = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Возврат КомпоновщикНастроек.Настройки;

КонецФункции

// Добавляет элемент отбора в настройки компоновки
//
// Параметры:
//  Настройки - настройки компоновки
//  ИмяПоля - имя поля, по которому задается отбор
//  Вид сравнения - вид сравнения компоновки данных
//  Использование - использование элемента отбора
//  ПравоеЗначение - правоз значение сравнения
//
Процедура ДобавитьЭлементОтбораВНастройкиСхемы(Настройки, ИмяПоля, ВидСравнения = Неопределено, Использование = Истина, ПравоеЗначение = Неопределено) Экспорт

	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;

	Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент = Настройки.ДоступныеПоляОтбора.НайтиПоле(Поле);

    Если Элемент = Неопределено Тогда
        Возврат;
    КонецЕсли;

	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Элемент.Поле;
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.Использование = Использование;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;

КонецПроцедуры

// Формирует и возвращает структуру на основе переданного отбора компоновки данных
//
// Параметры:
//  Отбор - отбор компоновки данных
//
// Возвращаемое значение:
//  Структура, содержащая данные отбора
// 
Функция ПолучитьСтруктуруОтбораКомпоновкиДанных(Отбор) Экспорт

	СтруктураОтбора = Новый Структура();
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		// Заполним структуру элемента отбора
		СтруктураЭлементаОтбора = Новый Структура();
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			СтруктураЭлементаОтбора.Вставить("ВидСравнения",ЭлементОтбора.ВидСравнения);
			СтруктураЭлементаОтбора.Вставить("ИдентификаторПользовательскойНастройки",ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			СтруктураЭлементаОтбора.Вставить("Использование",ЭлементОтбора.Использование);
			СтруктураЭлементаОтбора.Вставить("ЛевоеЗначение",ЭлементОтбора.ЛевоеЗначение);
			СтруктураЭлементаОтбора.Вставить("ПравоеЗначение",ЭлементОтбора.ПравоеЗначение);
			СтруктураЭлементаОтбора.Вставить("Представление",ЭлементОтбора.Представление);
			СтруктураЭлементаОтбора.Вставить("ПредставлениеПользовательскойНастройки",ЭлементОтбора.ПредставлениеПользовательскойНастройки);
			СтруктураЭлементаОтбора.Вставить("Применение",ЭлементОтбора.Применение);
			СтруктураЭлементаОтбора.Вставить("РежимОтображения",ЭлементОтбора.РежимОтображения);
			
			// Структуру элемента отбора поместим в структуру отбора
			СтруктураОтбора.Вставить(ЭлементОтбора.ЛевоеЗначение, СтруктураЭлементаОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураОтбора;
	
КонецФункции

// Заполняет указанный отбор на основании структуры, содержащей данные отбора
//
// Параметры:
//  Отбор - отбор компоновки данных, который надо заполнить
//  Структура отбора - структура, содержащая данные для заполнения отбора
//
Процедура ЗаполнитьОтборКомпоновкиИзСтруктуры(Отбор, СтруктураОтбора) Экспорт

	Отбор.Элементы.Очистить();
	
	Для Каждого ЭлементСтруктурыОтбора из СтруктураОтбора Цикл
		
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		СтруктураЭлементаОтбора = ЭлементСтруктурыОтбора.Значение;
		
		Для Каждого Элемент из СтруктураЭлементаОтбора Цикл
			Если Элемент.Ключ = "ЛевоеЗначение" Тогда
				ЭлементОтбора[Элемент.Ключ] =  Новый ПолеКомпоновкиДанных(Элемент.Значение);
			Иначе
				ЭлементОтбора[Элемент.Ключ] = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры

// Заполняет в переданном отборе элемент на основании структуры, содержащей данные отбора
//
// Параметры:
//  Отбор - отбор компоновки данных, который надо заполнить
//  СтруктураЭлементаОтбора - структура, содержащая данные для заполнения элемента отбора
//  ИмяЭлементаОтбора - имя поля - элемента отбора
//
Процедура ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(Отбор, СтруктураНастроекОтбора, ИмяНастройки, ИмяЭлементаОтбора)

    СтруктураЭлементаОтбора = ПолучитьСтруктуруОтбораДляНастройки(СтруктураНастроекОтбора, ИмяНастройки);

	Если СтруктураЭлементаОтбора = Неопределено Тогда
        Возврат;
	КонецЕсли;
		
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	Для Каждого Элемент из СтруктураЭлементаОтбора Цикл
		Если Элемент.Ключ = "ЛевоеЗначение" Тогда
			ЭлементОтбора[Элемент.Ключ] =  Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора);
		Иначе
			ЭлементОтбора[Элемент.Ключ] = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Задает отборы для выборки объектов с использованием компоновки
//
// Параметры:
//  НастройкиКомпоновки - настройки компоновки данных, для которых задаются отборы
//  СтруктураНастроекОтбора - структура, содержащая описание устанавливаемого отбора
//  ИмяКласса - имя класса, к которому принадлежит объект (Справочники, Документы и т.д)
//  ИмяОбъекта - имя объекта метаданных, для которого добавляются отборы
//  ИспользоватьДополнительныеОтборы - признак необходимости установки доп. отборов для регистров (помимо ключевых полей)
//  СтруктураПараметровНастройкиОбмена - структура, содержащая парметры настройки обмена
//  ИспользуетсяВыборка - признак того, что используется выборка данных и отборы указываются для выборки
//
Процедура ДобавитьОтборыИзСхемыОбмена(НастройкиКомпоновки, СтруктураНастроекОтбора, ИмяКласса, ИмяОбъекта, 
									  ИспользоватьДополнительныеОтборы, СтруктураПараметровНастройкиОбмена, ИспользуетсяВыборка) Экспорт

	Если ИмяКласса = "Справочники" Тогда

        Если ИмяОбъекта = "Партнеры" Тогда
            ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Партнеры","Ссылка");
        ИначеЕсли ИмяОбъекта = "Номенклатура" Тогда
            ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Номенклатура","Ссылка");
		КонецЕсли;

	ИначеЕсли ИмяКласса = "Документы" Тогда
        
		Если ИмяОбъекта = "ЗаказКлиента" Тогда
            ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Партнеры","Партнер");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С НАСТРОЙКАМИ И ПАРАМЕТРАМИ ОБМЕНА


// Формирует и возвращает структуру, содержащую структуры настроек отбора
//
// Параметры:
//  УзелОбмена - узел плана обмена, для которого определяются настройки отборов
//
// Возвращаемое значение:
//  Структура, описывающее отборы
//
Функция ПолучитьСтруктуруНастроекОтбора(УзелОбмена) Экспорт
	
	СтруктураНастроек = УзелОбмена.ХранилищеОтбораСхемыОбмена.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
        Возврат СтруктураНастроек;
	Иначе
		Возврат Новый Структура();
	КонецЕсли;
	
	Возврат СтруктураНастроек;

КонецФункции

// Получает и возвращает структуру, содержащую описание отбора для указанной настройки обмена
//
// Параметры:
//  СтруктураНастроекОтбора - структура, содержащая настройки отбора для схемы обмена
//  ИмяНастройки - имя настройки в структуре настроек отбора
//
// Возвращаемое значение:
//  Структура, содержащая описание отбора для указанной настройки обмена
//
Функция ПолучитьСтруктуруОтбораДляНастройки(СтруктураНастроекОтбора, ИмяНастройки)

	Настройка = Неопределено;
	Если СтруктураНастроекОтбора.Свойство(ИмяНастройки, Настройка) Тогда
        Если ТипЗнч(Настройка) = Тип("Структура") Тогда
            Возврат Настройка;
        КонецЕсли;
	КонецЕсли;

	Возврат Настройка;

КонецФункции

// Формирует и возвращает структуру, описывающие параметры настройки обмена для указаного узла обмена
//
// Параметры:
//  УзелОбмена - узел плана обмена, для которого требуется получить параметры
//
// Возвращаемое значение:
//  Структура, описывающая параметры настройки обмена для указаного узла обмена
//
Функция ПолучитьСтруктуруПараметровНастройкиОбмена(УзелОбмена) Экспорт

	СтруктураПараметров = Новый Структура();

	Возврат СтруктураПараметров;

КонецФункции

// Разбирает xml-строку параметров обмена данными и формирует структуру параметров на ее основе
//
// Параметры:
//  ПараметрыОбменаДанными - xml-строка, содержащая параметры обмена
//
// Возвращаемое значение:
//  Структура, содержащая параметры обмена
//
Функция ПолучитьСтруктуруПараметровОбменаДанными(ПараметрыОбменаДанными)
	
	СтруктураПараметров = Новый Структура();
	
	ЧтениеXML = Новый ЧтениеXML();
		
	Попытка
		ЧтениеXML.УстановитьСтроку(ПараметрыОбменаДанными);
	Исключение
		#Если ВнешнееСоединение Тогда
			ТекстСообщения = НСтр("ru='Ошибка при чтении параметров обмена данными:'");
			ВызватьИсключение(ТекстСообщения + ОписаниеОшибки());
		#КонецЕсли
	КонецПопытки;
	
	Попытка
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
				
				ИмяПараметра = ЧтениеXML.Имя;
				ЗначениеПараметра = ПрочитатьXML(ЧтениеXML);
				
				СтруктураПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
				
			КонецЦикла;
			
		КонецЦикла;		
				
	Исключение
		#Если ВнешнееСоединение Тогда
			ТекстСообщения = НСтр("ru='Ошибка при чтении параметров обмена данными:'");
			ВызватьИсключение(ТекстСообщения + ОписаниеОшибки());
		#КонецЕсли
		
	КонецПопытки;

	Возврат СтруктураПараметров;
	
КонецФункции

Функция ТребуетсяПодключениеВнешнейКомпонентыОбменаДаннымиСМобильнымиПриложениями() Экспорт
	
	Возврат Константы.ПодключатьКомпонентуОбменаСМобильнымПриложениемПриСтарте.Получить();
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СОБЫТИЙ ОТ МОБИЛЬНОГО ПРИЛОЖЕНИЯ

Функция ПолучитьПриложение(ИмяПользователя, КодМобильногоКомпьютера, ПараметрыОбменаДанными = "") Экспорт
	
	МенеджерМобильныхПриложений = Обработки.МенеджерМобильныхПриложений.Создать();
	Возврат МенеджерМобильныхПриложений.ПолучитьМобильноеПриложение(ИмяПользователя, КодМобильногоКомпьютера, ПараметрыОбменаДанными);
	
КонецФункции

Функция ПолучитьДанные(ИмяПользователя, КодМобильногоКомпьютера, Знач НачальнаяИнициализацияИБ = Ложь, ПараметрыОбменаДанными = "") Экспорт
	
	МенеджерМобильныхПриложений = Обработки.МенеджерМобильныхПриложений.Создать();
	Возврат МенеджерМобильныхПриложений.ПолучитьДанные(ИмяПользователя, КодМобильногоКомпьютера, НачальнаяИнициализацияИБ, ПараметрыОбменаДанными);
	
КонецФункции

Процедура ЗаписатьДанные(ИмяПользователя, КодМобильногоКомпьютера, ДанныеМобильногоПриложения, ПараметрыОбменаДанными = "") Экспорт
	
	МенеджерМобильныхПриложений = Обработки.МенеджерМобильныхПриложений.Создать();
	МенеджерМобильныхПриложений.ЗаписатьДанные(ИмяПользователя, КодМобильногоКомпьютера, ДанныеМобильногоПриложения, ПараметрыОбменаДанными);
	
КонецПроцедуры

Процедура ЗарегистрироватьПолучениеДанных(ИмяПользователя, КодМобильногоКомпьютера, ПараметрыОбменаДанными = "") Экспорт
	
	МенеджерМобильныхПриложений = Обработки.МенеджерМобильныхПриложений.Создать();
	МенеджерМобильныхПриложений.ЗарегистрироватьПолучениеДанных(ИмяПользователя, КодМобильногоКомпьютера, ПараметрыОбменаДанными);
	
КонецПроцедуры

Функция АутентификацияВыполнена(ИмяПользователя, КодМобильногоКомпьютера, ПарольПользователя) Экспорт
	
	МенеджерМобильныхПриложений = Обработки.МенеджерМобильныхПриложений.Создать();
	Возврат МенеджерМобильныхПриложений.ВыполнитьАутентификацию(ИмяПользователя, КодМобильногоКомпьютера, ПарольПользователя);
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕТАДАННЫМИ


// Формирует дерево используемых метаданных на основании описания, полученного от редактора мобильных приложений
//
// Параметры:
//  ОписаниеМетаданных - XML-строка, содаржащая описание используемых метаданных
//
// Возвращаемое значение:
//  Сформированное дерево значений, содержащее данные по используемым метаданным
//
Функция ПолучитьДеревоИспользуемыхМетаданных(ОписаниеМетаданных) Экспорт

	ДеревоМетаданных = Новый ДеревоЗначений();
	ДеревоМетаданных.Колонки.Добавить("Имя");	
	ДеревоМетаданных.Колонки.Добавить("Использование");	
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(ОписаниеМетаданных);
	
	СтрокаДерева = Неопределено;
	
	Попытка
		
		Пока ЧтениеXML.Прочитать() Цикл	
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				Если СтрокаДерева = Неопределено Тогда
					КоллекцияСтрокДляДобавления = ДеревоМетаданных.Строки;
				Иначе
					КоллекцияСтрокДляДобавления = СтрокаДерева.Строки;
				КонецЕсли;	
					
				СтрокаДерева = КоллекцияСтрокДляДобавления.Добавить();
				Имя = ЧтениеXML.Имя;
				СтрокаДерева.Имя = Имя;
				
				Если СтрокаДерева.Уровень() = 1 Тогда
					
					Если Имя = "Constants" Тогда
						СтрокаДерева.Имя = "Константы";
					ИначеЕсли Имя = "Catalogs" Тогда
						СтрокаДерева.Имя = "Справочники";
					ИначеЕсли Имя = "Documents" Тогда
						СтрокаДерева.Имя = "Документы";
					ИначеЕсли Имя = "InformationRegisters" Тогда
						СтрокаДерева.Имя = "РегистрыСведений";
					КонецЕсли;
						
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				Если СтрокаДерева <> Неопределено Тогда
					СтрокаДерева = СтрокаДерева.Родитель;
				КонецЕсли;	
				
			КонецЕсли;
				
		КонецЦикла;
			
	Исключение
		#Если ВнешнееСоединение Тогда	              
			ВызватьИсключение(НСтр("ru='Ошибка чтения перечня метаданных, используемых мобильным приложением'"));
		#КонецЕсли
	КонецПопытки;
	
	Возврат ДеревоМетаданных;

КонецФункции

// Формирует и возвращает структуру использования свойства справочника (реквизита или табличной части
//
// Параметры:
//  Свойство - свойство объекта метаданных - реквизит или табличная часть справочника
//
// Возвращаемое значение:
//  Структура использования свойства, определяющая использование для элемента и группы справочника
// 
Функция ПолучитьСтруктуруИспользованияСвойстваСправочника(Свойство)

	// Определим вариант использования 
	ДляЭлемента = (Свойство.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы);
	ДляГруппы   = (Свойство.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента);

	СтруктураИспользования = Новый Структура();
	СтруктураИспользования.Вставить("ИспользуетсяДляЭлемента", ДляЭлемента);
	СтруктураИспользования.Вставить("ИспользуетсяДляГруппы", ДляГруппы);

	Возврат СтруктураИспользования;

КонецФункции

// Определяет и возвращает вид указания типа в XML для реквизита
//
// Параметры:
//  Реквизит - реквизит объекта метаданных, для которого требуется определить вид указания типа
//
// Возвращаемое значение:
//  Назначение типа XML - явное или неявное
//
Функция ПолучитьУказаниеТипаРеквизита(Реквизит)

	Если Реквизит.Тип.Типы().Количество()>1 Тогда
		Возврат НазначениеТипаXML.Явное;
	Иначе
		Возврат НазначениеТипаXML.Неявное;
	КонецЕсли;

КонецФункции

// Определяет и возвращает тип системного реквизита объекта (справочника или документа)
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, которому принаждлежит реквизит
//  ИмяКласса - имя класса, к которому принадлежит объект (Справочники, Документы)
//  ИмяРеквизита - имя реквизита, тип которого требуется определить
//
// Возвращаемое значение:
//  Тип - тип реквизита
//
Функция ПолучитьТипСистемногоРеквизита(ОбъектМетаданных, ИмяКласса, ИмяРеквизита)

	ТипРеквизита = Неопределено;
	
	Если ИмяРеквизита = "Ref" Тогда
		
		Если ИмяКласса = "Справочники" Тогда
			ТипРеквизита = Тип("СправочникСсылка." + ОбъектМетаданных.Имя);
		Иначе
			ТипРеквизита = Тип("ДокументСсылка." + ОбъектМетаданных.Имя);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "IsFolder"
		ИЛИ ИмяРеквизита = "DeletionMark"
		ИЛИ ИмяРеквизита = "Posted" Тогда
		
		ТипРеквизита = Тип("Булево");
		
	ИначеЕсли ИмяРеквизита = "Parent" Тогда
		
		ТипРеквизита = Тип("СправочникСсылка." + ОбъектМетаданных.Имя);
		
	ИначеЕсли ИмяРеквизита = "Description" Тогда
		
		ТипРеквизита = Тип("Строка");
		
	ИначеЕсли ИмяРеквизита = "Date" Тогда
		
		ТипРеквизита = Тип("Дата");
		
	ИначеЕсли ИмяРеквизита = "Code" Тогда
		
		Если ОбъектМетаданных.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ТипРеквизита = Тип("Строка");
		Иначе
			ТипРеквизита = Тип("Число");
		КонецЕсли;
			
	ИначеЕсли ИмяРеквизита = "Number" Тогда
		
		Если ОбъектМетаданных.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка Тогда
			ТипРеквизита = Тип("Строка");
		Иначе
			ТипРеквизита = Тип("Число");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТипРеквизита;

КонецФункции

// Получает и возвращает тип указанного реквизита объекта метаданных
//
// Параметры:
//  Реквизит - реквизит, тип которого требуется определить
//
// Возвращаемое значение:
//  Тип реквизита, если тип не составной, Неопределено, если тип составной
//
Функция ПолучитьТипРеквизита(Реквизит)

	ОписаниеТипов = Реквизит.Тип;
	МассивТипов = ОписаниеТипов.Типы();
	
	Если МассивТипов.Количество()=1 Тогда
		Возврат МассивТипов[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Формирует и возвращает структуру описания реквизита объекта метаданных
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, реквизит которого анализируется
//  ИмяРеквизита - имя реквизита, использование которого определяется
//
// Возвращаемое значение:
//  Структура, описывающая использование (для группы и элемента) и указание типа реквизита справочника
//
Функция ПолучитьСтруктуруОписанияРеквизитаСправочника(ОбъектМетаданных, ИмяРеквизита)

	ТипРеквизита = Неопределено;
	
	Если ИмяРеквизита = "Ref" 
		ИЛИ ИмяРеквизита = "IsFolder" 
		ИЛИ ИмяРеквизита = "DeletionMark" 
		ИЛИ ИмяРеквизита = "Parent" 
		ИЛИ ИмяРеквизита = "Code" 
		ИЛИ ИмяРеквизита = "Description" Тогда

		ДляЭлемента = Истина;
		ДляГруппы = Истина;
		УказаниеТипа = НазначениеТипаXML.Неявное;
		
		ТипРеквизита = ПолучитьТипСистемногоРеквизита(ОбъектМетаданных, "Справочники", ИмяРеквизита);

	ИначеЕсли ИмяРеквизита = "Owner" Тогда

		ДляЭлемента = Истина;
		ДляГруппы = Истина;
		УказаниеТипа = НазначениеТипаXML.Явное;
		
	Иначе
		
		Реквизит = ОбъектМетаданных.Реквизиты[ИмяРеквизита];
		ТипРеквизита = ПолучитьТипРеквизита(Реквизит);
		
		// Определим вариант использования реквизита
		СтруктураИспользования = ПолучитьСтруктуруИспользованияСвойстваСправочника(Реквизит);

		ДляЭлемента = СтруктураИспользования.ИспользуетсяДляЭлемента;
		ДляГруппы   = СтруктураИспользования.ИспользуетсяДляГруппы;
		
		// Определим вариант указания типа для реквизита
		// тип следует указывать только в том случае, если он не всегда может быть однозанчно определен
		
		УказаниеТипа = ПолучитьУказаниеТипаРеквизита(Реквизит);
		
	КонецЕсли;

	СтруктураОписания = Новый Структура();
	СтруктураОписания.Вставить("ИспользуетсяДляЭлемента", ДляЭлемента);
	СтруктураОписания.Вставить("ИспользуетсяДляГруппы", ДляГруппы);
	СтруктураОписания.Вставить("УказаниеТипа", УказаниеТипа);
	СтруктураОписания.Вставить("Тип", ТипРеквизита);

	Возврат СтруктураОписания;
                                                                                                                                      
КонецФункции

// Формирует и возвращает структуру описания реквизита объекта метаданных
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, реквизит которого анализируется
//  ИмяРеквизита - имя реквизита, использование которого определяется
//
// Возвращаемое значение:
//  Структура, описывающая указание типа реквизита документа
//
Функция ПолучитьСтруктуруОписанияРеквизитаДокумента(ОбъектМетаданных, ИмяРеквизита)

	ТипРеквизита = Неопределено;
	
	Если ИмяРеквизита = "Ref"
		ИЛИ ИмяРеквизита = "DeletionMark" 
		ИЛИ ИмяРеквизита = "Date" 
		ИЛИ ИмяРеквизита = "Number" 
		ИЛИ ИмяРеквизита = "Posted" Тогда

		УказаниеТипа = НазначениеТипаXML.Неявное;
		
		ТипРеквизита = ПолучитьТипСистемногоРеквизита(ОбъектМетаданных, "Документы", ИмяРеквизита);
		
	Иначе
		
		Реквизит = ОбъектМетаданных.Реквизиты[ИмяРеквизита];
		ТипРеквизита = ПолучитьТипРеквизита(Реквизит);
		
		// Определим вариант указания типа для реквизита
		// тип следует указывать только в том случае, если он не всегда может быть однозанчно определен
		УказаниеТипа = ПолучитьУказаниеТипаРеквизита(Реквизит);
		
	КонецЕсли;

	СтруктураОписания = Новый Структура();
	СтруктураОписания.Вставить("УказаниеТипа", УказаниеТипа);
	СтруктураОписания.Вставить("Тип", ТипРеквизита);

	Возврат СтруктураОписания;

КонецФункции

// Формирует и возвращает структуру, отражающую состав объекта метаданных (справочника или документа)
// Структура содержит следующие элементы: Реквизиты - массив реквизитов объекта, ТабличныеЧасти - структура табличных частей
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, структуру состава которого требуется получить
//  ИмяКласса - имя класса объекта (Справочники, Документы и т.д.)
//  ИмяОбъекта - имя объекта метаданных
//  ДеревоИспользуемыхМетаданных - дерево, описывающее используемые метаданные
//
// Возвращаемое значение:
//  Структура, описывающая состав объекта
//
Функция ПолучитьСтруктуруСоставаОбъекта(ОбъектМетаданных, ИмяКласса, ИмяОбъекта, ДеревоИспользуемыхМетаданных)

	СтруктураСостава = Новый Структура();
	СтруктураРеквизитов = Новый Структура();
	
	СтруктураТабличныхЧастей = Новый Структура();

	СтрокаКласса = ДеревоИспользуемыхМетаданных.Строки[0].Строки.Найти(ИмяКласса, "Имя");

	Если СтрокаКласса = Неопределено Тогда
		#Если ВнешнееСоединение Тогда
			ТекстСообщения = НСтр("ru='В пакет обмена записаны неверные данные: %ИмяКласса%.%ИмяОбъекта%.%ПереводСтроки%В приложении не используются %ИмяКласса%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИмяКласса%",ИмяКласса);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИмяОбъекта%",ИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПереводСтроки%",Символы.ПС);
			
			ВызватьИсключение(ТекстСообщения);
		#КонецЕсли
	КонецЕсли;

	СтрокаОбъекта = СтрокаКласса.Строки.Найти(ИмяОбъекта, "Имя");

	Если СтрокаОбъекта = Неопределено Тогда
		#Если ВнешнееСоединение Тогда
			ТекстСообщения = НСтр("ru='В пакет обмена записаны неверные данные: %ИмяКласса%.%ИмяОбъекта%.%ПереводСтроки%В приложении не используется данный объект'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИмяКласса%",ИмяКласса);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИмяОбъекта%",ИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПереводСтроки%",Символы.ПС);
			
			ВызватьИсключение(ТекстСообщения);
		#КонецЕсли
	КонецЕсли;
	
	// Добавим реквизиты объекта
	ВетвьРеквизитов = СтрокаОбъекта.Строки.Найти("Attributes","Имя");
	
	Если ВетвьРеквизитов <> Неопределено Тогда
		Для Каждого СтрокаРеквизита из ВетвьРеквизитов.Строки Цикл
			
			СтруктураОписанияРеквизита = Новый Структура();
					
			Если ИмяКласса = "Справочники" Тогда
				СтруктураОписанияРеквизита = ПолучитьСтруктуруОписанияРеквизитаСправочника(ОбъектМетаданных, СтрокаРеквизита.Имя);
			ИначеЕсли ИмяКласса = "Документы" Тогда
				СтруктураОписанияРеквизита = ПолучитьСтруктуруОписанияРеквизитаДокумента(ОбъектМетаданных, СтрокаРеквизита.Имя);
			КонецЕсли;

			СтруктураРеквизитов.Вставить(СтрокаРеквизита.Имя, СтруктураОписанияРеквизита);

		КонецЦикла;	
	КонецЕсли;	
	
	// Добавим реквизиты табличных частей
	
	ВетвьТабличныхЧастей = СтрокаОбъекта.Строки.Найти("TabularParts","Имя");
	
	Если ВетвьТабличныхЧастей <> Неопределено Тогда
		
		Для Каждого СтрокаТабличнойЧасти из ВетвьТабличныхЧастей.Строки Цикл

			СтруктураОписанияТабличнойЧасти = Новый Структура();
			СтруктураРеквизитовТабличнойЧасти = Новый Структура();
			
			ИмяТабличнойЧасти = СтрокаТабличнойЧасти.Имя;
			
			Для Каждого СтрокаРеквизита Из СтрокаТабличнойЧасти.Строки Цикл

				СтруктураОписанияРеквизита = Новый Структура();

				РеквизитТабличнойЧасти = ОбъектМетаданных.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[СтрокаРеквизита.Имя];
				УказаниеТипа = ПолучитьУказаниеТипаРеквизита(РеквизитТабличнойЧасти);
				ТипРеквизита = ПолучитьТипРеквизита(РеквизитТабличнойЧасти);

				СтруктураОписанияРеквизита.Вставить("УказаниеТипа", УказаниеТипа);
				СтруктураОписанияРеквизита.Вставить("Тип", ТипРеквизита);

				СтруктураРеквизитовТабличнойЧасти.Вставить(СтрокаРеквизита.Имя, СтруктураОписанияРеквизита);

			КонецЦикла;
			
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти[ИмяТабличнойЧасти];

			Если ИмяКласса = "Справочники" Тогда
				
				СтруктураИспользованияТабличнойЧасти = ПолучитьСтруктуруИспользованияСвойстваСправочника(ТабличнаяЧасть);
				
				СтруктураОписанияТабличнойЧасти.Вставить("ИспользуетсяДляЭлемента", СтруктураИспользованияТабличнойЧасти.ИспользуетсяДляЭлемента);
				СтруктураОписанияТабличнойЧасти.Вставить("ИспользуетсяДляГруппы", СтруктураИспользованияТабличнойЧасти.ИспользуетсяДляГруппы);
				
			КонецЕсли;
			
			СтруктураОписанияТабличнойЧасти.Вставить("СтруктураРеквизитов", СтруктураРеквизитовТабличнойЧасти);

			СтруктураТабличныхЧастей.Вставить(ИмяТабличнойЧасти, СтруктураОписанияТабличнойЧасти);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураСостава.Вставить("Реквизиты", СтруктураРеквизитов);
	СтруктураСостава.Вставить("ТабличныеЧасти", СтруктураТабличныхЧастей);
		
	Возврат СтруктураСостава;

КонецФункции

// Формирует и возвращает структуру, содержащую описание используемых объектов
//
// Параметры:
//  УзелОбмена - узел плана обмена, для которого анализируются используемые объекты
//
// Возвращаемое значение:
//  Структура, содержащая описание используемых объектов
//
Функция ПолучитьСтруктуруОписанияИспользуемыхОбъектов(УзелОбмена)

	СтруктураОписания = Новый Структура();

	ОписаниеИспользуемыхМетаданных = УзелОбмена.ВерсияМобильногоПриложения.ИспользуемыеМетаданные;
	ДеревоИспользуемыхМетаданных = ПолучитьДеревоИспользуемыхМетаданных(ОписаниеИспользуемыхМетаданных);
    
    КореньДереваМетаданных = ДеревоИспользуемыхМетаданных.Строки[0];

    Для Каждого СтрокаКласса из КореньДереваМетаданных.Строки Цикл

		ИмяКласса = СтрокаКласса.Имя;

		Если ИмяКласса = "Константы" ИЛИ ИмяКласса = "Справочники" ИЛИ ИмяКласса = "Документы" ИЛИ ИмяКласса = "РегистрыСведений" Тогда

			МетаданныеКласса = Метаданные[ИмяКласса];
			
			Для Каждого СтрокаОбъекта из СтрокаКласса.Строки Цикл
				
				МетаданныеОбъекта = МетаданныеКласса[СтрокаОбъекта.Имя];
				
				СтруктураОписанияОбъекта = ОбменДаннымиСМобильнымиПриложениямиСобытия.ПолучитьСтруктуруОписанияОбъекта(МетаданныеОбъекта, Ложь);
				
				Если СтруктураОписанияОбъекта.ИмяКласса = "Справочники" ИЛИ СтруктураОписанияОбъекта.ИмяКласса = "Документы" Тогда
					СтруктураСостава = ПолучитьСтруктуруСоставаОбъекта(МетаданныеОбъекта, СтруктураОписанияОбъекта.ИмяКласса, СтруктураОписанияОбъекта.ИмяОбъекта, ДеревоИспользуемыхМетаданных);
					СтруктураОписания.Вставить(СтруктураОписанияОбъекта.ИмяКласса + СтруктураОписанияОбъекта.ИмяОбъекта, СтруктураСостава);
				КонецЕсли;
				
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Возврат СтруктураОписания;

КонецФункции

// Получает и возвращает массив, содержащий имена ключеых полей регистра сведений,
// т.е. полей, которые участвуют основном отборе и обязательно должны быть заполнены
// при регистрации изменений
//
// Параметры:
//  ОбъектМетаданных - объект метаданных конкретного регистра сведений
//
// Возвращаемое значение:
//  Массив, содержащий имена ключевых полей регистра
//
Функция ПолучитьМассивКлючевыхПолейРегистраСведений(ОбъектМетаданных)

	МассивПолей = Новый Массив();

	// Для регистров сведений, подчиненных регистратору, отбор возможен только по регистратору
	Если ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		МассивПолей.Добавить("Регистратор");
        Возврат МассивПолей;
	КонецЕсли;
	
    Если ОбъектМетаданных.ОсновнойОтборПоПериоду Тогда
		МассивПолей.Добавить("Период");
	КонецЕсли;

	Для Каждого Измерение из ОбъектМетаданных.Измерения Цикл
        Если Измерение.ОсновнойОтбор Тогда
			МассивПолей.Добавить(Измерение.Имя);
        КонецЕсли;
	КонецЦикла;

	Возврат МассивПолей;

КонецФункции

// Получает и возвращает массив, содержащий имена полей регистра сведений
//
// Параметры:
//  ОбъектМетаданных - объект метаданных конкретного регистра сведений
//
// Возвращаемое значение:
//  Массив, содержащий имена полей регистра
//
Функция ПолучитьМассивПолейРегистраСведенийДляВыборки(ОбъектМетаданных)

	МассивПолей = ПолучитьМассивКлючевыхПолейРегистраСведений(ОбъектМетаданных);

    Для Каждого Измерение из ОбъектМетаданных.Измерения Цикл
        Если МассивПолей.Найти(Измерение.Имя) = Неопределено Тогда
			МассивПолей.Добавить(Измерение.Имя);
        КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ресурс из ОбъектМетаданных.Ресурсы Цикл
		МассивПолей.Добавить(Ресурс.Имя);
	КонецЦикла;
	
	Для Каждого Реквизит из ОбъектМетаданных.Реквизиты Цикл
		МассивПолей.Добавить(Реквизит.Имя);
	КонецЦикла;

    Если ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
        МассивПолей.Добавить("Активность");
    КонецЕсли;

	Возврат МассивПолей;

КонецФункции