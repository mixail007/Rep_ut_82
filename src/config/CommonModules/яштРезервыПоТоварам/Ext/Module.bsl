
//функция проверки наличия РезерваНаСкладах по документу "Заказ покупателя"
//нужна для ограничения доступа к форме Заказа и Корректировки заказов покупателй
//
Функция ЕстьРезервПоЗаказу(Заказ, ВернутьДокументРезерва=ЛОЖЬ) Экспорт
	рез = Ложь;
	Если Заказ=документы.ЗаказПокупателя.ПустаяСсылка() тогда
		возврат рез;
	КонецЕсли;	
	
	Запрос = Новый Запрос; //единый регистр для 
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РезервНаСкладахОстатки.ЗаказПокупателя
	               |ИЗ
	               |	РегистрНакопления.РезервНаСкладах.Остатки(, ЗаказПокупателя = &Заказ) КАК РезервНаСкладахОстатки
	               |ГДЕ
	               |	РезервНаСкладахОстатки.КоличествоОстаток > 0";
	Запрос.УстановитьПараметр("Заказ", Заказ );
	Результат = Запрос.Выполнить();
	
	ЕстьРезерв = НЕ результат.Пустой();	
	
	//20.09.2016 - ТОЛЬКО если ЕстьРезерв...
	Если ЕстьРезерв или ВернутьДокументРезерва тогда //+++ 08.11.2013 - органичение по наличию Задания на отгрузку... непроведенного
		Запрос1 = Новый Запрос;
		Запрос1.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		                |	""Задание на отгрузку"" КАК Тип,
		                |	ЗадОтг.Ссылка.Номер КАК Номер,
		                |	ЗадОтг.Ссылка.Дата КАК Дата
		                |ИЗ
		                |	Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗадОтг
		                |ГДЕ
		                |	ЗадОтг.ЗаказПокупателя = &ЗаказПокупателя
		                |	И ЗадОтг.Ссылка.Дата >= &Дата0
		                |	И НЕ ЗадОтг.Ссылка.Выполнено
		                |	И НЕ ЗадОтг.Ссылка.ПометкаУдаления
		                |
		                |ОБЪЕДИНИТЬ ВСЕ
		                |
		                |ВЫБРАТЬ ПЕРВЫЕ 1
		                |	""Задание на перемещение"",
		                |	ЗадПерем.Ссылка.Номер,
		                |	ЗадПерем.Ссылка.Дата
		                |ИЗ
		                |	Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ЗадПерем
		                |ГДЕ
		                |	ЗадПерем.ЗаказПокупателя = &ЗаказПокупателя
		                |	И ЗадПерем.Ссылка.Дата >= &Дата0
		                |	И НЕ ЗадПерем.Ссылка.Выполнено
		                |	И НЕ ЗадПерем.Ссылка.ПометкаУдаления
		                |
		                |УПОРЯДОЧИТЬ ПО
		                |	Тип,
		                |	Дата УБЫВ";
		Запрос1.УстановитьПараметр("ЗаказПокупателя", Заказ );
		Запрос1.УстановитьПараметр("Дата0", НачалоДня(Заказ.Дата) - 7*86400 ); //до 7 календарных дней назад от текущей... продолжаются отгрузки...
		Результат1 = Запрос1.Выполнить();
		
		рез = НЕ результат1.Пустой();	
		Если рез или ВернутьДокументРезерва тогда
			Выборка1   = Результат1.Выбрать();
		КонецЕсли;
	КонецЕсли;
	
	Если ВернутьДокументРезерва тогда
		возврат Выборка1;
	иначе	
		Возврат ЕстьРезерв;
	КонецЕсли;	
	
КонецФункции	

//регламентное задание автозакрытия остатков резервовНаСкладах
//по дату
Процедура ЗакрытьРезервыНаСкладахНаНачалоДня() Экспорт
	ЗакрытиеРезервовНаСкладах();
КонецПроцедуры		  


//Создаётся документ "Закрытие Заказов По Резерву На Складах" 
// автозакрытия остатков по всем заказам на ДатаЗакрытия 
//
Процедура ЗакрытиеРезервовНаСкладах(ДатаЗакрытия=неопределено, Заказ=неопределено) Экспорт
	
	Если ДатаЗакрытия=неопределено тогда
		ДатаЗакрытия = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ различные
	|	РезервНаСкладахОстатки.ЗаказПокупателя
	//|	, РезервНаСкладахОстатки.Номенклатура,
	//|	РезервНаСкладахОстатки.Склад,
	//|	РезервНаСкладахОстатки.АдресХранения,
	//|	РезервНаСкладахОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.РезервНаСкладах.Остатки(&Дата, //ЗаказПокупателя = &Заказ
	|) КАК РезервНаСкладахОстатки
	|";
	
	Если Заказ<>неопределено тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ЗаказПокупателя = &Заказ", "ЗаказПокупателя = &Заказ");
		Запрос.УстановитьПараметр("Заказ", Заказ);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("Дата", ДатаЗакрытия+1);   // с учетом 0-ой секунды (защита от дублирования документов!)
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество()=0 тогда
		#Если Клиент тогда
			сообщить("Нет резервов на складах на "+строка(ДатаЗакрытия)+" по заказам покупателей.");
		#КонецЕсли
		возврат;
	КонецЕсли;
	
	ДокКорректировки = документы.ЗакрытиеЗаказовПоРезервуНаСкладах.СоздатьДокумент();
	ДокКорректировки.Дата = ДатаЗакрытия;
	//	ДокКорректировки.Организация = справочники.Организации.НайтиПоКоду("00001"); //ЯШТ
	ДокКорректировки.Ответственный = справочники.Пользователи.НайтиПоНаименованию("Робот (магазин)");
	ДокКорректировки.Подразделение = ДокКорректировки.Ответственный.ОсновноеПодразделение;
	ДокКорректировки.ВидОперации   = Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.СнятиеРезервов;
	//----------------------------------------------------------
	
	Пока Выборка.Следующий() цикл
		стрДвижения = ДокКорректировки.Заказы.Добавить();
		ЗаполнитьЗначенияСвойств(стрДвижения, Выборка);
	КонецЦикла;
	ДокКорректировки.Комментарий = "Автозакрытие резервов на складах от "+строка(ТекущаяДата());
	Попытка
		ДокКорректировки.Записать(РежимЗаписиДокумента.Проведение);
		#Если Клиент тогда
			сообщить("Создан документ: "+строка(ДокКорректировки) );
		#КонецЕсли
	Исключение	 
		СообщитьОбОшибке("Не удалось снять резервы на складах. "+ОписаниеОшибки()  );
	КонецПопытки;	 
	
КонецПроцедуры	 


//находит самый "свежий" документ (для списка реализаций)
Функция НайтиЗаданиеНаОтгрузку(ДокРеализации) экспорт
	запрос = новый Запрос;
	запрос.текст = "ВЫБРАТЬ первые 1
	               |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка
	               |ИЗ
	               |	Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
	               |ГДЕ
	               |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация = &Реализация
	               |	И НЕ ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.Дата УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	запрос.УстановитьПараметр("Реализация", ДокРеализации);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() тогда
		рез = выборка.ссылка;
	иначе
		рез = документы.ЗаданиеНаОтгрузку.ПустаяСсылка();
	КонецЕсли;
	
	возврат рез;
	
КонецФункции

//+++ заполнение КТУ по всем грузчикам... 
//или по ГруппамСкладов при авто-расчете документов
//
Процедура ЗаполнениеКТУГрузчиков(Док) Экспорт
	
	Если началоДня(Док.Дата) <> НачалоДня(ТекущаяДата()) тогда
		#Если Клиент тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Список грузчиков заполняется на текущий день!
			|и может не совпадать на "+Формат(Док.Дата, "ДЛФ=D")+".
			|Продолжить?", Режим, 30);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;	
	
	Если Док.Подразделение.Код<>"00005" тогда
		#Если Клиент тогда
			Сообщить("Внимание! Выбрано подраздедение: "+строка(Док.Подразделение)+"
					|Грузчики заполняются по Группам складов", СтатусСообщения.Внимание);
			
		//17.02.2016 ------------Начали делать грузчиков в СПб-----------------------
		Если ЗначениеНеЗаполнено(глТекущийПользователь) тогда
			глТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
		КонецЕсли;
			
		если не ( РольДоступна("ПолныеПрава")// для полных прав (Бухгалтерия)
			//-----для бух-ов филиалов-----------
			     или ( РольДоступна("Кассир") И ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") )
				 ) тогда 
			Возврат;
		КонецЕсли;	
		
		#КонецЕсли
	КонецЕсли;	

	
	//============================Неравное распределение КТУ==========================
	Док.ДанныеПоПогрузке.Очистить();
	
	ЗаполнитьВесНетто(Док.Товары);
	Док.ОбщийВес = Док.Товары.Итог("Вес");
	
	табЗнач = Док.Товары.выгрузить();
	табЗнач.Свернуть("Склад", "Вес, Количество");
	табЗнач.Колонки.Добавить("ГруппаСкладов");
	
	//+++ 03.12.2014 - по согласованию с Фроловым
	группаГрузчиковФедунова = справочники.ГруппыСкладов.Автоэксперт;
	ЭтоФедунов = ложь;
	Если  ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
		или ТипЗнч(Док) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") тогда
		ЭтоФедунов = (док.Контрагент.Код = "П000382");
	КонецЕсли;
	
	складДопПеремещения 	= справочники.Склады.НайтиПоНаименованию("МеталлКриалТранзит");
	//группаСкладовОшиповка	= справочники.ГруппыСкладов.НайтиПоНаименованию("Ошиповка");	
	
	Для Каждого стр1 из табЗнач Цикл
		
		//+++ 03.03.2014 при отгрузке с МеталлКриалТранзит - берем грузчиков 5000 
		Если стр1.Склад = складДопПеремещения тогда
			стр1.ГруппаСкладов = справочники.ГруппыСкладов.НайтиПоКоду("01");//01-5000 или 08-8000	
			
		////+++ с 03.12.2014 по  27.04.2016
		//ИначеЕсли ЭтоФедунов тогда 
		//	стр1.ГруппаСкладов = группаГрузчиковФедунова;
		//	#Если Клиент тогда
		//		сообщить("Для контрагента 'Автоэксперт(Ярославль)' по складу '"+строка(стр1.склад)+"' - используются грузчики группы 'Автоэксперт'!", СтатусСообщения.Информация);
		//	#КонецЕсли	
			
		Иначе	
			стр1.ГруппаСкладов = стр1.Склад.ГруппаСкладов;
		КонецЕсли;
		
		//+++ 04.12.2014 +++++++++ Если состав группы - пустой, то ВСЕГДА берем грузчиков Основного склада! +++++++++++++++++++++++++++++++++++
		Если стр1.ГруппаСкладов.Состав.Количество()=0 тогда //10.12.2014 - Ошиповка, ЦЦЛ... 
			
			Если стр1.Склад.Транзитный тогда // нет основного склада для транзитных групп!
				#Если Клиент тогда
					сообщить("Для склада '"+строка(стр1.Склад)+"' - не определен состав грузчиков!", СтатусСообщения.Внимание);
				#КонецЕсли
			Иначе
				стр1.ГруппаСкладов = справочники.ГруппыСкладов.ОсновнойСклад;// 00 - ОсновнойСклад
				#Если Клиент тогда
				сообщить("Для склада '"+строка(стр1.Склад)+"' - используются грузчики Основного склада!", СтатусСообщения.Информация);
				#КонецЕсли	
			КонецЕсли;
			
        КонецЕсли;
		
	КонецЦикла;
	табЗнач.Свернуть("ГруппаСкладов", "Вес, Количество");
	
	ЧислоВсехГрузчиков = 0;
	для каждого гр из табЗнач цикл
		Если Гр.ГруппаСкладов.пустая() Тогда			
			ГруппаСкладов = справочники.ГруппыСкладов.ОсновнойСклад;
		Иначе
			ГруппаСкладов = Гр.ГруппаСкладов;
		КонецЕсли;

	ЧислоВсехГрузчиков = ЧислоВсехГрузчиков + ГруппаСкладов.Состав.Количество();
	КонецЦикла;

	 //---------------средний вес по каждому грузчику а не по группе!-----------------
	 // максимальное расхождение от предыдущей версии при отгрузке с Криала (47 чел выполняют 10% работы, а 27 - 90%)
	 //среднВес = ?(табЗнач.Количество()=0, Док.ОбщийВес, Док.ОбщийВес/табЗнач.Количество()); //ПО ГРУППЕ 1000/2 = 500 кг.
	   среднВес = ?(ЧислоВсехГрузчиков=0, Док.ОбщийВес,Док.ОбщийВес/ЧислоВсехГрузчиков); 
	  // в килограммах 1000/30 = 33,333333333 кг
	  
	Если среднВес<=0 тогда	
		#Если Клиент тогда
			СообщитьОбОшибке("Не определен вес товаров в документе: "+строка(Док)+". КТУ всех грузчиков будет равен 1!");
		#КонецЕсли
		среднВес=1;
	КонецЕсли;
	
	Для Каждого стрГр из табЗнач Цикл
				
		////среднее по группам! если 200+800 соответственно будет среднее 500
		//ВесОдногоИзГруппы =?(Док.ОбщийВес=0, 1,стрГр.Вес/среднВес); //ПО ГРУППЕ 0.4 и 1.6
		  ВесОдногоИзГруппы =?(Док.ОбщийВес=0, 1, стрГр.Вес/Док.ОбщийВес );  //% группы 0.2% и 0.8%
		  
		  ЧислоГрузчиковВГруппе = стрГр.ГруппаСкладов.Состав.Количество();
		  ЧислоГрузчиковВГруппе = ?(ЧислоГрузчиковВГруппе=0, 1, ЧислоГрузчиковВГруппе);
		  
		Для Каждого стрСостава из стрГр.ГруппаСкладов.Состав Цикл
			
			////ПО ГРУППЕ 0.4 и 1.6
			//ВесОдногоГрузчика  = ВесОдногоИзГруппы; //погрешность 0.05% = 5кг / 10 тонн
			
			////  итоговые % распределения = 0.4/(0.4*10 +1.6*20) = 11,111 кг (вместо 20 - почти в 2 раза меньше!)
			////   и 1.6/36 = 44,444 кг вместо 40 (на 10% больше)
            //// итоговый вес по грузчикам = 999,990 кг! на 10 гр. меньше!
			
			//по каждому!
			ВесОдногоГрузчика  =  стрГр.Вес/(ЧислоГрузчиковВГруппе*среднВес);
			//2) 200кг/10чел = 20кг;  800/20чел = 40 кг
			//   20кг / 33,33333кг =0,6;  40кг/33,33333кг= 1,2;
      		// итоговые % распределения = 0.6/30 = 2%  и 1.2/30 = 4% -> 20 и 40 кг
            // итоговый вес по грузчикам = 1000,000 кг! на 10 гр. меньше!
		
			Строка=Док.ДанныеПоПогрузке.Добавить();
			Строка.Грузчик = стрСостава.ФизЛицо;
			Строка.Вес	   = ВесОдногоГрузчика; 		
		КонецЦикла;	
	КонецЦикла;
	//погрешность 0.0005 от среднего веса! (на каждого)- максимум 0,175% на каждого! при максимальном коэффициенте 3,5 
	
	//КонецЕсли;
	
	
	i=0;//удаление строк с 0 весом ( у товара нет веса !? )
	пока i<Док.ДанныеПоПогрузке.Количество() цикл
		Если Док.ДанныеПоПогрузке[i].Вес=0 тогда
			Док.ДанныеПоПогрузке.удалить(i);
		иначе
		    i=i+1;
		КонецЕсли;
	КонецЦикла;
	
//------------------------уменьшение количества строк----------------------	
//+++ 10.12.2014 - теперь свернём по грузчикам (в разных группах - одни и те же!)
	табл = Док.ДанныеПоПогрузке.выгрузить();
	табл.Свернуть("Грузчик","Вес");   // до 5-10 групп погрешность вырастает до 2,5 - 5 кг/тонну
	
////нормализация КТУ (от Среднего)
Если табл.Количество()>0 тогда
	СредняяДоля = табл.Итог("Вес")/табл.Количество();
	Если СредняяДоля<>1 тогда
		Для каждого стр1 из табл цикл
		стр1.Вес = Окр( ?(СредняяДоля=0,1, стр1.Вес / СредняяДоля), 3);
		КонецЦикла;
	КонецЕсли;
КонецЕсли;
	Док.ДанныеПоПогрузке.Очистить();
	Док.ДанныеПоПогрузке.Загрузить(табл);

//Вес на человека = КТУ * Средний вес = КТУ * Общий вес / Количество различных грузчиков;
КонецПроцедуры

Процедура ЗакрытиеЗаказовПокупателейДиски() Экспорт
	
	глТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Лапенков");
	ПараметрыСеанса.ТекущийПользователь = глТекущийПользователь;
	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));
	
	
	Док=Документы.ЗакрытиеЗаказовПокупателей.СоздатьДокумент();	
	Док.Дата = ТекущаяДата();
	Док.ВидОперации =  Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.ЗакрытиеЗаказов ;
	Док.ЗаполнитьЗаказыПоПросроченнымРезервамУпрТолькоДиски();
	Док.Комментарий = "Автоматическое закрытие заказов по дискам";
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
 		//Добавим регистрацию закрытых заказов в Store
	
	Для каждого стр из Док.Заказы Цикл
		//	ДокументОбъект=Стр.ЗаказПокупателя.ПолучитьОбъект();
		//	ДокументОбъект.ОбменДанными.Загрузка = истина; //+++ 19.10.2011 для перезаписи даже в закрытом периоде?!
			Попытка
			//01.11.2016 - выгружаем в ОИМ только по флагу клиента ПриниматьЗаказыЧерезСайт (Коннект-24)
			ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(Стр.ЗаказПокупателя, Стр.ЗаказПокупателя.Контрагент.ПриниматьЗаказыЧерезСайт); 
		    исключение
			КонецПопытки;
    конецЦикла;

	// --------------
	
	// +АЧ. Сохраним первый док закрытия
	ДокЗакрытие1 = Док.ссылка;
	
	глТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Лапенков");
	ПараметрыСеанса.ТекущийПользователь = глТекущийПользователь;
	
	Док=Документы.ЗакрытиеЗаказовПокупателей.СоздатьДокумент();	
	Док.Дата = ТекущаяДата();
	Док.ВидОперации =  Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.ЗакрытиеЗаказов ;
	Док.ЗаполнитьЗаказыПоОтрицательнымОстаткам();
	//// {{ Серков: Прошу настроить закрытие заказов покупателей по договорам продажи ФА+ сроком в 30 кал. дней
	//Попытка
	//	ОбрСсылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Зарытие заказов доп обработки");
	//	Если НЕ ОбрСсылка.Пустая() Тогда
	//		ОбрОбъект = ОбрСсылка.ПолучитьОбъект();
	//		ДвоичДанн = ОбрОбъект.ХранилищеВнешнейОбработки.Получить();
	//		ФайлИмяЛок = ПолучитьИмяВременногоФайла("epf");
	//		ДвоичДанн.Записать(ФайлИмяЛок);
	//		ОбработкаЛок = ВнешниеОбработки.Создать(ФайлИмяЛок);
	//		СтруктДопДанные = ОбработкаЛок.ЗакрытиеЗаказовДопОбработкиВыполнить();
	//		тзДанные     = СтруктДопДанные.тзРезультат;
	//		КомментХвост = СтруктДопДанные.Комментарий;
	//		ТабЗаказы = Док.Заказы;
	//		Для Каждого ТекСтрДопДанные Из тзДанные Цикл
	//			НовСтрДопДанные = ТабЗаказы.Добавить();
	//			НовСтрДопДанные.ЗаказПокупателя = ТекСтрДопДанные.ЗаказПокупателя;
	//		КонецЦикла;
	//	Иначе
	//		КомментХвост = "";
	//	КонецЕсли;
	//Исключение
	//	КомментХвост = "";
	//КонецПопытки;
	//// }} Серков: Прошу настроить закрытие заказов покупателей по договорам продажи ФА+ сроком в 30 кал. дней
	Док.Комментарий = "Автоматическое закрытие заказов по отриц остаткам";
	Док.Записать(РежимЗаписиДокумента.Проведение);  
	
	//Добавим регистрацию закрытых заказов в Store
	// и так должна быть в документе ЗакрытиеЗаказовПокупателей
	Для каждого стр из Док.Заказы Цикл
		ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(Стр.ЗаказПокупателя, Стр.ЗаказПокупателя.Контрагент.ПриниматьЗаказыЧерезСайт );
	КонецЦикла;
	
	// +АЧ. Сохраним второй док закрытия
	ДокЗакрытие2 = Док.ссылка;
	
	// Снять автокомплектацию с сезонного заказа покупателя по закрытым заказам. 	
	СнятьАвтокомплектациюПоСезоннымЗаказамПокупателя(ДокЗакрытие1,ДокЗакрытие2);
	ОтправитьУведомлениеМенеджерамОЗакрытии(ДокЗакрытие1, ДокЗакрытие2);
	// --------------
	
	//***02.2016 заремлено, т.к. сделано отдельное регламентное задание для закрытия заказов поставщикам
	//спустя 1 месяц с момента даты поступления в заказе
	
	//глТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Лапенков");
	//ПараметрыСеанса.ТекущийПользователь = глТекущийПользователь;
	//
	//Док=Документы.ЗакрытиеЗаказовПоставщикам.СоздатьДокумент();	
	//Док.Дата = ТекущаяДата();
	//Док.ЗаполнитьЗаказыПоКоторымБылоПоступление();
	//Док.Комментарий = "Автоматическое закрытие заказов по поступившим товарам";
	//Док.Записать(РежимЗаписиДокумента.Проведение);
	
	
//+++ 21.11.2016 -------------------------------- убираем напоминание по заказам -------------------------------
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ЗаказПокупателя.Ссылка
|ИЗ
|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
|ГДЕ
|	ЗаказПокупателя.Дата между &Дата0 и &Дата1
|	И ЗаказПокупателя.НапомнитьОСобытии
|	И ЗаказПокупателя.ПометкаУдаления = ЛОЖЬ";

Запрос.УстановитьПараметр("Дата0", НачалоДня(ТекущаяДата()) -7 * 86400 ); //неделю назад
Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()) -3 * 86400 ); // 3 дня (пятн., суб, воск.)
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл
	закОб = выборка.Ссылка.ПолучитьОбъект();
	попытка
		закОб.НапомнитьОСобытии = ЛОЖЬ;
		закОб.Записать();
	исключение
	КонецПопытки;	
КонецЦикла;

	
КонецПроцедуры



//Орлов++
Процедура УстановкаДатыОплатыВЗаказахПокупателяПоЧислуДнейСМоментаОтгрузки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыНаСкладахОбороты.Регистратор.Сделка КАК Заказ,
	|	ТоварыНаСкладахОбороты.Регистратор КАК Реализация
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ТоварыНаСкладахОбороты
	|ГДЕ
	|	ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И ТоварыНаСкладахОбороты.Регистратор.Сделка ССЫЛКА Документ.ЗаказПокупателя
	|	И ТоварыНаСкладахОбороты.Регистратор.Сделка.ЧислоДнейСМоментаОтгрузки > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОбороты.Регистратор.Сделка,
	|	ТоварыНаСкладахОбороты.Регистратор";
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()-86400));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()-86400));
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Попытка
			ЗаказОбъект = Результат.Заказ.ПолучитьОбъект();
			ЗаказОбъект.ДатаОплаты = Результат.Реализация.Дата + 86400 * ЗаказОбъект.ЧислоДнейСМоментаОтгрузки;
			ЗаказОбъект.Записать();
		Исключение
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры	


Функция ПослатьСообщенияОЗадолженности() Экспорт
	
	//+++ 22.12.2014 - не сервере - свой каталог временных файлов!
	КаталогВременныхФайлов = КаталогВременныхФайлов(); 
  //КаталогВременныхФайлов = "\\terminal\RESTORE Userdir\Отправленные документы\Рассылка задолженности\";
	
	УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
	ПервоеЧислоМесяца = ?(День(ТекущаяДата()) = 1, Истина, Ложь);
	
	ЗапросПоКонтрагентам = Новый Запрос;
	ЗапросПоКонтрагентам.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресПочты,
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Объект = Контрагенты.Ссылка)
	|			И (КонтактнаяИнформация.Тип = &Тип)
	|			И (КонтактнаяИнформация.Вид = &Вид)
	|			И (Контрагенты.Покупатель = ИСТИНА)
	|ГДЕ
	|	Контрагенты.УведомлениеОЗадолженности = ИСТИНА";
	
	ЗапросПоКонтрагентам.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами);
	ЗапросПоКонтрагентам.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	ТЗКонтрагентов = ЗапросПоКонтрагентам.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток
	|ПОМЕСТИТЬ ВТ_ОстаткиНужногоТипа
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			&ТекущаяДата,
	|			(НЕ ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.Факторинг))
	|				И (НЕ ДоговорКонтрагента.ТипДоговора = &ТипДоговораФормулаАвто)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Заказ,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаЗадолженности, 
	|	РеализацияТоваровУслуг.Ссылка КАК Реализация,
	|	максимум( РАЗНОСТЬДАТ(РеализацияТоваровУслуг.Ссылка.Сделка.ДатаОплаты, &ТекущаяДата, ДЕНЬ) ) как ЧислоДней
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			&ТекущаяДата,
	|			ДоговорКонтрагента.Владелец В (&СписокКонтрагентов)
	|				И Сделка ССЫЛКА Документ.ЗаказПокупателя
	|				И (
	|"	+?(ПервоеЧислоМесяца, 
							"Сделка.ДатаОплаты >= &НачалоМесяца
	|						И Сделка.ДатаОплаты <= &КонецМесяца ", "
	//+++( 14.12.2015 - за 3 дня - изменено на -7 и -1 день до срока оплаты (2 раза!)
	//"					РАЗНОСТЬДАТ(Сделка.ДатаОплаты, &ТекущаяДата, ДЕНЬ) = -3
	|					РАЗНОСТЬДАТ(Сделка.ДатаОплаты, &ТекущаяДата, ДЕНЬ) = -7
	|				или РАЗНОСТЬДАТ(Сделка.ДатаОплаты, &ТекущаяДата, ДЕНЬ) = -1
	|"   )+"
	|				  )
	//+++)
	
	|				И (НЕ ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.Факторинг))
	|				И (НЕ ДоговорКонтрагента.ТипДоговора = &ТипДоговораФормулаАвто)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОстаткиНужногоТипа КАК ВТ_ОстаткиНужногоТипа
	|		ПО (ВТ_ОстаткиНужногоТипа.СуммаУпрОстаток > 0)
	|			И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ВТ_ОстаткиНужногоТипа.ДоговорКонтрагента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ВзаиморасчетыСКонтрагентамиОстатки.Сделка = РеализацияТоваровУслуг.Сделка
	|			И ((НЕ РеализацияТоваровУслуг.Ссылка В
	|					(ВЫБРАТЬ
	|						РеализацияТоваровУслугТовары.Ссылка
	|					ИЗ
	|						Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|							ПО
	|								РеализацияТоваровУслугТовары.Ссылка = ВозвратТоваровОтПокупателяТовары.ДокументПартии
	|								И (ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен = ИСТИНА)
	|					ГДЕ
	|						РеализацияТоваровУслугТовары.Ссылка.Контрагент В (&СписокКонтрагентов)
	|						И РеализацияТоваровУслугТовары.Ссылка.Сделка ССЫЛКА Документ.ЗаказПокупателя
	|						И РеализацияТоваровУслугТовары.Ссылка.Сделка.ДатаОплаты МЕЖДУ &НачалоМесяца И &КонецМесяца
	|					СГРУППИРОВАТЬ ПО
	|									РеализацияТоваровУслугТовары.Ссылка)))
	|			И (РеализацияТоваровУслуг.Ссылка.Проведен = ИСТИНА)
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец,
	|	РеализацияТоваровУслуг.Ссылка
	|Упорядочить по 
	|	ЧислоДней Убыв
	|Автоупорядочивание";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипДоговораФормулаАвто", Справочники.ТипыДоговоров.НайтиПоКоду("Я0004"));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ТекущаяДата()));
	Запрос.УстановитьПараметр("СписокКонтрагентов", ТЗКонтрагентов.ВыгрузитьКолонку("Контрагент"));
	
	ТЗРеализаций = Запрос.Выполнить().Выгрузить();	
	
	Для Каждого СтрокаТЗ Из ТЗКонтрагентов Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("Контрагент", СтрокаТЗ.Контрагент);
		
		МРеализаций = ТЗРеализаций.НайтиСтроки(Отбор);
		
		Если ПервоеЧислоМесяца Тогда
			ТекстСообщения = "Напоминаем, что в этом месяце у Вас наступают сроки платежей по следующим отгрузкам:"+Символы.ПС;
		Иначе
			ТекстСообщения = "Напоминаем, что у Вас в ближайшие дни наступают сроки платежей по следующим отгрузкам:"+Символы.ПС;
		КонецЕсли;
		
		СписокФайловВложений = Новый СписокЗначений;
		
		Для Каждого СтрокаМ Из МРеализаций Цикл
			
			Если НЕ (СтрокаМ.Реализация = null или СтрокаМ.Реализация = неопределено) тогда
			ТекстСообщения = ТекстСообщения + строка(СтрокаМ.ЧислоДней)+" Накладная № "+СтрокаМ.Реализация.Номер+" с датой отгрузки "+Формат(СтрокаМ.Реализация.Сделка.ДатаОтгрузки,"ДФ=dd.MM.yyyy")+
			" и сроком оплаты до "+Формат(СтрокаМ.Реализация.Сделка.ДатаОплаты,"ДФ=dd.MM.yyyy")+", сумма задолженности "+СтрокаМ.СуммаЗадолженности+" руб. "+Символы.ПС;				
			
			//ДокументОбъект=СтрокаМ.Реализация.ПолучитьОбъект();				
			ИмяФайлаСообщения="Счет_"+СтрокаМ.Реализация.Номер+".xls";
			
			ТабличныйДокументОбъект = докПечатьСчетаЗаказа(СтрокаМ.Реализация.ссылка);
			
			ТабличныйДокументОбъект.Записать(КаталогВременныхФайлов+ИмяФайлаСообщения,ТипФайлаТабличногоДокумента.XLS);
			СписокФайловВложений.Добавить(КаталогВременныхФайлов+ИмяФайлаСообщения);
			КонецЕсли;
		
		КонецЦикла;
		
		Если МРеализаций.Количество() > 0 Тогда
			Тема = "Внимание! Напоминание о платеже ЗАО ТК ""Яршинторг""";
			яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(СтрокаТЗ.АдресПочты,СписокФайловВложений, УЗ, ТекстСообщения, Тема);
		КонецЕсли;
		
		Для Каждого ТекАдр Из СписокФайловВложений Цикл
			Попытка
				УдалитьФайлы(ТекАдр);
			Исключение
				#Если Клинет Тогда
					Сообищить("Файл "+ТекАдр+" не удален!");
				#КонецЕсли
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции


Функция докПечатьСчетаЗаказа(СсылкаНаОбъект)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Запрос.Текст ="ВЫБРАТЬ
	|	реализацияТоваровУслуг.Номер,
	|	реализацияТоваровУслуг.Дата,
	|	реализацияТоваровУслуг.ДоговорКонтрагента,
	|	реализацияТоваровУслуг.Организация КАК Организация,
	|	реализацияТоваровУслуг.Контрагент КАК Получатель,
	|	реализацияТоваровУслуг.Организация КАК Руководители,
	|	реализацияТоваровУслуг.Организация КАК Поставщик,
	|	реализацияТоваровУслуг.СуммаДокумента,
	|	реализацияТоваровУслуг.ВалютаДокумента,
	|	реализацияТоваровУслуг.УчитыватьНДС,
	|	реализацияТоваровУслуг.СуммаВключаетНДС,
	//+++ 27.11.2012
	|	реализацияТоваровУслуг.Грузоотправитель,
	|	реализацияТоваровУслуг.Подразделение
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК реализацияТоваровУслуг
	|ГДЕ
	|	реализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	Если  не ЗначениеНеЗаполнено(СсылкаНаОбъект.ОрганизацияДляПечати) Тогда // меняем все кроме реквизита Организация
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"Организация КАК","ОрганизацияДляПечати КАК");
	КонецЕсли;	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Реализация_СчетЗаказ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
	|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL Как Серия,
	|	НомерСтроки,
	|	Метка
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|		СУММА(ЗаказПокупателя.Количество)           КАК Количество,
	|		СУММА(ЗаказПокупателя.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПокупателя.СуммаНДС  )           КАК СуммаНДС,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК Характеристика,
	|		МИНИМУМ(НомерСтроки)                        КАК НомерСтроки,
	|		0                                           КАК Метка
	|	ИЗ
	|		Документ.реализацияТоваровУслуг.Товары КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Содержание,
	|	ВЫБОР КОГДА ЗаказПокупателя.Содержание IS NULL ИЛИ ЗаказПокупателя.Содержание = """" ТОГДА
	|		ВЫРАЗИТЬ(ЗаказПокупателя.Номенклатура.НаименованиеПолное КАК Строка(1000))
	|	ИНАЧЕ
	|		ЗаказПокупателя.Содержание
	|	КОНЕЦ КАК Товар,
	|	ЗаказПокупателя.Номенклатура.Код     КАК Код,
	|	ЗаказПокупателя.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
	|	ЗаказПокупателя.ПроцентСкидкиНаценки,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	ЗаказПокупателя.СуммаНДС,
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	1 КАК Метка
	|	
	|ИЗ
	|	Документ.реализацияТоваровУслуг.Услуги КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	Макет = ПолучитьОбщийМакет("СчетЗаказ");
	
	// Выводим шапку накладной
	
	СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	
	ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
	ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.БанковскийСчетОрганизации) тогда
		БанковскийСчетОрганизации1 = СсылкаНаОбъект.БанковскийСчетОрганизации;
	иначе
		БанковскийСчетОрганизации1 = СсылкаНаОбъект.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;	
	
	
	//+++( 27.11.2012
	Если Шапка.Подразделение = справочники.Подразделения.НайтиПоКоду("00106") 
		и Шапка.Дата >= '20121001' тогда
		Если НЕ ЗначениеЗаполнено(Шапка.Грузоотправитель) тогда
			Сообщить("Не заполнен грузоотправитель!");
			возврат неопределено;
		КонецЕсли;	
		СведенияОГрузоотправителе = СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.Дата);  
		ОбластьМакета.Параметры.ИНН = СведенияОГрузоотправителе.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОГрузоотправителе.КПП;
		//!!! БанковскийСчетОрганизации1 вместо СтруктурнаяЕдиница
		БанковскийСчетОрганизации1  = Шапка.Грузоотправитель.ОсновнойБанковскийСчет;
	КонецЕсли;	//+++)
	
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации1) Тогда  //+++ БанковскийСчетОрганизации вместо Структурной единицы
		Банк       = БанковскийСчетОрганизации1.Банк;
		БИК        = Банк.Код;
		КоррСчет   = Банк.КоррСчет;
		ГородБанка = Банк.Город;
		НомерСчета = БанковскийСчетОрганизации1.НомерСчета;
		
		ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
		ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
		ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
		ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
		ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
		ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
		ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
		ОбластьМакета.Параметры.ПредставлениеПоставщика          = БанковскийСчетОрганизации1.ТекстКорреспондента;
	КонецЕсли;
	Если ЗначениеНеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщика) Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизацииСервер(СведенияОПоставщике, "ПолноеНаименование,");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьМакета.Параметры.ТекстЗаголовка = "Счет на оплату" + " № " + ПолучитьНомерНаПечатьСервер(СсылкаНаОбъект)
	+ " от " + Формат(СсылкаНаОбъект.Дата, "ДФ='дд ММММ гггг'");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизацииСервер(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);
	
	//+++ 03.10.2012 - Грузоотправитель, если он есть...
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Грузоотправитель) тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("Грузоотправитель");
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ОписаниеОрганизацииСервер(СведенияОЮрФизЛице(СсылкаНаОбъект.Грузоотправитель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ФактическийАдрес,Телефоны,");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ОрганизацияДляПечати) И СсылкаНаОбъект.ОрганизацияДляПечати<>СсылкаНаОбъект.Организация Тогда
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизацииСервер(СведенияОЮрФизЛице(СсылкаНаОбъект.ОрганизацияДляПечати, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");//Строка(КонтактноеЛицо);
	Иначе                                                 
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизацииСервер(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	КОнецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	//+++ 03.10.2012 - Грузополучатель, если он есть...
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Грузополучатель) тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("Грузополучатель");
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ОписаниеОрганизацииСервер(СведенияОЮрФизЛице(СсылкаНаОбъект.Грузополучатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ФактическийАдрес,Телефоны,");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если Не ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		Макет.Область("СуммаБезСкидки").ШиринаКолонки +
		Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		
		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				//ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Номенклатура.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрП(ВыборкаСтрокТовары.Товар) + ПредставлениеСерийСервер(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			Скидка = 0;
		Иначе
			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
		КонецЕсли;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;
		
	КонецЦикла;
	
	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ЧислоПрописью(СуммаКПрописи, "L=ru_RU", Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
	
	РуководителиП = ОтветственныеЛицаПодразделения(СсылкаНаОбъект.Подразделение, Шапка.Дата);//+++ 03.10.2012
	
	Руководители = ОтветственныеЛицаОрганизацииСервер(Шапка.Руководители, Шапка.Дата,);
	Руководитель = ?(РуководителиП.Руководитель=неопределено, Руководители.Руководитель,РуководителиП.Руководитель);
	Бухгалтер    = ?(РуководителиП.ГлавныйБухгалтер=неопределено, Руководители.ГлавныйБухгалтер, РуководителиП.ГлавныйБухгалтер);
	
	ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
	ОбластьМакета.Параметры.ФИОБухгалтера    = "/" + Бухгалтер     + "/";
	ОбластьМакета.Параметры.ФИООтветственный = "/" + СсылкаНаОбъект.Ответственный + "/";
	
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьСчетаЗаказа()


//+++ 18.06.2014 добавлен Отправитель, а не реальный адрес
Процедура ПослатьЭлектронноеПисьмо(АдресПолучателя0, СписокФайловВложений, УЗ, ТекстСообщения = "", Тема = "", Отправитель="",Копии = "", Уведомления = Ложь) Экспорт
	
	Если АдресПолучателя0="" тогда возврат;  
	иначе АдресПолучателя = АдресПолучателя0;   //+++ 18.05.2018
	КонецЕсли;	
	
	//16.04.2018 - список адресов строкой должен быть БЕЗ пробелов и через ;
	АдресПолучателя = стрЗаменить(АдресПолучателя," ","");  
	АдресПолучателя = стрЗаменить(АдресПолучателя,",",";");

	////30.01.2018 ==============================================
	Если Найти(УЗ.Наименование,"1c@yst.ru")>0 Тогда    //18-25.05.2018 - любой адрес ...@yst.ru - с сервера!
		текстСписок = "";
		//адрес файла должен быть: 
		//	"сетевым" \\комп\  
		//	или локальным на SIGMA
		для i=0 по СписокФайловВложений.Количество()-1 цикл
			файл1 =СписокФайловВложений[i].Значение;
			текстСписок = текстСписок + файл1+";";
		КонецЦикла;	
		
		//выполняется на сервере!
		рез = ОценкаПроизводительностиВызовСервераПолныеПрава.ПослатьПисьмоСервер(АдресПолучателя, текстСписок, ТекстСообщения, Тема, Отправитель, Копии, Уведомления);
		Если найти(рез,"Ошибка")>0 тогда
				#Если Клиент тогда
			Сообщить(рез, СтатусСообщения.Внимание);
			#КонецЕсли	
		иначе 
			#Если Клиент тогда
				сообщить(рез, СтатусСообщения.Информация);
			#КонецЕсли	
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	////=======================================================	
	
	ИПП=Новый ИнтернетПочтовыйПрофиль;
	ИПП.АдресСервераSMTP=УЗ.SMTPСервер;
	ИПП.ПортSMTP=УЗ.ПортSMTP;
	Если УЗ.ТребуетсяSMTPАутентификация Тогда
		ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
		ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
	Иначе
		ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		ИПП.ПарольSMTP         = "";
		ИПП.ПользовательSMTP   = "";
	КонецЕсли;
	Письмо=Новый ИнтернетПочтовоеСообщение;
	Письмо.Отправитель.Адрес 		   = ?(Отправитель="", УЗ.АдресЭлектроннойПочты, Отправитель);
	Письмо.Отправитель.ОтображаемоеИмя = ?(Отправитель="", УЗ.Наименование, 	     Отправитель);
	Если  Копии<>"" тогда
		Письмо.Копии.Добавить(Копии);
	КонецЕсли;
	
	Если УЗ.АдресЭлектроннойПочты="1c@yst.ru" 
		или Найти(Тема, "Документы отгрузки")>0 //23.01.2018
		тогда //+++ 13.09.2017 скрытая копия >> будет попадать в папку >> Отправленные!
		Письмо.СлепыеКопии.Добавить("1c@yst.ru");
	КонецЕсли;

	// Сакулина
	 Если Уведомления = Истина Тогда
		 Письмо.УведомитьОДоставке = Истина;
		 Письмо.УведомитьОПрочтении = Истина;
		 Письмо.АдресаУведомленияОДоставке.Добавить(УЗ.АдресЭлектроннойПочты);
		 Письмо.АдресаУведомленияОПрочтении.Добавить(УЗ.АдресЭлектроннойПочты);
	 КонецЕсли;
	 //Сакулина
	 	 
	//+++( 19.12.2011 - разбор адреса на несколько адресов
	i = Найти(АдресПолучателя,";"); j=Найти(АдресПолучателя, ",");
	k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
	
	Если i=0 и j=0 тогда
		Письмо.Получатели.Добавить(СокрЛП(АдресПолучателя)); //31.01.2018 !!! не понимает лишних пробелов!
	иначе
		АдрОстаток = СокрЛП(АдресПолучателя);
		пока (k>0) цикл
			Адр1 = Лев(АдрОстаток, k-1);
			Если СокрЛП(Адр1)<>"" и Найти(Адр1,"@")>0 и Найти(Адр1,".")>0 тогда
				Письмо.Получатели.Добавить(Адр1);
			КонецЕсли;
			АдрОстаток = Прав(АдрОстаток, стрДлина(АдрОстаток)-k);
			i = Найти(АдрОстаток,";"); j=Найти(АдрОстаток, ",");
			k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
		КонецЦикла;
		Если СокрЛП(АдрОстаток)<>"" и Найти(АдрОстаток,"@")>0 и Найти(АдрОстаток,".")>0 тогда
			Письмо.Получатели.Добавить(сокрЛП(АдрОстаток)); //31.01.2018 !!! не понимает лишних пробелов!
		КонецЕсли;
		
	КонецЕсли; //+++ )
	
	Если ЗначениеЗаполнено(СписокФайловВложений) И СписокФайловВложений.Количество()>0 Тогда
		Для Каждого ТекАдр Из СписокФайловВложений Цикл
			Письмо.Вложения.Добавить(ТекАдр.Значение);
		КонецЦикла;
	КонецЕсли;
	//Письмо.АдресаУведомленияОДоставке.Добавить(УЗ.АдресЭлектроннойПочты);
	//Письмо.АдресаУведомленияОПрочтении.Добавить(УЗ.АдресЭлектроннойПочты);
	
	Письмо.Тема= Тема;
	Если УЗ.АдресЭлектроннойПочты = "formula.auto.plus@yandex.ru" Тогда
		Письмо.ИмяОтправителя ="ООО ""Формула Авто Плюс""";
		Письмо.Организация ="ООО ""Формула Авто Плюс""";
	Иначе
		Письмо.ИмяОтправителя ="ЗАО ТК ""Яршинторг""";    //17.05.2018   убран  г.Ярославль
		Письмо.Организация ="ЗАО ТК ""Яршинторг""";
	КонецЕсли;
	
	Письмо.Тексты.Добавить(СокрЛП(ТекстСообщения),ТипТекстаПочтовогоСообщения.простойТекст);
	
	Почта=Новый ИнтернетПочта;
	попытка
		Почта.Подключиться(ИПП);
		Почта.Послать(Письмо);
		Почта.Отключиться();
		#Если Клиент Тогда
			сообщить(" >>>  Письмо отправлено на эл.адрес: "+АдресПолучателя+". "+строка(СписокФайловВложений.Количество())+" вложенных файлов...", СтатусСообщения.Информация);
		#КонецЕсли
	исключение
		Почта.Отключиться();
		#Если Клиент Тогда
			сообщить("xxxxx Ошибка при отправке письма на эл.адрес: "+АдресПолучателя+" - "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли
	конецПопытки;
КонецПроцедуры

Функция ОписаниеОрганизацииСервер(СписокСведений, Список = "", СПрефиксом = Истина)
	
	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ОГРН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли; 
	
	Результат = "";
	
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", " ");
	СоответствиеПараметров.Вставить("ИНН",        " ИНН ");
	СоответствиеПараметров.Вставить("КПП",        " КПП ");
	СоответствиеПараметров.Вставить("ОГРН",        " ОГРН ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   " ");
	СоответствиеПараметров.Вставить("Телефоны",   " тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета", " р/с ");
	СоответствиеПараметров.Вставить("Банк",       " в банке ");
	СоответствиеПараметров.Вставить("БИК",        " БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",   " к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",  " Код по ОКПО ");
	
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 по ЧислоПараметров Цикл
		
		ПозЗапятой = Найти(Список, ",");
		
		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);
				
				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;
				
				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 
				
				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СокрЛП(Результат);
	
КонецФункции // ОписаниеОрганизацииСервер()

Функция ОтветственныеЛицаОрганизацииСервер(Организация, ДатаСреза, Исполнитель = Неопределено)
	
	Результат = Новый Структура("Руководитель, РуководительДолжность, ГлавныйБухгалтер, Кассир, Исполнитель, ИсполнительДолжность, ОтветственныйЗаРегистры");
	
	Если Организация <> Неопределено тогда
		
		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.Текст = "
		|ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОПолное
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацииСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.Руководитель Тогда
				Результат.Руководитель            = Выборка.ФИОПолное;
				Результат.РуководительДолжность   = Выборка.Должность;
				
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;
				
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.Кассир Тогда
				Результат.Кассир                  = Выборка.ФИОПолное;
				
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.ОтветственныйЗаНалоговыеРегистры Тогда
				Результат.ОтветственныйЗаРегистры = Выборка.ФИОПолное;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Исполнитель <> Неопределено тогда
			
			ЗапросПоИсполнителям = Новый Запрос();
			ЗапросПоИсполнителям.УстановитьПараметр("Организация",         Организация);
			ЗапросПоИсполнителям.УстановитьПараметр("ДатаСреза",           ДатаСреза);
			ЗапросПоИсполнителям.УстановитьПараметр("Исполнитель",         Исполнитель);
			ЗапросПоИсполнителям.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
			ЗапросПоИсполнителям.Текст = "
			|ВЫБРАТЬ
			|	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
			|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL ТОГДА
			|		РаботникиОрганизацииСрезПоследних.Физлицо.Наименование
			|	ИНАЧЕ
			|		ФИОФизЛицСрезПоследних.Фамилия
			|		+	ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" ТОГДА
			|				"" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|			ИНАЧЕ
			|				""""
			|			КОНЕЦ
			|		+ 	ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" ТОГДА
			|				"" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|			ИНАЧЕ
			|				""""
			|			КОНЕЦ
			|		КОНЕЦ КАК ФИОПолное
			|ИЗ
			|	РегистрСведений.РаботникиОрганизации.СрезПоследних(&ДатаСреза, ПодразделениеОрганизации.Владелец = &Организация И ФизЛицо = &Исполнитель) КАК РаботникиОрганизацииСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
			|		ПО РаботникиОрганизацииСрезПоследних.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
			|
			|ГДЕ
			|	РаботникиОрганизацииСрезПоследних.Приказ.ВидЗанятости = &ОсновноеМестоРаботы";
			ВыборкаИсполнителей = ЗапросПоИсполнителям.Выполнить().Выбрать();
			
			Если ВыборкаИсполнителей.Следующий() тогда
				Результат.ИсполнительДолжность = ВыборкаИсполнителей.Должность;
				Результат.Исполнитель          = ВыборкаИсполнителей.ФиоПолное;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтветственныеЛицаОрганизации()

Функция ПолучитьНомерНаПечатьСервер(Документ)
	
	Если Документ = Неопределено Тогда 
		Возврат 0;
	КонецЕсли;
	
	Номер = СокрЛП(Документ.Номер);
	
	Префикс = "";
	Если ТипЗнч(Документ) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Если НЕ ЗначениеНеЗаполнено(Документ.Организация) Тогда
			Префикс = СокрЛП(Документ.Организация.Префикс);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("Структура") Тогда
		
		Префикс     = СокрЛП(Документ.Организация.Префикс);
		
	Иначе
		
		МетаданныеДокумента = Документ.Метаданные();
		
		Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
			
			Если НЕ ЗначениеНеЗаполнено(Документ.Организация) Тогда
				Префикс = СокрЛП(Документ.Организация.Префикс);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// удаление префикса из номера документа
	Если Найти(Номер, Префикс)=1 Тогда 
		Номер = Сред(Номер, СтрДлина(Префикс)+1);
	КонецЕсли;
	
	// так же, может остаться "минус" впереди
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;
	
	// удаление ведущих нулей
	Пока Лев(Номер, 1)="0" Цикл
		Номер=Сред(Номер, 2);
	КонецЦикла;
	
	Возврат Номер;
	
КонецФункции // ПолучитьНомерНаПечать()

Функция ПредставлениеСерийСервер(Выборка)
	
	Результат = "(";
	
	Если НЕ ЗначениеНеЗаполнено(Выборка.Характеристика) Тогда
		Результат = Результат + Выборка.Характеристика;
	КонецЕсли;
	
	Если НЕ ЗначениеНеЗаполнено(Выборка.Серия) Тогда
		Результат = ?(Результат = "(", Результат, Результат + "; ");
		Результат = Результат + Выборка.Серия;
	КонецЕсли;
	
	Результат = Результат + ")";
	
	Возврат ?(Результат = "()", "", " " + Результат)
	
КонецФункции // ПредставлениеСерий()

//Орлов--
//Смирнов
Процедура ОповещениеОПриходеКонтейнера() Экспорт
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Оповестить о приходе контейнера"); 
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
		ОбработкаОповеститьОПриходеКонтейнера = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
	Иначе 
		ОбработкаОповеститьОПриходеКонтейнера = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
	КонецЕсли; 
	ОбработкаОповеститьОПриходеКонтейнера.ОповеститьОПриходе();
КонецПроцедуры


Процедура ПодпискаНаСобытиеПриЗаписиПоступления(Источник, Отказ) Экспорт
	Если не Источник.Подразделение.ВЭД Тогда
		ЕстьКрышки=ложь;
		Если не Источник.флНапоминание тогда
			Для каждого стр из Источник.Товары Цикл
				Если Найти(стр.Номенклатура.Наименование,"LegeArtis")>0 тогда
					ЕстьКрышки=истина;
					прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если ЕстьКрышки и Источник.Дата >Дата("20140601") тогда
				ДокСобытие=Документы.Событие.СоздатьДокумент();
				ДокСобытие.ТипСобытия=Перечисления.ВходящееИсходящееСобытие.Входящее;
				ДокСобытие.ВидСобытия=Перечисления.ВидыСобытий.Прочее;
				ДокСобытие.ВидОбъекта=Перечисления.ВидыОбъектовСобытия.Контрагент;
				ДокСобытие.Контрагент=Источник.Контрагент;
				ДокСобытие.Основание=Источник.Ссылка;
				ДокСобытие.Важность=Перечисления.Важность.Высокая;
				ДокСобытие.СостояниеСобытия=Перечисления.СостоянияСобытий.Запланировано;
				ДокСобытие.НапомнитьОСобытии=Истина;
				ДокСобытие.ВремяНапоминания=Источник.Дата;
				ДокСобытие.Дата=ТекущаяДата();
				ДокСобытие.НачалоСобытия=Источник.Дата;
				ДокСобытие.ОкончаниеСобытия=КонецДня(Источник.Дата)+2*24*60*60;
				ДокСобытие.ОписаниеСобытия="Проверить крышки";
				ДокСобытие.СодержаниеСобытия="Проверить крышки в поступлении.";
				ДокСобытие.Ответственный=Справочники.Пользователи.НайтиПоНаименованию("ГСП");
				ДокСобытие.Записать(РежимЗаписиДокумента.Проведение);
				Источник.флНапоминание=истина;
				Источник.Записать();
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

//+++ 17.08.2015 - во всех документах - ответственный - последний, кто записывает!
// по просьбе Оксаны Петровны Межерицкой от 14.08.2015
Процедура ПодпискаНаСобытиеПередЗаписьюДокумента(Источник, Отказ) Экспорт
	// для документов из Store, Terminal и др. сервисов - ничего не меняется!
	#Если Клиент тогда
		Если ТипЗнч(Источник)<>Тип("ДокументОбъект.ЗаказПокупателя") Тогда
			
			Если ЕстьРеквизитДокумента("Ответственный", Источник.метаданные() ) тогда // только для документов где есть Ответственный
				
				Если не ЗначениеЗаполнено(глТекущийПользователь) тогда
					глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Робот (магазин)");  
				КонецЕсли;
				
				Если Источник.ЭтоНовый() тогда
					
					Если НЕ ( ТипЗнч(Источник)=Тип("ДокументОбъект.Событие") ) тогда 	
						Источник.Ответственный = глТекущийПользователь;
					Иначе//событие - только если еще нет Ответственного!
						Если Источник.Ответственный.пустая() тогда
							Источник.Ответственный = глТекущийПользователь;
						КонецЕсли;
					КонецЕсли;
					
					//+++ 06.10.2015 - ВЫКЛЮЧЕНО для не новых!
					
					// 20.08.2015 - по просьбе Коротковой - не менять ответственного в этих типах документов
					//ИначеЕсли НЕ (ТипЗнч(Источник)=Тип("ДокументОбъект.ЗаданиеНаОтгрузку") 
					//	 или ТипЗнч(Источник)=Тип("ДокументОбъект.ЗаявкаНаВозвратТоваров") 
					//	 или ТипЗнч(Источник)=Тип("ДокументОбъект.ЗаявкаНаРасходованиеСредств")  // 07.09.2015
					//		)тогда
					//	Источник.Ответственный = глТекущийПользователь;
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЕсли;
		
		//Плотников, 24.05.2017
		Если ТипЗнч(Источник)<>Тип("ДокументОбъект.ЗаказПокупателя") и ТипЗнч(Источник)<>Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			Если ЕстьРеквизитТабЧастиДокумента("СтатьяЗатрат", Источник.метаданные(),"Товары" ) Тогда
				Для каждого стр из Источник.Товары Цикл
					Если стр.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоКоду("А0104") 
						и не ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "Межерицкая" 
						и не ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "Пятницкая" Тогда
						отказ = Истина;
						Сообщить("Вам нельзя использовать статью затрат ""Прочие расходы""!!!");
					КонецЕсли;	
				КонецЦикла;	
			ИначеЕсли ЕстьРеквизитТабЧастиДокумента("СтатьяЗатрат", Источник.метаданные(),"Материалы" ) Тогда
				Для каждого стр из Источник.Материалы Цикл
					Если стр.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоКоду("А0104") 
						и не ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "Межерицкая" 
						и не ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "Пятницкая" Тогда
						отказ = Истина;
						Сообщить("Вам нельзя использовать статью затрат ""Прочие расходы""!!!");
					КонецЕсли;	
				КонецЦикла;
			ИначеЕсли ЕстьРеквизитТабЧастиДокумента("СтатьяЗатрат", Источник.метаданные(),"Затраты" ) Тогда
				Для каждого стр из Источник.Затраты Цикл
					Если стр.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоКоду("А0104") 
						и не ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "Межерицкая" 
						и не ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "Пятницкая" Тогда
						отказ = Истина;
						Сообщить("Вам нельзя использовать статью затрат ""Прочие расходы""!!!");
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	#КонецЕсли
	
	
КонецПроцедуры	


Процедура ЗагрузитьКурсыВалют() Экспорт
	Валюты=Новый СписокЗначений;
	Валюты.Добавить(Справочники.Валюты.НайтиПоКоду("840"));
	Валюты.Добавить(Справочники.Валюты.НайтиПоКоду("978"));
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	КурсыВалютСрезПоследних.Период КАК Период
	             |ИЗ
	             |	РегистрСведений.КурсыВалютДляПоступления.СрезПоследних(, Валюта В (&Валюты)) КАК КурсыВалютСрезПоследних
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Период УБЫВ";
	Запрос.УстановитьПараметр("Валюты",Валюты);				 
	Рез=Запрос.Выполнить().Выбрать();	
	ПоследняяДатаВалют=НачалоДня(ДобавитьМесяц(ТекущаяДата(),-1));
	Пока Рез.Следующий() Цикл
		ПоследняяДатаВалют=НачалоДня(Рез.Период);
	КонецЦикла;	
	
	Обр=Обработки.КурсыВалютРБК.Создать();
	Обр.НачДата=ПоследняяДатаВалют;
	Обр.КонДата=ТекущаяДата();
	
	Для Каждого эл из Валюты Цикл
		Нстр=Обр.СписокВалют.Добавить();
		нстр.Валюта= эл.Значение;
	КонецЦикла;
	
	Обр.ЗагрузитьКурсыСРБК(0,"",Истина);
	Обр.ЗагрузитьКурсыСРБК(0,"");
КонецПроцедуры

Процедура ОповещениеОПриходеКонтейнеровВСледМесяце() Экспорт
	Попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Оповестить о приходе контейнеров в след месяце"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			ОбработкаОповеститьОПриходеКонтейнера = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			ОбработкаОповеститьОПриходеКонтейнера = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли; 
		ОбработкаОповеститьОПриходеКонтейнера.ОповеститьПоПодразделениям();
	Исключение
		ЗаписьЖурналаРегистрации("Обработка <Оповестить о приходе контейнеров в след месяце>",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
КонецПроцедуры

Процедура ОповещениеОПриходеКонтейнеровПоЗаданиюНаОтгрузку() Экспорт
	попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Оповестить о приходе контейнера по заданию на отгр"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			ОбработкаОповеститьОПриходеКонтейнера = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			ОбработкаОповеститьОПриходеКонтейнера = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли; 
		ОбработкаОповеститьОПриходеКонтейнера.ОповеститьПоПодразделениям();
	Исключение
		ЗаписьЖурналаРегистрации("Обработка <Оповестить о приходе контейнера по заданию на отгр>",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
КонецПроцедуры

	Процедура ЗагрузитьЗаявкиНаБракССайта() Экспорт
	попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Получить заявки на брак"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			ОбработкаОповеститьОПриходеКонтейнера = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			ОбработкаОповеститьОПриходеКонтейнера = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли; 
		ОбработкаОповеститьОПриходеКонтейнера.ПолучитьЗаявкиНаБрак();
	Исключение
		ЗаписьЖурналаРегистрации("Обработка <Получить заявки на брак>",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
КонецПроцедуры

Процедура НапоминаниеСоздатьСезонныйЗаказПоставщику() Экспорт
	попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Напоминание о сезонных заказах поставщикам"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			ОбработкаОповеститьОПриходеКонтейнера = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			ОбработкаОповеститьОПриходеКонтейнера = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли; 
		ОбработкаОповеститьОПриходеКонтейнера.ОповеститьПоПодразделениям();
	Исключение
		ЗаписьЖурналаРегистрации("Обработка <Напоминание о сезонных заказах поставщикам>",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
КонецПроцедуры

Процедура НапоминаниеЗакрытьСезонныйЗаказПоставщику() Экспорт
	
	Попытка
		ТекСсылка = Справочники.ВнешниеОбработки.НайтиПоКоду("332");  //Напоминание о заканчивающихся сезонных заказах поставщику
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			ОбработкаОповеститьОПриходеКонтейнера = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			ОбработкаОповеститьОПриходеКонтейнера = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли; 
		ОбработкаОповеститьОПриходеКонтейнера.ОповеститьПоПодразделениям();
	Исключение
		ЗаписьЖурналаРегистрации("Обработка <Напоминание о заканчивающихся сезонных заказах поставщикам>",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
	
КонецПроцедуры

//Смирнов

//+++ 27.02.2015 --- по программе Топаз АЗС -> регистр сведений ОстаткиТоплива 
 функция ПолучитьОстатокТоплива(Период, Танкер=0) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ОстаткиТоплива.Количество) КАК Количество,
	               |	СУММА(ОстаткиТоплива.Стоимость) КАК Стоимость
	               |ИЗ
	               |	РегистрСведений.ОстаткиТоплива КАК ОстаткиТоплива
	               |ГДЕ
	               |	ОстаткиТоплива.Период < &Период
	               |	"+?(Танкер=0,"", "И ОстаткиТоплива.Танкер = &Танкер")+"
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОстаткиТоплива.Танкер";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Танкер", Танкер);
	Результат = Запрос.Выполнить();
	
	табл = Результат.Выгрузить();
	возврат табл;
	 
 КонецФункции	

 Процедура НапоминаниеДатаОплатыШинтрейд() Экспорт
		попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Напоминание об оплате Шинтрейд"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			ОбработкаОповеститьОбОплатеШинтрейд = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			ОбработкаОповеститьОбОплатеШинтрейд = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли; 
		ОбработкаОповеститьОбОплатеШинтрейд.НапомнитьОЗадолженности(НачалоДня(ТекущаяДата()));
	Исключение
		ЗаписьЖурналаРегистрации("Обработка <ОбработкаОповеститьОбОплатеШинтрейд>",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
КонецПроцедуры

// АЧ для регламентных заданий. 
// 1. Судебные дела
// 2. Оповещения о сроке доверенностей
// 3. Оповещения о судебных делах. 
Процедура ЗагрузитьДанныепоСудебнымДеламССайта() Экспорт
	// Судебные 
	попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(366);// "Загрузить данные по судебным делам"  // 434 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			ОбработкаполучитьСД = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			ОбработкаполучитьСД = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли; 
		ОбработкаполучитьСД.ПолучитьСудебныеДела();
	Исключение
		ЗаписьЖурналаРегистрации("Обработка <Получить данные по судебным разбирательствам>",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
	
	попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(434); //"Оповещения о судебных делах" // 366 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			ОбработкаОповещениеОСД = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			ОбработкаОповещениеОСД = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли; 
		ОбработкаОповещениеОСД.ОповеститьМенеджеров(); //+++ 03.03.2016
	Исключение
		ЗаписьЖурналаРегистрации("Обработка <Оповещение о полученных СД>",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
	
	//попытка   //------------------------НЕТ ТАКОЙ обработки!--------------------------
	//	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Оповещения менеджеров о просрочке доверенностей."); 
	//	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	//	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	//	ДвоичныеДанные.Записать(ИмяФайла); 
	//	Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
	//		ОбработкаОповещениеОПросроченныхДоверенностях = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
	//	Иначе 
	//		ОбработкаОповещениеОПросроченныхДоверенностях = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
	//	КонецЕсли; 
	//	ОбработкаОповещениеОПросроченныхДоверенностях.Оповестить();
	//Исключение
	//	ЗаписьЖурналаРегистрации("Обработка <Оповещение по просроченным доверенностям>",
	//	УровеньЖурналаРегистрации.Информация,
	//	,
	//	,
	//	ОписаниеОшибки(),
	//	);
	//КонецПопытки;
	
КонецПроцедуры

Процедура ПоступленияОтОтветчиковПоСудам() Экспорт
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвиженияДенежныхСредствОбороты.ДокументДвижения,
		|	ДвиженияДенежныхСредствОбороты.СуммаУпрОборот,
		|	ДвиженияДенежныхСредствОбороты.СуммаОборот,
		|	ДвиженияДенежныхСредствОбороты.Контрагент
		|ИЗ
		|	РегистрНакопления.ДвиженияДенежныхСредств.Обороты(
		|			&НачПериода,
		|			&КонПериода,
		|			Регистратор,
		|			Контрагент В
		|					(ВЫБРАТЬ
		|						КатегорииОбъектов.Объект
		|					ИЗ
		|						РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|					ГДЕ
		|						КатегорииОбъектов.Категория = &Категория)
		|				И ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)) КАК ДвиженияДенежныхСредствОбороты";
	
	Запрос.УстановитьПараметр("Категория", Справочники.КатегорииОбъектов.НайтиПоКоду("00035"));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));
	Если  ДеньНедели(ТекущаяДата()) = 1 Тогда
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата())-3*24*60*60);
	иначе	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата())-24*60*60);
    КонецЕсли;	
	РезультатЗапроса = Запрос.Выполнить();
	
Если не РезультатЗапроса.Пустой() Тогда
	НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	НоваяЗадача.Исполнитель  = Справочники.Пользователи.НайтиПоКоду("Черемухина А.В.");
	НоваяЗадача.Наименование = "Сегодня были поступления от ответчиков по судам";
	НоваяЗадача.Дата = ТекущаяДата();
	НоваяЗадача.Оповещение   = Истина;
	НоваяЗадача.СрокОповещения = ТекущаяДата()+60;
	Для каждого стр из РезультатЗапроса.Выгрузить()Цикл
		НоваяЗадача.Описание = НоваяЗадача.Описание+
		Стр.Контрагент+" сумма "+Стр.СуммаУпрОборот+"руб. "+Стр.ДокументДвижения + Символы.ПС;
	КонецЦикла;	
	глТекущийпользователь = Справочники.Пользователи.НайтиПоКоду("Черемухина А.В.");
    НоваяЗадача.Записать();

КонецЕсли;

КонецПроцедуры


Процедура ПроверкаАктуальностиПечатныхФорм() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПечатныеФормыВНаличии.Документ,
		|	ПечатныеФормыВНаличии.ВидПечатнойФормы
		|ИЗ
		|	РегистрСведений.ПечатныеФормыВНаличии КАК ПечатныеФормыВНаличии
		|ГДЕ
		|	ПечатныеФормыВНаличии.Документ.Контрагент <> ПечатныеФормыВНаличии.Контрагент
		|	И ПечатныеФормыВНаличии.Документ.СуммаДокумента <> ПечатныеФормыВНаличии.Сумма";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	НаборЗаписей = РегистрыСведений.ПечатныеФормыВНаличии.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.отбор.видПечатнойФормы.Установить(Выборка.ВидПечатнойформы);
			НаборЗаписей.Прочитать(); 
			НаборЗаписей.Удалить(0);
	КонецЦикла;
	
конецПроцедуры	

Функция ЕстьПеремещение(ссылка) Экспорт
	Запрос = Новый Запрос("Выбрать Ссылка из Документ.Перемещениетоваров.товары где документрезерва=&Заказ");
	Запрос.УстановитьПараметр("Заказ",Ссылка);
	
	Выб = Запрос.Выполнить().Выбрать();
	
	Если выб.Следующий() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат ложь;
КонецФункции

// АЧ снять [v]Автокомплектация при закрытии заказов покупателей
//          (при наличие ссылки на Сезонный заказ покупателя)
//
//+++ 08.07.2016 - переделано кардинально... через 1 запрос
//
//1. ЗаказПокупателя в списке по документу
//2. у заказа есть не пустой документ-основание
//3. Контрагент - не филиал
//
Процедура СнятьАвтокомплектациюПоСезоннымЗаказамПокупателя(ДокЗакрытие1,ДокЗакрытие2) Экспорт
	
	//ДокЗакрытие1 и ДокЗакрытие2 - делается одно и то же
	масДок = новый Массив; 
	масДок.Добавить(ДокЗакрытие1);
	масДок.Добавить(ДокЗакрытие2);
	
	//3. Список клиентов по филиалам - НЕ делаем выключения автокомплектаций!
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Подразделения.Контрагент
	  |ИЗ Справочник.Подразделения КАК Подразделения
	  |ГДЕ Подразделения.ОбособленноеПодразделение";
	Результат = Запрос.Выполнить();
	таблФилиалов = Результат.Выгрузить();
	массивФилиалов = таблФилиалов.ВыгрузитьКолонку("Контрагент");

	для i=0 по масДок.Количество()-1 цикл	
		
		ДокЗакрытия = масДок[i];
		//Если НЕ (ДокЗакрытия.Проведен) Тогда  //----------------------
		//  продолжить;
		//КонецЕсли;		 
		 
		 массивЗаказов = ДокЗакрытия.Заказы.выгрузитьКолонку("ЗаказПокупателя");
		 
		 //-------------------ВСЕ УСЛОВИЯ В ОДНОМ ЗАПРОСЕ!----------------------
		 //1. ЗаказПокупателя в списке по документу
		 //2. у заказа есть не пустой документ-основание
		 //3. Контрагент - не филиал
		 Запрос = Новый Запрос;
		 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                |	ЗаказыПокупателейОстатки.ЗаказПокупателя,
		                |	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДокументОснование  как ДокументСезонногоЗаказапокупателя
		                |ИЗ
		                |	РегистрНакопления.ЗаказыПокупателей.Остатки( ,
		               	|	ЗаказПокупателя В (&СписокЗаказов)
		                | 	и НЕ ЗаказПокупателя.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПокупателяСезонный.ПустаяСсылка)
						|	И НЕ ДоговорКонтрагента.Владелец В (&массивФилиалов)) КАК ЗаказыПокупателейОстатки
		                |ГДЕ
		                |	ЗаказыПокупателейОстатки.СуммаУпрОстаток = ЗаказыПокупателейОстатки.ЗаказПокупателя.СуммаДокумента";
						
		 Запрос.УстановитьПараметр("СписокЗаказов",  массивЗаказов);
		 Запрос.УстановитьПараметр("массивФилиалов", массивФилиалов);
		 
		 Результат = Запрос.Выполнить();
		 Стрх = Результат.Выбрать();	 
		 
		//+++ 08.07.2016
		Пока Стрх.Следующий() цикл
			
			ДокументСезонногоЗаказапокупателя = Стрх.ДокументСезонногоЗаказапокупателя;
			Попытка 
				ОбъектДокументСезонногоЗаказапокупателя = ДокументСезонногоЗаказапокупателя.ПолучитьОбъект();
				//19.12.16 Смирнов, чтоб в закрытом периоде можно было убирать галку автокомплектация
				ОбъектДокументСезонногоЗаказапокупателя.ОбменДанными.Загрузка = Истина;
				ОбъектДокументСезонногоЗаказапокупателя.АвтоКомплектация = Ложь;
				ОбъектДокументСезонногоЗаказапокупателя.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;

		КонецЦикла;
	
	КонецЦикла; 
	
КонецПроцедуры 


Процедура ОтправитьУведомлениеМенеджерамОЗакрытии(ДокЗакрытие1,ДокЗакрытие2) Экспорт
	
	ТаблицаМенеджеровИЗаказов = Новый ТаблицаЗначений;
	ТаблицаМенеджеровИЗаказов.Колонки.Добавить("Менеджер");
	ТаблицаМенеджеровИЗаказов.Колонки.Добавить("ЗаказПокупателя");
	
	Если (ТипЗнч(ДокЗакрытие1)=ТипЗнч(Документы.ЗакрытиеЗаказовПокупателей.ПустаяСсылка())) и ЗначениеЗаполнено(ДокЗакрытие1) и (ДокЗакрытие1.Проведен) Тогда 
		Для каждого Стрх из ДокЗакрытие1.заказы Цикл
			Если (ТипЗнч(СтрХ.ЗаказПокупателя) = ТипЗнч(Документы.ЗаказПокупателя.ПустаяСсылка())) и ЗначениеЗаполнено(СтрХ.ЗаказПокупателя) Тогда 
				СтрУ = ТаблицаМенеджеровИЗаказов.Добавить();
				СтрУ.Менеджер = СтрХ.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо;
				СтрУ.ЗаказПокупателя = СтрХ.ЗаказПокупателя;
			КонецЕсли;
		КонеЦЦикла;
	КонецЕсли;
	
	Если (ТипЗнч(ДокЗакрытие2)=ТипЗнч(Документы.ЗакрытиеЗаказовПокупателей.ПустаяСсылка())) и ЗначениеЗаполнено(ДокЗакрытие2) и (ДокЗакрытие2.Проведен) Тогда 
		Для каждого Стрх из ДокЗакрытие2.заказы Цикл
			Если (ТипЗнч(СтрХ.ЗаказПокупателя) = ТипЗнч(Документы.ЗаказПокупателя.ПустаяСсылка())) и ЗначениеЗаполнено(СтрХ.ЗаказПокупателя) Тогда 
				СтрУ = ТаблицаМенеджеровИЗаказов.Добавить();
				СтрУ.Менеджер = СтрХ.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо;
				СтрУ.ЗаказПокупателя = СтрХ.ЗаказПокупателя;
			КонецЕсли;
		КонеЦЦикла;
	КонецЕсли;
	
	ТаблицаМенеджеровИЗаказов.Сортировать("Менеджер,ЗаказПокупателя");
	
	ТаблицаМенеджеров = ТаблицаМенеджеровИЗаказов.Скопировать();
	ТаблицаМенеджеров.Свернуть("Менеджер");
	
	Для каждого Менеджер из ТаблицаМенеджеров Цикл
		Отбор = новый Структура;
		Отбор.Вставить("Менеджер",Менеджер.Менеджер);
		МассивЗаказов = ТаблицаМенеджеровИЗаказов.НайтиСтроки(Отбор);
		СтрокаЗаказов = "По менеджеру " + Менеджер.Менеджер + " закрыты следующие заказы:";
		ТаблицаЗаказов = Новый ТаблицаЗначений;
		ТаблицаЗаказов.Колонки.Добавить("Документ");
		Для каждого Заказ из МассивЗаказов Цикл
			стр= ТаблицаЗаказов.Добавить();
			стр.Документ = Заказ.Заказпокупателя;
			СтрокаЗаказов = СтрокаЗаказов + " "+Заказ.Заказпокупателя.номер + " "; 				
		КонецЦикла;
		СоздатьДокументОповещения(Менеджер.Менеджер,СтрокаЗаказов,ТаблицаЗаказов);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументОповещения(Менеджер,СтрокаЗаказов,ТаблицаЗаказов)
	ДокСобытие=Документы.Событие.СоздатьДокумент();
	ДокСобытие.ТипСобытия=Перечисления.ВходящееИсходящееСобытие.Входящее;
	ДокСобытие.Важность=Перечисления.Важность.Высокая;
	ДокСобытие.ВидСобытия = Перечисления.ВидыСобытий.Прочее;
	ДокСобытие.СостояниеСобытия=Перечисления.СостоянияСобытий.Запланировано;
	ДокСобытие.НапомнитьОСобытии=Истина;
	ДокСобытие.ВремяНапоминания=НачалоДня(ТекущаяДата())+28830;//8 утра
	ДокСобытие.Дата=ТекущаяДата();
	ДокСобытие.НачалоСобытия=НачалоДня(ТекущаяДата())+28800;//8 утра
	ДокСобытие.ОкончаниеСобытия=КонецДня(ТекущаяДата())+5*24*60*60;//
	ДокСобытие.ОписаниеСобытия="Закрытие заказов покупателей";
	ДокСобытие.СодержаниеСобытия=СтрокаЗаказов;
	ДокСобытие.Ответственный=Менеджер;
	ДокСобытие.ЗаказыПокупателей.Загрузить(ТаблицаЗаказов);
	ДокСобытие.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры 


//А.А. 
процедура ОбновлениеСтатусовStore()  Экспорт
  //ПОДКЛЮЧАЕМСЯ К СЕРВЕРУ	
Попытка
Соединение = Новый HTTPСоединение("store.yst.ru:80",,"admin","cegthvfhbj" );   //"http://localhost"  50876

НачПериода = НачалоДня(ТекущаяДата())-14*24*60*60;
КонПериода = НачалоДня(ТекущаяДата());

НП = Формат(НачПериода,"ДФ=yyyy-MM-dd");
КП = Формат(КонПериода,"ДФ=yyyy-MM-dd");

ресурс = "api/ordersapi/get?begindate="+НП+"&enddate="+КП;

Заголовки = Новый Соответствие();
   АдресРесурса = "store.yst.ru:80"+ресурс;
// посылаем запрос
ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	   Заголовки.Вставить("HASH", "D5790E89580D8B75927F804E738CFCE");  
	   Заголовки.Вставить("Accept", "application/xml");  
	   //  http://terminal.yst.ru
		HTTPзапрос = Новый HTTPЗапрос("/"+Ресурс, Заголовки);
		HTTPОтвет = Соединение.Получить( HTTPзапрос, ИмяФайлаРезультата);

Соединение = Неопределено; // разорвать соединение

 ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
 ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
 СтрокаJSONРезультат = ТекстовыйФайлОтвет.ПолучитьТекст();
 ТекстовыйФайлОтвет = неопределено; // отключается от файла
 

Если HTTPОтвет.КодСостояния = 200 тогда
	рез = Истина;
Иначе
	рез = ЛОЖЬ;
КонецЕсли;

исключение
	рез = ЛОЖЬ;
КонецПопытки;

// ЧИТАЕМ ВЫГРУЗКУ С Сайта	
 ЧтениеXML = Новый ЧтениеXML;
 ЧтениеXML.ОткрытьФайл(ИмяФайлаРезультата);
 
КЧ = Новый КвалификаторыЧисла(12,2);
КС = Новый КвалификаторыСтроки(20);
Массив = Новый Массив;
Массив.Добавить(Тип("Строка"));
ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
Массив.Очистить();
Массив.Добавить(Тип("Число"));
ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
 
 ТаблицаЗаказа = Новый ТаблицаЗначений;
 ТаблицаЗаказа.Колонки.Добавить("Номер",ОписаниеТиповС );
 ТаблицаЗаказа.Колонки.Добавить("СтатусStor",ОписаниеТиповЧ);
 ТаблицаЗаказа.Колонки.Добавить("СуммаЗаказаStor",ОписаниеТиповЧ);
 
 Запись = Новый Структура;
 
 Пока ЧтениеXML.Прочитать() Цикл
  Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
   Имя = ЧтениеXML.Имя;
  КонецЕсли;
  Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
   Запись.Вставить(Имя, ЧтениеXML.Значение);      //информацию внутри блока XML помещаем в структуру
  КонецЕсли;
  Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
   Если ЧтениеXML.Имя = "order" Тогда
    СтрокаТЗ = ТаблицаЗаказа.Добавить();
    СтрокаТЗ.Номер = Запись.num;
    СтрокаТЗ.статусStor = Число(Запись.st);
    СтрокаТЗ.СуммаЗаказаStor = Число(Запись.sum);
   КонецЕсли;
  КонецЕсли;
 КонецЦикла;
 ЧтениеXML.Закрыть();	
// ФОРМИРУЕМ СВОДНУЮ ТАБЛИЦУ	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Выгрузка.Номер,
		|	Выгрузка.СтатусStor,
		|	Выгрузка.СуммаЗаказаStor
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Выгрузка КАК Выгрузка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка,
		|	ЗаказПокупателя.Проведен,
		|	ЗаказПокупателя.Дата,
		|	ЗаказПокупателя.СуммаДокумента,
		|	ЗаказПокупателя.ПометкаУдаления,
		|	ЗаказПокупателя.Номер
		|ПОМЕСТИТЬ Заказы
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЗаказПокупателя.Дата, ГОД) = НАЧАЛОПЕРИОДА(&ДатаНач, ГОД)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПокупателейОстатки.ЗаказПокупателя
		|ПОМЕСТИТЬ ОстаткиПоЗаказу
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(
		|			,
		|			ЗаказПокупателя В
		|				(ВЫБРАТЬ
		|					Заказы.Ссылка
		|				ИЗ
		|					Заказы КАК Заказы)) КАК ЗаказыПокупателейОстатки
		|ГДЕ
		|	ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток > 0
		|	И ЗаказыПокупателейОстатки.СуммаУпрОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПродажиОбороты.ЗаказПокупателя
		|ПОМЕСТИТЬ ОтгрузкиОбороты
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(
		|			,
		|			,
		|			,
		|			ЗаказПокупателя В
		|				(ВЫБРАТЬ
		|					Заказы.Ссылка
		|				ИЗ
		|					Заказы КАК Заказы)) КАК ПродажиОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ.ДокументОснование
		|ИЗ
		|	РегистрНакопления.ВнутренниеЗаказы.Остатки(
		|			,
		|			ВнутреннийЗаказ.ДокументОснование В
		|				(ВЫБРАТЬ
		|					Заказы.Ссылка
		|				ИЗ
		|					Заказы КАК Заказы)) КАК ВнутренниеЗаказыОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СтатусStor,
		|	ЕСТЬNULL(ВТ.СуммаЗаказаStor, 0) КАК СуммаЗаказаStor,
		|	ВТ.Номер,
		|	ЕСТЬNULL(Заказы.СуммаДокумента, 0) КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА Заказы.ПометкаУдаления
		|			ТОГДА 3
		|		КОГДА НЕ Заказы.Проведен
		|			ТОГДА 1
		|		КОГДА ОстаткиПоЗаказу.ЗаказПокупателя ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА ОтгрузкиОбороты.ЗаказПокупателя ЕСТЬ NULL 
		|						ТОГДА 3
		|					ИНАЧЕ 4
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ОтгрузкиОбороты.ЗаказПокупателя ЕСТЬ NULL 
		|					ТОГДА 2
		|				ИНАЧЕ 5
		|			КОНЕЦ
		|	КОНЕЦ КАК Статус,
		|	Заказы.Ссылка
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Заказы КАК Заказы
		|			ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоЗаказу КАК ОстаткиПоЗаказу
		|			ПО Заказы.Ссылка = ОстаткиПоЗаказу.ЗаказПокупателя
		|			ЛЕВОЕ СОЕДИНЕНИЕ ОтгрузкиОбороты КАК ОтгрузкиОбороты
		|			ПО Заказы.Ссылка = ОтгрузкиОбороты.ЗаказПокупателя
		|		ПО ВТ.Номер = Заказы.Номер";
		
	Запрос.УстановитьПараметр("Выгрузка",ТаблицаЗаказа);
	Запрос.УстановитьПараметр("ДатаНач",НачПериода);
	Запрос.УстановитьПараметр("ДатаКон",КонПериода);

	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого строка ИЗ Результат Цикл
		Если (строка.Статус <> строка.СтатусStor) или ((строка.СуммаДокумента - строка.СуммаЗаказаStor)>1 или (строка.СуммаДокумента - строка.СуммаЗаказаStor)<-1) Тогда	
			если  Строка.ссылка <> Null Тогда
			ДокументОбъект=Строка.ссылка.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Загрузка = истина; //+++ 19.10.2011 для перезаписи даже в закрытом периоде?!
			Попытка
			ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(ДокументОбъект,Истина);
		    исключение
			КонецПопытки;
			конецЕсли;
		конецЕсли;
	КонецЦикла;	
конецПроцедуры	

//***2016.02.01
Процедура ЗакрытиеЗаказовПоставщикам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.Текст = "ВЫБРАТЬ
				   |	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
				   |	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК ДоговорКонтрагентаОтветственноеЛицо,
				   |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
				   |	ЕСТЬNULL(ЗаказыПоставщикамОбороты.Регистратор.Дата, &ПустаяДата) КАК РегистраторДата,
				   |	ЗаказыПоставщикамОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
				   |	ЕСТЬNULL(ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200)), """") КАК АдресДляРассылки,
				   |	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстаток,
				   |	ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
				   |	ЗаказыПоставщикамОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
				   |ИЗ
				   |	РегистрНакопления.ЗаказыПоставщикам.Остатки(
				   |			&ТекущаяДата,
				   |			ВЫБОР
				   |				КОГДА ЗаказПоставщику.ДатаПоступления = &ПустаяДата
				   |					ТОГДА ЗаказПоставщику.ДатаПоступления = &ПустаяДата
				   |				ИНАЧЕ ВЫБОР
				   |						КОГДА ЗаказПоставщику.ДатаПоступления <> &ПустаяДата
				   |							ТОГДА ДОБАВИТЬКДАТЕ(ЗаказПоставщику.ДатаПоступления, МЕСЯЦ, 1) < &ТекущаяДата
				   |					КОНЕЦ
				   |			КОНЕЦ и ЕСТЬNULL(ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПоставщикамОстатки
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				   |		ПО ЗаказыПоставщикамОстатки.ДоговорКонтрагента.ОтветственноеЛицо = КонтактнаяИнформация.Объект
				   |			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя))
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Обороты(, , Регистратор,ЕСТЬNULL(ВЭД, ЛОЖЬ) = ЛОЖЬ ) КАК ЗаказыПоставщикамОбороты
				   |		ПО (ЗаказыПоставщикамОбороты.КоличествоРасход >= 0)
				   |			И ЗаказыПоставщикамОстатки.ЗаказПоставщику = ЗаказыПоставщикамОбороты.ЗаказПоставщику
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	ДоговорКонтрагентаОтветственноеЛицо,
				   |	ЗаказПоставщикуДатаПоступления
				   |ИТОГИ
				   |	МИНИМУМ(РегистраторДата),
				   |	МИНИМУМ(АдресДляРассылки),
				   |	СУММА(КоличествоОстаток),
				   |	СУММА(СуммаВзаиморасчетовОстаток),
				   |	СУММА(СуммаУпрОстаток)
				   |ПО
				   |	ДоговорКонтрагентаОтветственноеЛицо,
				   |	ЗаказПоставщику
				   |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //по менеджерам, чтоб сформировать почтовыую рассылку им
	
	Пока Результат.Следующий() Цикл
		
		СписокЗаказовДляУведомления = Новый СписокЗначений;
		
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ДокЗакрытие = Документы.ЗакрытиеЗаказовПоставщикам.СоздатьДокумент();
		ДокЗакрытие.Дата = НачалоДня(ТекущаяДата());
		ДокЗакрытие.Комментарий = "Автоматическое закрытие старых заказов поставщикам по менеджеру " + Результат.ДоговорКонтрагентаОтветственноеЛицо.Наименование;

		Пока Выборка.Следующий() Цикл
			Если Выборка.ЗаказПоставщикуДатаПоступления = Дата(1,1,1) Тогда
				Если Выборка.РегистраторДата = Дата(1,1,1) Тогда
					Если Выборка.ЗаказПоставщику.Дата < ДобавитьМесяц(НачалоДня(ТекущаяДата()), -3) Тогда
						СтрЗаказы = ДокЗакрытие.Заказы.Добавить();
						СтрЗаказы.ЗаказПоставщику = Выборка.ЗаказПоставщику;
						СтрЗаказы.ПричинаЗакрытияЗаказа = Справочники.ПричиныЗакрытияЗаказов.НайтиПоКоду("3");
					//	Если Выборка.КоличествоОстаток > 0 Тогда
							СписокЗаказовДляУведомления.Добавить(Выборка.ЗаказПоставщику);
					//	КонецЕсли;
					КонецЕсли;
				ИначеЕсли Выборка.РегистраторДата < ДобавитьМесяц(НачалоДня(ТекущаяДата()), -1) Тогда 
					СтрЗаказы = ДокЗакрытие.Заказы.Добавить();
					СтрЗаказы.ЗаказПоставщику = Выборка.ЗаказПоставщику;
					СтрЗаказы.ПричинаЗакрытияЗаказа = Справочники.ПричиныЗакрытияЗаказов.НайтиПоКоду("3");
				//	Если Выборка.КоличествоОстаток > 0 Тогда
						СписокЗаказовДляУведомления.Добавить(Выборка.ЗаказПоставщику);
				//	КонецЕсли;
				КонецЕсли;
			Иначе
				СтрЗаказы = ДокЗакрытие.Заказы.Добавить();
				СтрЗаказы.ЗаказПоставщику = Выборка.ЗаказПоставщику;
				СтрЗаказы.ПричинаЗакрытияЗаказа = Справочники.ПричиныЗакрытияЗаказов.НайтиПоКоду("3");
				//Если Выборка.КоличествоОстаток > 0 Тогда
					СписокЗаказовДляУведомления.Добавить(Выборка.ЗаказПоставщику);
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ДокЗакрытие.Заказы.Количество() > 0 Тогда
			Попытка
				ДокЗакрытие.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ДокЗакрытие.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		КонецЕсли;
		
		Если СписокЗаказовДляУведомления.Количество() > 0 И Результат.АдресДляРассылки <> "" Тогда
			Профиль = Новый ИнтернетПочтовыйПрофиль;
			Профиль.АдресСервераSMTP   = "mail.yst76.ru";
			Профиль.ПортSMTP		   = 25;
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
			Профиль.ПарольSMTP         = "";
			Профиль.ПользовательSMTP   = "";
			Письмо = Новый ИнтернетПочтовоеСообщение;
			Письмо.Отправитель = "no-reply@yst76.ru";
			//Письмо.Получатели.Добавить("fedorova@yst.ru");
			Письмо.Получатели.Добавить(СокрЛП(Результат.АдресДляРассылки));
			
			Письмо.Тема = ДокЗакрытие.Комментарий;
			ТекстПисьма = "Закрыты следующие заказы поставщикам:";
			Для каждого ЭлементСписка ИЗ СписокЗаказовДляУведомления Цикл
				ТекстПисьма = ТекстПисьма + Символы.ПС + Строка(ЭлементСписка) + " по контрагенту " + ЭлементСписка.Значение.Контрагент.Наименование;
			КонецЦикла;
			Письмо.Тексты.Добавить(ТекстПисьма,ТипТекстаПочтовогоСообщения.ПростойТекст);
			Почта = Новый ИнтернетПочта;
			
			Попытка
				Почта.Подключиться(Профиль);
				Почта.Послать(Письмо);
				Почта.Отключиться();
			Исключение
				Пауза(20);
				Почта.Подключиться(Профиль);
				Почта.Послать(Письмо);
				Почта.Отключиться();
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура Пауза(Сек)
	Попытка
		scr = Новый COMОбъект("WScript.Shell");
		scr.Run("sleep "+СокрЛП(Число(Сек)),0,1);
	Исключение
	КонецПопытки;
КонецПроцедуры

/////////Плотников Задания на перемещение розница

Процедура СоздатьЗаданияРозница() Экспорт
	
     Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("ДатаОтгрузки",НачалоДня(ТекущаяДата()));
	 Запрос.УстановитьПараметр("Дата1",НачалоДня(ТекущаяДата()-24*60*60*7));
	 Запрос.УстановитьПараметр("Дата2",КонецДня(ТекущаяДата()));
	 Запрос.УстановитьПараметр("Категория",Справочники.КатегорииОбъектов.НайтиПоКоду("00038"));
	 Запрос.УстановитьПараметр("Покупатель",Справочники.Контрагенты.НайтиПоНаименованию("Покупатель"));
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	                |	КатегорииОбъектов.Категория
	                |ПОМЕСТИТЬ Заказы
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	                |			,
	                |			ЗаказПокупателя.ДатаОтгрузки = &ДатаОтгрузки
	                |				И ЗаказПокупателя.Контрагент = &Покупатель) КАК ЗаказыПокупателейОстатки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	                |		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = КатегорииОбъектов.Объект
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.ЗаказПокупателя
	                |ПОМЕСТИТЬ Задания
	                |ИЗ
	                |	Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ЗаданиеНаПеремещениеЗаказыПокупателей
	                |ГДЕ
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	                |	И ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.Проведен = ИСТИНА
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.ЗаказПокупателя
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя
	                |ИЗ
	                |	Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
	                |ГДЕ
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	                |	И ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.Проведен = ИСТИНА
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	Заказы.ЗаказПокупателя КАК Заказ,
	                |	Заказы.Категория,
	                |	Задания.ЗаказПокупателя КАК ЗаказПокупателя1
	                |ИЗ
	                |	Заказы КАК Заказы
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Задания КАК Задания
	                |		ПО Заказы.ЗаказПокупателя = Задания.ЗаказПокупателя
	                |ГДЕ
	                |	Заказы.Категория = &категория
	                |	И Задания.ЗаказПокупателя ЕСТЬ NULL ";
					
					
	Результат = Запрос.Выполнить().Выгрузить();
		
	Если Результат.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	Задание = Документы.ЗаданиеНаПеремещение.СоздатьДокумент();
	Задание.Дата = ТекущаяДата();
	Задание.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход;
	//Задание.СкладПолучатель=Справочники.Склады.НайтиПоКоду("02124");
    ТЗАсортимента = Новый ТаблицаЗначений;
	ТЗАсортимента.Колонки.Добавить("ВидТовара");
	
	НадписьКатегорий = "Интернет-Магазин";
	Водитель = Справочники.ФизическиеЛица.НайтиПоКоду("");
	ДатаФормы = ТекущаяДата();
	
	Для iii = 0 по Результат.Количество()-1 Цикл
		СтрокаЗаказа = Результат[iii];
		СтрокаЗадания = Задание.ЗаказыПокупателей.Добавить();
		СтрокаЗадания.ЗаказПокупателя   = СтрокаЗаказа.Заказ;
		СтрокаЗадания.КоличествоПозиций = СтрокаЗаказа.Заказ.Товары.Количество();
		СтрокаЗадания.КоличествоШтук    = СтрокаЗаказа.Заказ.Товары.Итог("Количество");
		Задание.НомераЗаявокВСтроку     = ?(СтрДлина(Задание.НомераЗаявокВСтроку) > 0, Задание.НомераЗаявокВСтроку+", "+СтрокаЗаказа.Заказ.Номер, СтрокаЗаказа.Заказ.Номер);  
		Для Каждого Товар Из СтрокаЗаказа.Заказ.Товары Цикл
			Если ЗначениеЗаполнено(Товар.Номенклатура.ВидТовара) Тогда
				Если ТЗАсортимента.Найти(Товар.Номенклатура.ВидТовара, "ВидТовара") = Неопределено Тогда
					НоваяСтрокаТЗАсортимента = ТЗАсортимента.Добавить();
					НоваяСтрокаТЗАсортимента.ВидТовара = Товар.Номенклатура.ВидТовара;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТЗАсортимента Из ТЗАсортимента Цикл
		Задание.Ассортимент = ?(СтрДлина(Задание.Ассортимент) > 0, Задание.Ассортимент+", "+СтрокаТЗАсортимента.ВидТовара, СтрокаТЗАсортимента.ВидТовара);
	КонецЦикла;
	
	Задание.ИтогКоличествоПозиций = Задание.ЗаказыПокупателей.Итог("КоличествоПозиций");
	Задание.ИтогКоличествоШтук    = Задание.ЗаказыПокупателей.Итог("КоличествоШтук");
    ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Робот (магазин)");	
	Задание.Ответственный         = ТекущийПользователь;
	//Задание.СкладПолучатель =Справочники.Склады.НайтиПоКоду("02124");
	Задание.ВводитьКонтрагентаВручную = Истина; // это текст!
	Задание.Направление=""; город0 = ""; 
	контр0=справочники.Контрагенты.ПустаяСсылка();
	таблЗаказы = Результат.Скопировать();
	Форма = Задание.ПолучитьФорму();
	Задание.ГруппыСкладов.Очистить();
	Группа = Новый СписокЗначений;
	Группа.Добавить(Справочники.ГруппыСкладов.НайтиПоКоду("33"));
	Результат = ОбновитьСписокГруппТоваров(Задание,Группа);
	ТабЗначРезерв = Новый ДеревоЗначений;
		
    ТабЗначРезерв.Колонки.Добавить("ГруппаСкладов");
    ТабЗначРезерв.Колонки.Добавить("Номенклатура");
	ТабЗначРезерв.Колонки.Добавить("Склад1");
	ТабЗначРезерв.Колонки.Добавить("АдресХранения");
	ТабЗначРезерв.Колонки.Добавить("КоличествоЗаказано");
	ТабЗначРезерв.Колонки.Добавить("КоличествоСвободно");
	ТабЗначРезерв.Колонки.Добавить("КоличествоОстаток");

    ДобавитьГруппуСкладов(ТабЗначРезерв,Задание,Результат, 88); //+++ 28.10.2014 добавляем все склады И СРАЗУ ставим ГАЛКИ!
		 
		// Если ОтгрузкаПоМаксОстаткам тогда//сортировка групп складов тоже по макс.остаткам на 1 группе
	Задание.ГруппыСкладов.Сортировать("КоличествоСвободно УБЫВ");
	ТабЗначРезерв.Строки.Сортировать("КоличествоСвободно УБЫВ");
		// КонецЕсли;	
		 
 	Для каждого стр1 из Задание.ГруппыСкладов цикл
		стр1.Приоритет = стр1.НомерСтроки;
		стр1.Флаг = истина;
	КонецЦикла;
	
	Для каждого стр1 из Задание.ГруппыСкладов цикл
	если стр1.ГруппаСкладов = Справочники.ГруппыСкладов.НайтиПоНаименованию("Ангар-И") тогда
		//сообщить("Нельзя перемещать со склада: "+строка(стр1.ГруппаСкладов)+" на него же! 
		//		 |"+строка(стр1.КоличествоЗаказано)+" шт. не нужно перемещать!!!", СтатусСообщения.Внимание);
		стр1.КоличествоЗаказано = 0;
		
		//----------сдвигаем в самый низ ------------
		 Индекс1 = Задание.ГруппыСкладов.Индекс(стр1);
		 сдвиг   = Задание.ГруппыСкладов.Количество()-1 - Индекс1;
   
		 Если сдвиг>0 Тогда
			Если ТабЗначРезерв.Строки.Количество()-1 > Индекс1 тогда
		    	Если Задание.ГруппыСкладов[Индекс1].ГруппаСкладов=ТабЗначРезерв.Строки[Индекс1].ГруппаСкладов тогда
				ТабЗначРезерв.Строки.Сдвинуть(Индекс1, сдвиг);
				КонецЕсли;			
			КонецЕсли;				
			Задание.ГруппыСкладов.Сдвинуть(Индекс1, сдвиг);
	  	КонецЕсли;

	КонецЕсли;
    КонецЦикла;

	ЗаполнитьСписокИДеревоГруппВзаимоисключаяПредыдущиеГруппы(ТабЗначРезерв,Задание);
	
	Задание.СкладПолучатель=Справочники.Склады.НайтиПоКоду("02124");
	ПустаяГруппаСкладов   = справочники.ГруппыСкладов.ПустаяСсылка();
	ОсновнаяГруппаСкладов = справочники.ГруппыСкладов.ОсновнойСклад;
	
	Если ТабЗначРезерв.Строки.Количество()>0 Тогда
		Для Каждого стрГрСклад из ТабЗначРезерв.Строки Цикл
			Для Каждого стрНом из стрГрСклад.Строки Цикл
				Для Каждого стрСклад из стрНом.Строки Цикл
					Для Каждого стрАдрес из стрСклад.Строки Цикл
						
						//+++ 02.11.2014 если Заказано = 0 то не добавляем строку!
						Если стрАдрес.КоличествоЗаказано<=0 тогда
							продолжить;
						КонецЕсли;
						
						  стрТов = Задание.Товары.Добавить();
						  ЗаполнитьЗначенияСвойств(стрТов, стрАдрес); // структуры должы быть идентичны!
						    стрТов.Количество = 0; // мин(стрНом.КоличествоЗаказано, стрНом.КоличествоСвободно);
						  стрТов.Склад      = стрАдрес.Склад1;
						  
						 Если стрТов.ГруппаСкладов=ПустаяГруппаСкладов Тогда
							 стрТов.ГруппаСкладов=ОсновнаяГруппаСкладов;
						 КонецЕсли;	

					 КонецЦикла;//стрАдрес
				КонецЦикла;//стрСклад
			КонецЦикла;//стрНом
		КонецЦикла;	//стрГрСклад
	КонецЕсли;
		
	

	
	СортироватьПоПорядку(Задание,Задание.Товары);
	Задание.Организация = Справочники.Организации.НайтиПоКоду("00001");
	Задание.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
	Задание.Комментарий = "Автоматическое закрытие заказов розничных покупателей" + " " + Строка(ТекущаяДата());
	режимПроведения = РежимПроведенияДокумента.Оперативный; //всегда Оперативно
	
	Задание.Записать(РежимЗаписиДокумента.Проведение, режимПроведения);


КонецПроцедуры

Функция ОбновитьСписокГруппТоваров(Задание,списокГрупп=Неопределено, текГруппа=Неопределено)
		
	Запрос = Новый Запрос;
	//Если списокГрупп=Неопределено Тогда //02.11.2014
		
		 //вся заказанная номенклатура по всем заказам сразу
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	                |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоЗаказаноПоЗаказам,
	                |	СУММА(0) КАК КоличествоУжеЗаказано
	                |ПОМЕСТИТЬ Заказано
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказовПокупателя)) КАК ЗаказыПокупателейОстатки
					//только +
	                |ГДЕ
	                |	ЗаказыПокупателейОстатки.КоличествоОстаток > 0
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ЗаказыПокупателейОстатки.Номенклатура
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Номенклатура";
	
     Запрос.Текст =  Запрос.Текст +";
	                |////////////////////////////////////////////////////////////////////////////////
	                |"+ 
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ТоварыНаСкладахОстатки.ГруппаСкладов КАК ГруппаСкладов,
					|	ТоварыНаСкладахОстатки.Склад как Склад1,
					|	Заказано.Номенклатура КАК Номенклатура,
	                |	Выбор когда Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано>0 тогда
					|		Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано иначе 0 Конец КАК КоличествоЗаказано,
					|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) как КоличествоОстаток,
	                |	ВЫБОР КОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)>0
					|	  ТОГДА
					|	    ВЫБОР КОГДА (Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано)>0 
					|			и ((Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано)<= ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0))
					|		   ТОГДА Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано
	                |		   ИНАЧЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)
					|		КОНЕЦ
					|	  ИНАЧЕ 0
	                |	КОНЕЦ КАК КоличествоСвободно
					|	,ЕстьNull(ТоварыАдресноеХранениеОстатки.АдресХранения,"""") как АдресХранения
					|	,ЕстьNull(ТоварыАдресноеХранениеОстатки.КоличествоСвободныйОстаток,0)КАК КоличествоСвободноВАдресе
					|	
	                |ИЗ
					|	 Заказано КАК Заказано
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ различные
					|			ТовНаСкладах.Склад.ГруппаСкладов как ГруппаСкладов,
					|			ТовНаСкладах.Номенклатура как Номенклатура,
					|			ТовНаСкладах.Склад как Склад,
					|           ЕСТЬNULL(ТовНаСкладах.КоличествоОстаток,0) как КоличествоОстаток
					|			ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(
	                |				,(НЕ Склад.Транзитный) И (НЕ Склад.ЗапретитьИспользование) и (Склад <> &ПустойСклад)
					|//И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов))
	                |//И Склад.ГруппаСкладов = &ТекГруппа
					
	                |					И Номенклатура В
	                |						(ВЫБРАТЬ РАЗЛИЧНЫЕ Заказано.Номенклатура
	                |						 ИЗ Заказано КАК Заказано)) как ТовНаСкладах ) КАК ТоварыНаСкладахОстатки
	                |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	               // |					&МоментВремениОстаткиРезервы
	                |				,(НЕ Склад.Транзитный) И (НЕ Склад.ЗапретитьИспользование) и (Склад <> &ПустойСклад)
					|//И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов))
	                |//И Склад.ГруппаСкладов = &ТекГруппа
					
	                |					И Номенклатура В
	                |						(ВЫБРАТЬ РАЗЛИЧНЫЕ Заказано.Номенклатура
	                |						 ИЗ Заказано КАК Заказано)) КАК РезервНаСкладахОстатки
					|			ПО ТоварыНаСкладахОстатки.Номенклатура = РезервНаСкладахОстатки.Номенклатура
	                |				И ТоварыНаСкладахОстатки.Склад = РезервНаСкладахОстатки.Склад
		//----------------------Адресное хранение--------------------------------------------
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
					|		АХ.Номенклатура,
					|		АХ.Склад,
					|		АХ.АдресХранения,
					|		АХ.КоличествоОстаток - ЕстьNull(Резерв.КоличествоОстаток,0) как КоличествоСвободныйОстаток
					|		ИЗ РегистрНакопления.ТоварыАдресноеХранение.Остатки(
					//|				&МоментВремениОстаткиРезервы
					|					 ,Номенклатура В
					|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
					|							Заказано.Номенклатура
					|						ИЗ
					|							Заказано КАК Заказано)
					|//И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов))
					|//И Склад.ГруппаСкладов = &ТекГруппа
					|)  как АХ
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	               // |					&МоментВремениОстаткиРезервы
	                |				,(НЕ Склад.Транзитный) И (НЕ Склад.ЗапретитьИспользование) и (Склад <> &ПустойСклад)
					|//И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов))
	                |//И Склад.ГруппаСкладов = &ТекГруппа
					
	                |					И Номенклатура В
	                |						(ВЫБРАТЬ РАЗЛИЧНЫЕ Заказано.Номенклатура
	                |						 ИЗ Заказано КАК Заказано)) КАК Резерв
                    |			ПО АХ.Номенклатура = Резерв.Номенклатура
	                |				И АХ.Склад = Резерв.Склад
                    |				И АХ.АдресХранения = Резерв.АдресХранения
					|ГДЕ
					|	АХ.КоличествоОстаток - ЕстьNull(Резерв.КоличествоОстаток,0)>0
					|)КАК ТоварыАдресноеХранениеОстатки
					
					|			ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыАдресноеХранениеОстатки.Номенклатура
					|				И ТоварыНаСкладахОстатки.Склад = ТоварыАдресноеХранениеОстатки.Склад
					|		ПО Заказано.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
					|
   //+++ 26.03.2013 ---- только   + остатки! ---------------------------
					|ГДЕ
					|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) > 0
					|
					|УПОРЯДОЧИТЬ ПО
					//+++++++++++++++++++порядок обхода по ячейкам 5000+++++++++++++++++++++++++++++++
					|Номенклатура,
					//---------по складам с максимальным количеством - в первую очередь, тогда мин.число складов потребуется--------
					//|	КоличествоСвободно УБЫВ,
					
					//+++ 15.09.2014 сначала мин.остатки, чтобы подчищать остатки по ВСЕМ адресам любого склада!
					|	КоличествоСвободноВАдресе,
					// по максим.остатку в адреса - в сезон
					//|	КоличествоСвободноВАдресе УБЫВ,
					
					|	ТоварыАдресноеХранениеОстатки.АдресХранения.Порядок
					
					//+++ 15.09.2014 сначала мин.остатки, чтобы подчищать остатки по ВСЕМ складам!
					//|	, КоличествоСвободно УБЫВ 
					|	, КоличествоСвободно
				    |
					
					//---------или по алфавиту---------------------------------
					|
				    |ИТОГИ
				    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
				    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Склад1),
				    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АдресХранения),
				    |	Максимум(КоличествоЗаказано),
					|	Сумма(КоличествоОстаток),
				    |	сумма(КоличествоСвободноВАдресе),
				    |	СУММА(КоличествоСвободно)
				    |ПО
				    |  ГруппаСкладов
					|, Номенклатура
					|, Склад1
					|АВТОУПОРЯДОЧИВАНИЕ
				    |";					
					
	Если списокГрупп<>Неопределено Тогда
		запрос.Текст = стрЗаменить(запрос.Текст,"//И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов))", "И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов)) И (Номенклатура = &Пакеты   ИЛИ НЕ Номенклатура = &Пакеты  И НЕ Склад.ГруппаСкладов = &АнгарИ)");
		Запрос.УстановитьПараметр("СписокГруппСкладов", списокГрупп);
		Запрос.УстановитьПараметр("Пакеты", Справочники.Номенклатура.НайтиПоКоду("9178010"));
		Запрос.УстановитьПараметр("АнгарИ", Справочники.ГруппыСкладов.НайтиПоНаименованию("Ангар-И"));
	КонецЕсли;      
	Если текГруппа<>Неопределено Тогда
		запрос.Текст = стрЗаменить(запрос.Текст,"//И Склад.ГруппаСкладов = &ТекГруппа","И Склад.ГруппаСкладов = &ТекГруппа");
		Запрос.УстановитьПараметр("ТекГруппа",ТекГруппа);
	КонецЕсли;	
  	                
	 Запрос.УстановитьПараметр("СписокЗаказовПокупателя", Задание.ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя"));
	 
	 ////"МоментВремени" - определяется дата и время "среза" Для остатков Заказов,Остатков и Резервов:
	 
	 ////=МоментВремени документа до его проведения! - Для перезаполнения
	 ////=ТекущаяДата() - Для учета всех отгрузок, резервов и т.п. с учетом уже сделанных по данному документу и проведенным реализациям
	 
	 //МоментВремени = Новый Граница(Дата, ВидГраницы.Исключая); 
     //Запрос.УстановитьПараметр("МоментВремениОстаткиРезервы", МоментВремени);
	 //Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	 
	 Запрос.УстановитьПараметр("ПустойСклад", справочники.Склады.ПустаяСсылка() );
	 
	 Результат = Запрос.Выполнить();
	 
	 Возврат Результат;
	 
 КонецФункции
 
Процедура ДобавитьГруппуСкладов(ТабЗначРезерв,Задание,Результат, Приоритет1=0)
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	 
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоСвободно<=0 Тогда 
			продолжить 
		КонецЕсли;
	  стр1 = Задание.ГруппыСкладов.Добавить();
	  ЗаполнитьЗначенияСвойств(стр1, выборка);
	  стр1.Приоритет = Приоритет1;
		Если стр1.ГруппаСкладов  = справочники.ГруппыСкладов.ПустаяСсылка() Тогда
		 стр1.ГруппаСкладов  = справочники.ГруппыСкладов.ОсновнойСклад; // общий склад 
		Иначе
	  	стр1.ГруппаСкладов  = выборка.ГруппаСкладов;
		КонецЕсли;
		
	//---(((---------------- Дерево ----------------------
	//Если Приоритет1>0 Тогда
	  		//ТабЗначРезерв.Колонки.Добавить("");
		//ТабЗначРезерв.Колонки.Добавить("");
		//ТабЗначРезерв.Колонки.Добавить("");
		
			
	    стрГр = ТабЗначРезерв.строки.Добавить();//2
		ЗаполнитьЗначенияСвойств(стрГр, стр1);
	  	выборкаНом = выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	// Группа -> Номенклатура -> Склад -> Адрес	
		пока выборкаНом.Следующий() Цикл
			Если выборкаНом.КоличествоЗаказано<=0 или выборкаНом.КоличествоСвободно<=0 Тогда 
				продолжить;
			КонецЕсли;
			
			стрНом = стрГр.Строки.Добавить();  //3
	  	    ЗаполнитьЗначенияСвойств(стрНом, выборкаНом);
	        выборкаСклад = выборкаНом.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			колНаСкладах = 0;
			колНаСкладахОстаток =0;
			
			пока выборкаСклад.Следующий() Цикл
				Если выборкаСклад.КоличествоЗаказано<=0 или выборкаСклад.КоличествоСвободно<=0 Тогда 
					продолжить;
				КонецЕсли;
 				//Если колНаСкладах+выборкаСклад.КоличествоСвободно<=выборкаНом.КоличествоЗаказано 
				Если колНаСкладах<выборкаНом.КоличествоЗаказано Тогда //+++
					стрСклад = стрНом.Строки.Добавить(); //4
			  	    ЗаполнитьЗначенияСвойств(стрСклад, выборкаСклад);
					
					стрСклад.КоличествоЗаказано = стрСклад.КоличествоЗаказано - колНаСкладах; // вычитаем то, что уже отгружено с пред.склада!
					
					выборкаАдр = выборкаСклад.Выбрать();
					пока выборкаАдр.Следующий() Цикл
						Если выборкаАдр.КоличествоЗаказано<=0 или выборкаАдр.КоличествоСвободно<=0 Тогда 
							продолжить;
						КонецЕсли;

						Если колНаСкладах<выборкаНом.КоличествоЗаказано Тогда //+++
							стрАдр = стрСклад.Строки.Добавить();  //5
						  	ЗаполнитьЗначенияСвойств(стрАдр, выборкаАдр);
							
							Если выборкаАдр.КоличествоСвободноВАдресе>0 тогда
								стрАдр.КоличествоСвободно = мин(выборкаАдр.КоличествоСвободноВАдресе, выборкаНом.КоличествоЗаказано - колНаСкладах);
								стрАдр.КоличествоОстаток  =	выборкаАдр.КоличествоСвободноВАдресе;
							иначе	
								стрАдр.КоличествоСвободно = мин(выборкаАдр.КоличествоСвободно, выборкаНом.КоличествоЗаказано - колНаСкладах);
							КонецЕсли;
						
							стрАдр.КоличествоЗаказано = стрАдр.КоличествоСвободно;//заказано именно столько же сколько свободно!
							
							//--------- улучшения визуальные --------------
							Если стрСклад.Склад1 = 1 тогда
								стрСклад.Склад1 = стрАдр.Склад1;
							КонецЕсли;
							Если стрСклад.Номенклатура = 1 тогда
								стрСклад.Номенклатура = стрАдр.Номенклатура;
							КонецЕсли;
							Если стрНом.Номенклатура = 1 тогда
								стрНом.Номенклатура = стрАдр.Номенклатура;
							КонецЕсли;

							колНаСкладах = колНаСкладах + стрАдр.КоличествоСвободно;
							колНаСкладахОстаток = колНаСкладахОстаток + выборкаАдр.КоличествоОстаток;
						КонецЕсли;
 					КонецЦикла; //адр
				КонецЕсли;
				
				//+++ 16.07.2013 - группировка по складу - увеличивает остатки пропорционально кол.Адресов!
				числоАдресов = ?(стрСклад.АдресХранения="0", 1, число(стрСклад.АдресХранения));
				стрСклад.КоличествоСвободно = стрСклад.КоличествоСвободно / числоАдресов;
				стрСклад.КоличествоОстаток  = стрСклад.КоличествоОстаток  / числоАдресов;
				
			КонецЦикла;//скл.
			стрНом.КоличествоСвободно = колНаСкладах;
			стрНом.КоличествоОстаток  = стрНом.Строки.Итог("КоличествоОстаток");
		КонецЦикла;
		
		стрГр.КоличествоСвободно = стрГр.Строки.Итог("КоличествоСвободно");
		стр1.КоличествоСвободно = стрГр.КоличествоСвободно;
		
		стрГр.КоличествоЗаказано = стрГр.Строки.Итог("КоличествоЗаказано");
		стр1.КоличествоЗаказано = стрГр.КоличествоЗаказано;
		
		стрГр.КоличествоОстаток = стрГр.Строки.Итог("КоличествоОстаток");
//		стр1.КоличествоОстаток = стр2.КоличествоОстаток;

	//КонецЕсли;
		
	//+++ 25.03.2013 удаляем из дерева 0 приоритеты!
	Если Приоритет1=0 Тогда	
		ТабЗначРезерв.строки.Удалить(стрГр);	
	КонецЕсли;
	//---)))---------------- Дерево ----------------------
	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокИДеревоГруппВзаимоисключаяПредыдущиеГруппы(ТабЗначРезерв,Задание)
	
	//вся заказанная номенклатура по всем заказам сразу
	Запрос = новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
					|	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоЗаказаноПоЗаказам,
					|	СУММА(0) КАК КоличествоУжеЗаказано
					|ИЗ
					|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказовПокупателя)) КАК ЗаказыПокупателейОстатки
					|ГДЕ
					|	ЗаказыПокупателейОстатки.КоличествоОстаток > 0
					|
					|СГРУППИРОВАТЬ ПО
					|	ЗаказыПокупателейОстатки.Номенклатура";
МассивЗаказовПокупателя = Задание.ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя");
Запрос.УстановитьПараметр("СписокЗаказовПокупателя", МассивЗаказовПокупателя);
ТаблицаЗаказано = Запрос.Выполнить().Выгрузить();

КолСтрокТоваров = 0;
//теперь идем по дереву 4 уровня вложенности...
Для каждого стрГруппа из ТабЗначРезерв.Строки цикл
	Для каждого стрТовар из стрГруппа.Строки цикл
		Для каждого стрСклад из стрТовар.Строки цикл
			Для каждого стрАдрес из стрСклад.Строки цикл
				строкиЗаказано = ТаблицаЗаказано.НайтиСтроки( новый Структура("Номенклатура", стрАдрес.Номенклатура) );
				стр1 = строкиЗаказано[0];
				ОсталосьЗаказать = стр1.КоличествоЗаказаноПоЗаказам - стр1.КоличествоУжеЗаказано;
				
				стрАдрес.КоличествоЗаказано = мин(ОсталосьЗаказать, стрАдрес.КоличествоОстаток); // это пойдет в Товары!
				стр1.КоличествоУжеЗаказано = стр1.КоличествоУжеЗаказано + стрАдрес.КоличествоЗаказано; // прибавляем сюда!
			
				стрАдрес.КоличествоСвободно = мин(стр1.КоличествоЗаказаноПоЗаказам, стрАдрес.КоличествоОстаток); // максимальное количество на этом складе!
				
				если стрАдрес.КоличествоЗаказано>0 тогда
					КолСтрокТоваров = КолСтрокТоваров + 1;
				КонецЕсли;
				
			КонецЦикла;
			//обратный расчет 
			стрСклад.КоличествоЗаказано = стрСклад.Строки.Итог("КоличествоЗаказано");
			стрСклад.КоличествоСвободно = стрСклад.Строки.Итог("КоличествоСвободно");
			стрСклад.КоличествоОстаток  = стрСклад.Строки.Итог("КоличествоОстаток");
		КонецЦикла;
		//обратный расчет 
		стрТовар.КоличествоЗаказано = стрТовар.Строки.Итог("КоличествоЗаказано");
		стрТовар.КоличествоСвободно = стрТовар.Строки.Итог("КоличествоСвободно");
		стрТовар.КоличествоОстаток  = стрТовар.Строки.Итог("КоличествоОстаток");
	 КонецЦикла;
	//обратный расчет 
	стрГруппа.КоличествоЗаказано = стрГруппа.Строки.Итог("КоличествоЗаказано");
	стрГруппа.КоличествоСвободно = стрГруппа.Строки.Итог("КоличествоСвободно");
	стрГруппа.КоличествоОстаток  = стрГруппа.Строки.Итог("КоличествоОстаток");
КонецЦикла;	

для i=0 по ТабЗначРезерв.Строки.Количество()-1 цикл
	если Задание.ГруппыСкладов[i].ГруппаСкладов = ТабЗначРезерв.Строки[i].ГруппаСкладов тогда
		Задание.ГруппыСкладов[i].КоличествоЗаказано = ТабЗначРезерв.Строки[i].КоличествоЗаказано;
		Задание.ГруппыСкладов[i].КоличествоСвободно = ТабЗначРезерв.Строки[i].КоличествоСвободно;
	иначе
		Сообщить(строка(i)+" строка - Порядок групп складов не соответствует порядку складов!");
	КонецЕсли;	
КонецЦикла;

//ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Заголовок = "3.Товары ("+строка(КолСтрокТоваров)+")";

КонецПроцедуры

Процедура СортироватьПоПорядку(Задание,Товары) 
	
	  // просто всегда по алфавиту
	  Товары.Сортировать("ГруппаСкладов, Склад, Номенклатура");
	  	  
	  //---------------надо передвинуть группами складов------------
	  перваяСтрока = 0;
	  Для n=0 По Задание.ГруппыСкладов.Количество()-1 Цикл
		перваяСтрокаГруппы = Товары.Найти(Задание.ГруппыСкладов[n].ГруппаСкладов, "ГруппаСкладов");
		Если перваяСтрокаГруппы=неопределено тогда 
			продолжить; 
		КонецЕсли;	
		номерПервойСтроки = перваяСтрокаГруппы.НомерСтроки - 1;
		Если  номерПервойСтроки > перваяСтрока тогда // начинаем сдвиг вперед
			i=0; //сдвиг от номерПервойСтроки 
			СтрокаВГруппе = истина;
			пока СтрокаВГруппе цикл
			Товары.Сдвинуть(номерПервойСтроки+i, перваяСтрока - номерПервойСтроки );	
			i=i+1; 
				Если номерПервойСтроки+i<Товары.Количество() тогда
					СтрокаВГруппе = (Товары[номерПервойСтроки+i].ГруппаСкладов = Задание.ГруппыСкладов[n].ГруппаСкладов);
				иначе
				    СтрокаВГруппе = ложь;
				КонецЕсли;	
			КонецЦикла;	
			перваяСтрока = перваяСтрока+i;
		иначе  // расчет конца группы
			i=0;
			СтрокаВГруппе = истина; 
			пока СтрокаВГруппе цикл
			i=i+1; 
				Если номерПервойСтроки+i<Товары.Количество() тогда
					СтрокаВГруппе = (Товары[номерПервойСтроки+i].ГруппаСкладов = Задание.ГруппыСкладов[n].ГруппаСкладов);
				иначе
				    СтрокаВГруппе = ложь;
				КонецЕсли;	
			КонецЦикла;	
			перваяСтрока = перваяСтрока+i;
		КонецЕсли;	
	  КонецЦикла;	  
	  
//------------------------Дополнительная сортировка по ВидТовара только для Основного Склада------------------------------	  
 перваяСтрокаГруппы = Товары.Найти(справочники.ГруппыСкладов.ОсновнойСклад, "ГруппаСкладов");
	
Если перваяСтрокаГруппы <> неопределено тогда		
   номерПервойСтроки = перваяСтрокаГруппы.НомерСтроки - 1;
		
//--------------в отдельной таблице - отсортируем по ВидуТовара: Диски/Шины/АКБ
табЗнач = Товары.Выгрузить();
табЗнач.Колонки.Добавить("ВидТовараПорядок");
i=0; N=табЗнач.Количество();
пока i<N цикл
	Если табЗнач[i].ГруппаСкладов = справочники.ГруппыСкладов.ОсновнойСклад тогда
		видТов = табЗнач[i].Номенклатура.ВидТовара;
		табЗнач[i].ВидТовараПорядок = ?(видТов=перечисления.ВидыТоваров.Прочее, "яАКБ",
		?(видТов=перечисления.ВидыТоваров.АвтоЗапчасти, "яяАвтоЗапчасти",
		?(видТов=перечисления.ВидыТоваров.РекламнаяПродукция, "яяяРеклама",
		   строка(видТов) ) ) );
	    i=i+1;
	иначе
		табЗнач.Удалить(i); N=N-1;
	КонецЕсли;
КонецЦикла;
 табЗнач.Сортировать("ВидТовараПорядок, Склад, Номенклатура"); // Диски, Шины, яАКБ

//-----------------вставляем обратно--------------------------	
для j=0 по N-1 цикл
	ЗаполнитьЗначенияСвойств(Товары[номерПервойСтроки + j], табЗнач[j] );
КонецЦикла;

КонецЕсли;



//------------------------Дополнительная сортировка по Порядку только для 5000------------------------------	  
	грСкладов5000 = справочники.ГруппыСкладов.НайтиПоКоду("01");
	перваяСтрокаГруппы = Товары.Найти(грСкладов5000, "ГруппаСкладов");
	
Если перваяСтрокаГруппы <> неопределено тогда		
	номерПервойСтроки = перваяСтрокаГруппы.НомерСтроки - 1;
		
//--------------в отдельной таблице - отсортируем по ВидуТовара: Диски/Шины/АКБ
табЗнач = Товары.Выгрузить();
табЗнач.Колонки.Добавить("Порядок");
i=0; N=табЗнач.Количество();
пока i<N цикл
	Если табЗнач[i].ГруппаСкладов =грСкладов5000 тогда
		порядок = табЗнач[i].АдресХранения.Порядок;
		табЗнач[i].Порядок = порядок;
	    i=i+1;
	иначе
		табЗнач.Удалить(i); N=N-1;
	КонецЕсли;
КонецЦикла;
 табЗнач.Сортировать("Порядок"); 
 
//-----------------вставляем обратно--------------------------	
	для j=0 по N-1 цикл
	ЗаполнитьЗначенияСвойств(Товары[номерПервойСтроки + j], табЗнач[j] );
	КонецЦикла;
КонецЕсли;


//+++( 17.06.2014 ---- аналогично 5000 ---------------------------
//
//-----------------Дополнительная сортировка по Порядку только для 8000------------------------------	  
	грСкладов8000 = справочники.ГруппыСкладов.НайтиПоКоду("08");
	перваяСтрокаГруппы = Товары.Найти(грСкладов8000, "ГруппаСкладов");
	
Если перваяСтрокаГруппы <> неопределено тогда		
	номерПервойСтроки = перваяСтрокаГруппы.НомерСтроки - 1;
		
//--------------в отдельной таблице - отсортируем по ВидуТовара: Диски/Шины/АКБ
табЗнач = Товары.Выгрузить();
табЗнач.Колонки.Добавить("Порядок");
i=0; N=табЗнач.Количество();
пока i<N цикл
	Если табЗнач[i].ГруппаСкладов =грСкладов8000 тогда
		порядок = табЗнач[i].АдресХранения.Порядок;
		табЗнач[i].Порядок = порядок;
	    i=i+1;
	иначе
		табЗнач.Удалить(i); N=N-1;
	КонецЕсли;
КонецЦикла;
 табЗнач.Сортировать("Порядок"); 
 
//-----------------вставляем обратно--------------------------	
	для j=0 по N-1 цикл
	ЗаполнитьЗначенияСвойств(Товары[номерПервойСтроки + j], табЗнач[j] );
	КонецЦикла;
КонецЕсли;
//+++)

КонецПроцедуры

Функция получитьТоварыПоДвижениюЭтогоДокумента(Задание)
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	РезервНаСкладах.Номенклатура КАК Номенклатура,
	                |	РезервНаСкладах.Склад,
	                |	РезервНаСкладах.АдресХранения,
	                |	СУММА(РезервНаСкладах.Количество) КАК КоличествоЗаказано,
	                |	СУММА(РезервНаСкладах.Количество) КАК КоличествоСвободно,
	                |	РезервНаСкладах.Склад.ГруппаСкладов КАК ГруппаСкладов,
	                |	РезервНаСкладах.Номенклатура.Код КАК Код
	                |ИЗ
	                |	РегистрНакопления.РезервНаСкладах КАК РезервНаСкладах
	                |ГДЕ
	                |	РезервНаСкладах.Регистратор = &Регистратор
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	РезервНаСкладах.Номенклатура,
	                |	РезервНаСкладах.Склад,
	                |	РезервНаСкладах.АдресХранения,
	                |	РезервНаСкладах.Склад.ГруппаСкладов,
	                |	РезервНаСкладах.Номенклатура.Код
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ГруппаСкладов,
					|	Склад,
	                |	Номенклатура
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 Запрос.УстановитьПараметр("Регистратор", Задание.Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 ТЗ1 = Результат.Выгрузить();
	 
	 возврат ТЗ1;
	 
 КонецФункции
 
/////////Плотников Задания на перемещение розница

Процедура СоздатьЗаданияПеремещенияВозвраты() Экспорт
	
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("ДатаОтгрузки",НачалоДня(ТекущаяДата()-24*60*60*7));
	 Запрос.УстановитьПараметр("Дата1",НачалоДня(ТекущаяДата()-24*60*60*14));
	 Запрос.УстановитьПараметр("Дата2",КонецДня(ТекущаяДата()));
	 Запрос.УстановитьПараметр("Категория",Справочники.КатегорииОбъектов.НайтиПоКоду("00038"));
	 Запрос.УстановитьПараметр("Покупатель",Справочники.Контрагенты.НайтиПоНаименованию("Покупатель"));
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.ЗаказПокупателя,
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаданиеНаПеремещениеЗаказыПокупателей.Реализация) КАК Реализация
	                |ПОМЕСТИТЬ Перемещения
	                |ИЗ
	                |	Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ЗаданиеНаПеремещениеЗаказыПокупателей
	                |ГДЕ
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	                |	И ЗаданиеНаПеремещениеЗаказыПокупателей.Реализация.Проведен = ИСТИНА
	                |	И НЕ ЗаданиеНаПеремещениеЗаказыПокупателей.Реализация ЕСТЬ NULL 
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.ЗаказПокупателя
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК Заказ,
	                |	КатегорииОбъектов.Категория,
	                |	Перемещения.Реализация КАК КоличествоПеремещений
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	                |			,
	                |			ЗаказПокупателя.ДатаОтгрузки <= &ДатаОтгрузки
	                |				И ЗаказПокупателя.ДатаОтгрузки >= &Дата1
	                |				И ЗаказПокупателя.Контрагент = &Покупатель) КАК ЗаказыПокупателейОстатки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	                |		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = КатегорииОбъектов.Объект
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Перемещения КАК Перемещения
	                |		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = Перемещения.ЗаказПокупателя
	                |ГДЕ
	                |	КатегорииОбъектов.Категория = &Категория
	                |	И Перемещения.Реализация = 1";
					
					
	Результат = Запрос.Выполнить().Выгрузить();
		
	Если Результат.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	Задание = Документы.ЗаданиеНаПеремещение.СоздатьДокумент();
	Задание.Дата = ТекущаяДата();
	Задание.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Приход;
	//Задание.СкладПолучатель=Справочники.Склады.НайтиПоКоду("02124");
	ТЗАсортимента = Новый ТаблицаЗначений;
	ТЗАсортимента.Колонки.Добавить("ВидТовара");
	
	НадписьКатегорий = "Интернет-Магазин";
	//Водитель = Справочники.ФизическиеЛица.НайтиПоКоду("");
	ДатаФормы = ТекущаяДата();
	
	Для iii = 0 по Результат.Количество()-1 Цикл
		СтрокаЗаказа = Результат[iii];
		СтрокаЗадания = Задание.ЗаказыПокупателей.Добавить();
		СтрокаЗадания.ЗаказПокупателя   = СтрокаЗаказа.Заказ;
		СтрокаЗадания.КоличествоПозиций = СтрокаЗаказа.Заказ.Товары.Количество();
		СтрокаЗадания.КоличествоШтук    = СтрокаЗаказа.Заказ.Товары.Итог("Количество");
		Задание.НомераЗаявокВСтроку     = ?(СтрДлина(Задание.НомераЗаявокВСтроку) > 0, Задание.НомераЗаявокВСтроку+", "+СтрокаЗаказа.Заказ.Номер, СтрокаЗаказа.Заказ.Номер);  
		Для Каждого Товар Из СтрокаЗаказа.Заказ.Товары Цикл
			Если ЗначениеЗаполнено(Товар.Номенклатура.ВидТовара) Тогда
				Если ТЗАсортимента.Найти(Товар.Номенклатура.ВидТовара, "ВидТовара") = Неопределено Тогда
					НоваяСтрокаТЗАсортимента = ТЗАсортимента.Добавить();
					НоваяСтрокаТЗАсортимента.ВидТовара = Товар.Номенклатура.ВидТовара;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТЗАсортимента Из ТЗАсортимента Цикл
		Задание.Ассортимент = ?(СтрДлина(Задание.Ассортимент) > 0, Задание.Ассортимент+", "+СтрокаТЗАсортимента.ВидТовара, СтрокаТЗАсортимента.ВидТовара);
	КонецЦикла;
	
	Задание.ИтогКоличествоПозиций = Задание.ЗаказыПокупателей.Итог("КоличествоПозиций");
	Задание.ИтогКоличествоШтук    = Задание.ЗаказыПокупателей.Итог("КоличествоШтук");
	ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Робот (магазин)");	
	Задание.Ответственный         = ТекущийПользователь;
	Задание.Ответственный         = ТекущийПользователь;
	//Задание.СкладПолучатель =Справочники.Склады.НайтиПоКоду("02124");
	Задание.ВводитьКонтрагентаВручную = Истина; // это текст!
	Задание.Направление=""; город0 = ""; 
	контр0=справочники.Контрагенты.ПустаяСсылка();
	таблЗаказы = Результат.Скопировать();	
	Задание.ГруппыСкладов.Очистить();
	Группа = Новый СписокЗначений;
	Группа.Добавить(Справочники.ГруппыСкладов.НайтиПоКоду("33"));
	Результат = ОбновитьСписокГруппТоваровВозвраты(Задание,Группа);
    ТовТЗ = результат.Выгрузить();
	для каждого стр из ТовТЗ Цикл
		НовТов = Задание.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовТов,стр);
		Если ЗначениеНеЗаполнено(НовТов.ГруппаСкладов) Тогда
			 НовТов.ГруппаСкладов = Справочники.ГруппыСкладов.НайтиПоКоду("00");
		КонецЕсли;
	КонецЦикла;		
	

	СортироватьПоПорядку(Задание,Задание.Товары);
	Задание.СкладПолучатель = Справочники.Склады.НайтиПоКоду("02124");
	Задание.Комментарий = "Автоматическое закрытие заказов розничных покупателей" + " " + Строка(ТекущаяДата());
	Задание.Организация = Справочники.Организации.НайтиПоКоду("00001");
	Задание.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
	режимПроведения = РежимПроведенияДокумента.Оперативный; //всегда Оперативно
	
	Задание.Записать(РежимЗаписиДокумента.Проведение, режимПроведения);

	
КонецПроцедуры

Функция ОбновитьСписокГруппТоваровВозвраты(Задание,списокГрупп=Неопределено, текГруппа=Неопределено)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	               |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоЗаказаноПоЗаказам,
	               |	СУММА(0) КАК КоличествоУжеЗаказано
	               |ПОМЕСТИТЬ Заказано
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказовПокупателя)) КАК ЗаказыПокупателейОстатки
	               |ГДЕ
	               |	ЗаказыПокупателейОстатки.КоличествоОстаток > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыПокупателейОстатки.Номенклатура,
	               |	ЗаказыПокупателейОстатки.ЗаказПокупателя
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ПеремещениеТоваровТовары.Количество) КАК КоличествоЗаказано,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) > 0
	               |				ТОГДА ВЫБОР
	               |						КОГДА ПеремещениеТоваровТовары.Количество > 0
	               |								И ПеремещениеТоваровТовары.Количество <= ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)
	               |							ТОГДА ПеремещениеТоваровТовары.Количество
	               |						ИНАЧЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Количество,
	               |	МАКСИМУМ(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)) КАК КоличествоСвободно,
	               |	ПеремещениеТоваровТовары.Номенклатура,
	               |	ПеремещениеТоваровТовары.Склад,
	               |	ПеремещениеТоваровТовары.Склад.ГруппаСкладов КАК ГруппаСкладов
	               |ИЗ
	               |	Заказано КАК Заказано
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				ТовНаСкладах.Склад.ГруппаСкладов КАК ГруппаСкладов,
	               |				ТовНаСкладах.Номенклатура КАК Номенклатура,
	               |				ТовНаСкладах.Склад КАК Склад,
	               |				ЕСТЬNULL(ТовНаСкладах.КоличествоОстаток, 0) КАК КоличествоОстаток
	               |			ИЗ
	               |				РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |						,
	               |						НЕ Склад.Транзитный
	               |							И НЕ Склад.ЗапретитьИспользование
	               |							И Склад <> &ПустойСклад
	               |							И Номенклатура В
	               |								(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |									Заказано.Номенклатура
	               |								ИЗ
	               |									Заказано КАК Заказано)
	               |							И Склад.ГруппаСкладов В (&СписокГруппСкладов)) КАК ТовНаСкладах) КАК ТоварыНаСкладахОстатки
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	               |						,
	               |						НЕ Склад.Транзитный
	               |							И НЕ Склад.ЗапретитьИспользование
	               |							И Склад <> &ПустойСклад
	               |							И Номенклатура В
	               |								(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |									Заказано.Номенклатура
	               |								ИЗ
	               |									Заказано КАК Заказано)
	               |							И Склад.ГруппаСкладов В (&СписокГруппСкладов)) КАК РезервНаСкладахОстатки
	               |				ПО ТоварыНаСкладахОстатки.Номенклатура = РезервНаСкладахОстатки.Номенклатура
	               |					И ТоварыНаСкладахОстатки.Склад = РезервНаСкладахОстатки.Склад
	               |			ПО ПеремещениеТоваровТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	               |		ПО Заказано.ЗаказПокупателя = ПеремещениеТоваровТовары.Ссылка.ВнутреннийЗаказ.ДокументОснование
	               |			И Заказано.Номенклатура = ПеремещениеТоваровТовары.Номенклатура
	               |ГДЕ
	               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПеремещениеТоваровТовары.Номенклатура,
	               |	ПеремещениеТоваровТовары.Склад,
	               |	ПеремещениеТоваровТовары.Склад.ГруппаСкладов
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
    					
					
	 Запрос.УстановитьПараметр("СписокГруппСкладов", списокГрупп);
  	                
	 Запрос.УстановитьПараметр("СписокЗаказовПокупателя", Задание.ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя"));
	 	 
	 Запрос.УстановитьПараметр("ПустойСклад", справочники.Склады.ПустаяСсылка() );
	 
	 Результат = Запрос.Выполнить();
	 
	 Возврат Результат;
	 
 КонецФункции

Процедура РассылкаОтчетовДляЕгора() Экспорт
	
	//+++ 13.09.2017 -> отправка  "no-reply@yst76.ru" >> 1c@yst.ru (ТОЛЬКО для отправки с SIGMA через SMTP) 
	АдресОтправителяЯШТ = "1c@yst.ru";
	Адрес0 = "malyshev@yst-group.com;alekseeva_ae@yst.ru";	
	
	
	 //КАЖДЫЙ ДЕНь
	 //проверка сроков оплаты кредитов для фин.отдела
	  попытка

	 Если  День(ТекущаяДата())=25 Тогда
		 ДатаНач = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),1));
		 ДатаКон = КонецМесяца(ДобавитьМесяц(ТекущаяДата(),1));
	 иначе
		 ДатаНач = НачалоДня(ТекущаяДата())+10*24*60*60;
		 ДатаКон = НачалоДня(ТекущаяДата())+11*24*60*60;
	 конецЕсли;	  
	 текст = ПроверитьПлатежиПоКредитам(ДатаНач,ДатаКон);	 
	 Если текст<>"Внимание! нужно оплатить кредиты:"+символы.ПС Тогда
		 //отправим письма всем сотрудникам 	фин. отдела.
		 
		 
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	Пользователи.Ссылка
		 |ПОМЕСТИТЬ НужныеПользователи
		 |ИЗ
		 |	Справочник.Пользователи КАК Пользователи
		 |ГДЕ
		 |	Пользователи.Заблокирован = ЛОЖЬ
		 |	И Пользователи.ОсновноеПодразделение = &ФинОтдел
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	НужныеПользователи.Ссылка,
		 |	КонтактнаяИнформация.Представление как Адрес
		 |ИЗ
		 |	НужныеПользователи КАК НужныеПользователи
		 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		 |		ПО НужныеПользователи.Ссылка = КонтактнаяИнформация.Объект
		 |ГДЕ
		 |	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
		 
		 
		 Запрос.УстановитьПараметр("ФинОтдел",Справочники.Подразделения.НайтиПоКоду("00007"));
		 Результат = Запрос.Выполнить().Выгрузить();
		 УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //12.09.2017 вместо  no-reply@yst76.ru
		 Тема = "Сроки оплаты кредитов";
		 
		 Для Каждого ЭлементКонтрагент Из Результат Цикл
			 АдресПочты = ЭлементКонтрагент.Адрес;
			 яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, , УЗ, Текст, Тема);
		 конецЦикла;	  
		 
	 конецЕсли;
	 	 исключение 
		 ЗаписьЖурналаРегистрации("Рассылка о сроках оплаты кредитов",
			  УровеньЖурналаРегистрации.Информация,
			  ,
			  ,
			  ОписаниеОшибки(),
			  );

	 КонецПопытки;

	 
	 
	 
	 //проверим заказы поставщиков, по которым не было поступлений более 60 дней
	 
	 попытка
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
		 |	ЗаказыПоставщикамОстатки.ЗаказПоставщику
		 |ИЗ
		 |	РегистрНакопления.ЗаказыПоставщикам.Остатки(
		 |			,
		 |			ДОБАВИТЬКДАТЕ(ЗаказПоставщику.Дата, ДЕНЬ, 60) < &ТекущаяДата
		 |				И ДоговорКонтрагента.ВалютаВзаиморасчетов <> &Рубли) КАК ЗаказыПоставщикамОстатки
		 |ГДЕ
		 |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.СуммаДокумента = ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток";
		 
		 Запрос.УстановитьПараметр("Рубли", Константы.ВалютаРегламентированногоУчета.Получить());
		 Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		 
		 Результат = Запрос.Выполнить();
		 
		 
		 Если не Результат.Пустой() тогда	
			 задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
			 Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Малышев Егор");
			 задача.Товары.Очистить();
			 задача.НаСогласование = Ложь;
			 задача.Наименование = "Заказы поставщику, созданные болеее 60 дней назад, так и не поступили на склад! "; 
			 Выборка = Результат.Выбрать(); 
			 пока Выборка.Следующий() цикл
				 задача.Описание = задача.Описание+ " Контрагент "+Строка(Выборка.контрагент)+" Номер контейнера: "+Строка(Выборка.ЗаказПоставщику.НомерКонтейнера)+ " Заказ поставщику: "+Строка(Выборка.ЗаказПоставщику)+";"+Символы.ПС;	
			 конецЦикла;
			 задача.Инициатор   = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
			 задача.Дата 		    = ТекущаяДата();
			 задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
			 задача.Оповещение     = истина;
			 задача.СрокОповещения = ТекущаяДата(); 
			 попытка
				 задача.Записать();
			 исключение
			 КонецПопытки;
			 НовЗадача = Задача.Скопировать();
			 НовЗадача.Дата 		    = ТекущаяДата();
			 НовЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Горицкий А. И.");
			 попытка
				 Новзадача.Записать();
			 исключение
			 КонецПопытки;
			 НовЗадача2 = Задача.Скопировать();
			 НовЗадача2.Дата  = ТекущаяДата();
			 НовЗадача2.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Новикова С.");
			 попытка
				 Новзадача2.Записать();
			 исключение
			 КонецПопытки;
			 НовЗадача3 = Задача.Скопировать();
			 НовЗадача3.Дата  = ТекущаяДата();
			 НовЗадача3.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Карышев Максим");
			 попытка
			 Новзадача3.Записать();
			 исключение
			 КонецПопытки;
             НовЗадача4 = Задача.Скопировать();
			 НовЗадача4.Дата  = ТекущаяДата();
			 НовЗадача4.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Яхшиян Тигран ");
			 попытка
			 Новзадача4.Записать();
			 исключение
			 КонецПопытки;

		 конецЕсли;
	 исключение 
		 ЗаписьЖурналаРегистрации("Оповещение о непришедших контейнерах",
			  УровеньЖурналаРегистрации.Информация,
			  ,
			  ,
			  ОписаниеОшибки(),
			  );

	 КонецПопытки;
	 
	 //Напоминалка о заданиях на создания сезонных заказов
	 Запрос = новый Запрос;
	 Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	А.ЗаданиеНаЗаказ КАК ЗаданиеНаЗаказ
	              |ИЗ
	              |	(ВЫБРАТЬ
	              |		ЗаданияНаЗаказ.Ссылка КАК ЗаданиеНаЗаказ,
	              |		ЗаданияНаЗаказ.Количество - ЕСТЬNULL(ЗаказПоставщикуСезонный.Количество, 0) КАК Остаток,
	              |		ЗаданияНаЗаказ.Номенклатура КАК Номенклатура
	              |	ИЗ
	              |		(ВЫБРАТЬ
	              |			ЗаданиеНаЗаказПоставщикуТовары.Ссылка КАК Ссылка,
	              |			ЗаданиеНаЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	              |			СУММА(ЗаданиеНаЗаказПоставщикуТовары.Количество) КАК Количество
	              |		ИЗ
	              |			Документ.ЗаданиеНаЗаказПоставщику.Товары КАК ЗаданиеНаЗаказПоставщикуТовары
	              |		ГДЕ
	              |			ЗаданиеНаЗаказПоставщикуТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	              |			И ЗаданиеНаЗаказПоставщикуТовары.Ссылка.Согласован = ЛОЖЬ
	              |		
	              |		СГРУППИРОВАТЬ ПО
	              |			ЗаданиеНаЗаказПоставщикуТовары.Номенклатура,
	              |			ЗаданиеНаЗаказПоставщикуТовары.Ссылка) КАК ЗаданияНаЗаказ
	              |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              |				ЗаказПоставщикуСезонныйТовары.Ссылка.ЗаданиеНаЗаказ КАК ЗаданиеНаЗаказ,
	              |				ЗаказПоставщикуСезонныйТовары.Номенклатура КАК Номенклатура,
	              |				СУММА(ЗаказПоставщикуСезонныйТовары.Количество) КАК Количество
	              |			ИЗ
	              |				Документ.ЗаказПоставщикуСезонный.Товары КАК ЗаказПоставщикуСезонныйТовары
	              |			ГДЕ
	              |				ЗаказПоставщикуСезонныйТовары.Ссылка.ЗаданиеНаЗаказ В
	              |						(ВЫБРАТЬ
	              |							ЗаданиеНаЗаказПоставщику.Ссылка
	              |						ИЗ
	              |							Документ.ЗаданиеНаЗаказПоставщику КАК ЗаданиеНаЗаказПоставщику
	              |						ГДЕ
	              |							ЗаданиеНаЗаказПоставщику.ПометкаУдаления = ЛОЖЬ
	              |							И ЗаданиеНаЗаказПоставщику.Согласован = ЛОЖЬ)
	              |			
	              |			СГРУППИРОВАТЬ ПО
	              |				ЗаказПоставщикуСезонныйТовары.Номенклатура,
	              |				ЗаказПоставщикуСезонныйТовары.Ссылка.ЗаданиеНаЗаказ) КАК ЗаказПоставщикуСезонный
	              |			ПО ЗаданияНаЗаказ.Ссылка = ЗаказПоставщикуСезонный.ЗаданиеНаЗаказ
	              |				И ЗаданияНаЗаказ.Номенклатура = ЗаказПоставщикуСезонный.Номенклатура) КАК А
	              |ГДЕ
	              |	А.Остаток <> 0
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	ЗаданиеНаЗаказ
	              |АВТОУПОРЯДОЧИВАНИЕ";
				  Рез =Запрос.Выполнить().Выбрать();
				  Пока Рез.Следующий() Цикл
					  Документы.ЗаданиеНаЗаказПоставщику.ОтправитьНапоминание(Рез.ЗаданиеНаЗаказ);
				  КонецЦикла;
	 
	 
	
	// ПО ДНЯМ НЕДЕЛИ
	  Если ДеньНедели(ТекущаяДата()) = 1 Тогда //По понедельникам рассылка 
		  
		  // отчета "Анализ запасов по крышкам"
		  Попытка
			  ТекСсылка = Справочники.ВнешниеОбработки.НайтиПоКоду("382"); 
			  ИмяФайла = ПолучитьИмяВременногоФайла(); 
			  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
			  ДвоичныеДанные.Записать(ИмяФайла); 
			  Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
				  ОтчетАнализЗапасовПоКрышкам = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
			  Иначе 
				  ОтчетАнализЗапасовПоКрышкам = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
			  КонецЕсли; 
			  ОтчетАнализЗапасовПоКрышкам.ВыполнитьАнализ(Истина);
		  Исключение
			  ЗаписьЖурналаРегистрации("Отчет <Анализ запасов по крышкам>",
			  УровеньЖурналаРегистрации.Информация,
			  ,
			  ,
			  ОписаниеОшибки(),
			  );
		  КонецПопытки;
		  
		  		  // отчета "План-фактный сезонных заказов поставщикам"
		  попытка
			  ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(463); 
			  ИмяФайла = ПолучитьИмяВременногоФайла(); 
			  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
			  ДвоичныеДанные.Записать(ИмяФайла); 
			  
			  Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
			  Отчет.Период = ТекущаяДата();
			  ТабДок = Новый ТабличныйДокумент;
			  Отчет.СкомпоноватьРезультат(ТабДок);
			  ИмяФайла = КаталогВременныхФайлов() + "План-фактный сезонных заказов поставщикам.xls";
			  ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
			  
			  АдресПочты = Адрес0;	 //
			  СписокФайловВложений = новый СписокЗначений;
			  путь = КаталогВременныхФайлов();
			  СписокФайловВложений.Добавить(путь+"План-фактный сезонных заказов поставщикам.xls");
			  УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //+++12.09.2017 вместо: no-reply@yst76.ru
			  Тема = "План-фактный сезонных заказов поставщикам";
			  ТекстСообщения = "    Автоматическая отправка 
			  |внешнего отчета № 463 ""План-фактный сезонных заказов поставщикам"" на текущую дату"  + формат(ТекущаяДата(),"ДЛФ=DD");
			  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
		  Исключение
			  ЗаписьЖурналаРегистрации("Отчет <План-фактный сезонных заказов поставщикам>",
			  УровеньЖурналаРегистрации.Информация,
			  ,
			  ,
			  ОписаниеОшибки(),
			  );
		  КонецПопытки;

		  
		  
		  
		  // цены ФОП
		  попытка
			  ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(398); //Контроль цен ФОП
			  ИмяФайла = ПолучитьИмяВременногоФайла(); 
			  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
			  ДвоичныеДанные.Записать(ИмяФайла); 
			  
			  Обработка = ВнешниеОтчеты.Создать(ИмяФайла); 
			  табДок    = Новый ТабличныйДокумент;
			 // НачДата   = НачалоНедели( ТекущаяДата() ) - 7*86400; // начало пред.недели
			  НачДата   = ДобавитьМесяц( ТекущаяДата(),-2 ) ;
			  Обработка.ПолучитьОтчет(табДок, НачДата); // из модуля
			  
			  путь = КаталогВременныхФайлов();
			  табДок.Записать(путь+"Контроль цен ФОП.xls", ТипФайлаТабличногоДокумента.XLS);
			  
			  АдресПочты = "malyshev@yst.ru;ogorodnikov@yst.ru; novikova@yst.ru; ft@yst.ru";	 //
			  СписокФайловВложений = новый СписокЗначений;
			  СписокФайловВложений.Добавить(путь+"Контроль цен ФОП.xls");
			  УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //+++12.09.2017 вместо: no-reply@yst76.ru
			  Тема = "Контроль цен ФОП за неделю";
			  ТекстСообщения = "    Автоматическая отправка 
			  |внешнего отчета № 398 ""Контроль цен ФОП"" за предыдущую неделю 
			  |с " + формат(НачДата,"ДЛФ=DD")+" по "+формат(НачалоНедели( ТекущаяДата() ),"ДЛФ=DD");
			  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
		  Исключение
			  ЗаписьЖурналаРегистрации("Отчет <Контроль цен ФОП>",
			  УровеньЖурналаРегистрации.Информация,
			  ,
			  ,
			  ОписаниеОшибки(),
			  );
		  КонецПопытки;
		  
		   //отчета "Анализ наличия фото на диски"
		 // Закоментированно по задаче №30397(
		  Попытка
		  	ТекСсылка = Справочники.ВнешниеОбработки.НайтиПоКоду("449"); 
		  	ИмяФайла = ПолучитьИмяВременногоФайла(); 
		  	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		  	ДвоичныеДанные.Записать(ИмяФайла); 
		  	Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
		    	  ОтчетАнализЗапасовПоКрышкам = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		  	Иначе 
		    	  ОтчетАнализЗапасовПоКрышкам = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		  	КонецЕсли; 
		  	ОтчетАнализЗапасовПоКрышкам.ВыполнитьАнализ();
		  Исключение
		  	ЗаписьЖурналаРегистрации("Отчет <Анализ наличия фото на диски>",
		  	УровеньЖурналаРегистрации.Информация,
		  	,
		  	,
		  	ОписаниеОшибки(),
		  	);
		  КонецПопытки;// )
		  
	  КонецЕсли; //конец понедельника
	   Если ДеньНедели(ТекущаяДата()) = 2 Тогда //По вторникам рассылка 
          		  попытка
			  ТекСсылка=Справочники.ВнешниеОтчеты.НайтиПоКоду(474); //ДЗ/КЗ поставщики
			  ИмяФайла = ПолучитьИмяВременногоФайла(); 
			  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
			  ДвоичныеДанные.Записать(ИмяФайла); 
			  
			  Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
			  Отчет.Период = ТекущаяДата();
			  ТабДок = Новый ТабличныйДокумент;
			  Отчет.СкомпоноватьРезультат(ТабДок);
			  ИмяФайла = КаталогВременныхФайлов() + "ДЗКЗ по расчетам с валютными поставщиками.xls";
			  ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
			  
			  АдресПочты = Адрес0;	 //
			  СписокФайловВложений = новый СписокЗначений;
			  путь = КаталогВременныхФайлов();
			  СписокФайловВложений.Добавить(путь+"ДЗКЗ по расчетам с валютными поставщиками.xls");
			  УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //12.09.2017 вместо  no-reply@yst76.ru

			  Тема = "ДЗ/КЗ по расчетам с валютными поставщиками";
			  ТекстСообщения = "    Автоматическая отправка 
			  |внешнего отчета № 474 ""ДЗ/КЗ по расчетам с валютными поставщиками"" на текущую дату"  + формат(ТекущаяДата(),"ДЛФ=DD");
			  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
		  Исключение
			  ЗаписьЖурналаРегистрации("Отчет <ДЗКЗ по расчетам с валютными поставщиками>",
			  УровеньЖурналаРегистрации.Информация,
			  ,
			  ,
			  ОписаниеОшибки(),
			  );
		  КонецПопытки;

	   конецЕсли; // конец вторника
	  // ПО ДНЯМ МЕСЯЦА
	  
	  Если День(ТекущаяДата()) = 1 Тогда  //первого числа каждого месяца
		  
		  //+++ 12.09.2017 раз в месяц  malyshev@yst-group.com;asmirnov83@bk.ru;ogorodnikov@yst.ru   с адреса 1c@yst.ru
		  ОбменСУТИнтернетМагазин.ОтправитьПисьмоОЗастойныхДисках();
		  
		  // остатки по складам брака
		  попытка
			  ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(344); //Анализ предельно допустимых сроков хранения на складах брака
			  ИмяФайла = ПолучитьИмяВременногоФайла(); 
			  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
			  ДвоичныеДанные.Записать(ИмяФайла); 
			  
			  Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
			  Отчет.НаДату = ТекущаяДата();
			  ТабДок = Новый ТабличныйДокумент;
			  Отчет.СкомпоноватьРезультат(ТабДок);
			  ИмяФайла = КаталогВременныхФайлов() + "Отчет по складам брака.xls";
			  ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
			  
			  АдресПочты = Адрес0+";ylyanov@yst.ru";	 //
			  СписокФайловВложений = новый СписокЗначений;
			  путь = КаталогВременныхФайлов();
			  СписокФайловВложений.Добавить(путь+"Отчет по складам брака.xls");
			  УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //+++12.09.2017 вместо: no-reply@yst76.ru 
			  Тема = "Анализ допустимых сроков хранения по складам брака";
			  ТекстСообщения = "    Автоматическая отправка 
			  |внешнего отчета № 344 ""Анализ допустимых сроков хранения по складам брака"" на текущую дату"  + формат(ТекущаяДата(),"ДЛФ=DD");
			  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
		  Исключение
			  ЗаписьЖурналаРегистрации("Отчет <Анализ допустимых сроков хранения на складах брака>",
			  УровеньЖурналаРегистрации.Информация,
			  ,
			  ,
			  ОписаниеОшибки(),
			  );
		  КонецПопытки;
		  
		  // Брак по поставщикам раз в квартал (первым числом последнего месяца в квартале)
		  
		  Если Месяц(ТекущаяДата())%3=0 тогда  //март, июнь, сентябрь, декабрь
			  попытка
				  ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(402); //учет возврата брака по поставщикам
				  ИмяФайла = ПолучитьИмяВременногоФайла(); 
				  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
				  ДвоичныеДанные.Записать(ИмяФайла); 
				  
				  Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
				  Отчет.НачПериода = НачалоДня(ДобавитьМесяц(НачалоДня(ТекущаяДата())-1,-3));
				  Отчет.КонПериода = НачалоДня(ТекущаяДата())-1;
				  ТабДок = Новый ТабличныйДокумент;
				  Отчет.СкомпоноватьРезультат(ТабДок);
				  ИмяФайла = КаталогВременныхФайлов() + "Брак по поставщикам.xls";
				  ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
				  
				  АдресПочты = Адрес0;	 //
				  СписокФайловВложений = новый СписокЗначений;
				  путь = КаталогВременныхФайлов();
				  СписокФайловВложений.Добавить(путь+"Брак по поставщикам.xls");
				  УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //+++12.09.2017 вместо: no-reply@yst76.ru
				  Тема = "Возврат брака по поставщикам";
				  ТекстСообщения = "    Автоматическая отправка 
				  |внешнего отчета № 402 ""Учет возврата брака по поставщикам"" за последние 3 месяца
				  |с " + формат(Отчет.НачПериода,"ДЛФ=DD")+" по "+формат(Отчет.КонПериода,"ДЛФ=DD");
				  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
			  Исключение
				  ЗаписьЖурналаРегистрации("Отчет <Брак по поставщикам>",
				  УровеньЖурналаРегистрации.Информация,
				  ,
				  ,
				  ОписаниеОшибки(),
				  );
			  КонецПопытки;
			  
		  конецЕсли;
		  
		  //  Премия Ульянову (первым числом начала квартала) за предыдущийКвартал
		  Если Месяц(ТекущаяДата())%3=1 тогда  //январь, апрель,июль, октябрь
			  попытка	
				  ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(442); //Анализ предельно допустимых сроков хранения на складах брака
				  ИмяФайла = ПолучитьИмяВременногоФайла(); 
				  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
				  ДвоичныеДанные.Записать(ИмяФайла); 
				  
				  Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
				  Отчет.НачПериода = НачалоДня(ДобавитьМесяц(НачалоДня(ТекущаяДата())-1,-3));
				  Отчет.КонПериода = НачалоДня(ТекущаяДата())-1;
				  ТабДок = Новый ТабличныйДокумент;
				  Отчет.СкомпоноватьРезультат(ТабДок);
				  ИмяФайла = КаталогВременныхФайлов() + "Премия.xls";
				  ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
				  
				  АдресПочты = Адрес0;	 //
				  СписокФайловВложений = новый СписокЗначений;
				  путь = КаталогВременныхФайлов();
				  СписокФайловВложений.Добавить(путь+"Премия.xls");
				  УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //+++12.09.2017 вместо: no-reply@yst76.ru
				  Тема = "Премия Ульянову за предыдущий квартал";
				  ТекстСообщения = "    Автоматическая отправка 
				  |внешнего отчета № 442 ""Премия по восстановленным дискам"" за последние 3 месяца
				  |с " + формат(Отчет.НачПериода,"ДЛФ=DD")+" по "+формат(Отчет.КонПериода,"ДЛФ=DD");
				  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
			  Исключение
				  ЗаписьЖурналаРегистрации("Отчет <Премия по восстановленным дискам>",
				  УровеньЖурналаРегистрации.Информация,
				  ,
				  ,
				  ОписаниеОшибки(),
				  );
			  КонецПопытки;
			  
		  конецЕсли; 
		  // служебка на списание 
	///	  Если Месяц(ТекущаяДата())%2=0 тогда  //каждый 2 месяц      1 и 15 числа каждого месяца
			  попытка
				  ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(441); //Анализ предельно допустимых сроков хранения на складах брака
				  ИмяФайла = ПолучитьИмяВременногоФайла(); 
				  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
				  ДвоичныеДанные.Записать(ИмяФайла); 
				  
				  Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
				  Отчет.СписатьОстаткиНаДату = ТекущаяДата();
				  ТабДок = Новый ТабличныйДокумент;
				  Отчет.СкомпоноватьРезультат(ТабДок);
				  ИмяФайла = КаталогВременныхФайлов() + "Служебка на списание.xls";
				  ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
				  
				  АдресПочты = Адрес0;	 //
				  СписокФайловВложений = новый СписокЗначений;
				  путь = КаталогВременныхФайлов();
				  СписокФайловВложений.Добавить(путь+"Служебка на списание.xls");
				  УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //+++12.09.2017 вместо: no-reply@yst76.ru
				  Тема = "Служебка на списание дисков";
				  ТекстСообщения = "    Автоматическая отправка 
				  |внешнего отчета № 441 ""Служебка на списание дисков"" по остаткам на складе на текущую дату " + формат(Отчет.СписатьОстаткиНаДату,"ДЛФ=DD");
				  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
			  Исключение
				  ЗаписьЖурналаРегистрации("Отчет <Служебка на списание дисков>",
				  УровеньЖурналаРегистрации.Информация,
				  ,
				  ,
				  ОписаниеОшибки(),
				  );
			  КонецПопытки;
			  
		//  конецЕсли;
		 	  // формирование распродажных цен на диски
			  попытка
				  ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(459); //формирование  распродажных цен
				  ИмяФайла = ПолучитьИмяВременногоФайла(); 
				  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
				  ДвоичныеДанные.Записать(ИмяФайла); 
				  
				  Отчет = ВнешниеОбработки.Создать(ИмяФайла,Ложь);
				  Отчет.СоздаватьДокументы = Истина;
				  Отчет.ВыгружатьвТерминал = Истина;
				  табДок    = Новый ТабличныйДокумент;
				  ТабДокМенеджер = Новый ТабличныйДокумент;

				  Отчет.СформироватьРаспродажу(ТабДок,ТабДокМенеджер);
				  ИмяФайла = КаталогВременныхФайлов() + "Новые цены на распродажу дисков.xls";
				  ИмяФайлаМенеджер = КаталогВременныхФайлов() + "Актуальная распродажа дисков.xls";

				  ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
				  ТабДокМенеджер.Записать(ИмяФайлаМенеджер,ТипФайлаТабличногоДокумента.XLS);
				  
				  АдресПочты = Адрес0;	 //
				  СписокФайловВложений = новый СписокЗначений;
				  путь = КаталогВременныхФайлов();
				  СписокФайловВложений.Добавить(путь+"Новые цены на распродажу дисков.xls");
				  УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //+++12.09.2017 вместо: no-reply@yst76.ru
				  Тема = "Новые цены на распродажу дисков";
				  ТекстСообщения = "    Автоматическая отправка 
				  |внешнего отчета № 459 ""Формирование цен для распродажи дисков"" на текущую дату";
				  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
				  
				  // всем менеджерам: Бондаренко, Плешивцева, Никитин  @yst76.ru>>  @yst.ru
				  АдресПочты = "alekseeva_ae@yst.ru;antonov@yst.ru;maresheva@yst.ru;pleshivtseva@yst.ru;nikitin_m@yst.ru;bondarenko@yst.ru;bondarenko@yst.ru;200200143@yst.ru;fonchikova@yst.ru;shaburova@yst.ru";	 //
				  
				  СписокФайловВложений = новый СписокЗначений;
				  путь = КаталогВременныхФайлов();
				  СписокФайловВложений.Добавить(путь+"Актуальная распродажа дисков.xls");
				  УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //+++12.09.2017 вместо: no-reply@yst76.ru
				  Тема = "Актуальные остатки по  распродаже дисков";
				  ТекстСообщения = "   Актуальные остатки по  распродаже дисков";
				  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);

				  
				  
				  
				  Запрос = Новый Запрос;
				  Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				                 |	ЗначенияСвойствОбъектов.Объект КАК Контрагент
				                 |ПОМЕСТИТЬ Контрагенты
				                 |ИЗ
				                 |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				                 |ГДЕ
				                 |	ЗначенияСвойствОбъектов.Свойство = &Свойство
				                 |	И ЗначенияСвойствОбъектов.Значение = ИСТИНА
				                 |;
				                 |
				                 |////////////////////////////////////////////////////////////////////////////////
				                 |ВЫБРАТЬ
				                 |	КонтактнаяИнформация.Представление КАК Адрес
				                 |ИЗ
				                 |	Контрагенты КАК Контрагенты
				                 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				                 |			КонтИнф.Объект КАК Объект,
				                 |			КонтИнф.Представление КАК Представление
				                 |		ИЗ
				                 |			РегистрСведений.КонтактнаяИнформация КАК КонтИнф
				                 |		ГДЕ
				                 |			КонтИнф.Тип = &Тип
				                 |			И КонтИнф.Вид = &Вид) КАК КонтактнаяИнформация
				                 |		ПО Контрагенты.Контрагент = КонтактнаяИнформация.Объект
				                 |ГДЕ
				                 |	НЕ КонтактнаяИнформация.Представление ЕСТЬ NULL ";
				  Запрос.УстановитьПараметр("Свойство", планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90183"));
				  Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				  Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами);
				  
				  рез = Запрос.Выполнить().Выгрузить();
				  //
				  
				  Для Каждого ЭлементКонтрагент Из Рез Цикл
				  АдресПочты = ЭлементКонтрагент.Адрес;
					  //сообщить(АдресПочты);
				  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
				  конецЦикла;	  
				  
				  				  
				  //Марешева, Антонов,Плешивцева, Никитин,Бондаренко
				  //АдресПочты = "alekseeva_ae@yst.ru;antonov@yst76.ru;maresheva@yst.ru;pleshivtseva@yst76.ru;nikitin_m@yst76.ru;bondarenko@yst76.ru";	 //
				  СписокФайловВложений = новый СписокЗначений;
				  путь = КаталогВременныхФайлов();
				  СписокФайловВложений.Добавить(путь+"Актуальная распродажа дисков.xls");
				  УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //+++12.09.2017 вместо: no-reply@yst76.ru
				  Тема = "Актуальные остатки по  распродаже дисков";
				  ТекстСообщения = "   Актуальные остатки по  распродаже дисков";
				  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);


				  
			  Исключение
				  ЗаписьЖурналаРегистрации("Обработка <Формирование цен для распродажи дисков>",
				  УровеньЖурналаРегистрации.Информация,
				  ,
				  ,
				  ОписаниеОшибки(),
				  );
			  КонецПопытки;
	  
	  

		
	  КонецЕсли; //конец 1 числа месяца
	  
	  	  Если День(ТекущаяДата()) = 2 Тогда  //второго числа каждого месяца
			  попытка
				  ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(468); //История списания брака
				  ИмяФайла = ПолучитьИмяВременногоФайла(); 
				  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
				  ДвоичныеДанные.Записать(ИмяФайла); 
				  
				  Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
				  Отчет.НачПериода = НачалоГода(ТекущаяДата());
				  Отчет.КонПериода = ТекущаяДата();
				  ТабДок = Новый ТабличныйДокумент;
				  Отчет.СкомпоноватьРезультат(ТабДок);
				  ИмяФайла = КаталогВременныхФайлов() + "История списания брака.xls";
				  ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
				  
				  АдресПочты = Адрес0;	 //
				  СписокФайловВложений = новый СписокЗначений;
				  путь = КаталогВременныхФайлов();
				  СписокФайловВложений.Добавить(путь+"История списания брака.xls");
				  УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //12.09.2017 вместо  no-reply@yst76.ru
 				  Тема = "История списания брака";
				  ТекстСообщения = "    Автоматическая отправка 
				  |внешнего отчета № 468 ""История списания брака"" за период с начала года по текущую дату" ;
				  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
			  Исключение
				  ЗаписьЖурналаРегистрации("Отчет <История списания брака>",
				  УровеньЖурналаРегистрации.Информация,
				  ,
				  ,
				  ОписаниеОшибки(),
				  );
			  КонецПопытки;
	  
	  
		  КонецЕсли; //конец 2 числа месяца
		  
		  
		  
	  Если День(ТекущаяДата())=15 Тогда
		  // остатки по складам брака
		  попытка 
			  ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(344); //Анализ предельно допустимых сроков хранения на складах брака
			  ИмяФайла = ПолучитьИмяВременногоФайла(); 
			  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
			  ДвоичныеДанные.Записать(ИмяФайла); 
			  
			  Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
			  Отчет.НаДату = ТекущаяДата();
			  ТабДок = Новый ТабличныйДокумент;
			  Отчет.СкомпоноватьРезультат(ТабДок);
			  ИмяФайла = КаталогВременныхФайлов() + "Отчет по складам брака.xls";
			  ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
			  
			  АдресПочты = Адрес0+";ulyanov@yst.ru";	 //
			  СписокФайловВложений = новый СписокЗначений;
			  путь = КаталогВременныхФайлов();
			  СписокФайловВложений.Добавить(путь+"Отчет по складам брака.xls");
			  УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //12.09.2017 вместо  no-reply@yst76.ru
			  Тема = "Анализ допустимых сроков хранения по складам брака";
			  ТекстСообщения = "    Автоматическая отправка 
			  |внешнего отчета № 344 ""Анализ допустимых сроков хранения по складам брака"" на текущую дату"  + формат(ТекущаяДата(),"ДЛФ=DD");
			  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
		  Исключение
			  ЗаписьЖурналаРегистрации("Отчет <Анализ допустимых сроков хранения по складам брака>",
			  УровеньЖурналаРегистрации.Информация,
			  ,
			  ,
			  ОписаниеОшибки(),
			  );
		  КонецПопытки;
		  
		  
	  КонецЕсли;  //конец 15 числа
	  
	  
	  
	  Если КонецДня(ТекущаяДата()) = КонецМесяца(ТекущаяДата()) Тогда  
		  
		  //Рассылка анализа будущей комплектации сезонных заказов
		  Попытка
			  ТекСсылка = Справочники.ВнешниеОбработки.НайтиПоКоду("396");		  
			  ИмяФайла = ПолучитьИмяВременногоФайла(); 
			  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
			  ДвоичныеДанные.Записать(ИмяФайла); 
			  Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
				  ОтчетПоБудущейКомплектацииСезонныхЗаказовПокупателей = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
			  Иначе 
				  ОтчетПоБудущейКомплектацииСезонныхЗаказовПокупателей = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
			  КонецЕсли; 
			  ОтчетПоБудущейКомплектацииСезонныхЗаказовПокупателей.ВыполнитьАнализ();
		  Исключение
			  ЗаписьЖурналаРегистрации("Отчет <Отчет по будущей комплектации сезонных заказов покупателей>",
			  УровеньЖурналаРегистрации.Информация,
			  ,
			  ,
			  ОписаниеОшибки(),
			  );
		  КонецПопытки;
		  
	  КонецЕсли;   //конец 27 числа
	  
	    Если НачалоДня(ТекущаяДата()) = НачалоДня(КонецМесяца(ТекущаяДата())) Тогда
	   Попытка
			  ТекСсылка = Справочники.ВнешниеОбработки.НайтиПоКоду("489"); 
			  ИмяФайла = ПолучитьИмяВременногоФайла(); 
			  
			  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
			  ДвоичныеДанные.Записать(ИмяФайла); 
			  
			  Отчет = ВнешниеОбработки.Создать(ИмяФайла);
			  ТабДок = Новый ТабличныйДокумент;
			  ТабДок = Отчет.показатьОтчет();
			  ИмяФайла = КаталогВременныхФайлов() + "Отчет по максимальной нагрузке дисков.xls";
			  ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
			  
			  АдресПочты =Адрес0+";ulyanov@yst.ru";
			  СписокФайловВложений = новый СписокЗначений;
			  путь = КаталогВременныхФайлов();
			  СписокФайловВложений.Добавить(путь+"Отчет по максимальной нагрузке дисков.xls");
			  УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправителяЯШТ); //12.09.2017 вместо  no-reply@yst76.ru
			  Тема = "Отчет по максимальной нагрузке дисков";
			  ТекстСообщения = "    Автоматическая отправка 
			  |внешнего отчета № 489 ""Отчет по максимальной нагрузке дисков"" на текущую дату"  + формат(ТекущаяДата(),"ДЛФ=DD");
			  яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
		  Исключение
			  ЗаписьЖурналаРегистрации("Отчет <Отчет по максимальной нагрузке дисков>",
			  УровеньЖурналаРегистрации.Информация,
			  ,
			  ,
			  ОписаниеОшибки(),
			  );
		  КонецПопытки;

         конецЕсли;  // конец 28 числа
	  
  КонецПроцедуры //Конец рассылки писем Егору
  
Процедура РассылкаНакладныхРЗ() экспорт
	      РассылкаНакладных();
КонецПроцедуры
  
Процедура РассылкаНакладных(ДатаНач = неопределено, ДатаКон = неопределено) Экспорт
			//18.03.2016 - перенесено из процедуры модуля ПередЗаписью!	 
	//======================@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@======================================		
		//МКонтрагентов = Новый Массив;
		////+++ 23.10.2015 - Марешева  - Группа Бринэкс (92226) и Мегадиск (П003599)
		//МКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоКоду("92226"));   
		////minigalieva.n@brinex.ru; efremova.o@brinex.ru; diskizakup@brinex.ru; mamshova.o@brinex.ru; syleimanov.r@brinex.ru; malyshev@yst.ru;reneva.m@brinex.ru;lobyshev.e@brinex.ru;rafikov.m@brinex.ru;speczakaz@brinex.ru;myrzaliev.r@brinex.ru
		//МКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоКоду("П003599")); 
		////reneva.m@brinex.ru;syleimanov.r@brinex.ru; efremova.o@brinex.ru; diskizakup@brinex.ru; syleimanov.r@brinex.ru; lobyshev.e@brinex.ru;rafikov.m@brinex.ru;speczakaz@brinex.ru
		//МКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоКоду("П003385")); // #Абашкин 13.01.2016г. 
		////76pokrishkin@gmail.com,89201003234@mail.ru,abashkin@yst.ru
		
		КаталогВременныхФайлов ="\\terminal\RESTORE Userdir\Отправленные документы\Рассылка задолженности\";
		
		//надоОтправлять=ложь;
		//для i=0 по МКонтрагентов.Количество()-1 цикл
		//	для каждого стр1 из ЗаказыПокупателей цикл
		//		если стр1.Реализация.Контрагент = МКонтрагентов[i] тогда
		//			надоОтправлять=истина;
		//			прервать;
		//		КонецЕсли;
		//	КонецЦикла;	
		//КонецЦикла;	
		//		
		//Если надоОтправлять тогда
		//	Сообщить("--------идет обработка документа для отправки писем Клиентам--------");
		//	
		//	Состояние(строка(ТекущаяДата())+" запись документа...");
		//	ЗаписатьВФорме(); //СРАЗУ ЗАПИСЫВАЕМ!
		
		
		Если ДатаНач = 	неопределено тогда
			НачДата = НачалоДня(НачалоДня(ТекущаяДата())-1);
		Иначе
			НачДата = ДатаНач;
		КонецЕсли;
		
		Если ДатаКон = 	неопределено тогда
			 КонДата = НачалоДня(ТекущаяДата())-1;
		 Иначе
			 КонДата = ДатаКон;
		 КонецЕсли;
		 
	ИсключаемыеКонтрагенты = Новый Массив;
	ИсключаемыеКонтрагенты.Добавить(Справочники.Контрагенты.НайтиПоКоду("П001125"));  // ШинТрейд Ярославль (Контаер) 
	ИсключаемыеКонтрагенты.Добавить(Справочники.Контрагенты.НайтиПоКоду("92923"));    // ПромПроект
	ИсключаемыеКонтрагенты.Добавить(Справочники.Контрагенты.НайтиПоКоду("92633"));    // Шинный Союз
	
	ИсключаемыеТипыДоговоров = Новый Массив;
	ИсключаемыеТипыДоговоров.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0004"));  // Формула Авто
	ИсключаемыеТипыДоговоров.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0007"));  // Формула авто плюс 
	ИсключаемыеТипыДоговоров.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0006"));  // Шинтрейд ярославль (экспорт)

		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтактнаяИнформация.Представление КАК Адрес,
		               |	РеализацияТоваровУслуг.Ссылка КАК Реализация,
		               |	РеализацияТоваровУслуг.Контрагент
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			КонтИнф.Объект КАК Объект,
		               |			КонтИнф.Представление КАК Представление
		               |		ИЗ
		               |			РегистрСведений.КонтактнаяИнформация КАК КонтИнф
		               |		ГДЕ
		               |			КонтИнф.Тип = &Тип
		               |			И КонтИнф.Вид = &Вид) КАК КонтактнаяИнформация
		               |		ПО РеализацияТоваровУслуг.Контрагент = КонтактнаяИнформация.Объект
		               |ГДЕ
		               |	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаС И &ДатаПО
		               |	И НЕ РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
		               |	И НЕ РеализацияТоваровУслуг.Номер ПОДОБНО ""%ПЕ%""
		               |	И НЕ РеализацияТоваровУслуг.Комментарий ПОДОБНО ""%Излишки%""
		               |	И РеализацияТоваровУслуг.Проведен = ИСТИНА
		               |	И НЕ РеализацияТоваровУслуг.ДоговорКонтрагента.ТипДоговора В (&ИсключаемыеТипыДоговоров)
		               |	И НЕ РеализацияТоваровУслуг.Контрагент В (&ИсключаемыеКонтрагенты)";
					   //Запрос.УстановитьПараметр("ДатаС", НачалоДня(НачалоДня(ТекущаяДата())-1));
					   //Запрос.УстановитьПараметр("ДатаПО", НачалоДня(ТекущаяДата())-1);
					   Запрос.УстановитьПараметр("ДатаС", НачДата);
					   Запрос.УстановитьПараметр("ДатаПО", КонДата);

		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами);
		//Запрос.УстановитьПараметр("МКонтрагентов", МКонтрагентов);
		Запрос.УстановитьПараметр("ИсключаемыеТипыДоговоров",ИсключаемыеТипыДоговоров); 
	    Запрос.УстановитьПараметр("ИсключаемыеКонтрагенты",ИсключаемыеКонтрагенты); 

		//Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		рез1 = Запрос.Выполнить();
		
		Если не рез1.Пустой() Тогда
			
		ТЗРеализаций = рез1.Выгрузить();
		
		ТаблицаКонтрагентов  = ТЗРеализаций.Скопировать();
		ТаблицаКонтрагентов.Свернуть("Контрагент");
		
		МКонтрагентов = ТаблицаКонтрагентов.ВыгрузитьКолонку("Контрагент");
		
		
			Для Каждого ЭлементКонтрагент Из МКонтрагентов Цикл
				СтруктураОтбора = Новый Структура("Контрагент", ЭлементКонтрагент); 
		//!!!		Состояние(строка(ТекущаяДата())+" идет запись ТОРГ-12 и Счета для отправки письма по клиенту: "+строка(ЭлементКонтрагент));
				
				МРеализаций = ТЗРеализаций.НайтиСтроки(СтруктураОтбора);
				
				Если МРеализаций.Количество() > 0 Тогда
					
					СписокФайловВложений = Новый СписокЗначений;
					
					Для Каждого СтрокаМ Из МРеализаций Цикл
						
						//ИмяФайлаСообщенияСчет = "Счет_"+СтрокаМ.Реализация.Номер+".xls";	
						ИмяФайлаСообщенияТорг = "УПД(ТОРГ12+Счет-Фактура)_"+СтрокаМ.Реализация.Номер+".xls";
						//ДокОбъект = СтрокаМ.Реализация.ПолучитьОбъект();
						//
						//ТабличныйДокументОбъект = ДокОбъект.ПечатьСчетаЗаказа("Счет");
						//ТабличныйДокументОбъект.Записать(КаталогВременныхФайлов+ИмяФайлаСообщенияСчет,ТипФайлаТабличногоДокумента.XLS);
						//
						//СписокФайловВложений.Добавить(КаталогВременныхФайлов+ИмяФайлаСообщенияСчет);
						
						//+++ ТабличныйДокументОбъект = ДокОбъект.ПечатьТОРГ12();
						//23.10.2015
						
						//Если СтрокаМ.Реализация.контрольСумма <> СтрокаМ.Реализация.СуммаДокумента или  СтрокаМ.Реализация.контрольКоличество <> СтрокаМ.Реализация.Товары.Итог("Количество") Тогда
						//	СтрокаМ.Реализация.ПолучитьОбъект().ПеренестиДокиВБухгалтерию();
						//КонецЕсли;
						//
						//Если СтрокаМ.Реализация.контрольСумма <> СтрокаМ.Реализация.СуммаДокумента или  СтрокаМ.Реализация.контрольКоличество <> СтрокаМ.Реализация.Товары.Итог("Количество") Тогда
						//	Продолжить;
						//КонецЕсли;

						
						ИмяМакета = "ТОРГ-12 (Яршинторг).";
						ОбъектВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(ИмяМакета).ПолучитьОбъект();
						ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
						
						ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
						ДвоичныеДанные.Записать(ИмяФайла);
						
						Обработка = ВнешниеОбработки.Создать(ИмяФайла, ложь);
						Обработка.СсылкаНаОбъект = СтрокаМ.Реализация.Ссылка;
						ТабличныйДокументОбъект  = Обработка.Печать();
						
						//+++ 19.07.2016 может вернуть "ничего"
						Если ТабличныйДокументОбъект<>Неопределено тогда
							ТабличныйДокументОбъект.Записать(КаталогВременныхФайлов+ИмяФайлаСообщенияТорг,ТипФайлаТабличногоДокумента.XLS);
					//	 //Плотников+++
					//	 Попытка
					//	 ЛокПолноеИмяФайла = КаталогВременныхФайлов()+СтрокаМ.Реализация.Ссылка.Номер+".mxl";
					//	 СтрокаМ.Реализация.Ссылка.УПД.Получить().Записать(ЛокПолноеИмяФайла);
					//
					//	СписокФайловВложений.Добавить(ЛокПолноеИмяФайла);
					//	исключение
					//	КонецПопытки;
					//	 //Плотников+++

						СписокФайловВложений.Добавить(КаталогВременныхФайлов+ИмяФайлаСообщенияТорг);		
						КонецЕсли;
						
					КонецЦикла;
					
					Если СписокФайловВложений.Количество() > 0 Тогда
						УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
						Тема = "Документы отгрузки от ЗАО ТК ""Яршинторг""";
						ТекстСообщения = "Добрый день,
										  |
										  |   Высылаем Вам копии отгрузочных документов: ТОРГ-12 и Счет на оплату
										  | Это письмо создано автоматически. Отвечать на него НЕ НУЖНО.
										  |";
						//АдресПолучателя = "plotnikov@yst.ru; smirnov@yst.ru";
						АдресПолучателя = "";
						АдресПолучателя = АдресПолучателя+"; "+МРеализаций[0].Адрес;
						
					//!!!		Состояние(строка(ТекущаяДата())+" идет отправка письма на адрес: "+АдресПолучателя);
						Если ЗначениеЗаполнено(АдресПолучателя) Тогда
							яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателя,СписокФайловВложений, УЗ, ТекстСообщения, Тема);
						КонецЕсли;
					КонецЕсли; //СписокФайловВложений
					
				КонецЕсли;//МРеализаций		
				
				//Состояние(строка(ТекущаяДата())+" отправка песьма по заданию № "+строка(ЭтотОбъект.Номер)+" - выполнена.");
			
			КонецЦикла; //МКонтрагентов
			
		КонецЕсли;	
				//Состояние(строка(ТекущаяДата())+" отправка писем по заданию № "+строка(ЭтотОбъект.Номер)+" - выполнена.");
		//КонецЕсли;//надоОтправлять
//===================================@@@@@@@@@@@@@@@@@@@@@@@@@=========================================  
	  

КонецПроцедуры
 

Процедура РассылкаОтчетовДляПелевина() Экспорт
	
	Попытка
		ТекСсылка = Справочники.ВнешниеОбработки.НайтиПоКоду("471"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		
		Отчет = ВнешниеОтчеты.Создать(ИмяФайла,Ложь);
		ДатаНач = НачалоДня(ТекущаяДата());
		ДатаКон = КонецДня(ТекущаяДата());
		ТабДок = Новый ТабличныйДокумент;
		
		Отчет.СкомпоноватьОтчет(ТабДок, ДатаНач,ДатаКон);
		ИмяФайла = КаталогВременныхФайлов() + "Управленческий учет по транспортному направлению.xls";
		ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
		
		//АдресПочты = "Pelevin-s@mail.ru";
		АдресПочты = "zapahov@yst.ru";
		СписокФайловВложений = новый СписокЗначений;
		путь = КаталогВременныхФайлов();
		СписокФайловВложений.Добавить(путь+"Управленческий учет по транспортному направлению.xls");
		УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
		Тема = "Управленческий учет по транспортному направлению";
		ТекстСообщения = "    Автоматическая отправка 
		|внешнего отчета № 471 ""Управленческий учет по транспортному направлению"" на текущую дату"  + формат(ТекущаяДата(),"ДЛФ=DD");
		яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
		// Заявки на транспорт
		ТекСсылка = Справочники.ВнешниеОбработки.НайтиПоКоду("494"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		
		Отчет = ВнешниеОтчеты.Создать(ИмяФайла,Ложь);
		ДатаНач = НачалоДня(ТекущаяДата());
		ДатаКон = КонецДня(ТекущаяДата());
		ТабДок = Новый ТабличныйДокумент;
		
		ТабДок =  Отчет.Сформировать();
		ИмяФайла = КаталогВременныхФайлов() + "Заявки на транспорт.xls";
		ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
		
		АдресПочты = "malyshev@yst-group.com;zapahov@yst.ru";
		//АдресПочты2 = "plotnikov@yst.ru";

		СписокФайловВложений = новый СписокЗначений;
		путь = КаталогВременныхФайлов();
		СписокФайловВложений.Добавить(путь+"Заявки на транспорт.xls");
		УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
		Тема = "Заявки на транспорт";
		ТекстСообщения = "    Автоматическая отправка 
		|внешнего отчета № 494 ""Заявки на транспорт"" на текущую дату"  + формат(ТекущаяДата(),"ДЛФ=DD");
		яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
	Исключение
		ЗаписьЖурналаРегистрации("Отчет <Управленческий учет по транспортному направлению>",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		); 		
	КонецПопытки;   	
КонецПроцедуры	


процедура ВыгрузкаТоваровВПутиИПроизводствеВТерминал() Экспорт
	Попытка
		ТекСсылка = Справочники.ВнешниеОбработки.НайтиПоКоду("485"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		
		Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
		Отчет.период = ТекущаяДата();
		ТабНомН = Отчет.ПодготовитьТабДляВыгрузки();
		
		ИмяФайла=КаталогВременныхФайлов()+"OnWayItems_terminal.xml"; // на сервере - своя папка...
		
		ОбъектXML = Новый ЗаписьXML;
		ОбъектXML.ОткрытьФайл(ИмяФайла, "UTF-8");
		ОбъектXML.ЗаписатьОбъявлениеXML();  //<?xml version="1.0"?>
		ОбъектXML.ЗаписатьНачалоЭлемента("ProductsOnWay");
		
		
		Для каждого запись из ТабНомН Цикл
			ОбъектXML.ЗаписатьНачалоЭлемента("Product");
			ОбъектXML.ЗаписатьАтрибут("ProductId", Запись.Код); //строка
			ОбъектXML.ЗаписатьАтрибут("ProdOrWay", Строка(Запись.Впути) ); //строка
			//ОбъектXML.ЗаписатьАтрибут("DateOfArrival", Строка(Формат(Запись.Дата,"ДФ=yyyy-MM-dd")) ); //строка
			ОбъектXML.ЗаписатьАтрибут("DateOfArrival", Строка(Формат(Запись.Дата,"ДФ=dd.MM.yyyy")) ); //строка
			
			ОбъектXML.ЗаписатьАтрибут("Count", СтрЗаменить(Строка(Запись.Количество)," ","") ); //строка
			
			ОбъектXML.ЗаписатьКонецЭлемента(); 
		конецЦикла;
		ОбъектXML.ЗаписатьКонецЭлемента(); 
		ОбъектXML.Закрыть();
		
		удачно = ОбменСУТИнтернетМагазин.SIM_ВыгрузитьФайлНаСервер(ИмяФайла,"ImportOnWayItems", Истина, "terminal.yst.ru" );
		//	удачно = SIM_ВыгрузитьФайлНаСервер(ИмяФайла,"ImportOnWayItems", Истина, "terminal.yst.ru" );
		
		#Если Клиент Тогда
			сообщить("Сформирован файл выгрузки "+Имяфайла);
			Если удачно Тогда
				сообщить("Файл удачно выгружен в Terminal");
			конецЕсли;                                     	
		#конецесли	
		
		
		
	Исключение
		ЗаписьЖурналаРегистрации("Отчет <Выгрузка в терминал товаров в пути и производстве>",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		); 		
	КонецПопытки;   	
	
	/////////////////////// свободные остаки в пути
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.Номенклатура.Код,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток, 0) КАК Остаток
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.Видытоваров.Диски)) КАК ЗаказыПоставщикамОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(, ЗаказПокупателяСезонный.Организация = &организация) КАК ЗаказыПокупателейСезонныеОстатки
		|		ПО ЗаказыПоставщикамОстатки.Номенклатура = ЗаказыПокупателейСезонныеОстатки.Номенклатура
		|ГДЕ
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток, 0) > 0";
		
		Запрос.УстановитьПараметр("организация", Справочники.Организации.НайтиПоКоду("00001"));
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		
		ИмяФайла=КаталогВременныхФайлов()+"ProductsFreeOnWay_terminal.xml"; // на сервере - своя папка...
		
		ОбъектXML = Новый ЗаписьXML;
		ОбъектXML.ОткрытьФайл(ИмяФайла, "UTF-8");
		ОбъектXML.ЗаписатьОбъявлениеXML();  //<?xml version="1.0"?>
		ОбъектXML.ЗаписатьНачалоЭлемента("ProductsOnWay");
		наборЗаписей = РегистрыСведений.АссортиментРаспродажиДляТерминала.СоздатьНаборЗаписей();
		наборЗаписей.Прочитать();
		Пока Выборка.Следующий() Цикл
			ОбъектXML.ЗаписатьНачалоЭлемента("Product");
			ОбъектXML.ЗаписатьАтрибут("Count", Формат(Выборка.Остаток,"ЧДЦ=0; ЧГ=0"));
			ОбъектXML.ЗаписатьАтрибут("ProductId", Выборка.НоменклатураКод); //строка
			ОбъектXML.ЗаписатьКонецЭлемента(); 
		конецЦикла;
		ОбъектXML.ЗаписатьКонецЭлемента(); 
		ОбъектXML.Закрыть();
		
		удачно = ОбменСУТИнтернетМагазин.SIM_ВыгрузитьФайлНаСервер(ИмяФайла,"ImportOnWayItemsAvailables", Истина, "terminal.yst.ru" );
		#Если Клиент Тогда
			сообщить("Сформирован файл выгрузки "+Имяфайла);
			Если удачно Тогда
				сообщить("Файл удачно выгружен в Terminal");
			конецЕсли;                                     	
		#конецесли
		
		
	Исключение
		ЗаписьЖурналаРегистрации("Отчет <Выгрузка в терминал товаров в пути и производстве>",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		); 		
	КонецПопытки;   	
	
	
	
	
	
	
конецПроцедуры

Процедура ОбменСБП(ДатаНач = Неопределено, ДатаКон = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1",?(ДатаНач = Неопределено, НачалоДня(НачалоДня(ТекущаяДата())-1), ДатаНач));
	Запрос.УстановитьПараметр("Дата2",?(ДатаКон = Неопределено, НачалоДня(ТекущаяДата())-1,ДатаКон ));
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Дата МЕЖДУ &Дата1 И &Дата2
	               |	И НЕ РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	               |	И НЕ РеализацияТоваровУслуг.Комментарий ПОДОБНО ""%Излишки%""";
	Рез = Запрос.Выполнить().Выгрузить();
	СписокРеализаций = Новый СписокЗначений;
	Для каждого стр из Рез Цикл
		СписокРеализаций.Добавить(стр.Ссылка);
	КонецЦикла;
	
	Если  СписокРеализаций.Количество()>0 Тогда
	НаименованиеОбработки="УниверсальныйОбменДаннымиXMLv2";
	Если Метаданные.Обработки.Найти("УниверсальныйОбменДаннымиXMLv2") = Неопределено Тогда
		НаименованиеОбработки="УниверсальныйОбменДаннымиXML";
	КонецЕсли;	
	Обработка = Обработки[НаименованиеОбработки].Создать();
	
	удалитьфайлы(КаталогВременныхФайлов(),"*.mxl");

	Обработка.РежимОбмена = "Выгрузка";
	
	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";

	МакетПравилОбмена = ПолучитьОбщийМакет("ОбменУТБП");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	Обработка.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	
	Обработка.ЗагружатьДанныеВРежимеОбмена = Истина;
	Обработка.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
	Обработка.ЗапоминатьЗагруженныеОбъекты = Истина;
	Обработка.ИспользоватьОтборПоДатеДляВсехОбъектов = Истина;
	
	Обработка.ВыгружатьТолькоРазрешенные = Истина;
	Обработка.ВерсияПлатформыИнформационнойБазыДляПодключения = "V83";
	Обработка.ИмяСервераИнформационнойБазыДляПодключения = "server:3041"; //01.07.2013
	Обработка.ИмяИнформационнойБазыНаСервереДляПодключения = "v83ib_yst_bp";
	Обработка.ПользовательИнформационнойБазыДляПодключения = "Робот (центр - номенклатура)";
	Обработка.ПарольИнформационнойБазыДляПодключения = "09876";
	Обработка.ТипИнформационнойБазыДляПодключения = Ложь;
	Обработка.АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;
	Обработка.НепосредственноеЧтениеВИБПриемнике = Истина;
	Обработка.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0; // 0 - не снимать регистрацию,

	Обработка.ЗагрузитьПравилаОбмена();
	Обработка.Параметры.Вставить("ОбъектДляВыгрузки",СписокРеализаций);
	Обработка.ВыполнитьВыгрузку();
	//Сообщить(строка(ТекущаяДата())+"Загрузка окончена. ");
	
    конецЕсли;

	для каждого стр из СписокРеализаций Цикл
        СсылкаНаОбъект = Стр.Значение;
        ЛокПолноеИмяФайла = КаталогВременныхФайлов()+СсылкаНаОбъект.Номер+".mxl";
        Попытка
            СсылкаНаОбъект.УПД.Получить().Записать(ЛокПолноеИмяФайла);
		Исключение
			//сообщить(ЛокПолноеИмяФайла);
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры


 процедура проверитьОстатокИМВподразделениях() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МинимальныйОстатокВПодразделенияхДляИМ.Номенклатура,
		|	МинимальныйОстатокВПодразделенияхДляИМ.Количество - ЕСТЬNULL(РезервДляИМОстатки.КоличествоОстаток, 0) КАК Количество,
		|	МинимальныйОстатокВПодразделенияхДляИМ.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.МинимальныйОстатокВПодразделенияхДляИМ КАК МинимальныйОстатокВПодразделенияхДляИМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервДляИМ.Остатки КАК РезервДляИМОстатки
		|		ПО МинимальныйОстатокВПодразделенияхДляИМ.Подразделение = РезервДляИМОстатки.Подразделение
		|			И МинимальныйОстатокВПодразделенияхДляИМ.Номенклатура = РезервДляИМОстатки.Номенклатура
		|ГДЕ
		|	МинимальныйОстатокВПодразделенияхДляИМ.Количество - ЕСТЬNULL(РезервДляИМОстатки.КоличествоОстаток, 0) > 0
		|ИТОГИ ПО
		|	Подразделение";

	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		ВыборкаПодразделение = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаПодразделение.Следующий() Цикл
			задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
			задача.Объект = ВыборкаПодразделение.Подразделение;
			Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Смирнов А");
			задача.Наименование = "Остатки товара на филиалах ниже допустимого количества!"; 
			задача.Описание = "Остатки товара на филиале " + ВыборкаПодразделение.Подразделение.Наименование + " ниже допустимого количества! Необходимое количество товара до разрешенного минимума на закладке""Товары""";
			задача.Инициатор   = справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
			Выборка = ВыборкаПодразделение.Выбрать();
			Пока Выборка.Следующий() Цикл
				НовСтрТовары = задача.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрТовары,Выборка);
			КонецЦикла;
			//	Задача.Товары.Загрузить(Результат.Выгрузить());
			задача.Дата 		    = ТекущаяДата();
			задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
			задача.Оповещение     = истина;
			задача.СрокОповещения = ТекущаяДата();
			задача.Записать();
		КонецЦикла;	
	конецЕсли;
конецпроцедуры	

Процедура РасчитатьНДСавтоэксперт() Экспорт
	
	НачДата = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),-1));
	КонДата = КонецМесяца(ДобавитьМесяц(ТекущаяДата(),-1));
	
	Запрос = Новый Запрос;
		
	Запрос.УстановитьПараметр("Прочее",Перечисления.ВидыТоваров.Прочее);
	
	Запрос.УстановитьПараметр("НачДата",НачДата);
	
	Запрос.УстановитьПараметр("КонДата",КонецДня(КонДата) );
	
	Запрос.УстановитьПараметр("Направление",Справочники.НаправленияПродаж.НайтиПоКоду("16"));
	
	Запрос.УстановитьПараметр("Ставка",100 + ПолучитьСтавкуНДС( СтавкаНДСнаДату( ТекущаяДата()) ) );

	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ТаблицаРегистра.Номенклатура.ВидТовара, &Прочее) КАК ВидТовара,
	               |	ТаблицаРегистра.Номенклатура КАК Номенклатура,
	               |	СУММА(ТаблицаРегистра.КоличествоОборот) КАК Количество,
	               |	СУММА(ТаблицаРегистра.КоличествоОборот * ТаблицаРегистра.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоБазовыхЕд,
	               |	СУММА(ТаблицаРегистра.СтоимостьОборот) КАК Стоимость,
	               |	СУММА(ТаблицаРегистраСебестоимость.СтоимостьОборот) КАК Себестоимость,
	               |	СУММА(ВЫБОР
	               |			КОГДА ТаблицаРегистра.СтоимостьОборот ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	               |		КОНЕЦ) - СУММА(ВЫБОР
	               |			КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ ТаблицаРегистраСебестоимость.СтоимостьОборот
	               |		КОНЕЦ) КАК ВаловаяПрибыль,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА ТаблицаРегистра.СтоимостьОборот <> 0
	               |					ТОГДА 100 * (ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистраСебестоимость.СтоимостьОборот) / ТаблицаРегистра.СтоимостьОборот
	               |				ИНАЧЕ 0
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК РентабельностьПродаж,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот <> 0
	               |					ТОГДА 100 * (ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистраСебестоимость.СтоимостьОборот) / ТаблицаРегистраСебестоимость.СтоимостьОборот
	               |				ИНАЧЕ 0
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ПроцентНаценки,
	               |	СУММА(ВЫБОР
	               |			КОГДА ТаблицаРегистра.СтоимостьОборот ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	               |		КОНЕЦ) - СУММА(ВЫБОР
	               |			КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ ТаблицаРегистраСебестоимость.СтоимостьОборот
	               |		КОНЕЦ) - (СУММА(ВЫБОР
	               |			КОГДА ТаблицаРегистра.СтоимостьОборот ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	               |		КОНЕЦ) - СУММА(ВЫБОР
	               |			КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ ТаблицаРегистраСебестоимость.СтоимостьОборот
	               |		КОНЕЦ)) / &Ставка * 100 КАК СуммаНДС
	               |ИЗ
	               |	РегистрНакопления.Продажи.Обороты(&НачДата, &КонДата, Регистратор, ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = &Направление) КАК ТаблицаРегистра
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&НачДата, &КонДата, Регистратор, ) КАК ТаблицаРегистраСебестоимость
	               |		ПО ТаблицаРегистра.Номенклатура = ТаблицаРегистраСебестоимость.Номенклатура
	               |			И ТаблицаРегистра.ХарактеристикаНоменклатуры = ТаблицаРегистраСебестоимость.ХарактеристикаНоменклатуры
	               |			И ТаблицаРегистра.ЗаказПокупателя = ТаблицаРегистраСебестоимость.ЗаказПокупателя
	               |			И ТаблицаРегистра.Подразделение = ТаблицаРегистраСебестоимость.Подразделение
	               |			И ТаблицаРегистра.Регистратор = ТаблицаРегистраСебестоимость.Регистратор
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаРегистра.Номенклатура,
	               |	ЕСТЬNULL(ТаблицаРегистра.Номенклатура.ВидТовара, &Прочее)
	               |АВТОУПОРЯДОЧИВАНИЕ";
    Результат = Запрос.Выполнить().Выгрузить();

    Итог = Результат.Скопировать();
    Итог.Свернуть(,"Количество,КоличествоБазовыхЕд,стоимость,Себестоимость,ВаловаяПрибыль,СуммаНДС");
	
	ПрибыльНДС = Итог[0].СуммаНДС;
	Прибыль = Итог[0].ВаловаяПрибыль;
		
	/// Затраты	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",НачДата);	
	Запрос.УстановитьПараметр("КонДата",КонецДня(КонДата) );
	Запрос.УстановитьПараметр("Подразделение",Справочники.Подразделения.НайтиПоКоду("00139") );
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугУслуги.Ссылка,
	               |	ПоступлениеТоваровУслугУслуги.СтатьяЗатрат,
	               |	ПоступлениеТоваровУслугУслуги.Сумма,
	               |	ПоступлениеТоваровУслугУслуги.СуммаНДС,
	               |	ПоступлениеТоваровУслугУслуги.НомерСтроки
	               |ПОМЕСТИТЬ НДС
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АвансовыйОтчетПрочее.Ссылка,
	               |	АвансовыйОтчетПрочее.СтатьяЗатрат,
	               |	АвансовыйОтчетПрочее.Сумма,
	               |	АвансовыйОтчетПрочее.СуммаНДС,
	               |	АвансовыйОтчетПрочее.НомерСтроки
	               |ИЗ
	               |	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Затраты.СтатьяЗатрат.Наименование КАК СтатьяЗатрат,
	               |	СУММА(Затраты.Сумма) КАК Сумма,
	               |	СУММА(ЕСТЬNULL(НДС.СуммаНДС, 0)) КАК СуммаНДС
	               |ИЗ
	               |	РегистрНакопления.Затраты КАК Затраты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ НДС КАК НДС
	               |		ПО Затраты.НомерСтроки = НДС.НомерСтроки
	               |			И Затраты.Регистратор = НДС.Ссылка
	               |			И Затраты.СтатьяЗатрат = НДС.СтатьяЗатрат
	               |			И Затраты.Сумма = НДС.Сумма
	               |ГДЕ
	               |	Затраты.Период МЕЖДУ &НачДата И &КонДата
	               |	И Затраты.Подразделение = &Подразделение
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Затраты.СтатьяЗатрат.Наименование";
	Результат = Запрос.Выполнить().Выгрузить();
	
	Итог = Результат.Скопировать();
	
	Итог.Свернуть(,"Сумма,СуммаНДС");
	
	ЗатратыНДС = Итог[0].СуммаНДС;
	Затраты = Итог[0].Сумма;
	
	ИтогНДС = ПрибыльНДС-ЗатратыНДС;
	
	Нов = РегистрыСведений.НДСИнтернетМагазина.СоздатьМенеджерЗаписи();
	Нов.Месяц = НачДата;
	Нов.Сумма = ИтогНДС;
	Нов.Записать();
	
КонецПроцедуры

//------------------------------------------------------------------ 	
   //  |	ВТ_Просрочка.Реализация.Дата  КАК ДатаОтгрузки,
   //  |	ВТ_Просрочка.ДатаОплаты КАК ДатаОплаты,
   //  |	ВТ_Просрочка.ДнейПросрочки,
   //
   //  |	ВТ_Просрочка.Заказ.Номер КАК НомерЗаказа,
   //  |	ВТ_Просрочка.Реализация.Номер как НомерРеализации,
   //  
   //  |	ВТ_Просрочка.Заказ КАК Заказ,
   //  |	ВТ_Просрочка.Реализация как Реализация,
   // 
   //  |	    ВТ_Просрочка.СуммаДокумента,
   //  |	ВТ_Просрочка.ДоговорКонтрагента,
   //
   //  |	ВТ_Просрочка.СуммаОстаток КАК СуммаОстаток,
   //  |	ВТ_Просрочка.Контрагент КАК Контрагент,
   //  |	ВТ_Просрочка.Вид КАК Вид,
   //  |	ВТ_Просрочка.ЮрАдрес КАК ЮрАдрес,
   //  |	ВТ_Просрочка.Контрагент.Код КАК КодКонтрагента,
   //  |	ВТ_Просрочка.ЭлПочта КАК ЭлПочта,
   //  |	ВТ_Просрочка.СуммаПени КАК СуммаПени
   //
Функция РассылкаСообщенийОПДЗ(АдресОтправки="", ИмяКаталога0="", ХранитьВБазе1С=ЛОЖЬ, КодКлиента="") Экспорт
	
	УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправки);
 	КомуСоздаватьЗадачуОбОтсутвииЭлАдресов = "Бондаренко Е.Д. (снабжение)";
	ИмяКаталога = КаталогВременныхФайлов();  //сначала пишем сюда... а потом переносим в ИмяКаталога0
	СоздатьЗадачуАдрес   = Ложь;
	СоздатьЗадачуЭлПочта = Ложь;
	
	// 17.08.2017 на  следующий день (+1) после срока оплаты - начинается просрочка 
	//	но ещё +1 день - берется на регистрацию прихода денег ! 
	СдвигДатыОплаты   = 2;
	
	СписокТиповДоговора = Новый СписокЗначений;
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));    //00004
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата"));  //00001
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.ФакторингПредоплата); //17.08.2017   --- ещё предоплаты!!! ---
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.ПредоплатаПоСчетам);
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Пени"));
	
	СписокТиповДоговораДляОтбора = Новый СписокЗначений;
	СписокТиповДоговораДляОтбора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));   //00004
	СписокТиповДоговораДляОтбора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата")); //00001
    СписокТиповДоговораДляОтбора.Добавить(Справочники.ТипыДоговоров.ФакторингПредоплата); //17.08.2017  --- ещё предоплаты!!! ---
	СписокТиповДоговораДляОтбора.Добавить(Справочники.ТипыДоговоров.ПредоплатаПоСчетам);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);
	Запрос.УстановитьПараметр("СписокТиповДоговораДляОтбора", СписокТиповДоговораДляОтбора);

	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("СвойствоПДЗ", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90210"));
    Запрос.УстановитьПараметр("Пени",Справочники.ТипыДоговоров.НайтиПоНаименованию("Пени"));
	Запрос.УстановитьПараметр("СдвигДатыОплаты", СдвигДатыОплаты);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент
	                |ПОМЕСТИТЬ ВТ_КонтрагентыПоСделке
	                |ИЗ
	                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	                |			&ТекДата,
	                |			ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговораДляОтбора)
	                |				И (КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Сделка.ДатаОплаты, ДЕНЬ, &СдвигДатыОплаты), ДЕНЬ) = КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	                |					ИЛИ сделка ССЫЛКА Документ.НачислениеПени)
	                |				И ДоговорКонтрагента.Владелец.УведомлениеПДЗ
	                |				И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |ГДЕ
	                |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	КонтактнаяИнформация.Объект,
	                |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200)) КАК ЮрАдрес
	                |ПОМЕСТИТЬ ВТ_КонтИнфо
	                |ИЗ
	                |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                |ГДЕ
	              //+++ обязательно в 1 строку !!! 
	                  |	КонтактнаяИнформация.Объект В (ВЫБРАТЬ ВТ_КонтрагентыПоСделке.Контрагент ИЗ ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	                |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	                |	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	КонтактнаяИнформация.Объект как Объект1,
	                |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200)) КАК ЭлПочта
	                |ПОМЕСТИТЬ ВТ_АдресЭлПочты
	                |ИЗ
	                |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                |ГДЕ
	               //+++ обязательно в 1 строку !!! 
	                 |	КонтактнаяИнформация.Объект В (ВЫБРАТЬ ВТ_КонтрагентыПоСделке.Контрагент ИЗ ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	                |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	                |	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВЫБОР
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	                |	КОНЕЦ КАК Реализация,
	                |	СУММА(ВЫБОР
	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                |				ТОГДА -ВозвратТоваровОтПокупателяТовары.Сумма
	                |		КОНЕЦ) КАК СуммаДокумента,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка КАК Заказ,
					//+++
	                |	РАЗНОСТЬДАТ(ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты, &ТекДата, ДЕНЬ) КАК Днейпросрочки,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	                |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) КАК СуммаОстаток,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
	                |	МАКСИМУМ(1) КАК Вид,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты КАК ДатаОплаты,
	                |	ВТ_КонтИнфо.ЮрАдрес,
	                |	ЕСТЬNULL(ВТ_АдресЭлПочты.ЭлПочта, 0) КАК ЭлПочта,
	                |	СУММА(ВЫБОР
	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ТипДоговора = &Пени
	                |				ТОГДА ВЫБОР
	                |						КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	                |							ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	                |						КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                |							ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	                |						КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                |							ТОГДА -ВозвратТоваровОтПокупателяТовары.Сумма
	                |					КОНЕЦ
	                |			ИНАЧЕ 0
	                |		КОНЕЦ) КАК СуммаПени
	                |ПОМЕСТИТЬ ВТ_Просрочка
	                |ИЗ
	                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, , 	Регистратор,
	                |			Сделка В (ВЫБРАТЬ
	                |						ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	                |					ИЗ
	                |						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ТекДата, ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	                |							И (КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Сделка.ДатаОплаты, ДЕНЬ, &СдвигДатыОплаты), ДЕНЬ) <= КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	                |								ИЛИ сделка ССЫЛКА Документ.НачислениеПени)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |					ГДЕ
	                |						ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0)
	              //+++ обязательно в 1 строку !!! 
	                  |				И ДоговорКонтрагента.Владелец В (ВЫБРАТЬ ВТ_КонтрагентыПоСделке.Контрагент ИЗ ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	                |				И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОбороты
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.Регистратор = ВозвратТоваровОтПокупателяТовары.Ссылка
					
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ТекДата,
	                |				Сделка В (ВЫБРАТЬ ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	                |						ИЗ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ТекДата, ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	                |								И (КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Сделка.ДатаОплаты, ДЕНЬ, &СдвигДатыОплаты ), ДЕНЬ) <= КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	                |									ИЛИ сделка ССЫЛКА Документ.НачислениеПени)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |						ГДЕ
	                |							ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0)
	               //+++ обязательно в 1 строку !!! 
	                 |					И ДоговорКонтрагента.Владелец В (ВЫБРАТЬ ВТ_КонтрагентыПоСделке.Контрагент ИЗ ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке) 
					|								) КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
	                |			И ВзаиморасчетыСКонтрагентамиОбороты.Сделка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтИнфо КАК ВТ_КонтИнфо
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец = ВТ_КонтИнфо.Объект
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АдресЭлПочты КАК ВТ_АдресЭлПочты
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец = ВТ_АдресЭлПочты.Объект1
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВЫБОР
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	                |	КОНЕЦ,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка,
					//+++
	                |	РАЗНОСТЬДАТ(ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты, &ТекДата, ДЕНЬ),
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	                |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0),
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты,
	                |	ВТ_КонтИнфо.ЮрАдрес,
	                |	ЕСТЬNULL(ВТ_АдресЭлПочты.ЭлПочта, 0)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток,
	                |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Владелец
	                |ПОМЕСТИТЬ Вт_ОбщаяПДЗ
	                |ИЗ
	                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ТекДата,
	               //+++ обязательно в 1 строку !!! 
	                 |			ДоговорКонтрагента.Владелец В (ВЫБРАТЬ ВТ_КонтрагентыПоСделке.Контрагент ИЗ ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	                |				И ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговораДляОтбора)
	                |				И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Сделка.ДатаОплаты, ДЕНЬ, &СдвигДатыОплаты), ДЕНЬ) <= КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	                |				И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВЫБОР
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	                |	КОНЕЦ КАК Реализация,
	                |	СУММА(ВЫБОР
	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                |				ТОГДА -ВозвратТоваровОтПокупателяТовары.Сумма
	                |		КОНЕЦ) КАК СуммаДокумента,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка КАК Заказ,
	                |	МАКСИМУМ(2) КАК Вид,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты КАК ДатаОплаты,
	                |	ЕСТЬNULL(ВТ_КонтИнфо.ЮрАдрес, """") КАК ЮрАдрес,
	                |	ЕСТЬNULL(ВТ_АдресЭлПочты.ЭлПочта, """") КАК ЭлПочта,
	                |	ЕСТЬNULL(Вт_ОбщаяПДЗ.СуммаУпрОстаток, 0) КАК СуммаУпрОстаток,
	                |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаОстаток
	                |ПОМЕСТИТЬ ВТ_Непросрочка
	                |ИЗ
	                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(,,Регистратор,
	                |			Сделка В 	(ВЫБРАТЬ
	                |					ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	                |				ИЗ
	                |					РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ТекДата, 
					//+++ обязательно в 1 строку !!! 
	                |						  ДоговорКонтрагента.Владелец В (ВЫБРАТЬ ВТ_КонтрагентыПоСделке.Контрагент ИЗ ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	                |						И ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	                |						И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Сделка.ДатаОплаты, ДЕНЬ), ДЕНЬ, &СдвигДатыОплаты) > КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |				ГДЕ
	                |					ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0)) КАК ВзаиморасчетыСКонтрагентамиОбороты
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.Регистратор = ВозвратТоваровОтПокупателяТовары.Ссылка
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтИнфо КАК ВТ_КонтИнфо
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец = ВТ_КонтИнфо.Объект
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АдресЭлПочты КАК ВТ_АдресЭлПочты
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец = ВТ_АдресЭлПочты.Объект1
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Вт_ОбщаяПДЗ КАК Вт_ОбщаяПДЗ
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец = Вт_ОбщаяПДЗ.Владелец
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	                |				&ТекДата,
					//+++ обязательно в 1 строку !!! 
	                |				ДоговорКонтрагента.Владелец В (ВЫБРАТЬ ВТ_КонтрагентыПоСделке.Контрагент ИЗ ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	                |					И ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	                |					И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Сделка.ДатаОплаты, ДЕНЬ), ДЕНЬ, &СдвигДатыОплаты) > КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
	                |			И ВзаиморасчетыСКонтрагентамиОбороты.Сделка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	                |ГДЕ
	                |	Вт_ОбщаяПДЗ.СуммаУпрОстаток > 0
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВЫБОР
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	                |	КОНЕЦ,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты,
	                |	ЕСТЬNULL(ВТ_КонтИнфо.ЮрАдрес, """"),
	                |	ЕСТЬNULL(ВТ_АдресЭлПочты.ЭлПочта, """"),
	                |	ЕСТЬNULL(Вт_ОбщаяПДЗ.СуммаУпрОстаток, 0),
	                |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
					//+++ 17.08.2017 - явно все поля сразу в запросе!
	                 |	ВТ_Просрочка.Реализация.Дата  КАК ДатаОтгрузки,
				     |	ВТ_Просрочка.ДатаОплаты КАК ДатаОплаты,
				     |	ВТ_Просрочка.ДнейПросрочки,
	          	   
	          		 |	ВТ_Просрочка.Заказ.Номер КАК НомерЗаказа,
	                 |	ВТ_Просрочка.Реализация.Номер как НомерРеализации,
					//+++)	 
					 |	ВТ_Просрочка.Заказ КАК Заказ,
	                 |	ВТ_Просрочка.Реализация как Реализация,
			          |	ВТ_Просрочка.СуммаДокумента КАК СуммаДокумента,
	                 |	ВТ_Просрочка.ДоговорКонтрагента,
	                |	ВТ_Просрочка.СуммаОстаток КАК СуммаОстаток,
	                |	ВТ_Просрочка.Контрагент КАК Контрагент,
	                |	ВТ_Просрочка.Вид КАК Вид,
	                  |	ВТ_Просрочка.ЮрАдрес КАК ЮрАдрес,
	                |	ВТ_Просрочка.Контрагент.Код КАК КодКонтрагента,
	                |	ВТ_Просрочка.ЭлПочта КАК ЭлПочта,
	                |	ВТ_Просрочка.СуммаПени КАК СуммаПени
	                |ИЗ
	                |	ВТ_Просрочка КАК ВТ_Просрочка
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ВТ_Непросрочка.Реализация.Дата,
					|	ВТ_Непросрочка.ДатаОплаты,
				    |	0,
	             	  
	              	|	ВТ_Непросрочка.Заказ.Номер,
	                |	ВТ_Непросрочка.Реализация.Номер,
					
					|	ВТ_Непросрочка.Заказ,
	                |	ВТ_Непросрочка.Реализация,
         			|	ВТ_Непросрочка.СуммаДокумента,
	                 |	ВТ_Непросрочка.ДоговорКонтрагента,
	                |	ВТ_Непросрочка.СуммаОстаток,
	                |	ВТ_Непросрочка.Контрагент,
	                |	ВТ_Непросрочка.Вид,
	                |	ВТ_Непросрочка.ЮрАдрес,
	                |	ВТ_Непросрочка.Контрагент.Код,
	                |	ВТ_Непросрочка.ЭлПочта,
	                |	0
	                |ИЗ
	                |	ВТ_Непросрочка КАК ВТ_Непросрочка
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Вид,
	                |	ДатаОплаты,
					|	Заказ
	                |ИТОГИ
	                |	СУММА(СуммаДокумента),
	                |	СУММА(СуммаОстаток),
	                |	МАКСИМУМ(ЮрАдрес),
	                |	МАКСИМУМ(ЭлПочта),
	                |	СУММА(СуммаПени)
	                |ПО
	                |	Контрагент,
	                |	Вид" ;
	
    Если  КодКлиента<>"" тогда //17.08.2017 - только для 1 клиента принудительно!
		Запрос.Текст = стрЗаменить(Запрос.Текст,
		"В (ВЫБРАТЬ ВТ_КонтрагентыПоСделке.Контрагент ИЗ ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)", "=&Клиент1");
		Запрос.УстановитьПараметр("Клиент1", справочники.Контрагенты.НайтиПоКоду(КодКлиента) );
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаКонтрагент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если АдресОтправки="" и ИмяКаталога0="" тогда //17.08.2017 - для web-сервиса получаем всю выборку!
		Возврат РезультатЗапроса;
	иначе //возвращаем количество клиентов
		рез = ВыборкаКонтрагент.Количество();
	КонецЕсли;	
		
	СписокКлиентовБезЮрАдреса = "Не заполнен юр. адрес по контрагентам: "+ Символы.ПС;
	
	СписокКлиентовБезЭлПочты = "Не заполнен эл. почта по контрагентам: "+ Символы.ПС;

	РезультатПросрочка = Новый ТаблицаЗначений;
	
	РезультатПросрочка.Колонки.Добавить("Заказ");
	РезультатПросрочка.Колонки.Добавить("Реализация");
	
 	//+++ 17.08.2017 - ясно все поля сразу в запросе!
	РезультатПросрочка.Колонки.Добавить("ДатаОтгрузки");
	РезультатПросрочка.Колонки.Добавить("ДатаОплаты");
	РезультатПросрочка.Колонки.Добавить("НомерЗаказа");
	РезультатПросрочка.Колонки.Добавить("НомерРеализации");
	//+++)	
	РезультатПросрочка.Колонки.Добавить("СуммаДокумента");
	РезультатПросрочка.Колонки.Добавить("Днейпросрочки");
	РезультатПросрочка.Колонки.Добавить("ДоговорКонтрагента");
    РезультатПросрочка.Колонки.Добавить("суммаПени");
	РезультатПросрочка.Колонки.Добавить("СуммаОстаток");


	Пока ВыборкаКонтрагент.Следующий() Цикл
	
		Если ЗначениеНеЗаполнено(ВыборкаКонтрагент.ЮрАдрес) Тогда
			СписокКлиентовБезЮрАдреса = СписокКлиентовБезЮрАдреса + ВыборкаКонтрагент.Контрагент + "(" + ВыборкаКонтрагент.КодКонтрагента + ")" + Символы.ПС;
			СоздатьЗадачуАдрес = Истина;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ВыборкаКонтрагент.ЭлПочта) Тогда
			СписокКлиентовБезЭлПочты = СписокКлиентовБезЭлПочты + ВыборкаКонтрагент.Контрагент + "(" + ВыборкаКонтрагент.КодКонтрагента + ")" + Символы.ПС;
			СоздатьЗадачуЭлПочта = Истина;
		КонецЕсли;
		
		ТабДок = Новый ТабличныйДокумент;
		Макет = ПолучитьОбщийМакет("УведомлениеОПДЗ");
		ОбластьБланк = Макет.ПолучитьОбласть("БланкЯШТ");
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаПросрочка");
		ОбластьШапкаОплата = Макет.ПолучитьОбласть("ШапкаОплаты");
		ОбластьСтрокаОплата = Макет.ПолучитьОбласть("СтрокаОплаты");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		Попытка
			ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native); 
			Объект = Новый("AddIn.Decl.CNameDecl");
		Исключение
			Сообщить("Не удалось подключить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
		КонецПопытки;
		
		Падеж = 1; //Дательный: кому? чему? 
		
		//РезультатФИО = "";
		//Если НЕ ЗначениеЗаполнено(ВыборкаКонтрагент.Контрагент.ОсновноеКонтактноеЛицо) Тогда
		////	Сообщить("Не заполнено основное контактное лицо контрагента!", СтатусСообщения.Важное);
		//Иначе
		//	СтрокаФИО = ВыборкаКонтрагент.Контрагент.ОсновноеКонтактноеЛицо.Наименование; 
		//	РезультатФИО = Объект.Просклонять(СтрокаФИО, Падеж);
		//КонецЕсли;		

		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СдвигДатыОплаты", СдвигДатыОплаты); //17.08.2017 - единый для всей функции  ?
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Наименование,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата
		|ПОМЕСТИТЬ Вт_Договоры
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ТекДата,
		|			ДоговорКонтрагента.Владелец = &Контрагент
		|				И ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
		|				И (КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Сделка.ДатаОплаты, ДЕНЬ, &СдвигДатыОплаты), ДЕНЬ) <= КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
		|					ИЛИ сделка ССЫЛКА Документ.НачислениеПени)
		|				И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(Вт_Договоры.СуммаУпрОстаток) КАК СуммаУпрОстаток,
		|	МАКСИМУМ(Вт_Договоры.ДоговорКонтрагентаНаименование) КАК ДоговорКонтрагента,
		|	Вт_Договоры.ДоговорКонтрагентаНомер КАК Номер,
		|	Вт_Договоры.ДоговорКонтрагентаДата КАК Дата
		|ИЗ
		|	Вт_Договоры КАК Вт_Договоры
		|
		|СГРУППИРОВАТЬ ПО
		|	Вт_Договоры.ДоговорКонтрагентаДата,
		|	Вт_Договоры.ДоговорКонтрагентаНомер";
		
		Запрос.УстановитьПараметр("Контрагент", ВыборкаКонтрагент.Контрагент);
		СписокТиповДоговора = Новый СписокЗначений;
		СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00004")); //Отсрочка
		СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00001")); //Предоплата
		СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.ПредоплатаПоСчетам);   //17.08.17
		СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.ФакторингПредоплата);
		
		СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Пени"));

		Запрос.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		ЗначДог = "";
		СуммаДолга = 0;
		
		Пока Выборка.Следующий() Цикл
			Если  ЗначДог <> "" Тогда
				ЗначДог = ЗначДог+", ";
			КонецЕсли;
			Если Не ПустаяСтрока(Выборка.Номер) Тогда
				ЗначДог =ЗначДог+"№ "+ Выборка.Номер +" от " +Формат(Выборка.Дата,"ДФ=dd.MM.yyyy");
			КонецЕсли;
			СуммаДолга= СуммаДолга+ Выборка.СуммаУпрОстаток;
		КонецЦикла;
		Если СуммаДолга < 0 ТОгда
			Продолжить;
		КонецЕсли;
		
		ОбластьШапка.Параметры.Дата = ТекущаяДата();
		ОбластьШапка.Параметры.НазваниеКонтрагента = ВыборкаКонтрагент.Контрагент.НаименованиеПолное;
		ОбластьШапка.Параметры.АдресКонтрагента = ВыборкаКонтрагент.ЮрАдрес;
		ОбластьШапка.Параметры.задолженность = СуммаДолга;
		ОбластьШапка.Параметры.ЗначДог = ЗначДог;
		ОбластьШапка.Параметры.ТекДата = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
		ТабДок.Вывести(ОбластьБланк);
		ТабДок.Вывести(ОбластьШапка);
		СуммаДолга = 0;
		ИтогоДолг = 0;
//	
        ВыборкаТипДокумента = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаТипДокумента.Следующий() Цикл
			Если ВыборкаТипДокумента.Вид = 1 Тогда
				РезультатПросрочка.Очистить();
				ВыборкаПросрочка = ВыборкаТипДокумента.Выбрать();
				Пока ВыборкаПросрочка.Следующий() Цикл
					НоваяСтрока = РезультатПросрочка.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаПросрочка);
				КонецЦикла;
				
				Отбор = новый Структура("Реализация",Null);
				ПустыеРеал  = РезультатПросрочка.НайтиСтроки(отбор);
				Для каждого Стр из ПустыеРеал Цикл
					РезультатПросрочка.Удалить(Стр);	
				КонецЦикла;
				
	
				Для каждого стр из РезультатПросрочка Цикл
					Если ТипЗнч(Стр.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
						Если  Стр.Реализация <> Null Тогда
							отбор = новый Структура("Заказ",стр.Заказ);
							СтрокиСЗаказом= РезультатПросрочка.НайтиСтроки(отбор);
							Если СтрокиСЗаказом.Количество() > 1 Тогда
								СуммаДолга = Стр.СуммаОстаток;
								для каждого ст из СтрокиСЗаказом цикл
									Если ст = стр Тогда
										Если ст.СуммаДокумента< СуммаДолга Тогда
											ОбластьСтрока.Параметры.СуммаОстаток = Стр.СуммаДокумента;
											ИтогоДолг = ИтогоДолг+Стр.СуммаДокумента;
										иначе	
											ОбластьСтрока.Параметры.СуммаОстаток = СуммаДолга;
											ИтогоДолг = ИтогоДолг+СуммаДолга;
										конецЕсли;	
									КонецЕсли;
									Если ст.СуммаДокумента < СуммаДолга Тогда
										СуммаДолга= СуммаДолга-Стр.СуммаДокумента;	
									иначе	
										СуммаДолга=0;
									конецЕсли;	
								конецЦикла;	
							иначе
								ОбластьСтрока.Параметры.СуммаОстаток = Стр.СуммаОстаток;
								ИтогоДолг = ИтогоДолг+Стр.СуммаОстаток;
							конецЕсли;	
							
							//+++ 17.08.2017 -----совпадающие названия полей
							ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, стр);
							//ОбластьСтрока.Параметры.ДатаОтгрузки = Стр.ДатаОтгрузки;
							//ОбластьСтрока.Параметры.ДатаОплаты   = Стр.ДатаОплаты;
							//ОбластьСтрока.Параметры.НомерЗаказа  = Стр.НомерЗаказа;
							//ОбластьСтрока.Параметры.ДнейПросрочки = Стр.ДнейПросрочки;
							//ОбластьСтрока.Параметры.СуммаПени = Стр.суммаПени;
							
							ОбластьСтрока.Параметры.НомерТТН     = Стр.НомерРеализации;
							ОбластьСтрока.Параметры.СуммаОтгрузки = Стр.СуммаДокумента;
							
						конецЕсли;
					иначе
						Если  Стр.Реализация <> Null Тогда
							//здесь полей меньше!
							ОбластьСтрока.Параметры.ДатаОтгрузки = Стр.ДатаОтгрузки;
							ОбластьСтрока.Параметры.ДатаОплаты   = Стр.ДатаОплаты;
							ОбластьСтрока.Параметры.СуммаОстаток = Стр.СуммаОстаток;
							ОбластьСтрока.Параметры.СуммаПени    = Стр.СуммаПени;
	
							ОбластьСтрока.Параметры.НомерТТН      = Стр.НомерРеализации;
							ОбластьСтрока.Параметры.СуммаОтгрузки = Стр.СуммаДокумента;
							ОбластьСтрока.Параметры.НомерЗаказа   = Неопределено;
							ОбластьСтрока.Параметры.ДнейПросрочки = 0;

							ИтогоДолг = ИтогоДолг+Стр.СуммаОстаток;
						
						конецЕсли;
					конецЕсли;	
					ТабДок.Вывести(ОбластьСтрока);
				конецЦикла;	
				ОбластьИтогПросрочка =  Макет.ПолучитьОбласть("ИтогПросрочка");
				ОбластьИтогПросрочка.Параметры.СуммаОтгрузки =РезультатПросрочка.Итог("суммаДокумента"); 
				ОбластьИтогПросрочка.Параметры.СуммаПени = РезультатПросрочка.Итог("суммаПени");
				ОбластьИтогПросрочка.Параметры.СуммаОстаток = ИтогоДолг;
				ТабДок.Вывести(ОбластьИтогПросрочка);
			Иначе
				РезультатПоДолгам = ВыборкаТипДокумента.Выбрать();
				Если РезультатПоДолгам.Количество()>0 Тогда
					ТабДок.Вывести(ОбластьШапкаОплата);
					СуммаОтгрузкиОбщ = 0;
					СуммаОстОбщ = 0;

					Пока РезультатПоДолгам.Следующий() Цикл
						Если  РезультатПоДолгам.Реализация <> Null Тогда
							ОбластьСтрокаОплата.Параметры.ДатаОтгрузки = РезультатПоДолгам.ДатаОтгрузки;
							ОбластьСтрокаОплата.Параметры.НомерЗаказа  = РезультатПоДолгам.НомерЗаказа;
							ОбластьСтрокаОплата.Параметры.НомерТТН     = РезультатПоДолгам.НомерРеализации;
							ОбластьСтрокаОплата.Параметры.СуммаОтгрузки= РезультатПоДолгам.СуммаДокумента;
							ОбластьСтрокаОплата.Параметры.СуммаОстаток = РезультатПоДолгам.СуммаОстаток;

							ОбластьСтрокаОплата.Параметры.ДатаОплаты = РезультатПоДолгам.ДатаОплаты;
							ТабДок.Вывести(ОбластьСтрокаОплата);
						КонецЕсли;
						Попытка
							СуммаОтгрузкиОбщ = СуммаОтгрузкиОбщ + РезультатПоДолгам.СуммаДокумента;
							СуммаОстОбщ = СуммаОстОбщ + РезультатПоДолгам.СуммаОстаток;
						Исключение
							СуммаОтгрузкиОбщ = 0;
							СуммаОстОбщ = 0;
						КонецПопытки;
						
					КонецЦикла;		
					ОбластьИтогОплаты =  Макет.ПолучитьОбласть("ИтогОплаты");
					ОбластьИтогОплаты.Параметры.СуммаОтгрузки =СуммаОтгрузкиОбщ; 
					ОбластьИтогОплаты.Параметры.СуммаОстаток =СуммаОстОбщ;
					ТабДок.Вывести(ОбластьИтогОплаты);
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьПодвал.Параметры.ТекДата = ТекущаяДата();
		ОбластьПодвал.Параметры.ТекущийПользователь = ВыборкаКонтрагент.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо;
		
		ТабДок.Вывести(ОбластьПодвал);  
		ТабДок.ОтображатьЗаголовки = Ложь;
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.АвтоМасштаб = Истина;
	//	ТабДок.Показать();
	
		ИмяФайлаОтправки = ИмяКаталога + "Письмо о возникновении ПДЗ " +ВыборкаКонтрагент.Контрагент.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf";
 			ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"+","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"?","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"*","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"%","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"""","");
		
 		ИмяФайлаОтправки0 = стрЗаменить(ИмяФайлаОтправки, ИмяКаталога, ИмяКаталога0);
		ТабДок.Записать(ИмяФайлаОтправки, ТипФайлаТабличногоДокумента.PDF);	
		
		Если ХранитьВБазе1С тогда
			ИмяФайлаХранения = стрЗаменить(ИмяФайлаОтправки, ".pdf" ,".mxl");
			ТабДок.Записать(ИмяФайлаХранения, ТипФайлаТабличногоДокумента.MXL);	
  		КонецЕсли;
		
		ТабДок = Неопределено;
	
		
		// Создаем событие
		//04.10.16 Смирнов для заказов создаваемых через WS не работает
		НовСобытие = Документы.Событие.СоздатьДокумент();
		НовСобытие.Дата = ТекущаяДата();
		НовСобытие.ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо;
		НовСобытие.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
		НовСобытие.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
		НовСобытие.Контрагент = ВыборкаКонтрагент.Контрагент;
		НовСобытие.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
		НовСобытие.ОписаниеСобытия = "Письмо о возникновении ПДЗ";
		НовСобытие.СодержаниеСобытия = НовСобытие.ОписаниеСобытия +"
		|Файл"+?(ХранитьВБазе1С,"(В БАЗЕ 1С): " + стрЗаменить(ИмяФайлаОтправки,ИмяКаталога,""), "(в папке): " + ИмяФайлаОтправки0);
	
		НовСобытие.Важность = Перечисления.Важность.Высокая;
		новСобытие.СостояниеСобытия = Перечисления.СостоянияСобытий.Завершено;
		НовСобытие.Записать(); //БЕЗ проведения!
		
		//Создаем письмо
		СписокФайловВложений = Новый СписокЗначений;
		СписокФайловВложений.Добавить(ИмяФайлаОтправки);

		Если ЗначениеЗаполнено(ВыборкаКонтрагент.ЭлПочта) Тогда
			ТекстСообщения ="   Добрый день,
			|
			|Высылаем Вам письмо о наличии просроченной дебиторской задолженности.
			|
			|
			|С уважением,
			|менеджер "+ ВыборкаКонтрагент.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо.Наименование+",
			|
			|ЗАО Торговая Компания ""Яршинторг"", 
			|юр./факт.адрес: 150044, Ярославская обл, Ярославль г, Базовая ул, дом № 3, стр.2
			|тел./факс: (4852) 200-200, 67-11-67
			|Web-сайт : http://www.yst.ru
			|";
			
			Тема = "Письмо о возникновении просроченной кредиторской задолженности";
			яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(ВыборкаКонтрагент.ЭлПочта,СписокФайловВложений, УЗ, ТекстСообщения, Тема);
			НовСобытие.Комментарий = "Письмо отправлено!";
			НовСобытие.Записать();//БЕЗ проведения!
		ИНАЧЕ  //17.05.2018
			НовСобытие.Комментарий = "Нет эл.почты! Письмо НЕ ОТПРАВЛЕНО!";
			НовСобытие.Записать();//БЕЗ проведения!
		КонецЕсли;
		
//------------------------------ЗАПИСЬ В ХРАНИЛИЩЕ В БАЗУ 1С--------------------------------------	
	Если ХранитьВБазе1С тогда
		СохранитьФайлВБазу1С(ИмяФайлаХранения, ИмяФайлаОтправки, НовСобытие );
	иначе
    	КопироватьФайл(ИмяФайлаОтправки, ИмяФайлаОтправки0);
		УдалитьФайлы(ИмяФайлаОтправки); //УДАЛИТЬ из TEMP
	КонецЕсли;
			
	КонецЦикла;	
	
	Если СоздатьЗадачуАдрес Тогда
		//НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		//НоваяЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду(КомуСоздаватьЗадачуОбОтсутвииЭлАдресов);
		//НоваяЗадача.Дата = ТекущаяДата();
		//НоваяЗадача.Оповещение = Истина;
		//НоваяЗадача.СрокОповещения = ТекущаяДата();
		//НоваяЗадача.Наименование = "Не заполнен юридический адрес контрагента";
		//НоваяЗадача.Описание = "При отправке писем о ПДЗ - неверно указаны юр.адреса клиентов:
		//						|"+СписокКлиентовБезЮрАдреса;
		//НоваяЗадача.Записать();
	КонецЕсли;
	Если СоздатьЗадачуЭлПочта Тогда
		//НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		//НоваяЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду(КомуСоздаватьЗадачуОбОтсутвииЭлАдресов);
		//НоваяЗадача.Дата = ТекущаяДата();
		//НоваяЗадача.Оповещение = Истина;
		//НоваяЗадача.СрокОповещения = ТекущаяДата();
		//НоваяЗадача.Наименование = "Не заполнена эл. почта контрагента";
		//НоваяЗадача.Описание = "Невозможно автоматически отправить письма о ПДЗ !
		//					   |Не заполнена эл.почта у следующих клиентов:
		//					   |"+СписокКлиентовБезЭлПочты;
		//НоваяЗадача.Записать();
	КонецЕсли;

	возврат рез;
	
КонецФункции

Процедура РассылкаПредупредительногоПисьмаДолжнику(АдресОтправки="", ИмяКаталога0="", ХранитьВБазе1С=ЛОЖЬ) 
	
	УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправки);
    КомуСоздаватьЗадачуОбОтсутвииЭлАдресов = "Бондаренко Е.Д. (снабжение)";
	ИмяКаталога = КаталогВременныхФайлов();
	
	СписокТиповДоговора = Новый СписокЗначений;
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.ФакторингПредоплата); //17.08.2017   --- ещё предоплаты!!! ---
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.ПредоплатаПоСчетам);
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Пени"));
	
	СписокТиповДоговораДляОтбора = Новый СписокЗначений;
	СписокТиповДоговораДляОтбора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));
	СписокТиповДоговораДляОтбора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата"));
 	СписокТиповДоговораДляОтбора.Добавить(Справочники.ТипыДоговоров.ФакторингПредоплата); //17.08.2017   --- ещё предоплаты!!! ---
	СписокТиповДоговораДляОтбора.Добавить(Справочники.ТипыДоговоров.ПредоплатаПоСчетам);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);
	Запрос.УстановитьПараметр("СписокТиповДоговораДляОтбора", СписокТиповДоговораДляОтбора);

	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("СвойствоПисьмоДолжнику", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90211"));

	Запрос.Текст =  	
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент
	|ПОМЕСТИТЬ ВТ_КонтрагентыПоСделке
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			&ТекДата,
	|			ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговораДляОтбора)
	|				И (КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Сделка.ДатаОплаты, ДЕНЬ, 30), ДЕНЬ) = КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	|					ИЛИ сделка ССЫЛКА Документ.НачислениеПени)
	|				И ДоговорКонтрагента.Владелец.УведомлениеДолжнику = ИСТИНА
	|				И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200)) КАК ЮрАдрес
	|ПОМЕСТИТЬ ВТ_КонтИнфо
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В
	|			(ВЫБРАТЬ
	|				ВТ_КонтрагентыПоСделке.Контрагент
	|			ИЗ
	|				ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект как Объект1,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(500)) КАК ЭлПочта
	|ПОМЕСТИТЬ ВТ_АдресЭлПочты
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В
	|			(ВЫБРАТЬ
	|				ВТ_КонтрагентыПоСделке.Контрагент
	|			ИЗ
	|				ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты < &ТекДата
	|					И НЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	|				ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Просрочка,
	|	МАКСИМУМ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты) КАК МаксДатаОплаты,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК Сделка
	|ПОМЕСТИТЬ ВТ_ЗаказыКонтрагентов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			,
	|			ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	|				И ДоговорКонтрагента.Владелец В
	|					(ВЫБРАТЬ
	|						ВТ_КонтрагентыПоСделке.Контрагент
	|					ИЗ
	|						ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК Сделка,
	|	СУММА(НачисленныеПениОстатки.ПениОстаток) КАК ПениОстаток,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент
	|ПОМЕСТИТЬ Вт_Пени
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			,
	|			ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	|				И ДоговорКонтрагента.Владелец В
	|					(ВЫБРАТЬ
	|						ВТ_КонтрагентыПоСделке.Контрагент
	|					ИЗ
	|						ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	|				И Сделка.ДатаОплаты < &ТекДата) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленныеПени.Остатки КАК НачисленныеПениОстатки
	|		ПО ВзаиморасчетыСКонтрагентамиОстатки.Сделка = НачисленныеПениОстатки.Сделка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0),
	|	NULL
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			&ТекДата,
	|			ДоговорКонтрагента.Владелец В
	|					(ВЫБРАТЬ
	|						ВТ_КонтрагентыПоСделке.Контрагент
	|					ИЗ
	|						ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	|				И ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.Пени)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаказыКонтрагентов.СуммаУпрОстаток,
	|	ВТ_ЗаказыКонтрагентов.Просрочка,
	|	ВТ_ЗаказыКонтрагентов.МаксДатаОплаты,
	|	ВТ_ЗаказыКонтрагентов.Контрагент,
	|	ЕСТЬNULL(Вт_Пени.ПениОстаток, 0) КАК Пени,
	|	ЕСТЬNULL(ВТ_КонтИнфо.ЮрАдрес, 0) КАК ЮрАдрес,
	|	ЕСТЬNULL(ВТ_АдресЭлПочты.ЭлПочта, 0) КАК ЭлПочта
	|ИЗ
	|	ВТ_ЗаказыКонтрагентов КАК ВТ_ЗаказыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_Пени КАК Вт_Пени
	|		ПО ВТ_ЗаказыКонтрагентов.Контрагент = Вт_Пени.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтИнфо КАК ВТ_КонтИнфо
	|		ПО ВТ_ЗаказыКонтрагентов.Контрагент = ВТ_КонтИнфо.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АдресЭлПочты КАК ВТ_АдресЭлПочты
	|		ПО ВТ_ЗаказыКонтрагентов.Контрагент = ВТ_АдресЭлПочты.Объект1
	|ГДЕ
	|	ВТ_ЗаказыКонтрагентов.Просрочка > 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	СписокКлиентовБезЮрАдреса = "Не заполнен юр. адрес по контрагентам: "+ Символы.ПС;
	СписокКлиентовБезЭлПочты = "Не заполнен эл. почта по контрагентам: "+ Символы.ПС;
    СоздатьЗадачуАдрес = Ложь;
	СоздатьЗадачуЭлПочта = Ложь;

	Пока Выборка.Следующий() Цикл
		
        Контрагент = Выборка.Контрагент;
		ОбщаяЗадолженностьНаДатуФормирования = Выборка.СуммаУпрОстаток;
		МаксимальнаяДатаОплатыПоВсемНакладным = Лев(Выборка.МаксДатаОплаты,10);
		ПросроченнаяЗадолженность = Выборка.Просрочка;
        СуммаПени = Выборка.Пени;
	
		Если ЗначениеНеЗаполнено(Выборка.ЮрАдрес) Тогда
			СписокКлиентовБезЮрАдреса = СписокКлиентовБезЮрАдреса + Контрагент + "(" + Контрагент.Код + ")" + Символы.ПС;
			СоздатьЗадачуАдрес = Истина;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(Выборка.ЭлПочта) Тогда
			СписокКлиентовБезЭлПочты = СписокКлиентовБезЭлПочты + Контрагент + "(" + Контрагент.Код + ")" + Символы.ПС;
			СоздатьЗадачуЭлПочта = Истина;
		КонецЕсли;

		
		ТабДок = Новый ТабличныйДокумент;
		Макет = ПолучитьОбщийМакет("ПредупредительноеПисьмоДолжнику");
		ОбластьБланк = Макет.ПолучитьОбласть("БланкЯШТ");
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьПисьма = Макет.ПолучитьОбласть("Основная");
		
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи"); //+++ 29.06.2017
	
		Попытка
			ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native); 
			Объект = Новый("AddIn.Decl.CNameDecl");
		Исключение
			Сообщить("Не удалось подключить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
		КонецПопытки;
		
		Падеж = 3; //Дательный: кому? чему? 
				
		//склонение должности
		РезультатДолжность = "";
		Если НЕ ЗначениеЗаполнено(Контрагент.ОсновноеКонтактноеЛицо.Должность) Тогда
			//	Сообщить("Не заполнена должность основного контактного лица контрагента!", СтатусСообщения.Важное);
		Иначе
			МассивСтрок = РазложитьСтрокуВМассивПодстрок2(Контрагент.ОсновноеКонтактноеЛицо.Должность, " ");
			// Выделим первые 3 слова, так как компонента не умеет склонять фразу большую 3х символов
			НомерНесклоняемогоСимвола = 4;
			Для Номер = 1 По Мин(МассивСтрок.Количество(), 3) Цикл
				Попытка
					Рез = Объект.Просклонять(МассивСтрок[Номер-1], Падеж);
				Исключение
					Рез = МассивСтрок[Номер-1];
				КонецПопытки;
				РезультатДолжность = РезультатДолжность + ?(Номер > 1, " ", "") + Рез;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьШапка.Параметры.Дата = Лев(ТекущаяДата(),10);
		ОбластьШапка.Параметры.НазваниеКонтрагента = Контрагент.НаименованиеПолное;
		ОбластьШапка.Параметры.АдресКонтрагента = Выборка.ЮрАдрес;
		
		ОбластьПисьма.Параметры.НазваниеКонтрагента = Контрагент.НаименованиеПолное;
		ОбластьПисьма.Параметры.НомерДоговора = Контрагент.ОсновнойДоговорКонтрагента.Номер;
		ОбластьПисьма.Параметры.ДатаДоговора = Лев(Контрагент.ОсновнойДоговорКонтрагента.Дата,10);
		ОбластьПисьма.Параметры.ОбщаяЗадолженностьНаДатуФормирования = ОбщаяЗадолженностьНаДатуФормирования;
		ОбластьПисьма.Параметры.МаксимальнаяДатаОплатыПоВсемНакладным = МаксимальнаяДатаОплатыПоВсемНакладным;
		ОбластьПисьма.Параметры.ПросроченнаяЗадолженность = ПросроченнаяЗадолженность;
		ОбластьПисьма.Параметры.Пени = СуммаПени;
		ОбластьПисьма.Параметры.ПросрочкаПлюсПени = СуммаПени + ПросроченнаяЗадолженность;
		
		//+++ 29.06.2017 - ТекущийПользователь есть ТОЛЬКО в подписях!
		//ОбластьПисьма.Параметры.ТекущийПользователь = Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо;
		ОбластьПодписи.Параметры.ТекущийПользователь = Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо;
		 
		ТабДок.Вывести(ОбластьБланк);
		ТабДок.Вывести(ОбластьШапка);
		ТабДок.Вывести(ОбластьПисьма);  
		ТабДок.Вывести(ОбластьПодписи);  //+++ 29.06.2017 
		
		ТабДок.ОтображатьЗаголовки = Ложь;
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.АвтоМасштаб = Истина;
		//ТабДок.Показать();
		
		ИмяФайлаОтправки = ИмяКаталога + "Предупредительное письмо " + Контрагент.Наименование+ " от " +формат(ТекущаяДата(), "ДЛФ=D")+ ".pdf";
			ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"+","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"?","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"*","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"%","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"""","");
			
	 		ИмяФайлаОтправки0 = стрЗаменить(ИмяФайлаОтправки, ИмяКаталога, ИмяКаталога0);
			ТабДок.Записать(ИмяФайлаОтправки, ТипФайлаТабличногоДокумента.PDF);	
            ТабДок = Неопределено;

		Если ХранитьВБазе1С тогда
			ИмяФайлаХранения = стрЗаменить(ИмяФайлаОтправки, ".pdf" ,".mxl");
			ТабДок.Записать(ИмяФайлаХранения, ТипФайлаТабличногоДокумента.MXL);	
            ТабДок = Неопределено;
		КонецЕсли;
			
		//04.10.16 Смирнов глТекущийПользователь не работает через ws
		//// Создаем событие
		НовСобытие = Документы.Событие.СоздатьДокумент();
		НовСобытие.Дата = ТекущаяДата();
		НовСобытие.ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо;
		НовСобытие.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
		НовСобытие.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
		НовСобытие.Контрагент = Контрагент;
		НовСобытие.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
		НовСобытие.ОписаниеСобытия = "Предупредительное письмо должнику";
		
		НовСобытие.СодержаниеСобытия = НовСобытие.ОписаниеСобытия +"
		|Файл"+?(ХранитьВБазе1С,"(В БАЗЕ 1С): " + стрЗаменить(ИмяФайлаОтправки,ИмяКаталога,""), "(в папке): " + ИмяФайлаОтправки0);
			
		НовСобытие.Важность = Перечисления.Важность.Высокая;
        новСобытие.СостояниеСобытия = Перечисления.СостоянияСобытий.Завершено;

 		//Создаем письмо
		СписокФайловВложений = Новый СписокЗначений;
		СписокФайловВложений.Добавить(ИмяФайлаОтправки);

		Если ЗначениеЗаполнено(Выборка.ЭлПочта) Тогда
			ТекстСообщения ="   Добрый день,
			|
			|Высылаем Вам предупредительное письмо о имеющейся задолженности.
			|
			|
			|С уважением,
			|менеджер "+ Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо.Наименование+",
			|
			|ЗАО Торговая Компания ""Яршинторг"", 
			|юр./факт.адрес: 150044, Ярославская обл, Ярославль г, Базовая ул, дом № 3, стр.2
			|тел./факс: (4852) 200-200, 67-11-67
			|Web-сайт : http://www.yst.ru
			|";
			
			Тема = "Предупредительное письмо должнику";
			
			яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(Выборка.ЭлПочта, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
			НовСобытие.Комментарий = "Письмо отправлено!";
			НовСобытие.Записать(); //БЕЗ Проведенния
		Иначе
			НовСобытие.Комментарий = "НЕ ОТПРАВЛЕНО ПИСЬМО! Нет эл.почты!";  //17.05.2018
			НовСобытие.Записать(); //БЕЗ Проведенния
		КонецЕсли;
		
//-----------------------------ЗАПИСЬ В ХРАНИЛИЩЕ В БАЗУ 1С--------------------------------------------
		Если ХранитьВБазе1С тогда
			СохранитьФайлВБазу1С(ИмяФайлаХранения, ИмяФайлаОтправки, НовСобытие ); 
		иначе
	    	КопироватьФайл(ИмяФайлаОтправки, ИмяФайлаОтправки0);
			УдалитьФайлы(ИмяФайлаОтправки);
		КонецЕсли;

	КонецЦикла;	
	
	//Если СоздатьЗадачуАдрес Тогда
	//	НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	//	НоваяЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Серков");
	//	НоваяЗадача.Дата = ТекущаяДата();
	//	НоваяЗадача.Оповещение = Истина;
	//	НоваяЗадача.СрокОповещения = ТекущаяДата();
	//	НоваяЗадача.Наименование = "Не заполнен юридический адрес контрагента";
	//	НоваяЗадача.Описание = СписокКлиентовБезЮрАдреса;
	//	НоваяЗадача.Записать();
	//КонецЕсли;
	Если СоздатьЗадачуЭлПочта Тогда
		//НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		//НоваяЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду(КомуСоздаватьЗадачуОбОтсутвииЭлАдресов);
		//НоваяЗадача.Дата = ТекущаяДата();
		//НоваяЗадача.Оповещение = Истина;
		//НоваяЗадача.СрокОповещения = ТекущаяДата();
		//НоваяЗадача.Наименование = "Не заполнена эл. почта контрагента";
		//НоваяЗадача.Описание = "Невозможно отправить Предупредительное Письмо Должникам!
		//|Не заполнены эл.адресы у следующих клиентов:
		//|"+СписокКлиентовБезЭлПочты;
		//НоваяЗадача.Записать();
	КонецЕсли;
			
КонецПроцедуры

//ДЛЯ РЕГЛ.ЗАДАНИЯ
Процедура РассылкаПДЗИПредупредительногоПисьмаДолжнику() Экспорт
	
	отКого = "1c@yst.ru"; //17.05.2018 - изменена!
	
	ХранитьВБазе1С = ЛОЖЬ; //16.08.2017 - НЕ ХРАНИМ в 1С!
	ИмяКаталога000 = "\\sigma\Общая папка\Рассылка писем о ПДЗ\"; //только на SIGMA !
	РассылкаПредупредительногоПисьмаДолжнику(отКого, ИмяКаталога000, ХранитьВБазе1С);
	
	ХранитьВБазе1С = ЛОЖЬ; //16.08.2017 - НЕ ХРАНИМ в 1С!
	ИмяКаталога000 = "\\sigma\Общая папка\Рассылка писем о ПДЗ\"; //только на SIGMA !
	колКлиентовПДЗ   = РассылкаСообщенийОПДЗ(отКого, ИмяКаталога000, ХранитьВБазе1С);  //17.08.17 - сделана Функцией
	
КонецПроцедуры

//ДЛЯ РЕГЛ.ЗАДАНИЯ
Процедура РассылкаПДЗИПредупредительногоПисьмаДолжникуФАП() Экспорт
	
   АдресОтправки = "formula.auto.plus@yandex.ru";
   ИмяКаталога   = "\\sigma\Общая папка\Рассылка писем о ПДЗ (ФА+)\"; //только на SIGMA !
   ХранитьВБазе1С = ЛОЖЬ;
   
   РассылкаСообщенийиОПДЗФАПлюс(АдресОтправки, ИмяКаталога, ХранитьВБазе1С);
   РассылкаПредупредительногоПисьмаДолжникуФАПлюс(АдресОтправки, ИмяКаталога, ХранитьВБазе1С);
   
КонецПроцедуры


Процедура РассылкаСообщенийиОПДЗФАПлюс(АдресОтправки="", ИмяКаталога0="", ХранитьВБазе1С=ЛОЖЬ) 
	
   УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправки);
  КомуСоздаватьЗадачуОбОтсутвииЭлАдресов = "Курапова Е.А."; 
  ИмяКаталога = КаталогВременныхФайлов();  
   Запрос = Новый Запрос;
   Запрос.УстановитьПараметр("СписокТиповДоговора", Справочники.ТипыДоговоров.ФормулаАвтоПлюс);
   Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
  //  Запрос.УстановитьПараметр("Пени",Справочники.ТипыДоговоров.НайтиПоНаименованию("Пени"));

	Запрос.Текст =  "ВЫБРАТЬ
	                |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент
	                |ПОМЕСТИТЬ ВТ_КонтрагентыПоСделке
	                |ИЗ
	                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	                |			&ТекДата,
	                |			ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.ФормулаАвтоПлюс)
	                |				И (КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Сделка.ДатаОплаты, ДЕНЬ, 2), ДЕНЬ) = КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	                |					ИЛИ сделка ССЫЛКА Документ.НачислениеПени)
	                |				И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |ГДЕ
	                |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	КонтактнаяИнформация.Объект,
	                |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200)) КАК ЮрАдрес
	                |ПОМЕСТИТЬ ВТ_КонтИнфо
	                |ИЗ
	                |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                |ГДЕ
	                |	КонтактнаяИнформация.Объект В
	                |			(ВЫБРАТЬ
	                |				ВТ_КонтрагентыПоСделке.Контрагент
	                |			ИЗ
	                |				ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	                |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	                |	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	КонтактнаяИнформация.Объект,
	                |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200)) КАК ЭлПочта
	                |ПОМЕСТИТЬ ВТ_АдресЭлПочты
	                |ИЗ
	                |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                |ГДЕ
	                |	КонтактнаяИнформация.Объект В
	                |			(ВЫБРАТЬ
	                |				ВТ_КонтрагентыПоСделке.Контрагент
	                |			ИЗ
	                |				ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	                |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	                |	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВЫБОР
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	                |	КОНЕЦ КАК Реализация,
	                |	СУММА(ВЫБОР
	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                |				ТОГДА -ВозвратТоваровОтПокупателяТовары.Сумма
	                |		КОНЕЦ) КАК СуммаДокумента,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка КАК Заказ,
					//+++ максимум
	                |	максимум(РАЗНОСТЬДАТ(ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты, &ТекДата, ДЕНЬ)) КАК Днейпросрочки,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	                |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) КАК СуммаОстаток,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
	                |	МАКСИМУМ(1) КАК Вид,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты КАК ДатаОплаты,
	                |	ВТ_КонтИнфо.ЮрАдрес,
	                |	ЕСТЬNULL(ВТ_АдресЭлПочты.ЭлПочта, 0) КАК ЭлПочта
	                |ПОМЕСТИТЬ ВТ_Просрочка
	                |ИЗ
	                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
	                |			,
	                |			,
	                |			Регистратор,
	                |			Сделка В
	                |					(ВЫБРАТЬ
	                |						ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	                |					ИЗ
	                |						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ТекДата, ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.ФормулаАвтоПлюс)
	                |							И (КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Сделка.ДатаОплаты, ДЕНЬ, 2), ДЕНЬ) <= КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	                |								ИЛИ сделка ССЫЛКА Документ.НачислениеПени)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |					ГДЕ
	                |						ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0)
	                |				И ДоговорКонтрагента.Владелец В
	                |					(ВЫБРАТЬ
	                |						ВТ_КонтрагентыПоСделке.Контрагент
	                |					ИЗ
	                |						ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	                |				И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОбороты
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.Регистратор = ВозвратТоваровОтПокупателяТовары.Ссылка
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	                |				&ТекДата,
	                |				Сделка В
	                |						(ВЫБРАТЬ
	                |							ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	                |						ИЗ
	                |							РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ТекДата, ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.ФормулаАвтоПлюс)
	                |								И (КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Сделка.ДатаОплаты, ДЕНЬ, 2), ДЕНЬ) <= КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	                |									ИЛИ сделка ССЫЛКА Документ.НачислениеПени)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |						ГДЕ
	                |							ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0)
	                |					И ДоговорКонтрагента.Владелец В
	                |						(ВЫБРАТЬ
	                |							ВТ_КонтрагентыПоСделке.Контрагент
	                |						ИЗ
	                |							ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
	                |			И ВзаиморасчетыСКонтрагентамиОбороты.Сделка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтИнфо КАК ВТ_КонтИнфо
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец = ВТ_КонтИнфо.Объект
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АдресЭлПочты КАК ВТ_АдресЭлПочты
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец = ВТ_АдресЭлПочты.Объект
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВЫБОР
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	                |	КОНЕЦ,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка,
	                |	РАЗНОСТЬДАТ(ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты, &ТекДата, ДЕНЬ) + 1,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	                |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0),
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты,
	                |	ВТ_КонтИнфо.ЮрАдрес,
	                |	ЕСТЬNULL(ВТ_АдресЭлПочты.ЭлПочта, 0)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток,
	                |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Владелец
	                |ПОМЕСТИТЬ Вт_ОбщаяПДЗ
	                |ИЗ
	                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	                |			&ТекДата,
	                |			ДоговорКонтрагента.Владелец В
	                |					(ВЫБРАТЬ
	                |						ВТ_КонтрагентыПоСделке.Контрагент
	                |					ИЗ
	                |						ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	                |				И ДоговорКонтрагента.ТипДоговора = &СписокТиповДоговора
	                |				И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Сделка.ДатаОплаты, ДЕНЬ, 2), ДЕНЬ) <= КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	                |				И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВЫБОР
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	                |	КОНЕЦ КАК Реализация,
	                |	СУММА(ВЫБОР
	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                |				ТОГДА -ВозвратТоваровОтПокупателяТовары.Сумма
	                |		КОНЕЦ) КАК СуммаДокумента,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка КАК Заказ,
	                |	МАКСИМУМ(2) КАК Вид,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты КАК ДатаОплаты,
	                |	ЕСТЬNULL(ВТ_КонтИнфо.ЮрАдрес, """") КАК ЮрАдрес,
	                |	ЕСТЬNULL(ВТ_АдресЭлПочты.ЭлПочта, """") КАК ЭлПочта,
	                |	ЕСТЬNULL(Вт_ОбщаяПДЗ.СуммаУпрОстаток, 0) КАК СуммаУпрОстаток,
	                |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаОстаток
	                |ПОМЕСТИТЬ ВТ_Непросрочка
	                |ИЗ
	                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
	                |			,
	                |			,
	                |			Регистратор,
	                |			Сделка В
	                |				(ВЫБРАТЬ
	                |					ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	                |				ИЗ
	                |					РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ТекДата, ДоговорКонтрагента.Владелец В
	                |							(ВЫБРАТЬ
	                |								ВТ_КонтрагентыПоСделке.Контрагент
	                |							ИЗ
	                |								ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	                |						И ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.ФормулаАвтоПлюс)
	                |						И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Сделка.ДатаОплаты, ДЕНЬ), ДЕНЬ, 2) > КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |				ГДЕ
	                |					ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0)) КАК ВзаиморасчетыСКонтрагентамиОбороты
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.Регистратор = ВозвратТоваровОтПокупателяТовары.Ссылка
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтИнфо КАК ВТ_КонтИнфо
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец = ВТ_КонтИнфо.Объект
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АдресЭлПочты КАК ВТ_АдресЭлПочты
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец = ВТ_АдресЭлПочты.Объект
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Вт_ОбщаяПДЗ КАК Вт_ОбщаяПДЗ
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец = Вт_ОбщаяПДЗ.Владелец
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	                |				&ТекДата,
	                |				ДоговорКонтрагента.Владелец В
	                |						(ВЫБРАТЬ
	                |							ВТ_КонтрагентыПоСделке.Контрагент
	                |						ИЗ
	                |							ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	                |					И ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.ФормулаАвтоПлюс)
	                |					И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Сделка.ДатаОплаты, ДЕНЬ), ДЕНЬ, 2) > КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
	                |			И ВзаиморасчетыСКонтрагентамиОбороты.Сделка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	                |ГДЕ
	                |	Вт_ОбщаяПДЗ.СуммаУпрОстаток > 0
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВЫБОР
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	                |	КОНЕЦ,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты,
	                |	ЕСТЬNULL(ВТ_КонтИнфо.ЮрАдрес, """"),
	                |	ЕСТЬNULL(ВТ_АдресЭлПочты.ЭлПочта, """"),
	                |	ЕСТЬNULL(Вт_ОбщаяПДЗ.СуммаУпрОстаток, 0),
	                |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_Просрочка.Реализация,
	                |	ВТ_Просрочка.СуммаДокумента КАК СуммаДокумента,
	                |	ВТ_Просрочка.Заказ КАК Заказ,
	                |	ВТ_Просрочка.Днейпросрочки,
	                |	ВТ_Просрочка.ДоговорКонтрагента,
	                |	ВТ_Просрочка.СуммаОстаток КАК СуммаОстаток,
	                |	ВТ_Просрочка.Контрагент КАК Контрагент,
	                |	ВТ_Просрочка.Вид КАК Вид,
	                |	ВТ_Просрочка.ДатаОплаты КАК ДатаОплаты,
	                |	ВТ_Просрочка.ЮрАдрес КАК ЮрАдрес,
	                |	ВТ_Просрочка.Контрагент.Код КАК КодКонтрагента,
	                |	ВТ_Просрочка.ЭлПочта КАК ЭлПочта
	                |ИЗ
	                |	ВТ_Просрочка КАК ВТ_Просрочка
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ВТ_Непросрочка.Реализация,
	                |	ВТ_Непросрочка.СуммаДокумента,
	                |	ВТ_Непросрочка.Заказ,
	                |	NULL,
	                |	ВТ_Непросрочка.ДоговорКонтрагента,
	                |	ВТ_Непросрочка.СуммаОстаток,
	                |	ВТ_Непросрочка.Контрагент,
	                |	ВТ_Непросрочка.Вид,
	                |	ВТ_Непросрочка.ДатаОплаты,
	                |	ВТ_Непросрочка.ЮрАдрес,
	                |	ВТ_Непросрочка.Контрагент.Код,
	                |	ВТ_Непросрочка.ЭлПочта
	                |ИЗ
	                |	ВТ_Непросрочка КАК ВТ_Непросрочка
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Вид,
	                |	ДатаОплаты,
	                |	Заказ
	                |ИТОГИ
	                |	СУММА(СуммаДокумента),
	                |	СУММА(СуммаОстаток),
	                |	МАКСИМУМ(ЮрАдрес),
	                |	МАКСИМУМ(ЭлПочта)
	                |ПО
	                |	Контрагент,
	                |	Вид" ;
	

	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаКонтрагент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	СписокКлиентовБезЮрАдреса = "Не заполнен юр. адрес по контрагентам: "+ Символы.ПС;
	
	СписокКлиентовБезЭлПочты = "Не заполнен эл. почта по контрагентам: "+ Символы.ПС;

	СоздатьЗадачуАдрес = Ложь;
	СоздатьЗадачуЭлПочта = Ложь;
	РезультатПросрочка = Новый ТаблицаЗначений;
	РезультатПросрочка.Колонки.Добавить("Реализация");
	РезультатПросрочка.Колонки.Добавить("СуммаДокумента");
	РезультатПросрочка.Колонки.Добавить("Заказ");
	РезультатПросрочка.Колонки.Добавить("Днейпросрочки");
	РезультатПросрочка.Колонки.Добавить("ДоговорКонтрагента");
	РезультатПросрочка.Колонки.Добавить("СуммаОстаток");


	Пока ВыборкаКонтрагент.Следующий() Цикл
	
		Если ЗначениеНеЗаполнено(ВыборкаКонтрагент.ЮрАдрес) Тогда
			СписокКлиентовБезЮрАдреса = СписокКлиентовБезЮрАдреса + ВыборкаКонтрагент.Контрагент + "(" + ВыборкаКонтрагент.КодКонтрагента + ")" + Символы.ПС;
			СоздатьЗадачуАдрес = Истина;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ВыборкаКонтрагент.ЭлПочта) Тогда
			СписокКлиентовБезЭлПочты = СписокКлиентовБезЭлПочты + ВыборкаКонтрагент.Контрагент + "(" + ВыборкаКонтрагент.КодКонтрагента + ")" + Символы.ПС;
			СоздатьЗадачуЭлПочта = Истина;
		КонецЕсли;
		
		ТабДок = Новый ТабличныйДокумент;
		Макет = ПолучитьОбщийМакет("УведомлениеОПДЗФАПлюс");
		ОбластьБланк = Макет.ПолучитьОбласть("БланкЯШТ");
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаПросрочка");
		ОбластьШапкаОплата = Макет.ПолучитьОбласть("ШапкаОплаты");
		ОбластьСтрокаОплата = Макет.ПолучитьОбласть("СтрокаОплаты");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		Попытка
			ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native); 
			Объект = Новый("AddIn.Decl.CNameDecl");
		Исключение
			Сообщить("Не удалось подключить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
		КонецПопытки;
		
		Падеж = 1; //Дательный: кому? чему? 
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Наименование,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата
		|ПОМЕСТИТЬ Вт_Договоры
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ТекДата,
		|			ДоговорКонтрагента.Владелец = &Контрагент
		|				И ДоговорКонтрагента.ТипДоговора = Значение(Справочник.ТипыДоговоров.ФормулаАвтоПлюс)
		|				И (КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Сделка.ДатаОплаты, ДЕНЬ, 2), ДЕНЬ) <= КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
		|					ИЛИ сделка ССЫЛКА Документ.НачислениеПени)
		|				И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(Вт_Договоры.СуммаУпрОстаток) КАК СуммаУпрОстаток,
		|	МАКСИМУМ(Вт_Договоры.ДоговорКонтрагентаНаименование) КАК ДоговорКонтрагента,
		|	Вт_Договоры.ДоговорКонтрагентаНомер КАК Номер,
		|	Вт_Договоры.ДоговорКонтрагентаДата КАК Дата
		|ИЗ
		|	Вт_Договоры КАК Вт_Договоры
		|
		|СГРУППИРОВАТЬ ПО
		|	Вт_Договоры.ДоговорКонтрагентаДата,
		|	Вт_Договоры.ДоговорКонтрагентаНомер";
		
		Запрос.УстановитьПараметр("Контрагент", ВыборкаКонтрагент.Контрагент);

		Запрос.УстановитьПараметр("СписокТиповДоговора", Справочники.ТипыДоговоров.ФормулаАвтоПлюс);
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		ЗначДог = "";
		СуммаДолга = 0;
		
		Пока Выборка.Следующий() Цикл
			Если  ЗначДог <> "" Тогда
				ЗначДог = ЗначДог+", ";
			КонецЕсли;
			Если Не ПустаяСтрока(Выборка.Номер) Тогда
				ЗначДог =ЗначДог+"№ "+ Выборка.Номер +" от " +Формат(Выборка.Дата,"ДФ=dd.MM.yyyy");
			КонецЕсли;
			СуммаДолга= СуммаДолга+ Выборка.СуммаУпрОстаток;
		КонецЦикла;
		Если СуммаДолга < 0 ТОгда
			Продолжить;
		КонецЕсли;
		
		
		ОбластьШапка.Параметры.Дата = ТекущаяДата();
		ОбластьШапка.Параметры.НазваниеКонтрагента = ВыборкаКонтрагент.Контрагент.НаименованиеПолное;
		ОбластьШапка.Параметры.АдресКонтрагента = ВыборкаКонтрагент.ЮрАдрес;
		ОбластьШапка.Параметры.задолженность = СуммаДолга;
		ОбластьШапка.Параметры.ЗначДог = ЗначДог;
		ОбластьШапка.Параметры.ТекДата = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
		ТабДок.Вывести(ОбластьБланк);
		ТабДок.Вывести(ОбластьШапка);
		СуммаДолга = 0;
		ИтогоДолг = 0;
//	
        ВыборкаТипДокумента = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаТипДокумента.Следующий() Цикл
			Если ВыборкаТипДокумента.Вид = 1 Тогда
				РезультатПросрочка.Очистить();
				ВыборкаПросрочка = ВыборкаТипДокумента.Выбрать();
				Пока ВыборкаПросрочка.Следующий() Цикл
					НоваяСтрока = РезультатПросрочка.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаПросрочка);
				КонецЦикла;
				
				Отбор = новый Структура("Реализация",Null);
				ПустыеРеал  = РезультатПросрочка.НайтиСтроки(отбор);
				Для каждого Стр из ПустыеРеал Цикл
					РезультатПросрочка.Удалить(Стр);	
				КонецЦикла;
				
	
				Для каждого стр из РезультатПросрочка Цикл
					Если ТипЗнч(Стр.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
						Если  Стр.Реализация <> Null Тогда
							отбор = новый Структура("Заказ",стр.Заказ);
							СтрокиСЗаказом= РезультатПросрочка.НайтиСтроки(отбор);
							Если СтрокиСЗаказом.Количество() > 1 Тогда
								СуммаДолга = Стр.СуммаОстаток;
								для каждого ст из СтрокиСЗаказом цикл
									Если ст = стр Тогда
										Если ст.СуммаДокумента< СуммаДолга Тогда
											ОбластьСтрока.Параметры.СуммаОстаток = Стр.СуммаДокумента;
											ИтогоДолг = ИтогоДолг+Стр.СуммаДокумента;
										иначе	
											ОбластьСтрока.Параметры.СуммаОстаток = СуммаДолга;
											ИтогоДолг = ИтогоДолг+СуммаДолга;
										конецЕсли;	
									КонецЕсли;
									Если ст.СуммаДокумента < СуммаДолга Тогда
										СуммаДолга= СуммаДолга-Стр.СуммаДокумента;	
									иначе	
										СуммаДолга=0;
									конецЕсли;	
								конецЦикла;	
							иначе
								ОбластьСтрока.Параметры.СуммаОстаток = Стр.СуммаОстаток;
								ИтогоДолг = ИтогоДолг+Стр.СуммаОстаток;
							конецЕсли;	
							ОбластьСтрока.Параметры.ДатаОтгрузки = Стр.Заказ.ДатаОтгрузки;
							ОбластьСтрока.Параметры.НомерЗаказа = Стр.Заказ.Номер;
							ОбластьСтрока.Параметры.НомерТТН  = Стр.Реализация.Номер;
							ОбластьСтрока.Параметры.СуммаОтгрузки = Стр.СуммаДокумента;
							ОбластьСтрока.Параметры.ДатаОплаты = Стр.Заказ.ДатаОплаты;
							ОбластьСтрока.Параметры.ДнейПросрочки = Стр.ДнейПросрочки;
						//	ОбластьСтрока.Параметры.СуммаПени = Стр.суммаПени;
						конецЕсли;
					иначе
						Если  Стр.Реализация <> Null Тогда
							ОбластьСтрока.Параметры.ДатаОтгрузки = Стр.Реализация.Дата;
							ОбластьСтрока.Параметры.НомерЗаказа = Неопределено;
							ОбластьСтрока.Параметры.НомерТТН  = Стр.Реализация.Номер;
							ОбластьСтрока.Параметры.СуммаОтгрузки = Стр.СуммаДокумента;
							ОбластьСтрока.Параметры.СуммаОстаток = Стр.СуммаОстаток;
							ИтогоДолг = ИтогоДолг+Стр.СуммаОстаток;
							ОбластьСтрока.Параметры.ДатаОплаты = Стр.Реализация.Дата;
							ОбластьСтрока.Параметры.ДнейПросрочки = 0;
						//	ОбластьСтрока.Параметры.СуммаПени = Стр.СуммаПени;
						конецЕсли;
					конецЕсли;	
					ТабДок.Вывести(ОбластьСтрока);
				конецЦикла;	
				ОбластьИтогПросрочка =  Макет.ПолучитьОбласть("ИтогПросрочка");
				ОбластьИтогПросрочка.Параметры.СуммаОтгрузки =РезультатПросрочка.Итог("суммаДокумента"); 
			//	ОбластьИтогПросрочка.Параметры.СуммаПени = РезультатПросрочка.Итог("суммаПени");
				ОбластьИтогПросрочка.Параметры.СуммаОстаток = ИтогоДолг;
				ТабДок.Вывести(ОбластьИтогПросрочка);
			Иначе
				РезультатПоДолгам = ВыборкаТипДокумента.Выбрать();
				Если РезультатПоДолгам.Количество()>0 Тогда
					ТабДок.Вывести(ОбластьШапкаОплата);
					СуммаОтгрузкиОбщ = 0;
					СуммаОстОбщ = 0;

					Пока РезультатПоДолгам.Следующий() Цикл
						Если  РезультатПоДолгам.Реализация <> Null Тогда
							ОбластьСтрокаОплата.Параметры.ДатаОтгрузки = РезультатПоДолгам.Заказ.ДатаОтгрузки;
							ОбластьСтрокаОплата.Параметры.НомерЗаказа = РезультатПоДолгам.Заказ.Номер;
							ОбластьСтрокаОплата.Параметры.НомерТТН  = РезультатПоДолгам.Реализация.Номер;
							ОбластьСтрокаОплата.Параметры.СуммаОтгрузки = РезультатПоДолгам.СуммаДокумента;
							ОбластьСтрокаОплата.Параметры.СуммаОстаток = РезультатПоДолгам.СуммаОстаток;

							ОбластьСтрокаОплата.Параметры.ДатаОплаты = РезультатПоДолгам.Заказ.ДатаОплаты;
							ТабДок.Вывести(ОбластьСтрокаОплата);
						КонецЕсли;
						СуммаОтгрузкиОбщ = СуммаОтгрузкиОбщ + РезультатПоДолгам.СуммаДокумента;
						СуммаОстОбщ = СуммаОстОбщ + РезультатПоДолгам.СуммаОстаток;
					КонецЦикла;		
					ОбластьИтогОплаты =  Макет.ПолучитьОбласть("ИтогОплаты");
					ОбластьИтогОплаты.Параметры.СуммаОтгрузки =СуммаОтгрузкиОбщ; 
					ОбластьИтогОплаты.Параметры.СуммаОстаток =СуммаОстОбщ;
					ТабДок.Вывести(ОбластьИтогОплаты);
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьПодвал.Параметры.ТекДата = ТекущаяДата();
	//	ОбластьПодвал.Параметры.ТекущийПользователь = ВыборкаКонтрагент.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо;
		
		ТабДок.Вывести(ОбластьПодвал);  
		ТабДок.ОтображатьЗаголовки = Ложь;
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.АвтоМасштаб = Истина;
	//	ТабДок.Показать();
	
			ИмяФайлаОтправки = ИмяКаталога + "Письмо о возникновении ПДЗ " +ВыборкаКонтрагент.Контрагент.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf";
			ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"+","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"?","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"*","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"%","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"""","");
			
	 		ИмяФайлаОтправки0 = стрЗаменить(ИмяФайлаОтправки, ИмяКаталога, ИмяКаталога0);
			ТабДок.Записать(ИмяФайлаОтправки, ТипФайлаТабличногоДокумента.PDF);	
			
			Если ХранитьВБазе1С тогда
				ИмяФайлаХранения = стрЗаменить(ИмяФайлаОтправки, ".pdf" ,".mxl");
				ТабДок.Записать(ИмяФайлаХранения, ТипФайлаТабличногоДокумента.MXL);	
			КонецЕсли;
 
		     ТабДок = Неопределено;


		// Создаем событие
		//04.10.16 Смирнов для заказов создаваемых через WS не работает
		НовСобытие = Документы.Событие.СоздатьДокумент();
		НовСобытие.Дата = ТекущаяДата();
		НовСобытие.ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо;
		НовСобытие.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
		НовСобытие.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
		НовСобытие.Контрагент = ВыборкаКонтрагент.Контрагент;
		НовСобытие.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
		НовСобытие.ОписаниеСобытия = "Письмо о возникновении ПДЗ по ФормулаАвтоПлюс";
		
		НовСобытие.СодержаниеСобытия = НовСобытие.ОписаниеСобытия +"
		|Файл"+?(ХранитьВБазе1С,"(В БАЗЕ 1С): " + стрЗаменить(ИмяФайлаОтправки,ИмяКаталога,""), "(в папке): " + ИмяФайлаОтправки0);
		
		НовСобытие.Важность = Перечисления.Важность.Высокая;
		новСобытие.СостояниеСобытия = Перечисления.СостоянияСобытий.Завершено;
		НовСобытие.Записать(); //БЕЗ проведения
 		
		//Создаем письмо
		СписокФайловВложений = Новый СписокЗначений;
		СписокФайловВложений.Добавить(ИмяФайлаОтправки);

		Если ЗначениеЗаполнено(ВыборкаКонтрагент.ЭлПочта) Тогда
			ТекстСообщения ="   Добрый день,
			|
			|Высылаем Вам письмо о наличии просроченной дебиторской задолженности.
			|
			|
			|С уважением,
			|Генеральный директор Курапова Е.А.
			|
			|ООО ""Формула Авто Плюс"", 
			|юр.адрес: 150003, г. Ярославль, ул. Полушкина Роща, д. 9
			|";
			
			Тема = "Письмо о возникновении просроченной дебиторской задолженности";
			яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(ВыборкаКонтрагент.ЭлПочта,СписокФайловВложений, УЗ, ТекстСообщения, Тема,,,Истина);
			НовСобытие.Комментарий = "Письмо отправлено";
			НовСобытие.Записать(); //БЕЗ проведения
		КонецЕсли;
		
//-----------------------------------Запись в хранилище в базу 1С ----------------------------------------		
	Если ХранитьВБазе1С тогда
		СохранитьФайлВБазу1С(ИмяФайлаХранения, ИмяФайлаОтправки, НовСобытие );
	Иначе
		КопироватьФайл(ИмяФайлаОтправки, ИмяФайлаОтправки0);
		УдалитьФайлы(ИмяФайлаОтправки);
	КонецЕсли;	

	КонецЦикла;	
	
	Если СоздатьЗадачуАдрес Тогда
		НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		НоваяЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду(КомуСоздаватьЗадачуОбОтсутвииЭлАдресов);
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.Оповещение = Истина;
		НоваяЗадача.СрокОповещения = ТекущаяДата();
		НоваяЗадача.Наименование = "Не заполнен юридический адрес контрагента";
		НоваяЗадача.Описание = СписокКлиентовБезЮрАдреса;
		НоваяЗадача.Записать();
	КонецЕсли;
	Если СоздатьЗадачуЭлПочта Тогда
		НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		НоваяЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду(КомуСоздаватьЗадачуОбОтсутвииЭлАдресов);
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.Оповещение = Истина;
		НоваяЗадача.СрокОповещения = ТекущаяДата();
		НоваяЗадача.Наименование = "НЕВОЗМОЖНО отправить письма о ПДЗ по Формула Авто Плюс!";
		НоваяЗадача.Описание ="НЕВОЗМОЖНО отправить письма о ПДЗ по Формула Авто Плюс!
		|Не заполнена эл. почта контрагентов:
		|"+ СписокКлиентовБезЭлПочты;
		НоваяЗадача.Записать();
	КонецЕсли;
			
КонецПроцедуры

Процедура РассылкаПредупредительногоПисьмаДолжникуФАПлюс(АдресОтправки="", ИмяКаталога0="", ХранитьВБазе1С=ЛОЖЬ) 
	
	УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(АдресОтправки);
 	КомуСоздаватьЗадачуОбОтсутвииЭлАдресов = "Курапова Е.А."; 
    ИмяКаталога = КаталогВременныхФайлов();
 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("СвойствоПисьмоДолжнику", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90211"));

	Запрос.Текст =  	
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент
	|ПОМЕСТИТЬ ВТ_КонтрагентыПоСделке
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			&ТекДата,
	|			ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.ФормулаАвтоПлюс)
	|				И (КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Сделка.ДатаОплаты, ДЕНЬ, 30), ДЕНЬ) = КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	|					ИЛИ сделка ССЫЛКА Документ.НачислениеПени)
	|				И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200)) КАК ЮрАдрес
	|ПОМЕСТИТЬ ВТ_КонтИнфо
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В
	|			(ВЫБРАТЬ
	|				ВТ_КонтрагентыПоСделке.Контрагент
	|			ИЗ
	|				ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200)) КАК ЭлПочта
	|ПОМЕСТИТЬ ВТ_АдресЭлПочты
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В
	|			(ВЫБРАТЬ
	|				ВТ_КонтрагентыПоСделке.Контрагент
	|			ИЗ
	|				ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты < &ТекДата
	|					И НЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	|				ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Просрочка,
	|	МАКСИМУМ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты) КАК МаксДатаОплаты,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК Сделка
	|ПОМЕСТИТЬ ВТ_ЗаказыКонтрагентов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			,
	|			ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.ФормулаАвтоПлюс)
	|				И ДоговорКонтрагента.Владелец В
	|					(ВЫБРАТЬ
	|						ВТ_КонтрагентыПоСделке.Контрагент
	|					ИЗ
	|						ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК Сделка,
	|	СУММА(НачисленныеПениОстатки.ПениОстаток) КАК ПениОстаток,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент
	|ПОМЕСТИТЬ Вт_Пени
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			,
	|			ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.ФормулаАвтоПлюс)
	|				И ДоговорКонтрагента.Владелец В
	|					(ВЫБРАТЬ
	|						ВТ_КонтрагентыПоСделке.Контрагент
	|					ИЗ
	|						ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	|				И Сделка.ДатаОплаты < &ТекДата) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленныеПени.Остатки КАК НачисленныеПениОстатки
	|		ПО ВзаиморасчетыСКонтрагентамиОстатки.Сделка = НачисленныеПениОстатки.Сделка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0),
	|	NULL
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			&ТекДата,
	|			ДоговорКонтрагента.Владелец В
	|					(ВЫБРАТЬ
	|						ВТ_КонтрагентыПоСделке.Контрагент
	|					ИЗ
	|						ВТ_КонтрагентыПоСделке КАК ВТ_КонтрагентыПоСделке)
	|				И ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.Пени)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаказыКонтрагентов.СуммаУпрОстаток,
	|	ВТ_ЗаказыКонтрагентов.Просрочка,
	|	ВТ_ЗаказыКонтрагентов.МаксДатаОплаты,
	|	ВТ_ЗаказыКонтрагентов.Контрагент,
	|	ЕСТЬNULL(Вт_Пени.ПениОстаток, 0) КАК Пени,
	|	ЕСТЬNULL(ВТ_КонтИнфо.ЮрАдрес, 0) КАК ЮрАдрес,
	|	ЕСТЬNULL(ВТ_АдресЭлПочты.ЭлПочта, 0) КАК ЭлПочта
	|ИЗ
	|	ВТ_ЗаказыКонтрагентов КАК ВТ_ЗаказыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_Пени КАК Вт_Пени
	|		ПО ВТ_ЗаказыКонтрагентов.Контрагент = Вт_Пени.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтИнфо КАК ВТ_КонтИнфо
	|		ПО ВТ_ЗаказыКонтрагентов.Контрагент = ВТ_КонтИнфо.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АдресЭлПочты КАК ВТ_АдресЭлПочты
	|		ПО ВТ_ЗаказыКонтрагентов.Контрагент = ВТ_АдресЭлПочты.Объект
	|ГДЕ
	|	ВТ_ЗаказыКонтрагентов.Просрочка > 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	СписокКлиентовБезЮрАдреса = "Не заполнен юр. адрес по контрагентам: "+ Символы.ПС;
	СписокКлиентовБезЭлПочты = "Не заполнен эл. почта по контрагентам: "+ Символы.ПС;
    СоздатьЗадачуАдрес = Ложь;
	СоздатьЗадачуЭлПочта = Ложь;

	Пока Выборка.Следующий() Цикл
		
        Контрагент = Выборка.Контрагент;
		ОбщаяЗадолженностьНаДатуФормирования = Выборка.СуммаУпрОстаток;
		МаксимальнаяДатаОплатыПоВсемНакладным = Лев(Выборка.МаксДатаОплаты,10);
		ПросроченнаяЗадолженность = Выборка.Просрочка;
        СуммаПени = Выборка.Пени;
	
		Если ЗначениеНеЗаполнено(Выборка.ЮрАдрес) Тогда
			СписокКлиентовБезЮрАдреса = СписокКлиентовБезЮрАдреса + Контрагент + "(" + Контрагент.Код + ")" + Символы.ПС;
			СоздатьЗадачуАдрес = Истина;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(Выборка.ЭлПочта) Тогда
			СписокКлиентовБезЭлПочты = СписокКлиентовБезЭлПочты + Контрагент + "(" + Контрагент.Код + ")" + Символы.ПС;
			СоздатьЗадачуЭлПочта = Истина;
		КонецЕсли;

		
		ТабДок = Новый ТабличныйДокумент;
		Макет = ПолучитьОбщийМакет("ПредупредительноеПисьмоДолжникуФАПлюс");
		ОбластьБланк = Макет.ПолучитьОбласть("БланкЯШТ");
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьПисьма = Макет.ПолучитьОбласть("Основная");
		
	
		Попытка
			ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native); 
			Объект = Новый("AddIn.Decl.CNameDecl");
		Исключение
			Сообщить("Не удалось подключить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
		КонецПопытки;
		
		Падеж = 3; //Дательный: кому? чему? 
				
		//склонение должности
		РезультатДолжность = "";
		Если НЕ ЗначениеЗаполнено(Контрагент.ОсновноеКонтактноеЛицо.Должность) Тогда
			//	Сообщить("Не заполнена должность основного контактного лица контрагента!", СтатусСообщения.Важное);
		Иначе
			МассивСтрок = РазложитьСтрокуВМассивПодстрок2(Контрагент.ОсновноеКонтактноеЛицо.Должность, " ");
			// Выделим первые 3 слова, так как компонента не умеет склонять фразу большую 3х символов
			НомерНесклоняемогоСимвола = 4;
			Для Номер = 1 По Мин(МассивСтрок.Количество(), 3) Цикл
				Попытка
					Рез = Объект.Просклонять(МассивСтрок[Номер-1], Падеж);
				Исключение
					Рез = МассивСтрок[Номер-1];
				КонецПопытки;
				РезультатДолжность = РезультатДолжность + ?(Номер > 1, " ", "") + Рез;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьШапка.Параметры.Дата = Лев(ТекущаяДата(),10);
		ОбластьШапка.Параметры.НазваниеКонтрагента = Контрагент.НаименованиеПолное;
		ОбластьШапка.Параметры.АдресКонтрагента = Выборка.ЮрАдрес;
		
		ОбластьПисьма.Параметры.НазваниеКонтрагента = Контрагент.НаименованиеПолное;
		ОбластьПисьма.Параметры.НомерДоговора = Контрагент.ОсновнойДоговорКонтрагента.Номер;
		ОбластьПисьма.Параметры.ДатаДоговора = Лев(Контрагент.ОсновнойДоговорКонтрагента.Дата,10);
		ОбластьПисьма.Параметры.ОбщаяЗадолженностьНаДатуФормирования = ОбщаяЗадолженностьНаДатуФормирования;
		ОбластьПисьма.Параметры.МаксимальнаяДатаОплатыПоВсемНакладным = МаксимальнаяДатаОплатыПоВсемНакладным;
		ОбластьПисьма.Параметры.ПросроченнаяЗадолженность = ПросроченнаяЗадолженность;
		ОбластьПисьма.Параметры.Пени = СуммаПени;
		ОбластьПисьма.Параметры.ПросрочкаПлюсПени = СуммаПени + ПросроченнаяЗадолженность;
		//ОбластьПисьма.Параметры.ТекущийПользователь = Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо;
		
		ТабДок.Вывести(ОбластьБланк);
		ТабДок.Вывести(ОбластьШапка);
		ТабДок.Вывести(ОбластьПисьма);  
		ТабДок.ОтображатьЗаголовки = Ложь;
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.АвтоМасштаб = Истина;
		//ТабДок.Показать();
		
		ИмяФайлаОтправки = ИмяКаталога + "Предупредительное письмо " + Контрагент.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf";
			ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"+","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"?","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"*","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"%","");
	        ИмяФайлаОтправки = стрЗаменить(ИмяФайлаОтправки,"""","");
			
	 		ИмяФайлаОтправки0 = стрЗаменить(ИмяФайлаОтправки, ИмяКаталога, ИмяКаталога0);
			ТабДок.Записать(ИмяФайлаОтправки, ТипФайлаТабличногоДокумента.PDF);	
			
			Если ХранитьВБазе1С тогда
				ИмяФайлаХранения = стрЗаменить(ИмяФайлаОтправки, ".pdf" ,".mxl");
				ТабДок.Записать(ИмяФайлаХранения, ТипФайлаТабличногоДокумента.MXL);	
	        КонецЕсли;
			
			ТабДок = Неопределено;
			
		
		//04.10.16 Смирнов глТекущийПользователь не работает через ws
		//// Создаем событие
		НовСобытие = Документы.Событие.СоздатьДокумент();
		НовСобытие.Дата = ТекущаяДата();
		НовСобытие.ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо;
		НовСобытие.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
		НовСобытие.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
		НовСобытие.Контрагент = Контрагент;
		НовСобытие.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
		НовСобытие.ОписаниеСобытия = "Предупредительное письмо должнику";
		НовСобытие.СодержаниеСобытия = НовСобытие.ОписаниеСобытия +"
		|Файл"+?(ХранитьВБазе1С,"(В БАЗЕ 1С): " + стрЗаменить(ИмяФайлаОтправки,ИмяКаталога,""), "(в папке): " + ИмяФайлаОтправки0);
		НовСобытие.Важность = Перечисления.Важность.Высокая;
        новСобытие.СостояниеСобытия = Перечисления.СостоянияСобытий.Завершено;

 	
		//Создаем письмо
		СписокФайловВложений = Новый СписокЗначений;
		СписокФайловВложений.Добавить(ИмяФайлаОтправки);

		Если ЗначениеЗаполнено(Выборка.ЭлПочта) Тогда
			ТекстСообщения ="   Добрый день,
			|
			|Высылаем Вам предупредительное письмо о имеющейся задолженности.
			|
			|
			|С уважением,
			|Генеральный директор Курапова Е.А.
			|
			|ООО ""Формула Авто Плюс"", 
			|юр.адрес: 150003, г. Ярославль, ул. Полушкина Роща, д. 9
			|";

			
			Тема = "Предупредительное письмо должнику";
			
			яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(Выборка.ЭлПочта,СписокФайловВложений, УЗ, ТекстСообщения, Тема,,,Истина);
			НовСобытие.Комментарий = "Письмо отправлено";
			НовСобытие.Записать();//БЕЗ проведения
		КонецЕсли;
		
//----------------------------Запись в хранилище с базу 1С------------------------------------------------------------	
		Если ХранитьВБазе1С тогда 
			СохранитьФайлВБазу1С(ИмяФайлаХранения, ИмяФайлаОтправки, НовСобытие );
		Иначе
	    	КопироватьФайл(ИмяФайлаОтправки, ИмяФайлаОтправки0);
			УдалитьФайлы(ИмяФайлаОтправки);
		КонецЕсли;
	
	КонецЦикла;	
	
	Если СоздатьЗадачуАдрес Тогда
		НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		НоваяЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду(КомуСоздаватьЗадачуОбОтсутвииЭлАдресов);
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.Оповещение = Истина;
		НоваяЗадача.СрокОповещения = ТекущаяДата();
		НоваяЗадача.Наименование = "Не заполнен юридический адрес контрагента";
		НоваяЗадача.Описание = СписокКлиентовБезЮрАдреса;
		НоваяЗадача.Записать();
	КонецЕсли;
	Если СоздатьЗадачуЭлПочта Тогда
		НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		НоваяЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду(КомуСоздаватьЗадачуОбОтсутвииЭлАдресов);
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.Оповещение = Истина;
		НоваяЗадача.СрокОповещения = ТекущаяДата();
		НоваяЗадача.Наименование = "НЕВОЗМОЖНО отправить Предупредительные Письма Должнику (ФАПлюс)";
		НоваяЗадача.Описание =НоваяЗадача.Наименование+"
		|Не заполнена эл. почта контрагентов:
		|"+ СписокКлиентовБезЭлПочты;
		НоваяЗадача.Записать();
	КонецЕсли;

КонецПроцедуры

//----------------------------------------------------------------------------

//+++ 16.08.2017 - если надо будет - это единая функция!
процедура СохранитьФайлВБазу1С(ИмяФайлаХранения, ИмяФайлаОтправки, НовСобытие )
	Попытка
			ЛокХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаХранения));
			СправочникХЗН = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			СправочникХЗН.Наименование = НовСобытие.ОписаниеСобытия + " "+строка(НовСобытие.дата); 
			СправочникХЗН.Хранилище = ЛокХранилище;
			СправочникХЗН.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
			СправочникХЗН.Объект = НовСобытие.Ссылка;
			СправочникХЗН.ИмяФайла = ИмяФайлаХранения;
			СправочникХЗН.Записать();
		Исключение
		КонецПопытки;

		Попытка
			УдалитьФайлы(ИмяФайлаХранения);
			УдалитьФайлы(ИмяФайлаОтправки);
		Исключение
		КонецПопытки;
КонецПроцедуры	


Функция РазложитьСтрокуВМассивПодстрок2(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

// Сакулина. Создание Заданий на перемещение на ошиповку
Процедура СоздатьЗаданияНаПеремещенияНаОшиповку() Экспорт
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ЗаданиеНаПеремещениеЗаказыПокупателей.ЗаказПокупателя
	 |ПОМЕСТИТЬ Вт_ЗаданияНаПеремещение
	 |ИЗ
	 |	Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ЗаданиеНаПеремещениеЗаказыПокупателей
	 |ГДЕ
	 |	ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.СкладПолучатель = &СкладПолучатель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК Заказ
	 |ИЗ
	 |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	 |			,
	 |			ЗаказПокупателя.Ошиповка = ИСТИНА
	 |				И ЗаказПокупателя.Проверен = ИСТИНА
	 |				И НЕ ЗаказПокупателя В
	 |						(ВЫБРАТЬ
	 |							Вт_ЗаданияНаПеремещение.ЗаказПокупателя
	 |						ИЗ
	 |							Вт_ЗаданияНаПеремещение КАК Вт_ЗаданияНаПеремещение)) КАК ЗаказыПокупателейОстатки
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ЗаказыПокупателейОстатки.ЗаказПокупателя.МоментВремени";
	 
	 Запрос.УстановитьПараметр("СкладПолучатель", Справочники.Склады.НайтиПоКоду("00010"));
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Количество()>0 Тогда
		 Задание = Документы.ЗаданиеНаПеремещение.СоздатьДокумент();
		 Задание.Дата = ТекущаяДата();
		 Задание.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход;
		 Задание.СкладПолучатель=Справочники.Склады.НайтиПоКоду("00010");
		 ТЗАсортимента = Новый ТаблицаЗначений;
		 ТЗАсортимента.Колонки.Добавить("ВидТовара");
		 
		 Пока Выборка.Следующий() Цикл
			 СтрокаЗадания = Задание.ЗаказыПокупателей.Добавить();
			 СтрокаЗадания.ЗаказПокупателя   = Выборка.Заказ;
			 СтрокаЗадания.КоличествоПозиций = Выборка.Заказ.Товары.Количество();
			 СтрокаЗадания.КоличествоШтук    = Выборка.Заказ.Товары.Итог("Количество");
			 Задание.НомераЗаявокВСтроку     = ?(СтрДлина(Задание.НомераЗаявокВСтроку) > 0, Задание.НомераЗаявокВСтроку+", "+Выборка.Заказ.Номер, Выборка.Заказ.Номер);  
			 Для Каждого Товар Из Выборка.Заказ.Товары Цикл
				 Если ЗначениеЗаполнено(Товар.Номенклатура.ВидТовара) Тогда
					 Если ТЗАсортимента.Найти(Товар.Номенклатура.ВидТовара, "ВидТовара") = Неопределено Тогда
						 НоваяСтрокаТЗАсортимента = ТЗАсортимента.Добавить();
						 НоваяСтрокаТЗАсортимента.ВидТовара = Товар.Номенклатура.ВидТовара;
					 КонецЕсли;
				 КонецЕсли;
			 КонецЦикла;
		 КонецЦикла;
		 
		 Для Каждого СтрокаТЗАсортимента Из ТЗАсортимента Цикл
			 Задание.Ассортимент = ?(СтрДлина(Задание.Ассортимент) > 0, Задание.Ассортимент+", "+СтрокаТЗАсортимента.ВидТовара, СтрокаТЗАсортимента.ВидТовара);
		 КонецЦикла;
		 
		 Задание.ИтогКоличествоПозиций = Задание.ЗаказыПокупателей.Итог("КоличествоПозиций");
		 Задание.ИтогКоличествоШтук    = Задание.ЗаказыПокупателей.Итог("КоличествоШтук");
		 ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Робот (магазин)");	
		 Задание.Ответственный         = ТекущийПользователь;
		 
		 Задание.ВводитьКонтрагентаВручную = Истина; // это текст!
		 Задание.Направление=""; город0 = ""; 
		 контр0=справочники.Контрагенты.ПустаяСсылка();
	//	 таблЗаказы = Результат.Скопировать();	
		 СортироватьПоПорядку(Задание,Задание.Товары);
		 Задание.Комментарий = "Автоматическоезадание на ошиповку " + " " + Строка(ТекущаяДата());
		 Задание.Организация = Справочники.Организации.НайтиПоКоду("00001");
		 Задание.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
		 Задание.Контрагент = "На ошиповку";
		 Задание.ОбменДанными.Загрузка = Истина;
		 //жимПроведения = РежимПроведенияДокумента.Оперативный; //всегда Оперативно
		 Задание.Записать(РежимЗаписиДокумента.Запись);
	 КонецЕсли;
		 
КонецПроцедуры

Процедура ЗакрытиеЗаказовПокупателейСезонных() Экспорт
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказыПокупателейСезонныеОстатки.Контрагент КАК Контрагент,
		|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный КАК ЗаказПокупателяСезонный,
		|	ЗаказыПокупателейСезонныеОстатки.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ЗаказыПокупателейСезонныеОстатки.ВРезерве = ИСТИНА
		|			ТОГДА ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток
		|		ИНАЧЕ -ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Количество,
		|	ЗаказыПокупателейСезонныеОстатки.Аналог,
		|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателя,
		|	ЗаказыПокупателейСезонныеОстатки.ВРезерве
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(&МоментВремени, ЗаказПокупателяСезонный.ДатаДействияПо < &Дата И естьNull(Подразделение.ВЭД,ЛОЖЬ)=Ложь) КАК ЗаказыПокупателейСезонныеОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	ЗаказПокупателяСезонный,
		|	Номенклатура";

	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));


	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() Тогда
	Док = Документы.ЗакрытиеЗаказовПокупателейСезонных.СоздатьДокумент();
	Док.Дата = ТекущаяДата();
	Док.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
	Док.Комментарий = "Закрытие просроченных сезонных заказов";
	Док.ОстаткиПоЗаказам.Загрузить(Результат.Выгрузить());
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
	
	
	конецЕсли;
КонецПроцедуры

// Сакулина
Процедура СоздатьЗаявкиНаБракПоРекламацииИзФормулы() Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратТоваров.ДокументОснование
	|ПОМЕСТИТЬ ЗаявкиНаВозвратСозданные
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваров КАК ЗаявкаНаВозвратТоваров
	|ГДЕ
	|	ЗаявкаНаВозвратТоваров.ДокументОснование ССЫЛКА Документ.ЗаявкаНаБрак
	|	И ЗаявкаНаВозвратТоваров.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаВозвратТоваров.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаБракРасшифровка.Ссылка КАК Ссылка,
	|	ЗаявкаНаБракРасшифровка.Номенклатура,
	|	ЗаявкаНаБракРасшифровка.Количество,
	|	ЗаявкаНаБракРасшифровка.КоличествоПринято,
	|	ЗаявкаНаБракРасшифровка.Ссылка.Контрагент КАК Контрагент,
	|	ЗаявкаНаБракРасшифровка.Ссылка.Подразделение КАК Подразделение,
	|	ЗаявкаНаБракРасшифровка.Реализация,
	|	ЗаявкаНаБракРасшифровка.Ссылка.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.ЗаявкаНаБрак.Расшифровка КАК ЗаявкаНаБракРасшифровка
	|ГДЕ
	|	ЗаявкаНаБракРасшифровка.Ссылка.Проведен
	|	И ЗаявкаНаБракРасшифровка.Ссылка.Контрагент <> &ИПМалышева
	|	И ЗаявкаНаБракРасшифровка.Ссылка.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.ПризнатьБрак)
	|	И НЕ ЗаявкаНаБракРасшифровка.Ссылка В
	|				(ВЫБРАТЬ
	|					ЗаявкиНаВозвратСозданные.ДокументОснование
	|				ИЗ
	|					ЗаявкиНаВозвратСозданные КАК ЗаявкиНаВозвратСозданные)
	|	И ЗаявкаНаБракРасшифровка.Ссылка.ЗаключениеВФормуле = ИСТИНА
	|ИТОГИ
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Подразделение),
	|	МАКСИМУМ(Ответственный)
	|ПО
	|	Ссылка";
	Запрос.УстановитьПараметр("ИПМалышева",Справочники.Контрагенты.НайтиПоКоду("00232"));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Выборка.Следующий() Цикл
		ОтменитьТранзакцию = Ложь;
    	НачатьТранзакцию();

		// Создание заявки на возврат
		ЗаявкаНаВозврат   = Документы.ЗаявкаНаВозвратТоваров.СоздатьДокумент();
		ЗаявкаНаВозврат.ДокументОснование = Выборка.Ссылка;
		ЗаявкаНаВозврат.Дата = ТекущаяДата();
        ЗаявкаНаВозврат.Подразделение = Выборка.Подразделение;
	    ЗаявкаНаВозврат.Контрагент = Выборка.Контрагент;
	    ЗаявкаНаВозврат.ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.Брак;
	 	ЗаявкаНаВозврат.ВидДефектаДляУценки = Выборка.Ссылка.ВидДефектаДляУценки;
		ЗаявкаНаВозврат.Ответственный =  Выборка.Ответственный;
		
		// Создание Операции по ОТХ Списание
		ДокументОТХ  = Документы.ОперацияПоОтветственномуХранению.СоздатьДокумент();
		ДокументОТХ.Организация = Справочники.Организации.НайтиПоКоду("00001");
		ДокументОТХ.ВидОперации = Перечисления.ВидыОперацийПоОтветственномуХранению.Списание;
		ДокументОТХ.Дата = ТекущаяДата();
		ДокументОТХ.ДокументОснование = Выборка.Ссылка;
		ДокументОТХ.Контрагент = Справочники.Контрагенты.НайтиПоКоду("00232");
		ДокументОТХ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("Г7121");

		// Создание Операции по ОТХ Поступление
		ДокументОТХ1  = Документы.ОперацияПоОтветственномуХранению.СоздатьДокумент();
		ДокументОТХ1.Организация = Справочники.Организации.НайтиПоКоду("00001");
		ДокументОТХ1.ВидОперации = Перечисления.ВидыОперацийПоОтветственномуХранению.Поступление;
		ДокументОТХ1.Дата = ТекущаяДата();
		ДокументОТХ1.ДокументОснование = Выборка.Ссылка;
		ДокументОТХ1.Контрагент = Выборка.Контрагент;
		//ДокументОТХ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("Г7121");

		ВыборкаДетали = Выборка.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Если  ВыборкаДетали.Номенклатура <> Справочники.Номенклатура.ПустаяСсылка() Тогда
				стр= ЗаявкаНаВозврат.Товары.Добавить();
				стр.Номенклатура = ВыборкаДетали.Номенклатура;
				Стр.Количество = ВыборкаДетали.Количество;
				Стр.Реализация = ВыборкаДетали.Реализация;
				Стр.СкладВозврата = Справочники.Склады.НайтиПоКоду("00818");
				Если стр.Реализация <> Документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда
					Отбор = Новый Структура("Номенклатура",Стр.Номенклатура);
					строки =Стр.Реализация.Товары.НайтиСтроки(Отбор);
					Если строки.Количество()>0 Тогда
						стр.СкладРеализации = Строки[0].Склад; 
						стр.ЦенаРеализации = Строки[0].Цена;
						стр.Сумма = Стр.Количество*стр.ЦенаРеализации;
					конецЕсли;
				Конецесли;
				
				НовСтр = ДокументОТХ.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,ВыборкаДетали);
				НовСтр.Склад = Справочники.Склады.НайтиПоКоду("02184");
				
				НовСтр1 = ДокументОТХ1.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр1,ВыборкаДетали);
				НовСтр1.Склад = Справочники.Склады.НайтиПоКоду("00818");


			КонецЕсли;
		КонецЦикла;
		
		ЗаявкаНаВозврат.Записать(РежимЗаписиДокумента.Проведение);
		
		ДокументОТХ.ДокументОснование = ЗаявкаНаВозврат.Ссылка;
		ДокументОТХ.Записать(РежимЗаписиДокумента.Проведение);
		
		ДокументОТХ1.ДокументОснование = ЗаявкаНаВозврат.Ссылка;
		ДокументОТХ1.Записать(РежимЗаписиДокумента.Проведение);
		
		Если ОтменитьТранзакцию = Истина Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;


	КонецЦикла;
		

КонецПроцедуры
// Сакулина

Процедура РассылкаПисемОРекламацииПоставщику() Экспорт
	РассылкаЗаявокОРекламации();
КонецПроцедуры

Процедура РассылкаЗаявокОРекламации() Экспорт
	УЗ =  Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("levchenko@yst.ru");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратПоставщику.Ссылка,
	|	ЗаявкаНаВозвратПоставщику.Дата,
	|	ЗаявкаНаВозвратПоставщику.Номер
	|ИЗ
	|	Документ.ЗаявкаНаВозвратПоставщику КАК ЗаявкаНаВозвратПоставщику
	|ГДЕ
	|	ЗаявкаНаВозвратПоставщику.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБракПоставщику.Подготовлена)
	|	И НЕ ЗаявкаНаВозвратПоставщику.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТекстСообщения ="   Добрый день,
			|
			|Высылаем заявление о рассмотрении товара ненадлежащего качества.
			|
			|
			|";
			
	ТекстСообщения =ТекстСообщения + Символы.ПС + ?(УЗ.ДобавлятьПодписьКИсходящимПисьмам,УЗ.ТекстПодписи, "");		
	Тема = "Заявление о рассмотрении товара ненадлежащего качества";

	Пока Выборка.Следующий() Цикл
		Документ =  Выборка.Ссылка.ПолучитьОбъект();
		ТабДок = Документ.ПечатьАШК();
		ИмяКаталога = Выборка.Ссылка.ПакетФотографий;
		ИмяФайлаОтправки = ИмяКаталога + "\Заявка на рекламацию поставщику " +Выборка.Дата+ " от " +Лев(Выборка.Дата, 10)+ ".pdf";

		ТабДок.Записать(ИмяФайлаОтправки, ТипФайлаТабличногоДокумента.PDF);
		
		СписокФайловВложений = Новый СписокЗначений;
		ФайлыМассив = НайтиФайлы(Выборка.Ссылка.ПакетФотографий, "*"); 
		Для Каждого ЭлементМассива из ФайлыМассив Цикл
			Если  ЭлементМассива.Имя <> "Thumbs.db"  Тогда
				СписокФайловВложений.Добавить(ЭлементМассива.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
		Если УЗ <> Неопределено Тогда
			яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо("user0795@ashk.ru",СписокФайловВложений, УЗ, ТекстСообщения, Тема);
			Документ.Состояние = Перечисления.СостоянияЗаявкиНаБракПоставщику.ВРассмотренииУПоставщика;
			Документ.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// + Сакулина
Процедура СозданиеЗадачиПользователямПоЗаявкамНаВозвратПоставщику() Экспорт
	// Когда по заявке сделаны все возвраты нужно оповестить Левченко и операторов склада
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратПоставщикуТовары.Ссылка КАК ЗаявкаНаВозврат
	|ПОМЕСТИТЬ ВТ_ЗаявиНаВозвр
	|ИЗ
	|	Документ.ЗаявкаНаВозвратПоставщику.Товары КАК ЗаявкаНаВозвратПоставщикуТовары
	|ГДЕ
	|	НЕ ЗаявкаНаВозвратПоставщикуТовары.Ссылка.ПометкаУдаления
	|	И ЗаявкаНаВозвратПоставщикуТовары.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБракПоставщику.ПолученОтветОтПоставщика)
	|	И ЗаявкаНаВозвратПоставщикуТовары.ЗаявкаНаБрак.СостояниеЗаявки В(&СписокСостоянийЗаявокНаБрак)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаВозвратПоставщикуТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаВозвратПоставщикуТовары.Номенклатура,
	|	СУММА(ЗаявкаНаВозвратПоставщикуТовары.Количество) КАК Количество,
	|	ЗаявкаНаВозвратПоставщикуТовары.ЗаявкаНаБрак,
	|	ЗаявкаНаВозвратПоставщикуТовары.Ссылка КАК ЗаявкаНаВозврат
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ЗаявкаНаВозвратПоставщику.Товары КАК ЗаявкаНаВозвратПоставщикуТовары
	|ГДЕ
	|	ЗаявкаНаВозвратПоставщикуТовары.ЗаявкаНаБрак.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.ПризнатьБрак)
	|	И ЗаявкаНаВозвратПоставщикуТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ЗаявиНаВозвр.ЗаявкаНаВозврат
	|			ИЗ
	|				ВТ_ЗаявиНаВозвр КАК ВТ_ЗаявиНаВозвр)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаВозвратПоставщикуТовары.Номенклатура,
	|	ЗаявкаНаВозвратПоставщикуТовары.ЗаявкаНаБрак,
	|	ЗаявкаНаВозвратПоставщикуТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаБракРасшифровка.Номенклатура,
	|	ЗаявкаНаБракРасшифровка.Ссылка КАК ЗаявкаНаБрак,
	|	СУММА(ЗаявкаНаБракРасшифровка.Количество) КАК Количество,
	|	ЗаявкаНаБракРасшифровка.Реализация,
	|	ВТ_Товары.ЗаявкаНаВозврат
	|ПОМЕСТИТЬ ВТ_ТоварСРеал
	|ИЗ
	|	Документ.ЗаявкаНаБрак.Расшифровка КАК ЗаявкаНаБракРасшифровка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	|		ПО ЗаявкаНаБракРасшифровка.Номенклатура = ВТ_Товары.Номенклатура
	|			И ЗаявкаНаБракРасшифровка.Ссылка = ВТ_Товары.ЗаявкаНаБрак
	|ГДЕ
	|	(ЗаявкаНаБракРасшифровка.Номенклатура, ЗаявкаНаБракРасшифровка.Количество, ЗаявкаНаБракРасшифровка.Ссылка) В
	|			(ВЫБРАТЬ
	|				ВТ_Товары.Номенклатура,
	|				ВТ_Товары.Количество,
	|				ВТ_Товары.ЗаявкаНаБрак
	|			ИЗ
	|				ВТ_Товары КАК ВТ_Товары)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаБракРасшифровка.Номенклатура,
	|	ЗаявкаНаБракРасшифровка.Ссылка,
	|	ЗаявкаНаБракРасшифровка.Реализация,
	|	ВТ_Товары.ЗаявкаНаВозврат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродажиОбороты.ДокументПродажи,
	|	ПродажиОбороты.Номенклатура,
	|	СУММА(-ПродажиОбороты.КоличествоОборот) КАК Количество
	|ПОМЕСТИТЬ Вт_Продажи
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			(Номенклатура, ДокументПродажи) В
	|				(ВЫБРАТЬ
	|					ВТ_ТоварСРеал.Номенклатура,
	|					ВТ_ТоварСРеал.Реализация
	|				ИЗ
	|					ВТ_ТоварСРеал КАК ВТ_ТоварСРеал)) КАК ПродажиОбороты
	|ГДЕ
	|	ПродажиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.ДокументПродажи,
	|	ПродажиОбороты.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Вт_Продажи.Номенклатура) КАК Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Вт_Продажи.ДокументПродажи) КАК ДокументПродажи,
	|	СУММА(Вт_Продажи.Количество) КАК КоличествоВЗаявке,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_ТоварСРеал.Количество, 0)) КАК КоличествоВозврата,
	|	ВТ_ТоварСРеал.ЗаявкаНаВозврат КАК ЗаявкаНаВозврат,
	|	МАКСИМУМ(ВТ_ТоварСРеал.Количество - ЕСТЬNULL(ВТ_ТоварСРеал.Количество, 0)) КАК Разница
	|ИЗ
	|	ВТ_ТоварСРеал КАК ВТ_ТоварСРеал
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_Продажи КАК Вт_Продажи
	|		ПО ВТ_ТоварСРеал.Номенклатура = Вт_Продажи.Номенклатура
	|			И ВТ_ТоварСРеал.Реализация = Вт_Продажи.ДокументПродажи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТоварСРеал.ЗаявкаНаВозврат";
	СписокСостоянийЗаявокНаБрак = Новый СписокЗначений;
	СписокСостоянийЗаявокНаБрак.Добавить(Перечисления.СостоянияЗаявкиНаБрак.ПризнатьБрак);
	СписокСостоянийЗаявокНаБрак.Добавить(Перечисления.СостоянияЗаявкиНаБрак.Отклонить);

	Запрос.УстановитьПараметр("СписокСостоянийЗаявокНаБрак", СписокСостоянийЗаявокНаБрак);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаявкаНаВозврат = Выборка.ЗаявкаНаВозврат;
		Если Выборка.Разница = 0 Тогда
			// Делаем задачу Левченко
			НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
			НоваяЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Левченко Ф.С.");
			НоваяЗадача.Дата = ТекущаяДата();
			НоваяЗадача.Оповещение = Истина;
			НоваяЗадача.СрокОповещения = ТекущаяДата();
			НоваяЗадача.Наименование = "Пора делать акт утилизации";
			НоваяЗадача.Описание = "Можно делать сделать акт утилизации по заявке на брак поставщику " + Выборка.ЗаявкаНаВозврат;
			НоваяЗадача.Объект = Выборка.ЗаявкаНаВозврат;
			НоваяЗадача.Инициатор = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
			НоваяЗадача.Записать();

			// Делаем задачу операторам склада
			НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
			НоваяЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Невежина И.Н.");
			НоваяЗадача.Дата = ТекущаяДата();                                                         
			НоваяЗадача.Оповещение = Истина;
			НоваяЗадача.СрокОповещения = ТекущаяДата();
			НоваяЗадача.Наименование = "Нужно сделать возврат по заявке на брак поставщику";
			НоваяЗадача.Описание = "Нужно сделать возвраты товаров поставщику по Заявке на рекламацию " + Выборка.ЗаявкаНаВозврат;
			НоваяЗадача.Объект = Выборка.ЗаявкаНаВозврат;
			НоваяЗадача.Инициатор = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
			НоваяЗадача.Записать();

			// Делаем задачу операторам склада
			НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
			НоваяЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Ловыгина Е.И.");
			НоваяЗадача.Дата = ТекущаяДата();                                                      
			НоваяЗадача.Оповещение = Истина;
			НоваяЗадача.СрокОповещения = ТекущаяДата();
			НоваяЗадача.Наименование = "Нужно сделать возврат по заявке на брак поставщику";
			НоваяЗадача.Описание = "Нужно сделать возвраты товаров поставщику по Заявке на рекламацию  " + Выборка.ЗаявкаНаВозврат;
			НоваяЗадача.Объект = Выборка.ЗаявкаНаВозврат;
			НоваяЗадача.Инициатор = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
			НоваяЗадача.Записать();

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбъединениеЗаказовАвтокомплектация() Экспорт
	
		Запрос = Новый Запрос;
	Запрос.Текст = 
	
	
	 	"ВЫБРАТЬ
	 	|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	 	|	ЗаказыПокупателейОстатки.ДоговорКонтрагента,
	 	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДокументОснование КАК ДокументОснование
	 	|ИЗ
	 	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	 	|			,
	 	//|			ДоговорКонтрагента.Владелец <> ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ //123заменить
	 	|				ДоговорКонтрагента.Владелец <> ДоговорКонтрагента.КонтрагентДляРезерваИМ
		|) КАК ЗаказыПокупателейОстатки
	 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	 	|		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = КатегорииОбъектов.Объект
	 	|ГДЕ
	 	|	НЕ ЗаказыПокупателейОстатки.ЗаказПокупателя В
	 	|				(ВЫБРАТЬ
	 	|					ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка
	 	|				ИЗ
	 	|					Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
	 	|				ГДЕ
	 	|					ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.Дата >= &ДатаНач
	 	|		
	 	|				ОБЪЕДИНИТЬ ВСЕ
	 	|		
	 	|				ВЫБРАТЬ
	 	|					ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка
	 	|				ИЗ
	 	|					Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ЗаданиеНаПеремещениеЗаказыПокупателей
	 	|				ГДЕ
	 	|					ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.Дата >= &ДатаНач)
	 	|	И ЗаказыПокупателейОстатки.ЗаказПокупателя.ТипЗаказа = 1
	 	|	И ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата > &ДатаНач
	 	|	И КатегорииОбъектов.Категория ЕСТЬ NULL ";

	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(НачалоДня(ТекущаяДата())-7*24*60*60));
	Результат = Запрос.Выполнить().Выгрузить();
	
	
	
	Заказы = Результат.Скопировать();
	Заказы.свернуть("ЗаказПокупателя");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.ЕдиницаИзмерения,
	|	ЗаказПокупателяТовары.ЕдиницаИзмеренияМест,
	|	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество,
	|	СУММА(ЗаказПокупателяТовары.КоличествоМест) КАК КоличествоМест,
	|	ЗаказПокупателяТовары.Коэффициент,
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.ПлановаяСебестоимость,
	|	ЗаказПокупателяТовары.ПроцентСкидкиНаценки,
	|	ЗаказПокупателяТовары.Размещение,
	|	ЗаказПокупателяТовары.СтавкаНДС,
	|	СУММА(ЗаказПокупателяТовары.Сумма) КАК Сумма,
	|	СУММА(ЗаказПокупателяТовары.СуммаНДС) КАК СуммаНДС,
	|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(ЗаказПокупателяТовары.Цена) КАК Цена,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок,
	|	ЗаказПокупателяТовары.УсловиеАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки,
	|	СУММА(ЗаказПокупателяТовары.Вес) КАК Вес,
	|	ЗаказПокупателяТовары.Статус,
	|	ЗаказПокупателяТовары.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаказПокупателяТовары.Ссылка.ДокументОснование
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка В(&Заказы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.ЕдиницаИзмерения,
	|	ЗаказПокупателяТовары.ЕдиницаИзмеренияМест,
	|	ЗаказПокупателяТовары.СтавкаНДС,
	|	ЗаказПокупателяТовары.Размещение,
	|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
	|	ЗаказПокупателяТовары.УсловиеАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.Статус,
	|	ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.Коэффициент,
	|	ЗаказПокупателяТовары.ПлановаяСебестоимость,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок,
	|	ЗаказПокупателяТовары.ПроцентСкидкиНаценки,
	|	ЗаказПокупателяТовары.Ссылка.ДоговорКонтрагента,
	|	ЗаказПокупателяТовары.Ссылка.ДокументОснование";
	
	Запрос.УстановитьПараметр("Заказы", Заказы);
	
	РезультатЗаказы = Запрос.Выполнить().Выгрузить();
	
	
		Договоры = Результат.скопировать();
		Договоры.свернуть("ДокументОснование");
		Для каждого дог из Договоры Цикл
			Если Дог.ДокументОснование.договорКонтрагента.владелец = Справочники.Контрагенты.НайтиПоКоду("36092") тогда
				продолжить;
			конецЕсли;	
			Заказы = Результат.скопировать(Новый структура("ДокументОснование",Дог.ДокументОснование),);	
			Заказы.свернуть("ЗаказПокупателя");
			
			Если Заказы.Количество()>1 Тогда
			НачатьТранзакцию();
                НовыйЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();

				//найдем самую раннюю дату  в заказах
			    ДатаДок = Дата('20501231000000');
				для каждого стр из Заказы Цикл
					Если стр.заказПокупателя.Дата<ДатаДок Тогда
						ДатаДок = стр.заказПокупателя.Дата;
					конецЕсли;	
					Если стр.ЗаказПокупателя.заказы.Количество()=0 тогда
						Ст = НовыйЗаказ.Заказы.Добавить();
						ст.ЗаказПокупателя = стр.ЗаказПокупателя;
					иначе
						Для каждого строка из стр.ЗаказПокупателя.заказы Цикл
					    Ст = НовыйЗаказ.Заказы.Добавить();
						ст.ЗаказПокупателя = строка.заказПокупателя;
						конецЦикла;	
					конецЕсли;	
				конецЦикла;

				
				ЗаполнитьЗначенияСвойств(НовыйЗаказ,Заказы[0].заказпокупателя);
				//НовыйЗаказ.УстановитьНовыйНомер();
				новыйЗаказ.Номер = "";
				НовыйЗаказ.ДатаОтгрузки = ТекущаяДата();
				НовыйЗаказ.ТипЗаказа = 1;
				//НовыйЗаказ.Заказы.Загрузить(Заказы);
				новыйЗаказ.Товары.Очистить();
				ТабНоменклатуры= РезультатЗаказы.скопировать(Новый структура("ДокументОснование",Дог.ДокументОснование),);		
				НовыйЗаказ.Товары.Загрузить(ТабНоменклатуры);
				
				Для каждого строка из НовыйЗаказ.Товары Цикл
					РассчитатьСуммуТабЧасти(строка, НовыйЗаказ);
	              	РассчитатьСуммуНДСТабЧасти(строка, НовыйЗаказ);
				конецЦикла;	
				НовыйЗаказ.Дата = ДатаДок;

				//+++ 10.04.2018  комментарий из 1-го заказа!
				//НовыйЗаказ.Комментарий = "# объединенный заказ автокомплектация: ";
				Для каждого зак из Заказы Цикл
					//+++ 10.04.2018  //НовыйЗаказ.Комментарий = НовыйЗаказ.Комментарий+ Зак.ЗаказПокупателя.Номер+"; ";
					ЗакОбъект = Зак.Заказпокупателя.ПолучитьОбъект();
					ЗакОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					ЗакОбъект.ПометкаУдаления = Истина;
					ЗакОбъект.записать();
				//	сообщить("Удален заказ"+ЗакОбъект.Номер+ " "+ ЗакОбъект.Контрагент);
			    конецЦикла;
			    попытка
				НовыйЗаказ.Записать(РежимЗаписиДокумента.Проведение);
			//	сообщить("Создан заказ"+НовыйЗаказ.Номер+ " "+ НовыйЗаказ.Контрагент);

				исключение
			//	Сообщить("Не удалось объединить "+ НовыйЗаказ.Контрагент);	
				конецПопытки;	
				ЗафиксироватьТранзакцию();
			конецЕсли;	
	КонецЦикла;


КонецПроцедуры

Процедура ЗагрузитьКонтактыМенеджеров()  Экспорт
	
	WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
	WinHttp.Open("GET","https://cp.yarshintorg.ru/local/services/1c/getUserData.php",0);
	WinHttp.Send();
	
	Ответ = WinHttp.ResponseText();
	ФайлРезультата = "C:\getUserData.xml";
	Текст = новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Ответ);
	Текст.Записать(ФайлРезультата,"UTF-8 ");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл("C:\getUserData.xml");
	
	ТаблицаСотрудников = новый таблицаЗначений;
	ТаблицаСотрудников.колонки.Добавить("Фамилия");
	ТаблицаСотрудников.колонки.Добавить("Имя");
	ТаблицаСотрудников.колонки.Добавить("Отчество");
	ТаблицаСотрудников.колонки.Добавить("Почта");
	ТаблицаСотрудников.колонки.Добавить("ЛичныйТелефон");
	ТаблицаСотрудников.колонки.Добавить("РабочийТелефон");
	ТаблицаСотрудников.колонки.Добавить("Должность");
	ТаблицаСотрудников.колонки.Добавить("Ссылка");
	ТаблицаСотрудников.колонки.Добавить("ВнутреннийТелефон");
	ТаблицаСотрудников.колонки.Добавить("Скайп");
	ТаблицаСотрудников.колонки.Добавить("Фото");
	ТаблицаСотрудников.колонки.Добавить("icq");
	Запись = Новый Структура;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Имя = "employee" Тогда
				Запись.Очистить();
			конецЕсли;
			Имя = ЧтениеXML.Имя;
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Запись.Вставить(Имя, ЧтениеXML.Значение);      //информацию фнутри блока XML помещаем в структуру
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеXML.Имя = "employee" Тогда
				СтрокаТЗ = ТаблицаСотрудников.Добавить();
				попытка
					СтрокаТЗ.Фамилия = Запись.last_name;
				исключение
				конецпопытки;
				попытка
					СтрокаТЗ.Имя = Запись.name;
				исключение
				конецпопытки;
				попытка
					СтрокаТЗ.Отчество = Запись.second_name;
				исключение
				конецпопытки;
				попытка
					СтрокаТЗ.Почта = Запись.email;
				исключение
				конецпопытки;
				попытка
					СтрокаТЗ.ЛичныйТелефон = Запись.personal_phone;
				исключение
				конецпопытки;
				попытка
					СтрокаТЗ.РабочийТелефон = Запись.work_phone;
				исключение
				конецпопытки;
				попытка
					СтрокаТЗ.Должность = Запись.work_position;
				исключение
				конецпопытки;
				попытка
					СтрокаТЗ.Ссылка = Запись.xml_id;
				исключение
				конецпопытки;
				попытка
					СтрокаТЗ.ВнутреннийТелефон = Запись.uf_phone_inner;
				исключение
				конецпопытки;
				попытка
					СтрокаТЗ.Скайп = Запись.uf_skype;
				исключение
				конецпопытки;
				попытка
					СтрокаТЗ.Фото = Запись.personal_photo;
				исключение
				конецпопытки;
				попытка
					СтрокаТЗ.icq = Запись.personal_icq;
				исключение
				конецпопытки;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого стр из ТаблицаСотрудников цикл
		
		Если ЗначениеЗаполнено(Стр.ссылка) Тогда	
			УИДСтрока = Новый УникальныйИдентификатор(Стр.ссылка);
			ФизЛицо = Справочники.ФизическиеЛица.Получитьссылку(УИДСтрока);
		Иначе
			//нет ссылки (т.е. гуида из ЗУП), когда пользователя вводили вручную, и он числится не в ЯШТ (Балагаева)
			ФизЛицо = Справочники.ФизическиеЛица.Получитьссылку();
		КонецЕсли;
			
		Если ФизЛицо.ПолучитьОбъект()<> неопределено Тогда
			//все ок, нашли по уиду
		Иначе
			//***попробуем найти по Фамилии И.О.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Фамилия", Стр.Фамилия);
			Запрос.УстановитьПараметр("Имя", Стр.Имя);
			Запрос.УстановитьПараметр("Отчество", Стр.Отчество);
			Запрос.Текст = "ВЫБРАТЬ
			               |	ФИОФизЛицСрезПоследних.ФизЛицо
			               |ИЗ
			               |	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
			               |ГДЕ
			               |	ФИОФизЛицСрезПоследних.Фамилия = &Фамилия
			               |	И ФИОФизЛицСрезПоследних.Имя = &Имя
			               |	И ФИОФизЛицСрезПоследних.Отчество = &Отчество";
			Результат = Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				ФизЛицо = Результат.ФизЛицо;
			КонецЕсли;
		КонецЕсли;
		
		Если ФизЛицо.ПолучитьОбъект()<> неопределено Тогда
			//для справочника физ.лица почту, скайп, сотовый, внутренний 
			
			Запись = Регистрысведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38852");
			Запись.тип = перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			Запись.Объект = ФизЛицо;
			Запись.Представление = стр.Почта;
			Запись.Записать(Истина);
			
			Запись = Регистрысведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38874");
			Запись.тип = перечисления.ТипыКонтактнойИнформации.Другое;
			Запись.Объект = ФизЛицо;
			Запись.Представление = стр.Скайп;
			Запись.Записать(Истина);
			
			
			Запись = Регистрысведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00022");
			Запись.тип = перечисления.ТипыКонтактнойИнформации.Телефон;
			Запись.Объект = ФизЛицо;
			Запись.Представление = стр.РабочийТелефон;
			Запись.Записать(Истина);
			
			
			
			Запись = Регистрысведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38840");
			Запись.тип = перечисления.ТипыКонтактнойИнформации.Телефон;
			Запись.Объект = ФизЛицо;
			Запись.Представление = стр.ВнутреннийТелефон;
			Запись.Записать(Истина);
			
			
			Запись = Регистрысведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38876");
			Запись.тип = перечисления.ТипыКонтактнойИнформации.Другое;
			Запись.Объект = ФизЛицо;
			Запись.Представление = стр.Фото;
			Запись.Записать(Истина);
			
			Запись = Регистрысведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38881");
			Запись.тип = перечисления.ТипыКонтактнойИнформации.Другое;
			Запись.Объект = ФизЛицо;
			Запись.Представление = стр.icq;
			Запись.Записать(Истина);
			
			
			
			//для справочника пользователь запишем сотовый телефон, почту, скайп
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ФизЛицо = &ФизЛицо";
			
			Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
			
			Результат = Запрос.Выполнить();
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Запись = Регистрысведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
				Запись.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00012");
				Запись.тип = перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				Запись.Объект = Выборка.ссылка;
				Запись.Представление = стр.Почта;
				Запись.Записать(Истина);
				
				Запись = Регистрысведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
				Запись.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38875");
				Запись.тип = перечисления.ТипыКонтактнойИнформации.Другое;
				Запись.Объект = Выборка.ссылка;
				Запись.Представление = стр.Скайп;
				Запись.Записать(Истина);
			КонецЦикла;
		КонецЕсли;
	конецЦикла;   	
	
конецпроцедуры

Процедура УбратьВременноеРазрешениеГрузитьприПДЗ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВременныеКонрагентыСотгрузкойПДЗ.Контрагент
		|ИЗ
		|	РегистрСведений.ВременныеКонрагентыСотгрузкойПДЗ КАК ВременныеКонрагентыСотгрузкойПДЗ
		|ГДЕ
		|	ВременныеКонрагентыСотгрузкойПДЗ.Дата < &ТекущаяДата";

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
	Объект = Выборка.контрагент.ПолучитьОбъект();
	Объект.РазрешитьГрузитьПриПДЗБолееСемиДней = Ложь;
	Объект.записать();
	КонецЦикла;
конецпроцедуры	
	
Процедура СформироватьСообщенияСМСОПриходеЗаказа() экспорт
	попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Оповестить клиентов о приходе заказа");
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;
		Обработка.ВыбратьЗаказыДляСМСРассылки(НачалоДня(ТекущаяДата())-2*86400, ТекущаяДата(), Справочники.Подразделения.НайтиПоКоду("00138")); //Екат
		Обработка.ВыбратьЗаказыДляСМСРассылки(НачалоДня(ТекущаяДата())-2*86400, ТекущаяДата(), Справочники.Подразделения.НайтиПоКоду("00112")); //Спб
		Обработка.ВыбратьЗаказыДляСМСРассылки(НачалоДня(ТекущаяДата())-2*86400, ТекущаяДата(), Справочники.Подразделения.НайтиПоКоду("00106")); //РнД
	исключение
		ЗаписьЖурналаРегистрации("Оповестить клиентов о приходе заказа",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
КонецПроцедуры
	
	
//+++ 10.08.2017 по задаче № 29668 - Уведомление для менеджеров после корректировки остатков (от Кураповой /Серкова )
//Договорились сделать регламентное задание,  которое раз в 1-2 часа будет проверять, 
//нет ли минусовых резервов. В случае обнаружения, писать задачи менеджерам, чьи заказы стоят в резерве
//
Процедура СоздатьЗадачиМенеджерамПоОтрицательнымСвободнымОстаткам() Экспорт
	
//	1) ищем все отрицательные св.остатки (по Ярославлю и филиалам)
//	2) по этим товарам - находим все проделенные заказы покупателей, 
//	3) группируем заказы по менеджерам 
//
// и по результату запроса - создаём задачи уведомления по спискам заказов...
//если заказ 1 - то пишем заказ в Основание задачи

//1)---------------------------------------------------------------------------------------
	запрос = новый Запрос;
	
	СписокВидовТовара = ПолучитьСписокВыгружаемыхТоваров();
	запрос.УстановитьПараметр("СписокВидовТовара", СписокВидовТовара);
	
	СписКлиентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);
	Запрос.УстановитьПараметр("СписКлиентовОТХ",СписКлиентовОТХ);

	Запрос.УстановитьПараметр("Ярославль",справочники.Подразделения.НайтиПоКоду("00005") );
	
	запрос.Текст = "ВЫБРАТЬ
	               |	Табл1.Подразделение КАК Подразделение,
	               |	Табл1.Номенклатура КАК Номенклатура,
	               |	ВЫРАЗИТЬ(Табл1.остаток - Табл1.Заказано КАК ЧИСЛО(15, 2)) КАК СвободныйОстаток
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		остаткиТр.Подразделение КАК Подразделение,
	               |		остаткиТр.Номенклатура КАК Номенклатура,
	               |		МАКСИМУМ(остаткиТр.КоличествоОстаток) КАК остаток,
	               |		СУММА(ЕСТЬNULL(ЗаказыПокупателейОстаткиТр.КоличествоОстаток, 0)) КАК Заказано
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ТоварыНаСкладахТр.Подразделение КАК Подразделение,
	               |			ТоварыНаСкладахТр.Номенклатура КАК Номенклатура,
	               |			СУММА(ЕСТЬNULL(ТоварыНаСкладахТр.КоличествоОстаток, 0)) КАК КоличествоОстаток
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				ВЫБОР
	               |					КОГДА ТоварыНаСкладахОстатки.Склад.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	               |						ТОГДА &Ярославль
	               |					ИНАЧЕ ТоварыНаСкладахОстатки.Склад.Подразделение
	               |				КОНЕЦ КАК Подразделение,
	               |				ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |				ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |			ИЗ
	               |				РегистрНакопления.ТоварыНаСкладах.Остатки( ,
	               |						Склад.ЗапретитьИспользование = ЛОЖЬ
	               |							И (Склад.Транзитный = ЛОЖЬ  ИЛИ (Склад.Транзитный
	               |									И Склад.Подразделение.ОбособленноеПодразделение))
	               |							И Номенклатура.ВидТовара В (&СписокВидовТовара) ) КАК ТоварыНаСкладахОстатки
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				ВЫБОР
	               |					КОГДА ТоварыНаОтветственномХраненииОстатки.Склад.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	               |						ТОГДА &Ярославль
	               |					ИНАЧЕ ТоварыНаОтветственномХраненииОстатки.Склад.Подразделение
	               |				КОНЕЦ,
	               |				ТоварыНаОтветственномХраненииОстатки.Номенклатура,
	               |				ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток
	               |			ИЗ
	               |				РегистрНакопления.ТоварыНаОтветственномХранении.Остатки( ,
	               |						Склад.ЗапретитьИспользование = ЛОЖЬ И Контрагент В (&СписКлиентовОТХ)
	               |							И Номенклатура.ВидТовара В (&СписокВидовТовара)  ) КАК ТоварыНаОтветственномХраненииОстатки
				   
				//-------------- Эффективное увеличение остатков по Сторонним поставщикам -----------------------------
				   |		ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |	 ВЫБРАТЬ 
				   //пока только Ярославль... но на будущеее правильнее из Заказа брать подразделение
				    |	ТоварыВОжиданииОтПоставщикаОбороты.ЗаказПокупателя.Подразделение как Подразделение,
                 	|	ТоварыВОжиданииОтПоставщикаОбороты.Номенклатура,
                 	|	ТоварыВОжиданииОтПоставщикаОбороты.КоличествоОборот КАК КоличествоПодтверждено
                 	|	ИЗ
                 	|	РегистрНакопления.ТоварыВОжиданииОтПоставщика.Обороты(,,, Номенклатура.ВидТовара В (&СписокВидовТовара)
					|		и ЗаказПокупателя.Проверен и ЗаказПокупателя.Проведен ) КАК ТоварыВОжиданииОтПоставщикаОбороты
                 	|
	                        							 
							 
				   |) КАК ТоварыНаСкладахТр
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ТоварыНаСкладахТр.Подразделение,
	               |			ТоварыНаСкладахТр.Номенклатура) КАК остаткиТр
				   
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки( 	,
	               |					Номенклатура.ВидТовара В (&СписокВидовТовара)
	               |						И ЗаказПокупателя.Проверен
	               |						И ЗаказПокупателя.Проведен ) КАК ЗаказыПокупателейОстаткиТр
	               |			ПО остаткиТр.Номенклатура = ЗаказыПокупателейОстаткиТр.Номенклатура
	               |				И остаткиТр.Подразделение = ЗаказыПокупателейОстаткиТр.ЗаказПокупателя.Подразделение
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		остаткиТр.Подразделение,
	               |		остаткиТр.Номенклатура) КАК Табл1
	               |ГДЕ
	               |	Табл1.остаток - Табл1.Заказано < 0
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
	               |	СУММА(СвободныйОстаток)
	               |ПО
	               |	Подразделение";
	Результат1 = Запрос.Выполнить();
	выборкаПодразделение = Результат1.Выбрать();
	пока выборкаПодразделение.Следующий() цикл
		//Подразделение, Номенклатура, СвободныйОстаток
		выборкаТов = выборкаПодразделение.Выбрать();
		СписТов = новый СписокЗначений;
		пока выборкаТов.Следующий() цикл
			СписТов.Добавить( выборкаТов.Номенклатура );
		КонецЦикла;	
		
		//2.---------------не резервные заказы--------------------------
		запрос2 = новый Запрос;
		запрос2.УстановитьПараметр("СписТов", СписТов);
		запрос2.УстановитьПараметр("Подразделение",выборкаПодразделение.Подразделение);
		запрос2.УстановитьПараметр("РЕЗЕРВ", справочники.Контрагенты.НайтиПоКоду("93625") );
		запрос2.Текст = "ВЫБРАТЬ
		                |	ЗаказыПокупателейОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК Менеджер,
		                |	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя
		                |ИЗ
		                |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента.Владелец <> ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ
						|		и ДоговорКонтрагента.Владелец <>&РЕЗЕРВ) КАК ЗаказыПокупателейОстатки
		                |ГДЕ
		                |	ЗаказыПокупателейОстатки.Номенклатура В(&СписТов)
		                |	И ЗаказыПокупателейОстатки.ЗаказПокупателя.Подразделение = &Подразделение
		                |ИТОГИ
		                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя)
		                |ПО
		                |	Менеджер";
		
		выборкаМен = запрос2.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);  //2-ой запрос
		Пока выборкаМен.Следующий() Цикл
			
			Мен = выборкаМен.Менеджер;
			списЗак = новый СписокЗначений;
			выборкаЗак = выборкаМен.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			пока выборкаЗак.Следующий() цикл
				списЗак.Добавить( выборкаЗак.ЗаказПокупателя );
			КонецЦикла;	
			
			//3-------------------------------------------------------
			СоздатьЗадачуСогласованиеОтсрочки(Мен, списЗак);
			
		КонецЦикла;	
		
	КонецЦикла;	 //1. подразделения!
	
КонецПроцедуры	


Процедура СоздатьЗадачуСогласованиеОтсрочки(Менеджер, СписокЗаказов, Заголовок="Уведомление о появлении отрицательного остатка") 
	
	Робот = справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
	
	Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	Задача.Дата = ТекущаяДата();
	Задача.Инициатор   = Робот;
	Задача.Постановщик = Робот;
	Задача.Наименование = Заголовок;
	Задача.Исполнитель  = Менеджер;
	
	Задача.Описание = "ВНИМАНИЕ! 
	|Следующие Заказы покупателей не смогут отгрузиться 
	|из-за появления отрицательного св.остатка по товарам:
	|";
	для каждого стр1 из СписокЗаказов цикл
		Задача.Описание = Задача.Описание + строка(стр1.Значение)+"
		|";
	КонецЦикла;	
	
	Если СписокЗаказов.Количество()=1 тогда
	Задача.Объект = СписокЗаказов[0].Значение;
	КонецЕсли;
		
	Задача.НаСогласование = ЛОЖЬ;
	Задача.СрокОповещения = Задача.Дата;
	Задача.Оповещение = Истина;
	Задача.Записать();  	
	
КонецПроцедуры

Процедура ПроверитьОтправкуКрышек() экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка
		|ПОМЕСТИТЬ ДокументыРеализации
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата МЕЖДУ &Нач И &Кон
		|	И РеализацияТоваровУслуг.Сделка.ТребуютсяКрышки
		|	И РеализацияТоваровУслуг.Подразделение = &Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(КатегорииОбъектов.Объект КАК Документ.ЗаданиеНаОтгрузку) КАК Документ,
		|	КатегорииОбъектов.Категория
		|ПОМЕСТИТЬ ДокиСКрышками
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|ГДЕ
		|	КатегорииОбъектов.Категория = &Категория
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокиСКрышками.Категория,
		|	ДокументыРеализации.Ссылка.Сделка КАК Заказ,
		|	ДокументыРеализации.Ссылка.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственноеЛицо,
		|	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка КАК Задание
		|ИЗ
		|	Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыРеализации КАК ДокументыРеализации
		|		ПО ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация = ДокументыРеализации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокиСКрышками КАК ДокиСКрышками
		|		ПО ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка = ДокиСКрышками.Документ
		|ГДЕ
		|	ДокиСКрышками.Категория ЕСТЬ NULL ";

		
		Запрос.УстановитьПараметр("Кон",ТекущаяДата()-60*60);
		Запрос.УстановитьПараметр("Нач",ТекущаяДата()-76*60);

		Запрос.УстановитьПараметр("Категория",Справочники.КатегорииОбъектов.НайтиПоКоду("00050"));
		Запрос.УстановитьПараметр("Подразделение",Справочники.Подразделения.НайтиПоКоду("00005"));

		Результат = Запрос.Выполнить();

	Если не результат.Пустой() Тогда	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
			задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
			Задача.Исполнитель = Выборка.ОтветственноеЛицо;
			задача.НаСогласование = Ложь;
			задача.Наименование = "По заказу "+Выборка.заказ.Номер+" крышки не переданы водителю"; 
			задача.Описание = "По заказу "+Выборка.заказ.Номер+" крышки не переданы водителю. Задание на отгрузку "+Выборка.Задание.Номер+" от "+Выборка.Задание.Дата;
			задача.Дата 		    = ТекущаяДата();
			задача.СрокИсполнения = КонецДня( ТекущаяДата() );
			задача.Оповещение     = истина;
			задача.СрокОповещения = ТекущаяДата();
			попытка
				задача.Записать();
            исключение
			КонецПопытки;
			
			задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
			Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Фролов");
			задача.НаСогласование = Ложь;
			задача.Наименование = "По заказу "+Выборка.заказ.Номер+" крышки не переданы водителю"; 
			задача.Описание = "По заказу "+Выборка.заказ.Номер+" крышки не переданы водителю. Задание на отгрузку "+Выборка.Задание.Номер+" от "+Выборка.Задание.Дата;
			задача.Дата 		    = ТекущаяДата();
			задача.СрокИсполнения = КонецДня( ТекущаяДата() );
			задача.Оповещение     = истина;
			задача.СрокОповещения = ТекущаяДата();
			попытка
				задача.Записать();
            исключение
            КонецПопытки;

	КонецЦикла;
    конецЕсли;
	
	
конецпроцедуры

Процедура ЗадачиМенеджерамНеОшиповкаВЗаказеПокупателя() Экспорт
	СвойствоЗаказа = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90261");
		
	ЗапросЗаказов = Новый Запрос;
	ЗапросЗаказов.УстановитьПараметр("НеошипованныеЛегковые", Справочники.Номенклатура.НайтиПоКоду("9098690"));
	ЗапросЗаказов.УстановитьПараметр("Дата1", ТекущаяДата()-3600*24*60);
	ЗапросЗаказов.Текст =
	"ВЫБРАТЬ
	|	ЗаказыМаршруты.ЗаказПокупателя КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ЗаказыИсключение
	|ИЗ
	|	РегистрСведений.ЗаказыМаршруты КАК ЗаказыМаршруты
	|ГДЕ
	|	ЗаказыМаршруты.ЗаказПокупателя.Дата > &Дата1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиПользователя.Объект
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|ГДЕ
	|	ЗадачиПользователя.Наименование ПОДОБНО ""Подтвердите неошипованные шины в : %""
	|	И ЗадачиПользователя.Дата > &Дата1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказыИсключение.ЗаказПокупателя, 0) = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаказНовый
	|ПОМЕСТИТЬ ЗаказыИтог
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			ЗаказПокупателя.Дата > &Дата1
	|				И Номенклатура В ИЕРАРХИИ (&НеошипованныеЛегковые)) КАК ЗаказыПокупателейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыИсключение КАК ЗаказыИсключение
	|		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ЗаказыИсключение.ЗаказПокупателя
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.ДоговорКонтрагента.ОтветственноеЛицо,
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказыИсключение.ЗаказПокупателя, 0) = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗаказыИсключение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыИтог.ЗаказПокупателя КАК ЗаказПокупателя,
	|	МАКСИМУМ(ЗаказыИтог.ОтветственноеЛицо) КАК ОтветственноеЛицо,
	|	ЗаказыИтог.Номенклатура,
	|	СУММА(ЗаказыИтог.Количество) КАК Количество
	|ИЗ
	|	ЗаказыИтог КАК ЗаказыИтог
	|ГДЕ
	|	(ЗаказыИтог.ЗаказНовый = ИСТИНА
	|			ИЛИ ЕСТЬNULL(ЗаказыИтог.ЗаказНовый, 2) = 2)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыИтог.ЗаказПокупателя,
	|	ЗаказыИтог.Номенклатура
	|ИТОГИ ПО
	|	ЗаказПокупателя";	
	
	Выборка = ЗапросЗаказов.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока Выборка.Следующий() Цикл //Уровень заказы
		Выборка2 = Выборка.Выбрать();
		ТекстОповещения = "Внимание!!! По заказу необходимо подтвердить неошипованные шины."+Символы.ПС+Символы.ПС+"Номенклатура:"+Символы.ПС+Символы.ПС;
		
		Пока Выборка2.Следующий() Цикл //Уровень номенклатура
			ТекстОповещения = ТекстОповещения + "Код: " + Выборка2.Номенклатура.Код + " | Наименование: " + Выборка2.Номенклатура + " | Количество: " + Выборка2.Количество + Символы.ПС;
			а=1;	
		КонецЦикла;
		
		НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		НоваяЗадача.Исполнитель  = Выборка.ОтветственноеЛицо;
		НоваяЗадача.Объект = Выборка.ЗаказПокупателя;
		НоваяЗадача.Наименование = "Подтвердите неошипованные шины в : "+Выборка.ЗаказПокупателя;
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.ДатаИсполнения = ТекущаяДата();
		НоваяЗадача.СрокИсполнения = КонецДня(ТекущаяДата());
		НоваяЗадача.Оповещение   = Истина;
		НоваяЗадача.СрокОповещения = ТекущаяДата()+60;
		НоваяЗадача.Описание = ТекстОповещения;
		
		НоваяЗадача.НаСогласование = Истина;
		НоваяЗадача.РеквизитДляСогласования = СвойствоЗаказа.Метаданные().ПолноеИмя()+"."+СвойствоЗаказа.Код;
		
		НоваяЗадача.Записать();
		
		
	КонецЦикла;
КонецПроцедуры

//***2017.10.23 задача №34922
Процедура ИсключениеНоменклатурыИзСтопЛиста() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	А.Номенклатура
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		НоменклатураИмпорт.Номенклатура КАК Номенклатура,
	               |		ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Остаток
	               |	ИЗ
	               |		РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	               |			ПО НоменклатураИмпорт.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура) КАК А
	               |ГДЕ
	               |	А.Остаток < 4
	               |	И А.Номенклатура.Производитель <> &X_RACE";
	Запрос.УстановитьПараметр("X_RACE", Справочники.Производители.НайтиПоНаименованию("X-RACE"));
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.НоменклатураИмпорт.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Результат.Номенклатура);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьРасхожденияПлановСерковаИПлановНО() экспорт
попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Сформировать расхождения планов Серкова и НО");
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;
		Обработка.СформироватьРасхождения();
	исключение
		ЗаписьЖурналаРегистрации("Сформировать расхождения планов Серкова и НО",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
КонецПроцедуры

Процедура СоздатьПоступленияВБазеФранчайзи() Экспорт
	попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Создать поступления в базе франчайзи");
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;
		Обработка.ВыполнитьВыгрузку();
	исключение
		ЗаписьЖурналаРегистрации("Создать поступления в базе франчайзи",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
КонецПроцедуры

//+++Шарафутдинов по задаче 46716 
Процедура АвтоматическоеСписаниеКрышек() Экспорт
	попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Автоматическое списание крышек!",истина);
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;		
		Обработка.ВыполнитьСписаниеКрышек();
	исключение
		ЗаписьЖурналаРегистрации("Автоматическое списание крышек",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
КонецПроцедуры


//+++Шарафутдинов по задаче 40443  
Процедура АвтоматическоеПеревыставлениеПДЗСКлиентаНаПеревозчика() Экспорт
	попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Автоматическое перевыставление ПДЗ с клиента на перевозчика!",истина);
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;		
		Обработка.ПеревыставитьПДЗ();
	исключение
		ЗаписьЖурналаРегистрации("Автоматическое перевыставление ПДЗ с клиента на перевозчика",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
КонецПроцедуры

//***2019.01.10
//Необходимо видеть для заявки на брак, когда рекламационный товар поступил от покупателя на ОТХ
//для контроля сроков обработки заявки на брак
//Динамически получать долго, поэтому пишем в реквизит заявки на брак
//Задача № 61422
Процедура ЗаполнениеДанныхОперацийОТХвЗаявкахНаБрак() Экспорт
	
	ДатаКонтроля = ДобавитьМесяц(НачалоДня(ТекущаяДата()),-3); 
	
	ЗапросОТХ = Новый Запрос;
	ЗапросОТХ.УстановитьПараметр("Период", ДатаКонтроля);
	ЗапросОТХ.Текст = "ВЫБРАТЬ
	                  |	ЗаявкаНаБракРасшифровка.Ссылка
	                  |ПОМЕСТИТЬ ВТ_ЗаявкиНаБрак
	                  |ИЗ
	                  |	Документ.ЗаявкаНаБрак.Расшифровка КАК ЗаявкаНаБракРасшифровка
	                  |ГДЕ
	                  |	ЗаявкаНаБракРасшифровка.Ссылка.Дата >= &Период
	                  |	И ЗаявкаНаБракРасшифровка.Ссылка.СостояниеЗаявки <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.ПризнатьБрак)
	                  |	И ЗаявкаНаБракРасшифровка.Ссылка.СостояниеЗаявки <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.Отклонить)
	                  |	И НЕ ЗаявкаНаБракРасшифровка.Ссылка.ПометкаУдаления
	                  |;
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ
	                  |	МИНИМУМ(ТоварыНаОтветственномХраненииОбороты.Период) КАК Период,
	                  |	ВТ_ЗаявкиНаБрак.Ссылка КАК ЗаявкаНаБрак
	                  |ИЗ
	                  |	ВТ_ЗаявкиНаБрак КАК ВТ_ЗаявкиНаБрак
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Обороты(&Период, , Регистратор, Склад.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК ТоварыНаОтветственномХраненииОбороты
	                  |		ПО ВТ_ЗаявкиНаБрак.Ссылка.ДокументОснование = ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование
	                  |ГДЕ
	                  |	ТоварыНаОтветственномХраненииОбороты.КоличествоПриход <> 0
	                  |	И ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование ССЫЛКА Документ.ЗаявкаНаВозвратТоваров
	                  |
	                  |СГРУППИРОВАТЬ ПО
	                  |	ВТ_ЗаявкиНаБрак.Ссылка
	                  |
	                  |ОБЪЕДИНИТЬ ВСЕ
	                  |
	                  |ВЫБРАТЬ
	                  |	МИНИМУМ(ТоварыНаОтветственномХраненииОбороты.Период),
	                  |	ВТ_ЗаявкиНаБрак.Ссылка
	                  |ИЗ
	                  |	ВТ_ЗаявкиНаБрак КАК ВТ_ЗаявкиНаБрак
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Обороты(&Период, , Регистратор, Склад.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК ТоварыНаОтветственномХраненииОбороты
	                  |		ПО ВТ_ЗаявкиНаБрак.Ссылка = ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование
	                  |ГДЕ
	                  |	ТоварыНаОтветственномХраненииОбороты.КоличествоПриход <> 0
	                  |
	                  |СГРУППИРОВАТЬ ПО
	                  |	ВТ_ЗаявкиНаБрак.Ссылка
	                  |
	                  |ОБЪЕДИНИТЬ ВСЕ
	                  |
	                  |ВЫБРАТЬ
	                  |	МИНИМУМ(ТоварыНаОтветственномХраненииОбороты.Период),
	                  |	ВТ_ЗаявкиНаБрак.Ссылка
	                  |ИЗ
	                  |	ВТ_ЗаявкиНаБрак КАК ВТ_ЗаявкиНаБрак
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Обороты(&Период, , Регистратор, Склад.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК ТоварыНаОтветственномХраненииОбороты
	                  |		ПО ВТ_ЗаявкиНаБрак.Ссылка = ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование.ДокументОснование
	                  |ГДЕ
	                  |	ТоварыНаОтветственномХраненииОбороты.КоличествоПриход <> 0
	                  |
	                  |СГРУППИРОВАТЬ ПО
	                  |	ВТ_ЗаявкиНаБрак.Ссылка
	                  |;
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |УНИЧТОЖИТЬ ВТ_ЗаявкиНаБрак";
	ВыборкаРезультат = ЗапросОТХ.Выполнить().Выбрать();
	
	ЗапросСписанияСОТХ = Новый Запрос;
	ЗапросСписанияСОТХ.УстановитьПараметр("Период", ДатаКонтроля);
	ЗапросСписанияСОТХ.Текст = "ВЫБРАТЬ
	                           |	А.Ссылка
	                           |ПОМЕСТИТЬ ВТ_ЗаявкиБезОстатковНаОТХ
	                           |ИЗ
	                           |	(ВЫБРАТЬ
	                           |		ЗаявкаНаБракРасшифровка.Ссылка КАК Ссылка,
	                           |		ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокНаОТХ
	                           |	ИЗ
	                           |		Документ.ЗаявкаНаБрак.Расшифровка КАК ЗаявкаНаБракРасшифровка
	                           |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Остатки КАК ТоварыНаОтветственномХраненииОстатки
	                           |			ПО ЗаявкаНаБракРасшифровка.Ссылка.Контрагент = ТоварыНаОтветственномХраненииОстатки.Контрагент
	                           |				И ЗаявкаНаБракРасшифровка.Номенклатура = ТоварыНаОтветственномХраненииОстатки.Номенклатура
	                           |	ГДЕ
	                           |		ЗаявкаНаБракРасшифровка.Ссылка.Дата >= &Период
	                           |		И ЗаявкаНаБракРасшифровка.Ссылка.СостояниеЗаявки <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.ПризнатьБрак)
	                           |		И ЗаявкаНаБракРасшифровка.Ссылка.СостояниеЗаявки <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.Отклонить)
	                           |		И НЕ ЗаявкаНаБракРасшифровка.Ссылка.БракОбнаруженНаСкладе
	                           |		И НЕ ЗаявкаНаБракРасшифровка.Ссылка.ПометкаУдаления) КАК А
	                           |ГДЕ
	                           |	А.КоличествоОстатокНаОТХ = 0
	                           |;
	                           |
	                           |////////////////////////////////////////////////////////////////////////////////
	                           |ВЫБРАТЬ
	                           |	МАКСИМУМ(ТоварыНаОтветственномХраненииОбороты.Период) КАК Период,
	                           |	ВТ_ЗаявкиБезОстатковНаОТХ.Ссылка КАК ЗаявкаНаБрак
	                           |ИЗ
	                           |	ВТ_ЗаявкиБезОстатковНаОТХ КАК ВТ_ЗаявкиБезОстатковНаОТХ
	                           |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Обороты(&Период, , Регистратор, ) КАК ТоварыНаОтветственномХраненииОбороты
	                           |		ПО ВТ_ЗаявкиБезОстатковНаОТХ.Ссылка.ДокументОснование = ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование
	                           |ГДЕ
	                           |	ТоварыНаОтветственномХраненииОбороты.КоличествоРасход <> 0
	                           |	И ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование ССЫЛКА Документ.ЗаявкаНаВозвратТоваров
	                           |
	                           |СГРУППИРОВАТЬ ПО
	                           |	ВТ_ЗаявкиБезОстатковНаОТХ.Ссылка
	                           |
	                           |ОБЪЕДИНИТЬ ВСЕ
	                           |
	                           |ВЫБРАТЬ
	                           |	МАКСИМУМ(ТоварыНаОтветственномХраненииОбороты.Период),
	                           |	ВТ_ЗаявкиБезОстатковНаОТХ.Ссылка
	                           |ИЗ
	                           |	ВТ_ЗаявкиБезОстатковНаОТХ КАК ВТ_ЗаявкиБезОстатковНаОТХ
	                           |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Обороты(&Период, , Регистратор, ) КАК ТоварыНаОтветственномХраненииОбороты
	                           |		ПО ВТ_ЗаявкиБезОстатковНаОТХ.Ссылка = ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование
	                           |ГДЕ
	                           |	ТоварыНаОтветственномХраненииОбороты.КоличествоРасход <> 0
	                           |
	                           |СГРУППИРОВАТЬ ПО
	                           |	ВТ_ЗаявкиБезОстатковНаОТХ.Ссылка
	                           |
	                           |ОБЪЕДИНИТЬ ВСЕ
	                           |
	                           |ВЫБРАТЬ
	                           |	МАКСИМУМ(ТоварыНаОтветственномХраненииОбороты.Период),
	                           |	ВТ_ЗаявкиБезОстатковНаОТХ.Ссылка
	                           |ИЗ
	                           |	ВТ_ЗаявкиБезОстатковНаОТХ КАК ВТ_ЗаявкиБезОстатковНаОТХ
	                           |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Обороты(&Период, , Регистратор, ) КАК ТоварыНаОтветственномХраненииОбороты
	                           |		ПО ВТ_ЗаявкиБезОстатковНаОТХ.Ссылка = ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование.ДокументОснование
	                           |ГДЕ
	                           |	ТоварыНаОтветственномХраненииОбороты.КоличествоРасход <> 0
	                           |
	                           |СГРУППИРОВАТЬ ПО
	                           |	ВТ_ЗаявкиБезОстатковНаОТХ.Ссылка
	                           |;
	                           |
	                           |////////////////////////////////////////////////////////////////////////////////
	                           |УНИЧТОЖИТЬ ВТ_ЗаявкиБезОстатковНаОТХ";
	ВыборкаРезультатСписание = ЗапросСписанияСОТХ.Выполнить().Выбрать();
	
	Если ВыборкаРезультат.Количество()>0 ИЛИ ВыборкаРезультатСписание.Количество() > 0 Тогда
		
		//открытие периода
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Роли.Ссылка КАК Роль
					   |ИЗ	Перечисление.НаборПравПользователей КАК Роли";
		ТаблРолей = Запрос.Выполнить().Выгрузить();
				
		Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка());
		Для Каждого СтрТЗ ИЗ ТаблРолей Цикл
			Запись = Набор.Добавить();
			Запись.Организация = Справочники.Организации.ПустаяСсылка();
			Запись.Роль        = СтрТЗ.Роль;  
			Запись.ГраницаЗапретаИзменений = ДатаКонтроля;
		КонецЦикла;
		Набор.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Организации.Ссылка КАК Организация
					   |ИЗ	Справочник.Организации КАК Организации";
		ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
		Пока ВыборкаОрганизаций.Следующий() Цикл
			Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(ВыборкаОрганизаций.Организация);
			Для Каждого СтрТЗ ИЗ ТаблРолей Цикл
				Запись = Набор.Добавить();
				Запись.Организация = ВыборкаОрганизаций.Организация;
				Запись.Роль = СтрТЗ.Роль;
				Запись.ГраницаЗапретаИзменений = ДатаКонтроля;
			КонецЦикла;
			Набор.Записать();
		КонецЦикла;
		
		//заполнение даты поступления на ОТХ
		Пока ВыборкаРезультат.Следующий() Цикл
			ЗаявкаНаБрак = ВыборкаРезультат.ЗаявкаНаБрак;
			ДокОбъект 				 = ЗаявкаНаБрак.ПолучитьОбъект();  
			ДокОбъект.ДатаПриходаОТХ = ВыборкаРезультат.Период; 
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись); 
		КонецЦикла;
		
		//заполнение даты списания с ОТХ
		Пока ВыборкаРезультатСписание.Следующий() Цикл
			ЗаявкаНаБрак = ВыборкаРезультатСписание.ЗаявкаНаБрак;
			ДокОбъект 				  = ЗаявкаНаБрак.ПолучитьОбъект();  
			ДокОбъект.ДатаСписанияОТХ = ВыборкаРезультатСписание.Период; 
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись); 
		КонецЦикла;
		
		//закрытие периода
		яштПартии.УстановкаГраницыЗапретаИзмененияДанных(); 
		
	КонецЕсли;
	
КонецПроцедуры

//+++ 12-13.02.2019 Переключение правил резерва - Задача № 63349 
//1) для всех Клиентов (вообще!)
//ВЫКЛючаем особые правила от -7001... и "больше" (выше всех правил)!
//факт выключения - пишем в рег.св. журнал изменений...как обычно
//
//2) смотрим:
//по товарам в резерве >0 по клиенту "Резерв ИМ"----
//
//смотрим цены для "особого" клиента: 11010: для Правил Переключения по Резерву ИМ
//
//3) Смотрим:
//срез последних рег.св. ПравилаПереключения k>0 N>0
//ТОЛЬКО если есть такие... 
// и ТОЛЬКО для ПЕРС.правил и ПравилПереключения 
//
//определяем правила ТОЛЬКО для ВКЛючения...
//
//4) ВКЛЮЧАЕМ правила только для клиентов резерва ИМ... в их персональные!
//рег.св.ПравилаЦенообразования
//
Процедура ПереключениеПравилРезерва() Экспорт
	
	Завтра = КонецДня( ТекущаяДата() )+1;  //завтрашним днём!
	ВыполнитьПереключениеПравилРезерва(Завтра); //-8000
	
	ВыполнитьУдалениеЦенРаспродажиПоПриходам(Завтра); // -7000  //+++ 07.03.2019
	
КонецПроцедуры

//+++ 07.03.2019 - Задача № 62869 
Процедура ВыполнитьУдалениеЦенРаспродажиПоПриходам(Завтра=неопределено) ЭКСПОРТ
	Если ЕстьПриходыПоТоварамРаспродажи(Завтра) тогда
		табл = УстановитьНовыеЦеныРаспродажи(Завтра);
		УстановитьАссортиментРаспродажиДляТерминала(табл, Истина);
	КонецЕсли;	
КонецПроцедуры

//+++ 07.03.2019 вспомогательная функция для ВыполнитьУдалениеЦенРаспродажи()
функция ЕстьПриходыПоТоварамРаспродажи(Завтра)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ЦеныДляРаспродажи.Номенклатура,
	                |	ЗакупкиОбороты.КоличествоОборот
	                |ИЗ
	                |	РегистрСведений.ЦеныДляРаспродажи КАК ЦеныДляРаспродажи
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки.Обороты(&НачДата, &Завтра, , ) КАК ЗакупкиОбороты
	                |		ПО ЦеныДляРаспродажи.Номенклатура = ЗакупкиОбороты.Номенклатура
	                |ГДЕ
	                |	ЦеныДляРаспродажи.Период = &ДатаПоследнейУстановки
	                |	И ЕСТЬNULL(ЗакупкиОбороты.КоличествоОборот, 0) > 0";
	 ДатаПоследнейУстановки = ОбменСУТИнтернетМагазин.ПолучитьДатуЦеныРаспродажи( ЛОЖЬ, Завтра ); 
	 Запрос.УстановитьПараметр("ДатаПоследнейУстановки", ДатаПоследнейУстановки);
	 // поступления за тек.месяц!
	 Запрос.УстановитьПараметр("НачДата", НачалоМесяца(Завтра) );
	 Запрос.УстановитьПараметр("Завтра", Завтра);
	 Результат = Запрос.Выполнить();
	 
	//если уже есть на завтра... должен быть пустой
	возврат НЕ Результат.Пустой();
КонецФункции

//+++ 07.03.2019 вспомогательная функция для ВыполнитьУдалениеЦенРаспродажи()
функция УстановитьНовыеЦеныРаспродажи(Завтра)
	 табл = Неопределено;
	 ВыгружатьВтерминал = Истина;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	 				|	ЦеныДляРаспродажиСрезПоследних.Номенклатура.Код как НоменклатураКод,
	                |	ЦеныДляРаспродажиСрезПоследних.Номенклатура,
	                |	ЦеныДляРаспродажиСрезПоследних.Цена,
	                |	ВЫБОР
	                |		КОГДА ЦеныДляРаспродажиСрезПоследних.ЗаписьАктивна ТОГДА &USD
	                |		ИНАЧЕ &Руб КОНЕЦ КАК Валюта,
					|
					|	ЦеныДляРаспродажиСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	                |	ЦеныДляРаспродажиСрезПоследних.ЗаписьАктивна,
					
	                |	ЕСТЬNULL(ЗакупкиОбороты.КоличествоОборот, 0) КАК КоличествоЗакупки
					
	                 |ИЗ
	                |	РегистрСведений.ЦеныДляРаспродажи.СрезПоследних(&ДатаПоследнейУстановки, ) КАК ЦеныДляРаспродажиСрезПоследних
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки.Обороты(&НачДата, &Завтра, , ) КАК ЗакупкиОбороты
	                |		ПО ЦеныДляРаспродажиСрезПоследних.Номенклатура = ЗакупкиОбороты.Номенклатура
	                |ГДЕ
	                |	ЕСТЬNULL(ЗакупкиОбороты.КоличествоОборот, 0) = 0";
		  рубли = Константы.ВалютаРегламентированногоУчета.Получить();
		Доллары = справочники.Валюты.НайтиПоКоду("840");
	 Запрос.УстановитьПараметр("Руб", рубли );
	 Запрос.УстановитьПараметр("USD", Доллары );
	 ДатаПоследнейУстановки = ОбменСУТИнтернетМагазин.ПолучитьДатуЦеныРаспродажи( ЛОЖЬ, Завтра ); //как ЗаписьАктивна = ЛОЖЬ для рублевых!
	 Запрос.УстановитьПараметр("ДатаПоследнейУстановки", ДатаПоследнейУстановки );
	 //приходы за тек. месяц
	 Запрос.УстановитьПараметр("НачДата", НачалоМесяца(Завтра-1) );
	 Запрос.УстановитьПараметр("Завтра", Завтра);
	 Результат = Запрос.Выполнить();
	 
//================  459 обработка - на Завтра! ============================
 Если НЕ Результат.Пустой() тогда 
	 табл = результат.Выгрузить();  // повтор цен каждый раз!
	попытка
		Док  = Документы.УстановкаЦенДляРаспродажи.СоздатьДокумент();
		ДокВ = Документы.УстановкаЦенДляРаспродажи.СоздатьДокумент();
		Док.Дата  = Завтра;
		ДокВ.Дата = Завтра;
		Док.Комментарий  = "Создан автоматически(Р) - удаление товаров с прихода";
		ДокВ.Комментарий = "Создан автоматически($) - удаление товаров с прихода";
		для каждого стр из табл Цикл
			Если стр.ЗаписьАктивна Тогда  //USD
				новСтр = ДокВ.Товары.Добавить();
			иначе
				новСтр = Док.Товары.Добавить();
			КонецЕсли;	
			ЗаполнитьЗначенияСвойств(новСтр, стр);
		конецЦикла;
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ДокВ.Записать(РежимЗаписиДокумента.Проведение);
		#Если Клиент Тогда
			Сообщить( строка(ТекущаяДата())+" записаны новые установки цен распродажи.", СтатусСообщения.Информация);
		#КонецЕсли
	исключение
		табл = неопределено;
		ТекстОшибки = строка(ТекущаяДата())+" ОШИБКА установки цен распродажи: "+ОписаниеОшибки();
		#Если Клиент Тогда
			Сообщить( ТекстОшибки, СтатусСообщения.Важное );
		#КонецЕсли
		ВызватьИсключение ТекстОшибки; // чтобы видеть в 64 обработке!
	КонецПопытки;	
 КонецЕсли;

 возврат табл;
 
КонецФункции

//+++ 07.03.2019 - и для регл.задания и для 459 обработки
//
//табл - это таблица значений с колонками 
//		Номенклатура
//		НоменклатураКод
//
//Если ВыгружатьВТерминал  >> "ImportSaleOffers"
//
Процедура УстановитьАссортиментРаспродажиДляТерминала(табл=неопределено, ВыгружатьВТерминал=Истина, УдалитьФайлПослеУдачнойВыгрузки=Истина) Экспорт 
	Если табл=Неопределено тогда
		#Если Клиент Тогда
		сообщить("нет товаров для установки нового АссортиментРаспродажиДляТерминала");
		#КонецЕсли	
		Возврат;
	КонецЕсли;
	
	//очистим предыдущий список и запишем новый
	табл.Свернуть("Номенклатура, НоменклатураКод"); // различные товары!
	наборЗаписей = РегистрыСведений.АссортиментРаспродажиДляТерминала.СоздатьНаборЗаписей();
	наборЗаписей.Записать();//без чтения - чистит!
	Для каждого стзапись из табл Цикл
		Запись = РегистрыСведений.АссортиментРаспродажиДляТерминала.СоздатьМенеджерЗаписи();
		Запись.Номенклатура = стЗапись.Номенклатура;
		Запись.Записать(Истина); //можно с дублями?!
	КонецЦикла;	
		
	Если ВыгружатьВТерминал тогда
		ИмяФайла=КаталогВременныхФайлов()+"ProductsForSale_terminal.xml"; // на сервере - своя папка...
		
		ОбъектXML = Новый ЗаписьXML;
		ОбъектXML.ОткрытьФайл(ИмяФайла, "UTF-8");
		ОбъектXML.ЗаписатьОбъявлениеXML();  //<?xml version="1.0"?>
		ОбъектXML.ЗаписатьНачалоЭлемента("ProductsForSale");
		//выгрузим весь регистр	по кодам!
		Для каждого стзапись из табл Цикл
			ОбъектXML.ЗаписатьНачалоЭлемента("Product");
				ОбъектXML.ЗаписатьАтрибут("ProductId", стзапись.НоменклатураКод); //+++ строка
			ОбъектXML.ЗаписатьКонецЭлемента(); 
		конецЦикла;
		ОбъектXML.ЗаписатьКонецЭлемента(); 
		ОбъектXML.Закрыть();
		
	удачно = ОбменСУТИнтернетМагазин.SIM_ВыгрузитьФайлНаСервер(ИмяФайла,"ImportSaleOffers", УдалитьФайлПослеУдачнойВыгрузки, "terminal.yst.ru" );
		
	#Если Клиент Тогда
		сообщить("Сформирован файл выгрузки товаров распродажи: "+Имяфайла);
		Если удачно тогда
			сообщить(строка(ТекущаяДата())+" Файл удачно выгружен в Terminal.", СтатусСообщения.Информация);
		Иначе
			сообщить(строка(ТекущаяДата())+" Файл НЕвыгружен в Terminal !", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
	
	КонецЕсли;
	
КонецПроцедуры	


// Задача № 63349 - основная функция - вынесена отдельно для "ручного" запуска... на любую дату
Процедура ВыполнитьПереключениеПравилРезерва(Дата1) Экспорт
КлиентРезерв 		 = справочники.Контрагенты.НайтиПоКоду("П004703");//Резерв для ИМ
контрДляПереключения = справочники.Контрагенты.НайтиПоКоду("11010");  //для Правил Переключения по Резерву ИМ
Ярославль = справочники.Подразделения.НайтиПоКоду("00005");

УдалитьВсеПравилаПошышения(Дата1);

//2) находим товары в резерве>0 по клиенту "Резерв для ИМ"----
товарыВРезервеИСвОст = ПолучитьТаблВРезервеИСвОст(КлиентРезерв, Ярославль);

//находим по списку резервных товаров - цены (с номерами правил) для "особого" клиента:
масТов = товарыВРезервеИСвОст.ВыгрузитьКолонку("Номенклатура");
//получим: Номенклатура, Приоритет, МинимальнаяЦена, ЦенаСоСкидкойПредоплаты, ЦенаПоТипуЦен
таблЦен = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(контрДляПереключения, масТов);

//3) Смотрим срез последних рег.св. ПравилаПереключения k>0 N>0
// и ТОЛЬКО для ПЕРС.правил по рег.св. ПравилаПереключения 
//находим: ПравилаДляВключения
//4) только для клиентов резерва ИМ... по ИХ товарам каждого!
Вариант = ПолучитьВариантКлиентаИТоварыДляПовышенияЦен(товарыВРезервеИСвОст, таблЦен, КлиентРезерв, Ярославль); 
//в 500 обработке и в Раб.месте - будет: -8000 правило!
#Если Клиент тогда
	сообщить("Получено "+строка(Вариант.Количество())+" наборов товаров");
#КонецЕсли
No=-8000; i=0;
	Пока Вариант.Следующий() цикл
		#Если Клиент тогда
		Сообщить( строка(i)+") Вариант: "+Вариант.ВариантКод+" для переключения товаров для "+строка(Вариант.Контрагент)+" клиентов."); 
		#КонецЕсли
		выборкаТов = Вариант.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //2 уровня!
		пока выборкаТов.Следующий() цикл
			Если УжеЕстьЗаписьЦенПовышения(выборкаТов, Дата1-1 ) тогда  //на 1 сек./день раньше
				регСв = РегистрыСведений.ЦеныПовышения.СоздатьМенеджерЗаписи(); 
				ЗаполнитьЗначенияСвойств(регСв, выборкаТов); // только измерения!
				регСв.Период = Дата1;// на дату обнуления...
				регСв.Удалить();
				#Если Клиент тогда
					сообщить("Запись по товару "+Строка(выборкаТов.Номенклатура)+" с ценой "+строка(выборкаТов.Цена)+"руб. - УЖЕ была.");
				#КонецЕсли
				продолжить;
			КонецЕсли;
			
			регСв = РегистрыСведений.ЦеныПовышения.СоздатьМенеджерЗаписи(); //каждый день!
			ЗаполнитьЗначенияСвойств(регСв, выборкаТов); // только измерения!
			регСв.Период = Дата1;
			
			// количество различных клиентов в момент включения! для "веса" правила
			регСв.КолКлиентов = выборкаТов.Контрагент; 
			
			#Если Клиент тогда
				сообщить("НОВАЯ Запись: '"+выборкаТов.ВариантКод+"' - "+Строка(выборкаТов.Номенклатура)+" цена: "+строка(выборкаТов.Цена)+"руб.");
			#КонецЕсли
			регСв.Записать(Истина);
		КонецЦикла;	
		i=i+1;
	КонецЦикла;
КонецПроцедуры	

процедура УдалитьВсеПравилаПошышения(Дата1)
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ *
               |ИЗ
               |	РегистрСведений.ЦеныПовышения.СрезПоследних КАК Цены
               |ГДЕ
               |	Цены.Цена > 0";
Результат  = Запрос.Выполнить();
Выборка = Результат.Выбрать();

пока Выборка.Следующий() цикл//ВЫКЛючаем все особые правила 
	регСв = РегистрыСведений.ЦеныПовышения.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(регСв, Выборка); // только измерения!
	регСв.Цена = 0;
	регСв.Период = Дата1;
	регСв.Записать(Истина);
КонецЦикла;

КонецПроцедуры

функция УжеЕстьЗаписьЦенПовышения(выборкаТов, Вчера) 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ *
	                |ИЗ
	                |	РегистрСведений.ЦеныПовышения.СрезПоследних(
	                |			&Вчера,
	                |			ВариантКод = &ВариантКод
	                |				И Номенклатура = &Номенклатура
	                |				И Цена = &Цена) КАК ЦеныПовышенияСрезПоследних";
	 Запрос.УстановитьПараметр("Вчера", Вчера );
	 
	 Запрос.УстановитьПараметр("ВариантКод", выборкаТов.ВариантКод );
	 Запрос.УстановитьПараметр("Номенклатура", выборкаТов.Номенклатура );
	 Запрос.УстановитьПараметр("Цена", выборкаТов.Цена );
	 Результат = Запрос.Выполнить();
	возврат НЕ Результат.пустой();
КонецФункции	

//ПолучитьТаблВРезервеИСвОст() 
//возвращает таблицу значений:
//
//Номенклатура,
//ВРезерве > 0,
//Остаток  >=0,
//СвОстаток
//
функция ПолучитьТаблВРезервеИСвОст(КонтрРезерв, Подразделение1)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПокупателейОстатки.Номенклатура,
	               |	ЗаказыПокупателейОстатки.КоличествоОстаток КАК КоличествоВРезерве
	               |ПОМЕСТИТЬ ВТ_ТоварыВРезерве
				   
	               |ИЗ  РегистрНакопления.РезервДляИМ.Остатки( ,КонтрагентДляРезерваИМ = &КонтрРезерв
				   |				И Подразделение = &Ярославль) КАК ЗаказыПокупателейОстатки
				   //===============должно сходиться!============================
	  			   //|	РегистрНакопления.ЗаказыПокупателей.Остатки( ,
				   //|			ДоговорКонтрагента.Владелец = &КонтрРезерв
				   //|				И ЗаказПокупателя.Подразделение = &Ярославль) КАК ЗаказыПокупателейОстатки
	               |ГДЕ
	               |	ЗаказыПокупателейОстатки.КоличествоОстаток > 0
	               |;
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказыПокупателейОст.Номенклатура,
	               |	ЗаказыПокупателейОст.КоличествоОстаток КАК КоличествоЗаказано
	               |ПОМЕСТИТЬ ВТ_ВсеЗаказы
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(,
	               |			Номенклатура В (ВЫБРАТЬ вт.Номенклатура
	               |							ИЗ ВТ_ТоварыВРезерве КАК вт)
	               |				И ЗаказПокупателя.Проведен
	               |				И ЗаказПокупателя.Проверен
	               |				И ЗаказПокупателя.Дата > &МинДатаЗаказов
	               |				И ЗаказПокупателя.Подразделение = &Ярославль) КАК ЗаказыПокупателейОст
	               |ГДЕ
	               |	ЗаказыПокупателейОст.КоличествоОстаток > 0
	               |;
	                |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыВРезерве.Номенклатура КАК Номенклатура,
	               |	СУММА(ЕСТЬNULL(ОстОТХрезервы.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	               |	СУММА(ЕСТЬNULL(ОстОТХрезервы.КоличествоНаОТХ, 0)) КАК КоличествоНаОТХ
	               |ПОМЕСТИТЬ ВТ_ОстаткиНаСкладахИОТХ
	               |ИЗ
	               |	ВТ_ТоварыВРезерве КАК ТоварыВРезерве
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ост.Номенклатура КАК Номенклатура,
	               |			ост.КоличествоОстаток КАК КоличествоОстаток,
	               |			0 КАК КоличествоНаОТХ
	               |		ИЗ
	               |			РегистрНакопления.ТоварыНаСкладах.Остатки(,
	               |					Номенклатура В (ВЫБРАТЬ вт.Номенклатура
	               |							ИЗ ВТ_ТоварыВРезерве КАК вт)
	               |						И Склад.ЗапретитьИспользование = ЛОЖЬ
	               |						И Склад.Транзитный = &Транзит
	               |						И Склад.Подразделение = &ПодразделениеСклада ) КАК ост
				   |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			отх.Номенклатура,
	               |			0,
	               |			отх.КоличествоОстаток
	               |		ИЗ
	               |			РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(,
	               |					Номенклатура В (ВЫБРАТЬ вт.Номенклатура
	               |							ИЗ ВТ_ТоварыВРезерве КАК вт)
	               |						И Склад.ЗапретитьИспользование = ЛОЖЬ
	               |						И Склад.Транзитный = &Транзит
	               |						И Склад.Подразделение = &ПодразделениеСклада
				   |						И Контрагент В (&СписокКонтрагентовОТХ)) КАК отх
				   |  ) КАК ОстОТХрезервы
	               |		ПО ТоварыВРезерве.Номенклатура = ОстОТХрезервы.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыВРезерве.Номенклатура
				   |
				   //-------------лишнего не надо! --------------
	               |ИМЕЮЩИЕ
				   |	(   СУММА(ЕСТЬNULL(ОстОТХрезервы.КоличествоОстаток, 0)) >= 0
				   |	ИЛИ СУММА(ЕСТЬNULL(ОстОТХрезервы.КоличествоНаОТХ, 0))   >= 0)
				   |;
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТРезерв.Номенклатура,
	               |	ВТРезерв.КоличествоВРезерве как ВРезерве,
	               |	ЕСТЬNULL(ВТОстаткиИОТХ.КоличествоОстаток, 0) + ЕСТЬNULL(ВТОстаткиИОТХ.КоличествоНаОТХ, 0) КАК Остаток,
	               |	ЕСТЬNULL(ВТОстаткиИОТХ.КоличествоОстаток, 0) + ЕСТЬNULL(ВТОстаткиИОТХ.КоличествоНаОТХ, 0) - ЕСТЬNULL(ВТЗаказы.КоличествоЗаказано, 0) КАК СвОстаток
	               |ИЗ
	               |	ВТ_ТоварыВРезерве КАК ВТРезерв
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНаСкладахИОТХ КАК ВТОстаткиИОТХ
	               |		ПО ВТРезерв.Номенклатура = ВТОстаткиИОТХ.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеЗаказы КАК ВТЗаказы
	               |		ПО ВТРезерв.Номенклатура = ВТЗаказы.Номенклатура
	               |;
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ТоварыВРезерве;
	               |УНИЧТОЖИТЬ ВТ_ВсеЗаказы;
	               |УНИЧТОЖИТЬ ВТ_ОстаткиНаСкладахИОТХ
				   |";
	Запрос.УстановитьПараметр("КонтрРезерв", КонтрРезерв);
	Транзит = Подразделение1.ОбособленноеПодразделение;
	Запрос.УстановитьПараметр("Транзит", Транзит);
	Запрос.УстановитьПараметр("Ярославль", Подразделение1);
	Запрос.УстановитьПараметр("ПодразделениеСклада", ?(Транзит, Подразделение1, справочники.Подразделения.ПустаяСсылка()) );
	
	СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);
	Запрос.УстановитьПараметр("СписокКонтрагентовОТХ",СписокКонтрагентовОТХ);
	
	МинДатаЗаказов  = '20180320';// 3-4 000 всего!  с Заказ покупателя ТК394326 от 26.03.2018 11:27:39 - резерв ИМ !
	Запрос.УстановитьПараметр("МинДатаЗаказов", МинДатаЗаказов  ); 
	
	Результат = Запрос.Выполнить();
	табл = Результат.Выгрузить();	
	возврат табл;
КонецФункции	

//получаем все нужные правила 
функция ПолучитьВариантКлиентаИТоварыДляПовышенияЦен(товарыВРезервеИСвОст, таблЦен, КонтрРезерв, ПодразделениеРезерва)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("товарыВРезервеИСвОст", товарыВРезервеИСвОст);
	Запрос.УстановитьПараметр("таблЦен", таблЦен);
	Запрос.УстановитьПараметр("КонтрРезерв",КонтрРезерв);
	Запрос.УстановитьПараметр("Ярославль", ПодразделениеРезерва);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВсеРезервы.Номенклатура,
	               |	ВсеРезервы.ВРезерве,
	               |	ВсеРезервы.СвОстаток
	               |ПОМЕСТИТЬ ВТ_Резервы
	               |ИЗ
	               |	&товарыВРезервеИСвОст КАК ВсеРезервы
	               |;
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеРезервы.Номенклатура,
	               |	ВсеРезервы.ВРезерве,
	               |	ВсеРезервы.СвОстаток,
	               |	спрНоменклатура.ВидТовара,
	               |	спрНоменклатура.НоменклатурнаяГруппа,
	               |	спрНоменклатура.Производитель
	               |ПОМЕСТИТЬ ВТ_РезервыИОстатки
	               |ИЗ
	               |	ВТ_Резервы КАК ВсеРезервы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	               |		ПО ВсеРезервы.Номенклатура = спрНоменклатура.Ссылка
	               |;
	                |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	таблЦен.Номенклатура,
	               |	таблЦен.МинимальнаяЦена,
	               |	таблЦен.ЦенаПоТипуЦен,
	               |	таблЦен.Приоритет
	               |ПОМЕСТИТЬ ВТ_Цены
	               |ИЗ
	               |	&таблЦен КАК таблЦен
	               |;
	                |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	               |	таблЦен.Номенклатура,
	               |	таблЦен.МинимальнаяЦена,
	               |	таблЦен.ЦенаПоТипуЦен,
	               |	таблЦен.Приоритет,
	               |	спрНоменклатура.Код,
	               |	спрНоменклатура.ВидТовара,
	               |	спрНоменклатура.НоменклатурнаяГруппа
	               |ПОМЕСТИТЬ ВТ_ТаблЦен
	               |ИЗ
	               |	ВТ_Цены КАК таблЦен
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	               |		ПО таблЦен.Номенклатура = спрНоменклатура.Ссылка
	               |ГДЕ
	               |	таблЦен.МинимальнаяЦена > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РезервыИОстатки.ВидТовара,
	               |	РезервыИОстатки.НоменклатурнаяГруппа,
	               |	РезервыИОстатки.Производитель,
	               |	РезервыИОстатки.Номенклатура КАК НоменклатураДляПереключения,
	               |	МАКСИМУМ(РезервыИОстатки.ВРезерве) КАК ВРезерве,
	               |	МАКСИМУМ(РезервыИОстатки.СвОстаток) КАК СвОстаток,
	               |	МАКСИМУМ(ПравилаПереключения.N) КАК СвОстатокN,
	               |	МАКСИМУМ(РезервыИОстатки.ВРезерве * ПравилаПереключения.k) КАК СвОстатокK,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА (ПравилаПереключения.N = 0
	               |			ИЛИ ПравилаПереключения.N > 0 И РезервыИОстатки.СвОстаток <= ПравилаПереключения.N)
	               |					И (ПравилаПереключения.k = 0
	               |			ИЛИ ПравилаПереключения.k > 0	И РезервыИОстатки.СвОстаток <= ПравилаПереключения.k * РезервыИОстатки.ВРезерве)
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ТоварНадоПереключать,
	               |	ПравилаПереключения.Приоритет КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ТоварыДляПереключения
	               |ИЗ
	               |	ВТ_РезервыИОстатки КАК РезервыИОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПереключения.СрезПоследних КАК ПравилаПереключения
	               |		ПО РезервыИОстатки.ВидТовара = ПравилаПереключения.ВидТовара
	               |			И (РезервыИОстатки.НоменклатурнаяГруппа = ПравилаПереключения.НоменклатурнаяГруппа
	               |				ИЛИ ПравилаПереключения.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))
	               |			И (РезервыИОстатки.Производитель = ПравилаПереключения.Производитель
	               |				ИЛИ ПравилаПереключения.Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПравилаПереключения.Приоритет,
	               |	РезервыИОстатки.Номенклатура,
	               |	РезервыИОстатки.ВидТовара,
	               |	РезервыИОстатки.НоменклатурнаяГруппа,
	               |	РезервыИОстатки.Производитель
	               |
	               |ИМЕЮЩИЕ
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА (ПравилаПереключения.N = 0
	               |					ИЛИ ПравилаПереключения.N > 0 И РезервыИОстатки.СвОстаток <= ПравилаПереключения.N)
	               |					И (ПравилаПереключения.k = 0
	               |						ИЛИ ПравилаПереключения.k > 0 И РезервыИОстатки.СвОстаток <= ПравилаПереключения.k * РезервыИОстатки.ВРезерве)
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) = 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РезервРазрешения.ВариантКод,
	               |	РезервРазрешения.Контрагент,
	               |	таблЦен.Номенклатура,
	               |	таблЦен.МинимальнаяЦена КАК Цена,
	               |	таблЦен.Приоритет
	               |ПОМЕСТИТЬ ВТ_ЦеныПоКлиентам
	               |ИЗ
	               |	ВТ_ТаблЦен КАК таблЦен
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезервРазрешения.СрезПоследних(,
	               |				КонтрагентРезерв = &КонтрРезерв
	               |					И Подразделение = &Ярославль) КАК РезервРазрешения
	               |		ПО таблЦен.ВидТовара = РезервРазрешения.ВидТовара
	               |			И (таблЦен.НоменклатурнаяГруппа = РезервРазрешения.НоменклатурнаяГруппа
	               |				ИЛИ РезервРазрешения.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))
	               |ГДЕ
	               |	РезервРазрешения.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Цены.ВариантКод КАК ВариантКод,
	               |	Цены.Контрагент КАК Контрагент,
	               |	Цены.Номенклатура КАК Номенклатура,
	               |	Цены.Цена
	               |ИЗ
	               |	ВТ_ЦеныПоКлиентам КАК Цены
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТоварыДляПереключения КАК ТоварыДляПереключения
	               |		ПО Цены.Номенклатура = ТоварыДляПереключения.НоменклатураДляПереключения
	               |			И (ТоварыДляПереключения.Приоритет = 0
	               |				ИЛИ ТоварыДляПереключения.Приоритет = Цены.Приоритет)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Цены.ВариантКод,
	               |	Номенклатура
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагент),
				   |	Максимум(Цена)
				   |ПО
	               |	ВариантКод,
				   |	Номенклатура
				   |АВТОУПОРЯДОЧИВАНИЕ
	               |;
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ТоварыДляПереключения;
	               |УНИЧТОЖИТЬ ВТ_РезервыИОстатки;
				   |УНИЧТОЖИТЬ ВТ_ТаблЦен;
	               |УНИЧТОЖИТЬ ВТ_ЦеныПоКлиентам;
				   |УНИЧТОЖИТЬ ВТ_Резервы;
	               |УНИЧТОЖИТЬ ВТ_Цены
				   |";
	Результат = Запрос.Выполнить();
	ВыборкаВариантовРезерва = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	возврат ВыборкаВариантовРезерва;
КонецФункции

процедура ЗаполнитьДвиженияРН_ПрибыльОтПовышенияЦен(Движения, ЭтотОбъект1 , ДатаСреза , Сторно=1) Экспорт
	
	//из всего списка товароа - не все с повышением!
	масТоваров = ЭтотОбъект1.Товары.выгрузитьКолонку("Номенклатура");
	таблЦенПовышения = ОбменСУТИнтернетМагазин.ЕстьЦеныПовышенияПоКлиенту(ЭтотОбъект1.Контрагент, ДатаСреза, масТоваров, Истина);
	
	Если таблЦенПовышения.Количество()>0 тогда
		
		//цены клиента только по товарам повышения
		масТов =таблЦенПовышения.ВыгрузитьКолонку("Номенклатура");
		БезЦенПовышения = Истина;
		ЦеныКлиента = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(ЭтотОбъект1.Контрагент, масТов, ЛОЖЬ, Неопределено, ДатаСреза, ЛОЖЬ, ЛОЖЬ, Неопределено, БезЦенПовышения);
		
		для каждого стр1 из ЭтотОбъект1.Товары цикл
			стрЦенаПовышения = таблЦенПовышения.найти(стр1.Номенклатура, "Номенклатура");
			Если стрЦенаПовышения=неопределено тогда
				продолжить;	
			КонецЕсли;
        	
			Движение1 = Движения.ПрибыльОтПовышенияЦен.Добавить();
			Движение1.ДоговорКонтрагента = ЭтотОбъект1.ДоговорКонтрагента;
			Движение1.Номенклатура = стр1.Номенклатура;
			
			Движение1.Количество   = стр1.Количество * Сторно;
			Движение1.Цена 		   = стр1.Цена;
			
			Движение1.ЦенаПовышения = стрЦенаПовышения.Цена;//+++ цена повышения  - или  можно соединять с 2мя регистрами
			
			стрЦенаКлиента = ЦеныКлиента.найти(стр1.Номенклатура, "Номенклатура");
			Если стрЦенаКлиента<>неопределено тогда
				Движение1.ЦенаКлиента = стрЦенаКлиента.МинимальнаяЦена;
			КонецЕсли;
			
			Движение1.Прибыль = (стр1.Цена - Движение1.ЦенаКлиента)*Движение1.Количество;//05.03.2019 BugFix - количество уже *Сторно
			
			Движение1.Период      = ЭтотОбъект1.Дата;   //падает по реализации!
			Движение1.Регистратор = ЭтотОбъект1.Ссылка; //Регистратор = Документ
		КонецЦикла;
		
	КонецЕсли; //таблЦенПовышения
	
КонецПроцедуры

Процедура ЗаполнитьРегистрДанныеПоПДЗ() Экспорт
	попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Данные по ПДЗ по периодам",истина);
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;		
		ДатаКон = НачалоМесяца(ТекущаяДата())-1;
		ДатаНач = НачалоМесяца(ДатаКон);
		Обработка.ЗаполнитьПДЗЗаМес(ДатаНач,ДатаКон);
	исключение
		ЗаписьЖурналаРегистрации("Данные по ПДЗ по периодам",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
КонецПроцедуры

Процедура ОтложенноеПроведениеУстановкиЦен() Экспорт
	попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Отложенное проведение установки цен",истина);
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;		
		ДатаН = НачалоДня(ТекущаяДата());
		ДатаК = КонецДня(ТекущаяДата());		
		Обработка.Провести(ДатаН,ДатаК);
	исключение
		ЗаписьЖурналаРегистрации("Отложенное проведение установки цен",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;

КонецПроцедуры
//11.03.2019 Гунина
Процедура АвтоматическоеВыставлениеРеализацийНаУслугиИсправленияДисков() Экспорт
	попытка
		ТекСсылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Автоматическое выставление реализаций на услуги исправления дисков",истина);
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;		
		Обработка.ВыставитьРеализацииНаУслуги();
	исключение
		ЗаписьЖурналаРегистрации("Автоматическое выставление реализаций на услуги исправления дисков",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОписаниеОшибки(),
		);
	КонецПопытки;
КонецПроцедуры


Процедура ПодпискаНаСобытие1ПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
			//+++ 29.09.2016 - Защита от увеличения даты при ПЕРЕпроведении !
		Если НЕ Источник.ЭтоНовый() 
		и РежимЗаписи = РежимЗаписиДокумента.Проведение 
		и Источник.Проведен  // Если очень надо - можно распровести ... поменять дату и провести заново...
		Тогда // ДАТУ НЕ МЕНЯЕМ!
		
			Если ТекущаяДата() > Источник.Дата 
			и НЕ ( РольДоступна("яштФинДиректор") или РольДоступна("ПравоЗавершенияРаботыПользователей") ) Тогда // для фин.отдела - можно менять в любую сторону!
			#Если Клиент Тогда
			сообщить("Документ уже был проведен "+строка(Источник.Дата)+"! Дату и время документа менять НЕЛЬЗЯ, поэтому проведение документа будет выполнено НЕ оперативно, Дата не изменилась!", СтатусСообщения.Информация);
			#КонецЕсли	
			
			Если  РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		 		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			КонецЕсли;
			
			КонецЕсли;
		
		КонецЕсли;
	
КонецПроцедуры

