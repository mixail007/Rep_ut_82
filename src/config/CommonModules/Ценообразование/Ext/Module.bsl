// Округляет число по заданному порядку. Если задано (=Истина) "ОкруглятьВБольшуюСторону",
// то число 123.37 при порядке округление 0.5 превратиться в 123.50, а число 0.1 
// при порядке округления 5 станет равным 5.
//
// Параметры:
//  Число                    - исходное число
//  ПорядокОкругления        - элемент перечисления Порядки окгугления: 
//                             "шаг" округления (0.01 (арифметическое), 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100)
//  ОкруглятьВБольшуюСторону - булево, определяет способ округления: если Истина, 
//                             то при порядке округления "5" 0.01 будет округлена до 5, 
//                             Ложь - округление по арифметическим правилам
//
// Возвращаемое значение:
//  Округленное по заданному порядку значение
//
Функция ОкруглитьЦену(Число, ПараметрПорядокОкругления, ОкруглятьВБольшуюСторону) Экспорт

	Перем Результат;

	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если ЗначениеНеЗаполнено(ПараметрПорядокОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
	Иначе
		ПорядокОкругления = ПараметрПорядокОкругления;
	КонецЕсли;

	Порядок = Число(Строка(ПорядокОкругления));
		
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
		
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
		
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлитья до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе

			// При порядке округления "0.05" 0.371 должно округлитья до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал,0,РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦену()

// Производит пересчет цен при изменении флагов учета налогов.
// Пересчет зависит от способа заполнения цен, при заполнении По ценам номенклатуры (при продаже) 
// хочется избегать ситуаций, когда компания  «теряет деньги» при пересчете налогов. 
// Поэтому если в документе флаг "Учитывать налог" выключен, то цены должны браться напрямую из справочника, 
// потому что хочется продавать по той же цене, независимо от режима налогообложения. 
// Например, если отпускная цена задана с НП для избежания ошибок округления, то это не значит, 
// что при отпуске без НП мы должны продать дешевле. Если же флаг учета налога в документе включен, 
// то цены должны пересчитываться при подстановке в документ: 
// налог должен включаться или не включаться в зависимости от флага включения налога в типе цен.
// При заполнении по ценам контрагентов (при покупке) хочется хранить цены поставщиков. 
// Поэтому нужно пересчитывать всегда по установленным флагам в документе и в типе цен. 
// Это гарантирует, что при записи цен в регистр и последующем их чтении, 
// например, при заполнении следующего документа, мы с точностью до ошибок округления при пересчете 
// получим те же самые цены.
//
// Параметры: 
//  Цена                - число, пересчитваемое значение цены, 
//  СпособЗаполненияЦен - ссылка на перечисление СпособыЗаполненияЦен, определяет способ расчета,
//						  "при продаже" или "при покупке", см описание функции,
//  ЦенаВключаетНДС     - булево, определяет содержит ли переданное значение цены НДС,
//  УчитыватьНДС        - булево, определяет должно ли новое значение цены учитвать НДС,
//  СуммаВключаетНДС    - булево, определяет должно ли новое значение цены включать НДС,
//  СтавкаНДС           - число, ставка НДС, 
//
// Возвращаемое значение:
//  Числое, новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, СпособЗаполненияЦен, ЦенаВключаетНДС,
						УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт


	// Инициализация переменных
	НадоВключитьНДС  = Ложь;
	НадоИсключитьНДС = Ложь;
	НоваяЦена		 = Цена;
	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры Тогда
		
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС
			   И (НЕ ЦенаВключаетНДС) Тогда
				
				// Надо добавлять НДС       
				НадоВключитьНДС = Истина;
			ИначеЕсли (НЕ СуммаВключаетНДС)
					И ЦенаВключаетНДС  Тогда
				
				// Надо исключать НДС       
				НадоИсключитьНДС = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе // Надо пересчитывать строго по флагам включения
		
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС
			   И (НЕ ЦенаВключаетНДС) Тогда
				
				// Надо добавлять НДС       
				НадоВключитьНДС = Истина;
			ИначеЕсли (НЕ СуммаВключаетНДС)
					И ЦенаВключаетНДС  Тогда
				
				// Надо исключать НДС       
				НадоИсключитьНДС = Истина;
			КонецЕсли;
		Иначе
			Если ЦенаВключаетНДС Тогда
				// Надо исключать НДС
				НадоИсключитьНДС = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	
	Если НадоИсключитьНДС Тогда
		НоваяЦена = (НоваяЦена * 100) / (100 + СтавкаНДС);
	КонецЕсли;
	
	Если НадоВключитьНДС Тогда
		НоваяЦена = (НоваяЦена * (100 + СтавкаНДС)) / 100;
	КонецЕсли;

	Возврат НоваяЦена;

КонецФункции // ПересчитатьЦенуПриИзмененииФлаговНалогов()

// Пересчитывает цену для другой единицы измерения
//
// Параметры: 
//  Цена         - число, значение цены, которое надо пересчитать,
//  ЕдиницаЦены  - ссылка на справочник "ЕдиницыИзмерения", определяет единицу, за которую назначена Цена
//  НоваяЕдиница - ссылка на справочник "ЕдиницыИзмерения", определяет единицу, за которую надо получить
//                 новое значение цены. Если не заполнено, то устанавливается равной ЕдиницаЦены без пересчета.
//
// Возвращаемое значение:
//  Новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииЕдиницы(Цена, ЕдиницаЦены, НоваяЕдиница) Экспорт

	НовоеЗначениеЦены = Цена;
	Если ЗначениеНеЗаполнено(НоваяЕдиница) Тогда // параметр единицы не задан, значить надо возвращать в единице цены

		Если ЗначениеНеЗаполнено(ЕдиницаЦены) Тогда // если не задана единица цены, то будем счатать цену нулевой
			НовоеЗначениеЦены = 0;
		Иначе
			НоваяЕдиница = ЕдиницаЦены;
		КонецЕсли;

	Иначе // если единица цены не совпадает с параметром, то надо пересчитать

		Если ЕдиницаЦены <> НоваяЕдиница Тогда

			Если ЗначениеНеЗаполнено(ЕдиницаЦены) Тогда // если не задана единица цены, то будем счатать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе
				КоэффициентЦены = ЕдиницаЦены.Коэффициент;
				НовоеЗначениеЦены  = ?(ЗначениеНеЗаполнено(КоэффициентЦены), 0, 
									 НовоеЗначениеЦены * НоваяЕдиница.Коэффициент / КоэффициентЦены)
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат НовоеЗначениеЦены;

КонецФункции // ПересчитатьЦенуПриИзмененииЕдиницы()

// Пересчитывает цену в другую валюту
//
//  Цена            - число, значение цены, которое надо пересчитать,
//  ВалютаЦены      - ссылка на справочник "Валюты", определяет валюту, в которой назначена Цена
//  НоваяВалюта     - ссылка на справочник "Валюты", определяет валюту, в которой надо получить
//                    новое значение цены. Если не заполнено, то устанавливается равной ВалютаЦены без пересчета,
//  КурсНовойВалюты - курс новой валюты, по которому надо пересчитать цену, если не задан, то берем курс по справочнику
//  КратностьНовойВалюты - кратность новой валюты, по которой надо пересчитать цену, если не задана, то берем курс по справочнику
//  Дата            - дата, на которую надо пересчитать цену.
//
// Возвращаемое значение:
//  Новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, НоваяВалюта, КурсНовойВалюты = 0, КратностьНовойВалюты = 1, Дата = Неопределено ) Экспорт

	НовоеЗначениеЦены = Цена;
	Если ЗначениеНеЗаполнено(НоваяВалюта) Тогда // параметр валюты не задан, значить надо возвращать в валюте цены
		НоваяВалюта = ВалютаЦены;
	Иначе
		Если НоваяВалюта <> ВалютаЦены Тогда // если валюта цены не совпадает с параметром, то надо пересчитать
		
			Если ЗначениеНеЗаполнено(ВалютаЦены) Тогда // если не задана валюта цены, то будем счатать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе // валюты заданы и не совпадают, надо пересчитывать

				СтруктураКурсЦены = ПолучитьКурсВалюты(ВалютаЦены, Дата);
				КурсЦены          = СтруктураКурсЦены.Курс;
				КратностьЦены     = СтруктураКурсЦены.Кратность;

				Если ЗначениеНеЗаполнено(КурсНовойВалюты) Тогда // если не задан курс, то курс берем по справочнику
					СтруктураКурсНовойВалюты = ПолучитьКурсВалюты(НоваяВалюта, Дата);
					КурсНовойВалюты          = СтруктураКурсНовойВалюты.Курс;
					КратностьНовойВалюты     = СтруктураКурсНовойВалюты.Кратность;
				КонецЕсли; 

				НовоеЗначениеЦены = ПересчитатьИзВалютыВВалюту(НовоеЗначениеЦены, ВалютаЦены, НоваяВалюта, 
												КурсЦены, КурсНовойВалюты,КратностьЦены,КратностьНовойВалюты);
				
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

	Возврат НовоеЗначениеЦены;
	
КонецФункции // ПересчитатьЦенуПриИзмененииВалюты()

// Позволяет получить список реквизитов документа, необходимых для дальнейшей
// передачи в обработку заполнения цен и валют.
//
// Параметры: 
//  ДокументОбъект      - объект документа, для реквизитов будет производится заполнение
//  СтруктураИсключений - структура, в которую передаются те исключения, которые или невозможно
//                        определить по метаданным, или, несмотря ни на что, нельзя включать в
//                        возвращаемую структуру.
//                        В структуре - ключ = имя реквизита, значение = истина (необходимо добавить
//                        в структуру) или ложь (нельзя добавлять в структуру)
//
// Возвращаемое значене:
//  Сформированная структура реквизитов документа.
//
Функция ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокументОбъект, СтруктураИсключений = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Зададим, какие реквизиты вообще нам могут быть нужны
	СтруктураВозможныхВариантовРеквизитов = Новый Структура();
	СтруктураВозможныхВариантовРеквизитов.Вставить("ТипЦен");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ВалютаДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УчитыватьНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("СуммаВключаетНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ИспользоватьПлановуюСебестоимость");
	СтруктураВозможныхВариантовРеквизитов.Вставить("РегистрироватьЦеныПоставщика");

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Новый Структура();
	Для Каждого ТекущийЭлементСтруктуры Из СтруктураВозможныхВариантовРеквизитов Цикл
		НужныйРеквизитДокумента = ТекущийЭлементСтруктуры.Ключ;
		Если ЕстьРеквизитДокумента(НужныйРеквизитДокумента, МетаданныеДокумента) Тогда
			СтруктураРеквизитовДокумента.Вставить(НужныйРеквизитДокумента);
		КонецЕсли;
	КонецЦикла;

	// теперь проверим исключения
	Если СтруктураИсключений<>Неопределено Тогда
		Для Каждого ТекущийЭлементСтруктуры Из СтруктураИсключений Цикл
			Если ТекущийЭлементСтруктуры.Значение Тогда
				// надо добавить реквизит, если его еще нет
				СтруктураРеквизитовДокумента.Вставить(ТекущийЭлементСтруктуры.Ключ);
			Иначе
				// надо удалить реквизит, если он есть
				СтруктураРеквизитовДокумента.Удалить(ТекущийЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СтруктураРеквизитовДокумента;

КонецФункции // ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования()

// Функция возвращает цену номенклатуры для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  Номенклатура         - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "ХарактеристикаНоменклатуры",
//  ТипЦен               - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                 - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения     - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить 
//                         цену, если не заполнен, то заполняется единицей цены
//  Валюта               - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                         если не заполнен, то заполняется валютой цены
//  Курс                 - число, курс требуемой валюты, если не заполнен, берется курс из регистра 
//                         сведений "Курсы валют",
//  Кратность            - число, кратность требуемой валюты, если не заполнена, берется курс из регистра 
//                         сведений "Курсы валют",
//  ПроцентСкидкиНаценки - число, процент наценки (скидки) на базовый тип цен, заполняется процентом 
//                         наценки (скидки) цены для цен, которые не рассчитываются автоматически.
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, ТипЦен, Дата = Неопределено, ЕдиницаИзмерения = Неопределено, 
	                           Валюта = Неопределено, Курс = 0, Кратность = 1, ПроцентСкидкиНаценки = 0, ДоговорКонтрагента = Неопределено) Экспорт

	ПолученнаяЦена = 0;

	ХарактеристикиНоменклатуры = Новый СписокЗначений;
	Если ХарактеристикаНоменклатуры <> Неопределено Тогда
		ХарактеристикиНоменклатуры.Добавить(ХарактеристикаНоменклатуры);
	КонецЕсли;
	ХарактеристикиНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	// Если дата не заполнена, возьмем рабочую дату
	Если ЗначениеНеЗаполнено(Дата) Тогда
		Дата = ПолучитьРабочуюДату();
	КонецЕсли; 

	Если ДоговорКонтрагента <> Неопределено Тогда
		Если ХарактеристикаНоменклатуры = Неопределено Тогда
			СтруктураЦеныПоУсловиямПоставки = РегистрыСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.ПолучитьПоследнее(Дата, Новый Структура("ДоговорКонтрагента, Номенклатура", ДоговорКонтрагента, Номенклатура));
		Иначе
			СтруктураЦеныПоУсловиямПоставки = РегистрыСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.ПолучитьПоследнее(Дата, Новый Структура("ДоговорКонтрагента, Номенклатура, ХарактеристикаНоменклатуры", ДоговорКонтрагента, Номенклатура, ХарактеристикаНоменклатуры));
			Если СтруктураЦеныПоУсловиямПоставки.Цена = 0 Тогда
				СтруктураЦеныПоУсловиямПоставки = РегистрыСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.ПолучитьПоследнее(Дата, Новый Структура("ДоговорКонтрагента, Номенклатура, ХарактеристикаНоменклатуры", ДоговорКонтрагента, Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ДоговорКонтрагента = Неопределено  
	 Или СтруктураЦеныПоУсловиямПоставки.Цена = 0 Тогда // особых условий нет

		ПолученнаяЦена = 0;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);

		Если ТипЦен.Рассчитывается Тогда  // Надо достать цену базового типа и рассчитать на наценке
			Запрос.УстановитьПараметр("ТипЦен", ТипЦен.БазовыйТипЦен);
			Запрос.УстановитьПараметр("ТипЦенРасчетный", ТипЦен);
		Иначе
			Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		КонецЕсли;

		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ЦеныНоменклатурыСрезПоследних.Цена,
		               |	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
		               |";
		Если ТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст + "
		               |	ВЫБОР КОГДА ВложенныйЗапрос.ПроцентСкидкиНаценки = 0
		               |		ИЛИ ВложенныйЗапрос.ПроцентСкидкиНаценки ЕСТЬ NULL
		               |	ТОГДА
		               |		0
		               |	ИНАЧЕ
		               |		ВложенныйЗапрос.ПроцентСкидкиНаценки
		               |	КОНЕЦ КАК ПроцентСкидкиНаценки,
		               |";
		Иначе
			Запрос.Текст = Запрос.Текст + "
		               |	ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки,
		               |";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		               |	ЦеныНоменклатурыСрезПоследних.Валюта
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура 
		               |                                                   И ТипЦен = &ТипЦен 
		               |                                                   И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)
		               |                                                   ) КАК ЦеныНоменклатурыСрезПоследних
		               |";
		Если ТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст + "
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		               |			ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		               |			ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		               |		ИЗ
		               |			РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		               |		
		               |		ГДЕ
		               |			ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦенРасчетный) КАК ВложенныйЗапрос
		               |		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура И ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
		               |";
		КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры УБЫВ
		               |";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда

			ВалютаТекущая = Выборка.Валюта;
			Если ТипЦен.Рассчитывается Тогда
				ВалютаТекущая  = ТипЦен.ВалютаЦены;
				ПолученнаяЦена       = ПересчитатьЦенуПриИзмененииВалюты(Выборка.Цена, Выборка.Валюта, ВалютаТекущая, 0, 0, Дата);
				ПроцентСкидкиНаценки = ? (ЗначениеНеЗаполнено(Выборка.ПроцентСкидкиНаценки),
				                          ТипЦен.ПроцентСкидкиНаценки, Выборка.ПроцентСкидкиНаценки);
				ПолученнаяЦена = ПолученнаяЦена * (1 + ПроцентСкидкиНаценки / 100);
				
			Иначе
				ПолученнаяЦена       = Выборка.Цена;
				//ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
			КонецЕсли;

			// Пересчитаем цену по коэффициенту ЕдиницаИзмерения,
			// если ЕдиницаИзмерения не заполнено, то она устанавливается равной ЕдиницаЦены
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(ПолученнаяЦена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ОкруглитьЦену(ПолученнаяЦена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);

			// Пересчитаем цену в валюту Валюта, если она не заполнена, то установим ее в ВалютаЦены
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, ВалютаТекущая, Валюта, Курс, Кратность, Дата);
		КонецЕсли;
	Иначе
		// надо взять цену из условий поставки
		ПолученнаяЦена = СтруктураЦеныПоУсловиямПоставки.Цена;

		// Пересчитаем цену по коэффициенту ЕдиницаИзмерения,
		// если ЕдиницаИзмерения не заполнено, то она устанавливается равной ЕдиницаЦены
		ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(ПолученнаяЦена, СтруктураЦеныПоУсловиямПоставки.ЕдиницаИзмерения, ЕдиницаИзмерения);

		// Пересчитаем цену в валюту Валюта
		ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, СтруктураЦеныПоУсловиямПоставки.ВалютаЦены, Валюта, Курс, Кратность, Дата);
	КонецЕсли;

	Возврат ПолученнаяЦена;

КонецФункции // ПолучитьЦенуНоменклатуры()

// Функция возвращает процент скидки (наценки) для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, используется, например, для.получения наценки цены в рознице.
//
// Параметры: 
//  Номенклатура               - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "Характеристики номенклатуры",
//  ТипЦен                     - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                       - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата.
//  ТолькоИзРегистра           - булево, "Истина" если необходимо получать данные только из регистра.
//  НетДанных                  - булево, устанавливается в "Ложь" если нет данных в регистре сведений, "Истина" если есть.
//
// Возвращаемое значение:
//  Число, значение процента скидки (наценки).
//
Функция ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, ТипЦен, Дата = Неопределено, ТолькоИзРегистра = Ложь, НетДанных = Истина) Экспорт

	ПроцентСкидкиНаценки = 0;
	НетДанных            = Истина;

	ХарактеристикиНоменклатуры = Новый СписокЗначений;
	Если ХарактеристикаНоменклатуры <> Неопределено Тогда
		ХарактеристикиНоменклатуры.Добавить(ХарактеристикаНоменклатуры);
	КонецЕсли;
	ХарактеристикиНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	// Если дата не заполнена, возьмем рабочую дату
	Если ЗначениеНеЗаполнено(Дата) Тогда
		Дата = ПолучитьРабочуюДату();
	КонецЕсли;

	ПроцентСкидкиНаценки = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПроцентСкидкиНаценки
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен
	|                                                         И ХарактеристикаНоменклатуры В(&ХарактеристикиНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикаНоменклатуры УБЫВ
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
		НетДанных            = Ложь;
	КонецЕсли;

	Если ТипЦен.Рассчитывается И НЕ ТолькоИзРегистра Тогда
		Если ЗначениеНеЗаполнено(ПроцентСкидкиНаценки) Тогда // Процент скидки задан в типе цен
			ПроцентСкидкиНаценки = ТипЦен.ПроцентСкидкиНаценки;
		КонецЕсли;
	КонецЕсли;

	Возврат ПроцентСкидкиНаценки;

КонецФункции // ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры()

// Функция возвращает цену контрагента для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  Номенклатура               - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "Характеристики номенклатуры",
//  Контрагент                 - ссылка на элемент справочника "Контрагенты", для которого надо получить цену,
//  ТипЦен                     - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                       - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения           - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить 
//                               цену, если не заполнен, то заполняется единицей цены
//  Валюта                     - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                               если не заполнен, то заполняется валютой цены
//  Курс                       - число, курс требуемой валюты, если не заполнен, берется курс из регистра 
//                               сведений "Курсы валют".
//  Кратность                  - число, кратность требуемой валюты, если не заполнена, берется курс из регистра 
//                               сведений "Курсы валют".
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуКонтрагента(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, Контрагент, ТипЦен, Дата = Неопределено, ЕдиницаИзмерения = Неопределено, 
	                              Валюта = Неопределено, Курс = 0, Кратность = 1, ДоговорКонтрагента = Неопределено) Экспорт

	ПолученнаяЦена = 0;

	ХарактеристикиНоменклатуры = Новый СписокЗначений;
	Если ХарактеристикаНоменклатуры <> Неопределено Тогда
		ХарактеристикиНоменклатуры.Добавить(ХарактеристикаНоменклатуры);
	КонецЕсли;
	ХарактеристикиНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	// Если дата не заполнена, возьмем рабочую дату
	Если ЗначениеНеЗаполнено(Дата) Тогда
		Дата = ПолучитьРабочуюДату();
	КонецЕсли; 

	Если ДоговорКонтрагента <> Неопределено Тогда
		Если ХарактеристикаНоменклатуры = Неопределено Тогда
			СтруктураЦеныПоУсловиямПоставки = РегистрыСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.ПолучитьПоследнее(Дата, Новый Структура("ДоговорКонтрагента, Номенклатура", ДоговорКонтрагента, Номенклатура));
		Иначе
			СтруктураЦеныПоУсловиямПоставки = РегистрыСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.ПолучитьПоследнее(Дата, Новый Структура("ДоговорКонтрагента, Номенклатура, ХарактеристикаНоменклатуры", ДоговорКонтрагента, Номенклатура, ХарактеристикаНоменклатуры));
			Если СтруктураЦеныПоУсловиямПоставки.Цена = 0 Тогда
				СтруктураЦеныПоУсловиямПоставки = РегистрыСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.ПолучитьПоследнее(Дата, Новый Структура("ДоговорКонтрагента, Номенклатура, ХарактеристикаНоменклатуры", ДоговорКонтрагента, Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ДоговорКонтрагента = Неопределено  
	 Или СтруктураЦеныПоУсловиямПоставки.Цена = 0 Тогда // особых условий нет

		ПолученнаяЦена = 0;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);

		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Цена,
		|	ЕдиницаИзмерения,
		|	Валюта
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен
		|                                                                     И ХарактеристикаНоменклатуры В(&ХарактеристикиНоменклатуры)) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХарактеристикаНоменклатуры УБЫВ
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда

			ПолученнаяЦена = Выборка.Цена;

			// Пересчитаем цену по коэффициенту ЕдиницаИзмерения,
			// если ЕдиницаИзмерения не заполнено, то она устанавливается равной ЕдиницаЦены
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(ПолученнаяЦена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);

			// Пересчитаем цену в валюту Валюта, если она не заполнена, то установим ее в ВалютыЦены
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, Выборка.Валюта, Валюта, Курс, Кратность, КонецДня(Дата));
		КонецЕсли;

	Иначе
		// надо взять цену из условий поставки
		ПолученнаяЦена = СтруктураЦеныПоУсловиямПоставки.Цена;

		// Пересчитаем цену по коэффициенту ЕдиницаИзмерения,
		// если ЕдиницаИзмерения не заполнено, то она устанавливается равной ЕдиницаЦены
		ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(ПолученнаяЦена, СтруктураЦеныПоУсловиямПоставки.ЕдиницаИзмерения, ЕдиницаИзмерения);

		// Пересчитаем цену в валюту Валюта
		ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, СтруктураЦеныПоУсловиямПоставки.ВалютаЦены, Валюта, Курс, Кратность, Дата);
	КонецЕсли;

	Возврат ПолученнаяЦена;

КонецФункции // ПолучитьЦенуКонтрагента()

// Выполняем пересчет документа после изменений в форме "Цены и валюта".
//
// Параметры: 
//  ДокументОбъект                 - документ; 
//  СпособЗаполненияЦен            - ссылка на перечисление СпособыЗаполненияЦен, определяет способ расчета,
//                                  "при продаже" или "при покупке".
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа,
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре.
//  ИмяТабличнойЧасти              - строка, имя табличной части, которую надо пересчитать.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СкидкаУстановлена              - переменная мСкидкаУстановлена модуля формы документа.
//  СтруктураЗначений              - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//                                   документа до и после их изменеия в общей форме).
//  Автозаполнение                 - признак автозаполнения
//
Процедура ОбработатьИзмененияПоКнопкеЦеныВалюта( ДокументОбъект, СпособЗаполненияЦен,
	                                             СтруктураРеквизитовДокумента,
	                                             ИмяТабличнойЧасти, ВалютаРегламентированногоУчета,
	                                             СкидкаУстановлена, СтруктураЗначений, Автозаполнение) Экспорт

	МетаданныеДокумента              = ДокументОбъект.Метаданные();
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

	ИспользоватьКолонкуСкладПриПродаже =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
	                                    Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

	НеРассчитыватьПоРозничнымСкладам = (ТипЗнч(ДокументОбъект) = Тип ("ДокументОбъект.ОтчетОРозничныхПродажах"))
	                                 И (ИспользоватьКолонкуСкладПриПродаже);

	// Заполним нужные реквизиты документа
	УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта(СтруктураЗначений, ДокументОбъект, СтруктураРеквизитовДокумента);

	// если в табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Если ДокументОбъект[ИмяТабличнойЧасти].Количество() > 0 Тогда
		НадоПересчитывать = Истина;
	КонецЕсли;

	СтруктураПоиска = Новый Структура; // Для поиска в результате запроса
	ПересчитатьЦенуПоФлагамНалогов = Ложь; // Инициализация переменной

	ЕстьЦена                       = ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСумма                      = ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаПередачи               = ЕстьРеквизитТабЧастиДокумента("ЦенаПередачи", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаПередачи              = ЕстьРеквизитТабЧастиДокумента("СуммаПередачи", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаПоступления            = ЕстьРеквизитТабЧастиДокумента("ЦенаПоступления", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаПоступления           = ЕстьРеквизитТабЧастиДокумента("СуммаПоступления", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаСтарая                 = ЕстьРеквизитТабЧастиДокумента("ЦенаСтарая", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаСтарая                = ЕстьРеквизитТабЧастиДокумента("СуммаСтарая", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьФактурнаяСтоимость         = ЕстьРеквизитТабЧастиДокумента("ФактурнаяСтоимость", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьХарактеристикаНоменклатуры = ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаТовара                = ЕстьРеквизитТабЧастиДокумента("СуммаТовара", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаНДС                   = ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти);

	// Если задано пользователем, то надо перезаполнить табличную часть по новому типу цен
	Если СтруктураЗначений.ПерезаполнитьЦеныПоТипу и ЕстьЦена Тогда

		// Получить нужные цены запросом
		РезультатЗапросаЦен = СформироватьЗапросПоЦенам(СтруктураЗначений, 
		                                                СпособЗаполненияЦен, 
		                                                ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку("Номенклатура"),
		                                                ДокументОбъект.Дата, 
		                                                ?(ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента),
		                                                ДокументОбъект.Контрагент, Неопределено),
		                                                ?(ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента),
		                                                ДокументОбъект.ДоговорКонтрагента, Неопределено));

		ВыборкаРезультатЗапросаЦен = РезультатЗапросаЦен.Выбрать();

		СтруктураПоиска = Новый Структура(); // структура для поиска в результате запроса

		// В цикле по ТЧ перезаполняем цены, приводя их к текущим скидкам, валюте и режиму налогообложения
		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			// В Отчете о розничных продажах по "Цены и валюта" цена пересчитывается только для оптовых складов.
			Если НеРассчитыватьПоРозничнымСкладам
			   И НЕ ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Склад)
			   И СтрокаТабличнойЧасти.Склад.ВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
				Продолжить;
			КонецЕсли;

			// Если у нас способ заполнения цен "по розничным ценам", то перезаполнять по типу можно
			// только для услуг, для Товаров на розничном складе цена является измерением регистра остатков.
			Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам 
			   И Не СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
				Продолжить;
			КонецЕсли;

			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтарыйКоэффициент = 0;
			Если Автозаполнение И ЕстьРеквизитТабЧастиДокумента("Коэффициент", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СтарыйКоэффициент = СтрокаТабличнойЧасти.Коэффициент;
			КонецЕсли;
			Если ЕстьХарактеристикаНоменклатуры Тогда
				ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
			Иначе
				ХарактеристикаНоменклатуры = Неопределено;
			КонецЕсли;

			ЗаполнитьЦенуВСтрокеТабличнойЧасти(ДокументОбъект,
			                                   СтрокаТабличнойЧасти,
			                                   СтруктураПоиска,
			                                   ВыборкаРезультатЗапросаЦен,
			                                   СтруктураЗначений,
			                                   СпособЗаполненияЦен,
			                                   ХарактеристикаНоменклатуры);

			Если Автозаполнение И СтарыйКоэффициент > 0 Тогда
				Если СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество*СтарыйКоэффициент
					                                  /СтрокаТабличнойЧасти.Коэффициент;
				КонецЕсли;
			КонецЕсли;

			Если СтруктураЗначений.ПересчитатьЦеныПоВалюте Тогда
				Если ЕстьЦенаПередачи Тогда
					СтрокаТабличнойЧасти.ЦенаПередачи = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПередачи,
					                                    СтруктураЗначений.ТекущийВалютаДокумента, 
					                                    СтруктураЗначений.НовыйВалютаДокумента,
					                                    СтруктураЗначений.ТекущийКурсДокумента, 
					                                    СтруктураЗначений.НовыйКурсДокумента,
					                                    СтруктураЗначений.ТекущийКратностьДокумента, 
					                                    СтруктураЗначений.НовыйКратностьДокумента);

					Если ЕстьСуммаПередачи Тогда
						СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				КонецЕсли;

				Если ЕстьЦенаПоступления Тогда
					СтрокаТабличнойЧасти.ЦенаПоступления = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПоступления,
					                                       СтруктураЗначений.ТекущийВалютаДокумента, 
					                                       СтруктураЗначений.НовыйВалютаДокумента,
					                                       СтруктураЗначений.ТекущийКурсДокумента, 
					                                       СтруктураЗначений.НовыйКурсДокумента,
					                                       СтруктураЗначений.ТекущийКратностьДокумента, 
					                                       СтруктураЗначений.НовыйКратностьДокумента);

					Если ЕстьСуммаПоступления Тогда
						СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				КонецЕсли;

				Если ЕстьЦенаСтарая Тогда
					СтрокаТабличнойЧасти.ЦенаСтарая = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаСтарая,
					                                  СтруктураЗначений.ТекущийВалютаДокумента, 
					                                  СтруктураЗначений.НовыйВалютаДокумента,
					                                  СтруктураЗначений.ТекущийКурсДокумента, 
					                                  СтруктураЗначений.НовыйКурсДокумента,
					                                  СтруктураЗначений.ТекущийКратностьДокумента, 
					                                  СтруктураЗначений.НовыйКратностьДокумента);

					Если ЕстьСуммаСтарая Тогда
						СтрокаТабличнойЧасти.СуммаСтарая = СтрокаТабличнойЧасти.ЦенаСтарая * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;

				ИначеЕсли ЕстьСуммаСтарая Тогда
					СтрокаТабличнойЧасти.СуммаСтарая = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаСтарая,
					                                   СтруктураЗначений.ТекущийВалютаДокумента, 
					                                   СтруктураЗначений.НовыйВалютаДокумента,
					                                   СтруктураЗначений.ТекущийКурсДокумента, 
					                                   СтруктураЗначений.НовыйКурсДокумента,
					                                   СтруктураЗначений.ТекущийКратностьДокумента, 
					                                   СтруктураЗначений.НовыйКратностьДокумента);
				КонецЕсли;
				Если ЕстьФактурнаяСтоимость Тогда
					СтрокаТабличнойЧасти.ЕстьФактурнаяСтоимость = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ФактурнаяСтоимость,
					                                              СтруктураЗначений.ТекущийВалютаДокумента, 
					                                              СтруктураЗначений.НовыйВалютаДокумента,
					                                              СтруктураЗначений.ТекущийКурсДокумента, 
					                                              СтруктураЗначений.НовыйКурсДокумента,
					                                              СтруктураЗначений.ТекущийКратностьДокумента, 
					                                              СтруктураЗначений.НовыйКратностьДокумента);
				КонецЕсли;
			КонецЕсли;

			// Выполним действия при изменении цены
			// Розничную цену будем рассчитывать только тогда, когда задается процент наценки.
			Если ЕстьРеквизитТабЧастиДокумента("ПроцентРозничнойНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) 
			   И ЕстьРеквизитТабЧастиДокумента("ЦенаВРознице", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
			КонецЕсли; 

			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			Если ЕстьСуммаНДС И ЕстьСумма Тогда
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;

		КонецЦикла; // Цикл по ТЧ для заполнения цен при изменении типа цен

	Иначе

		// Определим необходимость перерасчета цены
		ПересчитатьЦенуПоФлагамНалогов = ОпределитьНеобходимостьПерерасчетаЦены(СтруктураЗначений);

		Если СтруктураЗначений.ПересчитатьЦеныПоВалюте ИЛИ ПересчитатьЦенуПоФлагамНалогов Тогда


			// В цикле по табличной части перезаполняем цены, приводя их к текущим валюте и режиму налогообложения
			Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти]Цикл

				// В случае, если поменялась валюта
				Если СтруктураЗначений.ПересчитатьЦеныПоВалюте Тогда
					Если ЕстьЦена Тогда
						СтрокаТабличнойЧасти.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена,
						                                     СтруктураЗначений.ТекущийВалютаДокумента, 
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента, 
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента, 
						                                     СтруктураЗначений.НовыйКратностьДокумента);

						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
							                                                                     Неопределено,
							                                                                     СтруктураЗначений.ТекущийСуммаВключаетНДС,
							                                                                     СтруктураЗначений.НовыйУчитыватьНДС,
							                                                                     СтруктураЗначений.НовыйСуммаВключаетНДС, 
							                                                                     ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						КонецЕсли;

						РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						Если ЕстьСуммаНДС И ЕстьСумма Тогда
							РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;

					Иначе
						Если ЕстьСуммаТовара Тогда
							СтрокаТабличнойЧасти.СуммаТовара = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаТовара,
							                                     СтруктураЗначений.ТекущийВалютаДокумента, 
							                                     СтруктураЗначений.НовыйВалютаДокумента,
							                                     СтруктураЗначений.ТекущийКурсДокумента, 
							                                     СтруктураЗначений.НовыйКурсДокумента,
							                                     СтруктураЗначений.ТекущийКратностьДокумента, 
							                                     СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;

						Если ЕстьСумма Тогда
							СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
							                                     СтруктураЗначений.ТекущийВалютаДокумента, 
							                                     СтруктураЗначений.НовыйВалютаДокумента,
							                                     СтруктураЗначений.ТекущийКурсДокумента, 
							                                     СтруктураЗначений.НовыйКурсДокумента,
							                                     СтруктураЗначений.ТекущийКратностьДокумента, 
							                                     СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;

						Если ЕстьСуммаНДС И ЕстьСумма Тогда
							РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
					КонецЕсли;

					Если ЕстьЦенаПередачи Тогда
						СтрокаТабличнойЧасти.ЦенаПередачи = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПередачи,
						                                     СтруктураЗначений.ТекущийВалютаДокумента, 
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента, 
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента, 
						                                     СтруктураЗначений.НовыйКратностьДокумента);
						
						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.ЦенаПередачи = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.ЦенаПередачи, 
							                                                                     Неопределено,
							                                                                     СтруктураЗначений.ТекущийСуммаВключаетНДС,
							                                                                     СтруктураЗначений.НовыйУчитыватьНДС,
							                                                                     СтруктураЗначений.НовыйСуммаВключаетНДС, 
							                                                                     ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						КонецЕсли;

						Если ЕстьСуммаПередачи Тогда
							СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
						
						Если ЕстьРеквизитТабЧастиДокумента("СуммаНДСПередачи", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЕстьЦенаПоступления Тогда
						СтрокаТабличнойЧасти.ЦенаПоступления = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПоступления,
						                                     СтруктураЗначений.ТекущийВалютаДокумента, 
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента, 
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента, 
						                                     СтруктураЗначений.НовыйКратностьДокумента);
						Если ЕстьСуммаПоступления Тогда
							СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
					КонецЕсли;
					Если ЕстьЦенаСтарая Тогда
						СтрокаТабличнойЧасти.ЦенаСтарая = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаСтарая,
						                                     СтруктураЗначений.ТекущийВалютаДокумента, 
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента, 
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента, 
						                                     СтруктураЗначений.НовыйКратностьДокумента);
						Если ЕстьСуммаСтарая Тогда
							СтрокаТабличнойЧасти.СуммаСтарая = СтрокаТабличнойЧасти.ЦенаСтарая * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
					ИначеЕсли ЕстьСуммаСтарая Тогда
						СтрокаТабличнойЧасти.СуммаСтарая = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаСтарая,
						                                     СтруктураЗначений.ТекущийВалютаДокумента, 
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента, 
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента, 
						                                     СтруктураЗначений.НовыйКратностьДокумента);
					КонецЕсли;
					Если ЕстьФактурнаяСтоимость Тогда
						СтрокаТабличнойЧасти.ФактурнаяСтоимость = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ФактурнаяСтоимость,
						                                             СтруктураЗначений.ТекущийВалютаДокумента, 
						                                             СтруктураЗначений.НовыйВалютаДокумента,
						                                             СтруктураЗначений.ТекущийКурсДокумента, 
						                                             СтруктураЗначений.НовыйКурсДокумента,
						                                             СтруктураЗначений.ТекущийКратностьДокумента, 
						                                             СтруктураЗначений.НовыйКратностьДокумента);
					КонецЕсли;

				Иначе
					Если ЕстьЦена Тогда

						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
							                            Неопределено,
							                            СтруктураЗначений.ТекущийСуммаВключаетНДС,
							                            СтруктураЗначений.НовыйУчитыватьНДС,
							                            СтруктураЗначений.НовыйСуммаВключаетНДС, 
							                            ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						КонецЕсли;

						РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						Если ЕстьСуммаНДС И ЕстьСумма Тогда
							РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;

					КонецЕсли;
				КонецЕсли;

				Если ЕстьЦенаПередачи Тогда

					// Если надо пересчитать цены при изменении флагов налогообложения
					Если ПересчитатьЦенуПоФлагамНалогов
					   И ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						СтрокаТабличнойЧасти.ЦенаПередачи = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.ЦенаПередачи, 
																							 Неопределено,
																							 СтруктураЗначений.ТекущийСуммаВключаетНДС,
																							 СтруктураЗначений.НовыйУчитыватьНДС,
																							 СтруктураЗначений.НовыйСуммаВключаетНДС, 
																							 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					КонецЕсли;

					Если ЕстьСуммаПередачи Тогда
						СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;

					Если ЕстьРеквизитТабЧастиДокумента("СуммаНДСПередачи", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
					КонецЕсли;

				КонецЕсли;

				// Розничную цену будем рассчитывать только тогда, когда задается процент наценки.
				Если ЕстьРеквизитТабЧастиДокумента("ПроцентРозничнойНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) 
				   И ЕстьРеквизитТабЧастиДокумента("ЦенаВРознице", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныВалюта()

// Рассчитываем итоговую плановую себестоимость по документу
//
// Параметры: 
//  ДокументОбъект - объект документа, в котором надо рассчитать итоговую плановую себестоимость
//
// Возвращаемое значение:
//  Итоговая плановая себестоимость по документу со всеми налогами.
//
Функция ИтогПлановаяСебестоимость(ДокументОбъект) Экспорт

	Перем СуммаПлановойСебестоимости;

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается
		Возврат Неопределено;
	КонецЕсли;

	ИтогПлановаяСебестоимость = 0;

	// Суммируем значения плановой себестоимости по каждой строке табличной части
	Для каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл

		ПолучитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СуммаПлановойСебестоимости);

		// Если хотя бы в одной строке плановая себестоимость будет неопределенной,
		// то считаем, что и итоговая плановая себестоимость по документу
		// также будет неопределенной.
		Если СуммаПлановойСебестоимости = Неопределено Тогда
			Прервать;
		КонецЕсли;

		ИтогПлановаяСебестоимость = ИтогПлановаяСебестоимость + СуммаПлановойСебестоимости;

	КонецЦикла;

	Возврат ИтогПлановаяСебестоимость;

КонецФункции // ИтогПлановаяСебестоимость()

// Рассчитываем итоговое отклонение от плановой себестоимости по документу
//
// Параметры: 
//  ДокументОбъект                           - объект документа, в котором надо рассчитать 
//                                             итоговое отклонение от плановой себестоимости
//  ПроцентОтклоненияОтПлановойСебестоимости - в этот параметр будет помещено значение.
//
// Возвращаемое значение:
//  Итоговое отклонение от плановой себестоимости по документу со всеми налогами.
//
Функция ПолучитьИтоговоеОтклонениеОтПлановойСебестоимости(ДокументОбъект, ПроцентОтклоненияОтПлановойСебестоимости = 0) Экспорт

	Перем ИтогОтклонениеОтПлановойСебестоимости;

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается
		Возврат Неопределено;
	КонецЕсли;

	ИтогПлановаяСебестоимость = ИтогПлановаяСебестоимость(ДокументОбъект);

	Если ИтогПлановаяСебестоимость = Неопределено Тогда

		// Если итоговая плановая себестоимость неопределена, 
		// информация об отклонение от плановой себестоимости будет неопределенной.
		ИтогОтклонениеОтПлановойСебестоимости    = Неопределено;
		ПроцентОтклоненияОтПлановойСебестоимости = Неопределено;
	Иначе

		// Если итоговая плановая себестоимость определена, рассчитываем отклонение.
		ИтогОтклонениеОтПлановойСебестоимости = ПолучитьСуммуДокументаСНДС(ДокументОбъект, "Товары") - ИтогПлановаяСебестоимость;

	КонецЕсли;

	Если ИтогПлановаяСебестоимость = 0 Тогда
		ПроцентОтклоненияОтПлановойСебестоимости = Неопределено;
	Иначе
		ПроцентОтклоненияОтПлановойСебестоимости = (ИтогОтклонениеОтПлановойСебестоимости / ИтогПлановаяСебестоимость) * 100;
	КонецЕсли;

	Возврат ИтогОтклонениеОтПлановойСебестоимости;

КонецФункции // ПолучитьИтоговоеОтклонениеОтПлановойСебестоимости()

// По реквизитам редактируемого документа устанавливает реквизиты общей формы "Цены и Валюта".
//
// Параметры: 
//  ФормаЦеныВалюты                - форма, соответствует общей контекст общей форме "Цены и Валюта", 
//  ДокументОбъект                 - объект редактируемого документа
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа,
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре.
//                                   Множество возможных ключей: (ТипЦен, ВалютаДокумента, КурсДокумента, 
//								     КратностьДокумента, УчитыватьНДС, СуммаВключаетНДС);
//  ИмяТабличнойЧасти              - строка, имя табличной части, которую надо пересчитать, 
//                                   по умолчанию - "Товары".
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  НовыйТипЦенДляУстановки        - тип цен, который по возможности нужно установить как новый в форме;
//
Процедура УстановитьТекущиеРеквизитыФормаЦеныВалюты(ФормаЦеныВалюты, ДокументОбъект,
	                                                СтруктураРеквизитовДокумента, ИмяТабличнойЧасти,
	                                                ВалютаРегламентированногоУчета,
	                                                НовыйТипЦенДляУстановки = Неопределено)

	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	НадоПересчитывать   = Ложь;

	Для каждого ТЧОбъекта Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ФормаЦеныВалюты.ТабличнаяЧастьПуста = Не НадоПересчитывать;

	// Для получения курса на дату
	ФормаЦеныВалюты.ДатаКурса = ДокументОбъект.Дата;

	// определим текущую валюту взиморасчетов
	ТекущийВалютаВзаиморасчетов = "";
	Контрагент                  = "";
	
	Если СтруктураРеквизитовДокумента.Свойство("БезКонтроляВалютыВзаиморасчетов") Тогда
		ТекущийВалютаВзаиморасчетов                 = Неопределено;
		ФормаЦеныВалюты.ТекущийВалютаВзаиморасчетов = ТекущийВалютаВзаиморасчетов;
		ФормаЦеныВалюты.ПересчитатьЦеныПоВалюте     = Истина;

		Запрос = Новый Запрос;

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Валюты.Ссылка КАК Валюта
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|УПОРЯДОЧИТЬ ПО
		|	Валюта";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.Добавить(Выборка.Валюта);
		КонецЕсли;

		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.КнопкаОчистки = Ложь;
	Иначе
		Если НЕ СтруктураРеквизитовДокумента.Свойство("ВызовКорректировкаЗаказа")
		   И ДокументОбъект.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			Если ДокументОбъект.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
				ТекущийВалютаВзаиморасчетов = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Иначе
				ТекущийВалютаВзаиморасчетов = ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;

			ФормаЦеныВалюты.ТекущийВалютаВзаиморасчетов = ТекущийВалютаВзаиморасчетов;
		ИначеЕсли СтруктураРеквизитовДокумента.Свойство("Контрагент", Контрагент) Тогда
			ДоговорКонтрагента = "";

			Если СтруктураРеквизитовДокумента.Свойство("ДоговорКонтрагента", ДоговорКонтрагента) Тогда
				ТекущийВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Иначе
				ТекущийВалютаВзаиморасчетов = Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;

			ФормаЦеныВалюты.ТекущийВалютаВзаиморасчетов = ТекущийВалютаВзаиморасчетов;
		КонецЕсли;

		// может быть, надо ограничить список доступных валют для документа?
		// сделаем это, если, во-первых, существует валюта документа, во-вторых, существует валюта взаиморасчетов
		// (т.е. передается курс взаиморасчетов)
		Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов")
		   И НЕ СтруктураРеквизитовДокумента.Свойство("КурсДокумента")
		   И СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента") Тогда
			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.РежимВыбораИзСписка = Истина;
			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.Добавить(ТекущийВалютаВзаиморасчетов);

			Если ВалютаРегламентированногоУчета <> ТекущийВалютаВзаиморасчетов Тогда
				ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.Добавить(ВалютаРегламентированногоУчета);
			КонецЕсли;

			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.КнопкаВыбора  = Ложь;
			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.КнопкаОчистки = Ложь;
		КонецЕсли;
	КонецЕсли;

	Для каждого ЭлементСтруктуры Из СтруктураРеквизитовДокумента Цикл
		Если ФормаЦеныВалюты.ЭлементыФормы.Найти("Текущий" + ЭлементСтруктуры.Ключ) <> Неопределено
		 Или ЭлементСтруктуры.Ключ = "КратностьВзаиморасчетов" 
		 Или ЭлементСтруктуры.Ключ = "ПерезаполнитьЦеныПоТипу"  //+++ 29.12.2014
		 Или ЭлементСтруктуры.Ключ = "КратностьДокумента" Тогда

			Если ЕстьРеквизитДокумента(ЭлементСтруктуры.Ключ, МетаданныеДокумента) Тогда
				ФормаЦеныВалюты["Текущий" + ЭлементСтруктуры.Ключ] = ДокументОбъект[ЭлементСтруктуры.Ключ];
			Иначе
				//+++ 29.12.2014 при открытии - не всегда надо ЛОЖЬ!
				Если ЭлементСтруктуры.Ключ = "ПерезаполнитьЦеныПоТипу" Тогда
					ФормаЦеныВалюты[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
				Иначе	
					ФормаЦеныВалюты["Текущий" + ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
				КонецЕсли;
			КонецЕсли;

			Если ЭлементСтруктуры.Значение = Неопределено Тогда
				ФормаЦеныВалюты["Новый" + ЭлементСтруктуры.Ключ] = ФормаЦеныВалюты["Текущий" + ЭлементСтруктуры.Ключ];
			Иначе
				//+++ 29.12.2014 при открытии - не всегда надо ЛОЖЬ!
				Если ЭлементСтруктуры.Ключ = "ПерезаполнитьЦеныПоТипу" Тогда
					ФормаЦеныВалюты[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
				Иначе	
					ФормаЦеныВалюты["Новый" + ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Установить текущий курс и кратность
	Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		ФормаЦеныВалюты.ТекущийКурсДокумента      = КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		ФормаЦеныВалюты.ТекущийКратностьДокумента = КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	КонецЕсли;

	// Вызов при изменении значения договора
	Если СтруктураРеквизитовДокумента.Свойство("ВызовПриИзмененииЗначенияДоговора") Тогда
		ФормаЦеныВалюты.НовыйВалютаДокумента    = ТекущийВалютаВзаиморасчетов;
		ФормаЦеныВалюты.ПересчитатьЦеныПоВалюте = Истина;
	КонецЕсли;

	// Вызов при изменении учетной политики розничная торговля облагается ЕНВД
	ЗначениеВызова = Неопределено;
	Если СтруктураРеквизитовДокумента.Свойство("ВызовПриИзмененииУчетнойПолитикиЕНВД", ЗначениеВызова) Тогда
		Если ЗначениеВызова = "Покупка" Тогда
			ФормаЦеныВалюты.НовыйНДСВключенВСтоимость = Истина;
		Иначе
			ФормаЦеныВалюты.НовыйУчитыватьНДС     = Ложь;
			ФормаЦеныВалюты.НовыйСуммаВключаетНДС = Ложь;
		КонецЕсли;
	КонецЕсли;

	// если в списке есть тип цен
	// и
	// если ТипЦен в документе имеет тип ТипЦенКонтрагентов, надо установить владельца
	// предполагаем, что если существует реквизит ТипЦен, то он может принимать два значения - 
	// типы цен номенклатуры и типы цен контрагентов
	Если СтруктураРеквизитовДокумента.Свойство("ТипЦен") 
	   и Метаданные.НайтиПоТипу(ТипЗнч(ДокументОбъект.ТипЦен)).Имя = "ТипыЦенНоменклатурыКонтрагентов" Тогда

		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Если ЕстьРеквизитДокумента("Контрагент", ДокументОбъект.Метаданные()) Тогда
			Контрагент = ДокументОбъект.Контрагент;
		Иначе
			СтруктураРеквизитовДокумента.Свойство("Контрагент", Контрагент);
		КонецЕсли;

		ФормаЦеныВалюты.ЭлементыФормы.НовыйТипЦен.ВыборПоВладельцу = Контрагент;
		// сохраним владельца для дальнейшего использования
		ФормаЦеныВалюты.ВладелецТипаЦен = Контрагент;

	КонецЕсли;

	// если уже при открытии новый тип цен отличается от текущего, надо обработать изменения реквизитов формы
	Если ФормаЦеныВалюты.НовыйТипЦен <> ФормаЦеныВалюты.ТекущийТипЦен 
	   и Не ЗначениеНеЗаполнено(ФормаЦеныВалюты.НовыйТипЦен) Тогда
		// надо установить флаг СуммаВключаемНДС из типа цены
		ФормаЦеныВалюты.НовыйСуммаВключаетНДС = ФормаЦеныВалюты.НовыйТипЦен.ЦенаВключаетНДС;
	КонецЕсли;

	// если мы используем режим выбора из списка для новой валюты документа
	// и в списке нет нужной валюты, установим новую валюту в валюту взаиморасчетов
	Если ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.РежимВыбораИзСписка = Истина
	   И ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.НайтиПоЗначению(ФормаЦеныВалюты.НовыйВалютаДокумента) = Неопределено Тогда
		ФормаЦеныВалюты.НовыйВалютаДокумента = ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора[0].Значение;
	КонецЕсли;

	// Если передан НовыйТипЦенДляУстановки и он подходит по параметрам, установим его в форме
	Если НовыйТипЦенДляУстановки <> Неопределено
	   И СтруктураРеквизитовДокумента.Свойство("ТипЦен") 
	   И Метаданные.НайтиПоТипу(ТипЗнч(ДокументОбъект.ТипЦен)).Имя = НовыйТипЦенДляУстановки.Метаданные().Имя Тогда
		ФормаЦеныВалюты.НовыйТипЦен = НовыйТипЦенДляУстановки;
	КонецЕсли;
	
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
	
		ФормаЦеныВалюты.Контрагент = ДокументОбъект.Контрагент;	
	
	КонецЕсли; 
	
КонецПроцедуры // УстановитьТекущиеРеквизитыФормаЦеныВалюты()

// Устанавливает доступность реквизитов общей формы "Цены и Валюта" согласно переданной структуре.
//
// Параметры: 
//  ФормаЦеныВалюты                    - форма, соответствует общей контекст общей форме "Цены и Валюта", 
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр.
//
Процедура УстановитьДоступностьРеквизитовФормаЦеныВалюты(ФормаЦеныВалюты, СтруктураРеквизитовДокумента,	СтруктураНеРедактируемыхРеквизитов = Неопределено)

	ФормаЦеныВалюты.ЭлементыФормы.НовыйТипЦен.Доступность                       = СтруктураРеквизитовДокумента.Свойство("ТипЦен");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.Доступность              = СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйКурсДокумента.Доступность                = СтруктураРеквизитовДокумента.Свойство("КурсДокумента");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность           = СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйУчитыватьНДС.Доступность                 = СтруктураРеквизитовДокумента.Свойство("УчитыватьНДС");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйСуммаВключаетНДС.Доступность             = СтруктураРеквизитовДокумента.Свойство("СуммаВключаетНДС");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйНДСВключенВСтоимость.Доступность         = СтруктураРеквизитовДокумента.Свойство("НДСВключенВСтоимость");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйРегистрироватьЦеныПоставщика.Доступность = СтруктураРеквизитовДокумента.Свойство("РегистрироватьЦеныПоставщика");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйИспользоватьПлановуюСебестоимость.Доступность = СтруктураРеквизитовДокумента.Свойство("ИспользоватьПлановуюСебестоимость");

	// Если задана структура исключений, то сделаем недоступными соответствующие реквизиты.
	Если СтруктураНеРедактируемыхРеквизитов <> Неопределено Тогда

		Для каждого ЭлементСтруктуры Из СтруктураНеРедактируемыхРеквизитов Цикл
    	//+++( 29.12.2014 - Горохов В. - только для Заказов покупателей - всегда перезаполнять цены по типу цен 
			Если ЭлементСтруктуры.Ключ = "ПерезаполнитьЦеныПоТипу" тогда
				ФормаЦеныВалюты.ЭлементыФормы.ПерезаполнитьЦеныПоТипу.Доступность =	ЭлементСтруктуры.Значение;
			Иначе 
				ФормаЦеныВалюты.ЭлементыФормы["Новый" + ЭлементСтруктуры.Ключ].Доступность = Ложь;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
 
КонецПроцедуры // УстановитьДоступностьРеквизитовФормаЦеныВалюты()

// Устанавливает новые значения реквизитов документа по значениям, выбранным в общей форме "Цены и Валюта"
//
// Параметры: 
//  СтруктураРезультирующихЗначений	- структура, содержащая значения реквизитов документа до и после их 
//									  изменеия в форме "Цены и валюта",
//  ДокументОбъект					- объект редактируемого документа,
//  СтруктураРеквизитовДокумента	- структура, задает список обрабатываемых реквизитов документа,
// 									  если реквизит надо обрабатывать, то для него есть ключ в этой структуре
//
Процедура УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта(СтруктураРезультирующихЗначений, ДокументОбъект, 
	                                                             СтруктураРеквизитовДокумента) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Для каждого ЭлементСтруктуры Из СтруктураРеквизитовДокумента Цикл
		Если СтруктураРезультирующихЗначений.Свойство("Новый" + ЭлементСтруктуры.Ключ)
		   И ЕстьРеквизитДокумента(ЭлементСтруктуры.Ключ, МетаданныеДокумента) Тогда
			ДокументОбъект[ЭлементСтруктуры.Ключ] = СтруктураРезультирующихЗначений["Новый" + ЭлементСтруктуры.Ключ];
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта()

// Определяет необходимость пересчета табличной части документа при изменении флагов налогообложения 
// в форме "Цены и валюты".
//
// Параметры: 
//  СтруктураЗначений	- структура, содержащая значения реквизитов документа до и после их 
//						  изменеия в форме "Цены и валюта".
//
Функция ОпределитьНеобходимостьПерерасчетаЦены(СтруктураЗначений) Экспорт

		Возврат (СтруктураЗначений.НовыйУчитыватьНДС <> СтруктураЗначений.ТекущийУчитыватьНДС) ИЛИ
		        (СтруктураЗначений.НовыйСуммаВключаетНДС <> СтруктураЗначений.ТекущийСуммаВключаетНДС);

КонецФункции // ОпределитьНеобходимостьПерерасчетаЦены()

// Получает контекст общей формы "Цены и Валюта", устанавливает в ней значения и доступность реквизитов 
// по значениям, заданным в документе, и открывает форму. 
//
// Параметры: 
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  ВалютаРегламентированногоУчета     - валюта регламентированного учета
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр.
//  ИмяТабличнойЧасти                  - строка, имя табличной части, которую надо пересчитать, 
//                                       по умолчанию - "Товары".
//  НовыйТипЦенДляУстановки            - тип цен, который по возможности нужно установить как новый в форме;
//
// Возвращаемое значение:
//  Структура, содержащая значения текущих и устанавливаемых значений для реквизитов документа.
//
Функция ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, ВалютаРегламентированногоУчета,
	                              СтруктураНеРедактируемыхРеквизитов = Неопределено,
	                              ИмяТабличнойЧасти, НовыйТипЦенДляУстановки = Неопределено) Экспорт

	ФормаЦеныВалюты = ПолучитьОбщуюФорму("ФормаЦеныИВалюта"); 

	// Установим текущие реквизиты.
	УстановитьТекущиеРеквизитыФормаЦеныВалюты(ФормаЦеныВалюты, ДокументОбъект, 
	                                          СтруктураРеквизитовДокумента, ИмяТабличнойЧасти, 
	                                          ВалютаРегламентированногоУчета, НовыйТипЦенДляУстановки);

	// Доступность реквизитов формы.
	УстановитьДоступностьРеквизитовФормаЦеныВалюты(ФормаЦеныВалюты, СтруктураРеквизитовДокумента, 
	                                               СтруктураНеРедактируемыхРеквизитов);

	// Теперь можно и открывать форму, она вернет результат своей работы.
	Возврат ФормаЦеныВалюты.ОткрытьМодально();

КонецФункции // ОткрытьФормуЦеныИВалюта()

// Формирует запрос, возвращающий цены для заданных позиций номенклатуры.
// Используется для получения цен по ТЧ редактирумого документа для последующего пересчета ТЧ
//
// Параметры: 
//  СтруктураЗначений   - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//                        документа до и после их изменеия в общей форме),
//  СпособЗаполненияЦен - значение перечисления "Способы заполнения цен", определяет по какому из регистров
//                       ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос.
//  МассивНоменклатуры  - массив, содержащий ссылки на элементы номенклатуры, по которым надо узнать цены.
//  ДатаДокумента       - дата, на которую надо узнать цены 
//  Контрагент          - ссылка на справочник контрагентов, определяет для какого когнтрагента надо узнать цены,
//  ДоговорКонтрагента  - ссылка на договор контрагента.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоЦенам(СтруктураЗначений, СпособЗаполненияЦен, МассивНоменклатуры, 
									ДатаДокумента, Контрагент, ДоговорКонтрагента = Неопределено) Экспорт

	// Достанем нужные цены запросом
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);

	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры Тогда 

		// Если цена расчетная, то надо доставать базовые цены
		Если СтруктураЗначений.НовыйТипЦен.Рассчитывается Тогда
			Запрос.УстановитьПараметр("ТипЦен"               , СтруктураЗначений.НовыйТипЦен.БазовыйТипЦен);
			Запрос.УстановитьПараметр("ПроцентСкидкиНаценки" , СтруктураЗначений.НовыйТипЦен.ПроцентСкидкиНаценки);
			Запрос.УстановитьПараметр("ТипЦенРассчитываемый" , СтруктураЗначений.НовыйТипЦен);
		Иначе
			Запрос.УстановитьПараметр("ТипЦен", СтруктураЗначений.НовыйТипЦен);
		КонецЕсли;

		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура               КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентОсновнойЕдиницы,
		|	ЦеныНоменклатурыСрезПоследних.Валюта                                           КАК ВалютаЦены,
		|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения                                 КАК ЕдиницаИзмеренияЦены,
		|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент                     КАК КоэффициентЕдиницыЦены,
		|	ЦеныНоменклатурыСрезПоследних.Цена,";
		Если СтруктураЗначений.НовыйТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст +"
			|	ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки ЕСТЬ NULL
			|			ИЛИ ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки = 0 ТОГДА
			|				&ПроцентСкидкиНаценки
			|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки КОНЕЦ КАК ПроцентСкидкиНаценки,";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст +"
		|	КурсыВалютСрезПоследних.Кратность                                          КАК КратностьВалютыЦены,
		|	КурсыВалютСрезПоследних.Курс                                               КАК КурсВалютыЦены
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL
		|		      ТОГДА ЦеныНоменклатуры.Номенклатура
		|		      ИНАЧЕ УсловияПоставок.Номенклатура КОНЕЦ                             КАК Номенклатура,
		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL
		|		      ТОГДА ЦеныНоменклатуры.ХарактеристикаНоменклатуры
		|		      ИНАЧЕ УсловияПоставок.ХарактеристикаНоменклатуры КОНЕЦ               КАК ХарактеристикаНоменклатуры,
		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL
		|		      ТОГДА ЦеныНоменклатуры.Валюта
		|		      ИНАЧЕ УсловияПоставок.ВалютаЦены КОНЕЦ                               КАК Валюта,
		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL
		|		      ТОГДА ЦеныНоменклатуры.Цена
		|		      ИНАЧЕ УсловияПоставок.Цена КОНЕЦ                                     КАК Цена,
		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL
		|		      ТОГДА ЦеныНоменклатуры.ЕдиницаИзмерения
		|		      ИНАЧЕ УсловияПоставок.ЕдиницаИзмерения КОНЕЦ                         КАК ЕдиницаИзмерения";
		Если СтруктураЗначений.НовыйТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст +",
		|		      ЦеныНоменклатурыРассчитываемые.ПроцентСкидкиНаценки                  КАК ПроцентСкидкиНаценки";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст +"
		|	ИЗ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И ТипЦен = &ТипЦен) КАК ЦеныНоменклатуры";
		Если СтруктураЗначений.НовыйТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст +"
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И ТипЦен = &ТипЦенРассчитываемый) КАК ЦеныНоменклатурыРассчитываемые
			|		ПО ЦеныНоменклатуры.Номенклатура               = ЦеныНоменклатурыРассчитываемые.Номенклатура
			|		И  ЦеныНоменклатуры.ХарактеристикаНоменклатуры = ЦеныНоменклатурыРассчитываемые.ХарактеристикаНоменклатуры";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст +"
		|	ПОЛНОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И ДоговорКонтрагента = &ДоговорКонтрагента) КАК УсловияПоставок
		|	ПО
		|		УсловияПоставок.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|		И
		|		УсловияПоставок.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры
		|	) КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта";

	Иначе // Заполнять надо по ценам контрагента

		// При заполнении по ценам контрагента скидок не бывает, считаем, что все скидки учитываютя в цене
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("ТипЦен", СтруктураЗначений.НовыйТипЦен);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура,
		|	ЦеныКонтрагентаСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков,
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентОсновнойЕдиницы,
		|	ЦеныКонтрагентаСрезПоследних.Валюта КАК ВалютаЦены,
		|	ЦеныКонтрагентаСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмеренияЦены,
		|	ЦеныКонтрагентаСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК КоэффициентЕдиницыЦены,
		|	ЦеныКонтрагентаСрезПоследних.Цена,
		|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыЦены,
		|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыЦены
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL
		|		      ТОГДА ЦеныКонтрагента.Номенклатура
		|		      ИНАЧЕ УсловияПоставок.Номенклатура КОНЕЦ                             КАК Номенклатура,
		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL
		|		      ТОГДА ЦеныКонтрагента.ХарактеристикаНоменклатуры
		|		      ИНАЧЕ УсловияПоставок.ХарактеристикаНоменклатуры КОНЕЦ               КАК ХарактеристикаНоменклатуры,
		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL
		|		      ТОГДА ЦеныКонтрагента.Валюта
		|		      ИНАЧЕ УсловияПоставок.ВалютаЦены КОНЕЦ                               КАК Валюта,
		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL
		|		      ТОГДА ЦеныКонтрагента.Цена
		|		      ИНАЧЕ УсловияПоставок.Цена КОНЕЦ                                     КАК Цена,
		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL
		|		      ТОГДА ЦеныКонтрагента.ЕдиницаИзмерения
		|		      ИНАЧЕ УсловияПоставок.ЕдиницаИзмерения КОНЕЦ                         КАК ЕдиницаИзмерения
		|	ИЗ
		|		РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И ТипЦен = &ТипЦен) КАК ЦеныКонтрагента
		|	ПОЛНОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И ДоговорКонтрагента = &ДоговорКонтрагента) КАК УсловияПоставок
		|	ПО
		|		УсловияПоставок.Номенклатура = ЦеныКонтрагента.Номенклатура
		|		И
		|		УсловияПоставок.ХарактеристикаНоменклатуры = ЦеныКонтрагента.ХарактеристикаНоменклатуры
		|	) КАК ЦеныКонтрагентаСрезПоследних
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|		ПО ЦеныКонтрагентаСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта";
	КонецЕсли;

	// Результат запроса
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоЦенам()

// Заполняет цену в строке ТЧ документа по реквизитам документа и текущим ценам в регистре сведений.
//
// Параметры: 
//  ДокументОбъект             - документ; 
//  СтрокаТабличнойЧасти       - строка табличной части редактируемого документа, 
//  СтруктураПоиска            - структра, содержит значение Номенклатуры для поиска в результате запроса, 
//  ВыборкаИзРезультатаЗапроса - результат запроса по текущим ценам, 
//  СтруктураЗначений          - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//						         документа до и после их изменеия в общей форме),
//  СпособЗаполненияЦен        - значение перечисления "Способы заполнения цен", влияет на расчет цен
//						         (см. описание в ПересчитатьЦенуПриИзмененииФлаговНалогов),
//  ХарактеристикаНоменклатуры - характеристика номенклатуры, для которой ищем цену
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЦенуВСтрокеТабличнойЧасти(ДокументОбъект, СтрокаТабличнойЧасти, СтруктураПоиска, ВыборкаИзРезультатаЗапроса, 
											СтруктураЗначений, СпособЗаполненияЦен, ХарактеристикаНоменклатуры = Неопределено) Экспорт

	Перем НДСВСтроке;

	// получим имя табличной части и имя документа
	ИмяТабличнойЧасти   = ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Родитель();

	Если Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Реквизиты.Найти("Цена") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Найдем товар из текущей строки документа в выборке из результата запроса.
	Если ЗначениеНеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
		Возврат; // Искать нечего.
	КонецЕсли;

	ВыборкаИзРезультатаЗапроса.Сбросить(); 
	Если ХарактеристикаНоменклатуры = Неопределено 
	 Или ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		НашлиВВыборке = ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска);
	Иначе
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		НашлиВВыборке = ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска);
		Если Не НашлиВВыборке Тогда
			ВыборкаИзРезультатаЗапроса.Сбросить(); 
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			НашлиВВыборке = ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска);
		КонецЕсли;
	КонецЕсли;

	Если СтруктураПоиска.Номенклатура.ВидТовара=Перечисления.ВидыТоваров.Диски Тогда
		СтрокаТабличнойЧасти.Цена  = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ,Константы.ТипЦенДиски.Получить(), ДокументОбъект.Дата);
		Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда // Тип цен на диски не проставлен
			СтрокаТабличнойЧасти.Цена = ВыборкаИзРезультатаЗапроса.Цена;
		КонецЕсли;	
	
	ИначеЕсли НашлиВВыборке Тогда // Нашли запись

		// Если для данного товара есть цена данного типа
		// Единицу устанавливаем в единицу цены, если она не задана, то в основную единицу товара
		Если ЗначениеНеЗаполнено(ВыборкаИзРезультатаЗапроса.Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			// Присваиваем значение цены и единицы цены
			СтруктураНовойВалюты = ПолучитьКурсВалюты(СтруктураЗначений.НовыйТипЦен.ВалютаЦены, ДокументОбъект.Дата);
			ТекущаяВалюта        = СтруктураЗначений.НовыйТипЦен.ВалютаЦены;
			ТекущийКурс          = СтруктураНовойВалюты.Курс;
			ТекущаяКратность     = СтруктураНовойВалюты.Кратность;
			Если СтруктураЗначений.НовыйТипЦен.Ссылка.Метаданные().Имя = "ТипыЦенНоменклатуры" 
			   и СтруктураЗначений.НовыйТипЦен.Рассчитывается Тогда

				// Наценим и округлим базовую цену
				Цена = ВыборкаИзРезультатаЗапроса.Цена * (1 + ВыборкаИзРезультатаЗапроса.ПроцентСкидкиНаценки / 100);
				Цена = ПересчитатьИзВалютыВВалюту(Цена, 
											ВыборкаИзРезультатаЗапроса.ВалютаЦены,
											ТекущаяВалюта,
											ВыборкаИзРезультатаЗапроса.КурсВалютыЦены,
											ТекущийКурс,
											ВыборкаИзРезультатаЗапроса.КратностьВалютыЦены,
											ТекущаяКратность);
			Иначе
				Цена = ВыборкаИзРезультатаЗапроса.Цена;
				ТекущаяВалюта = ВыборкаИзРезультатаЗапроса.ВалютаЦены;
				СтруктураТекущейВалюты = ПолучитьКурсВалюты(ТекущаяВалюта, ДокументОбъект.Дата);
				ТекущийКурс            = СтруктураТекущейВалюты.Курс;
				ТекущаяКратность       = СтруктураТекущейВалюты.Кратность;
			КонецЕсли;

			// Пересчитываем цену в единицу измерения количества
			Если ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				Если СтрокаТабличнойЧасти.ЕдиницаИзмерения <> ВыборкаИзРезультатаЗапроса.ЕдиницаИзмеренияЦены Тогда
					КоэффициентКоличества     = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
					КоэффициентЦены           = ВыборкаИзРезультатаЗапроса.ЕдиницаИзмеренияЦены.Коэффициент;
					Цена = Цена * КоэффициентКоличества / КоэффициентЦены;
				КонецЕсли;
			КонецЕсли;

			Если ТипЗнч (СтруктураЗначений.НовыйТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
				Цена = ОкруглитьЦену(Цена,
									СтруктураЗначений.НовыйТипЦен.ПорядокОкругления,
									СтруктураЗначений.НовыйТипЦен.ОкруглятьВБольшуюСторону);
			КонецЕсли;

			// Пересчитываем цену в валюту документа
			Если СтруктураЗначений.НовыйВалютаДокумента <> ТекущаяВалюта Тогда
				Если ЗначениеНеЗаполнено(СтруктураЗначений.НовыйВалютаДокумента) Тогда

					ВалютаДокумента = Константы.ВалютаУправленческогоУчета.Получить();
					СтруктураВалюты = ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
					КурсДокумента      = СтруктураВалюты.Курс;
					КратностьДокумента = СтруктураВалюты.Кратность;

					// В документе нет валюты, возьмем валюту регламентированного учета
					Цена = ПересчитатьИзВалютыВВалюту(Цена, 
														ТекущаяВалюта,
														ВалютаДокумента,
														ТекущийКурс,
														КурсДокумента,
														ТекущаяКратность,
														КратностьДокумента);

				Иначе

					Цена = ПересчитатьИзВалютыВВалюту(Цена, 
														ТекущаяВалюта,
														СтруктураЗначений.НовыйВалютаДокумента,
														ТекущийКурс,
														СтруктураЗначений.НовыйКурсДокумента,
														ТекущаяКратность,
														СтруктураЗначений.НовыйКратностьДокумента);

				КонецЕсли;
			КонецЕсли;

			// Пересчитываем цену по параметрам налогообложения.
			// Ставку определяем исходя из переданных параметров
			СтруктураЗначений.Свойство("ЕстьСтавкаНДСВТабличнойЧасти", НДСВСтроке);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
									СпособЗаполненияЦен,
									СтруктураЗначений.НовыйТипЦен.ЦенаВключаетНДС, 
									СтруктураЗначений.НовыйУчитыватьНДС, СтруктураЗначений.НовыйСуммаВключаетНДС, 
									?(СтруктураЗначений.НовыйУчитыватьНДС, ?(НДСВСтроке = Истина, ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС), ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС)),0));

		КонецЕсли;

	Иначе // информации по цене этого товара нет в запросе 

		// Установим цену в ноль.
		СтрокаТабличнойЧасти.Цена = 0;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуВСтрокеТабличнойЧасти()

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
		   И ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
		   И ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти)
		   И ДокументОбъект.УчитыватьНДС
		   И Не ДокументОбъект.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
					И ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
					И ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя)
					И ДокументОбъект.УчитыватьНДС
					И Не ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаСНДС()

// Рассчитываем сумму НДС документа
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//
// Возвращаемое значение:
//  НДС документа
//
Функция ПолучитьНДСДокумента(ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаНДС = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаНДС = СуммаНДС + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаНДС = СуммаНДС + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // ПолучитьСуммуДокументаСНДС()

// Рассчитываем сумму документа без учета скидки
//
// Параметры: 
//  ТабличнаяЧасть   - табличная часть, в котором надо посчитать сумму без скидки.
//
// Возвращаемое значение:
//  Сумма документа со всеми налогамии без учета скидки.
//
Функция ПолучитьСуммуДокументаБезСкидки(ТабличнаяЧасть) Экспорт

	СуммаДокумента = 0;

	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СуммаПоСтроке = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		СуммаДокумента = СуммаДокумента + СуммаПоСтроке;
	КонецЦикла;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаБезСкидки()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  УчитыватьНДС     - булево, признак учета НДС в сумме, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС,
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
Функция РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт

	Если (УчитыватьНДС) И (СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если УчитыватьНДС Тогда 
		Если НЕ СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // РассчитатьСуммуНДС()

// Функция возвращает курс ставку НДС
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты, валюта, по которой необходимо получить курс
//  ДатаКурса - Дата, календарная дата, на которую необходимо получить курс валюты
//
// Возвращаемое значение:
//	Курс переданной валюты на переданную дату, 1 в случае отсутствия значения.
//
Функция ПолучитьСтавкуНДС(СтавкаНДС) Экспорт

	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 18;
	КонецЕсли;

	Возврат 0;

КонецФункции // ПолучитьСтавкуНДС()

Функция яштПолучитьСписокДоступныхЦенКонтрагента(Ссылка) Экспорт
	
	ЗапросТипов = Новый Запрос;
	
	ЗапросТипов.УстановитьПараметр("Ссылка", Ссылка);
	
	ЗапросТипов.Текст =
	"ВЫБРАТЬ
	|	ДоступныеЦеныКонтрагентов.ТипЦены КАК Тип
	|ИЗ
	|	РегистрСведений.ДоступныеЦеныКонтрагентов КАК ДоступныеЦеныКонтрагентов
	|ГДЕ
	|	ДоступныеЦеныКонтрагентов.Контрагент = &Ссылка";
	
	ТаблицаТипов = Новый ТаблицаЗначений;
	
	ТаблицаТипов = ЗапросТипов.Выполнить().Выгрузить();
	
	Список = Новый СписокЗначений;
	
	Если ТаблицаТипов.Количество() > 0 Тогда
	
		Список.ЗагрузитьЗначения(ТаблицаТипов.ВыгрузитьКолонку("Тип"));
	
	КонецЕсли; 
	
	Возврат Список;
	
	
КонецФункции // ПолучитьСписокДоступныхЦенКонтрагента()

Процедура яштПроверитьПороговыеЦеныКонтрагента(Объект,Отказ) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка.Контрагент) И Объект.Ссылка.Контрагент.НеКонтроллироватьЦеныПродажи Тогда
		Возврат ;
	КонецЕсли;	
		
	
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РазрешитьЦеныНижеМинимальноРазрешенных") Тогда
		Возврат ;
	КонецЕсли; 
	//
		
// НОВЫЕ ПРАВИЛА - СОГЛАСНО ДОКУМЕНТУ (ПОЛИТИКА ЦЕНООБРАЗОВАНИЯ) С 15.09.2012	
	
ЗапросПоискПолитики=Новый Запрос;	
ЗапросПоискПолитики.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка 
|ИЗ	Документ.ПолитикаЦенообразования 
|ГДЕ Дата<&ДатаДокумента И Проведен
| И ВидОперации=Значение(Перечисление.ВидыОперацийПолитикаЦенообразования.КонтрольМинимальныхЦен)
|УПОРЯДОЧИТЬ ПО Ссылка УБЫВ";

ЗапросПоискПолитики.УстановитьПараметр("ДатаДокумента",Объект.Ссылка.Дата);

ВыборкаПолитикаЦенообразования=ЗапросПоискПолитики.Выполнить().Выбрать();

ТекстЗапросаДляВставки="ВЫБОР ";
Если ВыборкаПолитикаЦенообразования.Следующий() Тогда
	ТекущаяПолитика=ВыборкаПолитикаЦенообразования.Ссылка;
	Для сч=0 по ТекущаяПолитика.Правила.Количество()-1 Цикл
		ТекстЗапросаДляВставки=ТекстЗапросаДляВставки+ " КОГДА " + ТекущаяПолитика.Правила[сч].Правило + " ТОГДА " + ТекущаяПолитика.Правила[сч].ОтпускнаяЦена;
	КонецЦикла;
	ТекстЗапросаДляВставки=ТекстЗапросаДляВставки+" ИНАЧЕ 0 КОНЕЦ МинимальнаяЦена "
Иначе
	Возврат;
КонецЕсли;		
	
	
ПостроительОтчетаОтчет = Новый ПостроительОтчета;

ПостроительОтчетаОтчет.Текст="ВЫБРАТЬ
|   НомерСтроки, Номенклатура, Цена, МинимальнаяЦена
| ИЗ
| (ВЫБРАТЬ 
|	НомерСтроки, Номенклатура, Цена,  Номенклатура.НоменклатурнаяГруппа, Номенклатура.Производитель, ТипЦен,
|	0 МинимальнаяЦена
|	ИЗ
| (ВЫБРАТЬ
|  ЗаказПокупателяТовары.НомерСтроки,
|	ЗаказПокупателяТовары.Номенклатура Номенклатура,
|	ЗаказПокупателяТовары.Цена,
|	ЕстьNULL(ЦеныНоменклатуры.Цена,0) ЦенаПоТипуЦен,
|	ЦеныНоменклатуры.ТипЦен ТипЦен
|	ИЗ
|  (
|  ВЫБРАТЬ
|  НомерСтроки,
|	Номенклатура,
|	Цена
|ИЗ
|	Документ.ЗаказПокупателя.Товары 
|ГДЕ Ссылка = &Ссылка	) КАК ЗаказПокупателяТовары
|ЛЕВОЕ СОЕДИНЕНИЕ 
|РегистрСведений.ЦеныНоменклатуры.СрезПоследних (&ДатаДокумента,(ТипЦен В (&СписокТиповЦен)) И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
|ИЗ Документ.ЗаказПокупателя.Товары ГДЕ Ссылка=&Ссылка
|)) ЦеныНоменклатуры
|ПО ЗаказПокупателяТовары.Номенклатура=ЦеныНоменклатуры.Номенклатура ) А )А
|ГДЕ МинимальнаяЦена> Цена";

 ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"0 МинимальнаяЦена",ТекстЗапросаДляВставки);

 СписокТиповЦен=Новый СписокЗначений;
 Для сч=0 по ТекущаяПолитика.Параметры.Количество()-1 Цикл
	 ПостроительОтчетаОтчет.Параметры.Вставить(ТекущаяПолитика.Параметры[сч].ИмяПараметра, ТекущаяПолитика.Параметры[сч].ЗначениеПараметра);
	 
	 Если ТипЗнч(ТекущаяПолитика.Параметры[сч].ЗначениеПараметра)= Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		 Если  СписокТиповЦен.НайтиПоЗначению(ТекущаяПолитика.Параметры[сч].ЗначениеПараметра) =Неопределено Тогда
		       СписокТиповЦен.Добавить(ТекущаяПолитика.Параметры[сч].ЗначениеПараметра);
		 КонецЕсли;	   
	 КонецЕсли;	
 КонецЦикла;	 
 	 
     ПостроительОтчетаОтчет.Параметры.Вставить("СписокТиповЦен", СписокТиповЦен);
	 ПостроительОтчетаОтчет.Параметры.Вставить("Ссылка", Объект.Ссылка);
	 ПостроительОтчетаОтчет.Параметры.Вставить("ДатаДокумента", Объект.Ссылка.Дата);
	 
	Результат = ПостроительОтчетаОтчет.ПолучитьЗапрос().Выполнить();
	
	Выборка =  Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СообщитьОбОшибке("Для строки номер " + Строка(Выборка.НомерСтроки) + ": товар " + СокрЛП(Выборка.Номенклатура.Наименование) + "
				|минимальное значение цены составляет " + Строка(Выборка.МинимальнаяЦена)+" руб. Текущая цена = " + Строка(Выборка.Цена) + " руб.", 
				Отказ);	
 	КонецЦикла;	
	
КонецПроцедуры
Функция яштПолучитьМинимальнуюЦенуПродажи(Дата, Контрагент, Номенклатура) Экспорт
	
	
	СписокДоступныхТипов = яштПолучитьСписокДоступныхЦенКонтрагента(Контрагент);
	//Номенклатура = Номенклатура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК МинЦена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата,
	|	ТипЦен В (&СписокТиповЦен)
	|	И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.Рассчитывается = ЛОЖЬ
	|	И ЦеныНоменклатурыСрезПоследних.Цена > 0";
	
	
	Запрос.УстановитьПараметр("СписокТиповЦен", СписокДоступныхТипов);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ТаблицаЗапроса.Следующий() Тогда
	
		Возврат ?(ТаблицаЗапроса.МинЦена = NULL, 0, ТаблицаЗапроса.МинЦена);
	
	КонецЕсли; 
	
	
	Возврат 0;

КонецФункции // ()

//*** 07.2015
Функция яштПолучитьТаблицуРасчетаЦенНаДиски(СписокНоменклатуры, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СтратегияРасчетаЗакупочныхЦенНаДиски.Ссылка
	               |ИЗ
	               |	Документ.СтратегияРасчетаЗакупочныхЦенНаДиски КАК СтратегияРасчетаЗакупочныхЦенНаДиски
	               |ГДЕ
	               |	СтратегияРасчетаЗакупочныхЦенНаДиски.Проведен
	               |	И СтратегияРасчетаЗакупочныхЦенНаДиски.Дата < &Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СтратегияРасчетаЗакупочныхЦенНаДиски.Дата УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ТекущаяСтратегия = Результат.Ссылка;
	Иначе
		ТабЗнач = "";
		Возврат ТабЗнач;
	КонецЕсли;
	
	ТекстЗапросаДляВставкиЦена = "ВЫБОР ";
	Для сч=0 по ТекущаяСтратегия.Данные.Количество()-1 Цикл
		Правило = "";
		Если ЗначениеЗаполнено(ТекущаяСтратегия.Данные[сч].Диаметр) Тогда
			Правило = Правило + "Номенклатура.Типоразмер.Диаметр = &Парам" + СтрЗаменить(ТекущаяСтратегия.Данные[сч].Диаметр, ", " , "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтратегия.Данные[сч].Ширина) Тогда
			Правило = Правило + "Номенклатура.Типоразмер.Ширина = &Парам" + СтрЗаменить(ТекущаяСтратегия.Данные[сч].Ширина, ", " , "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтратегия.Данные[сч].КоличествоОтверстий) Тогда
			Правило = Правило + "Номенклатура.Типоразмер.КоличествоОтверстий = &Парам" + СтрЗаменить(ТекущаяСтратегия.Данные[сч].КоличествоОтверстий, ", " , "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтратегия.Данные[сч].PCD) Тогда
			Правило = Правило + "Номенклатура.Типоразмер.PCD = &Парам" + СтрЗаменить(ТекущаяСтратегия.Данные[сч].PCD, ", " , "");
		КонецЕсли;
		ТекстЗапросаДляВставкиЦена = ТекстЗапросаДляВставкиЦена + " КОГДА " + Правило + " ТОГДА " + Строка(ТекущаяСтратегия.Данные[сч].Цена);
	КонецЦикла;
	ТекстЗапросаДляВставкиЦена=ТекстЗапросаДляВставкиЦена+" ИНАЧЕ 0 КОНЕЦ Цена ";
	
	ТекстЗапросаДляВставкиПриоритет="ВЫБОР ";
	Для сч=0 по ТекущаяСтратегия.Данные.Количество()-1 Цикл
		Правило = "";
		Если ЗначениеЗаполнено(ТекущаяСтратегия.Данные[сч].Диаметр) Тогда
			Правило = Правило + "Номенклатура.Типоразмер.Диаметр = &Парам" + СтрЗаменить(ТекущаяСтратегия.Данные[сч].Диаметр, ", " , "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтратегия.Данные[сч].Ширина) Тогда
			Правило = Правило + "Номенклатура.Типоразмер.Ширина = &Парам" + СтрЗаменить(ТекущаяСтратегия.Данные[сч].Ширина, ", " , "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтратегия.Данные[сч].КоличествоОтверстий) Тогда
			Правило = Правило + "Номенклатура.Типоразмер.КоличествоОтверстий = &Парам" + СтрЗаменить(ТекущаяСтратегия.Данные[сч].КоличествоОтверстий, ", " , "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтратегия.Данные[сч].PCD) Тогда
			Правило = Правило + "Номенклатура.Типоразмер.PCD = &Парам" + СтрЗаменить(ТекущаяСтратегия.Данные[сч].PCD, ", " , "");
		КонецЕсли;
		ТекстЗапросаДляВставкиПриоритет = ТекстЗапросаДляВставкиПриоритет+ " КОГДА " + Правило + " ТОГДА " + Строка(ТекущаяСтратегия.Данные[сч].НомерСтроки);
	КонецЦикла;
	ТекстЗапросаДляВставкиПриоритет=ТекстЗапросаДляВставкиПриоритет+" ИНАЧЕ 1000 КОНЕЦ Приоритет ";
	
	ПостроительОтчетаОтчет = Новый ПостроительОтчета;
	
	ПостроительОтчетаОтчет.Текст="ВЫБРАТЬ
	|   Приоритет, Номенклатура, Цена
	|	ПОМЕСТИТЬ ВТ_Товары
	| ИЗ
	| (ВЫБРАТЬ 
	|	Номенклатура,   
	|	0 Цена,
	|	1 Приоритет
	|	ИЗ 
	| ( ВЫБРАТЬ Ссылка КАК Номенклатура ИЗ Справочник.Номенклатура ГДЕ Ссылка В (&СписокНоменклатуры)
	|)СпрНоменклатура ) А
	|;
	|
	|ВЫБРАТЬ Номенклатура,  МИНИМУМ(Приоритет) Приоритет	
	|ПОМЕСТИТЬ ВТ_ПриоритетыТоваров
	|	ИЗ 
	|ВТ_Товары
	|СГРУППИРОВАТЬ ПО Номенклатура
	|;
	|ВЫБРАТЬ
	| ВТ_Товары.Приоритет, ВТ_Товары.Номенклатура Номенклатура,  ВТ_Товары.Цена Цена
	|ИЗ ВТ_Товары
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриоритетыТоваров
	|ПО  ВТ_Товары.Номенклатура= ВТ_ПриоритетыТоваров.Номенклатура 
	|И ВТ_Товары.Приоритет= ВТ_ПриоритетыТоваров.Приоритет 
	|
	|";
	
	ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"0 Цена",ТекстЗапросаДляВставкиЦена);
	ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"1 Приоритет",ТекстЗапросаДляВставкиПриоритет);
	
	Для сч=0 по ТекущаяСтратегия.Данные.Количество()-1 Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтратегия.Данные[сч].Диаметр) Тогда
			ИмяПараметра = "Парам" + СтрЗаменить(ТекущаяСтратегия.Данные[сч].Диаметр, ", " , "");
			ЗначениеПараметра = ТекущаяСтратегия.Данные[сч].Диаметр;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтратегия.Данные[сч].Ширина) Тогда
			ИмяПараметра = "Парам" + СтрЗаменить(ТекущаяСтратегия.Данные[сч].Ширина, ", " , "");
			ЗначениеПараметра = ТекущаяСтратегия.Данные[сч].Ширина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтратегия.Данные[сч].КоличествоОтверстий) Тогда
			ИмяПараметра = "Парам" + СтрЗаменить(ТекущаяСтратегия.Данные[сч].КоличествоОтверстий, ", " , "");
			ЗначениеПараметра = ТекущаяСтратегия.Данные[сч].КоличествоОтверстий;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтратегия.Данные[сч].PCD) Тогда
			ИмяПараметра = "Парам" + СтрЗаменить(ТекущаяСтратегия.Данные[сч].PCD, ", " , "");
			ЗначениеПараметра = ТекущаяСтратегия.Данные[сч].PCD;
		КонецЕсли;
		
		ПостроительОтчетаОтчет.Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЦикла;	 
	
	ПостроительОтчетаОтчет.Параметры.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	
	Результат = ПостроительОтчетаОтчет.ПолучитьЗапрос().Выполнить();
	
	ТабЗнач = Результат.Выгрузить();
	
	Возврат ТабЗнач;
	
КонецФункции
 
 

