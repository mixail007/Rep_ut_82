 // СТО
 Процедура дкФормаОбновлениеОтображения(ЭтаФорма) Экспорт
	Если ЭтаФорма<>Неопределено Тогда
		// отобразим время документа в верхней панели
		Время="("+Формат(ЭтаФорма.Дата,"ДЛФ=T")+")";
		ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Время.Текст=Время;
	КонецЕсли; 
КонецПроцедуры

 Процедура дкДействияФормыВвестиВремя(ЭтаФорма,Кнопка) Экспорт
	ФормаВремя=ПолучитьОбщуюФорму("ВводВремени",ЭтаФорма);
	Попытка
		ФормаВремя.НачальноеЗначениеВыбора=ЭтаФорма.Дата;
	Исключение КонецПопытки;
	НовоеВремя=ФормаВремя.ОткрытьМодально();
	Если НовоеВремя<>Неопределено Тогда
		Попытка
			НоваяДата=Дата(Год(ЭтаФорма.Дата),Месяц(ЭтаФорма.Дата),День(ЭтаФорма.Дата),Час(НовоеВремя),Минута(НовоеВремя),Секунда(НовоеВремя));
			ЭтаФорма.Дата=НоваяДата;
		Исключение КонецПопытки;
	КонецЕсли;
	дкФормаОбновлениеОтображения(ЭтаФорма);
Конецпроцедуры

 
 //

Функция спПолучитьНаименование(Элемент) Экспорт
	Попытка
		Если НЕ ЗначениеНеЗаполнено(Элемент.НаименованиеПолное) Тогда
		Возврат Элемент.НаименованиеПолное;
		КонецЕсли; 
	Исключение
	КонецПопытки;

	Возврат Элемент.Наименование;
КонецФункции 


Функция ПолучитьНормочасыАвтоработы(Авторабота,КлассАвтомобиля) Экспорт
	Если (не ЗначениеНеЗаполнено(АвтоРабота)) и	(не ЗначениеНеЗаполнено(КлассАвтомобиля)) Тогда
		записьНЧ=РегистрыСведений.НормочасыРабот.Получить(Новый Структура("Авторабота,КлассАвтомобиля",Авторабота,КлассАвтомобиля));
		Если не ЗначениеНеЗаполнено(записьНЧ) Тогда
			Возврат ?(ЗначениеНеЗаполнено(записьНЧ.Время),0,записьНЧ.Время);
		Иначе
			Возврат 0;
		КонецЕсли;	
	Иначе
		Возврат 0;
    КонецЕсли;	
КонецФункции	


Функция ПолучитьЦенуЗаЧасАвтоработы(КлассАвтомобиля) Экспорт
   Если (не ЗначениеНеЗаполнено(КлассАвтомобиля)) Тогда
     Возврат ?(ЗначениеНеЗаполнено(КлассАвтомобиля.ЦенаНормочаса),0,КлассАвтомобиля.ЦенаНормочаса);
    Иначе
	Возврат 0; 
   КонецЕсли;
КонецФункции	


Функция ПолучитьПроцентАвтоматическихСкидокАвтоРабот(Карта,ДокументОбъект) Экспорт
	МножительДляУслуг 	= Константы.МножительСкидокДляУслуг.Получить();
	Если МножительДляУслуг = 0 Тогда
			Возврат 0;
	КонецЕсли;	

	Если ЗначениеНеЗаполнено(Карта) Тогда Возврат 0 КонецЕсли;	
	
	Если Карта.ТипКарты <> Перечисления.ТипыИнформационныхКарт.Дисконтная
		или Карта.СтатусДисконтнойКарты <> Перечисления.СтатусыДисконтнойКарты.Активна Тогда
		Возврат 0;
	КонецЕсли;	
	Если Карта.ВидСкидки = Перечисления.ВидыСкидокИнформационныхКарт.Фиксированная Тогда
		Возврат Карта.ПроцентСкидки*МножительДляУслуг	; 
	ИначеЕсли  Карта.ВидСкидки = Перечисления.ВидыСкидокИнформационныхКарт.Накопительная Тогда
		
		// определим процент скидки
		//ПроцентСкидки = Карта.ПроцентСкидки;
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ЕСТЬNULL(СтоимостьОборот, 0) КАК ВыбраннаяСумма
		|ИЗ РегистрНакопления.Продажи.Обороты(, &парамПериодКон,,
		|	ДисконтнаяКарта = &парамДисконтнаяКарта
		|)
		|";
		
		
		Запрос.УстановитьПараметр("парамПериодКон", Новый Граница(ДокументОбъект.МоментВремени(), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("парамДисконтнаяКарта", Карта);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Не Выборка.Следующий() Тогда
			Возврат 0;
		КонецЕсли; 
		
		врВыбраннаяСумма = Выборка.ВыбраннаяСумма;
		
		//
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ПроцентСкидки
		|ИЗ РегистрСведений.ПорогиНакопительнойСкидки
		|ГДЕ ВыбраннаяСумма <= &парамВыбраннаяСумма
		|УПОРЯДОЧИТЬ ПО ВыбраннаяСумма УБЫВ
		|";
		
		Запрос.УстановитьПараметр("парамВыбраннаяСумма", врВыбраннаяСумма);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Не Выборка.Следующий() Тогда
			Возврат 0;
		КонецЕсли; 
		
		ПроцентСкидки = Выборка.ПроцентСкидки;
		
		//
		Если ПроцентСкидки = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		ПроцентСкидки = ПроцентСкидки * МножительДляУслуг;
		
		Возврат ПроцентСкидки; 
		КонецЕсли;

	КонецФункции	
	
Процедура омПересчитатьСтоимостьРаботСкидкиНаценки(СтрокаТабличнойЧасти,ДокументОбъект) Экспорт
	
    СтрокаТабличнойЧасти.Сумма=СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.Коэффициент* СтрокаТабличнойЧасти.Цена;
	
	СуммаСтроки = СтрокаТабличнойЧасти.Сумма;
	СуммаСкидки = 0;
	ДисконтнаяКарта=ДокументОбъект.ДисконтнаяКарта;

	Если СуммаСтроки>0 Тогда
		СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок=ПолучитьПроцентАвтоматическихСкидокАвтоРабот(ДисконтнаяКарта,ДокументОбъект);
		
		СуммаСкидки = СуммаСтроки * (СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок + СтрокаТабличнойЧасти.ПроцентСкидкиНаценки) / 100;
		
		Если СуммаСкидки>0 Тогда
			СтрокаТабличнойЧасти.Сумма = СуммаСтроки - СуммаСкидки;
			СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
	//		СтрокаТабличнойЧасти.ЗначениеПоДисконтнойКарте   = ДисконтнаяКарта;
			СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки=?(ДисконтнаяКарта.ТипКарты=Перечисления.ВидыСкидокИнформационныхКарт.Фиксированная,Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте,Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме);
		КонецЕсли;
    КонецЕсли;
	
КонецПроцедуры	

Процедура РаспределитьРаботыПоИсполнителям(Исполнители,Работа,СтрокаИсполнителя="")   Экспорт
	
	Если ЗначениеНеЗаполнено(СтрокаИсполнителя) Тогда
		СуммаОставшихсяПроцентов=0;
		колво=0;
		Для каждого СтрокаТабличнойЧасти из Исполнители Цикл
			Если СтрокаТабличнойЧасти.Работа=Работа Тогда
				СуммаОставшихсяПроцентов=СуммаОставшихсяПроцентов+СтрокаТабличнойЧасти.Процент;
				колво=колво+1;
			КонецЕсли;	
		КонецЦикла;	
		
		
		Если СуммаОставшихсяПроцентов>0 Тогда
			Коэффициент=100/СуммаОставшихсяПроцентов;
			ном=0;
			СуммаПроцентов=0;
			Для каждого СтрокаТабличнойЧасти из Исполнители Цикл
				Если СтрокаТабличнойЧасти.Работа=Работа Тогда
					ном=ном+1;
					Если 	ном=колво Тогда
						СтрокаТабличнойЧасти.Процент=100-СуммаПроцентов;
					Иначе
						СтрокаТабличнойЧасти.Процент=СтрокаТабличнойЧасти.Процент*Коэффициент;
						СуммаПроцентов=СуммаПроцентов+СтрокаТабличнойЧасти.Процент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	Иначе
		СуммаОставшихсяПроцентов=0;
		колво=0;
		Для каждого СтрокаТабличнойЧасти из Исполнители Цикл
			Если СтрокаТабличнойЧасти.Работа=Работа и СтрокаТабличнойЧасти.Исполнитель<>СтрокаИсполнителя.Исполнитель Тогда
				СуммаОставшихсяПроцентов=СуммаОставшихсяПроцентов+СтрокаТабличнойЧасти.Процент;
				колво=колво+1;
			КонецЕсли;	
		КонецЦикла;	

			Если СуммаОставшихсяПроцентов>0 Тогда
			Коэффициент=(100-СтрокаИсполнителя.Процент) /СуммаОставшихсяПроцентов;
			ном=0;
			СуммаПроцентов=0;
			Для каждого СтрокаТабличнойЧасти из Исполнители Цикл
				Если СтрокаТабличнойЧасти.Работа=Работа и СтрокаТабличнойЧасти.Исполнитель<>СтрокаИсполнителя.Исполнитель Тогда
					ном=ном+1;
					Если 	ном=колво Тогда
						СтрокаТабличнойЧасти.Процент=(100-СтрокаИсполнителя.Процент)-СуммаПроцентов;
					Иначе
						СтрокаТабличнойЧасти.Процент=СтрокаТабличнойЧасти.Процент*Коэффициент;
						СуммаПроцентов=СуммаПроцентов+СтрокаТабличнойЧасти.Процент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;

	КонецЕсли;
	
	
КонецПроцедуры	

Процедура    УстановитьРавныеПроценты(Исполнители,Работа) Экспорт
		СуммаОставшихсяПроцентов=0;
		колво=0;
		Для каждого СтрокаТабличнойЧасти из Исполнители Цикл
			Если СтрокаТабличнойЧасти.Работа=Работа Тогда
		//		СуммаОставшихсяПроцентов=СуммаОставшихсяПроцентов+СтрокаТабличнойЧасти.Процент;
				колво=колво+1;
			КонецЕсли;	
		КонецЦикла;	
		
		
		Если колво>0 Тогда
			Коэффициент=100/колво;
			ном=0;
			СуммаПроцентов=0;
			Для каждого СтрокаТабличнойЧасти из Исполнители Цикл
				Если СтрокаТабличнойЧасти.Работа=Работа Тогда
					ном=ном+1;
					Если 	ном=колво Тогда
						СтрокаТабличнойЧасти.Процент=100-СуммаПроцентов;
					Иначе
						СтрокаТабличнойЧасти.Процент=Коэффициент;
						СуммаПроцентов=СуммаПроцентов+Окр(СтрокаТабличнойЧасти.Процент,2);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;

	
КонецПроцедуры		

Процедура РассчитатьСуммуПоИсполнителям(Сумма,Количество,Массив,ТЗ) Экспорт
	ПроцентИтого=0;
	Если Сумма>0 и Массив.Количество()>0 Тогда
		Для каждого стр из Массив Цикл
			ПроцентИтого=ПроцентИтого+стр.Процент;
		КонецЦикла;
		
		Если ПроцентИтого=0 Тогда Возврат; КонецЕсли;	
		Коэффициент=Сумма/ПроцентИтого;
		
		НакопПроцент=0;	
		НакопСуммаУпр=0;	
		НакопКоличество=0;	
		
		Для каждого стр из Массив Цикл
			Если НакопПроцент+стр.Процент=	ПроцентИтого Тогда
				новаяСтр=ТЗ.Добавить();
				новаяСтр.Работа=стр.Работа;
				новаяСтр.Исполнитель=стр.Исполнитель;
				новаяСтр.Количество=Количество-НакопКоличество;
				новаяСтр.СуммаУпр=Сумма-НакопСуммаУпр;
			Иначе
				новаяСтр=ТЗ.Добавить();
				новаяСтр.Работа=стр.Работа;
				новаяСтр.Исполнитель=стр.Исполнитель;
				новаяСтр.Количество=Окр(Количество*стр.Процент/ПроцентИтого,3);
				новаяСтр.СуммаУпр=Окр(Сумма*стр.Процент/ПроцентИтого,3);
			КонецЕсли;	
			НакопСуммаУпр=НакопСуммаУпр+новаяСтр.СуммаУпр;
			НакопКоличество=НакопКоличество+новаяСтр.Количество;
			НакопПроцент=НакопПроцент+стр.Процент;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры	

Функция авПолучитьДанныеКонтактнойИнформации(Объект, ТипИнформации = Неопределено, ВидИнформации = Неопределено) Экспорт

	Запрос = Новый Запрос;
	
	СтрокаВиртуальныхПараметров = "КонтактнаяИнформация.Объект = &Объект";
	
	Если ТипИнформации <> Неопределено Тогда
		СтрокаВиртуальныхПараметров = СтрокаВиртуальныхПараметров + " И КонтактнаяИнформация.Тип = &Тип";
		Запрос.УстановитьПараметр("Тип", ТипИнформации);
	КонецЕсли; 
	Если ВидИнформации <> Неопределено Тогда
		СтрокаВиртуальныхПараметров = СтрокаВиртуальныхПараметров + " И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Вид", ВидИнформации);
	КонецЕсли; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Объект        КАК Объект,
	|	КонтактнаяИнформация.Вид           КАК Вид,
	|	КонтактнаяИнформация.Тип           КАК Тип,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|ГДЕ
	|	" + СтрокаВиртуальныхПараметров + "
	|";
	
//	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаОтчета = '00010101000000', Неопределено, ДатаОтчета));
	Запрос.УстановитьПараметр("Объект"   , Объект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеКонтактнойИнформации()

Функция ЕстьЗаказыПоставщикуВТабличнойЧастиТовары(ДокументСсылка) Экспорт
	Если ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если ЕстьРеквизитТабЧастиДокумента("ЗаказПоставщику",ДокументСсылка.Метаданные(),"Товары") Тогда
			мас=ДокументСсылка.Товары.ВыгрузитьКолонку("ЗаказПоставщику");
			Если мас.Количество()>0 Тогда
			Для сч=0 по мас.Количество()-1 Цикл
				Если не ЗначениеНеЗаполнено(мас[сч]) Тогда
					Возврат Истина;
				КонецЕсли;	
			КонецЦикла;	
				КонецЕсли;	
	//	Возврат Истина;
		КонецЕсли;
	КонецЕсли;	
	Возврат Ложь;
КонецФункции	

Функция ВыгрузитьСуммыЗаказовПоставщикамВТаблицуЗначений(ДокументСсылка,ТабЧастьСтрока="Товары")   Экспорт
	Если ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг")  Тогда
		Если ЕстьРеквизитТабЧастиДокумента("ЗаказПокупателя",ДокументСсылка.Метаданные(),"Товары") Тогда
			ТаблицаСуммЗаказовПоставщику=ДокументСсылка[ТабЧастьСтрока].Выгрузить();
			ТаблицаСуммЗаказовПоставщику.Свернуть("ЗаказПоставщику","Сумма");
			Возврат ТаблицаСуммЗаказовПоставщику;
		КонецЕсли;
	КонецЕсли;
КонецФункции		

Функция ПолучитьАртикулБезЗнаковПрепинания(Артикул) Экспорт
СтрокаАртикул=СокрЛП(Артикул);
	Если ЗначениеНеЗаполнено(Артикул) Тогда
		Возврат "";
	КонецЕсли;	
	СтрокаАртикул=СтрЗаменить(СтрокаАртикул,"-",""); 
	СтрокаАртикул=СтрЗаменить(СтрокаАртикул,".",""); 
	СтрокаАртикул=СтрЗаменить(СтрокаАртикул,"/",""); 
	СтрокаАртикул=СтрЗаменить(СтрокаАртикул,"\",""); 
	СтрокаАртикул=СтрЗаменить(СтрокаАртикул,":",""); 
	СтрокаАртикул=СтрЗаменить(СтрокаАртикул," ","");
	
Возврат СтрокаАртикул;	
КонецФункции	