// Функция возвращает возможность проведения платежного документа без указания ссылки
// на заявку.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если можно проводить, иначе Ложь.
//
Функция ЕстьРазрешениеПроводитьБезЗаявки() Экспорт

	СписокФильтров = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПроведениеПлатежаБезЗаявки, Истина);

	Если (СписокФильтров.Количество() = 0)
	 ИЛИ (СписокФильтров.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат СписокФильтров[0].Значение;
	КонецЕсли;

КонецФункции // ЕстьРазрешениеПроводитьБезЗаявки()

// Функция возвращает возможность проведения платежного документа, сумма которого превышает
// текущий остаток свободных денежных средств.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если можно проводить, иначе Ложь.
//
Функция ЕстьРазрешениеПревышатьСвободныйОстатокДС() Экспорт

	СписокФильтров = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеСвободногоОстаткаДС, Истина);

	Если (СписокФильтров.Количество() = 0)
	 ИЛИ (СписокФильтров.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат СписокФильтров[0].Значение;
	КонецЕсли;

КонецФункции // ЕстьРазрешениеПроводитьБезЗаявки()

// Проверяет остатки по регистрам "ЗаявкиНаРасходованиеСредств" и "ДенежныеСредстваВРезерве"
// по переданной в параметре заявке и управляет значением отказа в проведении платежного документа
//
// Параметры
//  ЗаявкаНаРасходованиеСредств	:Документ.ЗаявкаНаРасходованиеСредств  – заявка, для которой формируются остатки
//  Дата						:Дата –дата, на которую формируются остатки
//  Отказ						:Булево –отказ в проведении документа
//  Заголовок					:Строка –представление документа при проведении
//  БанковскийСчетКасса			:Банковский счет, касса - место списания денежных средств
//  СуммаДокумента				:Число - сумма денежных средств к списанию
//  СуммаВзаиморасчетов			:Число - сумма взаиморасчетов по документу
//
Процедура ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,
			БанковскийСчетКасса,СуммаДокумента,ТаблицаПлатежейУпр) Экспорт
					
	ТабДоговорыЗаявки=ТаблицаПлатежейУпр.Скопировать();
	ТабДоговорыЗаявки.Свернуть("ДоговорКонтрагента,Сделка,ДокументПланированияПлатежа","СуммаВзаиморасчетов");
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов в ТЧ заявки
	
	Для Каждого Платеж Из ТабДоговорыЗаявки Цикл
		
		Если ЗначениеНеЗаполнено(Платеж.ДокументПланированияПлатежа) Тогда
			
			Сообщить(Заголовок+"Договор "+Платеж.ДоговорКонтрагента+", сделка "+Платеж.Сделка+": не указана заявка.");
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ Платеж.ДокументПланированияПлатежа.Проведен Тогда
			
			Сообщить(Заголовок+Строка(Платеж.ДокументПланированияПлатежа)+" не проведена.");
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
			
		Запрос = Новый Запрос;
		
		ТекстУсловия="ЗаявкаНаРасходование = &ДокументЗаявка";
		
		Если Не ЗначениеНеЗаполнено(Платеж.ДоговорКонтрагента) Тогда
			ТекстУсловия=ТекстУсловия+"
			|И ДоговорКонтрагента = &ДоговорКонтрагента";
			Запрос.УстановитьПараметр("ДоговорКонтрагента",Платеж.ДоговорКонтрагента);
		КонецЕсли;
		
		Если Не ЗначениеНеЗаполнено(Платеж.Сделка) Тогда
			ТекстУсловия=ТекстУсловия+"
			|И (Сделка = &Сделка ИЛИ Сделка=Неопределено)";
			Запрос.УстановитьПараметр("Сделка",Платеж.Сделка);
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
					   |	
		               |ИЗ
		               |	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(, "+ТекстУсловия+" ) КАК ЗаявкиНаРасходованиеСредствОстатки";
		
		Запрос.УстановитьПараметр("ДокументЗаявка",Платеж.ДокументПланированияПлатежа);
				
		РезультатЗапроса=Запрос.Выполнить();
		ВыбраннаяЗаявка=РезультатЗапроса.Выбрать();
		
		Если НЕ ВыбраннаяЗаявка.Следующий() Тогда
			ОстатокПоЗаявке=0;
		Иначе
			ОстатокПоЗаявке=ВыбраннаяЗаявка.СуммаВзаиморасчетовОстаток;
		КонецЕсли;
		
		Если ОстатокПоЗаявке<Платеж.СуммаВзаиморасчетов Тогда
			
			Если Платеж.ДоговорКонтрагента=Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				
				ВалютаПлатежа=Платеж.ДокументПланированияПлатежа.ВалютаДокумента;
				
				ТекстОшибки="Сумма платежа превышает остаток по заявке.
				|Текущий остаток = "+Формат(ОстатокПоЗаявке,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаПлатежа+"
				|Сумма платежа = "+Формат(Платеж.СуммаВзаиморасчетов,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаПлатежа;
				
			Иначе
				
				ВалютаРасчетовЗаявки=Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				
				ТекстОшибки="Договор "+Платеж.ДоговорКонтрагента+", сделка "+Платеж.Сделка+"
				|Сумма взаиморасчетов превышает остаток по заявке.
				|Текущий остаток = "+Формат(ОстатокПоЗаявке,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаРасчетовЗаявки+"
				|Сумма взаиморасчетов = "+Формат(Платеж.СуммаВзаиморасчетов,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаРасчетовЗаявки;
				
			КонецЕсли;	
			
			СообщитьОбОшибке(ТекстОшибки,Отказ,Заголовок);	
	
		КонецЕсли;
					
	КонецЦикла;
		
КонецПроцедуры // ПроверитьОстаткиПоЗаявке()

// Возвращает свободный остаток денежных средств (текущий остаток за вычетом сумм, уже предназначенных
// к списанию, и зарезервированных).
//
// Параметры
//  БанковскийСчетКасса			:Банковский счет, касса - место списания денежных средств
//  Дата						:Дата –дата, на которую формируются остатки
//
// Возвращаемое значение:
//   Свободный остаток			:число - свободный остаток на дату по выбранному счету (кассе)
//
Функция ПолучитьСвободныйОстатокДС(БанковскийСчетКасса,Дата, МассивЗаявки) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.СуммаОстаток 
	|		- ВЫБОР КОГДА НЕ((ДенежныеСредстваВРезервеОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|				ТОГДА ДенежныеСредстваВРезервеОстатки.СуммаОстаток 
	|				ИНАЧЕ 0 КОНЕЦ 
	|		- ВЫБОР КОГДА НЕ((ДенежныеСредстваКСписаниюОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|				ТОГДА ДенежныеСредстваКСписаниюОстатки.СуммаОстаток 
	|				ИНАЧЕ 0 КОНЕЦ 
	|		+ ВЫБОР КОГДА НЕ((ДенежныеСредстваКПолучениюОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|				ТОГДА ДенежныеСредстваКПолучениюОстатки.СуммаОстаток 
	|				ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса) КАК ДенежныеСредстваОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВРезерве.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса И (НЕ ДокументРезервирования В (&МассивЗаявки))) КАК ДенежныеСредстваВРезервеОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваВРезервеОстатки.БанковскийСчетКасса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКСписанию.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса) КАК ДенежныеСредстваКСписаниюОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваКСписаниюОстатки.БанковскийСчетКасса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКПолучению.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса) КАК ДенежныеСредстваКПолучениюОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваКПолучениюОстатки.БанковскийСчетКасса";
	
	Запрос.УстановитьПараметр("БанковскийСчетКасса",БанковскийСчетКасса);
	Запрос.УстановитьПараметр("Дата",КонецДня(Дата));
	Запрос.УстановитьПараметр("МассивЗаявки",МассивЗаявки);
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() И (НЕ РезультатЗапроса.СвободныйОстаток=NULL) Тогда
		Возврат РезультатЗапроса.СвободныйОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьСвободныйОстатокДС() 
	
// Возвращает остаток денежных средств в планируемых поступлениях, еще не размещенных по другим заявкам
// к списанию, и зарезервированных).
//
// Параметры
//  ДокументПланировани			:Документ планируемого поступления денежных средств
//  Дата						:Дата –дата, на которую формируются остатки
//
// Возвращаемое значение:
//   Свободный остаток			:число - свободный остаток на дату выбранному документу
//
Функция ПолучитьНеразмещенныйостаток(ДокументПланирования,Дата, ЗаявкаНаРасходованиеСредств) Экспорт

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ПланируемыеПоступленияДенежныхСредствОстатки.СуммаОстаток - ВЫБОР КОГДА НЕ((РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток) ЕСТЬ NULL ) ТОГДА РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток
	             |ИЗ
	             |	РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.Остатки(&Дата, ДокументПланирования = &ДокументПланирования) КАК ПланируемыеПоступленияДенежныхСредствОстатки
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаявокНаРасходованиеСредств.Остатки(, НЕ(ДокументРезервирования = &ТекущаяЗаявка)) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
	             |		ПО ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования = РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументПланирования";
	
	
	Запрос.УстановитьПараметр("ДокументПланирования",ДокументПланирования);
	Запрос.УстановитьПараметр("Дата",КонецДня(Дата));
	Запрос.УстановитьПараметр("ТекущаяЗаявка",ЗаявкаНаРасходованиеСредств);
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() И (НЕ РезультатЗапроса.СвободныйОстаток=NULL) Тогда
		Возврат РезультатЗапроса.СвободныйОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции // ПолучитьСвободныйОстатокДС()

// Возвращает остаток и валюту остатка по ресурсу "Сумма" регистра "ЗаявкиНаРасходованиеСредств" по выбранной заявке
// на указанную дату
Функция ПолучитьОстатокПоЗаявке(ЗаявкаНаРасходование,Дата) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаОстаток
	             |ИЗ
	             |	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(&Дата, ЗаявкаНаРасходование = &ЗаявкаНаРасходование) КАК ЗаявкиНаРасходованиеСредствОстатки";
	
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("ЗаявкаНаРасходование",ЗаявкаНаРасходование);
	
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() И (НЕ Результат.СуммаОстаток=NULL)Тогда
		Возврат Результат.СуммаОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьОстатокПоЗаявке()

// Возвращает таблицу, аналогичную таблице "Расшифровка платежа" с добавленной колонкой "СуммаУпр"
//
Функция ПолучитьТаблицуПлатежейУпр(ДатаДокумента,ВалютаДокумента,Документ, ВидПлатежногоДокумента) Экспорт
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.КонтролироватьДенежныеСредстваКомитента КАК КонтролироватьДенежныеСредстваКомитента,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	РасшифровкаПлатежаДок.Сделка КАК Сделка,
	|	РасшифровкаПлатежаДок.СуммаПлатежа КАК СуммаПлатежа,
	|	РасшифровкаПлатежаДок.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежаДок.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежаДок.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа,
	|	РасшифровкаПлатежаДок.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь КАК ВключатьВПлатежныйКалендарь,
	|	РасшифровкаПлатежаДок.Проект КАК Проект,
	|	РасшифровкаПлатежаДок.СуммаПлатежаПлан КАК СуммаПлатежаПлан,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА РасшифровкаПлатежаДок.СуммаПлатежа
	|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
	|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
	|			РасшифровкаПлатежаДок.СуммаПлатежа * РасшифровкаПлатежаДок.КурсВзаиморасчетов * КурсыУпрУчета.Кратность                        //***было:   РасшифровкаПлатежаДок.СуммаПлатежа*КурсыДокумента.Курс * КурсыУпрУчета.Кратность
	|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА РасшифровкаПлатежаДок.СуммаПлатежа
	|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
	|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
	|			РасшифровкаПлатежаДок.СуммаПлатежа*РасшифровкаПлатежаДок.КурсВзаиморасчетов													  //***было:   РасшифровкаПлатежаДок.СуммаПлатежа*КурсыДокумента.Курс	
	|			/ КурсыДокумента.Кратность
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
	//|	ВЫБОР
	//|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
	//|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
	|	РасшифровкаПлатежаДок.КурсВзаиморасчетов Как КурсДокумента,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
	|ИЗ
	|	Документ."+ВидПлатежногоДокумента+".РасшифровкаПлатежа КАК РасшифровкаПлатежаДок
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
	|	ПО ИСТИНА
	|ГДЕ
	|	РасшифровкаПлатежаДок.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ДатаДокумента",ДатаДокумента);
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУпрУчета",Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРеглУчета",Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Ссылка",Документ);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПлатежей()

//01.04.2019  РасчетыСКонтрагентамиОстатки>> ВзаимоРасчетыСКонтрагентамиОстатки
//Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказуУпр(ДокументОснование, ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж, Коэффициент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);
	
	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВзаимоРасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток "+?(Коэффициент=1,">0","<0")+"
	|
	|";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Сделка = Выборка.Сделка;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.Сумма*Коэффициент;
		СуммаДокумента = ПересчитатьИзВалютыВВалюту(Выборка.Сумма*Коэффициент,
		СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
		ВалютаДокумента,
		СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказуУпр()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "КонтрагентыВзаиморасчетыКомпании".
//
Процедура ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,Коэффициент)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", СтрокаПлатеж.Сделка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сделка КАК Сделка,
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
	|	                                                    ДоговорКонтрагента = &ДоговорКонтрагента
	|	                                                    И Сделка = &Сделка)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток "+?(Коэффициент=1,">0","<0")+"
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаДолга*Коэффициент;
		СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
									
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамУпр()

// Заполняет сумму документа и сумму взаиморасчетов на основании остатка
// по заявке в регистре "ЗаявкиНаРасходованиеСредств"
//
Процедура ЗаполнитьПоЗаявкеУпр(ДокументОбъект,ДокументОснование,глТекущийПользователь) Экспорт
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаПлатежа,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Контрагент КАК Контрагент,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.Владелец.ОсновнойБанковскийСчет КАК СчетКонтрагента,
	|	ЗаявкиНаРасходованиеСредствОстатки.Сделка КАК Сделка,
	|   ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|   ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
	|   ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовПодотчетника,
	|   ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.РасчетныйДокумент КАК РасчетныйДокумент,
	|   ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Ссылка КАК ЗаявкаНаРасходование,
	|   ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Получатель КАК Получатель
	|	
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(, ЗаявкаНаРасходование = &ДокументЗаявка) КАК ЗаявкиНаРасходованиеСредствОстатки";
	
	Запрос.УстановитьПараметр("ДокументЗаявка",ДокументОснование);
	
	СтавкаНДС=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
	
	РезультатЗапроса=Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
			
			СтрокаПлатеж   = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаПлатежа;
			ДокументОбъект.Контрагент=Выборка.Контрагент;
						
		Иначе
			
			ДокументОбъект.Контрагент = Выборка.Контрагент;
			
			Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда
				ДокументОбъект.СчетКонтрагента = Выборка.СчетКонтрагента;
			КонецЕсли;
						
			СтрокаПлатеж=ДокументОбъект.РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			
			Если ДокументОбъект.ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = ДокументОбъект.КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = ДокументОбъект.КратностьДокумента;
			Иначе
				
				СтруктураКурсВзаиморасчетов=ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (ДокументОбъект.КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * ДокументОбъект.КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / ДокументОбъект.КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;	
			
			СтрокаПлатеж.СтавкаНДС=СтавкаНДС;
			СтрокаПлатеж.Сделка=Выборка.Сделка;
			СтрокаПлатеж.ДоговорКонтрагента=Выборка.ДоговорКонтрагента;
			ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЕсли;
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект=Выборка.Проект;
		СтрокаПлатеж.ДокументПланированияПлатежа=Выборка.ЗаявкаНаРасходование;
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
		СтрокаПлатеж.КурсВзаиморасчетовПлан=СтрокаПлатеж.КурсВзаиморасчетов;
		
	КонецЦикла;
	
	ДокументОбъект.СуммаДокумента=ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры // ЗаполнитьПоЗаявкеУпр()

// Заполняет сумму документа и сумму взаиморасчетов на основании остатка
// по планируемому поступлению в регистре "ПланируемыеПоступленияДенежныхСредств"
//
Процедура ЗаполнитьПоПланируемомуПоступлениюУпр(РасшифровкаПлатежа,ДокументОснование,СтавкаНДС,ВалютаДокумента,КурсДокумента,КратностьДокумента,ВидОперации) Экспорт
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПланируемоеПоступлениеОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ПланируемоеПоступлениеОстатки.СуммаОстаток КАК СуммаПлатежа,
	|	ПланируемоеПоступлениеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПланируемоеПоступлениеОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПланируемоеПоступлениеОстатки.Сделка КАК Сделка,
	|   ПланируемоеПоступлениеОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|   ПланируемоеПоступлениеОстатки.Проект КАК Проект,
	|   ПланируемоеПоступлениеОстатки.ДокументПланирования.Ссылка КАК ДокументПланирования
	|	
	|ИЗ
	|	РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.Остатки(, ДокументПланирования = &ДокументПланирования) КАК ПланируемоеПоступлениеОстатки";
	
	Запрос.УстановитьПараметр("ДокументПланирования",ДокументОснование);
	РасшифровкаПлатежа.Очистить();
		
	РезультатЗапроса=Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			
			СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаПлатежа;
										
		Иначе
									
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			
			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			Иначе
				
				СтруктураКурсВзаиморасчетов=ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=СтрокаПлатеж.КурсВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			
		КонецЕсли;
		
		СтрокаПлатеж.СтавкаНДС=СтавкаНДС;
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		СтрокаПлатеж.ДоговорКонтрагента=Выборка.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект=Выборка.Проект;
		СтрокаПлатеж.ДокументПланированияПлатежа=Выборка.ДокументПланирования;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЦикла;
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДокументПланированияПлатежа=ДокументОснование;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаявкеУпр()

// Заполняет входящий платежный документ на основании исходящего (для расчетов между собственными организациями)
//
Процедура ЗаполнитьПоПлатежномуДокументу(ДокументОбъект,Основание)
	
	ОпределитьВидОперацииПоПлатежномуДокументу(Основание.ВидОперации, ДокументОбъект.ВидОперации);	
	
	// Получим преобразованный номер документа
	ПреобразованныйНомер = СокрЛП(Основание.Номер);

	Префикс = "";
	МетаданныеДокумента = Основание.Метаданные();

	Если НЕ ЗначениеНеЗаполнено(Основание.Организация) Тогда
		Префикс = СокрЛП(Основание.Организация.Префикс);
	КонецЕсли;

	// удаление префикса из номера документа
	Если Найти(ПреобразованныйНомер, Префикс)=1 Тогда 
		ПреобразованныйНомер = Сред(ПреобразованныйНомер, СтрДлина(Префикс)+1);
	КонецЕсли;

	// так же, может остаться "минус" впереди
	Если Лев(ПреобразованныйНомер, 1) = "-" Тогда
		ПреобразованныйНомер = Сред(ПреобразованныйНомер, 2);
	КонецЕсли;

	// удаление ведущих нулей
	Пока Лев(ПреобразованныйНомер, 1)="0" Цикл
		ПреобразованныйНомер=Сред(ПреобразованныйНомер, 2);
	КонецЦикла;
	
	ДокументОбъект.НомерВходящегоДокумента = ПреобразованныйНомер;
	ДокументОбъект.ДатаВходящегоДокумента  = Основание.Дата;
	
	// Поменяем организацию и контрагента местами.	
	ДокументОбъект.Организация = ПолучитьОрганизациюПоКонтрагенту(Основание.Контрагент);
	ДокументОбъект.Контрагент  = ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
	
	ДокументОбъект.СчетОрганизации=Основание.СчетКонтрагента;
	ДокументОбъект.СчетКонтрагента=Основание.СчетОрганизации;
	
	ДокументОбъект.ВалютаДокумента=Основание.ВалютаДокумента;
	
	Если ДокументОбъект.Организация = ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента.Организация Тогда
		ДоговорКонтрагента = ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента;
	Иначе
		ДоговорКонтрагента=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;	
	
	// Получим список договоров между собственными организациями
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	             |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	             |ИЗ
	             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	             |
	             |ГДЕ
	             |	ДоговорыКонтрагентов.Владелец = &Владелец И
	             |	ДоговорыКонтрагентов.Организация = &Организация";
				 
	Запрос.УстановитьПараметр("Владелец",ДокументОбъект.Контрагент);
	Запрос.УстановитьПараметр("Организация",ДокументОбъект.Организация);
	ТабДоговоры=Запрос.Выполнить().Выгрузить();
	
	ВидДокумента=Основание.Метаданные().Имя;
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПлатежныйДокументРасшифровкаПлатежа.КурсВзаиморасчетов,
	|	ПлатежныйДокументРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПлатежныйДокументРасшифровкаПлатежа.СуммаПлатежа,
	|	ПлатежныйДокументРасшифровкаПлатежа.КратностьВзаиморасчетов,
	|	ПлатежныйДокументРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ПлатежныйДокументРасшифровкаПлатежа.СтавкаНДС,
	|	ПлатежныйДокументРасшифровкаПлатежа.СуммаНДС,
	|	ПлатежныйДокументРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	ПлатежныйДокументРасшифровкаПлатежа.Проект,
	|	ПлатежныйДокументРасшифровкаПлатежа.Ссылка.СуммаДокумента,
	|	КурсыВалютСрезПоследних.Курс КАК КурсДокумента,
	|	КурсыВалютСрезПоследних.Кратность КАК КратностьДокумента
	|ИЗ
	|	Документ."+ВидДокумента+".РасшифровкаПлатежа КАК ПлатежныйДокументРасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО ПлатежныйДокументРасшифровкаПлатежа.Ссылка.ВалютаДокумента = КурсыВалютСрезПоследних.Валюта
	|
	|ГДЕ
	|	ПлатежныйДокументРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Основание);
	
	РезультатЗапроса=Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДокументОбъект.СуммаДокумента=Выборка.СуммаДокумента;
		ДокументОбъект.КурсДокумента=Выборка.КурсДокумента;
		ДокументОбъект.КратностьДокумента=Выборка.КратностьДокумента;
		Выборка.Сбросить();
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаПлатеж=ДокументОбъект.РасшифровкаПлатежа.Добавить();
		
		СтруктураПоискаДоговор=Новый Структура;
		СтруктураПоискаДоговор.Вставить("ДоговорКонтрагента",ДоговорКонтрагента);
		СтруктураПоискаДоговор.Вставить("ВалютаВзаиморасчетов",Выборка.ВалютаВзаиморасчетов);
		
		МассивДоговор=ТабДоговоры.НайтиСтроки(СтруктураПоискаДоговор);
		
		Если МассивДоговор.Количество()=1 Тогда
			СтрокаПлатеж.ДоговорКонтрагента=ДоговорКонтрагента;
		Иначе
			СтруктураПоискаВалюта=Новый Структура;
			СтруктураПоискаВалюта.Вставить("ВалютаВзаиморасчетов",Выборка.ВалютаВзаиморасчетов);
			
			МассивВалюта=ТабДоговоры.НайтиСтроки(СтруктураПоискаВалюта);
			Если МассивВалюта.Количество()>0 Тогда
				СтрокаПлатеж.ДоговорКонтрагента=МассивВалюта[0].ДоговорКонтрагента;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаПлатеж.КурсВзаиморасчетов=Выборка.КурсВзаиморасчетов;
		СтрокаПлатеж.КратностьВзаиморасчетов=Выборка.КратностьВзаиморасчетов;
		СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
		СтрокаПлатеж.СуммаПлатежа=Выборка.СуммаПлатежа;
		СтрокаПлатеж.СтавкаНДС=Выборка.СтавкаНДС;
		СтрокаПлатеж.СуммаНДС=Выборка.СуммаНДС;	
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект=Выборка.Проект;
		
	КонецЦикла;
				 	
КонецПроцедуры // ЗаполнитьПриходПоПлатежномуДокументу()

// Стандартная процедура ввода расходного платежного документа на основании. Применяется ко всем документам,
// кроме исходящего платежного поручения и расходного кассового ордера.
//
Процедура ЗаполнитьРасходПоОснованию(ДокументОбъект, Основание, глТекущийПользователь) Экспорт
	
	мВалютаРегламентированногоУчета=Константы.ВалютаРегламентированногоУчета.Получить();
	СтавкаНДС=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
		
	СпособЗаполнения = "Не заполнять";
	ДокументОбъект.ВалютаДокумента  = мВалютаРегламентированногоУчета;
		
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") 
		 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		СтрокаПлатеж=ДокументОбъект.РасшифровкаПлатежа.Добавить();
		
		ДокументОбъект.ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		КонецЕсли;
							
		Если НЕ ЗначениеНеЗаполнено(Основание.СтруктурнаяЕдиница) Тогда
			ДокументОбъект.СчетОрганизации          = Основание.СтруктурнаяЕдиница;
		Иначе
			ДокументОбъект.СчетОрганизации          = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;	
		
		Если НЕ ДокументОбъект.СчетОрганизации.Пустая() Тогда
			ДокументОбъект.ВалютаДокумента=ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ДокументОбъект.ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;

		Если ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
	
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		Если НЕ ДокументОбъект.СчетОрганизации.Пустая() Тогда
			ДокументОбъект.ВалютаДокумента=ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ДокументОбъект.ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,);
		ДокументОбъект.КурсДокумента      		= СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента 		= СтруктураКурсаДокумента.Кратность;	
		СтрокаПлатеж.СтавкаНДС	= СтавкаНДС;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
		  	или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
		  	или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
		КонецЕсли;
		
		СтрокаПлатеж=ДокументОбъект.РасшифровкаПлатежа.Добавить();
		
		ДокументОбъект.Контрагент  = Основание.Контрагент;
		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;

		Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаПлатеж.Сделка = Неопределено;
			Иначе
				СтрокаПлатеж.Сделка = Основание;
			КонецЕсли;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По взаиморасчетам";
			КонецЕсли;
		Иначе
			СтрокаПлатеж.Сделка = Основание.Сделка;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.СчетОрганизации              = ДокументОбъект.Организация.ОсновнойБанковскийСчет;	
		
		Если НЕ ДокументОбъект.СчетОрганизации.Пустая() Тогда
			ДокументОбъект.ВалютаДокумента=ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ДокументОбъект.ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;

		Если ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
			
		СтруктураКурсаДокумента           = ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата);
		ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;	
		
		СтрокаПлатеж.СтавкаНДС=СтавкаНДС;
						
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		
		Если Основание.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные Тогда
		Сообщить("Заявка оформлена на расходование наличных денежных средств.");
		Возврат;
	КонецЕсли;

	ВидОперацииЗаявка = Основание.ВидОперации;

	ОпределитьОперациюПоОснованиюУпр(ДокументОбъект.ВидОперации,ВидОперацииЗаявка);

	ДокументОбъект.Организация = Основание.Организация;
    ДокументОбъект.ВалютаДокумента = Основание.ВалютаДокумента;

	Если НЕ ЗначениеНеЗаполнено(Основание.БанковскийСчетКасса) Тогда
		ДокументОбъект.СчетОрганизации = Основание.БанковскийСчетКасса;
	ИначеЕсли ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
		ДокументОбъект.СчетОрганизации= ДокументОбъект.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;

	ДокументОбъект.Ответственный     = Основание.Ответственный;
	ДокументОбъект.ДокументОснование = Основание.Ссылка;
	
	Если ДокументОбъект.ВалютаДокумента.Пустая() Тогда
		ДокументОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
	КонецЕсли;

	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата);
	ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
	ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	ЗаполнитьПоЗаявкеУпр(ДокументОбъект,Основание, глТекущийПользователь);
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное") Тогда
		
		ЗаполнитьПоПлатежномуДокументу(ДокументОбъект,Основание);
		ДокументОбъект.Ответственный = глТекущийПользователь;
	
	КонецЕсли;
	
	Если СпособЗаполнения = "По заказу" Тогда
		
		ЗаполнитьПоЗаказуУпр(Основание, ДокументОбъект.ВалютаДокумента,ДокументОбъект.КурсДокумента,ДокументОбъект.КратностьДокумента,СтрокаПлатеж,-1);
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
		ДокументОбъект.СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		ДокументОбъект.Ответственный=глТекущийПользователь;		
		
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		
		ЗаполнитьПоВзаиморасчетамУпр(ДокументОбъект.ВалютаДокумента,ДокументОбъект.КурсДокумента,ДокументОбъект.КратностьДокумента,СтрокаПлатеж,-1);
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
		ДокументОбъект.Ответственный=глТекущийПользователь;
		
	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда
		
		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ОснованиеСуммаДокумента = Основание.СуммаДокумента - Основание.СуммаВознаграждения;
		КонецЕсли;

		СтруктураКурсаОснования = ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                 КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента      = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                                 ДокументОбъект.КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, ДокументОбъект.КратностьДокумента);
										 
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
		ДокументОбъект.Ответственный=глТекущийПользователь;

	КонецЕсли;
	
	ДокументОбъект.СуммаДокумента=ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ДокументОбъект.ОтраженоВОперУчете=Истина;
	ДокументОбъект.ДокументОснование=Основание.Ссылка;
	
КонецПроцедуры // ЗаполнитьРасходПоОснованию

// Процедура стандартного заполнения входящего платежного документа при вводе на основании. Применима ко всем документам,
// кроме приходного кассового ордера.
//
Процедура ЗаполнитьПриходПоОснованию(ДокументОбъект, Основание, глТекущийПользователь) Экспорт
	
	мВалютаРегламентированногоУчета=Константы.ВалютаРегламентированногоУчета.Получить();
	СтавкаНДС=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
	
	СпособЗаполнения = "Не заполнять";

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

	    СтрокаПлатеж     = ДокументОбъект.РасшифровкаПлатежа.Добавить();
	 
		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, );
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		КонецЕсли;

		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;

		Если НЕ ЗначениеНеЗаполнено(Основание.СтруктурнаяЕдиница) Тогда
			ДокументОбъект.СчетОрганизации = Основание.СтруктурнаяЕдиница;
		Иначе
			ДокументОбъект.СчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Если НЕ ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств.Пустая() Тогда
			ДокументОбъект.ВалютаДокумента=ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ДокументОбъект.ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;

		Если ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,);
		ДокументОбъект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		СтрокаПлатеж.СтавкаНДС  = СтавкаНДС;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		 или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) Тогда

		СтрокаПлатеж     = ДокументОбъект.РасшифровкаПлатежа.Добавить(); 
		 
		СтрокаПлатеж.ДоговорКонтрагента   = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, );
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		
		ДокументОбъект.СчетОрганизации     = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		
		Если НЕ ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств.Пустая() Тогда
			ДокументОбъект.ВалютаДокумента=ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ДокументОбъект.ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;

		Если ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			СтрокаПлатеж.Сделка = Основание;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По взаиморасчетам";
			КонецЕсли;
		Иначе
			СтрокаПлатеж.Сделка = Основание.Сделка;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;

		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,);
		ДокументОбъект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		СтрокаПлатеж.СтавкаНДС  = СтавкаНДС;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда

		СтрокаПлатеж     = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
		ДокументОбъект.Контрагент  = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента   = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, );
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		ДокументОбъект.СчетОрганизации     = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		
		Если НЕ ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств.Пустая() Тогда
			ДокументОбъект.ВалютаДокумента=ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ДокументОбъект.ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;

		Если ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = 
				                    Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			СтрокаПлатеж.Сделка = Основание;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По взаиморасчетам";
			КонецЕсли;
		Иначе
			СтрокаПлатеж.Сделка = Основание.Сделка;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;
		
		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,);
		ДокументОбъект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		СтрокаПлатеж.СтавкаНДС  = СтавкаНДС;
		
	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
		
		Если (НЕ Основание.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные) 
			ИЛИ Основание.ВидОперации=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПриходДенежныхСредствРозничнаяВыручка Тогда
			Сообщить("Документом планировалось поступление наличных денежных средств.");
			Возврат;
		КонецЕсли;
		
		ВидОперацииПоступление = Основание.ВидОперации;
		
		ОпределитьОперациюПоОснованиюУпр(ДокументОбъект.ВидОперации,ВидОперацииПоступление);
		
		ДокументОбъект.Организация = Основание.Организация;
		ДокументОбъект.ВалютаДокумента = Основание.ВалютаДокумента;
		
		Если НЕ ЗначениеНеЗаполнено(Основание.БанковскийСчетКасса) Тогда
			ДокументОбъект.СчетОрганизации = Основание.БанковскийСчетКасса;
		ИначеЕсли ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.СчетОрганизации= ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		ДокументОбъект.Ответственный     = Основание.Ответственный;
		
		Если ДокументОбъект.ВалютаДокумента.Пустая() Тогда
			ДокументОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,);
		ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		Если ДокументОбъект.ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			ДокументОбъект.Контрагент=Основание.КассаККМ;
		КонецЕсли;
		
		ЗаполнитьПоПланируемомуПоступлениюУпр(ДокументОбъект.РасшифровкаПлатежа,
							Основание,
							СтавкаНДС, 
							ДокументОбъект.ВалютаДокумента,
							ДокументОбъект.КурсДокумента,
							ДокументОбъект.КратностьДокумента,
							ДокументОбъект.ВидОперации);
				
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АккредитивПереданный")
		 или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")) Тогда
		 			
			ЗаполнитьПоПлатежномуДокументу(ДокументОбъект,Основание);
			ДокументОбъект.Ответственный      = глТекущийПользователь;
			
	КонецЕсли;

	Если СпособЗаполнения = "По заказу" Тогда

		ЗаполнитьПоЗаказуУпр(Основание, ДокументОбъект.ВалютаДокумента,ДокументОбъект.КурсДокумента,ДокументОбъект.КратностьДокумента,СтрокаПлатеж,1);
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		ДокументОбъект.Ответственный      = глТекущийПользователь;

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда

		ЗаполнитьПоВзаиморасчетамУпр(ДокументОбъект.ВалютаДокумента,ДокументОбъект.КурсДокумента,ДокументОбъект.КратностьДокумента,СтрокаПлатеж,1);
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		ДокументОбъект.Ответственный      = глТекущийПользователь;

	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда

		СтруктураКурсаОснования = ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;

		ОснованиеСуммаДокумента  = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ОснованиеСуммаДокумента = ОснованиеСуммаДокумента - Основание.СуммаВознаграждения;
		КонецЕсли;

		СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                   КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                 ДокументОбъект.КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,ДокументОбъект.КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		ДокументОбъект.Ответственный      = глТекущийПользователь;

	КонецЕсли;

	ДокументОбъект.СуммаДокумента=ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ДокументОбъект.ДокументОснование=Основание.Ссылка;
	ДокументОбъект.ОтраженоВОперУчете = Истина;
	
КонецПроцедуры // ЗаполнитьПриходПоОснованию()

 
// Возвращает структуру с курсами и кратностями для валют, переданных в качестве параметра
//
// Параметры
//  СтруктураГруппаВалют: Структура - Структура, содержащее валюты, для которых необходимо получить курсы
//	ДатаКурса: Дата - дата, на которую необходимо получить курсы.
//
// Возвращаемое значение:
//   СтруктураКурсыВалют: структура - структура, содержащая курсы для указанных валют.
//
Функция ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,ДатаКурса) Экспорт
	
	Запрос=Новый Запрос;
	СписокВалют=Новый СписокЗначений;
	
	Для каждого Валюта Из СтруктураГруппаВалют Цикл
	
		СписокВалют.Добавить(Валюта.Значение);
	
	КонецЦикла; 
	
	Запрос.Текст="ВЫБРАТЬ
	             |	КурсыВалютСрезПоследних.Курс КАК Курс,
	             |	КурсыВалютСрезПоследних.Кратность КАК Кратность,
	             |	КурсыВалютСрезПоследних.Валюта.Код КАК КодВалюты,
	             |	КурсыВалютСрезПоследних.Валюта.Ссылка КАК Валюта
	             |ИЗ
	             |	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта.Код В (&СписокВалют)) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаКурса",ДатаКурса);
	Запрос.УстановитьПараметр("СписокВалют",СписокВалют);
	
	СтруктураКурсыВалют=Новый Структура;

	Результат=Запрос.Выполнить().Выгрузить();
		
	Для каждого Валюта Из СтруктураГруппаВалют Цикл
		
		СтрокаВалюта=Результат.Найти(Валюта.Значение,"КодВалюты");
		
		Если НЕ СтрокаВалюта=Неопределено Тогда
		   	СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Курс",СтрокаВалюта.Курс);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Кратность",СтрокаВалюта.Кратность);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ,СтрокаВалюта.Валюта);
		Иначе
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Курс",0);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Кратность",0);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ,Новый(Тип("СправочникСсылка.Валюты")));
		КонецЕсли;
		
	КонецЦикла; 		
	
	Возврат СтруктураКурсыВалют;

КонецФункции // ПолучитьКурсыДляГруппыВалют()
	
// Определяет сделку, по которой надо сделать движение по строке ТЧ платежного документа 
//
// Параметры: 
//  ДокументОбъект          	- объект проводимого документа, 
//  СтрокаТЧ				 	- строка табличной части документа, для которой надо определить сделку.
//  ИмяРеквизитаСделка      	- необязательный параметр, имя реквизита "сделка".
//
// Возвращаемое значение:
//  Ссылка на документ или Неопределно, т.е. значение, которое надо записать в измерение Сделка регистра.
//
Функция ОпределитьСделкуСтрокиТЧ (ДокументОбъект,СтрокаТЧ, ИмяРеквизитаСделка = "Сделка", ИмяРеквизитаДоговор="ДоговорКонтрагента") Экспорт

	// Возвращаемое значение.
	Сделка = Неопределено;
	
	ВедениеВзаиморасчетов=СтрокаТЧ[ИмяРеквизитаДоговор].ВедениеВзаиморасчетов; 
	
	Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда

		// Если сделка не указана, то документ сам становится сделкой
		Если ЗначениеНеЗаполнено(СтрокаТЧ[ИмяРеквизитаСделка]) Тогда

			Сделка = ДокументОбъект.Ссылка;

		// Если указана, то происходит движение по указанной сделке.
		Иначе

			Сделка = СтрокаТЧ[ИмяРеквизитаСделка];

		КонецЕсли;
		
	ИначеЕсли ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

		Сделка = СтрокаТЧ[ИмяРеквизитаСделка];

	КонецЕсли;

	Возврат Сделка;

КонецФункции // ОпределитьСделкуСтрокиТЧ()

// Процедура контролирует остаток регистра "Взаиморасчеты с контрагентами" по сделкам
// и договорам переданной табличной части платежного документа.
//
// Параметры:
//  РасшифровкаПлатежа    - табличная часть платежного документа 
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//  ТолькоРасчетныеДокументы - флаг, определяющий, что должны проверяться только остатки по расчетным документам.
//
Процедура КонтрольОстатковПоТЧ(ДатаПлатежа, РасшифровкаПлатежа, Отказ, Заголовок, ТолькоРасчетныеДокументы=Ложь) Экспорт
	
	РасшифровкаСделка=РасшифровкаПлатежа.Выгрузить();
	РасшифровкаСделка.Свернуть("ДоговорКонтрагента,Сделка","СуммаВзаиморасчетов");
	
	Если Не ТолькоРасчетныеДокументы Тогда
		
		РасшифровкаДоговор=РасшифровкаПлатежа.Выгрузить();
		РасшифровкаДоговор.Свернуть("ДоговорКонтрагента","СуммаВзаиморасчетов");
		
		Для Каждого Платеж ИЗ РасшифровкаДоговор Цикл
			
			ДоговорКонтрагента = Платеж.ДоговорКонтрагента;
			
			Если ДоговорКонтрагента.КонтролироватьСуммуЗадолженности Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
				
				Запрос.Текст = "
				|ВЫБРАТЬ // Для контроля суммы задолженности по расчетному документу (ведение взаиморасчетов - по расчетным документам)
				|    ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовОстаток
				|ИЗ
				|	 РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
				|	 ДоговорКонтрагента = &ДоговорКонтрагента
				|	 ) КАК ВзаиморасчетыПоДоговору
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СуммаВзаиморасчетовОстаток = ?(Выборка.СуммаВзаиморасчетовОстаток= NULL, 0, Выборка.СуммаВзаиморасчетовОстаток);
					
					СуммаВзаиморасчетовПоПлатежу = Платеж.СуммаВзаиморасчетов;
					
					Валюта = ?(ДоговорКонтрагента.ВалютаВзаиморасчетов = NULL, "", ДоговорКонтрагента.ВалютаВзаиморасчетов);
					Если (СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоПлатежу) > ДоговорКонтрагента.ДопустимаяСуммаЗадолженности Тогда
						ОшибкаПриПроведении("Сумма задолженности по договору " + ДоговорКонтрагента + 
						" с учетом документа превышает допустимую сумму задолженности." + Символы.ПС +
						Символы.Таб + "Сумма задолженности с учетом документа: " + (СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоПлатежу) + " " + Валюта + 
						", допустимая сумма задолженности: " + ДоговорКонтрагента.ДопустимаяСуммаЗадолженности + " " + Валюта + 
						", превышение: " + (Формат(СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоПлатежу - ДоговорКонтрагента.ДопустимаяСуммаЗадолженности, "ЧЦ=15;ЧДЦ=2")) + " " + Валюта, Отказ, Заголовок);
					КонецЕсли;															
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Платеж Из РасшифровкаСделка Цикл
		
		ДоговорКонтрагента = Платеж.ДоговорКонтрагента;
		Сделка = Платеж.Сделка;
		
		Если (НЕ ТолькоРасчетныеДокументы) И (ДоговорКонтрагента.ПроцентПредоплаты > 0) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
			Запрос.УстановитьПараметр("Сделка",                Сделка);
			
			Запрос.Текст = "
			|ВЫБРАТЬ // Для контроля суммы задолженности по расчетному документу (ведение взаиморасчетов - по расчетным документам)
			|    ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовПриход   КАК СуммаЗаказа,
			|    ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовРасход   КАК СуммаОплаты
			|ИЗ
			//+++ 01.04.2019
			|	 РегистрНакопления.ВзаимоРасчетыСКонтрагентами.Обороты(,,,
			|	 ДоговорКонтрагента = &ДоговорКонтрагента
			|	 И Сделка              = &Сделка
			|	 ) КАК ВзаиморасчетыПоДоговору
			|";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СуммаЗаказа = ?(Выборка.СуммаЗаказа = NULL, 0, Выборка.СуммаЗаказа);
				СуммаОплаты = ?(Выборка.СуммаОплаты = NULL, 0, Выборка.СуммаОплаты);
				ПроцентПредоплаты = ДоговорКонтрагента.ПроцентПредоплаты;
				ПроцентСовершеннойПредоплаты = ?(СуммаЗаказа = 0, 100, СуммаОплаты / СуммаЗаказа * 100);
				
				Если ПроцентСовершеннойПредоплаты < ПроцентПредоплаты Тогда
					ОшибкаПриПроведении("Недостаточна предоплата по заказу " + Сделка + 
					Символы.ПС + Символы.Таб + " По договору """ + ДоговорКонтрагента + 
					""" требуется предоплата в размере " + ПроцентПредоплаты + "% ; Поступила предоплата  в размере " 
					+ Окр(ПроцентСовершеннойПредоплаты, 2, 1) + "%", Отказ, Заголовок);
				КонецЕсли;															
			КонецЕсли;
		КонецЕсли;
		
		// Контроль задолженности по расчетным документам
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			
			Если Не ЗначениеНеЗаполнено(Сделка) Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
				
				Запрос.УстановитьПараметр("Сделка", Сделка);
				
				Запрос.Текст = "
				|ВЫБРАТЬ // Для контроля суммы задолженности по расчетному документу (ведение взаиморасчетов - по расчетным документам)
				|    ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовОстаток
				|ИЗ
				|	 РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
				|	 ДоговорКонтрагента = &ДоговорКонтрагента
				|	 И Сделка = &Сделка
				|	 ) КАК ВзаиморасчетыПоДоговору
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					
					СуммаВзаиморасчетовОстаток = ?(Выборка.СуммаВзаиморасчетовОстаток= NULL, 0, ?(Выборка.СуммаВзаиморасчетовОстаток > 0, 1, -1) * Выборка.СуммаВзаиморасчетовОстаток);
					
					СуммаВзаиморасчетовПоДокументу = Платеж.СуммаВзаиморасчетов;
					
					Валюта = ?(ДоговорКонтрагента.ВалютаВзаиморасчетов = NULL, "", ДоговорКонтрагента.ВалютаВзаиморасчетов);
					Если СуммаВзаиморасчетовОстаток < СуммаВзаиморасчетовПоДокументу Тогда
						ОшибкаНетОстатка("Сумма по документу превышает текущую задолженность по расчетному документу " + Сделка + ".",
						СуммаВзаиморасчетовОстаток, СуммаВзаиморасчетовПоДокументу, Валюта, Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если (НЕ ТолькоРасчетныеДокументы) И ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности  Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
				Запрос.УстановитьПараметр("ПоРасчетнымДокументам", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
				
				Запрос.Текст =
				"ВЫБРАТЬ	// Выбирает даты самых ранних сделок по договорам, указанным в т.ч. 
				|		МИНИМУМ(Сделка.Дата) КАК ДатаПервойСделки,
				|		ДоговорКонтрагента
				|	ИЗ	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, 
				|		ДоговорКонтрагента = &ДоговорКонтрагента)
				|	ГДЕ СуммаВзаиморасчетовОстаток > 0	// Дебиторская задолженность больше 0
				|		И ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоРасчетнымДокументам
				|		И ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности
				|	СГРУППИРОВАТЬ ПО ДоговорКонтрагента";
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() И НЕ Выборка.ДатаПервойСделки=NULL Тогда
					ДопустимоеЧислоДнейЗадолженности = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
					РазницаДатВСекундах = (ДатаПлатежа - Выборка.ДатаПервойСделки);
					
					РазницаДней = Цел(РазницаДатВСекундах/(24 * 60 * 60));
					Если РазницаДней > ДопустимоеЧислоДнейЗадолженности Тогда
						
						ОшибкаПриПроведении("Превышено допустимое число дней задолженности по договору " + ДоговорКонтрагента + 
						Символы.ПС + Символы.Таб +
						" Допустимое число дней задолженности: " + ДопустимоеЧислоДнейЗадолженности + 
						", дата самой старой задолженности: " + Выборка.ДатаПервойСделки + 
						", превышение: " + 
						РазницаДней + " дней",
						Отказ, Заголовок);
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // КонтрольОстатковПоТЧ()

Функция НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации = неопределено) Экспорт

	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	Если не ЗначениеНеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами,ВидОперацииРасчет);
        РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
			
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
		
		Возврат РасчетВозвратПоВидуОпераций[ВидОперации];
		
	Иначе
		
		Возврат Перечисления.РасчетыВозврат.Расчеты;
		
	Конецесли;
		
КонецФункции

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыСКонтрагентами(ВидОперации=Неопределено) Экспорт
	
	Если ВидОперации=Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Возврат ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами
		
	КонецЕсли;
	
КонецФункции // ЕстьРасчетыСКонтрагентами()

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыПоКредитам(ВидОперации=Неопределено) Экспорт
	
	Если ВидОперации=Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Возврат ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам
	
	КонецЕсли;
	
КонецФункции // ЕстьРасчетыПоКредитам()

// Определяет вид операции расчетного документа по виду операции заявки на расходование средств
// или планируемого поступления денежных средств
//
Процедура ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииОснование) Экспорт
	
	Если ВидОперацииОснование.Метаданные().Имя="ВидыОперацийЗаявкиНаРасходование" Тогда
		
		Если  ВидОперации.Метаданные().Имя="ВидыОперацийСписаниеБезналичныхДенежныхСредств" Тогда
			
			Если ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога Тогда
			   ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами Тогда
			   ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;
			КонецЕсли;
			
		ИначеЕсли ВидОперации.Метаданные().Имя="ВидыОперацийППИсходящее" Тогда
			
			Если ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщикуСКодомКБК Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств;
			КонецЕсли;
			
		ИначеЕсли ВидОперации.Метаданные().Имя="ВидыОперацийРКО" Тогда
			
			Если ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли ВидОперацииОснование.Метаданные().Имя="ВидыОперацийПланируемоеПоступлениеДС" Тогда
		
		Если  ВидОперации.Метаданные().Имя="ВидыОперацийПоступлениеБезналичныхДенежныхСредств" Тогда
			
			Если ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком Тогда
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя Тогда
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам Тогда
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
			КонецЕсли;
			
		ИначеЕсли  ВидОперации.Метаданные().Имя="ВидыОперацийПКО" Тогда
			
			Если ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПриходДенежныхСредствРозничнаяВыручка Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;			

КонецПроцедуры // ОпределитьОперациюПоОснованиюУпр()

Функция ОпределитьВидОперацииПлан(ВидОперацииДокумент) Экспорт;
	
	Если ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику;
				
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами;
				
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее ИЛИ 
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда	 
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда	
		
		ВидОперацииПлан=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПриходДенежныхСредствРозничнаяВыручка;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочееПоступлениеДенежныхСредств;
		
	Иначе
		
		ВидОперацииПлан=Неопределено;
		
	КонецЕсли;
	
	Возврат ВидОперацииПлан;
	
КонецФункции // ОпределитьВидОперацииПлан()

Процедура УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперацииДокумент) Экспорт;
	
	Если НЕ СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка() Тогда
		Возврат;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствПокупателю;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствКассеККМ;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствПодотчетнику;
				
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеНалога;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами;
				
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств ИЛИ 
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее ИЛИ 
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда	 
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеРасходыДенежныхСредств;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПриходДенежныхСредствРозничнаяВыручка Тогда	
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПриходДенежныхСредствРозничнаяВыручка;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам ИЛИ 
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочееПоступлениеДенежныхСредств ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеПоступленияДенежныхСредств;
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеМеждуСчетами;			
	КонецЕсли;
		
КонецПроцедуры // УстановитьСтатьюДДСПоУмолчанию()

// Определяет вид операции документа поступления по документу расхода - основанию
//
Процедура ОпределитьВидОперацииПоПлатежномуДокументу(ВидОперацииОснование,ВидОперацииДокумент)
	
	Если  ВидОперацииДокумент.Метаданные().Имя="ВидыОперацийПоступлениеБезналичныхДенежныхСредств" Тогда
		
		Если ВидОперацииОснование=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю ИЛИ 
			ВидОперацииОснование=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
			
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
			
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику ИЛИ 
			ВидОперацииОснование=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику Тогда
			
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ 
			ВидОперацииОснование=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
			
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
			
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ 
			ВидОперацииОснование=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
			
		Иначе
			
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперацииДокумент.Метаданные().Имя="ВидыОперацийСписаниеБезналичныхДенежныхСредств" Тогда
		
		Если ВидОперацииОснование=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
		Иначе
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьВидОперацииПоПлатежномуДокументу()

// Возаращает вид договора с контрагентом по виду операции
//
Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации=Неопределено) Экспорт
	
	СПоставщиком  	= Новый СписокЗначений;
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	СПокупателем  	= Новый СписокЗначений;
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Прочее  		= Новый СписокЗначений;
	Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Если не ЗначениеНеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		ВидДоговораПоВидуОпераций = Новый Соответствие();

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,СПокупателем);
			
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами,Прочее);
        ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,СПокупателем);
			
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,СПокупателем);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщикуСКодомКБК,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю,СПокупателем);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		
		ВидДоговора=ВидДоговораПоВидуОпераций[ВидОперации];
		
		Если НЕ ВидДоговора = Неопределено Тогда
			
			Возврат ВидДоговора;
			
		Иначе
			
			Возврат Новый СписокЗначений;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Новый СписокЗначений;
		
	Конецесли;
	
КонецФункции // ОпределитьВидДоговораСКонтрагентом()

// Возвращает параметры для выбора сделки по виду операции.
//
Функция ОпределитьПараметрыВыбораСделки(ВидОперации=Неопределено) Экспорт
	
	ЗаказПокупателяПриход =  Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Расход","ЗаказПокупателя"); // Расход по регистру взаиморасчетов
    ЗаказПокупателяРасход =  Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Приход","ЗаказПокупателя"); // Приход по регистру взаиморасчетов
    ЗаказПоставщикуПриход =  Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Расход","ЗаказПоставщику"); // Расход по регистру взаиморасчетов
	ЗаказПоставщикуРасход =  Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Приход","ЗаказПоставщику"); // Приход по регистру взаиморасчетов
		
	Если не ЗначениеНеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		ПараметрыСделкиПоВидуОпераций = Новый Соответствие();

		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
		
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,ЗаказПокупателяПриход);
        ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,ЗаказПоставщикуПриход);
		
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
		
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,ЗаказПокупателяПриход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,ЗаказПоставщикуПриход);
			
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
		
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
				
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя,ЗаказПокупателяПриход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком,ЗаказПоставщикуПриход);
		
		Если Не ПараметрыСделкиПоВидуОпераций[ВидОперации]=Неопределено Тогда
			Возврат ПараметрыСделкиПоВидуОпераций[ВидОперации];
		Иначе
			Возврат Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Прочие","Прочие");
		КонецЕсли;
		
	Иначе
		
		Возврат ЗаказПокупателяПриход;
		
	Конецесли;
	
КонецФункции // ОпределитьПараметрыВыбораСделки()


////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции диалогов расчетных документов


// Формирует надпись при частичной оплате расчетного документа.
// Параметры: Расчетный документ - документ, для которого формируется надпись
//            ИмяРегистра: регистр, по которому проверяются остатки.
//			  Измерение: имя измерения регистра (ДокументПолучения или ДокументСписания)
// Возвращаемое значение:
// 			  ТекстНадписи
//
Функция СформироватьТекстЧастичнаяОплата(РасчетныйДокумент, ИмяРегистра, Измерение) Экспорт
	
	ТекстЗапроса="ВЫБРАТЬ
	|	ОперативноеДвижение.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления."+ИмяРегистра+".Остатки(, "+Измерение+" = &РасчетныйДокумент) КАК ОперативноеДвижение";
	Запрос=Новый Запрос;
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("РасчетныйДокумент",РасчетныйДокумент);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() И (НЕ Результат.СуммаОстаток = NULL) Тогда
		ТекстНадписи = ?(Результат.СуммаОстаток = 0, "Оплата произведена полностью.", ("Частичная оплата. Остаток " + Формат(Результат.СуммаОстаток,"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+"."));
	Иначе
		ТекстНадписи = "Оплата произведена полностью.";
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьТекстЧастичнаяОплата()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
	
	ЗначениеСтавкиНДС = ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
	
КонецПроцедуры // ПересчитатьСуммуНДС()

// Проставляет реквизиты, необходимые для проведения по регламентированному учету
// 
Процедура ЗаполнитьРеквизитыРеглУчета(СтрокаПлатеж,Организация, Контрагент, НДСПоУмолчанию) Экспорт;
	
	//Пересчитываем сумму НДС
	
	Если СтрокаПлатеж.СтавкаНДС.Пустая() Тогда
		СтрокаПлатеж.СтавкаНДС=НДСПоУмолчанию;
	КонецЕсли;				
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
					
КонецПроцедуры // ЗаполнитьРеквизитыРеглУчета()
	 

Процедура ОбработкаПодбораЗадолженностей(СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора,
										ПлатежиСписком,ВалютаДокумента,КурсДокумента,КратностьДокумента,
										Организация, Контрагент, НДСПоУмолчанию="",ОтражатьВБухгалтерскомУчете=Неопределено) Экспорт
	
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("ДоговорКонтрагента",ЗначениеВыбора.ДоговорКонтрагента);
	
	Если Не ЗначениеВыбора.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		
		СтруктураОтбора.Вставить("Сделка",ЗначениеВыбора.Сделка);
		
	КонецЕсли;
	
	МассивСтрок=РасшифровкаПлатежа.НайтиСтроки(СтруктураОтбора);
	
	Если Не МассивСтрок=Неопределено Тогда
		Для Каждого Строка Из МассивСтрок Цикл
			РасшифровкаПлатежа.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()>0 И ЗначениеНеЗаполнено(РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		РасшифровкаПлатежа.Удалить(РасшифровкаПлатежа[0]);
	КонецЕсли;
	
	Если (НЕ (РасшифровкаПлатежа.Количество()=1 И НЕ ПлатежиСписком)) ИЛИ РасшифровкаПлатежа.Количество()=0 Тогда
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СтрокаПлатеж.ДоговорКонтрагента=ЗначениеВыбора.ДоговорКонтрагента;
	СтрокаПлатеж.Сделка=ЗначениеВыбора.Сделка;
	
	СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа;
	СтрокаПлатеж.КурсВзаиморасчетов=ЗначениеВыбора.КурсВзаиморасчетов;
	СтрокаПлатеж.КратностьВзаиморасчетов=ЗначениеВыбора.КратностьВзаиморасчетов;	
	СтрокаПлатеж.СуммаВзаиморасчетов=ЗначениеВыбора.СуммаВзаиморасчетов;
	
	Если НЕ ОтражатьВБухгалтерскомУчете=Неопределено Тогда
		
		ЗаполнитьРеквизитыРеглУчета(СтрокаПлатеж,Организация, Контрагент, НДСПоУмолчанию);
		
	КонецЕсли;
	
	Если ЗначениеВыбора.Свойство("ДокументПланирования") Тогда
		
		СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=ЗначениеВыбора.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект=ЗначениеВыбора.Проект;
		СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетовПлан;
		СтрокаПлатеж.СуммаПлатежаПлан=ЗначениеВыбора.СуммаПлатежаПлан;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПодбораЗадолженностей()

// Заполняет реквизиты расчетного документа значениями по умолчанию
//
Процедура ЗаполнитьРеквизитыРасчетногоДокумента(ДокументОбъект, ТекПользователь, ВалютаРегламентированногоУчета = Неопределено, 
											РасшифровкаПлатежа, ТипОперации = "") Экспорт

	Перем ТипЦен;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить()
	Иначе	
		СтрокаПлатеж=РасшифровкаПлатежа[0];
	КонецЕсли;
	
	// Заполним флаги принадлежности к учету исходя из значений по умолчанию.
	Если ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		
		ДокументОбъект.ОтражатьВУправленческомУчете = НЕ ПолучитьЗначениеПоУмолчанию(ТекПользователь, "НеОтражатьДокументыВУправленческомУчете");
		
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтраженоВОперУчете", МетаданныеДокумента) Тогда
		ДокументОбъект.ОтраженоВОперУчете=Истина
	КонецЕсли;
	
	Если МетаданныеДокумента.Имя="ПриходныйКассовыйОрдер" ИЛИ МетаданныеДокумента.Имя="РасходныйКассовыйОрдер" 
		ИЛИ МетаданныеДокумента.Имя="ПлатежноеПоручениеВходящее" ИЛИ МетаданныеДокумента.Имя="ПлатежноеПоручениеИсходящее" Тогда
		ДокументОбъект.Оплачено=Истина
	КонецЕсли;		
	
	Если ЕстьРеквизитДокумента("АвтоРезервирование", МетаданныеДокумента) Тогда
		ДокументОбъект.АвтоРезервирование = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "АвтоРезервирование");
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("АвтоРазмещение", МетаданныеДокумента) Тогда
		ДокументОбъект.АвтоРазмещение = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "АвтоРазмещение");
	КонецЕсли;
	
	//Флаги БУ и НУ взаимосвязаны, не возможна ситуация, когда флаг НУ "истина". а флаг БУ "ложь".
	Если ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда

		ФлагОтражатьВБухгалтерскомУчете = НЕ ПолучитьЗначениеПоУмолчанию(ТекПользователь, "НеОтражатьДокументыВБухгалтерскомУчете");

		ДокументОбъект.ОтражатьВБухгалтерскомУчете  = ФлагОтражатьВБухгалтерскомУчете;

		Если ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда

			Если ФлагОтражатьВБухгалтерскомУчете Тогда
				ДокументОбъект.ОтражатьВНалоговомУчете = НЕ ПолучитьЗначениеПоУмолчанию(ТекПользователь, "НеОтражатьДокументыВНалоговомУчете");
			Иначе
				ДокументОбъект.ОтражатьВНалоговомУчете = ФлагОтражатьВБухгалтерскомУчете;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	  И (ЗначениеНеЗаполнено(ДокументОбъект.Организация)) Тогда
		ДокументОбъект.Организация = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
	КонецЕсли;

	Если ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
	   И (ЗначениеНеЗаполнено(ДокументОбъект.Подразделение)) Тогда
		ДокументОбъект.Подразделение = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделение");
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
	   И (ЗначениеНеЗаполнено(ДокументОбъект.Ответственный)) Тогда
		ДокументОбъект.Ответственный = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	Если ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
	   И (ЗначениеНеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если ЕстьРеквизитДокумента("ФормаОплаты", МетаданныеДокумента) 
		И (ЗначениеНеЗаполнено(ДокументОбъект.ФормаОплаты) ИЛИ ДокументОбъект.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные) Тогда
		
		Если ЕстьРеквизитДокумента("БанковскийСчетКасса", МетаданныеДокумента)
			И (ЗначениеНеЗаполнено(ДокументОбъект.БанковскийСчетКасса)) Тогда
			
			БанковскийСчетКасса = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКасса");
			
			Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) ИЛИ БанковскийСчетКасса.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда		
				
				ДокументОбъект.БанковскийСчетКасса = БанковскийСчетКасса;
				ДокументОбъект.ВалютаДокумента = БанковскийСчетКасса.ВалютаДенежныхСредств;
				
			Иначе
				
				ДокументОбъект.БанковскийСчетКасса=Справочники.Кассы.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(ДокументОбъект.ФормаОплаты) Тогда
			ДокументОбъект.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЕстьРеквизитДокумента("Касса", МетаданныеДокумента)
		И (ЗначениеНеЗаполнено(ДокументОбъект.Касса))Тогда
		
		КассаПоУмолчанию=ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКасса");
		
		Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда	
			
			ДокументОбъект.Касса = КассаПоУмолчанию;
			ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			
		ИначеЕсли КассаПоУмолчанию.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			
			ДокументОбъект.Касса = КассаПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;

	Если ЕстьРеквизитДокумента("КассаККМ", МетаданныеДокумента)
	   И (ЗначениеНеЗаполнено(ДокументОбъект.КассаККМ)) Тогда
		ДокументОбъект.КассаККМ = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКассаККМ");
	КонецЕсли;

	Если ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
		И ЗначениеНеЗаполнено(ДокументОбъект.СчетОрганизации)
		И (Не ЗначениеНеЗаполнено(ДокументОбъект.Организация)) Тогда
		
		СчетПоУмолчанию=ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		
		Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда	
			
			ДокументОбъект.СчетОрганизации =  СчетПоУмолчанию;
			ДокументОбъект.ВалютаДокумента =  СчетПоУмолчанию.ВалютаДенежныхСредств;
			
			
		ИначеЕсли  СчетПоУмолчанию.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			
			ДокументОбъект.СчетОрганизации =  СчетПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;

	ПараметрДвижения=ОпределитьПараметрыВыбораСделки(ДокументОбъект.ВидОперации);
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ДокументОбъект.ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ДокументОбъект.ВидОперации);
	
	ДокументОбъект.ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами;
	ДокументОбъект.ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		Если ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ПараметрДвижения.ВидДвиженияРасчеты="Приход" Тогда  // Приход по регистру "ВзаиморасчетыСКонтрагентами"
				ДокументОбъект.Контрагент = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойПоставщик");
			ИначеЕсли ПараметрДвижения.ВидДвиженияРасчеты="Расход" Тогда
				ДокументОбъект.Контрагент = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойПокупатель");
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьРеквизитДокумента("СчетКонтрагента", МетаданныеДокумента)
			И ЗначениеНеЗаполнено(ДокументОбъект.СчетКонтрагента)
			И НЕ ЗначениеНеЗаполнено(ДокументОбъект.Контрагент.ОсновнойБанковскийСчет) 
			И ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств Тогда
			ДокументОбъект.СчетКонтрагента          = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
			
			Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) И Не ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда 
				
				Если НЕ ОпределитьВидДоговораСКонтрагентом(ДокументОбъект.ВидОперации).НайтиПоЗначению(ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда
					
					Если ДокументОбъект.Организация.Пустая() Тогда
						СтрокаПлатеж.ДоговорКонтрагента = ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента;
						Организация=ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента.Организация;
					ИначеЕсли ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента.Организация.Пустая()
						ИЛИ ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента.Организация=ДокументОбъект.Организация Тогда
						СтрокаПлатеж.ДоговорКонтрагента = ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента;
					КонецЕсли;
					
				КонецЕсли;
				
				Если (НЕ ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)) И СтрокаПлатеж.КурсВзаиморасчетов=0 Тогда
					
					СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата());
					СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;
					СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
			И (ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда
			ДокументОбъект.ВалютаДокумента = РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
	КонецЕсли; // Контрагент
	
	Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(ДокументОбъект.КурсДокумента) Тогда
	    СтруктураКурсаДокумента      = ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;	
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ДатаОплаты", МетаданныеДокумента)
	   И (ЗначениеНеЗаполнено(ДокументОбъект.ДатаОплаты)) Тогда
		ДокументОбъект.ДатаОплаты = ДокументОбъект.Дата;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ЧастичнаяОплата", МетаданныеДокумента) Тогда
		ДокументОбъект.ЧастичнаяОплата = Ложь;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ДатаРасхода", МетаданныеДокумента) И (ЗначениеНеЗаполнено(ДокументОбъект.ДатаРасхода)) Тогда
		ДокументОбъект.ДатаРасхода = ПолучитьРабочуюДату();
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ДатаПоступления", МетаданныеДокумента) И (ЗначениеНеЗаполнено(ДокументОбъект.ДатаПоступления)) Тогда
		ДокументОбъект.ДатаПоступления = ПолучитьРабочуюДату();
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Состояние", МетаданныеДокумента) И (ЗначениеНеЗаполнено(ДокументОбъект.Состояние))Тогда
		ДокументОбъект.Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
	КонецЕсли;
	
	Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		
		Если ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, "РасшифровкаПлатежа") 
			И (ЗначениеНеЗаполнено(СтрокаПлатеж.СтавкаНДС)) Тогда
			СтрокаПлатеж.СтавкаНДС = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРеквизитыРасчетногоДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ

#Если Клиент Тогда

Процедура ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Организация.Пустая() Тогда
		СообщитьОбОшибке("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(СтруктураПараметров.Контрагент) Тогда
		СообщитьОбОшибке("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект=Обработки.ПодборПараметровРасшифровкиПлатежа.Создать();
	ОбработкаОбъект.КурсДокумента				=СтруктураПараметров.КурсДокумента;
	ОбработкаОбъект.КратностьДокумента			=СтруктураПараметров.КратностьДокумента;
	ОбработкаОбъект.ТипЗадолженности			=СтруктураПараметров.ТипЗадолженности;
	ОбработкаОбъект.Контрагент					=СтруктураПараметров.Контрагент;
	ОбработкаОбъект.ФормаОплаты					=СтруктураПараметров.ФормаОплаты;
	ОбработкаОбъект.ИмяРегистраПлан				=СтруктураПараметров.ИмяРегистраПлан;
	ОбработкаОбъект.ВидОперацииПлан				=СтруктураПараметров.ВидОперацииПлан;
	ОбработкаОбъект.БанковскийСчетКасса			=СтруктураПараметров.БанковскийСчетКасса;
	ОбработкаОбъект.Организация					=СтруктураПараметров.Организация;
	ОбработкаОбъект.ВалютаДокумента				=СтруктураПараметров.ВалютаДокумента;
	ОбработкаОбъект.ДатаДок						=СтруктураПараметров.ДатаДок;
	ОбработкаОбъект.ВидОперацииДок				=СтруктураПараметров.ВидОперацииДок;
	ОбработкаОбъект.РасшифровкаПлатежаДок		=СтруктураПараметров.РасшифровкаПлатежа;
	ОбработкаОбъект.СуммаДляПодбора				=СтруктураПараметров.СуммаДокумента;
	ОбработкаОбъект.ПлатежПоСуммеВзаиморасчетов	=СтруктураПараметров.ПлатежПоСуммеВзаиморасчетов;
	ОбработкаОбъект.ТекущийДоговор				=СтруктураПараметров.ДоговорКонтрагента;
		
	Если СтруктураПараметров.Интерактивно Тогда
		
		ТекстВидОперации=СтруктураПараметров.ВидОперацииДок.Метаданные().Имя;
		
		Если ТекстВидОперации="ВидыОперацийЗаявкиНаРасходование"
			ИЛИ ТекстВидОперации="ВидыОперацийПланируемоеПоступлениеДС" Тогда
			ФормаНастройки=ОбработкаОбъект.ПолучитьФорму("ПараметрыЗаполненияПлан");
			
		Иначе	
			ФормаНастройки=ОбработкаОбъект.ПолучитьФорму("ПараметрыЗаполнения");
		КонецЕсли;
		
		ФормаНастройки.ОткрытьМодально();
		
	Иначе
		
		СтруктураПараметровАвто=СтруктураПараметров.СтруктураПараметровАвто;
		
		ОбработкаОбъект.ИмяРегистраДолг		=СтруктураПараметровАвто.ИмяРегистра;
		ОбработкаОбъект.ПодбиратьСумму		=СтруктураПараметровАвто.ПодбиратьСумму;
		ОбработкаОбъект.СпособЗаполнения	=СтруктураПараметровАвто.СпособЗаполнения;
		ОбработкаОбъект.СуммаДляПодбора		=СтруктураПараметровАвто.СуммаДляПодбора;
		
		ОбработкаОбъект.ЗаполнитьТаблицуПлатежей();
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ПодборЗадолженностей(СтруктураПараметров) Экспорт							
										
	Если ЗначениеНеЗаполнено(СтруктураПараметров.Контрагент) Тогда
		СообщитьОбОшибке("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	// Открываем форму подбора.
	
	ОбработкаОбъект=Обработки.ПодборПараметровРасшифровкиПлатежа.Создать();
	ОбработкаОбъект.КурсДокумента					=СтруктураПараметров.КурсДокумента;
	ОбработкаОбъект.КратностьДокумента				=СтруктураПараметров.КратностьДокумента;
	ОбработкаОбъект.ТипЗадолженности				=СтруктураПараметров.ТипЗадолженности;
	ОбработкаОбъект.Контрагент						=СтруктураПараметров.Контрагент;
	ОбработкаОбъект.ФормаОплаты						=СтруктураПараметров.ФормаОплаты;
	ОбработкаОбъект.ИмяРегистраПлан					=СтруктураПараметров.ИмяРегистраПлан;
	ОбработкаОбъект.ВидОперацииПлан					=СтруктураПараметров.ВидОперацииПлан;
	ОбработкаОбъект.БанковскийСчетКасса				=СтруктураПараметров.БанковскийСчетКасса;
	ОбработкаОбъект.Проект							=СтруктураПараметров.Проект;
	ОбработкаОбъект.СтатьяДвиженияДенежныхСредств	=СтруктураПараметров.СтатьяДвиженияДенежныхСредств;
	ОбработкаОбъект.Организация						=СтруктураПараметров.Организация;
	ОбработкаОбъект.ВалютаДокумента					=СтруктураПараметров.ВалютаДокумента;
	ОбработкаОбъект.ДатаДок							=СтруктураПараметров.ДатаДок;
	ОбработкаОбъект.ВидОперацииДок					=СтруктураПараметров.ВидОперацииДок;
	ОбработкаОбъект.СуммаДляПодбора					=СтруктураПараметров.СуммаДокумента;
	ОбработкаОбъект.РасшифровкаПлатежаДок			=СтруктураПараметров.РасшифровкаПлатежаДок;
	ОбработкаОбъект.ПлатежПоСуммеВзаиморасчетов		=СтруктураПараметров.ПлатежПоСуммеВзаиморасчетов;
	ОбработкаОбъект.ОтражатьВБухгалтерскомУчете		=СтруктураПараметров.ОтражатьВБухгалтерскомУчете;
	
	ФормаПодбора = ОбработкаОбъект.ПолучитьФорму("ФормаПодбораЗадолженностей", СтруктураПараметров.ФормаДокумента, "ФормаПодбораЗадолженностейДляПлатежа");
	
	ФормаПодбора.РежимВыбора=Истина;
	ФормаПодбора.ЗакрыватьПриВыборе=СтруктураПараметров.ЗакрыватьПриВыборе;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

Процедура ПодборДокументовПланирования(СтруктураПараметров) Экспорт
	
	Если ЗначениеНеЗаполнено(СтруктураПараметров.ФормаОплаты) Тогда
		СообщитьОбОшибке("Не указана форма оплаты.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(СтруктураПараметров.ВалютаДокумента) Тогда
		СообщитьОбОшибке("Не указана валюта документа.");
		Возврат;
	КонецЕсли;
	
	// Открываем форму подбора.
	
	ОбработкаОбъект=Обработки.ПодборПараметровРасшифровкиПлатежа.Создать();
	
	ОбработкаОбъект.ФормаОплаты 					= СтруктураПараметров.ФормаОплаты;
	ОбработкаОбъект.ВалютаДокумента 				= СтруктураПараметров.ВалютаДокумента;
	ОбработкаОбъект.КурсДокумента 					= СтруктураПараметров.КурсДокумента;
	ОбработкаОбъект.КратностьДокумента 				= СтруктураПараметров.КратностьДокумента;
	ОбработкаОбъект.ДатаДок 						= СтруктураПараметров.ДатаДок;
	ОбработкаОбъект.ИмяРегистраПлан					= СтруктураПараметров.ИмяРегистра;
	ОбработкаОбъект.СуммаДляПодбора 				= СтруктураПараметров.СуммаДокумента;
	ОбработкаОбъект.ВидОперацииПлан 				= СтруктураПараметров.ВидОперации;
	ОбработкаОбъект.БанковскийСчетКасса 			= СтруктураПараметров.БанковскийСчетКасса;
	ОбработкаОбъект.Организация 					= СтруктураПараметров.Организация;
	ОбработкаОбъект.Проект 							= СтруктураПараметров.Проект;
	ОбработкаОбъект.СтатьяДвиженияДенежныхСредств 	= СтруктураПараметров.СтатьяДвиженияДенежныхСредств;
	ОбработкаОбъект.Контрагент						= СтруктураПараметров.Контрагент;
	ОбработкаОбъект.ДоговорКонтрагента				= СтруктураПараметров.ДоговорКонтрагента;
    ОбработкаОбъект.Сделка							= СтруктураПараметров.Сделка;
	ОбработкаОбъект.ПлатежПоСуммеВзаиморасчетов		= СтруктураПараметров.ПлатежПоСуммеВзаиморасчетов;
	
	ФормаПодбора = ОбработкаОбъект.ПолучитьФорму("ФормаПодбораПланируемыхДвижений", СтруктураПараметров.ФормаДокумента, "ФормаПодбораПланируемыхПлатежей");
	
	ФормаПодбора.РежимВыбора=Истина;
	ФормаПодбора.ЗакрыватьПриВыборе=СтруктураПараметров.ЗакрыватьПриВыборе;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры


// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа. Значения перечисления, содержащиеся в структуре 
// "ИсключаемыеОперации" пропускаютчя 
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//  ИсключаемыеОперации           - структура, содержащая имена значений перечисления, которые необходимо пропустить
//
Процедура УстановитьПодменюВыбораВидаОперацииОтбор(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации, ИсключаемыеОперации) Экспорт

	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		
		Если ИсключаемыеОперации.Свойство(ЭлементЗаполнения.Имя) Тогда
			Продолжить;
		Иначе
			ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
		                            ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

// Делает страницу панели с переданным именем видимой и текущей, а остальные - невидимыми
//  Параметры:
//	ИмяСтраницы  - страница, которую необходимо сделать текущей
//  Панель - имя панели;
//
Процедура УстановитьТекущуюСтраницу(ИмяСтраницы, Панель) Экспорт
	
	Для Каждого Страница Из Панель.Страницы Цикл
		Если НЕ Страница.Имя=ИмяСтраницы и не Страница.Имя="Затраты" Тогда
			Страница.Видимость=Ложь;
		Иначе
			Страница.Видимость=Истина;
		КонецЕсли;
	КонецЦикла;
	
	Панель.ТекущаяСтраница=Панель.Страницы[ИмяСтраницы];
	
КонецПроцедуры // УстановитьТекущуюСтраницу()

// Сакулина. Перенесена для Опланы Покупателя Платежными Каратами
Процедура УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ФормаДокумента, ВидОперации) Экспорт

	НадписьСделка = "Сделка:";

	ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	ТипЗаказа = ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа;

	Если Не (Не ЗначениеЗаполнено(ДоговорКонтрагента) ИЛИ ТипЗаказа="Прочие")  Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		      Или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			НадписьСделка = "Заказ "+?(ТипЗаказа="ЗаказПокупателя","покупателя:", "поставщику:");

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам тогда

			НадписьСделка = "Счет "+?(ТипЗаказа="ЗаказПокупателя","покупателю:", "поставщика:");

		КонецЕсли;
		
	КонецЕсли;

	ФормаДокумента.ЭлементыФормы.НадписьСделка.Заголовок = НадписьСделка;

КонецПроцедуры // РаботаСДиалогами.УстановитьНадписьСделки()

#КонецЕсли

// Сравнивается реквизит в документе с переданным в качестве параметра
//
// Параметры
//  ДокументСсылка			– <ДокументСсылка> – документ, в котором проверяется реквизит
//  ИмяРеквизита			– <Строка> – имя реквизита документа
//  ЗначениеДляСравнения	– <произвольное> – значение, с которым сравнивается реквизит документа
//  ИмяТаблицыДокумента		– <Строка> – можно передать имя таблицы документа в явном виде, 
//								чтобы избежать обращения к метаданным (необязательный параметр)
//
// Возвращаемое значение:
//   <Булево>   – <Истина> - реквизиты совпали, <Ложь> - реквизиты разные
//					для пустой ссылки считается, что проверка закончилась успешно
//					если к реквизитам документа нет прав на чтение - считается, что реквизиты разные
//
Функция ПроверитьЗначениеРеквизитаДокумента(ДокументСсылка, ИмяРеквизита, ЗначениеДляСравнения, ИмяТаблицыДокумента = "") Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяТаблицыДокумента = "" Тогда
		ИмяТаблицыДокумента = ДокументСсылка.Метаданные().Имя;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1
	|ИЗ
	|	Документ." + ИмяТаблицыДокумента + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка 
	|		И Док." + ИмяРеквизита + " = &ЗначениеДляСравнения");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ЗначениеДляСравнения", ЗначениеДляСравнения);
	Результат = Запрос.Выполнить();
	
	РеквизитыСовпали = НЕ Результат.Пустой();
	Возврат РеквизитыСовпали;

КонецФункции // ПроверитьЗначениеРеквизитаДокумента()

