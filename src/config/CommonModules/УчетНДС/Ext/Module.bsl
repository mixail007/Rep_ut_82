
Функция ВыгрузитьСтруктуруВСтроку(Структура,ПоЗначениям=Ложь,СтруктураПроверки = Неопределено)
	
	НеПроверять = (СтруктураПроверки=Неопределено);
	
	НоваяСтрока = "";
	Для каждого Колонка из Структура Цикл
		Если НеПроверять тогда
			НоваяСтрока = НоваяСтрока + ?(ЗначениеНеЗаполнено(Колонка.Значение)или не ПоЗначениям,Колонка.Ключ,Колонка.Значение)+",";
		ИначеЕсли СтруктураПроверки.Свойство(?(ЗначениеНеЗаполнено(Колонка.Значение) или не ПоЗначениям,Колонка.Ключ,Колонка.Значение)) тогда
			НоваяСтрока = НоваяСтрока + ?(ЗначениеНеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)+",";
		Иначе
			//Нет в проверке!
			возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Если не ЗначениеНеЗаполнено(НоваяСтрока) Тогда
		НоваяСтрока = Лев(НоваяСтрока,СтрДлина(НоваяСтрока)-1);
	КонецЕсли;
	Возврат НоваяСтрока;
КонецФункции


//Процедура для распределения записей из одной таблицы значений по базису (таблица значений или  набору записей)
//Источник 		: ТаблицаЗначений
//Базис 		: ТаблицаЗначений или НаборЗаписей
//Распределение : ключ - поля базиса, значение - поля источника
//Фильтр 		: ключ - поля базиса, значение - поля источника (если не укзан - по совпадающим колонкам)
//Игнорировать  : ключ - поля базиса, значение - поля источника
//Дополнить		: ключ - имя нового поля базиса, значение - значение для заполнения
Функция СформироватьКорректирующиеЗаписи(Источник,Базис,Распределение,Фильтр=неопределено,Игнорировать=Неопределено,Дополнить=Неопределено, НераспределенныеЗаписи_AsIs = ложь) Экспорт
	
	Если ТипЗнч(Базис) = Тип("ТаблицаЗначений") тогда
		Временный_Базис	   = Базис.Скопировать();
	иначе
		Временный_Базис	   = Базис.Выгрузить();
	Конецесли;
	
	КолонкиИсточника = Новый Структура();
	Для Каждого Колонка Из источник.Колонки Цикл
		КолонкиИсточника.Вставить(Колонка.Имя);
	КонецЦикла;
	КолонкиБазиса = Новый Структура();
	Для Каждого Колонка Из Временный_Базис.Колонки Цикл
		Если Не(ЗначениеНеЗаполнено(Колонка.Имя)) тогда
			КолонкиБазиса.Вставить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеНеЗаполнено(Игнорировать) тогда
		 Игнорировать = новый Структура();
	Иначе
		//Зачистим колонки источника и базиса на игнорируемые колонки
		Для Каждого Колонка Из Игнорировать Цикл
			Если КолонкиИсточника.Свойство(?(ЗначениеНеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)) тогда
				 КолонкиИсточника.Удалить(?(ЗначениеНеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение));
			Конецесли;
			Если КолонкиБазиса.Свойство(Колонка.Ключ) тогда
				 КолонкиБазиса.Удалить(Колонка.Ключ);
			Конецесли;
		КонецЦикла;
 	КонецЕсли;
	
	//Зачистим колонки источника на распределяемые колонки. Они учитываются отдельно.
	Для Каждого Колонка Из Распределение Цикл
		Если КолонкиИсточника.Свойство(?(ЗначениеНеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)) тогда
			 КолонкиИсточника.Удалить(?(ЗначениеНеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение));
		Иначе
			 Если Источник.Колонки.Найти(?(ЗначениеНеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение))=Неопределено тогда
				 //Не хватает колонок к распределению
				 //Но одну и ту же колонку можно распределить дважды
				 Возврат ложь;
			 КонецЕсли;
		Конецесли;
		Если КолонкиБазиса.Свойство(Колонка.Ключ) тогда
			 КолонкиБазиса.Удалить(Колонка.Ключ);
		Иначе
			  //Не хватает колонок базиса распределения
			 Возврат ложь;
		Конецесли;
	КонецЦикла;
	
	Если не ЗначениеНеЗаполнено(Дополнить) тогда
		//Проверим на отсутствие дополняемых колонок!
		Для Каждого Колонка Из Дополнить Цикл
			Если КолонкиБазиса.Свойство(Колонка.Ключ) тогда
				//Такая колонка уже есть, нельзя добавить новую
				Возврат Ложь;
			Конецесли;
		КонецЦикла;
 	КонецЕсли;
	
	//Если фильтр не задан - по всем совпадающим колонкам
	Если Фильтр=Неопределено тогда
		Фильтр = Новый Структура();
		Для каждого Колонка из КолонкиБазиса цикл
			Если КолонкиИсточника.Свойство(Колонка.Ключ)  и не(Игнорировать.Свойство(Колонка.Ключ)) тогда
				Фильтр.Вставить(Колонка.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Фильтр) тогда
		//Должно быть хоть одно объединяющее поле!
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Колонка Из Фильтр Цикл
		Если не КолонкиБазиса.Свойство(Колонка.Ключ) тогда
			  //Не хватает колонок базиса распределения
			 Возврат ложь;
		Конецесли;
	КонецЦикла;
	
	
	//Подготовить сворачивание для источника
	СтрокаСверткиИсточник = ВыгрузитьСтруктуруВСтроку(Фильтр,Истина,КолонкиИсточника);
	Если СтрокаСверткиИсточник = ложь Тогда
		//попытка фильтровать по полю, отсутствующему в источнике!
		Возврат ложь;
	КонецЕсли;
	КолонкиКРаспределениюИсточник = ВыгрузитьСтруктуруВСтроку(Распределение,Истина);
	Если КолонкиКРаспределениюИсточник = ложь Тогда
		//попытка распределить поле, отсутствующее в источнике!
		Возврат ложь;
	КонецЕсли;
	
	//Подготовить сворачивание для базиса
	СтрокаСверткиБазис = ВыгрузитьСтруктуруВСтроку(КолонкиБазиса,Ложь);
	Если СтрокаСверткиБазис = ложь Тогда
		//попытка фильтровать по полю, отсутствующему в базисе!
		Возврат ложь;
	КонецЕсли;
	КолонкиКРаспределениюБазис = ВыгрузитьСтруктуруВСтроку(Распределение,Ложь);
	Если КолонкиКРаспределениюБазис = ложь Тогда
		//попытка распределить поле, отсутствующее в базисе!
		Возврат ложь;
	КонецЕсли;
	
	Временный_Источник = Источник.Скопировать();
	
	Временный_Базис.Свернуть(СтрокаСверткиБазис,КолонкиКРаспределениюБазис);
	Временный_Источник.Свернуть(СтрокаСверткиИсточник,КолонкиКРаспределениюИсточник);
	
	НоваяТаблица = новый ТаблицаЗначений();
	Для каждого Колонка из Временный_Базис.Колонки Цикл
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Разрядность = Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность;
			РазрядностьДробнойЧасти = Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
			
			ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения,,,КвалификаторЧисла);
		Иначе
			ТипЗначения = Колонка.ТипЗначения;
		КонецЕсли;
		
		НоваяТаблица.Колонки.Добавить(Колонка.Имя, ТипЗначения,,10);
	КонецЦикла;
	
	ТаблицаБазисовРаспределения = Новый ТаблицаЗначений();
	Для каждого Колонка из Распределение Цикл
		ТаблицаБазисовРаспределения.Колонки.Добавить(Колонка.Ключ);
	КонецЦикла;
	
	Для каждого СтрокаИсточника из Временный_Источник цикл
		Отбор = новый структура();
		Для каждого Колонка из Фильтр цикл
			Отбор.Вставить(Колонка.Ключ,СтрокаИсточника[?(ЗначениеНеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)]);
		КонецЦикла;
		СтрокиБазиса = Временный_Базис.НайтиСтроки(Отбор);
		Временный_Базис_СтрокаНераспределеннойЗаписи = Неопределено;
		Если СтрокиБазиса.Количество() = 0 и НераспределенныеЗаписи_AsIs Тогда
			Временный_Базис_СтрокаНераспределеннойЗаписи = Временный_Базис.Добавить();
			ЗаполнитьЗначенияСвойств(Временный_Базис_СтрокаНераспределеннойЗаписи, СтрокаИсточника);
			СтрокиБазиса.Добавить(Временный_Базис_СтрокаНераспределеннойЗаписи);
		КонецЕсли;		
			
		ТаблицаБазисовРаспределения.Очистить();
		Для каждого Строка из СтрокиБазиса Цикл
			СтрокаТБР = ТаблицаБазисовРаспределения.Добавить();
			Для каждого Колонка из ТаблицаБазисовРаспределения.Колонки цикл
				ЗаполнитьЗначенияСвойств(СтрокаТБР, Строка);
			КонецЦикла;
		КонецЦикла;
		Для каждого Колонка из Распределение цикл
			РаспределяемаяСумма =  СтрокаИсточника[?(ЗначениеНеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)];
			МассивДляРаспределения = ТаблицаБазисовРаспределения.ВыгрузитьКолонку(Колонка.Ключ);
			МассивРезультата = РаспределитьПропорционально(РаспределяемаяСумма, МассивДляРаспределения);
			Если МассивРезультата = неопределено тогда
				ТаблицаБазисовРаспределения.ЗаполнитьЗначения(0,Колонка.Ключ);
			иначе
				ТаблицаБазисовРаспределения.ЗагрузитьКолонку(МассивРезультата,Колонка.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		СтрокаРезультата = 0;
		Для каждого Строка из СтрокиБазиса Цикл
			СтрокаНовая = НоваяТаблица.Добавить();
			СрокаРекультатаРаспределения = ТаблицаБазисовРаспределения[СтрокаРезультата];
			СтрокаРезультата = СтрокаРезультата +1;
			Для каждого Колонка из Временный_Базис.Колонки цикл
				Если Распределение.Свойство(Колонка.Имя) тогда
					СтрокаНовая[Колонка.Имя] = СрокаРекультатаРаспределения[Колонка.Имя];
				Иначе
					СтрокаНовая[Колонка.Имя] = Строка[Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если не Временный_Базис_СтрокаНераспределеннойЗаписи = Неопределено Тогда
		    Временный_Базис.удалить(Временный_Базис_СтрокаНераспределеннойЗаписи);
		КонецЕсли; 
	КонецЦикла;
	
	Если не ЗначениеНеЗаполнено(Дополнить) тогда
		Для каждого Колонка из Дополнить Цикл
			НоваяТаблица.Колонки.Добавить(Колонка.Ключ,,,10);
			НоваяТаблица.ЗаполнитьЗначения(Колонка.Значение,Колонка.Ключ);
		КонецЦикла;
	КонецЕсли;
	СтрокиС0Распределением = Новый Массив();
	Для каждого Строка из НоваяТаблица цикл
		СуммаРаспределений0=Истина;
		Для каждого Колонка из распределение цикл
			Если не ЗначениеНеЗаполнено(Строка[Колонка.Ключ]) тогда
				СуммаРаспределений0=Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СуммаРаспределений0 тогда
			СтрокиС0Распределением.Добавить(Строка);
		Конецесли;
	КонецЦикла;
	Для каждого ПустаяСтрока из СтрокиС0Распределением Цикл 
		НоваяТаблица.Удалить(ПустаяСтрока);
	КонецЦикла;
	
	Возврат НоваяТаблица;
КонецФункции



////////////////////////////////////////////////////////////////////////////
//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ПОДСИСТЕМЫ УЧЕТА НДС

// Получает параметр учетной политики (налоговый учет) для заданной организации на заданную дату
//
// Параметры:
//	ИмяПараметра        - строка, имя запрашиваемого параметра учетной политики,
//	Организация         - ссылка на элемент справочника "Организации", для которого надо получить параметры,
//	Дата                - дата, на которую надо получить параметры, если не заполнено, то берется рабочая дата,
//	СтруктураПараметров - структура, содержащая все параметры учетной политики.
//
// Возвращаемое значение:
//	Значение учетной политики
//
Функция УчетнаяПолитикаНалоговыйУчет(ИмяПараметра, Организация, Дата = Неопределено, СтруктураПараметров = Неопределено) Экспорт

	// Если организация не заполнена, то учетная политика неопределена
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Если дата не заполнена, возьмем рабочую дату
	Если ЗначениеНеЗаполнено(Дата) Тогда
		Дата = ПолучитьРабочуюДату();
	КонецЕсли;

	СтруктураПараметров = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьПоследнее(Дата, Новый Структура("Организация", Организация));

	Если СтруктураПараметров <> Неопределено Тогда
		Результат = СтруктураПараметров[ИмяПараметра];
	Иначе
		СообщитьОбОшибке("Не задан параметр учетной политики (налоговый учет) """ +ИмяПараметра+ """ для организации " + Организация + "!");
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции // УчетнаяПолитикаНалоговыйУчет()

// Копирует общие реквизиты из строки источника в строку применик
//
//
Функция СкопироватьСтрокуВДругуюТаблицу(СтрокаИсточник, ТаблицаИсточник, СтрокаПриемник, ТаблицаПриемник) Экспорт

	Для Каждого ТекКол Из ТаблицаПриемник.Колонки Цикл
		Если ТаблицаИсточник.Колонки.Найти(ТекКол.Имя) <> Неопределено Тогда
			СтрокаПриемник[ТекКол.Имя] = СтрокаИсточник[ТекКол.Имя];
			
		КонецЕсли;
		
	КонецЦикла;

КонецФункции // УчетнаяПолитикаНалоговыйУчет()

//Функция определения вида ценности по группе критериев
//
Функция ОпределитьВидЦенности(Объект, ЭтоДопРасходы = Ложь, ЭтоАгентскийНДС = Ложь, ВидАгентскогоДоговора = "") Экспорт

	ВидЦенности = Перечисления.ВидыЦенностей.ПустаяСсылка();

	Если ЭтоАгентскийНДС Тогда
		// Это агентский НДС - для него применяется специальный вид ценности
		Если ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Аренда Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;
		КонецЕсли;

	ИначеЕсли ЭтоДопРасходы Тогда
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") тогда	
		Если Объект.Услуга Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.Товары;
		КонецЕсли;

	Иначе	
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		
	КонецЕсли;

	Возврат ВидЦенности;

КонецФункции // ОпределитьВидЦенности()

// Функция определяет объект учета (ценность) в строке табличной части.
// Сама табличная часть задается в параметре ТаблицаЗначений. В результате 
// анализа этой табличной части определяется из какой именно колонки нужно 
// взять объект учета.
Функция ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений) Экспорт

	Ценность = "";

	Если ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.Номенклатура;

	КонецЕсли;

	Возврат Ценность;

КонецФункции // ОпределитьЦенностьИзСтрокиТабличнойЧасти()

// Функция рассчитывает суммы реализации за период в разрезе различных видов деятельности
// по данным о реализации, зарегистрированных в регистре "НДСПродажи".
Функция ПроанализироватьРеализацию(ДатаНач, ДатаКон, Организация) Экспорт

	// Подсчитываем выручку от реализации
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	НДСПродажи.СтавкаНДС,
					|	НДСПродажи.ВариантРеализации,
					|	СУММА(ВЫБОР КОГДА НДСПродажи.СтавкаНДС В (&СтавкиРеализацииСНДС) ТОГДА НДСПродажи.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК ВыручкаНДС,
					|	СУММА(ВЫБОР КОГДА НДСПродажи.СтавкаНДС В (&СтавкиРеализацииСНДС0) ТОГДА НДСПродажи.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК ВыручкаНДС0,
					|	СУММА(ВЫБОР КОГДА НДСПродажи.СтавкаНДС В (&СтавкиРеализацииБезНДС) И НЕ(НДСПродажи.ВариантРеализации В (&ВариантРеализацииЕНВД)) ТОГДА НДСПродажи.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК ВыручкаБезНДС,
					|	СУММА(ВЫБОР КОГДА НДСПродажи.СтавкаНДС В (&СтавкиРеализацииБезНДС) И НДСПродажи.ВариантРеализации В (&ВариантРеализацииЕНВД) ТОГДА НДСПродажи.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК ВыручкаЕНВД
					|ИЗ
					|	РегистрНакопления.НДСПродажи КАК НДСПродажи

					|ГДЕ
					|	НДСПродажи.Организация = &Организация И
					|	НДСПродажи.Период >= &НачалоПериода И
					|	НДСПродажи.Период <= &КонецПериода И
					|	НДСПродажи.Событие = &СобытиеРеализации

					|СГРУППИРОВАТЬ ПО
					|	НДСПродажи.СтавкаНДС,
					|	НДСПродажи.ВариантРеализации

					|ИТОГИ ПО
					|	ОБЩИЕ";

	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("СобытиеРеализации", Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("ВариантРеализацииЕНВД", Перечисления.ВариантРеализации.ЕНВД);
	
	СтавкиРеализацииСНДС = Новый СписокЗначений;
	СтавкиРеализацииСНДС.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиРеализацииСНДС.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	СтавкиРеализацииСНДС.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиРеализацииСНДС.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	СтавкиРеализацииСНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиРеализацииСНДС.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	Запрос.УстановитьПараметр("СтавкиРеализацииСНДС", СтавкиРеализацииСНДС);
	
	СтавкиРеализацииСНДС0 = Новый СписокЗначений;
	СтавкиРеализацииСНДС0.Добавить(Перечисления.СтавкиНДС.НДС0);
	Запрос.УстановитьПараметр("СтавкиРеализацииСНДС0", СтавкиРеализацииСНДС0);
	
	СтавкиРеализацииБезНДС = Новый СписокЗначений;
	СтавкиРеализацииБезНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
	Запрос.УстановитьПараметр("СтавкиРеализацииБезНДС", СтавкиРеализацииБезНДС);
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции // ПроанализироватьРеализацию()

// Процедура арифметически распределяет заданную сумму
// по столбцу таблицы значений пропрционально колонке базы распределения
// при этом размерность таблицы и базы распределения должны совпадать.
// Как правило база распределения - просто одна из колонок таблицы
Процедура РаспределитьСуммуПоСтолбцу(МассивБазыРаспределения, РаспределяемаяСумма, ТаблицаРезультата, ИдКолонкиРезультата) Экспорт

	// Определяем сумму базы
	СуммаБазы = 0;

	Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
		СуммаБазы = СуммаБазы + МассивБазыРаспределения[Индекс];
	КонецЦикла;

	Если СуммаБазы > 0 Тогда
		// Выполняем распределение
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;

		Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл

			// Расчитываем шаг распределения
			ШагРаспределения = Окр(РаспределяемаяСумма * (УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс])/СуммаБазы, 2) - УжеРаспределено;

			// Записываем результат
			ТаблицаРезультата[Индекс][ИдКолонкиРезультата] = ШагРаспределения;

			// Учитываем полученный результат для вычисления последующих шагов распределения
			УчтеноБазыРаспределения = УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс];
			УжеРаспределено         = УжеРаспределено + ШагРаспределения;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // РаспределитьСуммуПоСтолбцу()

// Процедура подготовки таблицы значений для целей формирования движений
// по подсистеме НДС. Доопределяет дополнительные колонки "ВидЦенности" и "Ценность"
// в таблице значений, переданной в качестве параметра
Процедура ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС(СтруктураШапкиДокумента, ТаблицаЗначений) Экспорт

	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		Если ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено Тогда
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);
			
		ИначеЕсли ТаблицаЗначений.Колонки.Найти("ОсновноеСредство") <> Неопределено Тогда
			Ценность          = СтрокаТаблицы.ОсновноеСредство;

		ИначеЕсли ТаблицаЗначений.Колонки.Найти("НематериальныйАктив") <> Неопределено Тогда
			Ценность          = СтрокаТаблицы.НематериальныйАктив;
			
		КонецЕсли;

		ЭтоДопРасходы         = Ложь;
		УчетАгентскогоНДС     = Ложь;
		ВидАгентскогоДоговора = "";

		Если СтруктураШапкиДокумента.Ссылка.Метаданные().Имя = "ПоступлениеТоваровУслуг" Тогда
			УчетАгентскогоНДС     = ?(СтруктураШапкиДокумента.УчетАгентскогоНДС <> Null, СтруктураШапкиДокумента.УчетАгентскогоНДС, УчетАгентскогоНДС);
			ВидАгентскогоДоговора = ?(СтруктураШапкиДокумента.ВидАгентскогоДоговора <> Null, СтруктураШапкиДокумента.ВидАгентскогоДоговора, ВидАгентскогоДоговора);

		ИначеЕсли СтруктураШапкиДокумента.Ссылка.Метаданные().Имя = "ПоступлениеДопРасходов" Тогда
			ЭтоДопРасходы = Истина;

		КонецЕсли;

		СтрокаТаблицы.ВидЦенности       = ОпределитьВидЦенности(Ценность, ЭтоДопРасходы, УчетАгентскогоНДС, ВидАгентскогоДоговора);
		СтрокаТаблицы.Ценность          = Ценность;

	КонецЦикла

КонецПроцедуры // ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС()

// Для переданного в качестве параметра счета-факутры выданного, получает для него
// ключевые сведения: Контрагент, Договор, Сумма и др., которые содержатся в 
// документе основнии.
//
// Параметры:
//  СчетФактура  - счет-фактура для которого нужно определить параметры
//  Результат - структура в которой возвращаются значения параметров
//
Процедура ПолучитьПараметрыСчетаФактуры(СчетФактура, мВалютаРегламентированногоУчета, Результат) Экспорт

	Результат = Новый Структура("Контрагент, Договор, СуммаДокумента, ВалютаДокумента");
	
	Если ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС") Тогда
		// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", СчетФактура.ДокументОснование);
		Запрос.УстановитьПараметр("ТекущийДокумент", СчетФактура.Ссылка);
		
		Запрос.Текст = "ВЫБРАТЬ
						|	ВводНачальныхОстатковНДСДанныеПоСФ.Контрагент,
						|	ВводНачальныхОстатковНДСДанныеПоСФ.ДоговорКонтрагента,
						|	СчетФактураВыданный.Ссылка,
						|	СУММА(СчетФактураВыданный.Сумма) КАК Сумма,
						|	СУММА(СчетФактураВыданный.СуммаНДС) КАК СуммаНДС
						|ИЗ
						|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
						|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВводНачальныхОстатковНДСДанныеПоСФ
						|		ПО СчетФактураВыданный.Ссылка = ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура

						|ГДЕ
						|	СчетФактураВыданный.ДокументОснование = &ДокументОснование И
						|	СчетФактураВыданный.Ссылка = &ТекущийДокумент

						|СГРУППИРОВАТЬ ПО
						|	ВводНачальныхОстатковНДСДанныеПоСФ.Контрагент,
						|	ВводНачальныхОстатковНДСДанныеПоСФ.ДоговорКонтрагента,
						|	СчетФактураВыданный.Ссылка";
		
		ТабРез = Запрос.Выполнить().Выгрузить();
		Если ТабРез.Количество() <> 0 Тогда
			Результат.Контрагент = ТабРез[0]["Контрагент"];
			Результат.Договор = ТабРез[0]["ДоговорКонтрагента"];
			Результат.ВалютаДокумента = мВалютаРегламентированногоУчета;
			Результат.СуммаДокумента = ТабРез[0]["Сумма"];
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", СчетФактура.ДокументОснование);
		Запрос.УстановитьПараметр("ТекущийДокумент", СчетФактура.Ссылка);
		
		Запрос.Текст = "ВЫБРАТЬ
						|	АвансовыйОтчетПрочее.Поставщик КАК Контрагент,
						|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента,
						|	СУММА(АвансовыйОтчетПрочее.Сумма) КАК СуммаДокумента
						|ИЗ
						|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
						|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
						|		ПО СчетФактураПолученный.Ссылка = АвансовыйОтчетПрочее.СчетФактура

						|ГДЕ
						|	СчетФактураПолученный.Ссылка = &ТекущийДокумент И
						|	АвансовыйОтчетПрочее.Ссылка = &ДокументОснование

						|СГРУППИРОВАТЬ ПО
						|	АвансовыйОтчетПрочее.Поставщик,
						|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента

						|ОБЪЕДИНИТЬ ВСЕ

						|ВЫБРАТЬ
						|	АвансовыйОтчетТовары.Поставщик,
						|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента,
						|	СУММА(АвансовыйОтчетТовары.Сумма)
						|ИЗ
						|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
						|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
						|		ПО СчетФактураПолученный.Ссылка = АвансовыйОтчетТовары.СчетФактура

						|ГДЕ
						|	СчетФактураПолученный.Ссылка = &ТекущийДокумент И
						|	АвансовыйОтчетТовары.Ссылка = &ДокументОснование

						|СГРУППИРОВАТЬ ПО
						|	АвансовыйОтчетТовары.Поставщик,
						|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента";
		
		ТабРез = Запрос.Выполнить().Выгрузить();
		Если ТабРез.Количество() <> 0 Тогда
			Результат.Контрагент = 	ТабРез[0]["Контрагент"];
			Результат.Договор = 	"";
			Результат.ВалютаДокумента = ТабРез[0]["ВалютаДокумента"];
			Результат.СуммаДокумента = 	ТабРез[0]["СуммаДокумента"];
		КонецЕсли;
		
	Иначе
		
		ЭтоПолученныйСФ = Ложь;
		Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			ЭтоПолученныйСФ = Истина;
		КонецЕсли;
	 
	 	Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", СчетФактура.ДокументОснование);
			
		Если ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
		
			Запрос.Текст = "ВЫБРАТЬ
							|	ОтражениеРеализацииТоваровИУслугНДС.Контрагент,
							|	ОтражениеРеализацииТоваровИУслугНДС.ДоговорКонтрагента,
							|	"""" 							КАК ВалютаДокумента,
							|	ОтражениеРеализацииТоваровИУслугНДС.СуммаДокумента
							|ИЗ
							|	Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ОтражениеРеализацииТоваровИУслугНДС

							|ГДЕ
							|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка = &ДокументОснование";
							
			ТабРез = Запрос.Выполнить().Выгрузить();
			Если ТабРез.Количество() <> 0 Тогда
				Результат.Контрагент = 		ТабРез[0]["Контрагент"];
				Результат.Договор = 		ТабРез[0]["ДоговорКонтрагента"];
				Результат.ВалютаДокумента = мВалютаРегламентированногоУчета;
				Результат.СуммаДокумента = 	ТабРез[0]["СуммаДокумента"];
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС") Тогда
		
			Запрос.Текст = "ВЫБРАТЬ
							|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Ссылка.Контрагент,
							|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Ссылка.ДоговорКонтрагента,
							|	"""" 														   КАК ВалютаДокумента,
							|	СУММА(ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Сумма) КАК СуммаДокумента
							|ИЗ
							|	Документ.ОтражениеПоступленияТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги

							|ГДЕ
							|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Ссылка.Ссылка = &ДокументОснование

							|СГРУППИРОВАТЬ ПО
							|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Ссылка.Контрагент,
							|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Ссылка.ДоговорКонтрагента";
							
			ТабРез = Запрос.Выполнить().Выгрузить();
			Если ТабРез.Количество() <> 0 Тогда
				Результат.Контрагент = 		ТабРез[0]["Контрагент"];
				Результат.Договор = 		ТабРез[0]["ДоговорКонтрагента"];
				Результат.ВалютаДокумента = мВалютаРегламентированногоУчета;
				Результат.СуммаДокумента = 	ТабРез[0]["СуммаДокумента"];
			КонецЕсли;
			
		ИначеЕсли (ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
			  или (ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"))
			  или (ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов"))
			  или (ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"))
			  или (ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"))
			  или (ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"))
			  или (ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
			  или (ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"))
			  или (ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"))
			  или (ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное"))
			  или (ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")) Тогда
			
			ИмяОбъекта = СчетФактура.ДокументОснование.Метаданные().Имя;
			
			Если (ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"))
			 или ( (ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) И ЭтоПолученныйСФ) Тогда
				ИдРеквСумма = "СуммаВознаграждения";
			Иначе
				ИдРеквСумма = "СуммаДокумента";
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ
							|	" + ИмяОбъекта + ".Контрагент,
							|	" + ИмяОбъекта + ".ДоговорКонтрагента,
							|	" + ИмяОбъекта + ".ВалютаДокумента,
							|	" + ИмяОбъекта + "." + ИдРеквСумма + "
							|ИЗ
							|	Документ." + ИмяОбъекта + " КАК " + ИмяОбъекта + "

							|ГДЕ
							|	" + ИмяОбъекта + ".Ссылка = &ДокументОснование";
							
			ТабРез = Запрос.Выполнить().Выгрузить();
			Если ТабРез.Количество() <> 0 Тогда
				Результат.Контрагент = 		ТабРез[0]["Контрагент"];
				Результат.Договор = 		ТабРез[0]["ДоговорКонтрагента"];
				Результат.ВалютаДокумента = ТабРез[0]["ВалютаДокумента"];
				Результат.СуммаДокумента = 	ТабРез[0][ИдРеквСумма];
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
						
КонецПроцедуры // ПолучитьПараметрыСчетаФактуры()


//////////////////////////////////////////////////////////////////////////
//  ОПЕРАТИВНЫЕ ДВИЖЕНИЯ РЕГИСТРОВ ПОДСИСТЕМЫ НДС

// П О С Т У П Л Е Н И Е

// Процедура вызывается из модулей документов прихода.
// Основная задача - отразить поступление МПЗ или затрат в подсистеме учета НДС,
// а именно в регистре: "НДСПокупки"
Процедура СформироватьДвиженияПоРегиструНДСПокупки(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПокупки) Экспорт

	УчитыватьНДС = Истина;
	
	НДСВключенВСтоимость = "";
	СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость", НДСВключенВСтоимость);
	НДСВключенВСтоимость = ?(НДСВключенВСтоимость = Неопределено, Ложь, НДСВключенВСтоимость);
	
	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС", УчитыватьНДС) Тогда
		Если НЕ УчитыватьНДС Тогда
			// Движения по этому документу делать не нужно
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Для Каждого СтрокаДок из ТабЧасть Цикл
		
		Если ТабЧасть.Колонки.Найти("СуммаБезНДСВознаграждения") <> Неопределено Тогда
			// комиссионное вознаграждение
			СуммаБезНДС = СтрокаДок.СуммаБезНДСВознаграждения;
			НДС = СтрокаДок.НДСВознаграждения;
			СтавкаНДС = СтрокаДок.СтавкаНДСВознаграждения;
		Иначе
			СуммаБезНДС = СтрокаДок.СуммаБезНДС;
			НДС = СтрокаДок.НДС;
			СтавкаНДС = СтрокаДок.СтавкаНДС;
		КонецЕсли;
		
		Если (СуммаБезНДС + НДС) <> 0 Тогда
			СтрокаДвижения = ТаблицаДвиженийПокупки.Добавить();

			СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.ВидЦенности = СтрокаДок.ВидЦенности;

			Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				// при проведении авансовых отчетов порядок заполнения данных измерений иной
				СтрокаДвижения.Поставщик   = СтрокаДок.Поставщик;
				СтрокаДвижения.СчетФактура = СтрокаДок.СчетФактура;
			Иначе
				СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;

			СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
			СтрокаДвижения.СтавкаНДС   = СтавкаНДС;
			СтрокаДвижения.СуммаБезНДС = СуммаБезНДС;
			СтрокаДвижения.НДС         = НДС;

			Если НДСВключенВСтоимость Тогда

				СтрокаДвижения2 = ТаблицаДвиженийПокупки.Добавить();
				СтрокаДвижения2.Организация = СтрокаДвижения.Организация;
				СтрокаДвижения2.ВидЦенности = СтрокаДвижения.ВидЦенности;
				СтрокаДвижения2.Поставщик   = СтрокаДвижения.Поставщик;
				СтрокаДвижения2.СчетФактура = СтрокаДвижения.СчетФактура;
				СтрокаДвижения2.СтавкаНДС   = СтавкаНДС;
				СтрокаДвижения2.СуммаБезНДС = СуммаБезНДС;
				СтрокаДвижения2.НДС         = НДС;
				СтрокаДвижения2.Событие     = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;

			КонецЕсли;

			Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда

				// при проведении авансовых отчетов нужно таже сразу отразить и событие оплаты
				СтрокаДвижения3 = ТаблицаДвиженийПокупки.Добавить();
  				СтрокаДвижения3.Организация = СтрокаДвижения.Организация;
				СтрокаДвижения3.ВидЦенности = СтрокаДвижения.ВидЦенности;
				СтрокаДвижения3.Поставщик   = СтрокаДвижения.Поставщик;
				СтрокаДвижения3.СчетФактура = СтрокаДвижения.СчетФактура;
				СтрокаДвижения3.СтавкаНДС   = СтавкаНДС;
				СтрокаДвижения3.СуммаБезНДС = СуммаБезНДС;
				СтрокаДвижения3.НДС         = НДС;
				СтрокаДвижения3.Событие     = Перечисления.СобытияПоНДСПокупки.НДСОплачен;

				СтрокаДвижения3.ДокументОплаты = СтруктураШапкиДокумента.Ссылка;
				
			КонецЕсли;

		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияПоРегиструНДСПокупки()

// Процедура вызывается из модулей документов прихода.
// Основная задача - отразить поступление ценностей в подсистеме учета НДС,
// с привязкой к конкретной партии прихода.
Процедура СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПартии) Экспорт

	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьПоследнее(СтруктураШапкиДокумента.Ссылка.Дата, Новый Структура("Организация", СтруктураШапкиДокумента.Организация));
	УчитыватьНДС = Истина;

	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС", УчитыватьНДС) Тогда
		Если НЕ УчитыватьНДС Тогда
			// Движения по этому документу делать не нужно
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ ПараметрыУчетнойПолитики.СложныйУчетНДС Тогда
		// Движения по регистру НДСПартииТоваров необходимо делать только при сложном учете НДС
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаДок из ТабЧасть Цикл
		
		Если ТабЧасть.Колонки.Найти("Услуга") <> Неопределено Тогда
			
			Если Не СтрокаДок.Услуга Тогда
				СтрокаДвижения = ТаблицаДвиженийПартии.Добавить();

				СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
				СтрокаДвижения.Номенклатура = СтрокаДок.Номенклатура;

				Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					// при проведении авансовых отчетов порядок заполнения данных измерений иной
					СтрокаДвижения.Поставщик   = СтрокаДок.Поставщик;
					СтрокаДвижения.СчетФактура = СтрокаДок.СчетФактура;
				Иначе
					СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
					СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;
				КонецЕсли;
				
				СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;

				// Определяем партию
				Если ТабЧасть.Колонки.Найти("ДокументОприходования") = Неопределено Тогда
					СтрокаДвижения.ДокументОприходования = СтруктураШапкиДокумента.Ссылка;
				Иначе
					СтрокаДвижения.ДокументОприходования = СтрокаДок.ДокументОприходования;
				КонецЕсли;
				
				СтрокаДвижения.Количество = СтрокаДок.Количество;
				СтрокаДвижения.Стоимость = СтрокаДок.СуммаБезНДС;
				СтрокаДвижения.НДС       = СтрокаДок.НДС;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров()

// Процедура вызывается из модулей документов прихода.
// Основная задача - отразить поступление ценностей в подсистеме учета НДС,
// с привязкой к конкретной партии прихода.
Процедура СформироватьДвиженияПоступленияПоРегиструНДСКосвенныхРасходов(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийКосвенных) Экспорт

	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьПоследнее(СтруктураШапкиДокумента.Ссылка.Дата, Новый Структура("Организация", СтруктураШапкиДокумента.Организация));
	УчитыватьНДС = Истина;

	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС", УчитыватьНДС) Тогда
		Если НЕ УчитыватьНДС Тогда
			// Движения по этому документу делать не нужно
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Для Каждого СтрокаДок из ТабЧасть Цикл
		
		Если ТабЧасть.Колонки.Найти("ОтнесениеРасходовКДеятельностиЕНВД") <> Неопределено Тогда
			
			Если СтрокаДок.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются Тогда
				// Фиксация косвенных расходов, подлежащих распределению в текущем периоде
				СтрокаДвижения = ТаблицаДвиженийКосвенных.Добавить();

				СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
				СтрокаДвижения.НалоговыйПериод = СтруктураШапкиДокумента.Дата;
				СтрокаДвижения.СтавкаНДСРеализации = Перечисления.ВариантыРаспределенияНДСКосвенныхРасходов.НеРаспределено;
				СтрокаДвижения.ВидЦенности = СтрокаДок.ВидЦенности;

				Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					// при проведении авансовых отчетов порядок заполнения данных измерений иной
					СтрокаДвижения.Поставщик   = СтрокаДок.Поставщик;
					СтрокаДвижения.СчетФактура = СтрокаДок.СчетФактура;
				Иначе
					СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
					СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;
				КонецЕсли;
				
				СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;

				СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
				СтрокаДвижения.НДС         = СтрокаДок.НДС;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияПоступленияПоРегиструНДСКосвенныхРасходов()

// Процедура вызывается из модулей документов прихода.
// Основная задача - отразить начисление НДС налогового агента в подсистеме учета НДС,
// а именно в регистре: "НДСПродажи"
Процедура СформироватьДвиженияПоРегиструНДСПродажи(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПродажи) Экспорт

	УчитыватьНДС = Истина;

	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС", УчитыватьНДС) Тогда
		Если НЕ УчитыватьНДС Тогда
			// Движения по этому документу делать не нужно
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ТЗ = ТабЧасть.Скопировать();
	ТЗ.Свернуть("ВидЦенности, СтавкаНДС", "СуммаБезНДС, НДС");

	Для Каждого СтрокаДок из ТЗ Цикл

		СтрокаДвижения = ТаблицаДвиженийПродажи.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = СтрокаДок.ВидЦенности;
		СтрокаДвижения.Покупатель  = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;
		СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
		СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;
		СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
		СтрокаДвижения.НДС         = СтрокаДок.НДС;

	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияПоРегиструНДСПродажи()


// В Ы Б Ы Т И Е  (При сложном учете НДС - ведется партионный учет в регистре "НДСПартииТоваров")

// Процедура вызывается из процедуры, отрабатывающей списание регистра НДСПартииТоваров
// в партионном учете.
// Основная задача - отразить списание или реализацию МПЗ или услуг в подсистеме учета НДС,
// а именно в регистре: "НДСПокупки"
Процедура ОтражениеОперацийВыбытияТМЦвРегистрахПодсистемыНДС(ТаблицаСписаний) Экспорт
	
	Если ТаблицаСписаний.Количество() = 0 Тогда
		Возврат;
	Иначе
		Параметры = Новый Структура("ДатаДок, Организация, Регистратор, Контрагент, Договор");
		Параметры.ДатаДок = 	ТаблицаСписаний[0]["Период"];
		Параметры.Организация = ТаблицаСписаний[0]["Организация"];
		Параметры.Регистратор = ТаблицаСписаний[0]["Регистратор"];
		Параметры.Контрагент = 	ТаблицаСписаний[0]["Контрагент"];
		Параметры.Договор = 	ТаблицаСписаний[0]["Договор"];
	КонецЕсли;
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьПоследнее(Параметры.ДатаДок, Новый Структура("Организация", Параметры.Организация));

	НаборЗаписейПокупки = РегистрыНакопления.НДСПокупки.СоздатьНаборЗаписей();
	НаборЗаписейПокупки.Отбор.Регистратор.Установить(Параметры.Регистратор);
	
	ТаблицаДвиженийПокупки = НаборЗаписейПокупки.Выгрузить();
	ТаблицаДвиженийПокупки.Очистить();
	
	НаборЗаписейПродажи = РегистрыНакопления.НДСПродажи.СоздатьНаборЗаписей();
	НаборЗаписейПродажи.Отбор.Регистратор.Установить(Параметры.Регистратор);
	
	ТаблицаДвиженийПродажи = НаборЗаписейПродажи.Выгрузить();
	ТаблицаДвиженийПродажи.Очистить();
	
	Если (ТипЗнч(Параметры.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику"))
	 или (ТипЗнч(Параметры.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки")) Тогда
		// это возвраты поставщикам
		СформироватьДвиженияВозвратаНДСПокупки(Параметры, ПараметрыУчетнойПолитики, ТаблицаСписаний, ТаблицаДвиженийПокупки);
		
	Иначе
		// это реализация
		
		// движения по регистру НДСПокупки
		СформироватьДвиженияВыбытияНДСПокупки(Параметры, ПараметрыУчетнойПолитики, ТаблицаСписаний, ТаблицаДвиженийПокупки);
		
		// движения по регистру НДСПродажи
		СформироватьДвиженияВыбытияНДСПродажи(Параметры, ПараметрыУчетнойПолитики, ТаблицаСписаний, ТаблицаДвиженийПродажи);
		
	КонецЕсли;
		
	Если ТаблицаДвиженийПокупки.Количество() > 0 Тогда
		НаборЗаписейПокупки.мПериод          = Параметры.ДатаДок;
		НаборЗаписейПокупки.мТаблицаДвижений = ТаблицаДвиженийПокупки;
		НаборЗаписейПокупки.ДобавитьДвижение();
		НаборЗаписейПокупки.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийПродажи.Количество() > 0 Тогда
		НаборЗаписейПродажи.мПериод          = Параметры.ДатаДок;
		НаборЗаписейПродажи.мТаблицаДвижений = ТаблицаДвиженийПродажи;
		НаборЗаписейПродажи.ДобавитьДвижение();
		НаборЗаписейПродажи.Записать();
	КонецЕсли;
	
КонецПроцедуры // ОтражениеОперацийВыбытияТМЦвРегистрахПодсистемыНДС()

// По регистрам с входящим НДС (Покупки)

// Процедура вызывается из процедуры "ОтражениеОперацийВыбытияТМЦвРегистрахПодсистемыНДС".
// Формирует движения отражающие возврат товаров поставщику в регистре "НДСПокупки".
Процедура СформироватьДвиженияВозвратаНДСПокупки(Параметры, ПараметрыУчетнойПолитики, ТаблицаСписаний, ТаблицаДвиженийПокупки)

	ТаблицаДляОбработки = ТаблицаСписаний.Скопировать();

	// Формируется движение со специальным событием "Возврат" в регистре "НДСПокупки" 
	Для Каждого СтрВозврата Из ТаблицаДляОбработки Цикл
		Если СтрВозврата.СуммаСписания <> 0 Тогда
			СтрокаДвижения = ТаблицаДвиженийПокупки.Добавить();

			СтрокаДвижения.Организация  = Параметры.Организация;
			СтрокаДвижения.ВидЦенности  = СтрВозврата.ВидЦенности;
			СтрокаДвижения.Поставщик    = СтрВозврата.Поставщик;
			СтрокаДвижения.СчетФактура  = СтрВозврата.СчетФактура;
			СтрокаДвижения.СтавкаНДС    = СтрВозврата.СтавкаНДС;
			СтрокаДвижения.Событие      = Перечисления.СобытияПоНДСПокупки.Возврат;
			СтрокаДвижения.СуммаБезНДС  = СтрВозврата.СуммаСписания;
			СтрокаДвижения.НДС          = СтрВозврата.НДС;

		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияВозвратаНДСПокупки()

// Процедура вызывается из модулей документов реализации и списания.
// Основная задача - отразить списание или реализацию МПЗ или услуг в подсистеме учета НДС,
// а именно в регистре: "НДСПокупки"
Процедура СформироватьДвиженияВыбытияНДСПокупки(Параметры, ПараметрыУчетнойПолитики, ТаблицаСписаний, ТаблицаДвиженийПокупки)

	ТаблицаПоступлений = "";

	ТаблицаДляОбработки = ТаблицаСписаний.Скопировать();
	ТаблицаДляОбработки.Колонки.Добавить("Событие");

	Для т = 1 По 2 Цикл

		// Алгоритм формирования движений двухпроходной. На первом проходе (т = 1)
		// выполняется анализ исходных данных, поступивших в процедуру. На втором проходе (т = 2)
		// выполняется непосредственное формирование соответствующих движений в регистре "НДСПокупки".
		СписокНоменклатуры = Новый СписокЗначений;
		СписокПартий       = Новый СписокЗначений;

		Для Каждого СтрокаВыбытия Из ТаблицаДляОбработки Цикл

			Если (т = 1) и (СтрокаВыбытия.Партия <> Неопределено) Тогда

				Если (СтрокаВыбытия.ВидСклада = Перечисления.ВидыСкладов.Розничный)
				   и (    (ПараметрыУчетнойПолитики.ОрганизацияЯвляетсяПлательщикомЕНВД) 
				      или (ПараметрыУчетнойПолитики.РозничнаяТорговляОблагаетсяЕНВД)) Тогда
					// Это реализация по деятельности, облагаемой ЕНВД
					// По всем товарам, реализованным по данному виду деятельности следует
					// входящий НДС (отраженнный в документах поступления этих товаров)
					// включить в себестоимоть, т.к. он не может быть принят к вычету.
					// для этого в регистр НДСПокупки вводится специальное событие "НДСВключенВСтоимость"
					// для партии реализуемой в данной строке
					СтрокаВыбытия.Событие = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
					СписокНоменклатуры.Добавить(СтрокаВыбытия.Номенклатура);
					СписокПартий.Добавить(СтрокаВыбытия.Партия);

				ИначеЕсли СтрокаВыбытия.СтавкаНДСВыручки = Перечисления.СтавкиНДС.НДС0 Тогда
					// Это реализация по ставке 0%
					// По всем товарам, реализованным по данному виду деятельности следует
					// входящий НДС (отраженнный в документах поступления этих товаров)
					// не может быть признан к вычету до тех пор, пока не придет подтверждение из налоговых органов,
					// Для этого в регистр НДСПокупки вводится специальное событие "ПредполагаетсяСтавка0"
					// для партии реализуемой в данной строке
					СтрокаВыбытия.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
					СписокНоменклатуры.Добавить(СтрокаВыбытия.Номенклатура);
					СписокПартий.Добавить(СтрокаВыбытия.Партия);

				КонецЕсли;

			ИначеЕсли (т = 2) и (СтрокаВыбытия.Событие <> Неопределено) Тогда
				// Действия, выполняемые на втором проходе алгоритма
				// Следует выполнить движения по регистру "НДСПокупки"
				СформироватьДвижениеНДСПокупки(Параметры, ТаблицаПоступлений, ТаблицаСписаний, СтрокаВыбытия, ТаблицаДвиженийПокупки);

			КонецЕсли;

		КонецЦикла;

		Если т = 1 Тогда
			СформироватьТаблицуДокументовПрихода(Параметры, СписокНоменклатуры, СписокПартий, ТаблицаПоступлений);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияВыбытияНДСПокупки()

// Процедура вызывается из процедуры "СформироватьДвиженияВыбытияПоРегиструНДСПокупки".
// Основная задача - по переданному списку партий и номенклатуры, формируется перечень
// соответствующих поступлений в регистр "НДСПокупки" - для получения суммы входящего НДС,
// который дожен быть "заблокирован", т.е. задержан для принятия к вычету.
Процедура СформироватьТаблицуДокументовПрихода(Параметры, СписокНоменклатуры, СписокПартий, ТаблицаПоступлений)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Параметры.Организация);
	Запрос.УстановитьПараметр("СобытиеПредъявленНДС", Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком);
	Запрос.УстановитьПараметр("СписокНоменклатуры",   СписокНоменклатуры);
	Запрос.УстановитьПараметр("СписокПартий",         СписокПартий);
	Запрос.Текст = "ВЫБРАТЬ
					|	НДСПартииТоваровОстаткиИОбороты.Организация,
					|	НДСПартииТоваровОстаткиИОбороты.Номенклатура,
					|	НДСПартииТоваровОстаткиИОбороты.ДокументОприходования КАК Партия,
					|	НДСПокупкиОбороты.ВидЦенности,
					|	НДСПокупкиОбороты.Поставщик,
					|	НДСПокупкиОбороты.СчетФактура,
					|	НДСПокупкиОбороты.Событие,
					|	НДСПокупкиОбороты.СтавкаНДС,
					|	СУММА(НДСПокупкиОбороты.СуммаБезНДСОборот) КАК СуммаБезНДС,
					|	СУММА(НДСПокупкиОбороты.НДСОборот) КАК НДС,
					|	СУММА(НДСПартииТоваровОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход,
					|	СУММА(НДСПартииТоваровОстаткиИОбороты.СтоимостьРасход) КАК СтоимостьРасход,
					|	СУММА(НДСПартииТоваровОстаткиИОбороты.НДСРасход) КАК НДСРасход
					|ИЗ
					|	РегистрНакопления.НДСПартииТоваров.ОстаткиИОбороты(, , , , Организация = &Организация И Номенклатура В (&СписокНоменклатуры) И ДокументОприходования В (&СписокПартий)) КАК НДСПартииТоваровОстаткиИОбороты
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПокупки.Обороты(, , , Организация = &Организация И Событие = &СобытиеПредъявленНДС) КАК НДСПокупкиОбороты
					|		ПО НДСПартииТоваровОстаткиИОбороты.СчетФактура = НДСПокупкиОбороты.СчетФактура

					|СГРУППИРОВАТЬ ПО
					|	НДСПартииТоваровОстаткиИОбороты.Организация,
					|	НДСПартииТоваровОстаткиИОбороты.Номенклатура,
					|	НДСПартииТоваровОстаткиИОбороты.ДокументОприходования,
					|	НДСПокупкиОбороты.ВидЦенности,
					|	НДСПокупкиОбороты.Поставщик,
					|	НДСПокупкиОбороты.СчетФактура,
					|	НДСПокупкиОбороты.Событие,
					|	НДСПокупкиОбороты.СтавкаНДС";

	ТаблицаПоступлений = Запрос.Выполнить().Выгрузить();

КонецПроцедуры // СформироватьТаблицуДокументовПрихода()

// Процедура вызывается из процедуры "СформироватьДвиженияВыбытияПоРегиструНДСПокупки".
// Основная задача - по информации из исходных таблиц заполнить параметры конкретного движения
// регистра "НДСПокупки".
Процедура СформироватьДвижениеНДСПокупки(Параметры, ТаблицаПоступлений, ТаблицаСписаний, СтрокаВыбытия, ТаблицаДвиженийПокупки)

	Если ТаблицаПоступлений.Колонки.Найти("СуммаСписания") = Неопределено Тогда
		ТаблицаПоступлений.Колонки.Добавить("СуммаСписания");
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура();

	// Задаем фильтры
	Если ТаблицаСписаний.Колонки.Найти("ВидЦенности") <> Неопределено Тогда
		ПараметрыПоиска.Вставить("ВидЦенности", СтрокаВыбытия.ВидЦенности);
	КонецЕсли;

	Если ТаблицаСписаний.Колонки.Найти("Номенклатура") <> Неопределено Тогда
		ПараметрыПоиска.Вставить("Номенклатура", СтрокаВыбытия.Номенклатура);
	КонецЕсли;             

	Если ТаблицаСписаний.Колонки.Найти("Партия") <> Неопределено Тогда
		ПараметрыПоиска.Вставить("Партия", СтрокаВыбытия.Партия);
	КонецЕсли;

	Если ТаблицаСписаний.Колонки.Найти("СтавкаНДС") <> Неопределено Тогда
		Если СтрокаВыбытия.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
			ПараметрыПоиска.Вставить("СтавкаНДС", СтрокаВыбытия.СтавкаНДС);
		КонецЕсли;
	КонецЕсли;

	СтрокиПоступлений = ТаблицаПоступлений.НайтиСтроки(ПараметрыПоиска);
	
	МассивБазыРаспределения = Новый Массив;
	Для Каждого СтрПост Из СтрокиПоступлений Цикл
		МассивБазыРаспределения.Добавить(СтрПост.СуммаБезНДС);
	КонецЦикла;
	
	РаспределитьСуммуПоСтолбцу(МассивБазыРаспределения, СтрокаВыбытия.СуммаСписания, СтрокиПоступлений, "СуммаСписания");
	
	Для Каждого СтрПоступления Из СтрокиПоступлений Цикл

		Если СтрПоступления.СуммаСписания > 0 Тогда

			СуммаСобытия = Мин(СтрПоступления.СуммаБезНДС, СтрПоступления.СуммаСписания);
			НДССобытия   = Окр(СуммаСобытия * СтрПоступления.НДС/СтрПоступления.СуммаБезНДС, 2);

			СтрокаДвижения = ТаблицаДвиженийПокупки.Добавить();

			СтрокаДвижения.Организация  = Параметры.Организация;
			СтрокаДвижения.ВидЦенности  = СтрПоступления.ВидЦенности;
			СтрокаДвижения.Поставщик    = СтрПоступления.Поставщик;
			СтрокаДвижения.СчетФактура  = СтрПоступления.СчетФактура;
			СтрокаДвижения.СтавкаНДС    = СтрПоступления.СтавкаНДС;
			СтрокаДвижения.Событие      = СтрокаВыбытия.Событие;
			СтрокаДвижения.СуммаБезНДС  = СуммаСобытия;
			СтрокаДвижения.НДС          = НДССобытия;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // СформироватьДвижениеНДСПокупки()


// По регистрам с исходящим НДС (Продажи)

// Процедура вызывается из модулей документов реализации.
// Основная задача - отразить реализацию МПЗ или услуг в подсистеме учета НДС,
// а именно в регистре: "НДСПродажи"
Процедура СформироватьДвиженияВыбытияНДСПродажи(Параметры, ПараметрыУчетнойПолитики, ТаблицаСписаний, ТаблицаДвиженийПродажи)

	Для Каждого СтрокаВыбытия Из ТаблицаСписаний Цикл

		Если (СтрокаВыбытия.Выручка <> 0) или (СтрокаВыбытия.СуммаНДСВыручки <> 0) Тогда
			СтрокаДвижения = ТаблицаДвиженийПродажи.Добавить();

			СтрокаДвижения.Организация = Параметры.Организация;
			СтрокаДвижения.ВидЦенности = СтрокаВыбытия.ВидЦенности;
			СтрокаДвижения.Покупатель  = Параметры.Контрагент;
			СтрокаДвижения.СчетФактура = Параметры.Регистратор;
			СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.Реализация;
			СтрокаДвижения.СтавкаНДС   = СтрокаВыбытия.СтавкаНДСВыручки;
			СтрокаДвижения.СуммаБезНДС = СтрокаВыбытия.Выручка - СтрокаВыбытия.СуммаНДСВыручки;
			СтрокаДвижения.НДС         = СтрокаВыбытия.СуммаНДСВыручки;

			// Устанавливаем реквизиты движения
			СтрокаДвижения.Номенклатура = СтрокаВыбытия.Номенклатура;
			
			Если ТипЗнч(Параметры.Регистратор) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
				// Следом формируем событие оплаты т.к. считаем что факт розничной реализации всегда 
				// совпадает с фактом оплаты
				СтрокаДвижения2 = ТаблицаДвиженийПродажи.Добавить();

				СтрокаДвижения2.Организация = СтрокаДвижения.Организация;
				СтрокаДвижения2.ВидЦенности = СтрокаДвижения.ВидЦенности;
				СтрокаДвижения2.Покупатель  = СтрокаДвижения.Покупатель;
				СтрокаДвижения2.СчетФактура = СтрокаДвижения.СчетФактура;
				СтрокаДвижения2.Событие     = Перечисления.СобытияПоНДСПродажи.Оплата;
				СтрокаДвижения2.СтавкаНДС   = СтрокаДвижения.СтавкаНДС;
				СтрокаДвижения2.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС;
				СтрокаДвижения2.НДС         = СтрокаДвижения.НДС;
				
				СтрокаДвижения2.ДокументОплаты = Параметры.Регистратор;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияВыбытияНДСПродажи()


// В Ы Б Ы Т И Е  (простой учет НДС)

// Процедура вызывается из модулей документов реализации и списания.
// Основная задача - отразить списание или реализацию МПЗ или услуг в подсистеме учета НДС,
// а именно в регистре: "НДСПродажи"
Процедура СформироватьДвиженияВыбытияПоРегиструНДСПродажи(СтруктураШапкиДокумента, ПараметрыУчетнойПолитики, ТабЧасть, ТаблицаДвиженийПродажи) Экспорт

	ОтражатьВБухгалтерскомУчете = Ложь;
	
	Если СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете", ОтражатьВБухгалтерскомУчете) Тогда
		Если НЕ ОтражатьВБухгалтерскомУчете Тогда
			// Движения по этому документу делать не нужно
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Для Каждого СтрокаВыбытия Из ТабЧасть Цикл
		
		Если (ТабЧасть.Колонки.Найти("СуммаБезНДСВознаграждения") <> Неопределено)
		   и (ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) Тогда
			// комиссионное вознаграждение
			СуммаБезНДС = СтрокаВыбытия.СуммаБезНДСВознаграждения;
			НДС = СтрокаВыбытия.НДСВознаграждения;
			СтавкаНДС = СтрокаВыбытия.СтавкаНДСВознаграждения;
		Иначе
			СуммаБезНДС = СтрокаВыбытия.СуммаБезНДС;
			НДС = СтрокаВыбытия.НДС;
			СтавкаНДС = СтрокаВыбытия.СтавкаНДС;
		КонецЕсли;
		
		Если (СуммаБезНДС + НДС) <> 0 Тогда

			СтрокаДвижения = ТаблицаДвиженийПродажи.Добавить();

			СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.ВидЦенности = СтрокаВыбытия.ВидЦенности;
			
			Если СтруктураШапкиДокумента.Свойство("Контрагент") Тогда
				СтрокаДвижения.Покупатель  = СтруктураШапкиДокумента.Контрагент;
			КонецЕсли;	
				
			СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;
			
			Если (ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах"))
			   и ((СуммаБезНДС + НДС) < 0) Тогда
				СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.Возврат;
				СтрокаДвижения.СтавкаНДС   = СтавкаНДС;
				СтрокаДвижения.СуммаБезНДС = ?(СуммаБезНДС<0, -СуммаБезНДС, СуммаБезНДС);
				СтрокаДвижения.НДС         = ?(НДС<0, -НДС, НДС);
				
			Иначе
				СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.Реализация;
				СтрокаДвижения.СтавкаНДС   = СтавкаНДС;
				СтрокаДвижения.СуммаБезНДС = СуммаБезНДС;
				СтрокаДвижения.НДС         = НДС;
				
			КонецЕсли;	
				
			// Устанавливаем реквизиты движения
			СтрокаДвижения.Номенклатура = СтрокаВыбытия.Ценность;
			
			Если ((ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ЧекККМ"))
			 или  (ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) )
			   и (ПараметрыУчетнойПолитики.РозничнаяТорговляОблагаетсяЕНВД) Тогда
				СтрокаДвижения.ВариантРеализации = Перечисления.ВариантРеализации.ЕНВД;
			Иначе
				СтрокаДвижения.ВариантРеализации = Перечисления.ВариантРеализации.НеЕНВД;
			КонецЕсли;
			
			Если (ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах"))
			   и (СтрокаДвижения.Событие <> Перечисления.СобытияПоНДСПродажи.Возврат) Тогда
				// Следом формируем событие оплаты т.к. считаем что факт розничной реализации всегда 
				// совпадает с фактом оплаты
				СтрокаДвижения2 = ТаблицаДвиженийПродажи.Добавить();

				СтрокаДвижения2.Организация = СтрокаДвижения.Организация;
				СтрокаДвижения2.ВидЦенности = СтрокаДвижения.ВидЦенности;
				СтрокаДвижения2.Покупатель  = СтрокаДвижения.Покупатель;
				СтрокаДвижения2.СчетФактура = СтрокаДвижения.СчетФактура;
				СтрокаДвижения2.Событие     = Перечисления.СобытияПоНДСПродажи.Оплата;
				СтрокаДвижения2.СтавкаНДС   = СтрокаДвижения.СтавкаНДС;
				СтрокаДвижения2.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС;
				СтрокаДвижения2.НДС         = СтрокаДвижения.НДС;
				
				СтрокаДвижения2.ДокументОплаты = СтруктураШапкиДокумента.Ссылка;
				
			КонецЕсли;

			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияВыбытияПоРегиструНДСПродажи()

// Процедура вызывается из модулей документов отражающих возврат поставщику.
// Основная задача - отразить событие возврата товара поставщику в подсистеме учета НДС,
// а именно в регистре: "НДСПродажи"
Процедура СформироватьДвиженияВозвратаПоРегиструНДСПокупки(СтруктураШапкиДокумента, ТабЧасть, ТаблицаДвиженийПокупки) Экспорт
	
	ТаблицаДляОбработки = ТабЧасть.Скопировать();
	ТаблицаДляОбработки.Свернуть("ВидЦенности, ДокументЗакупки,СтавкаНДС", "СуммаБезНДС,НДС");
	
	Для Каждого СтрВозврата Из ТаблицаДляОбработки Цикл
		Если СтрВозврата.СуммаБезНДС <> 0 Тогда
			СтрокаДвижения = ТаблицаДвиженийПокупки.Добавить();

			СтрокаДвижения.Организация  = СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.ВидЦенности  = СтрВозврата.ВидЦенности;
			СтрокаДвижения.Поставщик    = СтруктураШапкиДокумента.Контрагент;
			СтрокаДвижения.СчетФактура  = СтрВозврата.ДокументЗакупки;
			Если СтрокаДвижения.СчетФактура = Неопределено Тогда
				СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
			СтрокаДвижения.СтавкаНДС    = СтрВозврата.СтавкаНДС;
			СтрокаДвижения.Событие      = Перечисления.СобытияПоНДСПокупки.Возврат;
			СтрокаДвижения.СуммаБезНДС  = СтрВозврата.СуммаБезНДС;
			СтрокаДвижения.НДС          = СтрВозврата.НДС;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияВозвратаНДСПокупки()


////////////////////////////////////////////////////////////////////////////
////  РЕГИСТРАЦИЯ ОПЛАТ В ПОДСИСТЕМЕ НДС

// Функция вызывается из тела процедуры "КоманднаяПанельЗаполнить".
// выполняет зачет дебиторской и кредиторской задолженности в текущем периоде
// с привязкой к конкретным документам.
//
Функция СформироватьТаблицуОплатПоДокументам(ТаблицаОстатковОплат, ТаблицаОстатковДолгов) Экспорт
	
	ТаблицаОстатковОплат.Сортировать("Контрагент,Договор,Сделка,ДатаОплаты");
	ТаблицаОстатковДолгов.Колонки.Добавить("Оплачено", ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаРаспределенияОплат = ТаблицаОстатковДолгов.Скопировать();
	ТаблицаРаспределенияОплат.Очистить();
	ТаблицаРаспределенияОплат.Колонки.Добавить("ДокументОплаты");
	ТаблицаРаспределенияОплат.Колонки.Добавить("СуммаОплаты", ПолучитьОписаниеТиповЧисла(15,2));
	
	Для Каждого СтрокаОплаты Из ТаблицаОстатковОплат Цикл
		// Текущая оплата
		СтруктураПоиска = Новый Структура("Контрагент,Договор,Сделка", СтрокаОплаты.Контрагент, СтрокаОплаты.Договор, СтрокаОплаты.Сделка);
		
		ОтгрузкиПодОплату = ТаблицаОстатковДолгов.НайтиСтроки(СтруктураПоиска);
		
		ОстатокОплаты = СтрокаОплаты.СуммаДокумента;
		
		Если ОтгрузкиПодОплату <> Неопределено Тогда
			Для Каждого СтрокаОтгрузки Из ОтгрузкиПодОплату Цикл
				Если ОстатокОплаты = 0 Тогда
					// вся оплата распределена
					Прервать;
					
				ИначеЕсли (СтрокаОтгрузки.СуммаДокумента - СтрокаОтгрузки.Оплачено) <> 0 Тогда
					// найдена строка отгрузки, которая еще не оплачена
					ТекОстаток = СтрокаОтгрузки.СуммаДокумента - СтрокаОтгрузки.Оплачено;
					
					МодОстатка = ?(ТекОстаток < 0, - ТекОстаток, ТекОстаток); 
					МодОплаты = ?(ОстатокОплаты < 0, - ОстатокОплаты, ОстатокОплаты); 
					
					Если ТекОстаток > 0 Тогда
						ШагОплаты = Мин(МодОстатка, МодОплаты);
					Иначе
						ШагОплаты = - Мин(МодОстатка, МодОплаты);
					КонецЕсли;
					
					Если ШагОплаты <> 0 Тогда
						// создаем новую строку в распределении по оплатам
						СтрокаРаспределения = ТаблицаРаспределенияОплат.Добавить();
						СкопироватьСтрокуВДругуюТаблицу(СтрокаОтгрузки, ТаблицаОстатковДолгов, СтрокаРаспределения, ТаблицаРаспределенияОплат);
						
						// Определяем дополнительные параметры
						СтрокаРаспределения.ДатаОплаты = СтрокаОплаты.ДатаОплаты;
						СтрокаРаспределения.ДокументОплаты = СтрокаОплаты.Документ;
						СтрокаРаспределения.СуммаОплаты = ШагОплаты;
						
						// Регистрируем данныю сумму оплаты 
						СтрокаОтгрузки.Оплачено = СтрокаОтгрузки.Оплачено + ШагОплаты;
						ОстатокОплаты = ОстатокОплаты - ШагОплаты;
						
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРаспределенияОплат;
	
КонецФункции // СформироватьТаблицуОплатПоДокументам()

// Процедура вызывается из процедур "РегистрацияОплатыПоставщикуДляНДС" и "РегистрацияОплатыОтПокупателейДляНДС",
// Задача процедуры - распределить суммы оплат, перечисленные в параметре "ТаблицаОплат" по дереву
// непогашенных счетов фактур, переданному в параметре ДеревоСчетовФактур.
Процедура РаспределитьОплатыПоДереву(ТаблицаОплат, ДеревоСчетовФактур) Экспорт

	Для Каждого СтрокаОплаты Из ТаблицаОплат Цикл

		// распределяем оплату в рамках данного счета фактуры
		СтрокаДерева = ДеревоСчетовФактур.Строки.Найти(СтрокаОплаты.Документ, "СчетФактура", Ложь);

		Если СтрокаДерева <> Неопределено Тогда

			ВсегоВыставлено = (СтрокаДерева.НеоплаченнаяСумма + СтрокаДерева.НеоплаченныйНДС) - (СтрокаДерева.ОплатаБезНДС + СтрокаДерева.ОплатаНДС);

			Если ВсегоВыставлено > 0 Тогда

				ОплатаДляРаспределения = Мин(ВсегоВыставлено, СтрокаОплаты.СуммаОплаты);
				УжеУчтеноВсего         = 0;
				УжеУчтеноОплаты        = 0;

				ИтогСуммаОплатыБезНДС = 0;
				ИтогСуммаОплатыНДС = 0;
				
				Для Каждого СтрСодерж Из СтрокаДерева.Строки Цикл

					Если СтрСодерж.ФактыОплаты = Неопределено  Тогда
						// еще не зафиксировано ни одной оплаты
						ПоДокументамОплаты = Новый ТаблицаЗначений;
						ПоДокументамОплаты.Колонки.Добавить("ДокументОплаты");
						ПоДокументамОплаты.Колонки.Добавить("ДатаОплаты");
						ПоДокументамОплаты.Колонки.Добавить("ОплатаБезНДС");
						ПоДокументамОплаты.Колонки.Добавить("ОплатаНДС");
						
						СтрСодерж.ФактыОплаты = ПоДокументамОплаты;
						
					КонецЕсли;
					
					ФактыОплаты = СтрСодерж.ФактыОплаты;
					
					// Расчет суммы текущей оплаты
					ТекущийШагРаспределения = (СтрСодерж.НеоплаченнаяСумма + СтрСодерж.НеоплаченныйНДС) - (СтрСодерж.ОплатаБезНДС + СтрСодерж.ОплатаНДС);
					КоэффРаспределения      = (УжеУчтеноВсего + ТекущийШагРаспределения)/ВсегоВыставлено;
					ТекущийШагОплаты        = Окр(ОплатаДляРаспределения * КоэффРаспределения, 2) - УжеУчтеноОплаты;

					Если ТекущийШагОплаты <> 0 Тогда
						СтрОплаты = ФактыОплаты.Добавить();
						// Регистрируем факт оплаты
						СтрОплаты.ОплатаНДС      = Окр( (СтрСодерж.НеоплаченныйНДС - СтрСодерж.ОплатаНДС) * ТекущийШагОплаты/ТекущийШагРаспределения, 2);
						СтрОплаты.ОплатаБезНДС   = ТекущийШагОплаты - СтрОплаты.ОплатаНДС;
						СтрОплаты.ДатаОплаты = 		СтрокаОплаты.ДатаОплаты;
						СтрОплаты.ДокументОплаты = 	СтрокаОплаты.ДокументОплаты;
					КонецЕсли;

					// Отразим выполненный шаг распределения в счетчиках для "внутреннего" цикла
					// распределения по конкретным счетам-фактурам и видам ценностей
					УжеУчтеноВсего  = УжеУчтеноВсего  + ТекущийШагРаспределения;
					УжеУчтеноОплаты = УжеУчтеноОплаты + ТекущийШагОплаты;

					СтрСодерж.ОплатаБезНДС = ФактыОплаты.Итог("ОплатаБезНДС");
					СтрСодерж.ОплатаНДС = ФактыОплаты.Итог("ОплатаНДС");
					
					// подсчет итоговых сумм по строкам
					ИтогСуммаОплатыБезНДС = ИтогСуммаОплатыБезНДС + СтрСодерж.ОплатаБезНДС;
					ИтогСуммаОплатыНДС = ИтогСуммаОплатыНДС + СтрСодерж.ОплатаНДС;
					
				КонецЦикла; // Каждого СтрСодерж Из Счф.РаспределениеВДокументе Цикл

				СтрокаДерева.ОплатаБезНДС = ИтогСуммаОплатыБезНДС;
				СтрокаДерева.ОплатаНДС = ИтогСуммаОплатыНДС;
				
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // РаспределитьОплатыПоДереву()
