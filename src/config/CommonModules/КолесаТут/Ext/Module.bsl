
Процедура ВыгрузкаНоменклатурыKOLESATYT() Экспорт
	//попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду("545");//РЗ_Выгрузка номенклатуры на КОЛЕСАТУТ
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;
		Обработка.ВыгрузитьТовары(истина);
	//исключение
	//	ЗаписьЖурналаРегистрации("Выгрузка номенклатуры на КОЛЕСАТУТ",
	//	УровеньЖурналаРегистрации.Информация,
	//	,
	//	,
	//	ОписаниеОшибки(),
	//	);
	//КонецПопытки;
	
	//попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду("532");//РЗ_Выгрузить цены KOLESATYT.RU
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;
		Обработка.ВыгрузитьЦены(истина);
	//исключение
	//	ЗаписьЖурналаРегистрации("Выгрузить цены KOLESATYT.RU",
	//	УровеньЖурналаРегистрации.Информация,
	//	,
	//	,
	//	ОписаниеОшибки(),
	//	);
	//КонецПопытки;
КонецПроцедуры

Процедура ОтправитьЗаказыИМвТК() Экспорт
	//попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду("537");//РЗ_Отправить заказы ИМ в ТК
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;
		Обработка.ОтправитьЗаказы(ДобавитьМесяц(НачалоДня(ТекущаяДата()),-1),КонецДня(ТекущаяДата()));
	//исключение
	//	ЗаписьЖурналаРегистрации("Отправить заказы ИМ в ТК",
	//	УровеньЖурналаРегистрации.Информация,
	//	,
	//	,
	//	ОписаниеОшибки(),
	//	);
	//КонецПопытки;
КонецПроцедуры

Процедура МаркетологИМДействие() Экспорт
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду("486");
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;
		Обработка.ПолучитьФорму("ФормаОтчета").Открыть();
КонецПроцедуры


Функция ПолучитьДатуОтгрузкиЗаказа(мДата, Заказ) экспорт
	ЕКБ = Справочники.Подразделения.НайтиПоКоду("00138");
	РНД = Справочники.Подразделения.НайтиПоКоду("00106");
	Спб = Справочники.Подразделения.НайтиПоКоду("00112");
	ЯШТ = Справочники.Подразделения.НайтиПоКоду("00005");
	Мск = Справочники.Подразделения.НайтиПоКоду("00133");
	
	ТранспортнаяКомпанияПодорожник = Справочники.Контрагенты.НайтиПоКоду("94346"); //Подорожник Транспортное Агентство
	ТранспортнаяКомпанияДПД = Справочники.Контрагенты.НайтиПоКоду("94121"); 	   //Армадилло Бизнес Посылка
	КонтрагентШинтрейд = Справочники.Контрагенты.НайтиПоКоду("П001549");           //ШинТрейд (вместо ШинТрейд СПб)
	КонтрагентРозница = Справочники.Контрагенты.НайтиПоКоду("94143"); 			   // Покупатель
	
	//ВремяОтсечки = ТекущаяДата();
	ВремяОтсечки = НачалоДня(мДата)+17*60*60;
	ДатаОтправки = ТекущаяДата();
	
	Если Заказ.ТранспортнаяКомпания = ТранспортнаяКомпанияПодорожник  тогда 
		//ВремяОтсечки = НачалоДня(мДата)+17*60*60 - 15*60;
		ВремяОтсечки = НачалоДня(мДата)+17*60*60;
		Если мДата<ВремяОтсечки тогда //отправляем сегодня
			ДатаОтправки = НачалоДня(мДата);
		Иначе
			ДатаОтправки = НачалоДня(мДата)+1*24*60*60;
		КонецЕсли;

	ИначеЕсли Заказ.ТранспортнаяКомпания = ТранспортнаяКомпанияДПД 
		или Заказ.Контрагент = КонтрагентШинтрейд тогда //ДПД или шинтрейд
		
		ДатаОтправки=Дата(1,1,1);
		
		Если  Заказ.Подразделение=ЕКБ тогда 
			ВремяОтсечки=НачалоДня(мДата)+12*60*60 + 30*60;
			//ВремяОтсечки=НачалоДня(мДата)+12*60*60;
		ИначеЕсли  Заказ.Подразделение=РНД тогда	 
			//ВремяОтсечки=НачалоДня(мДата)+17*60*60 - 15*60;
			ВремяОтсечки=НачалоДня(мДата)+17*60*60;
			//ВремяОтсечки=НачалоДня(мДата)+16*60*60;
		ИначеЕсли  Заказ.Подразделение=Спб тогда	 
			//ВремяОтсечки=НачалоДня(мДата)+17*60*60 - 15*60;
			ВремяОтсечки=НачалоДня(мДата)+17*60*60;
			//ВремяОтсечки=НачалоДня(мДата)+16*60*60;
		Иначе	 
			//ВремяОтсечки=НачалоДня(мДата)+17*60*60;	 //задача №19182 
			//ВремяОтсечки=НачалоДня(мДата)+17*60*60 - 15*60;
			ВремяОтсечки=НачалоДня(мДата)+17*60*60;
			//ВремяОтсечки=НачалоДня(мДата)+16*60*60;
		КонецЕсли;
		
		Если мДата<ВремяОтсечки тогда
			мДатаОтправки=НачалоДня(мДата);
		Иначе
			мДатаОтправки=КонецДня(мДата)+2;  //Переносим на след день
		КонецЕсли;
		
		мДатаОтправки=ПроверитьНаПраздники(мДатаОтправки);
		
		мДатаОтправки=КонецДня(мДатаОтправки);
		ДатаОтправки=?(ДатаОтправки<мДатаОтправки,мДатаОтправки,ДатаОтправки);
		
	ИначеЕсли Заказ.Контрагент = КонтрагентРозница тогда //Розница	
		
		ДатаОтправки=Дата(1,1,1);
		
		Если  Заказ.Подразделение=ЕКБ тогда 
			ВремяОтсечки=НачалоДня(мДата)+13*60*60;
			//ВремяОтсечки=НачалоДня(мДата)+12*60*60;
			
		ИначеЕсли  Заказ.Подразделение=РНД тогда	 
			//ВремяОтсечки=НачалоДня(мДата)+17*60*60 - 15*60;
			ВремяОтсечки=НачалоДня(мДата)+17*60*60;
			//ВремяОтсечки=НачалоДня(мДата)+16*60*60;
		ИначеЕсли  Заказ.Подразделение=Спб тогда	 
			//ВремяОтсечки=НачалоДня(мДата)+14*30*60 - 15*60;
			ВремяОтсечки=НачалоДня(мДата)+14*30*60;
			//ВремяОтсечки=НачалоДня(мДата)+16*30*60;
		ИначеЕсли  Заказ.Подразделение=Мск тогда	 
			//ВремяОтсечки=НачалоДня(мДата)+17*60*60 - 15*60;	
			ВремяОтсечки=НачалоДня(мДата)+17*60*60;	
			//ВремяОтсечки=НачалоДня(мДата)+16*60*60;	
		Иначе	 
			//ВремяОтсечки=НачалоДня(мДата)+16*60*60+50*60;	//задача №19182 
			//ВремяОтсечки=НачалоДня(мДата)+17*60*60 - 15*60;	 
			ВремяОтсечки=НачалоДня(мДата)+17*60*60;	 
			//ВремяОтсечки=НачалоДня(мДата)+16*60*60;	 
		КонецЕсли;
		
		Если мДата<ВремяОтсечки тогда
			мДатаОтправки=НачалоДня(мДата);
		Иначе
			мДатаОтправки=КонецДня(мДата)+2;  //Переносим на след день
		КонецЕсли;
		
		мДатаОтправки=ПроверитьНаПраздники(мДатаОтправки);
		
		мДатаОтправки=КонецДня(мДатаОтправки);
		ДатаОтправки=?(ДатаОтправки<мДатаОтправки,мДатаОтправки,ДатаОтправки);
	КонецЕсли;
	
	ДатаОтправки=ПроверитьНаПраздники(ДатаОтправки);
	СтруктураОтправки = новый структура("ДатаОтправки,ВремяОтсечки",ДатаОтправки,ВремяОтсечки);
	Возврат СтруктураОтправки;
	
КонецФункции

Функция ПроверитьНаПраздники(Дат,СубботаРабочийДень=ложь, ВоскресеньеРабочийДень=ложь) Экспорт
	ДатаОтгрузки=Дат;
	
	МенеджерЗаписи = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Год = Год(ДатаОтгрузки);
	МенеджерЗаписи.ДатаКалендаря = ДатаОтгрузки;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() тогда
		Если (МенеджерЗаписи.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота и не СубботаРабочийДень) или
			(МенеджерЗаписи.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье и не ВоскресеньеРабочийДень) или 
			МенеджерЗаписи.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник тогда
			возврат ПроверитьНаПраздники(КонецДня(Дат)+1,СубботаРабочийДень,ВоскресеньеРабочийДень);
		иначе
			возврат ДатаОтгрузки;
		КонецЕсли;	
	КонецЕсли;
КонецФункции

Функция ПолучитьСебестоимостьЗаказов(СписокЗаказов) экспорт
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	ТексЗапросаБонусы =  ПолучитьБонусы(ложь).ТекстЗапросаБонусы;
	Запрос.Текст = ТексЗапросаБонусы+ "
	|;"+	"ВЫБРАТЬ
	    	|	ЗаказПокупателя.Ссылка
	    	|ПОМЕСТИТЬ втИсходныеЗаказы
	    	|ИЗ
	    	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	    	|ГДЕ
	    	|	ЗаказПокупателя.Ссылка В(&СписокЗаказов)
	    	|;
	    	|
	    	|////////////////////////////////////////////////////////////////////////////////
	    	|ВЫБРАТЬ
	    	|	А.ЗаказОбъединенный,
	    	|	А.ЗаказИсходный
	    	|ПОМЕСТИТЬ втОбъединенныеЗаказы
	    	|ИЗ
	    	|	(ВЫБРАТЬ
	    	|		ЗаказПокупателяЗаказы.Ссылка КАК ЗаказОбъединенный,
	    	|		ЗаказПокупателяЗаказы.ЗаказПокупателя КАК ЗаказИсходный
	    	|	ИЗ
	    	|		втИсходныеЗаказы КАК втИсходныеЗаказы
	    	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
	    	|			ПО втИсходныеЗаказы.Ссылка = ЗаказПокупателяЗаказы.ЗаказПокупателя
	    	|	ГДЕ
	    	|		ЗаказПокупателяЗаказы.Ссылка.Проведен
	    	|	
	    	|	ОБЪЕДИНИТЬ ВСЕ
	    	|	
	    	|	ВЫБРАТЬ
	    	|		втИсходныеЗаказы.Ссылка,
	    	|		втИсходныеЗаказы.Ссылка
	    	|	ИЗ
	    	|		втИсходныеЗаказы КАК втИсходныеЗаказы) КАК А
	    	|ГДЕ
	    	|	А.ЗаказОбъединенный.Проведен
	    	|;
	    	|
	    	|////////////////////////////////////////////////////////////////////////////////
	    	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	    	|	ПродажиСебестоимостьОбороты.ЗаказПокупателя,
	    	|	ПродажиСебестоимостьОбороты.Номенклатура КАК Номенклатура,
	    	|	СУММА(ПродажиСебестоимостьОбороты.КоличествоОборот) КАК КоличествоОборот,
	    	|	СУММА(ПродажиСебестоимостьОбороты.СтоимостьОборот) КАК СтоимостьОборот,
	    	|	ПродажиСебестоимостьОбороты.Период
	    	|ПОМЕСТИТЬ вт
	    	|ИЗ
	    	|	РегистрНакопления.ПродажиСебестоимость.Обороты(
	    	|			,
	    	|			,
	    	|			Регистратор,
	    	|			ЗаказПокупателя В
	    	|				(ВЫБРАТЬ
	    	|					втОбъединенныеЗаказы.ЗаказОбъединенный
	    	|				ИЗ
	    	|					втОбъединенныеЗаказы)) КАК ПродажиСебестоимостьОбороты
	    	|ГДЕ
	    	|	ПродажиСебестоимостьОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	    	|
	    	|СГРУППИРОВАТЬ ПО
	    	|	ПродажиСебестоимостьОбороты.ЗаказПокупателя,
	    	|	ПродажиСебестоимостьОбороты.Номенклатура,
	    	|	ПродажиСебестоимостьОбороты.Период
	    	|;
	    	|
	    	|////////////////////////////////////////////////////////////////////////////////
	    	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	    	|	вт.Номенклатура,
	    	|	вт.Период
	    	|ПОМЕСТИТЬ втПродажи
	    	|ИЗ
	    	|	вт КАК вт
	    	|;
	    	|
	    	|////////////////////////////////////////////////////////////////////////////////
	    	|ВЫБРАТЬ
	    	|	А.Номенклатура,
	    	|	МИНИМУМ(втБонусы.Бонус) КАК Бонус,
	    	|	А.ПериодРеализации
	    	|ПОМЕСТИТЬ втБонусыПоНоменклатуре
	    	|ИЗ
	    	|	(ВЫБРАТЬ
	    	|		втПродажи.Период КАК ПериодРеализации,
	    	|		втПродажи.Номенклатура КАК Номенклатура,
	    	|		МАКСИМУМ(втБонусы.Период) КАК ПериодБонуса
	    	|	ИЗ
	    	|		втПродажи КАК втПродажи
	    	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втБонусы КАК втБонусы
	    	|			ПО втПродажи.Номенклатура = втБонусы.Номенклатура
	    	|				И втПродажи.Период >= втБонусы.Период
	    	|	
	    	|	СГРУППИРОВАТЬ ПО
	    	|		втПродажи.Период,
	    	|		втПродажи.Номенклатура) КАК А
	    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втБонусы КАК втБонусы
	    	|		ПО А.Номенклатура = втБонусы.Номенклатура
	    	|			И А.ПериодБонуса = втБонусы.Период
	    	|
	    	|СГРУППИРОВАТЬ ПО
	    	|	А.Номенклатура,
	    	|	А.ПериодРеализации
	    	|;
	    	|
	    	|////////////////////////////////////////////////////////////////////////////////
	    	|ВЫБРАТЬ
	    	|	ВЫБОР
	    	|		КОГДА вт.Номенклатура ЕСТЬ NULL 
	    	|			ТОГДА 0
	    	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫБОР
	    	|					КОГДА вт.КоличествоОборот <> 0
	    	|						ТОГДА вт.СтоимостьОборот / вт.КоличествоОборот
	    	|					ИНАЧЕ 0
	    	|				КОНЕЦ КАК ЧИСЛО(15, 0))
	    	|	КОНЕЦ КАК Себестоимость,
	    	|	взТоварыИсходногоЗаказа.ЗаказИсходный КАК ЗаказПокупателя,
	    	|	взТоварыИсходногоЗаказа.Номенклатура.Код КАК НоменклатураКод,
	    	|	ВЫБОР
	    	|		КОГДА вт.Номенклатура ЕСТЬ NULL 
	    	|			ТОГДА 0
	    	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫБОР
	    	|					КОГДА вт.КоличествоОборот <> 0
	    	|						ТОГДА вт.СтоимостьОборот / вт.КоличествоОборот
	    	|					ИНАЧЕ 0
	    	|				КОНЕЦ - ВЫБОР
	    	|					КОГДА вт.КоличествоОборот <> 0
	    	|						ТОГДА вт.СтоимостьОборот / вт.КоличествоОборот
	    	|					ИНАЧЕ 0
	    	|				КОНЕЦ / 1.18 * ЕСТЬNULL(втБонусыПоНоменклатуре.Бонус, 0) / 100 КАК ЧИСЛО(15, 0))
	    	|	КОНЕЦ КАК СебестоимостьСУчетомБонуса,
	    	|	взТоварыИсходногоЗаказа.Цена
	    	|ИЗ
	    	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	    	|		ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	    	|		втОбъединенныеЗаказы.ЗаказОбъединенный КАК ЗаказОбъединенный,
	    	|		втОбъединенныеЗаказы.ЗаказИсходный КАК ЗаказИсходный,
	    	|		МАКСИМУМ(ЗаказПокупателяТовары.Цена) КАК Цена
	    	|	ИЗ
	    	|		втОбъединенныеЗаказы КАК втОбъединенныеЗаказы
	    	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	    	|			ПО втОбъединенныеЗаказы.ЗаказИсходный = ЗаказПокупателяТовары.Ссылка
	    	|	
	    	|	СГРУППИРОВАТЬ ПО
	    	|		ЗаказПокупателяТовары.Номенклатура,
	    	|		втОбъединенныеЗаказы.ЗаказОбъединенный,
	    	|		втОбъединенныеЗаказы.ЗаказИсходный) КАК взТоварыИсходногоЗаказа
	    	|		ЛЕВОЕ СОЕДИНЕНИЕ вт КАК вт
	    	|			ЛЕВОЕ СОЕДИНЕНИЕ втБонусыПоНоменклатуре КАК втБонусыПоНоменклатуре
	    	|			ПО вт.Номенклатура = втБонусыПоНоменклатуре.Номенклатура
	    	|				И вт.Период = втБонусыПоНоменклатуре.ПериодРеализации
	    	|		ПО взТоварыИсходногоЗаказа.ЗаказОбъединенный = вт.ЗаказПокупателя
	    	|			И взТоварыИсходногоЗаказа.Номенклатура = вт.Номенклатура";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура ОбнулитьЛимитОтгрузкиИМ() Экспорт
	//попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("РЗ_Обнулить лимит отгрузки ИМ");
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;
		Обработка.ОбнулитьЛимитИМ();
	//исключение
	//	ЗаписьЖурналаРегистрации("Обнулить лимит отгрузки ИМ",
	//	УровеньЖурналаРегистрации.Информация,
	//	,
	//	,
	//	ОписаниеОшибки(),
	//	);
	//КонецПопытки;
КонецПроцедуры


Процедура ОтправитьКомпенсацииВПИТСТОП() Экспорт
	//попытка
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("РЗ_Отправить компенсации в ПИТСТОП");
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
			Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
		Иначе 
			Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
		КонецЕсли;
		Обработка.ОформитьКомпенсации();
		Обработка.ОформитьВозвраты();
	    Обработка.ЗапуститьСкриптНаСайте();
	//исключение
	//	ЗаписьЖурналаРегистрации("Обнулить лимит отгрузки ИМ",
	//	УровеньЖурналаРегистрации.Информация,
	//	,
	//	,
	//	ОписаниеОшибки(),
	//	);
	//КонецПопытки;
КонецПроцедуры


//Функции веб-сервиса
Функция  СформироватьРедактироватьЗаказ(Заказ, Ошибка, Customer, OrderProperties, Goods, Amenities, ЗаказФранчайзи = ложь) экспорт
	
	времяНачала=ТекущаяУниверсальнаяДатаВМиллисекундах();
	URL = "www.yst.ru/im17";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProducts"));
	Изменения = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ListOfChanges"));
	
	
	Success = Истина;
	OrderNumber = "";
	OrderGUID = "";
	
	ЭтоРедактирование = ?(СокрЛП(OrderProperties.OrderGuid)="",ложь, истина);
	
	СкладПеремещения = неопределено;
	
	КонтрагентРозница = Справочники.Контрагенты.НайтиПоКоду("94143");
	
	Подразделение = Справочники.Подразделения.НайтиПоКоду(СокрЛП(OrderProperties.Storage));
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	//найдем или создадим контрагента
	Если customer.Type = "ЮР" тогда
		ИНН = СокрЛП(customer.ULProperties.INN);
		Если ИНН<>"" тогда
			//Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИНН);	
			КПП = СокрЛП(customer.ULProperties.KPP);
			Контрагент = НайтиКонтрагентаПоИНН(ИНН,КПП);
		Иначе
			//Контрагент = Справочники.Контрагенты.ПустаяСсылка();	
			Success = Ложь;
			Ошибка = Ошибка+Символы.ПС+"Не удалось создать контрагента, не заполнен ИНН";
			
		КонецЕсли;
	иначеЕсли customer.Type = "ФИЗ" или customer.Type = "ФИЗ_Кредит" тогда //Физик платил картой
		Телефон = УбратьЛишниеСимволыИзТелефона(СокрЛП(customer.Phone));
		Если Телефон<>"" тогда
			Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("УИД_ИМ",Телефон);	
		Иначе
			Success = Ложь;
			Ошибка = Ошибка+Символы.ПС+"Не удалось создать контрагента, не заполнен телефон";
			
			//Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли customer.Type = "ТК" тогда //ДПД, подорожник и прочие тк
		//если указан посредник, то подставляем его
		ЕстьПосредник = ложь;
		Если ТипЗНЧ(OrderProperties.Consignee)=Тип("Строка")тогда
			Если СокрЛП(OrderProperties.Consignee)<>"" тогда
				ЕстьПосредник = истина;
				Контрагент = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(OrderProperties.Consignee));
				Если  Контрагент = Справочники.Контрагенты.ПустаяСсылка() тогда
					Success = Ложь;
					Ошибка = Ошибка+Символы.ПС+"Не удалось найти посредника по коду: "+СокрЛП(OrderProperties.Consignee);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьПосредник = ложь тогда  //посредник не указан, заказ на ТК
			//Контрагент = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(OrderProperties.TransportCompany));
			
			Если СокрЛП(OrderProperties.TransportCompany)<>"" тогда
				Если СокрЛП(OrderProperties.TransportCompany)="94121" тогда   //Армадилло Бизнес Посылка
					Контрагент = Справочники.Контрагенты.НайтиПоКоду("94247"); //Розничный покупатель ДПД 
				ИначеЕсли СокрЛП(OrderProperties.TransportCompany)="94346" тогда //Подорожник Транспортное Агентство
					Контрагент = Справочники.Контрагенты.НайтиПоКоду("П005342"); //Розничный покупатель Подорожник 
				ИначеЕсли СокрЛП(OrderProperties.TransportCompany)="П019371" тогда //ООО ПИТСТОП 	
					Контрагент = Справочники.Контрагенты.НайтиПоКоду("95768"); //Розничный покупатель ПИТСТОП //для самовывоза из питера
				КонецЕсли;
			Иначе
				Success = Ложь;
				Ошибка = Ошибка+Символы.ПС+"Не указан код ТК";
			КонецЕсли;
			
			Если  Контрагент = Справочники.Контрагенты.ПустаяСсылка() тогда
				Success = Ложь;
				Ошибка = Ошибка+Символы.ПС+"Не удалось найти ТК по коду: "+СокрЛП(OrderProperties.TransportCompany);
			КонецЕсли;
		КонецЕсли;
		
	//ИначеЕсли customer.Type = "ШинтрейдСпб" тогда //в базе ЯШТ заказ создается на шинтрейд, по ценам шинтрейда
	//	// при подтверждении заказа, заказ создается в базе шинтрейда, с ценами сайта
	//	Контрагент = Справочники.Контрагенты.НайтиПоКоду("П001549");
	//	Если  Контрагент = Справочники.Контрагенты.ПустаяСсылка() тогда
	//		Success = Ложь;
	//		Ошибка = Ошибка+Символы.ПС+"Не удалось найти Контрагента Шинтрейд";
	//	КонецЕсли;
	Иначе
		Success = Ложь;
		Ошибка = Ошибка+Символы.ПС+"Указан неверный тип клиента (customer.Type) ";
	КонецЕсли;
	
	НовыйКонтрагент = ложь;
	
	ВремяОперации = ТекущаяУниверсальнаяДатаВМиллисекундах()-времяНачала;
	//Т1
	//Ошибка = Ошибка + "Время Т1: "+ВремяОперации+" мс. "+Символы.ПС;
	
	времяНачала=ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	МожноБезПредоплаты = ложь;
	Если (customer.Type = "ФИЗ" или customer.Type = "ФИЗ_Кредит") 
		и СокрЛП(OrderProperties.TransportCompany) = "П019371"  //питстоп
		и OrderProperties.Storage="00005"
		тогда
		МожноБезПредоплаты = истина;
	КонецЕсли;	
	
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() и Success Тогда
		Контрагент = СоздатьКонтрагента(Подразделение, customer, МожноБезПредоплаты);
		НовыйКонтрагент = Истина;
		Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() или Контрагент = неопределено тогда
			Success = Ложь;
			Ошибка = Ошибка+Символы.ПС+"Не удалось создать контрагента";
		КонецЕсли;
	КонецЕсли;
	
	ВремяОперации = ТекущаяУниверсальнаяДатаВМиллисекундах()-времяНачала;
	//Т1
	//Ошибка = Ошибка + "Время Запись контрагента: "+ВремяОперации+" мс. "+Символы.ПС;
	времяНачала=ТекущаяУниверсальнаяДатаВМиллисекундах();
	//если заказ уже есть, то не создаем новый, а возвращаем уже созданный
	Если не ЭтоРедактирование тогда
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Ссылка.Номер,
		|	ЗаказПокупателяТовары.НомерСтроки,
		|	ЗаказПокупателяТовары.Количество,
		|	ЗаказПокупателяТовары.Номенклатура.Код,
		|	ЗаказПокупателяТовары.Цена,
		|	ЗаказПокупателяТовары.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		ЗаказПокупателя.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|	ГДЕ
		//|		ЗаказПокупателя.Проведен и
		|       ЗаказПокупателя.Ссылка <> &ЗаказСсылка 
		//|		И ЗаказПокупателя.Контрагент = &Контрагент
		|		И ЗаказПокупателя.НомерВходящегоДокумента = &НомерВходящегоДокумента
		|		И ЗаказПокупателя.Подразделение = &Подразделение
		|		И ЗаказПокупателя.Дата >= &НачалоГода) КАК Заказ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|		ПО Заказ.Ссылка = ЗаказПокупателяТовары.Ссылка";
		Запрос.УстановитьПараметр("ЗаказСсылка",Заказ.Ссылка); //эта же функция используется для редактированиия, а для него не надо возвращать уже существует
		Запрос.УстановитьПараметр("НомерВходящегоДокумента",ПолучитьНомерИМ(СокрЛП(OrderProperties.inOrderNumber)));
		Запрос.УстановитьПараметр("Подразделение",Подразделение);
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		Запрос.УстановитьПараметр("НачалоГода",НачалоГода(ТекущаяДата()));
		Если OrderProperties.inOrderNumber<>"FRANCH" тогда
			Рез=Запрос.Выполнить().Выбрать();
			//ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
			Пока Рез.Следующий() Цикл
				
				Success = истина;
				Ошибка = Ошибка+Символы.ПС+"Уже есть такой";
				OrderNumber = СокрЛП(Рез.Номер);
				OrderGUID = Строка(Рез.Ссылка.УникальныйИдентификатор());
				
				Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Product"));
			КонецЦикла;
			
			Если Рез.Количество()>0 тогда
				РезультатОперации.Products		 = Товары;
				РезультатОперации.Success		 = Success;
				РезультатОперации.OrderNumber	 = OrderNumber;
				РезультатОперации.OrderGUID		 = OrderGUID;
				РезультатОперации.Error			 = Ошибка;
				Возврат РезультатОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВремяОперации = ТекущаяУниверсальнаяДатаВМиллисекундах()-времяНачала;
	//Т1
	//Ошибка = Ошибка + "Время поиск заказа: "+ВремяОперации+" мс. "+Символы.ПС;
	времяНачала=ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если СтрДлина(СокрЛП(OrderProperties.Comment)) > 500 Тогда
		Success = Ложь;
		Ошибка = Ошибка+Символы.ПС+"Комментарий к заказу превышает допустимые 500 символов";
	КонецЕсли;
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура");
	ТаблицаЗаказа.Колонки.Добавить("НоменклатураСпр");
	ТаблицаЗаказа.Колонки.Добавить("Количество");
	ТаблицаЗаказа.Колонки.Добавить("КоличествоОстаток");
	ТаблицаЗаказа.Колонки.Добавить("Цена");
	
	ТаблицаУслуг = ТаблицаЗаказа.Скопировать();
	
	Для каждого товар из Goods.Product цикл
		СтрокаТЗ = ТаблицаЗаказа.Добавить();
		СтрокаТЗ.Номенклатура = товар.Code;
		СтрокаТЗ.Количество =  Число(товар.Quantity);
		СтрокаТЗ.НоменклатураСпр=Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
		СтрокаТЗ.КоличествоОстаток =  СтрокаТЗ.Количество;
		СтрокаТЗ.Цена =  Число(товар.Price);
		
		Если СтрокаТЗ.Цена = 0 и ЗаказФранчайзи = ложь тогда
			Success = Ложь;
			Ошибка = Ошибка+Символы.ПС+"Для товара: ("+СтрокаТЗ.Номенклатура+") "+ СтрокаТЗ.НоменклатураСпр+" указана цена 0 руб.";
		КонецЕсли;
	КонецЦикла;
	
	тзВрем = ТаблицаЗаказа.Скопировать(,"Номенклатура");
	тзВрем.Свернуть("Номенклатура");
	
	Если ТаблицаЗаказа.Количество() <> тзВрем.Количество() тогда
		Success = Ложь;
		Ошибка = Ошибка + Символы.ПС + "В заказе не должно быть несколько строк с одинаковыми товарами. ";
	КонецЕсли;
	
	Для каждого товар из amenities.Product цикл
		СтрокаТЗ = ТаблицаУслуг.Добавить();
		СтрокаТЗ.Номенклатура = товар.Code;
		СтрокаТЗ.НоменклатураСпр=Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
		СтрокаТЗ.Количество =  Число(товар.Quantity);
		СтрокаТЗ.Цена =  Число(товар.Price);
		
		Если СтрокаТЗ.Цена = 0 тогда
			Success = Ложь;
			Ошибка = Ошибка+Символы.ПС+"Для услуги: ("+СтрокаТЗ.Номенклатура+") "+ СтрокаТЗ.НоменклатураСпр+" указана цена 0 руб.";
		КонецЕсли;
	КонецЦикла;
	
	Если Подразделение = Справочники.Подразделения.ПустаяСсылка() Тогда
		Success = Ложь;
		Ошибка = Ошибка+Символы.ПС+"Не удалось найти подразделение по коду " + OrderProperties.Storage;
	КонецЕсли;
	
	Если OrderProperties.InProduction и не ЗначениеЗаполнено(ТаблицаЗаказа[0].НоменклатураСпр.ОсновнойПоставщик) тогда
		Success = Ложь;
		Ошибка = Ошибка+Символы.ПС+"Не удалось найти основного поставщика для " + ТаблицаЗаказа.Номенклатура;
	КонецЕсли;
	
	Если ТипЗНЧ(OrderProperties.WarehouseMoving)=Тип("Строка")тогда
		Если СокрЛП(OrderProperties.WarehouseMoving)<>"" тогда
			СкладПеремещения = Справочники.Склады.НайтиПоКоду(СокрЛП(OrderProperties.WarehouseMoving));
			Если не ЗначениеЗаполнено(СкладПеремещения) тогда
				Success = ложь;
				Ошибка = Ошибка+Символы.ПС+"Не удалось найти склад для перемещения по коду: " + СокрЛП(OrderProperties.WarehouseMoving);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	//Создание заказа
	Если Success Тогда
		ПерепроводитьЗаказ = ложь;
		ИзмениласьТЧ = ложь;
		//Заказ = Документы.ЗаказПокупателя.СоздатьДокумент();
		Заказ.Дата = ТекущаяДата();
		Если НЕ OrderProperties.ShippingDate = "" и ЗаказФранчайзи = ложь Тогда  //передается дата отгрузки
			Заказ.ДатаОтгрузки = Дата(OrderProperties.ShippingDate);
		КонецЕсли;
		
		Заказ.Организация = Справочники.Организации.НайтиПоКоду("00001");
		
		Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); //Крупный опт
		Заказ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
		Заказ.КурсВзаиморасчетов = 1;
		Заказ.КратностьВзаиморасчетов = 1;
		
		Если не Заказ.Контрагент = Контрагент тогда
			Заказ.Контрагент = Контрагент;
			ПерепроводитьЗаказ = истина;
			//Ошибка = Ошибка+Символы.ПС+"Проведение (контрагент)";
		КонецЕсли;
		Заказ.Транзит = Истина;
		Заказ.НомерВходящегоДокумента=ПолучитьНомерИМ(СокрЛП(OrderProperties.inOrderNumber));
		Если Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") Тогда  //Головное
			Заказ.Транзит = Ложь;
		ИначеЕсли ЗначениеЗаполнено(Подразделение) И Подразделение.ОбособленноеПодразделение Тогда 
			Заказ.Склад = Подразделение.Склад;
			Заказ.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
			Заказ.Грузоотправитель = Подразделение.Контрагент;
		КонецЕсли;
		
		Если не OrderProperties.InProduction тогда  
			Заказ.Проверен = Истина;
		Иначе //заказ под производство поставщику
			Заказ.Поставщик = ТаблицаЗаказа[0].НоменклатураСпр.ОсновнойПоставщик;
			Заказ.Статус = перечисления.СтатусыЗаказов.ВОбработке; //в обработке у поставщика
		КонецЕсли;
		
		Если Найти(Заказ.Комментарий,"#Отгрузка отменена!")>0 тогда
			Заказ.Комментарий = "#Отгрузка отменена!  "+"Клиент отменил заказ"+Символы.ПС+Заказ.Комментарий;
		иначе
			Заказ.Комментарий = "IM Service: " + OrderProperties.Comment;
		КонецЕсли;
		Заказ.КомментарийДляСклада=СокрЛП(OrderProperties.CommentStock);
		
		Если не Заказ.Подразделение = Подразделение тогда
			Заказ.Подразделение = Подразделение;  
			ПерепроводитьЗаказ = истина;
			//Ошибка = Ошибка+Символы.ПС+"Проведение (подразделение)";
		КонецЕсли;
		
		Заказ.СуммаВключаетНДС = Истина;
		Заказ.УчитыватьНДС = Истина;
		Заказ.АвтоРезервирование = Истина;
		Заказ.ССайта = Истина;
		Заказ.НапомнитьОСобытии = Истина;
		Заказ.ТипЗаказа = 10;
		
		Если СокрЛП(OrderProperties.TransportCompany)<>"" тогда
			Заказ.ТранспортнаяКомпания = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(OrderProperties.TransportCompany)); 
		КонецЕсли;
		
		Заказ.СтоимостьДоставки = OrderProperties.CostOfShippingTariff;
		Заказ.СтоимостьДоставкиДопы = OrderProperties.CostOfShippingDop;
		
		Если ЗаказФранчайзи тогда
			ДоговорКонтрагента = ПолучитьДоговорОТХ(Заказ.Контрагент);
			Если ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() тогда
				Success = ложь;
				Ошибка = Ошибка + Символы.ПС + "Не удалось найти договор с типом перемещение ОТХ для контрагента: " + Заказ.Контрагент;
			КонецЕсли;
			
			ПересчитатьЦеныПоПравиламКонтрагента(Заказ.Контрагент, Заказ.ДоговорКонтрагента, ТаблицаЗаказа);
			
			Если СокрЛП(OrderProperties.TransportCompany) = "94121" тогда //дпд
				Заказ.TerminalОтгрузкаТранспортнойКомпанией = истина;
			КонецЕсли;
		Иначе
			ДоговорВрем = ПолучитьДоговор(Контрагент,Подразделение);
			списокДоговоров = РегистрыСведений.ДоговорыПоТоварнымГруппам.СоздатьНаборЗаписей();
			СписокДоговоров.Отбор.Контрагент.значение = Контрагент;
			СписокДоговоров.Отбор.Контрагент.использование = истина;
			СписокДоговоров.Отбор.Подразделение.значение = 	Подразделение;
			СписокДоговоров.Отбор.Подразделение.использование = истина;
			СписокДоговоров.Отбор.КлиентКОЛЕСАТУТ.значение = 	ИСТИНА;
			СписокДоговоров.Отбор.КлиентКОЛЕСАТУТ.использование = истина;
			
			СписокДоговоров.Прочитать();
			ТаблицаДоговоров = СписокДоговоров.Выгрузить();
			
			Если ТаблицаДоговоров.Количество()>0 Тогда
				ДоговорКонтрагента =  ТаблицаДоговоров[0].Договор;
			иначе	  
				ДоговорКонтрагента = ДоговорВрем;
				//***договор получаем по единому алгоритму: сначала факторинг, потом - продажа
				Если не ЗначениеЗаполнено(ДоговорКонтрагента) тогда
					ДоговорКонтрагента = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(Заказ);
				КонецЕсли;
			конецЕсли;
		КонецЕсли;
		
		Если не Заказ.ДоговорКонтрагента = ДоговорКонтрагента тогда
			Заказ.ДоговорКонтрагента = ДоговорКонтрагента;
			ПерепроводитьЗаказ = истина;
			//Ошибка = Ошибка+Символы.ПС+"Проведение (договор)";
		КонецЕсли;
		
		//КонецЕсли;
		//+++ 10.09.2015 - доп.условия на предоплатные договора - по типу!
		//услПредоплатногоДоговора = (Заказ.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001") );
		
		Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		Если НЕ OrderProperties.DeliveryDate = "" Тогда  //передается дата доставки
			//ДатаОплаты= КонецДня(ТекущаяДата())+2*(КонецДня(Дата(OrderProperties.DeliveryDate))-КонецДня(ТекущаяДата()))+7*86400; //2*срок доставки + 7дней //задача №17203
			ДатаОплаты= КонецДня(ТекущаяДата())+2*(КонецДня(Дата(OrderProperties.DeliveryDate))-КонецДня(ТекущаяДата()))+22*86400; //2*срок доставки + 22дней //задача №28118
			
			Если  ДатаОплаты<ТекущаяДата() тогда
				Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
			Иначе
				Если КонецДня(ТекущаяДата())+45*86400 < ДатаОплаты тогда //не более 45 дней
					ДатаОплаты = КонецДня(ТекущаяДата())+45*86400;
				КонецЕсли;
				Заказ.ДатаОплаты = ДатаОплаты;
			КонецЕсли;
		иначе
			Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		КонецЕсли;
		
		СписокНом = Новый СписокЗначений;
		Заказ.Товары.Очистить();
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			СтрокаТовары = Заказ.Товары.Добавить();
			СтрокаТовары.Номенклатура = СтрокаТЗ.НоменклатураСпр;
			СтрокаТовары.Коэффициент = 1;
			СтрокаТовары.Количество = СтрокаТЗ.Количество;
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, Заказ, Константы.ВалютаРегламентированногоУчета.Получить()); 
			СтрокаТовары.Цена = СтрокаТЗ.Цена;
			
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, Заказ);
			РассчитатьСуммуТабЧасти(СтрокаТовары, Заказ);
			РассчитатьСуммуНДСТабЧасти(СтрокаТовары, Заказ);
			СписокНом.Добавить(СтрокаТЗ.НоменклатураСпр);
			
			Если ЗначениеЗаполнено(СкладПеремещения) тогда
				Заказ.ВводитьТолькоПеремещение = истина;
				СтрокаТовары.Размещение = СкладПеремещения;
			КонецЕсли;
		КонецЦикла;
		
		Если не СравнитьТаблицыНаборовЗаписей(Заказ.Товары.выгрузить(,"Номенклатура,Количество,цена") ,Заказ.Ссылка.Товары.выгрузить(,"Номенклатура,Количество,цена")) тогда
			ИзмениласьТЧ = истина;
			ПерепроводитьЗаказ = истина;
			//Ошибка = Ошибка+Символы.ПС+"Проведение (товары)";
		КонецЕсли;
		//Услуги
		Заказ.Услуги.Очистить();
		Для каждого СтрокаТЗ ИЗ ТаблицаУслуг Цикл
			СтрокаУслуги = Заказ.Услуги.Добавить();
			СтрокаУслуги.Номенклатура = СтрокаТЗ.НоменклатураСпр;
			СтрокаУслуги.Содержание = ""+СтрокаУслуги.Номенклатура+" *** "+ПолучитьНомерИМ(СокрЛП(OrderProperties.inOrderNumber));
			
			СтрокаУслуги.Количество = СтрокаТЗ.Количество;
			СтрокаУслуги.Цена = СтрокаТЗ.Цена;
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаУслуги, Заказ);
			РассчитатьСуммуТабЧасти(СтрокаУслуги, Заказ);
			РассчитатьСуммуНДСТабЧасти(СтрокаУслуги, Заказ);
		КонецЦикла;
		
		Если не СравнитьТаблицыНаборовЗаписей(Заказ.Услуги.выгрузить(,"Номенклатура,Содержание,Количество,цена"),Заказ.Ссылка.Услуги.выгрузить(,"Номенклатура,Содержание,Количество,цена")) тогда
			ПерепроводитьЗаказ = истина;
			//Ошибка = Ошибка+Символы.ПС+"Проведение (услуги)";
		КонецЕсли;
		
		ЗаполнитьРеквизитыТК(Заказ,OrderProperties,Customer);
		
		Заказ.НомерТранзакцииПлатежнойСистемы = ?(ТипЗНЧ(OrderProperties.TransactionNumber)=Тип("Строка"),OrderProperties.TransactionNumber,"");
		
		Если customer.Type = "ФИЗ" или customer.Type = "ФИЗ_Кредит" тогда  //если нет признака что оплатиа картой прошла, то заказ не подтверждаем
			Если СокрЛП(Заказ.НомерТранзакцииПлатежнойСистемы)<>"" или МожноБезПредоплаты тогда
				Заказ.ИМСклиентомСогласовано = OrderProperties.Verify;
			Иначе
				Заказ.ИМСклиентомСогласовано = ложь;
			КонецЕсли;
		ИначеЕсли customer.Type = "ЮР"	тогда
			Если OrderProperties.Payed тогда
				Заказ.ИМСклиентомСогласовано = OrderProperties.Verify;
			Иначе
				Заказ.ИМСклиентомСогласовано = ложь;
			КонецЕсли;
		иначе  //тк
			Заказ.ИМСклиентомСогласовано = OrderProperties.Verify;
		КонецЕсли;
		
		ВремяОперации = ТекущаяУниверсальнаяДатаВМиллисекундах()-времяНачала;
		//Т1
		//Ошибка = Ошибка +Символы.ПС+"Время создание заказа: "+ВремяОперации+" мс. "+Символы.ПС;
		времяНачала=ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		DeliveryAddress=""+Заказ.ТранспортнаяКомпания;
		если Заказ.ТранспортнаяКомпания=Справочники.Контрагенты.НайтиПоКоду("94121") тогда //дпд
			Если Заказ.Подразделение = Справочники.Подразделения.НайтиПоКоду("00106") тогда  //рнд
				DeliveryAddress="DPD г. Ростов-на-Дону, ул Доватора, дом 148";
				Заказ.ВидАдреса = справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки 04");
			ИначеЕсли Заказ.Подразделение = Справочники.Подразделения.НайтиПоКоду("00112") тогда  //спб
				DeliveryAddress="DPD Санкт-Петербург г, Обуховской Обороны пр-кт, дом № 295";
				Заказ.ВидАдреса = справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки 02");	
			ИначеЕсли Заказ.Подразделение = Справочники.Подразделения.НайтиПоКоду("00138") тогда  //екб
				DeliveryAddress="DPD Екатеринбург г, пл Жуковского, дом 1, корп. Я";
				Заказ.ВидАдреса = справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки 05");	
			Иначе
				//DeliveryAddress="DPD г. Ярославль, проспект Фрунзе, д. 24 А, павильон-склад №26";
				DeliveryAddress="г. Ярославль, Тормозное шоссе 109";
				Заказ.ВидАдреса = справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки 03");
			КонецЕсли;
		иначеЕсли Заказ.ТранспортнаяКомпания=Справочники.Контрагенты.НайтиПоКоду("94346") тогда
			Если Найти(нрег(""+OrderProperties.DeliveryAddress.Region),"ярославская")<>0 или Найти(нрег(""+OrderProperties.DeliveryAddress.Region),"костромская")<>0 тогда
				DeliveryAddress="Подорожник(ЯО)";
			иначе //подорожник москва
				DeliveryAddress="Подорожник г. Москва, Балаклавский проспект, д. 28 Б стр. 1";
				Заказ.ВидАдреса = справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки");
			КонецЕсли;
		КонецЕсли;
		
		//Если СокрЛП(OrderProperties.Consignee)<>"" тогда  //передали грузополучателя
		//	Грузополучатель = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(OrderProperties.Consignee));
		//	Заказ.Грузополучатель = Грузополучатель;
		//	DeliveryAddress = "г. Москва, 1-й Угрешский пр-д, д.2 (въезд с внешней стороны ТТК через АЗС «Татнефть»)";
		//	Заказ.Комментарий = СтрЗаменить(Заказ.Комментарий,"Доставка строго к 9:00! ","");
		//	Заказ.Комментарий = "Доставка строго к 9:00! "+Заказ.Комментарий;
		//	Если Заказ.ИМСклиентомСогласовано тогда
		//		Заказ.Комментарий = СтрЗаменить(Заказ.Комментарий,"Подтвержден; ","");
		//		Заказ.Комментарий = "Подтвержден; "+Заказ.Комментарий;
		//	КонецЕсли;
		//КонецЕсли;
		
		Заказ.АдресДоставки = DeliveryAddress;
		Заказ.АдресДляТТН   = DeliveryAddress;
		
		
		//Если Заказ.ТранспортнаяКомпания = Справочники.Контрагенты.НайтиПоКоду("95768") и Заказ.ИМСклиентомСогласовано и OrderProperties.Storage="00005" тогда  //ПИТСТОП
		//	//Заказ.Комментарий = Заказ.Комментарий+" ПИТСТОП Подтвержден";
		//	РаботасDPD.СогласоватьЗаказСПИТСТОП(ссылка)
		//КонецЕсли;	
		
		Если Заказ.Контрагент = Справочники.Контрагенты.НайтиПоКоду("94247") или Customer.Type = "ФИЗ" или Customer.Type = "ФИЗ_Кредит" тогда  //Розничный покупатель ДПД
			Заказ.ВыписатьСпецификацию=Ложь; //12.04.16 Смирнов Экономим бумагу
		иначе
			Заказ.ВыписатьСпецификацию=Истина;
		КонецЕсли;
		
		ЗаказДоИзменения = Заказ.Ссылка;
		ПолучитьСписокИзменений(ЗаказДоИзменения, Заказ, Изменения);
		//Заказ.Номер = "ТК244046";
		Если Заказ.Товары.Количество() > 0 и Success Тогда
			
			ЗначениеПоляНомерНеУникально = Ложь;
			ЗаказПереписалиПослеНомерНеУникален = Ложь;
			
			Попытка
				Если ПерепроводитьЗаказ или ИзмениласьТЧ тогда
					Если ИзмениласьТЧ тогда
						Заказ.Дата = ТекущаяДата();
					КонецЕсли;
					Заказ.Записать(РежимЗаписиДокумента.Проведение);
					//Заказ.Записать(РежимЗаписиДокумента.Запись);
				иначе
					Заказ.Записать(РежимЗаписиДокумента.Запись);  //+++ 30.05.2018 ничего в товарах и услугах не изменилось!
				КонецЕсли;
				Success = Истина;
				Ошибка="";
			Исключение  //если заказ не записался, проверим остатки ???
				ПроверитьОстатки(Success,Ошибка,Подразделение,СписокНом,ТаблицаЗаказа,Заказ.ДоговорКонтрагента.КонтрагентДляРезерваИМ);
				ЧтоЗаОшибка = ОписаниеОшибки();
				ЗначениеПоляНомерНеУникально = ( Найти(ЧтоЗаОшибка,"Значение поля ""Номер"" не уникально")>0 );
				НовыйНомер = "";
				Success = Ложь;
				Ошибка = Ошибка +Символы.ПС+ЧтоЗаОшибка;
			КонецПопытки; //запись заказа
			
			Если ЗначениеПоляНомерНеУникально тогда //попробуем вручную поставить новый номер
				Запрос = новый Запрос;
				Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЗаказПокупателя.Номер КАК Номер,
				|	ВЫБОР
				|		КОГДА ЗаказПокупателя.Подразделение.ПрефиксИБ = """"
				|			ТОГДА ""ТК""
				|		ИНАЧЕ ЗаказПокупателя.Подразделение.ПрефиксИБ
				|	КОНЕЦ КАК Префикс,
				|	ЗаказПокупателя.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
				|ГДЕ
				|	ЗаказПокупателя.Дата <= &ТекДата
				|	И ЗаказПокупателя.Дата > &ПрошлыйМесяц
				|	И (ЗаказПокупателя.Подразделение = &Подразделение
				|			ИЛИ ВЫБОР
				|				КОГДА &Подразделение = &Головное
				|					ТОГДА ЗаказПокупателя.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
				|			КОНЕЦ)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Номер УБЫВ
				|АВТОУПОРЯДОЧИВАНИЕ";
				Запрос.УстановитьПараметр("Подразделение",Заказ.Подразделение);
				Запрос.УстановитьПараметр("Головное",Справочники.Подразделения.НайтиПоКоду("00005"));
				Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
				Запрос.УстановитьПараметр("ПрошлыйМесяц",ДобавитьМесяц(ТекущаяДата(),-1));
				Рез = Запрос.Выполнить().Выбрать();
				Если Рез.Количество()>0 тогда
					Пока Рез.Следующий() Цикл  //всего 1 запись!
						НомерСПрефиксом  = Рез.Номер;
						Префикс = ?(Заказ.Подразделение.ПрефиксИБ="","ТК",Заказ.Подразделение.ПрефиксИБ);
						НомерБезПрефикса = СтрЗаменить(НомерСПрефиксом,Префикс,"");
						ДлиннаБезПрефикса = СтрДлина(НомерБезПрефикса);
						НомерЧисло = Число(НомерБезПрефикса);
						НовыйНомер = НомерЧисло + 1;
						НовыйНомер = Префикс+ДополнитьСтрокуЯ(Формат(НовыйНомер,"ЧГ=0"),ДлиннаБезПрефикса,"0");
						Заказ.Номер = НовыйНомер;
						
						Попытка
							Если ПерепроводитьЗаказ или ИзмениласьТЧ тогда   //30.05.2018 - как и выше
								Заказ.Записать(РежимЗаписиДокумента.Проведение); 
							иначе
								Заказ.Записать(РежимЗаписиДокумента.Запись); 
							КонецЕсли;	
							Success = Истина;
							Ошибка ="";
							ЧтоЗаОшибка = "";
							ЗаказПереписалиПослеНомерНеУникален = истина;
						Исключение
							Success = ложь;
							ЧтоЗаОшибка = ОписаниеОшибки();
							Ошибка = Ошибка+Символы.ПС+"Ошибка при записи заказа: "+ЧтоЗаОшибка+" #"+Заказ.Номер+"#";
						КонецПопытки;
						
					КонецЦикла;	 
				иначе
					Success = ложь;
					Ошибка = Ошибка+Символы.ПС+"Ошибка при записи заказа: "+ЧтоЗаОшибка+" #"+Заказ.Номер+"#";
				КонецЕсли;
				
				//-------------внутри если---------------------------	
				Если ЗаказПереписалиПослеНомерНеУникален тогда //первый раз неудача, но с новымномером записался
					Success = Истина;
					Ошибка="";
				иначе	
					Success = Ложь;
					Ошибка = Ошибка+Символы.ПС+"Ошибка при записи заказа: "+ЧтоЗаОшибка+" #"+Заказ.Номер+"#>"+НовыйНомер;
				КонецЕсли;
				
			КонецЕсли;
			
			//Т1
			//Ошибка = Ошибка + Символы.ПС+ "Время запись/проверка остатков заказа: "+ВремяОперации+" мс. "+Символы.ПС;
			времяНачала=ТекущаяУниверсальнаяДатаВМиллисекундах();
			
			Если Контрагент=КонтрагентРозница тогда
				//ставим сразу категорию
				попытка
					менеджерЗаписи = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
					менеджерЗаписи.Объект=Заказ.Ссылка;
					менеджерЗаписи.Категория = Справочники.КатегорииОбъектов.НайтиПоНаименованию("Розница АЭ");
					менеджерЗаписи.Записать();
				Исключение
				КонецПопытки;
			ИначеЕсли (customer.Type = "ФИЗ" или customer.Type = "ФИЗ_Кредит")и СокрЛП(Заказ.НомерТранзакцииПлатежнойСистемы)<>"" тогда
				попытка
					менеджерЗаписи = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
					менеджерЗаписи.Объект=Заказ.Ссылка;
					менеджерЗаписи.Категория = Справочники.КатегорииОбъектов.НайтиПоКоду("00045"); //КОЛЕСАТУТ Карточки
					менеджерЗаписи.Записать();
				Исключение
				КонецПопытки;
				
				Если  СокрЛП(Заказ.НомерТранзакцииПлатежнойСистемы)<>"" тогда
					попытка
						Если customer.Type = "ФИЗ" тогда
							Эквайер = Справочники.Контрагенты.НайтиПоКоду("94391"); //НКО ЭПС
							ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000001");
							
							Если СокрЛП(OrderProperties.IdPaymentAgent)="" или СокрЛП(OrderProperties.IdPaymentAgent) = "94391" тогда
								Эквайер = Справочники.Контрагенты.НайтиПоКоду("94391"); //НКО ЭПС
								ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000001");
							ИначеЕсли СокрЛП(OrderProperties.IdPaymentAgent)= "П022676" тогда
								Эквайер = Справочники.Контрагенты.НайтиПоКоду("П022676"); //НКО ЯНДЕКС.ДЕНЬГИ ООО
								ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000003");
							КонецЕсли;
						ИначеЕсли customer.Type = "ФИЗ_Кредит" тогда
							Эквайер = Справочники.Контрагенты.НайтиПоКоду("94608"); //Кредит Лайн
							ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000002");
						КонецЕсли;	
						СформироватьОплатуПлатежнымиКартами(Заказ.ссылка,Эквайер,ДоговорЭквайринга, OrderProperties.TransactionDateTime,,Справочники.Контрагенты.ПустаяСсылка(),0);
					исключение
						ОписаниеОшибки = ""+ОписаниеОшибки + " Ошибка при создании Оплаты платежными картами: "+ОписаниеОшибки();
						Success = Ложь;
					конецпопытки;
				КонецЕсли;
			КонецЕсли;
			
			Если Заказ.ТранспортнаяКомпания = Справочники.Контрагенты.НайтиПоКоду("П019371") и Заказ.ИМСклиентомСогласовано и Success = истина тогда  //ПИТСТОП
				Если OrderProperties.Storage="00005" тогда //головное
					//Попытка
					//	РаботасDPD.СогласоватьЗаказСПИТСТОП(Заказ.Ссылка);
					//Исключение
					//КонецПопытки;
					
					менеджерЗаписи = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
					менеджерЗаписи.Объект=Заказ.Ссылка;
					менеджерЗаписи.Категория = Справочники.КатегорииОбъектов.НайтиПоКоду("00057"); //категория ПИТСТОП Ярославль
					менеджерЗаписи.Записать();
				ИначеЕсли	OrderProperties.Storage="00112" тогда //Питер
					менеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					менеджерЗаписи.Объект=Заказ.Ссылка;
					менеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90175"); //Направление отгрузки
					менеджерЗаписи.Значение = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("Пу117");// ПВ Филиал
					менеджерЗаписи.Записать();
				КонецЕсли;
			КонецЕсли;
			
			OrderGUID = Строка(Заказ.Ссылка.УникальныйИдентификатор());
			OrderNumber = СокрЛП(Заказ.Номер);
			
		КонецЕсли;  //Заказ.Товары.Количество()>0 и Success
		
		Если Контрагент.Ссылка <> Справочники.Контрагенты.ПустаяСсылка() и Контрагент.Ссылка<>Справочники.Контрагенты.НайтиПоКоду("П001549") тогда
			ЗаписатьКИ(Контрагент.Ссылка,Customer);
		КонецЕсли;
		
		//Т1
		//Ошибка = Ошибка + "Время запись контактов: "+ВремяОперации+" мс. "+Символы.ПС;
		времяНачала=ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		//формируем возвращаемый массив
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			Если СтрокаТЗ.КоличествоОстаток < СтрокаТЗ.Количество Тогда
				Success = ложь;
				Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Product"));
				Товар.Code=(Строка(СтрокаТЗ.Номенклатура));
				Товар.Quantity=(Число(СтрокаТЗ.КоличествоОстаток));
				Товар.Price=(Число(СтрокаТЗ.Цена));
				Товары.Product.Добавить(Товар);
				Ошибка = Ошибка+Символы.ПС+"не хватает товара: "+Товар.Code+", свободно: "+ СтрокаТЗ.КоличествоОстаток;
			иначеЕсли ЗаказФранчайзи тогда
				Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Product"));
				Товар.Code=(Строка(СтрокаТЗ.Номенклатура));
				Товар.Quantity=(Число(СтрокаТЗ.Количество));
				Товар.Price=(Число(СтрокаТЗ.Цена));
				Товары.Product.Добавить(Товар);
			КонецЕсли;
		КонецЦикла;
		
		РезультатОперации.Products		 = Товары;
		РезультатОперации.Success		 = Success;
		РезультатОперации.OrderNumber	 = OrderNumber;
		РезультатОперации.OrderGUID		 = OrderGUID;
		РезультатОперации.Error			 = Ошибка;
		РезультатОперации.Changes		 = Изменения;
		
		Возврат РезультатОперации;
	Иначе  // Success = ложь
		
		РезультатОперации.Products		 = Goods;
		РезультатОперации.Success		 = Success;
		РезультатОперации.OrderNumber	 = OrderNumber;
		РезультатОперации.OrderGUID		 = OrderGUID;
		РезультатОперации.Error			 = Ошибка;
		
		Возврат РезультатОперации;
	КонецЕсли; //Success
	
КонецФункции

Функция НайтиКонтрагентаПоИНН(ИНН,КПП="") Экспорт
	//Контрагент=Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИНН);
	//Возврат Контрагент;
	Контрагент=Справочники.Контрагенты.ПустаяСсылка();
	Если СокрЛП(ИНН)="" тогда
		Возврат Контрагент;
	КонецЕсли;
	Запрос= Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	Контрагенты.Ссылка КАК Контрагент
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |ГДЕ
	             |	Контрагенты.ИНН = &ИНН
	             |	И Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(перечисление.ЮрФизЛицо.ЮрЛицо)
	             |	//УсловиеКПП";
				 Если СокрЛП(КПП)<>"" тогда
					 Запрос.Текст=СтрЗаменить(Запрос.Текст,"//УсловиеКПП"," И Контрагенты.КПП = &КПП ");
				 КонецЕсли;
	Запрос.УстановитьПараметр("ИНН",СокрЛП(ИНН));
	Запрос.УстановитьПараметр("КПП",СокрЛП(КПП));

	Рез=Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Контрагент=Рез.Контрагент;
	КонецЦикла;
	Возврат Контрагент;
КонецФункции

Функция УбратьЛишниеСимволыИзТелефона(тел) экспорт
	телНовый = тел;
	телНовый = СтрЗаменить(телНовый,"+","");
	телНовый = СтрЗаменить(телНовый," ","");
	телНовый = СтрЗаменить(телНовый,"(","");
	телНовый = СтрЗаменить(телНовый,")","");
	телНовый = СтрЗаменить(телНовый,"-","");
	
	возврат телНовый;
конецФункции

Функция СоздатьКонтрагента(Подразделение,Customer, МожноБезПредоплаты = ложь) экспорт
	//Ответственный = Справочники.Пользователи.НайтиПоКоду("Качалов");
	Ответственный = Справочники.Пользователи.НайтиПоКоду("Левченко Е.");
	
	//+++ 02.08.2016  замена на Левченко!
	//Ответственный2 = Справочники.Пользователи.НайтиПоКоду(".Куликова Ю");
	Ответственный2 = Справочники.Пользователи.НайтиПоКоду("Левченко Е.");
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.УстановитьНовыйКод();
	//НовыйКонтрагент.УИД_ИМ = Partner;
	НовыйКонтрагент.Родитель = Справочники.Контрагенты.КлиентыИМ;
	НовыйКонтрагент.Наименование=?(СокрЛП(customer.ULProperties.Name)="",НовыйКонтрагент.Наименование,СокрЛП(customer.ULProperties.Name));
	
	НовыйКонтрагент.Наименование=ПривестиКраткоеНаименованиеКТребованиямЯШТ(НовыйКонтрагент.Наименование);
	
	НовыйКонтрагент.НаименованиеПолное=?(СокрЛП(customer.ULProperties.FULL_NAME_ORG)="",НовыйКонтрагент.Наименование,СокрЛП(customer.ULProperties.FULL_NAME_ORG));
	НовыйКонтрагент.Покупатель = истина;
	НовыйКонтрагент.ОсновнойМенеджерКонтрагента = Ответственный;
	//НовыйКонтрагент.КонтрагентДляРезерваИМ=Справочники.Контрагенты.НайтиПоКоду("П004703"); //Резерв для ИМ  //123заменить
	НовыйКонтрагент.КонтролироватьСуммуЗадолженности = истина;
	Если МожноБезПредоплаты тогда
		//НовыйКонтрагент.ДопустимаяСуммаЗадолженности = 100000;
		НовыйКонтрагент.ДопустимаяСуммаЗадолженностиИМ = 100000;
	КонецЕсли;
	
	
	НовыйКонтрагент.ВыгружатьСерыйСписокВTerminal = Истина;
	НовыйКонтрагент.ВыгружатьЧерныйСписокВTerminal = Истина;
	
	Если Customer.Type = "ЮР" тогда
		НовыйКонтрагент.КатегорияПокупателя = Справочники.КатегорииПокупателей.КонечныйПотребитель;
		НовыйКонтрагент.ЮрФизЛицо =Перечисления.ЮрФизЛицо.ЮрЛицо;
		НовыйКонтрагент.ИНН = customer.ULProperties.INN;
		НовыйКонтрагент.КПП = customer.ULProperties.KPP;
	ИначеЕсли Customer.Type = "ФИЗ" тогда
		НовыйКонтрагент.КатегорияПокупателя = Справочники.КатегорииПокупателей.КонечныйПотребительФЛ;
		НовыйКонтрагент.Наименование=?(СокрЛП(customer.ULProperties.Name)="",НовыйКонтрагент.Наименование,СокрЛП(customer.ULProperties.Name))+" ("+УбратьЛишниеСимволыИзТелефона(Customer.Phone)+")";
		//НовыйКонтрагент.НаименованиеПолное="Розничный покупатель(Карты)"+" ("+НовыйКонтрагент.Код+")";
		НовыйКонтрагент.НаименованиеПолное="Розничный покупатель(Карты)"+" "+СокрЛП(customer.ULProperties.Name);
		НовыйКонтрагент.ЮрФизЛицо =Перечисления.ЮрФизЛицо.ФизЛицо;
		НовыйКонтрагент.УИД_ИМ = УбратьЛишниеСимволыИзТелефона(Customer.Phone);
	ИначеЕсли Customer.Type = "ФИЗ_Кредит" тогда
		НовыйКонтрагент.КатегорияПокупателя = Справочники.КатегорииПокупателей.КонечныйПотребительФЛ;
		НовыйКонтрагент.Наименование=?(СокрЛП(customer.ULProperties.Name)="",НовыйКонтрагент.Наименование,СокрЛП(customer.ULProperties.Name))+" ("+УбратьЛишниеСимволыИзТелефона(Customer.Phone)+")";
		//НовыйКонтрагент.НаименованиеПолное="Розничный покупатель(Карты)"+" ("+НовыйКонтрагент.Код+")";
		НовыйКонтрагент.НаименованиеПолное="Розничный покупатель(Кредит)"+" "+СокрЛП(customer.ULProperties.Name);
		НовыйКонтрагент.ЮрФизЛицо =Перечисления.ЮрФизЛицо.ФизЛицо;
		НовыйКонтрагент.УИД_ИМ = УбратьЛишниеСимволыИзТелефона(Customer.Phone);	
	Иначе	
		НовыйКонтрагент.КатегорияПокупателя = Справочники.КатегорииПокупателей.ИнтернетМагазин;
	КонецЕсли;
	
	НовыйКонтрагент.НеКонтроллироватьЦеныПродажи = Истина;
	
	
	НовыйКонтрагент.Записать();
	//счета/договоры
	Если Customer.Type = "ЮР" или Customer = неопределено тогда
		кРасчСчет=customer.ULProperties.RAS_SCHET;
		кБИК=customer.ULProperties.BIK;
		кКорСчет=customer.ULProperties.KOR_SCHET;
		кБанк = customer.ULProperties.BANK_OF_USER;
		Если кРасчСчет<>"" тогда
			счет = справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",кРасчСчет,,НовыйКонтрагент.ссылка); 
			Если счет = неопределено или счет = справочники.БанковскиеСчета.ПустаяСсылка() тогда
				счетОб = справочники.БанковскиеСчета.СоздатьЭлемент();
				счетОб.Владелец = НовыйКонтрагент.Ссылка;
				счетОб.ВидСчета = "Расчетный";
				счетОб.ВалютаДенежныхСредств = справочники.Валюты.НайтиПоКоду(643);
				счетОб.НомерСчета = кРасчСчет;
				//счетОб.Наименование = "Расчетный  в банке: "+Customer.UR_INFO.BANK_OF_USER; 
				Если кБИК<>"" тогда
					банк = справочники.Банки.НайтиПоКоду(кБИК);				
					счетОб.Банк = банк;
				КонецЕсли;
				Если ЗначениеЗаполнено(банк) тогда
					счетОб.Наименование = ""+банк+" ("+счетОб.ВидСчета+")";
				иначе	
					счетОб.Наименование = "Расчетный  в банке: "+customer.ULProperties.BANK_OF_USER;
				КонецЕсли;
				//счетОб.ТекстКорреспондента = "В банке: "+кБанк+" БИК: "+кБИК+" к/с: "+ кКорСчет;
				счетОб.ТекстКорреспондента = СокрЛП(НовыйКонтрагент.НаименованиеПолное);
				попытка 
					счетОб.Записать();
					НовыйКонтрагент.ОсновнойБанковскийСчет = счетОб.Ссылка;
				исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	//Договор
	
	НовыйКонтрагент.ОсновнойДоговорКонтрагента=ПолучитьДоговор(НовыйКонтрагент.Ссылка,Подразделение,Ответственный2,истина, МожноБезПредоплаты);
	
	НовыйКонтрагент.Записать();
	
	возврат новыйконтрагент.Ссылка;
КонецФункции

Функция ПолучитьНомерИМ(номерБитрикс) экспорт
	Если СокрЛП(номерБитрикс) = "FRANCH" тогда
		Возврат "";
	КонецЕсли;
	номВрем = ДополнитьСтрокуЯ(сокрЛП(номерБитрикс),10,"0");
	//НомВР = Число(номерБитрикс);
	//Возврат  "ИМ"+Формат(НомВР,"ЧЦ=8; ЧВН=; ЧГ=0");
	Возврат  "ИМ"+номВрем;
КонецФункции

Функция ПолучитьДоговор(Контрагент,Подразделение,Ответственный2=неопределено,СоздатьДоговор=ложь, МожноБезПредоплаты = ложь);
	Если СоздатьДоговор тогда //контрагент новый время на поиски договора тратить не будем, сразу создаем новый
		Возврат СоздатьНовыйДоговор(Контрагент,Ответственный2,Подразделение, МожноБезПредоплаты);
	Иначе //поищем договор, если нужного нет, то создадим новый	
		Запрос = новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
		|	ДоговорыПоТоварнымГруппам.Договор КАК ДоговорПоТоварнымГруппам
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДоговорыПоТоварнымГруппам.Договор КАК Договор
		|		ИЗ
		|			РегистрСведений.ДоговорыПоТоварнымГруппам КАК ДоговорыПоТоварнымГруппам
		|		ГДЕ
		|			ДоговорыПоТоварнымГруппам.Контрагент = &Владелец
		|			И ДоговорыПоТоварнымГруппам.Подразделение = &Подразделение
		|			И ДоговорыПоТоварнымГруппам.КлиентКОЛЕСАТУТ = ИСТИНА) КАК ДоговорыПоТоварнымГруппам
		|		ПО ДоговорыКонтрагентов.Ссылка = ДоговорыПоТоварнымГруппам.Договор
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ОтветственноеЛицо.НаправлениеПродаж = &НаправлениеПродаж";
		Запрос.УстановитьПараметр("Владелец",Контрагент);
		Запрос.УстановитьПараметр("Подразделение",Подразделение);
		Запрос.УстановитьПараметр("НаправлениеПродаж",Справочники.НаправленияПродаж.НайтиПоКоду("16")); //16. "Колеса ТУТ"
		Рез = Запрос.Выполнить().Выгрузить();
		Если Рез.Количество()>0 тогда
			Если НЕ ЗначениеЗаполнено(Рез[0].ДоговорПоТоварнымГруппам) тогда
				ДобавитьДоговорыПоТоварнымГруппам(Рез[0].ДоговорКонтрагента,Контрагент,Подразделение);
			КонецЕсли;
			Возврат Рез[0].ДоговорКонтрагента;
		Иначе
			Возврат СоздатьНовыйДоговор(Контрагент,Ответственный2,Подразделение, МожноБезПредоплаты); 
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьРеквизитыТК(Заказ,OrderProperties,Customer)
	тчРеквизитыТК = Заказ.РеквизитыЗаказаТК;
	тчРеквизитыТК.Очистить();
	
	ОбновитьРеквизитТК(тчРеквизитыТК,"ContactFio", Customer.ULProperties.Name); //ФИО
	ОбновитьРеквизитТК(тчРеквизитыТК,"ContactPhone", Customer.Phone); //ФИО
	ОбновитьРеквизитТК(тчРеквизитыТК,"ContactPhone_Dop", Customer.Phone_Dop); 
	ОбновитьРеквизитТК(тчРеквизитыТК,"TerminalCode",OrderProperties.Terminal);
	ОбновитьРеквизитТК(тчРеквизитыТК,"ТарифТК",OrderProperties.RateTransportCompany);
	ОбновитьРеквизитТК(тчРеквизитыТК,"КурьерСТерминалом",OrderProperties.ApplicationOnTheTerminal);
	
	ОбновитьРеквизитТК(тчРеквизитыТК,"TerminalOrAddress",?(СокрЛП(OrderProperties.Terminal)="",ложь,истина));  //если терминал не заполнен, значит везем на адрес
	
	ОбновитьРеквизитТК(тчРеквизитыТК,"DeliveryDate",OrderProperties.DeliveryDate);
	ОбновитьРеквизитТК(тчРеквизитыТК,"DeliveryTime",OrderProperties.DeliveryTime);
	
	
	ОбновитьРеквизитТК(тчРеквизитыТК,"CountryCode", "RU"); //Страна
	ОбновитьРеквизитТК(тчРеквизитыТК,"PostalCode", OrderProperties.DeliveryAddress.Index); //индекс
	ОбновитьРеквизитТК(тчРеквизитыТК,"Region", OrderProperties.DeliveryAddress.Region);//область
	ОбновитьРеквизитТК(тчРеквизитыТК,"District", OrderProperties.DeliveryAddress.District);//Район
	ОбновитьРеквизитТК(тчРеквизитыТК,"City", OrderProperties.DeliveryAddress.City);//Город
	ОбновитьРеквизитТК(тчРеквизитыТК,"Settlement", OrderProperties.DeliveryAddress.Settlement);//район
	Если СокрЛП(OrderProperties.DeliveryAddress.Street)="" тогда //Если улица пустая, тогда вставим город
		ОбновитьРеквизитТК(тчРеквизитыТК,"Street", OrderProperties.DeliveryAddress.City);//Улица
	иначе
		ОбновитьРеквизитТК(тчРеквизитыТК,"Street", OrderProperties.DeliveryAddress.Street);//Улица
	КонецЕсли;
	ОбновитьРеквизитТК(тчРеквизитыТК,"StreetType", OrderProperties.DeliveryAddress.Street_Abbr);//Улица аббр
	ОбновитьРеквизитТК(тчРеквизитыТК,"House", OrderProperties.DeliveryAddress.House);//Дом
	ОбновитьРеквизитТК(тчРеквизитыТК,"BlockType", OrderProperties.DeliveryAddress.Korpus);//Дом
	ОбновитьРеквизитТК(тчРеквизитыТК,"STR", OrderProperties.DeliveryAddress.STR);//Строение
    ОбновитьРеквизитТК(тчРеквизитыТК,"Vlad", OrderProperties.DeliveryAddress.Vlad);//Владение
    ОбновитьРеквизитТК(тчРеквизитыТК,"Flat", OrderProperties.DeliveryAddress.Flat);//Квартира
	ОбновитьРеквизитТК(тчРеквизитыТК,"Office", OrderProperties.DeliveryAddress.Office);//Офис
	ОбновитьРеквизитТК(тчРеквизитыТК,"Dop_inf", OrderProperties.DeliveryAddress.Dop_inf);//Доп инфо
	ОбновитьРеквизитТК(тчРеквизитыТК,"Адрес покупателя", OrderProperties.DeliveryAddress.Address_Full);//Адрес терминала
	
	ОбновитьРеквизитТК(тчРеквизитыТК,"ОплаченБН", OrderProperties.Payed);//Доп инфо
	
	ОбновитьРеквизитТК(тчРеквизитыТК,"Заказ через посредника", ложь);
	Если ТипЗНЧ(OrderProperties.Consignee)=Тип("Строка")тогда
		Если СокрЛП(OrderProperties.Consignee)="П019371" тогда
			ОбновитьРеквизитТК(тчРеквизитыТК,"Заказ через посредника", истина);
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры

Функция ПолучитьСписокИзменений(ЗаказДоИзменения,ЗаказПослеИзменения, Изменения)
	Расхождения = Новый ТаблицаЗначений;
	
	Расхождения.Колонки.Добавить("Тип");
	Расхождения.Колонки.Добавить("Элемент");
	Расхождения.Колонки.Добавить("Реквизит");
	Расхождения.Колонки.Добавить("Было");
	Расхождения.Колонки.Добавить("Стало");
	Расхождения.Колонки.Добавить("Действие");
	
	ТЗ1=новый таблицаЗначений;
	ТЗ1.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200)));
	ТЗ1.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200)));
	
	ТЗ2=новый таблицаЗначений;
	ТЗ2.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200)));
	ТЗ2.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200)));
	
	//Товары количество
	ТЗ1.Очистить();
	ТЗ2.Очистить();
	Для каждого стр из ЗаказДоИзменения.Товары цикл
		нстр = ТЗ1.Добавить();
		нстр.Поле = стр.Номенклатура.Код;
		нстр.Значение = стр.Количество;
	КонецЦикла;
	
	Для каждого стр из ЗаказПослеИзменения.Товары цикл
		нстр = ТЗ2.Добавить();
		нстр.Поле = стр.Номенклатура.Код;
		нстр.Значение = стр.Количество;
	КонецЦикла;
	РасхожденияТабличныеЧастиWS(ТЗ1,ТЗ2,Расхождения,"Products","Quantity");
	
	//Товары Цена
	ТЗ1.Очистить();
	ТЗ2.Очистить();
	Для каждого стр из ЗаказДоИзменения.Товары цикл
		нстр = ТЗ1.Добавить();
		нстр.Поле = стр.Номенклатура.Код;
		нстр.Значение = стр.Цена;
	КонецЦикла;
	
	Для каждого стр из ЗаказПослеИзменения.Товары цикл
		нстр = ТЗ2.Добавить();
		нстр.Поле = стр.Номенклатура.Код;
		нстр.Значение = стр.Цена;
	КонецЦикла;
	
	РасхожденияТабличныеЧастиWS(ТЗ1,ТЗ2,Расхождения,"Products","Price");
	
	//Услуги Цена
	ТЗ1.Очистить();
	ТЗ2.Очистить();
	Для каждого стр из ЗаказДоИзменения.Услуги цикл
		нстр = ТЗ1.Добавить();
		нстр.Поле = стр.Номенклатура.Код;
		нстр.Значение = стр.Цена;
	КонецЦикла;
	
	Для каждого стр из ЗаказПослеИзменения.Услуги цикл
		нстр = ТЗ2.Добавить();
		нстр.Поле = стр.Номенклатура.Код;
		нстр.Значение = стр.Цена;
	КонецЦикла;
	
	РасхожденияТабличныеЧастиWS(ТЗ1,ТЗ2,Расхождения,"Amenities","Price");
	
	//Услуги Количество
	ТЗ1.Очистить();
	ТЗ2.Очистить();
	Для каждого стр из ЗаказДоИзменения.Услуги цикл
		нстр = ТЗ1.Добавить();
		нстр.Поле = стр.Номенклатура.Код;
		нстр.Значение = стр.Количество;
	КонецЦикла;
	
	Для каждого стр из ЗаказПослеИзменения.Услуги цикл
		нстр = ТЗ2.Добавить();
		нстр.Поле = стр.Номенклатура.Код;
		нстр.Значение = стр.Количество;
	КонецЦикла;
	
	РасхожденияТабличныеЧастиWS(ТЗ1,ТЗ2,Расхождения,"Amenities","Quantity");
	//Реквизиты ТК
	ТЗ1.Очистить();
	ТЗ2.Очистить();
	для каждого стр из ЗаказДоИзменения.РеквизитыЗаказаТК цикл
		нстр =  ТЗ1.Добавить();
		ЗаполнитьЗначенияСвойств(нстр,стр);
	КонецЦикла;
	для каждого стр из ЗаказПослеИзменения.РеквизитыЗаказаТК цикл
		нстр =  ТЗ2.Добавить();
		ЗаполнитьЗначенияСвойств(нстр,стр);
	КонецЦикла;
	
	РасхожденияТабличныеЧастиWS(ТЗ1,ТЗ2,Расхождения,"ТК","");
	
	//РасхожденияТабличныеЧастиWS(ЗаказДоИзменения.Услуги.Выгрузить(,"Номенклатура,Количество,Цена"),ЗаказПослеИзменения.Услуги.Выгрузить(,"Номенклатура,Количество,Цена"),Расхождения,"Amenities");
	
	Для каждого стр из Расхождения цикл
		Изменение = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("www.yst.ru/im17", "Changes"));
		Изменение.Type=стр.Тип;
		Изменение.Item=стр.Элемент;
		Изменение.Attribute=стр.Реквизит;
		Изменение.OLD_VALUE=стр.Было;
		Изменение.NEW_VALUE=стр.Стало;
		Изменение.CHANGE_TYPE=стр.Действие;
		Изменения.Changes.Добавить(Изменение);
	КонецЦикла;
	
	Возврат Расхождения;
КонецФункции

процедура ПроверитьОстатки(Success,Ошибка,Подразделение,СписокНом,ТаблицаЗаказа,КонтрагентДляРезерваИМ)
	времяНачала=ТекущаяУниверсальнаяДатаВМиллисекундах();
	ЗапросОстатки = Новый Запрос;
	ЗапросОстатки.УстановитьПараметр("Подразделение", Подразделение);
	ЗапросОстатки.УстановитьПараметр("СписокЗаказа",СписокНом);
	СписокКонтрагентовОТХ = Новый СписокЗначений;
	СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);
	ЗапросОстатки.УстановитьПараметр("СписокКонтрагентовОТХ", СписокКонтрагентовОТХ);
	ЗапросОстатки.УстановитьПараметр("КонтрагентДляРезерваИМ", КонтрагентДляРезерваИМ);
	
	Если СокрЛП(Подразделение.Код) = "00005" Тогда  //Головное
		ЗапросОстатки.Текст="ВЫБРАТЬ
		                    |	А.Код,
		                    |	А.ОстатокНаСкладахИОТХ - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК СвободныйОстаток
		                    |ИЗ
		                    |	(ВЫБРАТЬ
		                    |		ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.Код, ТоварыНаОтветственномХраненииОстатки.Номенклатура.Код) КАК Код,
		                    |		ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервДляИМОстатки.КоличествоОстаток, 0) КАК ОстатокНаСкладахИОТХ,
		                    |		ЕСТЬNULL(ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура, ТоварыНаОтветственномХраненииОстатки.Номенклатура), РезервДляИМОстатки.Номенклатура) КАК Номенклатура
		                    |	ИЗ
		                    |		РегистрНакопления.ТоварыНаСкладах.Остатки(
		                    |				,
		                    |				НЕ Склад.ЗапретитьИспользование
		                    |					И НЕ Склад.Транзитный
		                    |					И Номенклатура В (&СписокЗаказа)) КАК ТоварыНаСкладахОстатки
		                    |			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
		                    |					,
		                    |					НЕ Склад.ЗапретитьИспользование
		                    |						И НЕ Склад.Транзитный
		                    |						И Номенклатура В (&СписокЗаказа)
		                    |						И Контрагент В (&СписокКонтрагентовОТХ)) КАК ТоварыНаОтветственномХраненииОстатки
		                    |			ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыНаОтветственномХраненииОстатки.Номенклатура
		                    |			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервДляИМ.Остатки(
		                    |					,
		                    |					Номенклатура В (&СписокЗаказа)
		                    |						И Подразделение = &Подразделение
		                    |						И КонтрагентДляРезерваИМ = &КонтрагентДляРезерваИМ) КАК РезервДляИМОстатки
		                    |			ПО ТоварыНаСкладахОстатки.Номенклатура = РезервДляИМОстатки.Номенклатура) КАК А
		                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
		                    |				,
		                    |				ЗаказПокупателя.Проверен
		                    |					И НЕ ЗаказПокупателя.Транзит
		                    |					И Номенклатура В (&СписокЗаказа)) КАК ЗаказыПокупателейОстатки
		                    |		ПО А.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура";
		
	Иначе
		
		ЗапросОстатки.Текст = "ВЫБРАТЬ
		                      |	А.Код,
		                      |	А.ОстатокНаСкладахИОТХ - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК СвободныйОстаток
		                      |ИЗ
		                      |	(ВЫБРАТЬ
		                      |		ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.Код, ТоварыНаОтветственномХраненииОстатки.Номенклатура.Код) КАК Код,
		                      |		ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервДляИМОстатки.КоличествоОстаток, 0) КАК ОстатокНаСкладахИОТХ,
		                      |		ЕСТЬNULL(ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура, ТоварыНаОтветственномХраненииОстатки.Номенклатура), РезервДляИМОстатки.Номенклатура) КАК Номенклатура
		                      |	ИЗ
		                      |		РегистрНакопления.ТоварыНаСкладах.Остатки(
		                      |				,
		                      |				НЕ Склад.ЗапретитьИспользование
		                      |					И Склад.Транзитный
		                      |					И Номенклатура В (&СписокЗаказа)
		                      |					И Склад.Подразделение = &Подразделение) КАК ТоварыНаСкладахОстатки
		                      |			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
		                      |					,
		                      |					НЕ Склад.ЗапретитьИспользование
		                      |						И Склад.Транзитный
		                      |						И Номенклатура В (&СписокЗаказа)
		                      |						И Контрагент В (&СписокКонтрагентовОТХ)
		                      |						И Склад.Подразделение = &Подразделение) КАК ТоварыНаОтветственномХраненииОстатки
		                      |			ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыНаОтветственномХраненииОстатки.Номенклатура
		                      |			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервДляИМ.Остатки(
		                      |					,
		                      |					Номенклатура В (&СписокЗаказа)
		                      |						И Подразделение = &Подразделение
		                      |						И КонтрагентДляРезерваИМ = &КонтрагентДляРезерваИМ) КАК РезервДляИМОстатки
		                      |			ПО ТоварыНаСкладахОстатки.Номенклатура = РезервДляИМОстатки.Номенклатура) КАК А
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
		                      |				,
		                      |				ЗаказПокупателя.Проверен
		                      |					И ЗаказПокупателя.Транзит
		                      |					И Номенклатура В (&СписокЗаказа)
		                      |					И ЗаказПокупателя.Подразделение = &Подразделение) КАК ЗаказыПокупателейОстатки
		                      |		ПО А.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура";
	КонецЕсли;
	
	Результат = ЗапросОстатки.Выполнить().Выгрузить();
	ВремяОперации = ТекущаяУниверсальнаяДатаВМиллисекундах()-времяНачала;
	
	//Ошибка = Ошибка+Символы.ПС+"Время проверки свободных остатков:"+ВремяОперации+"мс.";
	
	ДополнениеКОшибке = "";
	
	Для каждого СтрМассива ИЗ ТаблицаЗаказа Цикл
		Если Результат.Количество() = 0 тогда
			СтрМассива.КоличествоОстаток = 0;
			Success = Ложь;
		КонецЕсли;
		
		СтрокаРезультат = Результат.Найти(СтрМассива.Номенклатура);
		Если СтрокаРезультат = Неопределено Тогда
			СтрМассива.КоличествоОстаток = 0;
			Success = Ложь;
		Иначе
			СтрМассива.КоличествоОстаток = СтрокаРезультат.СвободныйОстаток;
			Если СтрокаРезультат.СвободныйОстаток < СтрМассива.Количество Тогда
				Success = Ложь;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ДополнитьСтрокуЯ(Знач Стр, Длина, Чем=" ", Режим = 0) Экспорт
	
	СимволовДополнить = Длина -  СтрДлина(Стр);
	Добавок = "";
	Для Н=1 по СимволовДополнить Цикл
		Добавок =	Добавок + Чем;
	КонецЦикла;
	Возврат ?(Режим=0, Добавок + Стр, Стр + Добавок);
	
КонецФункции

Функция СформироватьОплатуПлатежнымиКартами(Заказ,Эквайер,ДоговорЭквайринга, TransactionDateTime, ЭтоВозврат = ложь, Контрагент, Сумма, Комментарий = "") экспорт
	ДатаВремяОплатыКартой = ?(ТипЗНЧ(TransactionDateTime)=Тип("Строка"),TransactionDateTime,"");
	Если ДатаВремяОплатыКартой = "" тогда
		ДатаВремяОплатыКартой = ТекущаяДата();
	иначе
		Попытка
			ДатаВремяОплатыКартой = Дата(ДатаВремяОплатыКартой);
		Исключение
			ДатаВремяОплатыКартой = ТекущаяДата();
		КонецПопытки;
	КонецЕсли;
	
	Если ЭтоВозврат тогда
		ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю;
	иначе 
		ВидОперации=Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя;
	КонецЕсли;
	Запрос = новый Запрос;
	
	Если ЗначениеЗаполнено(Заказ) тогда
		
		Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
		              |	ОплатаОтПокупателяПлатежнойКартой.Ссылка КАК ОплатаКартой
		              |ИЗ
		              |	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
		              |ГДЕ
		              |	ОплатаОтПокупателяПлатежнойКартой.ДокументОснование = &ЗаказПокупателя
		              |	И ОплатаОтПокупателяПлатежнойКартой.ВидОперации = &ВидОперации
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Ссылка
		              |ИЗ
		              |	Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа
		              |ГДЕ
		              |	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Сделка = &ЗаказПокупателя
		              |	И ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Ссылка.ВидОперации = &ВидОперации";
	Иначе
		Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
		              |	ОплатаОтПокупателяПлатежнойКартой.Ссылка КАК ОплатаКартой
		              |ИЗ
		              |	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
		              |ГДЕ
		              |	ЛОЖЬ";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидОперации",ВидОперации);
	Запрос.УстановитьПараметр("Дата",Заказ.Дата);
	Запрос.УстановитьПараметр("ЗаказПокупателя",Заказ);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("Сумма",Сумма);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Количество()>0 тогда //оплата есть
		Пока Рез.Следующий() цикл
			Возврат Рез.ОплатаКартой;
		КонецЦикла;	
	иначе
		Если ЗначениеЗаполнено(Заказ) тогда
			ДокОплата = Документы.ОплатаОтПокупателяПлатежнойКартой.СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(ДокОплата,Заказ.Товары[0]);
			ЗаполнитьЗначенияСвойств(ДокОплата,Заказ);
			
			ДокОплата.Дата = ДатаВремяОплатыКартой;
			ДокОплата.ОтражатьВУправленческомУчете=истина;
			ДокОплата.Статус = Перечисления.СтатусыОплатПлатежнойКартой.НеПодтвержден;
			
			ДокОплата.ВидОперации=ВидОперации;	  
			//ДокОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.БезналПлатежнаяКарта;
			ДокОплата.ДокументОснование = Заказ;
			
			ДокОплата.Эквайрер  = Эквайер; 
			ДокОплата.ДоговорЭквайринга = ДоговорЭквайринга;
			
			ДокОплата.ДоговорВзаиморасчетовЭквайрера  = ДокОплата.Эквайрер.ОсновнойДоговорКонтрагента;//ДокОплата.ДоговорЭквайринга.ДоговорВзаиморасчетов;
			ДокОплата.ВидОплаты =  ДокОплата.ДоговорЭквайринга.ТарифыЗаРасчетноеОбслуживание[0].ВидОплаты;
			ДокОплата.ПроцентТорговойУступки = ДокОплата.ДоговорЭквайринга.ТарифыЗаРасчетноеОбслуживание[0].ПроцентТорговойУступки;
			ДокОплата.СуммаТорговойУступки = Заказ.СуммаДокумента * ДокОплата.ПроцентТорговойУступки / 100;
			ДокОплата.Комментарий = Комментарий;
			
			ДокОплата.ПостОплата = УжеЕстьРеализацияПоЗаказу(Заказ);
			
			ТЧ = ДокОплата.РасшифровкаПлатежа;
			нстр = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(нстр,Заказ);
			ЗаполнитьЗначенияСвойств(нстр,Заказ.Товары[0]);
			
			Если ЭтоВозврат тогда
				ДокОплата.УстановитьНовыйНомер("В");
			КонецЕсли;
			
			нстр.Сделка = Заказ;
			нстр.СуммаПлатежа = Заказ.СуммаДокумента;
			нстр.СуммаВзаиморасчетов = Заказ.СуммаДокумента;
			ПересчитатьСуммуНДС(нстр);
			ДокОплата.Записать(РежимЗаписиДокумента.Проведение);
		иначе
			ДокОплата = Документы.ОплатаОтПокупателяПлатежнойКартой.СоздатьДокумент();
			
			ДокОплата.Организация = Справочники.Организации.НайтиПоКоду("00001");
			ДокОплата.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");

			ДокОплата.Контрагент   =  Контрагент;
			ДокОплата.КратностьДокумента = 1;
			ДокОплата.КурсДокумента = 1;
			ДокОплата.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
			ДокОплата.СуммаДокумента = Сумма;
			
			ДокОплата.Дата = ДатаВремяОплатыКартой;
			ДокОплата.ОтражатьВУправленческомУчете=истина;
			ДокОплата.Статус = Перечисления.СтатусыОплатПлатежнойКартой.НеПодтвержден;
			
			ДокОплата.ВидОперации=ВидОперации;	  
			//ДокОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.БезналПлатежнаяКарта;
						
			ДокОплата.Эквайрер  = Эквайер; 
			ДокОплата.ДоговорЭквайринга = ДоговорЭквайринга;
			
			ДокОплата.ДоговорВзаиморасчетовЭквайрера  = ДокОплата.Эквайрер.ОсновнойДоговорКонтрагента;//ДокОплата.ДоговорЭквайринга.ДоговорВзаиморасчетов;
			ДокОплата.ВидОплаты =  ДокОплата.ДоговорЭквайринга.ТарифыЗаРасчетноеОбслуживание[0].ВидОплаты;
			ДокОплата.ПроцентТорговойУступки = ДокОплата.ДоговорЭквайринга.ТарифыЗаРасчетноеОбслуживание[0].ПроцентТорговойУступки;
			ДокОплата.СуммаТорговойУступки = Заказ.СуммаДокумента * ДокОплата.ПроцентТорговойУступки / 100;
			ДокОплата.Комментарий = Комментарий;
			
			ТЧ = ДокОплата.РасшифровкаПлатежа;
			нстр = ТЧ.Добавить();
			нстр.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			нстр.КурсВзаиморасчетов = 1;
			нстр.СуммаПлатежа = Сумма;
			нстр.КратностьВзаиморасчетов = 1;
			нстр.СуммаВзаиморасчетов = Сумма;
			//12.12.18 Смирнов Станка ндс 20%
			//нстр.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			пДата = ?(ЗначениеЗаполнено(ДокОплата.Дата), ДокОплата.Дата, ТекущаяДата());
		    нстр.СтавкаНДС = СтавкаНДСнаДату(пДата);
			
			Если ЭтоВозврат тогда
				ДокОплата.УстановитьНовыйНомер("В");
			КонецЕсли;
			
			ПересчитатьСуммуНДС(нстр);
			ДокОплата.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Возврат ДокОплата.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьКИ(Контрагент,Customer)
	ЗаписатьАдрес(Контрагент,Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,Customer.UR_ADDRESS);
	ЗаписатьАдрес(Контрагент,Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,Customer.Fact_ADDRESS);
КонецПроцедуры

Процедура ЗаписатьАдрес(Ссылка,ВидКИ,Адрес)
	//запишем контактную инфу
	//Запишем адрес в контактную инф
	//попытка
	регСв = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	регСв.Объект = Ссылка;
	регСв.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	регСв.Вид = ВидКИ; //Адрес заказа
	регСв.Прочитать();
	
	типДома=неопределено;
	дом="";
	
	Если ТипЗНЧ(Адрес.VLAD)=Тип("Строка")тогда
		Если СокрЛП(Адрес.VLAD)<>"" тогда 
			дом=СокрЛП(Адрес.VLAD);
		КонецЕсли;  
	КонецЕсли;
	
	Если ТипЗНЧ(Адрес.HOUSE)=Тип("Строка")тогда
		Если СокрЛП(Адрес.HOUSE)<>"" тогда 
			дом=СокрЛП(Адрес.HOUSE);
		КонецЕсли;
	КонецЕсли;
	
	типКвартиры=неопределено;
	Квартира="";
	
	Если ТипЗНЧ(Адрес.OFFICE)=Тип("Строка")тогда
		Если СокрЛП(Адрес.OFFICE)<>"" тогда
			типКвартиры = "офис";
			Квартира= СокрЛП(Адрес.OFFICE);
		КонецЕсли;  
	КонецЕсли;
	
	Если ТипЗНЧ(Адрес.FLAT)=Тип("Строка")тогда
		Если СокрЛП(Адрес.FLAT)<>"" тогда 
			типКвартиры = "квартира";
			Квартира= СокрЛП(Адрес.FLAT);
		КонецЕсли;
	КонецЕсли;
	
	ТипКорпуса=неопределено;
	корпус="";
	
	Если ТипЗНЧ(Адрес.STR)=Тип("Строка")тогда
		Если СокрЛП(Адрес.STR)<>"" тогда 
			ТипКорпуса="строение";
			корпус = СокрЛП(Адрес.STR);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗНЧ(Адрес.KORPUS)=Тип("Строка")тогда
		Если СокрЛП(Адрес.KORPUS)<>"" тогда 
			ТипКорпуса="корпус";
			корпус = СокрЛП(Адрес.KORPUS);
		КонецЕсли;
	КонецЕсли;
	
	Поле1 = ?(ТипЗНЧ(Адрес.INDEX)=Тип("Строка"),СокрЛП(Адрес.INDEX),"");
	Поле2 = ?(ТипЗНЧ(Адрес.Region)=Тип("Строка"),СокрЛП(Адрес.Region),"");
	Поле3 = ?(ТипЗНЧ(Адрес.District)=Тип("Строка"),СокрЛП(Адрес.District),"");
	Поле4 = ?(ТипЗНЧ(Адрес.CITY)=Тип("Строка"),СокрЛП(Адрес.CITY),"");
	Поле5 = ?(ТипЗНЧ(Адрес.Settlement)=Тип("Строка"),СокрЛП(Адрес.Settlement),"");
	Поле6 = ?(ТипЗНЧ(Адрес.STREET)=Тип("Строка"),СокрЛП(Адрес.STREET),""); 
	Поле7 = Дом;
	Поле8 = Корпус;
	Поле9 = Квартира;
	Поле10 = ""; //Координаты
	
	Комментарий = ?(ТипЗНЧ(Адрес.Dop_inf)=Тип("Строка"),СокрЛП(Адрес.Dop_inf),"");
	//Представление=УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(регСв);
	
	Если (регСв.Поле1 <> Поле1 или  
		регСв.Поле2 <> Поле2 или  
		регСв.Поле3 <> Поле3 или  
		регСв.Поле4 <> Поле4 или
		регСв.Поле5 <> Поле5 или
		регСв.Поле6 <> Поле6 или  
		регСв.Поле7 <> Поле7 или  
		регСв.Поле8 <> Поле8 или  
		регСв.Поле9 <> Поле9 или
		//04.03.19 Смирнов Задача № 56847
		(регСв.ЗначениеПоУмолчанию = ложь и ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)) 
		и СокрЛП(Поле1)+СокрЛП(Поле2)+СокрЛП(Поле3)+СокрЛП(Поле4)+СокрЛП(Поле5)+СокрЛП(Поле6)+СокрЛП(Поле7)+СокрЛП(Поле8)+СокрЛП(Поле9)<>""
		тогда
		ПерезаписатьКИ = истина;
	иначе 
		ПерезаписатьКИ =ложь;
	конецЕсли;
	
	Если ПерезаписатьКИ тогда
		регСв.Объект = Ссылка;
		регСв.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		регСв.Вид = ВидКИ; 
		
		регСв.Поле1 = Поле1;
		регСв.Поле2 = Поле2;
		регСв.Поле3 = Поле3;
		регСв.Поле4 = Поле4;
		регСв.Поле5 = Поле5;
		регСв.Поле6 = Поле6; 
		регСв.Поле7 = Поле7;
		регСв.Поле8 = Поле8;
		регСв.Поле9 = Поле9;
		регСв.Поле10 = Поле10; 
		регСв.Комментарий = Комментарий; 
		регСв.Представление=ПолучитьПредставлениеАдреса(регСв);
		//04.03.19 Смирнов Задача № 56847
		Если ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента тогда
			 регСв.ЗначениеПоУмолчанию = истина;
		КонецЕсли;
		регСв.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПривестиКраткоеНаименованиеКТребованиямЯШТ(Наименование)
	НовоеНаименование = " "+ВРЕГ(Наименование);
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"""","");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"/","");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"\","");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"«","");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"»","");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"“","");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"”","");
	
	Если Найти(НовоеНаименование," ООО ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," ООО ","");
		НовоеНаименование = " "+ НовоеНаименование+" ООО";
	КонецЕсли;
	
	Если Найти(НовоеНаименование," ОАО ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," ОАО ","");
		НовоеНаименование = " "+ НовоеНаименование+" ОАО";
	КонецЕсли;
	
	Если Найти(НовоеНаименование," OOO ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," OOO ","");
		НовоеНаименование=" "+ НовоеНаименование+" ООО";
	КонецЕсли;
	Если Найти(НовоеНаименование," ЗАО ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," ЗАО ","");
		НовоеНаименование=" "+ НовоеНаименование+" ЗАО";
	КонецЕсли;
	Если Найти(НовоеНаименование," ИП ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," ИП ","");
		НовоеНаименование=" "+ НовоеНаименование+" ИП ";
	КонецЕсли;
	Если Найти(НовоеНаименование," ПАО ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," ПАО ","");
		НовоеНаименование=" "+ НовоеНаименование+" ПАО";
	КонецЕсли;
	Если Найти(НовоеНаименование," АО ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," АО ","");
		НовоеНаименование=" "+ НовоеНаименование+" АО";
	КонецЕсли;	 	 
	Если Найти(НовоеНаименование," МУП ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," МУП ","");
		НовоеНаименование=" "+ НовоеНаименование+" МУП";
	КонецЕсли;
	Если Найти(НовоеНаименование, "НПО ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," НПО ","");
		НовоеНаименование=" "+ НовоеНаименование+" НПО";
	КонецЕсли;
	Если Найти(НовоеНаименование," ФИЛИАЛ ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," ФИЛИАЛ ","");
		НовоеНаименование=" "+ НовоеНаименование+" ФИЛИАЛ";
	КонецЕсли;
	НовоеНаименование = СтрЗаменить(НовоеНаименование," ИП ИП "," ИП");
	
	
	НовоеНаименование = СокрЛП(НовоеНаименование);
	Возврат НовоеНаименование;	
КонецФункции

Функция СоздатьНовыйДоговор(Контрагент,Ответственный2,Подразделение, МожноБезПредоплаты = ложь)
	Ответственный = Ответственный2;
	Если Ответственный=неопределено тогда
		Ответственный = Справочники.Пользователи.НайтиПоКоду("Левченко Е.");
	КонецЕсли;	
	НовыйДоговор=Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НовыйДоговор.Организация= Справочники.Организации.НайтиПоКоду("00001");
	НовыйДоговор.Наименование="Договор предоплаты ИМ";
	НовыйДоговор.Владелец=Контрагент;
	НовыйДоговор.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
	НовыйДоговор.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	НовыйДоговор.ВалютаВзаиморасчетов=Справочники.Валюты.НайтиПоКоду("643");
	
	Если МожноБезПредоплаты тогда
		НовыйДоговор.Наименование="Договор отсрочки ИМ";
		НовыйДоговор.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00004"); //отсрочка
		НовыйДоговор.ДопустимоеЧислоДнейЗадолженности = 7;
		НовыйДоговор.ДопустимаяСуммаЗадолженности = 100000;
	иначе
		НовыйДоговор.Наименование="Договор предоплаты ИМ";
		НовыйДоговор.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00001"); //предоплата
	КонецЕсли;

	НовыйДоговор.ОтветственноеЛицо = Ответственный;
	
	НовыйДоговор.КонтрагентДляРезерваИМ = Справочники.Контрагенты.НайтиПоКоду("П004703"); //Резерв для И;
	НовыйДоговор.Записать();
	//сразу же создадим записи в РС ДоговорыПоТоварнымГруппам что бы в филиалах могли видеть заказы
	ДобавитьДоговорыПоТоварнымГруппам(НовыйДоговор.Ссылка,Контрагент,Подразделение);
	
	Возврат НовыйДоговор.Ссылка;
КонецФункции

Процедура ДобавитьДоговорыПоТоварнымГруппам(Договор,Контрагент,Подразделение)
	Если Подразделение.Код = "00005" тогда  //Для головного записывать не надо
	Иначе
		Попытка
			МенеджерЗаписи = РегистрыСведений.ДоговорыПоТоварнымГруппам.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВидТовара = Перечисления.ВидыТоваров.Аксессуары;
			МенеджерЗаписи.Договор = Договор;
			МенеджерЗаписи.Контрагент = Контрагент;
			МенеджерЗаписи.Подразделение = Подразделение; 
			МенеджерЗаписи.КлиентКОЛЕСАТУТ = ИСТИНА; 
			МенеджерЗаписи.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

процедура ОбновитьРеквизитТК(ТЧ,Реквизит, Значение)
	отбор = новый структура("Поле");
	отбор.Поле=Реквизит;
	НайденныеСтроки = тч.НайтиСтроки(отбор);
	Если НайденныеСтроки.Количество()>0 тогда
		Для каждого стр из НайденныеСтроки цикл
			стр.Значение = Значение;
		КонецЦикла;
	иначе
		нстр = тч.Добавить();
		нстр.Поле = Реквизит;
		нстр.Значение = Значение;
	КонецЕсли;
КонецПроцедуры

Функция РасхожденияТабличныеЧастиWS(ТЗ1,ТЗ2,Расхождения,Тип,Реквизит)
	БылиИзменения = ложь;
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("тзБыло",ТЗ1);
	Запрос.УстановитьПараметр("тзСтало",ТЗ2);
	Запрос.Текст="ВЫБРАТЬ
	             |	тзБыло.Поле,
	             |	тзБыло.Значение
	             |ПОМЕСТИТЬ втБыло
	             |ИЗ
	             |	&тзБыло КАК тзБыло
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	тзСтало.Поле,
	             |	тзСтало.Значение
	             |ПОМЕСТИТЬ втСтало
	             |ИЗ
	             |	&тзСтало КАК тзСтало
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(втБыло.Поле, втСтало.Поле) КАК Поле,
	             |	ЕСТЬNULL(втБыло.Значение, """") КАК ЗначениеБыло,
	             |	ЕСТЬNULL(втСтало.Значение, """") КАК ЗначениеСтало,
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(втБыло.Значение, """") = """"
	             |			ТОГДА ""ADD""
	             |		КОГДА ЕСТЬNULL(втСтало.Значение, """") = """"
	             |			ТОГДА ""DELETE""
	             |		ИНАЧЕ ""CHANGE""
	             |	КОНЕЦ КАК Действие2
	             |ПОМЕСТИТЬ вт
	             |ИЗ
	             |	втБыло КАК втБыло
	             |		ПОЛНОЕ СОЕДИНЕНИЕ втСтало КАК втСтало
	             |		ПО втБыло.Поле = втСтало.Поле
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	вт.Поле,
	             |	вт.ЗначениеБыло,
	             |	вт.ЗначениеСтало,
	             |	вт.Действие2
	             |ИЗ
	             |	вт КАК вт
	             |ГДЕ
	             |	вт.ЗначениеБыло <> вт.ЗначениеСтало";
				 Рез = Запрос.Выполнить().Выбрать();
				 
				 Пока Рез.Следующий() цикл
					 БылиИзменения = истина;
					 нстр = Расхождения.Добавить();
					 Нстр.Тип = Тип;
					 нстр.Реквизит = Реквизит;
					 нстр.Элемент = рез.Поле;
					 нстр.Действие = Рез.Действие2;
					 нстр.Было = Рез.ЗначениеБыло;
					 нстр.Стало = Рез.ЗначениеСтало;
				 КонецЦикла;
				 Возврат БылиИзменения;
конецФункции

Функция УжеЕстьРеализацияПоЗаказу(Заказ)
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ПродажиОбороты.КоличествоОборот,
	             |	ПродажиОбороты.ЗаказПокупателя
	             |ИЗ
	             |	РегистрНакопления.Продажи.Обороты(&НачПериод, , , ЗаказПокупателя = &Заказ) КАК ПродажиОбороты";
	Запрос.УстановитьПараметр("НачПериод",ДобавитьМесяц(Заказ.Дата,-1));
	Запрос.УстановитьПараметр("Заказ",Заказ);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Количество() > 0 тогда
		возврат истина;
	иначе
		возврат ложь;
	КонецЕсли;
КонецФункции

Функция СозданиеУжеЕстьТакойЗаказ(OrderProperties) экспорт
	РезультатПроверки = новый структура("ЕстьТакой, РезОперации");
	РезультатПроверки.ЕстьТакой=ложь;
	
	Если OrderProperties.inOrderNumber = "FRANCH" тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	времяНачала=ТекущаяУниверсальнаяДатаВМиллисекундах();
	URL = "www.yst.ru/im17";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProducts"));
	
	Success = Истина;
	OrderNumber = "";
	OrderGUID = "";
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Ссылка.Номер,
	|	ЗаказПокупателяТовары.НомерСтроки,
	|	ЗаказПокупателяТовары.Количество,
	|	ЗаказПокупателяТовары.Номенклатура.Код,
	|	ЗаказПокупателяТовары.Цена,
	|	ЗаказПокупателяТовары.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗаказПокупателя.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|	ГДЕ
	//|		ЗаказПокупателя.Проведен и
	//|		И ЗаказПокупателя.Контрагент = &Контрагент и
	|		ЗаказПокупателя.НомерВходящегоДокумента = &НомерВходящегоДокумента и
	|		 ЗаказПокупателя.Дата >= &НачалоГода) КАК Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|		ПО Заказ.Ссылка = ЗаказПокупателяТовары.Ссылка";
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", КолесаТут.ПолучитьНомерИМ(СокрЛП(OrderProperties.inOrderNumber)));
	Запрос.УстановитьПараметр("НачалоГода",НачалоГода(ТекущаяДата()));
	Рез=Запрос.Выполнить().Выбрать();
	ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
	Пока Рез.Следующий() Цикл
		
		Success = ложь;
		Ошибка = "Уже есть такой заказ.";
		OrderNumber = СокрЛП(Рез.Номер);
		OrderGUID = Строка(Рез.Ссылка.УникальныйИдентификатор());
		
	КонецЦикла;
	
	Если Рез.Количество()>0 тогда
		
		РезультатОперации.Products		 = Товары;
		РезультатОперации.Success		 = Success;
		РезультатОперации.OrderNumber	 = OrderNumber;
		РезультатОперации.OrderGUID		 = OrderGUID;
		РезультатОперации.Error			 = Ошибка;
		
		РезультатПроверки.ЕстьТакой=Истина;
		РезультатПроверки.РезОперации = РезультатОперации;
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
КонецФункции

Функция ПолучитьДоговорОТХ(Контрагент)
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
	             |ИЗ
	             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	             |ГДЕ
	             |	ДоговорыКонтрагентов.Владелец = &Владелец
	             |	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(справочник.ТипыДоговоров.ПеремещениеОТХ)";
				 Запрос.УстановитьПараметр("Владелец", Контрагент);
				 Рез = Запрос.Выполнить().Выбрать();
				 
				 Пока Рез.Следующий() Цикл
					 Возврат Рез.ДоговорКонтрагента;
				 КонецЦикла;
				 
				 Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
КонецФункции

процедура ПересчитатьЦеныПоПравиламКонтрагента(Контрагент, ДоговорКонтрагента, ТаблицаЗаказа)
	//ТаблицаЗаказа.Колонки.Добавить("Номенклатура");
	//ТаблицаЗаказа.Колонки.Добавить("НоменклатураСпр");
	//ТаблицаЗаказа.Колонки.Добавить("Количество");
	//ТаблицаЗаказа.Колонки.Добавить("КоличествоОстаток");
	//ТаблицаЗаказа.Колонки.Добавить("Цена");
	
	СписокНом = Новый СписокЗначений;
	
	Для каждого стр из ТаблицаЗаказа Цикл
		 СписокНом.Добавить(стр.НоменклатураСпр);
	КонецЦикла;
	
	ТабЗнач1  = Новый ТаблицаЗначений;
	ТабЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом, ТекущаяДата());
	
	//+++ 10.09.2015 - доп.условия на предоплатные договора - по типу!
	услПредоплатногоДоговора = (ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00001")
	или ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ПредоплатаПоСчетам //+++14.08.2017
	или ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФакторингПредоплата);//22.05.2017
	
	Если ТипЗнч(ТабЗнач1) = Тип("Строка") Тогда // нет политики ценообразования документом
		табЗнач1  = новый ТаблицаЗначений;
		табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом); //из регистра сведений
	КонецЕсли;	
	
	Для каждого стр1 из ТаблицаЗаказа цикл
		стр2 = табЗнач1.найти(стр1.НоменклатураСпр, "Номенклатура");
		стр1Цена = стр1.Цена;
		Если стр2 = Неопределено Тогда
			стр2МинимальнаяЦена = 0;
		Иначе
			//+++ 10.09.2015 Цена ПРЕДОПЛАТНАЯ с доп.скидкой
			Если услПредоплатногоДоговора Тогда
				попытка
					стр2МинимальнаяЦена = стр2.ЦенаСоСкидкойПредоплаты; 
				исключение // если экспортные цены или из Политики... то там нет поля ЦенаСоСкидкойПредоплаты	
					стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
				КонецПопытки;	
			Иначе // как было
				стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
			КонецЕсли;
		КонецЕсли;
		
		//-------------------------------
		Если стр1Цена<>стр2МинимальнаяЦена Тогда
			стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
