
Функция СравнитьТаблицыНаборовЗаписей(ТаблицаЗначений1, ТаблицаЗначений2) Экспорт

	Если ТипЗнч(ТаблицаЗначений1) <> Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаЗначений2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТаблицаЗначений1.Количество() <> ТаблицаЗначений2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли; 

	Если ТаблицаЗначений1.Колонки.Количество() <> ТаблицаЗначений2.Колонки.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим поля
	Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
		Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
		Если ТаблицаЗначений1.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	// Проверим записи
	Для каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы2 = ТаблицаЗначений2.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы2.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ТаблицаЗначений2 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы1 = ТаблицаЗначений1.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы1.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // СравнитьТаблицыЗначений()

/////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАНИЯ МЕХАНИЗМА НАСТРОЙКИ ПРАВ ДОСТУПА

Процедура ПрочитатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка) Экспорт

	// Снимем все отборы
	Для каждого Отбор Из ПраваДоступаПользователей.Отбор Цикл
		Отбор.Использование = Ложь;
	КонецЦикла;
	
	Если ЗначениеНеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		ПраваДоступаПользователей.Отбор.Пользователь.Значение = Ссылка;
		ПраваДоступаПользователей.Отбор.Пользователь.Использование = Истина;
	Иначе
		ПраваДоступаПользователей.Отбор.ОбъектДоступа.Значение = Ссылка;
		ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Истина;
	КонецЕсли; 
	ПраваДоступаПользователей.Прочитать();
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		ИндексСтроки = 0;
		Пока ИндексСтроки <= ПраваДоступаПользователей.Количество() - 1 Цикл
			Если ПраваДоступаПользователей[ИндексСтроки].ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
				ПраваДоступаПользователей.Удалить(ИндексСтроки);
			Иначе
				ИндексСтроки = ИндексСтроки + 1;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаписатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка, Отказ) Экспорт

	Если НЕ Отказ Тогда
	
		// Сравним наборы записей
		ЭталонныйНабор = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			ЭталонныйНабор.Отбор.Пользователь.Значение = Ссылка;
			ЭталонныйНабор.Отбор.Пользователь.Использование = Истина;
		Иначе
			ЭталонныйНабор.Отбор.ОбъектДоступа.Значение = Ссылка;
			ЭталонныйНабор.Отбор.ОбъектДоступа.Использование = Истина;
		КонецЕсли; 
		ЭталонныйНабор.Прочитать();
		
		Для каждого ЗаписьНабора Из ПраваДоступаПользователей Цикл
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ЗаписьНабора.Пользователь = Ссылка;
			Иначе
				ЗаписьНабора.ОбъектДоступа = Ссылка;
			КонецЕсли; 
		КонецЦикла; 
			
		Если НЕ СравнитьТаблицыНаборовЗаписей(ЭталонныйНабор.Выгрузить(), ПраваДоступаПользователей.Выгрузить()) Тогда
		
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ПраваДоступаПользователей.Отбор.Пользователь.Значение = Ссылка;
			Иначе
				ПраваДоступаПользователей.Отбор.ОбъектДоступа.Значение = Ссылка;
			КонецЕсли; 
						
			Попытка
				ПраваДоступаПользователей.Записать();
			Исключение
				#Если Клиент тогда
				СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Ссылка) + """ не записан. Не записаны права доступа к объекту."));
				#КонецЕсли
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
			ПрочитатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка);

		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьЗначенияДляНовойСтрокиПравДоступа(Элемент, НоваяСтрока, ЭтоГруппа = Ложь) Экспорт

	Если НоваяСтрока И Элемент.ТекущиеДанные <> Неопределено И НЕ ЗначениеНеЗаполнено(Элемент.ОтборСтрок.ОбластьДанных.Значение) Тогда
		Элемент.ТекущиеДанные.ОбластьДанных = Элемент.ОтборСтрок.ОбластьДанных.Значение;
		Если ЭтоГруппа Тогда
			Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных;
		Иначе
			Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ СОБЫТИЯ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМ

#Если Клиент Тогда

Процедура ПриВыводеСтрокиПраваДоступа(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт

	ОформлениеСтроки.Ячейки.Чтение.УстановитьФлажок(Истина);
	ОформлениеСтроки.Ячейки.Запись.ОтображатьТекст = Ложь;

КонецПроцедуры

Процедура УстановитьОтборНаОбластьДанных(Элемент, ЭлементФормыПраваДоступаПользователей) Экспорт

	Если ЗначениеНеЗаполнено(Элемент.ТекущиеДанные) Тогда
		ЭлементФормыПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Значение = Перечисления.НаборПравПользователей.ПустаяСсылка();
	Иначе
		ЭлементФормыПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Значение = Элемент.ТекущиеДанные;
	КонецЕсли; 

КонецПроцедуры

Процедура ПроверкаПеретаскиванияВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("РегистрСведенийЗапись.ПраваДоступаПользователей") И Строка <> Неопределено Тогда
		Если Строка = ПараметрыПеретаскивания.Значение.ОбластьДанных
		 ИЛИ ПараметрыПеретаскивания.Значение.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Иначе
			Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Перемещение
			   И ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Копирование Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли; 

КонецПроцедуры

Функция ПеретаскиваниеВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, ПраваДоступаПользователей, МодифицированностьФормы) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("РегистрСведенийЗапись.ПраваДоступаПользователей") И Строка <> Неопределено Тогда
		Если Строка = ПараметрыПеретаскивания.Значение.ОбластьДанных
		 ИЛИ ПараметрыПеретаскивания.Значение.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Иначе
			Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
				ПараметрыПеретаскивания.Значение.ОбластьДанных = Строка;
			ИначеЕсли ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
				НоваяЗапись = ПраваДоступаПользователей.Добавить();
				НоваяЗапись.Пользователь                                        = ПараметрыПеретаскивания.Значение.Пользователь;
				НоваяЗапись.ОбластьДанных                                       = Строка;
				НоваяЗапись.ОбъектДоступа                                       = ПараметрыПеретаскивания.Значение.ОбъектДоступа;
				НоваяЗапись.ВидНаследованияПравДоступаИерархическихСправочников = ПараметрыПеретаскивания.Значение.ВидНаследованияПравДоступаИерархическихСправочников;
				НоваяЗапись.Запись                                              = ПараметрыПеретаскивания.Значение.Запись;
			Иначе
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Отмена Тогда
		МодифицированностьФормы = Истина;
	КонецЕсли; 

КонецФункции

#КонецЕсли

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ НАСЛЕДСТВЕННОСТЬ ПРАВ ДОСТУПА ИЕРАРХИЧЕСКИХ СПРАВОЧНИКОВ

Функция ПроверитьНеобходимостьПереписыватьПраваДоступаДляПодчиненныхЭлементов(Ссылка, ПраваДоступаПользователей) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
	|
	|ГДЕ
	|	ПраваДоступаПользователей.ОбъектДоступа = &Ссылка
	|	И
	|	ПраваДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников <> &ТолькоДляТекущегоПрава
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТолькоДляТекущегоПрава", Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	
	ТаблицаНаборИзБД = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПравДоступаПользователей = ПраваДоступаПользователей.Выгрузить();
	ИндексСтроки = 0;
	Пока 1 = 1 Цикл
		Если ИндексСтроки > ТаблицаПравДоступаПользователей.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаПравДоступаПользователей[ИндексСтроки];
		Если СтрокаТаблицы.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава Тогда
			ТаблицаПравДоступаПользователей.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла; 
	
	Возврат НЕ СравнитьТаблицыНаборовЗаписей(ТаблицаНаборИзБД, ТаблицаПравДоступаПользователей);
	
КонецФункции

Процедура УстановитьПраваДоступаДляПодчиненныхЭлементов(Ссылка, ИмяСправочника, Отказ) Экспорт

	// Теперь перепишем все записи у подчиненных элементов
	ШапкаОшибки = "Объект " + Ссылка + " не записан!";
	
	ВыборкаПодчиненных = Справочники[ИмяСправочника].Выбрать(Ссылка);
	Пока ВыборкаПодчиненных.Следующий() Цикл
	
		НаборПодчиненногоОбъекта = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
		НаборПодчиненногоОбъекта.Отбор.ОбъектДоступа.Значение = ВыборкаПодчиненных.Ссылка;
		НаборПодчиненногоОбъекта.Отбор.ОбъектДоступа.Использование = Истина;
		НаборПодчиненногоОбъекта.Прочитать();
		
		ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(НаборПодчиненногоОбъекта, ВыборкаПодчиненных.Родитель, ВыборкаПодчиненных.Ссылка);
		
		Попытка
			НаборПодчиненногоОбъекта.Записать();
		Исключение
			
			#Если Клиент тогда
			СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаОшибки);
			#КонецЕсли
		
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	
		УстановитьПраваДоступаДляПодчиненныхЭлементов(ВыборкаПодчиненных.Ссылка, ИмяСправочника, Отказ);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(ПраваДоступаПользователей, Родитель, ОбъектДоступа, ТаблицаНаборДляЗаполнения = Неопределено) Экспорт

	//Если ЗначениеНеЗаполнено(Родитель) И ТаблицаНаборДляЗаполнения = Неопределено Тогда
	//	Возврат;
	//КонецЕсли; 
	
	Если ТипЗнч(ТаблицаНаборДляЗаполнения) <> Тип("ТаблицаЗначений") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
		|
		|ГДЕ
		|	ПраваДоступаПользователей.ОбъектДоступа = &Родитель
		|	И
		|	ПраваДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников <> &ТолькоДляТекущегоПрава
		|";
		
		Запрос.УстановитьПараметр("Родитель", Родитель);
		Запрос.УстановитьПараметр("ТолькоДляТекущегоПрава", Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
		
		ТаблицаНаборЗаписейРодителяДляПотомков = Запрос.Выполнить().Выгрузить();
	
	Иначе
		
		ТаблицаНаборЗаписейРодителяДляПотомков = ТаблицаНаборДляЗаполнения;
		
	КонецЕсли;
	
	ТаблицаПравДоступа = ПраваДоступаПользователей.Выгрузить();
	
	// Удалим старые унаследованные записи
	ИндексСтроки = 0;
	Пока 1 = 1 Цикл
		Если ИндексСтроки > ТаблицаПравДоступа.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаПравДоступа[ИндексСтроки];
		Если СтрокаТаблицы.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
			ТаблицаПравДоступа.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла; 
	
	// Теперь найдем строки с такими же измерениями и заменим их, а при необходимости добавим новые
	Для каждого Запись Из ТаблицаНаборЗаписейРодителяДляПотомков Цикл
		ДублиСтрок = ТаблицаПравДоступа.НайтиСтроки(Новый Структура("Пользователь, ОбластьДанных", Запись.Пользователь, Запись.ОбластьДанных));
		Если ДублиСтрок.Количество() > 0 Тогда
			Для каждого СтрокаТаблицы Из ДублиСтрок Цикл
				ТаблицаПравДоступа.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли; 
		НоваяСтрока = ТаблицаПравДоступа.Добавить();
		НоваяСтрока.Пользователь                                        = Запись.Пользователь;
		НоваяСтрока.ОбластьДанных                                       = Запись.ОбластьДанных;
		НоваяСтрока.ОбъектДоступа                                       = ОбъектДоступа;
		НоваяСтрока.Запись                                              = Запись.Запись;
		НоваяСтрока.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя;
	КонецЦикла;
	
	ПраваДоступаПользователей.Загрузить(ТаблицаПравДоступа);
	
КонецПроцедуры

Функция ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступа() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	Возврат СписокПеречисления;

КонецФункции

Функция ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступаЭлемента() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	Возврат СписокПеречисления;

КонецФункции

Функция ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступаГруппы() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	Возврат СписокПеречисления;

КонецФункции

Функция ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступаВФормеПользователя(ОбъектДоступа) Экспорт

	СписокПеречисления = Новый СписокЗначений;
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектДоступа)) Тогда
		Если ЗначениеНеЗаполнено(ОбъектДоступа) Тогда
			СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
		Иначе
			Если ОбъектДоступа.Метаданные().Иерархический Тогда
				Если ОбъектДоступа.Метаданные().ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
					Если ОбъектДоступа.ЭтоГруппа Тогда
						СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
					Иначе
						СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
					КонецЕсли; 
				Иначе
					СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
					СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
				КонецЕсли; 
			Иначе
				СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	КонецЕсли; 
	Возврат СписокПеречисления;

КонецФункции

Процедура ОткрытьФормуРодителяПравообладателя(ЗаписьНабора, Родитель, ФормаВладелец) Экспорт

	НайденныйРодитель = ПолучитьРодителяПравообладателя(ЗаписьНабора, Родитель);
	
	Если НЕ ЗначениеНеЗаполнено(НайденныйРодитель) Тогда
		НайденныйРодитель.ПолучитьФорму(, ФормаВладелец).Открыть();
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьРодителяПравообладателя(ЗаписьНабора, Родитель)

	Если ТипЗнч(ЗаписьНабора) <> Тип("РегистрСведенийЗапись.ПраваДоступаПользователей") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получим список родителей
	
	СписокРодителей = Новый СписокЗначений;
	СписокРодителей.Добавить(Родитель);
	Потомок = Родитель;
	Пока НЕ ЗначениеНеЗаполнено(Потомок.Родитель) Цикл
		СписокРодителей.Добавить(Потомок.Родитель);
		Потомок = Потомок.Родитель;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПраваДоступаПользователей.ОбъектДоступа
	|ИЗ
	|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
	|
	|ГДЕ
	|	ПраваДоступаПользователей.ОбластьДанных = &ОбластьДанных
	|	И
	|	ПраваДоступаПользователей.Пользователь = &Пользователь
	|	И
	|	ПраваДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников = &ВидНаследованияПравДоступаИерархическихСправочников
	|	И
	|	ПраваДоступаПользователей.ОбъектДоступа В(&СписокРодителей)
	|";
	
	Запрос.УстановитьПараметр("ОбластьДанных"                                      , ЗаписьНабора.ОбластьДанных);
	Запрос.УстановитьПараметр("Пользователь"                                       , ЗаписьНабора.Пользователь);
	Запрос.УстановитьПараметр("ВидНаследованияПравДоступаИерархическихСправочников", Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	Запрос.УстановитьПараметр("СписокРодителей"                                    , СписокРодителей);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ОбъектДоступа;
	КонецЕсли; 

КонецФункции

Процедура УстановитьПараметрГраницыЗапретаИзмененияДанных() Экспорт
	
	//Олег - Полные права выданы некоторым вполне обычным пользователям, отключим право работать в закрытом периоде    	
	//Если РольДоступна("ПолныеПрава") Тогда
	//	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));
	//	Возврат;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА (Границы.Организация) ЕСТЬ NULL  ТОГДА &ПустаяОрганизация ИНАЧЕ Границы.Организация КОНЕЦ КАК Организация,
	|	МИНИМУМ(ВЫБОР КОГДА (Границы.ГраницаЗапретаИзменений) ЕСТЬ NULL  ТОГДА ДАТАВРЕМЯ(1, 1, 1) ИНАЧЕ Границы.ГраницаЗапретаИзменений КОНЕЦ) КАК ГраницаЗапретаИзменений
	|ИЗ
	|	Перечисление.НаборПравПользователей КАК НаборыПрав
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
	|		ПО Границы.Роль = НаборыПрав.Ссылка
    | 
	|ГДЕ
	|	(НаборыПрав.Ссылка В (&СписокДоступныхРолей))
    |
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА (Границы.Организация) ЕСТЬ NULL  ТОГДА &ПустаяОрганизация ИНАЧЕ Границы.Организация КОНЕЦ";
	
	Запрос.УстановитьПараметр("СписокДоступныхРолей", ПолучитьСписокНабораПрав());
	Запрос.УстановитьПараметр("ПустаяОрганизация", ПараметрыСеанса.ПустаяОрганизация);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));
	Иначе			
		Соответствие = Новый Соответствие;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ГраницаЗапретаИзменений<>Дата('00010101') Тогда
				Соответствие[Выборка.Организация] = Выборка.ГраницаЗапретаИзменений;
			КонецЕсли;
		КонецЦикла;		
		ЕСли Соответствие.Количество() = 0 Тогда
			Соответствие = Неопределено;
		КонецЕсли;
		ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(0));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаПериодаЗаписей(НаборЗаписей, Отказ) Экспорт
	
	Если Отказ тогда Возврат КонецЕсли;
	
	ДокументРегистратор = НаборЗаписей.Отбор.Регистратор.Значение; // регистратор - обязательно должен быть!
	
	//+++( 26.11.2014 - ускорение проведения и устранение взаимных блокировок!
	// Если документ не давнишний 5-7 дней от текущей даты и он в текущем месяце - ничего не проверяем!
	ЧислоДнейБезПроверки = 5;//раб.неделя!
	ДатаМин = НачалоДня(ТекущаяДата()) - ЧислоДнейБезПроверки*86400;
	ДокументРегистраторДата	= ДокументРегистратор.Дата;//10.10.2018 - 1 запрос к базе, а не 3
	Если Отказ 
		 или ( НачалоМесяца(ДатаМин)=НачалоМесяца(ДокументРегистраторДата)
			 и ДокументРегистраторДата > ДатаМин 
			 ) тогда
		Возврат;
	КонецЕсли;
	//+++)                                
	
		
	Попытка
		
		//+++ 13.05.2013 - у роботов - нет параметра сеанса ГраницыЗапретаИзмененияДанных!
		Если Найти( ИмяПользователя(), "Робот")>0 тогда
			отбор1 = новый Структура;
			отбор1.Вставить("Организация", справочники.Организации.НайтиПоКоду("00001") );
			отбор1.Вставить("Роль", перечисления.НаборПравПользователей.МенеджерПоПродажам ); //+++ 23.01.2014   ПолныеПрава >> МенеджерПоПродажам
			гр = РегистрыСведений.ГраницыЗапретаИзмененияДанных.Получить( отбор1 );
			СоответствиеГраницЗапрета = новый Соответствие;
			СоответствиеГраницЗапрета.Вставить(Справочники.Организации.ПустаяСсылка(), гр.ГраницаЗапретаИзменений);
		Иначе
			
			//+++ 09.11.2016 - через web-сервис (на сервере) или com-соединение НЕ проверяем!
			#Если Клиент тогда
 			СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
		
			//+++ 26.11.2014  быстрая проверка На ПараметрыСеанса.ГраницыЗапретаИзмененияДанных...  
			// НЕ работает на web-сервере и в COM-соединении! 
			Отказ = НЕ ПроверкаГраниц(ДокументРегистратор);
			#КонецЕсли
		
		КонецЕсли;
			
	
	Исключение
		#Если Клиент тогда
			Сообщить("Ошибка при определении закрытого периода: "+ОписаниеОшибки(), СтатусСообщения.Внимание );
		#КонецЕсли	
	КонецПопытки;
	

	Если СоответствиеГраницЗапрета = Неопределено ИЛИ Отказ Тогда //+++ 26.11.2014 - если уже здесь отказ - всё
		Возврат;
	КонецЕсли;
	
	//Если ПроверкаНастроенныхРазрешений(НаборЗаписей.Отбор.Регистратор.Значение) Тогда
	//	Возврат;
	//КонецЕсли; 
	
	МетаданныеНабора = НаборЗаписей.Метаданные();
	ИмяРегистра = МетаданныеНабора.ПолноеИмя();
	
	ЕстьОрганизация = (МетаданныеНабора.Измерения.Найти("Организация")<>Неопределено);
		
	Если НаборЗаписей.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		ВложенныйЗапрос = "";
		ЕСли ЕстьОрганизация Тогда
			индекс = 1;
			ИмяПоляОрганизации = "Организация";
			Для Каждого КлючИЗначение ИЗ СоответствиеГраницЗапрета Цикл
				ВложенныйЗапрос = ВложенныйЗапрос + ?(ВложенныйЗапрос = "", "", "
								  |ОБЪЕДИНИТЬ") +"
								  |ВЫБРАТЬ &Организация"+индекс+" КАК Организация, &ДатаЗапрета" + Формат(индекс, "ЧГ=0") + " КАК ДатаЗапрета";
				Запрос.УстановитьПараметр("Организация"+индекс, КлючИЗначение.Ключ);
				ГраницаПериода = КлючИЗначение.Значение;
				Запрос.УстановитьПараметр("ДатаЗапрета"+индекс, ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));
				индекс = индекс + 1;
			КонецЦикла;
		Иначе
			ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
			ИмяПоляОрганизации = "&ПустаяОрганизация";
			ВложенныйЗапрос = "ВЫБРАТЬ &ПустаяОрганизация КАК Организация, &ДатаЗапрета КАК ДатаЗапрета";
			Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
			ГраницаПериода = СоответствиеГраницЗапрета[ПустаяОрганизация];
			Запрос.УстановитьПараметр("ДатаЗапрета", ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));			
		КонецЕсли;			
		
//+++ 26.11.2014 - берем Дату из Ссылка Документа-регистратора!----------------------		
		Запрос.Текст = "
		|ВЫБРАТЬ ДатыЗапрета.Организация, ДатыЗапрета.ДатаЗапрета
		|ИЗ
		|(" + ВложенныйЗапрос + "		
		|) КАК ДатыЗапрета
		|ГДЕ  ( &ДатаДок < ДатыЗапрета.ДатаЗапрета
		|   ИЛИ ДатыЗапрета.ДатаЗапрета ЕСТЬ NULL )
		|"+?(ЕстьОрганизация, " И ДатыЗапрета.Организация = &Организация","");
		
		Запрос.УстановитьПараметр("ДатаДок", ДокументРегистраторДата);//10.10.2018	
		Если ЕстьОрганизация тогда
			Запрос.УстановитьПараметр("Организация", ДокументРегистратор.Организация);	
		КонецЕсли;	
		
		Если Запрос.Выполнить().Пустой() Тогда //когда нет записей - все Ок 
			Отказ = Ложь;
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	Иначе
		
		Отказ = Ложь;
		Если ЕстьОрганизация Тогда
			Для Каждого Запись ИЗ НаборЗаписей Цикл
				ГраницаПоОрганизации = СоответствиеГраницЗапрета[Запись.Организация];
				ЕСли ГраницаПоОрганизации <> Неопределено 
					 И Запись.Период < ГраницаПоОрганизации Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ГраницаПериода = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];
			Если ГраницаПериода <> Неопределено Тогда
				Для Каждого Запись ИЗ НаборЗаписей Цикл
					ЕСли Запись.Период < ГраницаПериода Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Настраевыемые права доступа на изменение документов и границы изменения данных (KEV)

Функция ПроверкаГраниц(Объект)  

	#Если Клиент тогда
		Если НЕ ЕстьРеквизитДокумента("Организация", Объект.Метаданные()) Тогда
			Возврат Истина;
		КонецЕсли;
		
		ГраницаЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		
		ЕСли ГраницаЗапрета = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		ГраницаПериода = ГраницаЗапрета[Объект.Организация];
		Если ГраницаПериода <> Неопределено Тогда
			//12.03.19 Смирнов этим документам можно отсрочить границу на 3 мес
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПоставщику") или
				 ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказПоставщику") или
				 ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПоставщикуСезонный") или
				 ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказПоставщикуСезонный") тогда
				 ГраницаПериода  = ДобавитьМесяц(ГраницаПериода,-3);
			КонецЕсли;
			//Если ГраницаПериода <= Объект.Дата Тогда
			Если ГраницаПериода > Объект.Дата Тогда
				
				#Если Клиент тогда
					Сообщить("ВНИМАНИЕ! Период закрыт"+ ?(РольДоступна("ПолныеПрава")," по "+формат(ГраницаПериода, "ДЛФ=DD"),"")
					+"! Нельзя менять старые документы!", СтатусСообщения.ОченьВажное);
				#КонецЕсли
				
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
	Возврат Истина;
    
КонецФункции // ()
 
Функция ПроверкаПостаянныхРазрешений(Объект)

	Возврат Ложь;	

КонецФункции // ()


Процедура ПроверкаВозможностиИзмененияДокумента(Документ, Отказ) Экспорт
	
	Если НЕ Документ.ЭтоНовый() И НЕ Документ.ОбменДанными.Загрузка Тогда
		
		Отказ = НЕ ПроверкаГраниц(Документ); 
		
		//Если Отказ Тогда    
		//	Отказ = НЕ ПроверкаНастроенныхРазрешений(Документ);
		//КонецЕсли; 
		
		Если Отказ Тогда
			//+++ 10.07.2014 - для роботов нельзя выводить на экран
		    #Если Клиент тогда
			Сообщить("У пользователя недостаточно прав на доступ к объекту!");
		    #КонецЕсли
		КонецЕсли;
		
	ИначеЕсли Документ.ЭтоНовый() И НЕ Документ.ОбменДанными.Загрузка Тогда 
		
		Отказ = НЕ ПроверкаГраниц(Документ);
		
		//Если Отказ Тогда
		//	Отказ = НЕ ПроверкаНастроенныхРазрешений(Документ, Истина);
		//КонецЕсли;
		
		Если Отказ Тогда
		//+++ 10.07.2014 - для роботов нельзя выводить на экран
		    #Если Клиент тогда
				Сообщить("У пользователя недостаточно прав на создание объекта!");
		    #КонецЕсли
		КонецЕсли;

		
	КонецЕсли; 

КонецПроцедуры

//----KEV
