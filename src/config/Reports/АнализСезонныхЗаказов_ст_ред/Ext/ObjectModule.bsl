//+++ главная
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	СтруктураПредставлениеПолей = Новый Структура;
	МассивОтбора = Новый Массив;
	
	Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	ЗаказыПокупателейСезонныйТовары.НомерСтроки КАК НомерСтроки,
	        |	ЗаказыПокупателейСезонныйТовары.Номенклатура КАК Номенклатура,
	        |	ЗаказыПокупателейСезонныйТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	        |	МИНИМУМ(ЗаказыПокупателейСезонныйТовары.Количество) КАК Запланировано,
	        |	СУММА(ЕСТЬNULL(ЗаказыПокупателей.КоличествоПриход, 0)) КАК ЗаказаноПоЗаказам,
	        |	СУММА(ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)) КАК Отгружено,
	        |	СУММА(ЕСТЬNULL(ЗаказыПокупателей.КоличествоПриход, 0) - ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)) КАК ЗаказаноНоНеОтгружено,
	        |	МИНИМУМ(ЗаказыПокупателейСезонныйТовары.Количество - ЕСТЬNULL(ЗаказыПокупателей.КоличествоПриход, 0)) КАК ОсталосьОтгрузить,
	        |	СУММА(ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0)) КАК ОстатокНаСкладах,
	        |	МИНИМУМ(ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) - (ЗаказыПокупателейСезонныйТовары.Количество - ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0))) КАК ОстатокПослеОтгрузки,
	        |	ЗаказыПокупателейСезонныйТовары.Ссылка.Контрагент КАК Контрагент,
	        |	ЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
	        |	ПродажиОбороты.ДокументПродажи КАК ДокументПродажи
	        |{ВЫБРАТЬ
	        |	НомерСтроки,
	        |	Номенклатура.*,
	        |	Характеристика.*,
	        |	Запланировано,
	        |	ЗаказаноПоЗаказам,
	        |	Отгружено,
	        |	ОсталосьОтгрузить,
	        |	ОстатокНаСкладах,
	        |	ОстатокПослеОтгрузки,
	        |	Контрагент.*,
	        |	ЗаказПокупателя.*,
	        |	ДокументПродажи.*,
	        |	ЗаказаноНоНеОтгружено}
	        |ИЗ
	        |	Документ.ЗаказПокупателяСезонный.Товары КАК ЗаказыПокупателейСезонныйТовары
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Обороты(
	        |				&ДатаНач,
	        |				&ДатаКон,
	        |				Период,
	        |				ЗаказПокупателя.ПровеРен
	        |					И ЗаказПокупателя.Дата >= &ДатаНач
	        |					И ЗаказПокупателя.Дата <= &ДатаКон
	        |					И ЗаказПокупателя.Транзит = &Транзит) КАК ЗаказыПокупателей
	        |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	        |					&ДатаНач,
	        |					&ДатаКон,
	        |					Период,
	        |					(НЕ ДокументПродажи.Склад.ЗапретитьИспользование)
	        |						И ДокументПродажи.Склад.Транзитный = &Транзит
			 //+++ 22.03.2013
				 |					и ДокументПродажи.Подразделение = &Подразделение
				
	        |						И ЗаказПокупателя.Проверен
	        |						И ЗаказПокупателя.Дата >= &ДатаНач
	        |						И ЗаказПокупателя.Дата <= &ДатаКон) КАК ПродажиОбороты
	        |			ПО ЗаказыПокупателей.Номенклатура = ПродажиОбороты.Номенклатура
	        |				И ЗаказыПокупателей.ЗаказПокупателя = ПродажиОбороты.ДокументПродажи.Сделка
	        |				И ЗаказыПокупателей.ХарактеристикаНоменклатуры = ПродажиОбороты.ХарактеристикаНоменклатуры
	        |		ПО ЗаказыПокупателейСезонныйТовары.Номенклатура = ЗаказыПокупателей.Номенклатура
	        |			И ЗаказыПокупателейСезонныйТовары.ХарактеристикаНоменклатуры = ЗаказыПокупателей.ХарактеристикаНоменклатуры
	        |			И (ВЫБОР
	        |				КОГДА ЗаказыПокупателейСезонныйТовары.Ссылка.ДоговорКонтрагента = &ПустойДоговор
	      //  |					ТОГДА ЗаказыПокупателейСезонныйТовары.Ссылка.Контрагент = ЗаказыПокупателей.ДоговорКонтрагента.Владелец
		  	|					ТОГДА ЗаказыПокупателейСезонныйТовары.Ссылка.Контрагент = ЗаказыПокупателей.ЗаказПокупателя.Контрагент
	       	|				ИНАЧЕ ЗаказыПокупателейСезонныйТовары.Ссылка.ДоговорКонтрагента = ЗаказыПокупателей.ДоговорКонтрагента
	        |			КОНЕЦ)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	        |				&ДатаКон,
	        |				(НЕ Склад.ЗапретитьИспользование)
				 //+++ 22.03.2013
		 |					и Склад.Подразделение = &Подразделение
		
	        |					И Склад.Транзитный = &Транзит) КАК ОстаткиТоваров
	        |		ПО ЗаказыПокупателейСезонныйТовары.Номенклатура = ОстаткиТоваров.Номенклатура
	        |			И ЗаказыПокупателейСезонныйТовары.ХарактеристикаНоменклатуры = ОстаткиТоваров.ХарактеристикаНоменклатуры
	        |ГДЕ
	        |	ВЫБОР
	        |			КОГДА &Ссылка = &Пустой
	        |				ТОГДА ЗаказыПокупателейСезонныйТовары.Ссылка.Дата >= &ДатаНач
	        |						И ЗаказыПокупателейСезонныйТовары.Ссылка.Дата <= &ДатаКон
			|						И естьnull(ЗаказыПокупателейСезонныйТовары.Ссылка.Подразделение.ВЭД,ложь) = ЛОЖЬ
	        |			ИНАЧЕ ЗаказыПокупателейСезонныйТовары.Ссылка = &Ссылка
	        |		КОНЕЦ
	        |{ГДЕ
	        |	ЗаказыПокупателейСезонныйТовары.Номенклатура.*,
	        |	ЗаказыПокупателейСезонныйТовары.Ссылка.Контрагент.*,
	        |	ЗаказыПокупателейСезонныйТовары.Количество КАК Запланировано,
	        |	(ЕСТЬNULL(ЗаказыПокупателей.КоличествоПриход, 0)) КАК ЗаказаноПоЗаказам,
	        |	(ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)) КАК Отгружено,
	        |	(ЕСТЬNULL(ЗаказыПокупателей.КоличествоПриход, 0) - ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)) КАК ЗаказаноНоНеОтгружено,
	        |	(ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0)) КАК ОстатокНаСкладах,
	        |	(ЗаказыПокупателейСезонныйТовары.Количество - ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)) КАК ОсталосьОтгрузить}
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ЗаказыПокупателейСезонныйТовары.Номенклатура,
	        |	ПродажиОбороты.ДокументПродажи,
	        |	ЗаказыПокупателейСезонныйТовары.Ссылка.Контрагент,
	        |	ЗаказыПокупателейСезонныйТовары.ХарактеристикаНоменклатуры,
	        |	ЗаказыПокупателей.ЗаказПокупателя,
	        |	ЗаказыПокупателейСезонныйТовары.НомерСтроки
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	НомерСтроки
	        |{УПОРЯДОЧИТЬ ПО
	        |	НомерСтроки}
	        |ИТОГИ
	        |	МИНИМУМ(НомерСтроки),
	        |	СУММА(Запланировано),
	        |	СУММА(ЗаказаноПоЗаказам),
	        |	СУММА(Отгружено),
	        |	СУММА(ЗаказаноПоЗаказам) - СУММА(Отгружено) КАК ЗаказаноНоНеОтгружено,
	        |	СУММА(Запланировано) - СУММА(Отгружено) КАК ОсталосьОтгрузить,
	        |	СУММА(ОстатокНаСкладах),
	        |	СУММА(ОстатокНаСкладах) - СУММА(ОсталосьОтгрузить) КАК ОстатокПослеОтгрузки
	        |ПО
	        |	ОБЩИЕ,
	        |	Номенклатура,
	        |	Характеристика,
	        |	ЗаказПокупателя,
	        |	ДокументПродажи,
	        |	Контрагент
	        |{ИТОГИ ПО
	        |	Контрагент.*,
	        |	Номенклатура.*,
	        |	Характеристика.*,
	        |	ЗаказПокупателя.*,
	        |	ДокументПродажи.*}
	        |АВТОУПОРЯДОЧИВАНИЕ";
	//------------------------ изменение названия полей для пользователей ----------------------
	СтруктураПредставлениеПолей = новый Структура("Контрагент,
	|Номенклатура,
	|НомерСтроки,
	|Запланировано,
	|ЗаказаноПоЗаказам,
	|Отгружено,
	|ЗаказаноНоНеОтгружено,
	
	|ОсталосьОтгрузить,
	|ОстатокНаСкладах,
	|ОстатокПослеОтгрузки,
	|ЗаказПокупателя,
	|ДокументОтгрузки", 
	
	"Контрагент",
	"Номенклатура",
	"Номер строки",
	"Заказано в сезонном заказе",
	"Заказано и проделено",
	"Отгружено",
	"Заказано, но не отгружено",
	
	"Осталось отгрузить",
	"Остаток на складах",
	"После отгрузки",
	"Заказ Покупателя",
	"Документ отгрузки");
	ПостроительОтчета.Текст = Текст;
	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	ПостроительОтчета.Параметры.Вставить("Транзит", СсылкаНаОбъект.Транзит); //+++ 08.06.2012
	
	ПостроительОтчета.Параметры.Вставить("Подразделение", СсылкаНаОбъект.Подразделение); //+++ 22.03.2013
	
	ПостроительОтчета.Параметры.Вставить("Ссылка", ?(ЗначениеЗаполнено(СсылкаНаОбъект), СсылкаНаОбъект, Документы.ЗаказПокупателяСезонный.ПустаяСсылка()) ); //+++ 25.04.2012
	ПостроительОтчета.Параметры.Вставить("Пустой", документы.ЗаказПокупателяСезонный.ПустаяСсылка() ); 
	ПостроительОтчета.Параметры.Вставить("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка() );//21.06.2012

	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	//ПостроительОтчета.ИзмеренияСтроки.Добавить("Контрагент");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Номенклатура");
	
	ПостроительОтчета.ВыбранныеПоля.Очистить(); // доп. поля
	//+++ 13.06.2012
	//ПостроительОтчета.ВыбранныеПоля.Добавить("Номенклатура.Код"); // доп. поля
	ПостроительОтчета.ВыбранныеПоля.Добавить("НомерСтроки"); // доп. поля
    ОбщийОтчет.ВыводитьДополнительныеПоляВОтдельнойКолонке = истина;
			   
	ПостроительОтчета.ОтображатьСостояние = истина;
	ПостроительОтчета.Макет.Область().ВыделятьОтрицательные = истина;
	
	//-------------------------------------------------------------------------------------------
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда
	   ТекстПоляСвойств= "";
		ТекстПоляКатегорий = "";

		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным   = "Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		
		
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, 
				ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
				,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);
				
	КонецЕсли;
	
	//ПостроительОтчета.Текст = Текст;
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Контрагент");
	МассивОтбора.Добавить("Номенклатура");
	
	//+++  27.04.2012
	МассивОтбора.Добавить("Запланировано");
	МассивОтбора.Добавить("ЗаказаноПоЗаказам");
	МассивОтбора.Добавить("Отгружено"); 
	МассивОтбора.Добавить("ЗаказаноНоНеОтгружено"); 
	МассивОтбора.Добавить("ОсталосьОтгрузить"); 
	МассивОтбора.Добавить("ОстатокНаСкладах"); 
	
	
	ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;
	
	точн = "0";// число цифр после запятой
	ОбщийОтчет.ЗаполнитьПоказатели("Запланировано", "Заказано в сезонном заказе", Истина, "ЧЦ=15; ЧДЦ="+точн);
	ОбщийОтчет.ЗаполнитьПоказатели("ЗаказаноПоЗаказам", "Заказано и проделено", Истина, "ЧЦ=15; ЧДЦ="+точн);
	ОбщийОтчет.ЗаполнитьПоказатели("Отгружено", "Отгружено", Истина, "ЧЦ=15; ЧДЦ="+точн);
	ОбщийОтчет.ЗаполнитьПоказатели("ЗаказаноНоНеОтгружено", "Заказано, но не отгружено", Истина, "ЧЦ=15; ЧДЦ="+точн);
	ОбщийОтчет.ЗаполнитьПоказатели("ОсталосьОтгрузить", "Осталось отгрузить", Истина, "ЧЦ=15; ЧДЦ="+точн);
	
	ОбщийОтчет.ЗаполнитьПоказатели("ОстатокНаСкладах",  "Остаток на складах", Истина, "ЧЦ=15; ЧДЦ="+точн);
//	ОбщийОтчет.ЗаполнитьПоказатели("ОстатокПослеОтгрузки", "Остаток после отгрузки", Истина, "ЧЦ=15; ЧДЦ="+точн);
	
	ОбщийОтчет.мНазваниеОтчета = "Отчет по "+?(ЗначениеЗаполнено(СсылкаНаОбъект),"сезонному заказу №"+строка(СсылкаНаОбъект.Номер)+" от "+формат(СсылкаНаОбъект.Дата,"ДЛФ=DD"), "сезонным заказам" );
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Ложь;
	ОбщийОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	// Установим дату начала отчета
	Если ЗначениеНеЗаполнено(ОбщийОтчет.ДатаНач) Тогда
		Если Не ЗначениеНеЗаполнено(глТекущийПользователь) Тогда
			ОбщийОтчет.ДатаНач = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяДатаНачалаОтчетов");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт

	//ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("РентабельностьПродаж", Новый Структура("ТакогоИзмеренияНетВОтчете")); // Рентабельность не выводится в итогах по группировкам, только в детальных записях
	//ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("ПроцентНаценки", Новый Структура("ТакогоИзмеренияНетВОтчете")); // Рентабельность не выводится в итогах по группировкам, только в детальных записях
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПРоцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры

ОбщийОтчет.ИмяРегистра = "Продажи";