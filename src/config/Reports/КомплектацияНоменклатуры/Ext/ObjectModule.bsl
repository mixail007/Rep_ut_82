// Добавление в текст запроса комплектации номенклатуры новый реквизит с условием
 //
Функция ДобавитьВЗапросКомплектацииПоУсловию(ИмяРеквизита)
	КусокТекстаЗапроса = "
	|		ВЫБОР 
	|			КОГДА ((Регистратор.ВидОперации =  &ВидОперацииКомплектации) И (КоличествоРасход <> 0))
	|			  ИЛИ ((Регистратор.ВидОперации <> &ВидОперацииКомплектации) И (КоличествоПриход <> 0)) ТОГДА
	|				"+ИмяРеквизита+"
	|			ИНАЧЕ NULL
	|		КОНЕЦ КАК "+ИмяРеквизита+",";
	Возврат КусокТекстаЗапроса;
КонецФункции

Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ОбщийОтчет.ИмяРегистра = "-";
	ОбщийОтчет.мНазваниеОтчета = "Комплектация номенклатуры";

	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	ПостроительОтчета.Параметры.Вставить("ВидОперацииКомплектации", Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация);
	ПостроительОтчета.Параметры.Вставить("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	ПостроительОтчета.Параметры.Вставить("ПустаяДата", '00010101000000');

	СтруктураПредставлениеПолей = Новый Структура;

	ТекстЗапроса = "
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	ОборотыКомплектов.Номенклатура                  КАК Комплект,
	|	ОборотыКомплектов.ХарактеристикаНоменклатуры    КАК ХарактеристикаКомплекта,
	|	СУММА(ВЫБОР КОГДА ОборотыКомплектующих.ВидСтрокиДвижения = ""ДвижениеКомплекта"" ТОГДА ОборотыКомплектов.КоличествоПриход ИНАЧЕ 0 КОНЕЦ) КАК КомплектКоличествоПриход,
	|	СУММА(ВЫБОР КОГДА ОборотыКомплектующих.ВидСтрокиДвижения = ""ДвижениеКомплекта"" ТОГДА ОборотыКомплектов.КоличествоРасход ИНАЧЕ 0 КОНЕЦ) КАК КомплектКоличествоРасход,
	|	ОборотыКомплектующих.Номенклатура               КАК Комплектующая,
	|	ОборотыКомплектующих.ХарактеристикаНоменклатуры КАК ХарактеристикаКомплектующей,
	|	СУММА(ОборотыКомплектующих.КоличествоПриход)    КАК КомплектующаяКоличествоПриход,
	|	СУММА(ОборотыКомплектующих.КоличествоРасход)    КАК КомплектующаяКоличествоРасход,
	|	ОборотыКомплектов.Период,
	|	ОборотыКомплектов.Склад
	|{ВЫБРАТЬ
	|	Комплект.* КАК Комплект,
	|	ХарактеристикаКомплекта.* КАК ХарактеристикаКомплекта,
	|	Комплектующая.* КАК Комплектующая,
	|	ХарактеристикаКомплектующей.* КАК ХарактеристикаКомплектующей,
	|	Период.*,
	|	ОборотыКомплектующих.Регистратор.*,
	|	НачалоПериода(Период, День) КАК ПериодДень ,
	|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
	|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
	|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
	|	НачалоПериода(Период, Год) КАК ПериодГод
	|	//СВОЙСТВА
	|}
	|	ИЗ
	|		(
	|		ВЫБРАТЬ
	|			Номенклатура,
	|			ХарактеристикаНоменклатуры,
	|			КоличествоПриход,
	|			КоличествоРасход,
	|			Период,
	|			Регистратор,
	|			Склад
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНач, &ДатаКон, Запись, )
	|			
	|		ГДЕ
	|			Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры И
	|			((Регистратор.ВидОперации =  &ВидОперацииКомплектации) И (КоличествоПриход <> 0)
	|			  ИЛИ
	|			 (Регистратор.ВидОперации <> &ВидОперацииКомплектации) И (КоличествоРасход <> 0))
	|		
	|		) КАК ОборотыКомплектов
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|
	|	(ВЫБРАТЬ"
	+ДобавитьВЗапросКомплектацииПоУсловию("Номенклатура")
	+ДобавитьВЗапросКомплектацииПоУсловию("ХарактеристикаНоменклатуры")
	+ДобавитьВЗапросКомплектацииПоУсловию("КоличествоПриход")
	+ДобавитьВЗапросКомплектацииПоУсловию("КоличествоРасход")+"
	|		ВЫБОР 
	|			КОГДА ((Регистратор.ВидОперации =  &ВидОперацииКомплектации) И (КоличествоРасход <> 0))
	|			  ИЛИ ((Регистратор.ВидОперации <> &ВидОперацииКомплектации) И (КоличествоПриход <> 0)) ТОГДА
	|				""ДвижениеКомплектующей""
	|			ИНАЧЕ ""ДвижениеКомплекта""
	|		КОНЕЦ КАК ВидСтрокиДвижения,
	|		Регистратор
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНач, &ДатаКон, Запись, )
	|	ГДЕ
	|		Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры
	|	)  КАК ОборотыКомплектующих
	|
	|ПО
	|	ОборотыКомплектов.Регистратор = ОборотыКомплектующих.Регистратор
	|	//СОЕДИНЕНИЯ
	|
	|СГРУППИРОВАТЬ ПО  
	|	ОборотыКомплектов.Номенклатура,
	|	ОборотыКомплектов.ХарактеристикаНоменклатуры,
	|	ОборотыКомплектующих.Номенклатура,
	|	ОборотыКомплектующих.ХарактеристикаНоменклатуры,
	|	ОборотыКомплектов.Склад,
	|	ОборотыКомплектов.Период
	|	//СГРУППИРОВАТЬПО
	|
	|{ГДЕ
	|	ОборотыКомплектов.Номенклатура.*                  КАК Комплект,
	|	ОборотыКомплектов.ХарактеристикаНоменклатуры.*    КАК ХарактеристикаКомплекта,
	|	ОборотыКомплектующих.Номенклатура.*               КАК Комплектующая,
	|	ОборотыКомплектующих.ХарактеристикаНоменклатуры.* КАК ХарактеристикаКомплектующей,
	|	Период,
	|	ОборотыКомплектующих.Регистратор.*,
	|	НачалоПериода(Период, День) КАК ПериодДень ,
	|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
	|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
	|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
	|	НачалоПериода(Период, Год) КАК ПериодГод
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|{УПОРЯДОЧИТЬ ПО 
	|	Комплект.*                         КАК Комплект,
	|	ХарактеристикаКомплекта.*          КАК ХарактеристикаКомплекта,
	|	Комплектующая.*                    КАК Комплектующая,
	|	ХарактеристикаКомплектующей.*      КАК ХарактеристикаКомплектующей,
	|	Период,
	|	ОборотыКомплектующих.Регистратор.*,
	|	НачалоПериода(Период, День) КАК ПериодДень ,
	|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
	|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
	|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
	|	НачалоПериода(Период, Год) КАК ПериодГод
	|	//СВОЙСТВА
	|}
	|
	|{ИТОГИ ПО
	|	Комплект.*                    КАК Комплект,
	|	ХарактеристикаКомплекта.*     КАК ХарактеристикаКомплекта,
	|	Комплектующая.*               КАК Комплектующая,
	|	ХарактеристикаКомплектующей.* КАК ХарактеристикаКомплектующей,
	|	Период,
	|	ОборотыКомплектующих.Регистратор.*,
	|	НачалоПериода(Период, День) КАК ПериодДень ,
	|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
	|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
	|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
	|	НачалоПериода(Период, Год) КАК ПериодГод
	|	//СВОЙСТВА
	|}
	|
	|ИТОГИ  
	|	СУММА(КомплектКоличествоПриход),
	|	СУММА(КомплектКоличествоРасход),
	|	СУММА(КомплектующаяКоличествоПриход),
	|	СУММА(КомплектующаяКоличествоРасход)
	|ПО ОБЩИЕ, 
	|	Комплект,
	|	Комплектующая
	|АВТОУПОРЯДОЧИВАНИЕ
	|";

	// Соответствие имен полей в запросе и их представлений в отчете
	СтруктураПредставлениеПолей = Новый Структура(
	"	Комплект,
	|	ХарактеристикаКомплекта,
	|	Комплектующая,
	|	ХарактеристикаКомплектующей,
	|	КомплектКоличествоПриход,
	|	КомплектКоличествоРасход,
	|	КомплектующаяКоличествоПриход,
	|	КомплектующаяКоличествоРасход,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодГод", 
	"Комплект",
	"Характеристика комплекта",
	"Комплектующая",
	"Характеристика комплектующей",
	"Комплект к-во приход",
	"Комплект к-во расход",
	"Комплектующая к-во приход",
	"Комплектующая к-во расход",
	"По дням",
	"По неделям",
	"По месяцам",
	"По кварталам",
	"По годам");

	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда

		// Свойства и категории, назначаемые пользователем:
		//Имя поля                    Имя назначения свойств и категорий объектов
		//Склад                       Справочник_Склад
		//Номенклатура                Справочник_Номенклатура
		//ХарактеристикаНоменклатуры  Справочник_ХарактеристикиНоменклатуры
		//Заказ                       Документы
		//ДокументПоставки            Документы

		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ОборотыКомплектов.Номенклатура";
		НоваяСтрока.Представление = "Комплект";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ОборотыКомплектов.ХарактеристикаНоменклатуры";
		НоваяСтрока.Представление = "Характеристика комплекта";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
		НоваяСтрока.НетКатегорий = Истина;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ОборотыКомплектующих.Номенклатура";
		НоваяСтрока.Представление = "Комплектующая";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ОборотыКомплектующих.ХарактеристикаНоменклатуры";
		НоваяСтрока.Представление = "Характеристика комплектующей";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
		НоваяСтрока.НетКатегорий = Истина;

		// Добавим строки запроса, необходимые для использования свойств и категорий
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, ОбщийОтчет.мСоответствиеНазначений, ОбщийОтчет.ПостроительОтчета.Параметры);

	КонецЕсли;

	ПостроительОтчета.Текст = ТекстЗапроса;

	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);

	// группировки по умолчанию
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Комплект");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Комплектующая");
	
	// отборы по умолчанию
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Комплект");
	МассивОтбора.Добавить("Комплектующая");
	ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	// поля по умолчанию очищены.
	ПостроительОтчета.ВыбранныеПоля.Очистить();

	ОбщийОтчет.РаскрашиватьИзмерения = Истина;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;

	ОбщийОтчет.ЗаполнитьПоказатели("КомплектКоличествоПриход", "Комплект к-во приход", Истина, "ЧЦ=15; ЧДЦ=3");
	ОбщийОтчет.ЗаполнитьПоказатели("КомплектКоличествоРасход", "Комплект к-во расход", Истина, "ЧЦ=15; ЧДЦ=3");
	ОбщийОтчет.ЗаполнитьПоказатели("КомплектующаяКоличествоПриход", "Комплектующая к-во приход", Истина, "ЧЦ=15; ЧДЦ=3");
	ОбщийОтчет.ЗаполнитьПоказатели("КомплектующаяКоличествоРасход", "Комплектующая к-во расход", Истина, "ЧЦ=15; ЧДЦ=3");
	
	// Установим дату начала отчета
	Если ЗначениеНеЗаполнено(ОбщийОтчет.ДатаНач) Тогда
		Если Не ЗначениеНеЗаполнено(глТекущийПользователь) Тогда
			ОбщийОтчет.ДатаНач = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяДатаНачалаОтчетов");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт

	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПРоцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры

ОбщийОтчет.мРежимВводаПериода = 0; // Период
