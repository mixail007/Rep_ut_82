////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем мФормаВыбораФильтров;         // Форма выбора фильтра
Перем мФормаВыбораВидаДокумента;    // Форма выбора вида документа
Перем мФормаПодбораЗначенийФильтра; // Форма подбора значений во Множественный отбор
Перем мФормаПодбораВидаДокумента;   // Форма подбора вида документа во Множественный отбор

// Действие, назначаемое в качестве обработчика события НачалоВыбора колонке
// ЗначениеФильтра табличного поля ТаблицаЗначенияФильтров
Перем мДействиеТабличноеПолеЗначенияФильтровЗначениеФильтраНачалоВыбора;
// Имя отчета в метаданных
Перем мИмяОтчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

// Функция создает объект типа Описание Типа по строковому идентификатору типа
//
// Параметры: ТипСтрокой - имя типа строкой
//
// Возвращаемое значение:
//  Описание типа - объект типа "Описание Типа"
//
Функция СоздатьОписаниеТипа(ТипСтрокой)
	
	МассивТипов		= Новый Массив;
	МассивТипов.Добавить(Тип(ТипСтрокой));
	ОписаниеТипов	= Новый ОписаниеТипов(МассивТипов);

	Возврат ОписаниеТипов;

КонецФункции // СоздатьОписаниеТипа()

// Устанавливает признак наличия кнопки выбора у элемента диалога
// а также обработчик события "НачалоВыбора". Используется для ввода
// значения фильтра.
//
// Параметры:
//  ЭлементУправления - элемент управления
//
Процедура УстановитьФлагКнопкиВыбора(ЭлементУправления)
	Если ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока = Неопределено Тогда
		Возврат ;
	КонецЕсли;
	Если Не ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока.ОписаниеФильтра = "Булево" Тогда
		ЭлементУправления.КнопкаВыбора = Истина;
		ЭлементУправления.УстановитьДействие("НачалоВыбора", мДействиеТабличноеПолеЗначенияФильтровЗначениеФильтраНачалоВыбора);
	КонецЕсли;
КонецПроцедуры // УстановитьФлагКнопкиВыбора()

// Заполняет значения элементов формы отчета в соответствии со значениями реквизитов отчета
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоРеквизитам()
	
КонецПроцедуры // ЗаполнитьПоРеквизитам()

// Открывает форму выбора вида документов из списка
//
// Параметры:
//  Нет.
//
Процедура ВыборВидаДокумента(Элемент, МножВыбор = Ложь)
	
	Форма = ПолучитьФорму("ФормаВыбора", Элемент, "дляФормаФильтра");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция выбора вида документа не завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МножественныйВыбор", МножВыбор);
	СтруктураПараметров.Вставить("ИсходнаяТаблица", "СписокВидовДокументов");

	СтруктураСуществующиеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;

	Строка=Отбор.Найти("ДокументОтчета", "ИмяОтбора");

	Если НЕ Строка=Неопределено Тогда
		Если ТипЗнч(Строка.ЗначениеОтбора) = Тип("СписокЗначений") Тогда
			Для каждого Элемент Из Строка.ЗначениеОтбора Цикл

				Если Не ПустаяСтрока(Элемент.Значение) Тогда
					СтруктураНеиспользуемыеЗначения.Вставить(Элемент.Значение,Элемент.Значение);
				КонецЕсли;

			КонецЦикла;
		ИначеЕсли Не ПустаяСтрока(Строка.ЗначениеОтбора) Тогда
			СтруктураНеиспользуемыеЗначения.Вставить(Строка.ЗначениеОтбора, Строка.ЗначениеОтбора);

		КонецЕсли;
	КонецЕсли;

	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	Если МножВыбор Тогда
		мФормаПодбораВидаДокумента = Форма;
	Иначе
		мФормаВыбораВидаДокумента = Форма;
	КонецЕсли;
	
КонецПроцедуры // ВыборВидаДокумента()

// Определяет значение владельца для поля со значением - подчиненным справочником
// по существующим значениям или выбором. Используется для определения владельца 
// полей колонок ЗначениеФильтра табличных полей ТабличноеПолеСписокФильтров и
// ТабличноеПолеЗначенияФильтров.
//
// Параметры: 
//	Нет.
//
// Возвращаемое значение:
//	Владелец справочника, или Неопределено, если владельца нет или не выбран.
//
Функция ОпределитьВладельца()

	Владелец = Неопределено;

	НайдСтрФильтры = мТаблицаФильтры.Найти(ЭлементыФормы.Отбор.ТекущиеДанные.ИмяОтбора, "ИмяПоля");
	Если НайдСтрФильтры <> Неопределено Тогда
		ИмяПоляВладелец = НайдСтрФильтры.ИмяПоляВладелец;
		Если Не ПустаяСтрока(ИмяПоляВладелец) Тогда
			НайдСтр = ЭлементыФормы.Отбор.Значение.Найти(ИмяПоляВладелец, "ИмяОтбора");
			Если НайдСтр <> Неопределено Тогда
				Если ТипЗнч(НайдСтр.ЗначениеФильтра) <> Тип("Строка") Тогда
					Владелец = НайдСтр.ЗначениеФильтра;
				Иначе
					Если НайдСтр.СписокФильтров.Количество() = 1 Тогда
						Владелец = НайдСтр.СписокФильтров[0].ЗначениеФильтра;

					ИначеЕсли НайдСтр.СписокФильтров.Количество() > 0 Тогда
						СписокВладельцев = Новый СписокЗначений;
						Для Каждого Строка Из НайдСтр.СписокФильтров Цикл
							СписокВладельцев.Добавить(Строка.ЗначениеФильтра);
						КонецЦикла;
						Выбор = СписокВладельцев.ВыбратьЭлемент("Выберите владельца");
						Если Выбор <> Неопределено Тогда
							Владелец = Выбор.Значение;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если Владелец = Неопределено Тогда
				НайдСтр = мТаблицаФильтры.Найти(ИмяПоляВладелец, "ИмяПоля");
				Если НайдСтр <> Неопределено Тогда

					Типы = НайдСтр.ОписаниеТипов.Типы();

					Если Типы.Количество() = 1 Тогда
						ВвестиЗначение(Владелец, "Выберите владельца", Типы[0]);

					Иначе
						СписокВладельцев = Новый СписокЗначений;
						СписокВладельцев.ЗагрузитьЗначения(Типы);
						Выбор = СписокВладельцев.ВыбратьЭлемент("Выберите владельца");
						Если Выбор <> Неопределено Тогда
							ТипВладельца = Выбор.Значение;
							Если ТипВладельца <> Неопределено Тогда
								ВвестиЗначение(Владелец, "Выберите владельца", ТипВладельца);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// Если это свойства, для них заполнено поле "Свойство"
		ИначеЕсли Не ЗначениеНеЗаполнено(НайдСтрФильтры.Свойство) > 0 Тогда

			Владелец = НайдСтрФильтры.Свойство;

		КонецЕсли;
	КонецЕсли;
	
	Возврат Владелец;
	
КонецФункции // ОпределитьВладельца()

// Создает структуру описывающую возможное действие над выбранными объектами
//
// Параметры: 
//  Идент  - идентификатор действия (обычно имя реквизита, значение которого надо изменить)
//  СтрТип - тип значения строкой или описанием типа
//  ВыборГруппы - значение определяющее возможность выбора группы или элемента справочника.
//                имеет смысл только для реквизитов типа "Справочник"
//  Владелец - владелец для реквизитов типа подчиненный справочник. Используется для ввода
//             значений свойств.
//
// Возвращаемое значение:
//  Созданная структура
//
Функция ОписаниеЭлементаСписка(Идент, СтрТип, ШапкаКолонки = "", ВыборГруппы = Неопределено, Владелец = Неопределено)
	Перем Структ;
	
	Структ = Новый Структура;
	Структ.Вставить("Идент",        Идент);
	Структ.Вставить("Тип",          СтрТип);
	Структ.Вставить("ВыборГруппы",  ВыборГруппы);
	Структ.Вставить("Владелец",     Владелец);
	Структ.Вставить("ШапкаКолонки", ШапкаКолонки);
	
	Возврат Структ;
	
КонецФункции // ОписаниеЭлементаСписка()

// Добавляет в список свойства. Свойства выбираются из плана видов
// характеристик.
//
// Параметры:
//  Список - список в который добавляются данные
//  ИдентОбъекта - идентификатор назначения свойств
//      например для получения свойств номенклатуры надо передать строку "Справочник_Номенклатура"
//
//
Процедура ДобавитьСписокСвойств(Список, ИдентОбъекта)
	Перем Запрос;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(
		"Назначение",
		ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов[ИдентОбъекта]);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	План.Ссылка,
	|	План.Представление
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК План
	|ГДЕ
	|	План.НазначениеСвойства = &Назначение
	|";
	
	Результат = Запрос.Выполнить().Выгрузить();

	Для Каждого Обход Из Результат Цикл
		Список.Добавить(ОписаниеЭлементаСписка(
				"Свойство",
				Обход.Ссылка.ТипЗначения,
				Обход.Представление,
				ИспользованиеГруппИЭлементов.Элементы,
				Обход.Ссылка),
			"Изменить: " + Обход.Представление + " <Значение свойства>");
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСписокСвойств()

// Добавляет колонку в таблицу значений и связанное с ней табличное поле
//
// Параметры:
//  ТабЗнач - таблица значений
//  ТабПоле - элемент формы типа табличное поле
//  ТипКол  - тип колонки
//  Имя     - имя (идентификатор) колонки
//  ЗагСтр  - заголовок колонки. Необязателен. Если не указан - в качестве заголовка
//            используется имя колонки
//
// Возвращаемое значение:
//  Колонка добавленая в табличное поле
//
Функция ДобавитьКолонку(ТабЗнач, ТабПоле, ТипКол, Имя, ЗагСтр = "", ТолькоПросмотр = Ложь)
	Перем НоваяКолонка;
	Перем МассивТип;
	Перем ТипКолонки;

	ЭтоФлажок = Ложь;
	Если ТипЗнч(ТипКол) = Тип("Строка") Тогда
		Если ПустаяСтрока(ТипКол) Тогда
			ТипКолонки = Неопределено;
		Иначе
			МассивТип  = Новый Массив;
			МассивТип.Добавить(Тип(ТипКол));
			ТипКолонки = Новый ОписаниеТипов(МассивТип);
		КонецЕсли;
	Иначе
		ТипКолонки = ТипКол;
	КонецЕсли;

	ТабЗнач.Колонки.Добавить(Имя, ТипКолонки);

	НоваяКолонка        = ТабПоле.Колонки.Добавить( Имя, ?(ПустаяСтрока(ЗагСтр), Имя, ЗагСтр));
	НоваяКолонка.Данные = Имя;
	НоваяКолонка.ТолькоПросмотр = ТолькоПросмотр;

	Возврат НоваяКолонка;
	
КонецФункции // ДобавитьКолонку()

// Добавляются фильтры по значениям свойств
//
// Параметры:
//  Запрос - запрос в текст которого добавляются условия и значения фильтров
//  МассивСвойств - массив со значениями фильтра по свойствам
//
//
Процедура ДобавитьФильтрыПоСвойствам(Запрос, МассивСвойств)
	Перем ИмяПоляЗапроса;

	Для Индекс = 0 По МассивСвойств.Количество() - 1 Цикл
		СтрокаОтбора = МассивСвойств[Индекс];

		Если НЕ СтрокаОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если мТаблицаФильтры.Найти(СтрокаОтбора.ИмяОтбора, "ИмяПоля").Свойство = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоляЗапроса = мТаблицаФильтры.Найти(СтрокаОтбора.ИмяОтбора, "ИмяПоля").ИмяПоляЗапроса;

		Если ТипЗнч(СтрокаОтбора.ЗначениеОтбора) = Тип("СписокЗначений") Тогда
			Массив = СтрокаОтбора.ЗначениеОтбора.ВыгрузитьЗначения();
			Запрос.УстановитьПараметр(СтрокаОтбора.ИмяОтбора, Массив);
			Если Массив.Количество()>0 Тогда
				Запрос.УстановитьПараметр(СтрокаОтбора.ИмяОтбора + "Владелец", Массив[0].Владелец);
			Иначе
				Запрос.УстановитьПараметр(СтрокаОтбора.ИмяОтбора + "Владелец", неопределено);
			КонецЕсли; 
		Иначе
			Запрос.УстановитьПараметр(СтрокаОтбора.ИмяОтбора, СтрокаОтбора.ЗначениеОтбора);
			Запрос.УстановитьПараметр(СтрокаОтбора.ИмяОтбора + "Владелец", СтрокаОтбора.ЗначениеОтбора.Владелец);
		КонецЕсли;
		
		Если Индекс > 0 Тогда
			Запрос.Текст = Запрос.Текст + ",
				|";
		КонецЕсли;

		Если СтрокаОтбора.ВидСравнения = ВидСравнения.ВСписке
			ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
			ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.Равно Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК " + ИмяПоляЗапроса + СтрокаОтбора.ИмяОтбора + "
			|	ПО " + ИмяПоляЗапроса + СтрокаОтбора.ИмяОтбора + ".Объект = " + ИмяПоляЗапроса + ".Ссылка И
			|	   " + ИмяПоляЗапроса + СтрокаОтбора.ИмяОтбора + ".Свойство = &" + СтрокаОтбора.ИмяОтбора + "Владелец И
			|	   " + ИмяПоляЗапроса + СтрокаОтбора.ИмяОтбора + ".Значение В (&" + СтрокаОтбора.ИмяОтбора + ")";
			
		ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.НеВСписке
			ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии
			ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда

			Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК " + ИмяПоляЗапроса + СтрокаОтбора.ИмяОтбора + "
			|	ПО " + ИмяПоляЗапроса + СтрокаОтбора.ИмяОтбора + ".Объект = " + ИмяПоляЗапроса + ".Ссылка И
			|	   " + ИмяПоляЗапроса + СтрокаОтбора.ИмяОтбора + ".Свойство = &" + СтрокаОтбора.ИмяОтбора + "Владелец И
			|	   " + ИмяПоляЗапроса + СтрокаОтбора.ИмяОтбора + ".Значение НЕ В (&" + СтрокаОтбора.ИмяОтбора + ")";
			
		КонецЕсли;
	КонецЦикла;
		
	Запрос.Текст = Запрос.Текст + "
		|";
		
КонецПроцедуры // ДобавитьФильтрыПоСвойствам()

// Печать реестра документов
//
// Параметры:
//  МассивДокументов - массив, содержащий документы, которые надо распечатать в реестре
//
Процедура ПечатьРеестра(Выборка)
	
	ТабДок = ЭлементыФормы.ПолеТабличногоДокументаРеестр;
	ТабДок.Очистить();
	Макет  = ПолучитьМакет("РеестрДокументов");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Реестр документов";
	ТабДок.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДок.Вывести(ОбластьМакета);

	К=0;
	Пока Выборка.Следующий() Цикл
		
		К = К+1;
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Заполнить(Выборка);
		ОбластьМакета.Параметры.НомерСтроки     = К;
		
		ТабДок.Вывести(ОбластьМакета);

	КонецЦикла;
	
	// Зададим параметры макета
	ТабДок.Автомасштаб = Истина;
	ТабДок.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;

	// Первую колонку не печатаем
	ТабДок.ОбластьПечати = ТабДок.Область(1,2,ТабДок.ВысотаТаблицы,ТабДок.ШиринаТаблицы);
	
	ТабДок.ФиксацияСлева  = 4;
	ТабДок.ФиксацияСверху = 3;
	
КонецПроцедуры // ПечатьРеестра()

// Добавить в запрос фильтры по документу
//
// Параметры:
//  Запрос - запрос в который надо добавить фильтры
//  ДокВид - вид документа (строкой)
//  МассивСвойств - массив свойство по которым надо добавить фильтр
//  ФлагЕстьУсловия - флаг, были ли уже добавлены условия в запрос (есть ли уже в запросе секция "ГДЕ")
//
// Возвращаемое значение:
//  Истина - если в запрос были добавлены условия в секцию "ГДЕ"
//  Ложь   - в противном случае
//
Функция ДобавитьФильтрыПоДокументу(Запрос, ДокВид, МассивСвойств, ФлагЕстьУсловия)
	Перем ПервыйРаз;
	Перем ТекСтр;
	Перем Массив;

	ПервыйРаз = Не ФлагЕстьУсловия; // если уже есть категории, слово ГДЕ добавлять не надо.
	Для Каждого СтрокаОтбора Из Отбор Цикл

		Если НЕ СтрокаОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаОтбора.ИмяОтбора = "Контрагент" Тогда
			Если ДокВид = "ПриходныйКассовыйОрдер" Тогда
				ИмяПоля = "Плательщик";
			ИначеЕсли ДокВид = "РасходныйКассовыйОрдер" Тогда
				ИмяПоля = "Получатель";
			Иначе
				ИмяПоля = "Контрагент";
			КонецЕсли;
		ИначеЕсли СтрокаОтбора.ИмяОтбора = "Склад" Тогда
			Если ЕстьРеквизитДокумента("СкладОрдер", Метаданные.Документы[ДокВид]) Тогда
				ИмяПоля = "СкладОрдер";
			Иначе
				ИмяПоля = "Склад";
			КонецЕсли;
		Иначе
			ИмяПоля = СтрокаОтбора.ИмяОтбора;
		КонецЕсли;

		Если СтрокаОтбора.ИмяОтбора = "ДокументОтчета" Тогда
			Продолжить;
		ИначеЕсли Не СтрокаОтбора.ИмяОтбора = "Проведен"
		        И Не СтрокаОтбора.ИмяОтбора = "ПометкаУдаления" Тогда
			Если Не ЕстьРеквизитДокумента(ИмяПоля, Метаданные.Документы[ДокВид]) Тогда
				//Запрос.Текст = Запрос.Текст + ?(ПервыйРаз, "
				//	|ГДЕ ", " И ") + "
				//	| ЛОЖЬ";
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		// Фильтр по свойствам уже должен стоять
		Если Не мТаблицаФильтры.Найти(СтрокаОтбора.ИмяОтбора, "ИмяПоля").Свойство = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(СтрокаОтбора.ЗначениеОтбора) = Тип("СписокЗначений") Тогда
			Запрос.УстановитьПараметр(СтрокаОтбора.ИмяОтбора, СтрокаОтбора.ЗначениеОтбора.ВыгрузитьЗначения());

			Если СтрокаОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
				Запрос.Текст = Запрос.Текст + ?(ПервыйРаз, "
					|ГДЕ ", " И ") + "
					| Док." + ИмяПоля + " В ИЕРАРХИИ (&" + СтрокаОтбора.ИмяОтбора + ")";
			ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
				Запрос.Текст = Запрос.Текст + ?(ПервыйРаз, "
					|ГДЕ ", " И ") + "
					|НЕ Док." + ИмяПоля + " В ИЕРАРХИИ (&" + СтрокаОтбора.ИмяОтбора + ")";
			ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
				Запрос.Текст = Запрос.Текст + ?(ПервыйРаз, "
					|ГДЕ ", " И ") + "
					| Док." + ИмяПоля + " В (&" + СтрокаОтбора.ИмяОтбора + ")";
			ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
				Запрос.Текст = Запрос.Текст + ?(ПервыйРаз, "
					|ГДЕ ", " И ") + "
					|НЕ Док." + ИмяПоля + " В (&" + СтрокаОтбора.ИмяОтбора + ")";
			КонецЕсли;

		Иначе

			Запрос.УстановитьПараметр(СтрокаОтбора.ИмяОтбора, СтрокаОтбора.ЗначениеОтбора);

			Если СтрокаОтбора.ВидСравнения = ВидСравнения.Равно Тогда
				Запрос.Текст = Запрос.Текст + ?(ПервыйРаз, "
					|ГДЕ ", " И ") + "
					| Док." + ИмяПоля + " = &" + СтрокаОтбора.ИмяОтбора;
			ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
				Запрос.Текст = Запрос.Текст + ?(ПервыйРаз, "
					|ГДЕ ", " И ") + "
					|НЕ Док." + ИмяПоля + " = &" + СтрокаОтбора.ИмяОтбора;
			КонецЕсли;
		КонецЕсли;

		ПервыйРаз = Ложь;

	КонецЦикла;

	Возврат Не ПервыйРаз;

КонецФункции // ДобавитьФильтрыПоДокументу()

// Добавляет в запрос необходимые виды документов
//
// Параметры:
//  Запрос - запрос в который добавляется указанный	вид документа
//  МассивВидовДокументов - массив содержащий виды документов (строкой) которые надо добавить в запрос
//  МассивСвойств - массив свойств документов по которым надо установить фильтр
//  СтрКатегорий - строка таблицы фильтров в которой указаны фильтры по категории документов
//
Функция ДобавитьДокументВЗапрос(Запрос, МассивВидовДокументов, МассивСвойств, СтрокаОтбора)
	Перем ЕстьФильтры;
	Перем ФлагЕстьУсловия;

	ФлагЕстьКатегории = Не СтрокаОтбора = Неопределено;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтобранныеДокументы.*,
	|	ОтобранныеДокументы.Ссылка.Комментарий КАК Комментарий
	|ИЗ(
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документы.*
	|ИЗ (";
	Если Не ДатаНач = Дата("00010101") Тогда
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	КонецЕсли;
	Если Не ДатаКон = Дата("00010101") Тогда
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	КонецЕсли;
	К1 = -1;
	Для К = 0 По МассивВидовДокументов.Количество() - 1 Цикл
		//Здесь мы должны понять, не установлен ли фильтр по какому-либо реквизиту, которого нет у документа
		//указанного вида. Если установлен, то мы просто не включаем документ в запрос, исключая его из отчета
		Исключить = Ложь;
		МетаданныеДокумента = Метаданные.Документы[МассивВидовДокументов[К]];
		Для Каждого СтрокаОтбораДляПеребора Из Отбор Цикл

			Если НЕ СтрокаОтбораДляПеребора.Использование Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ СтрокаОтбораДляПеребора.ИмяОтбора = "ДокументОтчета"
				И Не СтрокаОтбораДляПеребора.ИмяОтбора = "Проведен"
				И Не СтрокаОтбораДляПеребора.ИмяОтбора = "ПометкаУдаления"
				И НЕ СтрокаОтбораДляПеребора.ИмяОтбора = "Категория"
				И Найти(СтрокаОтбораДляПеребора.ПредставлениеОтбора, "(свойство документов)") = 0 Тогда
				Если СтрокаОтбораДляПеребора.ИмяОтбора = "Контрагент" Тогда
					Если МассивВидовДокументов[К] = "ПриходныйКассовыйОрдер" Тогда
						ИмяРеквизита = "Плательщик";
					ИначеЕсли МассивВидовДокументов[К] = "РасходныйКассовыйОрдер" Тогда
						ИмяРеквизита = "Получатель";
					Иначе
						ИмяРеквизита = "Контрагент";
					КонецЕсли;
				ИначеЕсли СтрокаОтбораДляПеребора.ИмяОтбора = "Склад" Тогда
					Если ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента) Тогда
						ИмяРеквизита = "СкладОрдер";
					Иначе
						ИмяРеквизита = "Склад";
					КонецЕсли;
				Иначе
					ИмяРеквизита = СтрокаОтбораДляПеребора.ИмяОтбора;
				КонецЕсли;
				Если НЕ ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Тогда
					Исключить = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Исключить Тогда
			Продолжить;
		КонецЕсли;
		К1 = К1 + 1;
		Если К1 > 0 Тогда
			Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Док.Ссылка,
			|	Док.Дата,
			|	Док.Номер,
			|	""" + МетаданныеДокумента.Представление() + """ КАК ВидДокумента,
			|	" + ?(ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента), "Док.ВидОперации", "NULL") + " КАК ВидОперации,
			|	" + ?(ЕстьРеквизитДокумента("Организация", МетаданныеДокумента), "Док.Организация", "NULL") + " КАК Организация,
			|	";
			Если МассивВидовДокументов[К] = "ПриходныйКассовыйОрдер" Тогда
				ИмяРеквизитаКонтрагент = "Плательщик";
			иначеЕсли МассивВидовДокументов[К] = "РасходныйКассовыйОрдер" Тогда
				ИмяРеквизитаКонтрагент = "Получатель";
			Иначе
				ИмяРеквизитаКонтрагент = "Контрагент";
			КонецЕсли;
			Если ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента) Тогда
				ИмяРеквизитаСклад = "СкладОрдер";
			Иначе
				ИмяРеквизитаСклад = "Склад";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + ?(ЕстьРеквизитДокумента(ИмяРеквизитаКонтрагент, МетаданныеДокумента), "Док."+ИмяРеквизитаКонтрагент, "NULL") + " КАК Контрагент,
			|	" + ?(ЕстьРеквизитДокумента(ИмяРеквизитаСклад, МетаданныеДокумента), "Док."+ИмяРеквизитаСклад, "NULL") + " КАК Склад,
			|	" + ?(ЕстьРеквизитДокумента("СуммаДокумента", МетаданныеДокумента), "Док.СуммаДокумента", "NULL") + " КАК СуммаДокумента,
			|	" + ?(ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), "Док.ВалютаДокумента", "NULL") + " КАК ВалютаДокумента,
			|	" + ?(ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента), "Док.Ответственный", "NULL") + " КАК Ответственный
			|ИЗ
			|	Документ." + МассивВидовДокументов[К] + " КАК Док
			|";

		ФлагЕстьУсловия = Ложь;

		Если МассивСвойств.Количество() > 0 Тогда
			ДобавитьФильтрыПоСвойствам(Запрос, МассивСвойств);
		КонецЕсли;

		ЕстьФильтры  = ДобавитьФильтрыПоДокументу(Запрос, МассивВидовДокументов[К], МассивСвойств, ФлагЕстьУсловия);

		Если Не ДатаНач = '00010101000000' Тогда
			Запрос.Текст = Запрос.Текст + ?(ЕстьФильтры, " И ", " ГДЕ ") + "
				|Док.Дата >= &ДатаНач
				|";
			ЕстьФильтры = Истина;
		КонецЕсли;
		Если Не ДатаКон = '00010101000000' Тогда
			Запрос.Текст = Запрос.Текст + ?(ЕстьФильтры, " И ", " ГДЕ ") + "
				|Док.Дата <= &ДатаКон
				|";
			ЕстьФильтры = Истина;
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + ") КАК Документы";

		Если ФлагЕстьКатегории Тогда

			// создадим массив значений фильтра
			Если ТипЗнч(СтрокаОтбора.ЗначениеОтбора) = Тип("СписокЗначений") Тогда
				Массив = СтрокаОтбора.ЗначениеОтбора.ВыгрузитьЗначения();
				Запрос.УстановитьПараметр(СтрокаОтбора.ИмяОтбора, Массив);
			Иначе
				Запрос.УстановитьПараметр(СтрокаОтбора.ИмяОтбора, СтрокаОтбора.ЗначениеОтбора);
			КонецЕсли;

			Если СтрокаОтбора.ВидСравнения = ВидСравнения.Равно
				ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.ВСписке 
				ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов
				|		ПО (РегистрСведений.КатегорииОбъектов.Объект.Ссылка = Документы.Ссылка)
				|		И(РегистрСведений.КатегорииОбъектов.Категория В (&"+СтрокаОтбора.ИмяОтбора+"))
				|";

			ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.НеРавно
				ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеВСписке
				ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда

				Запрос.Текст = Запрос.Текст + "
				|, РегистрСведений.КатегорииОбъектов КАК КатОбъектов
				|	ГДЕ КатОбъектов.Объект.Ссылка <> Документы.Ссылка И
				|      КатОбъектов.Категория В (&"+СтрокаОтбора.ИмяОтбора+")
				|";

			КонецЕсли;
		КонецЕсли;

	Запрос.Текст = Запрос.Текст + ") КАК ОтобранныеДокументы
				|УПОРЯДОЧИТЬ ПО Дата, Ссылка";

	Возврат (К1>=0)

КонецФункции // ДобавитьДокументВЗапрос()

// Обработка выбранных документов
//
// Параметры:
//  Нет.
//
Процедура ВидОбработкиДокументы() Экспорт
	Перем МассивСвойств;
	Перем МассивВидовДокументов;
	Перем Запрос;
	Перем Индекс;
	Перем СтрФильтров;
	Перем СтрКатегорий;

	МассивСвойств = Новый Массив;
	СтрКатегорий  = Неопределено;

	Для Каждого К Из Отбор Цикл

		Если НЕ К.Использование Тогда
			Продолжить;
		КонецЕсли;

		СтрФильтров = мТаблицаФильтры.Найти(К.ИмяОтбора, "ИмяПоля");

		// На случай если не выбран фильтр
		Если СтрФильтров = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не СтрФильтров.Свойство = Неопределено Тогда
			МассивСвойств.Добавить(К);
		КонецЕсли;
		Если К.ИмяОтбора = "Категория" Тогда
			СтрКатегорий = К;
		КонецЕсли;

		// Проверим на заполненность отбора по виду документа
		Если К.ИмяОтбора = "ДокументОтчета" Тогда
			Если ТипЗнч(К.ЗначениеОтбора) = Тип("СписокЗначений") 
				И К.ЗначениеОтбора.Количество()=0 Тогда
				Предупреждение("Надо обязательно указать значение отбора для отбора по виду документа!", 60);
				Возврат;
			Иначе
				Если ЗначениеНеЗаполнено(К.ЗначениеОтбора) Тогда
					Предупреждение("Надо обязательно указать значение отбора для отбора по виду документа!", 60);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	МассивВидовДокументов = Новый Массив;
	Запрос = Новый Запрос;

	Индекс = 0;
	СтрокаОтбора = Отбор.Найти("ДокументОтчета", "ИмяОтбора");

	Если СтрокаОтбора = Неопределено Тогда
		Для Каждого К Из мСписокВидовДокументов Цикл
			МассивВидовДокументов.Добавить(К.Значение);
		КонецЦикла;
	Иначе
		Если СтрокаОтбора.Использование Тогда
			Если СтрокаОтбора.ВидСравнения = ВидСравнения.НеРавно
				ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда

				СписокИсключений = Новый СписокЗначений;
				Если ТипЗнч(СтрокаОтбора.ЗначениеОтбора) <> Тип("СписокЗначений") Тогда
					СписокИсключений.Добавить(СтрокаОтбора.ЗначениеОтбора);
				Иначе
					Для Каждого К Из СтрокаОтбора.ЗначениеОтбора Цикл
						СписокИсключений.Добавить(К.Значение);
					КонецЦикла;
				КонецЕсли;
				Для Каждого К Из мСписокВидовДокументов Цикл
					Если СписокИсключений.НайтиПоЗначению(К.Значение) = Неопределено Тогда
						МассивВидовДокументов.Добавить(К.Значение);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ТипЗнч(СтрокаОтбора.ЗначениеОтбора) <> Тип("СписокЗначений") Тогда
					МассивВидовДокументов.Добавить(СтрокаОтбора.ЗначениеОтбора);
				Иначе
					Для Каждого К Из СтрокаОтбора.ЗначениеОтбора Цикл
						МассивВидовДокументов.Добавить(К.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Для Каждого К Из мСписокВидовДокументов Цикл
				МассивВидовДокументов.Добавить(К.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ДобавитьДокументВЗапрос( Запрос, МассивВидовДокументов, МассивСвойств, СтрКатегорий) Тогда
		Предупреждение("Установлены фильтры по реквизитам, которых нет в выбранных видах документов!
		|Отчет не может быть сформирован.");
		возврат;
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	ПечатьРеестра(Выборка);

КонецПроцедуры // ВидОбработкиДокументы()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Состояние("Заполнение по умолчанию");

	ЗаполнитьНачальныеНастройки(Истина);
	ЗаполнитьПоРеквизитам();
	
	// Установим дату начала отчета
	Если Не ЗначениеНеЗаполнено(глТекущийПользователь) Тогда
		ДатаНач = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяДатаНачалаОтчетов");
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Обработчик события ПередУдалением элемента формы Отбор.
//
Процедура ОтборПередУдалением(Элемент, Отказ)

	Если Элемент.ТекущиеДанные <> Неопределено И мСписокОбязательныхОтборов.НайтиПоЗначению(Элемент.ТекущиеДанные.ИмяОтбора) <> Неопределено Тогда

		Отказ = Истина;

	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы Отбор.
//
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)

	Если Элемент.ТекущиеДанные <> Неопределено
		И Элемент.ТекущаяКолонка.Имя = "Поле"
		И НЕ ПустаяСтрока(СокрЛП(Элемент.ТекущиеДанные.ИмяОтбора))
		И мСписокОбязательныхОтборов.НайтиПоЗначению(СокрЛП(Элемент.ТекущиеДанные.ИмяОтбора)) <> Неопределено Тогда

		Отказ = Истина;

	КонецЕсли; 

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы Отбор.
//
Процедура ОтборПередНачаломДобавления(Элемент, Отказ, Копирование)

	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли; 

КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента формы Отбор.
//
Процедура ОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущиеДанные.ЗначениеОтбора = Неопределено Тогда

		Если Элемент.ТекущиеДанные.ВидСравнения = ВидСравнения.Равно ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравнения.НеРавно Тогда
			Если ТипЗнч(Элемент.ТекущиеДанные.ОписаниеТиповЗначенийОтбора) = Тип("ОписаниеТипов") Тогда
				Элемент.ТекущиеДанные.ЗначениеОтбора = ОпределитьПустоеЗначениеТипа(Элемент.ТекущиеДанные.ОписаниеТиповЗначенийОтбора);
			КонецЕсли; 
		Иначе
			Элемент.ТекущиеДанные.ЗначениеОтбора = Новый СписокЗначений;
		КонецЕсли; 

	КонецЕсли; 

КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы Отбор.Поле.
//
Процедура ОтборПолеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Форма = ПолучитьФорму("ФормаВыбора", Элемент, "дляФормаФильтра");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция выбора фильтра не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИсходнаяТаблица", "СписокФильтров");

	СтруктураСуществующиеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;

	Для Каждого Строка Из Отбор Цикл

		Если ПустаяСтрока(Строка.ИмяОтбора) Тогда
			Продолжить;
		КонецЕсли;

		// Кроме этой строки
		Если Отбор.Индекс(Строка) <> Отбор.Индекс(ЭлементыФормы.Отбор.ТекущаяСтрока) Тогда
			СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяОтбора);
		КонецЕсли;

	КонецЦикла;
	
	Если Не ПустаяСтрока(ЭлементыФормы.Отбор.ТекущиеДанные.ИмяОтбора) Тогда
		СтруктураСуществующиеЗначения.Вставить(ЭлементыФормы.Отбор.ТекущиеДанные.ИмяОтбора);
	КонецЕсли;

	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораФильтров = Форма;

КонецПроцедуры

// Обработчик события ОбработкаВыбора элемента формы Отбор.Поле.
//
Процедура ОтборПолеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТабличноеПоле = ЭлементыФормы.Отбор;

	Если ТабличноеПоле.ТекущаяСтрока  = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РедактируемаяСтрока = ТабличноеПоле.Значение[ТабличноеПоле.Значение.Индекс(ТабличноеПоле.ТекущаяСтрока)];

	Для Каждого Строка Из ВыбранноеЗначение Цикл 

		РедактируемаяСтрока.ИмяОтбора           = Строка.ИмяФильтра;
		РедактируемаяСтрока.ПредставлениеОтбора = Строка.ПредставлениеФильтра;
		РедактируемаяСтрока.ОписаниеТиповЗначенийОтбора = Строка.ОписаниеТипов;

		МассивТипов = Строка.ОписаниеТипов.Типы();

		// Если тип единичный, то присвоим пустое значение этого типа
		Если МассивТипов.Количество() = 1 Тогда
			РедактируемаяСтрока.ЗначениеОтбора = ПустоеЗначениеТипа(МассивТипов[0]);
		Иначе
			РедактируемаяСтрока.ЗначениеОтбора = Неопределено;
		КонецЕсли;

		РедактируемаяСтрока.Использование = Истина;
		РедактируемаяСтрока.ВидСравнения = ВидСравнения.Равно;

	КонецЦикла;

КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы Отбор.ВидСравнения.
//
Процедура ОтборВидСравненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВидовСравнения = Новый СписокЗначений;
	Если СтрЧислоВхождений(ЭлементыФормы.Отбор.ТекущаяСтрока.ИмяОтбора, "Категор") Тогда
		СписокВидовСравнения.Добавить(ВидСравнения.Равно);
		СписокВидовСравнения.Добавить(ВидСравнения.НеРавно);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.НеВСписке);
	ИначеЕсли ЭлементыФормы.Отбор.ТекущаяСтрока.ИмяОтбора = "ДокументОтчета"  Тогда
		СписокВидовСравнения.Добавить(ВидСравнения.Равно);
		СписокВидовСравнения.Добавить(ВидСравнения.НеРавно);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.НеВСписке);
	ИначеЕсли ТипЗнч(ЭлементыФормы.Отбор.ТекущаяСтрока.ОписаниеТиповЗначенийОтбора) = Тип("ОписаниеТипов")
		И ЭлементыФормы.Отбор.ТекущаяСтрока.ОписаниеТиповЗначенийОтбора.СодержитТип(Тип("Булево")) Тогда
		СписокВидовСравнения.Добавить(ВидСравнения.Равно);
	Иначе
		СписокВидовСравнения.Добавить(ВидСравнения.Равно);
		СписокВидовСравнения.Добавить(ВидСравнения.НеРавно);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСпискеПоИерархии);
		СписокВидовСравнения.Добавить(ВидСравнения.НеВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.НеВСпискеПоИерархии);
	КонецЕсли;

	Элемент.СписокВыбора = СписокВидовСравнения;

КонецПроцедуры

// Обработчик события ОбработкаВыбора элемента формы Отбор.ВидСравнения.
//
Процедура ОтборВидСравненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ЗначениеОтбораТекущейСтроки = ЭлементыФормы.Отбор.ТекущаяСтрока.ЗначениеОтбора;

	Если ВыбранноеЗначение = ВидСравнения.Равно 
		ИЛИ ВыбранноеЗначение = ВидСравнения.НеРавно Тогда

		Если ТипЗнч(ЗначениеОтбораТекущейСтроки) = Тип("СписокЗначений") Тогда

			Если ЗначениеОтбораТекущейСтроки.Количество() > 0 тогда
				ЗначениеОтбораТекущейСтроки = ЗначениеОтбораТекущейСтроки[0].Значение;
			КонецЕсли;

		КонецЕсли;

	Иначе

		Если ТипЗнч(ЗначениеОтбораТекущейСтроки) <> Тип("СписокЗначений") Тогда

			СтароеЗначение = ЗначениеОтбораТекущейСтроки;

			ЭлементыФормы.Отбор.ТекущаяСтрока.ЗначениеОтбора = Новый СписокЗначений;
			Если СтароеЗначение <> Неопределено Тогда
				ЭлементыФормы.Отбор.ТекущаяСтрока.ЗначениеОтбора.Добавить(СтароеЗначение);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы Отбор.Значение.
//
Процедура ОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ПустаяСтрока(ЭлементыФормы.Отбор.ТекущаяСтрока.ПредставлениеОтбора) Тогда
		Предупреждение("Выберите отбор!",60);
		СтандартнаяОбработка=Ложь;
		Возврат;
	КонецЕсли;

	Фильтр = ЭлементыФормы.Отбор.ТекущаяСтрока;

	Владелец = ОпределитьВладельца();

	Если Фильтр.ОписаниеТиповЗначенийОтбора = Неопределено Тогда

		СтрокаГруппировки = мТаблицаФильтры.Найти(Фильтр.ИмяОтбора, "ИмяПоля");
		Если СтрокаГруппировки <> Неопределено Тогда
			Фильтр.ОписаниеТиповЗначенийОтбора = СтрокаГруппировки.ОписаниеТипов;
		КонецЕсли; 

	КонецЕсли; 

	ТипыФильтра = Фильтр.ОписаниеТиповЗначенийОтбора;

	МассивТипов = ТипыФильтра.Типы();

	Если ЭлементыФормы.Отбор.ТекущаяСтрока.ВидСравнения = ВидСравнения.Равно
		ИЛИ ЭлементыФормы.Отбор.ТекущаяСтрока.ВидСравнения = ВидСравнения.НеРавно Тогда

		МассивТипов = ТипыФильтра.Типы();

		Если МассивТипов.Количество() = 1 Тогда

			Если МассивТипов[0]=Тип("Число") Тогда
				Элемент.Значение=0;
			ИначеЕсли МассивТипов[0]=Тип("Строка") Тогда
				Если Фильтр.ИмяОтбора = "ДокументОтчета" Тогда
					ВыборВидаДокумента(Элемент);
					СтандартнаяОбработка = Ложь;
					Возврат;
				Иначе
					Элемент.Значение = "";
				КонецЕсли;
			ИначеЕсли МассивТипов[0]=Тип("Дата") Тогда
				Элемент.Значение=ТекущаяДата();
			ИначеЕсли МассивТипов[0]=Тип("Булево") Тогда
				Элемент.Значение=Истина;
			Иначе
				Элемент.Значение = Новый(МассивТипов[0]);
			КонецЕсли;

			Элемент.ВыбиратьТип = Ложь;

		Иначе

			Элемент.ОграничениеТипа = Фильтр.ОписаниеТиповЗначенийОтбора;
			Элемент.ВыбиратьТип = Истина;

		КонецЕсли;

		Если МассивТипов[0]=Тип("СправочникСсылка.КатегорииОбъектов") Тогда

			СтандартнаяОбработка=Ложь;

			СтрокаФильтры=мТаблицаФильтры.Найти(ЭлементыФормы.Отбор.ТекущаяСтрока.ИмяОтбора,
			"ИмяПоля");

			ФормаВыбораКатегории= Справочники["КатегорииОбъектов"].ПолучитьФормуВыбора(, Элемент,);
			ФормаВыбораКатегории.РежимВыбора = Истина;
			ФормаВыбораКатегории.Отбор.НазначениеКатегории.Значение      = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
			ФормаВыбораКатегории.Отбор.НазначениеКатегории.Использование = Истина;

			ФормаВыбораКатегории.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
			ФормаВыбораКатегории.Открыть();

		КонецЕсли;

	Иначе

		Если ЭлементыФормы.Отбор.ТекущаяСтрока.ВидСравнения = ВидСравнения.ВСписке
			ИЛИ ЭлементыФормы.Отбор.ТекущаяСтрока.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
			ИЛИ ЭлементыФормы.Отбор.ТекущаяСтрока.ВидСравнения = ВидСравнения.НеВСписке
			ИЛИ ЭлементыФормы.Отбор.ТекущаяСтрока.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда

			Если Фильтр.ИмяОтбора = "ДокументОтчета" Тогда

				ВыборВидаДокумента(Элемент, Истина);
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Массив = Новый Массив;
		Массив.Добавить("СписокЗначений");
		ОписаниеТиповСписокЗначений  = Новый ОписаниеТипов(Массив);
		Элемент.ОграничениеТипа      = ОписаниеТиповСписокЗначений;
		Элемент.Значение.ТипЗначения = Фильтр.ОписаниеТиповЗначенийОтбора;
		Элемент.ВыбиратьТип          = Ложь;

	КонецЕсли;

	Если Владелец <> Неопределено Тогда
		Элемент.ВыборПоВладельцу = Владелец;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Отбор.Значение.
//
Процедура ОтборЗначениеПриИзменении(Элемент)

	Если Элемент.Значение <> Неопределено И ЭлементыФормы.Отбор.ТекущиеДанные <> Неопределено Тогда

		Если (ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") И Элемент.Значение.Количество() > 0)
		 ИЛИ (Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент.Значение)) И НЕ Элемент.Значение.Пустая())
		 ИЛИ (Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент.Значение)) И НЕ Элемент.Значение.Пустая()) Тогда

			ЭлементыФормы.Отбор.ТекущиеДанные.Использование = Истина;

		КонецЕсли; 

	КонецЕсли; 

КонецПроцедуры

// процедура - обработчик нажатия на кнопку выполнить
//
//
Процедура КнопкаСформироватьНажатие(Элемент)

	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода", 60);
		Возврат;
	КонецЕсли; 

	ВидОбработкиДокументы();
	ЭлементыФормы.ПанельОтчета.ТекущаяСтраница = ЭлементыФормы.ПанельОтчета.Страницы["Реестр"];

КонецПроцедуры // КнопкаВыполнитьНажатие()

// процедура - обработчик нажатия на кнопку выбор периода
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП = Новый НастройкаПериода;
	НП.ДатаНачала    = ДатаНач;
	НП.ДатаОкончания = ДатаКон;
	Если НП.Редактировать() Тогда
		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// процедура - обработчик выбора типа фильтра
//
Процедура ТипФильтраОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не (ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока = Неопределено) Тогда
		ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока.ТипФильтра = ВыбранноеЗначение;
	КонецЕсли;

КонецПроцедуры // ТипФильтраОбработкаВыбора

// Процедура - обработчик события "При открытии" формы отчета.
//
Процедура ПриОткрытии()
	Перем НоваяКолонка;

	Если Не ЗначениеНеЗаполнено(НачальноеЗначениеВыбора) Тогда

		мНастройка = НачальноеЗначениеВыбора;

	КонецЕсли;

	Если Не ВладелецФормы = Неопределено Тогда

		ЗаполнитьРеквизитыПоДиалогу();

		КнопкаСформироватьНажатие(ЭлементыФормы.КнопкаСформировать);
		ЭлементыФормы.ПанельОтчета.ТекущаяСтраница = ЭлементыФормы.ПанельОтчета.Страницы["Таблица"];

	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОХРАНЕНИЯ/ВОССТАНОВЛЕНИЯ НАСТРОЕК ОТЧЕТА

// Перенос настройки, заданной значениями элементов формы отчета, в реквизиты отчета.
//
// Параметры: 
//  Нет.
//
Процедура ЗаполнитьРеквизитыПоДиалогу()

	// Добавим отборы
	Таблица = ЭлементыФормы.ТабличноеПолеСписокФильтров.Значение;
	ФильтрыОтчета.Очистить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл

		Если СтрокаТаблицы.СписокФильтров.Количество() = 0 Тогда
			НоваяСтрока = ФильтрыОтчета.Добавить();
			НоваяСтрока.ИмяФильтра            = СтрокаТаблицы.ИмяФильтра;
			НоваяСтрока.ПредставлениеФильтра  = СтрокаТаблицы.ПредставлениеФильтра;
			НоваяСтрока.ЗначениеФильтра       = СтрокаТаблицы.ЗначениеФильтра;
			НоваяСтрока.ОписаниеФильтра       = СтрокаТаблицы.ОписаниеФильтра;
			НоваяСтрока.ТипФильтра            = СтрокаТаблицы.ТипФильтра;
			НоваяСтрока.ПредставлениеЗначения = СтрокаТаблицы.ПредставлениеЗначения;
		Иначе

			Для Каждого Фильтр Из СтрокаТаблицы.СписокФильтров Цикл

				НоваяСтрока = ФильтрыОтчета.Добавить();
				НоваяСтрока.ИмяФильтра            = СтрокаТаблицы.ИмяФильтра;
				НоваяСтрока.ПредставлениеФильтра  = СтрокаТаблицы.ПредставлениеФильтра;
				НоваяСтрока.ЗначениеФильтра       = Фильтр.ЗначениеФильтра;
				НоваяСтрока.ОписаниеФильтра       = СтрокаТаблицы.ОписаниеФильтра;
				НоваяСтрока.ТипФильтра            = СтрокаТаблицы.ТипФильтра;
				НоваяСтрока.ПредставлениеЗначения = Фильтр.ПредставлениеЗначения;

			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьРеквизитыПоДиалогу()

Процедура ОтборЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	РедактируемаяСтрока = Отбор[Отбор.Индекс(ЭлементыФормы.Отбор.ТекущаяСтрока)];

	Если РедактируемаяСтрока.ИмяОтбора = "ДокументОтчета" Тогда

		СтандартнаяОбработка = Ложь;

		Если РедактируемаяСтрока.ВидСравнения = ВидСравнения.Равно
			ИЛИ РедактируемаяСтрока.ВидСравнения = ВидСравнения.НеРавно Тогда

			Для Каждого Строка Из ВыбранноеЗначение Цикл // должно содержать не более одной строки

				РедактируемаяСтрока.ЗначениеОтбора       = Строка.ИмяФильтра;
				//РедактируемаяСтрока.ПредставлениеОтбора = Строка.ПредставлениеФильтра;

			КонецЦикла;

		ИначеЕсли РедактируемаяСтрока.ВидСравнения = ВидСравнения.ВСписке
			ИЛИ РедактируемаяСтрока.ВидСравнения = ВидСравнения.НеВСписке Тогда

			РедактируемаяСтрока.ЗначениеОтбора = Новый СписокЗначений;

			Для Каждого Строка Из ВыбранноеЗначение Цикл // должно содержать не более одной строки

				РедактируемаяСтрока.ЗначениеОтбора.Добавить(Строка.ИмяФильтра, Строка.ПредставлениеФильтра);

			КонецЦикла;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОтборПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки.ИмяОтбора = "ДокументОтчета" 
		И (ДанныеСтроки.ВидСравнения = ВидСравнения.Равно
		ИЛИ ДанныеСтроки.ВидСравнения = ВидСравнения.НеРавно) Тогда

		МетаданныеДокумент = Метаданные.Документы.Найти(ДанныеСтроки.ЗначениеОтбора);
		Если МетаданныеДокумент<>Неопределено Тогда
			ОформлениеСтроки.Ячейки.Значение.Текст =  МетаданныеДокумент.Представление();
		Иначе
			ОформлениеСтроки.Ячейки.Значение.Текст =  "<>";
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередСохранениемЗначений(Отказ)

	СохраненныеНастройки = Новый Структура;
	СохраненныеНастройки.Вставить("Отбор", Отбор.Скопировать());

	// Остальные реквизиты отчета сохраняются стандартно
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()

	Отбор.Очистить();

	Для Каждого Строка Из СохраненныеНастройки.Отбор Цикл
		НоваяСтрока = Отбор.Добавить();
		Для Каждого Кол Из Отбор.Колонки Цикл
			НоваяСтрока[Отбор.Колонки.Индекс(Кол)] = Строка[Отбор.Колонки.Индекс(Кол)];
		КонецЦикла; 
	КонецЦикла;

	// Остальные реквизиты отчета сохраняются стандартно
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Переменные для сохранения/восстановления настроек
мИмяОтчета = "РеестрДокументов";

МассивТаблицаЗначений = Новый Массив;
МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));

ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);
Отбор.Колонки.Добавить("ИмяОтбора");
Отбор.Колонки.Добавить("ОписаниеТиповЗначенийОтбора");
