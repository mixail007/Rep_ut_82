
Перем мФормаВыбораГруппировок;
Перем мФормаВыбораГруппировокСписок;
Перем мФормаВыбораПоказателей;
Перем мФормаВыбораПоказателейСписок;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
// 

// Функция определяет владельца для выбираемого значения отбора
//
// Параметры - НЕТ
//
// Возвращаемое значение - СправочникСсылка - владелец выбираемого значения отбора.
Функция ОпределитьВладельца() Экспорт

	Владелец = Неопределено;

	НайдСтрФильтры = мДеревоФильтры.Строки.Найти(ЭлементыФормы.Отбор.ТекущиеДанные.ИмяОтбора, "ИмяПоля", Истина);
	
	Если НайдСтрФильтры <> Неопределено Тогда
		
		ИмяПоляВладелец = НайдСтрФильтры.ИмяПоляВладелец;
		
		Если Не ПустаяСтрока(ИмяПоляВладелец) Тогда
			
			НайдСтр = ЭлементыФормы.Отбор.Значение.Найти(ИмяПоляВладелец, "ИмяОтбора");
			
			Если НайдСтр <> Неопределено Тогда
				
				Если ТипЗнч(НайдСтр.ЗначениеОтбора) <> Тип("СписокЗначений") Тогда
					
					Владелец = НайдСтр.ЗначениеОтбора;
					
				Иначе
					
					Если НайдСтр.ЗначениеОтбора.Количество() = 1 Тогда
						
						Владелец = НайдСтр.ЗначениеОтбора[0].Значение;
						
					ИначеЕсли НайдСтр.ЗначениеОтбора.Количество() > 0 Тогда
						
						СписокВладельцев = Новый СписокЗначений;
						
						Для Каждого Строка Из НайдСтр.ЗначениеОтбора Цикл
							СписокВладельцев.Добавить(Строка.Значение);
						КонецЦикла;
						
						Выбор = СписокВладельцев.ВыбратьЭлемент("Выберите владельца");
						
						Если Выбор <> Неопределено Тогда
							Владелец = Выбор.Значение;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

			Если Владелец = Неопределено Тогда
				
				НайдСтр = мДеревоФильтры.Строки.Найти(ИмяПоляВладелец, "ИмяПоля", Истина);
				
				Если НайдСтр <> Неопределено Тогда

					Типы = НайдСтр.ОписаниеТипов.Типы();

					Если Типы.Количество() = 1 Тогда
						
						ВвестиЗначение(Владелец, "Выберите владельца", Типы[0]);

					Иначе
						
						СписокВладельцев = Новый СписокЗначений;
						СписокВладельцев.ЗагрузитьЗначения(Типы);
						Выбор = СписокВладельцев.ВыбратьЭлемент("Выберите владельца");
						
						Если Выбор <> Неопределено Тогда
							
							ТипВладельца = Выбор.Значение;
							
							Если ТипВладельца <> Неопределено Тогда
								
								ВвестиЗначение(Владелец, "Выберите владельца", ТипВладельца);
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

			// Если это свойства, для них заполнено поле "Свойство"
		ИначеЕсли Не ЗначениеНеЗаполнено(НайдСтрФильтры.Свойство) > 0 Тогда

			Владелец = НайдСтрФильтры.Свойство;

		КонецЕсли;
	КонецЕсли;
	
	Возврат Владелец;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ОбработкаВыбора формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если Источник = мФормаВыбораГруппировок ИЛИ Источник = мФормаВыбораГруппировокСписок Тогда
		
		Для Каждого Строка Из ЗначениеВыбора Цикл

			НайденнаяСтрока = Группировки.Найти(Строка.ИмяГруппировки, "ИмяГруппировки");
			Если НайденнаяСтрока  = Неопределено  Тогда
				Если Строка.Пометка Тогда
					Группировка = Группировки.Добавить();
					Группировка.ИмяГруппировки = Строка.ИмяГруппировки;
					Группировка.ПредставлениеГруппировки = Строка.ПредставлениеГруппировки;
				КонецЕсли;	
			Иначе
				Если НЕ Строка.Пометка Тогда
					Группировки.Удалить(Группировки.Индекс(НайденнаяСтрока));
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ФОРМЫ

// Обработчик события формы ПриОткрытии.
//
Процедура ПриОткрытии()

	//Группировки = ГруппировкиОтчета.Выгрузить();
	Показатели = ПоказателиОтчета.Выгрузить();

	// Восстановим таблицу группировок.

	Группировки.Очистить();
	НоваяСтрока = Неопределено;

	МассивСтрока = Новый Массив; 
	МассивСтрока.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки("100", ДопустимаяДлина.Переменная);
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);

	Для Каждого Группировка Из ГруппировкиОтчета Цикл
		Если Группировка.РассчитыватьИтоги Тогда
			Если НоваяСтрока <> Неопределено Тогда
				НоваяСтрока.ДополнительныеПоля = Сред(НоваяСтрока.ДополнительныеПоля, 3);
			КонецЕсли;
			НоваяСтрока = Группировки.Добавить();
			НоваяСтрока.ПредставлениеГруппировки = Группировка.ПредставлениеГруппировки;
			НоваяСтрока.ИмяГруппировки = Группировка.ИмяГруппировки;
			НоваяСтрока.ОписаниеГруппировки = Группировка.ОписаниеГруппировки;
			НоваяСтрока.ТипИтога = Группировка.ТипИтога;

			НоваяСтрока.СписокДопПолей.Колонки.Очистить();
			НоваяСтрока.СписокДопПолей.Колонки.Добавить("ИмяГруппировки",           ОписаниеТиповСтрока);
			НоваяСтрока.СписокДопПолей.Колонки.Добавить("ПредставлениеГруппировки", ОписаниеТиповСтрока);
			НоваяСтрока.СписокДопПолей.Колонки.Добавить("ОписаниеГруппировки",      ОписаниеТиповСтрока);

		Иначе
			Если НоваяСтрока = Неопределено Тогда
				Сообщить("Неправильно задано поле группировки " + Группировка.ИмяГруппировки);
				НоваяСтрока = Группировки.Добавить();
				НоваяСтрока.СписокДопПолей.Колонки.Очистить();
				НоваяСтрока.СписокДопПолей.Колонки.Добавить("ИмяГруппировки",           ОписаниеТиповСтрока);
				НоваяСтрока.СписокДопПолей.Колонки.Добавить("ПредставлениеГруппировки", ОписаниеТиповСтрока);
				НоваяСтрока.СписокДопПолей.Колонки.Добавить("ОписаниеГруппировки",      ОписаниеТиповСтрока);

			КонецЕсли;

			НоваяСтрокаДопПоля = НоваяСтрока.СписокДопПолей.Добавить();
			НоваяСтрокаДопПоля.ИмяГруппировки           = Группировка.ИмяГруппировки;
			НоваяСтрокаДопПоля.ПредставлениеГруппировки = Группировка.ПредставлениеГруппировки;
			НоваяСтрокаДопПоля.ОписаниеГруппировки      = Группировка.ОписаниеГруппировки;

			// Интерфейсное представление
			НоваяСтрока.ДополнительныеПоля = НоваяСтрока.ДополнительныеПоля + ", "
			+ Группировка.ПредставлениеГруппировки;

		КонецЕсли;
	КонецЦикла;
	Если Группировки.Количество() > 0 Тогда
		Группировки[Группировки.Количество()-1].ДополнительныеПоля = Сред(НоваяСтрока.ДополнительныеПоля, 3);
	КонецЕсли;


	Для каждого Строки Из ФильтрыОтчета Цикл

		Если Отбор.Найти(Строки.ИмяФильтра,"ИмяОтбора") <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		НовыйОтбор = Отбор.Добавить();
		НовыйОтбор.ИмяОтбора = Строки.ИмяФильтра;
		НовыйОтбор.ПредставлениеОтбора = Строки.ПредставлениеФильтра;
		НовыйОтбор.Использование = Строки.ИспользованиеФильтра;
		НовыйОтбор.ВидСравнения = ВозвратитьВидаОтбораПоСтроке(Строки.ТипФильтра);
		Если Строки.ТипФильтра = "РАВНО" ИЛИ Строки.ТипФильтра = "НЕ РАВНО" Тогда
			НовыйОтбор.ЗначениеОтбора = Строки.ЗначениеФильтра;
		Иначе
			СписокЗначенийОтбора = Новый СписокЗначений;
			Для каждого СтрокаФильтров Из ФильтрыОтчета Цикл
				Если СтрокаФильтров.ИмяФильтра = Строки.ИмяФильтра Тогда
					СписокЗначенийОтбора.Добавить(СтрокаФильтров.ЗначениеФильтра);
				КонецЕсли;
			КонецЦикла;
			НовыйОтбор.ЗначениеОтбора = СписокЗначенийОтбора;
		КонецЕсли; 
	
	КонецЦикла; 


КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события НачалоВыбора поля ГруппировкаПредставление элемента формы Группировки.
//
Процедура ГруппировкиГруппировкаПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Форма = ПолучитьФорму("ФормаВыбора", Элемент, "дляФормаГруппировки");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция выбора группировки не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИсходнаяТаблица", "СписокГруппировок");

	СтруктураСуществующиеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;
	СтруктураСовсемНеиспользуемыеЗначения = Новый Структура;

	Для Каждого Строка Из Группировки Цикл

		Если ПустаяСтрока(Строка.ИмяГруппировки) Тогда
			Продолжить;
		КонецЕсли;

		// Кроме этой строки
		Если Группировки.Индекс(Строка) <> Группировки.Индекс(ЭлементыФормы.Группировки.ТекущаяСтрока) Тогда
			СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяГруппировки);
		КонецЕсли;

		Для Каждого СтрокаСтрока Из Строка.СписокДопПолей Цикл
			СтруктураНеиспользуемыеЗначения.Вставить(СтрокаСтрока.ИмяГруппировки);
		КонецЦикла;

	КонецЦикла;

	Если Не ПустаяСтрока(ЭлементыФормы.Группировки.ТекущиеДанные.ИмяГруппировки) Тогда
		СтруктураСуществующиеЗначения.Вставить(ЭлементыФормы.Группировки.ТекущиеДанные.ИмяГруппировки);
	КонецЕсли;


	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);
	СтруктураПараметров.Вставить("СтруктураСовсемНеиспользуемыеЗначения", СтруктураСовсемНеиспользуемыеЗначения);

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораГруппировок = Форма;
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора поля ГруппировкаПредставление элемента формы Группировки.
//
Процедура ГруппировкиГруппировкаПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТабличноеПоле = ЭлементыФормы.Группировки;

	Если ТабличноеПоле.ТекущаяСтрока  = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РедактируемаяСтрока = ТабличноеПоле.Значение[ТабличноеПоле.Значение.Индекс(ТабличноеПоле.ТекущаяСтрока)];

	ЗначениеВыбора = ВыбранноеЗначение;

	МассивСтрока = Новый Массив; 
	МассивСтрока.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки("100", ДопустимаяДлина.Переменная);
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);

	Для Каждого Строка Из ЗначениеВыбора Цикл 
		РедактируемаяСтрока.ИмяГруппировки = Строка.ИмяГруппировки;
		РедактируемаяСтрока.ПредставлениеГруппировки = Строка.ПредставлениеГруппировки;
		РедактируемаяСтрока.ОписаниеГруппировки = Строка.ОписаниеГруппировки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик начала выбора значения в поле "Дополнительные поля" строки таблицы группировок отчета.
//
Процедура ГруппировкиДополнительныеПоляНачалоВыбора(Элемент, СтандартнаяОбработка)

	Форма = ПолучитьФорму("ФормаВыбора", Элемент, "дляФормаГруппировкиДопПоля");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция выбора дополнительных полей не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	СтруктураПараметров.Вставить("ИсходнаяТаблица", "СписокГруппировок");

	СтруктураСуществующиеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;

	Для Каждого Строка Из Группировки Цикл

		Если Не ПустаяСтрока(Строка.ИмяГруппировки) Тогда
			СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяГруппировки);
		КонецЕсли;

		Если Группировки.Индекс(Строка) <> Группировки.Индекс(ЭлементыФормы.Группировки.ТекущаяСтрока) Тогда
			Для Каждого СтрокаСтрока Из Строка.СписокДопПолей Цикл
				СтруктураНеиспользуемыеЗначения.Вставить(СтрокаСтрока.ИмяГруппировки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	// Данные этой строки должны быть отмечены
	Для Каждого Строка Из ЭлементыФормы.Группировки.ТекущиеДанные.СписокДопПолей Цикл
		СтруктураСуществующиеЗначения.Вставить(Строка.ИмяГруппировки);
	КонецЦикла;

	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	
КонецПроцедуры // ТабличноеПолеГруппировкиОтчетаДополнительныеПоляНачалоВыбора()

// Процедура - обработчик очистки значения поля "Дополнительные поля" строки таблицы группировок отчета.
//
Процедура ГруппировкиДополнительныеПоляОчистка(Элемент, СтандартнаяОбработка)
	
	РедактируемаяСтрока = Группировки[Группировки.Индекс(ЭлементыФормы.Группировки.ТекущаяСтрока)];
	РедактируемаяСтрока.СписокДопПолей.Очистить();
	РедактируемаяСтрока.ДополнительныеПоля = "";
	
КонецПроцедуры // ТабличноеПолеГруппировкиОтчетаДополнительныеПоляОчистка()

Процедура ГруппировкиДополнительныеПоляОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ЭлементыФормы.Группировки.ТекущаяСтрока  = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РедактируемаяСтрока = Группировки[Группировки.Индекс(ЭлементыФормы.Группировки.ТекущаяСтрока)];

	МассивСтрока = Новый Массив; 
	МассивСтрока.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки("100", ДопустимаяДлина.Переменная);
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);

	РедактируемаяСтрока.СписокДопПолей.Колонки.Очистить();
	РедактируемаяСтрока.СписокДопПолей.Колонки.Добавить("ИмяГруппировки",           ОписаниеТиповСтрока);
	РедактируемаяСтрока.СписокДопПолей.Колонки.Добавить("ПредставлениеГруппировки", ОписаниеТиповСтрока);
	РедактируемаяСтрока.СписокДопПолей.Колонки.Добавить("ОписаниеГруппировки",      ОписаниеТиповСтрока);

	РедактируемаяСтрока.ДополнительныеПоля = "";

	Для Каждого Строка Из ВыбранноеЗначение Цикл 

		РедактируемаяСтрокаСписокДопПолей = РедактируемаяСтрока.СписокДопПолей.Добавить();
		РедактируемаяСтрокаСписокДопПолей.ИмяГруппировки = Строка.ИмяГруппировки;
		РедактируемаяСтрокаСписокДопПолей.ПредставлениеГруппировки = Строка.ПредставлениеГруппировки;
		РедактируемаяСтрокаСписокДопПолей.ОписаниеГруппировки = Строка.ОписаниеГруппировки;

		РедактируемаяСтрока.ДополнительныеПоля = РедактируемаяСтрока.ДополнительныеПоля + ", " 
		+ Строка.ПредставлениеГруппировки;

	КонецЦикла;

	РедактируемаяСтрока.ДополнительныеПоля  = Сред(РедактируемаяСтрока.ДополнительныеПоля, 3);
	
КонецПроцедуры // ГруппировкиДополнительныеПоляОбработкаВыбора()

// Обработчик события ПередУдалением элемента формы Группировки.
//
Процедура ГруппировкиПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
		 И Элемент.ТекущиеДанные.ИмяГруппировки = "Контрагент" Тогда
	
		Отказ = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы Отбор.Поле.
//
Процедура ОтборПолеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Форма = ПолучитьФорму("ФормаВыбора", Элемент, "дляФормаФильтра");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция выбора фильтра не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИсходнаяТаблица", "СписокФильтров");

	СтруктураСуществующиеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;

	Для Каждого Строка Из Отбор Цикл
		
		Если ПустаяСтрока(Строка.ИмяОтбора) Тогда
			Продолжить;
		КонецЕсли;
		
		// Кроме этой строки
		Если Отбор.Индекс(Строка) <> Отбор.Индекс(ЭлементыФормы.Отбор.ТекущаяСтрока) Тогда
			СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяОтбора);
		КонецЕсли;

	КонецЦикла;

	СтруктураНеиспользуемыеЗначения.Вставить("АВС");
	
	Если Не ПустаяСтрока(ЭлементыФормы.Отбор.ТекущиеДанные.ИмяОтбора) Тогда
		СтруктураСуществующиеЗначения.Вставить(ЭлементыФормы.Отбор.ТекущиеДанные.ИмяОтбора);
	КонецЕсли;

	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораФильтров = Форма;
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора элемента формы Отбор.Поле.
//
Процедура ОтборПолеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТабличноеПоле = ЭлементыФормы.Отбор;

	Если ТабличноеПоле.ТекущаяСтрока  = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РедактируемаяСтрока = ТабличноеПоле.Значение[ТабличноеПоле.Значение.Индекс(ТабличноеПоле.ТекущаяСтрока)];

	Для Каждого Строка Из ВыбранноеЗначение Цикл 

		РедактируемаяСтрока.ИмяОтбора           = Строка.ИмяФильтра;
		РедактируемаяСтрока.ПредставлениеОтбора = Строка.ПредставлениеФильтра;
		РедактируемаяСтрока.ОписаниеТиповЗначенийОтбора = Строка.ОписаниеТипов;
	
		МассивТипов = Строка.ОписаниеТипов.Типы();

		// Если тип единичный, то присвоим пустое значение этого типа
		Если МассивТипов.Количество() = 1 Тогда
			РедактируемаяСтрока.ЗначениеОтбора = ПустоеЗначениеТипа(МассивТипов[0]);
		Иначе
			РедактируемаяСтрока.ЗначениеОтбора = Неопределено;
		КонецЕсли;

		РедактируемаяСтрока.Использование = Истина;
		РедактируемаяСтрока.ВидСравнения = ВидСравнения.Равно;

	КонецЦикла;

КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы Отбор.ВидСравнения.
//
Процедура ОтборВидСравненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВидовСравнения = Новый СписокЗначений;
	Если СтрЧислоВхождений(ЭлементыФормы.Отбор.ТекущаяСтрока.ИмяОтбора, "Категории") Тогда
		СписокВидовСравнения.Добавить(ВидСравнения.Равно);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.НеРавно);
		СписокВидовСравнения.Добавить(ВидСравнения.НеВСписке);
	Иначе
		СписокВидовСравнения.Добавить(ВидСравнения.Равно);
		СписокВидовСравнения.Добавить(ВидСравнения.НеРавно);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСпискеПоИерархии);
		СписокВидовСравнения.Добавить(ВидСравнения.НеВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.НеВСпискеПоИерархии);
	КонецЕсли; 

	Элемент.СписокВыбора = СписокВидовСравнения;

КонецПроцедуры

// Обработчик события ОбработкаВыбора элемента формы Отбор.ВидСравнения.
//
Процедура ОтборВидСравненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ЗначениеОтбораТекущейСтроки = ЭлементыФормы.Отбор.ТекущаяСтрока.ЗначениеОтбора;

	Если ВыбранноеЗначение = ВидСравнения.Равно 
		ИЛИ ВыбранноеЗначение = ВидСравнения.НеРавно Тогда

		Элемент.АвтопереносСтрок = Ложь;
		Если ТипЗнч(ЗначениеОтбораТекущейСтроки) = Тип("СписокЗначений") Тогда

			Если ЗначениеОтбораТекущейСтроки.Количество() > 0 тогда
				ЗначениеОтбораТекущейСтроки = ЗначениеОтбораТекущейСтроки[0].Значение;
			КонецЕсли;

		КонецЕсли;

	Иначе

		Элемент.АвтопереносСтрок= Истина;
		Если ТипЗнч(ЗначениеОтбораТекущейСтроки) <> Тип("СписокЗначений") Тогда

			СтароеЗначение = ЗначениеОтбораТекущейСтроки;

			ЭлементыФормы.Отбор.ТекущаяСтрока.ЗначениеОтбора = Новый СписокЗначений;
			Если СтароеЗначение <> Неопределено Тогда
				ЭлементыФормы.Отбор.ТекущаяСтрока.ЗначениеОтбора.Добавить(СтароеЗначение);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы Отбор.Значение.
//
Процедура ОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ПустаяСтрока(ЭлементыФормы.Отбор.ТекущаяСтрока.ПредставлениеОтбора) Тогда
		Предупреждение("Выберите отбор!",60);
		СтандартнаяОбработка=Ложь;
		Возврат;
	КонецЕсли;

	Фильтр = ЭлементыФормы.Отбор.ТекущаяСтрока;

	Владелец = ОпределитьВладельца();

	Если Фильтр.ОписаниеТиповЗначенийОтбора = Неопределено Тогда
	
		СтрокаГруппировки = мДеревоФильтры.Строки.Найти(Фильтр.ИмяОтбора, "ИмяПоля", Истина);
		Если СтрокаГруппировки <> Неопределено Тогда
		
			Фильтр.ОписаниеТиповЗначенийОтбора = СтрокаГруппировки.ОписаниеТипов;
		
		КонецЕсли; 
		
	
	КонецЕсли; 
	
	ТипыФильтра = Фильтр.ОписаниеТиповЗначенийОтбора;

	МассивТипов = ТипыФильтра.Типы();

	Если ЭлементыФормы.Отбор.ТекущаяСтрока.ВидСравнения = ВидСравнения.Равно
		ИЛИ ЭлементыФормы.Отбор.ТекущаяСтрока.ВидСравнения = ВидСравнения.НеРавно Тогда

		МассивТипов = ТипыФильтра.Типы();

		Если МассивТипов.Количество() = 1 Тогда

			Если МассивТипов[0]=Тип("Число") Тогда
				Элемент.Значение=0;
			ИначеЕсли МассивТипов[0]=Тип("Строка") Тогда
				Элемент.Значение="";
			ИначеЕсли МассивТипов[0]=Тип("Дата") Тогда
				Элемент.Значение=ТекущаяДата();
			Иначе
				Элемент.Значение = Новый(МассивТипов[0]);
			КонецЕсли;

			Элемент.ВыбиратьТип = Ложь;

		Иначе

			Элемент.ОграничениеТипа = Фильтр.ОписаниеТиповЗначенийОтбора;
			Элемент.ВыбиратьТип = Истина;

		КонецЕсли;

	Иначе

		МассивТипов = Новый Массив;
		МассивТипов.Добавить("СписокЗначений");
		ОписаниеТиповСписокЗначений  = Новый ОписаниеТипов(МассивТипов);
		Элемент.ОграничениеТипа      = ОписаниеТиповСписокЗначений;
		Элемент.Значение.ТипЗначения = Фильтр.ОписаниеТиповЗначенийОтбора;
		Элемент.ВыбиратьТип          = Ложь;

	КонецЕсли;

	Если Владелец <> Неопределено Тогда
		Элемент.ВыборПоВладельцу = Владелец;
	КонецЕсли;

	Если МассивТипов[0]=Тип("СправочникСсылка.КатегорииОбъектов") Тогда

		СтандартнаяОбработка=Ложь;

		СтрокаФильтры=мДеревоФильтры.Строки.Найти(ЭлементыФормы.Отбор.ТекущаяСтрока.ИмяОтбора,
											"ИмяПоля",Истина);
							
		ФормаВыбораКатегории= Справочники["КатегорииОбъектов"].ПолучитьФормуВыбора(, Элемент,);
		ФормаВыбораКатегории.РежимВыбора = Истина;
		ФормаВыбораКатегории.Отбор.НазначениеКатегории.Значение      = СтрокаФильтры.Свойство;
		ФормаВыбораКатегории.Отбор.НазначениеКатегории.Использование = Истина;

		ФормаВыбораКатегории.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		ФормаВыбораКатегории.Открыть();

	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы Показатели.
//
Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы Показатели.
//
Процедура ПоказателиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы Отбор.
//
Процедура ОтборПередУдалением(Элемент, Отказ)

	Если Элемент.ТекущиеДанные <> Неопределено И мСписокОбязательныхОтборов.НайтиПоЗначению(Элемент.ТекущиеДанные.ИмяОтбора) <> Неопределено Тогда
	
		Отказ = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы Отбор.
//
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
		И Элемент.ТекущаяКолонка.Имя = "Поле"
		И НЕ ПустаяСтрока(СокрЛП(Элемент.ТекущиеДанные.ИмяОтбора))
		И мСписокОбязательныхОтборов.НайтиПоЗначению(СокрЛП(Элемент.ТекущиеДанные.ИмяОтбора)) <> Неопределено Тогда
	
		Отказ = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы Отбор.
//
Процедура ОтборПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
	
		Отказ = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Отбор.Значение.
//
Процедура ОтборЗначениеПриИзменении(Элемент)

	Если Элемент.Значение <> Неопределено И ЭлементыФормы.Отбор.ТекущиеДанные <> Неопределено Тогда
	
		Если (ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") И Элемент.Значение.Количество() > 0)
			ИЛИ (Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент.Значение)) И НЕ Элемент.Значение.Пустая())
			ИЛИ (Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент.Значение)) И НЕ Элемент.Значение.Пустая()) Тогда

			ЭлементыФормы.Отбор.ТекущиеДанные.Использование = Истина;
			
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента формы Отбор.
//
Процедура ОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущиеДанные.ЗначениеОтбора = Неопределено Тогда
	
		Если Элемент.ТекущиеДанные.ВидСравнения = ВидСравнения.Равно ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравнения.НеРавно Тогда

			Если ТипЗнч(Элемент.ТекущиеДанные.ОписаниеТиповЗначенийОтбора) = Тип("ОписаниеТипов") Тогда
			
				Элемент.ТекущиеДанные.ЗначениеОтбора = ОпределитьПустоеЗначениеТипа(Элемент.ТекущиеДанные.ОписаниеТиповЗначенийОтбора);
			
			КонецЕсли; 

		Иначе

			Элемент.ТекущиеДанные.ЗначениеОтбора = Новый СписокЗначений;
		
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработчик события Действие элемента нижней командной панели формы ОК.
//
Процедура КнопкаОК(Элемент)

	Если Группировки.Найти("", "ИмяГруппировки") <> Неопределено Тогда
		Предупреждение("Не указано имя группировки.");
		Возврат;
	КонецЕсли; 

	ГруппировкиОтчета.Очистить();

	// Добавим группировки
	Для Каждого СтрокаТаблицы Из Группировки Цикл
		НоваяСтрока = ГруппировкиОтчета.Добавить();
		НоваяСтрока.ИмяГруппировки           = СтрокаТаблицы.ИмяГруппировки;
		НоваяСтрока.ПредставлениеГруппировки = СтрокаТаблицы.ПредставлениеГруппировки;
		НоваяСтрока.ОписаниеГруппировки      = СтрокаТаблицы.ОписаниеГруппировки;
		НоваяСтрока.РассчитыватьИтоги        = Истина;
		НоваяСтрока.ТипИтога  = СтрокаТаблицы.ТипИтога;

		Для Каждого СтрокаТаблицыДопПоля Из СтрокаТаблицы.СписокДопПолей Цикл

			НоваяСтрока = ГруппировкиОтчета.Добавить();
			НоваяСтрока.ИмяГруппировки           = СтрокаТаблицыДопПоля.ИмяГруппировки;
			НоваяСтрока.ПредставлениеГруппировки = СтрокаТаблицыДопПоля.ПредставлениеГруппировки;
			НоваяСтрока.ОписаниеГруппировки      = СтрокаТаблицыДопПоля.ОписаниеГруппировки;
			НоваяСтрока.РассчитыватьИтоги        = Ложь;

		КонецЦикла;

	КонецЦикла;

	// Добавим фильтры
	Таблица = Отбор.Скопировать();
	ФильтрыОтчета.Очистить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл

		Если ТипЗнч(СтрокаТаблицы.ЗначениеОтбора) = Тип("СписокЗначений") Тогда

			Если СтрокаТаблицы.ЗначениеОтбора.Количество() > 0 Тогда
			
				Для Каждого Фильтр Из СтрокаТаблицы.ЗначениеОтбора Цикл

					НоваяСтрока = ФильтрыОтчета.Добавить();
					НоваяСтрока.ИмяФильтра           = СтрокаТаблицы.ИмяОтбора;
					НоваяСтрока.ПредставлениеФильтра = СтрокаТаблицы.ПредставлениеОтбора;
					НоваяСтрока.ЗначениеФильтра      = Фильтр.Значение;
					НоваяСтрока.ТипФильтра           = Строка(СтрокаТаблицы.ВидСравнения);
					НоваяСтрока.ИспользованиеФильтра = СтрокаТаблицы.Использование;

				КонецЦикла;

			Иначе

				НоваяСтрока = ФильтрыОтчета.Добавить();
				НоваяСтрока.ИмяФильтра           = СтрокаТаблицы.ИмяОтбора;
				НоваяСтрока.ПредставлениеФильтра = СтрокаТаблицы.ПредставлениеОтбора;
				НоваяСтрока.ЗначениеФильтра      = "";
				НоваяСтрока.ТипФильтра           = Строка(СтрокаТаблицы.ВидСравнения);
				НоваяСтрока.ИспользованиеФильтра = СтрокаТаблицы.Использование;
			
			КонецЕсли; 
			
		Иначе
			НоваяСтрока = ФильтрыОтчета.Добавить();
			НоваяСтрока.ИмяФильтра           = СтрокаТаблицы.ИмяОтбора;
			НоваяСтрока.ПредставлениеФильтра = СтрокаТаблицы.ПредставлениеОтбора;
			НоваяСтрока.ЗначениеФильтра      = СтрокаТаблицы.ЗначениеОтбора;
			НоваяСтрока.ТипФильтра           = Строка(СтрокаТаблицы.ВидСравнения);
			НоваяСтрока.ИспользованиеФильтра = СтрокаТаблицы.Использование;
		КонецЕсли;

	КонецЦикла;

	ПроставитьЗначенияБыстрыхОтборов(ЭтаФорма.ВладелецФормы);
	
	
	Закрыть(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ

// Обработчик события Действие элемента командной панели 
// списка группировок КнопкаВыбораГруппировокИзСписка.
//
Процедура КоманднаяПанельГруппировокКнопкаВыбораГруппировокИзСписка(Кнопка)
	
	Форма = ПолучитьФорму("ФормаВыбора", ЭтаФорма, "дляФормаГруппировкиСписок");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция выбора группировок из списка не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	СтруктураПараметров.Вставить("ИсходнаяТаблица", "СписокГруппировокСписок");

	СтруктураДополнительныеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;

	Для Каждого Строка Из Группировки Цикл

		Если ПустаяСтрока(Строка.ИмяГруппировки) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяГруппировки);

		Для Каждого СтрокаСтрока Из Строка.СписокДопПолей Цикл
			СтруктураДополнительныеЗначения.Вставить(СтрокаСтрока.ИмяГруппировки);
		КонецЦикла;

	КонецЦикла;

	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураДополнительныеЗначения", СтруктураДополнительныеЗначения);

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораГруппировокСписок = Форма;

КонецПроцедуры

// Обработчик события Действие элемента командной панели 
// списка показателей УстановитьФлажки.
//
Процедура КоманднаяПанельУстановитьФлажки(Кнопка)

	Для каждого Показатель Из ПоказателиОтчета Цикл
	
		Показатель.ИспользованиеПоказателя = Истина;
	
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик события Действие элемента командной панели 
// списка показателей СнятьФлажки.
//
Процедура КоманднаяПанельСнятьФлажки(Кнопка)

	Для каждого Показатель Из ПоказателиОтчета Цикл
	
		Показатель.ИспользованиеПоказателя = Ложь;
	
	КонецЦикла; 
	
КонецПроцедуры

МассивСтрока = Новый Массив; 
МассивСтрока.Добавить(Тип("Строка"));
КвалификаторСтроки = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная);
ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);

МассивТаблицаЗначений = Новый Массив;
МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);

Группировки.Колонки.Добавить("ИмяГруппировки",ОписаниеТиповСтрока);
Группировки.Колонки.Добавить("ОписаниеГруппировки",ОписаниеТиповСтрока);
Группировки.Колонки.Добавить("СписокДопПолей", ОписаниеТиповТаблицаЗначений);

Отбор.Колонки.Добавить("ИмяОтбора");
Отбор.Колонки.Добавить("ОписаниеТиповЗначенийОтбора");

ЭлементыФормы.Группировки.Колонки.ТипИтога.ЭлементУправления.СписокВыбора.Добавить("Элементы");
ЭлементыФормы.Группировки.Колонки.ТипИтога.ЭлементУправления.СписокВыбора.Добавить("Иерархия");
ЭлементыФормы.Группировки.Колонки.ТипИтога.ЭлементУправления.СписокВыбора.Добавить("Только Иерархия");
