// Валюта регламентированного учета организаций
Перем мВалютаРегламентированногоУчета Экспорт;

// Валюта управленческого учета организаций
Перем мВалютаУправленческогоУчета Экспорт;

// Настройка - ссылка на справочник настроек
Перем мНастройка Экспорт;

// Настройка периода
Перем НП Экспорт;

// Все возможные группировки
Перем мДеревоГруппировки Экспорт;
// Все возможные показатели
Перем мТаблицаПоказатели Экспорт; 
// Все возможные фильтры
Перем мДеревоФильтры Экспорт;

// Все возможные описания типов
Перем мТаблицаТипы Экспорт;

//Запрос к базе
Перем Запрос;

// Свойства метаданных ресурсов регистра
Перем мСтруктураМетаданныеРегистраРесурсы;
// Свойства метаданных измерений регистра
Перем мСтруктураМетаданныеРегистраИзмерения;

// Структура, содержащая допустимые типы фильтров
Перем мСтруктураТиповФильтров Экспорт;
// Значение типа фильтра по умолчанию
Перем мТипФильтраПоУмолчанию Экспорт;
// Структура, содержащая допустимые поля реквизитов, по которым
// выполняется сортировка показателей (начост, приход, расход и т.д.)
Перем мСтруктураНазванийПолейСортировки Экспорт;

//Таблица дат возникновения и необходимого погашения дебеторской задолженности
//при установленном для договора типе ведения взаиморасчетов
//по документам.
Перем мДатаДебеторскойЗадолженности;

// Имя отчета в метаданных
Перем мИмяОтчета Экспорт;

Перем мНазваниеОтчета Экспорт;

// Список имен быстрых отборов
Перем мСписокОбязательныхОтборов Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
// 
// Определяет пустую ссылку одного из типов значений
// Параметры
//  ОписаниеТиповЗначения - Описание типов
//
// Возвращаемое значение:
//   Пустая ссылка (справочник, перечисление)
//
Функция ОпределитьПустоеЗначениеТипа(ОписаниеТиповЗначения) Экспорт

	Если ТипЗнч(ОписаниеТиповЗначения) = Тип("ОписаниеТипов") Тогда

		МассивТипов = ОписаниеТиповЗначения.Типы();
		Для каждого Тип Из МассивТипов Цикл

			Если Тип <> Тип("СписокЗначений") Тогда
				Возврат Новый(Тип);
			КонецЕсли; 

		КонецЦикла; 

	Иначе

		Возврат Неопределено;

	КонецЕсли; 

КонецФункции //ОпределитьПустоеЗначениеТипа()

// Функция возвращает ВидОтбора по строке
// 
// Параметры
//  СтрокаОтбора, строка вида отбора
// 
// Возвращаемое значение 
//  ЗначениеВозврата, ВидОтбора
Функция ВозвратитьВидаОтбораПоСтроке(СтрокаОтбора) Экспорт

	ЗначениеВозврата = Неопределено;

	СтрокаОтбора = ВРег(СтрокаОтбора);

	Если СтрокаОтбора = "РАВНО" Тогда
		ЗначениеВозврата = ВидСравнения.Равно;
	ИначеЕсли СтрокаОтбора = "НЕ РАВНО" Тогда
		ЗначениеВозврата = ВидСравнения.НеРавно;
	ИначеЕсли СтрокаОтбора = "В СПИСКЕ" Тогда
		ЗначениеВозврата = ВидСравнения.ВСписке;
	ИначеЕсли СтрокаОтбора = "НЕ В СПИСКЕ" Тогда
		ЗначениеВозврата = ВидСравнения.НеВСписке;
	ИначеЕсли СтрокаОтбора = "В СПИСКЕ ПО ИЕРАРХИИ" Тогда
		ЗначениеВозврата = ВидСравнения.ВСпискеПоИерархии;
	ИначеЕсли СтрокаОтбора = "НЕ В ПО ИЕРАРХИИ" Тогда
		ЗначениеВозврата = ВидСравнения.НеВСпискеПоИерархии;
	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции // ВозвратитьСтрокуВидаОтбора()

// Процедура устанавливает значения быстрых отборов формы в соответствии
//  с табличной частью ФильтрыОтчета
// 
// Параметры
//  ФормаБыстрыхОтборов - форма, на которой расположены контролы быстрых отборов
//
// Возвращаемые значения
//  НЕТ
Процедура ПроставитьЗначенияБыстрыхОтборов(ФормаБыстрыхОтборов) Экспорт

	СписокОбработанныхОтборов = Новый СписокЗначений;

	Для каждого Строки Из ФильтрыОтчета Цикл

		Если мСписокОбязательныхОтборов.НайтиПоЗначению(Строки.ИмяФильтра) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если СписокОбработанныхОтборов.НайтиПоЗначению(Строки.ИмяФильтра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 

		ФормаБыстрыхОтборов.ЭлементыФормы["Флажок" + Строки.ИмяФильтра].Значение = Строки.ИспользованиеФильтра;
		ФормаБыстрыхОтборов.ЭлементыФормы["ВидСравнения" + Строки.ИмяФильтра].Значение = ВозвратитьВидаОтбораПоСтроке(Строки.ТипФильтра);
		Если Строки.ТипФильтра = "РАВНО" ИЛИ Строки.ТипФильтра = "НЕ РАВНО" Тогда
			ФормаБыстрыхОтборов.ЭлементыФормы["Значение" + Строки.ИмяФильтра].Значение = Строки.ЗначениеФильтра;
		Иначе
			СписокЗначенийОтбора = Новый СписокЗначений;
			Для каждого СтрокаФильтров Из ФильтрыОтчета Цикл
				Если СтрокаФильтров.ИмяФильтра = Строки.ИмяФильтра Тогда
					СписокЗначенийОтбора.Добавить(СтрокаФильтров.ЗначениеФильтра);
				КонецЕсли;
			КонецЦикла;
			ФормаБыстрыхОтборов.ЭлементыФормы["Значение" + Строки.ИмяФильтра].Значение = СписокЗначенийОтбора;
		КонецЕсли;

		СписокОбработанныхОтборов.Добавить(Строки.ИмяФильтра);

	КонецЦикла; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
// 

// Процедура подготавливает таблицы, содержащие все возможные группировки, показатели отчета
// и описания типов возможных фильтров. Заполнение таблиц производится по данным макета отчета,
// "ПараметрыОтчетаВзаиморасчетыСКонтрагентами".
Процедура ЗаполнитьНачальныеНастройки(ВосстановлениеНастройки = Ложь) Экспорт

	мНазваниеОтчета = "Отчет по клиентам";

	мТаблицаПоказатели.Очистить();
	мДеревоГруппировки.Строки.Очистить();
	мДеревоФильтры.Строки.Очистить();

	мТаблицаТипы.Очистить();

	мСтруктураМетаданныеРегистраИзмерения= Новый Структура;
	СтруктураМетаданныеРегистрПартииТоваров =Новый Структура;
	СтруктураМетаданныеРегистрКонтрагенты=Новый Структура;
	СтруктураМетаданныеРегистрПродажи=Новый Структура;

	Для Каждого Измерение Из Метаданные.РегистрыНакопления["ПартииТоваровНаСкладах"].Измерения Цикл
		СтруктураМетаданныеРегистрПартииТоваров.Вставить(Измерение.Имя, Новый Структура);
		СтруктураМетаданныеРегистрПартииТоваров[Измерение.Имя].Вставить("Представление",Измерение.Представление());
		СтруктураМетаданныеРегистрПартииТоваров[Измерение.Имя].Вставить("Тип",Измерение.Тип);
	КонецЦикла;

	мСтруктураМетаданныеРегистраИзмерения.Вставить("ПартииТоваровНаСкладахОбороты",СтруктураМетаданныеРегистрПартииТоваров);

	Для Каждого Измерение Из Метаданные.РегистрыНакопления["ВзаиморасчетыСКонтрагентами"].Измерения Цикл
		СтруктураМетаданныеРегистрКонтрагенты.Вставить(Измерение.Имя, Новый Структура);
		СтруктураМетаданныеРегистрКонтрагенты[Измерение.Имя].Вставить("Представление",Измерение.Представление());
		СтруктураМетаданныеРегистрКонтрагенты[Измерение.Имя].Вставить("Тип",Измерение.Тип);
	КонецЦикла;

	мСтруктураМетаданныеРегистраИзмерения.Вставить("ВзаиморасчетыСКонтрагентамиОстаткиИОбороты",СтруктураМетаданныеРегистрКонтрагенты);

	Для Каждого Измерение Из Метаданные.РегистрыНакопления["Продажи"].Измерения Цикл
		СтруктураМетаданныеРегистрПродажи.Вставить(Измерение.Имя, Новый Структура);
		СтруктураМетаданныеРегистрПродажи[Измерение.Имя].Вставить("Представление",Измерение.Представление());
		СтруктураМетаданныеРегистрПродажи[Измерение.Имя].Вставить("Тип",Измерение.Тип);
	КонецЦикла;

	мСтруктураМетаданныеРегистраИзмерения.Вставить("ПродажиОбороты",СтруктураМетаданныеРегистрПродажи);

	МассивВсехТипов = Новый Массив;

	МакетПараметрыОтчетов = ПолучитьМакет("ПараметрыОтчетаВзаиморасчетыСКонтрагентами");

	ОбластьПоказатели = МакетПараметрыОтчетов.ПолучитьОбласть("Показатели");

	ОбластьПоказателиВысота = ОбластьПоказатели.ВысотаТаблицы;

	Для НСтр = 1 По ОбластьПоказателиВысота Цикл
		СтрПоказатели = мТаблицаПоказатели.Добавить();
		СтрПоказатели.ИмяПоля           = СокрЛП(ОбластьПоказатели.Область(НСтр, 1).Текст);
		СтрПоказатели.ПредставлениеПоля = СокрЛП(ОбластьПоказатели.Область(НСтр, 2).Текст);
		СтрПоказатели.ОписаниеПоля      = СокрЛП(ОбластьПоказатели.Область(НСтр, 3).Текст);
		СтрПоказатели.ВклПоУмолчанию    = Булево(СокрЛП(ОбластьПоказатели.Область(НСтр, 4).Текст));
		СтрПоказатели.ФорматнаяСтрока   = СокрЛП(ОбластьПоказатели.Область(НСтр, 5).Текст);
		СтдВалюта         = СокрЛП(ОбластьПоказатели.Область(НСтр, 8).Текст);

		Если Врег(СтдВалюта) = "УПР" Тогда
			СтрПоказатели.ПредставлениеПоля = СтрПоказатели.ПредставлениеПоля + " в " +мВалютаУправленческогоУчета;
		ИначеЕсли Врег(СтдВалюта) = "РЕГЛ" Тогда
			СтрПоказатели.ПредставлениеПоля = СтрПоказатели.ПредставлениеПоля + " в " +мВалютаРегламентированногоУчета;
		КонецЕсли;

		Если ПустаяСтрока(СтрПоказатели.ОписаниеПоля) Тогда
			СтрПоказатели.ОписаниеПоля = СтрПоказатели.ИмяПоля;
		КонецЕсли;

		СтрокаПоказателя = ПоказателиОтчета.Добавить();
		СтрокаПоказателя.ИмяПоказателя = СтрПоказатели.ИмяПоля;
		СтрокаПоказателя.ПредставлениеПоказателя = СтрПоказатели.ПредставлениеПоля;
		СтрокаПоказателя.ОписаниеПоказателя = СтрПоказатели.ОписаниеПоля;
		СтрокаПоказателя.ИспользованиеПоказателя = СтрПоказатели.ВклПоУмолчанию;
	КонецЦикла;

	ОбластьТипов = МакетПараметрыОтчетов.ПолучитьОбласть("Типы");
	ОбластьТиповВысота=ОбластьТипов.ВысотаТаблицы;

	ТекГруппировка="";
	МассивТипов=Новый Массив;
	СтрТаблицаТипы="";

	Для Нстр = 1 По ОбластьТиповВысота цикл
		Группировка=СокрЛП(ОбластьТипов.Область(НСтр, 1).Текст);
		Если Группировка<>ТекГруппировка Тогда
			Если МассивТипов.Количество()>0 Тогда
				СтрТаблицаТипы.ОписаниеТипов=Новый ОписаниеТипов(МассивТипов);
			КонецЕсли;

			СтрТаблицаТипы=мТаблицаТипы.Добавить();
			ТекГруппировка=Группировка;
			МассивТипов=Новый Массив;

			СтрТаблицаТипы.ИмяПоля=Группировка;
			ТекстТипа=СокрЛП(ОбластьТипов.Область(НСтр, 2).Текст);
			Если (Найти(ТекстТипа,".")=0) И (ТекстТипа<>"Число") И (ТекстТипа<>"Строка") И (ТекстТипа<>"Дата") Тогда

				Для Каждого Элемент Из Метаданные[ТекстТипа] Цикл
					МассивТипов.Добавить(Тип(Лев(ТекстТипа,СтрДлина(ТекстТипа)-1)+"Ссылка."+Элемент.Имя));
				КонецЦикла;

			Иначе

				МассивТипов.Добавить(Тип(ТекстТипа));

			КонецЕсли;

		Иначе
			ТекстТипа=СокрЛП(ОбластьТипов.Область(НСтр, 2).Текст);
			Если (Найти(ТекстТипа,".")=0) И (ТекстТипа<>"Число") И (ТекстТипа<>"Строка") И (ТекстТипа<>"Дата") Тогда

				Для Каждого Элемент Из Метаданные[ТекстТипа] Цикл
					МассивТипов.Добавить(Тип(Лев(ТекстТипа,СтрДлина(ТекстТипа)-1)+"Ссылка."+Элемент.Имя));
				КонецЦикла;

			Иначе

				МассивТипов.Добавить(Тип(ТекстТипа));

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если МассивТипов.Количество()>0 Тогда
		СтрТаблицаТипы.ОписаниеТипов=Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;

	ОбластьГруппировки = МакетПараметрыОтчетов.ПолучитьОбласть("Группировки");
	ОбластьГруппировкиВысота = ОбластьГруппировки.ВысотаТаблицы;

	МассивКатегории = Новый Массив;
	МассивКатегории.Добавить(Тип("СправочникСсылка.КатегорииОбъектов"));
	ОписаниеТиповКатегории = Новый ОписаниеТипов(МассивКатегории);

	Запрос = Новый Запрос;

	Запрос.Текст = "";

	МассивНазначений = Новый Массив;

	Для НСтр = 1 По ОбластьГруппировкиВысота Цикл
		СтрГруппировки = мДеревоГруппировки.Строки.Добавить();
		СтрГруппировки.ИмяПоля           = СокрЛП(ОбластьГруппировки.Область(НСтр, 1).Текст);
		СтрГруппировки.ПредставлениеПоля = СокрЛП(ОбластьГруппировки.Область(НСтр, 2).Текст);
		СтрГруппировки.ОписаниеПоля      = СокрЛП(ОбластьГруппировки.Область(НСтр, 3).Текст);
		СтрГруппировки.ВклПоУмолчанию    = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 4).Текст));
		СтрГруппировки.РассчитыватьИтоги = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 5).Текст));
		СтрГруппировки.ТипИтога = ?(Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 6).Текст)),"Иерархия", "Элементы");
		СтрГруппировки.ВозможенФильтр    = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 8).Текст));

		ИмяПоля = СтрГруппировки.ИмяПоля;

		Если ПустаяСтрока(СтрГруппировки.ОписаниеПоля) Тогда
			СтрГруппировки.ОписаниеПоля = СтрГруппировки.ИмяПоля;
		КонецЕсли;

		СтрВыводитьПустые = СокрЛП(ОбластьГруппировки.Область(НСтр, 10).Текст);
		Если Нрег(СтрВыводитьПустые) = Нрег("Истина")
			Или Нрег(СтрВыводитьПустые) = Нрег("Ложь") Тогда
			СтрГруппировки.ВыводитьПустые = Булево(СтрВыводитьПустые);
		Иначе
			СтрГруппировки.ВыводитьПустые = СтрВыводитьПустые;
		КонецЕсли;

		Если СтрГруппировки.ВыводитьПустые = Ложь Тогда
			СтрГруппировки.ВыводитьПустыеСвязаннаяГруппировка = СокрЛП(ОбластьГруппировки.Область(НСтр, 11).Текст);
		КонецЕсли;

		Если СтрГруппировки.ВклПоУмолчанию Тогда

			НоваяСтрока = ГруппировкиОтчета.Добавить();
			НоваяСтрока.ИмяГруппировки = СтрГруппировки.ИмяПоля;
			НоваяСтрока.ПредставлениеГруппировки = СтрГруппировки.ПредставлениеПоля;
			НоваяСтрока.ОписаниеГруппировки = СтрГруппировки.ОписаниеПоля;
			НоваяСтрока.РассчитыватьИтоги = СтрГруппировки.РассчитыватьИтоги;
			НоваяСтрока.ТипИтога = СтрГруппировки.ТипИтога;

		КонецЕсли;

		СтрНазначение = СокрЛП(ОбластьГруппировки.Область(НСтр, 9).Текст);

		Индекс = мДеревоГруппировки.Строки.Индекс(СтрГруппировки);

		Назначение = Неопределено;

		Если Не ПустаяСтрока(СтрНазначение) Тогда

			Попытка
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов[Лев(СтрНазначение, Найти(СтрНазначение+",", ",")-1)];
			Исключение

			КонецПопытки;

		КонецЕсли;

		МассивНазначений.Добавить(Назначение);

		Если Назначение <> Неопределено Тогда

			Запрос.УстановитьПараметр("ИмяПоля"+Индекс, СтрГруппировки.ИмяПоля);
			Запрос.УстановитьПараметр("ПредставлениеПоля"+Индекс, СтрГруппировки.ПредставлениеПоля);
			Запрос.УстановитьПараметр("ОписаниеПоля"+Индекс, СтрГруппировки.ОписаниеПоля);
			Запрос.УстановитьПараметр("Назначение"+Индекс, МассивНазначений[Индекс]);

			Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ 
			|ВЫБРАТЬ 
			|	&ИмяПоля"+Индекс+" 							КАК ИмяПоля,
			|	&ОписаниеПоля"+Индекс+" 					КАК ОписаниеПоля,
			|	&ПредставлениеПоля"+Индекс+"				КАК ПредставлениеПоля,
			|	ПланВидовХарактеристик.СвойстваОбъектов.Представление КАК ПредставлениеСвойства,
			|	ПланВидовХарактеристик.СвойстваОбъектов.Ссылка  КАК Ссылка
			|
			|ИЗ
			|	ПланВидовХарактеристик.СвойстваОбъектов
			|
			|ГДЕ
			|	ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства = &Назначение"+Индекс;

			// Добавляем специальную строку "Свойства"
			СтрГруппировкиСвойства = СтрГруппировки.Строки.Добавить();
			СтрГруппировкиСвойства.ИмяПоля = "Свойства"+СтрГруппировки.ИмяПоля;
			СтрГруппировкиСвойства.ПредставлениеПоля = "Свойства";

		КонецЕсли;

		Если СтрГруппировки.ВозможенФильтр Тогда

			СтрФильтры = мДеревоФильтры.Строки.Добавить();
			СтрФильтры.ИмяПоля           = СтрГруппировки.ИмяПоля;
			СтрФильтры.ПредставлениеПоля = СтрГруппировки.ПредставлениеПоля;
			СтрФильтры.ОписаниеПоля      = СтрГруппировки.ОписаниеПоля;
			СтрФильтры.ВклПоУмолчанию    = СтрГруппировки.ВклПоУмолчанию;

			Если ПустаяСтрока(СтрФильтры.ОписаниеПоля) Тогда
				СтрФильтры.ОписаниеПоля = СтрФильтры.ИмяПоля;
			КонецЕсли;

			НайденнаяСтрока = мТаблицаТипы.Найти(СтрГруппировки.ИмяПоля, "ИмяПоля");
			СтрФильтры.ОписаниеТипов = НайденнаяСтрока.ОписаниеТипов;
			СтрФильтры.ИмяПоляВладелец = СокрЛП(СокрЛП(ОбластьГруппировки.Область(НСтр, 7).Текст));

			Если Назначение <> Неопределено Тогда
				// Добавляем специальную строку "Свойства"
				СтрФильтрыСвойства = СтрФильтры.Строки.Добавить();
				СтрФильтрыСвойства.ИмяПоля = "Свойства"+СтрФильтры.ИмяПоля;
				СтрФильтрыСвойства.ПредставлениеПоля = "Свойства";

				СтрФильтрыКатегории = СтрФильтры.Строки.Добавить();
				СтрФильтрыКатегории.ИмяПоля           = "Категории" + СтрГруппировки.ИмяПоля;
				СтрФильтрыКатегории.ПредставлениеПоля = "Категории " + НРег(СтрГруппировки.ПредставлениеПоля);
				СтрФильтрыКатегории.ОписаниеПоля      = СтрГруппировки.ОписаниеПоля+".Категория";
				СтрФильтрыКатегории.ВклПоУмолчанию    = Ложь;
				СтрФильтрыКатегории.ОписаниеТипов     = ОписаниеТиповКатегории;
				СтрФильтрыКатегории.Свойство          = Назначение;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Запрос.Текст = Сред(Запрос.Текст, 16); // Удаляем первое ОБЪЕДИНИТЬ ВСЕ

	// Добавим в таблицу группировок
	Если Не ПустаяСтрока(Запрос.Текст) Тогда

		Состояние("Получение списка свойств");
		ТаблицаСвойств = Запрос.Выполнить().Выгрузить();

		Для Каждого Строка Из ТаблицаСвойств Цикл

			Индекс = ТаблицаСвойств.Индекс(Строка);

			// Найдем строку "Свойства", к которой добавим строки с конкретными свойствами
			НайденнаяСтрока = мДеревоГруппировки.Строки.Найти("Свойства"+СокрЛП(Строка.ИмяПоля), "ИмяПоля", Истина);

			СтрГруппировки = НайденнаяСтрока.Строки.Добавить();
			СтрГруппировки.ИмяПоля           = "Свойство"+Индекс;
			СтрГруппировки.ПредставлениеПоля = СокрЛП(Строка.ПредставлениеСвойства); //+" (свойство "+НРег(СокрЛП(Строка.ПредставлениеПоля)) +")";
			СтрГруппировки.ОписаниеПоля      = СокрЛП(Строка.ОписаниеПоля) + ".Свойство"+Индекс+".Значение";
			СтрГруппировки.ВклПоУмолчанию    = Ложь;
			СтрГруппировки.РассчитыватьИтоги = Истина;
			СтрГруппировки.ТипИтога          = "Иерархия";
			СтрГруппировки.ВыводитьПустые    = Ложь;
			СтрГруппировки.ВыводитьПустыеСвязаннаяГруппировка = СокрЛП(Строка.ИмяПоля);
			СтрГруппировки.Свойство          = Строка.Ссылка;

			Если НайденнаяСтрока.Родитель.ВозможенФильтр Тогда

				// Найдем строку "Свойства", к которой добавим строки с конкретными свойствами
				НайденнаяСтрока = мДеревоФильтры.Строки.Найти("Свойства"+СокрЛП(Строка.ИмяПоля), "ИмяПоля", Истина);

				СтрФильтры = НайденнаяСтрока.Строки.Добавить();
				СтрФильтры.ИмяПоля           = СтрГруппировки.ИмяПоля;
				СтрФильтры.ПредставлениеПоля = СтрГруппировки.ПредставлениеПоля;
				СтрФильтры.ОписаниеПоля      = СтрГруппировки.ОписаниеПоля;
				СтрФильтры.ВклПоУмолчанию    = Ложь;
				СтрФильтры.Свойство          = Строка.Ссылка;
				Если ПустаяСтрока(СтрФильтры.ОписаниеПоля) Тогда
					СтрФильтры.ОписаниеПоля  = СтрФильтры.ИмяПоля;
				КонецЕсли;
				СтрФильтры.ОписаниеТипов     = Строка.Ссылка.ТипЗначения;
				СтрФильтры.ИмяПоляВладелец   = "";

			КонецЕсли;

		КонецЦикла;

		Состояние("");
	КонецЕсли;

	Для Каждого Строка Из мДеревоФильтры.Строки Цикл

		Типы = Строка.ОписаниеТипов.Типы();

		Для Каждого ЭлементТипа Из Типы Цикл

			// Если тип примитивный, то не анализируем
			Если ЭлементТипа = Тип("Число")
				ИЛИ ЭлементТипа = Тип("Строка")
				ИЛИ ЭлементТипа = Тип("Дата") 
				ИЛИ ЭлементТипа = Тип("Булево") Тогда
				Прервать;
			КонецЕсли;

			ПустоеЗначениеТипа = Новый(ЭлементТипа);

			МетаданныеСправочника = Метаданные.Справочники.Найти(ПустоеЗначениеТипа.Метаданные().Имя);

			// Если это не справочник, то не анализируем
			Если МетаданныеСправочника = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			ВладелецСправочника = ПустоеЗначениеТипа.Владелец;
			Если ВладелецСправочника = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Для Каждого ПроверяемаяСтрока Из мДеревоФильтры.Строки Цикл
				Если ПроверяемаяСтрока.ОписаниеТипов.СодержитТип(ТипЗнч(ВладелецСправочника)) Тогда
					Строка.ИмяПоляВладелец = ПроверяемаяСтрока.ИмяПоля;
					Прервать;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

// Служебная процедура, устанавливает признаки возможности расчета итогов по иерархии и 
// принадлежности поля к ссылочным типам
Процедура ЗаполнитьПараметрыПолей(ТаблицаГруппировки)

	Для Каждого СтрокаГруппировки Из ТаблицаГруппировки Цикл

		Если ПустаяСтрока(СтрокаГруппировки.ОписаниеГруппировки) Тогда
			ОписаниеПоляЗапроса = СтрокаГруппировки.ОписаниеГруппировки;
		Иначе
			ОписаниеПоляЗапроса = СтрокаГруппировки.ИмяГруппировки;
		КонецЕсли;

		// Описание типов получаем либо из заполненной таблицы фильтров, либо заново
		НайденнаяСтрока = мДеревоФильтры.Строки.Найти(СтрокаГруппировки.ИмяГруппировки, "ИмяПоля", Истина);

		Если НайденнаяСтрока <> Неопределено Тогда
			ОписаниеТиповГруппировки = НайденнаяСтрока.ОписаниеТипов;
		Иначе
			Возврат;
		КонецЕсли;

		МассивТипов = ОписаниеТиповГруппировки.Типы();

	КонецЦикла;

КонецПроцедуры

// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//  Выборка       - выборка из результата отчета, которая обходится в процедуре
//  СтруктураПараметров - структура параметров, необходимых для вывода строки
//  Номер         - число, номер обходимой группировки
//
Процедура ВывестиПоказатели(Выборка, СтруктураПараметров, ТипДанныхРасшифровки = "Данные")

	ТабДок = СтруктураПараметров.ТабДок;

	Если СтруктураПараметров.ЕстьСумма Тогда

		// Информацию о задолженности выводим только при наличии суммы
		// в составе показателей отчета 
		ОбластьНачальныйДолг=СтруктураПараметров.НачальныйДолг;
		ОбластьНачальныйДолг.Параметры.НачальныйДолг = Формат(Выборка["СуммаНачальныйДолг"], "ЧЦ = 15 ; ЧДЦ = 2");

		ОбластьНачальныйДолг.Параметры.ТипДанных = ТипДанныхРасшифровки;

		ТабДок.Присоединить(ОбластьНачальныйДолг);

		ОбластьОплаченоДеб=СтруктураПараметров.ОплаченоДеб;
		ОбластьОплаченоДеб.Параметры.ОплаченоДеб = Формат(Выборка["СуммаОплаченоДеб"], "ЧЦ = 15 ; ЧДЦ = 2");

		ОбластьОплаченоДеб.Параметры.ТипДанных = ТипДанныхРасшифровки;

		ТабДок.Присоединить(ОбластьОплаченоДеб);

	КонецЕсли;

	ОбластьПоступлениеТМЦ=СтруктураПараметров.ПоступлениеТМЦ;

	НомерКолонки=1;

	Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказатели Цикл

		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);

		Если НомерКолонки=1 Тогда
			ОбластьПоступлениеТМЦ.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
			ОбластьПоступлениеТМЦ.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		КонецЕсли;

		Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
			ОбластьПоступлениеТМЦ.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
			Если (НомерКолонки>1) Тогда
				ОбластьПоступлениеТМЦ.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			КонецЕсли;
		КонецЕсли;

		Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
			ОбластьПоступлениеТМЦ.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			ОбластьПоступлениеТМЦ.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		КонецЕсли;

		Если ИмяПоказателя="Цена" Тогда

			КоличествоПриход = ?(ЗначениеНезаполнено(Выборка["КоличествоПриход"]), 0, Выборка["КоличествоПриход"]);
			СуммаПриход      = ?(ЗначениеНезаполнено(Выборка["СуммаПриход"]),      0, Выборка["СуммаПриход"]     );
			Цена             = ?(КоличествоПриход<>0, СуммаПриход/КоличествоПриход, СуммаПриход);

			ОбластьПоступлениеТМЦ.Параметры.ПоступлениеТМЦ= Формат(Цена, ФорматПоказателя);

		Иначе

			ОбластьПоступлениеТМЦ.Параметры.ПоступлениеТМЦ=Формат(Выборка[ИмяПоказателя+"Приход"], ФорматПоказателя);

		КонецЕсли;

		ОбластьПоступлениеТМЦ.Параметры.ТипДанных = ТипДанныхРасшифровки;

		ТабДок.Присоединить(ОбластьПоступлениеТМЦ);

		НомерКолонки=НомерКолонки+1;

	КонецЦикла;

	Если СтруктураПараметров.ЕстьСумма Тогда

		// Информацию о движении средств выводим только при наличии суммы
		// в составе показателей отчета 
		ОбластьОплаченоКред=СтруктураПараметров.ОплаченоКред;
		ОбластьОплаченоКред.Параметры.ОплаченоКред = Формат(Выборка["СуммаОплаченоКред"], "ЧЦ = 15 ; ЧДЦ = 2");

		ОбластьОплаченоКред.Параметры.ТипДанных = ТипДанныхРасшифровки;

		ТабДок.Присоединить(ОбластьОплаченоКред);

	КонецЕсли;

	ОбластьРеализацияТМЦ=СтруктураПараметров.РеализацияТМЦ;

	НомерКолонки=1;

	Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказатели Цикл

		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);

		Если НомерКолонки=1 Тогда
			ОбластьРеализацияТМЦ.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
			ОбластьРеализацияТМЦ.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		КонецЕсли;

		Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
			ОбластьРеализацияТМЦ.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
			Если (НомерКолонки>1) Тогда
				ОбластьРеализацияТМЦ.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			КонецЕсли;
		КонецЕсли;

		Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
			ОбластьРеализацияТМЦ.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			ОбластьРеализацияТМЦ.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		КонецЕсли;

		Если ИмяПоказателя="Цена" Тогда

			КоличествоРасход = ?(ЗначениеНезаполнено(Выборка["КоличествоРасход"]), 0, Выборка["КоличествоРасход"]);
			СуммаРасход      = ?(ЗначениеНезаполнено(Выборка["СуммаРасход"]),      0, Выборка["СуммаРасход"]     );
			Цена             = ?(КоличествоРасход<>0, СуммаРасход/КоличествоРасход, СуммаРасход);

			ОбластьРеализацияТМЦ.Параметры.РеализацияТМЦ = Формат(Цена, ФорматПоказателя);

		Иначе

			ОбластьРеализацияТМЦ.Параметры.РеализацияТМЦ=Формат(Выборка[ИмяПоказателя+"Расход"], ФорматПоказателя);

		КонецЕсли;

		ОбластьРеализацияТМЦ.Параметры.ТипДанных = ТипДанныхРасшифровки;

		ТабДок.Присоединить(ОбластьРеализацияТМЦ);

		НомерКолонки=НомерКолонки+1;

	КонецЦикла;

	Если СтруктураПараметров.ЕстьСумма Тогда 	// Информацию о задолженности выводим только при наличии суммы
		// в составе показателей отчета 

		ОбластьКонечныйДолг=СтруктураПараметров.КонечныйДолг;
		ОбластьКонечныйДолг.Параметры.КонечныйДолг = Формат(Выборка["СуммаКонечныйДолг"], "ЧЦ = 15 ; ЧДЦ = 2");

		ОбластьКонечныйДолг.Параметры.ТипДанных = ТипДанныхРасшифровки;

		ТабДок.Присоединить(ОбластьКонечныйДолг);

	КонецЕсли;

КонецПроцедуры // ВывестиСтроку()

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//  Выборка             - выборка из результата отчета, которая обходится в процедуре,
//  СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//                        строки отчета,
//  Номер               - число, номер обходимой группировки
//  МассивРасшифровки   - массив, содержащий список группировок текущей строки
//
Процедура ВывестиГруппировку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки)

	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;
	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировки   = СтруктураПараметров.ЗначениеГруппировки;

	ОформлениеСтроки                = СтруктураПараметров.ОформлениеСтроки;
	ОформлениеСтрокиИерархии        = СтруктураПараметров.ОформлениеСтрокиИерархии;

	СтруктураВыводГруппировок = СтруктураПараметров.СтруктураВыводГруппировок;

	// Назначение, корректировка макетов измерений
	Сдвиг = Макс(ОформлениеСтроки.Количество()-СтруктураПараметров.МассивГруппировки.Количество(),0);

	Пока Выборка.Следующий() Цикл

		ИспользоватьОформление = РаскрашиватьИзмерения;
		Если ОформлениеСтроки.Количество()>0 Тогда
			ИндексОформления = Сдвиг+((Номер) - (ОформлениеСтроки.Количество()-Сдвиг)*Цел((Номер)/(ОформлениеСтроки.Количество()-Сдвиг)));
		Иначе
			ИспользоватьОформление = Ложь;
		КонецЕсли;;

		УровеньЗаписи   = Выборка.Уровень();
		СдвигУровня     = 0;

		ИмяГруппировки  = Выборка.Группировка();

		ТабДок = СтруктураПараметров.ТабДок;

		ЗначениеГруппировки = "";

		ЗначениеРасшифровки = Неопределено;

		ТипЗаписиВыборки = Выборка.ТипЗаписи();

		МассивВыводГруппировок = Новый Массив;

		Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда

			ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];
			Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
				ЗначениеТекущейГруппировки = "<...>";
			КонецЕсли;

			ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;

		ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

			Если СтруктураВыводГруппировок.Свойство(ИмяГруппировки, МассивВыводГруппировок) Тогда

				КоличествоДопПолей=МассивВыводГруппировок.Количество();
				ВыведеноГруппировок=0;

				Для Каждого ВыводимаяГруппировка Из МассивВыводГруппировок Цикл

					ВыведеноГруппировок=ВыведеноГруппировок+1;

					ЗначениеТекущейГруппировки = "" + Выборка[ВыводимаяГруппировка];
					Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
						ЗначениеТекущейГруппировки = "<...>";
					КонецЕсли;

					ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки + ", ";
					Если ЗначениеРасшифровки = Неопределено Тогда 
						ЗначениеРасшифровки = Выборка[ВыводимаяГруппировка];
					КонецЕсли;

					МассивРасшифровки.Добавить(ВыводимаяГруппировка);

				КонецЦикла;

				// Если группировки нет в списке, то не выводим, нам нужна только выборка, 
				// т.о. искусственно получаем группировку по набору полей, указанных в одной строке
				// таблицы группировок
			Иначе

				МассивРасшифровки.Добавить(ИмяГруппировки);
				Перейти ~М1;

			КонецЕсли;

			ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];

			Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
				ЗначениеТекущейГруппировки = "<...>";
			КонецЕсли;

			ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;

			Если ЗначениеРасшифровки = Неопределено Тогда 
				ЗначениеРасшифровки = Выборка[ИмяГруппировки];
			КонецЕсли;
		КонецЕсли;

		// Для итогов по группировке сдвиг нужно уменьшить на количество пропущенных группировок, 
		// заранее рассчитанное для каждой группировки
		Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

			МассивРасшифровки.Добавить(ИмяГруппировки);

			ЗначениеРасшифровкиСтрока = Новый Структура;
			Для Каждого Элемент Из МассивРасшифровки Цикл
				ЗначениеРасшифровкиСтрока.Вставить(Элемент, Выборка[Элемент])
			КонецЦикла;

			СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[ИмяГруппировки];

			// Для итогов по иерархии сдвиг нужно уменьшить на количество пропущенных группировок для предыдущей группировки
			// заранее рассчитанное для каждой группировки
		ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			Если Номер>0 Тогда
				СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[СтруктураПараметров.МассивГруппировки[Номер - 1]];
			КонецЕсли;
		КонецЕсли;

		УровеньЗаписи = УровеньЗаписи - СдвигУровня;

		Если (Не ПустаяСтрока(ИмяГруппировки)) И (Найти(Выборка[ИмяГруппировки],"{}НеВыводить")=0) Тогда
			// Выводятся только группировки, которые могут иметь значение на данном уровне обхода.

			НачСтрока = ТабДок.ВысотаТаблицы+1;

			ТабДок.Вывести(ОбластьОбщийОтступ, УровеньЗаписи);
			ТабДок.Область(ТабДок.ВысотаТаблицы,1).Расшифровка = ЗначениеРасшифровкиСтрока;

			ОбластьЗначениеГруппировки.Параметры.ЗначениеГруппировки = СокрЛП(ЗначениеГруппировки);
			
			ОбластьЗначениеГруппировки.Параметры.Расшифровка = ЗначениеРасшифровки;
			
			ОбластьЗначениеГруппировки.Область().Отступ = УровеньЗаписи;

			ТабДок.Присоединить(ОбластьЗначениеГруппировки);

			ВывестиПоказатели(Выборка, СтруктураПараметров, ?(ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке, "Данные", Неопределено));

			Если ИспользоватьОформление Тогда

				Область = ТабДок.Область(НачСтрока, 2, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы);

				Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
					Область.ЦветФона   = ОформлениеСтроки[ИндексОформления].ЦветФона;
					Область.ЦветТекста = ОформлениеСтроки[ИндексОформления].ЦветТекста;
				ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
					Область.ЦветФона   = ОформлениеСтрокиИерархии[ИндексОформления].ЦветФона;
					Область.ЦветТекста = ОформлениеСтрокиИерархии[ИндексОформления].ЦветТекста;
				КонецЕсли;
			КонецЕсли;

			Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				ТабДок.Область(ТабДок.ВысотаТаблицы, 2, ТабДок.ВысотаТаблицы,2).Шрифт = СтруктураПараметров.ШрифтГрупп;
			КонецЕсли;

		КонецЕсли;

		// На каждом уровне используется своя копия структуры расшифровок
~М1:	КопияМассивРасшифровки = Новый Массив;
		Для Каждого Элемент Из МассивРасшифровки Цикл
			КопияМассивРасшифровки.Добавить(Элемент);
		КонецЦикла;

		Если Номер+1 < СтруктураПараметров.МассивГруппировки.Количество() Тогда

			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, СтруктураПараметров.МассивГруппировки[Номер+1]), СтруктураПараметров, Номер + 1, КопияМассивРасшифровки);

		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры // ВывестиГруппировку()

// Функция формирует текст запроса по переданной в качестве параметра таблице.
// Параметры:
//			Источник (строка): Таблица, по которой строится запрос.
//			КопияГруппировкиОтчета (таблица значений): таблица выбранных группировок.
//			СтруктураДоступныхГруппировок (структура): содержит поля, возможные к выбору из таблицы - источника.
//			СтруктураДоступныхПоказателей (структура): содержит ресурсы, возможные к получению из таблицы - источника.
// Возвращаемое значение:
//			Текст запроса к таблице - источнику.
//
Функция СформироватьТекстЗапроса(Источник,КопияГруппировкиОтчета,СтруктураДоступныхГруппировок,СтруктураДоступныхПоказателей)

	ТекстПоляЗапроса = "";
	СтруктураИзмеренийРегистра=Новый Структура;

	// Таблица значений, в которой будут храниться данные о группировке и условиям по свойствам
	ТаблицаИсточниковСвойства = Новый ТаблицаЗначений;
	ТаблицаИсточниковСвойства.Колонки.Добавить("ИмяПоляОбъект");
	ТаблицаИсточниковСвойства.Колонки.Добавить("Свойство");
	ТаблицаИсточниковСвойства.Колонки.Добавить("ИмяТаблицы");
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	ТаблицаИсточниковСвойства.Колонки.Добавить("НаложенФильтр", ОписаниеТиповБулево);
	МассивСтрока = Новый Массив; 
	МассивСтрока.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная);
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);
	КвалификаторСтрокиНеогр = Новый КвалификаторыСтроки(0); // строка неограниченной длинны
	ОписаниеТиповСтрокаНеогр = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтрокиНеогр);
	ТаблицаИсточниковСвойства.Колонки.Добавить("СтрокаПараметров", ОписаниеТиповСтрокаНеогр);
	ТаблицаИсточниковСвойства.Колонки.Добавить("ОператорСравнения", ОписаниеТиповСтрока);

	// Таблица значений, в которой будут храниться данные об условиях по категориям
	ТаблицаИсточниковКатегории = Новый ТаблицаЗначений;
	ТаблицаИсточниковКатегории.Колонки.Добавить("ИмяПоляОбъект");
	ТаблицаИсточниковКатегории.Колонки.Добавить("СтрокаПараметров", ОписаниеТиповСтрокаНеогр);
	ТаблицаИсточниковКатегории.Колонки.Добавить("ТипФильтра", ОписаниеТиповСтрока);
	
	Для Каждого СтрокаГруппировки Из КопияГруппировкиОтчета Цикл

		ОписаниеПоляЗапроса = "";
		НайдСтрока = мДеревоГруппировки.Строки.Найти(СтрокаГруппировки.ИмяГруппировки, "ИмяПоля", Истина);
		Если НайдСтрока<>Неопределено Тогда
			ОписаниеПоляЗапроса = НайдСтрока.ОписаниеПоля;
		КонецЕсли;

		Если ПустаяСтрока(ОписаниеПоляЗапроса) Тогда
			ОписаниеПоляЗапроса = СтрокаГруппировки.ИмяГруппировки;
		КонецЕсли;

		Если Найти(СтрокаГруппировки.ОписаниеГруппировки, ".Свойство") > 0 Тогда

			ИмяПоляОбъект=Лев(ОписаниеПоляЗапроса, Найти(ОписаниеПоляЗапроса, ".Свойство") - 1);

			СтруктураДоступныхГруппировок.Свойство(ИмяПоляОбъект,ОписаниеПоляЗапроса);

			Если ОписаниеПоляЗапроса<>"&НеВыводить" Тогда

				НайдСтрока = мДеревоГруппировки.Строки.Найти(СтрокаГруппировки.ИмяГруппировки, "ИмяПоля", Истина);
				Если НайдСтрока <> Неопределено Тогда
					НоваяСтрока = ТаблицаИсточниковСвойства.Добавить();
					НоваяСтрока.ИмяПоляОбъект = ОписаниеПоляЗапроса;
					НоваяСтрока.Свойство = НайдСтрока.Свойство;
					НоваяСтрока.ИмяТаблицы = СтрЗаменить(Источник,".","")+Лев(СтрЗаменить(СтрокаГруппировки.ОписаниеГруппировки, ".", ""), 
					Найти(СтрЗаменить(СтрокаГруппировки.ОписаниеГруппировки, ".", ""), "Значение") - 1);
					НоваяСтрока.НаложенФильтр = Ложь;

					// Изменим описание поля запроса
					ОписаниеПоляЗапроса = НоваяСтрока.ИмяТаблицы + ".Значение";

				Иначе
					Предупреждение("Не найдено свойство " + СтрокаГруппировки.ИмяГруппировки);
					ЕстьОшибки = Истина;
				КонецЕсли;

			КонецЕсли;

		Иначе

			СтруктураДоступныхГруппировок.Свойство(СтрокаГруппировки.ИмяГруппировки,ОписаниеПоляЗапроса);

		КонецЕсли;

		ТекстПоляЗапроса = ТекстПоляЗапроса + ",
		|	" + ОписаниеПоляЗапроса + " КАК " + СтрокаГруппировки.ИмяГруппировки;

	КонецЦикла;

	Для Каждого СтрокаПоказателей Из мТаблицаПоказатели Цикл

		ОписаниеПоказателя="";

		Для Каждого ЭлементСтруктуры Из мСтруктураНазванийПолейСортировки Цикл	

			Если (СтрокаПоказателей.ИмяПоля="Цена") ИЛИ (((СтрокаПоказателей.ИмяПоля="Количество") ИЛИ (СтрокаПоказателей.ИмяПоля="КоличествоЕдиницДляОтчетов"))
				И (ЭлементСтруктуры.Ключ<>"Приход") И (ЭлементСтруктуры.Ключ<>"Расход")) Тогда
				Продолжить;
			КонецЕсли;

			ИмяПоказателя=СтрокаПоказателей.ИмяПоля+ЭлементСтруктуры.Ключ;

			СтруктураДоступныхПоказателей.Свойство(ИмяПоказателя,ОписаниеПоказателя);

			ТекстПоляЗапроса=ТекстПоляЗапроса+",
			|"+ОписаниеПоказателя+" КАК "+ИмяПоказателя;

		КонецЦикла;

	КонецЦикла;

	// Фильтр на значения измерений регистра, передаваемый в качестве параметров
	ТекстФильтры = "";

	// Фильтр на значения других полей, накладываемый на весь запрос
	ТекстОбщиеФильтры = "";

	ТаблицаСписокВсехФильтров = ФильтрыОтчета.Выгрузить();
	ТаблицаСписокВсехФильтров.Свернуть("ИмяФильтра, ПредставлениеФильтра, ТипФильтра, ИспользованиеФильтра",);

	СтруктураПоиска = Новый Структура("ИмяФильтра");

	НомерФильтра =0;
	// Фильтр
	Для Каждого СтрокаФильтры Из ТаблицаСписокВсехФильтров Цикл

		Если НЕ СтрокаФильтры.ИспользованиеФильтра Тогда
			Продолжить;
		КонецЕсли; 

		НомерФильтра = НомерФильтра+1;

		СтруктураПоиска.ИмяФильтра = СтрокаФильтры.ИмяФильтра;

		НайденнаяСтрока = мДеревоФильтры.Строки.Найти(СтрокаФильтры.ИмяФильтра, "ИмяПоля", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			ОписаниеФильтра = НайденнаяСтрока.ОписаниеПоля;
		КонецЕсли;
		
		Если ПустаяСтрока(ОписаниеФильтра) Тогда
			ОписаниеФильтра = СтрокаФильтры.ИмяФильтра;
		КонецЕсли;

		НайденныеСтроки = ФильтрыОтчета.НайтиСтроки(СтруктураПоиска);

		// Формируем текст вложенного фильтра
		ТекстВложенногоФильтры = "";

		СтрЗначенияФильтры = "";

		Массив = Новый Массив;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
			Массив.Добавить(НайденнаяСтрока.ЗначениеФильтра);

			// Строка для шапки отчета
			СтрЗначенияФильтры = СтрЗначенияФильтры + ", " + НайденнаяСтрока.ЗначениеФильтра;
		
		КонецЦикла; 
		Запрос.УстановитьПараметр("Параметр" + НомерФильтра, Массив);

		Если Найти(ОписаниеФильтра, ".Свойство") > 0 Тогда

			НайдСтрока = мДеревоФильтры.Строки.Найти(СтрокаФильтры.ИмяФильтра, "ИмяПоля", Истина);
			Если НайдСтрока <> Неопределено Тогда
				ИмяТаблицы = Лев(СтрЗаменить(ОписаниеФильтра, ".", ""), Найти(СтрЗаменить(ОписаниеФильтра, ".", ""), "Значение") - 1);
				СтрокаИсточник = ТаблицаИсточниковСвойства.Найти(ИмяТаблицы, "ИмяТаблицы");
				Если СтрокаИсточник = Неопределено Тогда
					СтрокаИсточник = ТаблицаИсточниковСвойства.Добавить();
				КонецЕсли;

				ИмяПоляОбъект=Лев(ОписаниеФильтра, Найти(ОписаниеФильтра, ".Свойство") - 1);

				СтрокаИсточник.ИмяПоляОбъект = СтруктураДоступныхГруппировок[ИмяПоляОбъект];
				СтрокаИсточник.Свойство = НайдСтрока.Свойство;
				СтрокаИсточник.ИмяТаблицы = ИмяТаблицы;
				СтрокаИсточник.НаложенФильтр = Истина;
				СтрокаИсточник.СтрокаПараметров = СтрокаИсточник.СтрокаПараметров + ",  &Параметр" + НомерФильтра;

				Если Врег(СтрокаФильтры.ТипФильтра) = "РАВНО"
					ИЛИ Врег(СтрокаФильтры.ТипФильтра) = "В СПИСКЕ"
					ИЛИ Врег(СтрокаФильтры.ТипФильтра) = "В СПИСКЕ ПО ИЕРАРХИИ" Тогда
					
					СтрокаИсточник.ОператорСравнения = " В ";
					
				ИначеЕсли Врег(СтрокаФильтры.ТипФильтра) = "НЕ РАВНО"
					ИЛИ Врег(СтрокаФильтры.ТипФильтра) = "НЕ В СПИСКЕ"
					ИЛИ Врег(СтрокаФильтры.ТипФильтра) = "НЕ В СПИСКЕ ПО ИЕРАРХИИ" Тогда
					
					СтрокаИсточник.ОператорСравнения = " НЕ В ";
					
				КонецЕсли;

			Иначе
				Предупреждение("Не найдено свойство " + СтрокаФильтры.ИмяПоля);
				ЕстьОшибки = Истина;
			КонецЕсли;

		ИначеЕсли Найти(ОписаниеФильтра, ".Категория") > 0 Тогда

			НайдСтрока = мДеревоФильтры.Строки.Найти(СтрокаФильтры.ИмяФильтра, "ИмяПоля", Истина);
			Если НайдСтрока <> Неопределено Тогда

				ИмяПоляОбъект=СтруктураДоступныхГруппировок[Лев(ОписаниеФильтра, Найти(ОписаниеФильтра, ".Категория") - 1)];

				СтрокаИсточник = ТаблицаИсточниковКатегории.Найти(ИмяПоляОбъект, "ИмяПоляОбъект");
				Если СтрокаИсточник = Неопределено Тогда
					СтрокаИсточник = ТаблицаИсточниковКатегории.Добавить();
				КонецЕсли;

				СтрокаИсточник.ИмяПоляОбъект = ИмяПоляОбъект;
				СтрокаИсточник.СтрокаПараметров = СтрокаИсточник.СтрокаПараметров + ",  &Параметр" + НомерФильтра;

				СтрокаИсточник.ТипФильтра = СтрокаФильтры.ТипФильтра;
			КонецЕсли;

		Иначе

			ТекстВложенногоФильтры = ТекстВложенногоФильтры + ",  &Параметр" + НомерФильтра;
		КонецЕсли;


		Если Врег(СтрокаФильтры.ТипФильтра) = "РАВНО" Тогда
			ОператорСравнения = " В ";
		ИначеЕсли Врег(СтрокаФильтры.ТипФильтра) = "В СПИСКЕ" Тогда
			ОператорСравнения = " В ";
		ИначеЕсли Врег(СтрокаФильтры.ТипФильтра) = "В СПИСКЕ ПО ИЕРАРХИИ" Тогда
			ОператорСравнения = " В ИЕРАРХИИ ";
		ИначеЕсли Врег(СтрокаФильтры.ТипФильтра) = "НЕ РАВНО" Тогда
			ОператорСравнения = " НЕ В ";
		ИначеЕсли Врег(СтрокаФильтры.ТипФильтра) = "НЕ В СПИСКЕ" Тогда
			ОператорСравнения = " НЕ В ";
		ИначеЕсли Врег(СтрокаФильтры.ТипФильтра) = "НЕ В СПИСКЕ ПО ИЕРАРХИИ" Тогда
			ОператорСравнения = " НЕ В ИЕРАРХИИ ";
		КонецЕсли;

		ТекстВложенногоФильтры = Сред(СокрЛП(ТекстВложенногоФильтры),2);

		Если Не ПустаяСтрока(ТекстВложенногоФильтры) Тогда

			// Фильтры, передаваемые в качестве параметров таблицы регистра

			ПолеЗапроса = "";
			СтруктураДоступныхГруппировок.Свойство(СтруктураПоиска.ИмяФильтра,ПолеЗапроса);

			Если мСтруктураМетаданныеРегистраИзмерения.Свойство(СтрЗаменить(Источник,".",""),СтруктураИзмеренийРегистра) Тогда
				Если СтруктураИзмеренийРегистра.Свойство(СтруктураПоиска.ИмяФильтра) Тогда
					ТекстФильтры = ТекстФильтры + " И " + СтруктураПоиска.ИмяФильтра 
					+ ОператорСравнения + " (" + ТекстВложенногоФильтры + ")";
				Иначе
					ТекстОбщиеФильтры = ТекстОбщиеФильтры 	+ " И " + ПолеЗапроса+" "
					+ ОператорСравнения + " (" + ТекстВложенногоФильтры + ")";
				КонецЕсли;
				// Общие фильтры запроса
			Иначе
				ТекстОбщиеФильтры = ТекстОбщиеФильтры 	+ " И " + ПолеЗапроса+" "
				+ ОператорСравнения + " (" + ТекстВложенногоФильтры + ")";
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	// Фильтр

	
	// Источники - регистры сведений для получения свойств и категорий
	ТекстИсточникиСведений = "";

	ПсевдонимИсточника = СтрЗаменить(Источник, ".", "");

	Для Каждого Строка Из ТаблицаИсточниковСвойства Цикл

		ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
		?(Строка.НаложенФильтр, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ", "ЛЕВОЕ СОЕДИНЕНИЕ ") + 
		"РегистрСведений.ЗначенияСвойствОбъектов КАК " + Строка.ИмяТаблицы + "
		|ПО " + Строка.ИмяТаблицы + ".Объект = " + Строка.ИмяПоляОбъект + "
		|И  " + Строка.ИмяТаблицы + ".Свойство = &Параметр" + Строка.ИмяТаблицы;

		Если Строка.НаложенФильтр И НЕ ПустаяСтрока(Строка.СтрокаПараметров) Тогда
			ТекстИсточникиСведений = ТекстИсточникиСведений + "
			|И  " + Строка.ИмяТаблицы + ".Значение " + Строка.ОператорСравнения + " (" + Сред(Строка.СтрокаПараметров, 2) + ")";
		КонецЕсли;

		Запрос.УстановитьПараметр("Параметр" + Строка.ИмяТаблицы, Строка.Свойство);

	КонецЦикла;

	Для Каждого Строка Из ТаблицаИсточниковКатегории Цикл

		Индекс = ТаблицаИсточниковКатегории.Индекс(Строка);

		Если Врег(Строка.ТипФильтра) = "РАВНО"
			ИЛИ Врег(Строка.ТипФильтра) = "В СПИСКЕ" Тогда

			// Ограничиваем выборку по регистру остатков набором различных объектов, принадлежащих одной категорий из указанных в списке
			ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ Объект ИЗ РегистрСведений.КатегорииОбъектов 
			|ГДЕ  Категория В (" + Сред(Строка.СтрокаПараметров, 2) + ")
			|) КАК Категории" + СтрЗаменить(Строка.ИмяПоляОбъект,".","") + "
			|ПО Категории" + СтрЗаменить(Строка.ИмяПоляОбъект,".","") + ".Объект = " + Строка.ИмяПоляОбъект;
			
		ИначеЕсли Врег(Строка.ТипФильтра) = "НЕ РАВНО" 
			ИЛИ Врег(Строка.ТипФильтра) = "НЕ В СПИСКЕ" Тогда

			// Ограничим выборку по регистру остатков только записями, объекты которых не принадлежат ни одной категории из указанных в списке 
			ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
			"ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ Объект ИЗ РегистрСведений.КатегорииОбъектов 
			|ГДЕ  Категория В (" + Сред(Строка.СтрокаПараметров, 2) + ")
			|) КАК Категории" + СтрЗаменить(Строка.ИмяПоляОбъект,".","") + "
			|ПО Категории" + СтрЗаменить(Строка.ИмяПоляОбъект,".","") + ".Объект = " + Строка.ИмяПоляОбъект;

			ТекстОбщиеФильтры = ТекстОбщиеФильтры + " И Категории" + СтрЗаменить(Строка.ИмяПоляОбъект,".","") + ".Объект ЕСТЬ NULL";

		КонецЕсли;

	КонецЦикла;
	// Фильтр

	// Удаление лишних запятых
	ТекстПоляЗапроса     = Сред(ТекстПоляЗапроса,         2);
	ТекстФильтры         = Сред(СокрЛП(ТекстФильтры),     2);
	ТекстОбщиеФильтры    = Сред(СокрЛП(ТекстОбщиеФильтры),2);

	ТекстИсточника="";

	Если Источник="ПартииТоваровНаСкладах.Обороты" Тогда
		ТекстИсточника="РегистрНакопления."+Источник+"(&ДатаНач, &ДатаКон, Регистратор, СтатусПартии=&ТоварКупленный
//		| И (НЕ(Регистратор ССЫЛКА Документ.ПеремещениеТоваров))
		| И (ДокументОприходования Ссылка Документ.ВозвратТоваровОтПокупателя
		| 	ИЛИ ДокументОприходования Ссылка Документ.ПоступлениеТоваровУслуг
		|//	ИЛИ ДокументОприходования Ссылка Документ.ПереоценкаТоваровПринятыхНаКомиссию
		|)";
		
		Если Не ПустаяСтрока(ТекстФильтры) Тогда 
			ТекстИсточника = ТекстИсточника + Символы.ПС + " И "+ТекстФильтры;
		КонецЕсли;
		ТекстИсточника= ТекстИсточника + ") КАК ПартииТоваровНаСкладахОбороты";

		ТекстИсточника = ТекстИсточника + ТекстИсточникиСведений;
		
		Если Не ПустаяСтрока(ТекстОбщиеФильтры) Тогда
			ТекстИсточника = ТекстИсточника  + Символы.ПС +
			"ГДЕ (НЕ (Регистратор ССЫЛКА Документ.ПеремещениеТоваров))
			| И " + ТекстОбщиеФильтры;
		Иначе
			ТекстИсточника = ТекстИсточника  + Символы.ПС +
			"ГДЕ (НЕ (Регистратор ССЫЛКА Документ.ПеремещениеТоваров))";
		КонецЕсли;

	ИначеЕсли Источник="ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты" Тогда

		ТекстИсточника="РегистрНакопления."+Источник+"(&ДатаНач,&ДатаКон,,,
		|";

		Если Не ПустаяСтрока(ТекстФильтры) Тогда 
			ТекстИсточника = ТекстИсточника + Символы.ПС +ТекстФильтры;
		КонецЕсли;
		ТекстИсточника= ТекстИсточника + ")  КАК ВзаиморасчетыСКонтрагентамиОстаткиИОбороты";

		ТекстИсточника = ТекстИсточника + ТекстИсточникиСведений;

		Если Не ПустаяСтрока(ТекстОбщиеФильтры) Тогда
			ТекстИсточника = ТекстИсточника  + Символы.ПС +
			"ГДЕ" + ТекстОбщиеФильтры;
		КонецЕсли;

	ИначеЕсли Источник="Продажи.Обороты" Тогда
		ТекстИсточника="РегистрНакопления."+Источник+"(&ДатаНач,&ДатаКон,,";

		Если Не ПустаяСтрока(ТекстФильтры) Тогда 
			ТекстИсточника = ТекстИсточника + Символы.ПС +ТекстФильтры;
		КонецЕсли;
		ТекстИсточника= ТекстИсточника + ") КАК ПродажиОбороты";

		ТекстИсточника = ТекстИсточника + ТекстИсточникиСведений;

		Если Не ПустаяСтрока(ТекстОбщиеФильтры) Тогда
			ТекстИсточника = ТекстИсточника  + Символы.ПС +
			"ГДЕ" + ТекстОбщиеФильтры;
		КонецЕсли;

	ИначеЕсли Источник="ВзаиморасчетыСКонтрагентами" Тогда
		ТекстИсточника="РегистрНакопления."+Источник+" КАК ВзаиморасчетыСКонтрагентами"+ТекстИсточникиСведений+"
		|ГДЕ
		|ВзаиморасчетыСКонтрагентами.Активность = Истина";

		Если (ДатаНач<>'00010101000000') и (ДатаКон<>'00010101000000') Тогда
			ТекстИсточника=ТекстИсточника+"
			| И (ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон)";
		ИначеЕсли ДатаНач<>'00010101000000' Тогда
			ТекстИсточника=ТекстИсточника+"
			| И (ВзаиморасчетыСКонтрагентами.Период >= &ДатаНач)";
		ИначеЕсли ДатаКон<>'00010101000000' Тогда
			ТекстИсточника=ТекстИсточника+"
			| И (ВзаиморасчетыСКонтрагентами.Период <= &ДатаКон)";
		КонецЕсли;

		Если Не ПустаяСтрока(ТекстОбщиеФильтры) Тогда
			ТекстИсточника = ТекстИсточника  + Символы.ПС +
			" И " + ТекстОбщиеФильтры;
		КонецЕсли;

	КонецЕсли;

	ТекстЗапроса=
	"ВЫБРАТЬ " + ТекстПоляЗапроса + "
	|ИЗ 
	|"+ТекстИсточника;

	Возврат ТекстЗапроса;

КонецФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь,  ЕстьОшибки = Ложь) Экспорт

	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода", 60);
		Возврат;
	КонецЕсли; 

	Запрос = Новый Запрос;

	// Список полей запроса
	ТекстЗапроса = "";
	ТекстПоляИтогов = "";
	ТекстПоляИтоговЗапроса = "";
	ТекстПоляУпорядочивания = "";

	// Строки списков для шапки отчета
	СтрПоказатели = "";
	СтрГруппировки = "";
	СтрФильтры = "";

	// Строка в которую выводятся обнаруженные ошибки
	СтрОшибки = "";

	ОсновноеПоле=Истина;

	Для Каждого Строка Из ГруппировкиОтчета цикл

		Если ПустаяСтрока(Строка.ИмяГруппировки) Тогда
			Предупреждение("Не указано имя группировки!", 60);
			Возврат;
		КонецЕсли;
		// Если не задано представление, берем его из имени
		Если ПустаяСтрока(Строка.ПредставлениеГруппировки) Тогда
			Строка.ПредставлениеГруппировки = Строка.ИмяГруппировки;
		КонецЕсли;
		Если Строка.РассчитыватьИтоги Тогда
			Если НЕ ОсновноеПоле Тогда
				ОсновноеПоле=Истина;
				СтрГруппировки=СтрГруппировки+"), ";
			Иначе
				СтрГруппировки=СтрГруппировки+", ";
			КонецЕсли;
		Иначе
			Если ОсновноеПоле Тогда
				ОсновноеПоле=Ложь;
				СтрГруппировки=СтрГруппировки+" (";
			Иначе
				СтрГруппировки=СтрГруппировки+", ";
			КонецЕсли;
		КонецЕсли;
		СтрГруппировки=СтрГруппировки+Строка.ПредставлениеГруппировки;

	КонецЦикла;

	Если НЕ ОсновноеПоле Тогда
		СтрГруппировки=СтрГруппировки+")";
		ОсновноеПоле=Истина;
	КонецЕсли;

	ТаблицаСписокВсехФильтров = ФильтрыОтчета.Выгрузить();
	ТаблицаСписокВсехФильтров.Свернуть("ИмяФильтра",);

	СтруктураПоиска = Новый Структура("ИмяФильтра");

	Для Каждого Строка Из ТаблицаСписокВсехФильтров Цикл

		Если ПустаяСтрока(Строка.ИмяФильтра) Тогда
			Предупреждение("Не указано имя отбора!", 60);
			Возврат;
		КонецЕсли;

		СтруктураПоиска.ИмяФильтра = Строка.ИмяФильтра;

		НайденныеСтроки = ФильтрыОтчета.НайтиСтроки(СтруктураПоиска);

		СтрТипФильтра = Нрег(НайденныеСтроки[0].ТипФильтра);

		Если НайденныеСтроки.Количество() = 1 Тогда
			// Если не задано представление, берем его из имени
			Если ПустаяСтрока(НайденныеСтроки[0].ПредставлениеФильтра) Тогда
				НайденныеСтроки[0].ПредставлениеФильтра = НайденныеСтроки[0].ИмяФильтра;
			КонецЕсли;

			// Для единичного значения используется все кроме первого слова
			СтрТипФильтра = Сред(СтрТипФильтра, Найти(СтрТипФильтра, " ") + 1);
			СтрФильтры=СтрФильтры+ ", " + НайденныеСтроки[0].ПредставлениеФильтра+ " " + СтрТипФильтра 
			                     + " " +  НайденныеСтроки[0].ЗначениеФильтра;
		Иначе

			СтрФильтры=СтрФильтры+", "+НайденныеСтроки[0].ПредставлениеФильтра+" "+СтрТипФильтра+" [";
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				// Если не задано представление, берем его из имени
				Если ПустаяСтрока(НайденнаяСтрока.ПредставлениеФильтра) Тогда
					НайденнаяСтрока.ПредставлениеФильтра = НайденнаяСтрока.ИмяФильтра;
				КонецЕсли;

				СтрФильтры=СтрФильтры+НайденнаяСтрока.ЗначениеФильтра+", ";
			КонецЦикла;

			СтрФильтры=Лев(СокрЛП(СтрФильтры), СтрДлина(СокрЛП(СтрФильтры))-1)+"]";
		КонецЕсли;

	КонецЦикла;

	Если НЕ ОсновноеПоле Тогда
		ОсновноеПоле=Истина;
	КонецЕсли;

	Если ПоказателиОтчета.Количество() = 0 Тогда
		Предупреждение("Не выбрано ни одного показателя!", 60);
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	Для Каждого Строка Из ПоказателиОтчета цикл
		Если ПустаяСтрока(Строка.ИмяПоказателя) Тогда
			Предупреждение("Не указано имя показателя!", 60);
			Возврат;
		КонецЕсли;
		// Если не задано представление, берем его из имени
		Если ПустаяСтрока(Строка.ПредставлениеПоказателя) Тогда
			Строка.ПредставлениеПоказателя = Строка.ИмяПоказателя;
		КонецЕсли;
	КонецЦикла;

	// Структура вывода группировок: ключи определяют "основные" группировки,
	// значения - дополнительные.
	СтруктураВыводГруппировок = Новый Структура;
	МассивГруппировки    = Новый Массив;

	// Структура "поправок" сдвига группировок вправо: уровень записи строки 
	// формируемого запроса будет отличаться от нужного из-за пропусков группировок,
	// по которым не нужно выводить итоги.
	СтруктураСдвигУровняГруппировок = Новый Структура;

	// Далее используется таблица значений, полученная выгрузкой строк из т.ч. отчета
	КопияГруппировкиОтчета = ГруппировкиОтчета.Выгрузить();

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	КопияГруппировкиОтчета.Колонки.Добавить("ИтогПоИерархии", 		 ОписаниеТиповБулево);

	ЗаполнитьПараметрыПолей(КопияГруппировкиОтчета);

	ВсегоГруппировок = 1;
	КолГруппировокБезИтогов = 0;
	Массив = Новый Массив;

	ТекстГруппировки="";

	Для Каждого СтрокаГруппировки Из КопияГруппировкиОтчета Цикл

		ТекстЗапроса = ТекстЗапроса + ",
		|ЗапросПоВзаиморасчетам." + СтрокаГруппировки.ИмяГруппировки + " КАК " + СтрокаГруппировки.ИмяГруппировки;

		Если Найти(СтрокаГруппировки.ИмяГруппировки,"Документ")>0 Тогда
			ТекстПоляУпорядочивания=ТекстПоляУпорядочивания+", 
			|ЗапросПоВзаиморасчетам."+ СтрокаГруппировки.ИмяГруппировки+".Дата Возр";
		КонецЕсли;

	КонецЦикла;

	Для Каждого СтрокаПоказателей Из мТаблицаПоказатели Цикл

		Для Каждого ЭлементСтруктуры Из мСтруктураНазванийПолейСортировки Цикл	

			Если (СтрокаПоказателей.ИмяПоля="Цена") ИЛИ (((СтрокаПоказателей.ИмяПоля="Количество") ИЛИ (СтрокаПоказателей.ИмяПоля="КоличествоЕдиницДляОтчетов"))
				И (ЭлементСтруктуры.Ключ<>"Приход") И (ЭлементСтруктуры.Ключ<>"Расход")) Тогда
				Продолжить;
			КонецЕсли;

			ИмяПоказателя=СтрокаПоказателей.ИмяПоля+ЭлементСтруктуры.Ключ;

			ТекстЗапроса=ТекстЗапроса+",
			|"+ИмяПоказателя+" КАК "+ИмяПоказателя;

			ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
			|	СУММА(" + ИмяПоказателя + ")";

		КонецЦикла;

	КонецЦикла;

	ТекстЗапроса = Сред(ТекстЗапроса, 2);
	
	ТекстЗапроса="ВЫБРАТЬ
	|"+ТекстЗапроса+"
	|ИЗ
	|(";

	СтруктураДоступныхГруппировок=Новый Структура; // Содержит поля, возможные к выбору из таблицы - источника.
	СтруктураДоступныхПоказателей=Новый Структура; // Содержит ресурсы, возможные к получению из таблицы - источника.

	//Формируем тексты запросов
	// По регистру "ВзаиморасчетыСКонтрагентами": остатки и обороты.
	СтруктураДоступныхГруппировок.Вставить("Контрагент",						"ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец");
	СтруктураДоступныхГруппировок.Вставить("ДоговорКонтрагента",				"ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента");
	СтруктураДоступныхГруппировок.Вставить("Организация",						"ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Организация");
	СтруктураДоступныхГруппировок.Вставить("ДокументСделка",					"ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка");
	СтруктураДоступныхГруппировок.Вставить("Номенклатура",						"&НеВыводить");
	СтруктураДоступныхГруппировок.Вставить("ДокументДвижения",					"&НеВыводить");
	СтруктураДоступныхГруппировок.Вставить("ХарактеристикаНоменклатуры",		"&НеВыводить");

	СтруктураДоступныхПоказателей.Вставить("КоличествоПриход",					"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоЕдиницДляОтчетовПриход",	"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаПриход",						"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоРасход",					"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоЕдиницДляОтчетовРасход",	"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаРасход",						"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаНачальныйДолг",				"ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрНачальныйОстаток");
	СтруктураДоступныхПоказателей.Вставить("СуммаКонечныйДолг",					"ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрКонечныйОстаток");
	СтруктураДоступныхПоказателей.Вставить("СуммаОплаченоДеб",					"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаОплаченоКред",					"0");

	ТекстЗапроса=ТекстЗапроса+СформироватьТекстЗапроса("ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты",
	КопияГруппировкиОтчета,СтруктураДоступныхГруппировок,СтруктураДоступныхПоказателей);
	ТекстЗапроса=ТекстЗапроса+"
	|ОБЪЕДИНИТЬ ВСЕ
	|";

	// По регистру "ПартииТоваровНаСкладах":  обороты.
	СтруктураДоступныхГруппировок.Вставить("Контрагент",						"ПартииТоваровНаСкладахОбороты.ДокументОприходования.ДоговорКонтрагента.Владелец");
	СтруктураДоступныхГруппировок.Вставить("ДоговорКонтрагента",				"ПартииТоваровНаСкладахОбороты.ДокументОприходования.ДоговорКонтрагента");
	СтруктураДоступныхГруппировок.Вставить("Организация",						"ПартииТоваровНаСкладахОбороты.ДокументОприходования.ДоговорКонтрагента.Организация");
	СтруктураДоступныхГруппировок.Вставить("ДокументСделка",					"ПартииТоваровНаСкладахОбороты.Заказ");
	СтруктураДоступныхГруппировок.Вставить("Номенклатура",						"ПартииТоваровНаСкладахОбороты.Номенклатура");
	СтруктураДоступныхГруппировок.Вставить("ДокументДвижения",					"ПартииТоваровНаСкладахОбороты.ДокументОприходования");
	СтруктураДоступныхГруппировок.Вставить("ХарактеристикаНоменклатуры",		"ПартииТоваровНаСкладахОбороты.ХарактеристикаНоменклатуры");

	СтруктураДоступныхПоказателей.Вставить("КоличествоПриход",					"ПартииТоваровНаСкладахОбороты.КоличествоПриход");
	СтруктураДоступныхПоказателей.Вставить("КоличествоЕдиницДляОтчетовПриход",	"ПартииТоваровНаСкладахОбороты.КоличествоПриход*ПартииТоваровНаСкладахОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/ПартииТоваровНаСкладахОбороты.Номенклатура.ЕдиницаДляОтчетов.Коэффициент");
	СтруктураДоступныхПоказателей.Вставить("СуммаПриход",						"ПартииТоваровНаСкладахОбороты.СтоимостьПриход");
	СтруктураДоступныхПоказателей.Вставить("КоличествоРасход",					"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоЕдиницДляОтчетовРасход",	"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаРасход",						"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаНачальныйДолг",				"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаКонечныйДолг",					"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаОплаченоДеб",					"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаОплаченоКред",					"0");

	ТекстЗапроса=ТекстЗапроса+СформироватьТекстЗапроса("ПартииТоваровНаСкладах.Обороты",
	КопияГруппировкиОтчета,СтруктураДоступныхГруппировок,СтруктураДоступныхПоказателей);
	ТекстЗапроса=ТекстЗапроса+"
	|ОБЪЕДИНИТЬ ВСЕ
	|";

	// По регистру "Продажи": обороты.
	СтруктураДоступныхГруппировок.Вставить("Контрагент",						"ПродажиОбороты.ДоговорКонтрагента.Владелец");
	СтруктураДоступныхГруппировок.Вставить("ДоговорКонтрагента",				"ПродажиОбороты.ДоговорКонтрагента");
	СтруктураДоступныхГруппировок.Вставить("Организация",						"ПродажиОбороты.ДоговорКонтрагента.Организация");
	СтруктураДоступныхГруппировок.Вставить("ДокументСделка",					"ПродажиОбороты.ЗаказПокупателя");
	СтруктураДоступныхГруппировок.Вставить("Номенклатура",						"ПродажиОбороты.Номенклатура");
	СтруктураДоступныхГруппировок.Вставить("ДокументДвижения",					"ПродажиОбороты.ДокументПродажи");
	СтруктураДоступныхГруппировок.Вставить("ХарактеристикаНоменклатуры",		"ПродажиОбороты.ХарактеристикаНоменклатуры");

	СтруктураДоступныхПоказателей.Вставить("КоличествоПриход",					"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоЕдиницДляОтчетовПриход",	"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаПриход",						"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоРасход",					"ПродажиОбороты.КоличествоОборот");
	СтруктураДоступныхПоказателей.Вставить("КоличествоЕдиницДляОтчетовРасход",	"ПродажиОбороты.КоличествоОборот*ПродажиОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/ПродажиОбороты.Номенклатура.ЕдиницаДляОтчетов.Коэффициент");
	СтруктураДоступныхПоказателей.Вставить("СуммаРасход",						"ПродажиОбороты.СтоимостьОборот");
	СтруктураДоступныхПоказателей.Вставить("СуммаНачальныйДолг",				"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаКонечныйДолг",					"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаОплаченоДеб",					"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаОплаченоКред",					"0");

	ТекстЗапроса=ТекстЗапроса+СформироватьТекстЗапроса("Продажи.Обороты",
	КопияГруппировкиОтчета,СтруктураДоступныхГруппировок,СтруктураДоступныхПоказателей);

	ТекстЗапроса=ТекстЗапроса+"
	|ОБЪЕДИНИТЬ ВСЕ
	|";

	// По регистру "ВзаиморасчетыСКонтрагентами": основная таблица.
	СтруктураДоступныхГруппировок.Вставить("Контрагент",				"ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.Владелец");
	СтруктураДоступныхГруппировок.Вставить("ДоговорКонтрагента",		"ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента");
	СтруктураДоступныхГруппировок.Вставить("Организация",				"ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.Организация");
	СтруктураДоступныхГруппировок.Вставить("ДокументСделка",			"ВзаиморасчетыСКонтрагентами.Сделка");
	СтруктураДоступныхГруппировок.Вставить("Номенклатура",				"&НеВыводить");
	СтруктураДоступныхГруппировок.Вставить("ДокументДвижения",			"ВзаиморасчетыСКонтрагентами.Регистратор");
	СтруктураДоступныхГруппировок.Вставить("ХарактеристикаНоменклатуры","&НеВыводить");

	СтруктураДоступныхПоказателей.Вставить("КоличествоПриход",			"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоЕдиницДляОтчетовПриход",			"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаПриход",				"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоРасход",			"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоЕдиницДляОтчетовРасход",			"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаРасход",				"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаНачальныйДолг",		"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаКонечныйДолг",			"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаОплаченоДеб",			"Выбор
	|Когда ВзаиморасчетыСКонтрагентами.ВидДвижения=&Расход Тогда
	|	ВзаиморасчетыСКонтрагентами.СуммаУпр
	|Иначе
	|	0
	|Конец");
	СтруктураДоступныхПоказателей.Вставить("СуммаОплаченоКред",			"Выбор
	|Когда ВзаиморасчетыСКонтрагентами.ВидДвижения=&Приход Тогда
	|	ВзаиморасчетыСКонтрагентами.СуммаУпр
	|Иначе
	|	0
	|Конец");

	ТекстЗапроса=ТекстЗапроса+СформироватьТекстЗапроса("ВзаиморасчетыСКонтрагентами",
	КопияГруппировкиОтчета,СтруктураДоступныхГруппировок,СтруктураДоступныхПоказателей);

	ТекстЗапроса=ТекстЗапроса+"
	|) КАК ЗапросПоВзаиморасчетам";

	// Заголовок первой колонки шапки таблицы
	ЗаголовокКолонки = "Общий итог"; // этот заголовок выводится в случае отсутствия группировок

	Для Каждого СтрокаГруппировки Из КопияГруппировкиОтчета Цикл

		ДобавитьГруппировку = Ложь;
		Если (КопияГруппировкиОтчета.Индекс(СтрокаГруппировки) = КопияГруппировкиОтчета.Количество() - 1) Тогда
			ДобавитьГруппировку = Истина;
		Иначе
			Если КопияГруппировкиОтчета[КопияГруппировкиОтчета.Индекс(СтрокаГруппировки) + 1].РассчитыватьИтоги Тогда
				ДобавитьГруппировку = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ДобавитьГруппировку Тогда
			СтруктураВыводГруппировок.Вставить(СтрокаГруппировки.ИмяГруппировки, Массив);
			Массив = Новый Массив;
		Иначе
			Массив.Добавить(СтрокаГруппировки.ИмяГруппировки);
			КолГруппировокБезИтогов = КолГруппировокБезИтогов + 1;
		КонецЕсли;

		ВсегоГруппировок = ВсегоГруппировок + 1;
		СтруктураСдвигУровняГруппировок.Вставить(СтрокаГруппировки.ИмяГруппировки, КолГруппировокБезИтогов);
		МассивГруппировки.Добавить(СтрокаГруппировки.ИмяГруппировки);

		Если Врег(СтрокаГруппировки.ТипИтога) = "ИЕРАРХИЯ" Тогда

			ТекстПоляИтогов = ТекстПоляИтогов + ",
			|	" + СтрокаГруппировки.ИмяГруппировки + " ИЕРАРХИЯ";

		ИначеЕсли Врег(СтрокаГруппировки.ТипИтога) = "ТОЛЬКО ИЕРАРХИЯ" Тогда

			ТекстПоляИтогов = ТекстПоляИтогов + ",
			|	" + СтрокаГруппировки.ИмяГруппировки + " ТОЛЬКО ИЕРАРХИЯ";

		Иначе
			ТекстПоляИтогов = ТекстПоляИтогов + ",
			|	" + СтрокаГруппировки.ИмяГруппировки;

		КонецЕсли;

		ТекстПоляИтогов = ТекстПоляИтогов + " КАК " + СтрокаГруппировки.ИмяГруппировки;

		Если СтрокаГруппировки.РассчитыватьИтоги Тогда

			ЗаголовокКолонки = СтрокаГруппировки.ПредставлениеГруппировки;

		КонецЕсли; 

	КонецЦикла;

	// Количество показателей
	КоличествоПоказателей = ПоказателиОтчета.Итог("ИспользованиеПоказателя");
	
	Для Каждого СтрокаПоказатели Из ПоказателиОтчета Цикл // Формирование списка итогов запроса.

		Если СтрокаПоказатели.ИспользованиеПоказателя = Ложь Тогда
			Продолжить;
		КонецЕсли;

		// Упорядочивание по показателю:
		СтрокаУпорядочивания = "";
		Если СтрокаПоказатели.Сортировка <> 0 Тогда
			ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ", " + 
			СтрокаПоказатели.ИмяПоказателя + СтрокаПоказатели.ВидПоляСортировки + ?(СтрокаПоказатели.Сортировка = 1, " Возр", " Убыв");

			// Строка для шапки отчета
			ПредставлениеПоляСортировки = "";
			мСтруктураНазванийПолейСортировки.Свойство(СтрокаПоказатели.ВидПоляСортировки, ПредставлениеПоляСортировки);
			СтрокаУпорядочивания = СтрокаУпорядочивания + ": " + Нрег(ПредставлениеПоляСортировки) 
			                                            + ?(СтрокаПоказатели.Сортировка = 1, " по возрастанию", " по убыванию");

		КонецЕсли;
		// Строка для шапки отчета
		СтрПоказатели = СтрПоказатели + ", " + СтрокаПоказатели.ПредставлениеПоказателя + СтрокаУпорядочивания;

	КонецЦикла;

	// Удаление лишних запятых
	ТекстПоляИтогов             = Сред(ТекстПоляИтогов,2);
	ТекстПоляИтоговЗапроса      = Сред(ТекстПоляИтоговЗапроса,2);
	ТекстГруппировки            = Сред(СокрЛП(ТекстГруппировки),     2);
	
	ТекстОбщиеФильтры    = Сред(СокрЛП(ТекстОбщиеФильтры),2);
	ТекстПоляУпорядочивания = Сред(ТекстПоляУпорядочивания, 2);
	
	СтрПоказатели  = Сред(СтрПоказатели,  2);
	СтрГруппировки = Сред(СтрГруппировки, 2);
	СтрФильтры     = Сред(СтрФильтры,     2);

	// Пустой период - без ограничения
	Если ДатаНач = '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаНач", '00010101000000');
	Иначе
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	КонецЕсли;
	Если ДатаКон = '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаКон", '00010101000000');
	Иначе
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	КонецЕсли; 

	Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("НеВыводить","{}НеВыводить");
	Запрос.УстановитьПараметр("ТоварКупленный",Перечисления.СтатусыПартийТоваров.Купленный);
	
	Запрос.Текст=ТекстЗапроса;

	Если Не ПустаяСтрока(ТекстПоляУпорядочивания) Тогда
		Запрос.Текст = Запрос.Текст  + Символы.ПС +
		"УПОРЯДОЧИТЬ ПО " + ТекстПоляУпорядочивания;
	КонецЕсли;

	Если Не ПустаяСтрока(ТекстПоляИтогов) Тогда 
		Запрос.Текст = Запрос.Текст + Символы.ПС +  
		"ИТОГИ " + ТекстПоляИтоговЗапроса + Символы.ПС + 
		"ПО ОБЩИЕ, " + ТекстПоляИтогов;
	Иначе
		Запрос.Текст = Запрос.Текст + Символы.ПС +  
		"ИТОГИ  " + ТекстПоляИтоговЗапроса + Символы.ПС + 
		"ПО ОБЩИЕ";
	КонецЕсли;

	Макет = ПолучитьМакет("Макет");
	ДокументРезультат.Очистить();
	СтруктураПараметров = Новый Структура;

	// Области строки отчета - табличные документы из макета отчета
	СтруктураПараметров.Вставить("ОбщийОтступ",         Макет.ПолучитьОбласть("ОбщийОтступ|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировки", Макет.ПолучитьОбласть("Значение|Строка"));
	СтруктураПараметров.Вставить("НачальныйДолг",       Макет.ПолучитьОбласть("НачальныйДолг|Строка"));
	СтруктураПараметров.Вставить("ПоступлениеТМЦ",      Макет.ПолучитьОбласть("ПоступлениеТМЦ|Строка"));
	СтруктураПараметров.Вставить("ОплаченоКред",        Макет.ПолучитьОбласть("ОплаченоКред|Строка"));
	СтруктураПараметров.Вставить("РеализацияТМЦ",       Макет.ПолучитьОбласть("РеализацияТМЦ|Строка"));
	СтруктураПараметров.Вставить("ОплаченоДеб",         Макет.ПолучитьОбласть("ОплаченоДеб|Строка"));
	СтруктураПараметров.Вставить("КонечныйДолг",        Макет.ПолучитьОбласть("КонечныйДолг|Строка"));

	// Табличный документ - результат отчета
	СтруктураПараметров.Вставить("ТабДок",    ДокументРезультат);

	// Массив выводимых показателей отчета
	СтруктураПараметров.Вставить("МассивПоказатели", Новый Массив);
	Для каждого Строка Из ПоказателиОтчета Цикл

		Если Строка.ИспользованиеПоказателя Тогда

			СтруктураПараметров.МассивПоказатели.Добавить(Строка.ИмяПоказателя);

		КонецЕсли;

	КонецЦикла;

	// Общее количество группировок запроса, т.е. как выводимых, так и пропускаемых
	СтруктураПараметров.Вставить("ВсегоГруппировок", 			ВсегоГруппировок);

	// Заполненная структура вывода группировок
	СтруктураПараметров.Вставить("СтруктураВыводГруппировок", 	СтруктураВыводГруппировок);

	// Массив всех группировок запроса, т.е. как выводимых, так и пропускаемых
	СтруктураПараметров.Вставить("МассивГруппировки", 	МассивГруппировки);

	// Заполненная структура "поправки" сдвига группировок вправо
	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок", СтруктураСдвигУровняГруппировок);

	// Наклонный шрифт для групп
	СтруктураПараметров.Вставить("ШрифтГрупп", Новый Шрифт(Макет.Область("НачальныйДолг|Строка").Шрифт,,,,Истина));

	// Форматная строка для вывода показателей
	СтруктураПараметров.Вставить("ФорматПоказателей", 			Новый Структура);
	Для Каждого Строка Из ПоказателиОтчета Цикл

		Если Строка.ИспользованиеПоказателя = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеРесурса = 0;
		ФорматнаяСтрока = "";

		Нстр = мТаблицаПоказатели.Найти(Строка.ИмяПоказателя, "ИмяПоля");
		Если Не (Нстр = Неопределено) Тогда
			ФорматнаяСтрока = НСтр.ФорматнаяСтрока;
		КонецЕсли;

		// Если не задано при начальном заполнении, то из метаданных
		Если ПустаяСтрока(ФорматнаяСтрока) Тогда
			Если мСтруктураМетаданныеРегистраРесурсы.Свойство(Строка.ИмяПоказателя, МетаданныеРесурса) Тогда
				ФорматнаяСтрока = "ЧЦ = " + Строка(МетаданныеРесурса.Тип.КвалификаторыЧисла.Разрядность) 
				                          + " ; ЧДЦ = " 
				                          + Строка(МетаданныеРесурса.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти);
			КонецЕсли;
		КонецЕсли;

		СтруктураПараметров.ФорматПоказателей.Вставить(Строка.ИмяПоказателя, ФорматнаяСтрока);
	КонецЦикла;

	// Указание на возможность вывода суммовых показателей
	Если ПоказателиОтчета.Найти("Сумма","ИмяПоказателя")=Неопределено Тогда
		СтруктураПараметров.Вставить("ЕстьСумма", Ложь);
	Иначе
		СтруктураПараметров.Вставить("ЕстьСумма", ПоказателиОтчета.Найти("Сумма","ИмяПоказателя").ИспользованиеПоказателя);
	КонецЕсли;

	// Оформление измерений
	ОформлениеСтроки = Новый Массив;

	ОформлениеСтрокиИерархии = Новый Массив;
	
	Если РаскрашиватьИзмерения Тогда

		ТабДокОформлениеИзмерений = Макет.ПолучитьОбласть("ОформлениеИзмерений");
		Для Сч = 1 По ТабДокОформлениеИзмерений.ВысотаТаблицы Цикл

			// Нечетные строки - иерархия, четные - измерения
			Если Сч - Цел(Сч/2)*2 = 1 Тогда

				ОформлениеСтроки.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			Иначе
				ОформлениеСтрокиИерархии.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			КонецЕсли;

		КонецЦикла;

	КонецЕсли; 

	// Оформление строк
	СтруктураПараметров.Вставить("ОформлениеСтроки", ОформлениеСтроки);
	СтруктураПараметров.Вставить("ОформлениеСтрокиИерархии", ОформлениеСтрокиИерархии);
	СтруктураПараметров.Вставить("СтруктураФорматаПолей", Новый Структура);

	// 1. Вывод заголовка отчета
	Для Сч = 1 По 3 Цикл
		Если Сч = 1 Тогда
			Префикс = "Верх";
		ИначеЕсли Сч = 2 Тогда

			// Если нет фильтров, не выводим
			Если ПустаяСтрока(СтрФильтры) Тогда
				Продолжить;
			КонецЕсли;
			Префикс = "Середина";
		ИначеЕсли Сч = 3 Тогда
			Префикс = "Низ";
		КонецЕсли;

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Шапка" + Префикс));

		// Вывод шапки отчета
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Шапка" + Префикс);

		Если Префикс = "Верх" Тогда
			ОбластьЗначение.Параметры.ЗаголовокОтчета = "Отчет по клиентам";
			Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
				ОбластьЗначение.Параметры.Период = "Период: без ограничения " + СтрОшибки;
			Иначе
				Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
					ОбластьЗначение.Параметры.Период = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
					                                      + " - " + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") + СтрОшибки;
				Иначе
					ОбластьЗначение.Параметры.Период = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон)) + СтрОшибки;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Префикс = "Середина" Тогда
			ОбластьЗначение.Параметры.Фильтры = "Отбор: " + СтрФильтры;
		ИначеЕсли Префикс = "Низ" Тогда
			ОбластьЗначение.Параметры.Группировки = "Группировки: " + СтрГруппировки;
			ОбластьЗначение.Параметры.Показатели = "Показатели: " + СтрПоказатели;

		КонецЕсли;

		ДокументРезультат.Присоединить(ОбластьЗначение);

	КонецЦикла;

	// Параметр для показа заголовка
	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;

	// Когда нужен только заголовок:
	Если ТолькоЗаголовок Тогда

		Возврат;
	
	КонецЕсли; 

	// Выполнение сформированного запроса
	Результат = Запрос.Выполнить();

	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаТаблицы"));
	ОбластьЗначениеШапкаТаблицы = Макет.ПолучитьОбласть("Значение|ШапкаТаблицы");
	ОбластьЗначениеШапкаТаблицы.Область(2,1).Текст = ЗаголовокКолонки;
	ДокументРезультат.Присоединить(ОбластьЗначениеШапкаТаблицы);

	Если СтруктураПараметров.ЕстьСумма Тогда // Выводится информация по взаиморасчетам и движению средств

		ОбластьДолгНачало = Макет.ПолучитьОбласть("НачальныйДолг|ШапкаТаблицы");

		ДокументРезультат.Присоединить(ОбластьДолгНачало);

		ОбластьОплатаДеб=Макет.ПолучитьОбласть("ОплаченоДеб|ШапкаТаблицы");
		ДокументРезультат.Присоединить(ОбластьОплатаДеб);

		ТекстПоступлениеТМЦ="Из них поступление ТМЦ (работ, услуг)";
		ТекстРеализацияТМЦ="Из них реализация ТМЦ (работ, услуг)";

		ОбластьПоступлениеТМЦ=Макет.ПолучитьОбласть("ПоступлениеТМЦ|ШапкаТаблицы");
		ОбластьПоступлениеТМЦ.Параметры.ТекстПоступлениеТМЦ=ТекстПоступлениеТМЦ;

		Для Индекс=1 по КоличествоПоказателей Цикл
			ДокументРезультат.Присоединить(ОбластьПоступлениеТМЦ);
		КонецЦикла;

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы-КоличествоПоказателей+1, 
		ДокументРезультат.ВысотаТаблицы,  ДокументРезультат.ШиринаТаблицы).Объединить();

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, ДокументРезультат.ШиринаТаблицы-КоличествоПоказателей, 
		ДокументРезультат.ВысотаТаблицы-1,  ДокументРезультат.ШиринаТаблицы).Объединить();
	
		ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("ОплаченоКред|ШапкаТаблицы"));

		ОбластьРеализацияТМЦ=Макет.ПолучитьОбласть("РеализацияТМЦ|ШапкаТаблицы");
		ОбластьРеализацияТМЦ.Параметры.ТекстРеализацияТМЦ=ТекстРеализацияТМЦ;

		Для Индекс=1 по КоличествоПоказателей Цикл
			ДокументРезультат.Присоединить(ОбластьРеализацияТМЦ);
		КонецЦикла;

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы-КоличествоПоказателей+1, 
		ДокументРезультат.ВысотаТаблицы,  ДокументРезультат.ШиринаТаблицы).Объединить();

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, ДокументРезультат.ШиринаТаблицы-КоличествоПоказателей, 
		ДокументРезультат.ВысотаТаблицы-1,  ДокументРезультат.ШиринаТаблицы).Объединить();

		Если СтруктураПараметров.ЕстьСумма Тогда

			ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("КонечныйДолг|ШапкаТаблицы"));

		КонецЕсли;

		Если КоличествоПоказателей>1 Тогда

			ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаПоказатели"));
			ОбластьЗначение   	= Макет.ПолучитьОбласть("Значение|ШапкаПоказатели");

			ДокументРезультат.Присоединить(ОбластьЗначение);

			ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("НачальныйДолг|ШапкаПоказатели"));

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2,3,
			ДокументРезультат.ВысотаТаблицы, 3).Объединить();

			ОбластьОплатаДеб=Макет.ПолучитьОбласть("ОплаченоДеб|ШапкаПоказатели");
			ДокументРезультат.Присоединить(ОбластьОплатаДеб);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1,4,
			ДокументРезультат.ВысотаТаблицы, 4).Объединить();

			ОбластьПоказатели=Макет.ПолучитьОбласть("ПоступлениеТМЦ|ШапкаПоказатели");

			Для Каждого Строка Из ПоказателиОтчета Цикл
				Если Строка.ИспользованиеПоказателя Тогда
					ОбластьПоказатели.Параметры.Показатель=Строка.ПредставлениеПоказателя;
					ДокументРезультат.Присоединить(ОбластьПоказатели);
				КонецЕсли;
			КонецЦикла;	

			ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("ОплаченоКред|ШапкаПоказатели"));

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1,4+КоличествоПоказателей+1, 
			ДокументРезультат.ВысотаТаблицы,  4+КоличествоПоказателей+1).Объединить();

			ОбластьПоказатели=Макет.ПолучитьОбласть("РеализацияТМЦ|ШапкаПоказатели");

			Для Каждого Строка Из ПоказателиОтчета Цикл
				Если Строка.ИспользованиеПоказателя Тогда
					ОбластьПоказатели.Параметры.Показатель=Строка.ПредставлениеПоказателя;
					ДокументРезультат.Присоединить(ОбластьПоказатели);
				КонецЕсли;
			КонецЦикла;

			ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("КонечныйДолг|ШапкаПоказатели"));

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2,ДокументРезультат.ШиринаТаблицы,
			ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).Объединить();

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2, 2, 
			ДокументРезультат.ВысотаТаблицы,  2).Объединить();

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2, 2, 
			ДокументРезультат.ВысотаТаблицы,  2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

		Иначе

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
			ДокументРезультат.ВысотаТаблицы,   2).Объединить();

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 3, 
			ДокументРезультат.ВысотаТаблицы,   3).Объединить();

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
			ДокументРезультат.ВысотаТаблицы,  2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1,ДокументРезультат.ШиринаТаблицы,
			ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).Объединить();

		КонецЕсли;

	Иначе // Выводится информация только по движению ТМЦ

		ТекстПоступлениеТМЦ="";
		ТекстРеализацияТМЦ="";

		ОбластьПоступлениеТМЦ=Макет.ПолучитьОбласть("ПоступлениеТМЦ|ШапкаТаблицы");
		ОбластьПоступлениеТМЦ.Параметры.ТекстПоступлениеТМЦ=ТекстПоступлениеТМЦ;

		Для Индекс=1 по КоличествоПоказателей Цикл
			ДокументРезультат.Присоединить(ОбластьПоступлениеТМЦ);
		КонецЦикла;

		ОбластьРеализацияТМЦ=Макет.ПолучитьОбласть("РеализацияТМЦ|ШапкаТаблицы");
		ОбластьРеализацияТМЦ.Параметры.ТекстРеализацияТМЦ=ТекстРеализацияТМЦ;

		Для Индекс=1 по КоличествоПоказателей Цикл
			ДокументРезультат.Присоединить(ОбластьРеализацияТМЦ);
		КонецЦикла;

		Если КоличествоПоказателей>1 Тогда

			ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаПоказатели"));
			ОбластьЗначение   	= Макет.ПолучитьОбласть("Значение|ШапкаПоказатели");

			ДокументРезультат.Присоединить(ОбластьЗначение);

			ОбластьПоказатели=Макет.ПолучитьОбласть("ПоступлениеТМЦ|ШапкаПоказатели");

			Для Каждого Строка Из ПоказателиОтчета Цикл
				Если Строка.ИспользованиеПоказателя Тогда
					ОбластьПоказатели.Параметры.Показатель=Строка.ПредставлениеПоказателя;
					ДокументРезультат.Присоединить(ОбластьПоказатели);
				КонецЕсли;
			КонецЦикла;

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2,3, 
			ДокументРезультат.ВысотаТаблицы-1,  2+КоличествоПоказателей).Объединить();

			ОбластьПоказатели=Макет.ПолучитьОбласть("РеализацияТМЦ|ШапкаПоказатели");

			Для Каждого Строка Из ПоказателиОтчета Цикл
				Если Строка.ИспользованиеПоказателя Тогда
					ОбластьПоказатели.Параметры.Показатель=Строка.ПредставлениеПоказателя;
					ДокументРезультат.Присоединить(ОбластьПоказатели);
				КонецЕсли;
			КонецЦикла;

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2,3+КоличествоПоказателей, 
			ДокументРезультат.ВысотаТаблицы-1,  2+КоличествоПоказателей*2).Объединить();

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2, 2, 
			ДокументРезультат.ВысотаТаблицы,  2).Объединить();

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2, 2, 
			ДокументРезультат.ВысотаТаблицы,  2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

		Иначе

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
			ДокументРезультат.ВысотаТаблицы,   2).Объединить();

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
			ДокументРезультат.ВысотаТаблицы,  2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1,3,
			ДокументРезультат.ВысотаТаблицы, 3).Объединить();

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1,ДокументРезультат.ШиринаТаблицы,
			ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).Объединить();

		КонецЕсли;

	КонецЕсли;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;
	ДокументРезультат.ФиксацияСлева = 2;

	// 2. Вывод строк отчета
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	Если МассивГруппировки.Количество()>0 Тогда

		ВывестиГруппировку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировки[0]), СтруктураПараметров, 0, Новый Массив);

	КонецЕсли;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	// 3. Вывод общих итогов
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ОбщиеИтоги"));
	ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("Значение|ОбщиеИтоги"));
	
	СтруктураПараметров.Вставить("НачальныйДолг",   Макет.ПолучитьОбласть("НачальныйДолг|ОбщиеИтоги"));
    СтруктураПараметров.Вставить("ПоступлениеТМЦ",   Макет.ПолучитьОбласть("ПоступлениеТМЦ|ОбщиеИтоги"));
    СтруктураПараметров.Вставить("ОплаченоКред",   Макет.ПолучитьОбласть("ОплаченоКред|ОбщиеИтоги"));
    СтруктураПараметров.Вставить("РеализацияТМЦ",   Макет.ПолучитьОбласть("РеализацияТМЦ|ОбщиеИтоги"));
    СтруктураПараметров.Вставить("ОплаченоДеб",   Макет.ПолучитьОбласть("ОплаченоДеб|ОбщиеИтоги"));
    СтруктураПараметров.Вставить("КонечныйДолг",   Макет.ПолучитьОбласть("КонечныйДолг|ОбщиеИтоги"));

	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	ВыборкаОбщийИтог.Следующий();
	
	ВывестиПоказатели(ВыборкаОбщийИтог, СтруктураПараметров, Неопределено);

	// 4. Вывод подвала отчета
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Подвал"));

	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Подвал");

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ОбластьПоказатель = Макет.ПолучитьОбласть("НачальныйДолг|Подвал");

	Если СтруктураПараметров.ЕстьСумма Тогда

		Для Индекс=1 по КоличествоПоказателей*2+4 Цикл
			ДокументРезультат.Присоединить(ОбластьПоказатель);
		КонецЦикла;

	Иначе

		Для Индекс=1 по КоличествоПоказателей*2 Цикл
			ДокументРезультат.Присоединить(ОбластьПоказатель);
		КонецЦикла;

	КонецЕсли;

	// Управление заголовком
	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);

	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;
	СтруктураНастроекОтчета.Вставить("ИмяОтчета", мИмяОтчета);

	Для Каждого Реквизит Из Метаданные.Отчеты[мИмяОтчета].Реквизиты Цикл
		СтруктураНастроекОтчета.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
	КонецЦикла;

	Для Каждого ТабличнаяЧасть Из Метаданные.Отчеты[мИмяОтчета].ТабличныеЧасти Цикл
		СтруктураНастроекОтчета.Вставить(ТабличнаяЧасть.Имя, ЭтотОбъект[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	ДокументРезультат.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.Автомасштаб=Истина;

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мДеревоГруппировки 	= Новый ДеревоЗначений;
мТаблицаПоказатели  = Новый ТаблицаЗначений;
мДеревоФильтры     	= Новый ДеревоЗначений;
мТаблицаТипы	    = Новый ТаблицаЗначений;

МассивСтрока = Новый Массив; 
МассивСтрока.Добавить(Тип("Строка"));
КвалификаторСтроки = Новый КвалификаторыСтроки("110", ДопустимаяДлина.Переменная);
ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

МассивТаблицаЗначений = Новый Массив;
МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);

ОписаниеТиповБулевоИСтрока = Новый ОписаниеТипов(ОписаниеТиповСтрока, МассивБулево);

МассивТаблицаЗначений = Новый Массив;
МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);

МассивОписаниеТипов = Новый Массив;
МассивОписаниеТипов.Добавить(Тип("ОписаниеТипов"));
ОписаниеТиповОписаниеТипов = Новый ОписаниеТипов(МассивОписаниеТипов);

МассивСвойство = Новый Массив;
МассивСвойство.Добавить(Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов"));
МассивСвойство.Добавить(Тип("ПланВидовХарактеристикСсылка.НазначенияСвойствКатегорийОбъектов"));
ОписаниеТиповСвойство = Новый ОписаниеТипов(МассивСвойство);

// Инициализация таблиц всех возможных показателей, группировок,  фильтров
мТаблицаПоказатели.Колонки.Добавить("ИмяПоля",           ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ОписаниеПоля",      ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ВклПоУмолчанию",    ОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("Пометка",           ОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока",   ОписаниеТиповСтрока);

мДеревоГруппировки.Колонки.Добавить("ИмяПоля",           ОписаниеТиповСтрока);
мДеревоГруппировки.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
мДеревоГруппировки.Колонки.Добавить("ОписаниеПоля",      ОписаниеТиповСтрока);
мДеревоГруппировки.Колонки.Добавить("РассчитыватьИтоги", ОписаниеТиповБулево);
мДеревоГруппировки.Колонки.Добавить("ТипИтога",          ОписаниеТиповСтрока);
мДеревоГруппировки.Колонки.Добавить("ВозможенФильтр",    ОписаниеТиповБулево);
мДеревоГруппировки.Колонки.Добавить("ВыводитьПустые",    ОписаниеТиповБулевоИСтрока);
мДеревоГруппировки.Колонки.Добавить("ВыводитьПустыеСвязаннаяГруппировка", ОписаниеТиповСтрока);
мДеревоГруппировки.Колонки.Добавить("НазначенияСвойств", ОписаниеТиповТаблицаЗначений);
мДеревоГруппировки.Колонки.Добавить("ВклПоУмолчанию",    ОписаниеТиповБулево);
мДеревоГруппировки.Колонки.Добавить("Пометка",           ОписаниеТиповБулево);
мДеревоГруппировки.Колонки.Добавить("ОписаниеТипов",     ОписаниеТиповОписаниеТипов);
мДеревоГруппировки.Колонки.Добавить("Свойство",          ОписаниеТиповСвойство);

мДеревоФильтры.Колонки.Добавить("ИмяПоля",               ОписаниеТиповСтрока);
мДеревоФильтры.Колонки.Добавить("ПредставлениеПоля",     ОписаниеТиповСтрока);
мДеревоФильтры.Колонки.Добавить("ОписаниеПоля",          ОписаниеТиповСтрока);
мДеревоФильтры.Колонки.Добавить("ИмяПоляВладелец",       ОписаниеТиповСтрока);
мДеревоФильтры.Колонки.Добавить("ВклПоУмолчанию",        ОписаниеТиповБулево);
мДеревоФильтры.Колонки.Добавить("Пометка",               ОписаниеТиповБулево);
мДеревоФильтры.Колонки.Добавить("ОписаниеТипов",         ОписаниеТиповОписаниеТипов);
мДеревоФильтры.Колонки.Добавить("Свойство",              ОписаниеТиповСвойство);

мТаблицаТипы.Колонки.Добавить("ИмяПоля",                 ОписаниеТиповСтрока);
мТаблицаТипы.Колонки.Добавить("ОписаниеТипов");

// Инициализация структуры типов фильтров
мСтруктураТиповФильтров = Новый Структура;
мСтруктураТиповФильтров.Вставить("ОдноИз",   "Одно из:");
мСтруктураТиповФильтров.Вставить("ВсеКроме", "Все, кроме:");

мТипФильтраПоУмолчанию = "ОдноИз";

// Инициализация структуры видов полей сортировки
мСтруктураНазванийПолейСортировки = Новый Структура;
мСтруктураНазванийПолейСортировки.Вставить("НачальныйДолг", "Долг нач.");
мСтруктураНазванийПолейСортировки.Вставить("КонечныйДолг",  "Долг кон.");
мСтруктураНазванийПолейСортировки.Вставить("Приход",        "Поступление товаров");
мСтруктураНазванийПолейСортировки.Вставить("Расход",        "Реализация товаров");
мСтруктураНазванийПолейСортировки.Вставить("ОплаченоДеб",   "Приход от контрагента");
мСтруктураНазванийПолейСортировки.Вставить("ОплаченоКред",  "Расход на контрагента");

мИмяОтчета = Метаданные().Имя;


НП = Новый НастройкаПериода;

мНазваниеОтчета = "";

мВыбиратьИмяРегистра = Истина;

мНаДату = Ложь;

ПоказыватьЗаголовок = Истина;

мСписокОбязательныхОтборов = Новый СписокЗначений;

мСтруктураМетаданныеРегистраРесурсы = Новый Структура;

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
