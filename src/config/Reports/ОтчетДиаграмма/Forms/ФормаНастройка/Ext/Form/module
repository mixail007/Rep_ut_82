Перем СписокТиповДиаграмм;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//  Заполняет реквизиты по диалогу
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьОбъектПоДиалогу()

	// Здесь должно быть расположено заполнение реквизитов
	// отчета по реквизитам формы, непосредственно не связанным
	// с реквизитами отчета (если таковые имеются)

	//Если Не ОграничитьКоличествоСерий Тогда
	//
	//	МаксимумСерийКоличество = 0;
	//
	//КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьОбъектПоДиалогу()

// Заполняет диалог по значениям реквизитов отчета
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДиалогПоОбъекту()

	// Здесь должно быть расположено заполнение реквизитов формы
	// по реквизитам отчета, если они непосредственно не связаны
	// с реквизитами отчета (если таковые имеются)
	Если мВыбиратьИмяРегистра = Ложь Тогда
		ЭлементыФормы.ПанельРазделУчета.Свертка = РежимСверткиЭлементаУправления.Верх;
		
	Иначе
		ЭлементыФормы.ПанельРазделУчета.Свертка = РежимСверткиЭлементаУправления.Нет;
		
	КонецЕсли; 

	Если мРежимВводаПериода = 1 Тогда

		ЭлементыФормы.НадписьДатаНач.Заголовок = "На дату:";

		ЭлементыФормы.ДатаКон.Видимость = Ложь;
		ЭлементыФормы.ДатаНач.Данные = "ДатаКон";
		ЭлементыФормы.НадписьДатаКон.Видимость = Ложь;

		ЭлементыФормы.КнопкаНастройкаПериода.Видимость = Ложь;
	
	Иначе

		ЭлементыФормы.НадписьДатаНач.Заголовок = "Период с:";

		ЭлементыФормы.ДатаКон.Видимость = Истина;
		ЭлементыФормы.ДатаНач.Данные = "ДатаНач";
		ЭлементыФормы.НадписьДатаКон.Видимость = Истина;

		ЭлементыФормы.КнопкаНастройкаПериода.Видимость = Истина;

	КонецЕсли; 

	Сч=0;
	Для Каждого Элемент Из мТаблицаПоказатели Цикл

		Сч = Сч+1;
	
		ЭлементыФормы["Показатель"+Сч].Заголовок = Элемент.ПредставлениеПоля;

		ЭлементыФормы["Показатель"+Сч].Видимость = Истина;
	
	КонецЦикла;

	Для Сч2 = Сч+1 По 6 Цикл

		ЭлементыФормы["Показатель"+Сч2].Видимость = Ложь;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДиалогПоОбъекту()

// Процедура управления видимостью элементов управления
//
// Параметры:
//	Нет.
//
Процедура УправлениеДиалогом()
	
	// Добавление измерений не доступно, когда уже есть измерения
	ЭлементыФормы.КоманднаяПанельИзмеренияКолонки.Кнопки.Добавить.Доступность = НЕ (ПостроительОтчета.ИзмеренияКолонки.Количество()>0);
	ЭлементыФормы.КоманднаяПанельИзмеренияСтроки.Кнопки.Добавить.Доступность = НЕ (ПостроительОтчета.ИзмеренияСтроки.Количество()>0);

	Если ОграничениеСерий = МаксимумСерий.Ограничено Тогда
		ЭлементыФормы.МаксимумСерийКоличество.Доступность = Истина;
		ЭлементыФормы.МаксимумСерийКоличество.Данные = "МаксимумСерийКоличество";
		ЭлементыФормы.МаксимумСерийКоличество.КнопкаРегулирования = Истина;
		ЭлементыФормы.МаксимумСерийКоличество.КнопкаВыбора = Истина;
	ИначеЕсли ОграничениеСерий = МаксимумСерий.Процент Тогда
		ЭлементыФормы.МаксимумСерийКоличество.Доступность = Истина;
		ЭлементыФормы.МаксимумСерийКоличество.Данные = "МаксимумСерийПроцент";
		ЭлементыФормы.МаксимумСерийКоличество.КнопкаРегулирования = Истина;
		ЭлементыФормы.МаксимумСерийКоличество.КнопкаВыбора = Истина;
	Иначе
		ЭлементыФормы.МаксимумСерийКоличество.Доступность = Ложь;
	КонецЕсли;
	
	Если ТипДиаграммыОтчета = ТипДиаграммы.Круговая Тогда
		
		ЭлементыФормы.НастройкаДиаграммы.ТекущаяСтраница = ЭлементыФормы.НастройкаДиаграммы.Страницы.Круговая;
		
	ИначеЕсли ТипДиаграммыОтчета = ТипДиаграммы.КруговаяОбъемная Тогда
		
		ЭлементыФормы.НастройкаДиаграммы.ТекущаяСтраница = ЭлементыФормы.НастройкаДиаграммы.Страницы.КруговаяОбъемная;
		
	ИначеЕсли ТипДиаграммыОтчета = ТипДиаграммы.Гистограмма
		ИЛИ ТипДиаграммыОтчета = ТипДиаграммы.ГистограммаГоризонтальная
		ИЛИ ТипДиаграммыОтчета = ТипДиаграммы.ГистограммаСНакоплением
		ИЛИ ТипДиаграммыОтчета = ТипДиаграммы.ГистограммаСНакоплениемГоризонтальная	Тогда
		
		ЭлементыФормы.НастройкаДиаграммы.ТекущаяСтраница = ЭлементыФормы.НастройкаДиаграммы.Страницы.Гистограмма;
		
	ИначеЕсли ТипДиаграммыОтчета = ТипДиаграммы.ГистограммаОбъемная
		ИЛИ ТипДиаграммыОтчета = ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная
		ИЛИ ТипДиаграммыОтчета = ТипДиаграммы.ГистограммаСНакоплениемОбъемная 
		ИЛИ ТипДиаграммыОтчета = ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная Тогда
	
		ЭлементыФормы.НастройкаДиаграммы.ТекущаяСтраница = ЭлементыФормы.НастройкаДиаграммы.Страницы.ГистограммаОбъемная;
		
	ИначеЕсли ТипДиаграммыОтчета = ТипДиаграммы.График
		ИЛИ ТипДиаграммыОтчета = ТипДиаграммы.ГрафикПоШагам Тогда
	
		ЭлементыФормы.НастройкаДиаграммы.ТекущаяСтраница = ЭлементыФормы.НастройкаДиаграммы.Страницы.График;
		
	ИначеЕсли ТипДиаграммыОтчета = ТипДиаграммы.ГрафикСОбластями
		ИЛИ ТипДиаграммыОтчета = ТипДиаграммы.ГрафикСОбластямиИНакоплением Тогда
	
		ЭлементыФормы.НастройкаДиаграммы.ТекущаяСтраница = ЭлементыФормы.НастройкаДиаграммы.Страницы.ГрафикСОбластями;
		
	ИначеЕсли ТипДиаграммыОтчета = ТипДиаграммы.Изометрическая
		ИЛИ ТипДиаграммыОтчета = ТипДиаграммы.ИзометрическаяЛента
		ИЛИ ТипДиаграммыОтчета = ТипДиаграммы.ИзометрическаяНепрерывная
		ИЛИ ТипДиаграммыОтчета = ТипДиаграммы.ИзометрическаяПирамида Тогда
		
		ЭлементыФормы.НастройкаДиаграммы.ТекущаяСтраница = ЭлементыФормы.НастройкаДиаграммы.Страницы.Изометрическая;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "Перед открытием" формы отчета.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Заголовок = мНазваниеОтчета;

	ЗаполнитьДиалогПоОбъекту();

	УправлениеДиалогом();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик обновления данных формы
//
Процедура ОбновлениеОтображения()

	УправлениеДиалогом();
	
КонецПроцедуры // ОбновлениеОтображения()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик изменения раздела учета.
//
Процедура ИмяРегистраПриИзменении(Элемент)

	Заголовок = мНазваниеОтчета;

	Состояние("Заполнение по умолчанию");
	ЗаполнитьНачальныеНастройки();
	ЗаполнитьДиалогПоОбъекту();

	// При смене имени регистра заменяем название
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(Элемент.Значение);
	Если МетаданныеРегистра <> Неопределено Тогда

		мНазваниеОтчета = МетаданныеРегистра.Представление();

	КонецЕсли; 

	Оповестить("ИзмененоИмяРегистра",,ЭтаФорма);
	
КонецПроцедуры // ПолеВыбораИмяРегистраПриИзменении()

// Процедура - обработчик нажатия кнопки настройки периода.
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	НП = Новый НастройкаПериода;
	НП.УстановитьПериод(ДатаНач, ДатаКон);
	Если НП.Редактировать() Тогда
		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Процедура - обработчик нажатия кнопки ОК.
//
Процедура ОсновныеДействияФормыОК(Кнопка)

	ЗаполнитьОбъектПоДиалогу();
	
	Закрыть(Истина);
	
КонецПроцедуры // ОсновныеДействияФормыОК()

// Процедура - обработчик изменения флажка "Использовать свойства и категории".
//
Процедура ИспользоватьСвойстваИКатегорииПриИзменении(Элемент)

	// Запоминаем текущую настройку
	Настройки = ПостроительОтчета.ПолучитьНастройки(Истина, Истина, Истина, Истина);
	ТабПоказатели = Показатели.Выгрузить();

	// Перезаполнение объекта (с новым текстом запроса)
	Если мВыбиратьИмяРегистра Тогда
		ЗаполнитьНачальныеНастройки();
	Иначе
		ВладелецФормы.ЭтотОтчет.ЗаполнитьНачальныеНастройки();
	КонецЕсли;

	// Восстанавливаем запомненную настройку
	ПостроительОтчета.УстановитьНастройки(Настройки, Истина, Истина, Истина, Истина);
	
	Для Каждого Показатель Из Показатели Цикл
		НайдСтр = ТабПоказатели.Найти(Показатель.Имя, "Имя");
		Если НайдСтр<>Неопределено Тогда
			Показатель.Использование = НайдСтр.Использование;
		КонецЕсли; 
	КонецЦикла;

	Оповестить("ИзмененТекстЗапроса", , ЭтаФорма);
	
КонецПроцедуры // ИспользоватьСвойстваИКатегорииПриИзменении()

// Процедура - обработчик нажатия кнопки "Установить все" командной панели списка показателей
//
Процедура КоманднаяПанельСписокПоказателейУстановитьВсе(Кнопка)
	
	Для каждого Строка Из  Показатели Цикл
		Строка.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Снять все" командной панели списка показателей
//
Процедура КоманднаяПанельСписокПоказателейСнятьВсе(Кнопка)
	
	Для каждого Строка Из  Показатели Цикл
		Строка.Использование = Ложь;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик начала выбора значения отбора
//
Процедура ОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отборы по свойствам и категориям должны быть обработаны специальным образом
	// Они определяются по представлению 
	Если Найти(НРег(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление), "категории") Тогда

		// Ограничение списка категорий
		Назначение = мСоответствиеНазначений.Получить(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление);

		ОсуществитьВыборКатегории(Элемент, Назначение, ЭтаФорма, СтандартнаяОбработка);

	ИначеЕсли Найти(НРег(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление), "св-во") Тогда

		Свойство = мСоответствиеНазначений.Получить(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление);

		ОсуществитьВыборСвойства(Элемент, Свойство, ЭтаФорма, СтандартнаяОбработка);

	КонецЕсли;
	
КонецПроцедуры // ОтборЗначениеНачалоВыбора()

// Процедура - обработчик начала выбора значения отбора
//
Процедура ОтборВидСравненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	// В отборе по категориям можно использовать только равенство или неравенство одному значению
	Если Найти(НРег(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление), "категории") Тогда

		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(ВидСравнения.Равно);
		
	КонецЕсли;
	
КонецПроцедуры // ОтборВидСравненияНачалоВыбораИзСписка()

// Процедура - обработчик перед удалением строки отбора
//
Процедура ОтборПередУдалением(Элемент, Отказ)
	
	Если Не ПустаяСтрока(Элемент.ТекущаяСтрока.Имя) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры // ОтборПередУдалением()

// Процедура - обработчик события Перед началом добавления 
//
Процедура ИзмеренияСтрокиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события Перед началом добавления 
//
Процедура ИзмеренияКолонкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ПостроительОтчета.ИзмеренияКолонки.Количество()>0 Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Транспонировать"
//
Процедура КоманднаяПанельТранспонированиеТранспонировать(Кнопка)
	
	Транспонировать();
	
КонецПроцедуры

// Процедура - обработчик изменения даты начала периода
//
Процедура ДатаНачПриИзменении(Элемент)
	
	НП.УстановитьПериод(ДатаНач, КонецДня(ДатаКон), Истина);
	
КонецПроцедуры

// Процедура - обработчик изменения даты конца периода
//
Процедура ДатаКонПриИзменении(Элемент)
	
	НП.УстановитьПериод(ДатаНач, КонецДня(ДатаКон), Истина);
	
КонецПроцедуры

// Список доступных регистров для универсального отчета
СписокРегистров = ПолучитьСписокРегистровОстатков();
ЭлементыФормы.ИмяРегистра.СписокВыбора = СписокРегистров;

СписокТиповДиаграмм = Новый СписокЗначений;

// Виды диаграмм (доступны все, кроме биржевых)
СписокТиповДиаграмм.Добавить(ТипДиаграммы.Круговая, "Круговая");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.КруговаяОбъемная, "Круговая объемная");

СписокТиповДиаграмм.Добавить(ТипДиаграммы.Гистограмма, "Гистограмма");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаОбъемная, "Гистограмма объемная");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаГоризонтальная, "Гистограмма горизонтальная");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная, "Гистограмма горизонтальная объемная");

СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаСНакоплением, "Гистограмма с накоплением");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаСНакоплениемОбъемная, "Гистограмма с накоплением объемная");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаСНакоплениемГоризонтальная, "Гистограмма с накоплением горизонтальная");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная, "Гистограмма с накоплением горизонтальная объемная");

СписокТиповДиаграмм.Добавить(ТипДиаграммы.График, "График");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГрафикПоШагам, "График по шагам");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГрафикСОбластями, "График с областями");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГрафикСОбластямиИНакоплением, "График с областями и накоплением");

СписокТиповДиаграмм.Добавить(ТипДиаграммы.Изометрическая, "Изометрическая");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ИзометрическаяЛента, "Изометрическая лента");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ИзометрическаяНепрерывная, "Изометрическая непрерывная");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ИзометрическаяПирамида, "Изометрическая пирамида");

ЭлементыФормы.ТипДиаграммы.СписокВыбора = СписокТиповДиаграмм;

// Круговая диаграмма
// Виды подписей к круговой диаграмме
СписокВидовПодписей = Новый СписокЗначений;
СписокВидовПодписей.Добавить(ВидПодписейКДиаграмме.ЗначениеПроцент, "Значение + процент");
СписокВидовПодписей.Добавить(ВидПодписейКДиаграмме.Значение, "Значение");
СписокВидовПодписей.Добавить(ВидПодписейКДиаграмме.Процент, "Процент");
СписокВидовПодписей.Добавить(ВидПодписейКДиаграмме.Серия, "Серия");
СписокВидовПодписей.Добавить(ВидПодписейКДиаграмме.СерияЗначениеПроцент, "Серия + значение + процент");
СписокВидовПодписей.Добавить(ВидПодписейКДиаграмме.СерияПроцент, "Серия + процент");
СписокВидовПодписей.Добавить(ВидПодписейКДиаграмме.СерияЗначение, "Серия + значение");
СписокВидовПодписей.Добавить(ВидПодписейКДиаграмме.Нет, "Нет");

ЭлементыФормы.ВидПодписейКруговая.СписокВыбора = СписокВидовПодписей;
ЭлементыФормы.ВидПодписейКруговаяОбъемная.СписокВыбора = СписокВидовПодписей;

// Раздвижение серий
СписокВидовРаздвиженияСерий = Новый СписокЗначений;
СписокВидовРаздвиженияСерий.Добавить(АвтоРаздвижениеСерий.Все, "Все");
СписокВидовРаздвиженияСерий.Добавить(АвтоРаздвижениеСерий.Максимум, "Максимум");
СписокВидовРаздвиженияСерий.Добавить(АвтоРаздвижениеСерий.Минимум, "Минимум");
СписокВидовРаздвиженияСерий.Добавить(АвтоРаздвижениеСерий.Нет, "Нет");

ЭлементыФормы.РаздвижениеСерийКруговая.СписокВыбора = СписокВидовРаздвиженияСерий;
ЭлементыФормы.РаздвижениеСерийКруговаяОбъемная.СписокВыбора = СписокВидовРаздвиженияСерий;

//  Режим пробелов
СписокРежимовПробелов = Новый СписокЗначений;
СписокРежимовПробелов.Добавить(РежимПробеловДиаграммы.Нет, "Нет");
СписокРежимовПробелов.Добавить(РежимПробеловДиаграммы.ПолнаяШирина, "Полная ширина");
СписокРежимовПробелов.Добавить(РежимПробеловДиаграммы.ПоловинаШирины, "Половина ширины");

ЭлементыФормы.РежимПробеловГистограмма.СписокВыбора = СписокРежимовПробелов;
ЭлементыФормы.РежимПробеловГистограммаОбъемная.СписокВыбора = СписокРежимовПробелов;
ЭлементыФормы.РежимПробеловИзометрическая.СписокВыбора = СписокРежимовПробелов;

СписокВариантовОриентации = Новый СписокЗначений;
СписокВариантовОриентации.Добавить(ОриентацияДиаграммы.ЮгВосток, "Юг-Восток");
СписокВариантовОриентации.Добавить(ОриентацияДиаграммы.ЮгЗапад,  "Юг-Запад");

ЭлементыФормы.ОриентацияИзометрическая.СписокВыбора = СписокВариантовОриентации;

СписокВариантовОграниченияСерий = Новый СписокЗначений;
СписокВариантовОграниченияСерий.Добавить(МаксимумСерий.НеЗадано, "Не задано");
СписокВариантовОграниченияСерий.Добавить(МаксимумСерий.Ограничено, "Числом");
СписокВариантовОграниченияСерий.Добавить(МаксимумСерий.Процент, "Процентом от макс. серии");

ЭлементыФормы.ОграничениеСерий.СписокВыбора = СписокВариантовОграниченияСерий;
