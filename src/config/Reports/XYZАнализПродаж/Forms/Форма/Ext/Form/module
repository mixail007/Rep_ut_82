
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	Нет.
//
Процедура УправлениеПометкамиКнопокКоманднойПанели()
	
	Если ПоказыватьЗаголовок Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Истина;

	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Ложь;

	КонецЕсли;

	Если ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередСохранениемЗначений формы.
//
Процедура ПередСохранениемЗначений(Отказ)
	
	СохраненныеНастройки = Новый Структура;
	СохраненныеНастройки.Вставить("ИспользоватьСвойстваИКатегории", ИспользоватьСвойстваИКатегории);
	СохраненныеНастройки.Вставить("ПоказыватьЗаголовок"           , ПоказыватьЗаголовок);
	СохраненныеНастройки.Вставить("НастройкиПостроителя"          , ПостроительОтчета.ПолучитьНастройки(Истина,, Истина));
	СохраненныеНастройки.Вставить("РаскрашиватьГруппировки"       , РаскрашиватьГруппировки);
	СохраненныеНастройки.Вставить("ОбъектАнализа"                 , ОбъектАнализа);
	СохраненныеНастройки.Вставить("ПараметрАнализа"               , ПараметрАнализа);
	СохраненныеНастройки.Вставить("Периодичность"                 , Периодичность);
	СохраненныеНастройки.Вставить("КоличествоПериодовАнализа"     , КоличествоПериодовАнализа);
	
	СохраненныеНастройки.Вставить("ПараметрXКлассаНач"            , ПараметрXКлассаНач);
	СохраненныеНастройки.Вставить("ПараметрYКлассаНач"            , ПараметрYКлассаНач);
	СохраненныеНастройки.Вставить("ПараметрZКлассаНач"            , ПараметрZКлассаНач);
	СохраненныеНастройки.Вставить("ПараметрXКлассаКон"            , ПараметрXКлассаКон);
	СохраненныеНастройки.Вставить("ПараметрYКлассаКон"            , ПараметрYКлассаКон);
	СохраненныеНастройки.Вставить("ПараметрZКлассаКон"            , ПараметрZКлассаКон);
	
	СохраненныеНастройки.Вставить("ОтборФлагКласс"                , ОтборФлагКласс);
	СохраненныеНастройки.Вставить("ОтборВидСравненияКласс"        , ОтборВидСравненияКласс);
	СохраненныеНастройки.Вставить("ОтборЗначениеКласс"            , ОтборЗначениеКласс);
	
	СохраненныеНастройки.Вставить("НастройкиДиаграммы"            , НастройкиДиаграммы);
	
	СохраненныеНастройки.Вставить("Показатели"                    , Показатели.Выгрузить());
	
КонецПроцедуры

// Обработчик события ПослеВосстановленияЗначений формы.
//
Процедура ПослеВосстановленияЗначений()
	
	Перем ТаблицаОтчета;

	Если НЕ НеЗаполнятьНастройкиПриОткрытии Тогда
	
		Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
			
			СохраненныеНастройки.Свойство("ПараметрАнализа"               , ПараметрАнализа);
			СохраненныеНастройки.Свойство("Периодичность"                 , Периодичность);
			СохраненныеНастройки.Свойство("ОбъектАнализа"                 , ОбъектАнализа);
			СохраненныеНастройки.Свойство("ИспользоватьСвойстваИКатегории", ИспользоватьСвойстваИКатегории);
			
			ЗаполнитьНачальныеНастройки();
			
			ПостроительОтчета.УстановитьНастройки(СохраненныеНастройки.НастройкиПостроителя, Истина,, Истина);
			
			СохраненныеНастройки.Свойство("ПоказыватьЗаголовок"           , ПоказыватьЗаголовок);
			СохраненныеНастройки.Свойство("РаскрашиватьГруппировки"       , РаскрашиватьГруппировки);
			СохраненныеНастройки.Свойство("КоличествоПериодовАнализа"     , КоличествоПериодовАнализа);
			
			СохраненныеНастройки.Свойство("ПараметрXКлассаНач"               , ПараметрXКлассаНач);
			СохраненныеНастройки.Свойство("ПараметрYКлассаНач"               , ПараметрYКлассаНач);
			СохраненныеНастройки.Свойство("ПараметрZКлассаНач"               , ПараметрZКлассаНач);
			СохраненныеНастройки.Свойство("ПараметрXКлассаКон"               , ПараметрXКлассаКон);
			СохраненныеНастройки.Свойство("ПараметрYКлассаКон"               , ПараметрYКлассаКон);
			СохраненныеНастройки.Свойство("ПараметрZКлассаКон"               , ПараметрZКлассаКон);
	
			СохраненныеНастройки.Свойство("ОтборФлагКласс"                , ОтборФлагКласс);
			СохраненныеНастройки.Свойство("ОтборВидСравненияКласс"        , ОтборВидСравненияКласс);
			СохраненныеНастройки.Свойство("ОтборЗначениеКласс"            , ОтборЗначениеКласс);
	
			СохраненныеНастройки.Свойство("НастройкиДиаграммы"            , НастройкиДиаграммы);
			
			СохраненныеНастройки.Свойство("Показатели"                    , ТаблицаОтчета);
			Показатели.Загрузить(ТаблицаОтчета);
		
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	Если НЕ НеЗаполнятьНастройкиПриОткрытии Тогда
		Если ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 Тогда
			ПостроительОтчета.ИзмеренияСтроки.Добавить(ОбъектАнализа);
		КонецЕсли; 
		ДатаОкончания = КонецДня(ТекущаяДата());
	КонецЕсли; 
	
	ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	
	УправлениеПометкамиКнопокКоманднойПанели();

КонецПроцедуры

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ НеЗаполнятьНастройкиПриОткрытии Тогда
		ОбъектАнализа   = "Номенклатура";
		ПараметрАнализа = "СуммаВыручки";
		Периодичность   = Перечисления.Периодичность.Месяц;
		ПараметрАнализа = ЭлементыФормы.ПараметрАнализа.СписокВыбора[0].Значение;
	КонецЕсли; 
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработчик события элемента КоманднаяПанельФормы.Сформировать.
//
Процедура КоманднаяПанельФормыСформировать(Элемент)
	
	СформироватьОтчет(ЭлементыФормы.ОсновнойДокумент);
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.Отбор.
//
Процедура КоманднаяПанельФормыОтбор(Кнопка)

	Если НЕ ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Нет;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.Заголовок.
//
Процедура КоманднаяПанельФормыЗаголовок(Кнопка)

	ПоказыватьЗаголовок = НЕ ПоказыватьЗаголовок;
	ИзменитьВидимостьЗаголовка(ЭлементыФормы.ОсновнойДокумент);
	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.Настройка.
//
Процедура КоманднаяПанельФормыНастройка(Кнопка)
	
	ОтветОтФормы = ОбработкаОбъект.ПолучитьФорму("ФормаНастройки", ЭтаФорма).ОткрытьМодально();
	
	Если ОтветОтФормы = Истина Тогда
		СформироватьОтчет(ЭлементыФормы.ОсновнойДокумент);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.Диаграмма.
//
Процедура КоманднаяПанельФормыДиаграмма(Кнопка)
	
	Если ТипЗнч(ТаблицаДиаграммы) <> Тип("ТаблицаЗначений") Тогда
		Предупреждение("Отсутствуют данные в отчете. Формирование диаграммы невозможно.");
		Возврат;
	ИначеЕсли ТаблицаДиаграммы.Количество() = 0 Тогда
		Предупреждение("Отсутствуют данные в отчете. Формирование диаграммы невозможно.");
		Возврат;
	КонецЕсли; 
	
	ФормаНастройкиДиаграммы = ЭтотОбъект.ПолучитьФорму("ФормаНастройкиДиаграммы", ЭтаФорма);
	
	Для каждого Показатель Из Показатели Цикл
		Если Показатель.Использование Тогда
			СтрокаТаблицы = ФормаНастройкиДиаграммы.ПоказателиДиаграммы.Добавить();
			СтрокаТаблицы.Имя           = Показатель.Имя;
			СтрокаТаблицы.Представление = Показатель.Представление;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ФормаНастройкиДиаграммы.ПоказателиДиаграммы.Количество() = 0 Тогда
		Предупреждение("Необходимо выбрать хотя бы один показатель в отчете.");
		Возврат;
	КонецЕсли;
	
	ФормаНастройкиДиаграммы.ОткрытьМодально();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриИзменении элемента формы ОбъектАнализа.
//
Процедура ОбъектАнализаПриИзменении(Элемент)
	
	// Запоминаем текущую настройку
	Настройки = ПостроительОтчета.ПолучитьНастройки(Истина,, Истина);

	// Перезаполнение объекта (с новым текстом запроса)
	ЗаполнитьНачальныеНастройки();

	// Восстанавливаем запомненную настройку
	ПостроительОтчета.УстановитьНастройки(Настройки, Истина,, Истина);

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ОтборВидСравненияКласс.
//
Процедура ОтборВидСравненияКлассПриИзменении(Элемент)
	
	ОпределитьТипЗначенияОтбораКласса();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ОтборЗначениеКласс.
//
Процедура ОтборЗначениеКлассПриИзменении(Элемент)
	
	ОпределитьТипЗначенияОтбораКласса();
	
	ОтборФлагКласс = Истина;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПараметрАнализа.
//
Процедура ПараметрАнализаПриИзменении(Элемент)
	
	// Запоминаем текущую настройку
	Настройки = ПостроительОтчета.ПолучитьНастройки(Истина,, Истина);

	// Перезаполнение объекта (с новым текстом запроса)
	ЗаполнитьНачальныеНастройки();

	// Восстанавливаем запомненную настройку
	ПостроительОтчета.УстановитьНастройки(Настройки,Истина,, Истина);

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Периодичность.
//
Процедура ПериодичностьПриИзменении(Элемент)
	
	// Запоминаем текущую настройку
	Настройки = ПостроительОтчета.ПолучитьНастройки(Истина,, Истина);

	// Перезаполнение объекта (с новым текстом запроса)
	ЗаполнитьНачальныеНастройки();

	// Восстанавливаем запомненную настройку
	ПостроительОтчета.УстановитьНастройки(Настройки, Истина,, Истина);

КонецПроцедуры

// Заполним список выбора для элемента формы ПараметрАнализа
Для каждого СтрокаТаблицы Из Показатели Цикл
	ЭлементыФормы.ПараметрАнализа.СписокВыбора.Добавить(СтрокаТаблицы.Имя, СтрокаТаблицы.Представление);
КонецЦикла;
ЭлементыФормы.ПараметрАнализа.СписокВыбора.Добавить("ИнтервалыМеждуРасходнымиДокументами", "Интервалы между расходными документами");

// Заполним список выбора для элемента формы ОбъектАнализа
ЭлементыФормы.ОбъектАнализа.СписокВыбора = мСписокОбъектов;

// Заполним список выбора для элемента формы ОтборВидСравненияКласс
ЭлементыФормы.ОтборВидСравненияКласс.СписокВыбора.Добавить(ВидСравнения.Равно);
ЭлементыФормы.ОтборВидСравненияКласс.СписокВыбора.Добавить(ВидСравнения.НеРавно);
ЭлементыФормы.ОтборВидСравненияКласс.СписокВыбора.Добавить(ВидСравнения.ВСписке);
ЭлементыФормы.ОтборВидСравненияКласс.СписокВыбора.Добавить(ВидСравнения.НеВСписке);
