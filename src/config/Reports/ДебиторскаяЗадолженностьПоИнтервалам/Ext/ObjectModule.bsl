
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ОбщийОтчет.мНазваниеОтчета = "Дебиторская задолженность в разрезе интервалов сроков задолженности";

	мТаблицаПоказатели = ОбщийОтчет.мТаблицаПоказатели;

	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	ИспользоватьСвойстваИКатегории = ОбщийОтчет.ИспользоватьСвойстваИКатегории;
	
	мТаблицаПоказатели.Очистить();

	СтруктураПредставлениеПолей = Новый Структура;

	мСоответствиеНазначений = Новый Соответствие;

	МассивОтбора = Новый Массив;
	
	Показатели = ОбщийОтчет.Показатели;

	//Очистим отбор
	Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла; 
	
	ОбщийОтчет.мРежимВводаПериода = 1;
	// Комментарии в тексте запроса используются для следующих целей:
	// 1. комментарий //СВОЙСТВА определяет место, куда будут добавлены поля свойств
	// 2. комментарий //КАТЕГОРИИ определяет место, куда будут добавлены поля для отбора по категориям
	// 3. комментарий //СОЕДИНЕНИЯ определяет место, куда будут добавлены соединения с таблицами- источниками свойств и категорий.
	ПостроительОтчета.Параметры.Вставить("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	ПостроительОтчета.Параметры.Вставить("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Текст = "
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	Дебиторка.ДоговорКонтрагента.Владелец КАК ДоговорКонтрагентаВладелец,
	|	Дебиторка.ДоговорКонтрагента.Владелец.Представление КАК ДоговорКонтрагентаВладелецПредставление,
	|	СУММА(ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Дебиторка.РасчетнаяДата, ДЕНЬ) МЕЖДУ 
	|				НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОтчета, ДЕНЬ, -(ЛинейкиТабличнаяЧасть.НачалоИнтервала)), ДЕНЬ) 
	|				И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОтчета, ДЕНЬ, -(ЛинейкиТабличнаяЧасть.КонецИнтервала)), ДЕНЬ)
	|		ТОГДА Дебиторка.СуммаОстатокВВалютеВзаиморасчетов
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаВзаиморасчетовОстаток,
	|	СУММА(ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Дебиторка.РасчетнаяДата, ДЕНЬ) МЕЖДУ 
	|				НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОтчета, ДЕНЬ, -(ЛинейкиТабличнаяЧасть.НачалоИнтервала)), ДЕНЬ) 
	|				И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОтчета, ДЕНЬ, -(ЛинейкиТабличнаяЧасть.КонецИнтервала)), ДЕНЬ)
	|		ТОГДА Дебиторка.СуммаОстатокВВалютеВзаиморасчетов*КурсыВалют.Курс/КурсыВалют.Кратность/КурсВалютыУпрУчета.Курс/КурсВалютыУпрУчета.Кратность
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаОстаток,
	|	ЛинейкиТабличнаяЧасть.НомерСтроки КАК НомерИнтервала,
	|	ЛинейкиТабличнаяЧасть.Подпись КАК ИнтервалВозраста
	|{
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Дебиторка.РасчетнаяДата, ДЕНЬ) МЕЖДУ 
	|				НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОтчета, ДЕНЬ, -(ЛинейкиТабличнаяЧасть.НачалоИнтервала)), ДЕНЬ) 
	|				И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОтчета, ДЕНЬ, -(ЛинейкиТабличнаяЧасть.КонецИнтервала)), ДЕНЬ)
	|		ТОГДА Дебиторка.СуммаОстатокВВалютеВзаиморасчетов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВзаиморасчетовОстаток,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Дебиторка.РасчетнаяДата, ДЕНЬ) МЕЖДУ 
	|				НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОтчета, ДЕНЬ, -(ЛинейкиТабличнаяЧасть.НачалоИнтервала)), ДЕНЬ) 
	|				И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОтчета, ДЕНЬ, -(ЛинейкиТабличнаяЧасть.КонецИнтервала)), ДЕНЬ)
	|		ТОГДА Дебиторка.СуммаОстатокВВалютеВзаиморасчетов*КурсыВалют.Курс/КурсыВалют.Кратность/КурсВалютыУпрУчета.Курс/КурсВалютыУпрУчета.Кратность
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОстаток,
	|	ДоговорКонтрагента.Владелец.* КАК ДоговорКонтрагентаВладелец,
	|	ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ДоговорКонтрагентаВалютаВзаиморасчетов,
	|	Сделка.* КАК Сделка,
	|	РасчетнаяДата КАК РасчетнаяДата,
	|	РасчетныйДокумент.* КАК РасчетныйДокумент
	|	//СВОЙСТВА
	|}
	|ИЗ(
	|	ВЫБРАТЬ
	|		Остатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		Остатки.Сделка КАК Сделка,
	|		ОсновнаяТаблицаРегистра.Период КАК РасчетнаяДата,
	|		ОсновнаяТаблицаРегистра.Регистратор КАК РасчетныйДокумент,
	|		ВЫБОР
	|			КОГДА
	|				СУММА(ТаблицаПоследующихПриходов.СуммаВзаиморасчетов
	|					*ВЫБОР
	|						КОГДА (ТаблицаПоследующихПриходов.ВидДвижения = &ВидДвиженияПриход) И (ТаблицаПоследующихПриходов.СуммаВзаиморасчетов>0) И (ТаблицаПоследующихПриходов.Регистратор<>ОсновнаяТаблицаРегистра.Регистратор) ТОГДА
	|							1
	|						КОГДА (ТаблицаПоследующихПриходов.ВидДвижения <> &ВидДвиженияПриход) И (ТаблицаПоследующихПриходов.СуммаВзаиморасчетов<0) И (ТаблицаПоследующихПриходов.Регистратор<>ОсновнаяТаблицаРегистра.Регистратор) ТОГДА
	|							-1
	|						ИНАЧЕ
	|							0
	|					КОНЕЦ) > Остатки.СуммаВзаиморасчетовОстаток
	|			//это когда после этого регистратора были другие регистраторы, полностью накрывшие сумму
	|				ТОГДА 0
	|			ИНАЧЕ
	|				ВЫБОР
	|					КОГДА СУММА(ТаблицаПоследующихПриходов.СуммаВзаиморасчетов
	|							*ВЫБОР
	|								КОГДА (ТаблицаПоследующихПриходов.ВидДвижения = &ВидДвиженияПриход) И (ТаблицаПоследующихПриходов.СуммаВзаиморасчетов>0) ТОГДА
	|									1
	|								КОГДА (ТаблицаПоследующихПриходов.ВидДвижения <> &ВидДвиженияПриход) И (ТаблицаПоследующихПриходов.СуммаВзаиморасчетов<0) ТОГДА
	|									-1
	|								ИНАЧЕ
	|									0
	|							КОНЕЦ) > Остатки.СуммаВзаиморасчетовОстаток
	|					ТОГДА 
	|						 СУММА(
	|						 ВЫБОР
	|							КОГДА ОсновнаяТаблицаРегистра.Регистратор = ТаблицаПоследующихПриходов.Регистратор ТОГДА
	|								Остатки.СуммаВзаиморасчетовОстаток
	|							ИНАЧЕ
	|								0
	|						КОНЕЦ) 
	|					-СУММА(ТаблицаПоследующихПриходов.СуммаВзаиморасчетов
	|							*ВЫБОР
	|								КОГДА (ТаблицаПоследующихПриходов.ВидДвижения = &ВидДвиженияПриход) И (ТаблицаПоследующихПриходов.СуммаВзаиморасчетов>0) И (ОсновнаяТаблицаРегистра.Регистратор <> ТаблицаПоследующихПриходов.Регистратор) ТОГДА
	|									1
	|								КОГДА (ТаблицаПоследующихПриходов.ВидДвижения <> &ВидДвиженияПриход) И (ТаблицаПоследующихПриходов.СуммаВзаиморасчетов<0) И (ОсновнаяТаблицаРегистра.Регистратор <> ТаблицаПоследующихПриходов.Регистратор) ТОГДА
	|									-1
	|								ИНАЧЕ
	|									0
	|							КОНЕЦ)
	|			//это когда именно этот регистратор накрыл сумму 
	|					ИНАЧЕ
	|						СУММА(ОсновнаяТаблицаРегистра.СуммаВзаиморасчетов
	|						*ВЫБОР
	|							КОГДА (ОсновнаяТаблицаРегистра.ВидДвижения = &ВидДвиженияПриход) И (ОсновнаяТаблицаРегистра.СуммаВзаиморасчетов>0) И (ОсновнаяТаблицаРегистра.Регистратор = ТаблицаПоследующихПриходов.Регистратор) ТОГДА
	|								1
	|							КОГДА (ОсновнаяТаблицаРегистра.ВидДвижения <> &ВидДвиженияПриход) И (ОсновнаяТаблицаРегистра.СуммаВзаиморасчетов<0) И (ОсновнаяТаблицаРегистра.Регистратор = ТаблицаПоследующихПриходов.Регистратор) ТОГДА
	|								-1
	|							ИНАЧЕ
	|								0
	|						КОНЕЦ)
	|			//это когда регистратор полностью включен в сумму остатка
	|				КОНЕЦ
	|		КОНЕЦ КАК СуммаОстатокВВалютеВзаиморасчетов
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаОтчета, {ДоговорКонтрагента.Владелец.* КАК ДоговорКонтрагентаВладелец, ДоговорКонтрагента.* КАК ДоговорКонтрагента, Сделка.* КАК Сделка}) КАК Остатки
	|			СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ОсновнаяТаблицаРегистра
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ТаблицаПоследующихПриходов
	|					ПО ТаблицаПоследующихПриходов.ДоговорКонтрагента = ОсновнаяТаблицаРегистра.ДоговорКонтрагента
	|						И ТаблицаПоследующихПриходов.Сделка = ОсновнаяТаблицаРегистра.Сделка
	|						И (ТаблицаПоследующихПриходов.Период > ОсновнаяТаблицаРегистра.Период
	|							ИЛИ (ТаблицаПоследующихПриходов.Период = ОсновнаяТаблицаРегистра.Период
	|								И ТаблицаПоследующихПриходов.Регистратор >= ОсновнаяТаблицаРегистра.Регистратор))
	|						И ТаблицаПоследующихПриходов.Период <= &ДатаОтчета
	|						И (ТаблицаПоследующихПриходов.ВидДвижения = &ВидДвиженияПриход И ТаблицаПоследующихПриходов.СуммаВзаиморасчетов>0
	|							ИЛИ ТаблицаПоследующихПриходов.ВидДвижения <> &ВидДвиженияПриход И ТаблицаПоследующихПриходов.СуммаВзаиморасчетов<0)
	|				ПО Остатки.ДоговорКонтрагента = ОсновнаяТаблицаРегистра.ДоговорКонтрагента 
	|					И Остатки.Сделка = ОсновнаяТаблицаРегистра.Сделка
	|					И (ОсновнаяТаблицаРегистра.Период <= &ДатаОтчета) 
	|					И (ОсновнаяТаблицаРегистра.ВидДвижения = &ВидДвиженияПриход И ОсновнаяТаблицаРегистра.СуммаВзаиморасчетов>0
	|						ИЛИ ОсновнаяТаблицаРегистра.ВидДвижения <> &ВидДвиженияПриход И ОсновнаяТаблицаРегистра.СуммаВзаиморасчетов<0)

	|	ГДЕ
	|		(Остатки.СуммаВзаиморасчетовОстаток > 0)
	|
	|	СГРУППИРОВАТЬ ПО
	|		Остатки.ДоговорКонтрагента,
	|		Остатки.Сделка,
	|		ОсновнаяТаблицаРегистра.Период,
	|		ОсновнаяТаблицаРегистра.Регистратор,
	|		Остатки.СуммаВзаиморасчетовОстаток
	|			//это когда после этого регистратора были другие регистраторы, полностью накрывшие сумму

	|) КАК 	Дебиторка
	|	СОЕДИНЕНИЕ Справочник.НастройкаИнтервалов.ТабличнаяЧасть КАК ЛинейкиТабличнаяЧасть2 
	|		ПО Дебиторка.РасчетнаяДата МЕЖДУ 
	|			НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОтчета, ДЕНЬ, -(ЛинейкиТабличнаяЧасть2.НачалоИнтервала)), ДЕНЬ) 
	|			И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОтчета, ДЕНЬ, -(ЛинейкиТабличнаяЧасть2.КонецИнтервала)), ДЕНЬ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОтчета) КАК КурсыВалют
	|		ПО КурсыВалют.Валюта = Дебиторка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	
	|
	|//СОЕДИНЕНИЯ
	|		, Справочник.НастройкаИнтервалов.ТабличнаяЧасть КАК ЛинейкиТабличнаяЧасть
	|		, РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОтчета, Валюта = &ВалютаУпрУчета) КАК КурсВалютыУпрУчета
	|ГДЕ
	|		(ЛинейкиТабличнаяЧасть.Ссылка = &Линейка) 
	|	И (ЛинейкиТабличнаяЧасть2.Ссылка = &Линейка)
	|	И Дебиторка.СуммаОстатокВВалютеВзаиморасчетов>0
	|СГРУППИРОВАТЬ ПО
	|	Дебиторка.ДоговорКонтрагента.Владелец,
	|	ЛинейкиТабличнаяЧасть.НомерСтроки,
	|	ЛинейкитабличнаяЧасть.Подпись
	|//СГРУППИРОВАТЬПО
	|{УПОРЯДОЧИТЬ ПО
	|	ДоговорКонтрагента.Владелец.* КАК ДоговорКонтрагентаВладелец,
	|	Сделка.* КАК Сделка,
	|	РасчетныйДокумент.* КАК РасчетныйДокумент,
	|	РасчетнаяДата}
	|УПОРЯДОЧИТЬ ПО
	|	НомерИнтервала
	|ИТОГИ
	|	максимум(НомерИнтервала), 
	|	СУММА(СуммаВзаиморасчетовОстаток),
	|	СУММА(СуммаОстаток)
	|ПО
	|	ДоговорКонтрагента.Владелец, ОБЩИЕ
	|{ГДЕ 
	|	Дебиторка.ДоговорКонтрагента.Владелец.* КАК ДоговорКонтрагентаВладелец, 
	|	Дебиторка.ДоговорКонтрагента.* КАК ДоговорКонтрагента, 
	|	Дебиторка.Сделка.* КАК Сделка, 
	|	Дебиторка.РасчетнаяДата,
	|	Дебиторка.РасчетныйДокумент.*,
	|	ЛинейкиТабличнаяЧасть.НомерСтроки КАК НомерИнтервала,
	|	ЛинейкиТабличнаяЧасть2.НомерСтроки КАК НомерИнтервала
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|{ИТОГИ ПО
	|	ИнтервалВозраста,
	|	ДоговорКонтрагента.Владелец.* КАК ДоговорКонтрагентаВладелец, 
	|	ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ДоговорКонтрагентаВалютаВзаиморасчетов,
	|	ДоговорКонтрагента.*, 
	|	Сделка.*, 
	|	РасчетныйДокумент, 
	|	РасчетнаяДата
	|	//СВОЙСТВА
	|}
	|АВТОУПОРЯДОЧИВАНИЕ";

	// Соответствие имен полей в запросе и их представлений в отчете
	СтруктураПредставлениеПолей = Новый Структура("
	|ДоговорКонтрагентаВладелец,
	|РасчетныйДокумент,
	|ДоговорКонтрагента,
	|ДоговорКонтрагентаВалютаВзаиморасчетов,
	|ИнтервалВозраста,
	|НомерИнтервала,
	|РасчетнаяДата,
	|СуммаВзаиморасчетовОстаток,
	|СуммаОстаток", 
	
	"Контрагент",
	"Расчетный документ",
	"Договор контрагента",
	"Валюта взаиморасчетов",
	"Интервал сроков задолженности",
	"Номер интервала сроков задолженности",
	"Дата расчетного документа",
	"Сумма дебиторской задолженности в валюте взаиморасчетов",
	"Сумма дебиторской задолженности в валюте упр. учета");

	Если ИспользоватьСвойстваИКатегории Тогда

		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ДоговорКонтрагента.Владелец";
		НоваяСтрока.Представление = "Контрагент";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "РасчетныйДокумент";
		НоваяСтрока.Представление = "Расчетный документ";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "Сделка";
		НоваяСтрока.Представление = "Сделка";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;

		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";

		// Добавим строки запроса, необходимые для использования свойств и категорий
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, мСоответствиеНазначений, ПостроительОтчета.Параметры, , ТекстПоляКатегорий, ТекстПоляСвойств, , , , , , ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);

	КонецЕсли;

	ПостроительОтчета.Текст = Текст;

	Если ИспользоватьСвойстваИКатегории Тогда

		УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, мСоответствиеНазначений, СтруктураПредставлениеПолей);

	КонецЕсли;
	
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "СуммаВзаиморасчетовОстаток";          // Какому полю в запросе соответствует
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля]; // Представление показателя в отчете
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";        // Строка форматирования
	
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "СуммаОстаток";          // Какому полю в запросе соответствует
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля]; // Представление показателя в отчете
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";        // Строка форматирования
	
	// ... и добавляются в табличную часть Показатели
	Для Каждого Строка Из мТаблицаПоказатели Цикл

		Показатель = Показатели.Найти(Строка.ИмяПоля, "Имя");
		Если Показатель = Неопределено Тогда

			Показатель = Показатели.Добавить();
			Показатель.Имя           = Строка.ИмяПоля;
			Показатель.Представление = Строка.ПредставлениеПоля;

			// По умолчанию в отчете выводятся сумма в валюте упр. учета
			Если Строка.ИмяПоля = "СуммаОстаток" Тогда
				Показатель.Использование = Истина;
			КонецЕсли;

		КонецЕсли; 
		
		ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.Имя, ПостроительОтчета);

	КонецЦикла; 

	// Поля отбора, которые будут показаны на основной форме, заносятся в массив МассивОтбора
	МассивОтбора.Добавить("ДоговорКонтрагентаВладелец");

	// Название отчета в заголовке
	мНазваниеОтчета = "Дебиторская задолженность контрагентов в разрезе интервалов сроков задолженности";

	мСтруктураСвязиПоказателейИИзмерений = Новый Структура;
	мСтруктураСвязиПоказателейИИзмерений.Вставить("СуммаОстаток", Новый Структура);
	мСтруктураСвязиПоказателейИИзмерений.Вставить("СуммаВзаиморасчетовОстаток", Новый Структура("ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагента, РасчетныйДокумент, Сделка"));

	ПостроительОтчета.ДоступныеПоля.Удалить(ПостроительОтчета.ДоступныеПоля.Найти("ИнтервалВозраста"));

	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);

	Сч=0;

	Пока Сч<ПостроительОтчета.ВыбранныеПоля.Количество() Цикл

		Если ПостроительОтчета.ИзмеренияСтроки.Найти(ПостроительОтчета.ВыбранныеПоля[Сч].Имя)<>Неопределено Тогда

			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля[Сч]);

		Иначе

			Сч=Сч+1;

		КонецЕсли;

	КонецЦикла;

	Для Каждого Элемент Из МассивОтбора Цикл

		ПолеОтбора = ПостроительОтчета.Отбор.Добавить(Элемент);

	КонецЦикла; 
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

// Сбрасывает настройку интервалов дат для отчетов "Дебиторская задолженность по интервалам"
// и "Товары на комиссии по интервалам"
//
// Параметры: 
//	КакЗаполнять  - булево, указывает, следует ли использовать все интервалы, или не использовать ни один.
// 
процедура ЗаполнитьПараметрыНастройкиИнтервалов(КакЗаполнять = Истина) Экспорт
	ИспользованиеИнтервалов.ЗагрузитьЗначения(Интервалы.ТабличнаяЧасть.ВыгрузитьКолонку("Подпись"));
	для каждого ЭлементНастройки из ИспользованиеИнтервалов Цикл
		ЭлементНастройки.Представление = ЭлементНастройки.Значение;
		ЭлементНастройки.Значение = ИспользованиеИнтервалов.Индекс(ЭлементНастройки);
		//значением здесь является номер интервала в табличной части набора интервалов;
		//по нему в дальнейшем происходит сортировка
	КонецЦикла;
	ИспользованиеИнтервалов.ЗаполнитьПометки(КакЗаполнять);
КОнецПРоцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
// 

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь,  ЕстьОшибки = Ложь) Экспорт
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	Если ВысотаЗаголовка = Неопределено Тогда

		ВысотаЗаголовка = 0;

	КОнецЕсли;

	Если ТолькоЗаголовок И ВысотаЗаголовка<ДокументРезультат.ВысотаТаблицы Тогда

		Возврат;

	КонецЕсли;

	ОтборПоИнтервалу = ПостроительОтчета.Отбор.Найти("НомерИнтервала");
	
	Если ОтборПоИнтервалу = НеОпределено Тогда

		ОтборПоИнтервалу = ПостроительОтчета.Отбор.Добавить("НомерИнтервала", "НомерИнтервала", "Интервал сроков задолженности");

	КонецЕсли;

	ПолнаяКопияЛинейки = Новый СписокЗначений;
	ПолнаяКопияЛинейки.ЗагрузитьЗначения(Интервалы.ТабличнаяЧасть.ВыгрузитьКолонку("Подпись"));

	Для Каждого ЭлементНастройкиЛинейки из ПолнаяКопияЛинейки Цикл

		ЭлементНастройкиЛинейки.Представление = ЭлементНастройкиЛинейки.Значение;
		ЭлементНастройкиЛинейки.Значение = ПолнаяКопияЛинейки.Индекс(ЭлементНастройкиЛинейки);

	КонецЦикла;
	
	для каждого ЭлементНастройки из ИспользованиеИнтервалов Цикл

		Если ЭлементНастройки.Пометка тогда
			ПолнаяКопияЛинейки.Удалить(ПолнаяКопияЛинейки.НайтиПоЗначению(ЭлементНастройки.Значение));
		КОнецЕсли;

	КонецЦикла;

	//Используемые элементы линейки были удалены из ПолнаяКопияЛинейки
	Если ПолнаяКопияЛинейки.Количество()>0 тогда
		//Настраиваем отбор
		ОтборПоИнтервалу.ВидСравнения = ВидСравнения.ВСписке;
		списокДляСравнения = новый СписокЗначений;
		для каждого СтрокаТабЧасти из Интервалы.ТабличнаяЧасть Цикл
			Если ПолнаяКопияЛинейки.НайтиПоЗначению(СТрокаТабЧасти.НомерСтроки - 1) = Неопределено тогда
				списокДляСравнения.Добавить(СТрокаТабЧасти.НомерСтроки, СТрокаТабЧасти.Подпись);
			КОнецЕсли;
		КонецЦикла;
		ОтборПоИнтервалу.Использование = Истина;
		ОтборПоИнтервалу.Значение = СписокДляСравнения;
	КонецЕсли;

	Если ОбщийОтчет.ДатаКон <> '00010101000000' Тогда
		ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ОбщийОтчет.ДатаКон));
	КонецЕсли;

	Если НЕ ТолькоЗаголовок Тогда
		Если Интервалы.Пустая() Тогда
			Предупреждение("Способ группировки по интервалам должен быть указан!!!");
			Возврат;
		КонецЕсли;
		Если ОбщийОтчет.ДатаКон = '00010101000000' Тогда
			Предупреждение("Дата формирования отчета должна быть указана!!!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ОбщийОтчет.ПостроительОтчета.ИзмеренияКолонки.Найти("ИнтервалВозраста") = Неопределено Тогда

		ПолеНастройки = ПостроительОтчета.ДоступныеПоля.Добавить("ИнтервалВозраста", "Интервал срока задолженности");
		ПолеНастройки.Измерение = Истина;
		ПостроительОтчета.ИзмеренияКолонки.Добавить("ИнтервалВозраста");
		ПостроительОтчета.ДоступныеПОля.Удалить(ПолеНастройки);

	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("ДатаОтчета", ОбщийОтчет.ДатаКон);
	ПостроительОтчета.Параметры.Вставить("Линейка", Интервалы);


	//Все. Берем Список/Кросс-Таблицу и говорим ему, чтобы сформировался в наш табличный документ
	
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок, ЕстьОшибки);

	ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(ОтборПоИнтервалу));

КонецПроцедуры // СформироватьОтчет()

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	Интервалы = Параметры["Интервалы"];
	ИспользованиеИнтервалов = Параметры["ИспользованиеИнтервалов"];
	ЗаполнитьНачальныеНастройки();
	
	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройки");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 
		
		Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
			
			НайденныйИнтервал = "";
			СписокИспользованиеИнтервалов = Новый СписокЗначений;
			
			Если Расшифровка.Свойство("ИнтервалВозраста", НайденныйИнтервал) тогда
				Для Каждого ЭлементНастройкиИнтервалов из ИспользованиеИнтервалов Цикл
					Если ЭлементНастройкиИнтервалов.Представление = НайденныйИнтервал тогда
						СписокИспользованиеИнтервалов.Добавить(ЭлементНастройкиИнтервалов.Значение, ЭлементНастройкиИнтервалов.Представление, Истина)
					Иначе
						СписокИспользованиеИнтервалов.Добавить(ЭлементНастройкиИнтервалов.Значение, ЭлементНастройкиИнтервалов.Представление, Ложь)
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				Для Каждого ЭлементНастройкиИнтервалов из ИспользованиеИнтервалов Цикл
					СписокИспользованиеИнтервалов.Добавить(ЭлементНастройкиИнтервалов.Значение, ЭлементНастройкиИнтервалов.Представление, ЭлементНастройкиИнтервалов.Пометка);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Расшифровка.Вставить("ИспользованиеИнтервалов", СписокИспользованиеИнтервалов);
		Расшифровка.Вставить("Интервалы", Интервалы);
		
		ИзмерениеИнтервалВозраста = ПолучитьПостроительОтчета().ИзмеренияКолонки.Найти("ИнтервалВозраста");
		Если ИзмерениеИнтервалВозраста<>Неопределено Тогда
			ПолучитьПостроительОтчета().ИзмеренияКолонки.Удалить(ИзмерениеИнтервалВозраста);
		КонецЕсли;
		
		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Интервалы", Интервалы);
	СтруктураНастроек.Вставить("ИспользованиеИнтервалов", ИспользованиеИнтервалов);
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	Если ТипЗнч(СохраненныеНастройки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	СохраненныеНастройки.Свойство("Интервалы", Интервалы);
	СохраненныеНастройки.Свойство("ИспользованиеИнтервалов", ИспользованиеИнтервалов);
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НП = Новый НастройкаПериода;

мТаблицаПоказатели  = Новый ТаблицаЗначений;

ОписаниеТиповСтрока = ПолучитьОписаниеТиповСтроки(100);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

// Инициализация таблиц всех возможных показателей, группировок,  фильтров
мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока", ОписаниеТиповСтрока);

мМассивШиринКолонок = Новый Массив;

мСтруктураСвязиПоказателейИИзмерений = Новый Структура;

мНазваниеОтчета = "";

мВыбиратьИмяРегистра = Истина;

мНаДату = Ложь;

ПоказыватьЗаголовок = Истина;

ШиринаТаблицы = 0;

ВыводитьПоказателиВСтроку = Истина;