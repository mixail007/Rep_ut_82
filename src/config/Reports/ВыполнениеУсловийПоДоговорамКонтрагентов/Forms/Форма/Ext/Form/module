
// Структура содержащая данные о связи элементов управления быстрых отборов с данными
Перем СтруктураСвязиЭлементовСДанными;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	Нет.
//
Процедура УправлениеПометкамиКнопокКоманднойПанели()
	
	Если ПоказыватьЗаголовок Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Истина;

	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Ложь;

	КонецЕсли;

	Если ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.Сформировать.
//
Процедура КоманднаяПанельФормыСформировать(Кнопка)
	
	СформироватьОтчет(ЭлементыФормы.ТабличныйДокумент);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.Настройка.
//
Процедура КоманднаяПанельФормыНастройка(Кнопка)
	
	ФормаНастройки = ОбработкаОбъект.ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	ФлагВозврата = ФормаНастройки.ОткрытьМодально();
	
	Если ФлагВозврата = Истина Тогда
		СформироватьОтчет(ЭлементыФормы.ТабличныйДокумент);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.Отбор.
//
Процедура КоманднаяПанельФормыОтбор(Кнопка)

	Если НЕ ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Нет;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.Заголовок.
//
Процедура КоманднаяПанельФормыЗаголовок(Кнопка)

	ПоказыватьЗаголовок = НЕ ПоказыватьЗаголовок;
	ИзменитьВидимостьЗаголовка(ЭлементыФормы.ТабличныйДокумент);
	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события формы ПередСохранениемЗначений.
//
Процедура ПередСохранениемЗначений(Отказ)
	
	СохраненныеНастройки = Новый Структура;
	
	СохраненныеНастройки.Вставить("РаскрашиватьГруппировки", РаскрашиватьГруппировки);
	СохраненныеНастройки.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
	
	// Сохраним отбор с использованием структуры
	СохраненныеНастройки.Вставить("СтруктураОтбора"                     , ПолучитьСтруктуруОтбора(Отбор));
	СохраненныеНастройки.Вставить("ГруппировкаДоговорКонтрагента"       , ГруппировкаДоговорКонтрагента);
	СохраненныеНастройки.Вставить("ГруппировкаДокументВыполненияУсловий", ГруппировкаДокументВыполненияУсловий);
	СохраненныеНастройки.Вставить("ГруппировкаДокументУсловий"          , ГруппировкаДокументУсловий);
	СохраненныеНастройки.Вставить("ГруппировкаКонтрагент"               , ГруппировкаКонтрагент);
	СохраненныеНастройки.Вставить("ГруппировкаНоменклатураУсловий"      , ГруппировкаНоменклатураУсловий);
	
КонецПроцедуры

// Обработчик события формы ПослеВосстановленияЗначений.
//
Процедура ПослеВосстановленияЗначений()
	
	Перем СтруктураОтбора;
	
	Если НЕ НеЗаполнятьНастройкиПриОткрытии Тогда
	
		СохраненныеНастройки.Свойство("РаскрашиватьГруппировки"             , РаскрашиватьГруппировки);
		СохраненныеНастройки.Свойство("ПоказыватьЗаголовок"                 , ПоказыватьЗаголовок);
		СохраненныеНастройки.Свойство("ГруппировкаДоговорКонтрагента"       , ГруппировкаДоговорКонтрагента);
		СохраненныеНастройки.Свойство("ГруппировкаДокументВыполненияУсловий", ГруппировкаДокументВыполненияУсловий);
		СохраненныеНастройки.Свойство("ГруппировкаДокументУсловий"          , ГруппировкаДокументУсловий);
		СохраненныеНастройки.Свойство("ГруппировкаКонтрагент"               , ГруппировкаКонтрагент);
		СохраненныеНастройки.Свойство("ГруппировкаНоменклатураУсловий"      , ГруппировкаНоменклатураУсловий);
		
		СохраненныеНастройки.Свойство("СтруктураОтбора", СтруктураОтбора);
		ЗаполнитьОтборИзСтруктуры(Отбор, СтруктураОтбора);
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы ПриОткрытии.
//
Процедура ПриОткрытии()
	
	Для каждого ЭлементСписка Из мСписокОтборов Цикл
		Если Отбор.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			Отбор.Добавить(ЭлементСписка.Значение);
		КонецЕсли; 
	КонецЦикла;
	
	УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, Отбор, СтруктураСвязиЭлементовСДанными, "ОбработкаОбъект.Отбор");
	
	Если НЕ НеЗаполнятьНастройкиПриОткрытии Тогда
		ДатаНачала    = НачалоДня(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяДатаНачалаОтчетов"));
		ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	
	ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	
	УправлениеПометкамиКнопокКоманднойПанели();

КонецПроцедуры

// Обработчик события формы ПередОткрытием.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	НП.УстановитьПериод(ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриИзменении элемента формы ПолеВидаСравненияКонтрагент.
//
Процедура ПолеВидаСравненияКонтрагентПриИзменении(Элемент)

	ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеВидаСравненияДоговорКонтрагента.
//
Процедура ПолеВидаСравненияДоговорКонтрагентаПриИзменении(Элемент)

	ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеНастройкиСКонтрагент.
//
Процедура ПолеНастройкиСКонтрагентПриИзменении(Элемент)
	
	ПолеНастройкиСПриИзменении(Элемент, Отбор);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеНастройкиСДоговорКонтрагента.
//
Процедура ПолеНастройкиСДоговорКонтрагентаПриИзменении(Элемент)
	
	ПолеНастройкиСПриИзменении(Элемент, Отбор);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеНастройкиПоКонтрагент.
//
Процедура ПолеНастройкиПоКонтрагентПриИзменении(Элемент)
	
	ПолеНастройкиПоПриИзменении(Элемент, Отбор);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеНастройкиПоДоговорКонтрагента.
//
Процедура ПолеНастройкиПоДоговорКонтрагентаПриИзменении(Элемент)
	
	ПолеНастройкиПоПриИзменении(Элемент, Отбор);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеНастройкиКонтрагент.
//
Процедура ПолеНастройкиКонтрагентПриИзменении(Элемент)
	
	ПолеНастройкиПриИзменении(Элемент, Отбор);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеНастройкиДоговорКонтрагента.
//
Процедура ПолеНастройкиДоговорКонтрагентаПриИзменении(Элемент)
	
	ПолеНастройкиПриИзменении(Элемент, Отбор);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КнопкаНастройкаПериода.
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	Если НП.Редактировать() Тогда
		
		ДатаНачала = НП.ПолучитьДатуНачала();
		ДатаОкончания = НП.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры
