Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт
	
	
    //+++ 11.09.2012
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		ДоступноеПодразделение = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
		ОбщийОтчет.ПостроительОтчета.Отбор.ДоговорКонтрагентаОтветственноеЛицоОсновноеПодразделение.видСравнения = видСравнения.Равно;
		ОбщийОтчет.ПостроительОтчета.Отбор.ДоговорКонтрагентаОтветственноеЛицоОсновноеПодразделение.Значение = ДоступноеПодразделение;
		ОбщийОтчет.ПостроительОтчета.Отбор.ДоговорКонтрагентаОтветственноеЛицоОсновноеПодразделение.Использование = Истина;
	КонецЕсли;

	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ПереключательЗадолженность", ПереключательЗадолженность);
	
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);
	
	

КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	СтруктураПредставлениеПолей = Новый Структура;
	МассивОтбора = Новый Массив;
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	//ЗаполнитьНачальныеНастройкиПоМакету(ПолучитьМакет("ПараметрыОтчетовОстаткиТоваровКомпании"), СтруктураПредставлениеПолей, МассивОтбора, ОбщийОтчет, "СписокКроссТаблица");
	//УниверсальныйОтчет.ЗаполнитьНачальныеНастройкиПоМетаданнымрегистра(СтруктураПредставлениеПолей, МассивОтбора);
	Текст = 
	"ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	//|   ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,     //***20151105 с этим полем не работало
	//|   ВзаиморасчетыСКонтрагентамиОстатки.Сделка Сделка,                                 //***и с этим тоже не работало
	|	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетов,
	|	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК СуммаУпр
	|{ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец.* КАК Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.* КАК Сделка
	|	//СВОЙСТВА
	|}
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, {ДоговорКонтрагента.Владелец.* КАК Контрагент, Сделка.* КАК Сделка, ДоговорКонтрагента.* КАК ДоговорКонтрагента}) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон,{ДоговорКонтрагента.Владелец.* КАК Контрагент, Сделка.* КАК Сделка, ДоговорКонтрагента.* КАК ДоговорКонтрагента}) КАК ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа
	|			ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.ДоговорКонтрагента
//	|			И ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.Сделка     //***  20151105
	|			И ВЫБОР
	|				КОГДА &ПереключательЗадолженность = 1
	|					ТОГДА ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.СуммаВзаиморасчетовОстаток>0
	|							ИЛИ ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.СуммаУпрОстаток>0
	|				КОГДА &ПереключательЗадолженность = 2
	|					ТОГДА ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.СуммаВзаиморасчетовОстаток<0
	|                           ИЛИ ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.СуммаУпрОстаток<0
	|				ИНАЧЕ Истина
	|			КОНЕЦ
	|	//СОЕДИНЕНИЯ
	|{
	|ГДЕ 
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец.* КАК Контрагент, 
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.* КАК Сделка, 
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.* КАК ДоговорКонтрагента
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВидДоговора

//	|ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента, ВзаиморасчетыСКонтрагентамиОстатки.Сделка  //*** 20151105
	|//СГРУППИРОВАТЬПО
	//***20151105 добавлено исправление. отчет работал неправильно
	|УПОРЯДОЧИТЬ ПО
	|Контрагент
	//***
	|{УПОРЯДОЧИТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец.* КАК Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.* КАК Сделка
	|	//СВОЙСТВА
	|}
	|
	|ИТОГИ 
	|	СУММА(СуммаВзаиморасчетов), 
	|	СУММА(СуммаУпр) 
	|ПО
	|	ОБЩИЕ,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВидДоговора,
	|	Контрагент //*** 20151105, ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
	|{ИТОГИ ПО 
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,  //***добавлено 08.2015 по просьбе ОП
	|	Контрагент.*, 
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.*, 
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.*, 
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|	//СВОЙСТВА
	|}
	|";
	
	СтруктураПредставлениеПолей = Новый Структура(
	"ВидДоговора,
	|Контрагент,
	|ДоговорКонтрагента,
	|Сделка,
	|ВалютаВзаиморасчетов",
	"Вид договора",
	"Контрагент",
	"Договор контрагента",
	"Сделка",
	"Валюта взаиморасчетов");
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории = Истина Тогда
		
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и
		                                               // категории. Используется в условии соединения с регистром сведений,
		                                               // хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
	//	ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории.
		                                               // Не используется.
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		
		СтрокаТаблицы.ПутьКДанным = "ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец";
		СтрокаТаблицы.Представление = "Контрагент";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		
		СтрокаТаблицы.ПутьКДанным = "ВзаиморасчетыСКонтрагентамиОстатки.Сделка";
		СтрокаТаблицы.Представление = "Сделка";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
		
		
		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";

		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, 
				ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
				,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);

	КонецЕсли;
	
	МассивОтбора.Добавить("Контрагент");
	МассивОтбора.Добавить("ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение");

	ПостроительОтчета.Текст = Текст;
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории = Истина Тогда

		УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);

	КонецЕсли;
	
	Если ОбщийОтчет.Показатели.Найти("СуммаУпр", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("СуммаУпр", "Сумма в " + Константы.ВалютаУправленческогоУчета.Получить().Наименование, Истина, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	
	Если ОбщийОтчет.Показатели.Найти("СуммаВзаиморасчетов", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("СуммаВзаиморасчетов", "Сумма в валюте взаиморасчетов", Ложь, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	
	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		ДоступноеПодразделение = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
		ПостроительОтчета.Отбор.ДоговорКонтрагентаОтветственноеЛицоОсновноеПодразделение.Значение = ДоступноеПодразделение;
		ПостроительОтчета.Отбор.ДоговорКонтрагентаОтветственноеЛицоОсновноеПодразделение.Использование = Истина;
	КонецЕсли;


	ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений = Новый Структура("СуммаУпр, СуммаВзаиморасчетов", Новый Структура, Новый Структура("ДоговорКонтрагента, ВалютаВзаиморасчетов"));

КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ПереключательЗадолженность", ПереключательЗадолженность);
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт

	Если ТипЗнч(СохраненныеНастройки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныеНастройки.Свойство("ПереключательЗадолженность", ПереключательЗадолженность);
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры

ОбщийОтчет.ИмяРегистра = "ТоварыНаСкладах";
ОбщийОтчет.мНазваниеОтчета = "Задолженность по контрагентам";
ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
ПереключательЗадолженность = 3;
ОбщийОтчет.мРежимВводаПериода = 1;