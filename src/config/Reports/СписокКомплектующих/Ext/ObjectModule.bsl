Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ОбщийОтчет.ИмяРегистра = "-";
	ОбщийОтчет.мНазваниеОтчета = "Список комплектующих";

	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;

	СтруктураПредставлениеПолей = Новый Структура;

	ТекстЗапроса = "
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	Номенклатура КАК Комплект,
	|	ХарактеристикаНоменклатуры КАК ХарактеристикаКомплекта,
	|	Комплектующая КАК Комплектующая,
	|	ХарактеристикаКомплектующей КАК ХарактеристикаКомплектующей,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмеренияКомплектующей,
	|	СУММА(ВЫБОР КОГДА Номенклатура.Набор = Истина ТОГДА 0 ИНАЧЕ ДоляСтоимости КОНЕЦ) КАК ДоляСтоимости,
	|	СУММА(Количество) КАК Количество,
	|	СУММА(Количество*Комплектующая.ЕдиницаХраненияОстатков.Коэффициент/Комплектующая.ЕдиницаДляОтчетов.Коэффициент) КАК КоличествоЕдиницДляОтчетов,
	|	СУММА(Количество*Комплектующая.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоБазовыхЕд
	|{ВЫБРАТЬ
	|	Номенклатура.* КАК Комплект,
	|	Номенклатура.БазоваяЕдиницаИзмерения.* КАК КомплектБазоваяЕдиницаИзмерения,
	|	Комплектующая.* КАК Комплектующая,
	|	Комплектующая.БазоваяЕдиницаИзмерения.* КАК КомплектующаяБазоваяЕдиницаИзмерения,
	|	СУММА(ВЫБОР КОГДА Номенклатура.Набор = Истина ТОГДА 0 ИНАЧЕ ДоляСтоимости КОНЕЦ) КАК ДоляСтоимости,
	|	СУММА(Количество) КАК Количество,
	|	СУММА(Количество*Комплектующая.ЕдиницаХраненияОстатков.Коэффициент/Комплектующая.ЕдиницаДляОтчетов.Коэффициент) КАК КоличествоЕдиницДляОтчетов,
	|	СУММА(Количество*Комплектующая.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоБазовыхЕд
	|	//СВОЙСТВА
	|}
	|ИЗ
	|	РегистрСведений.КомплектующиеНоменклатуры КАК ТаблицаРегистра
	|	//СОЕДИНЕНИЯ
	|
	|СГРУППИРОВАТЬ ПО 
	|	Номенклатура,
	|	Номенклатура.БазоваяЕдиницаИзмерения,
	|	ХарактеристикаНоменклатуры,
	|	Комплектующая,
	|	Комплектующая.БазоваяЕдиницаИзмерения,
	|	ХарактеристикаКомплектующей,
	|	ЕдиницаИзмерения
	|	//СГРУППИРОВАТЬПО
	|
	|{ГДЕ
	|	Номенклатура.* КАК Комплект,
	|	Номенклатура.БазоваяЕдиницаИзмерения.* КАК КомплектБазоваяЕдиницаИзмерения,
	|	ХарактеристикаНоменклатуры.* КАК ХарактеристикаКомплекта,
	|	Комплектующая.* КАК Комплектующая,
	|	Комплектующая.БазоваяЕдиницаИзмерения.* КАК КомплектующаяБазоваяЕдиницаИзмерения,
	|	ХарактеристикаКомплектующей.* КАК ХарактеристикаКомплектующей,
	|	ЕдиницаИзмерения.* КАК ЕдиницаИзмеренияКомплектующей
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|{УПОРЯДОЧИТЬ ПО 
	|	Номенклатура.* КАК Комплект,
	|	Номенклатура.БазоваяЕдиницаИзмерения.* КАК КомплектБазоваяЕдиницаИзмерения,
	|	ХарактеристикаНоменклатуры.* КАК ХарактеристикаКомплекта,
	|	Комплектующая.* КАК Комплектующая,
	|	Комплектующая.БазоваяЕдиницаИзмерения.* КАК КомплектующаяБазоваяЕдиницаИзмерения,
	|	ХарактеристикаКомплектующей.* КАК ХарактеристикаКомплектующей,
	|	ЕдиницаИзмерения.* КАК ЕдиницаИзмеренияКомплектующей
	|	//СВОЙСТВА
	|}
	|
	|{ИТОГИ ПО
	|	Номенклатура.* КАК Комплект,
	|	Номенклатура.БазоваяЕдиницаИзмерения.* КАК КомплектБазоваяЕдиницаИзмерения,
	|	ХарактеристикаНоменклатуры.* КАК ХарактеристикаКомплекта,
	|	Комплектующая.* КАК Комплектующая,
	|	Комплектующая.БазоваяЕдиницаИзмерения.* КАК КомплектующаяБазоваяЕдиницаИзмерения,
	|	ХарактеристикаКомплектующей.* КАК ХарактеристикаКомплектующей,
	|	ЕдиницаИзмерения.* КАК ЕдиницаИзмеренияКомплектующей
	|	//СВОЙСТВА
	|}
	|
	|ИТОГИ  
	|	СУММА(Количество),
	|	СУММА(ДоляСтоимости),
	|	СУММА(КоличествоЕдиницДляОтчетов),
	|	СУММА(КоличествоБазовыхЕд)
	|ПО ОБЩИЕ,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Комплектующая,
	|	ХарактеристикаКомплектующей,
	|	ЕдиницаИзмерения
	|АВТОУПОРЯДОЧИВАНИЕ
	|";

	// Соответствие имен полей в запросе и их представлений в отчете
	СтруктураПредставлениеПолей = Новый Структура(
	"	Комплект, 
	|	КомплектБазоваяЕдиницаИзмерения,
	|	ХарактеристикаКомплекта,
	|	Комплектующая,
	|	КомплектующаяБазоваяЕдиницаИзмерения, 
	|	ХарактеристикаКомплектующей, 
	|	ЕдиницаИзмеренияКомплектующей, 
	|	ДоляСтоимости, 
	|	Количество, 
	|	КоличествоЕдиницДляОтчетов, 
	|	КоличествоБазовыхЕд",
	"Комплект/набор",
	"Баз ед. измерения комплекта/набора",
	"Характеристика комплекта/набора",
	"Комплектующая",
	"Баз. ед. измерения комплектующей",
	"Характеристика комплектующей",
	"Ед. измерения комплектующей",
	"Доля стоимости",
	"Количество",
	"Количество (ед. для отчетов)",
	"Количество (баз.ед.)");

	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда

		// Свойства и категории, назначаемые пользователем:
		//Имя поля                    Имя назначения свойств и категорий объектов
		//СкладКомпании               Справочник_СкладКомпании
		//Номенклатура                Справочник_Номенклатура
		//ХарактеристикаНоменклатуры  Справочник_ХарактеристикиНоменклатуры
		//Заказ                       Документы
		//ДокументПоставки            Документы

		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "Номенклатура";
		НоваяСтрока.Представление = "Комплект";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ХарактеристикаНоменклатуры";
		НоваяСтрока.Представление = "Характеристика комплекта";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
		НоваяСтрока.НетКатегорий = Истина;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "Комплектующая";
		НоваяСтрока.Представление = "Комплектующая";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ХарактеристикаКомплектующей";
		НоваяСтрока.Представление = "Характеристика комплектующей";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
		НоваяСтрока.НетКатегорий = Истина;

		// Добавим строки запроса, необходимые для использования свойств и категорий
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, ОбщийОтчет.мСоответствиеНазначений, ОбщийОтчет.ПостроительОтчета.Параметры);

	КонецЕсли;

	ПостроительОтчета.Текст = ТекстЗапроса;

	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);

	// группировки по умолчанию
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Комплект");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Комплектующая");
	
	// отборы по умолчанию
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Комплект");
	МассивОтбора.Добавить("Комплектующая");
	ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	// поля по умолчанию очищены.
	ПостроительОтчета.ВыбранныеПоля.Очистить();

	ОбщийОтчет.РаскрашиватьИзмерения = Истина;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Ложь;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.мРежимВводаПериода = 1; // Дата

	ОбщийОтчет.ЗаполнитьПоказатели("Количество", "Количество в единицах хранения", Истина, "ЧЦ=15; ЧДЦ=3");
	ОбщийОтчет.ЗаполнитьПоказатели("КоличествоБазовыхЕд", "Количество в базовых единицах", Ложь, "ЧЦ=15; ЧДЦ=3");
	ОбщийОтчет.ЗаполнитьПоказатели("КоличествоЕдиницДляОтчетов", "Количество в единицах для отчетов", Ложь, "ЧЦ=15; ЧДЦ=3");

КонецПроцедуры

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт

	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПРоцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры
