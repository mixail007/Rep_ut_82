Перем мНазваниеОтчета Экспорт;

// Все возможные показатели
Перем мТаблицаПоказатели Экспорт;

// Соответствия, содержащия назначения свойств и категорий именам
Перем мСоответствиеНазначений Экспорт;

Перем мСтруктураДляОтбораПоКатегориям Экспорт;

// Структура, содержащая представления полей
Перем СтруктураПредставлениеПолей;

Перем МассивИзмерения;
Перем МассивОтбора;
Перем СостоянияОтгрузки Экспорт;
Перем СостоянияОплаты Экспорт;
Перем ВыводитьДетальныеЗаписи;

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьПоказатели(ИмяПоля, ПредставлениеПоля, ВклПоУмолчанию, ФорматнаяСтрока)

	СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);

	// Показатели заносятся в специальную таблицу и добавляются в список
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = ИмяПоля;
	СтрПоказатели.ПредставлениеПоля = ПредставлениеПоля;
	СтрПоказатели.ВклПоУмолчанию    = ВклПоУмолчанию;
	СтрПоказатели.ФорматнаяСтрока   = ФорматнаяСтрока;

	Показатель = Показатели.Добавить();
	Показатель.Имя           = ИмяПоля;
	Показатель.Представление = ПредставлениеПоля;
	Показатель.Использование = ВклПоУмолчанию;

КонецПроцедуры

Процедура ЗаполнитьПредставление(ИмяПоля, ПредставлениеПоля, ВклВИтоги, ВклВОтбор)

	Если ВклВИтоги Тогда
		МассивИзмерения.Добавить(ИмяПоля);
	КонецЕсли;

	СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);

	Если ВклВОтбор Тогда
		МассивОтбора.Добавить(ИмяПоля);
	КонецЕсли;

КонецПроцедуры

// Выполняет настройку отчета по умолчанию.
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	мТаблицаПоказатели.Очистить();
	Показатели.Очистить();

	СтруктураПредставлениеПолей = Новый Структура;
	мСоответствиеНазначений     = Новый Соответствие;
	МассивИзмерения             = Новый Массив;
	МассивОтбора                = Новый Массив;

	// Очистим отбор
	ОтборКоличество = ПостроительОтчета.Отбор.Количество();
	Для а = 1 По ОтборКоличество Цикл
		ПостроительОтчета.Отбор.Удалить(ОтборКоличество - а);
	КонецЦикла;

	// Отгрузка: Запланировано
	ЗаполнитьПоказатели("Запланировано",       "Отгрузка: запланировано (в единицах хранения)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
	ЗаполнитьПоказатели("ЗапланированоБазЕИ",  "Отгрузка: запланировано (в базовых единицах)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
	ЗаполнитьПоказатели("ЗапланированоОтчЕИ",  "Отгрузка: запланировано (в ед. отчетов)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
						
	// Отгрузка: Осталось отгрузить
	ЗаполнитьПоказатели("ОсталосьОтгрузить",        "Отгрузка: осталось отгрузить (в единицах хранения)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
	ЗаполнитьПоказатели("ОсталосьОтгрузитьБазЕИ",   "Отгрузка: осталось отгрузить (в базовых единицах)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
	ЗаполнитьПоказатели("ОсталосьОтгрузитьОтчЕИ",   "Отгрузка: осталось отгрузить (в ед. отчетов)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
						
	// Отгрузка: Со склада
	ЗаполнитьПоказатели("Резерв",      "Отгрузка: со склада (в единицах хранения)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
	ЗаполнитьПоказатели("РезервБазЕИ", "Отгрузка: со склада (в базовых единицах)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
	ЗаполнитьПоказатели("РезервОтчЕИ", "Отгрузка: со склада (в ед. отчетов)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
						
	// Отгрузка: Из заказов
	ЗаполнитьПоказатели("Заказано",      "Отгрузка: из заказов (в единицах хранения)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
	ЗаполнитьПоказатели("ЗаказаноБазЕИ", "Отгрузка: из заказов (в базовых единицах)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
	ЗаполнитьПоказатели("ЗаказаноОтчЕИ", "Отгрузка: из заказов (в ед. отчетов)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
						
	// Осталось обеспечить
	ЗаполнитьПоказатели("ОсталосьОбеспечить",      "Отгрузка: осталось обеспечить (в единицах хранения)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
	ЗаполнитьПоказатели("ОсталосьОбеспечитьБазЕИ", "Отгрузка: осталось обеспечить (в базовых единицах)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
	ЗаполнитьПоказатели("ОсталосьОбеспечитьОтчЕИ", "Отгрузка: осталось обеспечить (в ед. отчетов)",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
						
	// Суммовые показатели
	ЗаполнитьПоказатели("СуммаЗаказа",         "Оплата: запланировано",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 2");
	ЗаполнитьПоказатели("ОсталосьОплатить",    "Оплата: осталось оплатить",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 2");
	ЗаполнитьПоказатели("Предоплата",          "Оплата: предоплата",
	                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 2");

	ЗаполнитьПредставление("Контрагент"                , "Контрагент"                  , ИСТИНА, ИСТИНА);
	ЗаполнитьПредставление("ДоговорКонтрагента"        , "Договор контрагента"         , ИСТИНА, ИСТИНА);
	ЗаполнитьПредставление("Организация"               , "Организация"                 , ЛОЖЬ,   ИСТИНА);
	ЗаполнитьПредставление("ЗаказПокупателя"           , "Заказ покупателя"            , ИСТИНА, ИСТИНА);
	ЗаполнитьПредставление("Номенклатура"              , "Номенклатура"                , ИСТИНА, ИСТИНА);
	ЗаполнитьПредставление("СтатусПартии"              , "Статус товара"               , ЛОЖЬ,   ЛОЖЬ);
	ЗаполнитьПредставление("ХарактеристикаНоменклатуры", "Характеристика номенклатуры" , ЛОЖЬ,   ЛОЖЬ);
	ЗаполнитьПредставление("СостояниеОтгрузки"         , "Состояние отгрузки по заказу", ЛОЖЬ,   ЛОЖЬ);
	ЗаполнитьПредставление("СостояниеОплаты"           , "Состояние оплаты по заказу"  , ЛОЖЬ,   ЛОЖЬ);
	ЗаполнитьПредставление("ФильтрСостояниеОтгрузки"   , "Состояние отгрузки по заказу", ЛОЖЬ,   ИСТИНА);
	ЗаполнитьПредставление("ФильтрСостояниеОплаты"     , "Состояние оплаты по заказу"  , ЛОЖЬ,   ИСТИНА);

	мСтруктураДляОтбораПоКатегориям = Новый Структура;

	Текст = "
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента.Владелец         КАК Контрагент,
	|	ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента                  КАК ДоговорКонтрагента,
	|	ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента.Организация      КАК Организация,
	|	ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя                     КАК ЗаказПокупателя,
	|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура                        КАК Номенклатура,
	
	|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура.СтавкаНДС                           КАК СтавкаНДС,
	|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	
	|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ОсновнойПоставщик      КАК ОсновнойПоставщик,
	|	ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры          КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстаткиИОбороты.СтатусПартии                        КАК СтатусПартии,
	// ******************
	// Запланировано
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход                    КАК Запланировано,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход
	|	* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЗапланированоБазЕИ,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход 
	|	* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|	/ ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаДляОтчетов.Коэффициент       КАК ЗапланированоОтчЕИ,
	// ******************
	// ОсталосьОтгрузить
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток КАК ОсталосьОтгрузить,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток
	|	* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		КАК ОсталосьОтгрузитьБазЕИ,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток
	|	* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|	/ ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаДляОтчетов.Коэффициент
	|		КАК ОсталосьОтгрузитьОтчЕИ,
	// ******************
	// Резерв
	|	ТоварыВРезерве.КоличествоОстаток               КАК Резерв,
	|	ТоварыВРезерве.КоличествоОстаток
	|	* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		КАК РезервБазЕИ,
	|	ТоварыВРезерве.КоличествоОстаток
	|	* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|	/ ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаДляОтчетов.Коэффициент
	|		КАК РезервОтчЕИ,
	// ******************
	// Заказано
	|	РазмещениеЗаказовПокупателей.КоличествоОстаток КАК Заказано,
	|	РазмещениеЗаказовПокупателей.КоличествоОстаток
	|	* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		КАК ЗаказаноБазЕИ,
	|	РазмещениеЗаказовПокупателей.КоличествоОстаток
	|	* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|	/ ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаДляОтчетов.Коэффициент
	|		КАК ЗаказаноОтчЕИ,
	// ******************
	// ОсталосьОбеспечить
	|
	|	ВЫБОР КОГДА ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|			ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток
	|	КОНЕЦ
	| - ВЫБОР КОГДА ТоварыВРезерве.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТоварыВРезерве.КоличествоОстаток
	|	КОНЕЦ
	| -	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		РазмещениеЗаказовПокупателей.КоличествоОстаток
	|	КОНЕЦ КАК ОсталосьОбеспечить,
	// ОсталосьОбеспечить баз. ед. изм
	|
	|	(ВЫБОР КОГДА ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|			ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток
	|	КОНЕЦ
	| - ВЫБОР КОГДА ТоварыВРезерве.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТоварыВРезерве.КоличествоОстаток
	|	КОНЕЦ
	| -	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		РазмещениеЗаказовПокупателей.КоличествоОстаток
	|	КОНЕЦ)
	| * ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ОсталосьОбеспечитьБазЕИ,
	// ОсталосьОбеспечить ед. изм. отчетов
	|
	|	(ВЫБОР КОГДА ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|			ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток
	|	КОНЕЦ
	| - ВЫБОР КОГДА ТоварыВРезерве.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТоварыВРезерве.КоличествоОстаток
	|	КОНЕЦ
	| -	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		РазмещениеЗаказовПокупателей.КоличествоОстаток
	|	КОНЕЦ)
	| * ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	| / ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаДляОтчетов.Коэффициент КАК ОсталосьОбеспечитьОтчЕИ,
	
	// ******************
	// СостояниеОтгрузки
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейВЦелом.КоличествоПриход = ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток
	|			ТОГДА ""Не отгружено""
	|		КОГДА (ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток = 0) ИЛИ (ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток ЕСТЬ NULL)
	|			ТОГДА ""Отгружено полностью""
	|		ИНАЧЕ
	|			""Отгружено частично""
	|	КОНЕЦ КАК СостояниеОтгрузки,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход = 0 ИЛИ РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход ЕСТЬ NULL	ТОГДА
	|			""Не оплачено""
	|		КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход >= РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход ТОГДА
	|			""Оплачено полностью""
	|		ИНАЧЕ
	|			""Оплачено частично""
	|		КОНЕЦ КАК СостояниеОплаты,
	|	0         КАК СуммаЗаказа,
	|	0         КАК ОсталосьОплатить,
	|	0         КАК Предоплата
	|//СВОЙСТВА1
	|
	|{ВЫБРАТЬ 
	|	ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента.Владелец.*    КАК Контрагент,
	|	ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента.*             КАК ДоговорКонтрагента,
	|	ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента.Организация.* КАК Организация,
	|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура.*                   КАК Номенклатура,
	|	ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры.*     КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя.*                КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейВЦелом.КоличествоПриход = ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток
	|			ТОГДА ""Не отгружено""
	|		КОГДА (ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток = 0) ИЛИ (ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток ЕСТЬ NULL)
	|			ТОГДА ""Отгружено полностью""
	|		ИНАЧЕ
	|			""Отгружено частично""
	|	КОНЕЦ                                                             КАК СостояниеОтгрузки,
	|	ВЫБОР
	|		КОГДА (РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход = 0) ИЛИ (РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход ЕСТЬ NULL)
	|			ТОГДА ""Не оплачено""
	|		КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход >= РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход
	|			ТОГДА ""Оплачено полностью""
	|		ИНАЧЕ
	|			""Оплачено частично""
	|	КОНЕЦ                                                             КАК СостояниеОплаты
	|//СВОЙСТВА1
	|}
	|
	|ИЗ
	//	
	//|	РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,&ДатаОтчета) КАК ЗаказыПокупателейОстаткиИОбороты
	| (ВЫБРАТЬ
	|		РегЗаказыПокупателей.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		РегЗаказыПокупателей.ЗаказПокупателя    КАК ЗаказПокупателя,
	|		РегЗаказыПокупателей.СтатусПартии       КАК СтатусПартии,
	|		РегЗаказыПокупателей.Номенклатура       КАК Номенклатура,
	|		РегЗаказыПокупателей.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|		РегЗаказыПокупателей.Цена                        КАК Цена,
	|		РегЗаказыПокупателей.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		РегЗаказыПокупателей.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		РегЗаказыПокупателей.КоличествоНачальныйОстаток,
	|       РегЗаказыПокупателей.КоличествоПриход,
	|       РегЗаказыПокупателей.КоличествоРасход,
	|		РегЗаказыПокупателей.КоличествоКонечныйОстаток,
	|		РегЗаказыПокупателей.СуммаВзаиморасчетовНачальныйОстаток,
	|       РегЗаказыПокупателей.СуммаВзаиморасчетовПриход,
	|       РегЗаказыПокупателей.СуммаВзаиморасчетовРасход,
	|		РегЗаказыПокупателей.СуммаВзаиморасчетовКонечныйОстаток,
	|		РегЗаказыПокупателей.СуммаУпрНачальныйОстаток,
	|       РегЗаказыПокупателей.СуммаУпрПриход,
	|       РегЗаказыПокупателей.СуммаУпрРасход,
	|		РегЗаказыПокупателей.СуммаУпрКонечныйОстаток
	|
	|	ИЗ РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,&ДатаОтчета) КАК РегЗаказыПокупателей
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	| 	ВЫБРАТЬ
	|		NULL КАК ДоговорКонтрагента,
	|		РегВнутренниеЗаказы.ВнутреннийЗаказ            КАК ЗаказПокупателя,
	|		РегВнутренниеЗаказы.СтатусПартии               КАК СтатусПартии,
	|		РегВнутренниеЗаказы.Номенклатура               КАК Номенклатура,
	|		РегВнутренниеЗаказы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		0 КАК Цена,
	|		0 КАК ПроцентСкидкиНаценки,
	|		0 КАК ПроцентАвтоматическихСкидок,
	|		РегВнутренниеЗаказы.КоличествоНачальныйОстаток,
	|       РегВнутренниеЗаказы.КоличествоПриход,
	|       РегВнутренниеЗаказы.КоличествоРасход,
	|		РегВнутренниеЗаказы.КоличествоКонечныйОстаток,
	|		0,
	|       0,
	|       0,
	|		0,
	|		0,
	|       0,
	|       0,
	|		0
	|
	|	ИЗ РегистрНакопления.ВнутренниеЗаказы.ОстаткиИОбороты(,&ДатаОтчета) КАК РегВнутренниеЗаказы
	|
	|	) КАК ЗаказыПокупателейОстаткиИОбороты
	|
	|
	//*********************************
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОтчета) КАК ТоварыВРезерве
	|	ПО ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя = ТоварыВРезерве.ДокументРезерва
	|		И ЗаказыПокупателейОстаткиИОбороты.Номенклатура = ТоварыВРезерве.Номенклатура
	|		И ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = ТоварыВРезерве.ХарактеристикаНоменклатуры 
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОтчета) КАК РазмещениеЗаказовПокупателей
	|	ПО ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя = РазмещениеЗаказовПокупателей.ЗаказПокупателя 
	|		И ЗаказыПокупателейОстаткиИОбороты.Номенклатура = РазмещениеЗаказовПокупателей.Номенклатура 
	|		И ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателя, 
	|		СУММА(КоличествоПриход) КАК КоличествоПриход, 
	|		СУММА(КоличествоКОнечныйОстаток) КАК КоличествоКонечныйОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,&ДатаОтчета) КАК ЗаказыПокупателейОстаткиИОбороты2
	|	СГРУППИРОВАТЬ ПО ЗаказПокупателя
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВнутреннийЗаказ КАК ЗаказПокупателя,
	|		СУММА(КоличествоПриход) КАК КоличествоПриход, 
	|		СУММА(КоличествоКОнечныйОстаток) КАК КоличествоКонечныйОстаток
	|	ИЗ
	|		РегистрНакопления.ВнутренниеЗаказы.ОстаткиИОбороты(,&ДатаОтчета) КАК ЗаказыПокупателейОстаткиИОбороты2
	|	СГРУППИРОВАТЬ ПО ВнутреннийЗаказ) КАК ЗаказыПокупателейВЦелом
	|
	|	ПО ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя = ЗаказыПокупателейВЦелом.ЗаказПокупателя
	//01.04.2019 -  ВзаимоРасчетыСКонтрагентами
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаимоРасчетыСКонтрагентами.Обороты(, &ДатаОтчета) КАК РасчетыСКонтрагентами
	|	ПО ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя = РасчетыСКонтрагентами.Сделка
	|	И ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента = РасчетыСКонтрагентами.ДоговорКонтрагента
	|//СОЕДИНЕНИЯ1
	|
	|ГДЕ
	//|	ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	//|   И
	|   (&ПоказыватьЗавершенныеЗаказы = Истина
	|   ИЛИ РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход < РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход
	|   ИЛИ ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток <> 0)
	|
	|{ГДЕ 
	|	ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента.Владелец.*    КАК Контрагент,
	|	ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента.*             КАК ДоговорКонтрагента,
	|	ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента.Организация.* КАК Организация,
	|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура.*                   КАК Номенклатура,
	|	ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры.*     КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя.*                КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток ЕСТЬ NULL
	|			ТОГДА NULL
	|		КОГДА ЗаказыПокупателейВЦелом.КоличествоПриход = ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток
	|			ТОГДА (1)
	|		КОГДА (ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток = 0)
	|			ТОГДА (3)
	|		ИНАЧЕ
	|			(2)
	|	КОНЕЦ                                                             КАК ФильтрСостояниеОтгрузки,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход ЕСТЬ NULL
	|			ТОГДА NULL
	|		КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход = 0
	|			ТОГДА (1)
	|		КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход >= РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход
	|			ТОГДА (3)
	|		ИНАЧЕ
	|			(2)
	|	КОНЕЦ                                                             КАК ФильтрСостояниеОплаты
	|	//СВОЙСТВА1
	|	//КАТЕГОРИИ1
	|}
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.Владелец    КАК Контрагент,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента             КАК ДоговорКонтрагента,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.Организация КАК Организация,
	|	РасчетыСКонтрагентами.Сделка                         КАК ЗаказПокупателя,
	|	NULL КАК Номенклатура,
	
	|	NULL КАК СтавкаНДС,
	|	NULL КАК ЕдиницаХраненияОстатков,
	|	NULL КАК Коэффициент,
	
	|	NULL КАК ОсновнойПоставщик,
	|	NULL КАК ХарактеристикаНоменклатуры,
	|	NULL КАК СтатусПартии,
	//*******
	|	0 КАК Запланировано,
	|	0 КАК ЗапланированоБазЕИ,
	|	0 КАК ЗапланированоОтчЕИ,
	//*******
	|	0 КАК ОсталосьОтгрузить,
	|	0 КАК ОсталосьОтгрузитьБазЕИ,
	|	0 КАК ОсталосьОтгрузитьОтчЕИ,
	//*******
	|	0 КАК Резерв,
	|	0 КАК РезервБазЕИ,
	|	0 КАК РезервОтчЕИ,
	//*******
	|	0 КАК Заказано,
	|	0 КАК ЗаказаноБазЕИ,
	|	0 КАК ЗаказаноОтчЕИ,
	//*******
	|	0 КАК ОсталосьОбеспечить,
	|	0 КАК ОсталосьОбеспечитьБазЕИ,
	|	0 КАК ОсталосьОбеспечитьОтчЕИ,
	|
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейВЦелом.КоличествоПриход = ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток
	|			ТОГДА ""Не отгружено""
	|		КОГДА (ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток = 0) ИЛИ (ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток ЕСТЬ NULL)
	|			ТОГДА ""Отгружено полностью""
	|		ИНАЧЕ
	|			""Отгружено частично""
	|	КОНЕЦ                                                                КАК СостояниеОтгрузки,
	|	ВЫБОР
	|		КОГДА (РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход = 0) ИЛИ (РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход ЕСТЬ NULL)
	|			ТОГДА ""Не оплачено""
	|		КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход >= РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход
	|			ТОГДА ""Оплачено полностью""
	|		ИНАЧЕ
	|			""Оплачено частично""
	|	КОНЕЦ                                                                КАК СостояниеОплаты,
	|	РасчетыСКонтрагентами.СуммаУпрПриход                                 КАК СуммаЗаказа,
	|	РасчетыСКонтрагентами.СуммаУпрКонечныйОстаток                        КАК ОсталосьОплатить,
	|	ВЫБОР
	|		КОГДА
	|			РасчетыСКонтрагентами.СуммаУпрПриход * (РасчетыСКонтрагентами.ДоговорКонтрагента.ПроцентПредоплаты / 100) - РасчетыСКонтрагентами.СуммаУпрРасход <= 0 
	|		ТОГДА
	|			0
	|		ИНАЧЕ
	|			РасчетыСКонтрагентами.СуммаУпрПриход * (РасчетыСКонтрагентами.ДоговорКонтрагента.ПроцентПредоплаты / 100) - РасчетыСКонтрагентами.СуммаУпрРасход
	|		КОНЕЦ                                                            КАК Предоплата
	|//СВОЙСТВА2
	|
	|{ВЫБРАТЬ 
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.Владелец.*               КАК Контрагент,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.*                        КАК ДоговорКонтрагента,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.Организация.*            КАК Организация,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.*                        КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейВЦелом.КоличествоПриход = ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток
	|			ТОГДА ""Не отгружено""
	|		КОГДА (ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток = 0) ИЛИ (ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток ЕСТЬ NULL)
	|			ТОГДА ""Отгружено полностью""
	|		ИНАЧЕ
	|			""Отгружено частично""
	|	КОНЕЦ                                                                КАК СостояниеОтгрузки,
	|	ВЫБОР
	|		КОГДА (РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход = 0) ИЛИ (РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход ЕСТЬ NULL)
	|			ТОГДА ""Не оплачено""
	|		КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход >= РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход
	|			ТОГДА ""Оплачено полностью""
	|		ИНАЧЕ
	|			""Оплачено частично""
	|	КОНЕЦ                                                                КАК СостояниеОплаты
	|//СВОЙСТВА2
	|}
	|ИЗ
	//01.04.2019 -ВзаимоРасчетыСКонтрагентами
	|	РегистрНакопления.ВзаимоРасчетыСКонтрагентами.ОстаткиИОбороты(,&ДатаОтчета)        КАК РасчетыСКонтрагентами
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателя, 
	|		СУММА(КоличествоПриход) КАК КоличествоПриход, 
	|		СУММА(КоличествоКОнечныйОстаток) КАК КоличествоКонечныйОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,&ДатаОтчета) КАК ЗаказыПокупателейОстаткиИОбороты2
	|	СГРУППИРОВАТЬ ПО ЗаказПокупателя
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВнутреннийЗаказ КАК ЗаказПокупателя,
	|		СУММА(КоличествоПриход) КАК КоличествоПриход, 
	|		СУММА(КоличествоКОнечныйОстаток) КАК КоличествоКонечныйОстаток
	|	ИЗ
	|		РегистрНакопления.ВнутренниеЗаказы.ОстаткиИОбороты(,&ДатаОтчета) КАК ЗаказыПокупателейОстаткиИОбороты2
	|	СГРУППИРОВАТЬ ПО ВнутреннийЗаказ) КАК ЗаказыПокупателейВЦелом
	|
	|	ПО РасчетыСКонтрагентами.Сделка = ЗаказыПокупателейВЦелом.ЗаказПокупателя
	|//СОЕДИНЕНИЯ2
	|
	|ГДЕ
	|	(РасчетыСКонтрагентами.Сделка ССЫЛКА Документ.ЗаказПокупателя) И
	|   (&ПараметрНетОтбораПоНоменклатуре = Истина)
	|   И (&ПоказыватьЗавершенныеЗаказы = Истина
	|   ИЛИ РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход < РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход
	|   ИЛИ ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток <> 0)
	|
	|{ГДЕ 
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.Владелец.*     КАК Контрагент,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.*              КАК ДоговорКонтрагента,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.Организация.*  КАК Организация,
	|	ЗаказыПокупателейВЦелом.ЗаказПокупателя.*               КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток ЕСТЬ NULL
	|			ТОГДА NULL
	|		КОГДА ЗаказыПокупателейВЦелом.КоличествоПриход = ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток
	|			ТОГДА (1)
	|		КОГДА ЗаказыПокупателейВЦелом.КоличествоКонечныйОстаток = 0
	|			ТОГДА (3)
	|		ИНАЧЕ
	|			(2)
	|	КОНЕЦ                                                                КАК ФильтрСостояниеОтгрузки,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход ЕСТЬ NULL
	|			ТОГДА NULL
	|		КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход = 0
	|			ТОГДА (1)
	|		КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход >= РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход
	|			ТОГДА (3)
	|		ИНАЧЕ
	|			(2)
	|	КОНЕЦ                                                                КАК ФильтрСостояниеОплаты
	|	//СВОЙСТВА2
	|	//КАТЕГОРИИ2
	|	}

	|{УПОРЯДОЧИТЬ ПО 
	|	Контрагент.*                     КАК Контрагент,
	|	ДоговорКонтрагента.*          КАК ДоговорКонтрагента,
	|	Организация.*                    КАК Организация,
	|	ЗаказПокупателя.*                КАК ЗаказПокупателя,
	|	Номенклатура.*                   КАК Номенклатура,
	|	ХарактеристикаНоменклатуры.*     КАК ХарактеристикаНоменклатуры
	|	//СВОЙСТВА_ОБЩИЕ
	|	}
	|
	|{ИТОГИ ПО 
	|	Контрагент.*                     КАК Контрагент,
	|	ДоговорКонтрагента.*          КАК ДоговорКонтрагента,
	|	Организация.*                    КАК Организация,
	|	ЗаказПокупателя.*                КАК ЗаказПокупателя,
	|	Номенклатура.*                   КАК Номенклатура,
	|	ХарактеристикаНоменклатуры.*     КАК ХарактеристикаНоменклатуры,
	|	СтатусПартии,
	|	СостояниеОтгрузки,
	|	СостояниеОплаты
	|	//СВОЙСТВА_ОБЩИЕ
	|	}
	|
	|ИТОГИ 
	//***********
	|	СУММА(Запланировано),
	|	СУММА(ЗапланированоБазЕИ),
	|	СУММА(ЗапланированоОтчЕИ),
	//***********
	|	СУММА(ОсталосьОтгрузить),
	|	СУММА(ОсталосьОтгрузитьБазЕИ),
	|	СУММА(ОсталосьОтгрузитьОтчЕИ),
	//***********
	|	СУММА(Резерв),
	|	СУММА(РезервБазЕИ),
	|	СУММА(РезервОтчЕИ),
	//***********
	|	СУММА(Заказано),
	|	СУММА(ЗаказаноБазЕИ),
	|	СУММА(ЗаказаноОтчЕИ),
	//***********
	|	СУММА(ОсталосьОбеспечить),
	|	СУММА(ОсталосьОбеспечитьБазЕИ),
	|	СУММА(ОсталосьОбеспечитьОтчЕИ),
	//***********
	|	СУММА(СуммаЗаказа),
	|	СУММА(ОсталосьОплатить),
	|	СУММА(Предоплата)
	|ПО ОБЩИЕ";

	Если ИспользоватьСвойстваИКатегории Тогда
		
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента.Владелец";
		НоваяСтрока.Представление = "Контрагент";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ЗаказыПокупателейОстаткиИОбороты.Номенклатура";
		НоваяСтрока.Представление = "Номенклатура";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя";
		НоваяСтрока.Представление = "Заказ покупателя";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;

		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";

		// Добавим строки запроса, необходимые для использования свойств и категорий
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, мСоответствиеНазначений, ПостроительОтчета.Параметры, , ТекстПоляКатегорий, ТекстПоляСвойств, , "//СВОЙСТВА1", "//КАТЕГОРИИ1", "//СОЕДИНЕНИЯ1",, мСтруктураДляОтбораПоКатегориям);

		ТаблицаПолей.Очистить();
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "РасчетыСКонтрагентами.ДоговорКонтрагента.Владелец";
		НоваяСтрока.Представление = "Контрагент";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "NULL";
		НоваяСтрока.Представление = "Номенклатура";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "РасчетыСКонтрагентами.Сделка";
		НоваяСтрока.Представление = "Заказ покупателя";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;

		// Добавим строки запроса, необходимые для использования свойств и категорий
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, мСоответствиеНазначений, ПостроительОтчета.Параметры, , ТекстПоляКатегорий, ТекстПоляСвойств, , "//СВОЙСТВА2", "//КАТЕГОРИИ2", "//СОЕДИНЕНИЯ2",, мСтруктураДляОтбораПоКатегориям);
		
		// Добавим строки запроса для использования ранее добавленных полей свойств в упорядочивании и группировках
		ДобавитьВТекстСвойстваОбщие(Текст, ТекстПоляСвойств, "//СВОЙСТВА_ОБЩИЕ");

	КонецЕсли;
	
	ПостроительОтчета.Текст = Текст;
	
	ПостроительОтчета.ДоступныеПоля.Номенклатура.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	
	Если ИспользоватьСвойстваИКатегории Тогда
		УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, мСоответствиеНазначений, СтруктураПредставлениеПолей);
	КонецЕсли;
	
	Для Каждого Измерение Из МассивИзмерения Цикл
		ПостроительОтчета.ИзмеренияСтроки.Добавить(Измерение, Измерение, ТипИзмеренияПостроителяОтчета.Иерархия);
	КонецЦикла;

	Для Сч = 0 По ПостроительОтчета.ДоступныеПоля.Количество()-1 Цикл
		Поле = ПостроительОтчета.ДоступныеПоля[Сч];
		Поле.Представление = СтруктураПредставлениеПолей[Поле.Имя];
	КонецЦикла;

	Для Сч = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл
		Поле = ПостроительОтчета.ВыбранныеПоля[Сч];
		Поле.Представление = СтруктураПредставлениеПолей[Поле.Имя];
	КонецЦикла;

	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		Поле = ПостроительОтчета.ИзмеренияСтроки[Сч];
		Поле.Представление = СтруктураПредставлениеПолей[Поле.Имя];
	КонецЦикла;

	// Удалим добавляемые автоматически поля измерений
	Сч=0;
	Пока Сч < ПостроительОтчета.ВыбранныеПоля.Количество() Цикл

		Если (ПостроительОтчета.ИзмеренияСтроки.Найти(ПостроительОтчета.ВыбранныеПоля[Сч].Имя)<>Неопределено)
		 ИЛИ (ПостроительОтчета.ИзмеренияКолонки.Найти(ПостроительОтчета.ВыбранныеПоля[Сч].Имя)<>Неопределено) Тогда
			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля[Сч]);
		Иначе
			Сч=Сч+1;
		КонецЕсли;

	КонецЦикла;

	Для Каждого Элемент Из МассивОтбора Цикл
		Если Элемент = "ФильтрСостояниеОтгрузки" тогда
			ЭлОтбора = ПостроительОтчета.Отбор.Добавить(Элемент);
			//ЭлОтбора.СписокЗначений = СписокСостоянийОтгрузки;
			//поле.СписокЗначений.Очистить();
			//поле.СписокЗначений.Добавить(1, "Не отгружено");
			//поле.СписокЗначений.Добавить(2, "Отгружено частично");
			//поле.СписокЗначений.Добавить(3, "Отгружено полностью");
			ЭлОтбора.ВидСравнения = ВидСравнения.ВСписке;
			ЭлОтбора.Значение = Новый СписокЗначений;
			ЭлОтбора.Значение.Очистить();
			ЭлОтбора.Значение.Добавить(1, "Не отгружено");
			ЭлОтбора.Значение.Добавить(2, "Отгружено частично");
			ЭлОтбора.Значение.Добавить(3, "Отгружено полностью");
		иначеЕсли Элемент = "ФильтрСостояниеОплаты" тогда
			ЭлОтбора = ПостроительОтчета.Отбор.Добавить(Элемент);
			ЭлОтбора.ВидСравнения = ВидСравнения.ВСписке;
			ЭлОтбора.Значение = Новый СписокЗначений;
			ЭлОтбора.Значение.Очистить();
			ЭлОтбора.Значение.Добавить(1, "Не оплачено");
			ЭлОтбора.Значение.Добавить(2, "Оплачено частично");
			ЭлОтбора.Значение.Добавить(3, "Оплачено полностью");
		иначе
			ЭлОтбора = ПостроительОтчета.Отбор.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом,
//  ПоказыватьЗаголовок - флаг того, показывать заголовок или скрывать его
//  ВысотаЗаголовка - возращаемое значение - высота заголовка
//  ТолькоЗаголовок - флаг того, сформировать только заголовок или весь отчет
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт

	Если НЕ ЗадатьПараметрыОтбораПоКатегориям(ПостроительОтчета, мСтруктураДляОтбораПоКатегориям) Тогда
		Предупреждение("По одной категории нельзя устанавливать несколько отборов");
		Возврат;
	КонецЕсли;
	
	Если ДатаОтчета <> '00010101000000' Тогда
		ПостроительОтчета.Параметры.Вставить("ДатаОтчета", КонецДня(ДатаОтчета));
	Иначе
		ПостроительОтчета.Параметры.Вставить("ДатаОтчета", '00010101000000');
	КонецЕсли;
	ПостроительОтчета.Параметры.Вставить("ПоказыватьЗавершенныеЗаказы", ПоказыватьЗавершенныеЗаказы);
	
	УжеПредупредили = Ложь;
	
	ПараметрНетОтбораПоНоменклатуре = Истина;

	Для Инд = 0 По ПостроительОтчета.Отбор.Количество() - 1 Цикл
		Если построительОтчета.Отбор[Инд].Использование Тогда
			Если Лев(построительОтчета.Отбор[Инд].ПутьКДанным, 12) = "Номенклатура" Тогда
				ПараметрНетОтбораПоНоменклатуре = Ложь;
				для Каждого Показателя Из Показатели Цикл
					Если Показателя.Использование Тогда
						Если Лев(Показателя.Представление, 7) = "Оплата:" Тогда
							Предупреждение("Установленные отборы по Номенклатуре не позволяют выводить показатели по оплате
											|Оплата определяется для заказа в целом, а не для отдельных позиций!!!");
							УжеПредупредили = Истина;
							ДокументРезультат.Очистить();
							ТолькоЗаголовок = Истина;
							Прервать;
						КонецЕсли;
					КОнецЕсли;
				КонецЦикла;
				Если УжеПредупредили Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПостроительОтчета.Параметры.Вставить("ПараметрНетОтбораПоНоменклатуре", ПараметрНетОтбораПоНоменклатуре);

	МакетОтчета = ПолучитьМакет("Макет");


	ПроверитьПорядокПостроителяОтчета(ПостроительОтчета);

	// Признак вывода детальных записей: в кросс-таблице не выводятся, в списке - в зависимости от связи с измерениями
	ВыводитьДетальныеЗаписи = Ложь;
	
	// Если это отчет-список, то нужно оперделить, выводить ли детальные записи
	МассивИндексовНезависимыхВыбранныхПолей = Новый Массив;
	
	Если ПостроительОтчета.ИзмеренияКолонки.Количество() = 0 Тогда
		
		// Определим, нужно ли выводить детальные записи:
		// Если выбранное поле подчинено измерению, то выводим рядом с измерением,
		// Если выбранное поле не связано ни с обним измерением, то выводим его в детальных записях
		
		ЕстьНесвязанныеПоля = Ложь;
		
		Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл
			
			НайденаСвязь = Ложь;
			
			Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
				
				Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];
				
				// Если поле - подчиненое: поищем в макете
				
				Попытка
					
					Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[ПостроительОтчета.ВыбранныеПоля[Инд].Имя];
					
					НайденаСвязь = Истина;
					Прервать;
					
				Исключение
					Попытка
						
						// Если в макете поле называется ИмяПоля+Представление
						Пустышка = ПостроительОтчета.Макет.ПолучитьОбласть(Измерение.Имя).Параметры[ПостроительОтчета.ВыбранныеПоля[Инд].Имя+"Представление"];
						
						НайденаСвязь = Истина;
						Прервать;
						
					Исключение
						
						
					КонецПопытки;
				КонецПопытки;
				
			КонецЦикла;
			
			Если НЕ НайденаСвязь Тогда
				
				МассивИндексовНезависимыхВыбранныхПолей.Добавить(Инд);
				
			КонецЕсли;
			
			ЕстьНесвязанныеПоля  = ЕстьНесвязанныеПоля ИЛИ НЕ НайденаСвязь;
		КонецЦикла;
		
		// Детальные записи выводим, если есть несвязанные выбранные поля
		ВыводитьДетальныеЗаписи = ЕстьНесвязанныеПоля;
	КонецЕсли;

	МассивЦветаИзмерений = Новый Массив;
	Если РаскрашиватьИзмерения Тогда

		ТабДокЦветаИзмерений = МакетОтчета.ПолучитьОбласть("ЦветаИзмерений");
		Для Сч = 1 По ТабДокЦветаИзмерений.ВысотаТаблицы Цикл
			МассивЦветаИзмерений.Добавить(ТабДокЦветаИзмерений.Область(Сч,2).ЦветФона);
		КонецЦикла;

		Если НЕ ВыводитьДетальныеЗаписи Тогда
			МассивЦветаИзмерений.Добавить(Новый Цвет());
		КонецЕсли; 

	КонецЕсли;

	//ПостроительОтчета.ЗаполнениеРасшифровки   = ВидЗаполненияРасшифровкиПостроителяОтчета.Расшифровка;
	ПостроительОтчета.ВыводитьДетальныеЗаписи = ВыводитьДетальныеЗаписи;

	ОбластьСтрока         = МакетОтчета.Область("Строка");
	ОбластьСтрокаИерархии = МакетОтчета.Область("СтрокаИерархии");
	ОбластьДетали         = МакетОтчета.Область("СтрокаДетали");
	ОбластьОбщиеИтоги     = МакетОтчета.Область("ОбщиеИтоги");

	ОбластьКолонка = МакетОтчета.Область("КолонкаДанные");

	КоличествоПоказателейЗаказа = 0;
	КоличествоПоказателейОплаты = 0;
	Для Каждого Показатель Из Показатели Цикл

		Если Показатель.Использование = Истина Тогда
			Если (КоличествоПоказателейЗаказа + КоличествоПоказателейОплаты) > 0 Тогда
				МакетОтчета.ВставитьОбласть(ОбластьКолонка, ОбластьКолонка, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
				ОбластьКолонка = МакетОтчета.Область("КолонкаДанные");
			КонецЕсли;

			Если Лев(Показатель.Представление,8) = "Отгрузка" Тогда
				КоличествоПоказателейЗаказа = КоличествоПоказателейЗаказа + 1;
			ИначеЕсли Лев(Показатель.Представление,6) = "Оплата" Тогда
				КоличествоПоказателейОплаты = КоличествоПоказателейОплаты + 1;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	КоличествоПоказателей = КоличествоПоказателейЗаказа + КоличествоПоказателейОплаты;

	ОбластьПоле = МакетОтчета.Область("Поле");

	КоличествоКолонок = 1;

	Если ВыводитьДетальныеЗаписи Тогда
		Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда
			ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицыНиз");
		Иначе
			ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицы");
		КонецЕсли;

		НачКоличествоКолонок = КоличествоКолонок;
		Для Инд = НачКоличествоКолонок По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл  // на 1 меньше количества полей - одно уже есть
			МакетОтчета.ВставитьОбласть(ОбластьПоле, ОбластьПоле, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КоличествоКолонок = КоличествоКолонок + 1;
			ОбластьПоле = МакетОтчета.Область("Поле");
		КонецЦикла;

		МакетОтчета.Область(ОбластьДетали.Верх,1+1,ОбластьДетали.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

		Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл
			МакетОтчета.Область(ОбластьДетали.Верх,1+1+Инд).Параметр = ПостроительОтчета.ВыбранныеПоля[Инд].Имя;
		КонецЦикла;

		Кол = 0;
		Для Каждого Показатель Из Показатели Цикл
			Если Показатель.Использование = Истина Тогда
				ИмяПоказателя = Показатель.Имя;
				ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;

				МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+Кол).Параметр = ИмяПоказателя;
				МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+Кол).Формат   = ФорматПоказателя;
				Кол = Кол + 1;
			КонецЕсли;
		КонецЦикла;

		ПостроительОтчета.МакетДетальныхЗаписей = МакетОтчета.ПолучитьОбласть(ОбластьДетали.Верх, ,ОбластьДетали.Верх);
	КонецЕсли; 

	// Если выводятся только итоги или количество колонок = 1, увеличим ширину первой колонки 
	Если НЕ ВыводитьДетальныеЗаписи ИЛИ КоличествоКолонок=1 Тогда
		ОбластьПоле.ШиринаКолонки = 30;
	КонецЕсли; 

	// Формирование макета заголовка отчета
	Если КоличествоПоказателей > 0 Тогда
		МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+1,МакетОтчета.Область("Заголовок").Низ,1+1).Заполнение                                       = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+2,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+2,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+КоличествоПоказателей).Очистить(Истина);
		МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+1,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+КоличествоПоказателей).ПоВыделеннымКолонкам = Истина;
	КонецЕсли; 

	СписокИзмерений = "";
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		СписокИзмерений = СписокИзмерений + ", " + ПостроительОтчета.ИзмеренияСтроки[Сч].Представление + " " + ПостроительОтчета.ИзмеренияСтроки[Сч].ТипИзмерения;
	КонецЦикла; 

	СписокПоказателей = "";
	Для Сч=0 По Показатели.Количество()-1 Цикл
		Если Показатели[Сч].Использование Тогда
			СписокПоказателей = СписокПоказателей +", "+ Показатели[Сч].Представление;
		КонецЕсли; 
	КонецЦикла; 

	СписокОтбор = "";
	Для Сч=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		Если ПостроительОтчета.Отбор[Сч].Использование Тогда
			СписокОтбор = СписокОтбор + ", " + ПостроительОтчета.Отбор[Сч].Представление + " " + ПостроительОтчета.Отбор[Сч].ВидСравнения + " " + ПостроительОтчета.Отбор[Сч].Значение;
		КонецЕсли;
	КонецЦикла; 

	ЗаголовокОтчета = МакетОтчета.ПолучитьОбласть("Заголовок");
	ЗаголовокОтчета.Параметры.ЗаголовокОтчета = мНазваниеОтчета;
	Если ДатаОтчета = '00010101000000' Тогда
		Если ТолькоЗаголовок Тогда
			ОписаниеПериода = "на текущее время " + Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
		Иначе
			ОписаниеПериода = "на " + Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг ЧЧ:мм:сс""; ДП = ""...""");
		КонецЕсли; 
	Иначе
		ОписаниеПериода = "на конец дня " + Формат(ДатаОтчета, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
	КонецЕсли;
	ЗаголовокОтчета.Параметры.Период          = "Данные "        + ОписаниеПериода;
	ЗаголовокОтчета.Параметры.Измерения       = "Итоги по: "     + Сред(СписокИзмерений, 2);
	ЗаголовокОтчета.Параметры.Показатели      = "Показатели: "   + Сред(СписокПоказателей, 2);
	ЗаголовокОтчета.Параметры.Отбор           = "Отбор:"         + Сред(СписокОтбор,2);
	ПостроительОтчета.МакетЗаголовкаОтчета = ЗаголовокОтчета;

	ВысотаЗаголовка = ПостроительОтчета.МакетЗаголовкаОтчета.ВысотаТаблицы;

	Если ТолькоЗаголовок Тогда
		ДокументРезультат.Вывести(ЗаголовокОтчета);
		Возврат;
	КонецЕсли; 

	ОбластьШапкаТаблицы    = МакетОтчета.Область("ШапкаТаблицы");
	ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицыНиз");

	Кол =0 ;
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.Использование = Истина Тогда
			ИмяПоказателя = Показатель.Имя;

			Если Лев(Показатель.Представление,8) = "Отгрузка" Тогда
				ТекстВерх = "Отгрузка";
				ТекстНиз  = Сред(Показатель.Представление, 11);
			ИначеЕсли Лев(Показатель.Представление,6) = "Оплата" Тогда
				ТекстВерх = "Оплата";
				ТекстНиз  = Сред(Показатель.Представление, 9);
			КонецЕсли;

			МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+Кол).Текст = ТекстВерх;
			МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+Кол).Текст = ТекстНиз;
			Кол = Кол + 1;
		КонецЕсли;
	КонецЦикла;

	Если КоличествоПоказателейЗаказа > 1 Тогда
		МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1,
		                    ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+КоличествоПоказателейЗаказа).Объединить();
	КонецЕсли;
	Если КоличествоПоказателейОплаты > 1 Тогда
		МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+КоличествоПоказателейЗаказа+1,
		                    ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+КоличествоПоказателейЗаказа+КоличествоПоказателейОплаты).Объединить();
	КонецЕсли;

	// Назначение, корректировка макетов измерений
	Сдвиг = Макс(МассивЦветаИзмерений.Количество()-ПостроительОтчета.ИзмеренияСтроки.Количество(),0);

	// Структура, определяющая вывод показателей
	СтруктураВыводаПоказателей = Новый Структура;

	БылоИзмерениеНоменклатуры = ЛОЖЬ;
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];
		Если НЕ БылоИзмерениеНоменклатуры 
		   И Найти(Измерение.ПутьКДанным,"Номенклатура") <> 0 Тогда

			БылоИзмерениеНоменклатуры = ИСТИНА;

		КонецЕсли;

		Если МассивЦветаИзмерений.Количество()>0 Тогда
			ЦветИзмерения = МассивЦветаИзмерений[Сдвиг+((Сч) - (МассивЦветаИзмерений.Количество()-Сдвиг)*Цел((Сч)/(МассивЦветаИзмерений.Количество()-Сдвиг)))];
		Иначе
			ЦветИзмерения = Новый Цвет();
		КонецЕсли;;

		ФорматПоля = "";

		МакетОтчета.Область(ОбластьСтрока.Верх,1+1,ОбластьСтрока.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Отступ = Сч;
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1,ОбластьСтрока.Верх,1+КоличествоКолонок+КоличествоПоказателей).ЦветФона = ЦветИзмерения;
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).ПараметрРасшифровки = Измерение.Имя;

		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1).Отступ = Сч;
		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+КоличествоПоказателей).ЦветФона = ЦветИзмерения;

		Если КоличествоКолонок > 1 Тогда
			МакетОтчета.Область(ОбластьСтрока.Верх,1+1, ОбластьСтрока.Верх,1+КоличествоКолонок).Объединить();
		КонецЕсли;

		Шаблон = "["+Измерение.Имя+"]";

		Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

			Если ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным <> Измерение.ПутьКДанным
			   И Найти(ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным, Измерение.ПутьКДанным) >0 Тогда
				Шаблон = Шаблон + ", [" + ПостроительОтчета.ВыбранныеПоля[Инд].Имя+"]";
			КонецЕсли;

		КонецЦикла;

		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Текст = Шаблон;

		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1).Параметр = Измерение.Имя;

		Если КоличествоКолонок>1 ИЛИ КоличествоПоказателей>1 Тогда
			МакетОтчета.Область(ОбластьСтрокаИерархии.Верх, 1+1, ОбластьСтрокаИерархии.Верх, 1+КоличествоКолонок).Объединить();
		КонецЕсли; 


		Кол = 0;
		Для Каждого Показатель Из Показатели Цикл

			Если Показатель.Использование = Истина Тогда
				ИмяПоказателя    = Показатель.Имя;
				ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;

				Если БылоИзмерениеНоменклатуры
				 ИЛИ Лев(Показатель.Представление,8) <> "Отгрузка" Тогда
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+Кол).Параметр           = ИмяПоказателя;
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+Кол).Формат             = ФорматПоказателя;
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+Кол).Параметр   = ИмяПоказателя;
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+Кол).Формат     = ФорматПоказателя;
				Иначе
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+Кол).Заполнение         = ТипЗаполненияОбластиТабличногоДокумента.Текст;
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+Кол).Текст              = "";
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+Кол).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+Кол).Текст      = "";
				КонецЕсли;

				Кол = Кол + 1;
			КонецЕсли; 

		КонецЦикла; 

		Измерение.Макет         = МакетОтчета.ПолучитьОбласть(ОбластьСтрока.Верх,         , ОбластьСтрока.Верх        );
		Измерение.МакетИерархии = МакетОтчета.ПолучитьОбласть(ОбластьСтрокаИерархии.Верх, , ОбластьСтрокаИерархии.Верх);

	КонецЦикла;

	// Формирование макета общих итогов
	МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1,
	                    ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

	Если КоличествоКолонок > 1 Тогда
		МакетОтчета.Область(ОбластьОбщиеИтоги.Верх, 1+1, ОбластьОбщиеИтоги.Верх, 1+КоличествоКолонок).Объединить();
	КонецЕсли; 
	
	Кол = 0;
	Для Каждого Показатель Из Показатели Цикл

		Если Показатель.Использование = Истина Тогда
			ИмяПоказателя = Показатель.Имя;
			ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;

			МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+Кол).Параметр = ИмяПоказателя;
			МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+Кол).Формат   = ФорматПоказателя;
			Кол = Кол + 1;
		КонецЕсли;

	КонецЦикла;

	ПостроительОтчета.МакетОбщихИтогов = МакетОтчета.ПолучитьОбласть(ОбластьОбщиеИтоги.Верх, , ОбластьОбщиеИтоги.Верх);

	МакетШапкиТаблицы = МакетОтчета.ПолучитьОбласть("ШапкаТаблицыОбщая");

	// Заголовок первой колонки
	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда

		//В заголовке колонки детальной записи оставим только название последнего поля
		ЗаголовокКолонки = ПостроительОтчета.ИзмеренияСтроки[ПостроительОтчета.ИзмеренияСтроки.Количество()-1].Представление;
		Для Поз = 1 По СтрЧислоВхождений(ЗаголовокКолонки, ".") Цикл
			ЗаголовокКолонки = Сред(ЗаголовокКолонки, Найти(ЗаголовокКолонки,".")+1);
		КонецЦикла;
		МакетШапкиТаблицы.Область(2,1+1).Текст = ЗаголовокКолонки;

	КонецЕсли;

	ПостроительОтчета.МакетПодвалаТаблицы = МакетОтчета.ПолучитьОбласть("Подвал");

	МакетШапкиТаблицы.Область(2, 1+1, 3, 1+КоличествоКолонок).Объединить();

	// Шапка таблицы имеет внизу граница той же линией, что и вверху
	ЛинияВверху = Новый Линия(МакетШапкиТаблицы.Область(2, 2).ГраницаСверху.ТипЛинии, МакетШапкиТаблицы.Область(2, 2).ГраницаСверху.Толщина);
	ШиринаТаблицы = 1+КоличествоКолонок+КоличествоПоказателей;
	МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 2, МакетШапкиТаблицы.ВысотаТаблицы, ШиринаТаблицы).ГраницаСнизу = ЛинияВверху;

	// Назначим построителю сформированнный макет шапки
	ПостроительОтчета.МакетШапкиТаблицы = МакетШапкиТаблицы;

	// Подвал отчета не выводится
	ПостроительОтчета.ВыводитьПодвалОтчета = Ложь;

	// Вывод в макет
	ПостроительОтчета.Выполнить();

	ДокументРезультат.Очистить();
	//ПостроительОтчета.Параметры.Вставить("НеОтгружено", Перечисления.СостоянияОтгрузки.НеОтгружено);
	//ПостроительОтчета.Параметры.Вставить("ОтгруженоЧастично", Перечисления.СостоянияОтгрузки.ОтгруженоЧастично);
	//ПостроительОтчета.Параметры.Вставить("ОтгруженоПолностью", Перечисления.СостоянияОтгрузки.ОтгруженоПолностью);

	//ПостроительОтчета.Параметры.Вставить("НеОплачено", Перечисления.СостоянияОплаты.НеОплачено);
	//ПостроительОтчета.Параметры.Вставить("ОплаченоЧастично", Перечисления.СостоянияОплаты.ОплаченоЧастично);
	//ПостроительОтчета.Параметры.Вставить("ОплаченоПолностью", Перечисления.СостоянияОплаты.ОплаченоПолностью);

	ПостроительОтчета.Вывести(ДокументРезультат);

	// Управление заголовком
	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);

	ЛинияСлеваВШапкеТаблицы = Новый Линия(ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.ТипЛинии, ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.Толщина);

	// Справа граница той же линией, что и слева в шапке таблицы
	ШиринаТаблицы = 1+КоличествоКолонок+КоличествоПоказателей;
	ДокументРезультат.Область(ВысотаЗаголовка+2, 2+КоличествоКолонок+КоличествоПоказателейЗаказа, ВысотаЗаголовка+2, 2+КоличествоКолонок+КоличествоПоказателейЗаказа).ГраницаСправа = ЛинияСлеваВШапкеТаблицы;
	ДокументРезультат.Область(ВысотаЗаголовка+2, ШиринаТаблицы, ДокументРезультат.ВысотаТаблицы-1, ШиринаТаблицы).ГраницаСправа = ЛинияСлеваВШапкеТаблицы;

	// Справа после колонки измерений
	ДокументРезультат.Область(ВысотаЗаголовка+2, 2+КоличествоКолонок, ДокументРезультат.ВысотаТаблицы-1, 2+КоличествоКолонок).ГраницаСлева = ЛинияСлеваВШапкеТаблицы;

	// Справа после колонки заказов
	ДокументРезультат.Область(ВысотаЗаголовка+2, 2+КоличествоКолонок, ВысотаЗаголовка+2, 2+КоличествоКолонок).ГраницаСправа = ЛинияСлеваВШапкеТаблицы;
	ДокументРезультат.Область(ВысотаЗаголовка+2, 2+КоличествоКолонок+КоличествоПоказателейЗаказа-1, ДокументРезультат.ВысотаТаблицы-1, 2+КоличествоКолонок+КоличествоПоказателейЗаказа-1).ГраницаСправа = ЛинияСлеваВШапкеТаблицы;

	// Слева граница той же линией, что и слева в шапке таблицы
	ДокументРезультат.Область(ВысотаЗаголовка+2, 2, ДокументРезультат.ВысотаТаблицы-1, 2).ГраницаСлева = ЛинияСлеваВШапкеТаблицы;

	// Фиксация шапки
	ДокументРезультат.ФиксацияСверху = ПостроительОтчета.МакетЗаголовкаОтчета.ВысотаТаблицы + ПостроительОтчета.МакетШапкиТаблицы.ВысотаТаблицы;

КонецПроцедуры


// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
	СтруктураНастроек.Вставить("Показатели"          , Показатели.Выгрузить());
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ПостроительОтчета.УстановитьНастройки(СохраненныеНастройки.НастройкиПостроителя);
	Показатели.Загрузить(СохраненныеНастройки.Показатели);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ                

ОписаниеТиповСтрока = ПолучитьОписаниеТиповСтроки(100);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

// Инициализация таблиц всех возможных показателей, группировок,  фильтров
мТаблицаПоказатели = Новый ТаблицаЗначений;
мТаблицаПоказатели.Колонки.Добавить("ИмяПоля",           ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ОписаниеПоля",      ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ВклПоУмолчанию",    ОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("Пометка",           ОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока",   ОписаниеТиповСтрока);

МассивКатегории = Новый Массив;
МассивКатегории.Добавить(Тип("СправочникСсылка.КатегорииОбъектов"));
ОписаниеТиповКатегории = Новый ОписаниеТипов(МассивКатегории);

мНазваниеОтчета = "Анализ заказов покупателей";

СостоянияОтгрузки = Новый Соответствие;
СостоянияОтгрузки.Вставить(1, "Не отгружено");
СостоянияОтгрузки.Вставить(2, "Отгружено частично");
СостоянияОтгрузки.Вставить(3, "Отгружено полностью");

СостоянияОплаты = Новый Соответствие;
СостоянияОплаты.Вставить(1, "Не оплачено");
СостоянияОплаты.Вставить(2, "Оплачено частично");
СостоянияОплаты.Вставить(3, "Оплачено полностью");

