//Перем ВозвращаемыйВладелец Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик обновления данных формы
//
Процедура ОбновлениеОтображения()

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик нажатия кнопки ОК.
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	Закрыть(Истина);
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "УстановитьВсе" командной панели списка показателей
//
Процедура КоманднаяПанельПоказателиУстановитьВсе(Кнопка)

	Для Каждого Строка Из  Показатели Цикл
		Строка.Использование = Истина;
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик нажатия кнопки "СнятьВсе" командной панели списка показателей
//
Процедура КоманднаяПанельПоказателиСнятьВсе(Кнопка)

	Для Каждого Строка Из  Показатели Цикл
		Строка.Использование = Ложь;
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ИспользоватьСвойстваИКатегории".
//
Процедура ИспользоватьСвойстваИКатегорииПриИзменении(Элемент)

	// Запоминаем текущую настройку
	Настройки = ПостроительОтчета.ПолучитьНастройки();
	ТабПоказатели = Показатели.Выгрузить();

	// Перезаполнение объекта (с новым текстом запроса)
	ЗаполнитьНачальныеНастройки();

	// Восстанавливаем запомненную настройку
	ПостроительОтчета.УстановитьНастройки(Настройки);

	Для Каждого Показатель Из Показатели Цикл
		НайдСтр = ТабПоказатели.Найти(Показатель.Имя, "Имя");
		Если НайдСтр<>Неопределено Тогда
			Показатель.Использование = НайдСтр.Использование;
		КонецЕсли;
	КонецЦикла;
	
	Оповестить("ИзмененТекстЗапроса", , ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "Значение" табличной части "Отбор".
//
Процедура ОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отборы по свойствам и категориям должны быть обработаны специальным образом
	// Они определяются по представлению 
	Если Найти(НРег(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление), "категории") Тогда

		// Ограничение списка категорий списокЗначений
		Назначение = мСоответствиеНазначений.Получить(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление);

		ОсуществитьВыборКатегории(Элемент, Назначение, ЭтаФорма, СтандартнаяОбработка);

	ИначеЕсли Найти(НРег(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление), "св-во") Тогда

		Свойство = мСоответствиеНазначений.Получить(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление);

		ОсуществитьВыборСвойства(Элемент, Свойство, ЭтаФорма, СтандартнаяОбработка);

	ИначеЕсли (ЭлементыФормы.Отбор.ТекущаяСтрока.Имя = "ФильтрСостояниеОтгрузки") или (ЭлементыФормы.Отбор.ТекущаяСтрока.Имя = "ФильтрСостояниеОплаты") Тогда
		СпВыбора = Новый СписокЗначений;
		Пер = ?(ЭлементыФормы.Отбор.ТекущаяСтрока.Имя = "ФильтрСостояниеОтгрузки", состоянияОтгрузки, СостоянияОплаты);
		для а = 1 по Пер.Количество() Цикл
			Если ЭлементыФормы.Отбор.ТекущиеДанные.Значение.НайтиПоЗначению(а) = НеОпределено тогда
				СпВыбора.Добавить(а, Пер.Получить(а));
			иначе
				СпВыбора.Добавить(а, Пер.Получить(а), Истина);
			КонецЕсли;
		КонецЦикла;
		Если СпВыбора.ОтметитьЭлементы("Выберите, заказы с каким состоянием "+Сред(ЭлементыФормы.Отбор.ТекущаяСтрока.Имя, 16)+" следует вывести в отчет") тогда
			ЭлементыФормы.Отбор.ТекущиеДанные.Значение.Очистить();
			для каждого ЭлементСписка из спВыбора Цикл
				Если ЭлементСписка.Пометка тогда
					ЭлементыФормы.Отбор.ТекущиеДанные.Значение.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ЭлементыФормы.Отбор.ТекущаяСтрока.Имя = "ЗаказПокупателя" Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		Если ИспользоватьВнутренниеЗаказы() Тогда
			МассивТипов.Добавить(Тип("ДокументСсылка.ВнутреннийЗаказ"));
		КонецЕсли;
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;

КонецПроцедуры

Процедура ОтборВидСравненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если (ЭлементыФормы.Отбор.ТекущаяСтрока.Имя = "ФильтрСостояниеОтгрузки") 
		Или (ЭлементыФормы.Отбор.ТекущаяСтрока.Имя = "ФильтрСостояниеОплаты") Тогда
		//производим специальную обработку
		Если НЕ (ВыбранноеЗначение = ВидСравнения.ВСписке) И НЕ (ВыбранноеЗначение = ВидСравнения.НеВСписке) Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОтборВидСравненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если (ЭлементыФормы.Отбор.ТекущаяСтрока.Имя = "ФильтрСостояниеОтгрузки") 
		Или (ЭлементыФормы.Отбор.ТекущаяСтрока.Имя = "ФильтрСостояниеОплаты") Тогда
		СПВ = Элемент.СписокВыбора.Скопировать();
		ЕстьЧтоУдалять = Истина;
		Пока ЕстьЧтоУдалять Цикл
			ЕстьЧтоУдалять = Ложь;
			Для Каждого ЭлементСпискаВыбора Из Элемент.СписокВыбора Цикл
	//			Пока ЭлементСпискаВыбора<>НеОпределено Цикл
					Если (ЭлементСпискаВыбора.Значение<>ВидСравнения.ВСписке) и (ЭлементСпискаВыбора.Значение <> ВидСравнения.НеВСписке) Тогда
						Элемент.СписокВыбора.Удалить(ЭлементСпискаВыбора);
						ЕстьЧтоУдалять = Истина;
					КонецЕсли;
	//			КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик перед удалением строки отбора
//
Процедура ОтборПередУдалением(Элемент, Отказ)
	
	Если Не ПустаяСтрока(Элемент.ТекущаяСтрока.Имя) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры // ОтборПередУдалением()

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Заголовок = мНазваниеОтчета;
КонецПроцедуры

Процедура ОтборПередНачаломИзменения(Элемент, Отказ)
	
	Если Не ПустаяСтрока(Элемент.ТекущаяСтрока.Имя) 
		И Элемент.ТекущаяКолонка.Имя = "Имя" Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры








