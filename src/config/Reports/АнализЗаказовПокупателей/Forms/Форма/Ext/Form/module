Перем ВысотаЗаголовка;
Перем НеЗаполнятьНастройкиПриОткрытии;
Перем мВалютаРегламентированногоУчета;
Перем СтруктураСвязиЭлементовСДанными;
Перем ОтборРазвернут;
Перем ФормаНастройка;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	Нет.
//
Процедура УправлениеПараметрамиОтображенияЭлементовФормы()
	
	Если ПоказыватьЗаголовок Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Истина;

	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Ложь;

	КонецЕсли;

	// Отображение заголовка отчета
	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	Если ОтборРазвернут Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Истина;
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УправлениеПараметрамиОтображенияЭлементовФормы()

Процедура ОбновитьОтчет() Экспорт
	
	НеЗаполнятьНастройкиПриОткрытии = Не Открыта();

	СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка);

	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДокументРезультат;
	
	УправлениеПараметрамиОтображенияЭлементовФормы();

КонецПроцедуры

Процедура ВыводЗаголовка()

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда
		СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, Истина);
	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	УправлениеПараметрамиОтображенияЭлементовФормы();

КонецПроцедуры // ВыводЗаголовка()

Процедура СформироватьЗаголовокФормы()

	Если ДатаОтчета = '00010101000000' Тогда

		ОписаниеПериода = "Дата не установлена";

	Иначе

		ОписаниеПериода = "" + Формат(ДатаОтчета, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

	КонецЕсли;

	Заголовок = мНазваниеОтчета + " (" + ОписаниеПериода + ")";

КонецПроцедуры // СформироватьЗаголовокФормы()

Процедура ПоказатьЗаказПоставщику(ЗаказПоставщику)
	//ЗаказПоставщику.
	ФормаЗаказа = ЗаказПоставщику.ПолучитьФорму("ФормаДокумента", ЭтаФорма);
	ФормаЗаказа.Открыть();
	
	СтруктураВозвращаемыхЗначений = Новый Структура();
	СтруктураВозвращаемыхЗначений.Вставить("ПерезаполнитьЦеныПоТипу"			, Истина);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйТипЦен"						, ЗаказПоставщику.ТипЦен);
	СтруктураВозвращаемыхЗначений.Вставить("ПересчитатьЦеныПоВалюте"			, Истина);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйВалютаДокумента"				, ЗаказПоставщику.ВалютаДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКурсВзаиморасчетов"			, ЗаказПоставщику.КурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКурсДокумента"					, ЗаказПоставщику.КурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйУчитыватьНДС"					, ЗаказПоставщику.УчитыватьНДС);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйСуммаВключаетНДС"				, ЗаказПоставщику.СуммаВключаетНДС);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКратностьВзаиморасчетов"		, ЗаказПоставщику.КратностьВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКратностьДокумента"			, ЗаказПоставщику.КратностьВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ПерезаполнитьПроцентСкидкиНаценки"	, Ложь);
	
	СтруктураРеквизитовДокумента = Новый Структура();
	СтруктураРеквизитовДокумента.Вставить("ТипЦен");
	СтруктураРеквизитовДокумента.Вставить("ВалютаДокумента"); 
	СтруктураРеквизитовДокумента.Вставить("КурсВзаиморасчетов"); 
	СтруктураРеквизитовДокумента.Вставить("КратностьВзаиморасчетов"); 
	СтруктураРеквизитовДокумента.Вставить("УчитыватьНДС"); 
	СтруктураРеквизитовДокумента.Вставить("СуммаВключаетНДС"); 

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	ИзменитьЦеныВалюту(ФормаЗаказа.ЭтотОбъект, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, СтруктураРеквизитовДокумента,, "Товары", мВалютаРегламентированногоУчета, , СтруктураВозвращаемыхЗначений);
	
	СтруктураРеквизитовДокумента = Новый Структура();
	СтруктураРеквизитовДокумента.Вставить("ТипЦен");
	СтруктураРеквизитовДокумента.Вставить("ВалютаДокумента"); 
	СтруктураРеквизитовДокумента.Вставить("КурсВзаиморасчетов"); 
	СтруктураРеквизитовДокумента.Вставить("КратностьВзаиморасчетов"); 
	ИзменитьЦеныВалюту(ФормаЗаказа.ЭтотОбъект, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, СтруктураРеквизитовДокумента,, "ВозвратнаяТара", мВалютаРегламентированногоУчета, , СтруктураВозвращаемыхЗначений);
КонецПроцедуры

Процедура СформироватьЗаказПоставщику(Выборка, Поставщик, ФормаИндикации)

	ЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент();
	ЗаказПоставщику.Контрагент = Поставщик;
	
	ВыборкаНоменклатуры = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
	
	ФормаИндикации.МаксимальноеЗначение = ВыборкаНоменклатуры.Количество();
	ФормаИндикации.Значение = 0;
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		ФормаИндикации.Значение = ФормаИндикации.Значение + 1;
		Если ВыборкаНоменклатуры.ОсталосьОбеспечить <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		Если ВыборкаНоменклатуры.Номенклатура.Услуга Тогда
			Продолжить;
		КонецЕсли; 
		ВыборкаХарактеристикаНоменклатуры = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ХарактеристикаНоменклатуры");
		Пока ВыборкаХарактеристикаНоменклатуры.Следующий() Цикл
			Если ВыборкаХарактеристикаНоменклатуры.ОсталосьОбеспечить <= 0 Тогда
				Продолжить;
			КонецЕсли; 
			ВыборкаСтатусПартии = ВыборкаХарактеристикаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатусПартии");
			Пока ВыборкаСтатусПартии.Следующий() Цикл
				Если ВыборкаСтатусПартии.ОсталосьОбеспечить <= 0 Тогда
					Продолжить;
				КонецЕсли; 
				Если ЗначениеНеЗаполнено(ВыборкаСтатусПартии.СтатусПартии) Тогда
					Продолжить;
				КонецЕсли; 
				
				Если ВыборкаСтатусПартии.СтатусПартии <> Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
					ТЧДокумента = ЗаказПоставщику.Товары;
				Иначе
					ТЧДокумента = ЗаказПоставщику.ВозвратнаяТара;
				КонецЕсли; 
				
				ВыборкаЗаказПокупателя = ВыборкаСтатусПартии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ЗаказПокупателя");
				Пока ВыборкаЗаказПокупателя.Следующий() Цикл
					Если ВыборкаЗаказПокупателя.ОсталосьОбеспечить <= 0 Тогда
						Продолжить;
					КонецЕсли; 
					НоваяСтрока = ТЧДокумента.Добавить();
					НоваяСтрока.Номенклатура = ВыборкаЗаказПокупателя.Номенклатура;
					Если ВыборкаЗаказПокупателя.СтатусПартии <> Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
						НоваяСтрока.СтавкаНДС                  = ВыборкаЗаказПокупателя.СтавкаНДС;
						НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаЗаказПокупателя.ХарактеристикаНоменклатуры;
						НоваяСтрока.ЕдиницаИзмерения           = ВыборкаЗаказПокупателя.ЕдиницаХраненияОстатков;
						НоваяСтрока.Коэффициент                = ВыборкаЗаказПокупателя.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеНеЗаполнено(ВыборкаЗаказПокупателя.ЗаказПокупателя) Тогда
						НоваяСтрока.ЗаказПокупателя = ВыборкаЗаказПокупателя.ЗаказПокупателя;
					КонецЕсли;
					
					НоваяСтрока.Количество = ВыборкаЗаказПокупателя.ОсталосьОбеспечить;
					
				КонецЦикла; 
				
			КонецЦикла; 
		
		КонецЦикла; 
	
	КонецЦикла; 
	
	Если НЕ (ЗаказПоставщику.Товары        .Количество() = 0
		   И ЗаказПоставщику.ВозвратнаяТара.Количество() = 0
		   И ЗаказПоставщику.Услуги        .Количество() = 0) Тогда
		ПоказатьЗаказПоставщику(ЗаказПоставщику);
		ФормаИндикации.Активизировать();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаказПоставщику(ФормироватьМного)
	Настр = ПостроительОтчета.ПОлучитьНастройки();
	
	ПостроительОтчета.ИзмеренияКолонки.Очистить();
	ПостроительОтчета.ИзмеренияСтроки .Очистить();
	ПостроительОтчета.ВыбранныеПоля   .Очистить();
	ПостроительОтчета.Порядок         .Очистить();
	Поле = "Номенклатура";
	
	ПараметрНетОтбораПоНоменклатуре = Истина;

	Для Инд = 0 По ПостроительОтчета.Отбор.Количество() - 1 Цикл
		Если построительОтчета.Отбор[Инд].Использование Тогда
			Если Лев(построительОтчета.Отбор[Инд].ПутьКДанным, 12) = "Номенклатура" Тогда
				ПараметрНетОтбораПоНоменклатуре = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПостроительОтчета.Параметры.Вставить("ПараметрНетОтбораПоНоменклатуре", ПараметрНетОтбораПоНоменклатуре);
	
	Если ФормироватьМного Тогда
		//ПостроительОтчета.ВыбранныеПоля.Добавить("Номенклатура.ОсновнойПоставщик", "ОсновнойПоставщик");
		ПостроительОтчета.ИзмеренияСтроки.Добавить("Номенклатура.ОсновнойПоставщик",, ТипИзмеренияПостроителяОтчета.Элементы);
	КонецЕсли;
	
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Номенклатура",,               ТипИзмеренияПостроителяОтчета.Элементы);
	ПостроительОтчета.ИзмеренияСтроки.Добавить("ХарактеристикаНоменклатуры",, ТипИзмеренияПостроителяОтчета.Элементы);
	ПостроительОтчета.ИзмеренияСтроки.Добавить("СтатусПартии",,               ТипИзмеренияПостроителяОтчета.Элементы);
	ПостроительОтчета.ИзмеренияСтроки.Добавить("ЗаказПокупателя",,            ТипИзмеренияПостроителяОтчета.Элементы);
	
	РезультатЗапроса = ПостроительОтчета.ПолучитьЗапрос().Выполнить();
	
	ФормаИндикации = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаИндикации.Открыть();
	
	Если ФормироватьМного Тогда
		КоличествоОбработанныхПоставщиков = 0;
		ВыборкаПоставщиков = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатураОсновнойПоставщик");
		ФормаИндикации.НаименованиеОбработкиДанных = "Формирование заказов поставщикам";
		ФормаИндикации.КомментарийЗначения         = "Обработано:";
		Пока ВыборкаПоставщиков.Следующий() Цикл
			КоличествоОбработанныхПоставщиков = КоличествоОбработанныхПоставщиков + 1;
			ФормаИндикации.КомментарийОбработкиДанных = "Обрабатывается " + КоличествоОбработанныхПоставщиков + " поставщик из " + ВыборкаПоставщиков.Количество() + "";
			//Если ВыборкаПоставщиков.ОсталосьОбеспечить <= 0 Тогда
			//	Продолжить;
			//КонецЕсли; 
			СформироватьЗаказПоставщику(ВыборкаПоставщиков, ВыборкаПоставщиков.НоменклатураОсновнойПоставщик, ФормаИндикации);
		КонецЦикла; 
	Иначе
		ФормаИндикации.КомментарийОбработкиДанных = "Формируется заказ поставщику";
		СформироватьЗаказПоставщику(РезультатЗапроса, Справочники.Контрагенты.ПустаяСсылка(), ФормаИндикации);
	КонецЕсли; 
	
	ФормаИндикации.Закрыть();
	
	ПостроительОтчета.УстановитьНастройки(Настр);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ (НеЗаполнятьНастройкиПриОткрытии = Истина) Тогда
		
		// Дату отчета не устанавливаем
		//ДатаОтчета                     = РабочаяДата;
		РаскрашиватьИзмерения          = ИСТИНА;
		ПоказыватьЗаголовок            = ИСТИНА;
		ИспользоватьСвойстваИКатегории = ЛОЖЬ;
		ПоказыватьЗавершенныеЗаказы    = ЛОЖЬ;
		
		СформироватьЗаголовокФормы();
		ЗаполнитьНачальныеНастройки();
		ВыводЗаголовка();
	КонецЕсли;

	УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, СтруктураСвязиЭлементовСДанными, "ОтчетОбъект.ПостроительОтчета.Отбор")

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	НеЗаполнятьНастройкиПриОткрытии = Ложь;
	
	УправлениеПараметрамиОтображенияЭлементовФормы();
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	СформироватьЗаголовокФормы();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

// Процедура - обработчик нажатия на кнопку "Сформировать".
//
Процедура КоманднаяПанельСформировать(Элемент)

	ОбновитьОтчет();

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Отбор".
//
Процедура КоманднаяПанельОтбор(Кнопка)

	ОтборРазвернут = НЕ ОтборРазвернут;

	УправлениеПараметрамиОтображенияЭлементовФормы();

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Заголовок".
//
Процедура КоманднаяПанельЗаголовок(Кнопка)

	ПоказыватьЗаголовок = Не ПоказыватьЗаголовок;
	ВыводЗаголовка();

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Настройка".
//
Процедура КоманднаяПанельНастройка(Кнопка)

	ФормаНастройка = ПолучитьФорму("ФормаНастройки", ЭтаФорма);

	Если ФормаНастройка.ОткрытьМодально() = ИСТИНА Тогда

		ОбновитьОтчет();

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Сформировать один заказ поставщику".
//
Процедура КоманднаяПанельСформироватьОдинЗаказПоставщику(Кнопка)
	ЗаказПоставщику(Ложь);
	// Вставить содержимое обработчика.
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Сформировать заказы всем основным поставщикам".
//
Процедура КоманднаяПанельСформироватьЗаказыВСоответствииСоСвойством_ОсновнойПоставщик_(Кнопка)
	ЗаказПоставщику(Истина);
	// Вставить содержимое обработчика.
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" поля "ПолеНастройкиНоменклатура".
//
Процедура ПолеНастройкиНоменклатураПриИзменении(Элемент)

	ПолеНастройкиПриИзменении(Элемент, ПостроительОтчета.Отбор);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ПолеНастройкиКонтрагент".
//
Процедура ПолеНастройкиКонтрагентПриИзменении(Элемент)

	ПолеНастройкиПриИзменении(Элемент, ПостроительОтчета.Отбор);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ВидСравненияНоменклатура".
//
Процедура ПолеВидаСравненияНоменклатураПриИзменении(Элемент)

	ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ВидСравненияКонтрагент".
//
Процедура ПолеВидаСравненияКонтрагентПриИзменении(Элемент)

	ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СОХРАНЕНИЕ И ВОСТАНОВЛЕНИЕ НАСТРОЕК

// Процедура - обработчик события перед сохранением значений формы
//
Процедура ПередСохранениемЗначений(Отказ)

	СохраненныеНастройки = ЭтотОбъект.СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок);

КонецПроцедуры

// Процедура - обработчик события после восстановления значений формы
//
Процедура ПослеВосстановленияЗначений()
	
	// Если настройка восстанавливается, когда открывается форма сформровенного отчета, игнорируем
	Если НеЗаполнятьНастройкиПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		ЭтотОбъект.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок);
		
		// Очистим результат - он более не соответствует настройке
		ЭлементыФормы.ДокументРезультат.Очистить();
		ВысотаЗаголовка=0;
		
		ВыводЗаголовка();
		
		СформироватьЗаголовокФормы();
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик сообщений
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзмененТекстЗапроса" И Источник = ФормаНастройка Тогда
		
		УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, СтруктураСвязиЭлементовСДанными, "ОтчетОбъект.ПостроительОтчета.Отбор")

	КонецЕсли; 
	
КонецПроцедуры // ОбработкаОповещения()

////////////////////////////////////////////////////////////////////////////////

ВостановилиЗначение = Ложь;

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

НеЗаполнятьНастройкиПриОткрытии = Ложь;
ОтборРазвернут = Ложь;