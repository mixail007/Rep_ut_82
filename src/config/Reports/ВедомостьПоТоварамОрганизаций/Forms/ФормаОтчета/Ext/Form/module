
Процедура НачалоПериодаПриИзменении(Элемент)
	УстановитьНастройки();
КонецПроцедуры

Процедура КонецПериодаПриИзменении(Элемент)
	УстановитьНастройки();
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНачала, ?(ДатаОкончания='0001-01-01', ДатаОкончания, КонецДня(ДатаОкончания)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНачала = НастройкаПериода.ПолучитьДатуНачала();
		ДатаОкончания = НастройкаПериода.ПолучитьДатуОкончания();
		УстановитьНастройки();
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьНастройки()
	
	ПараметрДанныхНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0];   
	ПараметрДанныхНачалоПериода.Значение = ДатаНачала;
	ПараметрДанныхНачалоПериода.Использование = Истина;
	
	ПараметрДанныхКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[1];   
	ПараметрДанныхКонецПериода.Значение = КонецДня(ДатаОкончания);
	ПараметрДанныхКонецПериода.Использование = Истина;
	
	ПараметрДанныхПустаяСсылка = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[2];   
	ПараметрДанныхПустаяСсылка.Значение = Справочники.Контрагенты.ПустаяСсылка();
	ПараметрДанныхПустаяСсылка.Использование = Истина;
	
КонецПроцедуры

Процедура ПриОткрытии()
	УстановитьНастройки();
КонецПроцедуры


Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем ВыполненноеДействие;
	
	СтандартнаяОбработка = Ложь;	
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки,
	Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	
	Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка,ВыполненноеДействие,ДоступныеДействия,);	
	
	Если Настройки <> Неопределено Тогда
		
		Для каждого Эл ИЗ Настройки.Выбор.Элементы Цикл
			Если Строка(Эл.Поле) = "КоличествоНачальныйОстаток" ИЛИ Строка(Эл.Поле) = "КоличествоКонечныйОстаток" Тогда
				Эл.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Отчет = Новый (ТипЗнч(ЭтотОбъект));
		Форма = Отчет.ПолучитьФорму();
		Форма.Открыть();
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		Форма.Сформировать();
		//Отчет.СкомпоноватьРезультат(Форма.ЭлементыФормы.Результат,ДанныеРасшифровки);
		
	КонецЕсли;	
	
КонецПроцедуры


Процедура ДействияФормыДействие(Кнопка)

	Сформировать();
	
КонецПроцедуры

Процедура Сформировать() Экспорт
	
	Настройки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//ПараметрДанныхНачалоПериода = Настройки.ПараметрыДанных.Элементы[1];
	//ПараметрДанныхНачалоПериода.Значение = НачалоПериода;
	//ПараметрДанныхНачалоПериода.Использование = Истина;
	//
	//ПараметрДанныхНачалоПериода = Настройки.ПараметрыДанных.Элементы[0];
	//ПараметрДанныхНачалоПериода.Значение = КонецДня(КонецПериода);
	//ПараметрДанныхНачалоПериода.Использование = Истина;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	//ВнешнийНаборДанных = Новый Структура("ПроизводствоКованыхДисков", ТЗРезультат);
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);	
	
	ЭлементыФормы.Результат.Очистить();
	ДокументРезультат = ЭлементыФормы.Результат;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

