Перем мВалютаРегламентированногоУчетаОрганизаций, мВалютаУправленческогоУчетаКомпании;

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтруктураПредставлениеПолей = Новый Структура;
	МассивОтбора = Новый Массив;
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;

	ОбщийОтчет.ИмяРегистра = "-";
	
	ОбщийОтчет.мСоответствиеНазначений = Новый Соответствие;
	ОбщийОтчет.мСтруктураДляОтбораПоКатегориям = Новый Структура;
	
	// Название отчета в заголовке
	ОбщийОтчет.мНазваниеОтчета = "Продажи по оплате за период";

	ОбщийОтчет.мРежимВводаПериода = 0;

	ПродажиПоОплате(ПостроительОтчета, ОбщийОтчет.мТаблицаПоказатели, ОбщийОтчет.Показатели, ОбщийОтчет.ИспользоватьСвойстваИКатегории, СтруктураПредставлениеПолей, ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений, МассивОтбора);
	
	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	
	// Зададим период - месяц, т.к без периода отчет выводить нельзя
	// Установим дату начала отчета
	Если Не ЗначениеНеЗаполнено(глТекущийПользователь) Тогда
		ОбщийОтчет.ДатаНач = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяДатаНачалаОтчетов");
	КонецЕсли;
	ОбщийОтчет.ДатаКон = ПолучитьРабочуюДату();
	ОбщийОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
КонецПроцедуры

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт

	Если НЕ ТолькоЗаголовок
		И (ЗначениеНеЗаполнено(ОбщийОтчет.ДатаНач) ИЛИ ЗначениеНеЗаполнено(ОбщийОтчет.ДатаНач)) Тогда
		Предупреждение("Не задан период отчета!"); Возврат;
	КонецЕсли;
	
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПРоцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры

 // Заполнение параметров для отчета "Продажи по оплате"
 //
Процедура ПродажиПоОплате(ПостроительОтчета, мТаблицаПоказатели, Показатели, ИспользоватьСвойстваИКатегории, СтруктураПредставлениеПолей, мСтруктураСвязиПоказателейИИзмерений, МассивОтбора)

	// Комментарии в тексте запроса используются для следующих целей:
	// 1. комментарий //СВОЙСТВА определяет место, куда будут добавлены поля свойств
	// 2. комментарий //КАТЕГОРИИ определяет место, куда будут добавлены поля для отбора по категориям
	// 3. комментарий //СОЕДИНЕНИЯ определяет место, куда будут добавлены соединения с таблицами- источниками свойств и категорий.
	
	ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуКон = "
	|ВЫБРАТЬ
		// собственно, этот запрос и отвечает за то, чтобы для всех договоров,
		// по которым есть начальное или конечное сальдо,
		// извлечь "крайнего" регистратора.
	|	ВзаиморасчетыОиО.ДоговорКонтрагента,
	|	ВзаиморасчетыОиО.Сделка,
	|	ВзаиморасчетыОиО.Период,
	|	МИНИМУМ(ВзаиморасчетыОиО.Регистратор) КАК ПервыйРегистратор
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, &ДатаКон, Регистратор, {ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя, ДоговорКонтрагента.Владелец.* КАК Покупатель}) КАК ВзаиморасчетыОиО
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		(
	|		ВЫБРАТЬ
	|			ДоговорКонтрагента, 
	|			Сделка, 
	|			МИНИМУМ(ПериодКон) КАК Период, 
	|			СуммаВалОстаток
	|		ИЗ
	|		(ВЫБРАТЬ
				// этот запрос выбирает Договоры-сделки, Регистраторы и их периоды,
				// которые являются оплаченными на ДатаНач или на ДатаКон
				// Критерий того, что регистратор является оплаченным:
				// Сумма движений регистра "приход" после него больше,
				// чем конечное сальдо по тому же набору измерений,
				// или равно ему.
				// Вышележащий запрос обеспечивает извлечение первого такого регистратора
				// и его период
	|			ВзаиморасчетыОиО.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|			ВзаиморасчетыОиО.Сделка КАК Сделка,
	|			МИНИМУМ(ВзаиморасчетыОиО.Период) КАК ПериодКон,
	|			ВзаиморасчетыО.СуммаВалОстаток
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, &ДатаКон, Регистратор, {ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя, ДоговорКонтрагента.Владелец.* КАК Покупатель})
	|		КАК ВзаиморасчетыОиО

	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			(ВЫБРАТЬ
					//этот подзапрос извлекает все договоры-сделки, по которым есть задолжнность
					//контрагента на ДатаНач или ДатаКон
					//Здесь работает во внутреннем соединении как фильтр, заодно извлекает конечное сальдо
					//Его псевдоним - ВзаиморасчетыО
	|					ВзаиморасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|					ВзаиморасчетыОстатки.Сделка КАК Сделка,
	|					ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВалОстаток
	|				ИЗ
	|					РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, {ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя, ДоговорКонтрагента.Владелец.* КАК Покупатель}) КАК ВзаиморасчетыОстатки
	|				ГДЕ
	|				(ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток > 0)) КАК ВзаиморасчетыО
	|			ПО ВзаиморасчетыО.ДоговорКонтрагента = ВзаиморасчетыОиО.ДоговорКонтрагента
	|				И ВзаиморасчетыО.Сделка = ВзаиморасчетыОиО.Сделка
	|			// теперь остались только те договоры-сделки, по которым сальдо на
	|			// конец периода положительно
	|			ЛЕВОЕ СОЕДИНЕНИЕ
				//Это левое соединение "подтягивает" к периодам из вышележащего запроса
				//регистраторов, которые на оси времени лежат позже,
				//а заодно достает их движения "приход".
				//Движения "приход" в дальнейшем пригодятся для того, чтобы
				//отобрать только те периоды вышележащего запроса, приход после которых
				//больше, чем конечное сальдо по регистратору-сделке из ВзаиморасчетыО
				//все делается именно так из-за того, что возможно существование регистраторов
				//с одинаковым Периодом. 
	|				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, &ДатаКон, Регистратор, {ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя, ДоговорКонтрагента.Владелец.* КАК Покупатель}) КАК ВзаиморасчетыОиО2
	|			ПО ВзаиморасчетыОиО.ДоговорКонтрагента = ВзаиморасчетыОиО2.ДоговорКонтрагента
	|				И ВзаиморасчетыОиО.Сделка = ВзаиморасчетыОиО2.Сделка
	|				И (ВзаиморасчетыОиО.Период < ВзаиморасчетыОиО2.Период 
	|					ИЛИ ВзаиморасчетыОиО.Период = ВзаиморасчетыОиО2.Период И ВзаиморасчетыОиО.Регистратор < ВзаиморасчетыОиО2.Регистратор)
	|		СГРУППИРОВАТЬ ПО
	|			ВзаиморасчетыОиО.ДоговорКонтрагента,
	|			ВзаиморасчетыОиО.Сделка,
	|			ВзаиморасчетыОиО.Регистратор,
	|			ВзаиморасчетыО.СуммаВалОстаток
	|		ИМЕЮЩИЕ
	|			СУММА(ВЫБОР
	|				КОГДА (ВзаиморасчетыОиО2.СуммаВзаиморасчетовПриход) ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ ВзаиморасчетыОиО2.СуммаВзаиморасчетовПриход
	|			КОНЕЦ) < ВзаиморасчетыО.СуммаВалОстаток
	|		) КАК ПервыеПериодыПромежуточный
	|		СГРУППИРОВАТЬ ПО
	|			ДоговорКонтрагента, 
	|			Сделка, 
	|			СуммаВалОстаток
	|		) КАК ПервыеПериоды
	|	ПО ПервыеПериоды.Период = ВзаиморасчетыОиО.Период
	|	И ПервыеПериоды.Сделка = ВзаиморасчетыОиО.Сделка
	|	И ПервыеПериоды.ДоговорКонтрагента = ВзаиморасчетыОиО.ДоговорКонтрагента
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, &ДатаКон, Регистратор, {ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя, ДоговорКонтрагента.Владелец.* КАК Покупатель}) КАК ВзаиморасчетыОиО2
	|		ПО ВзаиморасчетыОиО2.Сделка = ВзаиморасчетыОиО.Сделка
	|		И ВзаиморасчетыОиО2.ДоговорКонтрагента = ВзаиморасчетыОиО.ДоговорКонтрагента
	|		И (//ВзаиморасчетыОиО.Период < ВзаиморасчетыОиО2.Период ИЛИ
	|		ВзаиморасчетыОиО.Период = ВзаиморасчетыОиО2.Период И ВзаиморасчетыОиО.Регистратор < ВзаиморасчетыОиО2.Регистратор)
		
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыОиО.ДоговорКонтрагента,
	|	ВзаиморасчетыОиО.Сделка,
	|	ВзаиморасчетыОиО.Период,
	|	ПервыеПериоды.СуммаВалОстаток
	|	ИМЕЮЩИЕ
	|СУММА(ВЫБОР
	|	КОГДА (ВзаиморасчетыОиО2.СуммаВзаиморасчетовПриход) ЕСТЬ NULL 
	|		ТОГДА 0
	|	ИНАЧЕ ВзаиморасчетыОиО2.СуммаВзаиморасчетовПриход
	|	КОНЕЦ) < ПервыеПериоды.СуммаВалОстаток
	|";
	
	ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуНач = СтрЗаменить(ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуКон, "&ДатаКон", "&ДатаНач");
	
	ПостроительОтчета.Параметры.Вставить("ВалютаУпрУчета", мВалютаУправленческогоУчетаКомпании);
	
	Если Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить().Рассчитывается Тогда
		ПостроительОтчета.Параметры.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить().БазовыйТипЦен);
		ПостроительОтчета.Параметры.Вставить("КоэффициентОтБазовогоТипа", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить().ПроцентСкидкиНаценки/100+1);
	Иначе
		ПостроительОтчета.Параметры.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
		ПостроительОтчета.Параметры.Вставить("КоэффициентОтБазовогоТипа", 1);
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	ПостроительОтчета.Текст = "
	|ВЫБРАТЬ
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот) КАК СуммаПродажи,
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот) КАК КоличествоОборот,
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот
	|		*ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаДляОтчетов.Коэффициент) КАК КоличествоЕдиницДляОтчетовОборот,
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.СебестоимостьОборот) КАК Себестоимость,
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот - ПродажиСДатамиЦенИДатамиКурсов.СебестоимостьОборот) КАК Маржа,
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот - ПродажиСДатамиЦенИДатамиКурсов.СебестоимостьОборот) КАК ЧистаяМаржа,
	|	0 КАК СуммаЗатрат,
	|	СУММА(РСЦеныКомпании.Цена*ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот
	|		*ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/
	|		РСЦеныКомпании.ЕдиницаИзмерения.Коэффициент*РСКурсыВалютыЦен.Курс/РСКурсыВалютыЦен.Кратность*
	|		РСКурсыВалютыУпрУчета.Кратность/РСКурсыВалютыУпрУчета.Курс*&КоэффициентОтБазовогоТипа) КАК ПлановаяСебестоимость,
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот - РСЦеныКомпании.Цена*ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот
	|		*ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/
	|		РСЦеныКомпании.ЕдиницаИзмерения.Коэффициент*РСКурсыВалютыЦен.Курс/РСКурсыВалютыЦен.Кратность*
	|		РСКурсыВалютыУпрУчета.Кратность/РСКурсыВалютыУпрУчета.Курс*&КоэффициентОтБазовогоТипа) КАК ПлановаяПрибыль,
	|	ПродажиСДатамиЦенИДатамиКурсов.Подразделение КАК Подразделение,
	|	ПродажиСДатамиЦенИДатамиКурсов.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ПродажиСДатамиЦенИДатамиКурсов.ЗаказПокупателя.Ответственный КАК Ответственный,
	|	ПродажиСДатамиЦенИДатамиКурсов.Номенклатура КАК Номенклатура,
	|	ПродажиСДатамиЦенИДатамиКурсов.ДоговорВзаиморасчетовПокупателя.Владелец КАК Покупатель
	|{
	|ВЫБРАТЬ
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот) КАК СуммаПродажи,
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот) КАК КоличествоОборот,
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот
	|		*ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаДляОтчетов.Коэффициент) КАК КоличествоЕдиницДляОтчетовОборот,
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.СебестоимостьОборот) КАК Себестоимость,
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот - ПродажиСДатамиЦенИДатамиКурсов.СебестоимостьОборот) КАК Маржа,
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот - ПродажиСДатамиЦенИДатамиКурсов.СебестоимостьОборот) КАК ЧистаяМаржа,
	|	0 КАК СуммаЗатрат,
	|	СУММА(РСЦеныКомпании.Цена*ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот
	|		*ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/
	|		РСЦеныКомпании.ЕдиницаИзмерения.Коэффициент*РСКурсыВалютыЦен.Курс/РСКурсыВалютыЦен.Кратность*
	|		РСКурсыВалютыУпрУчета.Кратность/РСКурсыВалютыУпрУчета.Курс*&КоэффициентОтБазовогоТипа) КАК ПлановаяСебестоимость,
	|	СУММА(ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот - РСЦеныКомпании.Цена*ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот
	|		*ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/
	|		РСЦеныКомпании.ЕдиницаИзмерения.Коэффициент*РСКурсыВалютыЦен.Курс/РСКурсыВалютыЦен.Кратность*
	|		РСКурсыВалютыУпрУчета.Кратность/РСКурсыВалютыУпрУчета.Курс*&КоэффициентОтБазовогоТипа) КАК ПлановаяПрибыль,
	|	ПродажиСДатамиЦенИДатамиКурсов.Регистратор КАК ДокументРеализации,
	|	ПродажиСДатамиЦенИДатамиКурсов.ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	|	ПродажиСДатамиЦенИДатамиКурсов.ЗаказПокупателя.* КАК ЗаказПокупателя,
	|	ПродажиСДатамиЦенИДатамиКурсов.ЗаказПокупателя.Ответственный.* КАК Ответственный,
	|	ПродажиСДатамиЦенИДатамиКурсов.ДоговорВзаиморасчетовПокупателя.* КАК ДоговорВзаиморасчетовПокупателя,
	|	ПродажиСДатамиЦенИДатамиКурсов.ДоговорВзаиморасчетовПокупателя.Владелец.* КАК Покупатель,
	|	ПродажиСДатамиЦенИДатамиКурсов.Подразделение.* КАК Подразделение,
	|	ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.* КАК Номенклатура,
	|	ПродажиСДатамиЦенИДатамиКурсов.ДокументПродажи.* КАК ДокументПродажи,
	|	ПродажиСДатамиЦенИДатамиКурсов.ДокументОприходования.* КАК ДокументОприходования
	|}
	|ИЗ (
	|ВЫБРАТЬ
	|	ПродажиОбороты.СтоимостьОборот*ДопКоэффициент КАК СуммаПродажиОборот,
	|	(ВЫБОР КОГДА (ПродажиСебестоимостьОбороты.СтоимостьОборот) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ПродажиСебестоимостьОбороты.СтоимостьОборот КОНЕЦ + ВЫБОР КОГДА (ПродажиСебестоимостьКорректировка.Стоимость) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ПродажиСебестоимостьКорректировка.Стоимость КОНЕЦ)*ДопКоэффициент КАК СебестоимостьОборот,
	|	ПродажиОбороты.КоличествоОборот*ДопКоэффициент КАК КоличествоОборот,
	|	ПродажиОбороты.Регистратор,
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.ХарактеристикаНоменклатуры,
	|	ПродажиОбороты.ДоговорКонтрагента КАК ДоговорВзаиморасчетовПокупателя,
	|	ПродажиОбороты.ЗаказПокупателя,
	|	ПродажиОбороты.Подразделение,
	|	ПродажиОбороты.ДокументПродажи,
	|	ПродажиСебестоимостьОбороты.ДокументОприходования,
	|	СписокРегистраторов.ДатаКурсаВалютыУпрУчета,
	|	МАКСИМУМ(РСЦеныКомпании.Период) КАК ДатаЦены,
	|	МАКСИМУМ(РСКурсыВалют.Период) КАК ДатаКурсаВалютыЦены
//	|{ ВЫБРАТЬ
//	|	СуммаПродажиОборот,
//	|	СебестоимостьОборот,
//	|	КоличествоОборот,
//	|	ПродажиОбороты.Регистратор,
//	|	ПродажиОбороты.Номенклатура,
//	|	ПродажиОбороты.ХарактеристикаНоменклатуры,
//	|	ПродажиОбороты.ДоговорКонтрагента КАК ДоговорВзаиморасчетовПокупателя,
//	|	ПродажиОбороты.ЗаказПокупателя,
//	|	ПродажиОбороты.Подразделение,
//	|	ПродажиОбороты.ДокументПродажи,
//	|	ПродажиСебестоимостьОбороты.ДокументОприходования,
//	|	СписокРегистраторов.ДатаКурсаВалютыУпрУчета,
//	|	ДатаЦены,
//	|	ДатаКурсаВалютыЦены
//|}
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(, &ДатаКон, Регистратор, 
	|		{Номенклатура.*, ХарактеристикаНоменклатуры.*, ЗаказПокупателя.*, Подразделение.*, ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя, ДоговорКонтрагента.Владелец.* КАК Покупатель, ДокументПродажи.*}
	|                                    ) КАК ПродажиОбороты

// Ниже пошел запрос, отвечающий за передачу Продажам только тех регистраторов, которые оплатились
// в течение периода отчета.
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ОсновнаяТаблица.Регистратор,
	|			МАКСИМУМ(ВЫБОР КОГДА
	|				ВЫБОР //документ не был оплаченным на ДатаНач
	|					КОГДА НеоплаченныеНаДатуКон.ДоговорКонтрагента ЕСТЬ НЕ NULL ТОГДА
	|						ОсновнаяТаблица.Период < НеоплаченныеНаДатуКон.Период
	|						ИЛИ ОсновнаяТаблица.Период = НеоплаченныеНаДатуКон.Период 
	|							И ОсновнаяТаблица.Регистратор<НеоплаченныеНаДатуКон.ПервыйРегистратор
	|					ИНАЧЕ
	|						ОсновнаяТаблица.Период <= &ДатаКон
	|				КОНЕЦ
	|				И
	|				ВЫБОР //и стал оплаченным на ДатаКон
	|					КОГДА НеоплаченныеНаДатуНач.ДоговорКонтрагента ЕСТЬ НЕ NULL ТОГДА
	|						ОсновнаяТаблица.Период > НеоплаченныеНаДатуНач.Период
	|						ИЛИ ОсновнаяТаблица.Период = НеоплаченныеНаДатуНач.Период 
	|							И ОсновнаяТаблица.Регистратор>=НеоплаченныеНаДатуНач.ПервыйРегистратор
	|					ИНАЧЕ
	|						ОсновнаяТаблица.Период >= &ДатаНач
	|				КОНЕЦ ТОГДА 1
	|			ИНАЧЕ -1 КОНЕЦ) КАК ДопКоэффициент,
	|			МАКСИМУМ(РСКВ.Период) КАК ДатаКурсаВалютыУпрУчета //это даты курсов
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ОсновнаяТаблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК РСКВ
	|				ПО РСКВ.Валюта = &ВалютаУпрУчета И РСКВ.Период<=ОсновнаяТаблица.Период

	|			ЛЕВОЕ СОЕДИНЕНИЕ ("+ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуКон+") КАК НеоплаченныеНаДатуКон
	|				ПО НеоплаченныеНаДатуКон.ДоговорКонтрагента = ОсновнаяТаблица.ДоговорКонтрагента
	|				И НеоплаченныеНаДатуКон.Сделка = ОсновнаяТаблица.Сделка

	|			ЛЕВОЕ СОЕДИНЕНИЕ ("+ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуНач+") КАК НеоплаченныеНаДатуНач
	|				ПО НеоплаченныеНаДатуНач.ДоговорКонтрагента = ОсновнаяТаблица.ДоговорКонтрагента
	|				И НеоплаченныеНаДатуНач.Сделка = ОсновнаяТаблица.Сделка

	|		ГДЕ
	|			ВЫБОР //документ не был оплаченным на ДатаНач
	|				КОГДА НеоплаченныеНаДатуКон.ДоговорКонтрагента ЕСТЬ НЕ NULL ТОГДА
	|					ОсновнаяТаблица.Период < НеоплаченныеНаДатуКон.Период
	|					ИЛИ ОсновнаяТаблица.Период = НеоплаченныеНаДатуКон.Период 
	|						И ОсновнаяТаблица.Регистратор<НеоплаченныеНаДатуКон.ПервыйРегистратор
	|				ИНАЧЕ
	|					ОсновнаяТаблица.Период <= &ДатаКон
	|			КОНЕЦ
	|			И
	|			ВЫБОР //и стал оплаченным на ДатаКон
	|				КОГДА НеоплаченныеНаДатуНач.ДоговорКонтрагента ЕСТЬ НЕ NULL ТОГДА
	|					ОсновнаяТаблица.Период > НеоплаченныеНаДатуНач.Период
	|					ИЛИ ОсновнаяТаблица.Период = НеоплаченныеНаДатуНач.Период 
	|						И ОсновнаяТаблица.Регистратор>=НеоплаченныеНаДатуНач.ПервыйРегистратор
	|				ИНАЧЕ
	|					ОсновнаяТаблица.Период >= &ДатаНач
	|			КОНЕЦ
	|			ИЛИ
	|			ВЫБОР //документ был оплаченным на ДатаНач, т.е. находился левее границы
	|				КОГДА НеоплаченныеНаДатуНач.ДоговорКонтрагента ЕСТЬ НЕ NULL ТОГДА
	|					ОсновнаяТаблица.Период < НеоплаченныеНаДатуНач.Период
	|					ИЛИ ОсновнаяТаблица.Период = НеоплаченныеНаДатуНач.Период 
	|						И ОсновнаяТаблица.Регистратор<НеоплаченныеНаДатуНач.ПервыйРегистратор
	|				ИНАЧЕ
	|					ОсновнаяТаблица.Период < &ДатаНач
	|			КОНЕЦ
	|			И
	|			ВЫБОР //и стал НЕоплаченным на ДатаКон, т.е находится правее границы
	|				КОГДА НеоплаченныеНаДатуКон.ДоговорКонтрагента ЕСТЬ НЕ NULL ТОГДА
	|					ОсновнаяТаблица.Период > НеоплаченныеНаДатуКон.Период
	|					ИЛИ ОсновнаяТаблица.Период = НеоплаченныеНаДатуКон.Период 
	|						И ОсновнаяТаблица.Регистратор>=НеоплаченныеНаДатуКон.ПервыйРегистратор
	|				ИНАЧЕ
	|					Ложь //этот вариант предполагает, что появились неоплаченные документы
	|			КОНЕЦ
	|		СГРУППИРОВАТЬ ПО
	|			ОсновнаяТаблица.Регистратор
	|	) КАК СписокРегистраторов
	|	ПО ПродажиОбороты.Регистратор = СписокРегистраторов.Регистратор
	// Себестоимость продаж, списываемая сразу
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(,&ДатаКон,Регистратор, 
	|		{Номенклатура.*, ХарактеристикаНоменклатуры.*, ЗаказПокупателя.*, Подразделение.*}
	|                                    ) КАК ПродажиСебестоимостьОбороты
	|		ПО ПродажиОбороты.Регистратор = ПродажиСебестоимостьОбороты.Регистратор
	|		И ПродажиОбороты.Номенклатура = ПродажиСебестоимостьОбороты.Номенклатура
	|		И ПродажиОбороты.ХарактеристикаНоменклатуры = ПродажиСебестоимостьОбороты.ХарактеристикаНоменклатуры
	|		И ПродажиОбороты.ЗаказПокупателя = ПродажиСебестоимостьОбороты.ЗаказПокупателя
	// Себестоимость продаж, списываемая при корректировке
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ СУММА(Стоимость) КАК Стоимость, Номенклатура, ДокументДвижения, ХарактеристикаНоменклатуры, ЗаказПокупателя, ДокументОприходования, Подразделение 
	|		ИЗ РегистрНакопления.ПродажиСебестоимость КАК ПродажиСебестоимость
	|//		ГДЕ ПродажиСебестоимость.ДокументДвижения <> Неопределено
	|		СГРУППИРОВАТЬ ПО                         Номенклатура, ДокументДвижения, ХарактеристикаНоменклатуры, ЗаказПокупателя, ДокументОприходования, Подразделение
	|		) ПродажиСебестоимостьКорректировка
	|		ПО ПродажиСебестоимостьКорректировка.Номенклатура = ПродажиОбороты.Номенклатура
	|		И ПродажиСебестоимостьКорректировка.ХарактеристикаНоменклатуры = ПродажиОбороты.ХарактеристикаНоменклатуры
	|		И ПродажиСебестоимостьКорректировка.ДокументДвижения = ПродажиОбороты.Регистратор
	|		И ПродажиСебестоимостьКорректировка.ЗаказПокупателя = ПродажиОбороты.ЗаказПокупателя
	|		И ПродажиСебестоимостьКорректировка.Подразделение = ПродажиОбороты.Подразделение
	// ...
	// Цены для плановой себестоимости
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК РСЦеныКомпании
	|		ПО РСЦеныКомпании.ТипЦен = &ТипЦенПлановойСебестоимости
	|		И ПродажиОбороты.Номенклатура = РСЦеныКомпании.Номенклатура
	|		И ПродажиОбороты.ХарактеристикаНоменклатуры = РСЦеныКомпании.ХарактеристикаНоменклатуры
	|		И РСЦеныКомпании.Период<=ПродажиОбороты.Период
	// Курсы валют для плановой себестоимости
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК РСКурсыВалют
	|		ПО РСКурсыВалют.Валюта = РСЦеныКомпании.Валюта
	|		И РСКурсыВалют.Период<=РСЦеныКомпании.Период
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.СтоимостьОборот*ДопКоэффициент,
	|	(ВЫБОР КОГДА (ПродажиСебестоимостьОбороты.СтоимостьОборот) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ПродажиСебестоимостьОбороты.СтоимостьОборот КОНЕЦ + ВЫБОР КОГДА (ПродажиСебестоимостьКорректировка.Стоимость) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ПродажиСебестоимостьКорректировка.Стоимость КОНЕЦ)*ДопКоэффициент,
	|	ПродажиОбороты.КоличествоОборот*ДопКоэффициент,
	|	ПродажиОбороты.Регистратор,
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.ХарактеристикаНоменклатуры,
	|	ПродажиОбороты.ДоговорКонтрагента,
	|	ПродажиОбороты.ЗаказПокупателя,
	|	ПродажиОбороты.Подразделение,
	|	ПродажиОбороты.ДокументПродажи,
	|	ПродажиСебестоимостьОбороты.ДокументОприходования,
	|	СписокРегистраторов.ДатаКурсаВалютыУпрУчета
	|) КАК ПродажиСДатамиЦенИДатамиКурсов
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК РСЦеныКомпании
	|	ПО РСЦеныКомпании.ТипЦен = &ТипЦенПлановойСебестоимости
	|	И РСЦеныКомпании.Период = ПродажиСДатамиЦенИДатамиКурсов.ДатаЦены
	|	И РСЦеныКомпании.Номенклатура = ПродажиСДатамиЦенИДатамиКурсов.Номенклатура
	|	И РСЦеныКомпании.ХарактеристикаНоменклатуры = ПродажиСДатамиЦенИДатамиКурсов.ХарактеристикаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК РСКурсыВалютыУпрУчета
	|	ПО РСКурсыВалютыУпрУчета.Период = ПродажиСДатамиЦенИДатамиКурсов.ДатаКурсаВалютыУпрУчета
	|	И РСКурсыВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК РСКурсыВалютыЦен
	|	ПО РСКурсыВалютыЦен.Валюта = РСЦеныКОмпании.Валюта
	|	И РСКурсыВалютыЦен.Период = ПродажиСДатамиЦенИДатамиКурсов.ДатаКурсаВалютыЦены
	
	|СГРУППИРОВАТЬ ПО
	|	ПродажиСДатамиЦенИДатамиКурсов.Подразделение,
	|	ПродажиСДатамиЦенИДатамиКурсов.ЗаказПокупателя,
	|	ПродажиСДатамиЦенИДатамиКурсов.Номенклатура,
	|	ПродажиСДатамиЦенИДатамиКурсов.ДоговорВзаиморасчетовПокупателя.Владелец

	|{ГДЕ 
	|	ПродажиСДатамиЦенИДатамиКурсов.Подразделение.* КАК Подразделение,
	|	ПродажиСДатамиЦенИДатамиКурсов.ЗаказПокупателя.Ответственный.* КАК Ответственный,
	|	ПродажиСДатамиЦенИДатамиКурсов.ДоговорВзаиморасчетовПокупателя.Владелец.* КАК Покупатель,
	|	ПродажиСДатамиЦенИДатамиКурсов.ДоговорВзаиморасчетовПокупателя.* КАК ДоговорВзаиморасчетовПокупателя,
	|	ПродажиСДатамиЦенИДатамиКурсов.ЗаказПокупателя.* КАК ЗаказПокупателя,
	|	ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.* КАК Номенклатура
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	0 СуммаПродажи,
	|	0 КоличествоОборот,
	|	0 КоличествоЕдиницДляОтчетовОборот,
	|	0 Себестоимость,
	|	0 Маржа,
	|	СУММА( - ЗатратыОбороты.СуммаОборот) ЧистаяМаржа,
	|	СУММА(ЗатратыОбороты.СуммаОборот) СуммаЗатрат,
	|	0 ПлановаяСебестоимость,
	|	0 ПлановаяПрибыль,
	|	ЗатратыОбороты.Подразделение,
	|	ЗатратыОбороты.Заказ               КАК ЗаказПокупателя,
	|	ЗатратыОбороты.Заказ.Ответственный КАК Ответственный,
	|	ЗатратыОбороты.СтатьяЗатрат КАК Номенклатура,
	|	ЗатратыОбороты.Заказ.Контрагент КАК Покупатель
	|{
	|ВЫБРАТЬ
	|	0 КАК СуммаПродажи,
	|	0 КАК КоличествоОборот,
	|	0 КАК КоличествоЕдиницДляОтчетовОборот,
	|	0 КАК Себестоимость,
	|	0 КАК Маржа,
	|	СУММА( - ЗатратыОбороты.СуммаОборот) КАК ЧистаяМаржа,
	|	СУММА(ЗатратыОбороты.СуммаОборот) КАК СуммаЗатрат,
	|	0 КАК ПлановаяСебестоимость,
	|	0 КАК ПлановаяПрибыль,
	|	ЗатратыОбороты.Регистратор КАК ДокументРеализации,
	|	NULL КАК ХарактеристикаНоменклатуры,
	|	ЗатратыОбороты.Заказ.Контрагент.* КАК Покупатель,
	|	ЗатратыОбороты.Заказ.ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя,
	|	ЗатратыОбороты.Заказ.Ответственный.* КАК Ответственный,
	|	ЗатратыОбороты.Подразделение.* КАК Подразделение,
	|	ЗатратыОбороты.СтатьяЗатрат.* КАК Номенклатура
	|}
	|ИЗ РегистрНакопления.Затраты.Обороты(&ДатаНач, &ДатаКон, Регистратор, Заказ <> &ПустойЗаказПокупателя) КАК ЗатратыОбороты
	|СГРУППИРОВАТЬ ПО
	|	ЗатратыОбороты.Подразделение,
	|	ЗатратыОбороты.Заказ,
	|	ЗатратыОбороты.СтатьяЗатрат
	|{ГДЕ 
	|	ЗатратыОбороты.Подразделение.* КАК Подразделение,
	|	ЗатратыОбороты.Заказ.Ответственный.* КАК Ответственный,
	|	ЗатратыОбороты.Заказ.Контрагент.* КАК Покупатель,
	|	ЗатратыОбороты.Заказ.ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя,
	|	ЗатратыОбороты.Заказ.* КАК ЗаказПокупателя,
	|	ЗатратыОбороты.СтатьяЗатрат КАК Номенклатура
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|{УПОРЯДОЧИТЬ ПО 
	|	ЗаказПокупателя.*,
	|	Подразделение.*,
	|	Покупатель.*,
	|	Ответственный.*,
	|	Номенклатура.*,
	|	СуммаПродажи,
	|	КоличествоОборот,
	|	КоличествоЕдиницДляОтчетовОборот,
	|	Себестоимость,
	|	Маржа,
	|	ЧистаяМаржа,
	|	СуммаЗатрат,
	|	ПлановаяСебестоимость,
	|	ПлановаяПрибыль
	|	//СВОЙСТВА
	|}
	|ИТОГИ
	|	СУММА(СуммаПродажи),
	|	СУММА(КоличествоОборот),
	|	СУММА(КоличествоЕдиницДляОтчетовОборот),
	|	СУММА(Себестоимость),
	|	СУММА(Маржа),
	|	СУММА(ЧистаяМаржа),
	|	СУММА(СуммаЗатрат),
	|	СУММА(ПлановаяСебестоимость),
	|	СУММА(ПлановаяПрибыль)
	|ПО ОБЩИЕ, Покупатель, ЗаказПокупателя, Номенклатура
	|{ИТОГИ ПО
	|	ЗаказПокупателя.*,
	|	Подразделение.*,
	|	Покупатель.*,
	|	Ответственный.*,
	|	Номенклатура.*
	|	//СВОЙСТВА
	|}
	|";
	
	// Соответствие имен полей в запросе и их представлений в отчете
	СтруктураПредставлениеПолей = Новый Структура(
	"	Подразделение,
	|	Ответственный,
	|	Покупатель,
	|	ДоговорВзаиморасчетовПокупателя,
	|	ЗаказПокупателя,
	|	СуммаПродажи,
	|	КоличествоОборот,
	|	КоличествоЕдиницДляОтчетовОборот,
	|	Себестоимость,
	|	Маржа,
	|	СуммаЗатрат,
	|	ЧистаяМаржа,
	|	ПлановаяСебестоимость,
	|	ПлановаяПрибыль,
	|	ДокументРеализации,
	|	ДокументОприходования,
	|	ДокументПродажи,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры",
	"Подразделение",
	"Ответственный",
	"Покупатель",
	"Договор с покупателем",
	"Заказ покупателя",
	"Сумма продажи",
	"Количество (в ед. хранения)",
	"Количество (в ед. для отчетов)",
	"Стоимость",
	"Прибыль",
	"Сумма затрат",
	"Чистая прибыль",
	"Плановая себестоимость",
	"Плановая прибыль",
	"Регистратор (Документ реализации)",
	"Документ поставки",
	"Документ продажи",
	"Номенклатура",
	"Характеристика номенклатуры"
	
	);

	ПостроительОтчета.ДоступныеПоля.Найти("Номенклатура").ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");

	ПостроительОтчета.ВыбранныеПоля.Очистить();

	// При использовании свойств и категорий в текст запроса добавляются дополнительные поля
	Если ИспользоватьСвойстваИКатегории Тогда

		Предупреждение("Для данного отчета не предусмотрен отбор и группировка по свойствам и категориям!", 60);
		ИспользоватьСвойстваИКатегории = Ложь;

		// Свойства и категории, назначаемые пользователем:
		//Имя поля                    Имя назначения свойств и категорий объектов
		//СкладКомпании               Справочник_СкладКомпании
		//Номенклатура                Справочник_Номенклатура
		//ХарактеристикаНоменклатуры  Справочник_ХарактеристикиНоменклатуры
		//Заказ                       Документы
		//ДокументОприходования            Документы

		//ТаблицаПолей = Новый ТаблицаЗначений;
		//ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		//ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		//ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		//ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		//ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

		//НоваяСтрока = ТаблицаПолей.Добавить();
		//НоваяСтрока.ПутьКДанным = "ДоговорВзаиморасчетовПокупателя.Владелец";
		//НоваяСтрока.Представление = "Покупатель";
		//НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;

		//НоваяСтрока = ТаблицаПолей.Добавить();
		//НоваяСтрока.ПутьКДанным = "ПродажиОбороты.ЗаказПокупателя";
		//НоваяСтрока.Представление = "Заказ покупателя";
		//НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;

		// Добавим строки запроса, необходимые для использования свойств и категорий
		//Текст = ПостроительОтчета.Текст;

		//отДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, мСоответствиеНазначений, ПостроительОтчета.Параметры);
	

		//ПостроительОтчета.Текст = Текст;
		
	КонецЕсли;

	// Числовые показатели заносятся в специальную таблицу
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "СуммаПродажи";
	СтрПоказатели.ПредставлениеПоля = "Сумма продажи";
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "КоличествоОборот";
	СтрПоказатели.ПредставлениеПоля = "Количество (в ед. хранения)";
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=3";

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "КоличествоЕдиницДляОтчетовОборот";
	СтрПоказатели.ПредставлениеПоля = "Количество (в ед. для отчетов)";
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=3";

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "Себестоимость";
	СтрПоказатели.ПредставлениеПоля = "Стоимость";
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "Маржа";
	СтрПоказатели.ПредставлениеПоля = "Прибыль";
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "СуммаЗатрат";
	СтрПоказатели.ПредставлениеПоля = "Сумма затрат";
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "ЧистаяМаржа";
	СтрПоказатели.ПредставлениеПоля = "Чистая прибыль";
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "ПлановаяСебестоимость";
	СтрПоказатели.ПредставлениеПоля = "Плановая себестоимость";
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "ПлановаяПрибыль";
	СтрПоказатели.ПредставлениеПоля = "Плановая прибыль";
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";
	
	мСтруктураСвязиПоказателейИИзмерений = Новый Структура;

	// ... и добавляются в табличную часть Показатели
	
	ПустаяСтруктура = Новый Структура;
	
	Для Каждого Строка Из мТаблицаПоказатели Цикл

		Показатель = Показатели.Добавить();
		Показатель.Имя           = Строка.ИмяПоля;
		Показатель.Представление = Строка.ПредставлениеПоля;
		Если Найти(Показатель.Имя, "Количество")>0 Тогда
			Показатель.Использование = Ложь;
			мСтруктураСвязиПоказателейИИзмерений.Вставить(Показатель.Имя, Новый Структура("Номенклатура"));
		Иначе
			Показатель.Использование = Истина;
			мСтруктураСвязиПоказателейИИзмерений.Вставить(Показатель.Имя, ПустаяСтруктура);
		КОнецЕсли;

		ОбработкаПоказателейУдалитьИзДоступныхПолей(Строка.ИмяПоля, ПостроительОтчета);

	КонецЦикла; 

	// Поля отбора, которые будут показаны на основной форме, заносятся в массив МассивОтбора
	МассивОтбора.Добавить("Подразделение");
	МассивОтбора.Добавить("Номенклатура");
	МассивОтбора.Добавить("Покупатель");
	МассивОтбора.Добавить("ЗаказПокупателя");
	
КонецПроцедуры

мВалютаРегламентированногоУчетаОрганизаций = Константы.ВалютаРегламентированногоУчета.Получить();

мВалютаУправленческогоУчетаКомпании = Константы.ВалютаУправленческогоУчета.Получить();
