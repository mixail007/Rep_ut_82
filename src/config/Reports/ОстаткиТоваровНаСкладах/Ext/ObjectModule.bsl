Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		ДоступноеПодразделение = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
    	ОбщийОтчет.ПостроительОтчета.Отбор.СкладПодразделение.Значение = ДоступноеПодразделение;
		ОбщийОтчет.ПостроительОтчета.Отбор.СкладПодразделение.Использование = Истина;
		ОбщийОтчет.ПостроительОтчета.Отбор.СкладПодразделение.ВидСравнения = ВидСравнения.Равно;
	КонецЕсли;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням=Истина;
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	СтруктураПредставлениеПолей = Новый Структура;
	МассивОтбора = Новый Массив;
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	
	Текст = "
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	СУММА(КоличествоОстаток) КАК Количество,
	|	СУММА(КоличествоОстаток*Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоБазовыхЕд,
	|	СУММА(КоличествоОстаток*Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/Номенклатура.ЕдиницаДляОтчетов.Коэффициент) КАК КоличествоЕдиницОтчетов,
	|	Склад КАК Склад,
	|	Склад.Представление КАК СкладПредставление,
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.Представление КАК НоменклатураПредставление,
	|	ТаблицаРегистра.Номенклатура.Код КАК Код
	|	//ТаблицаРегистра.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК НоменклатураЕдиницаХраненияОстатковПредставление
	|	//СВОЙСТВА
	|{ВЫБРАТЬ 
	|	Склад.* КАК Склад,
	|	Номенклатура.* КАК Номенклатура,
	|	ТаблицаРегистра.Номенклатура.БазоваяЕдиницаИзмерения КАК НоменклатураБазоваяЕдиницаИзмерения,
	|	ТаблицаРегистра.Номенклатура.ЕдиницаХраненияОстатков КАК НоменклатураЕдиницаХраненияОстатков,
	|	ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры.* КАК СерияНоменклатуры,
	|	Качество.* КАК Качество
	|	//СВОЙСТВА
	|}
	|ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаКон,{Склад.* КАК Склад,
	|				Номенклатура.* КАК Номенклатура,
	|				ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	|				СерияНоменклатуры.* КАК СерияНоменклатуры,
	|				Качество.* КАК Качество}) КАК ТаблицаРегистра
	| //ЛЕВОЕ СОЕДИНЕНИЕ
	| //( ВЫБРАТЬ  Номенклатура НоменклатураЗаказано,КоличествоОстаток КоличествоЗаказано  ИЗ
    | // РегистрНакопления.ЗаказыПокупателей.Остатки(,ЗаказПокупателя.ДатаОтгрузки = &ДатаОтгрузки И ЗаказПокупателя.Проверен)) ЗаказыПокупателей
	| //ПО ТаблицаРегистра.Номенклатура=ЗаказыПокупателей.НоменклатураЗаказано
	|//СОЕДИНЕНИЯ
	|СГРУППИРОВАТЬ ПО 
	|	Номенклатура,
	|	Склад
	|//СГРУППИРОВАТЬПО

	|{ГДЕ
	|	ЛОЖЬ КАК НеавтоматизированнаяТорговаяТочка
	|//СВОЙСТВА
	|//КАТЕГОРИИ
	|}
	|{УПОРЯДОЧИТЬ ПО 
	|	Склад.* КАК Склад,
	|	Номенклатура.* КАК Номенклатура,
	|	ТаблицаРегистра.Номенклатура.БазоваяЕдиницаИзмерения.* КАК НоменклатураБазоваяЕдиницаИзмерения,
	|	ТаблицаРегистра.Номенклатура.ЕдиницаХраненияОстатков.* КАК НоменклатураЕдиницаХраненияОстатков,
	|	ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры.* КАК СерияНоменклатуры,
	|	Качество.* КАК Качество,
	|	Количество,
	|	КоличествоБазовыхЕд
	|//ОБЩИЕ_СВОЙСТВА
	|}
	|{ИТОГИ ПО 
	|	Склад.* КАК Склад,
	|	Номенклатура.* КАК Номенклатура,
	|	Номенклатура.БазоваяЕдиницаИзмерения.* КАК НоменклатураБазоваяЕдиницаИзмерения,
	|	Номенклатура.ЕдиницаХраненияОстатков.* КАК НоменклатураЕдиницаХраненияОстатков,
	|	ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры.* КАК СерияНоменклатуры,
	|	Качество.* КАК Качество
	|//ОБЩИЕ_СВОЙСТВА
	|}
	|ИТОГИ  
	|	СУММА(Количество),
	|	СУММА(КоличествоБазовыхЕд),
	|	СУММА(КоличествоЕдиницОтчетов)
	|ПО ОБЩИЕ ,
	|	Склад КАК Склад, Номенклатура  КАК Номенклатура";
	
	//ПостроительОтчета.Параметры.Вставить("ДатаОтгрузки",НачалоДня(ТекущаяДата()));
	
	СтруктураПредставлениеПолей = Новый Структура(
	"Склад,
	|Номенклатура,
	|ХарактеристикаНоменклатуры,
	|СерияНоменклатуры,
	|Качество,
	|НоменклатураБазоваяЕдиницаИзмерения,
	|НоменклатураЕдиницаХраненияОстатков",
	"Склад",
	"Номенклатура",
	"Характеристика номенклатуры",
	"Серия номенклатуры",
	"Качество",
	"Базовая единица измерения",
	"Единица хранения остатков");
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда
		ТекстПоляСвойств= "";
		ТекстПоляКатегорий = "";

		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "Склад";
		СтрокаТаблицы.Представление = "Склад";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Склады;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "ХарактеристикаНоменклатуры";
		СтрокаТаблицы.Представление = "Характеристика номенклатуры";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
		
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, 
				ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
				,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);
				
		ДобавитьВТекстСвойстваОбщие(Текст, ТекстПоляСвойств, "//ОБЩИЕ_СВОЙСТВА");

	КонецЕсли;
		
	ПостроительОтчета.Текст = Текст;
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории = Истина Тогда

		УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);

	КонецЕсли;
	
	Если ОбщийОтчет.Показатели.Найти("Количество", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("Количество", "Количество в единицах хранения остатков", Истина, "ЧЦ=15; ЧДЦ=3");
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("КоличествоБазовыхЕд", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("КоличествоБазовыхЕд", "Количество в базовых единицах измерения", Ложь, "ЧЦ=15; ЧДЦ=3");
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("КоличествоЕдиницОтчетов", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("КоличествоЕдиницОтчетов", "Количество в ед. отчетов", Ложь, "ЧЦ=15; ЧДЦ=3");
	КонецЕсли;
	
	МассивОтбора.Добавить("Номенклатура");
	МассивОтбора.Добавить("Склад");
	
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		ДоступноеПодразделение = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
		МассивОтбора.Добавить("Склад.Подразделение");
	КонецЕсли;
	
	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		ПостроительОтчета.Отбор.СкладПодразделение.Значение = ДоступноеПодразделение;
		ПостроительОтчета.Отбор.СкладПодразделение.Использование = Истина;
	КонецЕсли;
		
	ПостроительОтчета.ИзмеренияСтроки.Удалить(ПостроительОтчета.ИзмеренияСтроки.Найти("Склад"));
	//ПостроительОтчета.ИзмеренияКолонки.Добавить("Склад", "Склад", ТипИзмеренияПостроителяОтчета.Элементы);
	
	ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений = Новый Структура("Количество, КоличествоБазовыхЕд", Новый Структура("НоменклатураЕдиницаХраненияОстатков, Номенклатура"), Новый Структура("НоменклатураБазоваяЕдиницаИзмерения, Номенклатура"), Новый Структура);
	
	//ОбщийОтчет.ВыводитьИтогиПоВсемУровням=Истина;
	//Если не(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьПросмотрНедоступныхСкладов")) Тогда 
	//	Запрос = новый Запрос;
	//	Запрос.Текст = "
	//	|Выбрать Ссылка из Справочник.Склады
	//	|Где Ссылка.ЗапретитьИспользование = Истина";
	//	Список = Запрос.Выполнить().Выгрузить();
	//	ПостроительОтчета.Параметры.Вставить("СписокСкладов",Список.ВыгрузитьКолонку("Ссылка"));
	//КонецЕсли;
	
КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		ДоступноеПодразделение = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
		ОбщийОтчет.ПостроительОтчета.Отбор.СкладПодразделение.Значение = ДоступноеПодразделение;
		ОбщийОтчет.ПостроительОтчета.Отбор.СкладПодразделение.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

ОбщийОтчет.ИмяРегистра = "ТоварыНаСкладах";
ОбщийОтчет.мНазваниеОтчета = "Остатки товаров на складах";
ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
ОбщийОтчет.мРежимВводаПериода = 1;