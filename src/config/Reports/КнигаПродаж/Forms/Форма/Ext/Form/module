// Вызывается из тела процедуры "Сформировать"
// осуществляет проверку значений "НачалоПериода" и "КонецПериода"
// введенных пользователем.
Функция ПроверкаПериода()
	
	ПроверкаПройдена=Истина;
	
	Если НачалоПериода > КонецПериода Тогда
		
		Предупреждение("Неправильно задан период формирования отчета!"+Символы.ПС+
		               "Дата начала больше даты окончания периода.");
					   
		ПроверкаПройдена=Ложь;
		
	ИначеЕсли НачалоПериода='00010101' Тогда
		
		Предупреждение("Не указана дата начала отчета");
					   
		ПроверкаПройдена=Ложь;
		
	ИначеЕсли КонецПериода='00010101' Тогда
		
		Предупреждение("Не указана дата конца отчета");
					   
		ПроверкаПройдена=Ложь;
	
	КонецЕсли;
		
	Возврат ПроверкаПройдена;
	
КонецФункции // ПроверкаПериода()

// Процедура вызывается при нажатии кнопки настройки периода в диалоге документа.
// Позволяет в удобном диалоговом окне задать значения реквизитов НачалоПериода
// и КонецПериода
Процедура ВыбПериодНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
	КонецПериода = НастройкаПериода.ПолучитьДатуОкончания();
	
КонецПроцедуры

// Процедура вызывается из тела процедуры "СформироватьКнигуПродажПоОплате".
// По результатам запроса к регистру "НДСПродажи" определяет общую сумму, на которую был
// выставлен документ "СчетФактура".
Процедура РассчитатьСуммуСчетаФактуры(СчетФактура, СуммаВсегоВыставлено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	НДСПродажиОбороты.Период,
				   |	НДСПродажиОбороты.Регистратор,
				   |	НДСПродажиОбороты.Событие,
				   |	НДСПродажиОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
				   |	НДСПродажиОбороты.НДСОборот КАК НДС
	               |ИЗ
				   |	РегистрНакопления.НДСПродажи.Обороты(, &КонецПериода, Регистратор, (Организация = &Организация) и (СчетФактура = &СчетФактура) и (Событие в (&УчитываемыеСобытия)) ) КАК НДСПродажиОбороты";
	
	Запрос.УстановитьПараметр("КонецПериода", 	КонецПериода);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("СчетФактура", 	СчетФактура);
	
	УчитываемыеСобытия = Новый СписокЗначений;
	УчитываемыеСобытия.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	УчитываемыеСобытия.Добавить(Перечисления.СобытияПоНДСПродажи.Возврат);
	
	Запрос.УстановитьПараметр("УчитываемыеСобытия",	УчитываемыеСобытия);

	Выборка = Запрос.Выполнить().Выбрать();
	
	СуммаВсегоВыставлено = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Событие = Перечисления.СобытияПоНДСПродажи.Реализация Тогда
			СуммаВсегоВыставлено = СуммаВсегоВыставлено + Выборка.СуммаБезНДС + Выборка.НДС;
			
		ИначеЕсли Выборка.Событие = Перечисления.СобытияПоНДСПродажи.Возврат Тогда
			СуммаВсегоВыставлено = СуммаВсегоВыставлено - (Выборка.СуммаБезНДС + Выборка.НДС);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из тела процедуры "ПодготовитьКнигуКВыводуНаПечать".
// По результатам запроса к регистру "НДСПродажи" формирует таблицу значений для построения книги продаж
// с учетом требований, используемых при учетной политике "По отгрузке"
Процедура СформироватьКнигуПродажПоОтгрузке(Запрос, ТаблицаРезультатов)
	
	// Формируем группировки итогов удобные для книги продаж по отгрузке
	Запрос.Текст = Запрос.Текст + 	"
									|УПОРЯДОЧИТЬ ПО
									|	СчетФактура,
									|	НДСПродажи.Событие.Порядок";
								
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если (Выборка.Событие = Перечисления.СобытияПоНДСПродажи.Реализация)
		 или (Выборка.Событие = Перечисления.СобытияПоНДСПродажи.ПолученАванс)
		 или (Выборка.Событие = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате)
		 или (Выборка.Событие = Перечисления.СобытияПоНДСПродажи.Возврат) Тогда
			// Для данных событий идентификация строки книги продаж, к которой относится данный элемент выборки, осуществляется
			// путем анализа сочетания СчетФактура - Регистратор. Если строка с таким сочетанием уже создана в книге, тогда данный
			// элемент выборки относится к ней и новой строки формировать не нужно, иначе нужно сформировать новую строку в КП.
			СтруктураПоискаСтрокиКП = Новый Структура("Регистратор,СчетФактура", Выборка.Регистратор, Выборка.СчетФактура);
			
			ИскомыеСтроки = ТаблицаРезультатов.НайтиСтроки(СтруктураПоискаСтрокиКП);
			Если ИскомыеСтроки.Количество() = 0 Тогда
				// Создаем новую строку в книге
				НовСтр = ТаблицаРезультатов.Добавить();
				
				НовСтр.Регистратор = Выборка.Регистратор;
				НовСтр.СчетФактура = Выборка.СчетФактура;
				НовСтр.Покупатель =  Выборка.Покупатель;
				НовСтр.Период = 	 Выборка.Период;
				
			Иначе
				НовСтр = ИскомыеСтроки[0];
				
			КонецЕсли;
			
		Иначе
			// Для данного события (событие оплаты) поиск строки КП, к которому оно относится выполняется только по счету - фактуре
			// без учета регистратора. Т.е. по связке СчетФактура - Регистратор, где СчетФактура = Регистратор
			СтруктураПоискаСтрокиКП = Новый Структура("Регистратор,СчетФактура", Выборка.СчетФактура, Выборка.СчетФактура);
			
			ИскомыеСтроки = ТаблицаРезультатов.НайтиСтроки(СтруктураПоискаСтрокиКП);
			Если ИскомыеСтроки.Количество() = 0 Тогда
				// Игнорируем этот элемент выборки
				Продолжить;
				
			Иначе
				НовСтр = ИскомыеСтроки[0];
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.Событие = Перечисления.СобытияПоНДСПродажи.Оплата Тогда
			// Проанализируем оплаты по конкретным документам
			Если Не ЗначениеНеЗаполнено(Выборка.ДокументОплаты) Тогда
				НовСтр.ДатаОплаты = НовСтр.ДатаОплаты + ?(ПустаяСтрока(НовСтр.ДатаОплаты),"",", ") + Формат(Выборка.ДокументОплаты.Дата, "ДФ=dd.MM.yyyy");
			КонецЕсли;
				
		Иначе
			// Проанализируем события по ставкам НДС
			// Зафиксируем суммы событий в регистре
			Если (ЗначениеНеЗаполнено(НовСтр.ДатаОплаты))
			   и (ТипЗнч(Выборка.СчетФактура) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС")) Тогда	
				// Если дата оплаты еще не определена
				НовСтр.ДатаОплаты = Формат(Выборка.СчетФактура.ДатаОплаты, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			
			Знак = ?(Выборка.Событие = Перечисления.СобытияПоНДСПродажи.Возврат, -1, 1);
			
			Если (Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20) или (Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120) Тогда
				НовСтр.СуммаБезНДС20 = 	НовСтр.СуммаБезНДС20 + Знак * Выборка.СуммаБезНДС;
				НовСтр.НДС20 = 			НовСтр.НДС20 + Знак * Выборка.НДС;
			ИначеЕсли (Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18) или (Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118) Тогда
				НовСтр.СуммаБезНДС18 = 	НовСтр.СуммаБезНДС18 + Знак * Выборка.СуммаБезНДС;
				НовСтр.НДС18 = 			НовСтр.НДС18 + Знак * Выборка.НДС;
			ИначеЕсли  (Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10) или (Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
				НовСтр.СуммаБезНДС10 = 	НовСтр.СуммаБезНДС10 + Знак * Выборка.СуммаБезНДС;
				НовСтр.НДС10 = 			НовСтр.НДС10 + Знак * Выборка.НДС;
			ИначеЕсли  Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				НовСтр.СуммаСовсемБезНДС = НовСтр.СуммаСовсемБезНДС + Знак * Выборка.СуммаБезНДС;
			ИначеЕсли  Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				НовСтр.НДС0 = НовСтр.НДС0 + Знак * Выборка.СуммаБезНДС;
			КонецЕсли;
			
			НовСтр.СуммаВсего = НовСтр.СуммаВсего + Знак * (Выборка.СуммаБезНДС + Выборка.НДС);
					
		КонецЕсли;		
		
	КонецЦикла;
	
	ТаблицаРезультатов.Сортировать("Период");

КонецПроцедуры

// Процедура вызывается из тела процедуры "ПодготовитьКнигуКВыводуНаПечать".
// По результатам запроса к регистру "НДСПродажи" формирует таблицу значений для построения книги продаж
// с учетом требований, используемых при учетной политике "По оплате".
Процедура СформироватьКнигуПродажПоОплате(Запрос, ТаблицаРезультатов)
	
	// Формируем группировки итогов удобные для книги продаж по оплате
	Запрос.Текст = Запрос.Текст +  "
									|УПОРЯДОЧИТЬ ПО
									|	НДСПродажи.Регистратор УБЫВ,
									|	НДСПродажи.Событие.Порядок

									|ИТОГИ СУММА(СуммаБезНДС), СУММА(НДС) ПО
									|	Регистратор,
									|	ДокументОплаты,
									|	СчетФактура";
								
	Результат = Запрос.Выполнить();
	
	ВыборкаПоРегистратору = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаПоРегистратору.Следующий() Цикл
		
		ВыборкаПоДокументамОплаты = ВыборкаПоРегистратору.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
		Пока ВыборкаПоДокументамОплаты.Следующий() Цикл
			ВыборкаПоСчетамФактурам = ВыборкаПоДокументамОплаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			Пока ВыборкаПоСчетамФактурам.Следующий() Цикл
				Если ЗначениеНеЗаполнено(ВыборкаПоСчетамФактурам.СчетФактура) Тогда
					Продолжить;
				КонецЕсли;
				
				// Создаем новую строку в книге
				НовСтр = ТаблицаРезультатов.Добавить();
					
				НовСтр.ДокументОплаты = ВыборкаПоСчетамФактурам.ДокументОплаты;
				Если Не ЗначениеНеЗаполнено(НовСтр.ДокументОплаты) Тогда
					НовСтр.ДатаОплаты = Формат(ВыборкаПоСчетамФактурам.ДокументОплаты.Дата, "ДФ=dd.MM.yyyy");
				КонецЕсли;
					
				Если (ЗначениеНеЗаполнено(НовСтр.ДатаОплаты))
				   и (ТипЗнч(ВыборкаПоСчетамФактурам.СчетФактура) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС")) Тогда	
					// Если дата оплаты еще не определена
					НовСтр.ДатаОплаты = Формат(ВыборкаПоСчетамФактурам.СчетФактура.ДатаОплаты, "ДФ=dd.MM.yyyy");
				КонецЕсли;
				
				НовСтр.СчетФактура = ВыборкаПоСчетамФактурам.СчетФактура;
				
				Выборка = ВыборкаПоСчетамФактурам.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					НовСтр.Покупатель = Выборка.Покупатель;
					НовСтр.Период = Выборка.Период;
					
					// Проанализируем события по ставкам НДС
					// Зафиксируем суммы событий в регистре
					Если (Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20) или (Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120) Тогда
						НовСтр.СуммаБезНДС20 = 	НовСтр.СуммаБезНДС20 + Выборка.СуммаБезНДС;
						НовСтр.НДС20 = 			НовСтр.НДС20 + Выборка.НДС;
					ИначеЕсли (Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18) или (Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118) Тогда
						НовСтр.СуммаБезНДС18 = 	НовСтр.СуммаБезНДС18 + Выборка.СуммаБезНДС;
						НовСтр.НДС18 = 			НовСтр.НДС18 + Выборка.НДС;
					ИначеЕсли  (Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10) или (Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
						НовСтр.СуммаБезНДС10 = 	НовСтр.СуммаБезНДС10 + Выборка.СуммаБезНДС;
						НовСтр.НДС10 = 			НовСтр.НДС10 + Выборка.НДС;
					ИначеЕсли  Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
						НовСтр.СуммаСовсемБезНДС = НовСтр.СуммаСовсемБезНДС + Выборка.СуммаБезНДС;
					ИначеЕсли  Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						НовСтр.НДС0 = НовСтр.НДС0 + Выборка.СуммаБезНДС;
					КонецЕсли;
					
					НовСтр.СуммаВсего = НовСтр.СуммаВсего + (Выборка.СуммаБезНДС + Выборка.НДС);
					
				КонецЦикла;  // Пока Выборка.Следующий() Цикл
				
				СуммаВсегоВыставлено = 0;
				РассчитатьСуммуСчетаФактуры(ВыборкаПоСчетамФактурам.СчетФактура, СуммаВсегоВыставлено);
				
				// Устанавливаем факт частичной оплаты
				Если НовСтр.СуммаВсего < СуммаВсегоВыставлено Тогда
					// Данная оплата является частичной
					НовСтр.ДатаОплаты = НовСтр.ДатаОплаты + ", частичная оплата";				
				ИначеЕсли (НовСтр.СуммаВсего > СуммаВсегоВыставлено)
					    и (СуммаВсегоВыставлено > 0) Тогда
					// Сумма, отраженная в книге не может быть больше суммы событий "Реализация"
					КоэффУменьшения = СуммаВсегоВыставлено / НовСтр.СуммаВсего;
					
					УчтеноБазыСумма = НовСтр.СуммаБезНДС20;
					УчтеноБазыНДС   = НовСтр.НДС20;
					
					НовСтр.СуммаБезНДС20 = 	УчтеноБазыСумма * КоэффУменьшения;
					НовСтр.НДС20 = 			УчтеноБазыНДС * КоэффУменьшения;
					
					УжеРаспределеноСумма = НовСтр.СуммаБезНДС20;
					УжеРаспределеноНДС   = НовСтр.НДС20;
					УчтеноБазыСумма = 	   УчтеноБазыСумма + НовСтр.СуммаБезНДС18;
					УчтеноБазыНДС   = 	   УчтеноБазыНДС + НовСтр.НДС18;
					
					НовСтр.СуммаБезНДС18 = 	УчтеноБазыСумма * КоэффУменьшения - УжеРаспределеноСумма;
					НовСтр.НДС18 = 			УчтеноБазыНДС * КоэффУменьшения - УжеРаспределеноНДС;
					
					УжеРаспределеноСумма = УжеРаспределеноСумма + НовСтр.СуммаБезНДС18;
					УжеРаспределеноНДС   = УжеРаспределеноНДС + НовСтр.НДС18;
					УчтеноБазыСумма = 	   УчтеноБазыСумма + НовСтр.СуммаБезНДС10;
					УчтеноБазыНДС   = 	   УчтеноБазыНДС + НовСтр.НДС10;
					
					НовСтр.СуммаБезНДС10 = 	УчтеноБазыСумма * КоэффУменьшения - УжеРаспределеноСумма;
					НовСтр.НДС10 = 			УчтеноБазыНДС * КоэффУменьшения - УжеРаспределеноНДС;
					
					УжеРаспределеноСумма = УжеРаспределеноСумма + НовСтр.СуммаБезНДС10;
					УжеРаспределеноНДС   = УжеРаспределеноНДС + НовСтр.НДС10;
					УчтеноБазыСумма = 	   УчтеноБазыСумма + НовСтр.СуммаСовсемБезНДС;
					
					НовСтр.СуммаСовсемБезНДС = (УчтеноБазыСумма + УчтеноБазыНДС) * КоэффУменьшения - (УжеРаспределеноСумма + УжеРаспределеноНДС);
					
					УжеРаспределеноСумма = УжеРаспределеноСумма + НовСтр.СуммаСовсемБезНДС;
					УчтеноБазыСумма = 	   УчтеноБазыСумма + НовСтр.НДС0;
					
					НовСтр.НДС0 = (УчтеноБазыСумма + УчтеноБазыНДС) * КоэффУменьшения - (УжеРаспределеноСумма + УжеРаспределеноНДС);
					
					НовСтр.СуммаВсего = НовСтр.СуммаБезНДС20 + НовСтр.НДС20 + НовСтр.СуммаБезНДС18 + НовСтр.НДС18 + НовСтр.СуммаБезНДС10 + НовСтр.НДС10 + НовСтр.СуммаСовсемБезНДС + НовСтр.НДС0;
					
				КонецЕсли;
				
			КонецЦикла;  // Пока ВыборкаПоСчетамФактурам.Следующий() Цикл
		КонецЦикла;  // Пока ВыборкаПоДокументамОплаты.Следующий() Цикл
	КонецЦикла;  // Пока ВыборкаПоРегистратору.Следующий() Цикл

	// Выполняем упорядочивание записей книги продаж по периоду
	ТаблицаРезультатов.Колонки.Добавить("ДатаСортировки");
	Для Каждого СтрРез Из ТаблицаРезультатов Цикл
		Если ЗначениеНеЗаполнено(СтрРез.ДокументОплаты) Тогда
			СтрРез.ДатаСортировки = СтрРез.СчетФактура.Дата;
		Иначе
			СтрРез.ДатаСортировки = Макс(СтрРез.ДокументОплаты.Дата, СтрРез.СчетФактура.Дата);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРезультатов.Сортировать("ДатаСортировки");
	
КонецПроцедуры

// Функция вызывается из тела процедуры "Сформировать".
// Функция осуществляет первичную обработку результатов запроса к движениям регистра НДСПродажи,
// и по данным запроса заполняет таблицу значений, на основании которой, будет напечатана книга продаж
// Параметры:
// 	Результат - ссылка на результаты выполнения запроса к данным регистра "НДСПродажи"
//  МоментОпределенияНалоговойБазыНДС
Функция ПодготовитьКнигуКВыводуНаПечать(МоментОпределенияНалоговойБазыНДС);
	
	МассивПодтвержденНДС = Новый Массив();
	МассивПодтвержденНДС.Добавить(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
	МассивПодтвержденНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	
	МассивРегистрируемыхСобытий = Новый Массив();
	МассивРегистрируемыхСобытий.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	МассивРегистрируемыхСобытий.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	МассивРегистрируемыхСобытий.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	
	Если (МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке) Тогда
		МассивРегистрируемыхСобытий.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
		МассивРегистрируемыхСобытий.Добавить(Перечисления.СобытияПоНДСПродажи.Возврат);
	КонецЕсли;	
	
	// Создаем общий запрос
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	НДСПродажи.Регистратор  КАК Регистратор,
					|	НДСПродажи.Покупатель 	КАК Покупатель,
					|	НДСПродажи.СчетФактура 	КАК СчетФактура,
					|	НДСПродажи.Период 		КАК Период,
					|	НДСПродажи.СтавкаНДС 	КАК СтавкаНДС,
					|	НДСПродажи.ДокументОплаты КАК ДокументОплаты,
					|	НДСПродажи.Событие		КАК Событие,
					|	СУММА(НДСПродажи.СуммаБезНДС) КАК СуммаБезНДС,
					|	СУММА(НДСПродажи.НДС)   КАК НДС
					|
					|ИЗ
					|	РегистрНакопления.НДСПродажи КАК НДСПродажи
					|
					|ГДЕ
					|	(НДСПродажи.Организация = &Организация) И
					|	( (НДСПродажи.СтавкаНДС = &СтавкаНДС0 И НДСПродажи.Событие В (&ПодтвержденНДС)) ИЛИ (НДСПродажи.СтавкаНДС <> &СтавкаНДС0 И НДСПродажи.Событие В (&РегистрируемоеСобытие)) ) И
					|	НДСПродажи.Регистратор.Дата <= &КонецПериода И
					|	НДСПродажи.Регистратор.Дата >= &НачалоПериода
					
					|СГРУППИРОВАТЬ ПО
					|	НДСПродажи.Регистратор,
					|	НДСПродажи.Покупатель,
					|	НДСПродажи.СчетФактура,
					|	НДСПродажи.Период,
					|	НДСПродажи.СтавкаНДС,
					|	НДСПродажи.ДокументОплаты,
					|	НДСПродажи.Событие";
	
	Запрос.УстановитьПараметр("РегистрируемоеСобытие", 	МассивРегистрируемыхСобытий);
	Запрос.УстановитьПараметр("НачалоПериода", 			НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", 			КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация", 			Организация);
	
	Запрос.УстановитьПараметр("ПодтвержденНДС", МассивПодтвержденНДС);
	Запрос.УстановитьПараметр("СтавкаНДС0", 	Перечисления.СтавкиНДС.НДС0);

	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Регистратор");
	ТаблицаРезультатов.Колонки.Добавить("СчетФактура");
	ТаблицаРезультатов.Колонки.Добавить("ДокументОплаты");
	ТаблицаРезультатов.Колонки.Добавить("ДатаОплаты",		ПолучитьОписаниеТиповСтроки(80));
	ТаблицаРезультатов.Колонки.Добавить("Покупатель");
	ТаблицаРезультатов.Колонки.Добавить("Период");
	ТаблицаРезультатов.Колонки.Добавить("Событие");
	ТаблицаРезультатов.Колонки.Добавить("СуммаВсего",		ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРезультатов.Колонки.Добавить("СуммаБезНДС",		ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРезультатов.Колонки.Добавить("СуммаБезНДС10",	ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРезультатов.Колонки.Добавить("СуммаБезНДС20",	ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРезультатов.Колонки.Добавить("СуммаБезНДС18",	ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРезультатов.Колонки.Добавить("СуммаСовсемБезНДС",ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРезультатов.Колонки.Добавить("НДС0",				ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРезультатов.Колонки.Добавить("НДС10",			ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРезультатов.Колонки.Добавить("НДС20",			ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРезультатов.Колонки.Добавить("НДС18",			ПолучитьОписаниеТиповЧисла(15,2));
	
	Если МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
		СформироватьКнигуПродажПоОтгрузке(Запрос, ТаблицаРезультатов);
	Иначе
		СформироватьКнигуПродажПоОплате(Запрос, ТаблицаРезультатов);
	КонецЕсли;
		
	Возврат ТаблицаРезультатов;

КонецФункции

Процедура Сформировать(Кнопка)
	
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация.");
		Возврат;
	КонецЕсли;

	Если НЕ ПроверкаПериода() Тогда
		Возврат;
	КонецЕсли;
	
	СрезСведений = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьПоследнее(КонецПериода, Новый Структура("Организация", Организация));
	МоментОпределенияНалоговойБазыНДС = СрезСведений.МоментОпределенияНалоговойБазыНДС;
	Если (МоментОпределенияНалоговойБазыНДС <> Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке) И 
		 (МоментОпределенияНалоговойБазыНДС <> Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате) Тогда
		Сообщить("Не задана учетная политика в части определения налоговой базы по НДС, книга продаж не будет заполнена!");
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ТабличныйДокумент.Очистить();

	Макет = ПолучитьМакет("Макет");

	// Вывод шапки
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.НачалоПериода = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
	Секция.Параметры.КонецПериода = Формат(КонецПериода, "ДФ=dd.MM.yyyy");
	Секция.Параметры.НазваниеОрганизации = Организация.НаименованиеПолное;
	Секция.Параметры.ИННОрганизации = "" + Организация.ИНН + ?(ЗначениеНеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	ЭлементыФормы.ТабличныйДокумент.Вывести(Секция);
	
	// Анализ ИБ для формирования книги продаж
	ТаблицаКП = ПодготовитьКнигуКВыводуНаПечать(МоментОпределенияНалоговойБазыНДС);
	
	// Вывод на печать таблицы книги продаж
	Для Каждого СтрТаблицы Из ТаблицаКП Цикл 
		// Вывод шапки
		Секция = Макет.ПолучитьОбласть("Строка");
		
		Документ = НайтиПодчиненныйДокумент(СтрТаблицы.СчетФактура, "СчетФактураВыданный");
		
		ЭтоРозница = Ложь;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ДатаНомер = "" + Формат(Документ.Дата, "ДФ=dd.MM.yyyy") + ", №" + Документ.Номер;
			
			Если Документ.НаАванс Тогда
				// "Гасим" суммы в колонках 5а и 6а книги продаж (письмо Минфина N 03-04-11/135)
				СтрТаблицы.СуммаБезНДС18 = 0;
				СтрТаблицы.СуммаБезНДС10 = 0;
				СтрТаблицы.СуммаБезНДС20 = 0;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрТаблицы.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			ДатаНомер = "" + Формат(СтрТаблицы.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + СтрТаблицы.СчетФактура.Номер;
			ЭтоРозница = Истина;
			
		КонецЕсли;
		
		Секция.Параметры.ДатаНомер = ДатаНомер;
		Секция.Параметры.ДатаОплаты = СтрТаблицы.ДатаОплаты;
		Секция.Параметры.ВсегоПродаж = СтрТаблицы.СуммаВсего;

		Секция.Параметры.Покупатель = ?(ЭтоРозница, "Розничная торговля", СтрТаблицы.Покупатель.НаименованиеПолное);
		Секция.Параметры.ПокупательИНН = СтрТаблицы.Покупатель.ИНН;
		Секция.Параметры.ПокупательКПП = СтрТаблицы.Покупатель.КПП;
			
		Секция.Параметры.СуммаБезНДС18 = СтрТаблицы.СуммаБезНДС18;
		Секция.Параметры.НДС18 = 		 СтрТаблицы.НДС18;
		Секция.Параметры.СуммаБезНДС10 = СтрТаблицы.СуммаБезНДС10;
		Секция.Параметры.НДС10 = 		 СтрТаблицы.НДС10;
		Секция.Параметры.НДС0 = 		 СтрТаблицы.НДС0;
		Секция.Параметры.СуммаБезНДС20 = СтрТаблицы.СуммаБезНДС20;
		Секция.Параметры.НДС20 = 		 СтрТаблицы.НДС20;
		Секция.Параметры.СуммаСовсемБезНДС = СтрТаблицы.СуммаСовсемБезНДС;

		ЭлементыФормы.ТабличныйДокумент.Вывести(Секция);
		
	КонецЦикла;
	
	// Вывод всего
	Секция = Макет.ПолучитьОбласть("Всего");

	Секция.Параметры.СуммаБезНДС18 = 	ТаблицаКП.Итог("СуммаБезНДС18");
	Секция.Параметры.НДС18 = 		 	ТаблицаКП.Итог("НДС18");
	Секция.Параметры.СуммаБезНДС10 = 	ТаблицаКП.Итог("СуммаБезНДС10");
	Секция.Параметры.НДС10 = 		 	ТаблицаКП.Итог("НДС10");
	Секция.Параметры.НДС0 = 		 	ТаблицаКП.Итог("НДС0");
	Секция.Параметры.СуммаБезНДС20 = 	ТаблицаКП.Итог("СуммаБезНДС20");
	Секция.Параметры.НДС20 = 		 	ТаблицаКП.Итог("НДС20");
	Секция.Параметры.СуммаСовсемБезНДС = ТаблицаКП.Итог("СуммаСовсемБезНДС");
	
	Секция.Параметры.ВсегоПродаж = 	 	ТаблицаКП.Итог("СуммаВсего");

	ЭлементыФормы.ТабличныйДокумент.Вывести(Секция);

	// Вывод подвала
	Секция = Макет.ПолучитьОбласть("Подвал");
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОБух");
	Секция.Параметры.ИмяБух = ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), СписокПоказателей).ФИОБух;
	Секция.Параметры.ИмяОрг = "";

	ЭлементыФормы.ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	НачалоПериода = НачалоМесяца(РабочаяДата);
	КонецПериода = КонецМесяца(РабочаяДата);

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Организация = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
	
КонецПроцедуры
