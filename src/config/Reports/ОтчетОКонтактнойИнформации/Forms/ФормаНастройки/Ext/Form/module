
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура меняет свойство "ТолькоПросмотр" у элемента формы ЧастьСтрокиПроизвольногоВидаКИ.
//
// Параметры - НЕТ
//
// Возвращаемое значение - НЕТ
//
Процедура ДоступностьЧастьСтрокиПроизвольногоВидаКИ()

	ЭлементыФормы.СтрокаПерсональныхВидовКИ.Доступность = ОбрабатыватьПерсональныеВидыКИ;

КонецПроцедуры

// Процедура меняет свойство "Доступность" у элемента формы ИспользоватьСвойстваИКатегории.
//
// Параметры - НЕТ
//
// Возвращаемое значение - НЕТ
//
Процедура ДоступностьСвойствИКатегорий()

	Если ОбъектОтчета = Неопределено Тогда
		ИспользоватьСвойстваИКатегории = Ложь;
		ЭлементыФормы.ИспользоватьСвойстваИКатегории.Доступность = Ложь;
	КонецЕсли; 
	
	Попытка
		СсылкаОбъекта = Новый (ОбъектОтчета);
		НайденныйПВХ = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов["Справочник_" + СсылкаОбъекта.Метаданные().Имя];
		ЭлементыФормы.ИспользоватьСвойстваИКатегории.Доступность = Истина;
	Исключение
		ИспользоватьСвойстваИКатегории = Ложь;
		ЭлементыФормы.ИспользоватьСвойстваИКатегории.Доступность = Ложь;
	КонецПопытки;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ДоступностьСвойствИКатегорий();
	
	ДоступностьЧастьСтрокиПроизвольногоВидаКИ();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ КОМАНДНЫХ ПАНЕЛИ

// Обработчик события элемента КоманднаяПанельСпискаВыбранныхВидовКИ.КнопкаУстановитьФлажки.
//
Процедура КоманднаяПанельСпискаВыбранныхВидовКИКнопкаУстановитьФлажки(Кнопка)
	
	Для каждого СтрокаТаблицы Из ВидыКонтактнойИнформации Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСпискаВыбранныхВидовКИ.КнопкаСнятьФлажки.
//
Процедура КоманднаяПанельСпискаВыбранныхВидовКИКнопкаСнятьФлажки(Кнопка)
	
	Для каждого СтрокаТаблицы Из ВидыКонтактнойИнформации Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик события элемента ОсновныеДействияФормы.ОК.
//
Процедура ОсновныеДействияФормыОК(Элемент)
	
	ЭтаФорма.Закрыть(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриИзменении элемента формы ИспользоватьСвойстваИКатегории.
//
Процедура ИспользоватьСвойстваИКатегорииПриИзменении(Элемент)

	// Запоминаем текущую настройку
	Настройки = ПостроительОтчета.ПолучитьНастройки(Истина, Истина, Истина, Истина);

	// Перезаполнение объекта (с новым текстом запроса)
	ЗаполнитьНачальныеНастройки();

	// Восстанавливаем запомненную настройку
	ПостроительОтчета.УстановитьНастройки(Настройки, Истина, Истина, Истина, Истина);

	Для Каждого Элемент Из мСтруктураСвязиЭлементовСДанными Цикл

		ВладелецФормы.ЭлементыФормы[Элемент.Ключ].Данные = Элемент.Значение;

	КонецЦикла;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ОбъектОтчета.
//
Процедура ОбъектОтчетаПриИзменении(Элемент)

	ДоступностьСвойствИКатегорий();
	
	// Запоминаем текущую настройку
	Настройки = ПостроительОтчета.ПолучитьНастройки(, , Истина, Истина);

	// Перезаполнение объекта (с новым текстом запроса)
	ЗаполнитьНачальныеНастройки();

	// Восстанавливаем запомненную настройку
	ПостроительОтчета.УстановитьНастройки(Настройки, Ложь, Ложь, Истина, Истина);

	СформироватьСписокВидовКИ();
	
	УстановитьСвязьПолейБыстрогоОтбораНаФорме(ВладелецФормы.ЭлементыФормы, ПостроительОтчета.Отбор, мСтруктураСвязиЭлементовСДанными, "ОбработкаОбъект.ПостроительОтчета.Отбор");
	
	ВладелецФормы.ЭлементыФормы.ФлажокНастройкиОбъект.Заголовок = ПостроительОтчета.Отбор.Объект.Представление;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ОбрабатыватьПерсональныеВидыКИ.
//
Процедура ОбрабатыватьПерсональныеВидыКИПриИзменении(Элемент)
	
	ДоступностьЧастьСтрокиПроизвольногоВидаКИ();
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы ВидыКИ.
//
Процедура ВидыКИПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы ВидыКИ.
//
Процедура ВидыКИПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИспользоватьРегистрПриЗаполненииВидовКИ.
//
Процедура ИспользоватьРегистрПриЗаполненииВидовКИПриИзменении(Элемент)
	
	СформироватьСписокВидовКИ();
	
КонецПроцедуры

// Обработчик события Очистка элемента формы Отбор.Имя.
//
Процедура ОтборИмяОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = НЕ ОтборСвязанСДанными(ЭлементыФормы.Отбор.ТекущиеДанные.Имя, мСтруктураСвязиЭлементовСДанными);

КонецПроцедуры

// Обработчик события ОбработкаВыбора элемента формы Отбор.Имя.
//
Процедура ОтборИмяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = НЕ ОтборСвязанСДанными(ЭлементыФормы.Отбор.ТекущиеДанные.Имя, мСтруктураСвязиЭлементовСДанными);

КонецПроцедуры

// Обработчик события ПередУдалением элемента формы Отбор.
//
Процедура ОтборПередУдалением(Элемент, Отказ)
	
	Отказ = ОтборСвязанСДанными(ЭлементыФормы.Отбор.ТекущиеДанные.Имя, мСтруктураСвязиЭлементовСДанными);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы Отбор.Значение.
//
Процедура ОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Найти(НРег(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление), "категории") Тогда
		// Ограничение списка категорий
		Назначение = мСоответствиеНазначений.Получить(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление);
		ОсуществитьВыборКатегории(Элемент, Назначение, ЭтаФорма, СтандартнаяОбработка);
	ИначеЕсли Найти(НРег(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление), "св-во") Тогда
		Свойство = мСоответствиеНазначений.Получить(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление);
		ОсуществитьВыборСвойства(Элемент, Свойство, ЭтаФорма, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

ЭлементыФормы.ОбъектОтчета.СписокВыбора = мСписокОбъектовОтчета;
