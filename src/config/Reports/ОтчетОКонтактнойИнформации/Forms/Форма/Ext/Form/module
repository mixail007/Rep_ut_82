
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	Нет.
//
Процедура УправлениеПометкамиКнопокКоманднойПанели()
	
	Если ПоказыватьЗаголовок Тогда
		ЭлементыФормы.КоманднаяПанель.Кнопки.Заголовок.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанель.Кнопки[0].Кнопки.Заголовок.Пометка = Истина;

	Иначе
		ЭлементыФормы.КоманднаяПанель.Кнопки.Заголовок.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанель.Кнопки[0].Кнопки.Заголовок.Пометка = Ложь;

	КонецЕсли;

	Если ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.КоманднаяПанель.Кнопки.Отбор.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанель.Кнопки[0].Кнопки.Отбор.Пометка = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанель.Кнопки.Отбор.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанель.Кнопки[0].Кнопки.Отбор.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, мСтруктураСвязиЭлементовСДанными, "ОбработкаОбъект.ПостроительОтчета.Отбор");
	СформироватьСписокВидовКИ();
	
	СформироватьОтчет(ЭлементыФормы.ПолеТабличногоДокумента, Истина);
	
	ЭлементыФормы.ФлажокНастройкиОбъект.Заголовок = ПостроительОтчета.Отбор.Объект.Представление;
	
	ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	УправлениеПометкамиКнопокКоманднойПанели();
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("Объект") = Неопределено Тогда
		ПостроительОтчета.ИзмеренияСтроки.Добавить("Объект", "Объект", ТипИзмеренияПостроителяОтчета.Элементы);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если (ОбъектОтчета = ТипЗнч(Неопределено) ИЛИ ОбъектОтчета = Неопределено) И мСписокОбъектовОтчета.Количество() > 0 Тогда
		ОбъектОтчета = мСписокОбъектовОтчета[0].Значение;
	КонецЕсли;
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

// Обработчик события ПередСохранениемЗначений формы.
//
Процедура ПередСохранениемЗначений(Отказ)
	
	СохраненныеНастройки = Новый Структура;
	
	СохраненныеНастройки.Вставить("ОбъектОтчета"                           , ОбъектОтчета);
	СохраненныеНастройки.Вставить("ИспользоватьСвойстваИКатегории"         , ИспользоватьСвойстваИКатегории);
	СохраненныеНастройки.Вставить("ОбрабатыватьПерсональныеВидыКИ"         , ОбрабатыватьПерсональныеВидыКИ);
	СохраненныеНастройки.Вставить("СтрокаПерсональныхВидовКИ"              , СтрокаПерсональныхВидовКИ);
	СохраненныеНастройки.Вставить("ИспользоватьРегистрПриЗаполненииВидовКИ", ИспользоватьРегистрПриЗаполненииВидовКИ);
	СохраненныеНастройки.Вставить("ВидыКонтактнойИнформации"               , ВидыКонтактнойИнформации.Выгрузить());
	СохраненныеНастройки.Вставить("НастройкиПостроителя"                   , ПостроительОтчета.ПолучитьНастройки());
	СохраненныеНастройки.Вставить("ПоказыватьЗаголовок"                    , ПоказыватьЗаголовок);
	СохраненныеНастройки.Вставить("РаскрашиватьГруппировки"                , РаскрашиватьГруппировки);
	
КонецПроцедуры

// Обработчик события ПослеВосстановленияЗначений формы.
//
Процедура ПослеВосстановленияЗначений()
	
	Перем ТаблицаНастроек;
	
	Если НЕ НеЗаполнятьНастройкиПриОткрытии Тогда
	
		Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
			
			СохраненныеНастройки.Свойство("ИспользоватьСвойстваИКатегории"         , ИспользоватьСвойстваИКатегории);
			СохраненныеНастройки.Свойство("ОбъектОтчета"                           , ОбъектОтчета);
			
			Если (ОбъектОтчета = ТипЗнч(Неопределено) ИЛИ ОбъектОтчета = Неопределено) И мСписокОбъектовОтчета.Количество() > 0 Тогда
				ОбъектОтчета = мСписокОбъектовОтчета[0].Значение;
			КонецЕсли;
	
			ЗаполнитьНачальныеНастройки();
			
			ПостроительОтчета.УстановитьНастройки(СохраненныеНастройки.НастройкиПостроителя);
			
			СохраненныеНастройки.Свойство("ПоказыватьЗаголовок"                    , ПоказыватьЗаголовок);
			СохраненныеНастройки.Свойство("РаскрашиватьГруппировки"                , РаскрашиватьГруппировки);
			СохраненныеНастройки.Свойство("ОбрабатыватьПерсональныеВидыКИ"         , ОбрабатыватьПерсональныеВидыКИ);
			СохраненныеНастройки.Свойство("СтрокаПерсональныхВидовКИ"              , СтрокаПерсональныхВидовКИ);
			СохраненныеНастройки.Свойство("ИспользоватьРегистрПриЗаполненииВидовКИ", ИспользоватьРегистрПриЗаполненииВидовКИ);
			СохраненныеНастройки.Свойство("ВидыКонтактнойИнформации"               , ТаблицаНастроек);
			ВидыКонтактнойИнформации.Загрузить(ТаблицаНастроек);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработчик события элемента КоманднаяПанельФормы.Сформировать.
//
Процедура КоманднаяПанельФормыСформировать(Кнопка)

	СформироватьОтчет(ЭлементыФормы.ПолеТабличногоДокумента);

КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.Сформировать.
//
Процедура КоманднаяПанельФормыНастройка(Кнопка)

	ОтветОтФормы = ОбработкаОбъект.ПолучитьФорму("ФормаНастройки", ЭтаФорма).ОткрытьМодально();

	Если ОтветОтФормы = Истина Тогда
		СформироватьОтчет(ЭлементыФормы.ПолеТабличногоДокумента);
	КонецЕсли; 

КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.Заголовок.
//
Процедура КоманднаяПанельФормыЗаголовок(Кнопка)

	ПоказыватьЗаголовок = НЕ ПоказыватьЗаголовок;
	ИзменитьВидимостьЗаголовка(ЭлементыФормы.ПолеТабличногоДокумента);
	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.Отбор.
//
Процедура КоманднаяПанельФормыОтбор(Кнопка)

	Если НЕ ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Нет;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриИзменении элемента формы ОбъектОтчета.
//
Процедура ОбъектОтчетаПриИзменении(Элемент)

	Если ОбъектОтчета = Неопределено Тогда
		ИспользоватьСвойстваИКатегории = Ложь;
	КонецЕсли;
	
	Если ИспользоватьСвойстваИКатегории Тогда
		Попытка
			СсылкаОбъекта = Новый (ОбъектОтчета);
			НайденныйПВХ = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов["Справочник_" + СсылкаОбъекта.Метаданные().Имя];
		Исключение
			ИспользоватьСвойстваИКатегории = Ложь;
		КонецПопытки;
	КонецЕсли; 

	// Запоминаем текущую настройку
	Настройки = ПостроительОтчета.ПолучитьНастройки(, , Истина, Истина);

	// Перезаполнение объекта (с новым текстом запроса)
	ЗаполнитьНачальныеНастройки();

	// Восстанавливаем запомненную настройку
	ПостроительОтчета.УстановитьНастройки(Настройки, Ложь, Ложь, Истина, Истина);

	СформироватьСписокВидовКИ();
	
	УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, мСтруктураСвязиЭлементовСДанными, "ОбработкаОбъект.ПостроительОтчета.Отбор");
	
	ЭлементыФормы.ФлажокНастройкиОбъект.Заголовок = ПостроительОтчета.Отбор.Объект.Представление;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеВидаСравненияОбъект.
//
Процедура ПолеВидаСравненияОбъектПриИзменении(Элемент)
	
	ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеНастройкиОбъект.
//
Процедура ПолеНастройкиОбъектПриИзменении(Элемент)
	
	ПолеНастройкиПриИзменении(Элемент, ПостроительОтчета.Отбор);
	
КонецПроцедуры

ЭлементыФормы.ОбъектОтчета.СписокВыбора = мСписокОбъектовОтчета;
