Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// отбор по подразделению менеджера
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
	//	
	//	//+++ 26.06.2013 - ограничение по подразделению
		Если НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "СтаршийМенеджерПодразделения") Тогда
			СообщитьОбОшибке("У вас недостаточно прав для просмотра данного отчета!");
			Возврат;
		КонецЕсли;
	//	
		Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ИспользоватьМеханизмДележкиДляГруппы") тогда 
			СписокМенеджеров = ПолучитьСписокПользователейСвоейГруппы();
			ОтборПоДоговоруКонтрагента=КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			//
			//
			ОтборПоДоговоруКонтрагента.Использование=Истина;
			ОтборПоДоговоруКонтрагента.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборПоДоговоруКонтрагента.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("ДоговорКонтрагентаОтветственноеЛицо");
			ОтборПоДоговоруКонтрагента.ПравоеЗначение=СписокМенеджеров;			
			
			СписокКонтр = ПолучитьСписокКонтрагентовМенеджера(СписокМенеджеров);
			ОтборПоПокупателю=КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ОтборПоПокупателю.Использование = Истина;
			ОтборПоПокупателю.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборПоПокупателю.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Покупатель");
			ОтборПоПокупателю.ПравоеЗначение = СписокКонтр;
			
		Иначе
			ДоступноеПодразделение = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
			ОтборПодразделение=КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборПодразделение.Использование=Истина;
			ОтборПодразделение.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
			ОтборПодразделение.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Подразделение");
			ОтборПодразделение.ПравоеЗначение=ДоступноеПодразделение;			
		КонецЕсли;	
	КонецЕсли;
	
	////// отбор для Серкова, 3 подразделения - 
	////СписокПодразделений = Новый Массив;
	//Екатеринбург = (Справочники.Подразделения.НайтиПоКоду("00138"));
	//РостовНаДону = (Справочники.Подразделения.НайтиПоКоду("00106"));
	//СпБ = (Справочники.Подразделения.НайтиПоКоду("00112"));
	//////
	//ПараметрПодразделение = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПодразделениятРостов");
	//ПараметрПодразделение.Значение = РостовНаДону;
	//ПараметрПодразделение.Использование = Истина;
	//
	//ПараметрПодразделение = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПодразделениятЕкатеринбург");
	//ПараметрПодразделение.Значение = Екатеринбург;
	//ПараметрПодразделение.Использование = Истина;
	//
	//ПараметрПодразделение = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПодразделениятСпБ");
	//ПараметрПодразделение.Значение = СпБ;
	//ПараметрПодразделение.Использование = Истина;
	//
	
	
	КомпоновщикМакет = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакет.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, , ДанныеРасшифровки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//ДокументРезультат.ПоказатьУровеньГруппировокСтрок(2); //Уровень 3
	//ДокументРезультат.ПоказатьУровеньГруппировокСтрок(1); //Уровень 2
	ДокументРезультат.ПоказатьУровеньГруппировокСтрок(0);   //Уровень 1
	
КонецПроцедуры