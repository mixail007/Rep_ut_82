
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события формы ПриОткрытии.
//
Процедура ПриОткрытии()
	
	Для а = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1 Цикл
		НоваяСтрока = СерииИТочкиДиаграммы.Добавить();
		НоваяСтрока.Имя           = ПостроительОтчета.ИзмеренияСтроки[а].Имя;
		НоваяСтрока.Представление = ПостроительОтчета.ИзмеренияСтроки[а].Представление;
	КонецЦикла; 
	
	ПредставлениеВалютыУпрУчета = Константы.ВалютаУправленческогоУчета.Получить().Наименование;
	Если ПризнакАнализаЗаказов = 0 ИЛИ ПризнакАнализаЗаказов = 1 Тогда
		НоваяСтрока = ПоказателиДиаграммы.Добавить();
		НоваяСтрока.Имя           = "ПоЗаказуПокупателя";
		НоваяСтрока.Представление = "Сумма закрытия заказов покупателей, в " + ПредставлениеВалютыУпрУчета;
	КонецЕсли; 
	Если ПризнакАнализаЗаказов = 0 ИЛИ ПризнакАнализаЗаказов = 2 Тогда
		НоваяСтрока = ПоказателиДиаграммы.Добавить();
		НоваяСтрока.Имя           = "ПоЗаказуПоставщику";
		НоваяСтрока.Представление = "Сумма закрытия заказов поставщиков, в " + ПредставлениеВалютыУпрУчета;
	КонецЕсли; 
	
	Если ПоказателиДиаграммы.Количество() > 0 Тогда
		ПоказателиДиаграммы[0].Использование = Истина;
	КонецЕсли; 
	
	Если СерииИТочкиДиаграммы.Количество() > 0 Тогда
		СерииИТочкиДиаграммы[0].ИспользованиеСерии = Истина;
		Если СерииИТочкиДиаграммы.Количество() > 1 Тогда
			СерииИТочкиДиаграммы[1].ИспользованиеТочки = Истина;
		Иначе
			СерииИТочкиДиаграммы[0].ИспользованиеТочки = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработчик события Нажатие элемента формы КнопкаСформировать.Нажатие.
//
Процедура КнопкаСформироватьНажатие(Элемент)
	
	ПроверкаУспешна = Истина;
	
	СтрокаСерий = СерииИТочкиДиаграммы.Найти(Истина, "ИспользованиеСерии");
	Если СтрокаСерий = Неопределено Тогда
		Сообщить("Не указаны данные серий диаграммы.");
		ПроверкаУспешна = Ложь;
	Иначе
		ИмяСерий = СтрокаСерий.Имя;
	КонецЕсли; 
	
	СтрокаТочек = СерииИТочкиДиаграммы.Найти(Истина, "ИспользованиеТочки");
	Если СтрокаТочек = Неопределено Тогда
		Сообщить("Не указаны данные точек диаграммы.");
		ПроверкаУспешна = Ложь;
	Иначе
		ИмяТочек = СтрокаТочек.Имя;
	КонецЕсли; 
	
	Если ИмяТочек = ИмяСерий Тогда
		Сообщить("Данные для серий и точек диаграммы должны быть различны.");
		ПроверкаУспешна = Ложь;
	КонецЕсли; 
	
	СтрокаПараметров = ПоказателиДиаграммы.Найти(Истина, "Использование");
	Если СтрокаПараметров = Неопределено Тогда
		Сообщить("Не указан показатель диаграммы.");
		ПроверкаУспешна = Ложь;
	Иначе
		ИмяПараметра           = СтрокаПараметров.Имя;
		ПредставлениеПараметра = СтрокаПараметров.Представление;
	КонецЕсли; 
	
	Если НЕ ПроверкаУспешна Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Объект");

	СписокСерий = Новый СписокЗначений;
	СтрокиДереваСерий = мДеревоДиаграммы.Строки.НайтиСтроки(Новый Структура("ИмяГруппировки", ИмяСерий), Истина);
	Для каждого СтрокаДереваСерий Из СтрокиДереваСерий Цикл
		Если СписокСерий.НайтиПоЗначению(СтрокаДереваСерий.Группировка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		СписокСерий.Добавить(СтрокаДереваСерий.Группировка);
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Объект = СтрокаДереваСерий.Группировка;
	КонецЦикла; 
	
	СписокТочек = Новый СписокЗначений;
	СтрокиДереваТочек = мДеревоДиаграммы.Строки.НайтиСтроки(Новый Структура("ИмяГруппировки", ИмяТочек), Истина);
	Для каждого СтрокаДереваТочек Из СтрокиДереваТочек Цикл
		Если СписокТочек.НайтиПоЗначению(СтрокаДереваТочек.Группировка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		НовыйЭлементСписка = СписокТочек.Добавить(СтрокаДереваТочек.Группировка);
		НоваяКолонка = ТаблицаДанных.Колонки.Добавить(("_" + Строка(СписокТочек.Индекс(НовыйЭлементСписка))), ПолучитьОписаниеТиповЧисла(15,3), ?(ЗначениеНеЗаполнено(СтрокаДереваТочек.Группировка), "<...>", Строка(СтрокаДереваТочек.Группировка)));
	КонецЦикла;
	
	ИндексСерий = ПостроительОтчета.ИзмеренияСтроки.Индекс(ПостроительОтчета.ИзмеренияСтроки.Найти(ИмяСерий));
	ИндексТочек = ПостроительОтчета.ИзмеренияСтроки.Индекс(ПостроительОтчета.ИзмеренияСтроки.Найти(ИмяТочек));
	
	Если ИндексСерий < ИндексТочек Тогда
		
		ТаблицаЗначенийТочек = Новый ТаблицаЗначений;
		ТаблицаЗначенийТочек.Колонки.Добавить("Точка");
		ТаблицаЗначенийТочек.Колонки.Добавить("ИндексТочки");
		ТаблицаЗначенийТочек.Колонки.Добавить("Значение", ПолучитьОписаниеТиповЧисла(15,3));
		
		Для каждого ЭлементСпискаСерий Из СписокСерий Цикл
		
			СтрокиСерии = мДеревоДиаграммы.Строки.НайтиСтроки(Новый Структура("ИмяГруппировки, Группировка", ИмяСерий, ЭлементСпискаСерий.Значение), Истина);
			
			ТаблицаЗначенийТочек.Очистить();
			
			Для каждого СтрокаСерии Из СтрокиСерии Цикл
			
				Для каждого ЭлементСпискаТочек Из СписокТочек Цикл
				
					СтрокиТочек = СтрокаСерии.Строки.НайтиСтроки(Новый Структура("ИмяГруппировки, Группировка", ИмяТочек, ЭлементСпискаТочек.Значение), Истина);
					
					Для каждого СтрокаТочек Из СтрокиТочек Цикл
					
						СтрокаВТаблицеТочек = ТаблицаЗначенийТочек.Найти(СтрокаТочек.Группировка, "Точка");
						Если СтрокаВТаблицеТочек = Неопределено Тогда
							СтрокаВТаблицеТочек = ТаблицаЗначенийТочек.Добавить();
							СтрокаВТаблицеТочек.Точка = СтрокаТочек.Группировка;
							СтрокаВТаблицеТочек.ИндексТочки = СписокТочек.Индекс(ЭлементСпискаТочек);
						КонецЕсли;
						
						СтрокаВТаблицеТочек.Значение = СтрокаВТаблицеТочек.Значение + СтрокаТочек[ИмяПараметра];
					
					КонецЦикла; 
				
				КонецЦикла; 
			
			КонецЦикла;
			
			Если ТаблицаЗначенийТочек.Количество() > 0 Тогда
			
				СтрокаСерии = ТаблицаДанных.Найти(ЭлементСпискаСерий.Значение, "Объект");
				
				Для каждого СтрокаТаблицы Из ТаблицаЗначенийТочек Цикл
					СтрокаСерии["_" + Строка(СтрокаТаблицы.ИндексТочки)] = СтрокаСерии["_" + Строка(СтрокаТаблицы.ИндексТочки)] + СтрокаТаблицы.Значение;
				КонецЦикла; 
			
			КонецЕсли; 
			
		КонецЦикла; 
		
	Иначе
		
		ТаблицаЗначенийСерий = Новый ТаблицаЗначений;
		ТаблицаЗначенийСерий.Колонки.Добавить("Серия");
		ТаблицаЗначенийСерий.Колонки.Добавить("ИндексСерии");
		ТаблицаЗначенийСерий.Колонки.Добавить("Значение", ПолучитьОписаниеТиповЧисла(15,3));
		
		Для каждого ЭлементСпискаТочек Из СписокТочек Цикл
		
			ТаблицаЗначенийСерий.Очистить();
		
			СтрокиТочек = мДеревоДиаграммы.Строки.НайтиСтроки(Новый Структура("ИмяГруппировки, Группировка", ИмяТочек, ЭлементСпискаТочек.Значение), Истина);
			
			Для каждого СтрокаТочек Из СтрокиТочек Цикл
			
				Для каждого ЭлементСпискаСерий Из СписокСерий Цикл
				
					СтрокиСерий = СтрокаТочек.Строки.НайтиСтроки(Новый Структура("ИмяГруппировки, Группировка", ИмяСерий, ЭлементСпискаСерий.Значение), Истина);
					
					Для каждого СтрокаСерий Из СтрокиСерий Цикл
					
						СтрокаВТаблицеСерий = ТаблицаЗначенийСерий.Найти(СтрокаСерий.Группировка, "Серия");
						Если СтрокаВТаблицеСерий = Неопределено Тогда
							СтрокаВТаблицеСерий = ТаблицаЗначенийСерий.Добавить();
							СтрокаВТаблицеСерий.Серия = СтрокаСерий.Группировка;
							СтрокаВТаблицеСерий.ИндексСерии = ТаблицаДанных.Индекс(ТаблицаДанных.Найти(СтрокаСерий.Группировка, "Объект"));
						КонецЕсли;
						
						СтрокаВТаблицеСерий.Значение = СтрокаВТаблицеСерий.Значение + СтрокаСерий[ИмяПараметра];
					
					КонецЦикла; 
				
				КонецЦикла; 
			
			КонецЦикла; 
		
			Если ТаблицаЗначенийСерий.Количество() > 0 Тогда
			
				Для каждого СтрокаТаблицы Из ТаблицаЗначенийСерий Цикл
					ТаблицаДанных[СтрокаТаблицы.ИндексСерии]["_" + Строка(СписокТочек.Индекс(ЭлементСпискаТочек))] = ТаблицаДанных[СтрокаТаблицы.ИндексСерии]["_" + Строка(СписокТочек.Индекс(ЭлементСпискаТочек))] + СтрокаТаблицы.Значение;
				КонецЦикла; 
			
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Для каждого СтрокаДанных Из ТаблицаДанных Цикл
		Если ЗначениеНеЗаполнено(СтрокаДанных.Объект) Тогда
			СтрокаДанных.Объект = "<...>";
		КонецЕсли; 
	КонецЦикла; 
	
	ОтчетДиаграмма = Отчеты.Диаграмма.Создать();
	ОтчетДиаграмма.ТаблицаИсходныхДанных = ТаблицаДанных;
	
	ОтчетДиаграмма.ИмяДиаграммы = "Анализ причин закрытия заказов, " + СформироватьСтрокуПериода() + ", " + ПредставлениеПараметра;
	ОтчетДиаграмма.НастройкиДиаграммы = НастройкиДиаграммы;
	
	ФормаОтчета = ОтчетДиаграмма.ПолучитьФорму(, Этаформа.ВладелецФормы);
	
	ОтчетДиаграмма.ПостроитьДиаграмму(ФормаОтчета.ЭлементыФормы.Диаграмма);
	
	ЭтаФорма.Закрыть();
	
	ФормаОтчета.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПередНачаломДобавления элемента формы СерииИТочкиДиаграммы.
//
Процедура СерииИТочкиДиаграммыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы СерииИТочкиДиаграммы.
//
Процедура СерииИТочкиДиаграммыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы ПоказателиДиаграммы.
//
Процедура ПоказателиДиаграммыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы ПоказателиДиаграммы.
//
Процедура ПоказателиДиаграммыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента формы СерииИТочкиДиаграммы.
//
Процедура СерииИТочкиДиаграммыПриИзмененииФлажка(Элемент, Колонка)
	
	Для каждого СтрокаТаблицы Из Элемент.Значение Цикл
		Если СтрокаТаблицы <> Элемент.ТекущаяСтрока Тогда
			СтрокаТаблицы[Колонка.Имя] = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента формы ПоказателиДиаграммы.
//
Процедура ПоказателиДиаграммыПриИзмененииФлажка(Элемент, Колонка)
	
	Для каждого СтрокаТаблицы Из Элемент.Значение Цикл
		Если СтрокаТаблицы <> Элемент.ТекущаяСтрока Тогда
			СтрокаТаблицы[Колонка.Имя] = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

СерииИТочкиДиаграммы.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
ПоказателиДиаграммы.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));