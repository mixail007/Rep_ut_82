////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мФормаНастройкиПараметров; // Форма настройки параметров показателей
Перем мФормаПодбораПоказателей;  // Форма выбора показателей
Перем мФормаВыбораПоказателей;   // Форма выбора показателей для добавления

Перем мТекущееВремя; // Значение времени при начале редактирования

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует строковое представление адресов эл.почты
//
Функция АдресСтрокой(Таблица)
	Перем Стр;

	Стр = "";
	Для Каждого Адрес Из Таблица Цикл
		Стр = Стр + ?(ПустаяСтрока(Стр),"",";") + Адрес.Адрес;
	КонецЦикла;

	Возврат Стр;
	
КонецФункции // АдресСтрокой()

// Процедура восстановления порядка следования показателей
//
Процедура ВосстановитьПорядокСледованияПоказателей()
	
	Таблица = Неопределено;
	мСтруктураСохраненныеНастройки.Свойство("_ПорядокПоказателей", Таблица);
	Если Не Таблица = Неопределено Тогда
		Поз = 0;
		Для Каждого Строка Из Таблица Цикл
			Элем = ТаблицаПоказателей.Найти(Строка.Показатель, "Показатель");
			Если Элем = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Номер = ТаблицаПоказателей.Индекс(Элем);
			Если Номер = -1 тогда
				Продолжить;
			КонецЕсли;
			Сдвиг = - (Номер - Поз);
			Если Номер - Сдвиг + 1 >= 0 И Номер - Сдвиг + 1 < ТаблицаПоказателей.Количество() Тогда
				ТаблицаПоказателей.Сдвинуть(Элем, Сдвиг);
			КонецЕсли;
			Поз = Поз + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьПорядокСледованияПоказателей()

Функция ОткрытьФормуВыбора()
	
	Форма = ПолучитьФорму("ФормаВыбора", ЭтаФорма);
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция выбора не завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	// Передача параметров в форму
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	
	Возврат Форма;
	
КонецФункции // ОткрытьФормуВыбора()

// Процедура пересчета даты
//
Процедура ПересчетДаты()
	
	ДатаКон = ТекДата;
	
	Дней = ЧислоДнейДоТекущейДаты;
	Если УчитыватьВыходные Тогда
		Если ДеньНедели(ДатаКон) > 5 Тогда
			Дней = Дней + 1;
		КонецЕсли;
		Пока Дней > 0 Цикл
			ДатаКон = ДатаКон - 3600 * 24;
			Если ДеньНедели(ДатаКон) < 6 Тогда
				Дней = Дней - 1;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДатаКон = ДатаКон - 3600 * 24 * Дней;
	КонецЕсли;

	мТекущаяДата = ТекДата;
	
	ЭлементыФормы.НадписьДатаОтчета.Значение = Формат(ДатаКон, "ДЛФ=DD");
	
КонецПроцедуры // ПересчетДаты()

// Процедура открывает формы настроек показателя
//
Процедура ОткрытьФормуНастроек()
    Перем Форма;

	Если ЭлементыФормы.ТабличноеПолеПоказателей.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("НастройкаПараметров", ЭтаФорма);
	
	Если Форма.Открыта() Тогда
		
		ОповеститьОбАктивизацииОбъекта(ЭлементыФормы.ТабличноеПолеПоказателей.ТекущаяСтрока.Показатель);
		
	Иначе
		
		// Передача параметров в форму
		Форма.НачальноеЗначениеВыбора = ЭлементыФормы.ТабличноеПолеПоказателей.ТекущаяСтрока.Показатель;
		Форма.РежимВыбора = Истина;
		Форма.Открыть();
		мФормаНастройкиПараметров= Форма;
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуНастроек()

// Процедура сохраняет пометки дерева показателей
//
Процедура СохранитьПометкиДереваЗначений( Дерево, СтруктураПометка);
	Для Каждого Строка Из Дерево.Строки Цикл
		СтруктураПометка.Вставить(Строка.Показатель, Строка.Пометка);
		СохранитьПометкиДереваЗначений( Строка, СтруктураПометка);
	КонецЦикла;
КонецПроцедуры // СохранитьПометкиДереваЗначений()

// Процедура обновляет текст надписей
//
Процедура ОбновитьНадписи()
	//ДатаКон = ТекДата - ЭлементыФормы.ПолеВыбораЧислоДней.Значение * 3600 * 24;
	ЭлементыФормы.НадписьДатаОтчета.Значение = Формат( ДатаКон, "ДЛФ=DD");
КонецПроцедуры // ОбновитьНадписи()

// Процедура устанавливает доступность элементов формы
//
Процедура ДоступностьЭлементовФормы()
	
	ЭлементыФормы.ПолеВводаКаталог.Доступность = ФормироватьВФайл;
	
	ЭлементыФормы.ПолеВводаАдресаЭлПочты.Доступность = ФормироватьВПочту;
	ЭлементыФормы.ПолеВводаИнтервалАвтообновления.Доступность = ИспользоватьАвтообновление;
	
	ЭлементыФормы.АдресЭлектроннойПочтыУчетнойЗаписи.Доступность = (ФормироватьВПочту И Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить());
	
	Флаг = ФормироватьВФайл Или ФормироватьВПочту;
	ЭлементыФормы.КоманднаяПанельВремяПубликации.Доступность = Флаг;
	ЭлементыФормы.ТабличноеПолеВремяПубликации  .Доступность = Флаг;
	
КонецПроцедуры // ДоступностьЭлементовФормы()

// Процедура добавляет показатели в таблицу значений из дерева показателей
//
Процедура ОбходДереваПоказателей(Дерево)
	Для Каждого Строка Из Дерево.Строки Цикл
		Если Строка.Строки.Количество() = 0 Тогда
			Если Строка.Пометка = 1 Тогда
				НоваяСтрока = ТаблицаПоказателей.Добавить();
				НоваяСтрока.Показатель = Строка.Показатель;
				НоваяСтрока.ПредставлениеПоказателя = Строка.ПредставлениеПоказателя;
			КонецЕсли;
		Иначе
			ОбходДереваПоказателей(Строка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ОбходДереваПоказателей()

// Процедура сохранения настройки при закрытии формы
//
Процедура СохранитьДанные()
    Перем СтруктураПометки;
	
    // Сохранить время публикаций
	СписокВремениПубликации = Новый СписокЗначений;
	Для Каждого Строка Из ВремяПубликаций Цикл
		СписокВремениПубликации.Добавить(Строка.Время);
	КонецЦикла;
	ХранЗнач = Новый ХранилищеЗначения(СписокВремениПубликации.Скопировать());
	//Константы.РапортРуководителюВремяАвтопубликации.Установить(ХранЗнач);

	// Сохраним данные формы
	СтруктПарам = Новый Структура;
	СтруктПарам.Вставить("ВидОтчета",           ВидОтчета);
	СтруктПарам.Вставить("ФормироватьВФайл",    ФормироватьВФайл);
	СтруктПарам.Вставить("КаталогФормирования", КаталогФормирования);
	СтруктПарам.Вставить("ФормироватьВПочту",   ФормироватьВПочту);
	СтруктПарам.Вставить("АдресаЭлПочты",               АдресаЭлПочты);
	СтруктПарам.Вставить("ИспользоватьАвтообновление",  ИспользоватьАвтообновление);
	СтруктПарам.Вставить("ИнтервалАвтообновления",      ИнтервалАвтообновления);
	СтруктПарам.Вставить("УчитыватьВыходные",           УчитыватьВыходные);
	СтруктПарам.Вставить("ЧислоДнейДоТекущейДаты",      ЧислоДнейДоТекущейДаты);
	СтруктПарам.Вставить("ФормироватьПриСтартеСистемы", ФормироватьПриСтартеСистемы);
	СтруктПарам.Вставить("АдресЭлектроннойПочтыУчетнойЗаписи", АдресЭлектроннойПочтыУчетнойЗаписи);
	
	мСтруктураСохраненныеНастройки.Вставить("_ДанныеФормы", СтруктПарам);
	мСтруктураСохраненныеНастройки.Вставить("_ПорядокПоказателей", ТаблицаПоказателей);
	
	// Сохранение настроек
	СтруктПарам = Новый Структура;
	СохранитьПометкиДереваЗначений( ДеревоПоказателей, СтруктПарам);
	
	мСтруктураСохраненныеНастройки.Вставить("_Пометки", СтруктПарам);
	
	Для Каждого Строка Из СтруктураПараметровПоказателей Цикл
		мСтруктураСохраненныеНастройки.Вставить(Строка.Ключ, Строка.Значение);
	КонецЦикла;

	мСтруктураСохраненныеНастройки.Вставить("_НомерРелизаОтчета", мНомерРелизаПараметровНастройки);
	СохранитьЗначение("ОбработкаРапортРуководителю_Настройки", мСтруктураСохраненныеНастройки);

КонецПроцедуры // СохранитьДанные()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события при закрытии формы
//
Процедура ПриЗакрытии()
	
	СохранитьДанные();

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события при открытии формы
//
Процедура ПриОткрытии()

    // Заполнить таблицу ВремяПубликации рапорта руководителю
	СписокВремениПубликации = ПолучитьИзКонстанты();
	Для Каждого Время Из СписокВремениПубликации Цикл
		НоваяСтрока = ВремяПубликаций.Добавить();
		НоваяСтрока.Время = Время.Значение;
	КонецЦикла;
	
	// Заполнить таблицу показателей
	ТаблицаПоказателей.Очистить();
	ОбходДереваПоказателей(ДеревоПоказателей);
	
	// Восстановим порядок следования показателей
	ВосстановитьПорядокСледованияПоказателей();
	
	Если ТаблицаПоказателей.Количество() > 0 Тогда
		ЭлементыФормы.ТабличноеПолеПоказателей.ТекущаяСтрока = ТаблицаПоказателей[0];
	КонецЕсли;
	
	// Инициализация списка ПолеВыбораВидОтчета
	ЭлементыФормы.ПолеВыбораВидОтчета.СписокВыбора = Новый СписокЗначений;
	ЭлементыФормы.ПолеВыбораВидОтчета.СписокВыбора.Добавить("Таблица");
	ЭлементыФормы.ПолеВыбораВидОтчета.СписокВыбора.Добавить("HTML");
	ЭлементыФормы.ПолеВыбораВидОтчета.Значение = ВидОтчета;

	// Инициализация списка ПолеВыбораЧислоДней
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора = Новый СписокЗначений;
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(0, "По текущую дату");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(1, "1 день");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(2, "2 дня");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(3, "3 дня");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(4, "4 дня");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(5, "5 дней");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(6, "6 дней");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(7, "7 дней");
	ЭлементыФормы.ПолеВыбораЧислоДней.Значение = ЧислоДнейДоТекущейДаты;

	ТекДата = мТекущаяДата;

    АдресаЭлПочтыСтр = АдресСтрокой(АдресаЭлПочты);
	
	ОбновитьНадписи();
	ДоступностьЭлементовФормы();

	Если ПустаяСтрока(КаталогФормирования) Тогда
		КаталогФормирования = "<Не выбран каталог>";
	КонецЕсли;
	Если ПустаяСтрока(АдресаЭлПочтыСтр) Тогда
		АдресаЭлПочтыСтр = "<Не выбраны адресаты>";
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ОбработкаВыбора
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если Источник = мФормаПодбораПоказателей Тогда
		
		ТаблицаПоказателей.Очистить();
		ОбходДереваПоказателей(ДеревоПоказателей);

		ВосстановитьПорядокСледованияПоказателей();
		
	ИначеЕсли Источник = мФормаВыбораПоказателей Тогда
		
		Для каждого ЭлементМассива Из ЗначениеВыбора Цикл
		
			Строка = ТаблицаПоказателей.Найти(ЭлементМассива.Показатель, "Показатель");
			
			Если Строка = Неопределено Тогда
				Строка = ТаблицаПоказателей.Добавить();
				СтрокаДерева = ДеревоПоказателей.Строки.Найти(ЭлементМассива.Показатель, "Показатель", Истина);
				СтрокаДерева.Пометка = Истина;
				Строка.Показатель = ЭлементМассива.Показатель;
				Строка.ПредставлениеПоказателя = ЭлементМассива.ПредставлениеПоказателя;
			КонецЕсли;
		
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события при активизации строки
//
Процедура ТабличноеПолеПоказателейПриАктивизацииСтроки(Элемент)

	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		ОповеститьОбАктивизацииОбъекта("");
	Иначе
		Строка = ДеревоПоказателей.Строки.Найти(
			Элемент.ТекущаяСтрока.Показатель,
			"Показатель",
			Истина);
	    СтрокаПояснение = Строка.Пояснение;
		ОповеститьОбАктивизацииОбъекта(Строка.Показатель);
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеПоказателейПриАктивизацииСтроки()

// Процедура - обработчик события нажатие кнопки командно панели
//
Процедура КоманднаяПанель1Параметры(Кнопка)
	ОткрытьФормуНастроек()
КонецПроцедуры // КоманднаяПанель1Параметры()

// Процедура - обработчик события выбор
//
Процедура ТабличноеПолеПоказателейВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ОткрытьФормуНастроек();
КонецПроцедуры // ТабличноеПолеПоказателейВыбор()

// Процедура - обработчик события начало выбора
//
Процедура ПолеВводаКаталогНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ВыборКаталога.Заголовок = "Укажите каталог для сохранения файлов рапорта...";
	ВыборКаталога.Каталог = КаталогФормирования; // В качестве начального значения
	
	Если ВыборКаталога.Выбрать() Тогда
		КаталогФормирования = ВыборКаталога.Каталог;
		Если ПустаяСтрока(КаталогФормирования) Тогда
			КаталогФормирования = "<Не выбран каталог>";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолеВводаКаталогНачалоВыбора()

// Процедура - обработчик события ПриИзменении
//
Процедура ФлажокАвтообновлениеПриИзменении(Элемент)
	ДоступностьЭлементовФормы();
КонецПроцедуры // ФлажокАвтообновлениеПриИзменении()

// Процедура - обработчик события ПриИзменении
//
Процедура ФлажокФормироватьВПочтуПриИзменении(Элемент)
	ДоступностьЭлементовФормы();
КонецПроцедуры // ФлажокФормироватьВПочтуПриИзменении()

// Процедура - обработчик события ПриИзменении
//
Процедура ФлажокФормироватьВФайлПриИзменении(Элемент)
	ДоступностьЭлементовФормы();
КонецПроцедуры // ФлажокФормироватьВФайлПриИзменении()

// Процедура - обработчик события ПриИзменении
//
Процедура ПолеВводаТекДатаПриИзменении(Элемент)
	ПересчетДаты();
КонецПроцедуры // ПолеВводаТекДатаПриИзменении()

// Процедура - обработчик события ПриИзменении
//
Процедура ПолеВыбораЧислоДнейПриИзменении(Элемент)
	ПересчетДаты();
КонецПроцедуры // ПолеВыбораЧислоДнейПриИзменении()

// Процедура - обработчик события ПриИзменении
//
Процедура ФлажокУчитыватьВыходныеПриИзменении(Элемент)
	ПересчетДаты();
КонецПроцедуры // ФлажокУчитыватьВыходныеПриИзменении()

// Процедура - обработчик события нажатия кнопки выбора показателей
//
Процедура КоманднаяПанельСпискаПоказателейВыбор(Кнопка)
    Перем Форма;

	Форма = ПолучитьФорму("ФормаВыбора", ЭтаФорма);
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция выбора не завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	// Передача параметров в форму
	Форма.Открыть();
	мФормаПодбораПоказателей = Форма;
	
КонецПроцедуры // КоманднаяПанельСпискаПоказателейВыбор()

// Процедура - обработчик события ПередНачаломДобавления
//
Процедура ТабличноеПолеПоказателейПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
	Форма = ОткрытьФормуВыбора();
	Если Форма <> Неопределено Тогда
		мФормаВыбораПоказателей = Форма;
	КонецЕсли;
КонецПроцедуры // ТабличноеПолеПоказателейПередНачаломДобавления()

// Процедура - обработчик события ПередУдалением
//
Процедура ТабличноеПолеПоказателейПередУдалением(Элемент, Отказ)

	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Отказ = Истина;
	Иначе
		Строка = ДеревоПоказателей.Строки.Найти(Элемент.ТекущаяСтрока.Показатель, "Показатель", Истина);
		Если Не Строка = Неопределено Тогда
			Строка.Пометка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТабличноеПолеПоказателейПередУдалением()

// Процедура - обработчик события нажатие кнопки ОК
//
Процедура КоманднаяПанельОК(Кнопка)
	
	СохранитьДанные();
	ОповеститьОВыборе(Истина);
	
КонецПроцедуры // КоманднаяПанельОК()

// Процедура - обработчик события НачалоВыбора поля ввода адерса эл.почты
//
Процедура ПолеВводаАдресаЭлПочтыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Перем Форма;

	СтандартнаяОбработка = Ложь;
	
	АдрКнига = Обработки.АдреснаяКнига.Создать();
	
	Для каждого СтрокаТаблицы Из АдресаЭлПочты Цикл
		НоваяСтрока = АдрКнига.Кому.Добавить();
		НоваяСтрока.Объект                = СтрокаТаблицы.Адресат;
		НоваяСтрока.АдресЭлектроннойПочты = СтрокаТаблицы.Адрес;
		НоваяСтрока.ПредставлениеОбъекта  = СокрЛП(СтрокаТаблицы.Адресат);
	КонецЦикла;
	
	ФормаАдрКниги = АдрКнига.ПолучитьФорму("ФормаПодбора");
	ФормаАдрКниги.ЭлементыФормы.ПанельКому.ТекущаяСтраница = ФормаАдрКниги.ЭлементыФормы.ПанельКому.Страницы.Кому;
	ФормаАдрКниги.ЭлементыФормы.ПанельКому.Страницы.Копии.Видимость        = Ложь;
	ФормаАдрКниги.ЭлементыФормы.ПанельКому.Страницы.СкрытыеКопии.Видимость = Ложь;
	ОткликФормы = ФормаАдрКниги.ОткрытьМодально();
	
	Если ТипЗнч(ОткликФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	АдресаЭлПочты.Очистить();
	Для каждого СтрокаТаблицы Из ОткликФормы.Кому Цикл
		
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.АдресЭлектроннойПочты) Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = АдресаЭлПочты.Добавить();
		НоваяСтрока.Адрес   = СтрокаТаблицы.АдресЭлектроннойПочты;
		НоваяСтрока.Адресат = СтрокаТаблицы.Объект;
	
	КонецЦикла; 
	
	АдресаЭлПочтыСтр = АдресСтрокой(АдресаЭлПочты.Скопировать());

КонецПроцедуры // ПолеВводаАдресаЭлПочтыНачалоВыбора()

// Процедура - обработчик события Очистка
//
Процедура ПолеВводаАдресаЭлПочтыОчистка(Элемент, СтандартнаяОбработка)
	
	АдресаЭлПочтыСтр = "<Не выбраны адресаты>";
	АдресаЭлПочты.Очистить();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВводаАдресаЭлПочтыОчистка()

// Процедура - обработчик события ПередОкончаниемРедактирования
//
Процедура ТабличноеПолеВремяПубликацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования
	      И ЗначениеНеЗаполнено(Элемент.ТекущаяСтрока.Время) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры // ТабличноеПолеВремяПубликацииПередОкончаниемРедактирования()

// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля ТабличноеПолеВремяПубликации
//
Процедура ТабличноеПолеВремяПубликацииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Время.Текст = Формат(ДанныеСтроки.Время, "ДФ=ЧЧ:мм");
КонецПроцедуры // ТабличноеПолеВремяПубликацииПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля ТабличноеПолеВремяПубликации
//
Процедура ТабличноеПолеВремяПубликацииПриНачалеРедактирования(Элемент, НоваяСтрока)
	мТекущееВремя = Элемент.ТекущаяСтрока.Время;
КонецПроцедуры // ТабличноеПолеВремяПубликацииПриНачалеРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля ТабличноеПолеВремяПубликации
//
Процедура ТабличноеПолеВремяПубликацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не Элемент.ТекущаяСтрока = Неопределено
		  И ЗначениеНеЗаполнено(Элемент.ТекущаяСтрока.Время) Тогда
		Элемент.ТекущаяСтрока.Время = мТекущееВремя;
	КонецЕсли;
КонецПроцедуры // ТабличноеПолеВремяПубликацииПриОкончанииРедактирования()

// Процедура - обработчик события "Очистика" поля ввода ПолеВводаКаталог
//
Процедура ПолеВводаКаталогОчистка(Элемент, СтандартнаяОбработка)
	
	КаталогФормирования  = "<Не выбран каталог>";
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВводаКаталогОчистка()

Процедура АдресЭлектроннойПочтыУчетнойЗаписиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура АдресЭлектроннойПочтыУчетнойЗаписиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = ПолучитьДоступныеУчетныеЗаписи(глТекущийПользователь).Отправка;
	
КонецПроцедуры

Процедура АдресЭлектроннойПочтыУчетнойЗаписиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		Элемент.Значение = ВыбранноеЗначение.АдресЭлектроннойПочты;
	КонецЕсли; 
	
КонецПроцедуры
