
// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка       - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров - структура параметров, необходимых для вывода строки
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиСтроку(Выборка, СтруктураПараметров, Номер)

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировки   = СтруктураПараметров.ЗначениеГруппировки;
	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;
	ЗначениеГруппировки = "";
	ЗначениеРасшифровки = Неопределено;
	ИмяГруппировки  = Выборка.Группировка();
	ТипЗаписиВыборки = Выборка.ТипЗаписи();
	СтруктураДанныхТекущегоЗаказа= Новый Структура;

	ТабДок = СтруктураПараметров.ТабДок;

	Если НЕ СтруктураПараметров.Свойство("СтруктураДанныхТекущегоЗаказа",СтруктураДанныхТекущегоЗаказа) Тогда 
		// Выборка из запроса по номенклатуре. 
		
		ЗначениеГруппировки = "";

		ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];
		Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
			Если ИмяГруппировки = "ХарактеристикаНоменклатуры" Тогда
				Если  Выборка["НоменклатураВестиУчетПоХарактеристикам"] = Истина Тогда
					ЗначениеТекущейГруппировки = "Характеристика не задана";
				Иначе

					// Если учета характеристик нет, то не выводим группировку вообще
					Возврат;
				КонецЕсли;
			Иначе
				ЗначениеТекущейГруппировки = "<...>";
			КонецЕсли;
		КонецЕсли;

		ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;
		Если ИмяГруппировки = "Номенклатура" Тогда
			ЗначениеГруппировки = ЗначениеГруппировки +", " + Выборка["ЕдиницаХраненияОстатков"];
			ОбластьЗначениеГруппировки.Параметры.Код = Выборка.Номенклатура.Код;
		КонецЕсли;
		ЗначениеРасшифровки = Выборка[ИмяГруппировки];

	Иначе
        // Выборка из запроса по взаиморасчетам.
		Если (СтруктураПараметров.НомерОбхода=1) И (ТипЗаписиВыборки = ТипЗаписиЗапроса.ОбщийИтог) Тогда 
			ЗначениеГруппировки="Всего"; // Первый обход запроса по взаиморасчетам: записываются значения итогов.
		ИначеЕсли (СтруктураПараметров.НомерОбхода=1) И (СокрЛП("" + Выборка[ИмяГруппировки])=СокрЛП(""+Заказ)) Тогда
			ЗначениеГруппировки="Текущий заказ"; 	// Первый обход запроса по взаиморасчетам: выводятся
													// данные по текущему заказу.
		ИначеЕсли (СтруктураПараметров.НомерОбхода=2) И (ТипЗаписиВыборки = ТипЗаписиЗапроса.ОбщийИтог) Тогда 
			ЗначениеГруппировки="Другие заказы по договору"; 	// Второй обход запроса по взаиморасчетам:
																// выводится итоговая строка по другим заказам.
		ИначеЕсли (СтруктураПараметров.НомерОбхода=2) И (СокрЛП("" + Выборка[ИмяГруппировки])<>СокрЛП(""+Заказ)) Тогда 
            // Второй обход запроса по взаиморасчетам: выводятся данные по другим заказам.
			ЗначениеГруппировки= "" + Выборка[ИмяГруппировки];
			ЗначениеРасшифровки = Выборка[ИмяГруппировки];
		Иначе 
            // Второй обход запроса по взаиморасчетам: пропускаем текущий заказ.
			Возврат 
		КонецЕсли;

	КонецЕсли;
	
	Если ЗначениеГруппировки<>"Всего" Тогда  // При первом обходе запроса по взаиморасчетам итоговая строка не выводится.

		Если (ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке) И (ЗначениеГруппировки<>"Текущий заказ") Тогда
			СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[ИмяГруппировки];
		ИначеЕсли (ТипЗаписиВыборки=ТипЗаписиЗапроса.ОбщийИтог) ИЛИ (ЗначениеГруппировки="Текущий заказ") Тогда
			СдвигУровня=0;
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьОбщийОтступ, СдвигУровня);

		ОбластьЗначениеГруппировки.Параметры.ЗначениеГруппировки = СокрЛП(ЗначениеГруппировки);
        ОбластьЗначениеГруппировки.Параметры.Расшифровка = ЗначениеРасшифровки;

		ОбластьЗначениеГруппировки.Область().Отступ = СдвигУровня;
		
		ТабДок.Присоединить(ОбластьЗначениеГруппировки);

	КонецЕсли;

	Если НЕ СтруктураПараметров.Свойство("СтруктураДанныхТекущегоЗаказа",СтруктураДанныхТекущегоЗаказа) Тогда 
		// Выборка из запроса по номенклатуре. 

		Если ИмяГруппировки<>"ТоварТара" Тогда

			ФорматПоказателя = "ЧЦ = 15 ; ЧДЦ = 3 ; ЧН = ""0,000""";

			Если СтруктураПараметров.ТипЗаказа = "Покупателя" Тогда
				Заказать = Макс(?( Выборка["ОсталосьОтгрузить"] = NULL, 0, Выборка["ОсталосьОтгрузить"])- ?( Выборка["Заказано"]          = NULL, 0, Выборка["Заказано"]));
				//			  - ?( Выборка["Резерв"]            = NULL, 0, Выборка["Резерв"])
							  
				//			  - ?( Выборка["СвободныйОстаток"]  = NULL, 0, Выборка["СвободныйОстаток"]), 0);
				ЗначениеЗаказано			= Формат(?(Выборка["Заказано"]=NULL,0,
															Выборка["Заказано"]), ФорматПоказателя);
				//ЗначениеСвободныйОстаток	= Формат(?(Выборка["СвободныйОстаток"]=NULL,0,
				//											Выборка["СвободныйОстаток"]), ФорматПоказателя);
														
				СсылкаНоменклатура = Выборка[ИмяГруппировки];
				Если ТипЗнч(СсылкаНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если СсылкаНоменклатура.Услуга Тогда
						Заказать = 0;
					КонецЕсли;
				КонецЕсли;

			Иначе
				Заказать = "";
				СвободныйОстаток = Выборка["ОсталосьОтгрузить"] - Выборка["Резерв"];
				
				СсылкаНоменклатура = Выборка[ИмяГруппировки];
				Если ТипЗнч(СсылкаНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если СсылкаНоменклатура.Услуга Тогда
						СвободныйОстаток = 0;
					КонецЕсли;
				КонецЕсли;

				ЗначениеСвободныйОстаток = Формат(СвободныйОстаток, ФорматПоказателя);
			КонецЕсли;

			ЗначениеЗапланировано 		= Формат(?(Выборка["Запланировано"]=NULL,0,
														Выборка["Запланировано"]), ФорматПоказателя);
			ЗначениеОсталосьОтгрузить  	= Формат(?(Выборка["ОсталосьОтгрузить"]=NULL,0,
														Выборка["ОсталосьОтгрузить"]), ФорматПоказателя);
			//ЗначениеРезерв 				= Формат(?(Выборка["Резерв"]=NULL,0,
			//											Выборка["Резерв"]), ФорматПоказателя);
			//ЗначениеЗаказать			= Формат(Заказать, ФорматПоказателя);
			
			Если СтруктураПараметров.ТипЗаказа = "Покупателя" Тогда
				ЗначениеОтгруженоОтменено	= Формат(?(Выборка["ОтгруженоОтменено"]=NULL,0,
															Выборка["ОтгруженоОтменено"]), ФорматПоказателя);
			Иначе
				ЗначениеОтгружено		  	= Формат(?(Выборка["Отгружено"]=NULL,0,
															Выборка["Отгружено"]), ФорматПоказателя);
				ЗначениеОтменено		  	= Формат(?(Выборка["Отменено"]=NULL,0,
															Выборка["Отменено"]), ФорматПоказателя);
			КонецЕсли;

		Иначе
			
			ЗначениеЗапланировано 		= "";
			ЗначениеОтгружено		  	= "";
			ЗначениеОтменено		  	= "";
			ЗначениеОсталосьОтгрузить  	= "";
			ЗначениеРезерв 				= "";
			ЗначениеЗаказано			= "";
			ЗначениеСвободныйОстаток	= "";
			ЗначениеЗаказать			= "";

		КонецЕсли;
		
		ОбластьЗначенияПоказателя.Параметры.Запланировано     = СокрЛП(ЗначениеЗапланировано);
		ОбластьЗначенияПоказателя.Параметры.ОсталосьОтгрузить = СокрЛП(ЗначениеОсталосьОтгрузить);
		Если СтруктураПараметров.ТипЗаказа = "Покупателя" Тогда
			ОбластьЗначенияПоказателя.Параметры.ОтгруженоОтменено		  = СокрЛП(ЗначениеОтгруженоОтменено);
			////			ОбластьЗначенияПоказателя.Параметры.Резерв 	 = СокрЛП(ЗначениеРезерв);
			////			ОбластьЗначенияПоказателя.Параметры.Заказать = СокрЛП(ЗначениеЗаказать);
			////			ОбластьЗначенияПоказателя.Параметры.Заказано         = СокрЛП(ЗначениеЗаказано);
			////			ОбластьЗначенияПоказателя.Параметры.СвободныйОстаток = СокрЛП(ЗначениеСвободныйОстаток);
		Иначе
			ОбластьЗначенияПоказателя.Параметры.Отгружено		  = СокрЛП(ЗначениеОтгружено);
			ОбластьЗначенияПоказателя.Параметры.Отменено = СокрЛП(ЗначениеОтменено);
			//			ОбластьЗначенияПоказателя.Параметры.Заказано         = СокрЛП(ЗначениеРезерв);
			//			ОбластьЗначенияПоказателя.Параметры.СвободныйОстаток = СокрЛП(ЗначениеСвободныйОстаток);
		КонецЕсли;
		
		ТабДок.Присоединить(ОбластьЗначенияПоказателя);

	Иначе

        ПроцентПредоплаты=Заказ.ДоговорКонтрагента.ПроцентПредоплаты/100;

		ФорматПоказателя = "ЧЦ = 15 ; ЧДЦ = 2 ; ЧН = ""0,00""";

		Запланировано=Выборка["Запланировано"];
		ЗапланированоПредоплата=Выборка["Запланировано"]*ПроцентПредоплаты;
		Оплачено=?(ПустаяСтрока(Выборка["Оплачено"]),0,Выборка["Оплачено"]);
		ОплатитьВсего=Выборка["Запланировано"]-Оплачено;
		ОплатитьВсегоПредоплата=?(ЗапланированоПредоплата>Оплачено,ЗапланированоПредоплата-Оплачено,0);

		Если (ЗначениеГруппировки="Всего") или (ЗначениеГруппировки="Текущий заказ") Тогда 
			СтруктураДанных=Новый Структура;
			СтруктураДанных.Вставить("Запланировано",Запланировано);
			СтруктураДанных.Вставить("ЗапланированоПредоплата",ЗапланированоПредоплата);
			СтруктураДанных.Вставить("Оплачено",Оплачено);
			СтруктураДанных.Вставить("ОплатитьВсего",ОплатитьВсего);
			СтруктураДанных.Вставить("ОплатитьВсегоПредоплата",ОплатитьВсегоПредоплата);
		ИначеЕсли ЗначениеГруппировки="Другие заказы по договору" Тогда
			Запланировано=Запланировано-СтруктураДанныхТекущегоЗаказа.ДанныеЗаказа.Запланировано;
			ЗапланированоПредоплата=ЗапланированоПредоплата-СтруктураДанныхТекущегоЗаказа.ДанныеЗаказа.ЗапланированоПредоплата;
			Оплачено=Оплачено-СтруктураДанныхТекущегоЗаказа.ДанныеЗаказа.Оплачено;
			ОплатитьВсего=Запланировано-Оплачено;
			ОплатитьВсегоПредоплата=?(ЗапланированоПредоплата>Оплачено,ЗапланированоПредоплата-Оплачено,0);
		КонецЕсли;

		Если ЗначениеГруппировки="Всего" Тогда
			//Сохраняются итоговые данные запроса по взаиморасчетам, которые выводятся в последнюю очередь.
			СтруктураДанныхТекущегоЗаказа.Вставить("Всего",СтруктураДанных);
			СтруктураПараметров.Вставить("СтруктураДанныхТекущегоЗаказа",СтруктураДанныхТекущегоЗаказа);
			Возврат;
		Иначе
			//Сохраняются данные запроса по взаиморасчетам, касающиеся текущего заказа.
			СтруктураДанныхТекущегоЗаказа.Вставить("ДанныеЗаказа",СтруктураДанных);
			СтруктураПараметров.Вставить("СтруктураДанныхТекущегоЗаказа",СтруктураДанныхТекущегоЗаказа);
		КонецЕсли;

		ЗначениеЗапланировано 				= Формат(Запланировано, ФорматПоказателя);
		ЗначениеЗапланированоПредоплата  	= Формат(ЗапланированоПредоплата, ФорматПоказателя);
		ЗначениеОплачено  					= Формат(Оплачено, ФорматПоказателя);
		ЗначениеОплатитьВсего				= Формат(ОплатитьВсего, ФорматПоказателя);
		ЗначениеОплатитьВсегоПредоплата		= Формат(ОплатитьВсегоПредоплата, ФорматПоказателя);

		ОбластьЗначенияПоказателя.Параметры.Запланировано 				= СокрЛП(ЗначениеЗапланировано);
		ОбластьЗначенияПоказателя.Параметры.ЗапланированоПредоплата  	= СокрЛП(ЗначениеЗапланированоПредоплата);
		ОбластьЗначенияПоказателя.Параметры.Оплачено   					= СокрЛП(ЗначениеОплачено);
		ОбластьЗначенияПоказателя.Параметры.ОплатитьВсего 				= СокрЛП(ЗначениеОплатитьВсего);
		ОбластьЗначенияПоказателя.Параметры.ОплатитьВсегоПредоплата 	= СокрЛП(ЗначениеОплатитьВсегоПредоплата);

		ТабДок.Присоединить(ОбластьЗначенияПоказателя);

		Если (ЗначениеГруппировки="Текущий заказ") 
			ИЛИ (ЗначениеГруппировки="Другие заказы по договору") 
			ИЛИ (ЗначениеГруппировки="Всего")  Тогда
			ТабДок.Область(	ТабДок.ВысотаТаблицы, 2, 
							ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы).Шрифт=СтруктураПараметров.ШрифтГрупп;
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры // ВывестиСтроку()

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиВыборку(Выборка, СтруктураПараметров, Номер, Итоги)

	ОбработкаПрерыванияПользователя();
	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;
	ЕстьНоменклатура = СтруктураПараметров.ЕстьНоменклатура;
   
	// Берутся группировки все подряд, 
	Пока Выборка.Следующий() Цикл

		ВывестиСтроку(Выборка, СтруктураПараметров, Номер);

		// Детальные записи не нужны: для последней группировки после итогов оп группировке идут 
		// детальные записи
		Если Номер = ВсегоГруппировок
			И Выборка.ТипЗаписи() =  ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
			Попытка
				Итоги.Запланировано     = Итоги.Запланировано + Выборка.Запланировано;
				Итоги.Отгружено         = Итоги.Отгружено +Выборка.Отгружено;
				Итоги.ОсталосьОтгрузить = Итоги.ОсталосьОтгрузить+Выборка.ОсталосьОтгрузить;
				Итоги.Резерв            = Итоги.Резерв+Выборка.Резерв;
				Итоги.Отменено          = Итоги.Отменено+Выборка.Отменено;
			Исключение
			КонецПопытки;
			Продолжить;
		КонецЕсли;
		
		ВывестиВыборку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1, итоги);
		
	КонецЦикла;

КонецПроцедуры // ВывестиВыборку()

//Формирует текст запроса, исполняет запрос и выводит результат в табличный документ.
//
Процедура СформироватьОтчетПоВнутреннемуЗаказу(ДокументРезультат)
	
	ТипЗаказа = "Покупателя";

	// Формируем текст запроса по номенклатуре анализируемого заказа.

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ВестиУчетПоХарактеристикам КАК НоменклатураВестиУчетПоХарактеристикам,
	|	ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход КАК Запланировано,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоРасход КАК ОтгруженоОтменено,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток КАК ОсталосьОтгрузить,
	|	РезервыКомпании.КоличествоОстаток КАК Резерв,
	|	РазмещениеЗаказовПокупателей.КоличествоОстаток КАК Заказано,
	|	ВЫБОР КОГДА ОстаткиТоваровКомпании.КоличествоОстаток ЕСТЬ NULL Тогда 0 Иначе ОстаткиТоваровКомпании.КоличествоОстаток КОНЕЦ
	|	- ВЫБОР КОГДА РезервыТоваровКомпании.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ РезервыТоваровКомпании.КоличествоОстаток КОНЕЦ
	|		КАК СвободныйОстаток
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.ОстаткиИОбороты(,&ДатаАнализа,,,ВнутреннийЗаказ=&Заказ) КАК ЗаказыПокупателейОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаАнализа, ДокументРезерва=&Заказ) КАК РезервыКомпании
	|		ПО ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = РезервыКомпании.ХарактеристикаНоменклатуры 
	|			И ЗаказыПокупателейОстаткиИОбороты.Номенклатура = РезервыКомпании.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаАнализа, ЗаказПокупателя = &Заказ) КАК РазмещениеЗаказовПокупателей
	|		ПО ЗаказыПокупателейОстаткиИОбороты.Номенклатура = РазмещениеЗаказовПокупателей.Номенклатура 
	|			И ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаАнализа) КАК ОстаткиТоваровКомпании
	|		ПО ЗаказыПокупателейОстаткиИОбороты.Номенклатура = ОстаткиТоваровКомпании.Номенклатура 
	|			И ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаАнализа) КАК РезервыТоваровКомпании
	|		ПО ЗаказыПокупателейОстаткиИОбороты.Номенклатура = РезервыТоваровКомпании.Номенклатура 
	|			И ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = РезервыТоваровКомпании.ХарактеристикаНоменклатуры
	|	
	|ИТОГИ 
	|	СУММА(Запланировано), 
	|	СУММА(ОтгруженоОтменено), 
	|	СУММА(ОсталосьОтгрузить),
	|	СУММА(Резерв), 
	|	СУММА(Заказано), 
	|	СУММА(СвободныйОстаток) 
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";

	Запрос.УстановитьПараметр( "ДатаАнализа",  ?(ДатаАнализа='00010101000000','00010101000000',ДатаАнализа));
	Запрос.УстановитьПараметр( "НачалоЗаказа", Заказ.Дата);
	Запрос.УстановитьПараметр( "Заказ",        Заказ);
	Запрос.УстановитьПараметр( "СкладЗаказа",  Заказ.Заказчик);
	Запрос.УстановитьПараметр( "ПустойЗаказ",  Неопределено);

	// Выполнение сформированного запроса
	Результат = Запрос.Выполнить();
	
	Макет = ПолучитьМакет( "Макет");
	ДокументРезультат.Очистить();
	СтруктураПараметров = Новый Структура;

	СтруктураСдвигУровняГруппировок=Новый Структура;
	СтруктураСдвигУровняГруппировок.Вставить("Номенклатура", 0);
	СтруктураСдвигУровняГруппировок.Вставить("ХарактеристикаНоменклатуры", 1);

	// Области строки отчета - табличные документы из макета отчета
	СтруктураПараметров.Вставить( "ОбщийОтступ",         Макет.ПолучитьОбласть("ОбщийОтступ|Строка"));
	СтруктураПараметров.Вставить( "ЗначениеГруппировки", Макет.ПолучитьОбласть("Значение|Строка"));
	СтруктураПараметров.Вставить( "ЗначенияПоказателя",  Макет.ПолучитьОбласть("Показатель|Строка"));
	СтруктураПараметров.Вставить( "СтруктураСдвигУровняГруппировок",  СтруктураСдвигУровняГруппировок);
	СтруктураПараметров.Вставить( "ВсегоГруппировок",    1);
	СтруктураПараметров.Вставить( "ТипЗаказа",           ТипЗаказа);

	// Табличный документ - результат отчета
	СтруктураПараметров.Вставить( "ТабДок", ДокументРезультат);
	
	// Наклонный шрифт для групп
	СтруктураПараметров.Вставить( "ШрифтГрупп", Новый Шрифт(Макет.Область("Строка|Показатель").Шрифт,,,Истина));

	// Вывод шапки отчета
	ОбластьЗначение = Макет.ПолучитьОбласть("ШапкаЗаголовок");

	ОбластьЗначение.Параметры.ЗаголовокОтчета = "Состояние заказа по документу "
			+ Заказ + Символы.ПС + " на "
			+ ?(ДатаАнализа = '00010101000000', "момент последнего движения", Формат( ДатаАнализа, "ДФ=""дд ММММ гггг 'г.' ЧЧ:мм:сс'"""));

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ОбластьЗначение   = Макет.ПолучитьОбласть("ШапкаЗаказчик");
	
	ОбластьЗначение.Параметры.Заказчик            = "Заказчик: " + Заказ.Заказчик;
	ОбластьЗначение.Параметры.РасшифровкаЗаказчик = Заказ.Заказчик;

	ДокументРезультат.Присоединить(ОбластьЗначение);
	ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("ШапкаНоменклатура"));

	// Вывод строк отчета
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	СтруктураПараметров.Вставить("ЕстьНоменклатура", Истина);
	итоги = новый Структура("Запланировано,Отгружено,ОсталосьОтгрузить,Резерв,Отменено",0,0,0,0,0);
	ВывестиВыборку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0, Итоги);

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("Подвал"));

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры // СформироватьОтчетПоВнутреннемуЗаказу()

//Формирует текст запроса, исполняет запрос и выводит результат в табличный документ.
//
Процедура СформироватьОтчет(ДокументРезультат) Экспорт

    // Проверка на пустые значения
	Если ПустаяСтрока(Заказ) Тогда
		Предупреждение("Не выбран заказ!");
		Возврат;
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		СформироватьОтчетПоВнутреннемуЗаказу(ДокументРезультат);
		Возврат;
	КонецЕсли;

	ТипЗначЗаказ = ТипЗнч(Заказ);
	ТипЗаказа = ?(ТипЗначЗаказ = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипЗначЗаказ = Тип("ДокументСсылка.СчетНаОплатуПоставщика"), "Поставщику", "Покупателя");

	// Формируем текст запроса по номенклатуре анализируемого заказа.

	Запрос = Новый Запрос;
	Если ТипЗаказа = "Покупателя" Тогда
		Запрос.Текст="ВЫБРАТЬ
		|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ВестиУчетПоХарактеристикам КАК НоменклатураВестиУчетПоХарактеристикам,
		|	ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход КАК Запланировано,
		|	ЗаказыПокупателейОстаткиИОбороты.КоличествоРасход КАК ОтгруженоОтменено,
		|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток КАК ОсталосьОтгрузить,
		|	РезервыКомпании.КоличествоОстаток КАК Резерв,
		|	РазмещениеЗаказовПокупателей.КоличествоОстаток КАК Заказано,
		|	ВЫБОР КОГДА ОстаткиТоваровКомпании.КоличествоОстаток ЕСТЬ NULL Тогда 0 Иначе ОстаткиТоваровКомпании.КоличествоОстаток КОНЕЦ
		|	- ВЫБОР КОГДА РезервыТоваровКомпании.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ РезервыТоваровКомпании.КоличествоОстаток КОНЕЦ
		|		КАК СвободныйОстаток
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,&ДатаАнализа,,,ЗаказПокупателя=&Заказ) КАК ЗаказыПокупателейОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаАнализа, ДокументРезерва=&Заказ) КАК РезервыКомпании
		|		ПО ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = РезервыКомпании.ХарактеристикаНоменклатуры 
		|			И ЗаказыПокупателейОстаткиИОбороты.Номенклатура = РезервыКомпании.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаАнализа, ЗаказПокупателя = &Заказ) КАК РазмещениеЗаказовПокупателей
		|		ПО ЗаказыПокупателейОстаткиИОбороты.Номенклатура = РазмещениеЗаказовПокупателей.Номенклатура 
		|			И ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаАнализа) КАК ОстаткиТоваровКомпании
		|		ПО ЗаказыПокупателейОстаткиИОбороты.Номенклатура = ОстаткиТоваровКомпании.Номенклатура 
		|			И ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаАнализа) КАК РезервыТоваровКомпании
		|		ПО ЗаказыПокупателейОстаткиИОбороты.Номенклатура = РезервыТоваровКомпании.Номенклатура 
		|			И ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = РезервыТоваровКомпании.ХарактеристикаНоменклатуры
		|	
		|ИТОГИ 
		|	СУММА(Запланировано), 
		|	СУММА(ОтгруженоОтменено), 
		|	СУММА(ОсталосьОтгрузить),
		|	СУММА(Резерв), 
		|	СУММА(Заказано), 
		|	СУММА(СвободныйОстаток) 
		|ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры";
		
		Запрос.Текст = "
		| ВЫБРАТЬ
		|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ВестиУчетПоХарактеристикам КАК НоменклатураВестиУчетПоХарактеристикам,
		|	ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры,
		|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход КАК Заказано,
		|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход КАК Запланировано,
		|	ЗаказыПокупателейОстаткиИОбороты.КоличествоРасход КАК ОтгруженоОтменено,
		|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток КАК ОсталосьОтгрузить
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,&ДатаАнализа,,,ЗаказПокупателя=&Заказ) КАК ЗаказыПокупателейОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаАнализа) КАК ОстаткиТоваровКомпании
		|		ПО ЗаказыПокупателейОстаткиИОбороты.Номенклатура = ОстаткиТоваровКомпании.Номенклатура 
		|			И ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры
		|ИТОГИ 
		|	СУММА(Запланировано), 
		|	СУММА(ОтгруженоОтменено), 
		|	СУММА(ОсталосьОтгрузить)
		|ПО
		|	Номенклатура,ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры";
	ИначеЕсли Заказ.Контрагент = Справочники.Контрагенты.НайтиПоКоду("94072") и ЗначениеЗаполнено(Заказ.Основание) тогда
		Запрос.Текст="ВЫБРАТЬ
		             |	ЗаказПоставщикуТовары.Ссылка КАК ЗаказПоставщикуПлан,
		             |	ЗаказПоставщикуТовары.Номенклатура,
		             |	СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество,
		             |	ЗаказПоставщикуТовары.Ссылка.Основание КАК ЗаказПоставщикуСезонный,
		             |	СУММА(ЗаказПоставщикуТовары.Сумма) КАК Сумма,
		             |	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры
		             |ПОМЕСТИТЬ втЗаказПлан
		             |ИЗ
		             |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		             |ГДЕ
		             |	ЗаказПоставщикуТовары.Ссылка.Ссылка = &Заказ
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ЗаказПоставщикуТовары.Номенклатура,
		             |	ЗаказПоставщикуТовары.Ссылка,
		             |	ЗаказПоставщикуТовары.Ссылка.Основание,
		             |	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ЗаказПоставщикуТовары.Ссылка КАК ЗаказПоставщикуФакт,
		             |	ЗаказПоставщикуТовары.Номенклатура,
		             |	СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество,
		             |	СУММА(ЗаказПоставщикуТовары.Сумма) КАК Сумма,
		             |	ЗаказПоставщикуТовары.Основание КАК ЗаказПоставщикуПлан,
		             |	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры
		             |ПОМЕСТИТЬ втЗаказПоставщикуФакт
		             |ИЗ
		             |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		             |ГДЕ
		             |	ЗаказПоставщикуТовары.Основание В
		             |			(ВЫБРАТЬ
		             |				втЗаказПлан.ЗаказПоставщикуПлан
		             |			ИЗ
		             |				втЗаказПлан)
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ЗаказПоставщикуТовары.Основание,
		             |	ЗаказПоставщикуТовары.Ссылка,
		             |	ЗаказПоставщикуТовары.Номенклатура,
		             |	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	втЗаказПлан.Номенклатура КАК Номенклатура,
		             |	втЗаказПлан.Количество КАК Запланировано,
		             |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоОборот, 0) КАК Отгружено,
		             |	втЗаказПлан.Количество - ЕСТЬNULL(ВложенныйЗапрос.КоличествоОборот, 0) КАК ОсталосьОтгрузить,
		             |	0 КАК Резерв,
		             |	0 КАК Отменено,
		             |	втЗаказПлан.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		             |	втЗаказПлан.Номенклатура.ВестиУчетПоХарактеристикам,
		             |	втЗаказПлан.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		             |ИЗ
		             |	втЗаказПлан КАК втЗаказПлан
		             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		             |			втЗаказПоставщикуФакт.ЗаказПоставщикуПлан КАК ЗаказПоставщикуПлан,
		             |			СУММА(ВЫБОР
		             |					КОГДА ЗакупкиОбороты.КоличествоОборот >= втЗаказПоставщикуФакт.Количество
		             |						ТОГДА втЗаказПоставщикуФакт.Количество
		             |					ИНАЧЕ ЗакупкиОбороты.КоличествоОборот
		             |				КОНЕЦ) КАК КоличествоОборот,
		             |			СУММА(ВЫБОР
		             |					КОГДА ЗакупкиОбороты.СтоимостьОборот >= втЗаказПоставщикуФакт.Сумма
		             |						ТОГДА втЗаказПоставщикуФакт.Сумма
		             |					ИНАЧЕ ЗакупкиОбороты.СтоимостьОборот
		             |				КОНЕЦ) КАК СтоимостьОборот,
		             |			ЗакупкиОбороты.Номенклатура КАК Номенклатура,
		             |			ЗакупкиОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		             |		ИЗ
		             |			втЗаказПоставщикуФакт КАК втЗаказПоставщикуФакт
		             |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки.Обороты(, , Авто, ) КАК ЗакупкиОбороты
		             |				ПО втЗаказПоставщикуФакт.ЗаказПоставщикуФакт = ЗакупкиОбороты.ЗаказПоставщику
		             |					И втЗаказПоставщикуФакт.Номенклатура = ЗакупкиОбороты.Номенклатура
		             |					И втЗаказПоставщикуФакт.ХарактеристикаНоменклатуры = ЗакупкиОбороты.ХарактеристикаНоменклатуры
		             |		
		             |		СГРУППИРОВАТЬ ПО
		             |			ЗакупкиОбороты.Номенклатура,
		             |			втЗаказПоставщикуФакт.ЗаказПоставщикуПлан,
		             |			ЗакупкиОбороты.ХарактеристикаНоменклатуры) КАК ВложенныйЗапрос
		             |		ПО втЗаказПлан.ЗаказПоставщикуПлан = ВложенныйЗапрос.ЗаказПоставщикуПлан
		             |			И втЗаказПлан.Номенклатура = ВложенныйЗапрос.Номенклатура
		             |			И втЗаказПлан.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
		             |ИТОГИ
		             |	СУММА(Запланировано),
		             |	СУММА(Отгружено),
		             |	СУММА(ОсталосьОтгрузить),
		             |	СУММА(Резерв),
		             |	СУММА(Отменено)
		             |ПО
		             |	Номенклатура,
		             |	ХарактеристикаНоменклатуры";
	иначе
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегЗаказы.Номенклатура КАК Номенклатура,
		               |	РегЗаказы.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		               |	РегЗаказы.Номенклатура.ВестиУчетПоХарактеристикам КАК НоменклатураВестиУчетПоХарактеристикам,
		               |	РегЗаказы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	РегЗаказы.КоличествоПриход КАК Запланировано,
		               |	ВЫБОР
		               |		КОГДА РегЗаказы.Регистратор ССЫЛКА Документ.ЗакрытиеЗаказовПоставщикам
		               |			ТОГДА 0
		               |		ИНАЧЕ РегЗаказы.КоличествоРасход
		               |	КОНЕЦ КАК Отгружено,
		               |	РегЗаказы.КоличествоКонечныйОстаток КАК ОсталосьОтгрузить,
		               |	ВЫБОР
		               |		КОГДА РегРазмещение.КоличествоОстаток ЕСТЬ NULL 
		               |			ТОГДА 0
		               |		ИНАЧЕ РегРазмещение.КоличествоОстаток
		               |	КОНЕЦ КАК Резерв,
		               |	ВЫБОР
		               |		КОГДА РегЗаказы.Регистратор ССЫЛКА Документ.ЗакрытиеЗаказовПоставщикам
		               |			ТОГДА РегЗаказы.КоличествоРасход
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК Отменено
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(&НачалоЗаказа, &ДатаАнализа, Регистратор, , ЗаказПоставщику = &Заказ) КАК РегЗаказы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаАнализа, ЗаказПоставщику = &Заказ) КАК РегРазмещение
		               |		ПО РегЗаказы.Номенклатура = РегРазмещение.Номенклатура
		               |			И РегЗаказы.ХарактеристикаНоменклатуры = РегРазмещение.ХарактеристикаНоменклатуры
		               |ИТОГИ
		               |	СУММА(Запланировано),
		               |	СУММА(Отгружено),
		               |	СУММА(ОсталосьОтгрузить),
		               |	СУММА(Резерв),
		               |	СУММА(Отменено)
		               |ПО
		               |	Номенклатура,
		               |	ХарактеристикаНоменклатуры";
		
	КонецЕсли;

	Запрос.УстановитьПараметр("ДатаАнализа",  ?(ДатаАнализа='00010101000000','00010101000000',ДатаАнализа));
	Запрос.УстановитьПараметр("НачалоЗаказа", Заказ.Дата);
	Запрос.УстановитьПараметр("Заказ",        Заказ);
	Запрос.УстановитьПараметр("СкладЗаказа",  Заказ.Склад);
	Запрос.УстановитьПараметр("ПустойЗаказ",  Неопределено);

    // Выполнение сформированного запроса
	Результат = Запрос.Выполнить();
	
    Макет = ПолучитьМакет( ?(ТипЗаказа = "Поставщику", "МакетЗаказПоставщику", "Макет"));
	ДокументРезультат.Очистить();
	СтруктураПараметров = Новый Структура;

	СтруктураСдвигУровняГруппировок=Новый Структура;
	СтруктураСдвигУровняГруппировок.Вставить("Номенклатура", 0);
	СтруктураСдвигУровняГруппировок.Вставить("ХарактеристикаНоменклатуры", 1);

	// Области строки отчета - табличные документы из макета отчета
	СтруктураПараметров.Вставить("ОбщийОтступ", Макет.ПолучитьОбласть("ОбщийОтступ|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировки",   Макет.ПолучитьОбласть("Значение|Строка"));
	СтруктураПараметров.Вставить("ЗначенияПоказателя",    Макет.ПолучитьОбласть("Показатель|Строка"));
	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок",  СтруктураСдвигУровняГруппировок);
	СтруктураПараметров.Вставить("ВсегоГруппировок", 1);
	СтруктураПараметров.Вставить("ТипЗаказа", ТипЗаказа);

	// Табличный документ - результат отчета
	СтруктураПараметров.Вставить("ТабДок",    ДокументРезультат);
	
	// Наклонный шрифт для групп
	СтруктураПараметров.Вставить("ШрифтГрупп", Новый Шрифт(Макет.Область("Строка|Показатель").Шрифт,,,Истина));

	// Вывод шапки отчета
	ОбластьЗначение   = Макет.ПолучитьОбласть("ШапкаЗаголовок");

	ОбластьЗначение.Параметры.ЗаголовокОтчета = "Состояние заказа по документу "
			+ Заказ+Символы.ПС+" на "
			+ ?(ДатаАнализа='00010101000000',"момент последнего движения",Формат(ДатаАнализа,"ДФ=""дд ММММ гггг 'г.' ЧЧ:мм:сс'"""));

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ОбластьЗначение   = Макет.ПолучитьОбласть("ШапкаКонтрагент");
	
	ОбластьЗначение.Параметры.Контрагент = "Контрагент:"+Заказ.Контрагент;
	ОбластьЗначение.Параметры.РасшифровкаКонтрагент=Заказ.Контрагент;
	ОбластьЗначение.Параметры.Договор = "Договор контрагента: "+Заказ.ДоговорКонтрагента;
	ОбластьЗначение.Параметры.РасшифровкаДоговор = Заказ.ДоговорКонтрагента;

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("ШапкаНоменклатура"));

	// Вывод строк отчета
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	СтруктураПараметров.Вставить("ЕстьНоменклатура", Истина);
	итоги = новый Структура("Запланировано,Отгружено,ОсталосьОтгрузить,Резерв,Отменено",0,0,0,0,0);
	ВывестиВыборку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0, Итоги);

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
    //итог
	ОбластьИтог = Макет.ПолучитьОбласть("Итог");
	ОбластьИтог.Параметры.Заполнить(итоги);
	ОбластьИтог.Параметры.ЗначениеГруппировки = "Итог:";
	ДокументРезультат.Вывести(ОбластьИтог);
	
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("Подвал"));

 //   Запрос=Новый Запрос;
 //   
 //   Если ТипЗаказа = "Покупателя" Тогда

 //   	//Формируем текст запроса по состоянию взаиморасчетов по договору.

 //	   Запрос.Текст=
 //	   "ВЫБРАТЬ
 //	   |	РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход КАК Запланировано,
 //	   |	РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход КАК Оплачено,
 //	   |	РасчетыСКонтрагентами.Сделка КАК Заказ,
 //	   |	РасчетыСКонтрагентами.ДоговорКонтрагента КАК ЗаказДоговорКонтрагента
 //	   |ИЗ
 //	   |	РегистрНакопления.РасчетыСКонтрагентами.Обороты(, &ДатаАнализа, , ДоговорКонтрагента = &ДоговорКонтрагента) КАК РасчетыСКонтрагентами
 //	   |
 //	   |ИТОГИ 
 //   	|	СУММА(Оплачено), 
 //   	|	СУММА(Запланировано)
 //   	|ПО ОБЩИЕ,
 //	   |	Заказ";
 //   Иначе
 //	   Запрос.Текст=
 //	   "ВЫБРАТЬ
 //	   |	РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход КАК Оплачено,
 //	   |	РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход КАК Запланировано,
 //	   |	РасчетыСКонтрагентами.Сделка КАК Заказ,
 //	   |	РасчетыСКонтрагентами.ДоговорКонтрагента КАК ЗаказДоговорКонтрагента
 //	   |ИЗ
 //	   |	РегистрНакопления.РасчетыСКонтрагентами.Обороты(, &ДатаАнализа, , ДоговорКонтрагента = &ДоговорКонтрагента) КАК РасчетыСКонтрагентами
 //	   |
 //	   |ИТОГИ 
 //   	|	СУММА(Оплачено), 
 //   	|	СУММА(Запланировано)
 //   	|ПО ОБЩИЕ,
 //	   |	Заказ";
 //   КонецЕсли;
 //   
 //   Запрос.УстановитьПараметр("ДатаАнализа",?(ДатаАнализа='00010101000000','00010101000000',ДатаАнализа));
 //   Запрос.УстановитьПараметр("ДоговорКонтрагента",Заказ.ДоговорКонтрагента);
 //
	 // Выполнение сформированного запроса
	//Результат = Запрос.Выполнить();

	//СтруктураСдвигУровняГруппировок=Новый Структура;
	//СтруктураСдвигУровняГруппировок.Вставить("ОБЩИЕ", 0);
	//СтруктураСдвигУровняГруппировок.Вставить("Заказ", 1);

	//СтруктураДанныхТекущегоЗаказа=Новый Структура;

	//СтруктураДанных=Новый Структура;
	//СтруктураДанных.Вставить("Запланировано",0);
	//СтруктураДанных.Вставить("ЗапланированоПредоплата",0);
	//СтруктураДанных.Вставить("Оплачено",0);
	//СтруктураДанных.Вставить("ОплатитьВсего",0);
	//СтруктураДанных.Вставить("ОплатитьВсегоПредоплата",0);

	//СтруктураДанныхТекущегоЗаказа.Вставить("ДанныеЗаказа",СтруктураДанных);
	//СтруктураДанныхТекущегоЗаказа.Вставить("Всего",СтруктураДанных);

	//// Области строки отчета - табличные документы из макета отчета
	//СтруктураПараметров.Вставить("ОбщийОтступ", Макет.ПолучитьОбласть("ОбщийОтступ|СтрокаДеньги"));
	//СтруктураПараметров.Вставить("ЗначениеГруппировки",   Макет.ПолучитьОбласть("Значение|СтрокаДеньги"));
	//СтруктураПараметров.Вставить("ЗначенияПоказателя",    Макет.ПолучитьОбласть("Показатель|СтрокаДеньги"));
	//СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок",  СтруктураСдвигУровняГруппировок);
	//СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок",  СтруктураСдвигУровняГруппировок);
	//СтруктураПараметров.Вставить("СтруктураДанныхТекущегоЗаказа",  СтруктураДанныхТекущегоЗаказа);
	//СтруктураПараметров.Вставить("ВсегоГруппировок",  1);
	//СтруктураПараметров.Вставить("НомерОбхода",  1);
   
////	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаДеньги"));

	//// Вывод шапки таблицы по состоянию взаиморасчетов.
	//ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ШапкаДеньги");

	//ДокументРезультат.Присоединить(ОбластьЗначение);

	//ОбластьПоказатель = Макет.ПолучитьОбласть("Показатель|ШапкаДеньги");
	//ОбластьПоказатель.Параметры.ПредоплатаТекст = "Предоплата  "
	//			+	Формат(Заказ.ДоговорКонтрагента.ПроцентПредоплаты,"ЧЦ=5; ЧДЦ=2; ЧН=""0,00""")+"%";
	//ОбластьПоказатель.Параметры.ВалютаВзаиморасчетов ="Валюта взаиморасчетов: "
	//			+ 	Заказ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	//ДокументРезультат.Присоединить(ОбластьПоказатель);

	//// Вывод строк таблицы по состоянию взаиморасчетов.
	//ДокументРезультат.НачатьАвтогруппировкуСтрок();

	//СтруктураПараметров.Вставить("ЕстьНоменклатура", Ложь);
	//
	//ВывестиВыборку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0);
	//СтруктураПараметров.Вставить("НомерОбхода",  2);
	//ВывестиВыборку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0);

	//ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	////Вывод итоговой строки таблицы по состоянию взаиморасчетов.

	//ДокументРезультат.Вывести(СтруктураПараметров.ОбщийОтступ);

	//СтруктураПараметров.ЗначениеГруппировки.Параметры.ЗначениеГруппировки = "Всего";

	//ДокументРезультат.Присоединить(СтруктураПараметров.ЗначениеГруппировки);

	//ФорматПоказателя = "ЧЦ = 15 ; ЧДЦ = 2 ; ЧН = ""0,00""";
	//
	//СтруктураОбщихДанных=СтруктураПараметров.СтруктураДанныхТекущегоЗаказа.Всего;
	//
	//ЗначениеЗапланировано 				= Формат(СтруктураОбщихДанных.Запланировано, ФорматПоказателя);
	//ЗначениеЗапланированоПредоплата  	= Формат(СтруктураОбщихДанных.ЗапланированоПредоплата, ФорматПоказателя);
	//ЗначениеОплачено  					= Формат(СтруктураОбщихДанных.Оплачено, ФорматПоказателя);
	//ЗначениеОплатитьВсего				= Формат(СтруктураОбщихДанных.ОплатитьВсего, ФорматПоказателя);
	//ЗначениеОплатитьВсегоПредоплата		= Формат(СтруктураОбщихДанных.ОплатитьВсегоПредоплата, ФорматПоказателя);

	//СтруктураПараметров.ЗначенияПоказателя.Параметры.Запланировано 				= СокрЛП(ЗначениеЗапланировано);
	//СтруктураПараметров.ЗначенияПоказателя.Параметры.ЗапланированоПредоплата  	= СокрЛП(ЗначениеЗапланированоПредоплата);
	//СтруктураПараметров.ЗначенияПоказателя.Параметры.Оплачено   				= СокрЛП(ЗначениеОплачено);
	//СтруктураПараметров.ЗначенияПоказателя.Параметры.ОплатитьВсего 				= СокрЛП(ЗначениеОплатитьВсего);
	//СтруктураПараметров.ЗначенияПоказателя.Параметры.ОплатитьВсегоПредоплата 	= СокрЛП(ЗначениеОплатитьВсегоПредоплата);

	//ДокументРезультат.Присоединить(СтруктураПараметров.ЗначенияПоказателя);
	//ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,  2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).Шрифт=СтруктураПараметров.ШрифтГрупп;

	//ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ПодвалДеньги"));

	//// Вывод подвала таблицы по состоянию взаиморасчетов.
	//ОбластьЗначение = Макет.ПолучитьОбласть("Значение|ПодвалДеньги");
	//
	//ДокументРезультат.Присоединить(ОбластьЗначение);

	//ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("Показатель|ПодвалДеньги"));

	////Для договоров, по которым установлен контроль дебеторской задолженности, выводится текущее состояние задолженности.
	//Если Заказ.ДоговорКонтрагента.КонтролироватьСуммуЗадолженности Тогда

	//	//Расчет текущей задолженности

	//	Запрос=Новый Запрос;
	//	Если ТипЗаказа = "Покупателя" Тогда
	//		Запрос.Текст="ВЫБРАТЬ
	//		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВалОстаток
	//		|ИЗ
	//		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаАнализа,ДоговорКонтрагента=&ДоговорКонтрагента)
	//		|	КАК КонтрагентыВзаиморасчетыКомпанииОстатки";
	//	Иначе
	//		Запрос.Текст="ВЫБРАТЬ
	//		|	 - КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВалОстаток
	//		|ИЗ
	//		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаАнализа,ДоговорКонтрагента=&ДоговорКонтрагента)
	//		|	КАК КонтрагентыВзаиморасчетыКомпанииОстатки";
	//	КонецЕсли;

	//	Запрос.УстановитьПараметр("ДатаАнализа",?(ДатаАнализа='00010101000000','00010101000000',ДатаАнализа));
	//	Запрос.УстановитьПараметр("ДоговорКонтрагента",Заказ.ДоговорКонтрагента);

	//	СуммаВзаиморасчетовВал=0;

	//	Результат = Запрос.Выполнить();
	//	Выборка=Результат.Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		СуммаВзаиморасчетовВал=Выборка["СуммаВалОстаток"];
	//	КонецЕсли;

	//	ДопустимаяЗадолженность=Заказ.ДоговорКонтрагента.ДопустимаяСуммаЗадолженности;
	//	ТекущаяЗадолженность=?(ПустаяСтрока(СуммаВзаиморасчетовВал),0,СуммаВзаиморасчетовВал);
	//	ОбъемОтгрузки=?((ДопустимаяЗадолженность-ТекущаяЗадолженность)>0,(ДопустимаяЗадолженность-ТекущаяЗадолженность),0);

	//	ЗначениеДопустимаяЗадолженность		= Формат(ДопустимаяЗадолженность, ФорматПоказателя);
	//	ЗначениеТекущаяЗадолженность	  	= Формат(ТекущаяЗадолженность, ФорматПоказателя);
	//	ЗначениеОбъемОтгрузки	  			= Формат(ОбъемОтгрузки, ФорматПоказателя);

	//	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|КонтрольЗадолженности"));

	//	// Вывод области контроля задолженности
	//	ОбластьЗначение = Макет.ПолучитьОбласть("Значение|КонтрольЗадолженности");
	//	
	//	ДокументРезультат.Присоединить(ОбластьЗначение);

	//	ОбластьКонтрольЗадолженности=Макет.ПолучитьОбласть("Показатель|КонтрольЗадолженности");

	//	ОбластьКонтрольЗадолженности.Параметры.ДопустимаяЗадолженность = СокрЛП(ЗначениеДопустимаяЗадолженность);
	//	ОбластьКонтрольЗадолженности.Параметры.ТекущаяЗадолженность  	= СокрЛП(ЗначениеТекущаяЗадолженность);
	//	ОбластьКонтрольЗадолженности.Параметры.ОбъемОтгрузки   		= СокрЛП(ЗначениеОбъемОтгрузки);

	//	ДокументРезультат.Присоединить(ОбластьКонтрольЗадолженности);

	//КонецЕсли;
		
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

КонецПроцедуры // СформироватьОтчет()