Перем ВысотаЗаголовка;
Перем ИдентификаторОкнаРасшифровки;
Перем ФормаНастройка;
Перем ДокументРезультат;
Перем СтруктураСвязиЭлементовСДанными;
Перем НеВосстанавливатьНастройки Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	Нет.
//
Процедура УправлениеПометкамиКнопокКоманднойПанели()
	
	Если ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

// Обновляет таблицу отчета
//
// Параметры:
//	Нет.
//
Процедура ОбновитьОтчет() Экспорт

	ЗаполнитьОбъектПоДиалогу();
	
	ЭтотОтчет.СформироватьОтчет(ЭлементыФормы.Диаграмма);

	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("ИмяРегистра", ИмяРегистра);

	//ЭлементыФормы.ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	//ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДокументРезультат;

	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры // ОбновитьОтчет()

//  Заполняет реквизиты по диалогу
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьОбъектПоДиалогу()

	// Здесь должно быть расположено заполнение реквизитов
	// отчета по реквизитам формы, непосредственно не связанным
	// с реквизитами отчета (если таковые имеются)
	
КонецПроцедуры // ЗаполнитьОбъектПоДиалогу()

// Заполняет диалог по значениям реквизитов отчета
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДиалогПоОбъекту()

	УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, СтруктураСвязиЭлементовСДанными, "ОбщийОтчет.ПостроительОтчета.Отбор");

КонецПроцедуры // ЗаполнитьДиалогПоОбъекту()

//  Управляет выводом заголовка
//
// Параметры:
//	Нет.
//
Процедура ВыводЗаголовка()

	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры // ВыводЗаголовка()

// Формирует текст заголовка
//
// Параметры:
//	Нет.
//
Процедура СформироватьЗаголовокФормы()

	Заголовок = СформироватьЗаголовокОсновнойФормы(ДатаНач, ДатаКон, мНазваниеОтчета, мРежимВводаПериода);

КонецПроцедуры // СформироватьЗаголовокФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ НАЖАТИЯ КНОПОК КОМАНДНОЙ ПАНЕЛИ

// Процедура - обработчик нажатия кнопки "Настройка".
//
Процедура КоманднаяПанельФормыНастройка(Кнопка)
	
	ФормаНастройка = ПолучитьФорму("ФормаНастройка", ЭтаФорма);
	
	Если ФормаНастройка.ОткрытьМодально() = Истина Тогда
		ОбновитьОтчет();
	КонецЕсли;

КонецПроцедуры // ДополнительноНажатие()

// Процедура - обработчик нажатия кнопки "Отбор".
//
Процедура КоманднаяПанельФормыОтбор(Кнопка)

	Если НЕ ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Нет;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Обновить".
//
Процедура КоманднаяПанельФормыОбновить(Кнопка)

	ОбновитьОтчет();

КонецПроцедуры // ВыполнитьНажатие()

// Процедура - обработчик нажатия кнопки "Заголовок".
//
Процедура КоманднаяПанельЗаголовок(Кнопка)
	ВыводЗаголовка();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик закрытия формы
//
Процедура ПриЗакрытии()

	// Сохраним имя регистра
	СохранитьЗначение(Метаданные().Имя+"_ИмяРегистра", ИмяРегистра);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик обновления данных формы
//
Процедура ОбновлениеОтображения()

	Если ТипДиаграммыОтчета<>Неопределено Тогда
		ЭлементыФормы.Диаграмма.ТипДиаграммы = ТипДиаграммыОтчета;
	КонецЕсли;
	
	Если ТипДиаграммыОтчета = ТипДиаграммы.Круговая	ИЛИ ТипДиаграммыОтчета = ТипДиаграммы.КруговаяОбъемная Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Транспонировать.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Транспонировать.Доступность = Истина;
	КонецЕсли;

	Если ВидПодписейККруговойДиаграмме<>Неопределено Тогда
		ЭлементыФормы.Диаграмма.ВидПодписей = ВидПодписейККруговойДиаграмме;
	КонецЕсли;
	
	Если РаздвижениеСерийКруговойДиаграммы<>Неопределено Тогда
		ЭлементыФормы.Диаграмма.АвтоРаздвижениеСерий = РаздвижениеСерийКруговойДиаграммы;
	КонецЕсли; 
	
	ЭлементыФормы.Диаграмма.Свет = Свет;
	ЭлементыФормы.Диаграмма.Окантовка = Окантовка;
	ЭлементыФормы.Диаграмма.Градиент = Градиент;
	
	Если ОриентацияИзометрическойДиаграммы <> Неопределено Тогда
		ЭлементыФормы.Диаграмма.Ориентация = ОриентацияИзометрическойДиаграммы;
	КонецЕсли;
	
	Если РежимПробеловДиаграммыСОбластями <> Неопределено Тогда
		ЭлементыФормы.Диаграмма.РежимПробелов = РежимПробеловДиаграммыСОбластями;
	КонецЕсли;
	
	Если ОграничениеСерий<>Неопределено Тогда
		ЭлементыФормы.Диаграмма.МаксимумСерий = ОграничениеСерий;
	КонецЕсли;
	
	ЭлементыФормы.Диаграмма.МаксимумСерийКоличество = МаксимумСерийКоличество;
	ЭлементыФормы.Диаграмма.МаксимумСерийПроцент = МаксимумСерийПроцент;

	ВыводимыйПоказатель = "";
	Если НомерПоказателя<мТаблицаПоказатели.Количество() Тогда
		ВыводимыйПоказатель = мТаблицаПоказатели[НомерПоказателя].ПредставлениеПоля;
	КонецЕсли;
	
	ЭлементыФормы.Диаграмма.ОбластьПостроения.ВертикальныеМетки = ВертикальныеМетки;

	ЭлементыФормы.Диаграмма.ОбластьЗаголовка.Текст = мНазваниеОтчета + ": " + ВыводимыйПоказатель;
	
	ЭлементыФормы.Диаграмма.БазовоеЗначение = БазовоеЗначение;
	
	ЭлементыФормы.Диаграмма.ОтображатьЗаголовок = ОтображатьЗаголовок;
	
	ЭлементыФормы.Диаграмма.ОтображатьЛегенду   = ОтображатьЛегенду;

	СформироватьЗаголовокФормы();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события перед открытием формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если НЕ (НеВосстанавливатьНастройки = Истина) Тогда

		ЭтотОтчет.ОбщийОтчет = ЭтотОбъект;
		мНазваниеОтчета = "Дебиторская задолженность - диаграмма";
		
		ИмяРегистра = "ДебиторскаяЗадолженность";
		мНаДату = Истина;
		мВыбиратьИмяРегистра = Ложь;
		
		ЭтотОтчет.ЗаполнитьНачальныеНастройки();

		Если ТипДиаграммыОтчета<>Неопределено Тогда
			ЭлементыФормы.Диаграмма.ТипДиаграммы = ТипДиаграммыОтчета;
		Иначе
			ТипДиаграммыОтчета = ЭлементыФормы.Диаграмма.ТипДиаграммы;
		КонецЕсли;

		Если ВидПодписейККруговойДиаграмме<>Неопределено Тогда
			ЭлементыФормы.Диаграмма.ВидПодписей = ВидПодписейККруговойДиаграмме;
		Иначе
			ВидПодписейККруговойДиаграмме = ЭлементыФормы.Диаграмма.ВидПодписей;
		КонецЕсли;
		
		Если РаздвижениеСерийКруговойДиаграммы<>Неопределено Тогда
			ЭлементыФормы.Диаграмма.АвтоРаздвижениеСерий = РаздвижениеСерийКруговойДиаграммы;
		Иначе
			РаздвижениеСерийКруговойДиаграммы = ЭлементыФормы.Диаграмма.АвтоРаздвижениеСерий;
		КонецЕсли;
		
		Если ОриентацияИзометрическойДиаграммы<>Неопределено Тогда
			ЭлементыФормы.Диаграмма.Ориентация = ОриентацияИзометрическойДиаграммы;
		Иначе
			ОриентацияИзометрическойДиаграммы = ЭлементыФормы.Диаграмма.Ориентация;
		КонецЕсли;
		
		Если РежимПробеловДиаграммыСОбластями<>Неопределено Тогда
			ЭлементыФормы.Диаграмма.РежимПробелов = РежимПробеловДиаграммыСОбластями;
		Иначе
			РежимПробеловДиаграммыСОбластями = ЭлементыФормы.Диаграмма.РежимПробелов;
		КонецЕсли;
		
		Если ОграничениеСерий<>Неопределено Тогда
			ЭлементыФормы.Диаграмма.МаксимумСерий = ОграничениеСерий;
		Иначе
			ОграничениеСерий = ЭлементыФормы.Диаграмма.МаксимумСерий;
		КонецЕсли;
		
		ОтображатьЗаголовок = ЭлементыФормы.Диаграмма.ОтображатьЗаголовок;
		ОтображатьЛегенду   = ЭлементыФормы.Диаграмма.ОтображатьЛегенду;
		
		Окантовка = Истина;
		Свет = Истина;
		Градиент = Ложь;
		ВертикальныеМетли = Ложь;

	КонецЕсли; 

	ЗаполнитьДиалогПоОбъекту();

	// Установим дату начала отчета
	Если Не ЗначениеНеЗаполнено(глТекущийПользователь) Тогда
		ДатаНач = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяДатаНачалаОтчетов");
	КонецЕсли;

	НП.УстановитьПериод(ДатаНач,ДатаКон);

	ВысотаЗаголовка = 0;

	Если Не ПустаяСтрока(ИмяРегистра) Тогда
		ВыводЗаголовка();
	КонецЕсли;

	СформироватьЗаголовокФормы();

	ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;

	УправлениеПометкамиКнопокКоманднойПанели();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события перед сохранением значений формы
//
Процедура ПередСохранениемЗначений(Отказ)

	СохраненныеНастройки = Новый Структура;
	СохраненныеНастройки.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
	СохраненныеНастройки.Вставить("Показатели", Показатели.Выгрузить());

	// Остальные реквизиты отчета сохраняются стандартно
	
КонецПроцедуры // ПередСохранениемЗначений()

// Процедура - обработчик события после восстановления значений формы
//
Процедура ПослеВосстановленияЗначений()

	Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла; 

	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда

		ПостроительОтчета.УстановитьНастройки(СохраненныеНастройки.НастройкиПостроителя);
		Показатели.Загрузить(СохраненныеНастройки.Показатели);

		// Остальные реквизиты отчета восстанавливаются стандартно

	КонецЕсли; 
	
КонецПроцедуры // ПослеВосстановленияЗначений()

// Процедура - обработчик сообщений
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзмененоИмяРегистра" И Источник = ФормаНастройка Тогда
		СформироватьЗаголовокФормы();
		ЗаполнитьДиалогПоОбъекту();

	ИначеЕсли ИмяСобытия = "ИзмененТекстЗапроса" И Источник = ФормаНастройка Тогда

		// Перезаполним привязку отбора к данным
		Для Каждого Элемент Из СтруктураСвязиЭлементовСДанными Цикл
		
			ЭлементыФормы[Элемент.Ключ].Данные = Элемент.Значение;
		
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаОповещения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик нажатия кнопки настройки периода
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	Если НП.Редактировать() Тогда
		
		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();

	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Процедура - обработчик изменения данных в поле значения отбора
//
Процедура ПолеНастройки1ПриИзменении(Элемент)

	ПолеНастройкиПриИзменении(Элемент, ПостроительОтчета.Отбор);
	
КонецПроцедуры // ПолеНастройки1ПриИзменении()

// Процедура - обработчик изменения данных в поле значения отбора С
//
Процедура ПолеНастройкиС1ПриИзменении(Элемент)

	ПолеНастройкиСПриИзменении(Элемент, ПостроительОтчета.Отбор);
	
КонецПроцедуры // ПолеНастройкиС1ПриИзменении()

// Процедура - обработчик изменения данных в поле значения отбора ПО
//
Процедура ПолеНастройкиПо1ПриИзменении(Элемент)

	ПолеНастройкиПоПриИзменении(Элемент, ПостроительОтчета.Отбор);

КонецПроцедуры // ПолеНастройкиПо1ПриИзменении()

// Процедура - обработчик изменения данных в поле выбора вида сравнения
//
Процедура ПолеВидаСравнения1ПриИзменении(Элемент)

	ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы);
	
КонецПроцедуры // ПолеВидаСравнения1ПриИзменении()

// Процедура - обработчик нажатия кнопки "Печать"
//
Процедура КоманднаяПанельФормыПечать(Кнопка)
	
	ДокументРезультат.Очистить();
	ДокументРезультат.Вывести(ПолучитьМакет("Макет"));

	ДокументРезультат.Рисунки.Диаграмма.Объект.ТипДиаграммы = ТипДиаграммыОтчета;
	ДокументРезультат.Рисунки.Диаграмма.Объект.ВидПодписей = ВидПодписейККруговойДиаграмме;

	Если МаксимумСерийКоличество>0 Тогда
		ДокументРезультат.Рисунки.Диаграмма.Объект.МаксимумСерий = МаксимумСерий.Ограничено;
		ДокументРезультат.Рисунки.Диаграмма.Объект.МаксимумСерийКоличество = МаксимумСерийКоличество;
	Иначе
		ДокументРезультат.Рисунки.Диаграмма.Объект.МаксимумСерий = МаксимумСерий.НеЗадано;
	КонецЕсли;
	
	ВыводимыйПоказатель = "";
	Если НомерПоказателя<мТаблицаПоказатели.Количество() Тогда
		ВыводимыйПоказатель = мТаблицаПоказатели[НомерПоказателя].ПредставлениеПоля;
	КонецЕсли;

	ДокументРезультат.Рисунки.Диаграмма.Объект.ОбластьЗаголовка.Текст = мНазваниеОтчета + ": " + ВыводимыйПоказатель;
	
	ЭтотОтчет.СформироватьОтчет(ДокументРезультат.Рисунки.Диаграмма.Объект);

	ДокументРезультат.Показать();
	
КонецПроцедуры

// Обработка расшифровки диаграммы
//
Процедура ДиаграммаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Расшифровка.Вставить("ВидЗадолженности", "Дебиторская");
	Расшифровка.Вставить("ИмяОтчетаДляРасшифровкиПоДокументам","ЗадолженностьПоКонтрагентам");
	ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОтчет);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Транспонировать"
//
Процедура КоманднаяПанельФормыТранспонировать(Кнопка)
	
	Транспонировать();
	
	ОбновитьОтчет();
	
КонецПроцедуры

// Процедура - обработчик изменения даты начала периода
//
Процедура ДатаНачПриИзменении(Элемент)
	
	НП.УстановитьПериод(ДатаНач, КонецДня(ДатаКон), Истина);
	
КонецПроцедуры

// Процедура - обработчик изменения даты конца периода
//
Процедура ДатаКонПриИзменении(Элемент)
	
	НП.УстановитьПериод(ДатаНач, КонецДня(ДатаКон), Истина);
	
КонецПроцедуры

СписокТиповДиаграмм = Новый СписокЗначений;

// Виды диаграмм (доступны все, кроме биржевых)
СписокТиповДиаграмм.Добавить(ТипДиаграммы.Круговая, "Круговая");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.КруговаяОбъемная, "Круговая объемная");

СписокТиповДиаграмм.Добавить(ТипДиаграммы.Гистограмма, "Гистограмма");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаОбъемная, "Гистограмма объемная");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаГоризонтальная, "Гистограмма горизонтальная");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная, "Гистограмма горизонтальная объемная");

СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаСНакоплением, "Гистограмма с накоплением");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаСНакоплениемОбъемная, "Гистограмма с накоплением объемная");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаСНакоплениемГоризонтальная, "Гистограмма с накоплением горизонтальная");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная, "Гистограмма с накоплением горизонтальная объемная");

СписокТиповДиаграмм.Добавить(ТипДиаграммы.График, "График");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГрафикПоШагам, "График по шагам");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГрафикСОбластями, "График с областями");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ГрафикСОбластямиИНакоплением, "График с областями и накоплением");

СписокТиповДиаграмм.Добавить(ТипДиаграммы.Изометрическая, "Изометрическая");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ИзометрическаяЛента, "Изометрическая лента");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ИзометрическаяНепрерывная, "Изометрическая непрерывная");
СписокТиповДиаграмм.Добавить(ТипДиаграммы.ИзометрическаяПирамида, "Изометрическая пирамида");

ЭлементыФормы.ТипДиаграммы.СписокВыбора = СписокТиповДиаграмм;

ДокументРезультат = Новый ТабличныйДокумент;
ЭлементыФормы.Диаграмма.Очистить();

ЗаполнитьПоляОсновногоРеквизита(ЭтотОтчет.ОбщийОтчет);