
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Все возможные показатели
Перем ПоказателиЗапроса;

Перем ТаблицаИзмененийСтадий;

Перем ТаблицаИзмененийСтадийМенеджера;

Перем КоличествоСправочникаКонтрагенты;
Перем КоличествоСправочникаКЛ;

// Список имен показателей отчета
Перем мПоказатели;

// Количество строк заголовка поля табличного документа
Перем мКоличествоВыведенныхСтрокЗаголовка Экспорт;

// Настройка периода
Перем НП Экспорт;

Перем мСтруктураТаблицДанныхДиаграммы Экспорт;

Перем мНаименованиеВалютыУпрУчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует строку представления периода отчета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция СформироватьСтрокуПериода() Экспорт

	ОписаниеПериода = "";
	
	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНачала = '00010101000000' И ДатаКонца = '00010101000000' Тогда

		ОписаниеПериода     = "Период не установлен";

	Иначе

		Если ДатаНачала = '00010101000000' ИЛИ ДатаКонца = '00010101000000' Тогда

			ОписаниеПериода = "Период: " + Формат(ДатаНачала, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
							+ " - "      + Формат(ДатаКонца, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе

			Если ДатаНачала <= ДатаКонца Тогда
				ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ДатаКонца), "ФП = Истина");
			Иначе
				ОписаниеПериода = "Неправильно задан период!"
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ОписаниеПериода;
	
КонецФункции // ()

// Функция преобразует ВидСравнения в строку и формирует строку для шапки отчета
// 
// Параметры 
//  ВыбВидСравнения - ВидСравнения, исходное значение вида сравнения
//  ЗначениеОтбора - возможные значения отборов, которые надо вставить в строку возврата
//
Функция СтрокаОтборов(ВыбВидСравнения, ЗначениеОтбора)
	
	СтрокаВозврата = "";
	
	Если ВыбВидСравнения = ВидСравнения.Равно Тогда
		СтрокаВозврата = СтрокаВозврата + "равно ";
	ИначеЕсли ВыбВидСравнения = ВидСравнения.НеРавно Тогда
		СтрокаВозврата = СтрокаВозврата + "не равно ";
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ВСписке Тогда
		СтрокаВозврата = СтрокаВозврата + "одно из: ";
	ИначеЕсли ВыбВидСравнения = ВидСравнения.НеВСписке Тогда
		СтрокаВозврата = СтрокаВозврата + "все, кроме: ";
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
		СтрокаВозврата = СтрокаВозврата + "одно из (по иерархии): ";
	ИначеЕсли ВыбВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		СтрокаВозврата = СтрокаВозврата + "все, кроме (по иерархии): ";
	КонецЕсли; 

	Если ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
		СтрокаВозврата = СтрокаВозврата + "[";
		Для а=0 По ЗначениеОтбора.Количество() - 1 Цикл
			СтрокаВозврата = СтрокаВозврата + СокрЛП(Строка(ЗначениеОтбора[а].Значение))+?(а=ЗначениеОтбора.Количество() - 1,"",", ");
		КонецЦикла; 
		СтрокаВозврата = СтрокаВозврата + "]";
	Иначе
		СтрокаВозврата = СтрокаВозврата + СокрЛП(Строка(ЗначениеОтбора));
	КонецЕсли; 

	Возврат СтрокаВозврата;
	
КонецФункции // СтрокаОтборов()

// Функция возвращает Строку Вида отбора для запроса
// 
// Параметры
// ВидОтбора - ВидОтбора
// ЗначениеОтбора - Значение отбора запроса
// 
// Возвращаемое значение 
//  Строка для запроса
Функция ВозвратитьСтрокуВидаОтбора(ВидОтбора, ЗначениеОтбора)

	СтрокаВозврата = "";
	Если ВидОтбора = ВидСравнения.Равно Тогда
		СтрокаВозврата = Строка("= "+ЗначениеОтбора);
	ИначеЕсли ВидОтбора = ВидСравнения.НеРавно Тогда
		СтрокаВозврата = Строка("<> "+ЗначениеОтбора);
	ИначеЕсли ВидОтбора = ВидСравнения.ВСписке Тогда
		СтрокаВозврата = Строка("В ("+ЗначениеОтбора+")");
	ИначеЕсли ВидОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
		СтрокаВозврата = Строка("В ИЕРАРХИИ ("+ЗначениеОтбора+")");
	ИначеЕсли ВидОтбора = ВидСравнения.НеВСписке Тогда
		СтрокаВозврата = Строка("НЕ В ("+ЗначениеОтбора+")");
	ИначеЕсли ВидОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
		СтрокаВозврата = Строка("НЕ В ИЕРАРХИИ ("+ЗначениеОтбора+")");
	КонецЕсли;

	Возврат СтрокаВозврата;
	
КонецФункции // ВозвратитьСтрокуВидаОтбора()

// Определяет пустую ссылку одного из типов значений
// Параметры
//  ОписаниеТиповЗначения - Описание типов
//
// Возвращаемое значение:
//   Пустая ссылка (справочник, перечисление)
//
Функция ОпределитьПустоеЗначениеТипа(ОписаниеТиповЗначения) Экспорт

	Если ТипЗнч(ОписаниеТиповЗначения) = Тип("ОписаниеТипов") Тогда
		
		МассивТипов = ОписаниеТиповЗначения.Типы();
		Для каждого Тип Из МассивТипов Цикл
		
			Если Тип <> Тип("СписокЗначений") Тогда
			
				Возврат Новый(Тип);
			
			КонецЕсли; 
		
		КонецЦикла; 

	Иначе

		Возврат Неопределено;
		
	КонецЕсли; 

КонецФункции //()

// Процедура преобразовывает значения реквизитов табличных частей отчета
// в таблицы значений
// 
// Параметры
//  НЕТ
// 
// Возвращаемое значение
//  НЕТ
Процедура РасписатьРеквизиты()
	
	мПоказатели.Очистить();
	
	// Показатели
	ТаблицаСписокВсехПоказателей = ПоказателиОтчета.Выгрузить();
	Для каждого Строки Из ТаблицаСписокВсехПоказателей Цикл
		Если Строки.ИспользованиеПоказателя Тогда
			мПоказатели.Добавить(Строки.ИмяПоказателя, Строки.ПредставлениеПоказателя);
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Процедура ИзменитьВидимостьЗаголовка(Таб) Экспорт

	ОбластьВидимости = Таб.Область(1,,мКоличествоВыведенныхСтрокЗаголовка,);
	ОбластьВидимости.Видимость = ПоказыватьЗаголовок;

КонецПроцедуры

// Функция рассчитывает процент одного числа от другого
//
// Параметры
//  Чего - Число, процент которого необходимо рассчитать
//  ОтЧего - Число, процент ОТ которого необходимо рассчитать
//
// Возвращаемое значение:
//   Число
//
Функция ПосчитатьПроцент(Чего, ОтЧего)

	Если ОтЧего = Неопределено ИЛИ ОтЧего = 0 Тогда
	
		РассчитанныйПроцент = 0;

	Иначе

		РассчитанныйПроцент = (Чего/ОтЧего)*100;
	
	КонецЕсли; 

	Возврат РассчитанныйПроцент;
	
КонецФункции // ПосчитатьПроцент()

// Функция определяет необходимость вывода значений показателей
//
// Параметры
//  ИмяПоказателя - Строка, имя показателя
//
// Возвращаемое значение:
//   Булево
//
Функция НеобходимостьПоказателя(ИмяПоказателя)

	ЗначениеПроверки = Истина;
	
	Если (ИмяПоказателя = "КоличествоЗаполненныхВидовКИКонтрагентов"
		 ИЛИ ИмяПоказателя = "КоличествоЗаполненныхВидовКИКонтактныхЛиц")
		 И мПоказатели.НайтиПоЗначению("ПолнотаБазыДанныхКонтактнойИнформации") = Неопределено Тогда
	
		ЗначениеПроверки = Ложь;

	ИначеЕсли ИмяПоказателя = "Стадия"
		 И мПоказатели.НайтиПоЗначению("СтадииПокупателей") = Неопределено Тогда
	
		ЗначениеПроверки = Ложь;

	ИначеЕсли ИмяПоказателя = "КоэфУдержания"
		 И мПоказатели.НайтиПоЗначению("КоэффициентУдержанияПокупателей") = Неопределено Тогда
	
		ЗначениеПроверки = Ложь;

	ИначеЕсли (ИмяПоказателя = "КоличествоВходящихСобытий"
		 ИЛИ ИмяПоказателя = "КоличествоИсходящихСобытий")
		 И мПоказатели.НайтиПоЗначению("КоличествоСобытий") = Неопределено Тогда
	
		ЗначениеПроверки = Ложь;

	ИначеЕсли (ИмяПоказателя = "КоличествоЗаказов"
		 ИЛИ ИмяПоказателя = "СуммаЗаказа"
		 ИЛИ ИмяПоказателя = "СуммаОплатыЗаказа"
		 ИЛИ ИмяПоказателя = "СуммаОтгрузкиЗаказа")
		 И мПоказатели.НайтиПоЗначению("ВыполнениеЗаказов") = Неопределено Тогда
	
		ЗначениеПроверки = Ложь;

	ИначеЕсли (ИмяПоказателя = "СуммаЗакрытияЗаказовВсего"
		 ИЛИ ИмяПоказателя = "СуммаЗакрытияЗаказовСПричиной")
		 И мПоказатели.НайтиПоЗначению("СуммаЗакрытияЗаказов") = Неопределено Тогда
	
		ЗначениеПроверки = Ложь;

	ИначеЕсли ИмяПоказателя = "СуммаВыручки"
		 И мПоказатели.НайтиПоЗначению("СуммаВыручки") = Неопределено Тогда
	
		ЗначениеПроверки = Ложь;

	ИначеЕсли ИмяПоказателя = "СуммаПрибыли"
		 И мПоказатели.НайтиПоЗначению("СуммаПрибыли") = Неопределено Тогда
	
		ЗначениеПроверки = Ложь;

	ИначеЕсли ИмяПоказателя = "СуммаОплаты"
		 И мПоказатели.НайтиПоЗначению("СуммаОплат") = Неопределено Тогда
	
		ЗначениеПроверки = Ложь;

	Иначе

		ЗначениеПроверки = Истина;
		
	КонецЕсли; 

	Возврат ЗначениеПроверки;

КонецФункции // НеобходимостьПоказателя()

// Функция определяет показатели изменения стадий контрагентов
//  по с равнению с датой начала отчета
//
// Параметры
//  ВыбКонтрагент - СправочникСсылка.Контрагенты, объект определения
//                  показателя изменения стадии
//  ТекущаяСтадия - Текущая стадия взаимоотношений с контрагентм
//  ТекущийКласс  - Текущий подкласс стадии ПостоянныйПокупатель
//
// Возвращаемое значение:
//   Число:
//      0 - не именилась
//      1 - изменилась в сторону увеличения
//     -1 - изменилась в сторону уменьшения
//
Функция ПолучитьПоказательИзмененияСтадии(ВыбКонтрагент, ТекущаяСтадия, ТекущийКласс, СтадияНачало, КлассНачало)

	Если ВыбКонтрагент = NULL
		 ИЛИ ВыбКонтрагент = Неопределено
		 ИЛИ ТипЗнч(ВыбКонтрагент) <> Тип("СправочникСсылка.Контрагенты")
		 ИЛИ ТекущаяСтадия = NULL 
		 ИЛИ ТекущийКласс = NULL 
		 ИЛИ ТекущаяСтадия = Неопределено 
		 ИЛИ ТекущийКласс = Неопределено
		 ИЛИ ТипЗнч(ТекущаяСтадия) <> Тип("ПеречислениеСсылка.СтадииВзаимоотношенийСПокупателями") Тогда
		Возврат 0;
	ИначеЕсли ВыбКонтрагент.Пустая()Тогда
		Возврат 0;
	Иначе

		Если СтадияНачало = NULL ИЛИ СтадияНачало = Неопределено ИЛИ КлассНачало = NULL ИЛИ КлассНачало = Неопределено Тогда
		
			Возврат 1;
			
		Иначе

			Если ТипЗнч(СтадияНачало) = Тип("ПеречислениеСсылка.СтадииВзаимоотношенийСПокупателями")
			   И НЕ СтадияНачало.Пустая()
			   И СтадияНачало = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель
			   И ТипЗнч(КлассНачало) = Тип("ПеречислениеСсылка.XYZКлассификация")
			   И НЕ КлассНачало.Пустая() Тогда
			
				ПрошлоеСостояние = КлассНачало;

			ИначеЕсли ТипЗнч(СтадияНачало) = Тип("ПеречислениеСсылка.СтадииВзаимоотношенийСПокупателями")
			   И НЕ СтадияНачало.Пустая() Тогда

				ПрошлоеСостояние = СтадияНачало;

			Иначе

				Возврат 0;
			
			КонецЕсли; 
		
		КонецЕсли; 

		Если ТекущаяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель Тогда
			Если ТипЗнч(ТекущийКласс) = Тип("ПеречислениеСсылка.XYZКлассификация") И НЕ ТекущийКласс.Пустая() Тогда 
				ТекущееСостояние = ТекущийКласс;
			Иначе
				Возврат 0;
			КонецЕсли;
		Иначе
			ТекущееСостояние = ТекущаяСтадия;
		КонецЕсли;
		
		Если ПрошлоеСостояние = ТекущееСостояние Тогда
		
			Возврат 0;

		Иначе

			Если ТекущееСостояние = Перечисления.XYZКлассификация.XКласс Тогда
			
				Возврат 1;
			
			ИначеЕсли ТекущееСостояние = Перечисления.XYZКлассификация.YКласс Тогда

				Если ПрошлоеСостояние = Перечисления.XYZКлассификация.XКласс Тогда
				
					Возврат -1;

				Иначе

					Возврат 1;
				
				КонецЕсли; 
				
			ИначеЕсли ТекущееСостояние = Перечисления.XYZКлассификация.ZКласс Тогда

				Если ПрошлоеСостояние = Перечисления.XYZКлассификация.XКласс
				 ИЛИ ПрошлоеСостояние = Перечисления.XYZКлассификация.YКласс Тогда
				
					Возврат -1;

				Иначе

					Возврат 1;
				
				КонецЕсли; 
				
			ИначеЕсли ТекущееСостояние = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель Тогда

				Возврат 1;
				
			ИначеЕсли ТекущееСостояние = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель Тогда

				Возврат 0;
				
			ИначеЕсли ТекущееСостояние = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель Тогда

				Возврат -1;
				
			КонецЕсли; 
		
		КонецЕсли;

		Возврат 0;
		
	КонецЕсли; 

КонецФункции // ПолучитьПоказательИзмененияСтадии()

// Функция возврашает строку упорядочивания для текста запроса
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
Функция СтрокаУпорядочиванияЗапроса()

	СтрокаВозврата = "УПОРЯДОЧИТЬ ПО 
					 |	";

	ПервыйПоказатель = мПоказатели[0].Значение;

	Если ПервыйПоказатель = "ПолнотаБазыДанныхКонтактнойИнформации" Тогда
		СтрокаВозврата = СтрокаВозврата + "КоличествоЗаполненныхВидовКИКонтрагентов";
	ИначеЕсли ПервыйПоказатель = "СтадииПокупателей" Тогда
		СтрокаВозврата = СтрокаВозврата + "Стадия";
	ИначеЕсли ПервыйПоказатель = "КоэффициентУдержанияПокупателей" Тогда
		СтрокаВозврата = СтрокаВозврата + "Контрагент";
	ИначеЕсли ПервыйПоказатель = "КоличествоСобытий" Тогда
		СтрокаВозврата = СтрокаВозврата + "КоличествоВходящихСобытий";
	ИначеЕсли ПервыйПоказатель = "ВыполнениеЗаказов" Тогда
		СтрокаВозврата = СтрокаВозврата + "КоличествоЗаказов";
	ИначеЕсли ПервыйПоказатель = "СуммаЗакрытияЗаказов" Тогда
		СтрокаВозврата = СтрокаВозврата + "СуммаЗакрытияЗаказовВсего";
	ИначеЕсли ПервыйПоказатель = "СуммаВыручки" Тогда
		СтрокаВозврата = СтрокаВозврата + "СуммаВыручки";
	ИначеЕсли ПервыйПоказатель = "СуммаПрибыли" Тогда
		СтрокаВозврата = СтрокаВозврата + "СуммаПрибыли";
	ИначеЕсли ПервыйПоказатель = "СуммаОплат" Тогда
		СтрокаВозврата = СтрокаВозврата + "СуммаОплаты";
	КонецЕсли; 

	СтрокаВозврата = СтрокаВозврата + " УБЫВ
					 |	";

	Возврат СтрокаВозврата;

КонецФункции // СтрокаУпорядочиванияЗапроса()

// Функция преобразовывает значение к числу и округляет до 2-х знаков
//
// Параметры
//  ВходящееЗначение - Значение которое необходимо преобразовать
//
// Возвращаемое значение:
//   Число
//
Функция ПреобразоватьКЧислу(ВходящееЗначение)

	Если ВходящееЗначение = NULL Тогда
	
		Возврат 0;

	Иначе

		Возврат Окр(Число(ВходящееЗначение), 2);
	
	КонецЕсли;

КонецФункции // ПреобразоватьКЧислу()

// Приводит число к определенному формату
//
// Параметры
//  ВходящееЧисло - Число, которое необходимо преобразовать
//  ЦелаяЧасть - Число знаков целой части
//  ДробнаяЧасть - Число знаков дробной части
//
// Возвращаемое значение:
//   Строка - отформатированное значение числа
//
Функция ПривестиКФормату(ВходящееЧисло, ЦелаяЧасть, ДробнаяЧасть, ПоказыватьНоль = Ложь)

	Если ВходящееЧисло = 0 И НЕ ПоказыватьНоль Тогда
	
		Возврат "";

	Иначе

		Возврат СокрЛП(Формат(ВходящееЧисло, "ЧЦ=" + Строка(ЦелаяЧасть) + "; ЧДЦ=" + Строка(ДробнаяЧасть) + "; ЧРД=,; ЧН="));
	
	КонецЕсли; 

КонецФункции // ПривестиКФормату()

// Функция формируе таблицу значений с данными об изменениях
// стадий взаимоотношений с контрагентами
// Параметры
//  РезультатЗапроса - Результат выполнения запроса
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция СформироватьТаблицуИзмененияСтадий(РезультатЗапроса)

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Менеджер");
	ТЗ.Колонки.Добавить("Контрагент");
	ТЗ.Колонки.Добавить("НетИзменения");
	ТЗ.Колонки.Добавить("Растет");
	ТЗ.Колонки.Добавить("Падает");
	ТЗ.Колонки.Добавить("Потерянный");
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Менеджер");
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
			Продолжить;
		КонецЕсли; 
		ВыборкаКонтрагентов = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Контрагент");
		Пока ВыборкаКонтрагентов.Следующий() Цикл
			Если ВыборкаКонтрагентов.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
				Продолжить;
			КонецЕсли; 
			ВыбокаКонечных = ВыборкаКонтрагентов.Выбрать();
			Пока ВыбокаКонечных.Следующий() Цикл
				Если ВыбокаКонечных.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
					Продолжить;
				КонецЕсли; 
				Если ВыбокаКонечных.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
					СтрокаТЗ = ТЗ.Добавить();
					СтрокаТЗ.Менеджер          = ВыбокаКонечных.Менеджер;
					СтрокаТЗ.Контрагент        = ВыбокаКонечных.Контрагент;
					ПоказательИзменения = ПолучитьПоказательИзмененияСтадии(ВыбокаКонечных.Контрагент, ВыбокаКонечных.Стадия, ВыбокаКонечных.КлассПостоянногоПокупателя, ВыбокаКонечных.СтадияНачало, ВыбокаКонечных.КлассПостоянногоПокупателяНачало);
					Если ВыбокаКонечных.Стадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель И ВыбокаКонечных.СтадияНачало <> Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель Тогда
						СтрокаТЗ.Потерянный = 1;
					Иначе
						СтрокаТЗ.Потерянный = 0;
					КонецЕсли; 
					Если ПоказательИзменения = 0 Тогда
						СтрокаТЗ.НетИзменения = 1;
						СтрокаТЗ.Растет       = 0;
						СтрокаТЗ.Падает       = 0;
					ИначеЕсли ПоказательИзменения = 1 Тогда
						СтрокаТЗ.НетИзменения = 0;
						СтрокаТЗ.Растет       = 1;
						СтрокаТЗ.Падает       = 0;
					ИначеЕсли ПоказательИзменения = -1 Тогда
						СтрокаТЗ.НетИзменения = 0;
						СтрокаТЗ.Растет       = 0;
						СтрокаТЗ.Падает       = 1;
					КонецЕсли; 
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла;
	КонецЦикла;

	Возврат ТЗ;

КонецФункции // СформироватьТаблицуИзмененияСтадий()

// Функция собирает текст запроса и устанавливает параметры запроса
// 
// Параметры
// Запрос - Запрос
// 
// Возвращаемое значение
//  Булево - собран ли текст запроса
Функция СобратьТекстЗапроса(Запрос)

	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ";

	ПоляЗапроса = "";
	ТаблицыЗапроса = "";
	ТекстИтогов = "";

	Если мПоказатели.НайтиПоЗначению("ПолнотаБазыДанныхКонтактнойИнформации") <> Неопределено Тогда
	
		ПоляЗапроса = ПоляЗапроса + "
		|	КонтактнаяИнформацияКонтрагентов.КоличествоЗаполненныхВидовКИ КАК КоличествоЗаполненныхВидовКИКонтрагентов,
		|	КонтактнаяИнформацияКонтактныхЛиц.КоличествоЗаполненныхВидовКИ КАК КоличествоЗаполненныхВидовКИКонтактныхЛиц,";

		Запрос.УстановитьПараметр("КонтактноеЛицоКонтрагента", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
		
		ТаблицыЗапроса = ТаблицыЗапроса + "
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|	(
		|	ВЫБРАТЬ
		|		КонтактнаяИнформация.Объект КАК Контрагент,
		|		КОЛИЧЕСТВО(КонтактнаяИнформация.Вид) КАК КоличествоЗаполненныхВидовКИ
		|	ИЗ
		|		РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		
		|	ГДЕ
		|		
		|		КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
		|		И
		|		КонтактнаяИнформация.Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации
		|		
		|	СГРУППИРОВАТЬ ПО
		|
		|		КонтактнаяИнформация.Объект
		|		
		|		
		|	) КАК КонтактнаяИнформацияКонтрагентов
		|	
		|ПО
		|
		|	КонтактнаяИнформацияКонтрагентов.Контрагент = Контрагенты.Ссылка
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|	(
		|	
		|	ВЫБРАТЬ
		|		КонтактныеЛица.ОбъектВладелец КАК Контрагент,
		|		КОЛИЧЕСТВО(КонтактнаяИнформация.Вид) КАК КоличествоЗаполненныхВидовКИ
		|	ИЗ
		|		РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|	
		|	ПРАВОЕ СОЕДИНЕНИЕ
		|		Справочник.КонтактныеЛица КАК КонтактныеЛица
		|	ПО 
		|		КонтактныеЛица.Ссылка = КонтактнаяИнформация.Объект
		|	
		|	ГДЕ
		|		КонтактнаяИнформация.Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации
		|		И
		|		КонтактныеЛица.ВидКонтактногоЛица = &КонтактноеЛицоКонтрагента
		|		
		|	СГРУППИРОВАТЬ ПО
		|		КонтактныеЛица.ОбъектВладелец
		|	
		|	) КАК КонтактнаяИнформацияКонтактныхЛиц
		|	
		|ПО
		|
		|	КонтактнаяИнформацияКонтактныхЛиц.Контрагент = Контрагенты.Ссылка
		|";

		ТекстИтогов = ТекстИтогов + "
		|	Сумма(КоличествоЗаполненныхВидовКИКонтрагентов),
		|	Сумма(КоличествоЗаполненныхВидовКИКонтактныхЛиц),
		|";
		
	КонецЕсли; 
	
	Если мПоказатели.НайтиПоЗначению("СтадииПокупателей") <> Неопределено ИЛИ мПоказатели.НайтиПоЗначению("КоэффициентУдержанияПокупателей") <> Неопределено Тогда
	
		ПоляЗапроса = ПоляЗапроса + "
		|	СтадияКонтрагента.Стадия                           КАК Стадия,
		|	СтадияКонтрагента.КлассПостоянногоПокупателя       КАК КлассПостоянногоПокупателя,
		|	СтадияКонтрагентаНачало.Стадия                     КАК СтадияНачало,
		|	СтадияКонтрагентаНачало.КлассПостоянногоПокупателя КАК КлассПостоянногоПокупателяНачало,";

		ТаблицыЗапроса = ТаблицыЗапроса + "
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|	(
		|	
		|	ВЫБРАТЬ
		|		СтадииВзаимоотношенийСПокупателямиСрезПоследних.Контрагент КАК Контрагент,
		|		СтадииВзаимоотношенийСПокупателямиСрезПоследних.Стадия КАК Стадия,
		|		СтадииВзаимоотношенийСПокупателямиСрезПоследних.КлассПостоянногоПокупателя КАК КлассПостоянногоПокупателя
		|	ИЗ
		|		РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(&ДатаКонца) КАК СтадииВзаимоотношенийСПокупателямиСрезПоследних
		|		
		|	) КАК СтадияКонтрагента
		|	
		|ПО 
		|	
		|	СтадияКонтрагента.Контрагент = Контрагенты.Ссылка
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|	(
		|	
		|	ВЫБРАТЬ
		|		СтадииВзаимоотношенийСПокупателямиСрезПоследних.Контрагент КАК Контрагент,
		|		СтадииВзаимоотношенийСПокупателямиСрезПоследних.Стадия КАК Стадия,
		|		СтадииВзаимоотношенийСПокупателямиСрезПоследних.КлассПостоянногоПокупателя КАК КлассПостоянногоПокупателя
		|	ИЗ
		|		РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(" + ?(ДатаНачала = '00010101000000', "", "&ДатаНачала") + ") КАК СтадииВзаимоотношенийСПокупателямиСрезПоследних
		|		
		|	) КАК СтадияКонтрагентаНачало
		|	
		|ПО 
		|	
		|	СтадияКонтрагентаНачало.Контрагент = Контрагенты.Ссылка
		|";

		ТекстИтогов = ТекстИтогов + "
		|	Количество(Стадия),
		|	Количество(КлассПостоянногоПокупателя),
		|";
		
	КонецЕсли; 

	Если мПоказатели.НайтиПоЗначению("КоличествоСобытий") <> Неопределено Тогда
	
		ПоляЗапроса = ПоляЗапроса + "
		|	СобытияСКлиентами.КоличествоВходящихСобытий КАК КоличествоВходящихСобытий,
		|	СобытияСКлиентами.КоличествоИсходящихСобытий КАК КоличествоИсходящихСобытий,";

		ТаблицыЗапроса = ТаблицыЗапроса + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|	(
		|	
		|	ВЫБРАТЬ
		|		События.Событие.Контрагент КАК Контрагент,
		|		СУММА(ВЫБОР КОГДА События.Событие.ТипСобытия = &ВходящееСобытие ТОГДА 1
		|		ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоВходящихСобытий,
		|		СУММА(ВЫБОР КОГДА События.Событие.ТипСобытия = &ИсходящееСобытие ТОГДА 1
		|		ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоИсходящихСобытий
		|			
		|	ИЗ
		|		РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК События
		|	
		|	ГДЕ
		|		События.Событие.ВидОбъекта = &ВыбВидОбъектаСобытияКонтрагент
		|";
		
		Если ДатаНачала = '00010101000000' И ДатаКонца = '00010101000000' Тогда
		
		ИначеЕсли ДатаКонца = '00010101000000' Тогда

			ТаблицыЗапроса = ТаблицыЗапроса + "
			|		И
			|		События.Событие.Дата >= &ДатаНачала
			|";
			
		Иначе
			
			ТаблицыЗапроса = ТаблицыЗапроса + "
			|		И
			|		События.Событие.Дата >= &ДатаНачала И События.Событие.Дата <= &ДатаКонца
			|";
			
		КонецЕсли; 
		
		ТаблицыЗапроса = ТаблицыЗапроса + "
		|		
		|	СГРУППИРОВАТЬ ПО
		|
		|		События.Событие.Контрагент
		|			
		|	) КАК СобытияСКлиентами
		|	
		|ПО
		|
		|	СобытияСКлиентами.Контрагент = Контрагенты.Ссылка
		|";

		ТекстИтогов = ТекстИтогов + "
		|	Сумма(КоличествоВходящихСобытий),
		|	Сумма(КоличествоИсходящихСобытий),
		|";
	
	КонецЕсли; 

	Если мПоказатели.НайтиПоЗначению("СуммаЗакрытияЗаказов") <> Неопределено Тогда
	
		ПоляЗапроса = ПоляЗапроса + "
		|	ПричиныЗакрытияЗаказов.СуммаУпрУчета      КАК СуммаЗакрытияЗаказовСПричиной,
		|	ЗаказыПокупателейЗакрытияВнешняя.СуммаУпр КАК СуммаЗакрытияЗаказовВсего,";

		ТаблицыЗапроса = ТаблицыЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|	(
		|	ВЫБРАТЬ
		|		ПричиныЗакрытияЗаказов.Заказ.Контрагент КАК Контрагент,
		|		СУММА(ПричиныЗакрытияЗаказов.СуммаУпрУчета) КАК СуммаУпрУчета
		|	
		|	ИЗ
		|		РегистрСведений.ПричиныЗакрытияЗаказов КАК ПричиныЗакрытияЗаказов
		|	ГДЕ
		|		ПричиныЗакрытияЗаказов.Заказ ССЫЛКА Документ.ЗаказПокупателя
		|";
		
		Если ДатаНачала = '00010101000000' И ДатаКонца = '00010101000000' Тогда
		
		ИначеЕсли ДатаКонца = '00010101000000' Тогда

			ТаблицыЗапроса = ТаблицыЗапроса + "
			|		И
			|		ПричиныЗакрытияЗаказов.Регистратор.Дата >= &ДатаНачала
			|";
			
		Иначе
			
			ТаблицыЗапроса = ТаблицыЗапроса + "
			|		И
			|		ПричиныЗакрытияЗаказов.Регистратор.Дата >= &ДатаНачала И ПричиныЗакрытияЗаказов.Регистратор.Дата <= &ДатаКонца
			|";
			
		КонецЕсли; 
		
		ТаблицыЗапроса = ТаблицыЗапроса + "
		|		
		|	СГРУППИРОВАТЬ ПО
		|		ПричиныЗакрытияЗаказов.Заказ.Контрагент
		|		
		|	) КАК ПричиныЗакрытияЗаказов
		|ПО
		|	ПричиныЗакрытияЗаказов.Контрагент = Контрагенты.Ссылка
		|";
		
		ТаблицыЗапроса = ТаблицыЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|	(
		|	ВЫБРАТЬ
		|		ЗаказыПокупателейЗакрытия.ДоговорКонтрагента.Владелец КАК Контрагент,
		|		СУММА(ЗаказыПокупателейЗакрытия.СуммаУпр) КАК СуммаУпр
		|		
		|	ИЗ
		|		РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателейЗакрытия
		|	ГДЕ
		|		
		|		ЗаказыПокупателейЗакрытия.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
		|		И
		|		ЗаказыПокупателейЗакрытия.Регистратор ССЫЛКА Документ.ЗакрытиеЗаказовПокупателей
		|";
		
		Если ДатаНачала = '00010101000000' И ДатаКонца = '00010101000000' Тогда
		
		ИначеЕсли ДатаКонца = '00010101000000' Тогда

			ТаблицыЗапроса = ТаблицыЗапроса + "
			|		И
			|		ЗаказыПокупателейЗакрытия.Период >= &ДатаНачала
			|";
			
		Иначе
			
			ТаблицыЗапроса = ТаблицыЗапроса + "
			|		И
			|		ЗаказыПокупателейЗакрытия.Период >= &ДатаНачала И ЗаказыПокупателейЗакрытия.Период <= &ДатаКонца
			|";
			
		КонецЕсли; 
		
		ТаблицыЗапроса = ТаблицыЗапроса + "
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказыПокупателейЗакрытия.ДоговорКонтрагента.Владелец
		|	) КАК ЗаказыПокупателейЗакрытияВнешняя
		|	
		|ПО
		|	ЗаказыПокупателейЗакрытияВнешняя.Контрагент = Контрагенты.Ссылка
		|";
		
		ТекстИтогов = ТекстИтогов + "
		|	Сумма(СуммаЗакрытияЗаказовВсего),
		|	Сумма(СуммаЗакрытияЗаказовСПричиной),
		|";
	
	КонецЕсли; 

	Если мПоказатели.НайтиПоЗначению("ВыполнениеЗаказов") <> Неопределено Тогда
	
		ПоляЗапроса = ПоляЗапроса + "
		|	ЗаказыПокупателей.КоличествоЗаказов   КАК КоличествоЗаказов,
		|	ЗаказыПокупателей.СуммаЗаказа         КАК СуммаЗаказа,
		|	ЗаказыПокупателей.СуммаОплатыЗаказа   КАК СуммаОплатыЗаказа,
		|	ЗаказыПокупателей.СуммаОтгрузкиЗаказа КАК СуммаОтгрузкиЗаказа,";

		ТаблицыЗапроса = ТаблицыЗапроса + "
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|	(
		|	
		|	ВЫБРАТЬ
		|	
		|		ЗаказыПокупателя.Контрагент КАК Контрагент,
		|		Количество(ЗаказыПокупателя.Ссылка) КАК КоличествоЗаказов,
		|		Сумма(
		|			ВЫБОР КОГДА ЗаказыПокупателя.ВалютаДокумента = &ВалютаРеглУчета ТОГДА 
		|				ЗаказыПокупателя.СуммаДокумента / КурсыВалютыУпрУчета.Курс
		|			ИНАЧЕ
		|				ЗаказыПокупателя.СуммаДокумента * ЗаказыПокупателя.КурсВзаиморасчетов / КурсыВалютыУпрУчета.Курс
		|			КОНЕЦ
		|			) КАК СуммаЗаказа,
		|		Сумма(КонтрагентыВзаиморасчетыКомпанииОбороты.СуммаУпрРасход) КАК СуммаОплатыЗаказа,
		|		Сумма(КонтрагентыВзаиморасчетыКомпанииОбороты.СуммаУпрПриход) КАК СуммаОтгрузкиЗаказа
		|		
		|	ИЗ
		|		Документ.ЗаказПокупателя КАК ЗаказыПокупателя
		|
		|
		|	ПОЛНОЕ СОЕДИНЕНИЕ
		|	
		|	(
		|	
		|		ВЫБРАТЬ
		|			КурсыВалют.Курс КАК Курс,
		|			КурсыВалютВнутр.ЗаказКонтрагента КАК ЗаказПокупателя
		|		ИЗ
		|			РегистрСведений.КурсыВалют КАК КурсыВалют
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|
		|			(ВЫБРАТЬ
		|				Максимум(КурсыВалют1.Период) КАК МаксимальнаяДата,
		|				ЗаказыКонтрагентов.ДокументЗаказПокупателя КАК ЗаказКонтрагента
		|			ИЗ
		|				РегистрСведений.КурсыВалют КАК КурсыВалют1
		|				
		|			ПРАВОЕ СОЕДИНЕНИЕ
		|			(
		|				ВЫБРАТЬ
		|				
		|					ЗаказыПокупателя.Дата КАК ДатаДок,
		|					ЗаказыПокупателя.Ссылка КАК ДокументЗаказПокупателя
		|					
		|				ИЗ
		|					Документ.ЗаказПокупателя КАК ЗаказыПокупателя
		|					
		|				ГДЕ
		|					ЗаказыПокупателя.Проведен = Истина
		|					И
		|					ЗаказыПокупателя.ДоговорКонтрагента <> &ПустойДоговор
		|					И
		|					ЗаказыПокупателя.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ВыбВедениеВзаиморасчетовПоДоговорам
		|";

		Если ДатаНачала = '00010101000000' И ДатаКонца = '00010101000000' Тогда
		
		ИначеЕсли ДатаКонца = '00010101000000' Тогда

			ТаблицыЗапроса = ТаблицыЗапроса + "
			|					И
			|					ЗаказыПокупателя.Дата >= &ДатаНачала
			|";
			
		Иначе
			
			ТаблицыЗапроса = ТаблицыЗапроса + "
			|					И
			|					(ЗаказыПокупателя.Дата >= &ДатаНачала И ЗаказыПокупателя.Дата <= &ДатаКонца)
			|";
			
		КонецЕсли; 
		
		ТаблицыЗапроса = ТаблицыЗапроса + "
		|					
		|			) КАК ЗаказыКонтрагентов
		|
		|			ПО 
		|			
		|				КурсыВалют1.Период <= ЗаказыКонтрагентов.ДатаДок
		|				
		|			СГРУППИРОВАТЬ ПО
		|			
		|				ЗаказыКонтрагентов.ДокументЗаказПокупателя
		|				
		|			) КАК КурсыВалютВнутр 
		|
		|		ПО
		|			КурсыВалютВнутр.МаксимальнаяДата = КурсыВалют.Период
		|			
		|		ГДЕ
		|
		|			КурсыВалют.Валюта = &ВыбВалюта 
		|	
		|	) КАК КурсыВалютыУпрУчета
		|		
		|	
		|	ПО
		|	
		|		КурсыВалютыУпрУчета.ЗаказПокупателя = ЗаказыПокупателя.Ссылка
		|		
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты КАК КонтрагентыВзаиморасчетыКомпанииОбороты
		|			
		|	ПО 
		|
		|		КонтрагентыВзаиморасчетыКомпанииОбороты.Сделка = ЗаказыПокупателя.Ссылка
		|
		|	ГДЕ
		|		ЗаказыПокупателя.Проведен = Истина
		|		И
		|		ЗаказыПокупателя.ДоговорКонтрагента <> &ПустойДоговор
		|		И
		|		ЗаказыПокупателя.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ВыбВедениеВзаиморасчетовПоДоговорам
		|";

		Если ДатаНачала = '00010101000000' И ДатаКонца = '00010101000000' Тогда
		
		ИначеЕсли ДатаКонца = '00010101000000' Тогда

			ТаблицыЗапроса = ТаблицыЗапроса + "
			|		И
			|		ЗаказыПокупателя.Дата >= &ДатаНачала
			|";
			
		Иначе
			
			ТаблицыЗапроса = ТаблицыЗапроса + "
			|		И
			|		(ЗаказыПокупателя.Дата >= &ДатаНачала И ЗаказыПокупателя.Дата <= &ДатаКонца)
			|";
			
		КонецЕсли; 
		
		ТаблицыЗапроса = ТаблицыЗапроса + "
		|	СГРУППИРОВАТЬ ПО
		|
		|		Контрагент
		|			
		|	) КАК ЗаказыПокупателей
		|	
		|ПО
		|
		|	ЗаказыПокупателей.Контрагент = Контрагенты.Ссылка
		|";

		ТекстИтогов = ТекстИтогов + "
		|	Сумма(КоличествоЗаказов),
		|	Сумма(СуммаЗаказа),
		|	Сумма(СуммаОплатыЗаказа),
		|	Сумма(СуммаОтгрузкиЗаказа),
		|";
		
	КонецЕсли; 

	Если мПоказатели.НайтиПоЗначению("СуммаВыручки") <> Неопределено
		 ИЛИ мПоказатели.НайтиПоЗначению("СуммаПрибыли") <> Неопределено Тогда
		
		ПоляЗапроса = ПоляЗапроса + "
		|	ПродажиКомпании.СуммаПрибыли КАК СуммаПрибыли,
		|	ПродажиКомпании.СуммаВыручки КАК СуммаВыручки,";
		
		ТаблицыЗапроса = ТаблицыЗапроса + "
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|	(
		|	ВЫБРАТЬ
		|		Продажи.ДоговорКонтрагента.Владелец КАК Контрагент,
		|		СУММА(Продажи.СтоимостьОборот) КАК СуммаВыручки,
		|		СУММА(
		|			ВЫБОР КОГДА ЦеныСебестоимости.ЦенаСебестоимости ЕСТЬ NULL ТОГДА
		|				0
		|			ИНАЧЕ
		|				Продажи.СтоимостьОборот - (Продажи.КоличествоОборот*ЦеныСебестоимости.ЦенаСебестоимости)
		|			КОНЕЦ
		|		) КАК СуммаПрибыли
		|
		|	ИЗ
		|		РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца) КАК Продажи
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|		(
		|		ВЫБРАТЬ
		|			СуммыСебестоимости.Номенклатура КАК Номенклатура,
		|			ВЫБОР КОГДА СуммыСебестоимости.КоличествоОборот <> 0 ТОГДА
		|				СуммыСебестоимости.СтоимостьОборот / СуммыСебестоимости.КоличествоОборот
		|			ИНАЧЕ
		|				0
		|			КОНЕЦ КАК ЦенаСебестоимости
		|		ИЗ
		|			(
		|			ВЫБРАТЬ
		|				СебестоимостьПродаж.Номенклатура КАК Номенклатура,
		|				СУММА(СебестоимостьПродаж.СтоимостьОборот) КАК СтоимостьОборот,
		|				СУММА(СебестоимостьПродаж.КоличествоОборот) КАК КоличествоОборот
		|
		|			ИЗ
		|				РегистрНакопления.ПродажиСебестоимость.Обороты(&ДатаНачала, &ДатаКонца) КАК СебестоимостьПродаж
		|				
		|			СГРУППИРОВАТЬ ПО
		|				СебестоимостьПродаж.Номенклатура
		|				
		|			) КАК СуммыСебестоимости
		|			
		|		) КАК ЦеныСебестоимости
		|		
		|	ПО
		|		ЦеныСебестоимости.Номенклатура = Продажи.Номенклатура
		|		
		|	СГРУППИРОВАТЬ ПО
		|		Продажи.ДоговорКонтрагента.Владелец
		|
		|	) КАК ПродажиКомпании
		|
		|ПО 
		|
		|	ПродажиКомпании.Контрагент = Контрагенты.Ссылка
		|";
	
		ТекстИтогов = ТекстИтогов + "
		|	Сумма(СуммаВыручки),
		|	Сумма(СуммаПрибыли),
		|";
	
	КонецЕсли; 

	Если мПоказатели.НайтиПоЗначению("СуммаОплат") <> Неопределено Тогда
		
		СписокВидовОпераций = Новый СписокЗначений;
		СписокВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
		СписокВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств);
		СписокВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
		СписокВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее);
		
		Запрос.УстановитьПараметр("СписокВидовОпераций", СписокВидовОпераций);
		
		ПоляЗапроса = ПоляЗапроса + "
		|	ОплатыКомпании.СуммаОплаты КАК СуммаОплаты,";

		ТаблицыЗапроса = ТаблицыЗапроса + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|	(
		|	ВЫБРАТЬ
		|	
		|		КонтрагентыВзаиморасчетыКомпанииОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
		|		Сумма(КонтрагентыВзаиморасчетыКомпанииОбороты.СуммаУпрРасход)       КАК СуммаОплаты
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(&ДатаНачала, &ДатаКонца, Регистратор) КАК КонтрагентыВзаиморасчетыКомпанииОбороты
		|		
		|	ГДЕ
		|	
		|		КонтрагентыВзаиморасчетыКомпанииОбороты.ДоговорКонтрагента ЕСТЬ НЕ NULL
		|		И
		|		КонтрагентыВзаиморасчетыКомпанииОбороты.ДоговорКонтрагента <> &ПустойДоговор
		|		И
		|		КонтрагентыВзаиморасчетыКомпанииОбороты.Регистратор.ВидОперации В(&СписокВидовОпераций)
		|		
		|	СГРУППИРОВАТЬ ПО
		|	
		|		КонтрагентыВзаиморасчетыКомпанииОбороты.ДоговорКонтрагента.Владелец
		|		
		|	) КАК ОплатыКомпании
		|
		|ПО
		|
		|	ОплатыКомпании.Контрагент = Контрагенты.Ссылка
		|";

		ТекстИтогов = ТекстИтогов + "
		|	Сумма(СуммаОплаты),
		|";
		
	КонецЕсли; 

	ТекстЗапроса = ТекстЗапроса + ПоляЗапроса + "
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ОсновнойМенеджерПокупателя КАК Менеджер
	|	
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты" + ТаблицыЗапроса + "
	|	
	|ГДЕ 
	|
	|	Контрагенты.Покупатель = Истина
	|";

	Если ОтборМенеджер.Менеджер.Использование Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
		|	И
		|	Контрагенты.ОсновнойМенеджерПокупателя " + ВозвратитьСтрокуВидаОтбора(ОтборМенеджер.Менеджер.ВидСравнения, ("&ЗначениеОтбораМенеджер")) + "
		|";

		Запрос.УстановитьПараметр("ЗначениеОтбораМенеджер", ОтборМенеджер.Менеджер.Значение);
	
	КонецЕсли; 

	Если мПоказатели.Количество() > 0 Тогда
	
		ТекстЗапроса = ТекстЗапроса + СтрокаУпорядочиванияЗапроса();
	
	КонецЕсли; 

	ТекстИтогов = СокрЛП(ТекстИтогов);

	Если НЕ ПустаяСтрока(ТекстИтогов) Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИТОГИ
		|" + ТекстИтогов + "
		|	Количество(Контрагент) ПО ОБЩИЕ,
		|	Менеджер,
		|	Контрагент
		|";

	Иначе

		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИТОГИ ПО
		|
		|	Менеджер,
		|	Контрагент
		|";
	
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Истина;
	
КонецФункции // СобратьТекстЗапроса()

// Функция возвращает пустую строку - отступы
// 
// Параметры
//  КолВоОтступов - количество двойных пробелов - отступов
// 
// Возвращаемое значение
//  Строка отступов
Функция Отступы(КолВоОтступов)
	
	СтрокаВозврата = "";
	
	Для а=1 По КолВоОтступов Цикл
		СтрокаВозврата = СтрокаВозврата + " ";
	КонецЦикла;
	
	Возврат СтрокаВозврата;
	
КонецФункции // Отступы(ИндексТекущейГруппировки)()

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ПЕЧАТНОЙ ФОРМЫ ОТЧЕТА

// Процедура заполняет ПолеТабличногоДокумента
//
// Параметры - Таб - ПолеТабличногоДокумента
Процедура СформироватьОтчет(Таб) Экспорт

	мКоличествоВыведенныхСтрокЗаголовка = 0;
	
	РасписатьРеквизиты();

	Макет = ПолучитьМакет("Отчет");
	Таб.Очистить();

	Секция = Макет.ПолучитьОбласть("Шапка|ПервыйСтолбец");
	Секция.Параметры.СтрокаИнтервал = СформироватьСтрокуПериода();
	Таб.Вывести(Секция);
	Таб.Область(2, 2, 2, (?(мПоказатели.Количество()>2,2,мПоказатели.Количество())*2 + 2)).ПоВыделеннымКолонкам = Истина;
	мКоличествоВыведенныхСтрокЗаголовка = 4;

	Секция = Макет.ПолучитьОбласть("ШапкаГруппировки|ПервыйСтолбец");
	Если ПоказыватьПокупателей Тогда
		Секция.Параметры.СтрокаГруппировки = "Группировки строк: Менеджер, Контрагент.";
	Иначе
		Секция.Параметры.СтрокаГруппировки = "Группировки строк: Менеджер.";
	КонецЕсли; 
	Таб.Вывести(Секция);
	Таб.Область(5, 2, 5, (?(мПоказатели.Количество()>2,2,мПоказатели.Количество())*2 + 2)).ПоВыделеннымКолонкам = Истина;
	мКоличествоВыведенныхСтрокЗаголовка = мКоличествоВыведенныхСтрокЗаголовка + 1;
	
	Если ОтборМенеджер.Менеджер.Использование Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаОтбор|ПервыйСтолбец");
		Секция.Параметры.СтрокаОтбор = "Отбор: Менеджер " + СтрокаОтборов(ОтборМенеджер.Менеджер.ВидСравнения, ОтборМенеджер.Менеджер.Значение);
		Таб.Вывести(Секция);
		Таб.Область(6, 2, 6, (?(мПоказатели.Количество()>2,2,мПоказатели.Количество())*2 + 2)).ПоВыделеннымКолонкам = Истина;
		мКоличествоВыведенныхСтрокЗаголовка = мКоличествоВыведенныхСтрокЗаголовка + 1;
	КонецЕсли; 

	Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|ПервыйСтолбец");
	Секция.Параметры.ЗначениеШапкиМенеджерКонтрагент = ?(ПоказыватьПокупателей, "Менеджер/Контрагент", "Менеджер");
	Таб.Вывести(Секция);
	
	Запрос = Новый Запрос;
	Если НЕ СобратьТекстЗапроса(Запрос) Тогда
		Предупреждение("Запрос на выполнен."); 
		Возврат;
	КонецЕсли;

	КоличествоСправочникаКонтрагенты = 0;
	СтруктураОтбора = Новый Структура("ВидОбъектаКонтактнойИнформации", Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
	ВыборкаКонтрагентов = Справочники.ВидыКонтактнойИнформации.Выбрать(,,СтруктураОтбора);
	Пока ВыборкаКонтрагентов.Следующий() Цикл
		КоличествоСправочникаКонтрагенты = КоличествоСправочникаКонтрагенты + 1;
	КонецЦикла; 

	КоличествоСправочникаКЛ = 0;
	СтруктураОтбора = Новый Структура("ВидОбъектаКонтактнойИнформации", Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
	ВыборкаКЛ = Справочники.ВидыКонтактнойИнформации.Выбрать(,,СтруктураОтбора);
	Пока ВыборкаКЛ.Следующий() Цикл
		КоличествоСправочникаКЛ = КоличествоСправочникаКЛ + 1;
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("ДатаНачала", ?(ДатаНачала = Дата("00010101000000"), (ДатаНачала+1), НачалоДня(ДатаНачала)));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДатаКонца));
	Запрос.УстановитьПараметр("ВходящееСобытие", Перечисления.ВходящееИсходящееСобытие.Входящее);
	Запрос.УстановитьПараметр("ИсходящееСобытие", Перечисления.ВходящееИсходящееСобытие.Исходящее);
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВыбВедениеВзаиморасчетовПоДоговорам", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	Запрос.УстановитьПараметр("ВыбВалюта", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВыбВидОбъектаСобытияКонтрагент", Перечисления.ВидыОбъектовСобытия.Контрагент);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ЗапросВыполнен = Запрос.Выполнить();

	Если мПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого Строки Из мПоказатели Цикл
		Если Строки.Значение = "ПолнотаБазыДанныхКонтактнойИнформации" Тогда
			Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|ПолнотаЗаполненияКИ");
			Секция.Параметры.КоличествоСправочникаКонтрагенты = КоличествоСправочникаКонтрагенты;
			Секция.Параметры.КоличествоСправочникаКЛ          = КоличествоСправочникаКЛ;
		ИначеЕсли Строки.Значение = "СтадииПокупателей" Тогда
			Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|СтадииПокупателей");
		ИначеЕсли Строки.Значение = "ВыполнениеЗаказов" Тогда
			Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|ЗаказыПокупателей");
			Секция.Параметры.ШапкаАнализЗаказовПокупателей = "Анализ заказов покупателей (суммы в " + мНаименованиеВалютыУпрУчета + ")";
		ИначеЕсли Строки.Значение = "КоличествоСобытий" Тогда
			Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|События");
		ИначеЕсли Строки.Значение = "СуммаЗакрытияЗаказов" Тогда
			Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|СуммаЗакрытияЗаказов");
			Секция.Параметры.ШапкаСуммаЗакрытияЗаказов = "Суммы закрытия заказов покупателей" + Символы.ПС + "(суммы в " + мНаименованиеВалютыУпрУчета + ")";
		Иначе
			Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|ОдиночныйСтолбец");
			Секция.Параметры.НаименованиеПоказателя = Строки.Представление;
		КонецЕсли; 
		Таб.Присоединить(Секция);
	КонецЦикла; 

	СтруктураПоказателей = Новый Структура;

	Если мПоказатели.НайтиПоЗначению("СтадииПокупателей") <> Неопределено ИЛИ мПоказатели.НайтиПоЗначению("КоэффициентУдержанияПокупателей") <> Неопределено Тогда
	
		ТаблицаИзмененийСтадий = СформироватьТаблицуИзмененияСтадий(ЗапросВыполнен);

		ТаблицаИзмененийСтадийМенеджера = ТаблицаИзмененийСтадий.Скопировать();
		ТаблицаИзмененийСтадийМенеджера.Свернуть("Менеджер", "НетИзменения, Растет, Падает, Потерянный");
	
	КонецЕсли; 
	
	СобытияВсего = 0;
	
	ВыборкаИтоговыхЗаписей = ЗапросВыполнен.Выбрать();
	Если ВыборкаИтоговыхЗаписей.Следующий() Тогда
		Для каждого Строки Из ПоказателиЗапроса Цикл

			Если НЕ НеобходимостьПоказателя(Строки.Значение) Тогда
				Продолжить;
			КонецЕсли; 

			Если Строки.Значение = "Стадия" Тогда
				СтруктураПоказателей.Вставить("СтадияБезИзменения", ТаблицаИзмененийСтадий.Итог("НетИзменения"));
				СтруктураПоказателей.Вставить("СтадияРастет", ТаблицаИзмененийСтадий.Итог("Растет"));
				СтруктураПоказателей.Вставить("СтадияПадает", ТаблицаИзмененийСтадий.Итог("Падает"));
			ИначеЕсли Строки.Значение = "КоэфУдержания" Тогда
				СтруктураПоказателей.Вставить("КоэфУдержания", ?(ВыборкаИтоговыхЗаписей.Контрагент = 0,0,(ТаблицаИзмененийСтадий.Итог("Потерянный")/ВыборкаИтоговыхЗаписей.Контрагент)));
			Иначе
				СуммаПоказателя = ?(ВыборкаИтоговыхЗаписей[Строки.Значение] = NULL, 0, ВыборкаИтоговыхЗаписей[Строки.Значение]);
				СтруктураПоказателей.Вставить(Строки.Значение, СуммаПоказателя);
			КонецЕсли;
			
			Если Строки.Значение = "КоличествоВходящихСобытий" ИЛИ Строки.Значение = "КоличествоИсходящихСобытий" Тогда
				СобытияВсего = СобытияВсего + СуммаПоказателя;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	СтруктураПоказателей.Вставить("СобытияВсего", СобытияВсего);

	МассивГруппировок = Новый Массив;
	МассивГруппировок.Добавить("Менеджер");
	Если ПоказыватьПокупателей Тогда
		МассивГруппировок.Добавить("Контрагент");
	КонецЕсли; 

	Таб.НачатьАвтогруппировкуСтрок();
	
	мСтруктураТаблицДанныхДиаграммы = Новый Структура;
	
	// Заполнение контактной информации
	Если ПоказателиОтчета.Найти("ПолнотаБазыДанныхКонтактнойИнформации", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("КоличествоЗаполненныхВидовКИКонтрагентов", ПолучитьОписаниеТиповЧисла(15,2), "Заполнение контрагентов (%)");
		ТаблицаДанных.Колонки.Добавить("КоличествоЗаполненныхВидовКИКонтактныхЛиц", ПолучитьОписаниеТиповЧисла(15,2), "Заполнение контаткных лиц (%)");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "Полнота заполнения базы данных контактной информации покупателей и контактных лиц");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("ПолнотаБазыДанныхКонтактнойИнформации", СтруктураДанныхДиаграммы);
		
	КонецЕсли; 
	
	// Анализ стадий покупателей
	Если ПоказателиОтчета.Найти("СтадииПокупателей", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("СтадияУменьшение", ПолучитьОписаниеТиповЧисла(15,3), "Уменьшение");
		ТаблицаДанных.Колонки.Добавить("СтадияУвеличение", ПолучитьОписаниеТиповЧисла(15,2), "Увеличение");
		ТаблицаДанных.Колонки.Добавить("СтадияБезИзменения", ПолучитьОписаниеТиповЧисла(15,3), "Без изменения");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "Анализ изменения стадий взаимоотношений с покупателями");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("СтадииПокупателей", СтруктураДанныхДиаграммы);
		
	КонецЕсли; 
	
	// Коэффициент удержания покупателей
	Если ПоказателиОтчета.Найти("КоэффициентУдержанияПокупателей", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("КоэфУдержания", ПолучитьОписаниеТиповЧисла(15,3), "Значение коэффициента");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "Коэффициент удержания покупателей");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("КоэффициентУдержанияПокупателей", СтруктураДанныхДиаграммы);
		
	КонецЕсли; 
	
	// Количество зарегистрированных событий с покупателями
	Если ПоказателиОтчета.Найти("КоличествоСобытий", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("КоличествоВсегоСобытий", ПолучитьОписаниеТиповЧисла(15,3), "Всего событий");
		ТаблицаДанных.Колонки.Добавить("КоличествоВходящихСобытий", ПолучитьОписаниеТиповЧисла(15,3), "Входящие события");
		ТаблицаДанных.Колонки.Добавить("КоличествоИсходящихСобытий", ПолучитьОписаниеТиповЧисла(15,3), "Исходящие события");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "Количество событий с покупателями");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("КоличествоСобытий", СтруктураДанныхДиаграммы);
		
	КонецЕсли; 
	
	// Суммы закрытия заказов
	Если ПоказателиОтчета.Найти("СуммаЗакрытияЗаказов", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("СуммаЗакрытияЗаказовВсего", ПолучитьОписаниеТиповЧисла(15,3), "Сумма закрытия заказов без причины");
		ТаблицаДанных.Колонки.Добавить("СуммаЗакрытияЗаказовСПричиной", ПолучитьОписаниеТиповЧисла(15,3), "Сумма закрытия заказов с причиной");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "Суммы закрытия заказов (в " + мНаименованиеВалютыУпрУчета + ")");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("СуммаЗакрытияЗаказов", СтруктураДанныхДиаграммы);
		
	КонецЕсли; 
	
	// Выполнение заказов покупателей
	Если ПоказателиОтчета.Найти("ВыполнениеЗаказов", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("КоличествоЗаказов", ПолучитьОписаниеТиповЧисла(15,3), "Количество заказов");
		ТаблицаДанных.Колонки.Добавить("СуммаЗаказа", ПолучитьОписаниеТиповЧисла(15,3), "Сумма заказов");
		ТаблицаДанных.Колонки.Добавить("СуммаОплатыЗаказа", ПолучитьОписаниеТиповЧисла(15,3), "Сумма оплаты заказов");
		ТаблицаДанных.Колонки.Добавить("СуммаОтгрузкиЗаказа", ПолучитьОписаниеТиповЧисла(15,3), "Сумма отгрузки заказов");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "Выполнение заказов покупателей (суммы в " + мНаименованиеВалютыУпрУчета + ")");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("ВыполнениеЗаказов", СтруктураДанныхДиаграммы);
		
	КонецЕсли; 
	
	// Суммы выручки, прибыли и оплаты
	Если ПоказателиОтчета.Найти("СуммаВыручки", "ИмяПоказателя").ИспользованиеПоказателя
	 ИЛИ ПоказателиОтчета.Найти("СуммаПрибыли", "ИмяПоказателя").ИспользованиеПоказателя
	 ИЛИ ПоказателиОтчета.Найти("СуммаОплат", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("СуммаВыручки", ПолучитьОписаниеТиповЧисла(15,3), "Сумма выручки");
		ТаблицаДанных.Колонки.Добавить("СуммаПрибыли", ПолучитьОписаниеТиповЧисла(15,3), "Сумма прибыли");
		ТаблицаДанных.Колонки.Добавить("СуммаОплат", ПолучитьОписаниеТиповЧисла(15,3), "Сумма оплаты");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "Суммы выручки, прибыли и оплаты (в " + мНаименованиеВалютыУпрУчета + ")");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("ВыручкаПрибыльОплата", СтруктураДанныхДиаграммы);
		
	КонецЕсли; 
	
	ВывестиСтроки(Таб, Макет, ЗапросВыполнен, МассивГруппировок, 0, СтруктураПоказателей);
	
	Таб.ЗакончитьАвтогруппировкуСтрок();

	Таб.ФиксацияСверху = мКоличествоВыведенныхСтрокЗаголовка + 4;
	Таб.ФиксацияСлева  = 2;
	
	ИзменитьВидимостьЗаголовка(Таб);
	
	Таб.Показать();
	
КонецПроцедуры

// Процедура выводит строки в ПолеТабличногоДокумента
// 
// Параметры
//  Таб - ПолеТабличногоДокумента
//  Макет - макет отчета
//  ТекущаяВыборка - выборка запроса, из которой выводить строки
//  МассивГруппировок - массив с именами группировок
//  ИндексТекущейГруппировки - число, индекс выводимой группировки
// 
// Возвращаемое значение
//  НЕТ
Процедура ВывестиСтроки(Таб, Макет, ТекущаяВыборка, МассивГруппировок, ИндексТекущейГруппировки, ПоказателиПрошлойГруппировки)

	Если ИндексТекущейГруппировки > МассивГруппировок.Количество()-1 Тогда
		Возврат;
	КонецЕсли; 

	СтруктураПоказателей = Новый Структура;
	
	НаименованиеГруппировки = МассивГруппировок[ИндексТекущейГруппировки];

	Выборка = ТекущаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, НаименованиеГруппировки);

	Пока Выборка.Следующий() Цикл

		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
		
			Продолжить;
		
		КонецЕсли; 

		Если РаскрашиватьГруппировки Тогда
			Если ИндексТекущейГруппировки <> МассивГруппировок.Количество()-1 Тогда
				ТекущийЦвет = Макет.Области["Цвет0"].ЦветФона;
			Иначе
				ТекущийЦвет = Новый Цвет;
			КонецЕсли;
		Иначе
			ТекущийЦвет = Новый Цвет;
		КонецЕсли; 

		ТекКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
		
		Секция = Макет.ПолучитьОбласть("Строка|ПервыйСтолбец");
		
		Если НаименованиеГруппировки = "Контрагент" Тогда
			ВыборкаКонтрагентов = Выборка.Выбрать();
			Пока ВыборкаКонтрагентов.Следующий() Цикл
				Если ВыборкаКонтрагентов.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
					ТекКонтрагент = ВыборкаКонтрагентов.Контрагент;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			СтрокаВывода = СокрЛП(Строка(ТекКонтрагент));
			Секция.Области.СекцияЗначениеМенеджерКонтрагент.Расшифровка = ТекКонтрагент;
		Иначе
			СтрокаВывода = СокрЛП(Строка(Выборка[НаименованиеГруппировки]));
			Секция.Области.СекцияЗначениеМенеджерКонтрагент.Расшифровка = Выборка[НаименованиеГруппировки];
		КонецЕсли; 

		Если ПустаяСтрока(СтрокаВывода) Тогда
			СтрокаВывода = "<...>";
		КонецЕсли;

		СтрокаВывода = "" + Отступы(ИндексТекущейГруппировки) + СтрокаВывода;
		
		Секция.Параметры.ЗначениеМенеджерКонтрагент = СтрокаВывода;
		Секция.Области.СекцияЗначениеМенеджерКонтрагент.ЦветФона = ТекущийЦвет;
		Таб.Вывести(Секция, ИндексТекущейГруппировки);

		Для каждого Строки Из мПоказатели Цикл

			СуммаПоказателя = 0;

			СуммаПоказателяПрошлойГруппировки = 0;
			
			Если Строки.Значение = "ПолнотаБазыДанныхКонтактнойИнформации" Тогда
				
				ПоказателиПрошлойГруппировки.Свойство(Строки.Значение, СуммаПоказателяПрошлойГруппировки);
				
				Секция = Макет.ПолучитьОбласть("Строка|ПолнотаЗаполненияКИ");
				
				ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.ПолнотаБазыДанныхКонтактнойИнформации.ТаблицаДанных;

				Если НаименованиеГруппировки = "Менеджер" Тогда
					Секция.Параметры.ПоказательЗаполненияКонтрагенты  = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтрагентов),6,0) + " (" + ПривестиКФормату(ПосчитатьПроцент((ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтрагентов)/ПреобразоватьКЧислу(Выборка.Контрагент)), КоличествоСправочникаКонтрагенты),5,2, Истина) + "%)";
					СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Найти(Выборка[НаименованиеГруппировки], "Объект");
					Если СтрокаТекущегоМенеджераВДанныхДиаграммы = Неопределено Тогда
						СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Добавить();
						СтрокаТекущегоМенеджераВДанныхДиаграммы.Объект = Выборка[НаименованиеГруппировки];
					КонецЕсли;
					СтрокаТекущегоМенеджераВДанныхДиаграммы.КоличествоЗаполненныхВидовКИКонтрагентов = СтрокаТекущегоМенеджераВДанныхДиаграммы.КоличествоЗаполненныхВидовКИКонтрагентов + ПосчитатьПроцент((ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтрагентов)/ПреобразоватьКЧислу(Выборка.Контрагент)), КоличествоСправочникаКонтрагенты);
				Иначе
					Секция.Параметры.ПоказательЗаполненияКонтрагенты  = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтрагентов),6,0) + " (" + ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтрагентов), КоличествоСправочникаКонтрагенты),5,2, Истина) + "%)";
				КонецЕсли; 
				СтруктураПоказателей.Вставить("КоличествоЗаполненныхВидовКИКонтрагентов", ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтрагентов));
				ПоказателиПрошлойГруппировки.Свойство("КоличествоЗаполненныхВидовКИКонтрагентов", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентЗаполненияКонтрагенты     = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтрагентов), СуммаПоказателяПрошлойГруппировки),5,2);
				
				Если НаименованиеГруппировки = "Менеджер" Тогда
					Секция.Параметры.ПоказательЗаполненияКЛ           = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтактныхЛиц),6,0) + " (" + ПривестиКФормату(ПосчитатьПроцент((ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтактныхЛиц)/ПреобразоватьКЧислу(Выборка.Контрагент)), КоличествоСправочникаКЛ),5,2, Истина) + "%)";
					СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Найти(Выборка[НаименованиеГруппировки], "Объект");
					Если СтрокаТекущегоМенеджераВДанныхДиаграммы = Неопределено Тогда
						СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Добавить();
						СтрокаТекущегоМенеджераВДанныхДиаграммы.Объект = Выборка[НаименованиеГруппировки];
					КонецЕсли;
					СтрокаТекущегоМенеджераВДанныхДиаграммы.КоличествоЗаполненныхВидовКИКонтактныхЛиц = СтрокаТекущегоМенеджераВДанныхДиаграммы.КоличествоЗаполненныхВидовКИКонтактныхЛиц + ПосчитатьПроцент((ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтактныхЛиц)/ПреобразоватьКЧислу(Выборка.Контрагент)), КоличествоСправочникаКЛ);
				Иначе
					Секция.Параметры.ПоказательЗаполненияКЛ           = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтактныхЛиц),6,0) + " (" + ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтактныхЛиц), КоличествоСправочникаКЛ),5,2, Истина) + "%)";
				КонецЕсли; 
				СтруктураПоказателей.Вставить("КоличествоЗаполненныхВидовКИКонтактныхЛиц", ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтактныхЛиц));
				ПоказателиПрошлойГруппировки.Свойство("КоличествоЗаполненныхВидовКИКонтактныхЛиц", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентЗаполненияКЛ              = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.КоличествоЗаполненныхВидовКИКонтактныхЛиц), СуммаПоказателяПрошлойГруппировки),5,2);
				Секция.Области.СекцияПолнотаЗаполненияКИ.ЦветФона = ТекущийЦвет;
				
			ИначеЕсли Строки.Значение = "СтадииПокупателей" Тогда
				
				Секция = Макет.ПолучитьОбласть("Строка|СтадииПокупателей");
				
				Если НаименованиеГруппировки = "Менеджер" Тогда
					СтрокаСтадий = ТаблицаИзмененийСтадийМенеджера.Найти(Выборка.Менеджер, "Менеджер");
				ИначеЕсли НаименованиеГруппировки = "Контрагент" Тогда
					ВыборкаКонтрагентов = Выборка.Выбрать();
					ВыбКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
					Пока ВыборкаКонтрагентов.Следующий() Цикл
						Если ВыборкаКонтрагентов.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
							ВыбКонтрагент = ВыборкаКонтрагентов.Контрагент;
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
					СтрокаСтадий = ТаблицаИзмененийСтадий.Найти(ВыбКонтрагент, "Контрагент");
				КонецЕсли; 
				
				Если СтрокаСтадий = Неопределено Тогда
					ПоказательУвеличенияСтадии   = 0;
					ПоказательУменьшенияСтадии   = 0;
					ПоказательБезИзмененияСтадии = 0;
				Иначе
					ПоказательУвеличенияСтадии   = СтрокаСтадий.Растет;
					ПоказательУменьшенияСтадии   = СтрокаСтадий.Падает;
					ПоказательБезИзмененияСтадии = СтрокаСтадий.НетИзменения;
				КонецЕсли; 
				
				Если НаименованиеГруппировки = "Менеджер" Тогда
					
					ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.СтадииПокупателей.ТаблицаДанных;
					
					СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Найти(Выборка.Менеджер, "Объект");
					Если СтрокаТекущегоМенеджераВДанныхДиаграммы = Неопределено Тогда
						СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Добавить();
						СтрокаТекущегоМенеджераВДанныхДиаграммы.Объект = Выборка.Менеджер;
					КонецЕсли;
				
					СтрокаТекущегоМенеджераВДанныхДиаграммы.СтадияУвеличение = СтрокаТекущегоМенеджераВДанныхДиаграммы.СтадияУвеличение + ПреобразоватьКЧислу(ПоказательУвеличенияСтадии);
					СтрокаТекущегоМенеджераВДанныхДиаграммы.СтадияУменьшение = СтрокаТекущегоМенеджераВДанныхДиаграммы.СтадияУменьшение + ПреобразоватьКЧислу(ПоказательУменьшенияСтадии);
					СтрокаТекущегоМенеджераВДанныхДиаграммы.СтадияБезИзменения = СтрокаТекущегоМенеджераВДанныхДиаграммы.СтадияБезИзменения + ПреобразоватьКЧислу(ПоказательБезИзмененияСтадии);
					
				КонецЕсли;
				
				Секция.Параметры.ПоказательУвеличенияСтадии     = ПривестиКФормату(ПреобразоватьКЧислу(ПоказательУвеличенияСтадии),6,0);
				СтруктураПоказателей.Вставить("СтадияРастет", ПреобразоватьКЧислу(ПоказательУвеличенияСтадии));
				ПоказателиПрошлойГруппировки.Свойство("СтадияРастет", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентУвеличенияСтадии        = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(ПоказательУвеличенияСтадии), СуммаПоказателяПрошлойГруппировки),5,2);
				
				Секция.Параметры.ПоказательУменьшенияСтадии     = ПривестиКФормату(ПреобразоватьКЧислу(ПоказательУменьшенияСтадии),6,0);
				СтруктураПоказателей.Вставить("СтадияПадает", ПреобразоватьКЧислу(ПоказательУменьшенияСтадии));
				ПоказателиПрошлойГруппировки.Свойство("СтадияПадает", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентУменьшенияСтадии        = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(ПоказательУменьшенияСтадии), СуммаПоказателяПрошлойГруппировки),5,2);

				Секция.Параметры.ПоказательБезИзмененияСтадии   = ПривестиКФормату(ПреобразоватьКЧислу(ПоказательБезИзмененияСтадии),6,0);
				СтруктураПоказателей.Вставить("СтадияБезИзменения", ПреобразоватьКЧислу(ПоказательБезИзмененияСтадии));
				ПоказателиПрошлойГруппировки.Свойство("СтадияБезИзменения", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентБезИзмененияСтадии      = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(ПоказательБезИзмененияСтадии), СуммаПоказателяПрошлойГруппировки),5,2);

				Секция.Области.СекцияСтадииПокупателей.ЦветФона = ТекущийЦвет;
				
			ИначеЕсли Строки.Значение = "ВыполнениеЗаказов" Тогда
				
				Секция = Макет.ПолучитьОбласть("Строка|ЗаказыПокупателей");
				
				Если НаименованиеГруппировки = "Менеджер" Тогда
				
					ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.ВыполнениеЗаказов.ТаблицаДанных;
					
					СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Найти(Выборка.Менеджер, "Объект");
					Если СтрокаТекущегоМенеджераВДанныхДиаграммы = Неопределено Тогда
						СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Добавить();
						СтрокаТекущегоМенеджераВДанныхДиаграммы.Объект = Выборка.Менеджер;
					КонецЕсли;
					
					СтрокаТекущегоМенеджераВДанныхДиаграммы.КоличествоЗаказов = СтрокаТекущегоМенеджераВДанныхДиаграммы.КоличествоЗаказов + ПреобразоватьКЧислу(Выборка.КоличествоЗаказов);
					СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаЗаказа = СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаЗаказа + ПреобразоватьКЧислу(Выборка.СуммаЗаказа);
					СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаОтгрузкиЗаказа = СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаОтгрузкиЗаказа + ПреобразоватьКЧислу(Выборка.СуммаОтгрузкиЗаказа);
					СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаОплатыЗаказа = СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаОплатыЗаказа + ПреобразоватьКЧислу(Выборка.СуммаОплатыЗаказа);
					
				КонецЕсли;
					
				Секция.Параметры.ПоказательКолВоЗаказов         = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.КоличествоЗаказов),6,0);
				СтруктураПоказателей.Вставить("КоличествоЗаказов", ПреобразоватьКЧислу(Выборка.КоличествоЗаказов));
				ПоказателиПрошлойГруппировки.Свойство("КоличествоЗаказов", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентКолВоЗаказов            = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.КоличествоЗаказов), СуммаПоказателяПрошлойГруппировки),5,2);
				
				Секция.Параметры.ПоказательСуммаЗаказов         = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.СуммаЗаказа),15,2);
				СтруктураПоказателей.Вставить("СуммаЗаказа", ПреобразоватьКЧислу(Выборка.СуммаЗаказа));
				ПоказателиПрошлойГруппировки.Свойство("СуммаЗаказа", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентСуммаЗаказов            = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.СуммаЗаказа), СуммаПоказателяПрошлойГруппировки),5,2);

				Секция.Параметры.ПоказательОтгрузкаЗаказов      = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.СуммаОтгрузкиЗаказа),15,2);
				СтруктураПоказателей.Вставить("СуммаОтгрузкиЗаказа", ПреобразоватьКЧислу(Выборка.СуммаОтгрузкиЗаказа));
				ПоказателиПрошлойГруппировки.Свойство("СуммаОтгрузкиЗаказа", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентОтгрузкаЗаказов         = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.СуммаОтгрузкиЗаказа), СуммаПоказателяПрошлойГруппировки),5,2);

				Секция.Параметры.ПоказательОплатаЗаказов        = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.СуммаОплатыЗаказа),15,2);
				СтруктураПоказателей.Вставить("СуммаОплатыЗаказа", ПреобразоватьКЧислу(Выборка.СуммаОплатыЗаказа));
				ПоказателиПрошлойГруппировки.Свойство("СуммаОплатыЗаказа", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентОплатаЗаказов           = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.СуммаОплатыЗаказа), СуммаПоказателяПрошлойГруппировки),5,2);
				
				Секция.Области.СекцияЗаказыПокупателей.ЦветФона = ТекущийЦвет;
				
			ИначеЕсли Строки.Значение = "КоличествоСобытий" Тогда
				
				Секция = Макет.ПолучитьОбласть("Строка|События");
				
				Если НаименованиеГруппировки = "Менеджер" Тогда
				
					ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.КоличествоСобытий.ТаблицаДанных;
					
					СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Найти(Выборка.Менеджер, "Объект");
					Если СтрокаТекущегоМенеджераВДанныхДиаграммы = Неопределено Тогда
						СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Добавить();
						СтрокаТекущегоМенеджераВДанныхДиаграммы.Объект = Выборка.Менеджер;
					КонецЕсли;
					
					СтрокаТекущегоМенеджераВДанныхДиаграммы.КоличествоВсегоСобытий = СтрокаТекущегоМенеджераВДанныхДиаграммы.КоличествоВсегоСобытий + ПреобразоватьКЧислу(Выборка.КоличествоВходящихСобытий)+ ПреобразоватьКЧислу(Выборка.КоличествоИсходящихСобытий);
					СтрокаТекущегоМенеджераВДанныхДиаграммы.КоличествоВходящихСобытий = СтрокаТекущегоМенеджераВДанныхДиаграммы.КоличествоВходящихСобытий + ПреобразоватьКЧислу(Выборка.КоличествоВходящихСобытий);
					СтрокаТекущегоМенеджераВДанныхДиаграммы.КоличествоИсходящихСобытий = СтрокаТекущегоМенеджераВДанныхДиаграммы.КоличествоИсходящихСобытий + ПреобразоватьКЧислу(Выборка.КоличествоИсходящихСобытий);
					
				КонецЕсли;
					
				Секция.Параметры.ПоказательСобытийВсего       = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.КоличествоВходящихСобытий)+ ПреобразоватьКЧислу(Выборка.КоличествоИсходящихСобытий),6,0);
				СтруктураПоказателей.Вставить("СобытияВсего", ПреобразоватьКЧислу(ПреобразоватьКЧислу(Выборка.КоличествоВходящихСобытий)+ ПреобразоватьКЧислу(Выборка.КоличествоИсходящихСобытий)));
				ПоказателиПрошлойГруппировки.Свойство("СобытияВсего", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентСобытийВсего          = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(ПреобразоватьКЧислу(Выборка.КоличествоВходящихСобытий)+ ПреобразоватьКЧислу(Выборка.КоличествоИсходящихСобытий)), СуммаПоказателяПрошлойГруппировки),5,2);
				
				Секция.Параметры.ПоказательСобытийВходящие    = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.КоличествоВходящихСобытий),6,0);
				СтруктураПоказателей.Вставить("КоличествоВходящихСобытий", ПреобразоватьКЧислу(Выборка.КоличествоВходящихСобытий));
				ПоказателиПрошлойГруппировки.Свойство("КоличествоВходящихСобытий", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентСобытийВходящие       = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.КоличествоВходящихСобытий), СуммаПоказателяПрошлойГруппировки),5,2);
				
				Секция.Параметры.ПоказательСобытийИсходящие   = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.КоличествоИсходящихСобытий),6,0);
				СтруктураПоказателей.Вставить("КоличествоИсходящихСобытий", ПреобразоватьКЧислу(Выборка.КоличествоИсходящихСобытий));
				ПоказателиПрошлойГруппировки.Свойство("КоличествоИсходящихСобытий", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентСобытийИсходящие    = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.КоличествоИсходящихСобытий), СуммаПоказателяПрошлойГруппировки),5,2);
				
				Секция.Области.СекцияСобытия.ЦветФона        = ТекущийЦвет;
				
			ИначеЕсли Строки.Значение = "КоэффициентУдержанияПокупателей" Тогда
				
				Секция = Макет.ПолучитьОбласть("Строка|ОдиночныйСтолбец");
				
				Если НаименованиеГруппировки = "Менеджер" Тогда

					СтрокаСтадий = ТаблицаИзмененийСтадийМенеджера.Найти(Выборка.Менеджер, "Менеджер");

					Если СтрокаСтадий = Неопределено Тогда
						КоэффУдержания = 0;
					Иначе
						КоэффУдержания = ?(Выборка.Контрагент = 0,0,(СтрокаСтадий.Потерянный/Выборка.Контрагент));
					КонецЕсли; 
					
					ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.КоэффициентУдержанияПокупателей.ТаблицаДанных;
					
					СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Найти(Выборка.Менеджер, "Объект");
					Если СтрокаТекущегоМенеджераВДанныхДиаграммы = Неопределено Тогда
						СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Добавить();
						СтрокаТекущегоМенеджераВДанныхДиаграммы.Объект = Выборка.Менеджер;
					КонецЕсли;
					
					СтрокаТекущегоМенеджераВДанныхДиаграммы.КоэфУдержания = КоэффУдержания;
					
					Секция.Параметры.ЗначениеПоказатель     = ПривестиКФормату(ПреобразоватьКЧислу(КоэффУдержания),7,2);
					СтруктураПоказателей.Вставить("КолВоПотерянных", ПреобразоватьКЧислу(СтрокаСтадий.Потерянный));
					ПоказателиПрошлойГруппировки.Свойство("КоэфУдержания", СуммаПоказателяПрошлойГруппировки);

					Секция.Области.СекцияОдиночныйСтолбец.ЦветФона = ТекущийЦвет;

				Иначе


					ВыборкаКонтрагентов = Выборка.Выбрать();
					ВыбКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
					Пока ВыборкаКонтрагентов.Следующий() Цикл
						Если ВыборкаКонтрагентов.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
							ВыбКонтрагент = ВыборкаКонтрагентов.Контрагент;
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
					СтрокаСтадий = ТаблицаИзмененийСтадий.Найти(ВыбКонтрагент, "Контрагент");

					Если СтрокаСтадий = Неопределено Тогда
						КолВоПотерянных = 0;
					Иначе
						КолВоПотерянных = СтрокаСтадий.Потерянный;
					КонецЕсли; 
					
					Секция.Параметры.ЗначениеПоказатель     = ПривестиКФормату(ПреобразоватьКЧислу(КолВоПотерянных),6,0);
					СтруктураПоказателей.Вставить("КолВоПотерянных", ПреобразоватьКЧислу(КолВоПотерянных));
					ПоказателиПрошлойГруппировки.Свойство("КолВоПотерянных", СуммаПоказателяПрошлойГруппировки);
					Секция.Параметры.ЗначениеПроцент        = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(КолВоПотерянных), СуммаПоказателяПрошлойГруппировки),5,2);

					Секция.Области.СекцияОдиночныйСтолбец.ЦветФона = ТекущийЦвет;
					
				КонецЕсли; 
				
			ИначеЕсли Строки.Значение = "СуммаЗакрытияЗаказов" Тогда
				
				Секция = Макет.ПолучитьОбласть("Строка|СуммаЗакрытияЗаказов");
				
				Если НаименованиеГруппировки = "Менеджер" Тогда
				
					ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.СуммаЗакрытияЗаказов.ТаблицаДанных;
					
					СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Найти(Выборка.Менеджер, "Объект");
					Если СтрокаТекущегоМенеджераВДанныхДиаграммы = Неопределено Тогда
						СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Добавить();
						СтрокаТекущегоМенеджераВДанныхДиаграммы.Объект = Выборка.Менеджер;
					КонецЕсли;
					
					СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаЗакрытияЗаказовВсего = СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаЗакрытияЗаказовВсего + ПреобразоватьКЧислу(Выборка.СуммаЗакрытияЗаказовВсего);
					СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаЗакрытияЗаказовСПричиной = СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаЗакрытияЗаказовСПричиной + ПреобразоватьКЧислу(Выборка.СуммаЗакрытияЗаказовСПричиной);
					
				КонецЕсли;
					
				Секция.Параметры.ПоказательСуммаЗакрытияЗаказовВсего         = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.СуммаЗакрытияЗаказовВсего),15,2);
				СтруктураПоказателей.Вставить("СуммаЗакрытияЗаказовВсего", ПреобразоватьКЧислу(Выборка.СуммаЗакрытияЗаказовВсего));
				ПоказателиПрошлойГруппировки.Свойство("СуммаЗакрытияЗаказовВсего", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентСуммаЗакрытияЗаказовВсего            = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.СуммаЗакрытияЗаказовВсего), СуммаПоказателяПрошлойГруппировки),5,2);
				
				Секция.Параметры.ПоказательСуммаЗакрытияЗаказовСПричиной         = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.СуммаЗакрытияЗаказовСПричиной),15,2);
				СтруктураПоказателей.Вставить("СуммаЗакрытияЗаказовСПричиной", ПреобразоватьКЧислу(Выборка.СуммаЗакрытияЗаказовСПричиной));
				ПоказателиПрошлойГруппировки.Свойство("СуммаЗакрытияЗаказовСПричиной", СуммаПоказателяПрошлойГруппировки);
				Секция.Параметры.ПроцентСуммаЗакрытияЗаказовСПричиной            = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.СуммаЗакрытияЗаказовСПричиной), СуммаПоказателяПрошлойГруппировки),5,2);

				Секция.Области.СекцияСуммаЗакрытияЗаказов.ЦветФона = ТекущийЦвет;
				
			Иначе
				
				Если НаименованиеГруппировки = "Менеджер" Тогда
				
					ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.ВыручкаПрибыльОплата.ТаблицаДанных;
					
					СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Найти(Выборка.Менеджер, "Объект");
					Если СтрокаТекущегоМенеджераВДанныхДиаграммы = Неопределено Тогда
						СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Добавить();
						СтрокаТекущегоМенеджераВДанныхДиаграммы.Объект = Выборка.Менеджер;
					КонецЕсли;
					
				КонецЕсли;
				
				Секция = Макет.ПолучитьОбласть("Строка|ОдиночныйСтолбец");
				Если Строки.Значение = "СуммаВыручки" Тогда
					
					Секция.Параметры.ЗначениеПоказатель = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.СуммаВыручки),15,2);
					СтруктураПоказателей.Вставить("СуммаВыручки", ПреобразоватьКЧислу(Выборка.СуммаВыручки));
					ПоказателиПрошлойГруппировки.Свойство("СуммаВыручки", СуммаПоказателяПрошлойГруппировки);
					Секция.Параметры.ЗначениеПроцент    = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.СуммаВыручки), СуммаПоказателяПрошлойГруппировки),5,2);
					
					Если НаименованиеГруппировки = "Менеджер" Тогда
						СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаВыручки = СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаВыручки + ПреобразоватьКЧислу(Выборка.СуммаВыручки);
					КонецЕсли
					
				ИначеЕсли Строки.Значение = "СуммаПрибыли" Тогда
					
					Секция.Параметры.ЗначениеПоказатель = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.СуммаПрибыли),15,2);
					СтруктураПоказателей.Вставить("СуммаПрибыли", ПреобразоватьКЧислу(Выборка.СуммаПрибыли));
					ПоказателиПрошлойГруппировки.Свойство("СуммаПрибыли", СуммаПоказателяПрошлойГруппировки);
					Секция.Параметры.ЗначениеПроцент    = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.СуммаПрибыли), СуммаПоказателяПрошлойГруппировки),5,2);
					
					Если НаименованиеГруппировки = "Менеджер" Тогда
						СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаПрибыли = СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаПрибыли + ПреобразоватьКЧислу(Выборка.СуммаПрибыли);
					КонецЕсли
					
				ИначеЕсли Строки.Значение = "СуммаОплат" Тогда
					
					Секция.Параметры.ЗначениеПоказатель = ПривестиКФормату(ПреобразоватьКЧислу(Выборка.СуммаОплаты),15,2);
					СтруктураПоказателей.Вставить("СуммаОплаты", ПреобразоватьКЧислу(Выборка.СуммаОплаты));
					ПоказателиПрошлойГруппировки.Свойство("СуммаОплаты", СуммаПоказателяПрошлойГруппировки);
					Секция.Параметры.ЗначениеПроцент    = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка.СуммаОплаты), СуммаПоказателяПрошлойГруппировки),5,2);
					
					Если НаименованиеГруппировки = "Менеджер" Тогда
						СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаОплат = СтрокаТекущегоМенеджераВДанныхДиаграммы.СуммаОплат + ПреобразоватьКЧислу(Выборка.СуммаОплаты);
					КонецЕсли
					
				КонецЕсли;
				
				Секция.Области.СекцияОдиночныйСтолбец.ЦветФона = ТекущийЦвет;
				
			КонецЕсли; 

			Таб.Присоединить(Секция, ИндексТекущейГруппировки);

		КонецЦикла;

		ВывестиСтроки(Таб, Макет, Выборка, МассивГруппировок, ИндексТекущейГруппировки+1, СтруктураПоказателей);
		
	КонецЦикла; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

// Инициализация таблиц всех возможных показателей, группировок, фильтров

мНаименованиеВалютыУпрУчета = Константы.ВалютаУправленческогоУчета.Получить().Наименование;

СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ПолнотаБазыДанныхКонтактнойИнформации";
СтрокаПоказателя.ПредставлениеПоказателя = "Полнота заполнения базы данных контактной информации покупателей и контактных лиц";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "СтадииПокупателей";
СтрокаПоказателя.ПредставлениеПоказателя = "Анализ изменения стадий взаимоотношений с покупателями";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "КоэффициентУдержанияПокупателей";
СтрокаПоказателя.ПредставлениеПоказателя = "Коэффициент удержания покупателей";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "КоличествоСобытий";
СтрокаПоказателя.ПредставлениеПоказателя = "Количество событий с покупателями";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "СуммаЗакрытияЗаказов";
СтрокаПоказателя.ПредставлениеПоказателя = "Сумма закрытия заказов покупателей в " + мНаименованиеВалютыУпрУчета;
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ВыполнениеЗаказов";
СтрокаПоказателя.ПредставлениеПоказателя = "Выполнение заказов покупателей";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "СуммаВыручки";
СтрокаПоказателя.ПредставлениеПоказателя = "Сумма выручки в " + мНаименованиеВалютыУпрУчета;
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "СуммаПрибыли";
СтрокаПоказателя.ПредставлениеПоказателя = "Сумма прибыли в " + мНаименованиеВалютыУпрУчета;
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "СуммаОплат";
СтрокаПоказателя.ПредставлениеПоказателя = "Сумма оплат в " + мНаименованиеВалютыУпрУчета;

ПоказателиЗапроса = Новый СписокЗначений;
ПоказателиЗапроса.Добавить("КоличествоЗаполненныхВидовКИКонтрагентов");
ПоказателиЗапроса.Добавить("КоличествоЗаполненныхВидовКИКонтактныхЛиц");
ПоказателиЗапроса.Добавить("Стадия");
ПоказателиЗапроса.Добавить("КоэфУдержания");
ПоказателиЗапроса.Добавить("КоличествоВходящихСобытий");
ПоказателиЗапроса.Добавить("КоличествоИсходящихСобытий");
ПоказателиЗапроса.Добавить("СуммаЗакрытияЗаказовВсего");
ПоказателиЗапроса.Добавить("СуммаЗакрытияЗаказовСПричиной");
ПоказателиЗапроса.Добавить("КоличествоЗаказов");
ПоказателиЗапроса.Добавить("СуммаЗаказа");
ПоказателиЗапроса.Добавить("СуммаОплатыЗаказа");
ПоказателиЗапроса.Добавить("СуммаОтгрузкиЗаказа");
ПоказателиЗапроса.Добавить("СуммаВыручки");
ПоказателиЗапроса.Добавить("СуммаПрибыли");
ПоказателиЗапроса.Добавить("СуммаОплаты");

мКоличествоВыведенныхСтрокЗаголовка = 0;
мПоказатели = Новый СписокЗначений;

НП = Новый НастройкаПериода;

ПоляНастройкиОтбора = ОтборМенеджер.ПолучитьДоступныеПоля();
ПолеНастройки = ПоляНастройкиОтбора.Добавить("Менеджер", "Менеджер", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
ПолеНастройки.Отбор = Истина;
ОтборМенеджер.УстановитьДоступныеПоля(ПоляНастройкиОтбора);
ОтборМенеджер.Добавить("Менеджер");
