Перем ТекстЗапросаСОтборомПоПодразделению, ТекстЗапросаПустоеПодразделение Экспорт;

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	СтруктураПредставлениеПолей = Новый Структура;
	МассивОтбора = Новый Массив;
	ОбщийОтчет.мСоответствиеНазначений = Новый Соответствие;
	ОбщийОтчет.мСтруктураДляОтбораПоКатегориям = Новый Структура;
	
	ПостроительОтчета.Параметры.Вставить("Фиксированная", Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.Фиксированная);
	ПостроительОтчета.Параметры.Вставить("СреднийРазмерПартии", Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.СреднийРазмерПартии);
	ПостроительОтчета.Параметры.Вставить("ОптимальныйРазмерЗаказа", Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.ОптимальныйРазмерЗаказа);
	ПостроительОтчета.Параметры.Вставить("НеКонтролировать", Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.НеКонтролировать);
	ПостроительОтчета.Параметры.Вставить("ПустоеПодразделение", Справочники.Подразделения.ПустаяСсылка());
	ПостроительОтчета.Параметры.Вставить("ПустойСклад", Справочники.Склады.ПустаяСсылка());

	
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Номенклатура");
	
	 	
	ПостроительОтчета.Текст = ТекстЗапросаПустоеПодразделение;
	
	//Если ОбщийОтчет.ИспользоватьСвойстваИКатегории = Истина Тогда
	//	
	//	УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);
	//	
	//КонецЕсли;
	
	Если ОбщийОтчет.Показатели.Найти("ЗначениеТочкиЗаказа", "Имя") = Неопределено Тогда
		
		ОбщийОтчет.ЗаполнитьПоказатели("ЗначениеТочкиЗаказа", "Значение точки заказа", истина, "ЧЦ=15; ЧДЦ=3");
		
	КонецЕсли;
	
	//Если ОбщийОтчет.Показатели.Найти("МинимальныйСтраховойЗапас", "Имя") = Неопределено Тогда
	//	
	//	ОбщийОтчет.ЗаполнитьПоказатели("МинимальныйСтраховойЗапас", "Минимальный страховой запас", истина, "ЧЦ=15; ЧДЦ=3");
	//	
	//КонецЕсли;
	
	Если ОбщийОтчет.Показатели.Найти("Остаток", "Имя") = Неопределено Тогда
		
		ОбщийОтчет.ЗаполнитьПоказатели("Остаток", "Остаток", истина, "ЧЦ=15; ЧДЦ=3");
		
	КонецЕсли;
	
	Если ОбщийОтчет.Показатели.Найти("КоличествоПроделено", "Имя") = Неопределено Тогда
		
		ОбщийОтчет.ЗаполнитьПоказатели("КоличествоПроделено", "Количество проделено", истина, "ЧЦ=15; ЧДЦ=3");
		
	КонецЕсли;

	Если ОбщийОтчет.Показатели.Найти("КоличествоЗаказано", "Имя") = Неопределено Тогда
		
		ОбщийОтчет.ЗаполнитьПоказатели("КоличествоЗаказано", "Заказано у поставщика (ожидаемое поступление)", истина, "ЧЦ=15; ЧДЦ=3");
		
	КонецЕсли;

	
	Если ОбщийОтчет.Показатели.Найти("НеобходимыйОбъемЗакупки", "Имя") = Неопределено Тогда
		
		ОбщийОтчет.ЗаполнитьПоказатели("НеобходимыйОбъемЗакупки", "Необходимый объем закупки", истина, "ЧЦ=15; ЧДЦ=3");
		
	КонецЕсли;
	
		
	ОбщийОтчет.мНазваниеОтчета = "Анализ точки заказа";
	
	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
	
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.РаскрашиватьИзмерения = Истина;
	ОбщийОтчет.мРежимВводаПериода = 1;
	
	ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений = Новый Структура("СрокДоставки", Новый Структура("Номенклатура, ХарактеристикаНоменклатуры"));
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт
	
	Если ЗначениеНеЗаполнено(ОбщийОтчет.ДатаКон) Тогда
		
		ОбщийОтчет.ДатаКон = ТекущаяДата();
		
	КонецЕсли;
	//ОтборПодразделение=ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Подразделение");
	//
	//Если ОтборПодразделение.Использование И Не ЗначениеНеЗаполнено(ОтборПодразделение.Значение) Тогда //И  ОбщийОтчет.ПостроительОтчета.Текст=ТекстЗапросаПустоеПодразделение Тогда
	//	
	//	ОбщийОтчет.ПостроительОтчета.Текст=ТекстЗапросаСОтборомПоПодразделению ;
	//	
	//Иначе		
	//	ОбщийОтчет.ПостроительОтчета.Текст=ТекстЗапросаПустоеПодразделение ;
	//КонецЕсли;	
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);
	
КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры

 // для Филиалов
    ТекстЗапросаСОтборомПоПодразделению = "ВЫБРАТЬ
	 | ВложенныйЗапрос.Номенклатура Номенклатура,
	 |  СУММА(ЗначениеТочкиЗаказа) ЗначениеТочкиЗаказа, СУММА(Остаток) Остаток, СУММА(КоличествоПроделено) КоличествоПроделено, СУММА(КоличествоЗаказано) КоличествоЗаказано, СУММА(НеобходимыйОбъемЗакупки)  НеобходимыйОбъемЗакупки
	 | {ВЫБРАТЬ ВложенныйЗапрос.Номенклатура.* КАК Номенклатура}
	 | ИЗ
	 | (ВЫБРАТЬ
	 |   		ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	 |   		ВложенныйЗапрос.ЗначениеТочкиЗаказа КАК ЗначениеТочкиЗаказа,
	 |   		ВложенныйЗапрос.Остаток КАК Остаток,
	 |   		ЕстьNULL(ЗаказыПокупателей.КоличествоОстаток,0) КоличествоПроделено,
	 |			0 КоличествоЗаказано,
	 |	ВЫБОР КОГДА ВложенныйЗапрос.ЗначениеТочкиЗаказа > ВложенныйЗапрос.Остаток -ЕстьNULL(ЗаказыПокупателей.КоличествоОстаток,0) ТОГДА
	 |		ВложенныйЗапрос.ЗначениеТочкиЗаказа - ВложенныйЗапрос.Остаток+ЕстьNULL(ЗаказыПокупателей.КоличествоОстаток,0)
	 |	ИНАЧЕ
	 |		0
	 |	КОНЕЦ КАК НеобходимыйОбъемЗакупки
	 |   	ИЗ (ВЫБРАТЬ
	 |   			ЗначенияТочкиЗаказа.Номенклатура КАК Номенклатура,
	 |   			ЗначенияТочкиЗаказа.ЗначениеТочкиЗаказа КАК ЗначениеТочкиЗаказа,
	 |   			ЕстьNULL(ТоварыНаСкладах.КоличествоОстаток,0) КАК Остаток
	 |   		ИЗ
	 |   		РегистрСведений.ЗначенияТочкиЗаказа.СрезПоследних(&ДатаКон, Подразделение <> &ПустоеПодразделение {Номенклатура.* } ) КАК ЗначенияТочкиЗаказа
	 |   				
	 |   			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаКон, {Номенклатура.*} Склад.Транзитный ) КАК ТоварыНаСкладах
	 |   			ПО ЗначенияТочкиЗаказа.Номенклатура = ТоварыНаСкладах.Номенклатура 
	 |  ГДЕ  ЗначенияТочкиЗаказа.СпособОпределенияЗначенияТочкиЗаказа = &Фиксированная
	 |   		) КАК ВложенныйЗапрос
	 |   			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаКон, 
	 |  ЗаказПокупателя.Проверен И  ЗаказПокупателя.Транзит {Номенклатура.*} 
	 |) КАК ЗаказыПокупателей
	 |   			ПО ВложенныйЗапрос.Номенклатура = ЗаказыПокупателей.Номенклатура ) ВложенныйЗапрос
	 | СГРУППИРОВАТЬ ПО Номенклатура
	 |ИТОГИ СУММА(Остаток), СУММА(ЗначениеТочкиЗаказа), 
	 |СУММА(НеобходимыйОбъемЗакупки), СУММА(КоличествоПроделено), СУММА(КоличествоЗаказано) 
	 |	ПО ОБЩИЕ,
	 |	ВложенныйЗапрос.Номенклатура
	 |{УПОРЯДОЧИТЬ ПО
	 |	ВложенныйЗапрос.Номенклатура.*
	 |//СВОЙСТВА_ОБЩИЕ
	 |}
	 |{ИТОГИ ПО
	 |	ВложенныйЗапрос.Номенклатура.*
	 |//СВОЙСТВА_ОБЩИЕ
	 |} ";
	 
	 // для ЯШТ
	 ТекстЗапросаПустоеПодразделение = "ВЫБРАТЬ
	 | ВложенныйЗапрос.Номенклатура Номенклатура,
	 |  СУММА(ЗначениеТочкиЗаказа) ЗначениеТочкиЗаказа, СУММА(Остаток) Остаток, СУММА(КоличествоПроделено) КоличествоПроделено, СУММА(КоличествоЗаказано) КоличествоЗаказано, СУММА(НеобходимыйОбъемЗакупки)  НеобходимыйОбъемЗакупки
	 | {ВЫБРАТЬ ВложенныйЗапрос.Номенклатура.* КАК Номенклатура}
	 | ИЗ
	 |	(ВЫБРАТЬ
	 |   		ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	 |   		ВложенныйЗапрос.ЗначениеТочкиЗаказа КАК ЗначениеТочкиЗаказа,
	 |   		ВложенныйЗапрос.Остаток КАК Остаток,
	 |   		ЕстьNULL(ЗаказыПокупателей.КоличествоОстаток,0) КоличествоПроделено,
	 |   		ЕстьNULL(ЗаказыПоставщикам.КоличествоОстаток,0) КоличествоЗаказано,
	 |	ВЫБОР КОГДА ВложенныйЗапрос.ЗначениеТочкиЗаказа > ВложенныйЗапрос.Остаток -ЕстьNULL(ЗаказыПокупателей.КоличествоОстаток,0) + ЕстьNULL(ЗаказыПоставщикам.КоличествоОстаток,0) ТОГДА
	 |		ВложенныйЗапрос.ЗначениеТочкиЗаказа - ВложенныйЗапрос.Остаток-ЕстьNULL(ЗаказыПоставщикам.КоличествоОстаток,0) +ЕстьNULL(ЗаказыПокупателей.КоличествоОстаток,0)
	 |	ИНАЧЕ
	 |		0
	 |	КОНЕЦ КАК НеобходимыйОбъемЗакупки
	 |   	ИЗ (ВЫБРАТЬ
	 |   			ЗначенияТочкиЗаказа.Номенклатура КАК Номенклатура,
	 |   			ЗначенияТочкиЗаказа.ЗначениеТочкиЗаказа КАК ЗначениеТочкиЗаказа,
	 |   			ЕстьNULL(ТоварыНаСкладах.КоличествоОстаток,0) КАК Остаток
	 |   		ИЗ
	 |   		РегистрСведений.ЗначенияТочкиЗаказа.СрезПоследних(&ДатаКон, Подразделение =&ПустоеПодразделение {Номенклатура.* } ) КАК ЗначенияТочкиЗаказа
	 |   				
	 |   			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаКон, {Номенклатура.*} НЕ Склад.Транзитный ) КАК ТоварыНаСкладах
	 |   			ПО ЗначенияТочкиЗаказа.Номенклатура = ТоварыНаСкладах.Номенклатура 
	 |  ГДЕ  ЗначенияТочкиЗаказа.СпособОпределенияЗначенияТочкиЗаказа = &Фиксированная
	 |   		) КАК ВложенныйЗапрос
	 |   			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаКон, 
	 |   НЕ ЗаказПокупателя.Транзит {Номенклатура.*} 
	 |) КАК ЗаказыПокупателей
	 |   			ПО ВложенныйЗапрос.Номенклатура = ЗаказыПокупателей.Номенклатура
	 |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаКон,ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ и НЕ ЗаказПоставщику.Транзит) КАК ЗаказыПоставщикам
	 |				ПО ВложенныйЗапрос.Номенклатура = ЗаказыПоставщикам.Номенклатура) ВложенныйЗапрос
	 | СГРУППИРОВАТЬ ПО Номенклатура
	 |ИТОГИ СУММА(Остаток), СУММА(ЗначениеТочкиЗаказа), 
	 |СУММА(НеобходимыйОбъемЗакупки), СУММА(КоличествоПроделено), СУММА(КоличествоЗаказано) 
	 |	ПО ОБЩИЕ,
	 |	ВложенныйЗапрос.Номенклатура
	 |{УПОРЯДОЧИТЬ ПО
	 |	ВложенныйЗапрос.Номенклатура.*
	 |//СВОЙСТВА_ОБЩИЕ
	 |}
	 |{ИТОГИ ПО
	 |	ВложенныйЗапрос.Номенклатура.*
	 |//СВОЙСТВА_ОБЩИЕ
	 |} ";

