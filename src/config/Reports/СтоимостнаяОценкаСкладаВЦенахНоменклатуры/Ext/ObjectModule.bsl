Перем мНазваниеОтчета Экспорт;

// Валюта управленческого учета организаций
Перем мВалютаУправленческогоУчета Экспорт;

// Все возможные показатели
Перем мТаблицаПоказатели Экспорт;

// Соответствия, содержащая назначения свойств и категорий именам
Перем мСоответствиеНазначений Экспорт;

// Структура, содержащая представления полей
Перем СтруктураПредставлениеПолей;

Перем мСтруктураДляОтбораПоКатегориям Экспорт;

Перем МассивИзмерения;
Перем МассивОтбора;
Перем ИспользоватьХарактеристики;

// Возможные режимы
Перем мРежимы Экспорт;

Перем мСтруктураСвязиЭлементовСДанными Экспорт;

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Получить значение цены
Функция ПолучитьТипЦенЦена(РезультатЗапроса, ВыводимНоменклатуру)

	Если ИспользоватьХарактеристики И ВыводимНоменклатуру Тогда
		Если ЗначениеНеЗаполнено(РезультатЗапроса.ТипЦенСтоимость)
		 ИЛИ ЗначениеНеЗаполнено(РезультатЗапроса.КоличествоОстаток) Тогда
			Цена = РезультатЗапроса.ТипЦенЦена;
		Иначе
			Цена = РезультатЗапроса.ТипЦенСтоимость / РезультатЗапроса.КоличествоОстаток;
		КонецЕсли;
	Иначе
		Цена = РезультатЗапроса.ТипЦенЦена;
	КонецЕсли;

	Возврат Цена;

КонецФункции

// Выводит показатели в строку отчета
Процедура ВывестиПоказатели(РезультатЗапроса, КоличествоПоказателей, ДокументРезультат, МакетПоказатель, ВыводитьЦены, ВыводимНоменклатуру)
	Перем Расход, Остаток, КОборачиваемости, СрокХранения;

	Если Режим = "оперативный" Тогда

		Для Каждого Показатель Из Показатели Цикл
			Если Показатель.Использование Тогда

				ИмяПоказателя = Показатель.Имя;
				Если ИмяПоказателя = "ТипЦенЦена" Тогда
					МакетПоказатель.Параметры[ИмяПоказателя] = ?(ВыводитьЦены, ПолучитьТипЦенЦена(РезультатЗапроса, ВыводимНоменклатуру), 0);
				Иначе
					МакетПоказатель.Параметры[ИмяПоказателя] = РезультатЗапроса[Показатель.Имя];
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Режим = "неоперативный" Тогда

		Для Каждого Показатель Из Показатели Цикл
			Если Показатель.Использование Тогда

				ИмяПоказателя = Показатель.Имя;
				Если ИмяПоказателя = "ТипЦенРентабельность" Тогда
					Себестоимость   = ?(РезультатЗапроса.Себестоимость   = NULL, 0, РезультатЗапроса.Себестоимость  );
					ТипЦенСтоимость = ?(РезультатЗапроса.ТипЦенСтоимость = NULL, 0, РезультатЗапроса.ТипЦенСтоимость);
					МакетПоказатель.Параметры[ИмяПоказателя] = ?(ТипЦенСтоимость = 0, 0, (ТипЦенСтоимость-Себестоимость)/ТипЦенСтоимость*100);
				ИначеЕсли ИмяПоказателя = "ПроцентНаценки" Тогда
					Себестоимость   = ?(РезультатЗапроса.Себестоимость   = NULL, 0, РезультатЗапроса.Себестоимость  );
					ТипЦенСтоимость = ?(РезультатЗапроса.ТипЦенСтоимость = NULL, 0, РезультатЗапроса.ТипЦенСтоимость);
					МакетПоказатель.Параметры[ИмяПоказателя] = ?(Себестоимость  = 0, 0, (ТипЦенСтоимость-Себестоимость)/Себестоимость *100);	
					
				ИначеЕсли ИмяПоказателя = "ТипЦенЦена" Тогда
					МакетПоказатель.Параметры[ИмяПоказателя] = ?(ВыводитьЦены, ПолучитьТипЦенЦена(РезультатЗапроса, ВыводимНоменклатуру), 0);
				Иначе
					МакетПоказатель.Параметры[ИмяПоказателя] = РезультатЗапроса[Показатель.Имя];
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Режим = "смешанный" Тогда

		ТипЦенСтоимость    = ?(РезультатЗапроса.ТипЦенСтоимость   = NULL, 0, РезультатЗапроса.ТипЦенСтоимость  );
		СебестоимостьВсего = ?(РезультатЗапроса.Себестоимость     = NULL, 0, РезультатЗапроса.Себестоимость    );
		КоличествоВсего    = ?(РезультатЗапроса.ОстатокПоПартиям  = NULL, 0, РезультатЗапроса.ОстатокПоПартиям );
		Количество         = ?(РезультатЗапроса.КоличествоОстаток = NULL, 0, РезультатЗапроса.КоличествоОстаток);
		Себестоимость      = ?(КоличествоВсего = 0, 0, СебестоимостьВсего/КоличествоВсего*Количество);

		Для Каждого Показатель Из Показатели Цикл
			Если Показатель.Использование Тогда

				ИмяПоказателя = Показатель.Имя;
				Если ИмяПоказателя = "Себестоимость" Тогда
					МакетПоказатель.Параметры[ИмяПоказателя] = Себестоимость;
				ИначеЕсли ИмяПоказателя = "ТипЦенНаценка" Тогда
					МакетПоказатель.Параметры[ИмяПоказателя] = ТипЦенСтоимость-Себестоимость;
				ИначеЕсли ИмяПоказателя = "ТипЦенРентабельность" Тогда
					МакетПоказатель.Параметры[ИмяПоказателя] = ?(ТипЦенСтоимость = 0, 0, (ТипЦенСтоимость-Себестоимость)/ТипЦенСтоимость*100);
				ИначеЕсли ИмяПоказателя = "ТипЦенЦена" Тогда
					МакетПоказатель.Параметры[ИмяПоказателя] = ?(ВыводитьЦены, ПолучитьТипЦенЦена(РезультатЗапроса, ВыводимНоменклатуру), 0);
				Иначе
					МакетПоказатель.Параметры[ИмяПоказателя] = РезультатЗапроса[Показатель.Имя];
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	ДокументРезультат.Присоединить(МакетПоказатель);

КонецПроцедуры

// Выводит строку отчета
Процедура ВывестиСтроку(РезультатЗапроса, Знач Индекс, КоличествоКолонок, КоличествоПоказателей, ДокументРезультат)

	ИзмерениеСтроки = ПостроительОтчета.ИзмеренияСтроки[Индекс];
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ИзмерениеСтроки.Имя);
	ВыводимНоменклатуру  = ?(ИзмерениеСтроки.Имя = "Номенклатура",Истина,Ложь);
	ВыводимХарактеристику = ?(ИзмерениеСтроки.Имя = "ХарактеристикаНоменклатуры",Истина,Ложь);
	Пока Выборка.Следующий() Цикл

		// Вывод значения измерения
		МакетСтроки = ?(Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии,
		                ПостроительОтчета.ИзмеренияСтроки[Индекс].МакетИерархии,
		                ПостроительОтчета.ИзмеренияСтроки[Индекс].Макет);

		// Значения измерений и т.д.
		МакетСтроки.Параметры.Заполнить(Выборка);

		МакетИзмерение = МакетСтроки.ПолучитьОбласть(1,1,МакетСтроки.ВысотаТаблицы,1+КоличествоКолонок);

		ДокументРезультат.Вывести(МакетИзмерение, Выборка.Уровень());

		// Макет показателей
		МакетПоказатель = МакетСтроки.ПолучитьОбласть(1,1+КоличествоКолонок+1,
		                                              МакетСтроки.ВысотаТаблицы,1+КоличествоКолонок+КоличествоПоказателей);

		// Выводим показатели в соответствии с их порядком в шапке
		ВыводитьЦены = ?(ВыводимНоменклатуру Или ВыводимХарактеристику, 
		               ?(Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии, Ложь, Истина), Ложь);
		ВывестиПоказатели(Выборка, КоличествоПоказателей, ДокументРезультат, МакетПоказатель, ВыводитьЦены, ВыводимНоменклатуру);

		Если Индекс < ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Тогда
			ВывестиСтроку(Выборка, Индекс+1, КоличествоКолонок, КоличествоПоказателей, ДокументРезультат);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ЗаполнитьПоказатели(ИмяПоля, ПредставлениеПоля, ВклПоУмолчанию, ФорматнаяСтрока)

	СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);

	// Показатели заносятся в специальную таблицу и добавляются в список
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = ИмяПоля;
	СтрПоказатели.ПредставлениеПоля = ПредставлениеПоля;
	СтрПоказатели.ВклПоУмолчанию    = ВклПоУмолчанию;
	СтрПоказатели.ФорматнаяСтрока   = ФорматнаяСтрока;

	Показатель = Показатели.Добавить();
	Показатель.Имя           = ИмяПоля;
	Показатель.Представление = ПредставлениеПоля;
	Показатель.Использование = ВклПоУмолчанию;

КонецПроцедуры

Процедура ЗаполнитьПредставление(ИмяПоля, ПредставлениеПоля, ВклВИтоги, ВклВОтбор)

	Если ВклВИтоги Тогда
		МассивИзмерения.Добавить(ИмяПоля);
	КонецЕсли;

	СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);

	Если ВклВОтбор и ИмяПоля <> "Производство" Тогда
		МассивОтбора.Добавить(ИмяПоля);
	КонецЕсли;

КонецПроцедуры

// Выполняет настройку отчета по умолчанию.
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	мТаблицаПоказатели.Очистить();
	Показатели.Очистить();

	СтруктураПредставлениеПолей = Новый Структура;
	мСоответствиеНазначений     = Новый Соответствие;
	МассивИзмерения             = Новый Массив;
	МассивОтбора                = Новый Массив;

	// Очистим отбор
	ОтборКоличество = ПостроительОтчета.Отбор.Количество();
	Для а = 1 По ОтборКоличество Цикл
		ПостроительОтчета.Отбор.Удалить(ОтборКоличество - а);
	КонецЦикла;

	ЗаполнитьПредставление("Склад",                      "Склад",                       Ложь, Ложь);
	ЗаполнитьПредставление("Номенклатура",               "Номенклатура",                ИСТИНА, ИСТИНА);
	ЗаполнитьПредставление("Производство",               "Производство",                ИСТИНА, ИСТИНА);
//	ЗаполнитьПредставление("ХарактеристикаНоменклатуры", "Характеристика номенклатуры", ЛОЖЬ,   ЛОЖЬ  );
//	ЗаполнитьПредставление("ЦенаВРознице",               "Цена в рознице",              ЛОЖЬ,   ЛОЖЬ  );

	Если Режим = "оперативный" Тогда

		ЗаполнитьПоказатели("КоличествоОстаток",          "Количество (в единицах хранения)",
		                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
		//ЗаполнитьПоказатели("КоличествоБазовыхЕдОстаток", "Количество (в базовых единицах)",
		//					ИСТИНА, "ЧЦ = 15; ЧДЦ = 3");
		//ЗаполнитьПоказатели("СтоимостьРознОстаток",       "Стоимость в рознице ("+мВалютаУправленческогоУчета+")",
		//					ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");
		ЗаполнитьПоказатели("ТипЦенЦена",                 "Цена в выбранном типе цен ("+мВалютаУправленческогоУчета+")",
		                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");
		ЗаполнитьПоказатели("ТипЦенСтоимость",            "Стоимость в выбранном типе цен ("+мВалютаУправленческогоУчета+")",
		                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");

		Текст = "
		    |ВЫБРАТЬ
			|   НачалоПроизводстваВРоссии.Номенклатура,
			|   &Ангар3 КАК СкладАнгар
			|ПОМЕСТИТЬ втНачалоПроизводства
			|ИЗ
			|	РегистрСведений.НачалоПроизводстваВРоссии КАК НачалоПроизводстваВРоссии
			|;
			|ВЫБРАТЬ //РАЗЛИЧНЫЕ
			|//	Склад                                                                                      КАК Склад,
			|	ТаблицаРегистра.Номенклатура                                                               КАК Номенклатура,
			|//	ТаблицаРегистра.ХарактеристикаНоменклатуры                                                 КАК ХарактеристикаНоменклатуры,
			|	СУММА(КоличествоОстаток)                                                                   КАК КоличествоОстаток,
			|	СУММА(КоличествоОстаток*ТаблицаРегистра.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент)  КАК КоличествоБазовыхЕдОстаток,
			|//	СУММА(КоличествоОстаток*ЦенаВРознице
			|//	                 /(УпрВалюты.Курс/УпрВалюты.Кратность))                                    КАК СтоимостьРознОстаток,
			|	ВЫБОР
			|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ЦеныНоменклатуры.Цена * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность) / (УпрВалюты.Курс / УпрВалюты.Кратность) * &КоэффициентБазовогоТипаЦен
			|	КОНЕЦ КАК ТипЦенЦена,
			|	СУММА(ВЫБОР
			|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ТаблицаРегистра.КоличествоОстаток * ЦеныНоменклатуры.Цена * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность) / (УпрВалюты.Курс / УпрВалюты.Кратность) * &КоэффициентБазовогоТипаЦен
			|		КОНЕЦ) КАК ТипЦенСтоимость,
			|	ВЫБОР
		    |		КОГДА НЕ втНачалоПроизводства.Номенклатура ЕСТЬ NULL 
			|			ТОГДА ""Россия""
		    |		ИНАЧЕ """"
	        |		КОНЕЦ КАК Производство
			|
			|{ВЫБРАТЬ 
			|	Склад.*                        КАК Склад,
			|	ТаблицаРегистра.Номенклатура.* КАК Номенклатура,
			|Производство
			|//	ТаблицаРегистра.ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|//	ЦенаВРознице.*                 КАК ЦенаВРознице
			|//СВОЙСТВА
			|}
			|
			|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОтчета, Валюта = &ВалютаУпрУчета) КАК УпрВалюты,
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОтчета,
			|	{Склад.*                       КАК Склад,
			|	Номенклатура.*                 КАК Номенклатура
			|//	ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|//	ЦенаВРознице.*                 КАК ЦенаВРознице
			|}
			|	) КАК ТаблицаРегистра
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОтчета, ТипЦен = &БазовыйТипЦен {Номенклатура.* КАК Номенклатура}) КАК ЦеныНоменклатуры
			|		ПО ТаблицаРегистра.Номенклатура               = ЦеныНоменклатуры.Номенклатура //И
			|//		   ТаблицаРегистра.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОтчета) КАК КурсыВалютСрезПоследних
			|		ПО ЦеныНоменклатуры.Валюта = КурсыВалютСрезПоследних.Валюта
			|		ЛЕВОЕ СОЕДИНЕНИЕ втНачалоПроизводства КАК втНачалоПроизводства
		    |		ПО ТаблицаРегистра.Номенклатура = втНачалоПроизводства.Номенклатура
			|		И ТаблицаРегистра.Склад = втНачалоПроизводства.СкладАнгар
			|//СОЕДИНЕНИЯ
			|
			|{ГДЕ 
			|	Склад.*                        КАК Склад,
			|	ТаблицаРегистра.Номенклатура.* КАК Номенклатура,
			|	(ВЫБОР
			|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ЦеныНоменклатуры.Цена * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность) / (УпрВалюты.Курс / УпрВалюты.Кратность) * &КоэффициентБазовогоТипаЦен
			|	КОНЕЦ) КАК ТипЦенЦена,
			|	(ВЫБОР
			|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ТаблицаРегистра.КоличествоОстаток * ЦеныНоменклатуры.Цена * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность) / (УпрВалюты.Курс / УпрВалюты.Кратность) * &КоэффициентБазовогоТипаЦен
			|	КОНЕЦ) КАК ТипЦенСтоимость
			|//	ТаблицаРегистра.ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|//	ЦенаВРознице.*                 КАК ЦенаВРознице
			|//СВОЙСТВА
			|//КАТЕГОРИИ
			|}
			|СГРУППИРОВАТЬ ПО
			|	Склад,
			|	ТаблицаРегистра.Номенклатура,
			|	//ТаблицаРегистра.ХарактеристикаНоменклатуры,
			|	ВЫБОР
			|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ЦеныНоменклатуры.Цена * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность) / (УпрВалюты.Курс / УпрВалюты.Кратность) * &КоэффициентБазовогоТипаЦен
			|	КОНЕЦ,
	        |	ВЫБОР
			|			КОГДА НЕ втНачалоПроизводства.Номенклатура ЕСТЬ NULL 
			|	ТОГДА ""Россия""
			|	ИНАЧЕ """"
			|	КОНЕЦ
			|//СГРУППИРОВАТЬПО
			|
			|{УПОРЯДОЧИТЬ ПО 
			|	Склад.*                        КАК Склад,
			|	ТаблицаРегистра.Номенклатура.* КАК Номенклатура,
			|	ТипЦенЦена,
			|	ТипЦенСтоимость,
	        |Производство
			|//	ТаблицаРегистра.ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|//СВОЙСТВА
			|}
			|
			|{ИТОГИ ПО 
			|Склад.*                КАК Склад,
			|	ТаблицаРегистра.Номенклатура.* КАК Номенклатура,
			|Производство
			|//	ТаблицаРегистра.ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|//СВОЙСТВА
			|}
			|
			|ИТОГИ
			|	СУММА(КоличествоОстаток),
			|	СУММА(КоличествоБазовыхЕдОстаток),
			|//	СУММА(СтоимостьРознОстаток),
			|	СУММА(ТипЦенСтоимость),
			|	МАКСИМУМ(ТипЦенЦена)
			|
			|ПО ОБЩИЕ";
            ПостроительОтчета.Параметры.Вставить("Ангар3", Справочники.Склады.НайтиПоКоду("01249"));

	ИначеЕсли Режим = "неоперативный" Тогда


		ЗаполнитьПоказатели("КоличествоОстаток",                 "Количество (в единицах хранения)",
		                    ИСТИНА,   "ЧЦ = 15; ЧДЦ = 3");
		ЗаполнитьПоказатели("Себестоимость",                     "Себестоимость ("+мВалютаУправленческогоУчета+")",
		                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");
		ЗаполнитьПоказатели("СебестоимостьЕдиницы",              "Cебестоимость единицы ("+мВалютаУправленческогоУчета+")",
							ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");
		ЗаполнитьПоказатели("ТипЦенЦена",                        "Цена в выбранном типе цен ("+мВалютаУправленческогоУчета+")",
		                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");
		ЗаполнитьПоказатели("ТипЦенСтоимость"        ,           "Стоимость в выбранном типе цен ("+мВалютаУправленческогоУчета+")",
		                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");
		ЗаполнитьПоказатели("ТипЦенНаценка",                     "Наценка ("+мВалютаУправленческогоУчета+")",
		                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");
		ЗаполнитьПоказатели("ТипЦенРентабельность",              "Рентабельность (%)",
		                    ИСТИНА, "ЧЦ =  9; ЧДЦ = 2");
		ЗаполнитьПоказатели("ПроцентНаценки",              "Процент наценки (%)",
		                    ИСТИНА, "ЧЦ =  9; ЧДЦ = 2");
					

		Текст = "
			|ВЫБРАТЬ //РАЗЛИЧНЫЕ
			|	//Склад                                                                              КАК Склад,
			|	ТаблицаРегистра.Номенклатура                                                       КАК Номенклатура,
			|	//ТаблицаРегистра.ХарактеристикаНоменклатуры                                         КАК ХарактеристикаНоменклатуры,
			|	СУММА(ВЫБОР КОГДА СтатусПартии = &Неотфактурованный
			|		  ТОГДА 0
			|		  ИНАЧЕ КоличествоОстаток
			|	КОНЕЦ)                                                                             КАК КоличествоОстаток,
			|   ВЫБОР КОГДА СУММА(КоличествоОстаток)>0 ТОГДА (СУММА(СтоимостьОстаток)/СУММА(КоличествоОстаток)) ИНАЧЕ 0 КОНЕЦ СебестоимостьЕдиницы,
			|	СУММА(СтоимостьОстаток)                                                            КАК Себестоимость,
			|	ВЫБОР
			|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ЦеныНоменклатуры.Цена * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность) / (УпрВалюты.Курс / УпрВалюты.Кратность) * &КоэффициентБазовогоТипаЦен
			|	КОНЕЦ КАК 																		ТипЦенЦена,
			|	СУММА(ВЫБОР
			|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ТаблицаРегистра.КоличествоОстаток * ЦеныНоменклатуры.Цена * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность) / (УпрВалюты.Курс / УпрВалюты.Кратность) * &КоэффициентБазовогоТипаЦен
			|	КОНЕЦ)                                             								 КАК ТипЦенСтоимость,
			|	СУММА(ВЫБОР КОГДА СтатусПартии = &Неотфактурованный
			|	ТОГДА 0
			|	ИНАЧЕ КоличествоОстаток*Цена
			|	      *(КурсыВалютСрезПоследних.Курс/КурсыВалютСрезПоследних.Кратность)
			|	      /(УпрВалюты.Курс/УпрВалюты.Кратность)
			|	      *(&КоэффициентБазовогоТипаЦен)
			|	      -СтоимостьОстаток
			|	КОНЕЦ)                                                                             КАК ТипЦенНаценка
			|
			|{ВЫБРАТЬ 
			|	Склад.*                        КАК Склад,
			|	ТаблицаРегистра.Номенклатура.* КАК Номенклатура
			|//	ТаблицаРегистра.ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|	//ЦенаВРознице.*                 КАК ЦенаВРознице
			|//СВОЙСТВА
			|}
			|
			|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОтчета, Валюта = &ВалютаУпрУчета) КАК УпрВалюты,
			|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаОтчета, СтатусПартии В (&СписокСтатусовПартии)
			|	{Склад.*                       КАК Склад,
			|	Номенклатура.*                 КАК Номенклатура
			|//	ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|//	ЦенаВРознице.*                 КАК ЦенаВРознице 
			|}
			|	) КАК ТаблицаРегистра
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОтчета, ТипЦен = &БазовыйТипЦен {Номенклатура.* КАК Номенклатура}) КАК ЦеныНоменклатуры
			|		ПО ТаблицаРегистра.Номенклатура = ЦеныНоменклатуры.Номенклатура //И
			|	//	   ТаблицаРегистра.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОтчета) КАК КурсыВалютСрезПоследних
			|		ПО ЦеныНоменклатуры.Валюта = КурсыВалютСрезПоследних.Валюта
			|//СОЕДИНЕНИЯ
			|
			|{ГДЕ 
			|	Склад.*                        КАК Склад,
			|	ТаблицаРегистра.Номенклатура.* КАК Номенклатура,
			|	(ВЫБОР
			|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ЦеныНоменклатуры.Цена * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность) / (УпрВалюты.Курс / УпрВалюты.Кратность) * &КоэффициентБазовогоТипаЦен
			|	КОНЕЦ) КАК ТипЦенЦена,
			|(ВЫБОР
			|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ТаблицаРегистра.КоличествоОстаток * ЦеныНоменклатуры.Цена * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность) / (УпрВалюты.Курс / УпрВалюты.Кратность) * &КоэффициентБазовогоТипаЦен
			|	КОНЕЦ) КАК ТипЦенСтоимость
			|//	ТаблицаРегистра.ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|//	ЦенаВРознице.*                 КАК ЦенаВРознице
			|//СВОЙСТВА
			|//КАТЕГОРИИ
			|}
			|СГРУППИРОВАТЬ ПО
			|	//Склад,
			|	ТаблицаРегистра.Номенклатура,
			|	//ТаблицаРегистра.ХарактеристикаНоменклатуры,
			|	ВЫБОР
			|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ЦеныНоменклатуры.Цена * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность) / (УпрВалюты.Курс / УпрВалюты.Кратность) * &КоэффициентБазовогоТипаЦен
			|	КОНЕЦ
			|//СГРУППИРОВАТЬПО
			|
			|{УПОРЯДОЧИТЬ ПО 
			|///	Склад.*                        КАК Склад,
			|	ТаблицаРегистра.Номенклатура.* КАК Номенклатура,
			|	ТипЦенЦена,
			|	ТипЦенСтоимость
			|//	ТаблицаРегистра.ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|//СВОЙСТВА
			|}
			|
			|{ИТОГИ ПО 
			|	Склад.*                        КАК Склад,
			//Плотников, расскоменировал пред. строку
			|	ТаблицаРегистра.Номенклатура.* КАК Номенклатура //,
			|//	ТаблицаРегистра.ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|//СВОЙСТВА
			|}
			|ИТОГИ
			|	СУММА(КоличествоОстаток),
			|	ВЫРАЗИТЬ(ВЫБОР 
			|	КОГДА Сумма(КоличествоОстаток)<>0 
			|	ТОГДА (Сумма(Себестоимость)/Сумма(КоличествоОстаток))
			|	ИНАЧЕ 0 КОНЕЦ КАК ЧИСЛО (15,2)) как СебестоимостьЕдиницы,
          	|	СУММА(Себестоимость),
			|	СУММА(ТипЦенСтоимость),
			|	СУММА(ТипЦенНаценка),
			|	МАКСИМУМ(ТипЦенЦена)
			|
			|ПО ОБЩИЕ";

			

			СписокСтатусовПартии = Новый Массив;
			
			СписокСтатусовПартии.Добавить(Перечисления.СтатусыПартийТоваров.Купленный);
			СписокСтатусовПартии.Добавить(Перечисления.СтатусыПартийТоваров.НаКомиссию);
			СписокСтатусовПартии.Добавить(Перечисления.СтатусыПартийТоваров.ПоОрдеру);
			
			ПостроительОтчета.Параметры.Вставить("СписокСтатусовПартии", СписокСтатусовПартии);

	ИначеЕсли Режим = "смешанный" Тогда


		ЗаполнитьПоказатели("КоличествоОстаток",          "Количество (в единицах хранения)",
		                    ЛОЖЬ,   "ЧЦ = 15; ЧДЦ = 3");
		ЗаполнитьПоказатели("КоличествоБазовыхЕдОстаток", "Количество (в базовых единицах)",
		                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 3");
		ЗаполнитьПоказатели("Себестоимость",              "Себестоимость ("+мВалютаУправленческогоУчета+")",
		                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");
		ЗаполнитьПоказатели("ТипЦенЦена",                 "Цена в выбранном типе цен ("+мВалютаУправленческогоУчета+")",
		                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");
		ЗаполнитьПоказатели("ТипЦенСтоимость"        ,    "Стоимость в выбранном типе цен ("+мВалютаУправленческогоУчета+")",
		                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");
		ЗаполнитьПоказатели("ТипЦенНаценка",              "Наценка ("+мВалютаУправленческогоУчета+")",
		                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");
		ЗаполнитьПоказатели("ТипЦенРентабельность",       "Рентабельность (%)",
		                    ИСТИНА, "ЧЦ =  9; ЧДЦ = 2");

		Текст = "
			|ВЫБРАТЬ //РАЗЛИЧНЫЕ
			|	//ТаблицаРегистра.Склад                                                               КАК Склад,
			|	ТаблицаРегистра.Номенклатура                                                        КАК Номенклатура,
			|	ТаблицаРегистра.ХарактеристикаНоменклатуры                                          КАК ХарактеристикаНоменклатуры,
			|	СУММА(ТаблицаРегистра.КоличествоОстаток)                                            КАК КоличествоОстаток,
			|	СУММА(ТаблицаРегистра.КоличествоОстаток
			|	                 *ТаблицаРегистра.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоБазовыхЕдОстаток,
			|	Цена*(КурсыВалютСрезПоследних.Курс/КурсыВалютСрезПоследних.Кратность)
			|	    /(УпрВалюты.Курс/УпрВалюты.Кратность)
			|	    *(&КоэффициентБазовогоТипаЦен)                                                  КАК ТипЦенЦена,
			|	СУММА(ТаблицаРегистра.КоличествоОстаток*Цена //*ЕдиницаИзмерения.Коэффициент
			|	      *(КурсыВалютСрезПоследних.Курс/КурсыВалютСрезПоследних.Кратность)
			|	      /(УпрВалюты.Курс/УпрВалюты.Кратность)
			|	      *(&КоэффициентБазовогоТипаЦен))                                               КАК ТипЦенСтоимость,
			|	СУММА(ПартииТоваров.КоличествоОстаток)                                              КАК ОстатокПоПартиям,
			|	СУММА(ПартииТоваров.СтоимостьОстаток)                                               КАК Себестоимость
			|
			|{ВЫБРАТЬ 
			|	ТаблицаРегистра.Склад.*                        КАК Склад,
			|	ТаблицаРегистра.Номенклатура.*                 КАК Номенклатура,
			|	ТаблицаРегистра.ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|	//ТаблицаРегистра.ЦенаВРознице.*                 КАК ЦенаВРознице
			|//СВОЙСТВА
			|}
			|
			|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОтчета, Валюта = &ВалютаУпрУчета) КАК УпрВалюты,
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОтчета, 
			|	{Склад.*                       КАК Склад,
			|	Номенклатура.*                 КАК Номенклатура,
			|	ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры,
			|	//ЦенаВРознице.*                 КАК ЦенаВРознице}
			|	) КАК ТаблицаРегистра
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОтчета, ТипЦен = &БазовыйТипЦен {Номенклатура.* КАК Номенклатура}) КАК ЦеныНоменклатуры
			|		ПО ТаблицаРегистра.Номенклатура = ЦеныНоменклатуры.Номенклатура И
			|		   ТаблицаРегистра.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОтчета) КАК КурсыВалютСрезПоследних
			|		ПО ЦеныНоменклатуры.Валюта = КурсыВалютСрезПоследних.Валюта
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаОтчета, НЕ(ДокументПоставки ССЫЛКА Документ.ПоступлениеДопРасходов)
			|		                                                                            и НЕ(СтатусПартии = &Неотфактурованный)) КАК ПартииТоваров
			|		ПО ТаблицаРегистра.Номенклатура = ПартииТоваров.Номенклатура
			|//СОЕДИНЕНИЯ
			|
			|{ГДЕ 
			|	ТаблицаРегистра.Склад.*                        КАК Склад,
			|	ТаблицаРегистра.Номенклатура.*                 КАК Номенклатура,
			|	ТаблицаРегистра.ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|	//ТаблицаРегистра.ЦенаВРознице.*                 КАК ЦенаВРознице
			|//СВОЙСТВА
			|//КАТЕГОРИИ
			|}
			|СГРУППИРОВАТЬ ПО
			|	//ТаблицаРегистра.Склад,
			|	ТаблицаРегистра.Номенклатура,
			|	ТаблицаРегистра.ХарактеристикаНоменклатуры,
			|	Цена*(КурсыВалютСрезПоследних.Курс/КурсыВалютСрезПоследних.Кратность)
			|	    /(УпрВалюты.Курс/УпрВалюты.Кратность)
			|	    *(&КоэффициентБазовогоТипаЦен)
			|//СГРУППИРОВАТЬПО
			|
			|{УПОРЯДОЧИТЬ ПО 
			|	ТаблицаРегистра.Склад.*                        КАК Склад,
			|	ТаблицаРегистра.Номенклатура.*                 КАК Номенклатура,
			|	ТаблицаРегистра.ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|//СВОЙСТВА
			|}
			|
			|{ИТОГИ ПО 
			|	ТаблицаРегистра.Склад.*                        КАК Склад ,
			|	ТаблицаРегистра.Номенклатура.*                 КАК Номенклатура,
			|	ТаблицаРегистра.ХарактеристикаНоменклатуры.*   КАК ХарактеристикаНоменклатуры
			|//СВОЙСТВА
			|}
			|
			|ИТОГИ
			|	СУММА(КоличествоОстаток),
			|	СУММА(КоличествоБазовыхЕдОстаток),
			|	СУММА(ТипЦенСтоимость),
			|	СУММА(Себестоимость),
			|	СУММА(ОстатокПоПартиям),
			|	МАКСИМУМ(ТипЦенЦена)
			|
			|ПО ОБЩИЕ";


	КонецЕсли;

	Если ИспользоватьСвойстваИКатегории Тогда

		// Свойства и категории, назначаемые пользователем:
		//Имя поля                    Имя назначения свойств и категорий объектов
		//Склад                       Справочник_Склад
		//Номенклатура                Справочник_Номенклатура
		//ХарактеристикаНоменклатуры  Справочник_ХарактеристикиНоменклатуры
		//Заказ                       Документы
		//ДокументПоставки            Документы

		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ТаблицаРегистра.Номенклатура";
		НоваяСтрока.Представление = "Номенклатура";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "Склад";
		НоваяСтрока.Представление = "Склад";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Склады;

		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";

		// Добавим строки запроса, необходимые для использования свойств и категорий
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, мСоответствиеНазначений, ПостроительОтчета.Параметры, , ТекстПоляКатегорий, ТекстПоляСвойств, , , , , , мСтруктураДляОтбораПоКатегориям);
		
		// Возможность упорядочивания по наименованию свойства
		текстУпорядочитьПоНайден=0;
		текстУпорядочитьПоНайден=Найти(Текст,"{УПОРЯДОЧИТЬ ПО");
		Если текстУпорядочитьПоНайден>0 Тогда
			    СтрокаДляЗамены=Сред(Текст,текстУпорядочитьПоНайден,СтрДлина(Текст));
				позицияЗакрСкобки=Найти(СтрокаДляЗамены,"}");
				СтрокаДляЗамены=Сред(СтрокаДляЗамены,1,позицияЗакрСкобки);
				СтрокаДляЗамены=СтрЗаменить(СтрокаДляЗамены,".Значение",".Значение.Наименование");
		Текст=Сред(Текст,1,текстУпорядочитьПоНайден-1)+СтрокаДляЗамены+Сред(Текст,текстУпорядочитьПоНайден+позицияЗакрСкобки+1,СтрДлина(Текст));		
		КонецЕсли;	
	    
	КонецЕсли;

	ПостроительОтчета.Текст = Текст;

	Если ИспользоватьСвойстваИКатегории Тогда

		УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, мСоответствиеНазначений, СтруктураПредставлениеПолей);

	КонецЕсли;

	Для Каждого Измерение Из МассивИзмерения Цикл
		ПостроительОтчета.ИзмеренияСтроки.Добавить(Измерение, Измерение, ТипИзмеренияПостроителяОтчета.Иерархия);
	КонецЦикла;

	Для Сч = 0 По ПостроительОтчета.ДоступныеПоля.Количество()-1 Цикл
		Поле = ПостроительОтчета.ДоступныеПоля[Сч];
		Поле.Представление = СтруктураПредставлениеПолей[Поле.Имя];
	КонецЦикла;

	Для Сч = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл
		Поле = ПостроительОтчета.ВыбранныеПоля[Сч];
		Поле.Представление = СтруктураПредставлениеПолей[Поле.Имя];
	КонецЦикла;

	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		Поле = ПостроительОтчета.ИзмеренияСтроки[Сч];
		Поле.Представление = СтруктураПредставлениеПолей[Поле.Имя];
	КонецЦикла;

	// Удалим добавляемые автоматически поля измерений
	Сч=0;
	Пока Сч < ПостроительОтчета.ВыбранныеПоля.Количество() Цикл

		Если (ПостроительОтчета.ИзмеренияСтроки.Найти(ПостроительОтчета.ВыбранныеПоля[Сч].Имя)<>Неопределено)
		 ИЛИ (ПостроительОтчета.ИзмеренияКолонки.Найти(ПостроительОтчета.ВыбранныеПоля[Сч].Имя)<>Неопределено) Тогда
			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля[Сч]);
		Иначе
			Сч=Сч+1;
		КонецЕсли;

	КонецЦикла;

	Для Каждого Элемент Из МассивОтбора Цикл
		ПостроительОтчета.Отбор.Добавить(Элемент);
	КонецЦикла; 
	
// { Лапенков 20081029	   Закомментировала Федорова 092013
	//ОтборСклад= ПостроительОтчета.Отбор.Добавить("Склад.ЗапретитьИспользование");
	//ОтборСклад.ВидСравнения = ВидСравнения.Равно;
	//ОтборСклад.Значение = ЛОЖЬ;
	//ОтборСклад.Использование = Истина;
// } Лапенков 20081029

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом,
//  ПоказыватьЗаголовок - флаг того, показывать заголовок или скрывать его
//  ВысотаЗаголовка - возращаемое значение - высота заголовка
//  ТолькоЗаголовок - флаг того, сформировать только заголовок или весь отчет
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт

	ТонкаяЛинияТаблицы  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ТолстаяЛинияТаблицы = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

	Если ДатаОтчета <> '00010101000000' Тогда
		ПостроительОтчета.Параметры.Вставить("ДатаОтчета", КонецДня(ДатаОтчета)+1);
	Иначе
		ПостроительОтчета.Параметры.Вставить("ДатаОтчета", '00010101000000');
	КонецЕсли;
	ПостроительОтчета.Параметры.Вставить("ТипЦен"                    , ТипЦен    );
	Если ТипЦен.Рассчитывается Тогда
		ПостроительОтчета.Параметры.Вставить("БазовыйТипЦен"             , ТипЦен.БазовыйТипЦен);
		ПостроительОтчета.Параметры.Вставить("КоэффициентБазовогоТипаЦен", 1+ТипЦен.ПроцентСкидкиНаценки/100);
	Иначе
		ПостроительОтчета.Параметры.Вставить("БазовыйТипЦен"             , ТипЦен);
		ПостроительОтчета.Параметры.Вставить("КоэффициентБазовогоТипаЦен", 1);
	КонецЕсли;
	ПостроительОтчета.Параметры.Вставить("Неотфактурованный"         , Перечисления.СтатусыПартийТоваров.ПоОрдеру);
	ПостроительОтчета.Параметры.Вставить("ВалютаУпрУчета"            , мВалютаУправленческогоУчета);

	Если НЕ ЗадатьПараметрыОтбораПоКатегориям(ПостроительОтчета, мСтруктураДляОтбораПоКатегориям) Тогда
		Предупреждение("Нельзя задавать параметры отбора по категориям дважды!");
		ДокументРезультат.Показать();
		возврат;
	КОнецЕсли;

	МакетОтчета = ПолучитьМакет("Макет");

	// Если не выбрано ни одного поля, то флаг вывода детальных записей сбрасываем
	Если ВыводитьДетальныеЗаписи И ПостроительОтчета.ВыбранныеПоля.Количество()=0 Тогда
		ВыводитьДетальныеЗаписи= Ложь;
	КонецЕсли;

	МассивЦветаИзмерений = Новый Массив;
	Если РаскрашиватьИзмерения Тогда

		ТабДокЦветаИзмерений = МакетОтчета.ПолучитьОбласть("ЦветаИзмерений");
		Для Сч = 1 По ТабДокЦветаИзмерений.ВысотаТаблицы Цикл
			МассивЦветаИзмерений.Добавить(ТабДокЦветаИзмерений.Область(Сч,2).ЦветФона);
		КонецЦикла;

		Если НЕ ВыводитьДетальныеЗаписи Тогда
			МассивЦветаИзмерений.Добавить(Новый Цвет());
		КонецЕсли;

	КонецЕсли;

	ПостроительОтчета.ЗаполнениеРасшифровки   = ВидЗаполненияРасшифровкиПостроителяОтчета.Расшифровка;
	ПостроительОтчета.ВыводитьДетальныеЗаписи = ВыводитьДетальныеЗаписи;

	//+++( 19.09.2012 - ограничение по подразделению
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		ДоступноеПодразделение = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
		Если ПостроительОтчета.Отбор.Найти("СкладПодразделение") = неопределено тогда
			ПостроительОтчета.Отбор.Добавить("Склад.Подразделение","СкладПодразделение","Склад.Подразделение");
		КонецЕсли;	
    	ПостроительОтчета.Отбор.СкладПодразделение.Значение = ДоступноеПодразделение;
		ПостроительОтчета.Отбор.СкладПодразделение.Использование = Истина;
		ПостроительОтчета.Отбор.СкладПодразделение.ВидСравнения = ВидСравнения.Равно;
	КонецЕсли; //+++)

	ОбластьСтрока         = МакетОтчета.Область("Строка");
	ОбластьСтрокаИерархии = МакетОтчета.Область("СтрокаИерархии");
	ОбластьДетали         = МакетОтчета.Область("СтрокаДетали");
	ОбластьОбщиеИтоги     = МакетОтчета.Область("ОбщиеИтоги");
	ОбластьКолонка        = МакетОтчета.Область("КолонкаДанные");

	КоличествоПоказателей = 0;
	Для Каждого Показатель Из Показатели Цикл

		Если Показатель.Использование = Истина Тогда
			Если КоличествоПоказателей>0 Тогда
				МакетОтчета.ВставитьОбласть(ОбластьКолонка, ОбластьКолонка, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
				ОбластьКолонка = МакетОтчета.Область("КолонкаДанные");
			КонецЕсли;

			КоличествоПоказателей = КоличествоПоказателей+1;
		КонецЕсли;

	КонецЦикла;

	Если КоличествоПоказателей = 0 Тогда
		Возврат;
	КонецЕсли; 

	ОбластьПоле = МакетОтчета.Область("Поле");

	КоличествоКолонок = 1;

	Если ВыводитьДетальныеЗаписи Тогда
		Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда
			ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицыНиз");
		Иначе
			ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицы");
		КонецЕсли;

		НачКоличествоКолонок = КоличествоКолонок;
		Для Инд = НачКоличествоКолонок По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл  // на 1 меньше количества полей - одно уже есть
			МакетОтчета.ВставитьОбласть(ОбластьПоле, ОбластьПоле, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КоличествоКолонок = КоличествоКолонок + 1;
			ОбластьПоле = МакетОтчета.Область("Поле");
		КонецЦикла;

		МакетОтчета.Область(ОбластьДетали.Верх,1+1,ОбластьДетали.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

		Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл
			МакетОтчета.Область(ОбластьДетали.Верх,1+1+Инд).Параметр = ПостроительОтчета.ВыбранныеПоля[Инд].Имя;
		КонецЦикла;

		Кол = 0;
		Для Каждого Показатель Из Показатели Цикл
			Если Показатель.Использование = Истина Тогда
				ИмяПоказателя = Показатель.Имя;
				ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;

				МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+Кол).Параметр = ИмяПоказателя;
				МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+Кол).Формат   = ФорматПоказателя;
				Кол = Кол + 1;
			КонецЕсли;
		КонецЦикла;

		ПостроительОтчета.МакетДетальныхЗаписей = МакетОтчета.ПолучитьОбласть(ОбластьДетали.Верх, ,ОбластьДетали.Верх);
	КонецЕсли;

	// Если выводятся только итоги или количество колонок = 1, увеличим ширину первой колонки 
	Если НЕ ВыводитьДетальныеЗаписи ИЛИ КоличествоКолонок=1 Тогда
		ОбластьПоле.ШиринаКолонки = 30;
	КонецЕсли;

	
	Если ВыводитьДополнительныеПоляВОтдельнойКолонке Тогда

			// Определим, нужна ли дополнительная колонка для реквизитов измерений
			Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

				Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];
				Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

					Если ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным <> Измерение.ПутьКДанным
						И Найти(ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным, Измерение.ПутьКДанным) >0 Тогда

						ИмяПараметра = ПостроительОтчета.ВыбранныеПоля[Инд].Имя;;

						ВыводДопРеквизитов = Истина;
						
						МакетОтчета.ВставитьОбласть(ОбластьПоле,ОбластьПоле,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
						КоличествоКолонок = КоличествоКолонок+1;
						ОбластьПоле = МакетОтчета.Область("Поле");

					КонецЕсли;

				КонецЦикла;
			КонецЦикла;

		КонецЕсли;

	// Формирование макета заголовка отчета
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+1,МакетОтчета.Область("Заголовок").Низ,1+1).Заполнение                                       = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+2,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+2,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+КоличествоПоказателей).Очистить(Истина);
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+1,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+КоличествоПоказателей).ПоВыделеннымКолонкам = Истина;

	СписокИзмерений = "";
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		СписокИзмерений = СписокИзмерений + ", " + ПостроительОтчета.ИзмеренияСтроки[Сч].Представление + " " + ПостроительОтчета.ИзмеренияСтроки[Сч].ТипИзмерения;
	КонецЦикла;

	СписокПоказателей = "";
	Для Сч=0 По Показатели.Количество()-1 Цикл
		Если Показатели[Сч].Использование Тогда
			СписокПоказателей = СписокПоказателей +", "+ Показатели[Сч].Представление;
		КонецЕсли;
	КонецЦикла;

	СписокОтбор = "";
	Для Сч=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		Если ПостроительОтчета.Отбор[Сч].Использование Тогда
			СписокОтбор = СписокОтбор + ", " + ПостроительОтчета.Отбор[Сч].Представление + " " + ПостроительОтчета.Отбор[Сч].ВидСравнения + " " + ПостроительОтчета.Отбор[Сч].Значение;
		КонецЕсли;
	КонецЦикла;

	ЗаголовокОтчета = МакетОтчета.ПолучитьОбласть("Заголовок");
	ЗаголовокОтчета.Параметры.ЗаголовокОтчета = мНазваниеОтчета;
	Если ДатаОтчета = '00010101000000' Тогда
		Если ТолькоЗаголовок Тогда
			ОписаниеПериода = "на текущее время " + Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
		Иначе
			ОписаниеПериода = "на " + Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг ЧЧ:мм:сс""; ДП = ""...""");
		КонецЕсли; 
	Иначе
		ОписаниеПериода = "на конец дня " + Формат(ДатаОтчета, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
	КонецЕсли;
	ЗаголовокОтчета.Параметры.Период          = "Данные "          + ОписаниеПериода;
	ЗаголовокОтчета.Параметры.ЦеныСравнения   = "Тип цены для сравнения: " + ТипЦен.Наименование;
	ЗаголовокОтчета.Параметры.Измерения       = "Итоги по: "       + Сред(СписокИзмерений, 2);
	ЗаголовокОтчета.Параметры.Показатели      = "Показатели: "     + Сред(СписокПоказателей, 2);
	ЗаголовокОтчета.Параметры.Отбор           = "Отбор:"           + Сред(СписокОтбор,2);
	ПостроительОтчета.МакетЗаголовкаОтчета = ЗаголовокОтчета;

	ВысотаЗаголовка = ПостроительОтчета.МакетЗаголовкаОтчета.ВысотаТаблицы;

	Если ТолькоЗаголовок Тогда
		ДокументРезультат.Вывести(ЗаголовокОтчета);
		Возврат;
	КонецЕсли;

	ОбластьШапкаТаблицы    = МакетОтчета.Область("ШапкаТаблицы");
	ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицыНиз");

	КоличествоКолонокСТипомЦен = 0;
	ОбъединитьКолонки = Ложь;
	Кол = 0;
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.Использование = Истина Тогда

			ИмяПоказателя = Показатель.Имя;
			Если ИмяПоказателя = "КоличествоОстаток" Тогда
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+Кол).Текст = "Количество";
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+Кол).Текст = "в единицах хранения";
				ОбъединитьКолонки = Истина;
			ИначеЕсли ИмяПоказателя = "КоличествоБазовыхЕдОстаток" Тогда
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+Кол).Текст = "Количество";
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+Кол).Текст = "в базовых единицах";
				ОбъединитьКолонки = Истина;
			ИначеЕсли ИмяПоказателя = "НеотфактурованныйОстаток" Тогда
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+Кол).Текст = "Количество";
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+Кол).Текст = "неотфактурованных в единицах хранения";
				ОбъединитьКолонки = Истина;
			ИначеЕсли ИмяПоказателя = "НеотфактурованныйБазовыхЕдОстаток" Тогда
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+Кол).Текст = "Количество";
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+Кол).Текст = "неотфактурованных в базовых единицах";
				ОбъединитьКолонки = Истина;
			ИначеЕсли ИмяПоказателя = "Себестоимость" Тогда
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+Кол).Текст = "Cебестоимость";
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+Кол).Текст = "("+мВалютаУправленческогоУчета+")";
				ОбъединитьКолонки = Истина;
			ИначеЕсли ИмяПоказателя = "СебестоимостьЕдиницы" Тогда
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+Кол).Текст = "Себест. единицы (цена входа)";
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+Кол).Текст = "("+мВалютаУправленческогоУчета+")";
				ОбъединитьКолонки = Истина;
	
			//ИначеЕсли ИмяПоказателя = "СтоимостьРознОстаток" Тогда
			//	МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+Кол).Текст = "Сумма";
			//	МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+Кол).Текст = "в рознице ("+мВалютаУправленческогоУчета+")";
			//	ОбъединитьКолонки = Истина;
			ИначеЕсли ИмяПоказателя = "ТипЦенЦена" Тогда
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+Кол).Текст = ТипЦен;
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+Кол).Текст = "цена ("+мВалютаУправленческогоУчета+")";
				КоличествоКолонокСТипомЦен = КоличествоКолонокСТипомЦен + 1;
			ИначеЕсли ИмяПоказателя = "ТипЦенСтоимость" Тогда
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+Кол).Текст = ТипЦен;
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+Кол).Текст = "сумма ("+мВалютаУправленческогоУчета+")";
				КоличествоКолонокСТипомЦен = КоличествоКолонокСТипомЦен + 1;
			ИначеЕсли ИмяПоказателя = "ТипЦенНаценка" Тогда
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+Кол).Текст = ТипЦен;
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+Кол).Текст = "наценка ("+мВалютаУправленческогоУчета+")";
				КоличествоКолонокСТипомЦен = КоличествоКолонокСТипомЦен + 1;
			ИначеЕсли ИмяПоказателя = "ТипЦенРентабельность" Тогда
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+Кол).Текст = ТипЦен;
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+Кол).Текст = "рентабельность (%)";
				КоличествоКолонокСТипомЦен = КоличествоКолонокСТипомЦен + 1;
			ИначеЕсли ИмяПоказателя = "ПроцентНаценки" Тогда
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+1+Кол).Текст = ТипЦен;
				МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Верх,1+КоличествоКолонок+1+Кол).Текст = "Процент наценки";
				КоличествоКолонокСТипомЦен = КоличествоКолонокСТипомЦен + 1;	
			КонецЕсли;

			Кол = Кол + 1;

			Если ОбъединитьКолонки И КоличествоКолонокСТипомЦен <> 0 Тогда
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+Кол-КоличествоКолонокСТипомЦен,
				                    ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+Кол-1).Объединить();
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+Кол-КоличествоКолонокСТипомЦен).ГраницаСнизу = ТонкаяЛинияТаблицы;
				КоличествоКолонокСТипомЦен = 0;
				ОбъединитьКолонки = Ложь;
			Иначе
				ОбъединитьКолонки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если КоличествоКолонокСТипомЦен <> 0 Тогда
		МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+Кол-КоличествоКолонокСТипомЦен+1,
		                    ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+Кол).Объединить();
		МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+Кол-КоличествоКолонокСТипомЦен+1).ГраницаСнизу = ТонкаяЛинияТаблицы;
		КоличествоКолонокСТипомЦен = 0;
		ОбъединитьКолонки = Ложь;
	КонецЕсли;

	МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1, 1+КоличествоКолонок+Кол-КоличествоКолонокСТипомЦен).ГраницаСправа = ТолстаяЛинияТаблицы;

	// Назначение, корректировка макетов измерений
	Сдвиг = Макс(МассивЦветаИзмерений.Количество()-ПостроительОтчета.ИзмеренияСтроки.Количество(),0);

	// Структура, определяющая вывод показателей
	СтруктураВыводаПоказателей = Новый Структура;

	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];

		Если МассивЦветаИзмерений.Количество()>0 Тогда
			ЦветИзмерения = МассивЦветаИзмерений[Сдвиг+((Сч) - (МассивЦветаИзмерений.Количество()-Сдвиг)*Цел((Сч)/(МассивЦветаИзмерений.Количество()-Сдвиг)))];
		Иначе
			ЦветИзмерения = Новый Цвет();
		КонецЕсли;

		ФорматПоля = "";

		МакетОтчета.Область(ОбластьСтрока.Верх,1+1,ОбластьСтрока.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Отступ = Сч;
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1,ОбластьСтрока.Верх,1+КоличествоКолонок+КоличествоПоказателей).ЦветФона = ЦветИзмерения;
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).ПараметрРасшифровки = Измерение.Имя;

		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1).Отступ = Сч;
		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+КоличествоПоказателей).ЦветФона = ЦветИзмерения;

		//Если КоличествоКолонок > 1 Тогда
		//	МакетОтчета.Область(ОбластьСтрока.Верх,1+1, ОбластьСтрока.Верх,1+КоличествоКолонок).Объединить();
		//КонецЕсли;

		Шаблон = "["+Измерение.Имя+"]";

		//Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

		//	Если ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным <> Измерение.ПутьКДанным
		//	   И Найти(ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным, Измерение.ПутьКДанным) >0 Тогда
		//		Шаблон = Шаблон + ", [" + ПостроительОтчета.ВыбранныеПоля[Инд].Имя+"]";
		//	КонецЕсли;

		//КонецЦикла;

		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Текст = Шаблон;

		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1).Параметр = Измерение.Имя;

		//Если КоличествоКолонок>1 ИЛИ КоличествоПоказателей>1 Тогда
		//	МакетОтчета.Область(ОбластьСтрокаИерархии.Верх, 1+1, ОбластьСтрокаИерархии.Верх, 1+КоличествоКолонок).Объединить();
		//КонецЕсли; 

		Если ВыводитьДополнительныеПоляВОтдельнойКолонке Тогда
			Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл
				Если ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным <> Измерение.ПутьКДанным
					И Найти(ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным, Измерение.ПутьКДанным) >0 Тогда
					
					
					МакетОтчета.Область(ОбластьСтрока.Верх,1+1+Инд+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
					МакетОтчета.Область(ОбластьСтрока.Верх,1+1+Инд+1).Текст = " [" + ПостроительОтчета.ВыбранныеПоля[Инд].Имя+"]";
					
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1+Инд+1,ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1+Инд+1).Параметр = " [" + ПостроительОтчета.ВыбранныеПоля[Инд].Имя+"]";
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;

		Кол = 0;
		Для Каждого Показатель Из Показатели Цикл

			Если Показатель.Использование = Истина Тогда
				ИмяПоказателя = Показатель.Имя;
				ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;

				МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+Кол).Параметр = ИмяПоказателя;
				МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+Кол).Формат   = ФорматПоказателя;
				МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+Кол).Параметр = ИмяПоказателя;
				МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+Кол).Формат   = ФорматПоказателя;
				Кол = Кол + 1;
			КонецЕсли; 

		КонецЦикла; 

		Измерение.Макет         = МакетОтчета.ПолучитьОбласть(ОбластьСтрока.Верх,         , ОбластьСтрока.Верх        );
		Измерение.МакетИерархии = МакетОтчета.ПолучитьОбласть(ОбластьСтрокаИерархии.Верх, , ОбластьСтрокаИерархии.Верх);

	КонецЦикла;

	// Формирование макета общих итогов
	МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1,
	                    ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

	Если КоличествоКолонок > 1 Тогда
		МакетОтчета.Область(ОбластьОбщиеИтоги.Верх, 1+1, ОбластьОбщиеИтоги.Верх, 1+КоличествоКолонок).Объединить();
	КонецЕсли; 
	
	Кол = 0;
	Для Каждого Показатель Из Показатели Цикл

		Если Показатель.Использование = Истина Тогда
			ИмяПоказателя = Показатель.Имя;
			ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;

			МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+Кол).Параметр = ИмяПоказателя;
			МакетОтчета.Область(ОбластьОбщиеИтоги.Верх,1+КоличествоКолонок+1+Кол).Формат   = ФорматПоказателя;
			Кол = Кол + 1;
		КонецЕсли;

	КонецЦикла;

	ПостроительОтчета.МакетОбщихИтогов = МакетОтчета.ПолучитьОбласть(ОбластьОбщиеИтоги.Верх, , ОбластьОбщиеИтоги.Верх);

	МакетШапкиТаблицы = МакетОтчета.ПолучитьОбласть("ШапкаТаблицыОбщая");

	// Заголовок первой колонки
	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда

		//В заголовке колонки детальной записи оставим только название последнего поля
		ЗаголовокКолонки = ПостроительОтчета.ИзмеренияСтроки[ПостроительОтчета.ИзмеренияСтроки.Количество()-1].Представление;
		Для Поз = 1 По СтрЧислоВхождений(ЗаголовокКолонки, ".") Цикл
			ЗаголовокКолонки = Сред(ЗаголовокКолонки, Найти(ЗаголовокКолонки,".")+1);
		КонецЦикла;
		МакетШапкиТаблицы.Область(2,1+1).Текст = ЗаголовокКолонки;

	КонецЕсли;

	ПостроительОтчета.МакетПодвалаТаблицы = МакетОтчета.ПолучитьОбласть("Подвал");

	МакетШапкиТаблицы.Область(2, 1+1, 3, 1+КоличествоКолонок).Объединить();

	// Шапка таблицы имеет внизу граница той же линией, что и вверху
	ШиринаТаблицы = 1+КоличествоКолонок+КоличествоПоказателей;
	МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 2, МакетШапкиТаблицы.ВысотаТаблицы, ШиринаТаблицы).ГраницаСнизу =
		Новый Линия(МакетШапкиТаблицы.Область(2, 2).ГраницаСверху.ТипЛинии, МакетШапкиТаблицы.Область(2, 2).ГраницаСверху.Толщина);

	// Назначим построителю сформированнный макет шапки
	ПостроительОтчета.МакетШапкиТаблицы = МакетШапкиТаблицы;

	// Подвал отчета не выводится
	ПостроительОтчета.ВыводитьПодвалОтчета = Ложь;
	
	ПроверитьПорядокПостроителяОтчета(ПостроительОтчета);

	ПостроительОтчета.Выполнить();
	РезультатЗапроса = ПостроительОтчета.Результат;

	ДокументРезультат.Очистить();

	МакетЗаголовка = ПостроительОтчета.МакетЗаголовкаОтчета;
	ДокументРезультат.Вывести(МакетЗаголовка);
	МакетШапки = ПостроительОтчета.МакетШапкиТаблицы;
	ДокументРезультат.Вывести(МакетШапки);

	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	ВывестиСтроку(РезультатЗапроса, 0, КоличествоКолонок, КоличествоПоказателей, ДокументРезультат);
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	Пока Выборка.Следующий() Цикл
		МакетОбщихИтогов = ПостроительОтчета.МакетОбщихИтогов;
		МакетИзмерение = МакетОбщихИтогов.ПолучитьОбласть(1,1,МакетОбщихИтогов.ВысотаТаблицы,1+КоличествоКолонок);
		ДокументРезультат.Вывести(МакетИзмерение);

		// Макет показателей
		МакетПоказатель = МакетОбщихИтогов.ПолучитьОбласть(1                             ,1+КоличествоКолонок+1,
		                                                   МакетОбщихИтогов.ВысотаТаблицы,1+КоличествоКолонок+КоличествоПоказателей);

		// Выводим показатели в соответствии с их порядком в шапке
		ВывестиПоказатели(Выборка, КоличествоПоказателей, ДокументРезультат, МакетПоказатель, Ложь, Ложь);
	КонецЦикла;

	МакетПодвала = ПостроительОтчета.МакетПодвалаТаблицы;
	ДокументРезультат.Вывести(МакетПодвала);

	// Управление заголовком
	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);

	// Справа граница той же линией, что и слева в шапке таблицы
	ШиринаТаблицы = 1+КоличествоКолонок+КоличествоПоказателей;
	ДокументРезультат.Область(ВысотаЗаголовка+2, ШиринаТаблицы, ДокументРезультат.ВысотаТаблицы-1, ШиринаТаблицы).ГраницаСправа = ТолстаяЛинияТаблицы;

	// Слева граница той же линией, что и слева в шапке таблицы
	ДокументРезультат.Область(ВысотаЗаголовка+2, 2, ДокументРезультат.ВысотаТаблицы-1, 2).ГраницаСлева = ТолстаяЛинияТаблицы;

	// Фиксация шапки
	ДокументРезультат.ФиксацияСверху = ПостроительОтчета.МакетЗаголовкаОтчета.ВысотаТаблицы + ПостроительОтчета.МакетШапкиТаблицы.ВысотаТаблицы;

КонецПроцедуры

Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму("ГлавнаяФорма");
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

МассивСтрока = Новый Массив;
МассивСтрока.Добавить(Тип("Строка"));
КвалификаторСтроки  = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная);
ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

// Инициализация таблиц всех возможных показателей, группировок,  фильтров
мТаблицаПоказатели = Новый ТаблицаЗначений;
мТаблицаПоказатели.Колонки.Добавить("ИмяПоля",           ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ОписаниеПоля",      ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ВклПоУмолчанию",    ОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("Пометка",           ОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока",   ОписаниеТиповСтрока);

МассивКатегории = Новый Массив;
МассивКатегории.Добавить(Тип("СправочникСсылка.КатегорииОбъектов"));
ОписаниеТиповКатегории = Новый ОписаниеТипов(МассивКатегории);

мНазваниеОтчета = "Стоимостная оценка склада в ценах номенклатуры";

мРежимы = Новый СписокЗначений;
мРежимы.Добавить("оперативный"  , "оперативный (остатки)");

ТаблицаУчетнойПолитики = РегистрыСведений.УчетнаяПолитика.СрезПоследних(РабочаяДата);
Если ТаблицаУчетнойПолитики<>Неопределено Тогда
	Если ТаблицаУчетнойПолитики[0].ВестиПартионныйУчетПоСкладам Тогда 
		мРежимы.Добавить("неоперативный", "неоперативный (остатки и себестоимость)");
	Иначе
		мРежимы.Добавить("смешанный", "неоперативный (остатки и себестоимость)");
	КонецЕсли;
КонецЕсли;

мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
ИспользоватьХарактеристики  = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();