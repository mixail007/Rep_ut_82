Перем ВысотаЗаголовка;
Перем ВостановилиЗначение;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УправлениеПометкамиКнопокКоманднойПанели()

	Если ПоказыватьЗаголовок Тогда
		ЭлементыФормы.КоманднаяПанель.Кнопки.Заголовок.Пометка                = Истина;
		ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанель.Кнопки.Заголовок.Пометка                = Ложь;
		ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Ложь;
	КонецЕсли;

	Если ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.КоманднаяПанель.Кнопки.Отбор.Пометка                = Ложь;
		ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отбор.Пометка = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанель.Кнопки.Отбор.Пометка                = Истина;
		ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отбор.Пометка = Истина;
	КонецЕсли;

КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

Процедура ОбновитьОтчет() Экспорт

	СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка);

	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДокументРезультат;

КонецПроцедуры

Процедура ВыводЗаголовка()

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда
		СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, Истина);
	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();

КонецПроцедуры // ВыводЗаголовка()

Процедура СформироватьЗаголовокФормы()

	Заголовок = СформироватьЗаголовокОсновнойФормы(, ДатаОтчета, мНазваниеОтчета, Истина);

КонецПроцедуры // СформироватьЗаголовокФормы()

Процедура ПодготовитьСохраняемыеНастройки()

	СохраненныеНастройки = Новый Структура;
	СохраненныеНастройки.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
	СохраненныеНастройки.Вставить("Показатели"          , Показатели.Выгрузить());
	СохраненныеНастройки.Вставить("ТипЦен"          , ТипЦен);
	СохраненныеНастройки.Вставить("ИспользоватьСвойстваИКатегории"          , ИспользоватьСвойстваИКатегории);

	// Остальные реквизиты отчета сохраняются стандартно

КонецПроцедуры

Процедура ПрочитатьСохраняемыеНастройки()

	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		ИспользоватьСвойстваИКатегорииДо  = ИспользоватьСвойстваИКатегории;
		СохраненныеНастройки.Свойство("ИспользоватьСвойстваИКатегории", ИспользоватьСвойстваИКатегории);
		Если ИспользоватьСвойстваИКатегории <> ИспользоватьСвойстваИКатегорииДо Тогда
			ЗаполнитьНачальныеНастройки();
		КонецЕсли;

		ПостроительОтчета.УстановитьНастройки(СохраненныеНастройки.НастройкиПостроителя);
		Показатели.Загрузить(СохраненныеНастройки.Показатели);
		СохраненныеНастройки.Свойство("ТипЦен", ТипЦен);

		// Остальные реквизиты отчета восстанавливаются стандартно
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	//+++ 26.06.2013
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") 
		И НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "СтаршийМенеджерПодразделения") Тогда
           СообщитьОбОшибке("У вас недостаточно прав для просмотра данного отчета!");
		   Отказ = истина;
		   Возврат;
	КонецЕсли;

	// Установим дату отчета
	ДатаОтчета            = КонецДня(РабочаяДата);
	РаскрашиватьИзмерения = ИСТИНА;
	ПоказыватьЗаголовок   = ИСТИНА;
	ИспользоватьСвойстваИКатегории = ЛОЖЬ;
	Режим = мРежимы[0].Значение;

	СформироватьЗаголовокФормы();
	ЗаполнитьНачальныеНастройки();

	УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, мСтруктураСвязиЭлементовСДанными, "ОтчетОбъект.ПостроительОтчета.Отбор");

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	Если НЕ ВостановилиЗначение Тогда
		ВыводЗаголовка();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	СформироватьЗаголовокФормы();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

// Процедура - обработчик нажатия на кнопку "Сформировать".
//
Процедура КоманднаяПанельСформировать(Элемент)

	ОбновитьОтчет();

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Отбор".
//
Процедура КоманднаяПанельОтбор(Кнопка)

	Если НЕ ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Нет;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Заголовок".
//
Процедура КоманднаяПанельЗаголовок(Кнопка)

	ПоказыватьЗаголовок = Не ПоказыватьЗаголовок;
	ВыводЗаголовка();

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Настройка".
//
Процедура КоманднаяПанельНастройка(Кнопка)

	ФормаНастройка = ПолучитьФорму("ФормаНастройки", ЭтаФорма);

	Если ФормаНастройка.ОткрытьМодально() = ИСТИНА Тогда

		ОбновитьОтчет();

	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" поля "ПолеНастройкиНоменклатура".
//
Процедура ПолеНастройкиНоменклатураПриИзменении(Элемент)

	ПолеНастройкиПриИзменении(Элемент, ПостроительОтчета.Отбор);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ПолеНастройкиСклад".
//
Процедура ПолеНастройкиСкладКомпанииПриИзменении(Элемент)

	ПолеНастройкиПриИзменении(Элемент, ПостроительОтчета.Отбор);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ПолеВидаСравненияНоменклатура".
//
Процедура ПолеВидаСравненияНоменклатураПриИзменении(Элемент)

	ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ПолеВидаСравненияСкладКомпании".
//
Процедура ПолеВидаСравненияСкладКомпанииПриИзменении(Элемент)

	ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СОХРАНЕНИЕ И ВОСТАНОВЛЕНИЕ НАСТРОЕК

// Процедура - обработчик события перед сохранением значений формы
//
Процедура ПередСохранениемЗначений(Отказ)

	ПодготовитьСохраняемыеНастройки();

КонецПроцедуры

// Процедура - обработчик события после восстановления значений формы
//
Процедура ПослеВосстановленияЗначений()

	ЗаполнитьНачальныеНастройки();
	ПрочитатьСохраняемыеНастройки();
	ВыводЗаголовка();

	ВостановилиЗначение = Истина;
	
	УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, мСтруктураСвязиЭлементовСДанными, "ОтчетОбъект.ПостроительОтчета.Отбор");

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////

ВостановилиЗначение = Ложь;
