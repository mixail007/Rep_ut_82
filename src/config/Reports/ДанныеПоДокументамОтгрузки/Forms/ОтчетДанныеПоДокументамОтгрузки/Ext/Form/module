
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОтчетДанныеПоДокументамОтгрузкиИнициализация();

КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаОтчетыДанныеПоДокументамОтгрузкиОтчетДанныеПоДокументамОтгрузки_88668742-d2c2-462a-899c-e7a00d8f3995", ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.ПолучитьНастройки());

КонецПроцедуры


Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачДата, ?(КонДата='0001-01-01', КонДата, КонецДня(КонДата)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачДата = НастройкаПериода.ПолучитьДатуНачала();
		КонДата = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
ОтчетДанныеПоДокументамОтгрузкиВывести();//+++ сразу	
КонецПроцедуры

Процедура НачДатаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если КонДата<НачДата тогда
		КонДата = НачДата;
	КонецЕсли;	
КонецПроцедуры

Процедура КонДатаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если КонДата<НачДата тогда
		НачДата = КонДата;
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыОтчетДанныеПоДокументамОтгрузкиНастройка(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(ОтчетДанныеПоДокументамОтгрузки)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Форма = ОтчетОбъект.ПолучитьФорму("ОтчетДанныеПоДокументамОтгрузкиНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки;
	Настройка = ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетДанныеПоДокументамОтгрузкиВывести();
	Иначе
		ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыОтчетДанныеПоДокументамОтгрузкиСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(ОтчетДанныеПоДокументамОтгрузки)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ОтчетДанныеПоДокументамОтгрузкиВывести();

	
	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура ОтчетДанныеПоДокументамОтгрузкиВывести()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(ОтчетДанныеПоДокументамОтгрузки)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();

	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.Параметры.Вставить("КонДата", КонДата);
	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.Параметры.Вставить("НачДата", НачДата);
	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.Параметры.Вставить("ПустаяДата", Неопределено);
	
	//Орлов++
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		ДоступноеПодразделение = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
		НомерРеализации = "###";
		Если СокрЛП(ДоступноеПодразделение.ПрефиксИБ)<>"" тогда
			НомерРеализации = нрег( СокрЛП(ДоступноеПодразделение.ПрефиксИБ) );
		//Если ДоступноеПодразделение.Код = "00005" Тогда//Головное
		//	НомерРеализации = "тк";	
		//ИначеЕсли ДоступноеПодразделение.Код = "00106" Тогда//Ростов
		//	НомерРеализации = "рд";
		//ИначеЕсли ДоступноеПодразделение.Код = "00112" Тогда//Питер
		//	НомерРеализации = "сп";
		КонецЕсли; 
		
		Если ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.Отбор.Найти("НомерРеализации") = Неопределено Тогда
			ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.Отбор.Добавить("НомерРеализации");
		КонецЕсли;
		ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.Отбор.НомерРеализации.ВидСравнения = ВидСравнения.Содержит;
		ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.Отбор.НомерРеализации.Значение = НомерРеализации;
		ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.Отбор.НомерРеализации.Использование = Истина;	
	КонецЕсли;
	//Орлов--

	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.Выполнить();
	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.Макет = ОтчетОбъект.ПолучитьМакет("ОтчетДанныеПоДокументамОтгрузки");
	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.ОформитьМакет();
	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);
	
	//Орлов++ для вывода нумерации строк
	ы = 1;
	ц = 8;
	Пока ЗначениеЗаполнено(ЭлементыФормы.ПолеТабличногоДокумента.Область("R"+Формат(ц,"ЧГ=0")+"C4").Текст) Цикл
		ЭлементыФормы.ПолеТабличногоДокумента.Область("R"+Формат(ц,"ЧГ=0")+"C1").Текст = Формат(ы,"ЧГ=0");
		ы = ы + 1;
		ц = ц + 2;	
	КонецЦикла;
	//Орлов--


	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры

//+++ главный запрос
Процедура ОтчетДанныеПоДокументамОтгрузкиИнициализация()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(ОтчетДанныеПоДокументамОтгрузки)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.Текст =
	"ВЫБРАТЬ
	|	ДанныеДляУчетаОтгрузок.ОтветственноеЛицо КАК Менеджер,
	|	ДанныеДляУчетаОтгрузок.НомерРеализации КАК НомерРеализации,
	|	ДанныеДляУчетаОтгрузок.Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДляУчетаОтгрузок.Контрагент),
	|	ДанныеДляУчетаОтгрузок.Период КАК Период,
	|	ДанныеДляУчетаОтгрузок.СуммаОтгрузки,
	|	ДанныеДляУчетаОтгрузок.Доверенность,
	|	ДанныеДляУчетаОтгрузок.ДатаВозвратаТоварнойНакладной,
	|	ДанныеДляУчетаОтгрузок.ДатаВозвратаСпецификации,
	|	ДанныеДляУчетаОтгрузок.ДатаВозвратаТТН,
	|	ДанныеДляУчетаОтгрузок.ОтправкаСчетФактура,
	|	ДанныеДляУчетаОтгрузок.ОтправкаТоварнаяНакладная,
	|	ДанныеДляУчетаОтгрузок.ОтправкаСпецификация,
	|	ДанныеДляУчетаОтгрузок.ОтправкаТТН,
	|	ДанныеДляУчетаОтгрузок.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА ДанныеДляУчетаОтгрузок.ДатаОтправкиСчетФактуры = &ПустаяДата
	|			ТОГДА """"
	|		ИНАЧЕ ДанныеДляУчетаОтгрузок.ДатаОтправкиСчетФактуры
	|	КОНЕЦ КАК ДатаОтправкиСчетФактуры,
	|	ВЫБОР
	|		КОГДА ДанныеДляУчетаОтгрузок.ДатаОтправкиТоварнойНакладной = &ПустаяДата
	|			ТОГДА """"
	|		ИНАЧЕ ДанныеДляУчетаОтгрузок.ДатаОтправкиТоварнойНакладной
	|	КОНЕЦ КАК ДатаОтправкиТоварнойНакладной,
	|	ВЫБОР
	|		КОГДА ДанныеДляУчетаОтгрузок.ДатаОтправкиСпецификации = &ПустаяДата
	|			ТОГДА """"
	|		ИНАЧЕ ДанныеДляУчетаОтгрузок.ДатаОтправкиСпецификации
	|	КОНЕЦ КАК ДатаОтправкиСпецификации,
	|	ВЫБОР
	|		КОГДА ДанныеДляУчетаОтгрузок.ДатаОтправкиТТН = &ПустаяДата
	|			ТОГДА """"
	|		ИНАЧЕ ДанныеДляУчетаОтгрузок.ДатаОтправкиТТН
	|	КОНЕЦ КАК ДатаОтправкиТТН
	|{ВЫБРАТЬ
	|	НомерРеализации,
	|	Контрагент.*,
	|	Период,
	|	СуммаОтгрузки,
	|	Доверенность,
	|	ДатаВозвратаТоварнойНакладной,
	|	ДатаВозвратаСпецификации,
	|	ДатаВозвратаТТН,
	|	ОтправкаСчетФактура.*,
	|	ОтправкаТоварнаяНакладная.*,
	|	ОтправкаСпецификация.*,
	|	ОтправкаТТН.*,
	|	Статус.*,
	|	ДатаОтправкиСчетФактуры,
	|	ДатаОтправкиТоварнойНакладной,
	|	ДатаОтправкиСпецификации,
	|	ДатаОтправкиТТН}
	|ИЗ
	|	РегистрСведений.ДанныеДляУчетаОтгрузок КАК ДанныеДляУчетаОтгрузок
	|ГДЕ
	|	ДанныеДляУчетаОтгрузок.Период МЕЖДУ &НачДата И &КонДата
	|{ГДЕ
	|	ДанныеДляУчетаОтгрузок.НомерРеализации,
	|	ДанныеДляУчетаОтгрузок.Контрагент.*,
	|	ДанныеДляУчетаОтгрузок.Период,
	|	ДанныеДляУчетаОтгрузок.СуммаОтгрузки,
	|	ДанныеДляУчетаОтгрузок.Доверенность,
	|	ДанныеДляУчетаОтгрузок.ДатаВозвратаТоварнойНакладной,
	|	ДанныеДляУчетаОтгрузок.ДатаВозвратаСпецификации,
	|	ДанныеДляУчетаОтгрузок.ДатаВозвратаТТН,
	|	ДанныеДляУчетаОтгрузок.ОтправкаСчетФактура.*,
	|	ДанныеДляУчетаОтгрузок.ОтправкаТоварнаяНакладная.*,
	|	ДанныеДляУчетаОтгрузок.ОтправкаСпецификация.*,
	|	ДанныеДляУчетаОтгрузок.ОтправкаТТН.*,
	|	ДанныеДляУчетаОтгрузок.Статус.*,
	|	(ВЫБОР
	|			КОГДА ДанныеДляУчетаОтгрузок.ДатаОтправкиСчетФактуры = &ПустаяДата
	|				ТОГДА """"
	|			ИНАЧЕ ДанныеДляУчетаОтгрузок.ДатаОтправкиСчетФактуры
	|		КОНЕЦ) КАК ДатаОтправкиСчетФактуры,
	|	(ВЫБОР
	|			КОГДА ДанныеДляУчетаОтгрузок.ДатаОтправкиТоварнойНакладной = &ПустаяДата
	|				ТОГДА """"
	|			ИНАЧЕ ДанныеДляУчетаОтгрузок.ДатаОтправкиТоварнойНакладной
	|		КОНЕЦ) КАК ДатаОтправкиТоварнойНакладной,
	|	(ВЫБОР
	|			КОГДА ДанныеДляУчетаОтгрузок.ДатаОтправкиСпецификации = &ПустаяДата
	|				ТОГДА """"
	|			ИНАЧЕ ДанныеДляУчетаОтгрузок.ДатаОтправкиСпецификации
	|		КОНЕЦ) КАК ДатаОтправкиСпецификации,
	|	(ВЫБОР
	|			КОГДА ДанныеДляУчетаОтгрузок.ДатаОтправкиТТН = &ПустаяДата
	|				ТОГДА """"
	|			ИНАЧЕ ДанныеДляУчетаОтгрузок.ДатаОтправкиТТН
	|		КОНЕЦ) КАК ДатаОтправкиТТН}
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляУчетаОтгрузок.ОтветственноеЛицо,
	|	ДанныеДляУчетаОтгрузок.НомерРеализации,
	|	ДанныеДляУчетаОтгрузок.Контрагент,
	|	ДанныеДляУчетаОтгрузок.Период,
	|	ДанныеДляУчетаОтгрузок.СуммаОтгрузки,
	|	ДанныеДляУчетаОтгрузок.Доверенность,
	|	ДанныеДляУчетаОтгрузок.ДатаВозвратаТоварнойНакладной,
	|	ДанныеДляУчетаОтгрузок.ДатаВозвратаСпецификации,
	|	ДанныеДляУчетаОтгрузок.ДатаВозвратаТТН,
	|	ДанныеДляУчетаОтгрузок.ОтправкаСчетФактура,
	|	ДанныеДляУчетаОтгрузок.ОтправкаТоварнаяНакладная,
	|	ДанныеДляУчетаОтгрузок.ОтправкаСпецификация,
	|	ДанныеДляУчетаОтгрузок.ОтправкаТТН,
	|	ДанныеДляУчетаОтгрузок.Статус,
	|	ВЫБОР
	|		КОГДА ДанныеДляУчетаОтгрузок.ДатаОтправкиСчетФактуры = &ПустаяДата
	|			ТОГДА """"
	|		ИНАЧЕ ДанныеДляУчетаОтгрузок.ДатаОтправкиСчетФактуры
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДляУчетаОтгрузок.ДатаОтправкиТоварнойНакладной = &ПустаяДата
	|			ТОГДА """"
	|		ИНАЧЕ ДанныеДляУчетаОтгрузок.ДатаОтправкиТоварнойНакладной
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДляУчетаОтгрузок.ДатаОтправкиСпецификации = &ПустаяДата
	|			ТОГДА """"
	|		ИНАЧЕ ДанныеДляУчетаОтгрузок.ДатаОтправкиСпецификации
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДляУчетаОтгрузок.ДатаОтправкиТТН = &ПустаяДата
	|			ТОГДА """"
	|		ИНАЧЕ ДанныеДляУчетаОтгрузок.ДатаОтправкиТТН
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НомерРеализации
	|{УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НомерРеализации,
	|	Контрагент.*}";
	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.ЗаполнитьНастройки();
	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.ТекстЗаголовка = "Отчет данные по документам отгрузки";
	Настройка = ВосстановитьЗначение("НастройкаОтчетыДанныеПоДокументамОтгрузкиОтчетДанныеПоДокументамОтгрузки_88668742-d2c2-462a-899c-e7a00d8f3995");
	Если Настройка <> Неопределено Тогда
		ПостроительОтчетаОтчетДанныеПоДокументамОтгрузки.УстановитьНастройки(Настройка);
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры

Процедура ВыбПериодНажатие1(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачДата, ?(КонДата='0001-01-01', КонДата, КонецДня(КонДата)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачДата = НастройкаПериода.ПолучитьДатуНачала();
		КонДата = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры



