Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	СтруктураПредставлениеПолей = Новый Структура;
	МассивОтбора = Новый Массив;
	ОбщийОтчет.мСоответствиеНазначений = Новый Соответствие;
	ОбщийОтчет.мСтруктураДляОтбораПоКатегориям = Новый Структура;
	
	Текст = "
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	РегистрПродаж.Сценарий                                          КАК Сценарий,
	|	РегистрПродаж.Подразделение                                     КАК Подразделение,
	|	РегистрПродаж.Номенклатура                                      КАК Номенклатура,
	|	СУММА(РегистрПродаж.КоличествоОборот)                           КАК Количество,
	|	СУММА(РегистрПродаж.СтоимостьОборот * &Коэффициент)             КАК СуммаПродаж,
	|	СУММА(РегистрПродаж.НДСОборот * &Коэффициент)                   КАК НДСПродаж,
	|	СУММА((РегистрПродаж.СтоимостьОборот + РегистрПродаж.НДСОборот)
	|		* &Коэффициент)                                             КАК СуммаПродажВсего,
	|	СУММА(ЦеныСрезПоследних.Цена *
	|		&КоэффициентСкидкиНаценки *
	|		(КурсВалютыЦены.Курс * &ВалютаОтчетаКратность) /
	|		(&ВалютаОтчетаКурс * КурсВалютыЦены.Кратность))             КАК ЦенаПоПрайсу,
	|	СУММА(РегистрПродаж.КоличествоОборот * ЦеныСрезПоследних.Цена *
	|		&КоэффициентСкидкиНаценки *
	|		(КурсВалютыЦены.Курс * &ВалютаОтчетаКратность) /
	|		(&ВалютаОтчетаКурс * КурсВалютыЦены.Кратность))             КАК СуммаПоПрайсу,
	|	ВЫБОР КОГДА СУММА(РегистрПродаж.КоличествоОборот * ЦеныСрезПоследних.Цена *
	|					&КоэффициентСкидкиНаценки *
	|					(КурсВалютыЦены.Курс * &ВалютаОтчетаКратность) /
	|					(&ВалютаОтчетаКурс * КурсВалютыЦены.Кратность)) = 0 ТОГДА
	|		0
	|	ИНАЧЕ
	|		СУММА((РегистрПродаж.СтоимостьОборот + РегистрПродаж.НДСОборот)
	|			* &Коэффициент) - 
	|		СУММА(РегистрПродаж.КоличествоОборот * ЦеныСрезПоследних.Цена *
	|			&КоэффициентСкидкиНаценки *
	|			(КурсВалютыЦены.Курс * &ВалютаОтчетаКратность) /
	|			(&ВалютаОтчетаКурс * КурсВалютыЦены.Кратность))
	|	КОНЕЦ КАК Отклонение
	|
	|{ВЫБРАТЬ 
	|	РегистрПродаж.Сценарий.*                   КАК Сценарий,
	|	РегистрПродаж.Подразделение.*              КАК Подразделение,
	|	РегистрПродаж.Номенклатура.*               КАК Номенклатура,
	|	РегистрПродаж.ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	|	РегистрПродаж.ДокументПланирования.*       КАК ДокументПланирования,
	|	РегистрПродаж.Проект.*                     КАК Проект
	|	//СВОЙСТВА
	|}
	|ИЗ 
	|	РегистрНакопления.ПланыПродаж.Обороты(&ДатаНач, &ДатаКон,,
	|		{Сценарий.* КАК Сценарий,
	|		Подразделение.* КАК Подразделение,
	|		Номенклатура.* КАК Номенклатура,
	|		ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	|		ДокументПланирования.* КАК ДокументПланирования,
	|		Проект.* КАК Проект}
	|	) КАК РегистрПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаКон,
	|		                                                ТипЦен = &ТипЦен) КАК ЦеныСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, ) КАК КурсВалютыЦены
	|			ПО КурсВалютыЦены.Валюта = ЦеныСрезПоследних.Валюта
	|		ПО РегистрПродаж.Номенклатура = ЦеныСрезПоследних.Номенклатура И
	|		РегистрПродаж.ХарактеристикаНоменклатуры = ЦеныСрезПоследних.ХарактеристикаНоменклатуры
	|	//СОЕДИНЕНИЯ
	|
	|{ГДЕ
	|	РегистрПродаж.Сценарий.* КАК Сценарий,
	|	РегистрПродаж.Подразделение.* КАК Подразделение,
	|	РегистрПродаж.Номенклатура.* КАК Номенклатура,
	|	РегистрПродаж.ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	|	РегистрПродаж.ДокументПланирования.* КАК ДокументПланирования,
	|	РегистрПродаж.Проект.* КАК Проект
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|	
	|СГРУППИРОВАТЬ ПО
	|	РегистрПродаж.Сценарий,
	|	РегистрПродаж.Подразделение,
	|	РегистрПродаж.Номенклатура
	|	//СГРУППИРОВАТЬПО
	|
	|{УПОРЯДОЧИТЬ ПО
	|	РегистрПродаж.Сценарий.*,
	|	РегистрПродаж.Подразделение.*,
	|	РегистрПродаж.Номенклатура.*,
	|	РегистрПродаж.ХарактеристикаНоменклатуры.*,
	|	РегистрПродаж.ДокументПланирования.*,
	|	РегистрПродаж.Проект.*
	|	//СВОЙСТВА
	|}
	|
	|ИТОГИ 
	|	СУММА(Количество),
	|	СУММА(СуммаПродаж),
	|	СУММА(НДСПродаж),
	|	СУММА(СуммаПродажВсего),
	|	СУММА(ЦенаПоПрайсу),
	|	СУММА(СуммаПоПрайсу),
	|	СУММА(Отклонение)
	|ПО ОБЩИЕ,
	|	РегистрПродаж.Сценарий,
	|	РегистрПродаж.Подразделение,
	|	РегистрПродаж.Номенклатура ИЕРАРХИЯ
	|
	|{ИТОГИ ПО
	|	РегистрПродаж.Сценарий.*,
	|	РегистрПродаж.Подразделение.*,
	|	РегистрПродаж.Номенклатура.*,
	|	РегистрПродаж.ХарактеристикаНоменклатуры.*,
	|	РегистрПродаж.ДокументПланирования.*,
	|	РегистрПродаж.Проект.*
	|	//СВОЙСТВА
	|}
	|";
	
	СтруктураПредставлениеПолей = Новый Структура(
	"Сценарий,
	|Подразделение,
	|Номенклатура,
	|ХарактеристикаНоменклатуры,
	|ДокументПланирования,
	|Проект",
	"Сценарий",
	"Подразделение",
	"Номенклатура",
	"Характеристика номенклатуры",
	"Документ планирования",
	"Проект");
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории = Истина Тогда
		
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и
		                                               // категории. Используется в условии соединения с регистром сведений,
		                                               // хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		
		СтрокаТаблицы.ПутьКДанным = "РегистрПродаж.Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		
		СтрокаТаблицы.ПутьКДанным = "РегистрПродаж.ДокументПланирования";
		СтрокаТаблицы.Представление = "Документ планирования";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
		
		
		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";

		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, 
				ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
				,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);

	КонецЕсли;
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Сценарий");
	МассивОтбора.Добавить("Сценарий.Периодичность");
	МассивОтбора.Добавить("Подразделение");
	МассивОтбора.Добавить("Номенклатура");
	
	ПостроительОтчета.Текст = Текст;
	
	//Сценарий в измерения колонки
	ИзмерениеСценарий = ПостроительОтчета.ИзмеренияСтроки.Найти("Сценарий");
	Если ИзмерениеСценарий <> Неопределено Тогда
		ПутьКДанным = ИзмерениеСценарий.ПутьКДанным;
		ТипИзмерения = ИзмерениеСценарий.ТипИзмерения;
		ПостроительОтчета.ИзмеренияСтроки.Удалить(ИзмерениеСценарий);
		ПостроительОтчета.ИзмеренияКолонки.Добавить(ПутьКДанным, , ТипИзмерения);
	КонецЕсли;
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории = Истина Тогда
		УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);
	КонецЕсли;
	
	Если ОбщийОтчет.Показатели.Найти("Количество", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("Количество", "Количество (в единицах хранения)", истина, "ЧЦ=15; ЧДЦ=3");
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("СуммаПродаж", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("СуммаПродаж", "Сумма продаж за период (без НДС)", ложь, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("НДСПродаж", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("НДСПродаж", "Сумма НДС продаж за период", ложь, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("СуммаПродажВсего", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("СуммаПродажВсего", "Сумма продаж за период (всего)", истина, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("ЦенаПоПрайсу", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("ЦенаПоПрайсу", "Цена по прайсу", ложь, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("СуммаПоПрайсу", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("СуммаПоПрайсу", "Сумма по прайсу", ложь, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("Отклонение", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("Отклонение", "Отклонение", ложь, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	
	ОбщийОтчет.мНазваниеОтчета = "План продаж";
	
	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
	
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.РаскрашиватьИзмерения = Истина;
	
	// Установим дату начала отчета
	Если Не ЗначениеНеЗаполнено(глТекущийПользователь) Тогда
		ОбщийОтчет.ДатаНач = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяДатаНачалаОтчетов");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт
	
	ВалютаУпр = ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчета.Получить(), ОбщийОтчет.ДатаКон);
	ВалютаРег = ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), ОбщийОтчет.ДатаКон);
	
	Если ВВалютеРегламентированногоУчета Тогда
		Коэффициент = (ВалютаУпр.Курс * ВалютаРег.Кратность) / (ВалютаРег.Курс * ВалютаУпр.Кратность);
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ВалютаОтчетаКурс",      ВалютаРег.Курс);
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ВалютаОтчетаКратность", ВалютаРег.Кратность);
	Иначе
		Коэффициент = 1;
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ВалютаОтчетаКурс",      ВалютаУпр.Курс);
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ВалютаОтчетаКратность", ВалютаУпр.Кратность);
	КонецЕсли;
	
	Если ТипЦен.Рассчитывается Тогда
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ТипЦен", ТипЦен.БазовыйТипЦен);
		КоэффициентСкидкиНаценки = (100 + ТипЦен.ПроцентСкидкиНаценки) / 100;
	Иначе
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ТипЦен", ТипЦен);
		КоэффициентСкидкиНаценки = 1;
	КонецЕсли;
	
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("Коэффициент", Коэффициент);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("КоэффициентСкидкиНаценки", КоэффициентСкидкиНаценки);
	
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПРоцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры
