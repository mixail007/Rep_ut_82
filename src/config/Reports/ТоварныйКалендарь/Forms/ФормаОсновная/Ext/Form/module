Перем ВысотаЗаголовка;
Перем ИдентификаторОкнаРасшифровки;
Перем ФормаНастройка;
Перем СтруктураРеквизитов;
Перем НеВосстанавливатьНастройку;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	Нет.
//
Процедура УправлениеПометкамиКнопокКоманднойПанели()
	
	Если ПоказыватьЗаголовок Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Истина;

	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Ложь;

	КонецЕсли;
	
КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

// Обновляет таблицу отчета
//
// Параметры:
//	Нет.
//
Процедура ОбновитьОтчет() Экспорт

	ЗаполнитьОбъектПоДиалогу();
	
	СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка);

	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;

	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДокументРезультат;

	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры // ОбновитьОтчет()

//  Заполняет реквизиты по диалогу
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьОбъектПоДиалогу()

	// Здесь должно быть расположено заполнение реквизитов
	// отчета по реквизитам формы, непосредственно не связанным
	// с реквизитами отчета (если таковые имеются)
	
КонецПроцедуры // ЗаполнитьОбъектПоДиалогу()

// Заполняет диалог по значениям реквизитов отчета
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДиалогПоОбъекту()

	// Здесь должно быть расположено заполнение реквизитов формы
	// по реквизитам отчета, если они непосредственно не связаны
	// с реквизитами отчета (если таковые имеются)
	
КонецПроцедуры // ЗаполнитьДиалогПоОбъекту()

//  Управляет выводом заголовка
//
// Параметры:
//	Нет.
//
Процедура ВыводЗаголовка()

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда

		ЗаполнитьОбъектПоДиалогу();

		СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, Истина);
		
	КонецЕсли;


	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры // ВыводЗаголовка()

// Формирует текст заголовка
//
// Параметры:
//	Нет.
//
Процедура СформироватьЗаголовокФормы()

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаОтчета = '00010101000000' Тогда

		ОписаниеПериода     = "На текущий момент";

	Иначе

		ОписаниеПериода     = "" + Формат(ДатаОтчета, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

	КонецЕсли;


	Заголовок=мНазваниеОтчета+" (" + ОписаниеПериода + ") ";

КонецПроцедуры // СформироватьЗаголовокФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ НАЖАТИЯ КНОПОК КОМАНДНОЙ ПАНЕЛИ

// Процедура - обработчик нажатия кнопки "Настройка".
//
Процедура КоманднаяПанельФормыНастройка(Кнопка)
	
	ФормаНастройка = ПолучитьФорму("ФормаНастройка", ЭтаФорма);
	
	Если ФормаНастройка.ОткрытьМодально() = Истина Тогда
		ОбновитьОтчет();
	КонецЕсли;

КонецПроцедуры // ДополнительноНажатие()

// Процедура - обработчик нажатия кнопки "Обновить".
//
Процедура КоманднаяПанельФормыОбновить(Кнопка)

	ОбновитьОтчет();

КонецПроцедуры // ВыполнитьНажатие()

// Процедура - обработчик нажатия кнопки "Заголовок".
//
Процедура КоманднаяПанельЗаголовок(Кнопка)
	ПоказыватьЗаголовок = Не ПоказыватьЗаголовок;
	ВыводЗаголовка();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик закрытия формы
//
Процедура ПриЗакрытии()


КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик обновления данных формы
//
Процедура ОбновлениеОтображения()

	СформироватьЗаголовокФормы();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события перед открытием формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ЗначениеНеЗаполнено(мНазваниеОтчета) Тогда

		ЗаполнитьНачальныеНастройки();

		// По умолчанию настраивается так:
		РаскрашиватьИзмерения = Истина;

		ВыводитьИтогиПоВсемУровням = Истина;


	КонецЕсли; 

	ЗаполнитьДиалогПоОбъекту();

	// Если форма открывается для несформированного отчета ...
	Если ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда

		ВысотаЗаголовка = 0;

		ВыводЗаголовка();

		СформироватьЗаголовокФормы();

	Иначе

		СтруктураРеквизитов = Новый Структура;

		Для каждого Реквизит Из Метаданные().Реквизиты Цикл
			СтруктураРеквизитов.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
		КонецЦикла; 

		Для каждого ТЧ Из Метаданные().ТабличныеЧасти Цикл
			СтруктураРеквизитов.Вставить(ТЧ.Имя, ЭтотОбъект[ТЧ.Имя].Выгрузить());
		КонецЦикла; 

		НеВосстанавливатьНастройку = Истина;

	КонецЕсли; 

	УправлениеПометкамиКнопокКоманднойПанели();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события перед сохранением значений формы
//
Процедура ПередСохранениемЗначений(Отказ)

	СохраненныеНастройки = Новый Структура;
	СохраненныеНастройки.Вставить("ПоказателиОтчета", ПоказателиОтчета.Выгрузить());
	СохраненныеНастройки.Вставить("ГруппировкиОтчета", ГруппировкиОтчета.Выгрузить());
	СохраненныеНастройки.Вставить("ФильтрыОтчета", ФильтрыОтчета.Выгрузить());

	// Остальные реквизиты отчета сохраняются стандартно
	
КонецПроцедуры // ПередСохранениемЗначений()

// Процедура - обработчик события после восстановления значений формы
//
Процедура ПослеВосстановленияЗначений()

	Если Не Открыта() И (НеВосстанавливатьНастройку = Истина) Тогда

		Для каждого Реквизит Из Метаданные().Реквизиты Цикл
			ЭтотОбъект[Реквизит.Имя] = СтруктураРеквизитов[Реквизит.Имя];
		КонецЦикла; 

		Для каждого ТЧ Из Метаданные().ТабличныеЧасти Цикл
			ЭтотОбъект[ТЧ.Имя].Загрузить(СтруктураРеквизитов[ТЧ.Имя]);
		КонецЦикла; 

		Возврат;

	КонецЕсли; 

	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда

		ПоказателиОтчета.Загрузить(СохраненныеНастройки.ПоказателиОтчета);
		ГруппировкиОтчета.Загрузить(СохраненныеНастройки.ГруппировкиОтчета);
		ФильтрыОтчета.Загрузить(СохраненныеНастройки.ФильтрыОтчета);
		// Остальные реквизиты отчета восстанавливаются стандартно

	КонецЕсли; 

	ЗаполнитьДиалогПоОбъекту();

	ЭлементыФормы.ДокументРезультат.Очистить();
	
	ВыводЗаголовка();

	СформироватьЗаголовокФормы();
	
КонецПроцедуры // ПослеВосстановленияЗначений()

// Процедура - обработчик сообщений
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзмененоИмяРегистра" И Источник = ФормаНастройка Тогда
		СформироватьЗаголовокФормы();
		ЗаполнитьДиалогПоОбъекту();
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаОповещения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Возвращает отчет с заданым именеме и параметрами, настроенными для расшифровки
//
Функция ПодготовитьОтчет(ИмяОтчета, Расшифровка, Элемент, СтрокаЯчейки = "")

	НовыйОтчет = Отчеты[ИмяОтчета].Создать();

	НовыйОтчет.ОбщийОтчет.ДатаНач=НачалоДня(ДатаОтчета);
	НовыйОтчет.ОбщийОтчет.ДатаКон=КонецДня(ДатаОтчета);
	НовыйОтчет.ОбщийОтчет.ИмяРегистра=Расшифровка.ИмяРегистра;

	НовыйОтчет.ОбщийОтчет.РаскрашиватьИзмерения = РаскрашиватьИзмерения;
	НовыйОтчет.ОбщийОтчет.ПоказыватьЗаголовок = ПоказыватьЗаголовок;

	НовыйОтчет.ЗаполнитьНачальныеНастройки();

	// Перенос отборов
	Для Каждого Строка Из ФильтрыОтчета Цикл

		Если НЕ Строка.ИспользованиеФильтра Тогда
			Продолжить;
		КонецЕсли;

		НайденнаяСтрока = мДеревоФильтры.Строки.Найти(Строка.ИмяФильтра, "ИмяПоля", Истина);

		Если НайденнаяСтрока<>Неопределено Тогда
			
			ОписаниеФильтра = НайденнаяСтрока.ОписаниеПоля;

			Если Найти(ОписаниеФильтра,"#")>0 Тогда // Из документа

				Если ИмяОтчета="ВедомостьЗаказыПокупателей" Тогда
					ОписаниеФильтра=СтрЗаменить(ОписаниеФильтра,"#","ЗаказПокупателя.");
				Иначе
					ОписаниеФильтра=СтрЗаменить(ОписаниеФильтра,"#","ЗаказПоставщику.");
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;

		Если ПустаяСтрока(ОписаниеФильтра) Тогда
		
			ОписаниеФильтра = Строка.ИмяФильтра;
		
		КонецЕсли; 
		
		СтрОтбор = НовыйОтчет.ПостроительОтчета.Отбор.Добавить(ОписаниеФильтра);
		
		СтрОтбор.Значение      = Строка.ЗначениеФильтра;
		Если Врег(Строка.ТипФильтра) = "РАВНО" Тогда
			СтрОтбор.ВидСравнения  = ВидСравнения.Равно;
		ИначеЕсли Врег(Строка.ТипФильтра) = "НЕ РАВНО" Тогда
			СтрОтбор.ВидСравнения  = ВидСравнения.НеРавно;
		ИначеЕсли Врег(Строка.ТипФильтра) = "В СПИСКЕ" Тогда
			СтрОтбор.ВидСравнения  = ВидСравнения.ВСписке;
		ИначеЕсли Врег(Строка.ТипФильтра) = "НЕ В СПИСКЕ" Тогда
			СтрОтбор.ВидСравнения  = ВидСравнения.НеВСписке;
		ИначеЕсли Врег(Строка.ТипФильтра) = "В СПИСКЕ ПО ИЕРАРХИИ" Тогда
			СтрОтбор.ВидСравнения  = ВидСравнения.ВСпискеПоИерархии;
		ИначеЕсли Врег(Строка.ТипФильтра) = "НЕ В СПИСКЕ ПО ИЕРАРХИИ" Тогда
			СтрОтбор.ВидСравнения  = ВидСравнения.НеВСпискеПоИерархии;
		КонецЕсли;

		СтрОтбор.Использование  = Истина;
	
	КонецЦикла; 

	// Сбросим флаги
	Для каждого Строка Из НовыйОтчет.ОбщийОтчет.Показатели Цикл
		Строка.Использование = Ложь;
	КонецЦикла; 
	
	НовыйОтчет.ОбщийОтчет.Показатели.Найти("Количество", "Имя").Использование = Истина;

	Если Расшифровка.Свойство("ДатаОтгрузки") Тогда

		СтрОтбор=НовыйОтчет.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ЗаказПокупателя.ДатаОтгрузки");
		Если Расшифровка.ДатаОтгрузки <> NULL Тогда
			СтрОтбор.Значение      = Расшифровка.ДатаОтгрузки;
		Иначе
			СтрОтбор.Значение      = '00010101'
		КонецЕсли;
		СтрОтбор.ВидСравнения  = ВидСравнения.Равно;
		СтрОтбор.Использование  = Истина;

	КонецЕсли;

	Если Расшифровка.Свойство("ДатаПоставки") Тогда

		СтрОтбор=НовыйОтчет.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ЗаказПоставщику.ДатаПоступления");
		Если Расшифровка.ДатаПоставки <> NULL Тогда
			СтрОтбор.Значение      = Расшифровка.ДатаПоставки;
		Иначе
			СтрОтбор.Значение      = '00010101'
		КонецЕсли;
		СтрОтбор.ВидСравнения  = ВидСравнения.Равно;
		СтрОтбор.Использование  = Истина;

	КонецЕсли;
	
	СтрокаЯчейки=Элемент.ТекущаяОбласть.Низ;
	
	Возврат НовыйОтчет;
	
КонецФункции // ПодготовитьОтчет()


// Процедура - обработчик события "Обработка расшифровки" поля табличного документа ДокументРезультат
//
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	Перем СтрокаЯчейки;

	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда

		СтандартнаяОбработка = Ложь;

		ОбщаяРасшифровка = Элемент.Область(1,1).Расшифровка;

		Если Не Расшифровка.Свойство("ИмяРегистра") Тогда // Расшифровка дополнительными группировками 

			СтандартнаяОбработка = Ложь;

			ОбщаяРасшифровка = Элемент.Область(1,1).Расшифровка;

			РасшифровкаСтрока = Расшифровка;

			ИмяОтчета = Метаданные().Имя;

			НовыйОтчет = Отчеты[ИмяОтчета].Создать();

			НовыйОтчет.ДатаОтчета = ДатаОтчета;
			НовыйОтчет.РаскрашиватьИзмерения = РаскрашиватьИзмерения;
			НовыйОтчет.ПоказыватьЗаголовок = ПоказыватьЗаголовок;

			НовыйОтчет.ЗаполнитьНачальныеНастройки();

			Для Каждого Реквизит Из Метаданные.Отчеты[ИмяОтчета].Реквизиты Цикл
				НовыйОтчет[Реквизит.Имя] = ЭтотОбъект[Реквизит.Имя];
			КонецЦикла;

			Для Каждого ТабличнаяЧасть Из Метаданные.Отчеты[ИмяОтчета].ТабличныеЧасти Цикл
				НовыйОтчет[ТабличнаяЧасть.Имя].Загрузить(ЭтотОбъект[ТабличнаяЧасть.Имя].Выгрузить());
			КонецЦикла;

			// В расшифровке текущей строки находятся значения группировок
			Для Каждого ЭлементСтруктурыРасшифровка Из РасшифровкаСтрока Цикл
				НайденнаяСтрокаГруппировки = НовыйОтчет.ГруппировкиОтчета.Найти(ЭлементСтруктурыРасшифровка.Ключ, "ИмяГруппировки");

				НайденнаяСтрока = мДеревоФильтры.Строки.Найти(ЭлементСтруктурыРасшифровка.Ключ, "ИмяПоля", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда

					// Удаляем строку, по которой можно установить отбор
					Если НайденнаяСтрокаГруппировки <> Неопределено Тогда
						НовыйОтчет.ГруппировкиОтчета.Удалить(НайденнаяСтрокаГруппировки);
					КонецЕсли;

					НовыйФильтр = НовыйОтчет.ФильтрыОтчета.Добавить();
					НовыйФильтр.ИмяФильтра 			 = НайденнаяСтрока.ИмяПоля;
					НовыйФильтр.ОписаниеФильтра 	 = НайденнаяСтрока.ОписаниеПоля;
					НовыйФильтр.ПредставлениеФильтра = НайденнаяСтрока.ПредставлениеПоля;
					НовыйФильтр.ЗначениеФильтра 	 = ЭлементСтруктурыРасшифровка.Значение;
					НовыйФильтр.ИспользованиеФильтра = Истина;
					НовыйФильтр.ТипФильтра 			 = "Равно";

					МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЭлементСтруктурыРасшифровка.Значение));

					Если МетаданныеОбъекта<>Неопределено Тогда
						Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
							ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда

							Если ЭлементСтруктурыРасшифровка.Значение.ЭтоГруппа Тогда
								НовыйФильтр.ТипФильтра 	     = "В списке по иерархии";
							КонецЕсли;

						КонецЕсли;
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

			// Выбор новой группировки
			Форма = НовыйОтчет.ПолучитьФорму("ФормаВыбора", ЭтаФорма, "дляФормаГруппировки");

			Форма.Заголовок = "Выберите детализирующую группировку";
			Если Форма.Открыта() Тогда
				Форма.Активизировать();
				Если Вопрос("Предыдущая операция выбора группировки не завершена.
					|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
					Форма.Закрыть();
				КонецЕсли;
			КонецЕсли;	

			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
			СтруктураПараметров.Вставить("ИсходнаяТаблица", "СписокГруппировок");

			СтруктураСуществующиеЗначения = Новый Структура;
			СтруктураНеиспользуемыеЗначения = Новый Структура;

			Для Каждого Строка Из ГруппировкиОтчета Цикл

				Если ПустаяСтрока(Строка.ИмяГруппировки) Тогда
					Продолжить;
				КонецЕсли;

				СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяГруппировки);

			КонецЦикла;

			СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
			СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", Новый Структура);

			// Передача параметров в форму
			Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
			Форма.РежимВыбора = Истина;

			ВыбраннаяГруппировка = Форма.ОткрытьМодально();
			Если ВыбраннаяГруппировка = Неопределено Тогда
				Возврат;
			КонецЕсли;

			// Добавление выбранной группировки
			Для Каждого Строка Из ВыбраннаяГруппировка Цикл

				НоваяГруппировка = НовыйОтчет.ГруппировкиОтчета.Добавить();
				НоваяГруппировка.ИмяГруппировки = Строка.ИмяГруппировки;
				НоваяГруппировка.ПредставлениеГруппировки = Строка.ПредставлениеГруппировки;
				НоваяГруппировка.ОписаниеГруппировки = Строка.ОписаниеГруппировки;
				НоваяГруппировка.РассчитыватьИтоги = Истина;

			КонецЦикла;

		Иначе // Расшифровка универсальным отчетом

			Если Расшифровка.ИмяРегистра="ЗаказыПокупателей" Тогда
				
				НовыйОтчет = ПодготовитьОтчет("ВедомостьЗаказыПокупателей", Расшифровка, Элемент, СтрокаЯчейки);

				НовыйОтчет.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
				НовыйОтчет.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("Покупатель");

				Группировки=Элемент.Область(СтрокаЯчейки-1,1).Расшифровка;

				СтрГруппировки=НовыйОтчет.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("ЗаказПокупателя");
			
			Иначе

				НовыйОтчет = ПодготовитьОтчет("ВедомостьЗаказыПоставщикам", Расшифровка, Элемент, СтрокаЯчейки);
				
				НовыйОтчет.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
				НовыйОтчет.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("Поставщик");
				
				Группировки=Элемент.Область(СтрокаЯчейки,1).Расшифровка;

				СтрГруппировки=НовыйОтчет.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("ЗаказПоставщику");

			КонецЕсли;

			Если ТипЗнч(Группировки) = Тип("Структура") Тогда

				Для Каждого ЭлементСтруктурыРасшифровка Из Группировки Цикл

					НайденнаяСтрока = мДеревоФильтры.Строки.Найти(ЭлементСтруктурыРасшифровка.Ключ, "ИмяПоля", Истина);
					Если НайденнаяСтрока <> Неопределено Тогда

						Если Найти(НайденнаяСтрока.ОписаниеПоля,"#")>0 Тогда // Из документа
							Если НовыйОтчет.ИмяРегистра="ЗаказыПокупателей" Тогда
								ОписаниеФильтра=СтрЗаменить(НайденнаяСтрока.ОписаниеПоля,"#","ЗаказПокупателя.");
							Иначе
								ОписаниеФильтра=СтрЗаменить(НайденнаяСтрока.ОписаниеПоля,"#","ЗаказПоставщику.");
							КонецЕсли;

						Иначе
							
                           ОписаниеФильтра=НайденнаяСтрока.ОписаниеПоля;

						КонецЕсли;

						СтрОтбор = НовыйОтчет.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить(ОписаниеФильтра);
						СтрОтбор.Значение = ЭлементСтруктурыРасшифровка.Значение;

						СтрОтбор.ВидСравнения = ВидСравнения.Равно;
						СтрОтбор.Использование  = Истина;

					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

		НовыйОтчет.ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;

		НовыйОтчетФорма = НовыйОтчет.ОбщийОтчет.ПолучитьФорму();

		НовыйОтчетФорма.ОбновитьОтчет();
		
		НовыйОтчетФорма.Открыть();
		НовыйОтчетФорма.Активизировать();

	КонецЕсли;

КонецПроцедуры // ДокументРезультатОбработкаРасшифровки()

