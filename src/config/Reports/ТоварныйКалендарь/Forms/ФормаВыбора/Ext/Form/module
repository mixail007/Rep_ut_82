////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Определяет возможность групповой обработки данных.
Перем мМножественныйВыбор;
// Определяет, из какой таблицы главной формы отчета была вызвана форма.
Перем ИсходнаяТаблица;
Перем мСтруктураСуществующиеЗначения;
Перем мСтруктураНеиспользуемыеЗначения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

// Процедура передает сделанные настройки в главную форму отчета.
//
Процедура Выбрать()

	МассивСтрока = Новый Массив; 
	МассивСтрока.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная);
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	// Если подбирается значение в список группировок
	Если ИсходнаяТаблица="СписокГруппировок"  Тогда

		ВыбранныеСтроки = Новый ТаблицаЗначений;
		ВыбранныеСтроки.Колонки.Добавить("ИмяГруппировки", 		ОписаниеТиповСтрока);
		ВыбранныеСтроки.Колонки.Добавить("ОписаниеГруппировки", ОписаниеТиповСтрока);
		ВыбранныеСтроки.Колонки.Добавить("ПредставлениеГруппировки", ОписаниеТиповСтрока);

		Если мМножественныйВыбор Тогда
			
			Для Каждого СтрТабличноеПоле Из Дерево.Строки Цикл

				Если СтрТабличноеПоле.Пометка И Не мСтруктураНеиспользуемыеЗначения.Свойство(СтрТабличноеПоле.ИмяПоля) Тогда
					
					НоваяСтрока = ВыбранныеСтроки.Добавить();
					НоваяСтрока.ИмяГруппировки           = СтрТабличноеПоле.ИмяПоля;
					НоваяСтрока.ПредставлениеГруппировки = СтрТабличноеПоле.ПредставлениеПоля;
					НоваяСтрока.ОписаниеГруппировки      = СтрТабличноеПоле.ОписаниеПоля;

				КонецЕсли;

				// Групировки из подчиненных строк
				Если СтрТабличноеПоле.Строки.Количество() > 0 Тогда

					// Свойства
					Если Найти(СтрТабличноеПоле.Строки[0].ИмяПоля, "Свойства") > 0 Тогда
						Для Каждого Стр Из СтрТабличноеПоле.Строки[0].Строки Цикл

							Если Стр.Пометка Тогда
								
								НоваяСтрока = ВыбранныеСтроки.Добавить();
								НоваяСтрока.ИмяГруппировки           = Стр.ИмяПоля;
								НоваяСтрока.ПредставлениеГруппировки = Стр.ПредставлениеПоля + " (св-во "+НРег(СтрТабличноеПоле.ПредставлениеПоля)+")";
								НоваяСтрока.ОписаниеГруппировки      = Стр.ОписаниеПоля;

							КонецЕсли;
						КонецЦикла;

					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

			// Если выбор одного значения
		Иначе

			Если ЭлементыФормы.Дерево.ТекущаяСтрока <> Неопределено Тогда
				СтрТабличноеПоле = ЭлементыФормы.Дерево.ТекущиеДанные;

				НоваяСтрока = ВыбранныеСтроки.Добавить();
				НоваяСтрока.ИмяГруппировки           = СтрТабличноеПоле.ИмяПоля;
				НоваяСтрока.ПредставлениеГруппировки = СтрТабличноеПоле.ПредставлениеПоля;
				Если СтрТабличноеПоле.Родитель <> Неопределено 
					И Найти(СтрТабличноеПоле.Родитель.ИмяПоля, "Свойства") > 0 Тогда
					НоваяСтрока.ПредставлениеГруппировки = НоваяСтрока.ПредставлениеГруппировки 
					+ " (св-во "+НРег(СтрТабличноеПоле.Родитель.Родитель.ПредставлениеПоля)+")";
				КонецЕсли;
				НоваяСтрока.ОписаниеГруппировки      = СтрТабличноеПоле.ОписаниеПоля;
			КонецЕсли;

		КонецЕсли;

	// Если в список группировок подбирается несколько значений из списка (путем пометки выбранных значений)
	ИначеЕсли ИсходнаяТаблица="СписокГруппировокСписок" Тогда

		ВыбранныеСтроки = Новый ТаблицаЗначений;
		ВыбранныеСтроки.Колонки.Добавить("ИмяГруппировки", 		ОписаниеТиповСтрока);
		ВыбранныеСтроки.Колонки.Добавить("ОписаниеГруппировки", ОписаниеТиповСтрока);
		ВыбранныеСтроки.Колонки.Добавить("ПредставлениеГруппировки", ОписаниеТиповСтрока);
		ВыбранныеСтроки.Колонки.Добавить("Пометка", ОписаниеТиповБулево);

		Для Каждого СтрТабличноеПоле Из Дерево.Строки Цикл
			
			НоваяСтрока = ВыбранныеСтроки.Добавить();
			НоваяСтрока.ИмяГруппировки           = СтрТабличноеПоле.ИмяПоля;
			НоваяСтрока.ПредставлениеГруппировки = СтрТабличноеПоле.ПредставлениеПоля;
			Если СтрТабличноеПоле.Родитель <> Неопределено 
				И  Найти(СтрТабличноеПоле.Родитель.ИмяПоля, "Свойства") > 0 Тогда
				НоваяСтрока.ПредставлениеГруппировки = НоваяСтрока.ПредставлениеГруппировки 
				+ " (св-во "+НРег(СтрТабличноеПоле.Родитель.Родитель.ПредставлениеПоля)+")";
			КонецЕсли;
			НоваяСтрока.ОписаниеГруппировки      = СтрТабличноеПоле.ОписаниеПоля;
			НоваяСтрока.Пометка=СтрТабличноеПоле.Пометка;
			
			// Групировки из подчиненных строк
			Если СтрТабличноеПоле.Строки.Количество() > 0 Тогда

				// Свойства
				Если Найти(СтрТабличноеПоле.Строки[0].ИмяПоля, "Свойства") > 0 Тогда
					
					Для Каждого Стр Из СтрТабличноеПоле.Строки[0].Строки Цикл
						НоваяСтрока = ВыбранныеСтроки.Добавить();
						НоваяСтрока.ИмяГруппировки           = Стр.ИмяПоля;
						НоваяСтрока.ПредставлениеГруппировки = Стр.ПредставлениеПоля + " (св-во "+НРег(СтрТабличноеПоле.ПредставлениеПоля)+")";
						НоваяСтрока.ОписаниеГруппировки      = Стр.ОписаниеПоля;
						НоваяСтрока.Пометка                  = Стр.Пометка;
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	// Если подбирается значение в список фильтров
	Иначе // Если ИсходнаяТаблица="СписокФильтров" Тогда

		ВыбранныеСтроки = Новый ТаблицаЗначений;
		ВыбранныеСтроки.Колонки.Добавить("ИмяФильтра", 		ОписаниеТиповСтрока);
		ВыбранныеСтроки.Колонки.Добавить("ОписаниеФильтра", ОписаниеТиповСтрока);
		ВыбранныеСтроки.Колонки.Добавить("ПредставлениеФильтра", ОписаниеТиповСтрока);
		ВыбранныеСтроки.Колонки.Добавить("ОписаниеТипов");

		Если ЭлементыФормы.Дерево.ТекущаяСтрока <> Неопределено Тогда
			СтрТабличноеПоле = ЭлементыФормы.Дерево.ТекущиеДанные;

			НоваяСтрока = ВыбранныеСтроки.Добавить();
			НоваяСтрока.ИмяФильтра           	= СтрТабличноеПоле.ИмяПоля;
			НоваяСтрока.ПредставлениеФильтра  	= СтрТабличноеПоле.ПредставлениеПоля;
			Если СтрТабличноеПоле.Родитель <> Неопределено 
				И Найти(СтрТабличноеПоле.Родитель.ИмяПоля, "Свойства") > 0 Тогда
				НоваяСтрока.ПредставлениеФильтра = НоваяСтрока.ПредставлениеФильтра 
				+ " (св-во "+НРег(СтрТабличноеПоле.Родитель.Родитель.ПредставлениеПоля)+")";
			КонецЕсли;
			НоваяСтрока.ОписаниеФильтра       	= СтрТабличноеПоле.ОписаниеПоля;
			НоваяСтрока.ОписаниеТипов           = СтрТабличноеПоле.ОписаниеТипов;
			
		КонецЕсли;

	КонецЕсли;

	ОповеститьОВыборе(ВыбранныеСтроки);

КонецПроцедуры // Выбрать()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "При открытии" формы.
//
Процедура ПриОткрытии()

	СтруктураПараметров = НачальноеЗначениеВыбора;

	мМножественныйВыбор = Истина;
	ИсходнаяТаблица="";

	мСтруктураСуществующиеЗначения = Новый Структура;

	мСтруктураНеиспользуемыеЗначения = Новый Структура;

	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда

		// Вид выбора - множественный (из списка) или одиночный
		СтруктураПараметров.Свойство("МножественныйВыбор", мМножественныйВыбор);
		
		// Структура содержит существующее значение в поле, из которого инициирован выбор,
		// или несколько значений, если это выбор нескольких значений из списка
		СтруктураПараметров.Свойство("СтруктураСуществующиеЗначения", мСтруктураСуществующиеЗначения);
		
		// Структура содержит существующие в таблице значения, которые должны быть исключены 
		// из списка выбора. Используется для того, чтобы нельзя было вставить несколько
		// одинаковых группировок или фильтров
		СтруктураПараметров.Свойство("СтруктураНеиспользуемыеЗначения", мСтруктураНеиспользуемыеЗначения);

		// Условное имя способа выбора
		СтруктураПараметров.Свойство("ИсходнаяТаблица", ИсходнаяТаблица);
	КонецЕсли;

	// Все возможные группировки в виде дерева значений
	ДеревоИспользуемыеГруппировки = мДеревоГруппировки.Скопировать();
	
	// Все возможные фильтры в виде дерева значений (могут отличаться от группировок наличием категорий)
	ДеревоИспользуемыеФильтры     = мДеревоФильтры.Скопировать();

	// Если подбирается значение в список группировок
	Если ИсходнаяТаблица="СписокГруппировок" Тогда

		Заголовок="Группировки отчета";

		Для Каждого Элемент Из мСтруктураНеиспользуемыеЗначения Цикл
			НайденнаяСтрока = ДеревоИспользуемыеГруппировки.Строки.Найти(Элемент.Ключ, "ИмяПоля", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Если НайденнаяСтрока.Строки.Количество()=0 Тогда

					// Удаление строк последнего уровня
					Родитель = НайденнаяСтрока.Родитель;
					Если Родитель = Неопределено Тогда
						Строки = ДеревоИспользуемыеГруппировки.Строки;
					Иначе
						Строки = Родитель.Строки;
					КонецЕсли;
					Строки.Удалить(НайденнаяСтрока);

					Если Родитель <> Неопределено Тогда
						
						// Удаление строк предпоследнего уровня
						РодительРодитель = Родитель.Родитель;
						Если РодительРодитель <> Неопределено Тогда

							// Если это служебная строка "Свойства" и она не имеет вложенных строк - 
							// видов свойств, то удаляем ее
							Если Найти(Родитель.ИмяПоля, "Свойства")>0 И Родитель.Строки.Количество()=0 Тогда
								РодительРодитель.Строки.Удалить(Родитель);
							КонецЕсли;

							// Удаление строк первого уровня
							Если РодительРодитель.Строки.Количество()=0 И мСтруктураНеиспользуемыеЗначения.Свойство(РодительРодитель.ИмяПоля) Тогда
								ДеревоИспользуемыеГруппировки.Строки.Удалить(РодительРодитель);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		ЭлементыФормы.Дерево.Значение = ДеревоИспользуемыеГруппировки;

		Если мМножественныйВыбор Тогда
            Заголовок="Дополнительные поля отчета";
			
			ЭлементыФормы.Дерево.Колонки["ПредставлениеПоля"].ДанныеФлажка = "Пометка";
			ЭлементыФормы.Дерево.ТолькоПросмотр=Ложь;
			ЭлементыФормы.УстановитьВсе.Видимость=Истина;
			ЭлементыФормы.СнятьВсе.Видимость	 =Истина;
		Иначе
			ЭлементыФормы.Дерево.Колонки["ПредставлениеПоля"].ДанныеФлажка = "";
			ЭлементыФормы.Дерево.ТолькоПросмотр=Истина;
			ЭлементыФормы.УстановитьВсе.Видимость=Ложь;
			ЭлементыФормы.СнятьВсе.Видимость	 =Ложь;
		КонецЕсли;

		// Расставим пометки
		Если мМножественныйВыбор Тогда
			Для Каждого Элемент Из мСтруктураСуществующиеЗначения Цикл
				НайденнаяСтрока = Дерево.Строки.Найти(Элемент.Ключ, "ИмяПоля", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
		Иначе
			// в немножественном выборе передается один текущий элемент
			Для Каждого Элемент Из мСтруктураСуществующиеЗначения Цикл
				НайденнаяСтрока = ЭлементыФормы.Дерево.Значение.Строки.Найти(Элемент.Ключ, "ИмяПоля", Истина);
				ЭлементыФормы.Дерево.ТекущаяСтрока = НайденнаяСтрока;
				Прервать;
			КонецЦикла;
		КонецЕсли;

	// Если в список группировок подбирается несколько значений из списка (путем пометки выбранных значений)
    ИначеЕсли ИсходнаяТаблица="СписокГруппировокСписок" Тогда

		Заголовок="Группировки отчета";

		СтруктураДополнительныеЗначения = Новый Структура;
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			СтруктураПараметров.Свойство("СтруктураДополнительныеЗначения", СтруктураДополнительныеЗначения);
		КонецЕсли;

		ЭлементыФормы.Дерево.Колонки["ПредставлениеПоля"].ДанныеФлажка = "Пометка";
		ЭлементыФормы.Дерево.ТолькоПросмотр=Ложь;
		ЭлементыФормы.УстановитьВсе.Видимость=Истина;
		ЭлементыФормы.СнятьВсе.Видимость	 =Истина;

		ЭлементыФормы.Дерево.Значение = ДеревоИспользуемыеГруппировки;

        // Удаляем группировки, использованные в дополнительных полях. Действия над ними выполняются
		// только вместе с основным полем.
		Для Каждого Элемент Из СтруктураДополнительныеЗначения Цикл
			НайденнаяСтрока = ДеревоИспользуемыеГруппировки.Строки.Найти(Элемент.Ключ, "ИмяПоля", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Если НайденнаяСтрока.Строки.Количество()=0 Тогда

					// Удаление строк последнего уровня
					Родитель = НайденнаяСтрока.Родитель;
					Если Родитель = Неопределено Тогда
						Строки = ДеревоИспользуемыеГруппировки.Строки;
					Иначе
						Строки = Родитель.Строки;
					КонецЕсли;
					Строки.Удалить(НайденнаяСтрока);

					Если Родитель <> Неопределено Тогда
						
						// Удаление строк предпоследнего уровня
						РодительРодитель = Родитель.Родитель;
						Если РодительРодитель <> Неопределено Тогда

							// Если это служебная строка "Свойства" и она не имеет вложенных строк - 
							// видов свойств, то удаляем ее
							Если Найти(Родитель.ИмяПоля, "Свойства")>0 И Родитель.Строки.Количество()=0 Тогда
								РодительРодитель.Строки.Удалить(Родитель);
							КонецЕсли;

							// Удаление строк первого уровня
							Если РодительРодитель.Строки.Количество()=0 И СтруктураДополнительныеЗначения.Свойство(РодительРодитель.ИмяПоля) Тогда
								ДеревоИспользуемыеГруппировки.Строки.Удалить(РодительРодитель);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		// Расставим пометки
		Для Каждого Элемент Из мСтруктураНеиспользуемыеЗначения Цикл
			НайденнаяСтрока = Дерево.Строки.Найти(Элемент.Ключ, "ИмяПоля", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				НайденнаяСтрока.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;

	// Если подбирается значение в список фильтров
	Иначе // Если ИсходнаяТаблица="СписокФильтров" Тогда

        Заголовок="Фильтры отчета";
		
		Для Каждого Элемент Из мСтруктураНеиспользуемыеЗначения Цикл
			НайденнаяСтрока = ДеревоИспользуемыеФильтры.Строки.Найти(Элемент.Ключ, "ИмяПоля", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Если НайденнаяСтрока.Строки.Количество()=0 Тогда
					
					// Удаление строк последнего уровня
					Родитель = НайденнаяСтрока.Родитель;
					Если Родитель = Неопределено Тогда
						Строки = ДеревоИспользуемыеФильтры.Строки;
					Иначе
						Строки = Родитель.Строки;
					КонецЕсли;
					Строки.Удалить(НайденнаяСтрока);

					Если Родитель <> Неопределено Тогда
						
						// Удаление строк предпоследнего уровня
						РодительРодитель = Родитель.Родитель;
						Если РодительРодитель <> Неопределено Тогда

							// Если это служебная строка "Свойства" и она не имеет вложенных строк - 
							// видов свойств, то удаляем ее
							Если Найти(Родитель.ИмяПоля, "Свойства")>0 И Родитель.Строки.Количество()=0 Тогда
								РодительРодитель.Строки.Удалить(Родитель);
							КонецЕсли;

							// Удаление строк первого уровня
							Если РодительРодитель.Строки.Количество()=0 И мСтруктураНеиспользуемыеЗначения.Свойство(РодительРодитель.ИмяПоля) Тогда
								ДеревоИспользуемыеФильтры.Строки.Удалить(РодительРодитель);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыФормы.Дерево.Значение = ДеревоИспользуемыеФильтры;

	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик нажатия кнопки "ОК".
//
Процедура КнопкаВыбратьНажатие(Элемент)

    Если Не мМножественныйВыбор Тогда
		
		Если Найти(ЭлементыФормы.Дерево.ТекущаяСтрока.ПредставлениеПоля, "Свойства")>0 Тогда
			Предупреждение("Выберите одно свойство из списка!", 30);
			Возврат;
		КонецЕсли;
		
		// Проверим, чтобы не выбирали то, что уже есть
		Если мСтруктураНеиспользуемыеЗначения.Свойство(ЭлементыФормы.Дерево.ТекущаяСтрока.ИмяПоля) Тогда
			Предупреждение("Это значение уже есть в списке!", 30);
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Выбрать();

КонецПроцедуры // КнопкаВыбратьНажатие()

// Процедура - обработчик попытки удаления строки из таблицы.
//
Процедура ДеревоПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // ТабличноеПолеПередУдалением()

// Процедура - обработчик выбора строки таблицы.
//
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	Если Не мМножественныйВыбор Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Элемент.ТекущаяСтрока.ПредставлениеПоля = "Свойства" Тогда
			Предупреждение("Выберите одно свойство из списка!", 30);
			Возврат;
		КонецЕсли;
		
		// Проверим, чтобы не выбирали то, что уже есть
		Если мСтруктураНеиспользуемыеЗначения.Свойство(Элемент.ТекущаяСтрока.ИмяПоля) Тогда
			Предупреждение("Это значение уже есть в списке!", 30);
			Возврат;
		КонецЕсли;

		Выбрать();
	КонецЕсли;

КонецПроцедуры // ТабличноеПолеВыбор()

// Процедура - обработчик попытки добавления строки в таблицу.
//
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

КонецПроцедуры // ТабличноеПолеПередНачаломДобавления()

// Процедура ставит/снимает пометку у всех строк свойств.
//
Процедура ДеревоПриИзмененииФлажка(Элемент, Колонка)
	
	Если Найти(Элемент.ТекущаяСтрока.ИмяПоля, "Свойства") > 0 Тогда
		НоваяПометка = Элемент.ТекущаяСтрока.Пометка;
		Для Каждого Строка Из Элемент.ТекущаяСтрока.Строки Цикл
			Строка.Пометка = НоваяПометка;
		КонецЦикла;
	КонецЕсли;

	Если (Элемент.ТекущаяСтрока.ИмяПоля="Номенклатура") И (Элемент.ТекущаяСтрока.Пометка=Ложь) Тогда
		Сообщить("Группировка по номенклатуре является предопределенной и не подлежит удалению.",СтатусСообщения.Обычное);	
		Элемент.ТекущаяСтрока.Пометка=Истина
	КонецЕсли;
	
КонецПроцедуры // ДеревоПриИзмененииФлажка()

// Процедура устанавливает пометку у всех строк таблицы.
//
Процедура УстановитьВсеНажатие(Элемент)

	Для Каждого СтрокаУровня1 Из Дерево.Строки Цикл

		СтрокаУровня1.Пометка = Истина;
		
	КонецЦикла;

КонецПроцедуры // УстановитьВсеНажатие()

// Процедура снимает пометку у всех строк таблицы.
//
Процедура СнятьВсеНажатие(Элемент)

	Для Каждого СтрокаУровня1 Из Дерево.Строки Цикл

        Если СтрокаУровня1.ИмяПоля="Номенклатура" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУровня1.Пометка = Ложь;
		Если СтрокаУровня1.Строки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
			СтрокаУровня2.Пометка = Ложь;
			Если СтрокаУровня2.Строки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл
				СтрокаУровня3.Пометка = Ложь;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // СнятьВсеНажатие()

