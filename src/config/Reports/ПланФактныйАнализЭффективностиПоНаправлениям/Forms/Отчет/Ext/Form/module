 перем ТЗПросрочка, соотвДейств, соотвПарам;
 
Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаВнешниеОтчетыПланФактныйАнализЭффективностиПоНаправлениямОтчет_68c8f9b7-e818-4554-96a8-10a44612f7e0", ПостроительОтчетаОтчет.ПолучитьНастройки());

КонецПроцедуры

//Процедура ДействияФормыОтчетНастройка(Кнопка)

//	Форма = ВнешнийОтчетОбъект.ПолучитьФорму("ОтчетНастройка");
//	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
//	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
//	Если Форма.ОткрытьМодально() = Истина Тогда
//		ОтчетВывести();
//	Иначе
//		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
//	КонецЕсли;

//КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	
	//время0 = ТекущаяУниверсальнаяДатаВМиллисекундах();

	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	Отчет(ТабДок, ДатаКон, ДатаНач);

	//время1 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	//сообщить("Время формирования отчета: "+строка( (время1 - время0)/1000 ) +" сек.");

КонецПроцедуры

Процедура Отчет(ТабДок, ДатаКон, ДатаНач) Экспорт
	
	ЗаполнитьСреднююПросроченнуюЗадолженность();
	
	ШинтрейдСПб = Новый СписокЗначений;
	ШинтрейдСПб.Добавить(Справочники.Контрагенты.НайтиПоКоду("П000382"));//Автоэксперт ( Ярославль)
	ШинтрейдСПб.Добавить(Справочники.Контрагенты.НайтиПоКоду("П001549"));//ШинТрейд (вместо ШинТрейд СПб)
	ШинтрейдСПб.Добавить(Справочники.Контрагенты.НайтиПоКоду("94247"));  //*** 2016.04 Розничный покупатель ДПД
	ШинтрейдСПб.Добавить(Справочники.Контрагенты.НайтиПоКоду("94143"));  //*** 2016.04 Покупатель

	Макет = ПолучитьМакет("Отчет");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьОбъектПланирования = Макет.ПолучитьОбласть("ОбъектПланирования");
	ОбластьОбъектПланированияМенеджер = Макет.ПолучитьОбласть("ОбъектПланированияМенеджер");
	ОбластьПоказательЭффективности = Макет.ПолучитьОбласть("ПоказательЭффективности");
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	//По отделу развития вцелом
	ЗапросПоОтделу = Новый Запрос;
	ЗапросПоОтделу.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	ЗапросПоОтделу.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросПоОтделу.УстановитьПараметр("ПДЗ", Справочники.ПоказателиЭффективности.НайтиПоКоду("000000030"));  
	ЗапросПоОтделу.Текст = "ВЫБРАТЬ
	                       |	ПланыПродажПоПоказателямЭффективности.ПоказательЭффективности,
	                       |	ПланыПродажПоПоказателямЭффективности.ПараметрПоказателя,
	                       |	ПланыПродажПоПоказателямЭффективности.Вес,
	                       |	СУММА(ВЫБОР
	                       |			КОГДА ПланыПродажПоПоказателямЭффективности.ПоказательЭффективности = &ПДЗ
	                       |				ТОГДА А.ПДЗ
	                       |			ИНАЧЕ ЕСТЬNULL(ПланыПродажПоПоказателямЭффективностиОбороты.ЗначениеПланОборот, 0)
	                       |		КОНЕЦ) КАК ЗначениеПлан
	                       |ИЗ
	                       |	РегистрНакопления.ПланыПродажПоПоказателямЭффективности КАК ПланыПродажПоПоказателямЭффективности
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПродажПоПоказателямЭффективности.Обороты(&ДатаНач, &ДатаКон, , ) КАК ПланыПродажПоПоказателямЭффективностиОбороты
	                       |		ПО ПланыПродажПоПоказателямЭффективности.ПоказательЭффективности = ПланыПродажПоПоказателямЭффективностиОбороты.ПоказательЭффективности
	                       |			И ПланыПродажПоПоказателямЭффективности.ПараметрПоказателя = ПланыПродажПоПоказателямЭффективностиОбороты.ПараметрПоказателя
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	                       |			ЕСТЬNULL(ПланыПродажПоПоказателямЭффективности.ЗначениеПлан, 0) КАК ПДЗ,
	                       |			ПланыПродажПоПоказателямЭффективности.ПоказательЭффективности КАК ПоказательЭффективности
	                       |		ИЗ
	                       |			РегистрНакопления.ПланыПродажПоПоказателямЭффективности КАК ПланыПродажПоПоказателямЭффективности
	                       |		ГДЕ
	                       |			ПланыПродажПоПоказателямЭффективности.Период = &ДатаНач
	                       |			И ПланыПродажПоПоказателямЭффективности.Регистратор ССЫЛКА Документ.ВводПоказателейЭффективности
	                       |			И ПланыПродажПоПоказателямЭффективности.ПоказательЭффективности = &ПДЗ) КАК А
	                       |		ПО ПланыПродажПоПоказателямЭффективности.ПоказательЭффективности = А.ПоказательЭффективности
	                       |ГДЕ
	                       |	ПланыПродажПоПоказателямЭффективности.Регистратор ССЫЛКА Документ.ВводПоказателейЭффективностиПоНаправлениям
	                       |	И ПланыПродажПоПоказателямЭффективности.Период = &ДатаНач
	                       |
	                       |СГРУППИРОВАТЬ ПО
	                       |	ПланыПродажПоПоказателямЭффективности.ПоказательЭффективности,
	                       |	ПланыПродажПоПоказателямЭффективности.ПараметрПоказателя,
	                       |	ПланыПродажПоПоказателямЭффективности.Вес
	                       |АВТОУПОРЯДОЧИВАНИЕ";
						   
	РезультатПоОтделу = ЗапросПоОтделу.Выполнить().Выбрать();
	
	Если РезультатПоОтделу.Количество()>0 Тогда
		ОбластьОбъектПланирования.Параметры.ОбъектПланирования = "Отдел развития";
		ТабДок.Вывести(ОбластьОбъектПланирования, РезультатПоОтделу.Уровень());
	КонецЕсли;
	КоэффициентЭффективностиОбъекта = 0;
	Пока РезультатПоОтделу.Следующий() Цикл
		ОбластьПоказательЭффективности.Параметры.ПоказательЭффективности = РезультатПоОтделу.ПоказательЭффективности.Наименование + ?(РезультатПоОтделу.ПараметрПоказателя = Неопределено, "", " " + РезультатПоОтделу.ПараметрПоказателя.Наименование);
		ЗначениеПлан = 0;
		ЗначениеФакт = 0;
		ЗначениеПлан = РезультатПоОтделу.ЗначениеПлан;
		ОбластьПоказательЭффективности.Параметры.ЗначениеПлан = ЗначениеПлан;
		//считать и выводить факт
		Если НЕ РезультатПоОтделу.ПоказательЭффективности.ТекстЗапроса = "" Тогда
			
			ТекстЗапроса = РезультатПоОтделу.ПоказательЭффективности.ТекстЗапроса;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//отбор по менеджеру или направлению",  "ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж В (&НаправлениеПродаж)"
							);
			
			ЗапросФакт = Новый Запрос;
			ЗапросФакт.УстановитьПараметр("КонДата", КонецДня(ДатаКон));
			ЗапросФакт.УстановитьПараметр("НачДата", НачалоДня(ДатаНач));
			
			ЗапросНапр = Новый Запрос;
			ЗапросНапр.УстановитьПараметр("КонДата", КонецДня(ДатаКон));
			ЗапросНапр.УстановитьПараметр("НачДата", НачалоДня(ДатаНач));
			ЗапросНапр.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			                   |	ПланыПродажПоПоказателямЭффективностиОбороты.ОбъектПланирования.НаправлениеПродаж КАК ОбъектПланирования
			                   |ИЗ
			                   |	РегистрНакопления.ПланыПродажПоПоказателямЭффективности.Обороты(&НачДата, &КонДата, , ОбъектПланирования ССЫЛКА Справочник.Пользователи) КАК ПланыПродажПоПоказателямЭффективностиОбороты
			                   |
			                   |УПОРЯДОЧИТЬ ПО
			                   |	ОбъектПланирования
			                   |АВТОУПОРЯДОЧИВАНИЕ";
			ВыборкаНапр = ЗапросНапр.Выполнить().Выбрать();
			НаправлениеПродаж = Новый СписокЗначений;
			Пока ВыборкаНапр.Следующий() Цикл
				Если НЕ ВыборкаНапр.ОбъектПланирования = Справочники.НаправленияПродаж.ПустаяСсылка() Тогда
					НаправлениеПродаж.Добавить(ВыборкаНапр.ОбъектПланирования);
				КонецЕсли;
			КонецЦикла;
						
			ЗапросФакт.УстановитьПараметр("НаправлениеПродаж", НаправлениеПродаж);
			ЗапросФакт.УстановитьПараметр("ШинтрейдСПб", ШинтрейдСПб);
			
			ПараметрПоказателя = РезультатПоОтделу.ПараметрПоказателя;
			ТЗ = Новый ТаблицаЗначений;
			ТЗ = ПараметрПоказателя.СписокПараметров.Выгрузить();		
			ТЗ.Свернуть("ВидСравнения,ТипПараметра");
			
			Если РезультатПоОтделу.ПараметрПоказателя <> Справочники.ПараметрыПоказателейЭффективности.ПустаяСсылка() Тогда
				ДобавитьПараметрыВЗапрос(ПараметрПоказателя, ТЗ, ТекстЗапроса, ЗапросФакт);//+++ 22.11.2017		
			КонецЕсли;
			
			ЗапросФакт.Текст = ТекстЗапроса;
			
			Если РезультатПоОтделу.ПоказательЭффективности = Справочники.ПоказателиЭффективности.НайтиПоКоду("000000030") тогда
					ТЗПросрочкаОтдел = ТЗПросрочка.Скопировать(); 
					ТЗПросрочкаОтдел.Свернуть("Отдел", "СуммаУпрОстаток, СуммаПросрочки");
					строкаПросрочка= ТЗПросрочкаОтдел.Найти(ВыборкаНапр.ОбъектПланирования,"Отдел");
						Если строкаПросрочка<>Неопределено Тогда
							ЗначениеФакт= 100-(100*строкаПросрочка.СуммаПросрочки/строкаПросрочка.СуммаУпрОстаток) ;
						КонецЕсли;
                	Иначе

					РезультатФакт = ЗапросФакт.Выполнить().Выбрать();
					Если РезультатФакт.Следующий() Тогда
						ЗначениеФакт = РезультатФакт.Значение;
					КонецЕсли;
				КонецЕсли;

			ОбластьПоказательЭффективности.Параметры.ЗначениеФакт = ЗначениеФакт;
			
		КонецЕсли;
		
		//% выполнения
		ПроцентВыполнения = ?(ЗначениеПлан=0,0,ЗначениеФакт*100/ЗначениеПлан);
		ОбластьПоказательЭффективности.Параметры.ПроцентВыполнения = Формат(ПроцентВыполнения, "ЧДЦ=0");
		
		//остаток до 100%
		ОстатокДо100 = ЗначениеПлан-ЗначениеФакт;
		ОбластьПоказательЭффективности.Параметры.ОстатокДо100 = ?(ОстатокДо100>0,ОстатокДо100,0);
		
		//вес
		ОбластьПоказательЭффективности.Параметры.Вес = РезультатПоОтделу.Вес;
		
		//KPI
		Если РезультатПоОтделу.ПоказательЭффективности  =  Справочники.ПоказателиЭффективности.НайтиПоКоду("000000030") Тогда
			КоэффициентЭффективности = РезультатПоОтделу.Вес * ?(ОстатокДо100 > 13, 0, ?(ОстатокДо100 >= 10, 25,?(ОстатокДо100 >= 7, 50, 100)));
			  
		Иначе
			КоэффициентЭффективности = РезультатПоОтделу.Вес * ?(ПроцентВыполнения>100,100,ПроцентВыполнения);
		КонецЕсли;
		ОбластьПоказательЭффективности.Параметры.КоэффициентЭффективности = КоэффициентЭффективности/100;
		КоэффициентЭффективностиОбъекта = КоэффициентЭффективностиОбъекта + КоэффициентЭффективности/100;
		ТабДок.Вывести(ОбластьПоказательЭффективности, РезультатПоОтделу.Уровень()+1);
		
	КонецЦикла;
	ТабДок.Область("КПО").Текст = ?(Окр(КоэффициентЭффективностиОбъекта, 2) > 1, 1, Окр(КоэффициентЭффективностиОбъекта, 2));
	//ТабДок = Новый ТабличныйДокумент;
	//ТабДок.Область(
	КоэффициентЭффективностиОбъекта= 0;
	//По направлениям					   
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПДЗ", Справочники.ПоказателиЭффективности.НайтиПоКоду("000000030"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	А.ОбъектПланирования КАК ОбъектПланирования,
	|	Планы.ПоказательЭффективности КАК ПоказательЭффективности,
	|	Планы.ПараметрПоказателя КАК ПараметрПоказателя,
	|	ВЫБОР
	|		КОГДА Планы.ПоказательЭффективности = &ПДЗ
	|			ТОГДА Б.ПДЗ
	|		ИНАЧЕ СУММА(ЕСТЬNULL(Планы.ЗначениеПланОборот, 0))
	|	КОНЕЦ КАК ЗначениеПлан,
	|	ЕСТЬNULL(Планы.Вес, 0) КАК Вес
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПланыПродажПоПоказателямЭффективностиОбороты.ОбъектПланирования.НаправлениеПродаж КАК ОбъектПланирования
	|	ИЗ
	|		РегистрНакопления.ПланыПродажПоПоказателямЭффективности.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				,
	|				ОбъектПланирования ССЫЛКА Справочник.Пользователи
	|					И НЕ ОбъектПланирования = &ПустаяСсылка) КАК ПланыПродажПоПоказателямЭффективностиОбороты) КАК А
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПродажПоПоказателямЭффективности.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				,
	|				ОбъектПланирования ССЫЛКА Справочник.Пользователи
	|					И НЕ ОбъектПланирования = &ПустаяСсылка) КАК Планы
	|		ПО А.ОбъектПланирования = Планы.ОбъектПланирования.НаправлениеПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ПланыПродажПоПоказателямЭффективности.ЗначениеПлан КАК ПДЗ,
	|			ПланыПродажПоПоказателямЭффективности.ОбъектПланирования.НаправлениеПродаж КАК ОбъектПланированияНаправлениеПродаж
	|		ИЗ
	|			РегистрНакопления.ПланыПродажПоПоказателямЭффективности КАК ПланыПродажПоПоказателямЭффективности
	|		ГДЕ
	|			ПланыПродажПоПоказателямЭффективности.Период = &ДатаНач
	|			И ПланыПродажПоПоказателямЭффективности.Регистратор ССЫЛКА Документ.ВводПоказателейЭффективности
	|			И ПланыПродажПоПоказателямЭффективности.ПоказательЭффективности = &ПДЗ) КАК Б
	|		ПО А.ОбъектПланирования = Б.ОбъектПланированияНаправлениеПродаж
	|
	|СГРУППИРОВАТЬ ПО
	|	А.ОбъектПланирования,
	|	Планы.ПоказательЭффективности,
	|	Планы.ПараметрПоказателя,
	|	ЕСТЬNULL(Планы.Вес, 0),
	|	Б.ПДЗ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектПланирования,
	|	ПоказательЭффективности,
	|	ПараметрПоказателя
	|ИТОГИ ПО
	|	ОбъектПланирования
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КоэффициентЭффективностиОбъекта = 0;
	Пока Результат.Следующий() Цикл
		ОбластьОбъектПланирования.Параметры.ОбъектПланирования = Результат.ОбъектПланирования;
		
		ТабДок.Вывести(ОбластьОбъектПланирования, Результат.Уровень());
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьПоказательЭффективности.Параметры.ПоказательЭффективности = Выборка.ПоказательЭффективности.Наименование + ?(Выборка.ПараметрПоказателя = Неопределено, "", " " + Выборка.ПараметрПоказателя.Наименование);
			ЗначениеПлан = 0;
			ЗначениеФакт = 0;
			ЗначениеПлан = Выборка.ЗначениеПлан;
			ОбластьПоказательЭффективности.Параметры.ЗначениеПлан = Выборка.ЗначениеПлан;
			//считать и выводить факт
			
			Если Выборка.ПоказательЭффективности.ТекстЗапроса <> "" Тогда
				
				ТекстЗапроса = Выборка.ПоказательЭффективности.ТекстЗапроса;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//отбор по менеджеру или направлению", 
								"ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = &НаправлениеПродаж" );

				
				ЗапросФакт = Новый Запрос;
				ЗапросФакт.УстановитьПараметр("КонДата", КонецДня(ДатаКон));
				ЗапросФакт.УстановитьПараметр("НачДата", НачалоДня(ДатаНач));
				ЗапросФакт.УстановитьПараметр("НаправлениеПродаж", Результат.ОбъектПланирования);
				ЗапросФакт.УстановитьПараметр("ШинтрейдСПб", ШинтрейдСПб);
				
				// Сакулина
				ПараметрПоказателя = Выборка.ПараметрПоказателя;
				ТЗ = Новый ТаблицаЗначений;
				ТЗ = ПараметрПоказателя.СписокПараметров.Выгрузить();		
				ТЗ.Свернуть("ВидСравнения,ТипПараметра");
       			
				Если ПараметрПоказателя <> Справочники.ПараметрыПоказателейЭффективности.ПустаяСсылка() Тогда
					 ДобавитьПараметрыВЗапрос(ПараметрПоказателя, ТЗ, ТекстЗапроса, ЗапросФакт);//+++ 22.11.2017		
				КонецЕсли;
				// Сакулина
				
				ЗапросФакт.Текст = ТекстЗапроса;
				Если Выборка.ПоказательЭффективности = Справочники.ПоказателиЭффективности.НайтиПоКоду("000000030") тогда
					ТЗПросрочкаНаправления = ТЗПросрочка.Скопировать(); 
					ТЗПросрочкаНаправления.Свернуть("НаправлениеПродаж", "СуммаУпрОстаток, СуммаПросрочки");
					строкаПросрочка= ТЗПросрочкаНаправления.Найти(Выборка.ОбъектПланирования,"НаправлениеПродаж");
						Если строкаПросрочка<>Неопределено Тогда
							ЗначениеФакт= 100-(100*строкаПросрочка.СуммаПросрочки/строкаПросрочка.СуммаУпрОстаток) ;
						КонецЕсли;
                	Иначе

					РезультатФакт = ЗапросФакт.Выполнить().Выбрать();
					Если РезультатФакт.Следующий() Тогда
						ЗначениеФакт = РезультатФакт.Значение;
					КонецЕсли;
				КонецЕсли;
				ОбластьПоказательЭффективности.Параметры.ЗначениеФакт = ЗначениеФакт;
			КонецЕсли;
			
			//% выполнения
			ПроцентВыполнения = ?(ЗначениеПлан=0,0,ЗначениеФакт*100/ЗначениеПлан);
			ОбластьПоказательЭффективности.Параметры.ПроцентВыполнения = Формат(ПроцентВыполнения, "ЧДЦ=0");
			
			//остаток до 100%
			ОстатокДо100 = ЗначениеПлан-ЗначениеФакт;
			ОбластьПоказательЭффективности.Параметры.ОстатокДо100 = ?(ОстатокДо100>0,ОстатокДо100,0);
			
			//вес
			ОбластьПоказательЭффективности.Параметры.Вес = Выборка.Вес;
			
			//KPI
			Если Выборка.ПоказательЭффективности  =  Справочники.ПоказателиЭффективности.НайтиПоКоду("000000030") Тогда
				КоэффициентЭффективности = ?(Выборка.Вес = Null,0,Выборка.Вес * ?(ОстатокДо100 > 13, 0, ?(ОстатокДо100 >= 10, 25,?(ОстатокДо100 >= 7, 50, 100))));
			  
			Иначе
				КоэффициентЭффективности =  ?(Выборка.Вес = Null,0,Выборка.Вес * ?(ПроцентВыполнения>100,100,ПроцентВыполнения));
			КонецЕсли;

			ОбластьПоказательЭффективности.Параметры.КоэффициентЭффективности = КоэффициентЭффективности/100;
			КоэффициентЭффективностиОбъекта = КоэффициентЭффективностиОбъекта + КоэффициентЭффективности/100;		
			ТабДок.Вывести(ОбластьПоказательЭффективности, Выборка.Уровень()+1);
		КонецЦикла;
		ТабДок.Область("КПО").Текст = ?(Окр(КоэффициентЭффективностиОбъекта, 2) > 1, 1, Окр(КоэффициентЭффективностиОбъекта, 2));  
		КоэффициентЭффективностиОбъекта = 0;
		//выводить по менеджерам направления
		ЗапросПоМенеджерам = Новый Запрос;
		ЗапросПоМенеджерам.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
		ЗапросПоМенеджерам.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
		ЗапросПоМенеджерам.УстановитьПараметр("НаправлениеПродаж", Результат.ОбъектПланирования);
		ЗапросПоМенеджерам.Текст = 
		"ВЫБРАТЬ
		|	Планы.ОбъектПланирования КАК ОбъектПланирования,
		|	Планы.ПоказательЭффективности КАК ПоказательЭффективности,
		|	Планы.ПараметрПоказателя,
		|	ЕСТЬNULL(Планы.ЗначениеПланОборот, 0) КАК ЗначениеПлан,
		|	ЕСТЬNULL(Планы.Вес,0) КАК Вес
		|ИЗ
		|	РегистрНакопления.ПланыПродажПоПоказателямЭффективности.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			ОбъектПланирования ССЫЛКА Справочник.Пользователи
		|				И ОбъектПланирования.НаправлениеПродаж = &НаправлениеПродаж) КАК Планы
		|
		|СГРУППИРОВАТЬ ПО
		|	Планы.ОбъектПланирования,
		|	Планы.ПоказательЭффективности,
		|	Планы.ПараметрПоказателя,
		|	ЕСТЬNULL(Планы.ЗначениеПланОборот, 0),
		|	Планы.Вес
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбъектПланирования,
		|	ПоказательЭффективности
		|ИТОГИ ПО
		|	ОбъектПланирования
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		РезультатПоМенеджерам = ЗапросПоМенеджерам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КоэффициентЭффективностиМенеджера = 0;
		Пока РезультатПоМенеджерам.Следующий() Цикл
			ОбластьОбъектПланированияМенеджер.Параметры.ОбъектПланирования = РезультатПоМенеджерам.ОбъектПланирования;
			ТабДок.Вывести(ОбластьОбъектПланированияМенеджер, РезультатПоМенеджерам.Уровень()+1);
			
			Выборка = РезультатПоМенеджерам.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбластьПоказательЭффективности.Параметры.ПоказательЭффективности = Выборка.ПоказательЭффективности.Наименование + ?(Выборка.ПараметрПоказателя = Неопределено, "", " " + Выборка.ПараметрПоказателя.Наименование);
				ОбластьПоказательЭффективности.Параметры.ЗначениеПлан = Выборка.ЗначениеПлан;
				ЗначениеПлан = 0;
				ЗначениеФакт = 0;
				ЗначениеПлан = Выборка.ЗначениеПлан;
				//считать и выводить факт
				
				Если НЕ Выборка.ПоказательЭффективности.ТекстЗапроса = "" Тогда
					
					ТекстЗапроса = Выборка.ПоказательЭффективности.ТекстЗапроса;
					Если НЕ Выборка.ПоказательЭффективности = Справочники.ПоказателиЭффективности.ОтношениеПросрочкиКДебЗадолженности Тогда
						ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//отбор по менеджеру или направлению", "ДоговорКонтрагента.ОтветственноеЛицо = &Менеджер");
					КонецЕсли;
					
					ЗапросФакт = Новый Запрос;
					ЗапросФакт.УстановитьПараметр("КонДата", КонецДня(ДатаКон));
					ЗапросФакт.УстановитьПараметр("НачДата", НачалоДня(ДатаНач));
					ЗапросФакт.УстановитьПараметр("Менеджер", Выборка.ОбъектПланирования);
					ЗапросФакт.УстановитьПараметр("ШинтрейдСПб", ШинтрейдСПб);
					
					// Сакулина
					ПараметрПоказателя = Выборка.ПараметрПоказателя;
					ТЗ = Новый ТаблицаЗначений;
					ТЗ = ПараметрПоказателя.СписокПараметров.Выгрузить();		
					ТЗ.Свернуть("ВидСравнения,ТипПараметра");
					
					Если ПараметрПоказателя <> Справочники.ПараметрыПоказателейЭффективности.ПустаяСсылка() Тогда
						 ДобавитьПараметрыВЗапрос(ПараметрПоказателя, ТЗ, ТекстЗапроса, ЗапросФакт); //+++ 22.11.2017
					КонецЕсли;
					// Сакулина
				
					ЗапросФакт.Текст = ТекстЗапроса;
					
					Если Выборка.ПоказательЭффективности = Справочники.ПоказателиЭффективности.НайтиПоКоду("000000030") тогда
						строкаПросрочка= ТЗПросрочка.Найти(Выборка.ОбъектПланирования,"ОтветственноеЛицо");
						Если строкаПросрочка<>Неопределено Тогда
							ЗначениеФакт= 100-(100*строкаПросрочка.СуммаПросрочки/строкаПросрочка.СуммаУпрОстаток) ;
						КонецЕсли;
                	Иначе

					РезультатФакт = ЗапросФакт.Выполнить().Выбрать();
					Если РезультатФакт.Следующий() Тогда
						ЗначениеФакт = РезультатФакт.Значение;
					КонецЕсли;
					КонецЕсли;
					
					ОбластьПоказательЭффективности.Параметры.ЗначениеФакт = ЗначениеФакт;
					
					
				КонецЕсли;
				
				//% выполнения
				ПроцентВыполнения = ?(ЗначениеПлан=0,0,ЗначениеФакт*100/ЗначениеПлан);
				ОбластьПоказательЭффективности.Параметры.ПроцентВыполнения = Формат(ПроцентВыполнения, "ЧДЦ=0");
				
				//остаток до 100%
				ОстатокДо100 = ЗначениеПлан-ЗначениеФакт;
				ОбластьПоказательЭффективности.Параметры.ОстатокДо100 = ?(ОстатокДо100>0,ОстатокДо100,0);
				
				//вес
				ОбластьПоказательЭффективности.Параметры.Вес = Выборка.Вес;
				
				//KPI
				Если Выборка.ПоказательЭффективности   =  Справочники.ПоказателиЭффективности.НайтиПоКоду("000000030") Тогда
					КоэффициентЭффективности = ?(Выборка.Вес = Null,0,Выборка.Вес * ?(ОстатокДо100 > 13, 0, ?(ОстатокДо100 >= 10, 25,?(ОстатокДо100 >= 7, 50, 100))));
			  
				Иначе
					КоэффициентЭффективности = ?(Выборка.Вес = Null,0,Выборка.Вес * ?(ПроцентВыполнения>100,100,ПроцентВыполнения));

				КонецЕсли;

				ОбластьПоказательЭффективности.Параметры.КоэффициентЭффективности = КоэффициентЭффективности/100;
				КоэффициентЭффективностиМенеджера = КоэффициентЭффективностиМенеджера + КоэффициентЭффективности/100;
				ТабДок.Вывести(ОбластьПоказательЭффективности, Выборка.Уровень()+1);
			КонецЦикла;
			ТабДок.Область("КПМ").Текст = ?(Окр(КоэффициентЭффективностиМенеджера, 2) > 1, 1, Окр(КоэффициентЭффективностиМенеджера, 2)); 
			КоэффициентЭффективностиМенеджера = 0;
		КонецЦикла;
		

	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
		
КонецПроцедуры



//+++ 22.11.2017 блок строк от Анны Сакулиной  - вместо копипаста 3 раза
процедура ДобавитьПараметрыВЗапрос(ПараметрПоказателя, ТЗ, ТекстЗапроса, ЗапросФакт) 
	Индекс =0;
	Для каждого СтрокаТЗ из ТЗ Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("ВидСравнения", СтрокаТЗ.ВидСравнения);
		Отбор.Вставить("ТипПараметра", СтрокаТЗ.ТипПараметра);
		
		Массив = ПараметрПоказателя.СписокПараметров.НайтиСтроки(Отбор);
		СписокПараметра = Новый СписокЗначений;
		Для Каждого Стр из Массив Цикл
			СписокПараметра.Добавить(Стр.параметр);
		КонецЦикла;
        ЭтоОдноЗначение = (СписокПараметра.Количество()=1);
		
		СтрокаВидаСравнения = соотвДейств.Получить(СтрокаТЗ.ВидСравнения);
		строкаТипПараметра  =  соотвПарам.Получить(СтрокаТЗ.ТипПараметра);
		Индекс = Индекс + 1;
		Если СтрокаТЗ.ВидСравнения = "Содержит" ИЛИ СтрокаТЗ.ВидСравнения = "Не содержит" Тогда
			ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ " И Номенклатура"+строкаТипПараметра+".Наименование " + СтрокаВидаСравнения +  " &СписокПараметров" + Индекс + " )";
			
//+++ 22.11.2017--------------------------различия для 1 или списка ------------------------------------------------------------------			
		ИначеЕсли СтрокаВидаСравнения="=" или СтрокаВидаСравнения ="<>" тогда
			
			Если ЭтоОдноЗначение тогда 
				ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ " И Номенклатура"+строкаТипПараметра+" " + СтрокаВидаСравнения +  " &СписокПараметров" + Индекс + " )";
			Иначе 
				Если СтрокаВидаСравнения="=" тогда// равна нескольким значениям - заменяем на В (&СписокN) 
					ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ " И Номенклатура"+строкаТипПараметра+" В (&СписокПараметров" + Индекс + ") )";
				Иначе
					ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ " И НЕ Номенклатура"+строкаТипПараметра+" В (&СписокПараметров" + Индекс + ") )";
				КонецЕсли;	
			КонецЕсли;	
			
		Иначе //прямое сравнение реквизита со Списком / 1 значением
			ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ " И Номенклатура"+строкаТипПараметра+" " + СтрокаВидаСравнения +  " (&СписокПараметров" + Индекс + ") )";
		КонецЕсли;
		
		//Сакулина
		//Если СтрокаТЗ.ТипПараметра = "Номенклатурные группы" Тогда
		//	Если СтрокаТЗ.ВидСравнения = "Содержит" или СтрокаТЗ.ВидСравнения = "Не содержит" Тогда
		//		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ "и Номенклатура.НоменклатурнаяГруппа.Наименование " + СтрокаВидаСравнения +  " &СписокПараметров" + Индекс + ")";
		//	Иначе
		//		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ "и Номенклатура.НоменклатурнаяГруппа " + СтрокаВидаСравнения +  " (&СписокПараметров" + Индекс + "))";
		//	КонецЕсли;
		//ИначеЕсли СтрокаТЗ.ТипПараметра = "Производители" Тогда
		//	Если СтрокаТЗ.ВидСравнения = "Содержит" или СтрокаТЗ.ВидСравнения = "Не содержит"   Тогда
		//		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ "и Номенклатура.Производитель.Наименование " + СтрокаВидаСравнения +  " &СписокПараметров"  + Индекс + ")";
		//	Иначе
		//		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ "и Номенклатура.Производитель" + СтрокаВидаСравнения +  " (&СписокПараметров" + Индекс + "))";
		//	КонецЕсли;
		//ИначеЕсли СтрокаТЗ.ТипПараметра = "Типоразмеры" Тогда
		//	Если СтрокаТЗ.ВидСравнения = "Содержит"  или СтрокаТЗ.ВидСравнения = "Не содержит"  Тогда
		//		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ "и Номенклатура.Типоразмер.Наименование " + СтрокаВидаСравнения +  " &СписокПараметров" + Индекс + ")";
		//	Иначе
		//		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ "и Номенклатура.Типоразмер" + СтрокаВидаСравнения +  " (&СписокПараметров" + Индекс + "))";
		//	КонецЕсли;
		//ИначеЕсли СтрокаТЗ.ТипПараметра = "Номенклатура" Тогда
		//	Если СтрокаТЗ.ВидСравнения = "Содержит" или СтрокаТЗ.ВидСравнения = "Не содержит"  Тогда
		//		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ "и Номенклатура.Наименование  " + СтрокаВидаСравнения +  " &СписокПараметров" + Индекс + ")";
		//	Иначе
		//		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ "и Номенклатура " + СтрокаВидаСравнения +  " (&СписокПараметров)" + Индекс + "))";
		//	КонецЕсли;
		//ИначеЕсли СтрокаТЗ.ТипПараметра = "Модели товаров" Тогда
		//	Если СтрокаТЗ.ВидСравнения = "Содержит" или СтрокаТЗ.ВидСравнения = "Не содержит"  Тогда
		//		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ "и Номенклатура.Модель.Наименование  " + СтрокаВидаСравнения +  " &СписокПараметров" + Индекс + ")";
		//	Иначе
		//		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+ "и Номенклатура.Модель " + СтрокаВидаСравнения +  " (&СписокПараметров" + Индекс + "))";
		//	КонецЕсли;
		//ИначеЕсли СтрокаТЗ.ТипПараметра = "Виды товаров" Тогда   // Сакулина
		//	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1)+  "и Номенклатура.ВидТовара " + СтрокаВидаСравнения +  " (&СписокПараметров" + Индекс + "))";
		//КонецЕсли;
		
		Если ТипЗнч(СписокПараметра[0].Значение) = Тип("Строка") Тогда
			ЗапросФакт.УстановитьПараметр("СписокПараметров"+ Индекс, "%" + СписокПараметра[0].Значение+ "%");
		Иначе
			Если ЭтоОдноЗначение тогда //одно значение в 99% случаев! это = Значение1
				ЗапросФакт.УстановитьПараметр("СписокПараметров"+ Индекс, СписокПараметра[0].Значение);
			иначе  //это список!
				ЗапросФакт.УстановитьПараметр("СписокПараметров"+ Индекс, СписокПараметра);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура КнопкаВыбораПериодаНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНач, ?(ДатаКон='0001-01-01', ДатаКон, КонецДня(ДатаКон)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНач = НастройкаПериода.ПолучитьДатуНачала();
		ДатаКон = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если НЕ ЗначениеНеЗаполнено(ДатаНач) И НЕ ЗначениеНеЗаполнено(ДатаКон) Тогда
		
		ВТекущемПериоде = Ложь;
		
		Если ДатаКон >= ТекущаяДата() Тогда
		
			ВТекущемПериоде = Истина;
		
		КонецЕсли;
		
		Если ВТекущемПериоде Тогда
		
			мДатаРасчета = Формат(ТекущаяДата(), "ДЛФ=Д");
			мДнейВПериоде = Окр((КонецДня(ДатаКон) - НачалоДня(ДатаНач)) / 60 / 60 / 24, 0);
			мДнейРасчета =  ((НачалоДня(ТекущаяДата()) - НачалоДня(ДатаНач)) / 60 / 60 / 24);
			
		Иначе
			
			мДатаРасчета = Формат(ДатаКон, "ДЛФ=Д");
			мДнейВПериоде = Окр((КонецМесяца(ДатаКон) - НачалоДня(ДатаНач)) / 60 / 60 / 24, 0);
			мДнейРасчета =  Окр((КонецДня(ДатаКон) - НачалоДня(ДатаНач)) / 60 / 60 / 24, 0);
			
		КонецЕсли; 
		
		ЭлементыФормы.ОписаниеПараметров.Заголовок = "Дата расчета: " + мДатаРасчета + ", дней в периоде: " + Строка(мДнейВПериоде) + ", дней расчета: " + Строка(мДнейРасчета) + ", тип периода: " + ?(ВТекущемПериоде, "текущий", "прошедший");
		
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ЗаполнитьСреднююПросроченнуюЗадолженность()
Запрос=Новый Запрос;	
счДата=ДатаНач;
счНедель=0;
Если ТекущаяДата()> КонецДня(ДатаКон) тогда
	Д = КонецДня(ДатаКон);
Иначе
	Д = ТекущаяДата();
КонецЕсли;	
Пока счДата < Д Цикл

счНедель=счНедель+1;
счДата=счДата+86400;
Запрос.Текст="ВЫБРАТЬ
             |	А.Менеджер КАК ОтветственноеЛицо,
             |	СУММА(А.СуммаПросрочки) КАК СуммаПросрочки,
             |	СУММА(А.СуммаУпрОстаток) КАК СуммаУпрОстаток,
             |	А.Менеджер.НаправлениеПродаж КАК НаправлениеПродаж,
             |	А.Менеджер.НаправлениеПродаж.Родитель КАК Отдел
             |ИЗ
             |	(ВЫБРАТЬ
             |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК Менеджер,
             |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
             |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
             |		ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) КАК СуммаУпр,
             |		ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
             |		ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты КАК ДатаОплаты,
             |		ВЫБОР
             |			КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) < &ДатаКон
             |				ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
             |			ИНАЧЕ 0
             |		КОНЕЦ КАК СуммаПросрочки,
             |		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
             |	ИЗ
             |		(ВЫБРАТЬ
             |			ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента, ЗачетВзаимныхОбязательств.ДоговорКонтрагента) КАК ДоговорКонтрагента,
             |			ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка, ЗачетВзаимныхОбязательств.Сделка) КАК Сделка,
             |			ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) - ЕСТЬNULL(ЗачетВзаимныхОбязательств.СуммаУпрЗачетов, 0) КАК СуммаУпрОстаток
             |		ИЗ
             |			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
             |					&ДатаКон,
             |					НЕ ДоговорКонтрагента.Владелец.ВходитВХолдинг
             |						И НЕ ДоговорКонтрагента.Владелец = &Старк) КАК ВзаиморасчетыСКонтрагентамиОстатки
             |				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
             |					УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента КАК ДоговорКонтрагента,
             |					УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка КАК Сделка,
             |					СУММА(УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сумма) КАК СуммаУпрЗачетов
             |				ИЗ
             |					Документ.УправленческийЗачетВзаимныхОбязательств.СуммыДолга КАК УправленческийЗачетВзаимныхОбязательствСуммыДолга
             |				ГДЕ
             |					УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Проведен
             |					И УправленческийЗачетВзаимныхОбязательствСуммыДолга.ВидЗадолженности = &Дебиторская
             |					И УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Дата <= &ДатаКон
             |				
             |				СГРУППИРОВАТЬ ПО
             |					УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента,
             |					УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка) КАК ЗачетВзаимныхОбязательств
             |				ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ЗачетВзаимныхОбязательств.ДоговорКонтрагента
             |					И ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ЗачетВзаимныхОбязательств.Сделка
             |		ГДЕ
             |			ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) - ЕСТЬNULL(ЗачетВзаимныхОбязательств.СуммаУпрЗачетов, 0) <> 0) КАК ВзаиморасчетыСКонтрагентамиОстатки
             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
             |				ВзаиморасчетовОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
             |				СУММА(ВзаиморасчетовОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток
             |			ИЗ
             |				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
             |						&ДатаКон,
             |						НЕ ДоговорКонтрагента.Владелец.ВходитВХолдинг
             |							И НЕ ДоговорКонтрагента.Владелец = &Старк) КАК ВзаиморасчетовОстатки
             |			
             |			СГРУППИРОВАТЬ ПО
             |				ВзаиморасчетовОстатки.ДоговорКонтрагента) КАК ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа
             |			ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.ДоговорКонтрагента
             |				И (ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.СуммаУпрОстаток > 0)) КАК А
             |
             |СГРУППИРОВАТЬ ПО
             |	А.Менеджер,
             |	А.Менеджер.НаправлениеПродаж,
             |	А.Менеджер.НаправлениеПродаж.Родитель
             |
             |УПОРЯДОЧИТЬ ПО
             |	А.Менеджер.Наименование";
Запрос.УстановитьПараметр("ДатаКон",счДата);		
Запрос.УстановитьПараметр("Дебиторская",Перечисления.ВидыЗадолженности.Дебиторская);
Запрос.УстановитьПараметр("Старк",Справочники.Контрагенты.НайтиПоКоду("00004"));
		
Выборка=Запрос.Выполнить().Выбрать();		

Пока Выборка.Следующий() Цикл
	СтрокаОтветственный=ТЗПросрочка.Найти(Выборка.ОтветственноеЛицо,"ОтветственноеЛицо");
	Если  СтрокаОтветственный=Неопределено Тогда // не найден, добавляем
		СтрокаОтветственный=ТЗПросрочка.Добавить();	
		ЗаполнитьЗначенияСвойств(СтрокаОтветственный,Выборка);
	Иначе
		СтрокаОтветственный.СуммаПросрочки= Выборка.СуммаПросрочки+ СтрокаОтветственный.СуммаПросрочки;
		СтрокаОтветственный.СуммаУпрОстаток= Выборка.СуммаУпрОстаток+ СтрокаОтветственный.СуммаУпрОстаток;
	КонецЕсли;
	
КонецЦикла;	
	
КонецЦикла;	

Для каждого СтрокаОтветственный ИЗ ТЗПросрочка Цикл
	СтрокаОтветственный.СуммаПросрочки= СтрокаОтветственный.СуммаПросрочки/счНедель ;
	СтрокаОтветственный.СуммаУпрОстаток= СтрокаОтветственный.СуммаУпрОстаток/счНедель ;
КонецЦикла;	
	
КонецПроцедуры	

ТЗПросрочка=Новый ТаблицаЗначений;
ТЗПросрочка.Колонки.Добавить("ОтветственноеЛицо");
ТЗПросрочка.Колонки.Добавить("СуммаПросрочки");    // просроченная дебеторская задолженность
ТЗПросрочка.Колонки.Добавить("СуммаУпрОстаток");   // дебеторская задолженность
ТЗПросрочка.Колонки.Добавить("НаправлениеПродаж");
ТЗПросрочка.Колонки.Добавить("Отдел");

ДатаНач = НачалоМесяца(ТекущаяДата());
ДатаКон = КонецМесяца(ТекущаяДата());


	соотвДейств = Новый Соответствие;
	//+++ 22.11.2017 - 99% случаев только 1 значение =
	//соотвДейств.Вставить("Равно", " В ИЕРАРХИИ"); 
	//соотвДейств.Вставить("Не равно", "Не В ИЕРАРХИИ");
 	соотвДейств.Вставить("Равно", "="); 
	соотвДейств.Вставить("Не равно", "<>");
	
	соотвДейств.Вставить("В группе", "В ИЕРАРХИИ" );
	соотвДейств.Вставить("Не в группе", "Не В ИЕРАРХИИ" );
	соотвДейств.Вставить("Содержит", "ПОДОБНО");
	соотвДейств.Вставить("Не содержит", "Не ПОДОБНО" );

	соотвПарам = новый Соответствие;    //реквизиты Номенклатуры
	соотвПарам.Вставить("Номенклатурные группы", ".НоменклатурнаяГруппа");
	соотвПарам.Вставить("Производители", ".Производитель");
	соотвПарам.Вставить("Типоразмеры", ".Типоразмер");
	соотвПарам.Вставить("Номенклатура","");
	соотвПарам.Вставить("Модели товаров", ".Модель");
	соотвПарам.Вставить("Виды товаров", ".ВидТовара");
