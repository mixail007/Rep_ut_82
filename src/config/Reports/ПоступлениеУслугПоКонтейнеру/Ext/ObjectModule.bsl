//+++ главная
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	СтруктураПредставлениеПолей = Новый Структура;
	МассивОтбора = Новый Массив;
	
	Текст = "ВЫБРАТЬ
	        |	ПоступлениеТоваровУслугТовары.Ссылка.Контрагент КАК ПоставщикТоваров,
	        |	ВЫРАЗИТЬ(ПоступлениеТоваровУслугТовары.Ссылка.Комментарий КАК СТРОКА(50)) КАК Контейнер,
	        |	ПоступлениеТоваровУслугТовары.Ссылка.НомерСБИС КАК НомерГТД,
	        |	ЗакупкиОбороты.Регистратор.Услуга КАК Услуга,
	        |	ЗакупкиОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
	        |	ЗакупкиОбороты.Номенклатура КАК Номенклатура,
	        |	ЗакупкиОбороты.СтоимостьОборот КАК Стоимость,
	        |	ЗакупкиОбороты.ДокументЗакупки КАК ДокументПоступления,
	        |	ЗакупкиОбороты.Регистратор КАК ДокументДопРасходов
	        |{ВЫБРАТЬ
	        |	Стоимость КАК Стоимость,
	        |	ПоставщикТоваров.*,
	        |	Контейнер,
	        |	НомерГТД,
	        |	Услуга,
	        |	Контрагент.*,
	        |	Номенклатура.*,
	        |	ДокументПоступления.*,
	        |	ДокументДопРасходов.*}
	        |ИЗ
	        |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки.Обороты(
	        |				&ДатаНач,
	        |				&ДатаТек,
	        |				Регистратор,
	        |				ВЫБОР
	        |					КОГДА &КонтрагентТоваров = &ПустойКонтрАгент
	        |						ТОГДА (ВЫРАЗИТЬ(ДокументЗакупки.Комментарий КАК СТРОКА(100))) <> """"
	        |					ИНАЧЕ ДокументЗакупки.Контрагент = &КонтрагентТоваров
	        |				КОНЕЦ) КАК ЗакупкиОбороты
	        |		ПО ПоступлениеТоваровУслугТовары.Ссылка <> ЗакупкиОбороты.Регистратор
	        |			И ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры = ЗакупкиОбороты.ХарактеристикаНоменклатуры
	        |			И ПоступлениеТоваровУслугТовары.Номенклатура = ЗакупкиОбороты.Номенклатура
	        |			И ПоступлениеТоваровУслугТовары.Ссылка = ЗакупкиОбороты.ДокументЗакупки
	        |ГДЕ
	        |	ПоступлениеТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	        |	И ВЫБОР
	        |			КОГДА &КонтрагентТоваров = &ПустойКонтрАгент
	        |				ТОГДА (ВЫРАЗИТЬ(ПоступлениеТоваровУслугТовары.Ссылка.Комментарий КАК СТРОКА(100))) <> """"
	        |			ИНАЧЕ ПоступлениеТоваровУслугТовары.Ссылка.Контрагент = &КонтрагентТоваров
	        |		КОНЕЦ
	        |	И ЗакупкиОбороты.Регистратор.Услуга <> &ПустаяУслуга
	        |{ГДЕ
	        |	ПоступлениеТоваровУслугТовары.Ссылка.Контрагент.* КАК ПоставщикТоваров,
	        |	(ВЫРАЗИТЬ(ПоступлениеТоваровУслугТовары.Ссылка.Комментарий КАК СТРОКА(50))) КАК Контейнер,
	        |	ПоступлениеТоваровУслугТовары.Ссылка.НомерСБИС КАК НомерГТД,
	        |	ЗакупкиОбороты.ДокументЗакупки.* КАК ДокументПоступления,
	        |	ЗакупкиОбороты.Регистратор.Услуга.* КАК Услуга,
	        |	ЗакупкиОбороты.ДоговорКонтрагента.Владелец.* КАК Контрагент,
	        |	ЗакупкиОбороты.Регистратор.* КАК ДокументДопРасходов,
	        |	ЗакупкиОбороты.Номенклатура.*,
	        |	ЗакупкиОбороты.СтоимостьОборот КАК Стоимость}
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	ЗакупкиОбороты.Регистратор.Услуга.Артикул,
	        |	ЗакупкиОбороты.Регистратор.Дата
	        |{УПОРЯДОЧИТЬ ПО
	        |	ПоставщикТоваров.*,
	        |	ЗакупкиОбороты.Регистратор.Услуга.*}
	        |ИТОГИ
	        |	СУММА(Стоимость)
	        |ПО
	        |	ОБЩИЕ,
	        |	ПоставщикТоваров,
	        |	Контейнер,
	        |	НомерГТД,
	        |	ДокументПоступления,
	        |	Услуга,
	        |	Контрагент,
	        |	ДокументДопРасходов,
	        |	Номенклатура
	        |{ИТОГИ ПО
	        |	ПоставщикТоваров.*,
	        |	Контейнер,
	        |	НомерГТД,
	        |	ДокументПоступления.*,
	        |	Услуга,
	        |	Контрагент.*,
	        |	Номенклатура.*,
	        |	ДокументДопРасходов.*,
	        |	Стоимость}
	        |АВТОУПОРЯДОЧИВАНИЕ";
	//------------------------ изменение названия полей для пользователей ----------------------
	СтруктураПредставлениеПолей = новый Структура("ПоставщикТоваров,
	|Контейнер,
	|НомерГТД,
	
	|Услуга,
	|ДокументПоступления,
	|ДокументДопРасходов", 
	
	
	"Поставщик товаров",
	"Контейнер",
	"Номер ГТД",
	
	"Услуга",
	"Документ поступления",
	"Документ доп.расходов");
	
	ПостроительОтчета.Текст = Текст;
	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
		
	ПостроительОтчета.Параметры.Вставить("КонтрагентТоваров", ?(ЗначениеЗаполнено(СсылкаНаОбъект), СсылкаНаОбъект, справочники.Контрагенты.ПустаяСсылка()) ); 
	ПостроительОтчета.Параметры.Вставить("ПустойКонтрАгент", справочники.Контрагенты.ПустаяСсылка() ); 
	ПостроительОтчета.Параметры.Вставить("ПустаяУслуга",справочники.Номенклатура.ПустаяСсылка() );
	ПостроительОтчета.Параметры.Вставить("ДатаТек", конецДня(ТекущаяДата()) );
	
	
	
	
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	ПостроительОтчета.ИзмеренияСтроки.Добавить("ПоставщикТоваров");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Контейнер");
	//ПостроительОтчета.ИзмеренияСтроки.Добавить("НомерГТД");	
		
	ПостроительОтчета.ИзмеренияКолонки.Очистить();
	ПостроительОтчета.ИзмеренияКолонки.Добавить("Услуга");
	ПостроительОтчета.ИзмеренияКолонки.Добавить("Контрагент");

	ПостроительОтчета.ВыбранныеПоля.Очистить(); // доп. поля
	//ПостроительОтчета.ВыбранныеПоля.Добавить("НомерГТД");	
	
	ПостроительОтчета.ОтображатьСостояние = истина;
	ПостроительОтчета.Макет.Область().ВыделятьОтрицательные = истина;
	
	//-------------------------------------------------------------------------------------------
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда
	   ТекстПоляСвойств= "";
		ТекстПоляКатегорий = "";

		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным   = "Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		
		
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, 
				ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
				,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);
				
	КонецЕсли;
	
	//ПостроительОтчета.Текст = Текст;
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("ПоставщикТоваров");
	МассивОтбора.Добавить("Услуга");
	МассивОтбора.Добавить("Контрагент");
	
	МассивОтбора.Добавить("Контейнер");
	МассивОтбора.Добавить("НомерГТД");
	МассивОтбора.Добавить("ДокументПоступления");
	МассивОтбора.Добавить("ДокументДопРасходов"); 
	
	
	//ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	
	
	ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	//+++
	Если ПостроительОтчета.Отбор.Найти("ПоставщикТоваровОсновнойМенеджерКонтрагента") = неопределено тогда
		ПостроительОтчета.Отбор.Добавить("ПоставщикТоваров.ОсновнойМенеджерКонтрагента");
	КонецЕсли;
	ПостроительОтчета.Отбор.ПоставщикТоваровОсновнойМенеджерКонтрагента.видСравнения = ВидСравнения.Равно;
	ПостроительОтчета.Отбор.ПоставщикТоваровОсновнойМенеджерКонтрагента.значение = справочники.Пользователи.НайтиПоКоду("Серебренникова А.А.");
	ПостроительОтчета.Отбор.ПоставщикТоваровОсновнойМенеджерКонтрагента.использование = истина;
	//+++
	
	ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;
	
	точн = "2";// число цифр после запятой
	ОбщийОтчет.ЗаполнитьПоказатели("Стоимость", "Стоимость", Истина, "ЧЦ=15; ЧДЦ="+точн);
	
	ОбщийОтчет.мНазваниеОтчета = "Отчет по "+?(ЗначениеЗаполнено(СсылкаНаОбъект),строка(СсылкаНаОбъект.Наименование), "всем поставщикам товаров" );
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Ложь;
	ОбщийОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	// Установим дату начала отчета
	Если ЗначениеНеЗаполнено(ОбщийОтчет.ДатаНач) Тогда
		Если ЗначениеЗаполнено(глТекущийПользователь) Тогда
			ОбщийОтчет.ДатаНач = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяДатаНачалаОтчетов");
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеНеЗаполнено(ОбщийОтчет.ДатаНач) Тогда
      ОбщийОтчет.ДатаНач = началоМесяца(ТекущаяДата());
	  ОбщийОтчет.ДатаКон = КонецДня(ТекущаяДата());
	КонецЕсли;  

КонецПроцедуры

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт

	//ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("РентабельностьПродаж", Новый Структура("ТакогоИзмеренияНетВОтчете")); // Рентабельность не выводится в итогах по группировкам, только в детальных записях
	//ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("ПроцентНаценки", Новый Структура("ТакогоИзмеренияНетВОтчете")); // Рентабельность не выводится в итогах по группировкам, только в детальных записях
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПРоцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры

ОбщийОтчет.ИмяРегистра = "Закупки";