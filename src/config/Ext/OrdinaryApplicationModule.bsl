Перем СтруктураЗаказаПоставщикам Экспорт;
Перем глТекущийПользователь Экспорт;
Перем глТорговоеОборудование Экспорт;
Перем глСоответствиеТекстовЭлектронныхПисем Экспорт;
Перем глОбработкаАвтоПолученияОтправкиЭлектронныхПисем Экспорт;
Перем глЗапрашиватьПодтверждениеПриЗакрытии Экспорт;
Перем ТекущаяСтадияЗавершенияРаботыСистемы;
Перем глЗапускСистемы Экспорт;
Перем АдресРесурсовОбозревателя Экспорт; // В переменной содержится значение 
										 // адреса ресурса данной конфигурации
Перем ТекущийВидПродукции Экспорт;		 // Текущий вид продукции при работе с 
										 // номенклатурой 
Перем глИнтервалОбмена Экспорт;
										 
// СтандартныеПодсистемы.ОценкаПроизводительности
Перем ОценкаПроизводительностиЗамерВремени Экспорт;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

Процедура ПередНачаломРаботыСистемы(Отказ)
	
	ТекущийРежим     = Константы.РежимЗавершенияРаботыПользователей.Получить();
	РежимыЗавершения = Перечисления.РежимыЗавершенияРаботыПользователей;
	
	Если ПравоДоступа("Изменение", Метаданные.Константы.РежимЗавершенияРаботыПользователей) Тогда
		Возврат;
	ИначеЕсли ТекущийРежим = РежимыЗавершения.ЗавершитьБезусловно
		  ИЛИ ТекущийРежим = РежимыЗавершения.ЗавершитьССохранениемДанныхПользователя Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПроверитьВозможностьРаботыПользователя(Отказ);
	
КонецПроцедуры

Процедура УстановитьГраницыЗапрета()
	
	Если Константы.ЧислоДнейУстановкиЗапрета.Получить() > 0 Тогда
		
		глЗапускСистемы = Истина;
		
		ДатаЗапрета = КонецДня(ТекущаяДата()) - 86400 * Константы.ЧислоДнейУстановкиЗапрета.Получить();
				
		ФормаГраниц = Обработки.УстановкаГраницы.ПолучитьФорму();
		ФормаГраниц.мПоказыватьФорму = Ложь;
		ФормаГраниц.мДатаЗапрета = ДатаЗапрета;
		ФормаГраниц.ОткрытьМодально();

		глЗапускСистемы = Ложь;
		
	КонецЕсли;
	
	
КонецПроцедуры


процедура СменаИнтерфейсаОгр() Экспорт
		Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОграниченныйИнтерфейс") = Истина Тогда
          ГлавныйИнтерфейс.ПереключитьИнтерфейс("УправлениеПродажамиОгр");
		//  ГлавныйИнтерфейс.Общий.Видимость = Ложь;
		  //Shell = Новый COMОбъект("Shell.Application"); 
		  //Shell.MinimizeAll(); 
		  ОтключитьОбработчикОжидания("СменаИнтерфейсаОгр"); 
        конецесли;
конецпроцедуры


Процедура ПриНачалеРаботыСистемы()

	ДатаПоследнегоОбновленияУРИБ = ПолучитьДатуОбмена();
	Если Константы.ДополнениеЗаголовкаСистемы.Получить() = "Яршинторг" Тогда  //прекратился обмен по УРИБ
		врДополнениеЗаголовка = Константы.ДополнениеЗаголовкаСистемы.Получить();
	Иначе
		врДополнениеЗаголовка = (Константы.ДополнениеЗаголовкаСистемы.Получить() + "; Дата последнего обмена УРИБ: " + ДатаПоследнегоОбновленияУРИБ);
	КонецЕсли;	
	
	ОпределитьТекущегоПользователя();
	
	Если глТекущийПользователь <> Неопределено
		 И глТекущийПользователь <> Справочники.Пользователи.ПустаяСсылка() Тогда
	
		Если глТекущийПользователь.Заблокирован Тогда
			
			Предупреждение("Пользователь " + Строка(глТекущийПользователь) + " заблокирован!" + Символы.ПС + 
						   "Работа системы будет остановлена!", 5,
						   "Блокировка запуска");
			ЗавершитьРаботуСистемы(Ложь);
			
			Возврат;
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если Не ПустаяСтрока(врДополнениеЗаголовка) Тогда
		УстановитьЗаголовокСистемы(Метаданные.Синоним +" - " + врДополнениеЗаголовка +", " + СокрЛП(глТекущийПользователь.Код) );  //+++ отражение краткого имени пользователя в заголовке программы
	КонецЕсли; 
    	
	//
	врТекПольз = ИмяПользователя();
	врНомерСоединенияИнформационнойБазы = НомерСоединенияИнформационнойБазы();
	Если Не ПустаяСтрока(врТекПольз)
		И ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьОдновременноНеБольшеОдногоСеанса") Тогда
	
		врСоединенияИнформационнойБазы = ПолучитьСоединенияИнформационнойБазы();
		врНайден = Ложь;
		Для Каждого й Из врСоединенияИнформационнойБазы Цикл
			
			Если й.ИмяПриложения = "1CV8"
				И й.Пользователь.Имя = врТекПольз
				И й.НомерСоединения <> врНомерСоединенияИнформационнойБазы Тогда
				ЗавершитьРаботуСистемы(Ложь);
				Возврат;
			КонецЕсли; 
			
		КонецЦикла;
	
	КонецЕсли; 
	
	УстановитьПараметрыСеанса(глТекущийПользователь);
	
	
	УстановитьГраницыЗапрета();
	
	
	УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	
	
	// Почему то тут стоят. 
	ПараметрыСеанса.ИдетОбменРаспределеннойБазы = Ложь; 
	ПараметрыСеанса.ИдетОбменФизЛицКонтрагентов = Ложь; 
	
	// выполнить обмен при запуске программы
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УРИБВыполнятьОбменПриЗапускеПрограммы") Тогда
		Если Найти(ПараметрЗапуска, "ShowStatusMessage=1") Тогда
			урибДействиеВыполнитьОбменДанными();
		Иначе		
			урибВыполнитьОбменДанными();
		КонецЕсли; 
	КонецЕсли;
	

	//+++
	//КонтрольРежимаЗавершенияРаботыПользователей();
	ПодключитьОбработчикОжидания("КонтрольРежимаЗавершенияРаботыПользователей", 60);  //оповещение = 1 мин. 
	
//	СформироватьОтчеты();


	// подключить периодический автообмен
	УРИБПроверитьПодключениеАвтообмена(); 
	
	УРИБПроверитьПодключениеПредупрежденияСтатусаОбмена(); 
	УРИБОбработчикПредупредитьОСтатусеОбмена();
	
	ПроверитьПодключениеОбработчикаОжидания(Истина);
	

	// Проверка заполнения констант валют учетов
	Если ЗначениеНеЗаполнено(Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
		СообщитьОбОшибке("Не заполнена константа валюты регламентированного учета!");
	КонецЕсли;
	Если ЗначениеНеЗаполнено(Константы.ВалютаУправленческогоУчета.Получить()) Тогда
		СообщитьОбОшибке("Не заполнена константа валюты управленческого учета!");

	КонецЕсли;

	глОбработкаАвтоПолученияОтправкиЭлектронныхПисем = Обработки.АвтоПолучениеОтправкаЭлектронныхПисем.ПолучитьФорму();

	ОпределитьНеобходимостьПерестановкиГраницыИтогов();

	//Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "АвтооткрытиеЭлектроннойПочтыПриЗапускеПрограммы") = Истина
	//   И Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
	//	Обработки.Почта.ПолучитьФорму().Открыть();
	//КонецЕсли; 

	// Проверка наличия комплекта обновления конфигурации
	//ПроверятьПриЗапуске = ВосстановитьЗначение("ПроверкаНаличияОбновленияПроверятьПриЗапуске");
	//ПроверятьПриЗапуске = ?(ТипЗнч(ПроверятьПриЗапуске) = Тип("Неопределено"), Ложь, ПроверятьПриЗапуске);

	//Если ПроверятьПриЗапуске Тогда

	//	Обозреватель = Обработки.Обозреватель.Создать();
	//	Форма        = Обозреватель.ПолучитьФорму("ПроверкаНаличияОбновления");

	//	Если Обозреватель.Проверить(Форма.ЭлементыФормы) Тогда

	//		ПоказПриПоявленииНовойВерсии = ВосстановитьЗначение("ПроверкаНаличияОбновленияПоказПриПоявленииНовойВерсии");
	//		ПоказПриПоявленииНовойВерсии = ?(ТипЗнч(ПоказПриПоявленииНовойВерсии)=Тип("Неопределено"),Ложь,ПоказПриПоявленииНовойВерсии);

	//		ВерсияДистрибутива = ВосстановитьЗначение("ПроверкаНаличияОбновленияПоследняяВерсия");

	//		Если ПоказПриПоявленииНовойВерсии Тогда

	//			Если ВерсияДистрибутива <> Форма.ЭлементыФормы.ВерсияДистрибутива.Значение Тогда
	//				Форма.Открыть();
	//			КонецЕсли;

	//		Иначе
	//			Форма.Открыть();
	//		КонецЕсли;

	//	КонецЕсли;

	//КонецЕсли;
  //+++ 01.02.2012  - нужно для авто-подключения сканера ШтрихКода
	попытка
		ПодключитьТорговоеОборудование();
	исключение
	КонецПопытки;		

	ВключенИнтерфейсКассира = Ложь;
	ЗапускИнтерфейсаКассира(глТекущийПользователь, глТорговоеОборудование, ВключенИнтерфейсКассира);

	//// Если интерфейс кассира включен - панель не нужна.
	//Если НЕ ВключенИнтерфейсКассира Тогда
	//	ОткрытьПанельФункций = ВосстановитьЗначение("ПанельФункций.ОткрыватьПриЗапуске");
	//	Если ТипЗнч(ОткрытьПанельФункций) <> Тип("Булево") Тогда
	//		ОткрытьПанельФункций = Истина;
	//	КонецЕсли;

	//	Если ОткрытьПанельФункций Тогда
	//		Обработки.ПанельФункций.ПолучитьФорму().Открыть();
	//	КонецЕсли;
	//КонецЕсли;
	
	Если СокрЛП(глТекущийПользователь.Код)    = "Малышев" 
		или СокрЛП(глТекущийПользователь.Код) = "Паращенко" //06.10.15 Смирнов "Интерфейс как у меня (c) И.И."
		или СокрЛП(глТекущийПользователь.Код) = "Огородников"   //26.02.2016
		Тогда
		Обработки.ПанельФункций.ПолучитьФорму("УправленческаяФорма").Открыть();
	КонецЕсли;

	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "АвтооткрытиеФормыРабочегоМестаМенеджераПоПродажамПриЗапускеПрограммы") = Истина Тогда
		                             
		Обработки.РабочееМестоМенеджераПоПродажам.ПолучитьФорму().Открыть();

		//+++ 01.12.2015 - ИНФО для ВСЕХ пользователей, общее описание систем и новые изменения в программе...
		формаОбновлений = Обработки.ОбновлениеИнформационнойБазы.Создать().ПолучитьФорму("ОписаниеОбновлений");
	    формаОбновлений.Открыть(); // при открытии формируется макет!

//--------------Корпоративный портал в 1С?! -----------------------------------		
		//форма2 = обработки.Обозреватель.Создать().ПолучитьФорму("Форма");
		//форма2.СтартоваяСтраница = "cp.yarshintorg.ru";
		//форма2.Открыть();
	
	КонецЕсли;
	
	//план для отдела дисков
	Если ГлТекущийПользователь.НаправлениеПродаж = Справочники.НаправленияПродаж.Диски 
		или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "АвтооткрытиеПланаПродажДисков") тогда
			Отчеты.ПланДиски.ПолучитьФорму().Открыть();
	конецЕсли;
    //напоминания для фин. отдела по оплате кредитов
	Если ГлТекущийПользователь.ОсновноеПодразделение= Справочники.Подразделения.НайтиПоКоду("00007") тогда
		Если (День(ТекущаяДата())=23 и ДеньНедели(ТекущаяДата())= 5 ) или
			(День(ТекущаяДата())=24 и ДеньНедели(ТекущаяДата())= 5 ) или
			День(ТекущаяДата())=25 Тогда
			ДатаНач = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),1));
			ДатаКон = КонецМесяца(ДобавитьМесяц(ТекущаяДата(),1));
		иначе
			ДатаНач = НачалоДня(ТекущаяДата())+10*24*60*60;
			ДатаКон = НачалоДня(ТекущаяДата())+12*24*60*60;
		конецЕсли;	  
		текст = ПроверитьПлатежиПоКредитам(ДатаНач,ДатаКон);	 
		Если текст<> "Внимание! нужно оплатить кредиты:"+символы.ПС тогда
		Сообщить(Текст);
		Предупреждение(Текст);
		конецЕсли;
	конецЕсли;
	//Попытка 
	//	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РаботникШиномонтажа") = Истина Тогда
	//		Обработки.ПродажиШиномантаж.ПолучитьФорму().Открыть();
	//	КонецЕсли;
	//Исключение
	//	;
	//Конецпопытки;
	
	//ИнтервалОбмена = ВосстановитьЗначение("ИнтервалОбмена");
	
	//ФормаРазнесенияДС=Обработки.КонтрольРазнесенияДС.ПолучитьФорму();
	//ФормаРазнесенияДС.Открыть();
	//ФормаРазнесенияДС.Сформировать();

	
	глИнтервалОбмена = 900;

	
	//Если ИнтервалОбмена = Неопределено Тогда
	//	
	//	// Устанавливаем интервал обмена равным 10 секундам
	//	СохранитьЗначение("ИнтервалОбмена", глИнтервалОбмена );
	//	
	//КонецЕсли;	
	
	// Устанавливаем автообмен
	глУстановитьАвтоОбмен();
	
	Попытка 
		Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОткрыватьОбработкиПоСписку") = Истина Тогда
			ОткрытьНужныеОбработки();
		КонецЕсли;
	Исключение
	    Сообщить("Не удалось запустить внешние обработки. Проверьте все параметры справочника ""Внешние обработки"".",СтатусСообщения.Важное);
	Конецпопытки;

   //+++ 01.02.2012  - нужно для авто-подключения сканера ШтрихКода
	//попытка
	//	ПодключитьТорговоеОборудование();
	//исключение
	//КонецПопытки;	
	
	//+++ задачи из УТ 10.3 - Открытие списка задач
	ПоказыватьСписокЗадач = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПоказыватьСписокЗадачПриЗапуске");
	Если ПоказыватьСписокЗадач Тогда
		ОткрытьЗадачиТекущегоПользователя(); //РаботаСДиалогами.
	КонецЕсли;

	//+asm 09.01.2014 отображать журнал звонков, пока из внешних обработок, как устаканится-из обработок
	//ПоказыватьЗвонки = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПоказыватьЗвонки");
	//Если ПоказыватьЗвонки Тогда
	//	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Звонки81"); 
	//	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	//	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	//	ДвоичныеДанные.Записать(ИмяФайла); 
	//	Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
	//		Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла); 
	//	Иначе 
	//		Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла); 
	//	КонецЕсли; 
	//	Форма.Открыть(); 
	//	УдалитьФайлы(ИмяФайла);
	//КонецЕсли;
	//
	//Если РольДоступна("ДополнительныеПраваВЭД") Тогда
	//	Форма =  ПолучитьФорму("ОбщаяФорма.РабочийСтол");
	//	Форма.открыть();	
	//КонецЕсли;
	
	//Мронычев
	Если ДеньНедели(ТекущаяДата()) = 2 тогда
		Если глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Бондаренко Е.Д. (снабжение)") 
			или глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Филатова С.В.") 		
			или глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Марешева И.Г.") 
			или глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Лигута А.С.(руководитель)") 
			или глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Лигута А.С.")  
			или глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Серков") 
			или глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Красюк Н.В.(руководитель)") 
			или глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Красюк Н.В.") Тогда
			ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("ПДЗ и пени"); 
			ИмяФайла = ПолучитьИмяВременногоФайла(); 
			ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
			ДвоичныеДанные.Записать(ИмяФайла); 
			Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла);
			Форма.ОтчетОбъект.ВариантОтчета = 1;
			Форма.Открыть(); 
			Форма.СформироватьОтчет();
		КонецЕсли;
	КонецЕсли;

	//запустим обработчик ожидания включения настройки
//	ГлавныйИнтерфейс.Общий.Видимость = Истина;
	СменаИнтерфейсаОгр();
	подключитьОбработчикОжидания("СменаИнтерфейсаОгр",10);

    ПоказатьЗаказыПоЛимитуНаОтгрузке(глТекущийПользователь, Истина); //+++ 16.10.2017 сразу при открытии - чтобы поверх всех пред.окон
	
КонецПроцедуры // ПриНачалеРаботыСистемы()

// Описание процедры.
//
// Параметры:
//  Нет.
//
Процедура ОбработатьПараметрЗапуска()
	
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат;
		
	ИначеЕсли ПараметрЗапуска = "ВыполнитьОбновлениеИнформационнойБазы" Тогда
		ЗаписьЖурналаРегистрации("ОбработкаПараметраЗапуска", УровеньЖурналаРегистрации.Информация, , , ПараметрЗапуска);
		
		ВыполнитьОбновлениеИнформационнойБазы();
		
		ЗавершитьРаботуСистемы(Истина);
		
	ИначеЕсли ПараметрЗапуска = "РазрешитьРаботуПользователей" Тогда
		ЗаписьЖурналаРегистрации("ОбработкаПараметраЗапуска", УровеньЖурналаРегистрации.Информация, , , ПараметрЗапуска);
		
		РазрешитьРаботу = Перечисления.РежимыЗавершенияРаботыПользователей.РазрешитьРаботу;
		
		Если Константы.РежимЗавершенияРаботыПользователей.Получить() <> РазрешитьРаботу Тогда
			Константы.РежимЗавершенияРаботыПользователей.Установить(РазрешитьРаботу);
		КонецЕсли;
		
		ЗавершитьРаботуСистемы(Ложь);
		
	ИначеЕсли ПараметрЗапуска = "ЗавершитьРаботуПользователей" Тогда
		ЗаписьЖурналаРегистрации("ОбработкаПараметраЗапуска", УровеньЖурналаРегистрации.Информация, , , ПараметрЗапуска);
		
		ЗавершитьБезусловно = Перечисления.РежимыЗавершенияРаботыПользователей.ЗавершитьБезусловно;
		
		Если Константы.РежимЗавершенияРаботыПользователей.Получить() <> ЗавершитьБезусловно Тогда
			Константы.РежимЗавершенияРаботыПользователей.Установить(ЗавершитьБезусловно);
		КонецЕсли;
		
		ЗавершитьРаботуПользователей();
		ПодключитьОбработчикОжидания("ЗавершитьРаботуПользователей", 60); //+++ 08.12.2011
		
	Иначе
		Сообщить("Указан неверный параметр запуска: " + ПараметрЗапуска, СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	Если глЗапрашиватьПодтверждениеПриЗакрытии <> Ложь Тогда
		ЗапрашиватьПотверждение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,
	    													  "ЗапрашиватьПодтверждениеПриЗакрытии");
		Если ЗапрашиватьПотверждение Тогда
			Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
			Отказ = (Ответ = КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Описание процедры.
//
// Параметры:
//  Нет.
//
Процедура ЗавершитьРаботуПользователей() Экспорт

	Попытка
		Если РольДоступна("ПолныеПрава") и РольДоступна("ПравоЗавершенияРаботыПользователей") Тогда
		УстановитьМонопольныйРежим(Истина);//для последнего...
		Предупреждение("Монопольный доступ - успешно установлен!
					   |в "+Формат(ТекущаяДата(),"ДФ=HH:mm:ss"));
		ОтключитьОбработчикОжидания("ЗавершитьРаботуПользователей");
		иначе
			ЗавершитьРаботуСистемы(Истина);
		КонецЕсли;
	
	Исключение
		ЗавершитьРаботуСистемы(Истина);
	КонецПопытки;
	
	
	
	Если ТекущаяСтадияЗавершенияРаботыСистемы = 13 Тогда
		ОтключитьОбработчикОжидания("ЗавершитьРаботуПользователей");
		РазрешитьРаботу = Перечисления.РежимыЗавершенияРаботыПользователей.РазрешитьРаботу;
		Константы.РежимЗавершенияРаботыПользователей.Установить(РазрешитьРаботу);
		Сообщить("Работа пользователей - разрешена!", СтатусСообщения.Внимание);
	КонецЕсли;
	
	ТекущаяСтадияЗавершенияРаботыСистемы = ТекущаяСтадияЗавершенияРаботыСистемы + 1;
	
КонецПроцедуры


//+++ 27.07.2011 ===============================================
Процедура КонтрольРежимаЗавершенияРаботыПользователей() Экспорт

	Флаг = 0;
	Границы = РегистрыСведений.ГраницыЗапретаИзмененияДанных.Выбрать();
	Пока Границы.Следующий() Цикл
		
		Если Границы.ГраницаЗапретаИзменений <> ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить() Тогда
			Флаг = 1;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	Если Флаг = 1 Тогда
		УстановитьПараметрГраницыЗапретаИзмененияДанных();
	КонецЕсли;

	                             
	ТекущийРежим     = Константы.РежимЗавершенияРаботыПользователей.Получить();
	РежимыЗавершения = Перечисления.РежимыЗавершенияРаботыПользователей;
	
	
//Если ПравоДоступа("Изменение", Метаданные.Константы.РежимЗавершенияРаботыПользователей) Тогда
	Если ТекущийРежим <> РежимыЗавершения.РазрешитьРаботу Тогда
			
		Если  РольДоступна("ПравоЗавершенияРаботыПользователей") Тогда
			Если ЗначениеНеЗаполнено(ТекущийРежим) Тогда
				Сообщить(Строка(ТекущаяДата())+" - Режим завершения работы пользователей не определен.", СтатусСообщения.Внимание);
			Иначе
				Сообщить(Строка(ТекущаяСтадияЗавершенияРаботыСистемы)+" - "+Формат(ТекущаяДата(),"ДФ=HH:mm:ss")+" - Установлен режим завершения работы пользователей """ + ТекущийРежим + """.", СтатусСообщения.Внимание);
			КонецЕсли; 
		КонецЕсли;
		
		//	ПрекратитьРаботуСистемы();// выкидываем принудительно!
		//--------------------------------------------------------------------
		Если ТекущийРежим = РежимыЗавершения.ЗавершитьБезусловно 
		или  ТекущийРежим = РежимыЗавершения.ЗавершитьССохранениемДанныхПользователя 
		или  ТекущийРежим = РежимыЗавершения.ЗавершитьПослеОжиданияПодтвержденияПользователя //+++ на все режимы завершения - 3 минуты!!!
		или  ТекущийРежим = РежимыЗавершения.ЗавершитьПриНаличииПодтвержденияПользователя Тогда
		
		   Если ТекущаяСтадияЗавершенияРаботыСистемы <3 Тогда //0,1,2 - 3 раза спрашиваем
				ТекущаяСтадияЗавершенияРаботыСистемы = (ТекущаяСтадияЗавершенияРаботыСистемы + 1);// дает 3 минуты на изменение статуса
				t = 3-ТекущаяСтадияЗавершенияРаботыСистемы;
				ТекстПредупреждения = " Работа в текущей базе 1С - будет Заблокирована 
									   |         через  "+Строка(t)+" минут"+?(t=1,"у","ы")+"!!!
									   |
									   |Сохраните все открытые сейчас документы...
								       |Все несохраненные данные - будут потеряны!";
				
				Предупреждение(ТекстПредупреждения, 30, "Блокировка работы в базе 1С");
				
				ЗавершитьРаботуСистемы(Истина);  //0,1,2 - 3 раза спрашиваем о сохранении!  ТекущаяСтадияЗавершенияРаботыСистемы++
				Возврат;
				
			Иначе //ТекущаяСтадияЗавершенияРаботыСистемы=3 и более
				
			Если  НЕ РОЛЬДОСТУПНА("ПравоЗавершенияРаботыПользователей") тогда //НЕ ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.ПравоЗавершенияРаботыПользователей) Тогда
		 		Предупреждение("Работа в текущей базе 1С - Заблокирована! 
							   |Ваш сеанс - завершен автоматически!", 10, "Завершение работы");
				ПрекратитьРаботуСистемы();// выкидываем принудительно!
				Возврат;
			иначе
				Предупреждение("Вход в текущую базу 1С - Заблокирован!",10);
			КонецЕсли;
			
			КонецЕсли;
			
		Иначе   //работа разрешена!
			ТекущаяСтадияЗавершенияРаботыСистемы = 0;
		КонецЕсли;
		
		
//--------------------------------------------------------------------------------------------------------		
		Если ТекущийРежим = РежимыЗавершения.ЗавершитьПослеОжиданияПодтвержденияПользователя 
			или ТекущийРежим = РежимыЗавершения.ЗавершитьПриНаличииПодтвержденияПользователя тогда
			
			ВопросЗавершения = "Администратор системы 1С просит Вас
								|завершить работу в текущей базе 1С
								|c сохранением открытых документов...
			     				| Завершить работу сейчас?";
			
			Ответ = Вопрос(ВопросЗавершения, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да, "Завершение работы");
			
			Если Ответ <> КодВозвратаДиалога.Нет Тогда
				ЗавершитьРаботуСистемы(Истина);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	//иначе // разрешена работа
	//	Если  ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.ПравоЗавершенияРаботыПользователей) Тогда
	//		Если ЗначениеНеЗаполнено(ТекущийРежим) Тогда
	//			Сообщить(ТекущаяДата()+" Режим завершения работы пользователей не установлен.", СтатусСообщения.Внимание);
	//		//Иначе
	//		//	Сообщить("--- " +ТекущаяДата()+" --- Установлен режим работы пользователей """ + ТекущийРежим + """ ---", СтатусСообщения.Информация);
	//		КонецЕсли; 
	//	КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗавершенииРаботыСистемы()

	ОтключитьТорговоеОборудование();

КонецПроцедуры

// Процедура выполняет запуск отчетов, у которых установлен
// признак "Формировать при входе в систему"
//
Процедура СформироватьОтчеты()

	ВыбраннаяНастройка = ВосстановитьЗначение( "ОбработкаРапортРуководителю_Настройки");
	Если Не ВыбраннаяНастройка = Неопределено Тогда

		Параметры = Неопределено;
		Если ВыбраннаяНастройка.Свойство("_ДанныеФормы", Параметры) Тогда
			АвтоЗапуск = Неопределено;
			Параметры.Свойство("ФормироватьПриСтартеСистемы", АвтоЗапуск);
			Если Не АвтоЗапуск = Неопределено И АвтоЗапуск Тогда
				НовыйОтчет = Отчеты.РапортРуководителю.Создать();
				НовыйОтчетФорма = НовыйОтчет.ПолучитьФорму("ФормаГлавная");
				НовыйОтчетФорма.НачальноеЗначениеВыбора = Истина;
				НовыйОтчетФорма.Открыть();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Подключение торгового оборудования, подключенного к данному компьютеру
//
Процедура ПодключитьТорговоеОборудование() Экспорт
	Если глТорговоеОборудование = Неопределено Тогда
		глТорговоеОборудование = Обработки.ТорговоеОборудование.Создать();
	КонецЕсли;

	глТорговоеОборудование.ПодключитьОборудование();
КонецПроцедуры

// Отключение торгового оборудования, подключенного к данному компьютеру
//
Процедура ОтключитьТорговоеОборудование() Экспорт
	Если глТорговоеОборудование <> Неопределено Тогда
		глТорговоеОборудование.ОтключитьОборудование();
	КонецЕсли;
КонецПроцедуры

// Эта процедура отлавливает данные от сканера штрихкода и ККМ,
// когда не открыта ни одна из форм, использующих сканер и ККМ в своей работе.
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)
	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда
			глТорговоеОборудование.СканерПосылкаДанных(1);
		Иначе
			глТорговоеОборудование.ОбработкаСобытияККМ(Источник, Событие, Данные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура инициализирует глобальную переменную глТекущийПользователь.
// Переменная содержит ссылку на элемент справочника "Пользователи", 
// соответствующий текущему пользователю информационной базы.
//
// Параметры:
//  Нет.
//
Процедура ОпределитьТекущегоПользователя()

	Если ПустаяСтрока(ИмяПользователя()) Тогда
		ИмяПользователя           = "НеАвторизован";
		ПолноеИмяПользователя     = "Не авторизован";

	Иначе
		ИмяПользователя           = ИмяПользователя();

		Если ПустаяСтрока(ПолноеИмяПользователя()) Тогда
			ПолноеИмяПользователя = ИмяПользователя;
		Иначе
			ПолноеИмяПользователя = ПолноеИмяПользователя();
		КонецЕсли;
	КонецЕсли;

	глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);

	Если глТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
		ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();

		ОбъектПользователь.Код          = ИмяПользователя;
		ОбъектПользователь.Наименование = ПолноеИмяПользователя;

		ОбъектПользователь.Записать();

		УстановитьНастройкиПоУмолчанию(ОбъектПользователь.Ссылка);
		
		Сообщить("Пользователь зарегистрирован в справочнике пользователей.");
		глТекущийПользователь = ОбъектПользователь.Ссылка;
	КонецЕсли;

КонецПроцедуры // ОпределитьТекущегоПользователя()

Процедура УРИБПроверитьПодключениеАвтообмена() Экспорт

	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УРИБВыполнятьАвтообмен")
		И Константы.УРИБИнтервалАвтообменаС.Получить() > 0 Тогда 
		ПодключитьОбработчикОжидания("УРИБОбработчикВыполнитьАвтообмен", Константы.УРИБИнтервалАвтообменаС.Получить()); 
	Иначе 
		ОтключитьОбработчикОжидания("УРИБОбработчикВыполнитьАвтообмен"); 
	КонецЕсли; 

КонецПроцедуры

Процедура УРИБПроверитьПодключениеПредупрежденияСтатусаОбмена() Экспорт

	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УРИБПредупреждатьОСтатусеОбменаИзмененияКонфигурации") 
		ИЛИ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УРИБПредупреждатьОСтатусеОбменаОшибка") Тогда 
		ПодключитьОбработчикОжидания("УРИБОбработчикПредупредитьОСтатусеОбмена", 300); 
	Иначе 
		ОтключитьОбработчикОжидания("УРИБОбработчикПредупредитьОСтатусеОбмена"); 
	КонецЕсли; 

КонецПроцедуры

Процедура УРИБОбработчикВыполнитьАвтообмен() Экспорт
	
	врЧас = Час(ТекущаяДата());
	Если врЧас < Константы.УРИБЧасНачалаАвтообмена.Получить()
		ИЛИ врЧас > Константы.УРИБЧасОкончанияАвтообмена.Получить() Тогда
		Возврат;
	КонецЕсли; 
	
	ОтключитьОбработчикОжидания("УРИБОбработчикВыполнитьАвтообмен"); 
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УРИБВыполнятьАвтообмен") Тогда 
		Попытка 
			урибВыполнитьОбменДанными();
		Исключение
			Если Константы.УРИБИнтервалАвтообменаС.Получить() > 0 Тогда
				ПодключитьОбработчикОжидания("УРИБОбработчикВыполнитьАвтообмен", Константы.УРИБИнтервалАвтообменаС.Получить()); 
			КонецЕсли; 
			Возврат;
		КонецПопытки;
		Если Константы.УРИБИнтервалАвтообменаС.Получить() > 0 Тогда
			ПодключитьОбработчикОжидания("УРИБОбработчикВыполнитьАвтообмен", Константы.УРИБИнтервалАвтообменаС.Получить()); 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры
 
Процедура УРИБОбработчикПредупредитьОСтатусеОбмена() Экспорт
	
	врСтатусОбмена = Константы.УРИБСтатусОбмена.Получить();
	
	врТипСтатусаОбмена = "";
	
	врОписаниеСтатусаОбмена = урибПолучитьОписаниеСтатусаОбмена(врСтатусОбмена, врТипСтатусаОбмена);
	
	Если врТипСтатусаОбмена = "ИзменениеКонфигурации" Тогда
		
		Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УРИБПредупреждатьОСтатусеОбменаИзмененияКонфигурации") Тогда
			Предупреждение("Статус обмена данными: " + врОписаниеСтатусаОбмена, 240);
		КонецЕсли; 
		
	ИначеЕсли врТипСтатусаОбмена = "Ошибка" Тогда
		
		Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УРИБПредупреждатьОСтатусеОбменаОшибка") Тогда
			Предупреждение("Ошибка обмена данными: " + врОписаниеСтатусаОбмена, 240);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры
 
// Процедура проверяет и при необходимости подключает обработчик ожидания
// на запуск процедуры ПроверитьНапоминания()
//
// Параметры:
//  Нет.
//
Процедура ПроверитьПодключениеОбработчикаОжидания(ПроверятьДеньРождения = Ложь) Экспорт

	ИнтервалПроверкиНапоминанийВСекундах = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
	
	Если глТекущийПользователь <> Неопределено
		 И ТипЗнч(глТекущийПользователь) = Тип("СправочникСсылка.Пользователи")
		 И НЕ глТекущийПользователь.Пустая()
		 И ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ИспользоватьНапоминания")
		 И ИнтервалПроверкиНапоминанийВСекундах > 0 Тогда
		 
		ПодключитьОбработчикОжидания("ПроверитьНапоминания", ИнтервалПроверкиНапоминанийВСекундах);

		ПроверитьНапоминанияПользователя(глТекущийПользователь, ПроверятьДеньРождения);

	Иначе

		ОтключитьОбработчикОжидания("ПроверитьНапоминания");

	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет Напоминания
//
Процедура ПроверитьНапоминания() Экспорт

	ПроверитьНапоминанияПользователя(глТекущийПользователь);
	ПоказатьЗаказыПоЛимитуНаОтгрузке(глТекущийПользователь); //+++ 16.10.2017 см.нмже
	
КонецПроцедуры

//+++ 16.10.2017 
//- для каждого Менеджера = ПараметрыСеанса.ТекущийПользователь
// в разрезе Контрагентов и Договоров
//- показывает Дебиторку и Лимит,
// с учётом [v]Проверен и [v]В Маршрут 
//
процедура ПоказатьЗаказыПоЛимитуНаОтгрузке(Менеджер, Показать=ЛОЖЬ) 
	
	ИнтервалНапоминаний = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();  //900...    15 мин!
	Если не Показать и ИнтервалНапоминаний=0 тогда //как выключатель
		Возврат;
	КонецЕсли;
	
	//   ТЕСТ   !!!
	//Менеджер1 = справочники.Пользователи.НайтиПоКоду("Пефти Сергей");
	
	 Менеджер1 = Менеджер;
	Если не РольДоступна("МенеджерПоПродажам") //17.10.2017
		или РольДоступна("ПолныеПрава") тогда  // для полных прав (Бухгалтерия, руководители) - не надо
		возврат;
	КонецЕсли;
	
	ТекущаяДата1 = ОценкаПроизводительностиВызовСервераПолныеПрава.ДатаИВремяНаСервере();
	Время = ТекущаяДата1 - НачалоДня(ТекущаяДата1);
	
	Если НЕ ( Показать 
			  или ( (Время - 12*3600)>=0 И (Время - 12*3600)<=ИнтервалНапоминаний+60 ) //+1 мин. если что-то в этот момент проводилось...
			  или ( (Время - 15*3600)>=0 И (Время - 15*3600)<=ИнтервалНапоминаний+60 ) 
			) Тогда 
		Возврат;  //не сразу и время не пришло...
	КонецЕсли;		
	
	номерВнОбр = 443; //647;   443;	
	ИмяФайла = КаталогВременныхФайлов()+"ВнешнийОтчет"+строка(номерВнОбр)+".epf";
	
	файл = новый файл(ИмяФайла);
		обр = справочники.ВнешниеОбработки.НайтиПоКоду(номерВнОбр); 
		
		Если обр.ВТестировании тогда //17.10.2017 - персональный выключатель для обработки!
			возврат;
		КонецЕсли;	
		
		ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		
		Отчет1 = ВнешниеОтчеты.Создать(ИмяФайла);
		Форма = Отчет1.ПолучитьФорму("ФормаОтчета");
		
	 //Получаем схему из макета
СхемаКомпоновкиДанных = Отчет1.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

	Запрос = новый Запрос;
	Запрос.Текст = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос;  //запрос из макета по умолчанию!
		
	Запрос.Текст = Запрос.Текст + "
	|
	|ИМЕЮЩИЕ
	//1. проверка превышения лимита
	|	Максимум(Дог.Лимит) - Сумма(ЕСТЬNULL(ПросроченнаяДЗ.СуммаВзаиморасчетов, 0)) - Сумма( ЕСТЬNULL(Заказы.СуммаЗаказано,0) ) < 0
	
	//2. проверка ПДЗ более 7 дн.
	|	ИЛИ ( Сумма(ЕСТЬNULL(ПросроченнаяДЗ.СуммаПДЗ, 0)) > 0 
	|			И Максимум(ЕСТЬNULL(ПросроченнаяДЗ.ДнейПДЗ, 0)) > 7
	|			И Дог.Контрагент.РазрешитьГрузитьПриПДЗБолееСемиДней = ЛОЖЬ
	|	     )
	//3. проверка Даты действия договора (с исключениями!)
	|ИЛИ (  Дог.ДоговорКонтрагента.ДатаОкончанияДействия > ДАТАВРЕМЯ(1, 1, 1)
	|	    И Дог.ДоговорКонтрагента.ДатаОкончанияДействия<&ДатаСреза
	
//---------------------не проверяется в самом отчете!------------------------------------	
//предоплата* не проверяется срок!	
	|		И НЕ (Дог.ДоговорКонтрагента.ТипДоговора = &Предоплата И Дог.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") 
//не проверяются по списку типов!	
	|		И НЕ Дог.ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговоров)	
	|	  )
	
	//4. проверка запрета ввода заказов
    |ИЛИ Дог.Контрагент.ЗапретитьВводЗаказаПокупателя
	|ИЛИ Дог.Контрагент.ЗапретОтгрузки
	
	//5. исключение из проверки Тендерных заказов (по типу договора = ФА+) НЕТ никаких проверок!!
	
	//--- 6. проверка предоплаты по заказу... слоожно и без задачи пока не делаю...
	
	|";
	

	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата() );
	Запрос.УстановитьПараметр("Менеджер",  Менеджер1); 
	
	Запрос.УстановитьПараметр("Предоплата", Справочники.ТипыДоговоров.НайтиПоКоду("00001") );
	
	СписокТиповДоговоров = новый Массив;
	СписокТиповДоговоров.Добавить(справочники.ТипыДоговоров.ШинтрейдЯрославль);
	СписокТиповДоговоров.Добавить(справочники.ТипыДоговоров.ФормулаАвтоПлюс);
	СписокТиповДоговоров.Добавить(справочники.ТипыДоговоров.НайтиПоКоду("Я0004") );
	СписокТиповДоговоров.Добавить(справочники.ТипыДоговоров.НайтиПоКоду("00015") );
    Запрос.УстановитьПараметр("СписокТиповДоговоров", СписокТиповДоговоров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() тогда
		//Из схемы возьмем настройки по умолчанию
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;

		ПараметрСКД = Настройки.ПараметрыДанных.Элементы.Найти("Менеджер");
		ПараметрСКД.Значение  = Менеджер1; //Текущий!
		
		ПараметрСКД = Настройки.ПараметрыДанных.Элементы.Найти("ДатаСреза");
		ПараметрСКД.Значение  = НачалоДня(ТекущаяДата());
		
		ПараметрСКД = Настройки.ПараметрыДанных.Элементы.Найти("Предоплата");
		ПараметрСКД.Значение  = Справочники.ТипыДоговоров.НайтиПоКоду("00001");

		//Передаем в макет компоновки схему, настройки и данные расшифровки
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

		//Выполним компоновку с помощью процессора компоновки
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

		//Очищаем поле табличного документа
		ТабДокРезультат1 = Форма.ЭлементыФормы.Результат;
		ТабДокРезультат1.Очистить();

		//Выводим результат в табличный документ
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ТабДокРезультат1);

		ПроцессорВывода.ОтображатьПроцентВывода = истина;

		//----------по СКД-------------------------
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);   
		
		//показать форму отчета ПОСЛЕ ФОРМИРОВАНИЯ
		Форма.Менеджер = Менеджер1;
		Форма.ДатаСреза= ТекущаяДата();
		Форма.Открыть(); 

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеСправочникаВалют()

	//+++ЭлементРубли = Справочники.Валюты.НайтиПоКоду("810");
	ЭлементРубли = Справочники.Валюты.НайтиПоНаименованию("руб.");
	
	Если ЭлементРубли.Наличность.Количество() = 0 Тогда
	
		 СписокНаличности = Новый СписокЗначений;
		 СписокНаличности.Добавить(0.01, 	"1 коп.");
		 СписокНаличности.Добавить(0.05, 	"5 коп.");
		 СписокНаличности.Добавить(0.10, 	"10 коп.");
		 СписокНаличности.Добавить(0.50, 	"50 коп.");
		 СписокНаличности.Добавить(1.00, 	"1 руб.");
		 СписокНаличности.Добавить(2.00, 	"2 руб.");
		 СписокНаличности.Добавить(5.00, 	"5 руб.");
		 СписокНаличности.Добавить(10.00, 	"10 руб.");
		 СписокНаличности.Добавить(50.00, 	"50 руб.");
		 СписокНаличности.Добавить(100.00, 	"100 руб.");
		 СписокНаличности.Добавить(500.00, 	"500 руб.");
		 СписокНаличности.Добавить(1000.00, "1000 руб.");
		 
		 ОбъектРубли = ЭлементРубли.ПолучитьОбъект();
		 
		 Для каждого Сч Из СписокНаличности Цикл
		 
		 	НоваяСтрока = ОбъектРубли.Наличность.Добавить();
			НоваяСтрока.НаименованиеНоминала = Сч.Представление;
			НоваяСтрока.ЕдиницаПересчета = Сч.Значение;
			//НоваяСтрока.Записать();
		 
		 КонецЦикла; 

		ОбъектРубли.Записать();		 
		 
	
	КонецЕсли; 
	

КонецПроцедуры
 

// Процедура проверяет, есть ли необходимость выполнять обновление информационной базы.
// Если необходимо - выполняется обновление.
// Если обновление не удалось выполнить - предлагается завершить работу системы.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт

	// Проверка необходимости обновления информационной базы.
	Если НЕ ПустаяСтрока(Метаданные.Версия)
	   И Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
		Предупреждение("Изменился номер версии конфигурации. Будет выполнено обновление информационной базы.");
	Иначе
		Возврат;
	КонецЕсли;

	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ПравоДоступа("МонопольныйРежим", Метаданные) 
	 ИЛИ НЕ ПравоДоступа("Использование",    Метаданные.Обработки.ОбновлениеИнформационнойБазы) 
	 ИЛИ НЕ ПравоДоступа("Просмотр",         Метаданные.Обработки.ОбновлениеИнформационнойБазы) Тогда

		Предупреждение("Недостаточно прав для выполнения обновления. Работа системы будет завершена.");
		глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
		ЗавершитьРаботуСистемы();
		Возврат;
	КонецЕсли;

	// Установка монопольного режима для обновления информационной базы.
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Предупреждение("Не удалось установить монопольный режим. Работа системы будет завершена.");
		глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
		ЗавершитьРаботуСистемы();
		Возврат;
	КонецПопытки;

	// Обновление информационной базы.
	Обработки.ОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление();
	
	// Откючение монопольного режима.
	УстановитьМонопольныйРежим(Ложь);

	// Проверка выполнения обновления информационной базы.
	Если Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
		Сообщить("Обновление информационной базы не выполнено.", СтатусСообщения.Важное);
		Текст = "Не выполнено обновление информационной базы! Завершить работу системы?";
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );

		Если Ответ = КодВозвратаДиалога.Да Тогда
			глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
			ЗавершитьРаботуСистемы();
		КонецЕсли;
	Иначе
		Сообщить("Обновление информационной базы выполнено успешно.", СтатусСообщения.Информация);
	КонецЕсли;
	
	

КонецПроцедуры

// Открывает форму текущего пользователя для изменения его настроек.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуТекущегоПользователя() Экспорт

	Если ЗначениеНеЗаполнено(глТекущийПользователь) Тогда
		СообщитьОбОшибке("Не задан текущий пользователь.");
	Иначе
		Форма = глТекущийПользователь.ПолучитьФорму();
		Форма.ЭлементыФормы.Родитель.ТолькоПросмотр 	  = Истина;
		Форма.ЭлементыФормы.Код.ТолькоПросмотр 			  = Истина;
		Форма.ЭлементыФормы.Наименование.ТолькоПросмотр   = Истина;
		Форма.ЭлементыФормы.ФизическоеЛицо.ТолькоПросмотр = Истина;		
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуТекущегоПользователя()

//Процедура проверяет, есть ли необходимость пересчета регистров
Процедура ОпределитьНеобходимостьПерестановкиГраницыИтогов()

	Если Не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПриЗапускеСпрашиватьОПересчетеИтоговРегистров") Тогда
    	Возврат;
	КонецЕсли; 
	
	ДеньМесяцаНачалаНапоминания = 5;
	ДеньМесяцаБезусловногоПересчета = 10;

	ТекущийДеньМесяца = День(ТекущаяДата());	
	НадоПересчитывать = Истина;

	Если ТекущийДеньМесяца<ДеньМесяцаНачалаНапоминания Тогда
		НадоПересчитывать = Ложь;
	Иначе
		Если ТекущийДеньМесяца<ДеньМесяцаБезусловногоПересчета Тогда
			ЕстьПользователиВБазе = Ложь;
			Попытка
				УстановитьМонопольныйРежим(Истина);
			Исключение
				ЕстьПользователиВБазе = Истина;
			КонецПопытки;
			Если Не ЕстьПользователиВБазе Тогда
				УстановитьМонопольныйРежим(Ложь);
			КонецЕсли;
			НадоПересчитывать = Не ЕстьПользователиВБазе;
		Иначе
			НадоПересчитывать = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Не НадоПересчитывать Тогда
		Возврат;
	КонецЕсли;

	ПредпочтительнаяДатаРасчетаИтогов = НачалоМесяца(ТекущаяДата())-1;
	СписокРегистровКРассчету = Новый Массив;
	Для Каждого Регистр ИЗ РегистрыНакопления Цикл                               
		МетаданныеРегистра = Метаданные.НайтиПоТипу(Тип(Регистр));
		Если МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			Если Регистр.ПолучитьПериодРассчитанныхИтогов()<ПредпочтительнаяДатаРасчетаИтогов  Тогда
				Если ПравоДоступа("УправлениеИтогами", МетаданныеРегистра) Тогда
					СписокРегистровКРассчету.Добавить(МетаданныеРегистра.ПолноеИмя());
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;	
	Для Каждого Регистр ИЗ РегистрыБухгалтерии Цикл                               
		МетаданныеРегистра = Метаданные.НайтиПоТипу(Тип(Регистр));
		Если Регистр.ПолучитьПериодРассчитанныхИтогов()<ПредпочтительнаяДатаРасчетаИтогов  Тогда
			Если ПравоДоступа("УправлениеИтогами", МетаданныеРегистра) Тогда
				СписокРегистровКРассчету.Добавить(МетаданныеРегистра.ПолноеИмя());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если СписокРегистровКРассчету.Количество()=0 Тогда
		Возврат;
	КонецЕсли;

	Если Вопрос("Для повышения производительности рекомендуется выполнить"+Символы.ПС+
				"расчет итогов регистров по "+Формат(ПредпочтительнаяДатаРасчетаИтогов, "ДФ=дд.ММ.гггг" )+". Выполнить его сейчас?", 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
	КонецЕсли;
    СписокРассчитанных = ВыполнитьУстановкуПериодаИтогов(СписокРегистровКРассчету, ПредпочтительнаяДатаРасчетаИтогов);
	Для Каждого РегистрИзСписка ИЗ СписокРассчитанных Цикл
		Сообщить("Итоги регистра" + РегистрИзСписка + " были рассчитаны по: "+Формат(ПредпочтительнаяДатаРасчетаИтогов, "ДФ=дд.ММ.гггг" ));
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ ОБМЕНА
// 
// Процедура включения/отключения автообмена по сохраненным значениям
//
Процедура глУстановитьАвтоОбмен() Экспорт
	
	Если ВосстановитьЗначение("АвтоОбмен") = Истина Тогда
		
		// Подключаем обработчик ожидания, осуществляющий обмен данными
		//ПодключитьОбработчикОжидания("глАвтоОбмен", ВосстановитьЗначение("ИнтервалОбмена"));
		ПодключитьОбработчикОжидания("глАвтоОбмен", глИнтервалОбмена);
		
	Иначе
		
		// Отключаем обработчик ожидания, осуществляющий обмен данными
		ОтключитьОбработчикОжидания("глАвтоОбмен");
		
	КонецЕсли;
	
КонецПроцедуры	// глУстановитьАвтоОбмен()

// Процедура обработчик ожидания, осуществляющий обмен данными
//
Процедура глАвтоОбмен() Экспорт
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УРИБВыполнятьАвтоСинхронизациюНоменклатуры") Тогда
	   	Попытка
			ОбменНоменклатурой();
		Исключение
			;
		КонецПопытки
	КонецЕсли; 
	
КонецПроцедуры  // АвтоОбмен()

// Процедура обработчик, выполняющая обмен со складами
//
Процедура ВыполнитьОбменНоменклатурой() Экспорт
	
	ОбменНоменклатурой();
	
КонецПроцедуры	// ВыполнитьОбменНоменклатурой()

Процедура ОткрытьНужныеОбработки()
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Путь, ПутьКФайлуПараметров, ИмяФормы
	               |ИЗ Справочник.ВнешниеОбработкиДляЗапуска
	               |ГДЕ НЕ ПометкаУдаления
				   //08.10.2015 - сортировка запуска по названию обработки - Робот 1,2,...6!
	               |УПОРЯДОЧИТЬ ПО Наименование
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Выб = Запрос.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		Путь 						= Выб.Путь;
		ПутьКФайлуПараметров 		= Выб.ПутьКФайлуПараметров;
		ИмяФормы 					= Выб.Имяформы;
		
		ОбработкаОбъект 	= ВнешниеОбработки.Создать(СокрЛП(Путь));
		Форма 				= ОбработкаОбъект.ПолучитьФорму(СокрЛП(ИмяФормы));
		Форма.ПутьКФайлуПараметров 	= СокрЛП(ПутьКФайлуПараметров);  //обязательный? реквизит формы
		Форма.Открыть();
		
		Форма.Пуск();    //должна быть экспортная функция в форме
		
	КонецЦикла
	
КонецПроцедуры 

Процедура ОбменДействие() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Функция ПолучитьДатуОбмена()
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.РаспределеннаяИнформационнаяБаза.ЭтотУзел());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(РаспределеннаяИнформационнаяБаза.ДатаЧтенияПоследнегоСообщения) КАК ДатаЧтенияПоследнегоСообщения
	|ИЗ
	|	ПланОбмена.РаспределеннаяИнформационнаяБаза КАК РаспределеннаяИнформационнаяБаза
	|ГДЕ
	|	РаспределеннаяИнформационнаяБаза.Ссылка <> &ЭтотУзел";
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ДатаЧтения = Результат.ДатаЧтенияПоследнегоСообщения;
	КонецЦикла;
	Возврат ДатаЧтения;
КонецФункции

Процедура УправлениеЗакупками_ОграниченныйДействие() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура Интерфейс1Действие() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры


глСоответствиеТекстовЭлектронныхПисем = Новый Соответствие;

ТекущаяСтадияЗавершенияРаботыСистемы = 0;
АдресРесурсовОбозревателя = "TRADE"; // Не допускается изменять значение данной переменной