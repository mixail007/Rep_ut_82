
Функция CreateMovement(Goods, WarehouseFrom, WarehouseTo, GuidYST, Comment)
	URL = "www.franch.yst";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProducts"));
	Ошибка = "";
	Success = истина;
	NumberYST = "";
	GuidYST = "";
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("НоменклатураКод");
	ТаблицаЗаказа.Колонки.Добавить("НоменклатураСпр");
	ТаблицаЗаказа.Колонки.Добавить("Количество");

	СкладОтправитель = Справочники.Склады.НайтиПоКоду(СокрЛП(WarehouseFrom));
	СкладПолучатель = Справочники.Склады.НайтиПоКоду(СокрЛП(WarehouseTo));
	
	Если не ЗначениеЗаполнено(СкладОтправитель) тогда
			Ошибка = "Не найден склад отправитель с кодом: "+WarehouseFrom;
	        Success = ложь;
	КонецЕсли;
		
	Если не ЗначениеЗаполнено(СкладПолучатель) тогда
			Ошибка = Ошибка+ Символы.ПС + "Не найден склад получатель с кодом: "+WarehouseTo;
	        Success = ложь;
	КонецЕсли;

	Если Success тогда
	
		//Товары
		Для каждого товар из Goods.Product цикл
			СтрокаТЗ = ТаблицаЗаказа.Добавить();
			СтрокаТЗ.НоменклатураКод = товар.Code;
			СтрокаТЗ.Количество =  Число(товар.Quantity);
			СтрокаТЗ.НоменклатураСпр=Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.НоменклатураКод);
		КонецЦикла;
		
		Перемещение = ПолучитьПеремещение(GuidYST);
		//Перемещение  = Документы.ПеремещениеТоваров.СоздатьДокумент();
		Если Перемещение.ЭтоНовый() тогда
			Перемещение.Дата = ТекущаяДата();
		КонецЕсли;
		
		Перемещение.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		Перемещение.Организация = Справочники.Организации.НайтиПоКоду("00001");
		Перемещение.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
		Перемещение.ОтражатьВБухгалтерскомУчете = истина;
		Перемещение.ОтражатьВНалоговомУчете = истина;
		Перемещение.ОтражатьВУправленческомУчете = истина;
		Перемещение.Комментарий = Comment;
		Перемещение.СкладОтправитель = СкладОтправитель;
		Перемещение.СкладПолучатель = СкладПолучатель;
		
		Для каждого стр из ТаблицаЗаказа цикл
			нстр = Перемещение.Товары.Добавить();
			нстр.Номенклатура = стр.НоменклатураСпр;
			нстр.Количество = стр.Количество;
			нстр.Склад = СкладПолучатель;
			нстр.ЕдиницаИзмерения = нстр.Номенклатура.ЕдиницаХраненияОстатков;
			нстр.Коэффициент = нстр.ЕдиницаИзмерения.Коэффициент;
			нстр.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЦикла;
		
		Попытка 
			Перемещение.Записать(РежимЗаписиДокумента.Проведение);
			//Перемещение.Записать(РежимЗаписиДокумента.Запись);
			NumberYST = Перемещение.Номер;
			GuidYST = "" + Перемещение.Ссылка.УникальныйИдентификатор();
		Исключение
			Success = ложь;
			Ошибка = Ошибка + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	РезультатОперации.Success = Success;
	РезультатОперации.Error = Ошибка;
	РезультатОперации.NumberYST = NumberYST;
	РезультатОперации.GuidYST = GuidYST;
	
	Возврат РезультатОперации;
КонецФункции

Функция ПолучитьПеремещение(Guid)
	Если СокрЛП(Guid) <> "" тогда
		УИД = Новый УникальныйИдентификатор(СокрЛП(Guid));
		ПеремещениеСсылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(УИД);
		
		Если (НЕ ПеремещениеСсылка = Документы.ПеремещениеТоваров.ПустаяСсылка()) И (НЕ ПеремещениеСсылка = Неопределено) Тогда
			Возврат ПеремещениеСсылка.ПолучитьОбъект();
		Иначе
			Возврат Документы.ПеремещениеТоваров.СоздатьДокумент();
		КонецЕсли;
	КонецЕсли;
	Возврат Документы.ПеремещениеТоваров.СоздатьДокумент();
КонецФункции

Функция ПолучитьСкладПоГуид(Guid)
	 Если СокрЛП(Guid) <> "" тогда
		УИД = Новый УникальныйИдентификатор(СокрЛП(Guid));
		Склад = Справочники.Склады.ПолучитьСсылку(УИД);
		
		Если (НЕ Склад = Справочники.Склады.ПустаяСсылка()) И (НЕ Склад = Неопределено) Тогда
			Возврат Склад;
		Иначе
			Возврат Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.Склады.ПустаяСсылка();
КонецФункции

Функция GetAct(Partner, DateFrom, DateTo)
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(44);
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
		Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
	Иначе 
		Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
	КонецЕсли;
	
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(Partner);
	СписокДоговоров = ПолучитьДоговоры(Контрагент);
	
	ТабДок = Обработка.ПолучитьАкт(Контрагент, Справочники.Организации.НайтиПоКоду("00001"), Дата(DateFrom), КонецДня(Дата(DateTo)), ложь, ложь, СписокДоговоров);
	
	
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	
	возврат ДанныеФайла;
КонецФункции

Функция ПолучитьДоговоры(Контрагент)
	СписокДоговоров = Новый СписокЗначений;
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДоговорыКонтрагентов.Ссылка КАК Договор
	             |ИЗ
	             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	             |ГДЕ
	             |	ДоговорыКонтрагентов.Владелец = &Владелец";
				 Запрос.УстановитьПараметр("Владелец", Контрагент);
				 
				 Рез = Запрос.Выполнить().Выбрать();
				 Пока рез.Следующий() Цикл
					 СписокДоговоров.Добавить(Рез.Договор,Рез.Договор);
				 КонецЦикла;
				 
				 Возврат СписокДоговоров;
КонецФункции