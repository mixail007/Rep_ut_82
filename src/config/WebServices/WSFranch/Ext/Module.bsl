
Функция CreateMovement(Goods, WarehouseFrom, WarehouseTo, GuidYST, Comment)
	ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
	URL = "www.franch.yst";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProducts"));
	Ошибка = "";
	Success = истина;
	NumberYST = "";
	//GuidYST = "";
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("НоменклатураКод");
	ТаблицаЗаказа.Колонки.Добавить("НоменклатураСпр");
	ТаблицаЗаказа.Колонки.Добавить("Количество");

	СкладОтправитель = Справочники.Склады.НайтиПоКоду(СокрЛП(WarehouseFrom));
	СкладПолучатель = Справочники.Склады.НайтиПоКоду(СокрЛП(WarehouseTo));
	
	Если не ЗначениеЗаполнено(СкладОтправитель) тогда
			Ошибка = "Не найден склад отправитель с кодом: "+WarehouseFrom;
	        Success = ложь;
	КонецЕсли;
		
	Если не ЗначениеЗаполнено(СкладПолучатель) тогда
			Ошибка = Ошибка+ Символы.ПС + "Не найден склад получатель с кодом: "+WarehouseTo;
	        Success = ложь;
	КонецЕсли;

	Если Success тогда
	
		//Товары
		Для каждого товар из Goods.Product цикл
			СтрокаТЗ = ТаблицаЗаказа.Добавить();
			СтрокаТЗ.НоменклатураКод = товар.Code;
			СтрокаТЗ.Количество =  Число(товар.Quantity);
			СтрокаТЗ.НоменклатураСпр=Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.НоменклатураКод);
		КонецЦикла;
		
		Перемещение = ПолучитьПеремещение(GuidYST);
		//Перемещение  = Документы.ПеремещениеТоваров.СоздатьДокумент();
		Если Перемещение.ЭтоНовый() тогда
			Перемещение.Дата = ТекущаяДата();
		КонецЕсли;
		
		Перемещение.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		Перемещение.Организация = Справочники.Организации.НайтиПоКоду("00001");
		Перемещение.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
		Перемещение.ОтражатьВБухгалтерскомУчете = истина;
		Перемещение.ОтражатьВНалоговомУчете = истина;
		Перемещение.ОтражатьВУправленческомУчете = истина;
		Перемещение.Комментарий = Comment;
		Перемещение.СкладОтправитель = СкладОтправитель;
		Перемещение.СкладПолучатель = СкладПолучатель;
		
		Перемещение.Товары.Очистить();
		
		Для каждого стр из ТаблицаЗаказа цикл
			нстр = Перемещение.Товары.Добавить();
			нстр.Номенклатура = стр.НоменклатураСпр;
			нстр.Количество = стр.Количество;
			нстр.Склад = СкладПолучатель;
			нстр.ЕдиницаИзмерения = нстр.Номенклатура.ЕдиницаХраненияОстатков;
			нстр.Коэффициент = нстр.ЕдиницаИзмерения.Коэффициент;
			нстр.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЦикла;
		
		Попытка 
			Перемещение.Записать(РежимЗаписиДокумента.Проведение);
			//Перемещение.Записать(РежимЗаписиДокумента.Запись);
			NumberYST = Перемещение.Номер;
			GuidYST = "" + Перемещение.Ссылка.УникальныйИдентификатор();
		Исключение
			Success = ложь;
			Ошибка = Ошибка + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	РезультатОперации.Success = Success;
	РезультатОперации.Error = Ошибка;
	РезультатОперации.NumberYST = NumberYST;
	РезультатОперации.GuidYST = GuidYST;
	
	Возврат РезультатОперации;
КонецФункции

Функция ПолучитьПеремещение(Guid)
	Если СокрЛП(Guid) <> "" тогда
		УИД = Новый УникальныйИдентификатор(СокрЛП(Guid));
		ПеремещениеСсылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(УИД);
		
		Если (НЕ ПеремещениеСсылка = Документы.ПеремещениеТоваров.ПустаяСсылка()) И (НЕ ПеремещениеСсылка = Неопределено) Тогда
			Возврат ПеремещениеСсылка.ПолучитьОбъект();
		Иначе
			Возврат Документы.ПеремещениеТоваров.СоздатьДокумент();
		КонецЕсли;
	КонецЕсли;
	Возврат Документы.ПеремещениеТоваров.СоздатьДокумент();
КонецФункции

Функция ПолучитьРеализацию(Guid)
	Если СокрЛП(Guid) <> "" тогда
		УИД = Новый УникальныйИдентификатор(СокрЛП(Guid));
		РеализацияСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД);
		
		Если (НЕ РеализацияСсылка = Документы.РеализацияТоваровУслуг.ПустаяСсылка()) И (НЕ РеализацияСсылка = Неопределено) Тогда
			Возврат РеализацияСсылка.ПолучитьОбъект();
		Иначе
			Возврат Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		КонецЕсли;
	КонецЕсли;
	Возврат Документы.РеализацияТоваровУслуг.СоздатьДокумент();
КонецФункции

Функция ПолучитьОтчетПоОТХ(Guid)
	Если СокрЛП(Guid) <> "" тогда
		УИД = Новый УникальныйИдентификатор(СокрЛП(Guid));
		ОтчетПоОТХСсылка = Документы.ОтчетПоОТХ.ПолучитьСсылку(УИД);
		
		Если (НЕ ОтчетПоОТХСсылка = Документы.ОтчетПоОТХ.ПустаяСсылка()) И (НЕ ОтчетПоОТХСсылка = Неопределено) Тогда
			Возврат ОтчетПоОТХСсылка.ПолучитьОбъект();
		Иначе
			Возврат Документы.ОтчетПоОТХ.СоздатьДокумент();
		КонецЕсли;
	КонецЕсли;
	Возврат Документы.ОтчетПоОТХ.СоздатьДокумент();
КонецФункции

Функция ПолучитьСкладПоГуид(Guid)
	 Если СокрЛП(Guid) <> "" тогда
		УИД = Новый УникальныйИдентификатор(СокрЛП(Guid));
		Склад = Справочники.Склады.ПолучитьСсылку(УИД);
		
		Если (НЕ Склад = Справочники.Склады.ПустаяСсылка()) И (НЕ Склад = Неопределено) Тогда
			Возврат Склад;
		Иначе
			Возврат Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.Склады.ПустаяСсылка();
КонецФункции

Функция GetAct(Partner, DateFrom, DateTo)
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(44);
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
		Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
	Иначе 
		Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
	КонецЕсли;
	
	ТабДок = новый ТабличныйДокумент;
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(Partner);
	СписокДоговоров = ПолучитьДоговоры(Контрагент);
	Если ЗначениеЗаполнено(Контрагент) и СписокДоговоров.Количество()>0 тогда
		ТабДок = Обработка.ПолучитьАкт(Контрагент, Справочники.Организации.НайтиПоКоду("00001"), Дата(DateFrom), КонецДня(Дата(DateTo)), ложь, ложь, СписокДоговоров);
	КонецЕсли;
	
	
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	
	возврат ДанныеФайла;
КонецФункции

Функция ПолучитьДоговоры(Контрагент)
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	             |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов как ВалютаВзаиморасчетов
	             |ИЗ
	             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	             |ГДЕ
	             |	ДоговорыКонтрагентов.Владелец = &Владелец
	             |	И НЕ ДоговорыКонтрагентов.Наименование ПОДОБНО ""%*%""";
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция CreateSalesDocs(PointId, Partner, Goods, Receipts, GuidYST, IsKTOrder, DateFrom, DateTo)
	ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
	Если СокрЛП(DateFrom)<>"" тогда
		РезультатОперации = СформироватьРеализации(PointId,Partner, Goods, Receipts, GuidYST, IsKTOrder, DateFrom, DateTo); //Схема - Заказ - Реализация - Возврат - реализация
	Иначе
		РезультатОперации = СформироватьРеализацииПоСхемеПеремещений(PointId, Partner, Goods, Receipts, GuidYST, IsKTOrder); //старая схема Заказ - перемещение - реализация
	КонецЕсли;
	
	Возврат РезультатОперации;	

КонецФункции

Функция СформироватьРеализации(PointId, Partner, Goods, Receipts, GuidYST, IsKTOrder, DateFrom, DateTo, Agent = неопределено)
	ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
	URL = "www.franch.yst";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	ТипXDTOТовары = ФабрикаXDTO.Тип(URL, "ArrayOfProducts");
	Товары = ФабрикаXDTO.Создать(ТипXDTOТовары);
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	
	Ошибка    = "";
	Success   = Истина;
	OrderNumber = "";
	OrderGUID = "";
	
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(Partner);
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Success = Ложь;
		Ошибка = "Не удалось найти контрагента";
	КонецЕсли;
	
	Если Agent <> неопределено тогда
		Агент = Справочники.Контрагенты.НайтиПоКоду(Agent);
		Если Агент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			Success = Ложь;
			Ошибка = "Не удалось найти агента";
		КонецЕсли;
	КонецЕсли;
	
	Если Контрагент.ЗапретитьВводЗаказаПокупателя или Контрагент.ЗапретОтгрузки Тогда
		Success = Ложь;
		Ошибка = "По контрагенту запрещено создавать заказы!";
	КонецЕсли;
	
	Если Agent <> неопределено тогда
		Если Агент.ЗапретитьВводЗаказаПокупателя или Агент.ЗапретОтгрузки Тогда
			Success = Ложь;
			Ошибка = "По агенту запрещено создавать заказы!";
		КонецЕсли;
	КонецЕсли;
	
	ОтчетПоОТХ = ПолучитьОтчетПоОТХ(GuidYST);
	Если ОтчетПоОТХ.ДокументыСформированы тогда
		Success = Ложь;
		Ошибка = "По данному отчету ОТХ уже сформированы документы!";
	КонецЕсли;
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200)));
	ТаблицаЗаказа.Колонки.Добавить("НоменклатураСпр",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗаказа.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТаблицаЗаказа.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
	
	Для каждого Запись из Goods.Product цикл	
		СтрокаТЗ = ТаблицаЗаказа.Добавить();
		СтрокаТЗ.Номенклатура = Запись.Code;
		СтрокаТЗ.Количество = Число(Запись.Quantity);
		//СтрокаТЗ.НоменклатураСпр=Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
		СтрокаТЗ.Цена =  Число(Запись.Price);	
	КонецЦикла;
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	тзТаб.Номенклатура,
	             |	тзТаб.Количество,
	             |	тзТаб.Цена
	             |ПОМЕСТИТЬ втТаб
	             |ИЗ
	             |	&тзТаб КАК тзТаб
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втТаб.Номенклатура,
	             |	втТаб.Количество,
	             |	втТаб.Цена,
	             |	ЕСТЬNULL(СпрНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураСпр,
	             |	СпрНоменклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	             |	СпрНоменклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	             |	СпрНоменклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмеренияМест,
	             |	СпрНоменклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоличествоМест
	             |ИЗ
	             |	втТаб КАК втТаб
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	             |		ПО втТаб.Номенклатура = СпрНоменклатура.Код";
	Запрос.УстановитьПараметр("тзТаб",ТаблицаЗаказа);
	
	ТаблицаЗаказа = Запрос.Выполнить().Выгрузить();
	
	Если Success Тогда
		
		Если ОтчетПоОТХ.ЭтоНовый() тогда
			ОтчетПоОТХ.Дата = НачалоДня(ТекущаяДата())-600;
		КонецЕсли;
		
		ОтчетПоОТХ.Контрагент = Контрагент;
		ОтчетПоОТХ.ДатаС = Дата(DateFrom);
		ОтчетПоОТХ.ДатаПо = Дата(DateTo);
		//ОтчетПоОТХ.Ответственный = 
		ОтчетПоОТХ.Комментарий = "Сформирован автоматически по результатам продаж";
		
		ОтчетПоОТХ.Товары.Очистить();
		
		Для каждого стр из  ТаблицаЗаказа цикл
			нстр = ОтчетПоОТХ.Товары.Добавить();
			нстр.Номенклатура = стр.НоменклатураСпр;
			нстр.Количество = стр.Количество;
		КонецЦикла;
		
		Если ОтчетПоОТХ.Товары.Количество() <> 0 Тогда
			ОтчетПоОТХ.РазобратьПоFIFO();
			//удалить пустые строки
			времТоварыПоЗаказам = ОтчетПоОТХ.ТоварыПоЗаказам.Выгрузить();
			времТоварыПоЗаказам.Очистить();
			Для каждого стр из ОтчетПоОТХ.ТоварыПоЗаказам цикл
				Если стр.Количество<>0 тогда
					нстр = времТоварыПоЗаказам.Добавить();
					ЗаполнитьЗначенияСвойств(нстр, стр);
				КонецЕсли;
			КонецЦикла;
			
			ОтчетПоОТХ.ТоварыПоЗаказам.Очистить();
			Для каждого стр из времТоварыПоЗаказам цикл
				нстр = ОтчетПоОТХ.ТоварыПоЗаказам.Добавить();
				ЗаполнитьЗначенияСвойств(нстр, стр);
			КонецЦикла;
			
			//ОтчетПоОТХ.Записать();
			
			ДоговорРеализации = неопределено;
			
			Если Partner<>"П017979" и не ЗначениеЗаполнено(Агент) тогда
				СпрТочка = Справочники.Точки.НайтиПоРеквизиту("Номер", PointId,,Контрагент);
				
				Набор = РегистрыСведений.СоответствиеКонтрагентовСкладамФРан.СоздатьНаборЗаписей();
				Набор.Отбор.Контрагент.Установить(Контрагент);
				Набор.Отбор.Точка.Установить(СпрТочка);
				Набор.Прочитать();
				
				ДоговорРеализации = ?(IsKTOrder, Набор[0].ДоговорПродажиKolesaTyt, неопределено);
			ИначеЕсли ЗначениеЗаполнено(Агент) тогда
				//создадим заказ на платежного агента и подставим его в реквизит ДокументОснование, в этом случае реализация с переходом права собственности будет на Агента
				//
				ОтчетПоОТХ.ДокументОснование = СформироватьЗаказНаАгента(Агент, ТаблицаЗаказа);
			КонецЕсли;
			
			ДокиСформированы = ОтчетПоОТХ.СоздатьПакетДокументов(ДоговорРеализации);
			
			//Если Partner<>"П017979" и ДокиСформированы тогда //не скрипченко-> заполним цены из реализаций
			Товары = ФабрикаXDTO.Создать(ТипXDTOТовары);
			РеализацииСтрокой = "";
			Если ДокиСформированы тогда //заполним цены из реализаций
				Товары = ФабрикаXDTO.Создать(ТипXDTOТовары);
				СписокРеализаций = Новый СписокЗначений;
				Для каждого стрДок из  ОтчетПоОТХ.СформированныеДокументы цикл
					Если ТипЗнч(стрДок.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
						СписокРеализаций.Добавить(стрДок.Документ);
					КонецЕсли;
				КонецЦикла;
				
				ТабЦен = ПолучитьЦены(СписокРеализаций);
				
				Для каждого стрЦ из ТабЦен цикл
					Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Product"));
					Товар.Code=(Строка(стрЦ.НоменклатураКод));
					Товар.Quantity=(Число(стрЦ.Количество));
					Товар.Price = стрЦ.Цена;
					Товары.Product.Добавить(Товар);
				КонецЦикла;
				
				Для каждого ЭлРеал из СписокРеализаций цикл
					 РеализацииСтрокой = РеализацииСтрокой+ЭлРеал.Значение.Номер+"; ";
				КонецЦикла;
			КонецЕсли;
			
			//Попытка
				Если ДокиСформированы = истина тогда
					ОтчетПоОТХ.Записать(РежимЗаписиДокумента.Проведение);
				иначе
					ОтчетПоОТХ.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				//Реализация.Записать(РежимЗаписиДокумента.Запись);
			//Исключение
			//	//Реализация.Записать(РежимЗаписиДокумента.Запись);
			//	Ошибка = Ошибка + Символы.ПС+ОписаниеОшибки();
			//	Success = ложь;
			//КонецПопытки;
			
			Если Success тогда
				OrderGUID = Строка(ОтчетПоОТХ.Ссылка.УникальныйИдентификатор());
				Если Partner="П017979" тогда
					OrderNumber = РеализацииСтрокой;
				иначе	
					OrderNumber = СокрЛП(ОтчетПоОТХ.Номер);
				КонецЕсли;
			Иначе
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 

	
	РезультатОперации.Success		 = Success;
	РезультатОперации.Error			 = Ошибка;
	РезультатОперации.Products       = Товары;
	РезультатОперации.NumberYST		 = OrderNumber;
	РезультатОперации.GuidYST	     = OrderGUID;
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ПолучитьЦены(СписокРеализаций)
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	А.НоменклатураКод,
	             |	ВЫРАЗИТЬ(А.Сумма / А.Количество КАК ЧИСЛО(15, 0)) КАК Цена,
	             |	А.Количество
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		РеализацияТоваровУслугТовары.Номенклатура.Код КАК НоменклатураКод,
	             |		СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	             |		СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
	             |	ИЗ
	             |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	             |	ГДЕ
	             |		РеализацияТоваровУслугТовары.Ссылка В(&СписокРеализаций)
	             |	
	             |	СГРУППИРОВАТЬ ПО
	             |		РеализацияТоваровУслугТовары.Номенклатура.Код) КАК А";
				 Запрос.УстановитьПараметр("СписокРеализаций", СписокРеализаций);
				 Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция СформироватьРеализацииПоСхемеПеремещений(PointId, Partner, Goods, Receipts, GuidYST, IsKTOrder)
	URL = "www.franch.yst";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	ТипXDTOТовары = ФабрикаXDTO.Тип(URL, "ArrayOfProducts");
	Товары = ФабрикаXDTO.Создать(ТипXDTOТовары);
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	
	Ошибка    = "";
	Success   = Истина;
	OrderNumber = "";
	OrderGUID = "";
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(Partner);
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Success = Ложь;
		Ошибка = "Не удалось найти контрагента";
	КонецЕсли;
	Если Контрагент.ЗапретитьВводЗаказаПокупателя или Контрагент.ЗапретОтгрузки Тогда
		Success = Ложь;
		Ошибка = "Вам запрещено создавать заказы!";
	КонецЕсли;
	
	СпрТочка = Справочники.Точки.НайтиПоРеквизиту("Номер", PointId,,Контрагент);
	
	Набор = РегистрыСведений.СоответствиеКонтрагентовСкладамФРан.СоздатьНаборЗаписей();
	Набор.Отбор.Контрагент.Установить(Контрагент);
	Набор.Отбор.Точка.Установить(СпрТочка);
	Набор.Прочитать();
	
	если Набор.Количество()>0 Тогда
		СкладФР = Набор[0].Склад;
		ДоговорРеализация = ?(IsKTOrder, Набор[0].ДоговорПродажиKolesaTyt, Набор[0].ДоговорПродажи);
		Грузоотправитель = Контрагент;
	Иначе
		СкладФР = Справочники.Склады.ПустаяСсылка();
		ДоговорРеализация = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Грузоотправитель = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200)));
	ТаблицаЗаказа.Колонки.Добавить("НоменклатураСпр",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗаказа.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТаблицаЗаказа.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
	
	
	Для каждого Запись из Goods.Product цикл	
		СтрокаТЗ = ТаблицаЗаказа.Добавить();
		СтрокаТЗ.Номенклатура = Запись.Code;
		СтрокаТЗ.Количество = Число(Запись.Quantity);
		//СтрокаТЗ.НоменклатураСпр=Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
		СтрокаТЗ.Цена =  Число(Запись.Price);	
	КонецЦикла;
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	тзТаб.Номенклатура,
	             |	тзТаб.Количество,
	             |	тзТаб.Цена
	             |ПОМЕСТИТЬ втТаб
	             |ИЗ
	             |	&тзТаб КАК тзТаб
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втТаб.Номенклатура,
	             |	втТаб.Количество,
	             |	втТаб.Цена,
	             |	ЕСТЬNULL(СпрНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураСпр,
	             |	СпрНоменклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	             |	СпрНоменклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	             |	СпрНоменклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмеренияМест,
	             |	СпрНоменклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоличествоМест
	             |ИЗ
	             |	втТаб КАК втТаб
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	             |		ПО втТаб.Номенклатура = СпрНоменклатура.Код";
	Запрос.УстановитьПараметр("тзТаб",ТаблицаЗаказа);
	
	ТаблицаЗаказа = Запрос.Выполнить().Выгрузить();
	
	//Создание заказа(ов)
	Если Success Тогда
		
		ПодразделениеЗаказа = Справочники.Подразделения.НайтиПоКоду("00005");
		
		
		//Реализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Реализация = ПолучитьРеализацию(GuidYST);
		
		Если Реализация.ЭтоНовый() тогда
			Реализация.Дата = НачалоДня(ТекущаяДата())-600;
		КонецЕсли;
		
		Реализация.Товары.Очистить();
		Реализация.ТаблицаБригады.Очистить();
		Реализация.ТоварыАдресноеХранение.Очистить();
		Реализация.ДанныеПоПогрузке.Очистить();
		Реализация.Услуги.Очистить();
		
		Реализация.Организация = Справочники.Организации.НайтиПоКоду("00001");
		
		Реализация.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); //Крупный опт
		Реализация.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
		Реализация.КурсВзаиморасчетов = 1;
		Реализация.КратностьВзаиморасчетов = 1;
		
		Реализация.Контрагент = Контрагент;
		Реализация.Подразделение = ПодразделениеЗаказа;					
		Реализация.Грузоотправитель = Грузоотправитель;
		
		Реализация.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
		Реализация.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		Реализация.Комментарий = "Создана автоматически по продажам франчайзи";
		
		
		Реализация.СуммаВключаетНДС = Истина;
		Реализация.УчитыватьНДС	   = Истина;		
		
		Реализация.ДоговорКонтрагента = ДоговорРеализация;
		Реализация.ОтражатьВУправленческомУчете = Истина;
		Реализация.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		//+++)
		
		
		Реализация.Склад = СкладФР;
		
		
		//цены
		СписокНом = ТаблицаЗаказа.ВыгрузитьКолонку("НоменклатураСпр");
		ТабЗнач1  = Новый ТаблицаЗначений;
		ТабЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом, ТекущаяДата());
		
		Если Partner = "П017979" тогда  //ИП Скрипченко
		иначе
			услПредоплатногоДоговора = (Реализация.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00001")
			или Реализация.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ПредоплатаПоСчетам //+++14.08.2017
			или Реализация.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФакторингПредоплата);//22.05.2017
			
			Если ТипЗнч(ТабЗнач1) = Тип("Строка") Тогда // нет политики ценообразования документом
				табЗнач1  = новый ТаблицаЗначений;
				табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом); //из регистра сведений
			КонецЕсли;	
		КонецЕсли;
		//
		
		Для каждого Стр1 ИЗ ТаблицаЗаказа Цикл
			СтрокаТовары = Реализация.Товары.Добавить();
			СтрокаТовары.Номенклатура = Стр1.НоменклатураСпр;
			СтрокаТовары.Коэффициент = 1;
			СтрокаТовары.Количество = Стр1.Количество;
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, Реализация, Константы.ВалютаРегламентированногоУчета.Получить()); 
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, Реализация);
			
			Если Partner = "П017979" тогда  //ИП Скрипченко
				СтрокаТовары.Цена = Стр1.Цена;
			иначе
				стр2 = табЗнач1.найти(стр1.НоменклатураСпр, "Номенклатура");
				стр1Цена = стр1.Цена;
				Если стр2 = неопределено Тогда
					стр2МинимальнаяЦена = 0;
				Иначе
					//+++ 10.09.2015 Цена ПРЕДОПЛАТНАЯ с доп.скидкой
					Если услПредоплатногоДоговора Тогда
						попытка
							стр2МинимальнаяЦена = стр2.ЦенаСоСкидкойПредоплаты; 
						исключение // если экспортные цены или из Политики... то там нет поля ЦенаСоСкидкойПредоплаты	
							стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
						КонецПопытки;	
					Иначе // как было
						стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
					КонецЕсли;
				КонецЕсли;
				Если стр1Цена<>стр2МинимальнаяЦена Тогда
					стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
				КонецЕсли;
				СтрокаТовары.Цена = стр1.Цена;
			КонецЕсли;
			
			РассчитатьСуммуТабЧасти(СтрокаТовары, Реализация);
			РассчитатьСуммуНДСТабЧасти(СтрокаТовары, Реализация);
			
			Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Product"));
			Товар.Code=(Строка(Стр1.Номенклатура));
			Товар.Quantity=(Число(Стр1.Количество));
			Товар.Price = СтрокаТовары.Цена;
			Товары.Product.Добавить(Товар);
		КонецЦикла;
		
		Для каждого Запись из Receipts.Receipt цикл	
			Нстр = Реализация.ДокументыКонтрагентов.Добавить();
			Нстр.Номер = Запись.Number;
			Нстр.GUID = Запись.GUID;
		КонецЦикла;
		
		Если Реализация.ЭтоНовый() тогда
			Реализация.УстановитьНовыйНомер("ТК");
		КонецЕсли;
		
		//Реализация.Записать(РежимЗаписиДокумента.Запись);
		
		Если Реализация.Товары.Количество() <> 0 Тогда
			Попытка 
				Реализация.Записать(РежимЗаписиДокумента.Проведение);
				//Реализация.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				//Реализация.Записать(РежимЗаписиДокумента.Запись);
				Ошибка = Ошибка + Символы.ПС+ОписаниеОшибки();
				Success = ложь;
			КонецПопытки;
			
			OrderGUID = Строка(Реализация.Ссылка.УникальныйИдентификатор());
			OrderNumber = СокрЛП(Реализация.Номер);
		КонецЕсли;  //товары есть
	КонецЕсли;
	
	РезультатОперации.Success		 = Success;
	РезультатОперации.Error			 = Ошибка;
	РезультатОперации.Products       = Товары;
	РезультатОперации.NumberYST		 = OrderNumber;
	РезультатОперации.GuidYST	     = OrderGUID;
	
	Возврат РезультатОперации;
КонецФункции
Функция GetB2BPrices()
	URL = "www.franch.yst";
	
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProducts"));
	
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура.Код КАК Код,
	             |	ЦеныНоменклатурыСрезПоследних.Цена
	             |ИЗ
	             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	             |			,
	             |			ТипЦен = &ТипB2B
	             |				И Валюта = &Валюта) КАК ЦеныНоменклатурыСрезПоследних
	             |ГДЕ
	             |	НЕ ЦеныНоменклатурыСрезПоследних.Номенклатура.Код ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("ТипB2B", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00032")); //Цена B2B Базовая
	Запрос.УстановитьПараметр("Валюта",Справочники.Валюты.НайтиПоКоду("643")); //руб.
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Product"));
		Товар.Code=Рез.Код;
		Товар.Price=Рез.Цена;
		Товар.Quantity = 0;
		
		Товары.Product.Добавить(Товар);
		
	КонецЦикла;
	
	Возврат Товары;
КонецФункции

Функция CheckOrder(Partner, Number, Date)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателяТовары.Количество,
	               |	ЗаказПокупателяТовары.Номенклатура.Код как Код,
	               |	ЗаказПокупателяТовары.Цена
	               |ИЗ
	               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	               |ГДЕ
	               |	ЗаказПокупателяТовары.Ссылка.Контрагент = &Контрагент
	               |	И ЗаказПокупателяТовары.Ссылка.Номер = &Номер
	               |	И ЗаказПокупателяТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон";
				   Запрос.УстановитьПараметр("Контрагент", справочники.Контрагенты.НайтиПоКоду(Partner));
				   Запрос.УстановитьПараметр("Номер", Number);
				   Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Дата(Date)));
				   Запрос.УстановитьПараметр("ДатаКон", КонецДня(Дата(Date)));
				   Рез = Запрос.Выполнить().Выбрать();
				   
				   URL = "www.franch.yst";
				   
				   ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "ArrayOfProducts");
				   РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);

				   Пока Рез.Следующий() цикл
					   Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Product"));
					   Товар.Code=Рез.Код;
					   Товар.Quantity=Рез.Количество;
					   Товар.Price = Рез.Цена;
					   РезультатОперации.Product.Добавить(Товар);
				   КонецЦикла;
				   Возврат РезультатОперации;
КонецФункции

Функция CreateOrderFranch(Customer, OrderProperties, Goods, Amenities)
	тНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ЗаписьXML = Новый ЗаписьXML;
	
	ИмяФайла = КолесаТут.ПолучитьНомерИМ(СокрЛП(OrderProperties.inOrderNumber));

	Если имяФайла<>"" тогда
		имяФайла="D:\1C\KOLESATYT\"+имяФайла;
	Иначе
		имяФайла="D:\1C\KOLESATYT\"+"ERR_"+ТекущаяДата()+"_";
	КонецЕсли;
	ЗаписьXML.ОткрытьФайл(имяФайла+"_customer.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Customer);
	ЗаписьXML.Закрыть();
	
	ЗаписьXML.ОткрытьФайл(имяФайла+"_goods.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Goods);
	ЗаписьXML.Закрыть();
	
	ЗаписьXML.ОткрытьФайл(имяФайла+"_amenities.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Amenities);
	ЗаписьXML.Закрыть();
	
	ЗаписьXML.ОткрытьФайл(имяФайла+"_OrderProperties.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, OrderProperties);
	ЗаписьXML.Закрыть();
	
	ОписаниеОшибки="";
	
	РезультатПроверки = КолесаТут.СозданиеУжеЕстьТакойЗаказ(OrderProperties); //проверим, возможно такой заказ уже есть
	Если РезультатПроверки.ЕстьТакой тогда
		 Возврат РезультатПроверки.РезОперации;
	КонецЕсли;
	
	Заказ = Документы.ЗаказПокупателя.СоздатьДокумент();
	времяОперации = ТекущаяУниверсальнаяДатаВМиллисекундах()-тНачала;
	//ОписаниеОшибки = "Создание логов: "+времяОперации+"мс. "  +Символы.ПС;
	Рез = КолесаТут.СформироватьРедактироватьЗаказ(Заказ, ОписаниеОшибки, Customer,OrderProperties, Goods, Amenities, истина);
	
	Возврат Рез;

КонецФункции

Функция CreateSalesDocsAndOrder(PointId, Partner, Goods, Receipts, GuidYST, IsKTOrder, DateFrom, DateTo, Agent)
	//Agent = код контрагента, на которого создавать заказ/реализацию с переходом права собственности
	РезультатОперации = СформироватьРеализации(PointId,Partner, Goods, Receipts, GuidYST, IsKTOrder, DateFrom, DateTo, Agent); //Схема - Заказ - Реализация - Возврат - реализация
	Возврат РезультатОперации;
КонецФункции

Функция СформироватьЗаказНаАгента(Агент, ТаблицаЗаказа)
	ДокЗаказ = документы.ЗаказПокупателя.СоздатьДокумент();
	ДокЗаказ.Дата = ТекущаяДата();
	ДокЗаказ.Организация = Справочники.Организации.НайтиПоКоду("00001");
	ДокЗаказ.Контрагент = Агент;
	ДокЗаказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); //Крупный опт
	ДокЗаказ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");

	ДокЗаказ.ДоговорКонтрагента = ПолучитьДоговорАгента(Агент);
	ДокЗаказ.ДатаОплаты = ДокЗаказ.Дата + 7 * 24*60*60;
	ДокЗаказ.КратностьВзаиморасчетов = 1;
	ДокЗаказ.КурсВзаиморасчетов = 1;
	//ДокЗаказ.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
	ДокЗаказ.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
	ДокЗаказ.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Покупателя за счет Покупателя");
	ДокЗаказ.СуммаВключаетНДС = Истина;
	
	//ДокЗаказ.ТипЗаказа = "";
	ДокЗаказ.УчитыватьНДС = истина;
	
	Для каждого стр из ТаблицаЗаказа цикл
		нстр = ДокЗаказ.Товары.Добавить();
	    ЗаполнитьЗначенияСвойств(нстр,стр);
		нстр.Номенклатура = стр.НоменклатураСпр;
		нстр.СтавкаНДС = СтавкаНДСнаДату(ТекущаяДата());
		
		РассчитатьСуммуТабЧасти(нстр, ДокЗаказ);
		РассчитатьСуммуНДСТабЧасти(нстр, ДокЗаказ);
	КонецЦикла;
	
	ДокЗаказ.СуммаДокумента = ДокЗаказ.Товары.Итог("Сумма");
	ДокЗаказ.Комментарий = "Создан автоматически для продажи на агента от франчайзи.";
	ДокЗаказ.Записать(РежимЗаписиДокумента.Проведение); //он дополнительно изменяется и проводится из отчета по ОТХ, так что просто записываем
	Возврат ДокЗаказ.Ссылка;
КонецФункции

Функция ПолучитьДоговорАгента(Агент)
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ДоговорыКонтрагентов.Ссылка как ДоговорКонтрагента
	             |ИЗ
	             |	РегистрСведений.ДоговорыПоТоварнымГруппам КАК ДоговорыПоТоварнымГруппам
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	             |		ПО ДоговорыПоТоварнымГруппам.Договор = ДоговорыКонтрагентов.Ссылка
	             |ГДЕ
	             |	ДоговорыКонтрагентов.Владелец = &Владелец
	             |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	             |	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Спокупателем)
	             |	И ДоговорыКонтрагентов.ОтветственноеЛицо.НаправлениеПродаж = &НаправлениеПродажКТ
	             |	И ДоговорыПоТоварнымГруппам.Подразделение = &ПодразделениеГоловное";
				 Запрос.УстановитьПараметр("НаправлениеПродажКТ", Справочники.НаправленияПродаж.НайтиПоКоду("16"));
				 Запрос.УстановитьПараметр("Владелец", Агент);
				 Запрос.УстановитьПараметр("ПодразделениеГоловное", Справочники.Подразделения.НайтиПоКоду("00005"));
				 
				 Рез = Запрос.Выполнить().Выбрать();
				 
				 Пока Рез.Следующий() Цикл
					 Возврат Рез.ДоговорКонтрагента;
				 КонецЦикла;
				 
				 Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
КонецФункции
