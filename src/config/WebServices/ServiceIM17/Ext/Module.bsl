
Функция CancelOrder(OrderGUID)
	РазрешенныеДляОтменыСтатусы = новый СписокЗначений;
	
	РазрешенныеДляОтменыСтатусы.Добавить(3);
	РазрешенныеДляОтменыСтатусы.Добавить(4);//.Отгружен Полностью");
	РазрешенныеДляОтменыСтатусы.Добавить(5);//.Отгружен Частично"); 
	РазрешенныеДляОтменыСтатусы.Добавить(6);//.Доставлен На Склад");
	РазрешенныеДляОтменыСтатусы.Добавить(7);//.В Пути из Ярославля");
	РазрешенныеДляОтменыСтатусы.Добавить(8);//.На Отгрузке(полностью)");
	РазрешенныеДляОтменыСтатусы.Добавить(9);//.На Отгрузке(частично)");
	РазрешенныеДляОтменыСтатусы.Добавить(10);//.На Отгрузке(подготовка)");
	РазрешенныеДляОтменыСтатусы.Добавить(11);//.Вн.Перемещение(полностью)");
	РазрешенныеДляОтменыСтатусы.Добавить(12);//.Вн.Перемещение(частично)");
	РазрешенныеДляОтменыСтатусы.Добавить(13);//.Вн.Перемещение(подготовка)"); //29 символов!
	РазрешенныеДляОтменыСтатусы.Добавить(14);//.Вн.Перемещение(Выполнено)");
	
	
	
	ОписаниеОшибки = "";
	Success = Истина;
	OrderNumber = "";
	
	ТКАрмадилло = Справочники.Контрагенты.НайтиПоКоду("94121");
	
	УИД = Новый УникальныйИдентификатор(СокрЛП(OrderGUID));
	ЗаказСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(УИД);
	Если (НЕ ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка()) И (НЕ ЗаказСсылка.ПолучитьОбъект() = Неопределено) Тогда
		
		//05.03.19 Смирнов
		ИмяФайла = СокрЛП(ЗаказСсылка.НомерВходящегоДокумента);
		тСтр="";
		Если имяФайла<>"" тогда
			имяФайла="D:\1C\KOLESATYT\"+имяФайла;
		Иначе
			имяФайла="D:\1C\KOLESATYT\"+"ERR_"+Формат(ТекущаяДата(),"ДФ=dd_MM_yyyТhh_mm_ss");
			тСтр = "GUID: "+OrderGUID+" ссылка:"+ЗаказСсылка;
		КонецЕсли;
		имяФайла = имяФайла+"_CancelOrder.txt";
		ОписаниеОшибки = ОписаниеОшибки+имяФайла;
		Текст = Новый ТекстовыйДокумент;
		Файл = Новый Файл (имяФайла);
		Если Файл.Существует() Тогда
			Текст.Прочитать(имяФайла,КодировкаТекста.ANSI);
		КонецЕсли;
		
		Если тСтр<>""тогда
			Текст.ДобавитьСтроку(тСтр);
		КонецЕсли;
		
		Текст.ДобавитьСтроку("Дата удаления: "+ТекущаяДата());
		
		Текст.Записать(имяФайла,КодировкаТекста.ANSI);
        //Смирнов
	
		
		Если яштПоЗаказуБылиОтгрузки(ЗаказСсылка) Тогда
			ОписаниеОшибки = ОписаниеОшибки + " По заказу уже были отгрузки, корректировки или закрытие. Отмена невозможна.";
			Success = Ложь;
		КонецЕсли;	
		
		Если найти(ЗаказСсылка.Комментарий,"данные перенесены")>0 и Success Тогда
			ОписаниеОшибки = ОписаниеОшибки + " По заказу уже были отгрузки, корректировки или закрытие. Отмена невозможна.";
			Success = Ложь;
		КонецЕсли;	
		
		Если Success тогда
			ЗаказСписок = новый СписокЗначений;
			ЗаказСписок.Добавить(ЗаказСсылка);
			Статусы = ОбменСУТИнтернетМагазин.ПолучитьстатусыЗаказов(ЗаказСписок);
			Если РазрешенныеДляОтменыСтатусы.НайтиПоЗначению(Статусы[0].Статус) <> неопределено тогда
				ОписаниеОшибки = ОписаниеОшибки + " По заказу уже были отгрузки, корректировки или закрытие. Отмена невозможна.";
				Success = Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
		Если Success тогда
			
			Если найти(ЗаказСсылка.Комментарий,"#Отгрузка отменена!")=0 и не ЗаказСсылка.ПометкаУдаления тогда  //если уже удален, то не удаляем ))
				ДокОбъект = ЗаказСсылка.ПолучитьОбъект();
				ДокОбъект.Комментарий = "#Отгрузка отменена!  "+"Клиент отменил заказ"+Символы.ПС+ДокОбъект.Комментарий;
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ДокОбъект.ПометкаУдаления = Истина;
				ДокОбъект.Записать();
			КонецЕсли;
			OrderNumber = ЗаказСсылка.Номер;
		КонецЕсли;
	
		//если есть номер ТК, то отменим у них
		//26.03.18 Смирнов задача 39347
		//Если ЗаказСсылка.НомерЗаказаТК<>"" тогда
		//	Если ЗаказСсылка.ТранспортнаяКомпания = ТКАрмадилло тогда 
		//		ОписаниеОшибки = ОписаниеОшибки + РаботаСDPD.ОтменитьЗаказВДПД(ЗаказСсылка);
		//	КонецЕсли;
		//КонецЕсли;
		
		Попытка
			//Если заказ уже перемещен, то при отмене его все равно отгружаем, т.е. в регистр не надо писать отмену, задача №29532
			//Запрос = новый Запрос;
			//Запрос.Текст="ВЫБРАТЬ
			//			 |	СостояниеЗаказовИМ.ЗаказПервичный
			//			 |ИЗ
			//			 |	РегистрСведений.СостояниеЗаказовИМ КАК СостояниеЗаказовИМ
			//			 |ГДЕ
			//			 |	СостояниеЗаказовИМ.ЗаказПервичный = &ЗаказПервичный
			//			 |	И СостояниеЗаказовИМ.Состояние = &Состояние";
			//Запрос.УстановитьПараметр("ЗаказПервичный",ЗаказСсылка);
			//Запрос.УстановитьПараметр("Состояние",Перечисления.СостояниеЗаказовИМ.Перемещен);
			//Рез = Запрос.Выполнить().Выбрать();
			//
			//Если Рез.Количество() = 0 тогда 
				ЗаписатьРегистрСтатусов(ЗаказСсылка, , , , , , Истина);
			//КонецЕсли;	
		Исключение
		КонецПопытки;
		
		
	Иначе
		ОписаниеОшибки = ОписаниеОшибки + " Заказ покупателя не найден";
		Success = Ложь;
	КонецЕсли;
		
	URL = "www.yst.ru/im17";
		
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	РезультатОперации.Success = Success;
	РезультатОперации.Error = ОписаниеОшибки;
	РезультатОперации.OrderNumber = OrderNumber;
	РезультатОперации.OrderGUID = OrderGUID;
	
	Возврат РезультатОперации;
КонецФункции

Функция CreateOrder(Customer, OrderProperties, Goods, Amenities)
	тНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ЗаписьXML = Новый ЗаписьXML;
	
	ИмяФайла = КолесаТут.ПолучитьНомерИМ(СокрЛП(OrderProperties.inOrderNumber));

	Если имяФайла<>"" тогда
		имяФайла="D:\1C\KOLESATYT\"+имяФайла;
	Иначе
		имяФайла="D:\1C\KOLESATYT\"+"ERR_"+ТекущаяДата()+"_";
	КонецЕсли;
	ЗаписьXML.ОткрытьФайл(имяФайла+"_customer.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Customer);
	ЗаписьXML.Закрыть();
	
	ЗаписьXML.ОткрытьФайл(имяФайла+"_goods.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Goods);
	ЗаписьXML.Закрыть();
	
	ЗаписьXML.ОткрытьФайл(имяФайла+"_amenities.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Amenities);
	ЗаписьXML.Закрыть();
	
	ЗаписьXML.ОткрытьФайл(имяФайла+"_OrderProperties.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, OrderProperties);
	ЗаписьXML.Закрыть();
	
	ОписаниеОшибки="";
	
	РезультатПроверки = КолесаТут.СозданиеУжеЕстьТакойЗаказ(OrderProperties); //проверим, возможно такой заказ уже есть
	Если РезультатПроверки.ЕстьТакой тогда
		 Возврат РезультатПроверки.РезОперации;
	КонецЕсли;
	
	Заказ = Документы.ЗаказПокупателя.СоздатьДокумент();
	времяОперации = ТекущаяУниверсальнаяДатаВМиллисекундах()-тНачала;
	//ОписаниеОшибки = "Создание логов: "+времяОперации+"мс. "  +Символы.ПС;
	Рез = КолесаТут.СформироватьРедактироватьЗаказ(Заказ, ОписаниеОшибки, Customer,OrderProperties, Goods, Amenities);
	
	Возврат Рез;
КонецФункции

Функция EditOrder(Customer, OrderProperties, Goods, Amenities)
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ЗаписьXML = Новый ЗаписьXML;
	
	ИмяФайла = КолесаТут.ПолучитьНомерИМ(СокрЛП(OrderProperties.inOrderNumber));
	Если имяФайла<>"" тогда
		имяФайла="D:\1C\KOLESATYT\" + "Edit\"+имяФайла;
	Иначе
		имяФайла="D:\1C\KOLESATYT\" + "Edit\"+"ERR_"+ТекущаяДата()+"_";
	КонецЕсли;
	ЗаписьXML.ОткрытьФайл(имяФайла+"_customer.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Customer);
	ЗаписьXML.Закрыть();
	
	ЗаписьXML.ОткрытьФайл(имяФайла+"_goods.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Goods);
	ЗаписьXML.Закрыть();
	
	ЗаписьXML.ОткрытьФайл(имяФайла+"_amenities.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Amenities);
	ЗаписьXML.Закрыть();
	
	ЗаписьXML.ОткрытьФайл(имяФайла+"_OrderProperties.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, OrderProperties);
	ЗаписьXML.Закрыть();
	
	URL = "www.yst.ru/im17";
	
	ОписаниеОшибки = "";
	Success = Истина;
	OrderNumber = "";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	Рез = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProducts"));
	
	УИД = Новый УникальныйИдентификатор(СокрЛП(OrderProperties.OrderGUID));
	ЗаказСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(УИД);
	Если (НЕ ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка()) И (НЕ ЗаказСсылка = Неопределено) Тогда
		Если яштПоЗаказуБылиОтгрузки(ЗаказСсылка) Тогда
			ОписаниеОшибки = ОписаниеОшибки + " По заказу уже были отгрузки, корректировки или закрытие. Редактирование невозможно.";
			Success = Ложь;
		КонецЕсли;	
		Если ЗаказСсылка.НомерЗаказаТК<>"" тогда
			ОписаниеОшибки = ОписаниеОшибки + " По заказу уже был сформирован заказ в ТК. Редактирование невозможно";
			Success = Ложь;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ОписаниеОшибки + " Заказ покупателя не найден";
		Success = Ложь;
	КонецЕсли;
	
	Если Success тогда
		ДокОбъект = ЗаказСсылка.ПолучитьОбъект();
		//НачатьТранзакцию();
			//ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		
			Рез = КолесаТут.СформироватьРедактироватьЗаказ(ДокОбъект, ОписаниеОшибки, Customer, OrderProperties, Goods, Amenities);
		
			//Если Рез.success тогда
			//	ЗафиксироватьТранзакцию();
			//Иначе
			//	ОтменитьТранзакцию();
			//КонецЕсли;
	Иначе
		Рез.Products		 = Товары;
		Рез.Success		 = Success;
		Рез.OrderNumber	 = "";
		Рез.OrderGUID		 = OrderProperties.OrderGUID;
		Рез.Error			 = ОписаниеОшибки;
	КонецЕсли;
	Возврат Рез;
КонецФункции

Функция GetStatus(Orders)
	URL = "www.yst.ru/im17";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Orders");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	вЗаказ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Order"));
	
	
	ТабЗаказов = Новый ТаблицаЗначений;
	ТабЗаказов.Колонки.Добавить("GUID", Новый ОписаниеТипов("Строка"));
	ТабЗаказов.Колонки.Добавить("ЗаказСсылка",Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТабЗаказов.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ТабЗаказов.Колонки.Добавить("ДатаОтгрузки", Новый ОписаниеТипов("Строка"));
	ТабЗаказов.Колонки.Добавить("НомерЗаказаТК", Новый ОписаниеТипов("Строка"));
	ТабЗаказов.Колонки.Добавить("СообщениеТК", Новый ОписаниеТипов("Строка"));
	ТабЗаказов.Колонки.Добавить("КодТК", Новый ОписаниеТипов("Строка"));
	ТабЗаказов.Колонки.Добавить("Оплачен"); // клиент оплатил нам заказ
	ТабЗаказов.Колонки.Добавить("ОплаченАгентом"); //тк перевели деньги за заказ
	ТабЗаказов.Колонки.Добавить("ОтмененНаСайте"); 
    ТабЗаказов.Колонки.Добавить("ВремяОтсечки", Новый ОписаниеТипов("Дата"));
	ТабЗаказов.Колонки.Добавить("ДатаСогласованияСТК", Новый ОписаниеТипов("Дата"));

	СписокЗаказов = новый СписокЗначений;
	
	Для каждого Заказ из Orders.Order цикл
		
		Попытка
			УИД = Новый УникальныйИдентификатор(СокрЛП(Заказ.GUID));
			ЗаказСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(УИД);
		Исключение
			ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецПопытки;
		
		нстр = ТабЗаказов.Добавить();
		
	//	Если ЗаказСсылка <> Документы.ЗаказПокупателя.ПустаяСсылка() и ЗаказСсылка <> Неопределено тогда
		Если ЗначениеЗаполнено(ЗаказСсылка) тогда 
		
			//+++ 30.05.2018 - бывают несколько раз в день! конфликт блокировок при получении объекта! 20 сек!
				Если ЗаказСсылка.ПолучитьОбъект()<> неопределено Тогда
					нстр.GUID = СокрЛП(СокрЛП(Заказ.GUID));
					нстр.ЗаказСсылка = ЗаказСсылка;
					нстр.КодТК = СокрЛП(ЗаказСсылка.ТранспортнаяКомпания.Код);
					нстр.НомерЗаказаТК=СокрЛП(ЗаказСсылка.НомерЗаказаТК);
					//нстр.Статус = ЗаказСсылка.Номер;
				Иначе
					нстр.GUID = СокрЛП(СокрЛП(Заказ.GUID));
					нстр.ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
					нстр.Статус = "Заказ не найден";
					нстр.ДатаОтгрузки="";
					нстр.НомерЗаказаТК="";
				КонецЕсли;
					
		Иначе
			нстр.GUID = СокрЛП(СокрЛП(Заказ.GUID));
			нстр.ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
			нстр.Статус = "Заказ не найден";
			нстр.ДатаОтгрузки="";
			нстр.НомерЗаказаТК="";
		КонецЕсли;
		нстр.Оплачен=ложь;
		нстр.ОплаченАгентом=ложь;
		нстр.ОтмененНаСайте=ложь;
	КонецЦикла;
	
	//!!!как устаканятся статусы надо переделать в 1 запрос
	
	ТабЗаказов = ПолучитьДатуСогласованияЗаказов(ТабЗаказов);
	
	ТабЗаказов = ПолучитьСтатусыЗаказов(ТабЗаказов);
	
	ТабЗаказов = ПолучитьДатыОтгрузкиЗаказов(ТабЗаказов);
	
	ТабЗаказов = ПроверитьОплату(ТабЗаказов);
	
	ТабЗаказов = ПолучитьСообщениеТК(ТабЗаказов);
	
	ТабЗаказов = ПроверитьОплатуТКИОтмену(ТабЗаказов);

	
	Для каждого стр из ТабЗаказов Цикл 
		вЗаказ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Order"));
		вЗаказ.GUID = стр.GUID;
		вЗаказ.Payed = стр.Оплачен;
		вЗаказ.Status = стр.Статус;
		Если стр.ОплаченАгентом тогда
			 вЗаказ.Status = "Выполнен $";
		КонецЕсли;
		Если стр.ОтмененНаСайте тогда
			 вЗаказ.Status = "3.Закрыт";
		КонецЕсли;
		вЗаказ.ShippingDate = стр.ДатаОтгрузки;
		вЗаказ.TCOrderNumber  = стр.НомерЗаказаТК;
		вЗаказ.TCMessage  = стр.СообщениеТК;
		вЗаказ.TransportCompany  = стр.КодТК;
		РезультатОперации.Order.Добавить(вЗаказ);
	КонецЦикла;

	
	Возврат РезультатОперации;

КонецФункции

Функция ПолучитьДатуСогласованияЗаказов(ТабЗаказов)
	СписокЗаказов2 = ТабЗаказов.ВыгрузитьКолонку("ЗаказСсылка");
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов2);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателяРеквизитыЗаказаТК.Ссылка КАК ЗаказПокупателя,
	               |	МАКСИМУМ(ВЫРАЗИТЬ(ЗаказПокупателяРеквизитыЗаказаТК.Значение КАК СТРОКА(50))) КАК ДатаСогласованияСТК
	               |ИЗ
	               |	Документ.ЗаказПокупателя.РеквизитыЗаказаТК КАК ЗаказПокупателяРеквизитыЗаказаТК
	               |ГДЕ
	               |	ЗаказПокупателяРеквизитыЗаказаТК.Ссылка В(&СписокЗаказов)
	               |	И ЗаказПокупателяРеквизитыЗаказаТК.Поле = ""Дата/время согласования с ТК""
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказПокупателяРеквизитыЗаказаТК.Ссылка";
	отбор = новый структура("ЗаказСсылка");
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
			отбор.ЗаказСсылка = Рез.ЗаказПокупателя;
			НайденныйСтроки = ТабЗаказов.НайтиСтроки(Отбор);
			Для каждого стр из НайденныйСтроки цикл
				стр.ДатаСогласованияСТК = ?(ЗначениеЗаполнено(СокрЛП(Рез.ДатаСогласованияСТК)),Дата(Рез.ДатаСогласованияСТК),Дата(1,1,1));
			КонецЦикла;
	КонецЦикла;
	Возврат ТабЗаказов;
КонецФункции

Функция ПроверитьОплатуТКИОтмену(ТабЗаказов)
	СписокЗаказов2 = ТабЗаказов.ВыгрузитьКолонку("ЗаказСсылка");
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостояниеЗаказовИМ.ЗаказПервичный КАК ЗаказПокупателя,
	               |	МАКСИМУМ(СостояниеЗаказовИМ.Оплачен) КАК Оплачен,
	               |	МАКСИМУМ(СостояниеЗаказовИМ.Отменен) КАК Отменен
	               |ИЗ
	               |	РегистрСведений.СостояниеЗаказовИМ КАК СостояниеЗаказовИМ
	               |ГДЕ
	               |	СостояниеЗаказовИМ.ЗаказПервичный В(&СписокЗаказов)
	               |	И (СостояниеЗаказовИМ.Оплачен
	               |			ИЛИ СостояниеЗаказовИМ.Отменен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СостояниеЗаказовИМ.ЗаказПервичный";
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов2);
	Рез = Запрос.Выполнить().Выбрать();
	
	отбор = новый структура("ЗаказСсылка");
	Пока Рез.Следующий() Цикл
			отбор.ЗаказСсылка = Рез.ЗаказПокупателя;
			НайденныйСтроки = ТабЗаказов.НайтиСтроки(Отбор);
			Для каждого стр из НайденныйСтроки цикл
				стр.ОплаченАгентом = Рез.Оплачен;
				стр.ОтмененНаСайте = Рез.Отменен;
			КонецЦикла;
	КонецЦикла;
	Возврат ТабЗаказов;
	
КонецФункции

Функция ПроверитьОплату(ТабЗаказов)
	СписокЗаказов2 = ТабЗаказов.ВыгрузитьКолонку("ЗаказСсылка");
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ЗаказПокупателя.Ссылка,
	             |	ЗаказПокупателя.СуммаДокумента
	             |ПОМЕСТИТЬ втЗаказы
	             |ИЗ
	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	             |ГДЕ
	             |	ЗаказПокупателя.Ссылка В(&СписокЗаказов)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втЗаказы.Ссылка КАК ЗаказПокупателя,
	             |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетовОстаток,
	             |	втЗаказы.СуммаДокумента
	             |ИЗ
	             |	втЗаказы КАК втЗаказы
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	             |				,
	             |				Сделка В (&СписокЗаказов)
	             |					И ДоговорКонтрагента.ТипДоговора = &типПредоплата) КАК ВзаиморасчетыСКонтрагентамиОстатки
	             |		ПО втЗаказы.Ссылка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка";
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов2);
	Запрос.УстановитьПараметр("типПредоплата", Справочники.ТипыДоговоров.НайтиПоКоду("00001")); //Предоплата

	Рез = Запрос.Выполнить().Выбрать();
	
	отбор = новый структура("ЗаказСсылка");
	Пока Рез.Следующий() Цикл
		Если Рез.СуммаВзаиморасчетовОстаток+Рез.СуммаДокумента<=0 тогда
			отбор.ЗаказСсылка = Рез.ЗаказПокупателя;
			НайденныйСтроки = ТабЗаказов.НайтиСтроки(Отбор);
			Для каждого стр из НайденныйСтроки цикл
				стр.Оплачен = истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат ТабЗаказов;  
КонецФункции

Функция ПолучитьСообщениеТК(ТабЗаказов)
	СписокЗаказов2 = ТабЗаказов.ВыгрузитьКолонку("ЗаказСсылка");
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ЗаказПокупателяРеквизитыЗаказаТК.Ссылка как ЗаказПокупателя,
	             |	ЗаказПокупателяРеквизитыЗаказаТК.Поле,
	             |	ВЫРАЗИТЬ(ЗаказПокупателяРеквизитыЗаказаТК.Значение КАК СТРОКА(1000)) КАК ОшибкаТК
	             |ИЗ
	             |	Документ.ЗаказПокупателя.РеквизитыЗаказаТК КАК ЗаказПокупателяРеквизитыЗаказаТК
	             |ГДЕ
	             |	ЗаказПокупателяРеквизитыЗаказаТК.Ссылка В(&СписокЗаказов)
	             |	И ЗаказПокупателяРеквизитыЗаказаТК.Поле = ""Ошибка ДПД""";
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов2);
	Рез = Запрос.Выполнить().Выбрать();
	
	отбор = новый структура("ЗаказСсылка");
	Пока Рез.Следующий() Цикл
		Если СокрЛП(Рез.ОшибкаТК)<>"" тогда
			отбор.ЗаказСсылка = Рез.ЗаказПокупателя;
			НайденныйСтроки = ТабЗаказов.НайтиСтроки(Отбор);
			Для каждого стр из НайденныйСтроки цикл
				стр.СообщениеТК = СокрЛП(Рез.ОшибкаТК);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат ТабЗаказов;  
КонецФункции

Функция ПолучитьСтатусыЗаказов(ТабЗаказов)
	СписокЗаказов = ТабЗаказов.ВыгрузитьКолонку("ЗаказСсылка");
	Статусы = ОбменСУТИнтернетМагазин.ПолучитьстатусыЗаказов(списокЗаказов);
	отбор = новый структура("ЗаказСсылка");
	
	Для каждого стрСтатусов из Статусы цикл
		Если ЗначениеЗаполнено(стрСтатусов.Заказ) тогда
			отбор.ЗаказСсылка = стрСтатусов.Заказ;
			НайденныйСтроки = ТабЗаказов.НайтиСтроки(Отбор);
			Для каждого стр из НайденныйСтроки цикл
				стр.Статус = СокрЛП(стрСтатусов.СтатусРасшифровка);
				Если стр.Статус="5.Отгружен Частично" или
					 стр.Статус="9.На Отгрузке(частично)" тогда  //какой то косяк в функции, проверяем эти статусы по старой схеме
					стр.Статус = ОбменСУТИнтернетМагазин.ПолучитьСтатусЗаказаПоСхеме(стр.ЗаказСсылка, стр.ЗаказСсылка.Транзит, стр.ЗаказСсылка.ПометкаУдаления);
                КонецЕсли;
				
				ВремяОтсечкиЗаказа = КолесаТут.ПолучитьДатуОтгрузкиЗаказа(ТекущаяДата(), стрСтатусов.Заказ).ВремяОтсечки;
				ВремяСогласованияСТК =стр.ДатаСогласованияСТК;
				Отсечка = ВремяОтсечкиЗаказа-НачалоДня(ВремяОтсечкиЗаказа);
				Если значениеЗаполнено(ВремяСогласованияСТК) 
					и НачалоДня(ВремяСогласованияСТК)=НачалоДня(стрСтатусов.Заказ.ДатаОтгрузки) 
					и ВремяСогласованияСТК>НачалоДня(ВремяСогласованияСТК)+Отсечка тогда
					ДПДСогласовалПослеДатыОтсечки = истина;
				иначе
					ДПДСогласовалПослеДатыОтсечки = ложь;
				КонецЕсли;
				
				Если стр.Статус = "2.Подтвержден" 
					и стр.НомерЗаказаТК<>"" и не ДПДСогласовалПослеДатыОтсечки тогда
					стр.Статус = "Согласован с ТК";
				ИначеЕсли стр.Статус = "2.Подтвержден" 
					и стр.НомерЗаказаТК<>"" и  ДПДСогласовалПослеДатыОтсечки тогда
					стр.Статус = "Ошибка ТК";	
				ИначеЕсли стр.Статус = "2.Подтвержден" 
					и стр.ЗаказСсылка.ИМСклиентомСогласовано 
					и (стр.ЗаказСсылка.СтатусПеревозчика ="" или стр.ЗаказСсылка.СтатусПеревозчика ="OrderPending") тогда
					стр.Статус = "Ожидает согласования с ТК";
				ИначеЕсли стр.Статус = "2.Подтвержден" и не стр.ЗаказСсылка.ИМСклиентомСогласовано тогда
					стр.Статус = "Ожидаем согласования с клиентом";
				ИначеЕсли стр.Статус = "2.Подтвержден" тогда
					стр.Статус = "Ошибка ТК";
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат ТабЗаказов;
КонецФункции

Функция ПолучитьДатыОтгрузкиЗаказов(ТабЗаказов)
	СписокЗаказов = ТабЗаказов.ВыгрузитьКолонку("ЗаказСсылка");
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗаказПокупателя.Ссылка
	             |ПОМЕСТИТЬ втИсходныеЗаказы
	             |ИЗ
	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	             |ГДЕ
	             |	ЗаказПокупателя.Ссылка В(&СписокЗаказов)
	             |	И ЗаказПокупателя.ИМСклиентомСогласовано
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	А.ЗаказОбъединенный,
	             |	А.ЗаказИсходный
	             |ПОМЕСТИТЬ втОбъединенныеЗаказы
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ЗаказПокупателяЗаказы.Ссылка КАК ЗаказОбъединенный,
	             |		ЗаказПокупателяЗаказы.ЗаказПокупателя КАК ЗаказИсходный
	             |	ИЗ
	             |		втИсходныеЗаказы КАК втИсходныеЗаказы
	             |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
	             |			ПО втИсходныеЗаказы.Ссылка = ЗаказПокупателяЗаказы.ЗаказПокупателя
	             |	ГДЕ
	             |		ЗаказПокупателяЗаказы.Ссылка.Проведен
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		втИсходныеЗаказы.Ссылка,
	             |		втИсходныеЗаказы.Ссылка
	             |	ИЗ
	             |		втИсходныеЗаказы КАК втИсходныеЗаказы) КАК А
	             |ГДЕ
	             |	А.ЗаказОбъединенный.Проведен
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втОбъединенныеЗаказы.ЗаказОбъединенный,
	             |	втОбъединенныеЗаказы.ЗаказИсходный,
	             |	Продажи.ДокументПродажи,
	             |	Продажи.ДатаПродажи
	             |ИЗ
	             |	втОбъединенныеЗаказы КАК втОбъединенныеЗаказы
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |			ЗаказыПокупателейОбороты.Регистратор КАК ДокументПродажи,
	             |			ЗаказыПокупателейОбороты.Регистратор.Дата КАК ДатаПродажи,
	             |			ЗаказыПокупателейОбороты.ЗаказПокупателя КАК ЗаказПокупателя
	             |		ИЗ
	             |			РегистрНакопления.ЗаказыПокупателей.Обороты(
	             |					,
	             |					,
	             |					Регистратор,
	             |					ЗаказПокупателя В
	             |						(ВЫБРАТЬ
	             |							втОбъединенныеЗаказы.ЗаказОбъединенный
	             |						ИЗ
	             |							втОбъединенныеЗаказы)) КАК ЗаказыПокупателейОбороты
	             |		ГДЕ
	             |			(ЗаказыПокупателейОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	             |					ИЛИ ЗаказыПокупателейОбороты.Регистратор ССЫЛКА Документ.ЧекККМ
	             |					ИЛИ ЗаказыПокупателейОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах)) КАК Продажи
	             |		ПО втОбъединенныеЗаказы.ЗаказОбъединенный = Продажи.ЗаказПокупателя";
				 Запрос.УстановитьПараметр("СписокЗаказов",СписокЗаказов);
				 Рез = Запрос.Выполнить().Выбрать();
				 
				 отбор = новый структура("ЗаказСсылка");
				 Пока Рез.Следующий() Цикл
					 Если ЗначениеЗаполнено(Рез.ДатаПродажи) тогда
						 отбор.ЗаказСсылка = Рез.ЗаказИсходный;
						 НайденныйСтроки = ТабЗаказов.НайтиСтроки(Отбор);
						 Для каждого стр из НайденныйСтроки цикл
							 стр.ДатаОтгрузки = Формат(рез.ДатаПродажи,"ДФ=dd.MM.yyyy");
						 КонецЦикла;
					 КонецЕсли;
				 КонецЦикла;
				 Возврат ТабЗаказов; 
КонецФункции

Функция GetCost(Orders)
	URL = "www.yst.ru/im17";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "ListOfOrdersWhithCost");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	вЗаказ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "OrderWithCost"));

	
	
	СписокЗаказов = Новый СписокЗначений;
	
	ТабЗаказов = Новый ТаблицаЗначений;
	ТабЗаказов.Колонки.Добавить("GUID", Новый ОписаниеТипов("Строка"));
	ТабЗаказов.Колонки.Добавить("ЗаказСсылка",Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
    ТабЗаказов.Колонки.Добавить("НоменклатураКод",Новый ОписаниеТипов("Строка"));
    ТабЗаказов.Колонки.Добавить("Себестоимость",Новый ОписаниеТипов("Число"));
	ТабЗаказов.Колонки.Добавить("СебестоимостьСБонусом",Новый ОписаниеТипов("Число"));
	ТабЗаказов.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
	ТабЗаказов.Колонки.Добавить("Ошибка",Новый ОписаниеТипов("Строка"));

	
	
	Для каждого Заказ из Orders.GUID цикл
		Попытка
			УИД = Новый УникальныйИдентификатор(СокрЛП(Заказ));
			ЗаказСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(УИД);
			СписокЗаказов.Добавить(ЗаказСсылка);
		Исключение
			ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			нстр = ТабЗаказов.Добавить();
			нстр.НоменклатураКод="";
			нстр.Ошибка="Заказ не найден";
			нстр.GUID = Заказ;
			нстр.Себестоимость=0;
			нстр.СебестоимостьСБонусом=0;
			нстр.Цена=0;
		КонецПопытки;
		
	КонецЦикла;

	Себестоимость = КолесаТут.ПолучитьСебестоимостьЗаказов(СписокЗаказов);
	
	Для каждого стр из Себестоимость Цикл
		нстр = ТабЗаказов.Добавить();
		нстр.GUID = стр.ЗаказПокупателя.УникальныйИдентификатор();
		нстр.ЗаказСсылка = стр.ЗаказПокупателя;
		нстр.НоменклатураКод = стр.НоменклатураКод;
		нстр.Себестоимость = стр.Себестоимость;
		нстр.СебестоимостьСБонусом = стр.СебестоимостьСУчетомБонуса;
		нстр.Цена = стр.Цена;
	КонецЦикла;
	
	Для каждого стр из ТабЗаказов Цикл
		вЗаказ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "OrderWithCost"));
		вЗаказ.GUID = стр.GUID;
		вЗаказ.Code = стр.НоменклатураКод;
		вЗаказ.Price = стр.Себестоимость;
		вЗаказ.PriceWithBonus = стр.СебестоимостьСБонусом;
		вЗаказ.Cost = стр.Цена;
		вЗаказ.Error = стр.Ошибка;

		РезультатОперации.Order.Добавить(вЗаказ);
	КонецЦикла;
	
	Возврат РезультатОперации;
КонецФункции

Функция CreateReal(OrderProperties, Goods)
	времяНачала=ТекущаяУниверсальнаяДатаВМиллисекундах();
	URL = "www.yst.ru/im17";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProducts"));
	
	Success = Истина;
	OrderNumber = "";
	OrderGUID = "";
	Ошибка = "";
	ЭтоРедактирование = ?(СокрЛП(OrderProperties.OrderGuid)="",ложь, истина);
		
	РезультатОперации.Products		 = Goods;
	РезультатОперации.Success		 = Success;
	РезультатОперации.OrderNumber	 = OrderNumber;
	РезультатОперации.OrderGUID		 = OrderGUID;
	РезультатОперации.Error			 = Ошибка;
	
	Возврат РезультатОперации;
КонецФункции

Функция setPaymet(OrderGUID, isReturn, Payed, TransactionNumber, TransactionDateTime, customerType, Customer, Summ, Comment, IdPaymentAgent="")
	
	Success = истина;
	OrderNumber = "";
    ОписаниеОшибки = "";
	ЕстьЗаказ = ложь;
	Оплата = неопределено;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML2 = Новый ЗаписьXML;
	Попытка
		УИД = Новый УникальныйИдентификатор(СокрЛП(OrderGUID));
		ЗаказСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(УИД);
		ИмяФайла=ЗаказСсылка.НомерВходящегоДокумента;
	Исключение
        ИмяФайла = "";
	КонецПопытки;	
	
	Если ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка() Или ЗаказСсылка = Неопределено Тогда
		ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
		ИмяФайла = "";
		ЕстьЗаказ = ложь;
	Иначе
	    ЕстьЗаказ = истина;
	КонецЕсли;

	Если сокрЛП(имяФайла)<>"" тогда
		имяФайла="D:\1C\KOLESATYT\" + "edit\"+имяФайла+"_"+Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd HH-mm-ss'");
	Иначе
		имяФайла="D:\1C\KOLESATYT\" + "edit\"+"ОПК_"+Customer.ULProperties.Name+"("+Customer.Phone+") "+ Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd HH-mm-ss'")+"_";
	КонецЕсли;
	
	
	URL = "www.yst.ru/im17";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProducts"));
	
	
	Если  ЕстьЗаказ тогда
		попытка
			ЗаказОб = ЗаказСсылка.ПолучитьОбъект();
			
			ЗаказОб.НомерТранзакцииПлатежнойСистемы = TransactionNumber;
			
			ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
			Если customerType = "ЮР" тогда
				//08.02.19 Смирнов, 61398 Принимать в 1С признак оплаты юр лиц от Яндекс Кассы
				//проверка на лимит осуществляется с учетом ДопустимаяСуммаЗадолженностиИМ
				КонтрОб = ЗаказСсылка.Контрагент.ПолучитьОбъект();
				КонтрОб.ДопустимаяСуммаЗадолженностиИМ = ЗаказСсылка.СуммаДокумента;
				КонтрОб.Записать();
			иначе
				Если customerType = "ФИЗ" тогда
					Если СокрЛП(IdPaymentAgent)="" или СокрЛП(IdPaymentAgent) = "94391" тогда
						Эквайер = Справочники.Контрагенты.НайтиПоКоду("94391"); //НКО ЭПС
						ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000001");
					ИначеЕсли СокрЛП(IdPaymentAgent)= "П022676" тогда
						Эквайер = Справочники.Контрагенты.НайтиПоКоду("П022676"); //НКО ЯНДЕКС.ДЕНЬГИ ООО
						ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000003");
					КонецЕсли;
				ИначеЕсли customerType = "ФИЗ_Кредит" тогда
					Эквайер = Справочники.Контрагенты.НайтиПоКоду("94608"); //Кредит Лайн
					ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000002");
				КонецЕсли;	
				Оплата = КолесаТут.СформироватьОплатуПлатежнымиКартами(ЗаказСсылка,Эквайер, ДоговорЭквайринга, TransactionDateTime,isReturn,Справочники.Контрагенты.ПустаяСсылка(),0);
			КонецЕсли;
		исключение
			ОписаниеОшибки = ""+ОписаниеОшибки + " Ошибка при создании Оплаты платежными картами: "+ОписаниеОшибки();
			Success = Ложь;
		конецпопытки;
	Иначе
		Если СокрЛП(OrderGUID)<>"" тогда
			ОписаниеОшибки = ОписаниеОшибки+"Заказ покупателя не найден!"+Символы.ПС;
		    Success = ложь;
		иначе
			попытка 
				Контрагент = Справочники.Контрагенты.ПустаяСсылка();
				Если customer.Type = "ФИЗ" или customer.Type = "ФИЗ_Кредит" тогда //Физик платил картой
					Телефон = КолесаТут.УбратьЛишниеСимволыИзТелефона(СокрЛП(customer.Phone));
					Если Телефон<>"" тогда
						Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("УИД_ИМ",Телефон);	
					Иначе
						Success = Ложь;
						ОписаниеОшибки = ОписаниеОшибки+Символы.ПС+"Не удалось создать контрагента, не заполнен телефон";
					КонецЕсли;
				Иначе
					Success = Ложь;
					ОписаниеОшибки = ОписаниеОшибки+Символы.ПС+"Тип контрагента должен быть ФИЗ или ФИЗ_Кредит";
				КонецЕсли;
				
				Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() и Success Тогда
					Контрагент = КолесаТут.СоздатьКонтрагента(Справочники.Подразделения.НайтиПоКоду("00005"), customer);
					НовыйКонтрагент = Истина;
					Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() или Контрагент = неопределено тогда
						Success = Ложь;
						ОписаниеОшибки = ОписаниеОшибки+Символы.ПС+"Не удалось создать контрагента";
					КонецЕсли;
				КонецЕсли;
				
				Если Summ = 0 тогда
					Success = Ложь;
					ОписаниеОшибки = ОписаниеОшибки+Символы.ПС+"Не указана сумма оплаты";
				КонецЕсли;
				
				Если Success тогда
					Если customerType = "ФИЗ" или customerType = "ФИЗ_Кредит" тогда
						Если customerType = "ФИЗ" тогда
							Эквайер = Справочники.Контрагенты.НайтиПоКоду("94391"); //НКО ЭПС
							ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000001");
						ИначеЕсли customerType = "ФИЗ_Кредит" тогда
							Эквайер = Справочники.Контрагенты.НайтиПоКоду("94608"); //Кредит Лайн
							ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000002");
						КонецЕсли;	
						Оплата = КолесаТут.СформироватьОплатуПлатежнымиКартами(ЗаказСсылка,Эквайер, ДоговорЭквайринга, TransactionDateTime,isReturn,Контрагент,Summ, Comment);
					КонецЕсли;
				КонецЕсли;
				
			исключение
				Succes = ложь;
				ОписаниеОшибки = ОписаниеОшибки+Символы.ПС+"Не удалось создать оплату картой"+ ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	РезультатОперации.Products		 = Товары;
	РезультатОперации.Success		 = Success;
	РезультатОперации.OrderNumber	 = ?(ЗначениеЗаполнено(Оплата),Оплата.Номер,"");
	РезультатОперации.OrderGUID		 = ""+?(ЗначениеЗаполнено(Оплата),Оплата.УникальныйИдентификатор(),"");;
	РезультатОперации.Error			 = ОписаниеОшибки;
		
	Возврат РезультатОперации;

КонецФункции

Функция setPaymetOld(OrderGUID, isReturn, Payed, TransactionNumber, TransactionDateTime, customerType)
	
	Success = истина;
	OrderNumber = "";
    ОписаниеОшибки = "";
	
	ЗаписьXML = Новый ЗаписьXML;
	Попытка
		УИД = Новый УникальныйИдентификатор(СокрЛП(OrderGUID));
		ЗаказСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(УИД);
		ИмяФайла=ЗаказСсылка.НомерВходящегоДокумента;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки+"Заказ покупателя не найден!"+Символы.ПС;
		Success = ложь;
        ИмяФайла = "";
	КонецПопытки;	
	
	Если ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка() Или ЗаказСсылка = Неопределено Тогда
		ОписаниеОшибки = ОписаниеОшибки+"Заказ покупателя не найден!"+Символы.ПС;
		Success = ложь;
		ИмяФайла = "";
	КонецЕсли;

	Если сокрЛП(имяФайла)<>"" тогда
		имяФайла="D:\1C\KOLESATYT\" + "edit\"+имяФайла+"_"+Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd HH-mm-ss'");
	Иначе
		имяФайла="D:\1C\KOLESATYT\" + "edit\"+"ERR_"+Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd HH-mm-ss'")+"_";
		ОписаниеОшибки = ОписаниеОшибки+"Заказ покупателя не найден!"+Символы.ПС;
		Success = ложь;
	КонецЕсли;
	
	ЗаписьXML.ОткрытьФайл(ИмяФайла+"_setPaymet.xml");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("PaymetProperties");
	ЗаписьXML.ЗаписатьНачалоЭлемента("OrderNumber"); ЗаписьXML.ЗаписатьТекст(""+?(success,ЗаказСсылка.НомерВходящегоДокумента,"n/a")); ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("GUID"); ЗаписьXML.ЗаписатьТекст(""+OrderGUID); ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("customerType"); ЗаписьXML.ЗаписатьТекст(""+customerType); ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("isReturn"); ЗаписьXML.ЗаписатьТекст(""+isReturn); ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Payed"); ЗаписьXML.ЗаписатьТекст(""+Payed); ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("TransactionNumber"); ЗаписьXML.ЗаписатьТекст(""+TransactionNumber); ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("TransactionDateTime"); ЗаписьXML.ЗаписатьТекст(""+TransactionDateTime); ЗаписьXML.ЗаписатьКонецЭлемента();
    ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();
	
	URL = "www.yst.ru/im17";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProducts"));
	
	
	Если  Success тогда
		попытка
			ЗаказОб = ЗаказСсылка.ПолучитьОбъект();
			
			ЗаказОб.НомерТранзакцииПлатежнойСистемы = TransactionNumber;
			
			ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
			Если customerType = "ФИЗ" тогда
				Эквайер = Справочники.Контрагенты.НайтиПоКоду("94391"); //НКО ЭПС
				ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000001");
			ИначеЕсли customerType = "ФИЗ_Кредит" тогда
				Эквайер = Справочники.Контрагенты.НайтиПоКоду("94608"); //Кредит Лайн
				ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000002");
			КонецЕсли;	
			КолесаТут.СформироватьОплатуПлатежнымиКартами(ЗаказСсылка,Эквайер, ДоговорЭквайринга, TransactionDateTime,isReturn,Справочники.Контрагенты.ПустаяСсылка(),0);
		исключение
			ОписаниеОшибки = ""+ОписаниеОшибки + " Ошибка при создании Оплаты платежными картами: "+ОписаниеОшибки();
			Success = Ложь;
		конецпопытки;
		
	КонецЕсли;
	
	РезультатОперации.Products		 = Товары;
	РезультатОперации.Success		 = Success;
	РезультатОперации.OrderNumber	 = ?(ЗначениеЗаполнено(ЗаказСсылка),ЗаказСсылка.Номер,"");
	РезультатОперации.OrderGUID		 = ""+OrderGUID;
	РезультатОперации.Error			 = ОписаниеОшибки;
		
	Возврат РезультатОперации;

КонецФункции

Функция PutFile(Data)
	//ДвоичнДанные = Base64Значение(Data);
	Data.Записать("D:\1C\file.rrr");
	Возврат истина;
КонецФункции

Функция Get503(BeginDate, EndDate)
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(503);
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
		Обработка = ВнешниеОтчеты.Создать(ИмяФайла,ложь); 
	Иначе 
		Обработка = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
	КонецЕсли;
	
	ТабДок = новый ТабличныйДокумент;
	Обработка.НачДата = Дата(BeginDate);
	Обработка.КонДата = КонецДня(Дата(EndDate));
	Обработка.ПоСтатьямИМ = истина;
	
	Обработка.РезультатПодключения = Обработка.ВыполнитьПодключениеКИБПриемнику();
		
	Если Обработка.РезультатПодключения = Неопределено Тогда
		Возврат "Возникли ошибки при подключении к информационной базе-приемнику.";
	КонецЕсли;
	
	ТабДок = Обработка.Сформировать(Ложь);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("XLS");
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	
	возврат ДанныеФайла;
КонецФункции

Функция GetReturns(BeginDate, EndDate)
	
	URL = "www.yst.ru/im17";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "ListOfReturns");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	пВозврат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Return"));

	
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Код КАК НоменклатураКод,
	             |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	             |	ВозвратТоваровОтПокупателяТовары.Количество,
	             |	ВозвратТоваровОтПокупателяТовары.Цена,
	             |	ЗаявкаНаВозвратТоваровТовары.НомерЗаказаИМ,
	             |	ЗаявкаНаВозвратТоваровТовары.НомерЗаказаТК,
	             |	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата
	             |ИЗ
	             |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	             |		ПО ВозвратТоваровОтПокупателяТовары.Ссылка.ЗаявкаОснование = ЗаявкаНаВозвратТоваровТовары.Ссылка
	             |			И ВозвратТоваровОтПокупателяТовары.Номенклатура = ЗаявкаНаВозвратТоваровТовары.Номенклатура
	             |			И ВозвратТоваровОтПокупателяТовары.ДокументПартии = ЗаявкаНаВозвратТоваровТовары.Реализация
	             |ГДЕ
	             |	ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен = ИСТИНА
	             |	И ВозвратТоваровОтПокупателяТовары.Ссылка.Дата МЕЖДУ &ДатаН И &ДатаК
	             |	И НЕ ЗаявкаНаВозвратТоваровТовары.НомерЗаказаИМ = """"";
				 
				 Запрос.УстановитьПараметр("ДатаН",Дата(BeginDate));
				 Запрос.УстановитьПараметр("ДатаК",КонецДня(Дата(EndDate)));
				 
				 Рез = Запрос.Выполнить().Выбрать();
				 
				 Пока Рез.Следующий() Цикл
					 пВозврат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Return"));
					 пВозврат.Date = Рез.Дата;
					 пВозврат.inOrderNumber = Рез.НомерЗаказаИМ;
					 пВозврат.Code = Рез.НоменклатураКод;
					 пВозврат.Quantity = Рез.Количество;
                     пВозврат.Price = Рез.Цена;
					 пВозврат.TCOrderNumber = Рез.НомерЗаказаТК;
					 
					 РезультатОперации.Return.Добавить(пВозврат);
				 КонецЦикла;
				 
				 Возврат РезультатОперации;
КонецФункции


//"D:\1C\KOLESATYT\" = "D:\1C\KOLESATYT\";

