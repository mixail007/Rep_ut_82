Функция GetStatus(ListOfOrders, Client)
	URL = "www.yst.ru/im";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "ListOfOrders");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	
	Контрагент=Справочники.Контрагенты.НайтиПоКоду(СокрЛП(Client));
	
	Список=ListOfOrders.ПолучитьСписок("Order");
	ВсегоЗаписей=Список.Количество();
	
	СписокЗаказов=новый списокЗначений;
	Для ии=0 по ВсегоЗаписей-1 Цикл
		Запись=Список.Получить(ии);
		СписокЗаказов.Добавить(СокрЛП(Запись.Number));
	КонецЦикла;
	
	//получаем список
	//Статусы=ОбменСУТИнтернетМагазин.ПолучитьСтатусыЗаказовПоНомерам(СписокЗаказов,Контрагент);
	Статусы=ОбменСУТИнтернетМагазин.ПолучитьСтатусыЗаказовПоНомерам(СписокЗаказов,СокрЛП(Client));
	
	Для Каждого статус из Статусы Цикл
		Заказ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Order_new"));
		Заказ.Number=Статус.Номер;
		Заказ.Status=Статус.статус;
		Заказ.Date="";
		Заказ.Comment="";
		Заказ.ShippingDay="";
		Заказ.DeliveryAddress="";
		Заказ.Deleted=false;

		РезультатОперации.Order.Добавить(Заказ);
		//РезультатОперации.ListOfOrders.Добавить(Заказ);
	конецЦикла;
	Возврат РезультатОперации;
КонецФункции

Функция CreateOrder(Partner, Goods, Storage, Comment, isTestOrder, ShippingDay, isReserve, inOrderNumber, ULProp, DirectionOfShipment, amenities,PaymentDate="")
	СхемаЗаказовДляАЭ = ?(Partner="П001549",ложь,истина); //этим же вебсервисом создаются заказы для Шинтрейда
	
	URL = "www.yst.ru/im";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProducts"));
	
	Ошибка = "";
	Success = Истина;
	OrderNumber = "";
	OrderGUID = "";
	
	КонтрагентРозница = Справочники.Контрагенты.НайтиПоКоду("94143");
	КонтрагентАЭ = Справочники.Контрагенты.НайтиПоКоду("П000382");
	
	Подразделение = Справочники.Подразделения.НайтиПоКоду(Storage);	
	
	КодКонтрагента = Partner;
	Если СтрДлина(КодКонтрагента)>15 тогда //это УИДИМ и ищем по реквизиту УИДИМ
		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("УИД_ИМ",КодКонтрагента,Справочники.Контрагенты.КлиентыИМ);	
	иначе	
		Контрагент = Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);
	КонецЕсли;
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Контрагент = СоздатьКонтрагента(КодКонтрагента,Подразделение,неопределено);
		Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() или Контрагент = неопределено тогда
			Success = Ложь;
			Ошибка = "Не удалось найти контрагента";
		КонецЕсли;
	КонецЕсли;
	
	
	//23.11.15 Смирнов 
	//если заказ уже есть, то не создаем новый, а возвращаем уже созданный
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗаказПокупателяТовары.Ссылка.Номер,
	             |	ЗаказПокупателяТовары.НомерСтроки,
	             |	ЗаказПокупателяТовары.Количество,
	             |	ЗаказПокупателяТовары.Номенклатура.Код,
	             |	ЗаказПокупателяТовары.Цена,
	             |	ЗаказПокупателяТовары.Ссылка
	             |ИЗ
	             |	(ВЫБРАТЬ ПЕРВЫЕ 1
	             |		ЗаказПокупателя.Ссылка КАК Ссылка
	             |	ИЗ
	             |		Документ.ЗаказПокупателя КАК ЗаказПокупателя
	             |	ГДЕ
	             |		ЗаказПокупателя.Проведен
	             |		И ЗаказПокупателя.Контрагент = &Контрагент
	             |		И ЗаказПокупателя.НомерВходящегоДокумента = &НомерВходящегоДокумента
	             |		И ЗаказПокупателя.Подразделение = &Подразделение
	             |		И ЗаказПокупателя.Дата >= &НачалоГода) КАК Заказ
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	             |		ПО Заказ.Ссылка = ЗаказПокупателяТовары.Ссылка";
	Запрос.УстановитьПараметр("НомерВходящегоДокумента",СокрЛП(inOrderNumber));
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("НачалоГода",НачалоГода(ТекущаяДата()));
	Рез=Запрос.Выполнить().Выбрать();
	ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
	Пока Рез.Следующий() Цикл
		
		Success = истина;
		Ошибка = "";
		OrderNumber = СокрЛП(Рез.Номер);
		OrderGUID = Строка(Рез.Ссылка.УникальныйИдентификатор());
		
		Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Product"));
		//Товар.RowNumber=(Число(Рез.НомерСтроки));
		//Товар.Code=(Строка(Рез.НоменклатураКод));
		//Товар.Quantity=(Число(Рез.Количество));
		//Товар.Price=(Число(Рез.Цена));
		//Товары.Products.Добавить(Товар);
	КонецЦикла;
	Если Рез.Количество()>0 тогда
		РезультатОперации.Products		 = Товары;
		РезультатОперации.Success		 = Success;
		РезультатОперации.OrderNumber	 = OrderNumber;
		РезультатОперации.OrderGUID		 = OrderGUID;
		РезультатОперации.Error			 = Ошибка;
		Возврат РезультатОперации;
	КонецЕсли;
	//23.11.15 Смирнов	
	
	
	//+++ 15.06.2015 - длина увеличена с 250 до 500 символов
	Если СтрДлина(Comment) > 500 Тогда
		Success = Ложь;
		Ошибка = "Комментарий к заказу превышает допустимые 500 символов";
	КонецЕсли;
	
	//Сохраняем каждый набор товаров в файл, чтоб сохранялась история о запросах	
	//Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.ОткрытьФайл("D:\1C\"+Partner+"\Текущий.xml");
	//ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Goods);
	//ЗаписьXML.Закрыть();
	//
	//ЧтениеXML = Новый ЧтениеXML;
	//ЧтениеXML.ОткрытьФайл("D:\1C\"+Partner+"\Текущий.xml");
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("НомерСтроки");
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура");
	ТаблицаЗаказа.Колонки.Добавить("НоменклатураСпр");
	ТаблицаЗаказа.Колонки.Добавить("Количество");
	ТаблицаЗаказа.Колонки.Добавить("КоличествоОстаток");
	ТаблицаЗаказа.Колонки.Добавить("Цена");
	
	ТаблицаУслуг = ТаблицаЗаказа.Скопировать();
	
	//Запись = Новый Структура;
	//
	//Пока ЧтениеXML.Прочитать() Цикл
	//	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	//		Имя = ЧтениеXML.Имя;
	//	КонецЕсли;
	//	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
	//		Запись.Вставить(Имя, ЧтениеXML.Значение);      //информацию фнутри блока XML помещаем в структуру
	//	КонецЕсли;
	//	Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//		Если ЧтениеXML.Имя = "Products" Тогда
	//			СтрокаТЗ = ТаблицаЗаказа.Добавить();
	//			СтрокаТЗ.НомерСтроки = Запись.RowNumber;
	//			СтрокаТЗ.Номенклатура = Запись.Code;
	//			СтрокаТЗ.Количество =  Число(Запись.Quantity);
	//			СтрокаТЗ.Цена =  ?(ТипЗНЧ(Запись.Price)=Тип("Строка"),Число(Запись.Price),0);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//ЧтениеXML.Закрыть();
	
	Для каждого товар из Goods.Products цикл
		СтрокаТЗ = ТаблицаЗаказа.Добавить();
		СтрокаТЗ.НомерСтроки = товар.RowNumber;
		СтрокаТЗ.Номенклатура = товар.Code;
		СтрокаТЗ.Количество =  Число(товар.Quantity);
		СтрокаТЗ.Цена =  Число(товар.Price);
	КонецЦикла;
	
	Для каждого товар из amenities.Products цикл
		СтрокаТЗ = ТаблицаУслуг.Добавить();
		СтрокаТЗ.НомерСтроки = товар.RowNumber;
		СтрокаТЗ.Номенклатура = товар.Code;
		//СтрокаТЗ.НоменклатураСпр=Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
		//СтрокаТЗ.НоменклатураСпр = Справочники.Номенклатура.НайтиПоКоду("ЛН00018",,Справочники.Номенклатура.НайтиПоКоду("ЛН00002")); //Транспортная услуга 44-ТР возмещаемые
		//15.12.16 Смирнов, Н.Яковлева попросила новую номенклатуру
		СтрокаТЗ.НоменклатураСпр = Справочники.Номенклатура.НайтиПоКоду("ЛН02397",,Справочники.Номенклатура.НайтиПоКоду("ЛН00004")); //Доставка товара
		
		СтрокаТЗ.Количество =  Число(товар.Quantity);
		СтрокаТЗ.Цена =  Число(товар.Price);
	КонецЦикла;
	
	Если Подразделение = Справочники.Подразделения.ПустаяСсылка() Тогда
		Success = Ложь;
		Ошибка = "Не удалось найти подразделение по коду " + Storage;
	КонецЕсли;
	
	//Аксессуары = Ложь;
	
	СписокНоменклатуры = Новый СписокЗначений;
	Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
		Номенкл = Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
		Если Номенкл = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Success = Ложь;
			Ошибка = "Не удалось найти номенклатуру по коду " + СтрокаТЗ.Номенклатура;
		КонецЕсли;
		СтрокаТЗ.НоменклатураСпр=Номенкл;
		СписокНоменклатуры.Добавить(Номенкл);		
	КонецЦикла;	
	
	//Если НЕ Аксессуары Тогда
	
	ДоговорДляЗаказа = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ВремЗаказДляДоговора = Документы.ЗаказПокупателя.СоздатьДокумент();
	ВремЗаказДляДоговора.Дата = ТекущаяДата();
	ВремЗаказДляДоговора.Контрагент = Контрагент;
	ВремЗаказДляДоговора.Транзит = Истина;
	
	Если Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") Тогда  //Головное
		ВремЗаказДляДоговора.Транзит = Ложь;
	КонецЕсли;
		
	ВремЗаказДляДоговора.Подразделение = Подразделение;
	списокДоговоров = РегистрыСведений.ДоговорыПоТоварнымГруппам.СоздатьНаборЗаписей();
	СписокДоговоров.Отбор.Контрагент.значение = Контрагент;
	СписокДоговоров.Отбор.Контрагент.использование = истина;
	СписокДоговоров.Отбор.Подразделение.значение = 	Подразделение;
	СписокДоговоров.Отбор.Подразделение.использование = истина;
	СписокДоговоров.Отбор.КлиентКОЛЕСАТУТ.значение = 	ЛОЖЬ; //этим методом только ШИНТРЕЙД пользуется
	СписокДоговоров.Отбор.КлиентКОЛЕСАТУТ.использование = истина;
	
	СписокДоговоров.Прочитать();
	ТаблицаДоговоров = СписокДоговоров.Выгрузить();
	
	Если ТаблицаДоговоров.Количество()>0 Тогда
		ДоговорДляЗаказа =  ТаблицаДоговоров[0].Договор;
	иначе	  
		//***договор получаем по единому алгоритму: сначала факторинг, потом - продажа
		ДоговорДляЗаказа = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(ВремЗаказДляДоговора);
	конецЕсли;

	ВремЗаказДляДоговора = неопределено;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокЗаказа", СписокНоменклатуры);
	СписокКонтрагентовОТХ = Новый СписокЗначений;
	СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);
	//СписокКонтрагентовОТХ.Добавить(Контрагент); //09.10.15 Свои отх видим
	Если Контрагент=КонтрагентРозница тогда
		СписокКонтрагентовОТХ.Добавить(КонтрагентАЭ);//АЭ 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокКонтрагентовОТХ", СписокКонтрагентовОТХ);
	//Запрос.УстановитьПараметр("КонтрагентДляРезерва",Контрагент.КонтрагентДляРезерваИМ);
	Запрос.УстановитьПараметр("КонтрагентДляРезерва",ДоговорДляЗаказа.КонтрагентДляРезерваИМ);

	
	СписокГоловноеПодразделение=новый СписокЗначений;
	СписокГоловноеПодразделение.Добавить(Справочники.Подразделения.ПустаяСсылка());
	СписокГоловноеПодразделение.Добавить(Справочники.Подразделения.НайтиПоКоду("00005"));
	Запрос.УстановитьПараметр("СписокГоловноеПодразделение",СписокГоловноеПодразделение);
	
	Если Storage = "00005" Тогда  //Головное
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	А.Код,
		               |	А.ОстатокНаСкладахИОТХ - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК СвободныйОстаток,
		               |	А.Номенклатура.Ссылка КАК НоменклатураСпр
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		Остатки.Код КАК Код,
		               |		СУММА(Остатки.ОстатокНаСкладахИОТХ) КАК ОстатокНаСкладахИОТХ,
		               |		Остатки.Номенклатура КАК Номенклатура
		               |	ИЗ
		               |		(ВЫБРАТЬ
		               |			ТоварыНаОтветственномХраненииОстатки.Номенклатура.Код КАК Код,
		               |			ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток КАК ОстатокНаСкладахИОТХ,
		               |			ТоварыНаОтветственномХраненииОстатки.Номенклатура КАК Номенклатура
		               |		ИЗ
		               |			РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
		               |					,
		               |					НЕ Склад.ЗапретитьИспользование
		               |						И НЕ Склад.Транзитный
		               |						И Номенклатура В (&СписокЗаказа)
		               |						И Контрагент В (&СписокКонтрагентовОТХ)) КАК ТоварыНаОтветственномХраненииОстатки
		               |		
		               |		ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |		ВЫБРАТЬ
		               |			ТоварыНаСкладахОстатки.Номенклатура.Код,
		               |			ТоварыНаСкладахОстатки.КоличествоОстаток,
		               |			ТоварыНаСкладахОстатки.Номенклатура
		               |		ИЗ
		               |			РегистрНакопления.ТоварыНаСкладах.Остатки(
		               |					,
		               |					НЕ Склад.ЗапретитьИспользование
		               |						И НЕ Склад.Транзитный
		               |						И Номенклатура В (&СписокЗаказа)) КАК ТоварыНаСкладахОстатки
		               |		
		               |		ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |		ВЫБРАТЬ
		               |			РезервДляИМОстатки.Номенклатура.Код,
		               |			РезервДляИМОстатки.КоличествоОстаток,
		               |			РезервДляИМОстатки.Номенклатура
		               |		ИЗ
		               |			РегистрНакопления.РезервДляИМ.Остатки(
		               |					,
		               |					Номенклатура В (&СписокЗаказа)
		               |						И КонтрагентДляРезерваИМ = &КонтрагентДляРезерва
		               |						И Подразделение В (&СписокГоловноеПодразделение)) КАК РезервДляИМОстатки) КАК Остатки
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		Остатки.Номенклатура,
		               |		Остатки.Код) КАК А
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
		               |				,
		               |				ЗаказПокупателя.Проверен
		               |					И НЕ ЗаказПокупателя.Транзит
		               |					И Номенклатура В (&СписокЗаказа)) КАК ЗаказыПокупателейОстатки
		               |		ПО А.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура";
		
	Иначе //Обособленное
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	А.Код,
		               |	А.ОстатокНаСкладахИОТХ - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК СвободныйОстаток,
		               |	А.Номенклатура.Ссылка КАК НоменклатураСпр
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		Остатки.Код КАК Код,
		               |		СУММА(Остатки.ОстатокНаСкладахИОТХ) КАК ОстатокНаСкладахИОТХ,
		               |		Остатки.Номенклатура КАК Номенклатура
		               |	ИЗ
		               |		(ВЫБРАТЬ
		               |			ТоварыНаОтветственномХраненииОстатки.Номенклатура.Код КАК Код,
		               |			ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток КАК ОстатокНаСкладахИОТХ,
		               |			ТоварыНаОтветственномХраненииОстатки.Номенклатура КАК Номенклатура
		               |		ИЗ
		               |			РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
		               |					,
		               |					НЕ Склад.ЗапретитьИспользование
		               |						И Склад.Транзитный
		               |						И Номенклатура В (&СписокЗаказа)
		               |						И Контрагент В (&СписокКонтрагентовОТХ)
		               |						И Склад.Подразделение = &Подразделение) КАК ТоварыНаОтветственномХраненииОстатки
		               |		
		               |		ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |		ВЫБРАТЬ
		               |			ТоварыНаСкладахОстатки.Номенклатура.Код,
		               |			ТоварыНаСкладахОстатки.КоличествоОстаток,
		               |			ТоварыНаСкладахОстатки.Номенклатура
		               |		ИЗ
		               |			РегистрНакопления.ТоварыНаСкладах.Остатки(
		               |					,
		               |					НЕ Склад.ЗапретитьИспользование
		               |						И Склад.Транзитный
		               |						И Номенклатура В (&СписокЗаказа)
		               |						И Склад.Подразделение = &Подразделение) КАК ТоварыНаСкладахОстатки
		               |		
		               |		ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |		ВЫБРАТЬ
		               |			РезервДляИМОстатки.Номенклатура.Код,
		               |			РезервДляИМОстатки.КоличествоОстаток,
		               |			РезервДляИМОстатки.Номенклатура
		               |		ИЗ
		               |			РегистрНакопления.РезервДляИМ.Остатки(
		               |					,
		               |					Номенклатура В (&СписокЗаказа)
		               |						И КонтрагентДляРезерваИМ = &КонтрагентДляРезерва
		               |						И Подразделение = &Подразделение) КАК РезервДляИМОстатки) КАК Остатки
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		Остатки.Номенклатура,
		               |		Остатки.Код) КАК А
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
		               |				,
		               |				ЗаказПокупателя.Проверен
		               |					И ЗаказПокупателя.Транзит
		               |					И Номенклатура В (&СписокЗаказа)
		               |					И ЗаказПокупателя.Подразделение = &Подразделение) КАК ЗаказыПокупателейОстатки
		               |		ПО А.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура";
		
	КонецЕсли;
	
	Если не СхемаЗаказовДляАЭ тогда  //для шинтрейд спб проверку оставляем
		Результат = Запрос.Выполнить().Выгрузить();
		
		ДополнениеКОшибке = "";
		
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			СтрокаРезультат = Результат.Найти(СтрокаТЗ.Номенклатура,"Код");
			Если СтрокаРезультат = Неопределено Тогда
				СтрокаТЗ.КоличествоОстаток = 0;
				Success = Ложь;
			Иначе
				СтрокаТЗ.КоличествоОстаток = СтрокаРезультат.СвободныйОстаток;
				Если СтрокаРезультат.СвободныйОстаток < СтрокаТЗ.Количество Тогда
					Success = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	//КонецЕсли; //Аксессуары
	
	//Создание заказа
	Если Success Тогда
		
		Заказ = Документы.ЗаказПокупателя.СоздатьДокумент();
		Заказ.Дата = ТекущаяДата();
		Если НЕ ShippingDay = "" Тогда  //передается дата отгрузки
			Заказ.ДатаОтгрузки = Дата(ShippingDay);
		КонецЕсли;
		Если isReserve Тогда //Заказы могут быть резервные (закрытваются атвоматически через 10 дней) - дата отгрузки пустая, и с датой отгрузки	
			Заказ.Резерв = Истина;
			Заказ.ДатаОтгрузки = '00010101000000';
		КонецЕсли;
		Заказ.Организация = Справочники.Организации.НайтиПоКоду("00001");
		
		//+++ 15.06.2015 - валютные клиенты
		Если Контрагент.Экспорт и Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов.Код<>"643" тогда
			Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00028"); //Базовая USD
			Заказ.ВалютаДокумента = Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			//СтруктураВалюты    = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Заказ.Дата, Новый Структура("Валюта", Заказ.ВалютаДокумента));
			//КурсДокумента      = СтруктураВалюты.Курс;
			//КратностьДокумента = СтруктураВалюты.Кратность;
			КурсДокумента = константы.КурсUSD.Получить(); //51.9749; //на 15.04.2015
			КратностьДокумента = 1;
			
			Заказ.КурсВзаиморасчетов = КурсДокумента;
			Заказ.КратностьВзаиморасчетов = КратностьДокумента;
		Иначе	
			Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); //Крупный опт
			Заказ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
			Заказ.КурсВзаиморасчетов = 1;
			Заказ.КратностьВзаиморасчетов = 1;
		КонецЕсли;
		
		Заказ.Контрагент = Контрагент;
		Заказ.Транзит = Истина;
		Заказ.НомерВходящегоДокумента=СокрЛП(inOrderNumber);
		
		Если Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") Тогда  //Головное
			Заказ.Транзит = Ложь;
			
		ИначеЕсли ЗначениеЗаполнено(Подразделение) И Подразделение.ОбособленноеПодразделение Тогда 
			Заказ.Склад = Подразделение.Склад;
			Заказ.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
			Заказ.Грузоотправитель = Подразделение.Контрагент;
		КонецЕсли;
		
		Если НЕ isTestOrder Тогда
			Заказ.Проверен = Истина;
		КонецЕсли;
		
		Заказ.Комментарий = "IM Service: " + Comment;
		Заказ.Подразделение = Подразделение;  
		Заказ.СуммаВключаетНДС = Истина;
		Заказ.УчитыватьНДС = Истина;
		Заказ.АвтоРезервирование = Истина;
		Заказ.ССайта = Истина;
		Заказ.НапомнитьОСобытии = Истина;
		Заказ.ТипЗаказа = 10;
		
		Если СокрЛП(DirectionOfShipment)<>"" тогда
			Заказ.ТранспортнаяКомпания = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(DirectionOfShipment));
		КонецЕсли;
		
		//списокДоговоров = РегистрыСведений.ДоговорыПоТоварнымГруппам.СоздатьНаборЗаписей();
		//СписокДоговоров.Отбор.Контрагент.значение = Контрагент;
		//СписокДоговоров.Отбор.Контрагент.использование = истина;
		//СписокДоговоров.Отбор.Подразделение.значение = 	Подразделение;
		//СписокДоговоров.Отбор.Подразделение.использование = истина;
		//СписокДоговоров.Отбор.КлиентКОЛЕСАТУТ.значение = 	ЛОЖЬ; //этим методом только ШИНТРЕЙД пользуется
		//СписокДоговоров.Отбор.КлиентКОЛЕСАТУТ.использование = истина;

		//СписокДоговоров.Прочитать();
		//ТаблицаДоговоров = СписокДоговоров.Выгрузить();
		//
		//Если ТаблицаДоговоров.Количество()>0 Тогда
		//	Заказ.ДоговорКонтрагента =  ТаблицаДоговоров[0].Договор;
		//иначе	  
		//	//***договор получаем по единому алгоритму: сначала факторинг, потом - продажа
		//	Заказ.ДоговорКонтрагента = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(Заказ);
		//конецЕсли;
		
		Заказ.ДоговорКонтрагента = ДоговорДляЗаказа;
		
		//+++ 10.09.2015 - доп.условия на предоплатные договора - по типу!
		услПредоплатногоДоговора = (Заказ.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001") );
		
		//Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		Если НЕ PaymentDate = "" Тогда  //передается дата отгрузки
			ДатаОплаты = КонецДня(Дата(PaymentDate));
			Если  ДатаОплаты<ТекущаяДата() тогда
				Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
			Иначе
				Если КонецДня(ТекущаяДата())+45*86400 < ДатаОплаты тогда //не более 45 дней
					ДатаОплаты = КонецДня(ТекущаяДата())+45*86400;
				КонецЕсли;
				Заказ.ДатаОплаты = ДатаОплаты;
			КонецЕсли;
			
		иначе
			Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		КонецЕсли;
		
		СписокНом = Новый СписокЗначений;
		
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			СтрокаТовары = Заказ.Товары.Добавить();
			СтрокаТовары.Номенклатура = СтрокаТЗ.НоменклатураСпр;
			СтрокаТовары.Коэффициент = 1;
			СтрокаТовары.Количество = СтрокаТЗ.Количество;
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, Заказ, Константы.ВалютаРегламентированногоУчета.Получить()); 
			СтрокаТовары.Цена = СтрокаТЗ.Цена;
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, Заказ);
			РассчитатьСуммуТабЧасти(СтрокаТовары, Заказ);
			РассчитатьСуммуНДСТабЧасти(СтрокаТовары, Заказ);
			СписокНом.Добавить(СтрокаТЗ.НоменклатураСпр);
		КонецЦикла;
		//Услуги
		Для каждого СтрокаТЗ ИЗ ТаблицаУслуг Цикл
			СтрокаУслуги = Заказ.Услуги.Добавить();
			СтрокаУслуги.Номенклатура = СтрокаТЗ.НоменклатураСпр;
			СтрокаУслуги.Содержание = ""+СтрокаУслуги.Номенклатура+" *** "+СокрЛП(inOrderNumber);
			СтрокаУслуги.Количество = СтрокаТЗ.Количество;
			СтрокаУслуги.Цена = СтрокаТЗ.Цена;
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаУслуги, Заказ);
			РассчитатьСуммуТабЧасти(СтрокаУслуги, Заказ);
			РассчитатьСуммуНДСТабЧасти(СтрокаУслуги, Заказ);
		КонецЦикла;
		
		
		Если НЕ Заказ.Товары.Количество() = 0 Тогда
			Если СхемаЗаказовДляАЭ и Контрагент<>КонтрагентАЭ тогда //незачем тратить время на рассчет цен по правилам ценообразования
			иначе	
				ТабЗнач1  = Новый ТаблицаЗначений;
				ТабЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом, ТекущаяДата());
				
				Если ТипЗнч(ТабЗнач1) = Тип("Строка") тогда // нет политики ценообразования документом
					табЗнач1  = новый ТаблицаЗначений;
					табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом); //из регистра сведений
				КонецЕсли;	
				
				Для каждого стр1 из Заказ.Товары цикл
					Если стр1.Цена=0 тогда  //Если передаем цену, то не пересчитываем по договору
						стр2 = табЗнач1.найти(стр1.Номенклатура, "Номенклатура");
						стр1Цена = стр1.Цена;
						Если стр2 = неопределено тогда
							стр2МинимальнаяЦена = 0;
						иначе
							//+++( 10.09.2015 предоплатная цена может быть меньше!  
							//стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
							Если услПредоплатногоДоговора тогда
								попытка
									стр2МинимальнаяЦена = стр2.ЦенаСоСкидкойПредоплаты; 
								исключение // если экспортные цены или из Политики... то там нет поля ЦенаСоСкидкойПредоплаты	
									стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
								КонецПопытки;	
							Иначе
								стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
							КонецЕсли;	
							//+++)
						КонецЕсли;
						
						//-------------------------------
						Если стр1Цена<>стр2МинимальнаяЦена тогда
							стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
							РассчитатьСуммуТабЧасти(стр1, Заказ);
							РассчитатьСуммуНДСТабЧасти(стр1, Заказ);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			//
			
			//Если новаяСхема тогда
			//	Заказ.Записать();
			//иначе
			Заказ.Записать(РежимЗаписиДокумента.Проведение);
			//Заказ.Записать(РежимЗаписиДокумента.Запись);
			//КонецЕсли;
			
			
			Если Контрагент=КонтрагентРозница тогда
				//ставим сразу категорию
				попытка
					менеджерЗаписи = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
					менеджерЗаписи.Объект=Заказ.Ссылка;
					менеджерЗаписи.Категория = Справочники.КатегорииОбъектов.НайтиПоНаименованию("Розница АЭ");
					менеджерЗаписи.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			OrderGUID = Строка(Заказ.Ссылка.УникальныйИдентификатор());
			OrderNumber = СокрЛП(Заказ.Номер);
			
		КонецЕсли;
		
	Иначе
		
		//формируем возвращаемый массив
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			Если СтрокаТЗ.КоличествоОстаток < СтрокаТЗ.Количество Тогда
				Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Product"));
				Товар.RowNumber=(Число(СтрокаТЗ.НомерСтроки));
				Товар.Code=(Строка(СтрокаТЗ.Номенклатура));
				Товар.Quantity=(Число(СтрокаТЗ.КоличествоОстаток));
				Товар.Price=(Число(СтрокаТЗ.Цена));
				Товары.Products.Добавить(Товар);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатОперации.Products		 = Товары;
	РезультатОперации.Success		 = Success;
	РезультатОперации.OrderNumber	 = OrderNumber;
	РезультатОперации.OrderGUID		 = OrderGUID;
	РезультатОперации.Error			 = Ошибка;
	
	//Если НЕ OrderNumber = "" Тогда
	//	Попытка
	//		ПереместитьФайл("D:\1C\"+Partner+"\Текущий.xml", "D:\1C\"+Partner+"\"+ OrderNumber +".xml");
	//	Исключение
	//	КонецПопытки;
	//КонецЕсли;
	
	Возврат РезультатОперации;	
	
	
	// Вставить содержимое обработчика.
КонецФункции

Функция ChangeOrder(Partner, Goods, OrderProperties,TCRecords, Customer)
	
	URL = "www.yst.ru/im";
	
	СхемаАЭ = истина;
	
	ОписаниеОшибки = "";
	Success = Истина;
	
	Если Customer.Type = "ЮР" тогда
		КодКонтрагента = Customer.ULProperties.INN;
		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",КодКонтрагента);	
	иначеЕсли Customer.Type = "ФИЗ" тогда
		КодКонтрагента = Customer.Phone;
		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("УИД_ИМ",КодКонтрагента);	
	иначе 
		КодКонтрагента = Partner;
		Контрагент = Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);	
	КонецЕсли;
	
	Если СокрЛП(Partner)="94247" или СокрЛП(Partner)="П005342" тогда
		СхемаАЭ = истина;
	КонецЕсли;
	
	Розница = ?(СокрЛП(Partner)="94143",истина,ложь);
	
	ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ЗаказПокупателя.Ссылка
	             |ИЗ
	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	             |ГДЕ
	             |	ЗаказПокупателя.Номер = &НомерДокумента
	             |	И ЗаказПокупателя.Контрагент = &Контрагент
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ЗаказПокупателя.Дата УБЫВ";
	Запрос.УстановитьПараметр("НомерДокумента",СокрЛП(OrderProperties.Number));
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Рез=Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		ЗаказСсылка=Рез.Ссылка; 
	КонецЦикла;
	
	Если не ЗначениеЗаполнено(Контрагент) Тогда
		ОписаниеОшибки = ОписаниеОшибки + " Контрагент не найден";
		Success = Ложь;
	КонецЕсли;
	
	Если (НЕ ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка()) И (НЕ ЗаказСсылка = Неопределено) Тогда
		
		// Свойства ТК записываем в любом случае
		ДокОбъект = ЗаказСсылка.ПолучитьОбъект();
		тчЗаписиТК = ДокОбъект.РеквизитыЗаказаТК;
		ЕстьРеквизитыТК = ложь; 
		Для каждого ЗаписьТК из TCRecords.TCRecord цикл
			нстр=тчЗаписиТК.Добавить();
			нстр.Поле           = СокрЛП(ЗаписьТК.Field);
			нстр.Значение       = СокрЛП(ЗаписьТК.Value);
			
			Если СокрЛП(ЗаписьТК.Field) = "Номер заказа перевозчика" тогда
				ДокОбъект.НомерЗаказаТК = СокрЛП(ЗаписьТК.Value);
			конецЕсли;	
			
			ЕстьРеквизитыТК = истина;
		КонецЦикла;
	
		
		Если ЗаказСсылка.ПометкаУдаления Тогда
			ОписаниеОшибки = ОписаниеОшибки + " Заказ помечен на удаление. Редактирование невозможно";
			Success = Ложь;
		КонецЕсли;
		
		Если яштПоЗаказуБылиОтгрузки(ЗаказСсылка) Тогда
			ОписаниеОшибки = ОписаниеОшибки + " По заказу уже были отгрузки, корректировки или закрытие. Изменение заказа невозможно.";
			Success = Ложь;
		КонецЕсли;	
		
		//еще одна проверка
		Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ЗаказСсылка) Тогда
			ОписаниеОшибки = ОписаниеОшибки + " По заказу уже были отгрузки, корректировки или закрытие. Изменение заказа невозможно.";
			Success = Ложь;
		КонецЕсли;	
		
		//+++ 15.06.2015 - длина увеличена с 250 до 500 символов
		Если СтрДлина(OrderProperties.Comment) > 500 Тогда
			Success = Ложь;
			Ошибка = "Комментарий к заказу превышает допустимые 500 символов";
		КонецЕсли;
		
		Если Success Тогда
			Если ДокОбъект=неопределено тогда
				ДокОбъект = ЗаказСсылка.ПолучитьОбъект();
			КонецЕсли;
			
			Если OrderProperties.Deleted тогда
				//ДокОбъект.УстановитьПометкуУдаления(истина);
				//22.07.15 Смирнов на пометку удаления ругается на пользователя
				
				ДокОбъект.Комментарий = "#Отгрузка отменена!  "+"Клиент отменил заказ"+Символы.ПС+ДокОбъект.Комментарий;
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ДокОбъект.ПометкаУдаления = Истина;
				ДокОбъект.Записать();
		
				ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
				РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
				РезультатОперации.Success = Success;
				РезультатОперации.Error = ОписаниеОшибки;
				РезультатОперации.Products=неопределено;
				РезультатОперации.OrderNumber=неопределено;
				РезультатОперации.OrderGUID=неопределено;
				Возврат РезультатОперации;
				
			КонецЕсли;
			
			Если НЕ OrderProperties.Comment = "" Тогда
				Если OrderProperties.Deleted тогда
					ДокОбъект.Комментарий = OrderProperties.Comment+" # "+ДокОбъект.Комментарий;	
				Иначе
					ДокОбъект.Комментарий = "IM: " + OrderProperties.Comment;
				КонецЕсли;
			КонецЕсли;
			
			ДокОбъект.КомментарийДляСклада = "" + OrderProperties.COMMENT_STOCK;
			
			//ИД оплаты
			ДокОбъект.НомерТранзакцииПлатежнойСистемы = ?(ТипЗНЧ(OrderProperties.PAY_CODE)=Тип("Строка"),OrderProperties.PAY_CODE,"");
			 
			
			Если НЕ OrderProperties.ShippingDay = "" Тогда  //передается дата отгрузки
				ДокОбъект.ДатаОтгрузки = Дата(OrderProperties.ShippingDay);
			КонецЕсли;
			
			Если НЕ OrderProperties.DeliveryAddress = "" Тогда  
				ДокОбъект.АдресДоставки = OrderProperties.DeliveryAddress;
				ДокОбъект.АдресДляТТН = OrderProperties.DeliveryAddress;
				Если ДокОбъект.Контрагент = Справочники.Контрагенты.НайтиПоКоду("94247") или Customer.Type = "ФИЗ" тогда  //Розничный покупатель ДПД
					ДокОбъект.ВыписатьСпецификацию=Ложь; //12.04.16 Смирнов Экономим бумагу
				иначе
					ДокОбъект.ВыписатьСпецификацию=Истина;
				КонецЕсли;
			КонецЕсли;
			
						
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("НомерСтроки");
			ТЗ.Колонки.Добавить("КодНоменклатуры");
			ТЗ.Колонки.Добавить("Количество");
			ТЗ.Колонки.Добавить("Цена");
			 
			Для Каждого Запись ИЗ Goods.Products Цикл
				СтрокаТЗ = ТЗ.Добавить();
				СтрокаТЗ.НомерСтроки = Запись.RowNumber;
				СтрокаТЗ.КодНоменклатуры = СокрЛП(Запись.Code);
				СтрокаТЗ.Количество = Запись.Quantity;
				СтрокаТЗ.Цена = Запись.Price;
			КонецЦикла;
			
			
			//исключаем массу ошибок, когда заказ редактируется в 1С и не успевает еще синхронизироваться со Store
			//в массиве передается больше строк, чем есть в заказе
			//надо править!!!

			Если ТЗ.Количество() > ДокОбъект.Товары.Количество() Тогда
				ОписаниеОшибки = ОписаниеОшибки + " Заказ покупателя отредактирован менеджером.";
				Success = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если Success Тогда
			Для Каждого СтрТовар ИЗ ДокОбъект.Товары Цикл
				СтрокаТЗ = ТЗ.Найти(СтрТовар.Номенклатура.Код, "КодНоменклатуры");
				Если СтрокаТЗ = Неопределено Тогда
					СтрТовар.Количество = 0;
				Иначе
					Если НЕ СтрТовар.Номенклатура.Код = СтрокаТЗ.КодНоменклатуры Тогда 
						ОписаниеОшибки = ОписаниеОшибки + " Не совпадают коды товаров в строках массива и заказа.";
						Success = Ложь;
						Прервать;
					Иначе
						Если СтрокаТЗ.Количество > СтрТовар.Количество Тогда
							ОписаниеОшибки = ОписаниеОшибки + " В строке " + СтрокаТЗ.НомерСтроки + " количество изменено на большее";
							Success = Ложь;
							Прервать;
						ИначеЕсли СтрокаТЗ.Количество < СтрТовар.Количество Тогда
							СтрТовар.Количество = СтрокаТЗ.Количество;
							РассчитатьСуммуТабЧасти(СтрТовар, ДокОбъект);
							РассчитатьСуммуНДСТабЧасти(СтрТовар, ДокОбъект);
						КонецЕсли;
						Если (розница или СхемаАЭ) и СтрокаТЗ.Цена>0 тогда //цены можем менять
							СтрТовар.Цена = СтрокаТЗ.Цена;
							РассчитатьСуммуТабЧасти(СтрТовар, ДокОбъект);
							РассчитатьСуммуНДСТабЧасти(СтрТовар, ДокОбъект);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Найти(нрег(ДокОбъект.Комментарий),"подтвержден")>0 и Customer.Type = "ЮР" и СокрЛП(ДокОбъект.Подразделение.Код) = "00005" тогда  //если подтвержден и безнал и Ярославль тогда
			попытка
				менеджерЗаписи = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
				менеджерЗаписи.Объект=ДокОбъект.Ссылка;
				менеджерЗаписи.Категория = Справочники.КатегорииОбъектов.НайтиПоКоду("00043"); //Колеса тут
				менеджерЗаписи.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если Найти(нрег(ДокОбъект.Комментарий),"подтвержден")>0 и СокрЛП(ДокОбъект.Подразделение.Код) = "00112" тогда  //если подтвержден  и Питер тогда
			попытка
				менеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				менеджерЗаписи.Объект=ДокОбъект.Ссылка;
				менеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90175"); //Направлений отгрузки (филиал)
				менеджерЗаписи.Значение = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("b0099"); //ДПД Спб
				менеджерЗаписи.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если Success тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли ЕстьРеквизитыТК тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если СокрЛП(ДокОбъект.НомерТранзакцииПлатежнойСистемы)<>"" и Customer.Type = "ФИЗ" тогда
			попытка
				СформироватьОплатуПлатежнымиКартами(ДокОбъект.ссылка);
			исключение
				ОписаниеОшибки = ОписаниеОшибки + " Ошибка при создании Оплаты платежными картами: "+ОписаниеОшибки();
				Success = Ложь;
			конецпопытки;
			
			Если Найти(нрег(ДокОбъект.Комментарий),"подтвержден")>0 тогда
				попытка
					менеджерЗаписи = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
					менеджерЗаписи.Объект=ДокОбъект.Ссылка;
					менеджерЗаписи.Категория = Справочники.КатегорииОбъектов.НайтиПоКоду("00045"); //КОЛЕСАТУТ Карточки
					менеджерЗаписи.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;

		КонецЕсли;
	Иначе
		ОписаниеОшибки = ОписаниеОшибки + " Заказ покупателя не найден";
		Success = Ложь;
	КонецЕсли;
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	РезультатОперации.Success = Success;
	РезультатОперации.Error = ОписаниеОшибки;
	РезультатОперации.Products=неопределено;
	РезультатОперации.OrderNumber=неопределено;
	РезультатОперации.OrderGUID=неопределено;
	Возврат РезультатОперации;
КонецФункции

Процедура СформироватьОплатуПлатежнымиКартами(Заказ)
Запрос = новый Запрос;
Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
              |	ОплатаОтПокупателяПлатежнойКартой.Ссылка КАК ЗаказПокупателя
              |ИЗ
              |	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
              |ГДЕ
              |	ОплатаОтПокупателяПлатежнойКартой.ДокументОснование = &ЗаказПокупателя
              |	И ОплатаОтПокупателяПлатежнойКартой.Дата >= &Дата
              |
              |ОБЪЕДИНИТЬ ВСЕ
              |
              |ВЫБРАТЬ
              |	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Ссылка
              |ИЗ
              |	Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа
              |ГДЕ
              |	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Ссылка.Дата >= &Дата
              |	И ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Сделка = &ЗаказПокупателя";
			  Запрос.УстановитьПараметр("Дата",Заказ.Дата);
			  Запрос.УстановитьПараметр("ЗаказПокупателя",Заказ);
			  Рез = Запрос.Выполнить().Выбрать();
			  Если Рез.Количество()>0 тогда //оплата есть
			  иначе
				  ДокОплата = Документы.ОплатаОтПокупателяПлатежнойКартой.СоздатьДокумент();
				  ЗаполнитьЗначенияСвойств(ДокОплата,Заказ.Товары[0]);
				  ЗаполнитьЗначенияСвойств(ДокОплата,Заказ);
				  ДокОплата.Дата = ТекущаяДата();
				  ДокОплата.ОтражатьВУправленческомУчете=истина;
				  ДокОплата.Статус = Перечисления.СтатусыОплатПлатежнойКартой.НеПодтвержден;
				  ДокОплата.ВидОперации=Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя;
				  ДокОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.БезналПлатежнаяКарта;
				  ДокОплата.ДокументОснование = Заказ;
				  
				  ДокОплата.Эквайрер  = Справочники.Контрагенты.НайтиПоКоду("94391"); //НКО ЭПС
				  //ДокОплата.ДоговорВзаиморасчетовЭквайрера  = ДокОплата.Эквайрер.ОсновнойДоговорКонтрагента;
				  ДокОплата.ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000001");
				  ДокОплата.ДоговорВзаиморасчетовЭквайрера  = ДокОплата.ДоговорЭквайринга.ДоговорВзаиморасчетов;
				  ДокОплата.ПроцентТорговойУступки = ДокОплата.ДоговорЭквайринга.ТарифыЗаРасчетноеОбслуживание[0].ПроцентТорговойУступки;
				  ДокОплата.СуммаТорговойУступки = Заказ.СуммаДокумента * ДокОплата.ПроцентТорговойУступки / 100;
				  
				  ТЧ = ДокОплата.РасшифровкаПлатежа;
				  нстр = ТЧ.Добавить();
				  ЗаполнитьЗначенияСвойств(нстр,Заказ);
				  ЗаполнитьЗначенияСвойств(нстр,Заказ.Товары[0]);
				  нстр.Сделка = Заказ;
				  нстр.СуммаПлатежа = Заказ.СуммаДокумента;
				  нстр.СуммаВзаиморасчетов = Заказ.СуммаДокумента;
				  ПересчитатьСуммуНДС(нстр);
				  ДокОплата.Записать(РежимЗаписиДокумента.Проведение);
			  КонецЕсли;
			  
КонецПроцедуры


Функция GetStatus_new(ListOfOrders, Client)
	URL = "www.yst.ru/im";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "ListOfOrders");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
		
	Список=ListOfOrders.ПолучитьСписок("Order");
	ВсегоЗаписей=Список.Количество();
	
	СписокЗаказов=новый списокЗначений;
	Для ии=0 по ВсегоЗаписей-1 Цикл
		Запись=Список.Получить(ии);
		СписокЗаказов.Добавить(СокрЛП(Запись.Number));
	КонецЦикла;
	
	//получаем список
	Статусы=ОбменСУТИнтернетМагазин.ПолучитьСтатусыЗаказовПоНомерам(СписокЗаказов,СокрЛП(Client));
	
	Для Каждого статус из Статусы Цикл
		Заказ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Order_new"));
		Заказ.Number=Статус.Номер;
		Заказ.Status=Статус.статус;
		Заказ.Date="";
		Заказ.Comment="";
		Заказ.ShippingDay="";
		Заказ.DeliveryAddress="";
		Заказ.Deleted=false;
		РезультатОперации.Order.Добавить(Заказ);
	конецЦикла;
	Возврат РезультатОперации;
КонецФункции

//По номеру входящего документа и по подразделению ищем последний заказ
//если находим, проверяем можно ли его редактировать
//если не находим, то создаем новый
Функция ChangeOrder_new(Partner ,Goods, Storage, Comment, isTestOrder, ShippingDay, isReserve, inOrderNumber, ULProp, DirectionOfShipment, amenities,PaymentDate="",NumberSupplier)
	URL = "www.yst.ru/im";
	
	СхемаАЭ = ложь;
	
	ОписаниеОшибки = "";
	Success = Истина;
	
	КодКонтрагента = Partner;
	Если СтрДлина(КодКонтрагента)>15 тогда //это УИДИМ и ищем по реквизиту УИДИМ
		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("УИД_ИМ",КодКонтрагента,Справочники.Контрагенты.КлиентыИМ);	
		СхемаАЭ = истина;
	иначе	
		Контрагент = Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);
	КонецЕсли;
	
	Если СокрЛП(Partner)="94247" или СокрЛП(Partner)="П005342" тогда
		СхемаАЭ = истина;
	КонецЕсли;
	
	Розница = ?(СокрЛП(Partner)="94143",истина,ложь);
	
	Подразделение = Справочники.Подразделения.НайтиПоКоду(Storage);
	
	ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ЗаказПокупателя.Ссылка
	             |ИЗ
	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	             |ГДЕ
	             |	ЗаказПокупателя.НомерВходящегоДокумента = &НомерВходящегоДокумента
	             |	И ЗаказПокупателя.Контрагент = &Контрагент
	             |	И ЗаказПокупателя.Подразделение = &Подразделение
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ЗаказПокупателя.Дата УБЫВ";
		
	Запрос.УстановитьПараметр("НомерВходящегоДокумента",СокрЛП(inOrderNumber));
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Рез=Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		ЗаказСсылка=Рез.Ссылка; 
	КонецЦикла;
		
	
	Если ЗначениеЗаполнено(ЗаказСсылка) тогда
		Если не МожноРедактировать(ЗаказСсылка) тогда
			ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
			РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
			Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProducts"));
			
			РезультатОперации.Products		 = Товары;
			РезультатОперации.Success		 = ложь;
			РезультатОперации.OrderNumber	 = СокрЛП(ЗаказСсылка.Номер);
			РезультатОперации.OrderGUID		 = Строка(ЗаказСсылка.УникальныйИдентификатор());
			РезультатОперации.Error			 = "Редактирование запрещено!!!";
			
			Возврат РезультатОперации;

		КонецЕсли;
		//заказ нашли, работаем с ним
		Попытка
			//НачатьТранзакцию();
			ЗаказОб = ЗаказСсылка.ПолучитьОбъект();
			ЗаказОб.Товары.Очистить();
			ЗаказОб.РеквизитыЗаказаТК.Очистить();
			ЗаказОб.Услуги.Очистить();
			
			Рез = ЗаписатьЗаказ(ЗаказОб,Partner, Goods, Storage, Comment, isTestOrder, ShippingDay, isReserve, inOrderNumber, ULProp, DirectionOfShipment, amenities,PaymentDate="");
			
		Исключение
			ОписаниеОшибки = ОписаниеОшибки+ОписаниеОшибки();
			Success=ложь;
			
			
		КонецПопытки;
		
	иначе
		рез = CreateOrder(Partner,Goods,Storage,Comment,isTestOrder,ShippingDay,isReserve,inOrderNumber,ULProp,DirectionOfShipment,amenities,PaymentDate);
	КонецЕсли;
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	РезультатОперации.Success = Success;
	РезультатОперации.Error = ОписаниеОшибки;
	РезультатОперации.Products=неопределено;
	РезультатОперации.OrderNumber=неопределено;
	РезультатОперации.OrderGUID=неопределено;
	Возврат Рез;	
КонецФункции

Функция СоздатьКонтрагента(Partner, Подразделение,Customer)
	//Ответственный = Справочники.Пользователи.НайтиПоКоду("Качалов");
	Ответственный = Справочники.Пользователи.НайтиПоКоду("Левченко Е.");

	//+++ 02.08.2016  замена на Левченко!
	//Ответственный2 = Справочники.Пользователи.НайтиПоКоду(".Куликова Ю");
	Ответственный2 = Справочники.Пользователи.НайтиПоКоду("Левченко Е.");
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.УстановитьНовыйКод();
	//НовыйКонтрагент.УИД_ИМ = Partner;
	НовыйКонтрагент.Родитель = Справочники.Контрагенты.КлиентыИМ;
	НовыйКонтрагент.Наименование=?(СокрЛП(customer.ULProperties.Name)="",НовыйКонтрагент.Наименование,СокрЛП(customer.ULProperties.Name));
	
	НовыйКонтрагент.Наименование=ПривестиКраткоеНаименованиеКТребованиямЯШТ(НовыйКонтрагент.Наименование);
	
	НовыйКонтрагент.НаименованиеПолное=?(СокрЛП(customer.ULProperties.FULL_NAME_ORG)="",НовыйКонтрагент.Наименование,СокрЛП(customer.ULProperties.FULL_NAME_ORG));
    НовыйКонтрагент.Покупатель = истина;
	НовыйКонтрагент.ОсновнойМенеджерКонтрагента = Ответственный;
	//НовыйКонтрагент.КонтрагентДляРезерваИМ=Справочники.Контрагенты.НайтиПоКоду("П004703"); //Резерв для ИМ
	НовыйКонтрагент.КонтролироватьСуммуЗадолженности = истина;
	
	Если Customer.Type = "ЮР" тогда
		НовыйКонтрагент.КатегорияПокупателя = Справочники.КатегорииПокупателей.КонечныйПотребитель;
		НовыйКонтрагент.ЮрФизЛицо =Перечисления.ЮрФизЛицо.ЮрЛицо;
		НовыйКонтрагент.ИНН = customer.ULProperties.INN;
		НовыйКонтрагент.КПП = customer.ULProperties.KPP;
	ИначеЕсли Customer.Type = "ФИЗ" тогда
		НовыйКонтрагент.КатегорияПокупателя = Справочники.КатегорииПокупателей.КонечныйПотребительФЛ;
		НовыйКонтрагент.Наименование=?(СокрЛП(customer.ULProperties.Name)="",НовыйКонтрагент.Наименование,СокрЛП(customer.ULProperties.Name))+" ("+Customer.Phone+")";
		//НовыйКонтрагент.НаименованиеПолное="Розничный покупатель(Карты)"+" ("+НовыйКонтрагент.Код+")";
		НовыйКонтрагент.НаименованиеПолное="Розничный покупатель(Карты)"+" "+СокрЛП(customer.ULProperties.Name);
		НовыйКонтрагент.ЮрФизЛицо =Перечисления.ЮрФизЛицо.ФизЛицо;
		НовыйКонтрагент.УИД_ИМ = Customer.Phone;
	Иначе	
		НовыйКонтрагент.КатегорияПокупателя = Справочники.КатегорииПокупателей.ИнтернетМагазин;
	КонецЕсли;
	
	НовыйКонтрагент.НеКонтроллироватьЦеныПродажи = Истина;
	
	
	НовыйКонтрагент.Записать();
	//счета/договоры
	Если Customer.Type = "ЮР" или Customer = неопределено тогда
		кРасчСчет=customer.ULProperties.RAS_SCHET;
		кБИК=customer.ULProperties.BIK;
		кКорСчет=customer.ULProperties.KOR_SCHET;
		кБанк = customer.ULProperties.BANK_OF_USER;
		Если кРасчСчет<>"" тогда
			счет = справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",кРасчСчет,,НовыйКонтрагент.ссылка); 
			Если счет = неопределено или счет = справочники.БанковскиеСчета.ПустаяСсылка() тогда
				счетОб = справочники.БанковскиеСчета.СоздатьЭлемент();
				счетОб.Владелец = НовыйКонтрагент.Ссылка;
				счетОб.ВидСчета = "Расчетный";
				счетОб.ВалютаДенежныхСредств = справочники.Валюты.НайтиПоКоду(643);
				счетОб.НомерСчета = кРасчСчет;
				//счетОб.Наименование = "Расчетный  в банке: "+Customer.UR_INFO.BANK_OF_USER; 
				Если кБИК<>"" тогда
					банк = справочники.Банки.НайтиПоКоду(кБИК);				
					счетОб.Банк = банк;
				КонецЕсли;
				Если ЗначениеЗаполнено(банк) тогда
					счетОб.Наименование = ""+банк+" ("+счетОб.ВидСчета+")";
				иначе	
					счетОб.Наименование = "Расчетный  в банке: "+customer.ULProperties.BANK_OF_USER;
				КонецЕсли;
				//счетОб.ТекстКорреспондента = "В банке: "+кБанк+" БИК: "+кБИК+" к/с: "+ кКорСчет;
				счетОб.ТекстКорреспондента = СокрЛП(НовыйКонтрагент.НаименованиеПолное);
				попытка 
					счетОб.Записать();
					НовыйКонтрагент.ОсновнойБанковскийСчет = счетОб.Ссылка;
				исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
		
	//Договор
	
	НовыйКонтрагент.ОсновнойДоговорКонтрагента=ПолучитьДоговор(НовыйКонтрагент.Ссылка,Подразделение,Ответственный2,истина);
		
	НовыйКонтрагент.Записать();
	
	возврат новыйконтрагент.Ссылка;
КонецФункции

Функция ПолучитьДоговор(Контрагент,Подразделение,Ответственный2=неопределено,СоздатьДоговор=ложь);
	Если СоздатьДоговор тогда //контрагент новый время на поиски договора тратить не будем, сразу создаем новый
		Возврат СоздатьНовыйДоговор(Контрагент,Ответственный2,Подразделение);
	Иначе //поищем договор, если нужного нет, то создадим новый	
		Запрос = новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
		             |	ДоговорыПоТоварнымГруппам.Договор КАК ДоговорПоТоварнымГруппам
		             |ИЗ
		             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		             |			ДоговорыПоТоварнымГруппам.Договор КАК Договор
		             |		ИЗ
		             |			РегистрСведений.ДоговорыПоТоварнымГруппам КАК ДоговорыПоТоварнымГруппам
		             |		ГДЕ
		             |			ДоговорыПоТоварнымГруппам.Контрагент = &Владелец
		             |			И ДоговорыПоТоварнымГруппам.Подразделение = &Подразделение
		             |			И ДоговорыПоТоварнымГруппам.КлиентКОЛЕСАТУТ = ИСТИНА) КАК ДоговорыПоТоварнымГруппам
		             |		ПО ДоговорыКонтрагентов.Ссылка = ДоговорыПоТоварнымГруппам.Договор
		             |ГДЕ
		             |	ДоговорыКонтрагентов.Владелец = &Владелец
		             |	И ДоговорыКонтрагентов.ОтветственноеЛицо.НаправлениеПродаж = &НаправлениеПродаж";
		Запрос.УстановитьПараметр("Владелец",Контрагент);
		Запрос.УстановитьПараметр("Подразделение",Подразделение);
		Запрос.УстановитьПараметр("НаправлениеПродаж",Справочники.НаправленияПродаж.НайтиПоКоду("16")); //16. "Колеса ТУТ"
		Рез = Запрос.Выполнить().Выгрузить();
		Если Рез.Количество()>0 тогда
			Если НЕ ЗначениеЗаполнено(Рез[0].ДоговорПоТоварнымГруппам) тогда
				 ДобавитьДоговорыПоТоварнымГруппам(Рез[0].ДоговорКонтрагента,Контрагент,Подразделение);
			КонецЕсли;
			Возврат Рез[0].ДоговорКонтрагента;
		Иначе
			Возврат СоздатьНовыйДоговор(Контрагент,Ответственный2,Подразделение); 
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция СоздатьНовыйДоговор(Контрагент,Ответственный2,Подразделение)
	Ответственный = Ответственный2;
	Если Ответственный=неопределено тогда
		Ответственный = Справочники.Пользователи.НайтиПоКоду("Левченко Е.");
	КонецЕсли;	
	НовыйДоговор=Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НовыйДоговор.Организация= Справочники.Организации.НайтиПоКоду("00001");
	НовыйДоговор.Наименование="Договор предоплаты ИМ";
	НовыйДоговор.Владелец=Контрагент;
	НовыйДоговор.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
	НовыйДоговор.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	НовыйДоговор.ВалютаВзаиморасчетов=Справочники.Валюты.НайтиПоКоду("643");
	НовыйДоговор.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00001"); //предоплата
	НовыйДоговор.ОтветственноеЛицо = Ответственный;
	НовыйДоговор.КонтрагентДляРезерваИМ = Справочники.Контрагенты.НайтиПоКоду("П004703");
	НовыйДоговор.Записать();
	//сразу же создадим записи в РС ДоговорыПоТоварнымГруппам что бы в филиалах могли видеть заказы
	ДобавитьДоговорыПоТоварнымГруппам(НовыйДоговор.Ссылка,Контрагент,Подразделение);
    
	Возврат НовыйДоговор.Ссылка;
КонецФункции

Процедура ДобавитьДоговорыПоТоварнымГруппам(Договор,Контрагент,Подразделение)
	Если Подразделение.Код = "00005" тогда  //Для головного записывать не надо
	Иначе
		Попытка
			МенеджерЗаписи = РегистрыСведений.ДоговорыПоТоварнымГруппам.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВидТовара = Перечисления.ВидыТоваров.Аксессуары;
			МенеджерЗаписи.Договор = Договор;
			МенеджерЗаписи.Контрагент = Контрагент;
			МенеджерЗаписи.Подразделение = Подразделение; 
			МенеджерЗаписи.КлиентКОЛЕСАТУТ = ИСТИНА; 
			МенеджерЗаписи.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Функция ПривестиКраткоеНаименованиеКТребованиямЯШТ(Наименование)
	НовоеНаименование = " "+ВРЕГ(Наименование);
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"""","");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"/","");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"\","");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"«","");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"»","");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"“","");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"”","");
	
	Если Найти(НовоеНаименование," ООО ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," ООО ","");
		НовоеНаименование = " "+ НовоеНаименование+" ООО";
	КонецЕсли;
	
	Если Найти(НовоеНаименование," ОАО ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," ОАО ","");
		НовоеНаименование = " "+ НовоеНаименование+" ОАО";
	КонецЕсли;
	
	Если Найти(НовоеНаименование," OOO ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," OOO ","");
		НовоеНаименование=" "+ НовоеНаименование+" ООО";
	КонецЕсли;
	Если Найти(НовоеНаименование," ЗАО ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," ЗАО ","");
		НовоеНаименование=" "+ НовоеНаименование+" ЗАО";
	КонецЕсли;
	Если Найти(НовоеНаименование," ИП ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," ИП ","");
		НовоеНаименование=" "+ НовоеНаименование+" ИП ";
	КонецЕсли;
	Если Найти(НовоеНаименование," ПАО ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," ПАО ","");
		НовоеНаименование=" "+ НовоеНаименование+" ПАО";
	КонецЕсли;
	Если Найти(НовоеНаименование," АО ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," АО ","");
		НовоеНаименование=" "+ НовоеНаименование+" АО";
	КонецЕсли;	 	 
	Если Найти(НовоеНаименование," МУП ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," МУП ","");
		НовоеНаименование=" "+ НовоеНаименование+" МУП";
	КонецЕсли;
	Если Найти(НовоеНаименование, "НПО ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," НПО ","");
		НовоеНаименование=" "+ НовоеНаименование+" НПО";
	КонецЕсли;
	Если Найти(НовоеНаименование," ФИЛИАЛ ")>0 тогда
		НовоеНаименование = СтрЗаменить(НовоеНаименование," ФИЛИАЛ ","");
		НовоеНаименование=" "+ НовоеНаименование+" ФИЛИАЛ";
	КонецЕсли;
	НовоеНаименование = СтрЗаменить(НовоеНаименование," ИП ИП "," ИП");
	 
	
	НовоеНаименование = СокрЛП(НовоеНаименование);
	Возврат НовоеНаименование;	
КонецФункции


Функция ЗаписатьЗаказ(Заказ, Partner, Goods, Storage, Comment, isTestOrder, ShippingDay, isReserve, inOrderNumber, ULProp, DirectionOfShipment, amenities,PaymentDate="")
	СхемаЗаказовДляАЭ = истина;
	
	КонтрагентРозница = Справочники.Контрагенты.НайтиПоКоду("94143");
	КонтрагентАЭ = Справочники.Контрагенты.НайтиПоКоду("П000382");
	
	Контрагент = Заказ.Контрагент;

	URL = "www.yst.ru/im";
		
	Ошибка = "";
	Success = Истина;
	OrderNumber = "";
	OrderGUID = "";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProducts"));
	
	Если СтрДлина(Comment) > 500 Тогда
		Success = Ложь;
		Ошибка = "Комментарий к заказу превышает допустимые 500 символов";
	КонецЕсли;
	
	Подразделение = Справочники.Подразделения.НайтиПоКоду(Storage);	
	Если Подразделение = Справочники.Подразделения.ПустаяСсылка() Тогда
		Success = Ложь;
		Ошибка = "Не удалось найти подразделение по коду " + Storage;
	КонецЕсли;

	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("НомерСтроки");
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура");
	ТаблицаЗаказа.Колонки.Добавить("НоменклатураСпр");
	ТаблицаЗаказа.Колонки.Добавить("Количество");
	ТаблицаЗаказа.Колонки.Добавить("КоличествоОстаток");
	ТаблицаЗаказа.Колонки.Добавить("Цена");
	
	ТаблицаУслуг = ТаблицаЗаказа.Скопировать();
		
	Для каждого товар из Goods.Products цикл
		СтрокаТЗ = ТаблицаЗаказа.Добавить();
		СтрокаТЗ.НомерСтроки = товар.RowNumber;
		СтрокаТЗ.Номенклатура = товар.Code;
		СтрокаТЗ.Количество =  Число(товар.Quantity);
		СтрокаТЗ.Цена =  Число(товар.Price);
	КонецЦикла;
	
	Для каждого товар из amenities.Products цикл
		СтрокаТЗ = ТаблицаУслуг.Добавить();
		СтрокаТЗ.НомерСтроки = товар.RowNumber;
		СтрокаТЗ.Номенклатура = товар.Code;
		СтрокаТЗ.НоменклатураСпр = Справочники.Номенклатура.НайтиПоКоду("ЛН00018",,Справочники.Номенклатура.НайтиПоКоду("ЛН00002")); //Транспортная услуга 44-ТР возмещаемые
		СтрокаТЗ.Количество =  Число(товар.Quantity);
		СтрокаТЗ.Цена =  Число(товар.Price);
	КонецЦикла;
		
	
	СписокНоменклатуры = Новый СписокЗначений;
	Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
		Номенкл = Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
		Если Номенкл = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Success = Ложь;
			Ошибка = "Не удалось найти номенклатуру по коду " + СтрокаТЗ.Номенклатура;
		КонецЕсли;
		СтрокаТЗ.НоменклатураСпр=Номенкл;
		СписокНоменклатуры.Добавить(Номенкл);		
	КонецЦикла;	
	
	//Создание заказа
	Если Success Тогда
		Ошибка = "";
		Если НЕ ShippingDay = "" Тогда  //передается дата отгрузки
			Заказ.ДатаОтгрузки = Дата(ShippingDay);
		КонецЕсли;
		Если isReserve Тогда //Заказы могут быть резервные (закрытваются атвоматически через 10 дней) - дата отгрузки пустая, и с датой отгрузки	
			Заказ.Резерв = Истина;
			Заказ.ДатаОтгрузки = '00010101000000';
		КонецЕсли;
		Заказ.Организация = Справочники.Организации.НайтиПоКоду("00001");
		
		//+++ 15.06.2015 - валютные клиенты
    		
		Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); //Крупный опт
		Заказ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
		Заказ.КурсВзаиморасчетов = 1;
		Заказ.КратностьВзаиморасчетов = 1;
		
		//Заказ.Контрагент = Контрагент;
		Заказ.Транзит = Истина;
		Заказ.НомерВходящегоДокумента=СокрЛП(inOrderNumber);
		
		Если Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") Тогда  //Головное
			Заказ.Транзит = Ложь;
			
		ИначеЕсли ЗначениеЗаполнено(Подразделение) И Подразделение.ОбособленноеПодразделение Тогда 
			Заказ.Склад = Подразделение.Склад;
			Заказ.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
			Заказ.Грузоотправитель = Подразделение.Контрагент;
		КонецЕсли;
		
		Если НЕ isTestOrder Тогда
			Заказ.Проверен = Истина;
		КонецЕсли;
		
		Заказ.Комментарий = "IM Service: " + Comment;
		Заказ.СуммаВключаетНДС = Истина;
		Заказ.УчитыватьНДС = Истина;
		Заказ.АвтоРезервирование = Истина;
		Заказ.ССайта = Истина;
		Заказ.НапомнитьОСобытии = Истина;
		Заказ.ТипЗаказа = 10;
		
		Если СокрЛП(DirectionOfShipment)<>"" тогда
			Заказ.ТранспортнаяКомпания = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(DirectionOfShipment));
		КонецЕсли;
		
		//***договор получаем по единому алгоритму: сначала факторинг, потом - продажа
		Заказ.ДоговорКонтрагента = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(Заказ);
		//+++ 10.09.2015 - доп.условия на предоплатные договора - по типу!
		услПредоплатногоДоговора = (Заказ.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001") );

		//Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		//Если НЕ PaymentDate = "" Тогда  //передается дата отгрузки
		//	ДатаОплаты = КонецДня(Дата(PaymentDate));
		//	Если  ДатаОплаты<ТекущаяДата() тогда
		//		Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		//	Иначе
		//		Если КонецДня(ТекущаяДата())+45*86400 < ДатаОплаты тогда //не более 45 дней
		//			ДатаОплаты = КонецДня(ТекущаяДата())+45*86400;
		//		КонецЕсли;
		//		Заказ.ДатаОплаты = ДатаОплаты;
		//	КонецЕсли;
		//	
		//иначе
			Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		//КонецЕсли;
		
		СписокНом = Новый СписокЗначений;
		
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			СтрокаТовары = Заказ.Товары.Добавить();
			СтрокаТовары.Номенклатура = СтрокаТЗ.НоменклатураСпр;
			СтрокаТовары.Коэффициент = 1;
			СтрокаТовары.Количество = СтрокаТЗ.Количество;
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, Заказ, Константы.ВалютаРегламентированногоУчета.Получить()); 
			СтрокаТовары.Цена = СтрокаТЗ.Цена;
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, Заказ);
			РассчитатьСуммуТабЧасти(СтрокаТовары, Заказ);
			РассчитатьСуммуНДСТабЧасти(СтрокаТовары, Заказ);
			СписокНом.Добавить(СтрокаТЗ.НоменклатураСпр);
		КонецЦикла;
		//Услуги
		Для каждого СтрокаТЗ ИЗ ТаблицаУслуг Цикл
			СтрокаУслуги = Заказ.Услуги.Добавить();
			СтрокаУслуги.Номенклатура = СтрокаТЗ.НоменклатураСпр;
			СтрокаУслуги.Содержание = ""+СтрокаУслуги.Номенклатура+" *** "+СокрЛП(inOrderNumber);
			СтрокаУслуги.Количество = СтрокаТЗ.Количество;
			СтрокаУслуги.Цена = СтрокаТЗ.Цена;
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаУслуги, Заказ);
			РассчитатьСуммуТабЧасти(СтрокаУслуги, Заказ);
			РассчитатьСуммуНДСТабЧасти(СтрокаУслуги, Заказ);
		КонецЦикла;
		
		
		Если НЕ Заказ.Товары.Количество() = 0 Тогда
			Если СхемаЗаказовДляАЭ и Контрагент<>КонтрагентАЭ тогда //незачем тратить время на рассчет цен по правилам ценообразования
			иначе	
				ТабЗнач1  = Новый ТаблицаЗначений;
				ТабЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом, ТекущаяДата());
				
				Если ТипЗнч(ТабЗнач1) = Тип("Строка") тогда // нет политики ценообразования документом
					табЗнач1  = новый ТаблицаЗначений;
					табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом); //из регистра сведений
				КонецЕсли;	
				
				Для каждого стр1 из Заказ.Товары цикл
					Если стр1.Цена=0 тогда  //Если передаем цену, то не пересчитываем по договору
						стр2 = табЗнач1.найти(стр1.Номенклатура, "Номенклатура");
						стр1Цена = стр1.Цена;
						Если стр2 = неопределено тогда
							стр2МинимальнаяЦена = 0;
						иначе
							//+++( 10.09.2015 предоплатная цена может быть меньше!  
							//стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
							Если услПредоплатногоДоговора тогда
								попытка
									стр2МинимальнаяЦена = стр2.ЦенаСоСкидкойПредоплаты; 
								исключение // если экспортные цены или из Политики... то там нет поля ЦенаСоСкидкойПредоплаты	
									стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
								КонецПопытки;	
							Иначе
								стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
							КонецЕсли;	
							//+++)
						КонецЕсли;
						
						//-------------------------------
						Если стр1Цена<>стр2МинимальнаяЦена тогда
							стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
							РассчитатьСуммуТабЧасти(стр1, Заказ);
							РассчитатьСуммуНДСТабЧасти(стр1, Заказ);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			//
			
			Заказ.Записать(РежимЗаписиДокумента.Проведение);
			
			Если Контрагент=КонтрагентРозница тогда
				//ставим сразу категорию
				попытка
					менеджерЗаписи = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
					менеджерЗаписи.Объект=Заказ.Ссылка;
					менеджерЗаписи.Категория = Справочники.КатегорииОбъектов.НайтиПоНаименованию("Розница АЭ");
					менеджерЗаписи.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			OrderGUID = Строка(Заказ.Ссылка.УникальныйИдентификатор());
			OrderNumber = СокрЛП(Заказ.Номер);
			
		КонецЕсли;
		
	Иначе
		Ошибка = "какая то ошибка";
		//формируем возвращаемый массив
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			Если СтрокаТЗ.КоличествоОстаток < СтрокаТЗ.Количество Тогда
				Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Product"));
				Товар.RowNumber=(Число(СтрокаТЗ.НомерСтроки));
				Товар.Code=(Строка(СтрокаТЗ.Номенклатура));
				Товар.Quantity=(Число(СтрокаТЗ.КоличествоОстаток));
				Товар.Price=(Число(СтрокаТЗ.Цена));
				Товары.Products.Добавить(Товар);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатОперации.Products		 = Товары;
	РезультатОперации.Success		 = Success;
	РезультатОперации.OrderNumber	 = OrderNumber;
	РезультатОперации.OrderGUID		 = OrderGUID;
	РезультатОперации.Error			 = Ошибка;
		
	Возврат РезультатОперации;
КонецФункции

Функция МожноРедактировать(Заказ)
	если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(Заказ) или яштПоЗаказуБылиОтгрузки(Заказ) или Заказ.ПометкаУдаления тогда
		возврат ложь;
	иначе возврат
		истина;
	КонецЕсли;
КонецФункции


Функция DeleteOrder(Partner,Storage,inOrderNumber)
	URL = "www.yst.ru/im";

	ОписаниеОшибки = "";
	Success = Истина;
	
	КодКонтрагента = Partner;
	Если СтрДлина(КодКонтрагента)>15 тогда //это УИДИМ и ищем по реквизиту УИДИМ
		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("УИД_ИМ",КодКонтрагента,Справочники.Контрагенты.КлиентыИМ);	
	иначе	
		Контрагент = Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);
	КонецЕсли;

	Подразделение = Справочники.Подразделения.НайтиПоКоду(Storage);
	
	ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ЗаказПокупателя.Ссылка
	             |ИЗ
	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	             |ГДЕ
	             |	ЗаказПокупателя.НомерВходящегоДокумента = &НомерВходящегоДокумента
	             |	И ЗаказПокупателя.Контрагент = &Контрагент
	             |	И ЗаказПокупателя.Подразделение = &Подразделение
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ЗаказПокупателя.Дата УБЫВ";
		
	Запрос.УстановитьПараметр("НомерВходящегоДокумента",СокрЛП(inOrderNumber));
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Рез=Запрос.Выполнить().Выбрать();
    Пока Рез.Следующий() Цикл
		ЗаказСсылка=Рез.Ссылка; 
	КонецЦикла;
		
	
	Если ЗначениеЗаполнено(ЗаказСсылка) тогда
		Если яштПоЗаказуБылиОтгрузки(ЗаказСсылка) Тогда
			ОписаниеОшибки = ОписаниеОшибки + " По заказу уже были отгрузки, корректировки или закрытие. Отмена невозможна.";
			Success = Ложь;
		КонецЕсли;	
		ДокОбъект = ЗаказСсылка.ПолучитьОбъект();
		ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ДокОбъект.ПометкаУдаления = Истина;
		ДокОбъект.Записать();
	Иначе
		ОписаниеОшибки = ОписаниеОшибки + " Заказ покупателя не найден";
		Success = Ложь;
	КонецЕсли;
			
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	РезультатОперации.Success = Success;
	РезультатОперации.Error = ОписаниеОшибки;
	РезультатОперации.Products=неопределено;
	РезультатОперации.OrderNumber=неопределено;
	РезультатОперации.OrderGUID=неопределено;
	
	Возврат РезультатОперации;
КонецФункции


Функция CreateOrderIM(Partner, Goods, Storage, Comment, isTestOrder, ShippingDay, isReserve, inOrderNumber, DirectionOfShipment, amenities, PaymentDate, contract="",CostOfShipping=0,COMMENT_STOCK="",customer)
	СхемаЗаказовДляАЭ = ИСТИНА;	
	
	URL = "www.yst.ru/im";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProducts"));
	
	Ошибка = "";
	Success = Истина;
	OrderNumber = "";
	OrderGUID = "";
	
	КонтрагентРозница = Справочники.Контрагенты.НайтиПоКоду("94143");
	КонтрагентАЭ = Справочники.Контрагенты.НайтиПоКоду("П000382");
	
	Подразделение = Справочники.Подразделения.НайтиПоКоду(Storage);
	
	КодКонтрагента = Partner;
	
	Если customer.Type = "ЮР" тогда
		ИНН = СокрЛП(customer.ULProperties.INN);
		Если ИНН<>"" тогда
			Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИНН);	
		Иначе
		 	Контрагент = Справочники.Контрагенты.ПустаяСсылка();	
		КонецЕсли;
	иначеЕсли customer.Type = "ФИЗ" тогда //Физик, для таких ищем тоже по инн, но в нем записан телефон
		Телефон = СокрЛП(customer.Phone);
		Если Телефон<>"" тогда
			//Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",Телефон);	
			Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("УИД_ИМ",Телефон);	
		Иначе
		 	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли customer.Type = "ТК" тогда //ДПД, подорожник и прочие тк
		Контрагент = Справочники.Контрагенты.НайтиПоКоду(Partner);
	КонецЕсли;
	
	НовыйКонтрагент = ложь;
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Контрагент = СоздатьКонтрагента(КодКонтрагента,Подразделение, customer);
		НовыйКонтрагент = Истина;
		Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() или Контрагент = неопределено тогда
			Success = Ложь;
			Ошибка = "Не удалось найти контрагента";
		КонецЕсли;
	КонецЕсли;
	
	//Если не ЗначениеЗаполнено(Контрагент.КонтрагентДляРезерваИМ)	 тогда
		//КонтрагентОб = Контрагент.ПолучитьОбъект();
		//КонтрагентОб.КонтрагентДляРезерваИМ = Справочники.Контрагенты.НайтиПоКоду("П004703"); //Резерв для ИМ
		//КонтрагентОб.Записать();
	//КонецЕсли;
	
	//23.11.15 Смирнов 
	//если заказ уже есть, то не создаем новый, а возвращаем уже созданный
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗаказПокупателяТовары.Ссылка.Номер,
	             |	ЗаказПокупателяТовары.НомерСтроки,
	             |	ЗаказПокупателяТовары.Количество,
	             |	ЗаказПокупателяТовары.Номенклатура.Код,
	             |	ЗаказПокупателяТовары.Цена,
	             |	ЗаказПокупателяТовары.Ссылка
	             |ИЗ
	             |	(ВЫБРАТЬ ПЕРВЫЕ 1
	             |		ЗаказПокупателя.Ссылка КАК Ссылка
	             |	ИЗ
	             |		Документ.ЗаказПокупателя КАК ЗаказПокупателя
	             |	ГДЕ
	             |		ЗаказПокупателя.Проведен
	             |		И ЗаказПокупателя.Контрагент = &Контрагент
	             |		И ЗаказПокупателя.НомерВходящегоДокумента = &НомерВходящегоДокумента
	             |		И ЗаказПокупателя.Подразделение = &Подразделение
	             |		И ЗаказПокупателя.Дата >= &НачалоГода) КАК Заказ
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	             |		ПО Заказ.Ссылка = ЗаказПокупателяТовары.Ссылка";
	Запрос.УстановитьПараметр("НомерВходящегоДокумента",СокрЛП(inOrderNumber));
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("НачалоГода",НачалоГода(ТекущаяДата()));
	Рез=Запрос.Выполнить().Выбрать();
	ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
	Пока Рез.Следующий() Цикл
		
		Success = истина;
		Ошибка = "Уже есть такой";
		OrderNumber = СокрЛП(Рез.Номер);
		OrderGUID = Строка(Рез.Ссылка.УникальныйИдентификатор());
		
		Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Product"));
	КонецЦикла;
	Если Рез.Количество()>0 тогда
		РезультатОперации.Products		 = Товары;
		РезультатОперации.Success		 = Success;
		РезультатОперации.OrderNumber	 = OrderNumber;
		РезультатОперации.OrderGUID		 = OrderGUID;
		РезультатОперации.Error			 = Ошибка;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Если СтрДлина(Comment) > 500 Тогда
		Success = Ложь;
		Ошибка = "Комментарий к заказу превышает допустимые 500 символов";
	КонецЕсли;
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("НомерСтроки");
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура");
	ТаблицаЗаказа.Колонки.Добавить("НоменклатураСпр");
	ТаблицаЗаказа.Колонки.Добавить("Количество");
	ТаблицаЗаказа.Колонки.Добавить("КоличествоОстаток");
	ТаблицаЗаказа.Колонки.Добавить("Цена");
	
	ТаблицаУслуг = ТаблицаЗаказа.Скопировать();
	
	Для каждого товар из Goods.Products цикл
		СтрокаТЗ = ТаблицаЗаказа.Добавить();
		СтрокаТЗ.НомерСтроки = товар.RowNumber;
		СтрокаТЗ.Номенклатура = товар.Code;
		СтрокаТЗ.Количество =  Число(товар.Quantity);
		СтрокаТЗ.Цена =  Число(товар.Price);
	КонецЦикла;
	
	Для каждого товар из amenities.Products цикл
		СтрокаТЗ = ТаблицаУслуг.Добавить();
		СтрокаТЗ.НомерСтроки = товар.RowNumber;
		СтрокаТЗ.Номенклатура = товар.Code;
		СтрокаТЗ.НоменклатураСпр=Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
		//СтрокаТЗ.НоменклатураСпр = Справочники.Номенклатура.НайтиПоКоду("ЛН00018",,Справочники.Номенклатура.НайтиПоКоду("ЛН00002")); //Транспортная услуга 44-ТР возмещаемые
		СтрокаТЗ.Количество =  Число(товар.Quantity);
		СтрокаТЗ.Цена =  Число(товар.Price);
	КонецЦикла;
	
	Если Подразделение = Справочники.Подразделения.ПустаяСсылка() Тогда
		Success = Ложь;
		Ошибка = "Не удалось найти подразделение по коду " + Storage;
	КонецЕсли;
	
	//Аксессуары = Ложь;
	
	СписокНоменклатуры = Новый СписокЗначений;
	Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
		Номенкл = Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
		Если Номенкл = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Success = Ложь;
			Ошибка = "Не удалось найти номенклатуру по коду " + СтрокаТЗ.Номенклатура;
		КонецЕсли;
		СтрокаТЗ.НоменклатураСпр=Номенкл;
		СписокНоменклатуры.Добавить(Номенкл);		
	КонецЦикла;	
	
	//Создание заказа
	Если Success Тогда
		
		Заказ = Документы.ЗаказПокупателя.СоздатьДокумент();
		Заказ.Дата = ТекущаяДата();
		Если НЕ ShippingDay = "" Тогда  //передается дата отгрузки
			Заказ.ДатаОтгрузки = Дата(ShippingDay);
		КонецЕсли;
		Если isReserve Тогда //Заказы могут быть резервные (закрытваются атвоматически через 10 дней) - дата отгрузки пустая, и с датой отгрузки	
			Заказ.Резерв = Истина;
			Заказ.ДатаОтгрузки = '00010101000000';
		КонецЕсли;
		Заказ.Организация = Справочники.Организации.НайтиПоКоду("00001");
		
		Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); //Крупный опт
		Заказ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
		Заказ.КурсВзаиморасчетов = 1;
		Заказ.КратностьВзаиморасчетов = 1;
		
		Заказ.Контрагент = Контрагент;
		Заказ.Транзит = Истина;
		Заказ.НомерВходящегоДокумента=СокрЛП(inOrderNumber);
		
		Если Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") Тогда  //Головное
			Заказ.Транзит = Ложь;
		ИначеЕсли ЗначениеЗаполнено(Подразделение) И Подразделение.ОбособленноеПодразделение Тогда 
			Заказ.Склад = Подразделение.Склад;
			Заказ.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
			Заказ.Грузоотправитель = Подразделение.Контрагент;
		КонецЕсли;
		
		Если НЕ isTestOrder Тогда
			Заказ.Проверен = Истина;
		КонецЕсли;
		
		Заказ.Комментарий = "IM Service: " + Comment;
		Заказ.КомментарийДляСклада=СокрЛП(COMMENT_STOCK);
		Заказ.Подразделение = Подразделение;  
		Заказ.СуммаВключаетНДС = Истина;
		Заказ.УчитыватьНДС = Истина;
		Заказ.АвтоРезервирование = Истина;
		Заказ.ССайта = Истина;
		Заказ.НапомнитьОСобытии = Истина;
		Заказ.ТипЗаказа = 10;
		
		Если СокрЛП(DirectionOfShipment)<>"" тогда
			Заказ.ТранспортнаяКомпания = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(DirectionOfShipment));
		КонецЕсли;
		
		Заказ.СтоимостьДоставки = CostOfShipping;
		
		//***договор получаем по единому алгоритму: сначала факторинг, потом - продажа
		Если СокрЛП(contract)<>"" тогда
			Заказ.ДоговорКонтрагента=Справочники.ДоговорыКонтрагентов.НайтиПоКоду(СокрЛП(contract),,,Контрагент);
		Иначе	
			Заказ.ДоговорКонтрагента = ПолучитьДоговор(Контрагент,Подразделение);
            списокДоговоров = РегистрыСведений.ДоговорыПоТоварнымГруппам.СоздатьНаборЗаписей();
			СписокДоговоров.Отбор.Контрагент.значение = Контрагент;
			СписокДоговоров.Отбор.Контрагент.использование = истина;
			СписокДоговоров.Отбор.Подразделение.значение = 	Подразделение;
			СписокДоговоров.Отбор.Подразделение.использование = истина;
			СписокДоговоров.Отбор.КлиентКОЛЕСАТУТ.значение = 	ИСТИНА;
			СписокДоговоров.Отбор.КлиентКОЛЕСАТУТ.использование = истина;

			СписокДоговоров.Прочитать();
			ТаблицаДоговоров = СписокДоговоров.Выгрузить();
			
			Если ТаблицаДоговоров.Количество()>0 Тогда
				Заказ.ДоговорКонтрагента =  ТаблицаДоговоров[0].Договор;
			иначе	  
				//***договор получаем по единому алгоритму: сначала факторинг, потом - продажа
				Заказ.ДоговорКонтрагента = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(Заказ);
			конецЕсли;
		КонецЕсли;
		//+++ 10.09.2015 - доп.условия на предоплатные договора - по типу!
		услПредоплатногоДоговора = (Заказ.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001") );
		
		//Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		Если НЕ PaymentDate = "" Тогда  //передается дата отгрузки
			ДатаОплаты = КонецДня(Дата(PaymentDate));
			Если  ДатаОплаты<ТекущаяДата() тогда
				Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
			Иначе
				Если КонецДня(ТекущаяДата())+45*86400 < ДатаОплаты тогда //не более 45 дней
					ДатаОплаты = КонецДня(ТекущаяДата())+45*86400;
				КонецЕсли;
				Заказ.ДатаОплаты = ДатаОплаты;
			КонецЕсли;
		иначе
			Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		КонецЕсли;
		
		СписокНом = Новый СписокЗначений;
		
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			СтрокаТовары = Заказ.Товары.Добавить();
			СтрокаТовары.Номенклатура = СтрокаТЗ.НоменклатураСпр;
			СтрокаТовары.Коэффициент = 1;
			СтрокаТовары.Количество = СтрокаТЗ.Количество;
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, Заказ, Константы.ВалютаРегламентированногоУчета.Получить()); 
			СтрокаТовары.Цена = СтрокаТЗ.Цена;
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, Заказ);
			РассчитатьСуммуТабЧасти(СтрокаТовары, Заказ);
			РассчитатьСуммуНДСТабЧасти(СтрокаТовары, Заказ);
			СписокНом.Добавить(СтрокаТЗ.НоменклатураСпр);
		КонецЦикла;
		//Услуги
		Для каждого СтрокаТЗ ИЗ ТаблицаУслуг Цикл
			СтрокаУслуги = Заказ.Услуги.Добавить();
			СтрокаУслуги.Номенклатура = СтрокаТЗ.НоменклатураСпр;
			СтрокаУслуги.Содержание = ""+СтрокаУслуги.Номенклатура+" *** "+СокрЛП(inOrderNumber);
			СтрокаУслуги.Количество = СтрокаТЗ.Количество;
			СтрокаУслуги.Цена = СтрокаТЗ.Цена;
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаУслуги, Заказ);
			РассчитатьСуммуТабЧасти(СтрокаУслуги, Заказ);
			РассчитатьСуммуНДСТабЧасти(СтрокаУслуги, Заказ);
		КонецЦикла;
		
		Если НЕ Заказ.Товары.Количество() = 0 Тогда
			Если СхемаЗаказовДляАЭ и Контрагент<>КонтрагентАЭ тогда //незачем тратить время на рассчет цен по правилам ценообразования
			иначе	
				ТабЗнач1  = Новый ТаблицаЗначений;
				ТабЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом, ТекущаяДата());
				
				Если ТипЗнч(ТабЗнач1) = Тип("Строка") тогда // нет политики ценообразования документом
					табЗнач1  = новый ТаблицаЗначений;
					табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом); //из регистра сведений
				КонецЕсли;	
				
				Для каждого стр1 из Заказ.Товары цикл
					Если стр1.Цена=0 тогда  //Если передаем цену, то не пересчитываем по договору
						стр2 = табЗнач1.найти(стр1.Номенклатура, "Номенклатура");
						стр1Цена = стр1.Цена;
						Если стр2 = неопределено тогда
							стр2МинимальнаяЦена = 0;
						иначе
							//+++( 10.09.2015 предоплатная цена может быть меньше!  
							//стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
							Если услПредоплатногоДоговора тогда
								попытка
									стр2МинимальнаяЦена = стр2.ЦенаСоСкидкойПредоплаты; 
								исключение // если экспортные цены или из Политики... то там нет поля ЦенаСоСкидкойПредоплаты	
									стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
								КонецПопытки;	
							Иначе
								стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
							КонецЕсли;	
							//+++)
						КонецЕсли;
						
						//-------------------------------
						Если стр1Цена<>стр2МинимальнаяЦена тогда
							стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
							РассчитатьСуммуТабЧасти(стр1, Заказ);
							РассчитатьСуммуНДСТабЧасти(стр1, Заказ);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			//
			
			Заказ.Записать(РежимЗаписиДокумента.Проведение);
			
			Если Контрагент=КонтрагентРозница тогда
				//ставим сразу категорию
				попытка
					менеджерЗаписи = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
					менеджерЗаписи.Объект=Заказ.Ссылка;
					менеджерЗаписи.Категория = Справочники.КатегорииОбъектов.НайтиПоНаименованию("Розница АЭ");
					менеджерЗаписи.Записать();
				Исключение
				КонецПопытки;
			ИначеЕсли customer.Type = "ФИЗ" и СокрЛП(Заказ.НомерТранзакцииПлатежнойСистемы)<>"" тогда
				попытка
					менеджерЗаписи = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
					менеджерЗаписи.Объект=Заказ.Ссылка;
					менеджерЗаписи.Категория = Справочники.КатегорииОбъектов.НайтиПоКоду("00045"); //КОЛЕСАТУТ Карточки
					менеджерЗаписи.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			OrderGUID = Строка(Заказ.Ссылка.УникальныйИдентификатор());
			OrderNumber = СокрЛП(Заказ.Номер);
			
		КонецЕсли;
		
		Если НовыйКонтрагент и Контрагент <> Справочники.Контрагенты.ПустаяСсылка() и Контрагент.Ссылка<>Справочники.Контрагенты.НайтиПоКоду("П001549") тогда
			//Запишем контакты
			ЗаписатьКИ(Контрагент,Customer);
		КонецЕсли;
		
	Иначе
		
		//формируем возвращаемый массив
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			Если СтрокаТЗ.КоличествоОстаток < СтрокаТЗ.Количество Тогда
				Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Product"));
				Товар.RowNumber=(Число(СтрокаТЗ.НомерСтроки));
				Товар.Code=(Строка(СтрокаТЗ.Номенклатура));
				Товар.Quantity=(Число(СтрокаТЗ.КоличествоОстаток));
				Товар.Price=(Число(СтрокаТЗ.Цена));
				Товары.Products.Добавить(Товар);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатОперации.Products		 = Товары;
	РезультатОперации.Success		 = Success;
	РезультатОперации.OrderNumber	 = OrderNumber;
	РезультатОперации.OrderGUID		 = OrderGUID;
	РезультатОперации.Error			 = Ошибка;
	
	Возврат РезультатОперации;
	// Вставить содержимое обработчика.
КонецФункции

Процедура ЗаписатьКИ(Контрагент,Customer)
	ЗаписатьАдрес(Контрагент,Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,Customer.UR_ADRES);
	ЗаписатьАдрес(Контрагент,Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,Customer.Fact_ADRES);
КонецПроцедуры

Процедура ЗаписатьАдрес(Ссылка,ВидКИ,Адрес)
	//запишем контактную инфу
	//Запишем адрес в контактную инф
	//попытка
	регСв = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	регСв.Объект = Ссылка;
	регСв.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	регСв.Вид = ВидКИ; //Адрес заказа
	регСв.Прочитать();
	
	типДома=неопределено;
	дом="";
	
	Если ТипЗНЧ(Адрес.VLAD)=Тип("Строка")тогда
		Если СокрЛП(Адрес.VLAD)<>"" тогда 
			дом=СокрЛП(Адрес.VLAD);
		КонецЕсли;  
	КонецЕсли;
	
	Если ТипЗНЧ(Адрес.HOUSE)=Тип("Строка")тогда
		Если СокрЛП(Адрес.HOUSE)<>"" тогда 
			дом=СокрЛП(Адрес.HOUSE);
		КонецЕсли;
	КонецЕсли;
	
	типКвартиры=неопределено;
	Квартира="";
	
	Если ТипЗНЧ(Адрес.OFFICE)=Тип("Строка")тогда
		Если СокрЛП(Адрес.OFFICE)<>"" тогда
			типКвартиры = "офис";
			Квартира= СокрЛП(Адрес.OFFICE);
		КонецЕсли;  
	КонецЕсли;
	
	Если ТипЗНЧ(Адрес.FLAT)=Тип("Строка")тогда
		Если СокрЛП(Адрес.FLAT)<>"" тогда 
			типКвартиры = "квартира";
			Квартира= СокрЛП(Адрес.FLAT);
		КонецЕсли;
	КонецЕсли;
	
	ТипКорпуса=неопределено;
	корпус="";
	
	Если ТипЗНЧ(Адрес.STR)=Тип("Строка")тогда
		Если СокрЛП(Адрес.STR)<>"" тогда 
			ТипКорпуса="строение";
			корпус = СокрЛП(Адрес.STR);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗНЧ(Адрес.KORPUS)=Тип("Строка")тогда
		Если СокрЛП(Адрес.KORPUS)<>"" тогда 
			ТипКорпуса="корпус";
			корпус = СокрЛП(Адрес.KORPUS);
		КонецЕсли;
	КонецЕсли;
	
	Поле1 = ?(ТипЗНЧ(Адрес.INDEX)=Тип("Строка"),СокрЛП(Адрес.INDEX),"");
	Поле2 = ?(ТипЗНЧ(Адрес.Region)=Тип("Строка"),СокрЛП(Адрес.Region),"");
	Поле3 = ?(ТипЗНЧ(Адрес.District)=Тип("Строка"),СокрЛП(Адрес.District),"");
	Поле4 = ?(ТипЗНЧ(Адрес.CITY)=Тип("Строка"),СокрЛП(Адрес.CITY),"");
	Поле5 = ?(ТипЗНЧ(Адрес.Settlement)=Тип("Строка"),СокрЛП(Адрес.Settlement),"");
	Поле6 = ?(ТипЗНЧ(Адрес.STREET)=Тип("Строка"),СокрЛП(Адрес.STREET),""); 
	Поле7 = Дом;
	Поле8 = Корпус;
	Поле9 = Квартира;
	Поле10 = ""; //Координаты

	Комментарий = ?(ТипЗНЧ(Адрес.Dop_inf)=Тип("Строка"),СокрЛП(Адрес.Dop_inf),"");
	//Представление=УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(регСв);
	
	Если регСв.Поле1 <> Поле1 или  
		регСв.Поле2 <> Поле2 или  
		регСв.Поле3 <> Поле3 или  
		регСв.Поле4 <> Поле4 или
		регСв.Поле5 <> Поле5 или
		регСв.Поле6 <> Поле6 или  
		регСв.Поле7 <> Поле7 или  
		регСв.Поле8 <> Поле8 или  
		регСв.Поле9 <> Поле9   
	тогда
		ПерезаписатьКИ = истина;
	иначе 
		ПерезаписатьКИ =ложь;
	конецЕсли;
	
	Если ПерезаписатьКИ тогда
		регСв.Объект = Ссылка;
		регСв.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		регСв.Вид = ВидКИ; 

		регСв.Поле1 = Поле1;
		регСв.Поле2 = Поле2;
		регСв.Поле3 = Поле3;
		регСв.Поле4 = Поле4;
		регСв.Поле5 = Поле5;
		регСв.Поле6 = Поле6; 
		регСв.Поле7 = Поле7;
		регСв.Поле8 = Поле8;
		регСв.Поле9 = Поле9;
		регСв.Поле10 = Поле10; 
		регСв.Комментарий = Комментарий; 
		регСв.Представление=ПолучитьПредставлениеАдреса(регСв);
		регСв.Записать();
	КонецЕсли;
		
КонецПроцедуры


