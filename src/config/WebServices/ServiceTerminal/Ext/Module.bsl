                                                      
Функция CreateOrder(Partner, PointId, Goods, Comment, ShippingDay, isReserve, TransportCompany)
	возврат СоздатьЗаказ(Partner, PointId, Goods, Comment, ShippingDay, isReserve, TransportCompany,"CreateOrder",неопределено,неопределено,неопределено,неопределено,Неопределено,Неопределено,Неопределено,Неопределено,Неопределено);
КонецФункции

Функция CreateOrder2(Partner, PointId, Goods, Comment, ShippingDay, isReserve, TransportCompany,Prepay,IsStar,WayOfDelivery,AddressId,TkId)
	    возврат СоздатьЗаказ(Partner, PointId, Goods, Comment, ShippingDay, isReserve, TransportCompany,"CreateOrder2",Prepay,IsStar,WayOfDelivery,AddressId,TkId,Неопределено,Неопределено,Неопределено,Неопределено);
КонецФункции
Функция CreateOrder3(Partner, PointId, Goods, Comment, ShippingDay, isReserve, TransportCompany,Prepay,IsStar,WayOfDelivery,AddressId,TkId,DeliveryDate2,CaseForLogistik,IsSeasonAdjournment,DayOfWeekToDeliver);
	    возврат СоздатьЗаказ(Partner, PointId, Goods, Comment, ShippingDay, isReserve, TransportCompany,"CreateOrder3",Prepay,IsStar,WayOfDelivery,AddressId,TkId,DeliveryDate2,CaseForLogistik,IsSeasonAdjournment,DayOfWeekToDeliver);
КонецФункции

функция СоздатьЗаказ(Partner, PointId, Goods, Comment, ShippingDay, isReserve, TransportCompany,NameOperation,Prepay,IsStar,WayOfDelivery,AddressId,TkId,DeliveryDate2,CaseForLogistik,IsSeasonAdjournment,DayOfWeekToDeliver)
	
	ДелитьПоПоставщикам = Константы.ИспользоватьДележкуЗаказовВМинус.Получить();    //Плотников, 31.10.2016, делить в минус
	
	URL = "http://37.1.84.50:8080/Terminal";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProductsResult"));
	
	ВОжидании    = "";
	ПоставщикКод = 0; // 26.05.2017 - для сезонных заказов всегда 0
	Ошибка    = "";
	Success   = Истина;
	OrderNumber = "";
	OrderGUID = "";
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(Partner);
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Success = Ложь;
		Ошибка = "Не удалось найти контрагента";
	КонецЕсли;
	Если Контрагент.ЗапретитьВводЗаказаПокупателя или Контрагент.ЗапретОтгрузки Тогда
		Success = Ложь;
		Ошибка = "Вам запрещено создавать заказы!";
	КонецЕсли;
	
	Если СтрДлина(Comment) > 512 Тогда
		Success = Ложь;
		Ошибка = "Комментарий к заказу превышает допустимые 500 символов";
	КонецЕсли;
	
	//Сохраняем каждый набор товаров в файл, чтоб сохранялась история о запросах	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ЗаписьXML = Новый ЗаписьXML;
	ИмяФайла = "D:\1C\Terminal\Текущий"+ТекущаяДата()+".xml";
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Goods);
	ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура");
	ТаблицаЗаказа.Колонки.Добавить("Количество");
	ТаблицаЗаказа.Колонки.Добавить("Подразделение");
	ТаблицаЗаказа.Колонки.Добавить("Договор");
	ТаблицаЗаказа.Колонки.Добавить("КоличествоОстаток");
	ТаблицаЗаказа.Колонки.Добавить("ИдентификаторЗаказа");
	ТаблицаЗаказа.Колонки.Добавить("НомерЗаказа");
	ТаблицаЗаказа.Колонки.Добавить("Поставщик");      
	
	//для определения подразделения	
	СпрТочка = Справочники.Точки.НайтиПоРеквизиту("Номер", PointId,,Контрагент);
	КодПодр = спрТочка.КодПодразделения;
	Если КодПодр = 0 или КодПодр = -1 Тогда
		ИщемПоПодразделению = Справочники.Подразделения.НайтиПоКоду("00005");
	ИначеЕсли КодПодр = -100 Тогда
		ИщемПоПодразделению = Справочники.Подразделения.НайтиПоКоду("00165");
	Иначе
		ИщемПоПодразделению = Справочники.Подразделения.НайтиПоКоду("00"+Строка(кодПодр));
	КонецЕсли;	
	
	//Плотников, для франчайзи  >>>>>>
	
	Набор = РегистрыСведений.СоответствиеКонтрагентовСкладамФРан.СоздатьНаборЗаписей();
	Набор.Отбор.Контрагент.Установить(Контрагент);
	Набор.Отбор.Точка.Установить(СпрТочка);

	Набор.Прочитать();
	
	если Набор.Количество()>0 Тогда
		СкладФР = Набор[0].Склад;
		ДоговорФР = Набор[0].Договор;
	Иначе
		СкладФР = Справочники.Склады.ПустаяСсылка();
		ДоговорФР = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	
	списокДоговоров = РегистрыСведений.ДоговорыПоТоварнымГруппам.СоздатьНаборЗаписей();
	СписокДоговоров.Отбор.Контрагент.значение = Контрагент;
	СписокДоговоров.Отбор.Контрагент.использование = истина;
	СписокДоговоров.Отбор.Подразделение.значение = 	ИщемПоПодразделению;
	СписокДоговоров.Отбор.Подразделение.использование = истина;
	СписокДоговоров.Отбор.КлиентКОЛЕСАТУТ.значение = 	ЛОЖЬ;
	СписокДоговоров.Отбор.КлиентКОЛЕСАТУТ.использование = истина;
	СписокДоговоров.Прочитать();
	ТаблицаДоговоров = СписокДоговоров.Выгрузить();
	
	Запись = Новый Структура;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Имя = ЧтениеXML.Имя;
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Запись.Вставить(Имя, ЧтениеXML.Значение);      //информацию фнутри блока XML помещаем в структуру
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеXML.Имя = "Products" Тогда
				СтрокаТЗ = ТаблицаЗаказа.Добавить();
				СтрокаТЗ.Номенклатура = Запись.Code;
				СтрокаТЗ.Количество = Число(Запись.Quantity);
				СтрокаТЗ.Подразделение = Запись.Storage;
				СтрокаТЗ.Поставщик = (Запись.SupplierId);
				
				Если Найти(Comment,"OrderFR") > 0 Тогда 	
					СтрокаТЗ.Договор = ДоговорФР;
				Иначе	
					// заполним договор если он указан явно, остальное по договору по умолчанию
					НужныйДоговор = ТаблицаДоговоров.НайтиСтроки(Новый Структура("ВидТовара",Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура).ВидТовара));
					Если НужныйДоговор.Количество()>0 Тогда
						СтрокаТЗ.Договор = НужныйДоговор[0].Договор;
					Иначе
						СтрокаТЗ.Договор = неопределено;
					КонецЕсли;
					/// пощем договор по доп. параметрам
					Если  NameOperation = "CreateOrder2" или NameOperation = "CreateOrder3" тогда
						Если СтрокаТЗ.Договор = неопределено тогда
						 СтрокаТЗ.Договор = Контрагент.ОсновнойДоговорКонтрагента;
                        конецЕсли;
						
						Предоплата = Prepay=Истина;
						Наличка = IsStar=Истина;
						ЭтоТотДоговор = СтрокаТЗ.Договор;
						
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ДоговорыКонтрагентов.Ссылка
						|ИЗ
						|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
						|ГДЕ
						|	ДоговорыКонтрагентов.Владелец = &Владелец
						|	И ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
						|	И ДоговорыКонтрагентов.Организация = &Организация
						|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
						|	И ДоговорыКонтрагентов.ТипДоговора В(&ТипДоговора)
						|	И 99 = 99
						|	И 97 = 97";
						
						Запрос.УстановитьПараметр("Владелец", ЭтоТотДоговор.Владелец);
						Запрос.УстановитьПараметр("Организация", ЭтоТотДоговор.Организация);
						Запрос.УстановитьПараметр("ОтветственноеЛицо", ЭтоТотДоговор.ОтветственноеЛицо);
						Если наличка тогда
							Запрос.Текст = СтрЗаменить(Запрос.Текст,"99 = 99","ДоговорыКонтрагентов.Наименование ПОДОБНО ""%*%""");
						иначе
							Запрос.Текст = СтрЗаменить(Запрос.Текст,"99 = 99","не ДоговорыКонтрагентов.Наименование ПОДОБНО ""%*%""");
						конецЕсли;
						списокПредоплат = Новый СписокЗначений;
						СписокПредоплат.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00001"));
						СписокПредоплат.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00005"));
						Если ЭтоТотДоговор.владелец.Факторинг тогда
							СписокПредоплат.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00015"));
						конецЕсли;
						
						списокОтсрочки = Новый СписокЗначений;
						списокОтсрочки.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00004"));
						Если ЭтоТотДоговор.владелец.Факторинг тогда
							списокОтсрочки.Добавить(Справочники.ТипыДоговоров.Факторинг);
						конецЕсли;

						Если предоплата Тогда
						Запрос.УстановитьПараметр("ТипДоговора", списокПредоплат);
						иначе
						Запрос.УстановитьПараметр("ТипДоговора", списокОтсрочки);
						конецесли;	
						
						Если ЭтоТотДоговор.владелец.Факторинг и не наличка тогда  
							Запрос.Текст = СтрЗаменить(Запрос.Текст,"97 = 97","ДоговорыКонтрагентов.Наименование ПОДОБНО ""%факторинг%""");
						конецесли;
						
						
						Результат = Запрос.Выполнить();
						
						Если не результат.Пустой() Тогда					
							Результат = Результат.Выгрузить();
							Если Результат.найти(ЭтоТотДоговор,"Ссылка")<>неопределено тогда					
								СтрокаТЗ.Договор = ЭтоТотДоговор;
							иначе
								СтрокаТЗ.Договор = Результат[0].ссылка;
							конецЕсли;
						иначе
							СтрокаТЗ.Договор = ЭтоТотДоговор;
						конецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЧтениеXML.Закрыть();
	//для проверки остатков
	ВремТЗ = ТаблицаЗаказа.Скопировать();
	ВремТЗ.Свернуть("Подразделение");
	
	ВремТЗД = ТаблицаЗаказа.Скопировать();
	ВремТЗД.Свернуть("Подразделение,Договор,Поставщик"); 
	
	
	
	Для каждого СтрВремТЗ ИЗ ВремТЗ Цикл  //перебираем все подразделения заказа для проверки остатков
		
		ПодразделениеЗаказа = СтрВремТЗ.Подразделение;
		
		Если  ПодразделениеЗаказа<>"00000" Тогда
			Подразделение = Справочники.Подразделения.НайтиПоКоду(ПодразделениеЗаказа);
			Если Подразделение = Справочники.Подразделения.ПустаяСсылка() Тогда
				Success = Ложь;
				Ошибка = "Не удалось найти подразделение по коду " + ПодразделениеЗаказа;
			КонецЕсли;
			
			//выбираем все строки из заказа по этому подразделению
			Отбор = Новый Структура;
			Отбор.Вставить("Подразделение", ПодразделениеЗаказа);
			Отбор.Вставить("Поставщик","0");
			МассивСтрок = ТаблицаЗаказа.НайтиСтроки(Отбор);
			
			//формируем список номенклатуры для запроса остатков
			СписокНоменклатуры = Новый СписокЗначений;
			Для каждого СтрМассива ИЗ МассивСтрок Цикл
				Номенкл = Справочники.Номенклатура.НайтиПоКоду(СтрМассива.Номенклатура);
				Если Номенкл = Справочники.Номенклатура.ПустаяСсылка() Тогда
					Success = Ложь;
					Ошибка = "Не удалось найти номенклатуру по коду " + СтрМассива.Номенклатура;
					//Плотников, проверка на запрет 10.05.2017 ----------------------------------------------------
				ИначеЕсли Номенкл.ВидТовара = Перечисления.ВидыТоваров.Диски и Контрагент.ЗапретитьДиски Тогда
					Success = Ложь;
					Ошибка = "Вам запрещено создавать заказы с дисками!";
				ИначеЕсли Номенкл.ВидТовара = Перечисления.ВидыТоваров.Шины и Контрагент.ЗапретитьШины Тогда
					Success = Ложь;
					Ошибка = "Вам запрещено создавать заказы с шинами!";
				ИначеЕсли Номенкл.ВидТовара = Перечисления.ВидыТоваров.АКБ и Контрагент.ЗапретитьАКБ Тогда
					Success = Ложь;
					Ошибка = "Вам запрещено создавать заказы с аккумуляторами!";
				ИначеЕсли Номенкл.ВидТовара = Перечисления.ВидыТоваров.Аксессуары и Контрагент.ЗапретитьАксы Тогда
					Success = Ложь;
					Ошибка = "Вам запрещено создавать заказы с аксессуарами!";
					// --------------------------------------------------------------------------------------------
				КонецЕсли;
				СписокНоменклатуры.Добавить(СтрМассива.Номенклатура);
			КонецЦикла;
			
			//Запрос свободных остатков
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("СписокЗаказа", СписокНоменклатуры);
			
			СписокКонтрагентовОТХ = Новый СписокЗначений;
			СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);
			Запрос.УстановитьПараметр("СписокКонтрагентовОТХ", СписокКонтрагентовОТХ);
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	спр.Ссылка
			               |ПОМЕСТИТЬ ВТ_Товары
			               |ИЗ
			               |	Справочник.Номенклатура КАК спр
			               |ГДЕ
			               |	спр.Код В(&СписокЗаказа)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ЕСТЬNULL(ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.Код, ТоварыНаОтветственномХраненииОстатки.Номенклатура.Код), РезервДляИМОстатки.Номенклатура.Код) КАК Код,
			               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0) + ВЫБОР
			               |		КОГДА ЕСТЬNULL(РезервДляИМОстатки.КоличествоОстаток, 0) < 0
			               |			ТОГДА 0
			               |		ИНАЧЕ ЕСТЬNULL(РезервДляИМОстатки.КоличествоОстаток, 0)
			               |	КОНЕЦ КАК ОстатокНаСкладахИОТХ,
			               |	ЕСТЬNULL(ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура, ТоварыНаОтветственномХраненииОстатки.Номенклатура), РезервДляИМОстатки.Номенклатура) КАК Номенклатура
			               |ПОМЕСТИТЬ СвободныеОстатки
			               |ИЗ
			               |	РегистрНакопления.РезервДляИМ.Остатки(
			               |			,
			               |			КонтрагентДляРезерваИМ = &КонтрагентДляРезерваИМ
			               |				И Номенклатура В
			               |					(ВЫБРАТЬ
			               |						ВТ_товары.Ссылка
			               |					ИЗ
			               |						ВТ_товары)
			               |				И Подразделение = &Подразделение) КАК РезервДляИМОстатки
			               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
			               |				,
			               |				Склад.ЗапретитьИспользование = ЛОЖЬ
			               |					И Склад.Транзитный = ЛОЖЬ
			               |					И Номенклатура В
			               |						(ВЫБРАТЬ
			               |							ВТ_товары.Ссылка
			               |						ИЗ
			               |							ВТ_товары)
			               |					И ВЫБОР
			               |						КОГДА &РазрешитьЧерныйЛист = ИСТИНА
			               |							ТОГДА ИСТИНА
			               |						КОГДА &РазрешитьДопДиски = ИСТИНА
			               |							ТОГДА НЕ Номенклатура В
			               |										(ВЫБРАТЬ
			               |											НоменклатураИмпорт.Номенклатура
			               |										ИЗ
			               |											РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт
			               |										ГДЕ
			               |											НоменклатураИмпорт.ЧерныйЛист = ИСТИНА)
			               |						ИНАЧЕ НЕ Номенклатура В
			               |									(ВЫБРАТЬ
			               |										НоменклатураИмпорт.Номенклатура
			               |									ИЗ
			               |										РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт)
			               |					КОНЕЦ) КАК ТоварыНаСкладахОстатки
			               |			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
			               |					,
			               |					Склад.ЗапретитьИспользование = ЛОЖЬ
			               |						И Склад.Транзитный = ЛОЖЬ
			               |						И Номенклатура В
			               |							(ВЫБРАТЬ
			               |								ВТ_товары.Ссылка
			               |							ИЗ
			               |								ВТ_товары)
			               |						И Контрагент В (&СписокКонтрагентовОТХ)) КАК ТоварыНаОтветственномХраненииОстатки
			               |			ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыНаОтветственномХраненииОстатки.Номенклатура
			               |		ПО РезервДляИМОстатки.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	СвободныеОстатки.Код,
			               |	СвободныеОстатки.ОстатокНаСкладахИОТХ - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК СвободныйОстаток,
			               |	СвободныеОстатки.Номенклатура.ВидТовара КАК ВидТовара
			               |ИЗ
			               |	СвободныеОстатки КАК СвободныеОстатки
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
			               |				,
			               |				ЗаказПокупателя.Проверен
			               |					И ЗаказПокупателя.Транзит = ЛОЖЬ
			               |					И Номенклатура В
			               |						(ВЫБРАТЬ
			               |							ВТ_товары.Ссылка
			               |						ИЗ
			               |							ВТ_товары)) КАК ЗаказыПокупателейОстатки
			               |		ПО СвободныеОстатки.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |УНИЧТОЖИТЬ ВТ_Товары
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |УНИЧТОЖИТЬ СвободныеОстатки";			   		
			
			//для ФИЛИАЛОВ - просто замена
			Если ПодразделениеЗаказа <> "00005" Тогда  //
				Запрос.Текст = стрЗаменить(Запрос.Текст ,"Склад.Транзитный = ЛОЖЬ",  "Склад.Транзитный и Склад.Подразделение = &Подразделение");
				Запрос.Текст = стрЗаменить(Запрос.Текст ,"ЗаказПокупателя.Транзит = ЛОЖЬ",  "ЗаказПокупателя.Транзит и ЗаказПокупателя.Подразделение = &Подразделение");
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Подразделение", Подразделение);//надо еще и для резервов
			
			//( 23.01.2017 - доп. остаток по резервному клиенту 
			
			//07.06.17 Смирнов
			//КонтрРезерв = Контрагент.КонтрагентДляРезерваИМ; 
			стрДог = ВремТЗД.Найти(ПодразделениеЗаказа,"Подразделение");
			Если стрДог.Договор<>неопределено тогда
				КонтрРезерв =  стрДог.Договор.КонтрагентДляРезерваИМ;
			Иначе
				ЗаказВремДляДоговора = Документы.ЗаказПокупателя.СоздатьДокумент();
				ЗаказВремДляДоговора.Дата = ТекущаяДата();
				
				ЗаказВремДляДоговора.Транзит = Истина;
				Если ПодразделениеЗаказа = Справочники.Подразделения.НайтиПоКоду("00005") Тогда  //Головное
					ЗаказВремДляДоговора.Транзит = Ложь;
				КонецЕсли;
				
				ЗаказВремДляДоговора.Подразделение = Подразделение;
				ЗаказВремДляДоговора.Организация = Справочники.Организации.НайтиПоКоду("00001");
				ЗаказВремДляДоговора.Контрагент  = Контрагент;
				
				ДоговорЗаказа = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(ЗаказВремДляДоговора);
				ЗаказВремДляДоговора = неопределено;
				
				КонтрРезерв = ДоговорЗаказа.КонтрагентДляРезерваИМ;
			КонецЕсли;   
			
			Если  КонтрРезерв.Код="П004703" и не Контрагент.НеВыгружать Тогда // для Интернет-магазина  НЕ добавляем резервы!?
				КонтрРезерв = Справочники.Контрагенты.ПустаяСсылка();	
			КонецЕсли;
			//) 23.01.2017 
			//Плотников >>>
			Если Найти(Comment,"OrderFR") > 0 Тогда 
				Запрос.УстановитьПараметр("КонтрагентДляРезерваИМ", ДоговорФР.КонтрагентДляРезерваИМ);
			Иначе
				Запрос.УстановитьПараметр("КонтрагентДляРезерваИМ", КонтрРезерв);
			КонецЕсли;
			//Плотников <<<<<
			Запрос.УстановитьПараметр("РазрешитьДопДиски", Контрагент.РазрешитьГрузитьТоварыИзСтопЛиста);
			//06.03.18 Смирнов
			Запрос.УстановитьПараметр("РазрешитьЧерныйЛист", Контрагент.Экспорт);

			
			Результат = Запрос.Выполнить().Выгрузить();
			
			ДополнениеКОшибке = "";
			
			Для каждого СтрМассива ИЗ МассивСтрок Цикл
				СтрокаРезультат = Результат.Найти(СтрМассива.Номенклатура);
				Если СтрокаРезультат = Неопределено Тогда
					СтрМассива.КоличествоОстаток = 0;
					Success = Ложь;
				Иначе
					СтрМассива.КоличествоОстаток = СтрокаРезультат.СвободныйОстаток;
					Если СтрокаРезультат.СвободныйОстаток < СтрМассива.Количество Тогда
						Success = Ложь;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;  //перебор подразделений
	//формируем список номенклатуры для запроса остатков
	СписокНоменклатуры = Новый СписокЗначений;
	Для каждого СтрМассива ИЗ  ТаблицаЗаказа Цикл
		Если стрМассива.Поставщик="0" Тогда
			продолжить;
		Иначе
			СписокНоменклатуры.Добавить(СтрМассива.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	///Проверим по остаткам сторонних поставщиков
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокЗаказа", СписокНоменклатуры);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	спр.Ссылка
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Справочник.Номенклатура КАК спр
	|ГДЕ
	|	спр.Код В(&СписокЗаказа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Ссылка.Код КАК Номенклатура,
	|	СУММА(ЕСТЬNULL(ОстаткиНоменклатурыКонтрагентов.Остаток, 0)) КАК Остаток,
	|	СрокиДоставки.Код КАК Поставщик
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиНоменклатурыКонтрагентов КАК ОстаткиНоменклатурыКонтрагентов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиДоставки КАК СрокиДоставки
	|			ПО ОстаткиНоменклатурыКонтрагентов.Контрагент = СрокиДоставки.Поставщик
	|		ПО ВТ_Товары.Ссылка = ОстаткиНоменклатурыКонтрагентов.Номенклатура
	|ГДЕ
	|	СрокиДоставки.СрокДоставки > 0
	|	И ОстаткиНоменклатурыКонтрагентов.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТ_товары.Ссылка
	|			ИЗ
	|				ВТ_товары)
	|
	|СГРУППИРОВАТЬ ПО
	|	СрокиДоставки.Код,
	|	ВТ_Товары.Ссылка.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Товары";
	Результат = Запрос.Выполнить().Выгрузить();
	
	ДополнениеКОшибке = "";
	
	Для каждого СтрМассива ИЗ ТаблицаЗаказа Цикл
		Если стрМассива.Поставщик="0" Тогда
			продолжить;
		Иначе	
			Отбор = новый структура;
			Отбор.вставить("Номенклатура",СтрМассива.Номенклатура);
			Отбор.вставить("Поставщик",Строка(СтрМассива.Поставщик));
			СтрокаРезультат = Результат.НайтиСтроки(Отбор);
			Если СтрокаРезультат.Количество() = 0 Тогда
				СтрМассива.КоличествоОстаток = 0;
				Success = Ложь;
			Иначе
				СтрМассива.КоличествоОстаток = СтрокаРезультат[0].Остаток;
				Если СтрокаРезультат[0].Остаток < СтрМассива.Количество Тогда
					Success = Ложь;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	
	//Создание заказа(ов)
	Если Success Тогда
		
		Для каждого СтрВремТЗ ИЗ ВремТЗД Цикл  //перебираем все подразделения заказа для проверки остатков
			ДоговорЗаказа = СтрВремТЗ.Договор;
			ПодразделениеЗаказа = СтрВремТЗ.Подразделение;
			Поставщик = СтрВремТЗ.Поставщик;     // это код (число)  //это код из регистра Сроки доставки (что бы никто не догадался))))
			
			Если ПодразделениеЗаказа="00000" Тогда  //СезонныйЗаказПокупателя
				//выбираем все строки из заказа по этому подразделению
				Отбор = Новый Структура;
				Отбор.Вставить("Подразделение", ПодразделениеЗаказа);
				Отбор.Вставить("Договор", ДоговорЗаказа);
				
				МассивСтрок = ТаблицаЗаказа.НайтиСтроки(Отбор);
				
				//Создадим сезонный заказ
				Заказ = Документы.ЗаказПокупателяСезонный.СоздатьДокумент();
				Заказ.Дата = ТекущаяДата();
				Заказ.ДатаДействияПо = Заказ.Дата+120*24*60*60;
				Заказ.АвтоКомплектация = Истина;
				Заказ.ПоТоварамВПути = Истина;
				Заказ.НомерТорговойТочкиКонтрагента = PointId;
				
				Заказ.ПоШтамповке = Истина;
				Если НЕ ShippingDay = "" Тогда  //передается дата отгрузки
					Заказ.ДатаОтгрузки = Дата(ShippingDay);
				КонецЕсли;
				
				
				
				
				
				Заказ.Организация = Справочники.Организации.НайтиПоКоду("00001");
				
				//+++ 15.06.2015 - валютные клиенты
				Если Контрагент.Экспорт и Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов.Код<>"643" Тогда
					Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00028"); //Базовая USD
					Заказ.ВалютаДокумента = Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
					
					//СтруктураВалюты    = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Заказ.Дата, Новый Структура("Валюта", Заказ.ВалютаДокумента));
					//КурсДокумента      = СтруктураВалюты.Курс;
					//КратностьДокумента = СтруктураВалюты.Кратность;
					КурсДокумента = константы.КурсUSD.Получить(); //51.9749; //на 15.04.2015
					КратностьДокумента = 1;
					
					Заказ.КурсВзаиморасчетов = КурсДокумента;
					Заказ.КратностьВзаиморасчетов = КратностьДокумента;
					
				Иначе // как было	
					Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); //Крупный опт
					Заказ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
					Заказ.КурсВзаиморасчетов = 1;
					Заказ.КратностьВзаиморасчетов = 1;
				КонецЕсли;
				
				Заказ.Контрагент = Контрагент;
				
				
				Заказ.Комментарий = "Terminal: " + Comment;
				Если Контрагент.Экспорт 
					и (Контрагент.ОсновнойДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.TyreTechnology 
					или Контрагент.ОсновнойДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.WheelsGroupLimited) Тогда
					Заказ.Подразделение = Справочники.Подразделения.НайтиПоКоду("00166");  //Экспорт;  
				Иначе
					Заказ.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");  //Головное;
				КонецЕсли;
				Заказ.СуммаВключаетНДС = Истина;
				Заказ.УчитыватьНДС = Истина;
				
				Если ДоговорЗаказа = неопределено Тогда
					//***договор получаем по единому алгоритму: сначала факторинг, потом - продажа
					Заказ.ДоговорКонтрагента = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(Заказ);
				Иначе
					Заказ.ДоговорКонтрагента = ДоговорЗаказа;
				КонецЕсли;
				
				//+++ 03.04.2018 - устанавливаем число дней отсрочки и дату оплаты от даты отгрузки
				Если Заказ.ДатаОтгрузки>'00010101' тогда
					попытка //+++ 09.04.2018 для сезонного - ошибка! не надо
						Заказ.ЧислоДнейСМоментаОтгрузки = Заказ.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;  //03.04.2018
						Заказ.ДатаОплаты = макс(Заказ.ДатаОтгрузки, ТекущаяДата()) + Заказ.ЧислоДнейСМоментаОтгрузки*86400;
					исключение
					КонецПопытки;	
				КонецЕсли;
				
				Заказ.Ответственный = Заказ.ДоговорКонтрагента.ОтветственноеЛицо;
				
				
				СписокНом = Новый СписокЗначений;
				
				Для каждого СтрМассива ИЗ МассивСтрок Цикл
					СтрокаТовары = Заказ.Товары.Добавить();
					СтрокаТовары.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СтрМассива.Номенклатура);
					СтрокаТовары.Коэффициент = 1;
					СтрокаТовары.Количество = СтрМассива.Количество;
					ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, Заказ, Константы.ВалютаРегламентированногоУчета.Получить()); 
					ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, Заказ);
					РассчитатьСуммуТабЧасти(СтрокаТовары, Заказ);
					РассчитатьСуммуНДСТабЧасти(СтрокаТовары, Заказ);
					СписокНом.Добавить(Справочники.Номенклатура.НайтиПоКоду(СтрМассива.Номенклатура));
				КонецЦикла;
				
				Если НЕ Заказ.Товары.Количество() = 0 Тогда
					
					ТабЗнач1  = Новый ТаблицаЗначений;
					ТабЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом, ТекущаяДата());
					
					//+++ 10.09.2015 - доп.условия на предоплатные договора - по типу!
					услПредоплатногоДоговора = (Заказ.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00001")
					или Заказ.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ПредоплатаПоСчетам //+++14.08.2017
					или Заказ.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФакторингПредоплата);//22.05.2017
					
					Если ТипЗнч(ТабЗнач1) = Тип("Строка") Тогда // нет политики ценообразования документом
						табЗнач1  = новый ТаблицаЗначений;
						табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом); //из регистра сведений
					КонецЕсли;	
					
					Для каждого стр1 из Заказ.Товары цикл
						стр2 = табЗнач1.найти(стр1.Номенклатура, "Номенклатура");
						стр1Цена = стр1.Цена;
						Если стр2 = неопределено Тогда
							стр2МинимальнаяЦена = 0;
						Иначе
							//+++ 10.09.2015 Цена ПРЕДОПЛАТНАЯ с доп.скидкой
							Если услПредоплатногоДоговора Тогда
								попытка
									стр2МинимальнаяЦена = стр2.ЦенаСоСкидкойПредоплаты; 
								исключение // если экспортные цены или из Политики... то там нет поля ЦенаСоСкидкойПредоплаты	
									стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
								КонецПопытки;	
							Иначе // как было
								стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
							КонецЕсли;
						КонецЕсли;
						
						//-------------------------------
						Если стр1Цена<>стр2МинимальнаяЦена Тогда
							стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
							РассчитатьСуммуТабЧасти(стр1, Заказ);
							РассчитатьСуммуНДСТабЧасти(стр1, Заказ);
						КонецЕсли;
					КонецЦикла;
					
					
					Заказ.Записать(РежимЗаписиДокумента.Проведение);
					
					//Создание задачи менеджеру
					НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
					НоваяЗадача.Исполнитель = Заказ.ДоговорКонтрагента.ОтветственноеЛицо;
					НоваяЗадача.Дата = ТекущаяДата();
					НоваяЗадача.Оповещение = Истина;
					НоваяЗадача.СрокОповещения = ТекущаяДата();
					НоваяЗадача.Наименование = "Создан новый сезонный заказ из Терминала по товарам в пути";
					НоваяЗадача.Описание = "Контрагент " + Заказ.Контрагент.Наименование + Символы.ПС + Строка(Заказ);
					НоваяЗадача.Объект = Заказ.Ссылка;
					НоваяЗадача.Записать();
					
					
					
					OrderGUID = Строка(Заказ.Ссылка.УникальныйИдентификатор());
					OrderNumber = СокрЛП(Заказ.Номер);
					
					Для каждого СтрМассива ИЗ МассивСтрок Цикл
						СтрМассива.ИдентификаторЗаказа = OrderGUID;
						СтрМассива.НомерЗаказа = OrderNumber;
					КонецЦикла;
					
				КонецЕсли;
				
				Если НЕ OrderNumber = "" Тогда
					Попытка
						ПереместитьФайл(ИмяФайла, "D:\1C\Terminal\"+ OrderNumber +".xml");
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				
			КонецЕсли;
			
			Если ПодразделениеЗаказа<>"00000" тогда // ЗаказПокупателя
				Подразделение = Справочники.Подразделения.НайтиПоКоду(ПодразделениеЗаказа);
				
				Если Подразделение = Справочники.Подразделения.ПустаяСсылка() Тогда
					Success = Ложь;
					Ошибка = "Не удалось найти подразделение по коду " + ПодразделениеЗаказа;
				КонецЕсли;
				
				Если Success Тогда
					//выбираем все строки из заказа по этому подразделению					
					Отбор = Новый Структура;                                   //
					Отбор.Вставить("Подразделение", ПодразделениеЗаказа);      //
					Отбор.Вставить("Договор", ДоговорЗаказа);
					Отбор.Вставить("Поставщик", Поставщик);
					МассивСтрок = ТаблицаЗаказа.НайтиСтроки(Отбор); 
					//
				КонецЕсли;                                                     //
				
				
				Заказ = Документы.ЗаказПокупателя.СоздатьДокумент();
				Заказ.Дата = ТекущаяДата();
				Если НЕ ShippingDay = "" Тогда  //передается дата отгрузки
					Заказ.ДатаОтгрузки = Дата(ShippingDay);
				КонецЕсли;
				
				Если IsSeasonAdjournment<> неопределено тогда
				Заказ.СезоннаяПрограмма=IsSeasonAdjournment;
				конецЕсли;

				
				
				
				Если isReserve Тогда //Заказы могут быть резервные (закрытваются атвоматически через 10 дней) - дата отгрузки пустая, и с датой отгрузки	
					Заказ.Резерв = Истина;
					Заказ.ДатаОтгрузки = '00010101000000';
				иначе
					Если  NameOperation = "CreateOrder2" или NameOperation = "CreateOrder3"  тогда
						Заказ.ПоставитьНаОтгрузку = Истина;
						
						//+Лукьяненков 28.02.2018
						//новыйЗаказ.ДатаУстановкиВТерминалеКОтгрузке = ТекущаяДата();	
						Заказ.ДатаУстановкиВТерминалеКОтгрузке = ТекущаяДата();
						//-Лукьяненков 28.02.2018
					конецЕсли;
				КонецЕсли;
				
				Если CaseForLogistik = 22 или CaseForLogistik = 41 или CaseForLogistik = 52 тогда
					Заказ.ДатаОтгрузки = Дата(DeliveryDate2);
				иначеЕсли CaseForLogistik = 22 и Поставщик<>"0" тогда 
					Заказ.ДатаОтгрузки = Дата(DeliveryDate2);
				иначеЕсли CaseForLogistik = 51 и ПодразделениеЗаказа="00005" тогда 
					Заказ.ДатаОтгрузки = Дата(DeliveryDate2);
				конецесли;
				
				
				Если TransportCompany Тогда
					Заказ.TerminalОтгрузкаТранспортнойКомпанией = Истина;
					Заказ.ТранспортнаяКомпания = справочники.Контрагенты.НайтиПоКоду("94121");
				КонецЕсли;
				Заказ.Организация = Справочники.Организации.НайтиПоКоду("00001");
				
				//+++ 15.06.2015 - валютные клиенты
				Если Контрагент.Экспорт и Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов.Код<>"643" Тогда
					Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00028"); //Базовая USD
					Заказ.ВалютаДокумента = Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
					
					//СтруктураВалюты    = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Заказ.Дата, Новый Структура("Валюта", Заказ.ВалютаДокумента));
					//КурсДокумента      = СтруктураВалюты.Курс;
					//КратностьДокумента = СтруктураВалюты.Кратность;
					КурсДокумента = константы.КурсUSD.Получить(); //51.9749; //на 15.04.2015
					КратностьДокумента = 1;
					
					Заказ.КурсВзаиморасчетов = КурсДокумента;
					Заказ.КратностьВзаиморасчетов = КратностьДокумента;
					
				Иначе // как было	
					Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); //Крупный опт
					Заказ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
					Заказ.КурсВзаиморасчетов = 1;
					Заказ.КратностьВзаиморасчетов = 1;
				КонецЕсли;
				
				Заказ.Контрагент = Контрагент;
				//	
				//	//Плотников 10.08.2016
				Если ЗначениеЗаполнено(Контрагент.Грузополучатель) Тогда
					Заказ.Грузополучатель = Контрагент.Грузополучатель;
				КонецЕсли;
				
				Заказ.НомерТорговойТочкиКонтрагента = PointId;
				
				//*** 2016.03.24 По PointId получим торговую точки, и запишем ее адрес в адрес доставки
				СпрТочка = Справочники.Точки.НайтиПоРеквизиту("Номер", PointId,,Контрагент);
				Если НЕ СпрТочка.Пустая() Тогда
					Если СпрТочка.Согласован И ЗначениеЗаполнено(СпрТочка.Адрес) Тогда
						Заказ.АдресДоставки =СпрТочка.Адрес
						//+++ 16.04.2016 добавляем Телефон и Контактное Лицо
						+ ?(СокрЛП(СпрТочка.ИнформацияДляВодителя)="", "", 
						"~"+СокрЛП(СпрТочка.ИнформацияДляВодителя)+" "+СокрЛП(СпрТочка.КонтактноеЛицо) ); 
						Заказ.КоординатыДоставки =СокрЛП(СпрТочка.Координаты);
						Заказ.ВидАдреса =СпрТочка.ВидАдреса;
					КонецЕсли;
				КонецЕсли;	
				
				
				Заказ.Транзит = Истина;
				Если Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") Тогда  //Головное
					Заказ.Транзит = Ложь;
					
				ИначеЕсли ЗначениеЗаполнено(Подразделение) И Подразделение.ОбособленноеПодразделение Тогда 
					Заказ.Склад = Подразделение.Склад;
					Заказ.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
					Заказ.Грузоотправитель = Подразделение.Контрагент;
				КонецЕсли;
				
				//+++ 29.11.2016 - если делится в "-", то Проверен=Истина !
				Если Поставщик<>"0" Тогда      
					Заказ.Проверен = Ложь;
					Заказ.Статус = Перечисления.СтатусыЗаказов.ВОбработке;
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	СрокиДоставки.Поставщик
					|ИЗ
					|	РегистрСведений.СрокиДоставки КАК СрокиДоставки
					|ГДЕ
					|	СрокиДоставки.Код = &Код";
					
					Запрос.УстановитьПараметр("Код",Поставщик);
					
					Результат = Запрос.Выполнить().Выгрузить();
					
					Если результат.Количество()>0 тогда
						Заказ.Поставщик = Результат[0].Поставщик;
					иначе
						Заказ.Комментарий = "Не нашли поставщика "+ Поставщик;
					конецЕсли;
				Иначе						
					Заказ.Проверен = Истина;
				КонецЕсли;
				
				Заказ.НеУчитыватьВСезонномЗаказе = Истина;
				
				Заказ.Комментарий = Заказ.Комментарий+"Terminal: " + Comment;
				Заказ.Подразделение = Подразделение; 
				
				//29.11.2016 - Экспортные рублевые Клиенты  - БЕЗ НДС
				Если  заказ.Контрагент.Экспорт
					и заказ.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код="643"
					и Найти( нрег(заказ.ДоговорКонтрагента.Наименование) ,"экспорт")>0 
					и Найти( заказ.ДоговорКонтрагента.Наименование,"*" )=0 Тогда
					Заказ.СуммаВключаетНДС = ЛОЖЬ;
					Заказ.УчитыватьНДС 	   = ЛОЖЬ;
				Иначе	
					Заказ.СуммаВключаетНДС = Истина;
					Заказ.УчитыватьНДС 	   = Истина;
				КонецЕсли;
				
				Заказ.АвтоРезервирование = Истина;
				Заказ.ССайта = Истина;
				Заказ.НапомнитьОСобытии = Истина;
				Заказ.ТипЗаказа = 8;
				
				
				Если ДоговорЗаказа = Неопределено Тогда
					//***договор получаем по единому алгоритму: сначала факторинг, потом - продажа
					Заказ.ДоговорКонтрагента = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(Заказ);
				Иначе
					Заказ.ДоговорКонтрагента = ДоговорЗаказа;
				КонецЕсли;
				
				//+++ 03.04.2018 - устанавливаем число дней отсрочки и дату оплаты от даты отгрузки
				Если Заказ.ДатаОтгрузки>'00010101' тогда
					Заказ.ЧислоДнейСМоментаОтгрузки = Заказ.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности; 
					Заказ.ДатаОплаты = макс(Заказ.ДатаОтгрузки, ТекущаяДата()) + Заказ.ЧислоДнейСМоментаОтгрузки*86400;
				КонецЕсли;
								
				//подставление доп параметров
				Если  NameOperation = "CreateOrder2" или NameOperation = "CreateOrder3" тогда  //по новому
				
				//WayOfDelivery =0 - мы везем, WayOfDelivery =1 самовывоз
                 номСпособа = ?(WayOfDelivery =0, "6" ,"10" );
				 Заказ.СпособОтгрузки =Справочники.СпособыОтгрузкиТовара.НайтиПоКоду(номСпособа);
				 Заказ.Самовывоз = (WayOfDelivery=1);
				 
				 Если Заказ.Самовывоз и Заказ.Подразделение.Код = "00005" тогда // самовывоз с Ярославля
					 УстановитьСамовывозСоСкладаФилиала(Заказ);//+++ 27.03.2018 - может быть самовывозом с филиала...
				 КонецЕсли;
				 
				 //транспортная компения
				 Если ЗначениеЗаполнено(TkId) тогда
				 Заказ.ТКТерминал = Строка(TkId);	 
				 Заказ.ТранспортнаяКомпания = Справочники.ТранспортныеКомпании.НайтиПоКоду(Строка(TkId)).Контрагент;
				 Заказ.Комментарий = Заказ.Комментарий+" ДОСТАВКА ТК! "+Справочники.ТранспортныеКомпании.НайтиПоКоду(Строка(TkId)).Наименование ;
				 конецЕсли;
				 //адрес доставки
				 если ЗначениеЗаполнено(AddressId)  тогда
				 отбор = Новый Структура;
				 отбор.Вставить("Объект",заказ.Контрагент);
				 отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
				 отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду(СокрЛП(AddressId)));
				 Запись = РегистрыСведений.КонтактнаяИнформация.Получить(Отбор);
				 Заказ.АдресДоставки = Запись.представление+" "+Запись.Комментарий;
				 Заказ.АдресДляТТН = Запись.представление;
				 Заказ.ВидАдреса = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду(СокрЛП(AddressId));
				 конецЕсли;
				услПредоплатногоДоговора = Prepay = Истина; 
			    иначе //по старому
					
				//+++ 10.09.2015 - доп.условия на предоплатные договора - по типу!
				услПредоплатногоДоговора = (Заказ.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001")
				или Заказ.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ПредоплатаПоСчетам 
				или Заказ.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФакторингПредоплата);//22.05.2017
				
				//Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
				Если  услПредоплатногоДоговора Тогда
					Если Заказ.ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности Тогда
						ЧислоДнейСМоментаОтгрузки = мин(Заказ.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности, 30); // не более месяца !
					Иначе	
						ЧислоДнейСМоментаОтгрузки = 14;
					КонецЕсли;
				Иначе 
					ЧислоДнейСМоментаОтгрузки = Заказ.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;//03.04.2018
					//ЧислоДнейСМоментаОтгрузки = Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты; //+++ НЕ используется!
				КонецЕсли;
				Заказ.ЧислоДнейСМоментаОтгрузки = ЧислоДнейСМоментаОтгрузки; //+++ 27.03.2018
				Заказ.ДатаОплаты = ТекущаяДата() + 86400 * ЧислоДнейСМоментаОтгрузки;
				//+++)
				конецЕсли;

				СписокНом = Новый СписокЗначений;
				
				Если Найти(Заказ.Комментарий,"OrderFR") > 0 Тогда 
					Заказ.ВводитьТолькоПеремещение = Истина;
				КонецЕсли;
				//Плотников                 <<<<<<
				
				Для каждого СтрМассива ИЗ МассивСтрок Цикл
					СтрокаТовары = Заказ.Товары.Добавить();
					СтрокаТовары.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СтрМассива.Номенклатура);
					СтрокаТовары.Коэффициент = 1;
					СтрокаТовары.Количество = СтрМассива.Количество;
					//Плотников, для франчайзи  >>>>>>
					Если Найти(Заказ.Комментарий,"OrderFR") > 0 Тогда
						СтрокаТовары.Размещение = СкладФР;
					КонецЕсли;
					//Плотников                 <<<<<<
					ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, Заказ, Константы.ВалютаРегламентированногоУчета.Получить()); 
					ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, Заказ);
					РассчитатьСуммуТабЧасти(СтрокаТовары, Заказ);
					РассчитатьСуммуНДСТабЧасти(СтрокаТовары, Заказ);
					СписокНом.Добавить(Справочники.Номенклатура.НайтиПоКоду(СтрМассива.Номенклатура));
				КонецЦикла;
				
				Если Заказ.Товары.Количество() <> 0 Тогда
					
					ТабЗнач1  = Новый ТаблицаЗначений;
					ТабЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом, ТекущаяДата());
					
					Если ТипЗнч(ТабЗнач1) = Тип("Строка") Тогда // нет политики ценообразования документом
						табЗнач1  = новый ТаблицаЗначений;
						табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом); //из регистра сведений
					КонецЕсли;	
					
					Для каждого стр1 из Заказ.Товары цикл
						стр2 = табЗнач1.найти(стр1.Номенклатура, "Номенклатура");
						стр1Цена = стр1.Цена;
						Если стр2 = неопределено Тогда
							стр2МинимальнаяЦена = 0;
						Иначе
							//+++ 10.09.2015 Цена ПРЕДОПЛАТНАЯ с доп.скидкой
							Если услПредоплатногоДоговора Тогда
								попытка
									стр2МинимальнаяЦена = стр2.ЦенаСоСкидкойПредоплаты; 
								исключение // если экспортные цены или из Политики... то там нет поля ЦенаСоСкидкойПредоплаты	
									стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
								КонецПопытки;	
							Иначе // как было
								стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
							КонецЕсли;
						КонецЕсли;
						
						//-------------------------------
						Если стр1Цена<>стр2МинимальнаяЦена Тогда
							стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
							РассчитатьСуммуТабЧасти(стр1, Заказ);
							РассчитатьСуммуНДСТабЧасти(стр1, Заказ);
						КонецЕсли;
					КонецЦикла;
					
					Заказ.Записать(РежимЗаписиДокумента.Проведение);
					
										
					Если DayOfWeekToDeliver = 1 тогда
						Запись = Регистрысведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
						Запись.Объект =  Заказ.Ссылка; //+++ 06.04.2018
						Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90222");
						Запись.Значение = Истина;
						Запись.Записать(Истина);
					конецесли;
					

					
					
					OrderGUID = Строка(Заказ.Ссылка.УникальныйИдентификатор());
					OrderNumber = СокрЛП(Заказ.Номер);
					
					Для каждого СтрМассива ИЗ МассивСтрок Цикл
						СтрМассива.ИдентификаторЗаказа = OrderGUID;
						СтрМассива.НомерЗаказа = OrderNumber;
					КонецЦикла;
					
					Если Заказ.Статус = Перечисления.СтатусыЗаказов.ВОбработке Тогда
						ВОжидании=?(ВОжидании<>"",ВОжидании+";"+OrderGUID,OrderGUID);
					КонецЕсли;
				КонецЕсли;  //товары есть
				
				Если НЕ OrderNumber = "" Тогда
					Попытка
						ПереместитьФайл(ИмяФайла, "D:\1C\Terminal\"+ OrderNumber +".xml");
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				
			КонецЕсли;	
			
		КонецЦикла;
		
		
		
		//формируем возвращаемый массив с товарами и GUID заказа
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ProductResult"));
			Товар.Code.Добавить(Строка(СтрокаТЗ.Номенклатура));
			Товар.Quantity.Добавить(Число(СтрокаТЗ.Количество));
			Товар.Storage.Добавить(Строка(СтрокаТЗ.Подразделение));
			Товар.OrderGUID.Добавить(Строка(СтрокаТЗ.ИдентификаторЗаказа));
			Товар.OrderNumber.Добавить(Строка(СтрокаТЗ.НомерЗаказа));
			Товары.ProductsResult.Добавить(Товар);
			
			
		КонецЦикла;
		
	Иначе
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			Если  СтрокаТЗ.Подразделение<>"00000" Тогда
				Если СтрокаТЗ.КоличествоОстаток < СтрокаТЗ.Количество   Тогда
					Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ProductResult"));
					Товар.Code.Добавить(Строка(СтрокаТЗ.Номенклатура));
					Товар.Quantity.Добавить(Число(СтрокаТЗ.КоличествоОстаток));
					Товар.Storage.Добавить(Строка(СтрокаТЗ.Подразделение));
					
					Товар.OrderGUID.Добавить("");
					Товар.OrderNumber.Добавить("");
					
					Товары.ProductsResult.Добавить(Товар);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РезультатОперации.Products		 = Товары;
	РезультатОперации.Success		 = Success;
	РезультатОперации.Error			 = Ошибка;
	РезультатОперации.OrdersFromSuppliers			 = ВОжидании;
	РезультатОперации.SupplierId			         = ПоставщикКод;
	Возврат РезультатОперации;	
	

конецФункции
Функция DeleteOrder(OrderGUID)

	ОписаниеОшибки = "";
	Success = Истина;
	
	УИД = Новый УникальныйИдентификатор(СокрЛП(OrderGUID));
	ЗаказСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(УИД);
	Если (НЕ ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка()) И (НЕ ЗаказСсылка = Неопределено) Тогда
		Если яштПоЗаказуБылиОтгрузки(ЗаказСсылка) Тогда
			ОписаниеОшибки = ОписаниеОшибки + " По заказу уже были отгрузки, корректировки или закрытие. Отмена невозможна.";
			Success = Ложь;
		//+++( 13.04.2018	
		ИначеЕсли яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ЗаказСсылка) Тогда
			ОписаниеОшибки = ОписаниеОшибки +  "По заказу уже начали отгружать со склада. Отмена невозможна.";
			Success = Ложь;
		//иначеЕсли ЗаказСсылка.ВМаршрут тогда
			//ОписаниеОшибки = ОписаниеОшибки + " Заказ уже установен в маршрут на отгрузку. Отмена невозможна.";
			//Success = Ложь;
		КонецЕсли;
		
		ДокОбъект = ЗаказСсылка.ПолучитьОбъект();
		Если ЗаказСсылка.Проведен тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		//+++)
		
		ДокОбъект.ПометкаУдаления = Истина;
		ДокОбъект.Записать();
	Иначе
		ОписаниеОшибки = ОписаниеОшибки + " Заказ покупателя не найден";
		Success = Ложь;
	КонецЕсли;
		
	URL = "http://37.1.84.50:8080/Terminal";
		
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "ResultDel");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	РезультатОперации.Success = Success;
	РезультатОперации.Error = ОписаниеОшибки;
	Возврат РезультатОперации;	
	
КонецФункции


//Функция ChangeOrder(OrderGUID, Goods, Comment, isReserve, ShippingDay)
Функция ChangeOrder(OrderGUID, Goods, Comment, isReserve, ShippingDay,TransportCompany, DeliveryInfo,DeliveryDay,IsStar,WayOfDelivery,AddressId,TkId)
	
	ОписаниеОшибки = "";
	Success = Истина;
	
	УИД = Новый УникальныйИдентификатор(СокрЛП(OrderGUID));
	ЗаказСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(УИД);
	Если (НЕ ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка()) И (НЕ ЗаказСсылка = Неопределено) Тогда
		
		Если ЗаказСсылка.ПометкаУдаления Тогда
			ОписаниеОшибки = ОписаниеОшибки + " Заказ помечен на удаление. Редактирование невозможно";
			Success = Ложь;
		КонецЕсли;
		
		Если яштПоЗаказуБылиОтгрузки(ЗаказСсылка) Тогда
			ОписаниеОшибки = ОписаниеОшибки + " По заказу уже были отгрузки, корректировки или закрытие. Изменение заказа невозможно.";
			Success = Ложь;
		КонецЕсли;	
		
		//еще одна проверка
		Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ЗаказСсылка) Тогда
			ОписаниеОшибки = ОписаниеОшибки + " Заказ уже отгружается со склада! Изменение заказа невозможно.";
			Success = Ложь;
		КонецЕсли;	
		
		//15.06.2015 - ограничение до 500
		Если СтрДлина(Comment) > 500 Тогда
			Success = Ложь;
			Ошибка = "Комментарий к заказу превышает допустимые 500 символов";
		КонецЕсли;
		
		Если Success Тогда
			
			ДокОбъект = ЗаказСсылка.ПолучитьОбъект();
			
			Если НЕ Comment = "" Тогда
				ДокОбъект.Комментарий = "Terminal: " + Comment;
			КонецЕсли;
			
			Если НЕ ShippingDay = "" Тогда  //передается дата отгрузки
				ДокОбъект.ДатаОтгрузки = Дата(ShippingDay);
			КонецЕсли;
			
			Если isReserve Тогда //Заказы могут быть резервные (закрытваются атвоматически через 10 дней) - дата отгрузки пустая, и с датой отгрузки	
				регСв = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
				регСв.Отбор.Объект.ВидСравнения 	= ВидСравнения.Равно;
				регСв.Отбор.Объект.Значение 		= ЗаказСсылка;
				регСв.Отбор.Объект.Использование 	= Истина;
				регСв.Прочитать();
				Если регСв.Количество() > 0 Тогда
					Success = Ложь;
					Ошибка = "Заказ уже включен в отгрузку, установка признака Резерв невозможна";
				иначеЕсли ЗаказСсылка.ВМаршрут тогда //14.03.2018
					Success = Ложь;
					Ошибка = "Заказ уже включен в Маршрут. Установка признака Резерв невозможна";
				Иначе
					ДокОбъект.Резерв = Истина;
					ДокОбъект.ДатаОтгрузки = '00010101000000';
				КонецЕсли;
			Иначе
				ДокОбъект.Резерв = Ложь;
				ДокОбъект.ПоставитьНаОтгрузку = истина;
				
				//+Лукьяненков 28.02.2018
				ДокОбъект.ДатаУстановкиВТерминалеКОтгрузке = ТекущаяДата();	
				//-Лукьяненков 28.02.2018
				
				//+++( 12.04.2018 - ВАЖНО НЕ УДАЛЯТЬ!
				попытка
					ДокОбъект.ЧислоДнейСМоментаОтгрузки = ДокОбъект.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
					ДокОбъект.ДатаОплаты = ДокОбъект.ДатаОтгрузки + ДокОбъект.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности * 86400;
				исключение
				КонецПопытки;	
				//+++)
				
			КонецЕсли;
			
			//изменение
			ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://37.1.84.50:8080/Terminal", "ArrayOfProducts");
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.ОткрытьФайл("D:\1C\Terminal\Текущий.xml");
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Goods,,"http://37.1.84.50:8080/Terminal");
			ЗаписьXML.Закрыть();
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл("D:\1C\Terminal\Текущий.xml");
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
			ОбъектXDTO.Проверить();
			ЧтениеXML.Закрыть();
			
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("КодНоменклатуры");
			ТЗ.Колонки.Добавить("Количество");
			ТЗ.Колонки.Добавить("Подразделение");
			
			Для Каждого Запись ИЗ ОбъектXDTO.Products Цикл
				СтрокаТЗ = ТЗ.Добавить();
				СтрокаТЗ.КодНоменклатуры = Запись.Code[0];
				СтрокаТЗ.Количество = Запись.Quantity[0];
				СтрокаТЗ.Подразделение = Запись.Storage[0];
			КонецЦикла;
			
			//исключаем массу ошибок, когда заказ редактируется в 1С и не успевает еще синхронизироваться со Store
			//в массиве передается больше строк, чем есть в заказе
			Если ТЗ.Количество() > ДокОбъект.Товары.Количество() Тогда
				ОписаниеОшибки = ОписаниеОшибки + " Заказ покупателя отредактирован менеджером.";
				Success = Ложь;
			КонецЕсли;
			
			Если Success Тогда
				Для Каждого СтрТовар ИЗ ДокОбъект.Товары Цикл
					СтрокаТЗ = ТЗ.Найти(СтрТовар.Номенклатура.Код, "КодНоменклатуры");
					Если СтрокаТЗ = Неопределено Тогда
						СтрТовар.Количество = 0;
					Иначе
						Если НЕ СтрТовар.Номенклатура.Код = СтрокаТЗ.КодНоменклатуры Тогда 
							ОписаниеОшибки = ОписаниеОшибки + " Не совпадают коды товаров в строках массива и заказа.";
							Success = Ложь;
							Прервать;
						Иначе
							Если СтрокаТЗ.Количество > СтрТовар.Количество Тогда
								ОписаниеОшибки = ОписаниеОшибки + " В строке " + СтрокаТЗ.НомерСтроки + " количество изменено на большее";
								Success = Ложь;
								Прервать;
							ИначеЕсли СтрокаТЗ.Количество < СтрТовар.Количество Тогда
								СтрТовар.Количество = СтрокаТЗ.Количество;
								РассчитатьСуммуТабЧасти(СтрТовар, ДокОбъект);
								РассчитатьСуммуНДСТабЧасти(СтрТовар, ДокОбъект);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//Изменяем доставку через ДПД
					Если не ДокОбъект.TerminalОтгрузкаТранспортнойКомпанией и TransportCompany Тогда
						ДокОбъект.TerminalОтгрузкаТранспортнойКомпанией = Истина;
							CostOfDelivery = число(DeliveryInfo.CostOfDelivery);
							Если CostOfDelivery>0 Тогда
							//ищем так, потому что 2 карточки с одинаковым кодом
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ
								|	Номенклатура.Ссылка
								|ИЗ
								|	Справочник.Номенклатура КАК Номенклатура
								|ГДЕ
								|	Номенклатура.Услуга
								|	И Номенклатура.Код = ""ЛН02397""";

							Результат = Запрос.Выполнить().Выбрать();
							Результат.следующий();
							спрНом = Результат.ссылка;							
								
								
							СтрокаУслуги = ДокОбъект.Услуги.Добавить();
							СтрокаУслуги.Номенклатура = спрНом;
							СтрокаУслуги.Содержание = ""+СтрокаУслуги.Номенклатура;
							СтрокаУслуги.Количество = 1;
							СтрокаУслуги.Цена = CostOfDelivery;
							ЗаполнитьСтавкуНДСТабЧасти(СтрокаУслуги, ДокОбъект);
							РассчитатьСуммуТабЧасти(СтрокаУслуги, ДокОбъект);
							РассчитатьСуммуНДСТабЧасти(СтрокаУслуги, ДокОбъект);
							
							
						   КонецЕсли;
						  стр = ДокОбъект.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "ContactFio";
						  стр.Значение = DeliveryInfo.ContactFio;
						  стр = ДокОбъект.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "ContactPhone";
						  стр.Значение = DeliveryInfo.ContactPhone;
						  стр = ДокОбъект.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "RegionId";
						  стр.Значение = DeliveryInfo.RegionId;
						  стр = ДокОбъект.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "CityId";
						  стр.Значение = DeliveryInfo.CityId;
						  стр = ДокОбъект.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "TerminalOrAddress";
						  стр.Значение = DeliveryInfo.TerminalOrAddress;
						  стр = ДокОбъект.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "TerminalCode";
						  стр.Значение = DeliveryInfo.TerminalCode;
						  стр = ДокОбъект.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "PostalCode";
						  стр.Значение = DeliveryInfo.PostalCode;
						  стр = ДокОбъект.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "StreetType";
						  стр.Значение = DeliveryInfo.StreetType;
						  стр = ДокОбъект.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "Street";
						  стр.Значение = DeliveryInfo.Street;
						  стр = ДокОбъект.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "BlockType";
						  стр.Значение = DeliveryInfo.BlockType;
						  стр = ДокОбъект.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "House";
						  стр.Значение = DeliveryInfo.House;
						  Если НЕ DeliveryDay = "" Тогда  //передается дата доставки
						  стр = ДокОбъект.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "ДатаДоставки";
						  стр.Значение = Дата(DeliveryDay);
				           КонецЕсли;

					ИначеЕсли  ДокОбъект.TerminalОтгрузкаТранспортнойКомпанией и не TransportCompany Тогда
						ДокОбъект.TerminalОтгрузкаТранспортнойКомпанией = Ложь;
						ДокОбъект.РеквизитыЗаказаТК.Очистить();
						 //удалим из услуг доставку
						 Запрос = Новый Запрос;
						 Запрос.Текст = 
								"ВЫБРАТЬ
								|	Номенклатура.Ссылка
								|ИЗ
								|	Справочник.Номенклатура КАК Номенклатура
								|ГДЕ
								|	Номенклатура.Услуга
								|	И Номенклатура.Код = ""ЛН02397""";

							Результат = Запрос.Выполнить().Выбрать();
							Результат.следующий();
							спрНом = Результат.ссылка;							
						  строка=  ДокОбъект.Услуги.Найти(спрНом,"Номенклатура");
						  Если строка<>неопределено Тогда
							 ДокОбъект.Услуги.Удалить(строка); 
						  КонецЕсли;	  
					  КонецЕсли;
					  
					  
					  
				//поменяем договор, если требуется
				 
				 ЕстьЗвезда = Найти(ДокОбъект.ДоговорКонтрагента.Наименование,"*");
				 Если IsStar = ложь и ЕстьЗвезда <>0 тогда
					 //подставим Договор без * 
					 
					 Запрос = Новый Запрос;
					 Запрос.Текст = 
					 "ВЫБРАТЬ
					 |	ДоговорыКонтрагентов.Ссылка
					 |ИЗ
					 |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					 |ГДЕ
					 |	ДоговорыКонтрагентов.Владелец = &Владелец
					 |	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
					 |	И ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
					 |	И не ДоговорыКонтрагентов.Наименование ПОДОБНО ""%*%""";
					 
					 Запрос.УстановитьПараметр("Владелец", ДокОбъект.Контрагент);
					 Запрос.УстановитьПараметр("ОтветственноеЛицо", ДокОбъект.ДоговорКонтрагента.ОтветственноеЛицо);
					 Запрос.УстановитьПараметр("ТипДоговора", ДокОбъект.ДоговорКонтрагента.ТипДоговора);
					 
					 Результат = Запрос.Выполнить();
					 Если не Результат.Пустой() тогда
					 Выборка = Результат.Выгрузить();
					 ДокОбъект.ДоговорКонтрагента = Выборка[0].ссылка;
				     иначе
					 Success = Ложь;
			         ОписаниеОшибки = ОписаниеОшибки + " Не найден нужный договор без *";
					 конецЕсли;
				 ИначеЕсли IsStar = истина и ЕстьЗвезда =0 тогда
					 //подставим договор со *
					 
					 Запрос = Новый Запрос;
					 Запрос.Текст = 
					 "ВЫБРАТЬ
					 |	ДоговорыКонтрагентов.Ссылка
					 |ИЗ
					 |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					 |ГДЕ
					 |	ДоговорыКонтрагентов.Владелец = &Владелец
					 |	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
					 |	И ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
					 |	И ДоговорыКонтрагентов.Наименование ПОДОБНО ""%*%""";
					 
					 Запрос.УстановитьПараметр("Владелец", ДокОбъект.Контрагент);
					 Запрос.УстановитьПараметр("ОтветственноеЛицо", ДокОбъект.ДоговорКонтрагента.ОтветственноеЛицо);
					 Запрос.УстановитьПараметр("ТипДоговора", ДокОбъект.ДоговорКонтрагента.ТипДоговора);
					 
					 Результат = Запрос.Выполнить();
					 Если не Результат.Пустой() тогда
					 Выборка = Результат.Выгрузить();
					 ДокОбъект.ДоговорКонтрагента = Выборка[0].ссылка;
					 иначе
					 Success = Ложь;
			         ОписаниеОшибки = ОписаниеОшибки + " Не найден нужный договор со *";
					 конецЕсли;
				 конецЕсли;
		  
			//удаляем всем строки с количеством 0
			Если Success Тогда
				КоличествоСтрокТЧ = ДокОбъект.Товары.Количество();
				стр = 0;
				Пока стр < КоличествоСтрокТЧ Цикл
					Если ДокОбъект.Товары[стр].Количество = 0 Тогда
						ДокОбъект.Товары.Удалить(стр);
						КоличествоСтрокТЧ = КоличествоСтрокТЧ - 1;
					Иначе
						стр = стр+1;
					КонецЕсли;
				КонецЦикла; 
				//Добавим адрес и способ доставки
				Если ЗначениеЗаполнено(WayOfDelivery) тогда
				ДокОбъект.СпособОтгрузки = ?(WayOfDelivery =0,Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("6"),Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("10"));
				конецЕсли;
				ДокОбъект.Самовывоз = WayOfDelivery =1;
				 //адрес доставки
				 если ЗначениеЗаполнено(AddressId) и  WayOfDelivery =0 тогда
				 отбор = Новый Структура;
				 отбор.Вставить("Объект",ДокОбъект.Контрагент);
				 отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
				 отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду(СокрЛП(AddressId)));
				 Запись = РегистрыСведений.КонтактнаяИнформация.Получить(Отбор);
				 ДокОбъект.АдресДоставки = Запись.представление+" "+Запись.Комментарий;
				 ДокОбъект.АдресДляТТН = Запись.представление;
				 ДокОбъект.ВидАдреса = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду(СокрЛП(AddressId)); 
				 ДокОбъект.ТранспортнаяКомпания = справочники.ТранспортныеКомпании.НайтиПоКоду(Строка(TkId)).Контрагент;
				 конецЕсли;
				 
				 ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			 КонецЕсли;
			 
		 КонецЕсли;
		
	Иначе
		ОписаниеОшибки = ОписаниеОшибки + " Заказ покупателя не найден";
		Success = Ложь;
	КонецЕсли;
		
	URL = "http://37.1.84.50:8080/Terminal";
		
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "ResultDel");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	РезультатОперации.Success = Success;
	РезультатОперации.Error = ОписаниеОшибки;
	Возврат РезультатОперации;
	
КонецФункции


Функция CreateSeasonOrder(Partner,PointId, Goods, Storage, ActionDate, Comment, SeasonOrderGUID)
	
	//***2015.11.26 добавлено условие
	//Если SeasonOrderGUID пустой, то это создание нового Сезонного закзаза
	//Иначе - редактирование Сезонного заказа 
	
	//***2016.03.01 добавлено условие
	//Если ActionDate = Дата(1,1,1) то это заказ для иностранных клиентов. Иначе - для русских, и на заводы не разбиваем.
	
	URL = "http://37.1.84.50:8080/Terminal";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProductsResult"));
		
	Ошибка = "";
	Success = Истина;
	OrderGUID = "";
	OrderNumber = "";
				
	//Сохраняем каждый набор товаров в файл, чтоб сохранялась история о запросах	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл("D:\1C\Terminal\Текущий.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Goods);
	ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл("D:\1C\Terminal\Текущий.xml");
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура");
	ТаблицаЗаказа.Колонки.Добавить("Количество");
	ТаблицаЗаказа.Колонки.Добавить("Завод");
	ТаблицаЗаказа.Колонки.Добавить("ИдентификаторЗаказа");
	ТаблицаЗаказа.Колонки.Добавить("НомерЗаказа");	
	
	Запись = Новый Структура;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Имя = ЧтениеXML.Имя;
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Запись.Вставить(Имя, ЧтениеXML.Значение);      //информацию фнутри блока XML помещаем в структуру
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеXML.Имя = "Products" Тогда
				СтрокаТЗ = ТаблицаЗаказа.Добавить();
				СтрокаТЗ.Номенклатура = Запись.Code;
				СтрокаТЗ.Количество = Число(Запись.Quantity);
				СтрокаТЗ.Завод = ?(Запись.Свойство("Storage"), Запись.Storage, "");   //Storage - необязательный параметр, поэтому в структуре его может не быть
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЧтениеXML.Закрыть();
	
	Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
		Номенкл = Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
		Если Номенкл = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Success = Ложь;
			Ошибка = "Не удалось найти номенклатуру по коду " + СтрокаТЗ.Номенклатура;
		КонецЕсли;
	КонецЦикла;	
	
	Подразделение = Справочники.Подразделения.НайтиПоКоду(Storage);
	Если Подразделение = Справочники.Подразделения.ПустаяСсылка() Тогда
		Success = Ложь;
		Ошибка = "Не удалось найти подразделение по коду " + Storage;
	КонецЕсли;
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(Partner);
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Success = Ложь;
		Ошибка = "Не удалось найти контрагента";
	КонецЕсли;
		
	Если Success Тогда
		
		Если SeasonOrderGUID = "" Тогда //создание новых заказов
			
			Если ActionDate = Дата(1,1,1) Тогда   //иностранные сезонные заказы, разбиваем на несколько по заводу
				
				ВремТЗ = ТаблицаЗаказа.Скопировать();
				ВремТЗ.Свернуть("Завод");
				
				Для каждого СтрВремТЗ ИЗ ВремТЗ Цикл  //перебираем все заводы заказа
					//выбираем все строки из заказа по этому подразделению
					Отбор = Новый Структура;
					Отбор.Вставить("Завод", СтрВремТЗ.Завод);
					МассивСтрок = ТаблицаЗаказа.НайтиСтроки(Отбор);
					
					//Создание заказа
					Если Success Тогда
						
						Заказ = Документы.ЗаказПокупателяСезонный.СоздатьДокумент();
						Заказ.Дата = ТекущаяДата();
						Заказ.ДатаДействияПо = ActionDate;
						Заказ.Завод = СтрВремТЗ.Завод;
						
						//+++ 15.06.2015 - валютные клиенты
						Если Контрагент.Экспорт и Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов.Код<>"643" Тогда
							Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00028"); //Базовая USD
							Заказ.ВалютаДокумента = Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
							
							КурсДокумента = константы.КурсUSD.Получить(); //51.9749; //на 15.04.2015
							КратностьДокумента = 1;
							
							Заказ.КурсВзаиморасчетов = КурсДокумента;
							Заказ.КратностьВзаиморасчетов = КратностьДокумента;
						Иначе // как было	
							Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); //Крупный опт
							Заказ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
							Заказ.КурсВзаиморасчетов = 1;
							Заказ.КратностьВзаиморасчетов = 1;
						КонецЕсли;
						Заказ.Контрагент = Контрагент;
						Заказ.Транзит = Ложь;
						
						//+++ 15.06.2015 - первые 500 символов!  всего 512
						Если СтрДлина(Comment) > 500 Тогда
							Заказ.Комментарий = "Terminal: " + лев(Comment,500);
						Иначе
							Заказ.Комментарий = "Terminal: " + Comment;
						КонецЕсли;
						Заказ.Подразделение = Подразделение;  
						Заказ.СуммаВключаетНДС = Истина;
						Заказ.УчитыватьНДС = Истина;
						Заказ.НапомнитьОСобытии = Истина;
						
						//***договор получаем по единому алгоритму: сначала факторинг, потом - продажа
						Заказ.ДоговорКонтрагента = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(Заказ);
						
						///Организацию берем из договора
						Если ЗначениеЗаполнено(Заказ.ДоговорКонтрагента) тогда
							Заказ.Организация = Заказ.ДоговорКонтрагента.Организация;
						иначе
							Заказ.Организация = Справочники.Организации.НайтиПоКоду("00001");
						конецЕсли;
												

						
						
						
						////+++ 10.09.2015 - для сезонного заказа НЕ ДОЛЖНО БЫТЬ предоплатного договора! 
						СписокНом = Новый СписокЗначений;
												
						Для каждого СтрМассива ИЗ МассивСтрок Цикл
							СтрокаТовары = Заказ.Товары.Добавить();
							СтрокаТовары.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СтрМассива.Номенклатура);
							СтрокаТовары.Коэффициент = 1;
							СтрокаТовары.Количество = СтрМассива.Количество;
							ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, Заказ, Константы.ВалютаРегламентированногоУчета.Получить()); 
							ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, Заказ);
							РассчитатьСуммуТабЧасти(СтрокаТовары, Заказ);
							РассчитатьСуммуНДСТабЧасти(СтрокаТовары, Заказ);
							СписокНом.Добавить(Справочники.Номенклатура.НайтиПоКоду(СтрМассива.Номенклатура));
						КонецЦикла;
						
						Если НЕ Заказ.Товары.Количество() = 0 Тогда
							
							ТабЗнач1  = Новый ТаблицаЗначений;
							ТабЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом, ТекущаяДата());
							
							Если ТипЗнч(ТабЗнач1) = Тип("Строка") Тогда // нет политики ценообразования документом
								табЗнач1  = новый ТаблицаЗначений;
								табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом); //из регистра сведений
							КонецЕсли;	
							
							Для каждого стр1 из Заказ.Товары цикл
								стр2 = табЗнач1.найти(стр1.Номенклатура, "Номенклатура");
								стр1Цена = стр1.Цена;
								Если стр2 = неопределено Тогда
									стр2МинимальнаяЦена = 0;
								Иначе
									стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
								КонецЕсли;
								
								//-------------------------------
								Если стр1Цена<>стр2МинимальнаяЦена Тогда
									стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
									РассчитатьСуммуТабЧасти(стр1, Заказ);
									РассчитатьСуммуНДСТабЧасти(стр1, Заказ);
								КонецЕсли;
							КонецЦикла;
							
							Заказ.НомерТорговойТочкиКонтрагента = PointId;

							Заказ.Записать(РежимЗаписиДокумента.Запись);
							OrderGUID = Строка(Заказ.Ссылка.УникальныйИдентификатор());
							OrderNumber = СокрЛП(Заказ.Номер);
							
							Для каждого СтрМассива ИЗ МассивСтрок Цикл
								СтрМассива.ИдентификаторЗаказа = OrderGUID;
								СтрМассива.НомерЗаказа = OrderNumber;
							КонецЦикла;
							
							//Создание задачи менеджеру
							НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
							НоваяЗадача.Исполнитель = Заказ.Контрагент.ОсновнойМенеджерКонтрагента;
							НоваяЗадача.Дата = ТекущаяДата();
							НоваяЗадача.Оповещение = Истина;
							НоваяЗадача.СрокОповещения = ТекущаяДата();
							НоваяЗадача.Наименование = "Создан новый сезонный заказ из Терминала";
							НоваяЗадача.Описание = "Контрагент " + Заказ.Контрагент.Наименование + Символы.ПС + Строка(Заказ);
							НоваяЗадача.Объект = Заказ.Ссылка;
							НоваяЗадача.Записать();
		
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ OrderNumber = "" Тогда
						Попытка
							ПереместитьФайл("D:\1C\Terminal\Текущий.xml", "D:\1C\Terminal\"+ OrderNumber +".xml");
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				//Создание заказа
				Если Success Тогда
					
					Заказ = Документы.ЗаказПокупателяСезонный.СоздатьДокумент();
					Заказ.Дата = ТекущаяДата();
					Заказ.ДатаДействияПо = ActionDate;
					Заказ.Организация = Справочники.Организации.НайтиПоКоду("00001");
					
					//+++ 15.06.2015 - валютные клиенты
					Если Контрагент.Экспорт и Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов.Код<>"643" Тогда
						Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00028"); //Базовая USD
						Заказ.ВалютаДокумента = Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
						
						КурсДокумента = константы.КурсUSD.Получить(); //51.9749; //на 15.04.2015
						КратностьДокумента = 1;
						
						Заказ.КурсВзаиморасчетов = КурсДокумента;
						Заказ.КратностьВзаиморасчетов = КратностьДокумента;
					Иначе // как было	
						Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); //Крупный опт
						Заказ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
						Заказ.КурсВзаиморасчетов = 1;
						Заказ.КратностьВзаиморасчетов = 1;
					КонецЕсли;
					Заказ.Контрагент = Контрагент;
					Заказ.Транзит = Ложь;
					
					//+++ 15.06.2015 - первые 500 символов!  всего 512
					Если СтрДлина(Comment) > 500 Тогда
						Заказ.Комментарий = "Terminal: " + лев(Comment,500);
					Иначе
						Заказ.Комментарий = "Terminal: " + Comment;
					КонецЕсли;
					Заказ.Подразделение = Подразделение;  
					Заказ.СуммаВключаетНДС = Истина;
					Заказ.УчитыватьНДС = Истина;
					Заказ.НапомнитьОСобытии = Истина;
					
					//***договор получаем по единому алгоритму: сначала факторинг, потом - продажа
					Заказ.ДоговорКонтрагента = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(Заказ);
					
					////+++ 10.09.2015 - для сезонного заказа НЕ ДОЛЖНО БЫТЬ предоплатного договора! 		
					
					СписокНом = Новый СписокЗначений;
					
					Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
						СтрокаТовары = Заказ.Товары.Добавить();
						СтрокаТовары.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
						СтрокаТовары.Коэффициент = 1;
						СтрокаТовары.Количество = СтрокаТЗ.Количество;
						ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, Заказ, Константы.ВалютаРегламентированногоУчета.Получить()); 
						ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, Заказ);
						РассчитатьСуммуТабЧасти(СтрокаТовары, Заказ);
						РассчитатьСуммуНДСТабЧасти(СтрокаТовары, Заказ);
						СписокНом.Добавить(Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура));
					КонецЦикла;
					
					Если НЕ Заказ.Товары.Количество() = 0 Тогда
						
						ТабЗнач1  = Новый ТаблицаЗначений;
						ТабЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом, ТекущаяДата());
						
						Если ТипЗнч(ТабЗнач1) = Тип("Строка") Тогда // нет политики ценообразования документом
							табЗнач1  = новый ТаблицаЗначений;
							табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом); //из регистра сведений
						КонецЕсли;	
						
						Для каждого стр1 из Заказ.Товары цикл
							стр2 = табЗнач1.найти(стр1.Номенклатура, "Номенклатура");
							стр1Цена = стр1.Цена;
							Если стр2 = неопределено Тогда
								стр2МинимальнаяЦена = 0;
							Иначе
								стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
							КонецЕсли;
							
							//-------------------------------
							Если стр1Цена<>стр2МинимальнаяЦена Тогда
								стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
								РассчитатьСуммуТабЧасти(стр1, Заказ);
								РассчитатьСуммуНДСТабЧасти(стр1, Заказ);
							КонецЕсли;
						КонецЦикла;
						
						
						Заказ.Записать(РежимЗаписиДокумента.Запись);
						OrderGUID = Строка(Заказ.Ссылка.УникальныйИдентификатор());
						OrderNumber = СокрЛП(Заказ.Номер);
						
						Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
							СтрокаТЗ.ИдентификаторЗаказа = OrderGUID;
							СтрокаТЗ.НомерЗаказа = OrderNumber;
						КонецЦикла;
						
						//Создание задачи менеджеру
						НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
						НоваяЗадача.Исполнитель = Заказ.Контрагент.ОсновнойМенеджерКонтрагента;
						НоваяЗадача.Дата = ТекущаяДата();
						НоваяЗадача.Оповещение = Истина;
						НоваяЗадача.СрокОповещения = ТекущаяДата();
						НоваяЗадача.Наименование = "Создан новый сезонный заказ из Терминала";
						НоваяЗадача.Описание = "Контрагент " + Заказ.Контрагент.Наименование + Символы.ПС + Строка(Заказ);
						НоваяЗадача.Объект = Заказ.Ссылка;
						НоваяЗадача.Записать();
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ OrderNumber = "" Тогда
					Попытка
						ПереместитьФайл("D:\1C\Terminal\Текущий.xml", "D:\1C\Terminal\"+ OrderNumber +".xml");
					Исключение
					КонецПопытки;
				КонецЕсли;
					
			КонецЕсли; ///Если ActionDate = Дата(1,1,1)
			
			//формируем возвращаемый массив с товарами и GUID заказа
			Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
				Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ProductResult"));
				Товар.Code.Добавить(Строка(СтрокаТЗ.Номенклатура));
				Товар.Quantity.Добавить(Число(СтрокаТЗ.Количество));
				Товар.Storage.Добавить(Строка(СтрокаТЗ.Завод));
				Товар.OrderGUID.Добавить(Строка(СтрокаТЗ.ИдентификаторЗаказа));
				Товар.OrderNumber.Добавить(Строка(СтрокаТЗ.НомерЗаказа));
				Товары.ProductsResult.Добавить(Товар);
			КонецЦикла;
			
		Иначе //заполнен SeasonOrderGUID - находим и редактируем заказ
			
			УИД = Новый УникальныйИдентификатор(СокрЛП(SeasonOrderGUID));
			ЗаказСсылка = Документы.ЗаказПокупателяСезонный.ПолучитьСсылку(УИД);
			Если (НЕ ЗаказСсылка = Документы.ЗаказПокупателяСезонный.ПустаяСсылка()) И (НЕ ЗаказСсылка = Неопределено) Тогда
				Заказ = ЗаказСсылка.ПолучитьОбъект();
			Иначе
				ОписаниеОшибки = ОписаниеОшибки + " Заказ покупателя сезонный не найден";
				Success = Ложь;
			КонецЕсли;
			
			Если Success Тогда
				
				//перезаполняем и записываем
				Если СтрДлина(Comment) > 500 Тогда
					Заказ.Комментарий = "Terminal: " + лев(Comment,500);
				Иначе
					Заказ.Комментарий = "Terminal: " + Comment;
				КонецЕсли;
				
				Заказ.ДатаДействияПо = ActionDate;
				
				Заказ.Товары.Очистить();
				
				СписокНом = Новый СписокЗначений;
				
				Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
					СтрокаТовары = Заказ.Товары.Добавить();
					СтрокаТовары.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
					СтрокаТовары.Коэффициент = 1;
					СтрокаТовары.Количество = СтрокаТЗ.Количество;
					ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, Заказ, Константы.ВалютаРегламентированногоУчета.Получить()); 
					ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, Заказ);
					РассчитатьСуммуТабЧасти(СтрокаТовары, Заказ);
					РассчитатьСуммуНДСТабЧасти(СтрокаТовары, Заказ);
					СписокНом.Добавить(Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура));
				КонецЦикла;
				
				Если НЕ Заказ.Товары.Количество() = 0 Тогда
					
					ТабЗнач1  = Новый ТаблицаЗначений;
					ТабЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Заказ.Контрагент, СписокНом, ТекущаяДата());
					
					Если ТипЗнч(ТабЗнач1) = Тип("Строка") Тогда // нет политики ценообразования документом
						табЗнач1  = новый ТаблицаЗначений;
						табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Заказ.Контрагент, СписокНом); //из регистра сведений
					КонецЕсли;	
					
					Для каждого стр1 из Заказ.Товары цикл
						стр2 = табЗнач1.найти(стр1.Номенклатура, "Номенклатура");
						стр1Цена = стр1.Цена;
						Если стр2 = неопределено Тогда
							стр2МинимальнаяЦена = 0;
						Иначе
							стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
						КонецЕсли;
						
						//-------------------------------
						Если стр1Цена<>стр2МинимальнаяЦена Тогда
							стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
							РассчитатьСуммуТабЧасти(стр1, Заказ);
							РассчитатьСуммуНДСТабЧасти(стр1, Заказ);
						КонецЕсли;                               
					КонецЦикла;
					
					Заказ.Записать(РежимЗаписиДокумента.Запись);
					OrderGUID = Строка(Заказ.Ссылка.УникальныйИдентификатор());
					OrderNumber = СокрЛП(Заказ.Номер);
					
				КонецЕсли;
				
			Иначе
				
				OrderGUID = "";
				OrderNumber = "";
				
			КонецЕсли;
			
			//формируем возвращаемый массив с товарами и GUID заказа
			Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
				Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ProductResult"));
				Товар.Code.Добавить(Строка(СтрокаТЗ.Номенклатура));
				Товар.Quantity.Добавить(Число(СтрокаТЗ.Количество));
				Товар.Storage.Добавить(Строка(СтрокаТЗ.Завод));
				Товар.OrderGUID.Добавить(Строка(СтрокаТЗ.ИдентификаторЗаказа));
				Товар.OrderNumber.Добавить(Строка(СтрокаТЗ.НомерЗаказа));
				Товары.ProductsResult.Добавить(Товар);
			КонецЦикла;
			
		КонецЕсли; //заполнен SeasonOrderGUID
		
	Иначе //Success
		
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ProductResult"));
			Товар.Code.Добавить(Строка(СтрокаТЗ.Номенклатура));
			Товар.Quantity.Добавить(Число(СтрокаТЗ.Количество));
			Товар.Storage.Добавить(Строка(СтрокаТЗ.Завод));
			Товар.OrderGUID.Добавить("");
			Товар.OrderNumber.Добавить("");
			Товары.ProductsResult.Добавить(Товар);
		КонецЦикла;
		
	КонецЕсли;
			
	РезультатОперации.Products		 = Товары;
	РезультатОперации.Success		 = Success;
	РезультатОперации.Error			 = Ошибка;
		
	Возврат РезультатОперации;	
			
КонецФункции


Функция DeleteRestoreSeasonOrder(SeasonOrderGUID, Delete)

	ОписаниеОшибки = "";
	Success = Истина;
	
	УИД = Новый УникальныйИдентификатор(СокрЛП(SeasonOrderGUID));
	ЗаказСсылка = Документы.ЗаказПокупателяСезонный.ПолучитьСсылку(УИД);
	Если (НЕ ЗаказСсылка = Документы.ЗаказПокупателяСезонный.ПустаяСсылка()) И (НЕ ЗаказСсылка = Неопределено) Тогда
	Иначе
		ОписаниеОшибки = ОписаниеОшибки + " Заказ покупателя сезонный не найден";
		Success = Ложь;
	КонецЕсли;
	
	Если Delete Тогда
		ДокОбъект = ЗаказСсылка.ПолучитьОбъект();
		ДокОбъект.ПометкаУдаления = Истина;
		//Попытка
			ДокОбъект.Записать();
		//Исключение
		//	ОписаниеОшибки = ОписаниеОшибки + " Не удалось удалить Сезонный заказ";
		//	Success = Ложь;
		//КонецПопытки;
	Иначе
		ДокОбъект = ЗаказСсылка.ПолучитьОбъект();
		ДокОбъект.ПометкаУдаления = Ложь;
		//Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		//Исключение
		//	ОписаниеОшибки = ОписаниеОшибки + " Не удалось восстановить Сезонный заказ";
		//	Success = Ложь;
		//КонецПопытки;
	КонецЕсли;
		
	URL = "http://37.1.84.50:8080/Terminal";
		
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "ResultDel");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	РезультатОперации.Success = Success;
	РезультатОперации.Error = ОписаниеОшибки;
	Возврат РезультатОперации;	
	
КонецФункции

Функция AnalyseSeasonOrder(SeasonOrderGUID)
	Ошибка = "";
	Success = Истина;
	
	URL = "http://37.1.84.50:8080/Terminal";
		
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "ResultAnalyse");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProductAnalyseSeasonOrder"));
	
	
	УИД = Новый УникальныйИдентификатор(СокрЛП(SeasonOrderGUID));
	ЗаказСсылка = Документы.ЗаказПокупателяСезонный.ПолучитьСсылку(УИД);
	Если ( ЗаказСсылка = Документы.ЗаказПокупателяСезонный.ПустаяСсылка()) Или ( Найти(Строка(ЗаказСсылка),"<Объект не найден>") <> 0 ) Тогда
		Ошибка = " Заказ покупателя сезонный не найден";
		Success = Ложь;
	КонецЕсли;
	Если Success Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяСезонныйТовары.Номенклатура,
		|	ЗаказПокупателяСезонныйТовары.Количество
		|ПОМЕСТИТЬ ЗаказСезонный
		|ИЗ
		|	Документ.ЗаказПокупателяСезонный.Товары КАК ЗаказПокупателяСезонныйТовары
		|ГДЕ
		|	ЗаказПокупателяСезонныйТовары.Ссылка = &Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка
		|ПОМЕСТИТЬ Заказы
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.ДокументОснование = &Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказСезонный.Номенклатура.Код КАК Номенклатура,
		|	ЗаказСезонный.Количество,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ВРезерве,
		|	ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0) КАК Отгружено,
		|	ЗаказСезонный.Количество - ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0) КАК Остаток
		|ИЗ
		|	ЗаказСезонный КАК ЗаказСезонный
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
		|				,
		|				ЗаказПокупателя В
		|						(ВЫБРАТЬ
		|							Заказы.Ссылка
		|						ИЗ
		|							Заказы КАК Заказы)
		|					И ЗаказПокупателя.Проверен) КАК ЗаказыПокупателейОстатки
		|		ПО ЗаказСезонный.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
		|				,
		|				,
		|				,
		|				ЗаказПокупателя В
		|						(ВЫБРАТЬ
		|							Заказы.Ссылка
		|						ИЗ
		|							Заказы КАК Заказы)
		|					И ЗаказПокупателя.Проверен) КАК ПродажиОбороты
		|		ПО ЗаказСезонный.Номенклатура = ПродажиОбороты.Номенклатура";

	Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);

	Результат = Запрос.Выполнить().Выгрузить();

		
		
			//формируем возвращаемый массив с товарами и GUID заказа
		Для каждого СтрокаТЗ ИЗ Результат Цикл
			Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ProductAnalyseSeasonOrder"));
			Товар.Code.Добавить(Строка(СтрокаТЗ.Номенклатура));
			Товар.Quantity.Добавить(Число(СтрокаТЗ.Количество));
			Товар.Reserve.Добавить(Число(СтрокаТЗ.ВРезерве));
			Товар.Quantityfact.Добавить(Число(СтрокаТЗ.Отгружено));
			Товар.Rest.Добавить(Число(СтрокаТЗ.Остаток));
			//Товар.DateDelivery.Добавить(Дата(1,1,1));
			Товары.ProductAnalyseSeasonOrder.Добавить(Товар);
		КонецЦикла;
	
	КонецЕсли;	
	РезультатОперации.Products		 = Товары;
	РезультатОперации.Success		 = Success;
	РезультатОперации.Error			 = Ошибка;
		
	Возврат РезультатОперации;	

	
КонецФункции

Функция CreateOrderWithTransportData(Partner, PointId, Goods, Comment, ShippingDay, isReserve, TransportCompany, DeliveryInfo,DeliveryDay)
	//DeliveryInfo	
	URL = "http://37.1.84.50:8080/Terminal";
		
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProductsResult"));
	
	Ошибка = "";
	Success = Истина;
	OrderNumber = "";
	OrderGUID = "";
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(Partner);
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Success = Ложь;
		Ошибка = "Не удалось найти контрагента";
	КонецЕсли;
	
	//15.06.2015 - ограничение до 500
	Если СтрДлина(Comment) > 500 Тогда
		Success = Ложь;
		Ошибка = "Комментарий к заказу превышает допустимые 500 символов";
	КонецЕсли;
	
	//Сохраняем каждый набор товаров в файл, чтоб сохранялась история о запросах	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл("D:\1C\Terminal\Инфо.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, DeliveryInfo);
	ЗаписьXML.Закрыть();
	
	//Сохраняем каждый набор товаров в файл, чтоб сохранялась история о запросах	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл("D:\1C\Terminal\Текущий.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Goods);
	ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл("D:\1C\Terminal\Текущий.xml");
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура");
	ТаблицаЗаказа.Колонки.Добавить("Количество");
	ТаблицаЗаказа.Колонки.Добавить("Подразделение");
	ТаблицаЗаказа.Колонки.Добавить("Договор");
	ТаблицаЗаказа.Колонки.Добавить("КоличествоОстаток");
	ТаблицаЗаказа.Колонки.Добавить("ИдентификаторЗаказа");
	ТаблицаЗаказа.Колонки.Добавить("НомерЗаказа");
	
	    //для определения подразделения	
	СпрТочка = Справочники.Точки.НайтиПоРеквизиту("Номер", PointId,,Контрагент);
	КодПодр = спрТочка.КодПодразделения;
	Если КодПодр = 0 или КодПодр = -1 Тогда
		ИщемПоПодразделению = Справочники.Подразделения.НайтиПоКоду("00005");
	Иначе
		ИщемПоПодразделению = Справочники.Подразделения.НайтиПоКоду("00"+Строка(кодПодр));
    КонецЕсли;	

	
    списокДоговоров = РегистрыСведений.ДоговорыПоТоварнымГруппам.СоздатьНаборЗаписей();
	СписокДоговоров.Отбор.Контрагент.значение = Контрагент;
	СписокДоговоров.Отбор.Контрагент.использование = истина;
	СписокДоговоров.Отбор.Подразделение.значение = 	ИщемПоПодразделению;
	СписокДоговоров.Отбор.Подразделение.использование = истина;
	СписокДоговоров.Отбор.КлиентКОЛЕСАТУТ.значение = 	ЛОЖЬ;
	СписокДоговоров.Отбор.КлиентКОЛЕСАТУТ.использование = истина;

	
	СписокДоговоров.Прочитать();
	ТаблицаДоговоров = СписокДоговоров.Выгрузить();
	
	Запись = Новый Структура;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Имя = ЧтениеXML.Имя;
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Запись.Вставить(Имя, ЧтениеXML.Значение);      //информацию фнутри блока XML помещаем в структуру
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеXML.Имя = "Products" Тогда
				СтрокаТЗ = ТаблицаЗаказа.Добавить();
				СтрокаТЗ.Номенклатура = Запись.Code;
				СтрокаТЗ.Количество = Число(Запись.Quantity);
				СтрокаТЗ.Подразделение = Запись.Storage;
				
				// заполним договор если он указан явно, остальное по договору по умолчанию
				НужныйДоговор = ТаблицаДоговоров.НайтиСтроки(Новый Структура("ВидТовара",Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура).ВидТовара));
				Если НужныйДоговор.Количество()>0 Тогда
				СтрокаТЗ.Договор = НужныйДоговор[0].Договор;
			    Иначе
				СтрокаТЗ.Договор = неопределено;
			    КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЧтениеXML.Закрыть();
	//для проверки остатков
	ВремТЗ = ТаблицаЗаказа.Скопировать();
	ВремТЗ.Свернуть("Подразделение");
	
	ВремТЗД = ТаблицаЗаказа.Скопировать();
	ВремТЗД.Свернуть("Подразделение,Договор,");

	
	
	Для каждого СтрВремТЗ ИЗ ВремТЗ Цикл  //перебираем все подразделения заказа для проверки остатков
		
		ПодразделениеЗаказа = СтрВремТЗ.Подразделение;
		
		Если  ПодразделениеЗаказа<>"00000" Тогда
			Подразделение = Справочники.Подразделения.НайтиПоКоду(ПодразделениеЗаказа);
			Если Подразделение = Справочники.Подразделения.ПустаяСсылка() Тогда
				Success = Ложь;
				Ошибка = "Не удалось найти подразделение по коду " + ПодразделениеЗаказа;
			КонецЕсли;
			
			//выбираем все строки из заказа по этому подразделению
			Отбор = Новый Структура;
			Отбор.Вставить("Подразделение", ПодразделениеЗаказа);
			МассивСтрок = ТаблицаЗаказа.НайтиСтроки(Отбор);
			
			//формируем список номенклатуры для запроса остатков
			СписокНоменклатуры = Новый СписокЗначений;
			Для каждого СтрМассива ИЗ МассивСтрок Цикл
				Номенкл = Справочники.Номенклатура.НайтиПоКоду(СтрМассива.Номенклатура);
				Если Номенкл = Справочники.Номенклатура.ПустаяСсылка() Тогда
					Success = Ложь;
					Ошибка = "Не удалось найти номенклатуру по коду " + СтрМассива.Номенклатура;
				КонецЕсли;
				СписокНоменклатуры.Добавить(СтрМассива.Номенклатура);
			КонецЦикла;
			
			//Запрос свободных остатков
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("СписокЗаказа", СписокНоменклатуры);
			
			СписокКонтрагентовОТХ = Новый СписокЗначений;
			СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);
			Запрос.УстановитьПараметр("СписокКонтрагентовОТХ", СписокКонтрагентовОТХ);
			
			
			
			Если ПодразделениеЗаказа = "00005" Тогда  //Головное
				
				Запрос.Текст = "ВЫБРАТЬ
				               |	А.Код,
				               |	А.ОстатокНаСкладахИОТХ - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК СвободныйОстаток
				               |ИЗ
				               |	(ВЫБРАТЬ
				               |		ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.Код, ТоварыНаОтветственномХраненииОстатки.Номенклатура.Код) КАК Код,
				               |		ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0) КАК ОстатокНаСкладахИОТХ,
				               |		ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура, ТоварыНаОтветственномХраненииОстатки.Номенклатура) КАК Номенклатура
				               |	ИЗ
				               |		РегистрНакопления.ТоварыНаСкладах.Остатки(
				               |				,
				               |				НЕ Склад.ЗапретитьИспользование
				               |					И НЕ Склад.Транзитный
				               |					И Номенклатура.Код В (&СписокЗаказа)) КАК ТоварыНаСкладахОстатки
				               |			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
				               |					,
				               |					НЕ Склад.ЗапретитьИспользование
				               |						И НЕ Склад.Транзитный
				               |						И Номенклатура.Код В (&СписокЗаказа)
				               |						И Контрагент В (&СписокКонтрагентовОТХ)) КАК ТоварыНаОтветственномХраненииОстатки
				               |			ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыНаОтветственномХраненииОстатки.Номенклатура) КАК А
				               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
				               |				,
				               |				ЗаказПокупателя.Проверен
				               |					И НЕ ЗаказПокупателя.Транзит
				               |					И Номенклатура.Код В (&СписокЗаказа)) КАК ЗаказыПокупателейОстатки
				               |		ПО А.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура";
				
			Иначе //Обособленное
				
				Запрос.УстановитьПараметр("Подразделение", Подразделение);
				
				Запрос.Текст = "ВЫБРАТЬ
				               |	А.Код,
				               |	А.ОстатокНаСкладахИОТХ - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК СвободныйОстаток
				               |ИЗ
				               |	(ВЫБРАТЬ
				               |		ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.Код, ТоварыНаОтветственномХраненииОстатки.Номенклатура.Код) КАК Код,
				               |		ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0) КАК ОстатокНаСкладахИОТХ,
				               |		ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура, ТоварыНаОтветственномХраненииОстатки.Номенклатура) КАК Номенклатура
				               |	ИЗ
				               |		РегистрНакопления.ТоварыНаСкладах.Остатки(
				               |				,
				               |				НЕ Склад.ЗапретитьИспользование
				               |					И Склад.Транзитный
				               |					И Номенклатура.Код В (&СписокЗаказа)
				               |					И Склад.Подразделение = &Подразделение) КАК ТоварыНаСкладахОстатки
				               |			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
				               |					,
				               |					НЕ Склад.ЗапретитьИспользование
				               |						И Склад.Транзитный
				               |						И Номенклатура.Код В (&СписокЗаказа)
				               |						И Контрагент В (&СписокКонтрагентовОТХ)
				               |						И Склад.Подразделение = &Подразделение) КАК ТоварыНаОтветственномХраненииОстатки
				               |			ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыНаОтветственномХраненииОстатки.Номенклатура) КАК А
				               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
				               |				,
				               |				ЗаказПокупателя.Проверен
				               |					И ЗаказПокупателя.Транзит
				               |					И Номенклатура.Код В (&СписокЗаказа)
				               |					И ЗаказПокупателя.Подразделение = &Подразделение) КАК ЗаказыПокупателейОстатки
				               |		ПО А.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура";
				
			КонецЕсли;
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			ДополнениеКОшибке = "";
			
			Для каждого СтрМассива ИЗ МассивСтрок Цикл
				СтрокаРезультат = Результат.Найти(СтрМассива.Номенклатура);
				Если СтрокаРезультат = Неопределено Тогда
					СтрМассива.КоличествоОстаток = 0;
					Success = Ложь;
				Иначе
					СтрМассива.КоличествоОстаток = СтрокаРезультат.СвободныйОстаток;
					Если СтрокаРезультат.СвободныйОстаток < СтрМассива.Количество Тогда
						Success = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;  //перебор подразделений
	
	
	//Создание заказа(ов)
	Если Success Тогда
		
		Для каждого СтрВремТЗ ИЗ ВремТЗД Цикл  //перебираем все подразделения заказа для проверки остатков
			ДоговорЗаказа = СтрВремТЗ.Договор;
			ПодразделениеЗаказа = СтрВремТЗ.Подразделение;
			Если ПодразделениеЗаказа="00000" Тогда
					//выбираем все строки из заказа по этому подразделению
				Отбор = Новый Структура;
				Отбор.Вставить("Подразделение", ПодразделениеЗаказа);
				Отбор.Вставить("Договор", ДоговорЗаказа);
				МассивСтрок = ТаблицаЗаказа.НайтиСтроки(Отбор);
				
				//Создадим сезонный заказ
				Заказ = Документы.ЗаказПокупателяСезонный.СоздатьДокумент();
				Заказ.Дата = ТекущаяДата();
				Заказ.ДатаДействияПо = Заказ.Дата+120*24*60*60;
				Заказ.АвтоКомплектация = Истина;
				Заказ.ПоТоварамВПути = Истина;
				Заказ.НомерТорговойТочкиКонтрагента = PointId;

				Если НЕ ShippingDay = "" Тогда  //передается дата отгрузки
					Заказ.ДатаОтгрузки = Дата(ShippingDay);
				КонецЕсли;
					Заказ.Организация = Справочники.Организации.НайтиПоКоду("00001");
				
			//+++ 15.06.2015 - валютные клиенты
				Если Контрагент.Экспорт и Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов.Код<>"643" Тогда
					Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00028"); //Базовая USD
					Заказ.ВалютаДокумента = Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
					
					//СтруктураВалюты    = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Заказ.Дата, Новый Структура("Валюта", Заказ.ВалютаДокумента));
					//КурсДокумента      = СтруктураВалюты.Курс;
					//КратностьДокумента = СтруктураВалюты.Кратность;
                    КурсДокумента = константы.КурсUSD.Получить(); //51.9749; //на 15.04.2015
            		КратностьДокумента = 1;
	
					Заказ.КурсВзаиморасчетов = КурсДокумента;
					Заказ.КратностьВзаиморасчетов = КратностьДокумента;
					
				Иначе // как было	
					Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); //Крупный опт
					Заказ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
					Заказ.КурсВзаиморасчетов = 1;
					Заказ.КратностьВзаиморасчетов = 1;
				КонецЕсли;
				
				Заказ.Контрагент = Контрагент;
				Заказ.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");

				Заказ.Комментарий = "Terminal: " + Comment;
				Заказ.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");  //Головное;  
				Заказ.СуммаВключаетНДС = Истина;
				Заказ.УчитыватьНДС = Истина;
				
				Если ДоговорЗаказа = неопределено Тогда
				//***договор получаем по единому алгоритму: сначала факторинг, потом - продажа
				Заказ.ДоговорКонтрагента = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(Заказ);
			     Иначе
				Заказ.ДоговорКонтрагента = ДоговорЗаказа;
				КонецЕсли;
				
				
				
					СписокНом = Новый СписокЗначений;
				
				Для каждого СтрМассива ИЗ МассивСтрок Цикл
					СтрокаТовары = Заказ.Товары.Добавить();
					СтрокаТовары.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СтрМассива.Номенклатура);
					СтрокаТовары.Коэффициент = 1;
					СтрокаТовары.Количество = СтрМассива.Количество;
					ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, Заказ, Константы.ВалютаРегламентированногоУчета.Получить()); 
					ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, Заказ);
					РассчитатьСуммуТабЧасти(СтрокаТовары, Заказ);
					РассчитатьСуммуНДСТабЧасти(СтрокаТовары, Заказ);
					СписокНом.Добавить(Справочники.Номенклатура.НайтиПоКоду(СтрМассива.Номенклатура));
				КонецЦикла;
				
				Если НЕ Заказ.Товары.Количество() = 0 Тогда
					
					ТабЗнач1  = Новый ТаблицаЗначений;
					ТабЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом, ТекущаяДата());
					
					//+++ 10.09.2015 - доп.условия на предоплатные договора - по типу!
					услПредоплатногоДоговора = (Заказ.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001")
											или Заказ.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФакторингПредоплата);//22.05.2017
					Если ТипЗнч(ТабЗнач1) = Тип("Строка") Тогда // нет политики ценообразования документом
						табЗнач1  = новый ТаблицаЗначений;
						табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом); //из регистра сведений
					КонецЕсли;	
					
					Для каждого стр1 из Заказ.Товары цикл
						стр2 = табЗнач1.найти(стр1.Номенклатура, "Номенклатура");
						стр1Цена = стр1.Цена;
						Если стр2 = неопределено Тогда
							стр2МинимальнаяЦена = 0;
						Иначе
							//+++ 10.09.2015 Цена ПРЕДОПЛАТНАЯ с доп.скидкой
							Если услПредоплатногоДоговора Тогда
								попытка
									стр2МинимальнаяЦена = стр2.ЦенаСоСкидкойПредоплаты; 
								исключение // если экспортные цены или из Политики... то там нет поля ЦенаСоСкидкойПредоплаты	
									стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
								КонецПопытки;	
 							Иначе // как было
								стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
							КонецЕсли;
						КонецЕсли;
						
						//-------------------------------
						Если стр1Цена<>стр2МинимальнаяЦена Тогда
							стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
							РассчитатьСуммуТабЧасти(стр1, Заказ);
							РассчитатьСуммуНДСТабЧасти(стр1, Заказ);
						КонецЕсли;
					КонецЦикла;
					
					
					Заказ.Записать(РежимЗаписиДокумента.Запись);
					OrderGUID = Строка(Заказ.Ссылка.УникальныйИдентификатор());
					OrderNumber = СокрЛП(Заказ.Номер);
					
					Для каждого СтрМассива ИЗ МассивСтрок Цикл
						СтрМассива.ИдентификаторЗаказа = OrderGUID;
						СтрМассива.НомерЗаказа = OrderNumber;
					КонецЦикла;
					
				КонецЕсли;
				
				Если НЕ OrderNumber = "" Тогда
					Попытка
						ПереместитьФайл("D:\1C\Terminal\Текущий.xml", "D:\1C\Terminal\"+ OrderNumber +".xml");
					Исключение
					КонецПопытки;
				КонецЕсли;
				
	
			Иначе	
				Подразделение = Справочники.Подразделения.НайтиПоКоду(ПодразделениеЗаказа);
				
				Если Подразделение = Справочники.Подразделения.ПустаяСсылка() Тогда
					Success = Ложь;
					Ошибка = "Не удалось найти подразделение по коду " + ПодразделениеЗаказа;
				КонецЕсли;
				
				Если Success Тогда
					//выбираем все строки из заказа по этому подразделению
					Отбор = Новый Структура;
					Отбор.Вставить("Подразделение", ПодразделениеЗаказа);
					Отбор.Вставить("Договор", ДоговорЗаказа);
					МассивСтрок = ТаблицаЗаказа.НайтиСтроки(Отбор);
					
					
					Заказ = Документы.ЗаказПокупателя.СоздатьДокумент();
					Заказ.Дата = ТекущаяДата();
					Если НЕ ShippingDay = "" Тогда  //передается дата отгрузки
						Заказ.ДатаОтгрузки = Дата(ShippingDay);
					КонецЕсли;
					Если isReserve Тогда //Заказы могут быть резервные (закрытваются атвоматически через 10 дней) - дата отгрузки пустая, и с датой отгрузки	
						Заказ.Резерв = Истина;
						Заказ.ДатаОтгрузки = '00010101000000';
					КонецЕсли;
					Если TransportCompany Тогда
						Заказ.TerminalОтгрузкаТранспортнойКомпанией = Истина;
					КонецЕсли;
					Заказ.Организация = Справочники.Организации.НайтиПоКоду("00001");
					
					//+++ 15.06.2015 - валютные клиенты
					Если Контрагент.Экспорт и Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов.Код<>"643" Тогда
						Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00028"); //Базовая USD
						Заказ.ВалютаДокумента = Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
						
						//СтруктураВалюты    = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Заказ.Дата, Новый Структура("Валюта", Заказ.ВалютаДокумента));
						//КурсДокумента      = СтруктураВалюты.Курс;
						//КратностьДокумента = СтруктураВалюты.Кратность;
						КурсДокумента = константы.КурсUSD.Получить(); //51.9749; //на 15.04.2015
						КратностьДокумента = 1;
						
						Заказ.КурсВзаиморасчетов = КурсДокумента;
						Заказ.КратностьВзаиморасчетов = КратностьДокумента;
						
					Иначе // как было	
						Заказ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); //Крупный опт
						Заказ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
						Заказ.КурсВзаиморасчетов = 1;
						Заказ.КратностьВзаиморасчетов = 1;
					КонецЕсли;
					
					Заказ.Контрагент = Контрагент;
					
					//Плотников 10.08.2016
		            Если ЗначениеЗаполнено(Контрагент.Грузополучатель) Тогда
			            Заказ.Грузополучатель = Контрагент.Грузополучатель;
		            КонецЕсли;
					
					Заказ.НомерТорговойТочкиКонтрагента = PointId;
					
					//*** 2016.03.24 По PointId получим торговую точки, и запишем ее адрес в адрес доставки
					СпрТочка = Справочники.Точки.НайтиПоРеквизиту("Номер", PointId,,Контрагент);
					Если НЕ СпрТочка.Пустая() Тогда
						Если СпрТочка.Согласован И ЗначениеЗаполнено(СпрТочка.Адрес) Тогда
							Заказ.АдресДоставки =СпрТочка.Адрес
							//+++ 16.04.2016 добавляем Телефон и Контактное Лицо
							+ ?(СокрЛП(СпрТочка.ИнформацияДляВодителя)="", "", 
							"~"+СокрЛП(СпрТочка.ИнформацияДляВодителя)+" "+СокрЛП(СпрТочка.КонтактноеЛицо) ); 
						КонецЕсли;
					КонецЕсли;	
					
					
					Заказ.Транзит = Истина;
					Если Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") Тогда  //Головное
						Заказ.Транзит = Ложь;
						
					ИначеЕсли ЗначениеЗаполнено(Подразделение) И Подразделение.ОбособленноеПодразделение Тогда 
						Заказ.Склад = Подразделение.Склад;
						Заказ.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
						Заказ.Грузоотправитель = Подразделение.Контрагент;
					КонецЕсли;
					
					Заказ.Проверен = Истина;
					
					Заказ.Комментарий = "Terminal: " + Comment;
					Заказ.Подразделение = Подразделение;  
					Заказ.СуммаВключаетНДС = Истина;
					Заказ.УчитыватьНДС = Истина;
					Заказ.АвтоРезервирование = Истина;
					Заказ.ССайта = Истина;
					Заказ.НапомнитьОСобытии = Истина;
					Заказ.ТипЗаказа = 8;
					
					
					Если ДоговорЗаказа = Неопределено Тогда
					//***договор получаем по единому алгоритму: сначала факторинг, потом - продажа
					Заказ.ДоговорКонтрагента = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(Заказ);
			         Иначе
				    Заказ.ДоговорКонтрагента = ДоговорЗаказа;
				    КонецЕсли;
					//+++ 10.09.2015 - доп.условия на предоплатные договора - по типу!
					услПредоплатногоДоговора = (Заказ.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001")
											или Заказ.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ПредоплатаПоСчетам
											или Заказ.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФакторингПредоплата);//22.05.2017
					
					//Заказ.ДатаОплаты = ТекущаяДата() + 86400*Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
					Если  услПредоплатногоДоговора Тогда
						Если Заказ.ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности Тогда
							ЧислоДнейСМоментаОтгрузки = мин(Заказ.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности, 30); // не более месяца !
						Иначе	
							ЧислоДнейСМоментаОтгрузки = 14;
						КонецЕсли;
					Иначе 
						ЧислоДнейСМоментаОтгрузки = Заказ.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;//+++ 03.04.2018
						//ЧислоДнейСМоментаОтгрузки = Заказ.ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;//не используется!
					КонецЕсли;
					
					Заказ.ЧислоДнейСМоментаОтгрузки = ЧислоДнейСМоментаОтгрузки; //+++ 27.03.2018
					Заказ.ДатаОплаты = макс(ТекущаяДата(), Заказ.ДатаОтгрузки) + 86400 * ЧислоДнейСМоментаОтгрузки; //сдвигаем от даты отгрузки!
					//+++)
					
					СписокНом = Новый СписокЗначений;
					
					Для каждого СтрМассива ИЗ МассивСтрок Цикл
						СтрокаТовары = Заказ.Товары.Добавить();
						СтрокаТовары.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СтрМассива.Номенклатура);
						СтрокаТовары.Коэффициент = 1;
						СтрокаТовары.Количество = СтрМассива.Количество;
						ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, Заказ, Константы.ВалютаРегламентированногоУчета.Получить()); 
						ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, Заказ);
						РассчитатьСуммуТабЧасти(СтрокаТовары, Заказ);
						РассчитатьСуммуНДСТабЧасти(СтрокаТовары, Заказ);
						СписокНом.Добавить(Справочники.Номенклатура.НайтиПоКоду(СтрМассива.Номенклатура));
					КонецЦикла;
					
					Если НЕ Заказ.Товары.Количество() = 0 Тогда
						
						ТабЗнач1  = Новый ТаблицаЗначений;
						ТабЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом, ТекущаяДата());
						
						Если ТипЗнч(ТабЗнач1) = Тип("Строка") Тогда // нет политики ценообразования документом
							табЗнач1  = новый ТаблицаЗначений;
							табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом); //из регистра сведений
						КонецЕсли;	
						
						Для каждого стр1 из Заказ.Товары цикл
							стр2 = табЗнач1.найти(стр1.Номенклатура, "Номенклатура");
							стр1Цена = стр1.Цена;
							Если стр2 = неопределено Тогда
								стр2МинимальнаяЦена = 0;
							Иначе
								//+++ 10.09.2015 Цена ПРЕДОПЛАТНАЯ с доп.скидкой
								Если услПредоплатногоДоговора Тогда
									попытка
										стр2МинимальнаяЦена = стр2.ЦенаСоСкидкойПредоплаты; 
									исключение // если экспортные цены или из Политики... то там нет поля ЦенаСоСкидкойПредоплаты	
										стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
									КонецПопытки;	
								Иначе // как было
									стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
								КонецЕсли;
							КонецЕсли;
							
							//-------------------------------
							Если стр1Цена<>стр2МинимальнаяЦена Тогда
								стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
								РассчитатьСуммуТабЧасти(стр1, Заказ);
								РассчитатьСуммуНДСТабЧасти(стр1, Заказ);
							КонецЕсли;
						КонецЦикла;
						Если TransportCompany Тогда
						    CostOfDelivery = число(DeliveryInfo.CostOfDelivery);
							Если CostOfDelivery>0 Тогда
                            //ищем так, потому что 2 карточки с одинаковым кодом
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ
								|	Номенклатура.Ссылка
								|ИЗ
								|	Справочник.Номенклатура КАК Номенклатура
								|ГДЕ
								|	Номенклатура.Услуга
								|	И Номенклатура.Код = ""ЛН02397""";

							Результат = Запрос.Выполнить().Выбрать();
							Результат.следующий();
							спрНом = Результат.ссылка;							
								
								
							СтрокаУслуги = Заказ.Услуги.Добавить();
							СтрокаУслуги.Номенклатура = спрНом;
							СтрокаУслуги.Содержание = ""+СтрокаУслуги.Номенклатура;
							СтрокаУслуги.Количество = 1;
							СтрокаУслуги.Цена = CostOfDelivery;
							ЗаполнитьСтавкуНДСТабЧасти(СтрокаУслуги, Заказ);
							РассчитатьСуммуТабЧасти(СтрокаУслуги, Заказ);
							РассчитатьСуммуНДСТабЧасти(СтрокаУслуги, Заказ);
						    
						    
						   КонецЕсли;
						  стр = Заказ.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "ContactFio";
						  стр.Значение = DeliveryInfo.ContactFio;
						  стр = Заказ.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "ContactPhone";
						  стр.Значение = DeliveryInfo.ContactPhone;
						  стр = Заказ.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "RegionId";
						  стр.Значение = DeliveryInfo.RegionId;
						  стр = Заказ.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "CityId";
						  стр.Значение = DeliveryInfo.CityId;
						  стр = Заказ.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "TerminalOrAddress";
						  стр.Значение = DeliveryInfo.TerminalOrAddress;
						  стр = Заказ.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "TerminalCode";
						  стр.Значение = DeliveryInfo.TerminalCode;
						  стр = Заказ.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "PostalCode";
						  стр.Значение = DeliveryInfo.PostalCode;
						  стр = Заказ.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "StreetType";
						  стр.Значение = DeliveryInfo.StreetType;
						  стр = Заказ.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "Street";
						  стр.Значение = DeliveryInfo.Street;
						  стр = Заказ.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "BlockType";
						  стр.Значение = DeliveryInfo.BlockType;
						  стр = Заказ.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "House";
						  стр.Значение = DeliveryInfo.House;
						  Если НЕ DeliveryDay = "" Тогда  //передается дата доставки
						  стр = Заказ.РеквизитыЗаказаТК.Добавить();
						  стр.Поле = "ДатаДоставки";
						  стр.Значение = Дата(DeliveryDay);
				           КонецЕсли;


						
						КонецЕсли;

						
						Заказ.Записать(РежимЗаписиДокумента.Проведение);
						//Заказ.Записать(РежимЗаписиДокумента.Запись);

						
						OrderGUID = Строка(Заказ.Ссылка.УникальныйИдентификатор());
						OrderNumber = СокрЛП(Заказ.Номер);
						
						Для каждого СтрМассива ИЗ МассивСтрок Цикл
							СтрМассива.ИдентификаторЗаказа = OrderGUID;
							СтрМассива.НомерЗаказа = OrderNumber;
						КонецЦикла;
						
					КонецЕсли;
					
					Если НЕ OrderNumber = "" Тогда
						Попытка
							ПереместитьФайл("D:\1C\Terminal\Текущий.xml", "D:\1C\Terminal\"+ OrderNumber +".xml");
						Исключение
						КонецПопытки;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		//формируем возвращаемый массив с товарами и GUID заказа
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ProductResult"));
			Товар.Code.Добавить(Строка(СтрокаТЗ.Номенклатура));
			Товар.Quantity.Добавить(Число(СтрокаТЗ.Количество));
			Товар.Storage.Добавить(Строка(СтрокаТЗ.Подразделение));
			Товар.OrderGUID.Добавить(Строка(СтрокаТЗ.ИдентификаторЗаказа));
			Товар.OrderNumber.Добавить(Строка(СтрокаТЗ.НомерЗаказа));
			Товары.ProductsResult.Добавить(Товар);
		КонецЦикла;
		
	Иначе
		
		//формируем возвращаемый массив с отсутствующими товарами
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			Если  СтрокаТЗ.Подразделение<>"00000" Тогда
				Если СтрокаТЗ.КоличествоОстаток < СтрокаТЗ.Количество   Тогда
					Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ProductResult"));
					Товар.Code.Добавить(Строка(СтрокаТЗ.Номенклатура));
					Товар.Quantity.Добавить(Число(СтрокаТЗ.КоличествоОстаток));
					Товар.Storage.Добавить(Строка(СтрокаТЗ.Подразделение));
					Товары.ProductsResult.Добавить(Товар);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
			
	РезультатОперации.Products		 = Товары;
	РезультатОперации.Success		 = Success;
	РезультатОперации.Error			 = Ошибка;
		
	Возврат РезультатОперации;	
	

КонецФункции

Функция ChangeOrderStatus(OrderGUID, Status)
	//статусы 3 (отменен) или 17 (подтвержден поставщиком)
	
	ОписаниеОшибки = "";
	Success = Истина;
	
	УИД = Новый УникальныйИдентификатор(СокрЛП(OrderGUID));
	ЗаказСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(УИД);
	Если (НЕ ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка()) И (НЕ ЗаказСсылка = Неопределено) Тогда
		
		Если ЗаказСсылка.ПометкаУдаления Тогда
			ОписаниеОшибки = ОписаниеОшибки + " Заказ помечен на удаление. Редактирование невозможно";
			Success = Ложь;
		КонецЕсли;
		
		Если яштПоЗаказуБылиОтгрузки(ЗаказСсылка) Тогда
			ОписаниеОшибки = ОписаниеОшибки + " По заказу уже были отгрузки, корректировки или закрытие. Изменение заказа невозможно.";
			Success = Ложь;
		КонецЕсли;	
		
		//еще одна проверка
		Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ЗаказСсылка) Тогда
			ОписаниеОшибки = ОписаниеОшибки + " По заказу уже были отгрузки, корректировки или закрытие. Изменение заказа невозможно.";
			Success = Ложь;
		КонецЕсли;	
				
		Если Success Тогда
			Если Status=20 или Status=17 или Status=3 Тогда
				ДокОбъект = ЗаказСсылка.ПолучитьОбъект();
				Если Status =3 или Status =20 Тогда
					ДокОбъект.УстановитьПометкуУдаления(Истина);
					ДокОбъект.статус = Перечисления.СтатусыЗаказов.Отменен;
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				ИначеЕсли Status=17 Тогда	
					ДокОбъект.статус = Перечисления.СтатусыЗаказов.Подтвержден;
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
	Иначе
		ОписаниеОшибки = ОписаниеОшибки + " Заказ покупателя не найден";
		Success = Ложь;
	КонецЕсли;
	
	URL = "http://37.1.84.50:8080/Terminal";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "ResultDel");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	РезультатОперации.Success = Success;
	РезультатОперации.Error = ОписаниеОшибки;
	Возврат РезультатОперации;

КонецФункции

Функция CheckGoods(Goods, Storage)
	URL = "http://37.1.84.50:8080/Terminal";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "CheckGoodsResult");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "CheckGoodsArrayOfProducts"));
	
	Ошибка = "";
	Success = Истина;
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура");
	ТаблицаЗаказа.Колонки.Добавить("Количество");
	ТаблицаЗаказа.Колонки.Добавить("КоличествоОстаток");
	//ТаблицаЗаказа.Колонки.Добавить("Аксессуар");
	
	Список=Goods.ПолучитьСписок("Products");
	ВсегоЗаписей=Список.Количество();
	Для ии=0 по ВсегоЗаписей-1 Цикл
		Запись=Список.Получить(ии);
		СтрокаТЗ = ТаблицаЗаказа.Добавить();
		СтрокаТЗ.Номенклатура = Запись.Code;
		СтрокаТЗ.Количество = Число(Запись.Quantity);
	КонецЦикла;		
	
	//Запрос свободных остатков
	Подразделение = Справочники.Подразделения.НайтиПоКоду(Storage);
	Если Подразделение = Справочники.Подразделения.ПустаяСсылка() Тогда
		Success = Ложь;
		Ошибка = "Не удалось найти подразделение по коду " + Storage;
	КонецЕсли;
	
	СписокНоменклатуры = Новый СписокЗначений;
	Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
		
		//Если в заказе Аксессуары, проверку остатков не делаем, а сразу создаем заказ
		Номенкл = Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
		Если Номенкл = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Success = Ложь;
			Ошибка = "Не удалось найти номенклатуру по коду " + СтрокаТЗ.Номенклатура;
		КонецЕсли;
		СписокНоменклатуры.Добавить(СтрокаТЗ.Номенклатура);
		//Если Номенкл.ВидТовара = Перечисления.ВидыТоваров.Аксессуары Тогда
		//	//Прервать;
		//	СтрокаТЗ.Аксессуар=истина;
		//	СтрокаТЗ.КоличествоОстаток=СтрокаТЗ.Количество;//аксы не проверяем
		//Иначе
			СписокНоменклатуры.Добавить(СтрокаТЗ.Номенклатура);
		//	СтрокаТЗ.Аксессуар=ложь;
		//КонецЕсли;
		
	КонецЦикла;	
	
	Если СписокНоменклатуры.Количество()>0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокЗаказа", СписокНоменклатуры);
		СписокКонтрагентовОТХ = Новый СписокЗначений;
		СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);
		Запрос.УстановитьПараметр("СписокКонтрагентовОТХ", СписокКонтрагентовОТХ);
		
		Если Storage = "00005" Тогда  //Головное
			
			Запрос.Текст = "ВЫБРАТЬ
			|	А.Код,
			|	А.ОстатокНаСкладахИОТХ - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК СвободныйОстаток
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.Код, ТоварыНаОтветственномХраненииОстатки.Номенклатура.Код) КАК Код,
			|		ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0) КАК ОстатокНаСкладахИОТХ,
			|		ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура, ТоварыНаОтветственномХраненииОстатки.Номенклатура) КАК Номенклатура
			|	ИЗ
			|		РегистрНакопления.ТоварыНаСкладах.Остатки(
			|				,
			|				НЕ Склад.ЗапретитьИспользование
			|					И НЕ Склад.Транзитный
			|					И Номенклатура.Код В (&СписокЗаказа)) КАК ТоварыНаСкладахОстатки
			|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
			|					,
			|					НЕ Склад.ЗапретитьИспользование
			|						И НЕ Склад.Транзитный
			|						И Номенклатура.Код В (&СписокЗаказа)
			|						И Контрагент В (&СписокКонтрагентовОТХ)) КАК ТоварыНаОтветственномХраненииОстатки
			|			ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыНаОтветственномХраненииОстатки.Номенклатура) КАК А
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
			|				,
			|				ЗаказПокупателя.Проверен
			|					И НЕ ЗаказПокупателя.Транзит
			|					И Номенклатура.Код В (&СписокЗаказа)) КАК ЗаказыПокупателейОстатки
			|		ПО А.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура";
			
		Иначе //Обособленное
			
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
			
			Запрос.Текст = "ВЫБРАТЬ
			|	А.Код,
			|	А.ОстатокНаСкладахИОТХ - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК СвободныйОстаток
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.Код, ТоварыНаОтветственномХраненииОстатки.Номенклатура.Код) КАК Код,
			|		ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0) КАК ОстатокНаСкладахИОТХ,
			|		ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура, ТоварыНаОтветственномХраненииОстатки.Номенклатура) КАК Номенклатура
			|	ИЗ
			|		РегистрНакопления.ТоварыНаСкладах.Остатки(
			|				,
			|				НЕ Склад.ЗапретитьИспользование
			|					И Склад.Транзитный
			|					И Номенклатура.Код В (&СписокЗаказа)
			|					И Склад.Подразделение = &Подразделение) КАК ТоварыНаСкладахОстатки
			|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
			|					,
			|					НЕ Склад.ЗапретитьИспользование
			|						И Склад.Транзитный
			|						И Номенклатура.Код В (&СписокЗаказа)
			|						И Контрагент В (&СписокКонтрагентовОТХ)
			|						И Склад.Подразделение = &Подразделение) КАК ТоварыНаОтветственномХраненииОстатки
			|			ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыНаОтветственномХраненииОстатки.Номенклатура) КАК А
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
			|				,
			|				ЗаказПокупателя.Проверен
			|					И ЗаказПокупателя.Транзит
			|					И Номенклатура.Код В (&СписокЗаказа)
			|					И ЗаказПокупателя.Подразделение = &Подразделение) КАК ЗаказыПокупателейОстатки
			|		ПО А.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура";
			
		КонецЕсли;
		
		//Попытка
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		ДополнениеКОшибке = "";
		
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			//Если СтрокаТЗ.Аксессуар Тогда //аксы не проверяем
			//	продолжить;
			//КонецЕсли;	
			СтрокаРезультат = Результат.Найти(СтрокаТЗ.Номенклатура);
			Если СтрокаРезультат = Неопределено Тогда
				СтрокаТЗ.КоличествоОстаток = 0;
				Success = Ложь;
			Иначе
				СтрокаТЗ.КоличествоОстаток = СтрокаРезультат.СвободныйОстаток;
				Если СтрокаРезультат.СвободныйОстаток < СтрокаТЗ.Количество Тогда
					Success = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
	
	//формируем возвращаемый массив
	Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
		Если СтрокаТЗ.КоличествоОстаток < СтрокаТЗ.Количество Тогда
			Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "CheckGoodsProduct"));
			Товар.Code=(Строка(СтрокаТЗ.Номенклатура));
			Товар.Quantity=(Число(СтрокаТЗ.КоличествоОстаток));
			Товары.Products.Добавить(Товар);
		КонецЕсли;
	КонецЦикла;
	
	РезультатОперации.Products		 = Товары;
	РезультатОперации.Success		 = Success;
	РезультатОперации.Error			 = Ошибка;
	
	Возврат РезультатОперации;
КонецФункции

Функция GetPrices(Partner, Products)
	URL = "http://37.1.84.50:8080/Terminal";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "GetPricesArrayOfProducts");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "GetPricesArrayOfProducts"));
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(Partner));
	
	Предоплата = ?( Контрагент.ОсновнойДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00001")
					или Контрагент.ОсновнойДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФакторингПредоплата//22.05.2017
					,истина,ложь);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("КодНоменклатуры", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(7)));
	
	Список=Products.ПолучитьСписок("Product");
	ВсегоЗаписей=Список.Количество();
	
	Для ии=0 по ВсегоЗаписей-1 Цикл
		Запись=Список.Получить(ии);
		СтрокаТЗ = ТаблицаТоваров.Добавить();
		СтрокаТЗ.КодНоменклатуры = Запись.Code;
	КонецЦикла;

	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	втНоменклатура.КодНоменклатуры
	             |ПОМЕСТИТЬ втКоды
	             |ИЗ
	             |	&втНоменклатура КАК втНоменклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втКоды.КодНоменклатуры,
	             |	Номенклатура.Ссылка КАК Номенклатура
	             |ИЗ
	             |	втКоды КАК втКоды
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	             |		ПО втКоды.КодНоменклатуры = Номенклатура.Код";
	Запрос.УстановитьПараметр("втНоменклатура",ТаблицаТоваров);
	Рез = Запрос.Выполнить().Выгрузить();
	СписокНом = Рез.ВыгрузитьКолонку("Номенклатура");
	
	//Если СписокНом.Количество()=0 Тогда
	//	табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент);
	//Иначе
		табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом);
	//КонецЕсли;
	
	//Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "GetPricesProduct"));
	//Товар.Code=("всего товаров");
	//Товар.Price=табЗнач1.Количество();
	//Товары.Product.Добавить(Товар);

	//формируем возвращаемый массив
	Для каждого СтрокаТЗ ИЗ табЗнач1 Цикл
			Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "GetPricesProduct"));
			Товар.Code=(Строка(СтрокаТЗ.Код));
			Если Предоплата Тогда
				Товар.Price=(Число(СтрокаТЗ.ЦенаСоСкидкойПредоплаты));
			Иначе
				Товар.Price=(Число(СтрокаТЗ.МинимальнаяЦена));
			КонецЕсли;
			Товары.Product.Добавить(Товар);
	КонецЦикла;
	
	Возврат Товары;
КонецФункции


Функция CreatePurchaseReturn( PartnerId, PointId, Goods, isTest  )
	URL = "http://37.1.84.50:8080/Terminal";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "ResultPurchaseReturn");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProductsPurchaseReturnResult"));
	Ошибка    = "";
	Success = Истина;
	PurchaseReturnNumber = "";
	PurchaseReturnGUID = "";
	номерОшибки =0;
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(PartnerId);
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Success = Ложь;
		НомерОшибки = 1;
		Ошибка = "Не удалось найти контрагента";
	КонецЕсли;
	//найдем срок возврата для дисков
	Если Success Тогда
		Отбор = Новый структура;
		Отбор.вставить("Объект",Контрагент);
		Отбор.вставить("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90208"));
		
		ЗаписьСрока = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор);
		срокДляДисков = ЗаписьСрока.значение;
		Если срокДляДисков=неопределено Тогда
			срокДляДисков =30;
		КонецЕсли;
	КонецЕсли;
	
	//Сохраняем каждый набор товаров в файл, чтоб сохранялась история о запросах	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл("D:\1C\Terminal\Заявка.xml");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Goods);
	ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл("D:\1C\Terminal\Заявка.xml");
	
	ТаблицаЗаявки = Новый ТаблицаЗначений;
	ТаблицаЗаявки.Колонки.Добавить("НомерСтроки");
	ТаблицаЗаявки.Колонки.Добавить("Номенклатура");
	ТаблицаЗаявки.Колонки.Добавить("Количество");
	ТаблицаЗаявки.Колонки.Добавить("ДатаРеализации");
	ТаблицаЗаявки.Колонки.Добавить("НомерРеализации");
    ТаблицаЗаявки.Колонки.Добавить("Цена");

	
	
	
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("НомерСтроки");
	ТаблицаОшибок.Колонки.Добавить("Номенклатура");
	ТаблицаОшибок.Колонки.Добавить("Количество");
	ТаблицаОшибок.Колонки.Добавить("ДатаРеализации");
	ТаблицаОшибок.Колонки.Добавить("НомерРеализации");
	ТаблицаОшибок.Колонки.Добавить("ОписаниеОшибки");
	ТаблицаОшибок.Колонки.Добавить("НомерОшибки");
	//для определения подразделения	
	СпрТочка = Справочники.Точки.НайтиПоРеквизиту("Номер", PointId,,Контрагент);
	Если СпрТочка = Справочники.Точки.ПустаяСсылка() Тогда
		Success = Ложь;
		НомерОшибки =2;
		Ошибка = "Не удалось найти точку контрагента";
	КонецЕсли;

	КодПодр = спрТочка.КодПодразделения;
	Если КодПодр = 0 или КодПодр = -1 Тогда
		ИщемПоПодразделению = Справочники.Подразделения.НайтиПоКоду("00005");
	ИначеЕсли КодПодр = -100 Тогда
		ИщемПоПодразделению = Справочники.Подразделения.НайтиПоКоду("00165");
	Иначе
		ИщемПоПодразделению = Справочники.Подразделения.НайтиПоКоду("00"+Строка(кодПодр));
	КонецЕсли;	
	
		Запись = Новый Структура;

	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Имя = ЧтениеXML.Имя;
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Запись.Вставить(Имя, ЧтениеXML.Значение);      //информацию фнутри блока XML помещаем в структуру
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеXML.Имя = "Products" Тогда
				СтрокаТЗ = ТаблицаЗаявки.Добавить();
				СтрокаТЗ.номерСтроки = Число(Запись.RowNumber);
				СтрокаТЗ.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Запись.Code);
				СтрокаТЗ.Количество = Число(Запись.Count);
				СтрокаТЗ.ДатаРеализации = Запись.SaleDate;
				СтрокаТЗ.НомерРеализации = Запись.SaleNumber;
				
				Если  Справочники.Номенклатура.НайтиПоКоду(Запись.Code) = Справочники.Номенклатура.ПустаяСсылка() Тогда
				Success = Ложь;
				стрОшибка = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(стрОшибка,СтрокаТЗ);
				стрОшибка.НомерОшибки  = 1;
				стрОшибка.ОписаниеОшибки = "Не найдена номенклатура с кодом "+Запись.Code ;
				КонецЕсли;	

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЧтениеXML.Закрыть();
	
	Если Success Тогда
	Заявка = Документы.ЗаявкаНаВозвратТоваров.СоздатьДокумент();
	Заявка.Дата = ТекущаяДата();
	Заявка.Контрагент  = контрагент;
	Заявка.Точка = СпрТочка;
	Заявка.ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.ОтказПокупателя;
	Заявка.СозданЧерезТерминал = Истина;
	
	Для каждого стр из ТаблицаЗаявки Цикл
		Если СтрДлина(СокрЛП(стр.НомерРеализации))>= 8 Тогда
			номер = СокрЛП(стр.НомерРеализации);
		Иначе
			номер = СокрЛП(стр.НомерРеализации);
			НулейДобавить = 6-СтрДлина(номер);
			ПолныйНомер = "ТК";
			сч =0;
			Пока Сч<НулейДобавить Цикл
				ПолныйНомер = ПолныйНомер+"0"; 
				сч=сч+1;
			КонецЦикла;
			номер = ПолныйНомер+номер;
		КонецЕсли;
		
		
		ДокРеализации = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(номер,Дата(стр.ДатаРеализации));
		Если НачалоДня(ДокРеализации.Дата) = Дата(стр.ДатаРеализации) и ДокРеализации.Контрагент = Контрагент Тогда
			Заявка.Подразделение = ДокРеализации.Подразделение;
			Если Заявка.Подразделение <> ДокРеализации.Подразделение и Заявка.Подразделение <> Справочники.Подразделения.ПустаяСсылка() Тогда			
			  Success = Ложь;
			  номерОшибки = 3;
		      Ошибка = "Нельзя оформить одну заявку по реализациям с разных подразделений";
			КонецЕсли;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПродажиОбороты.Номенклатура,
			|	ПродажиОбороты.КоличествоОборот,
			|	ПродажиОбороты.СтоимостьОборот
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(
			|			,
			|			,
			|			,
			|			ДокументПродажи = &ДокументПродажи
			|				И Номенклатура = &Номенклатура) КАК ПродажиОбороты";
			
			Запрос.УстановитьПараметр("ДокументПродажи", ДокРеализации);
			Запрос.УстановитьПараметр("Номенклатура", стр.Номенклатура);
			РезультатЗапроса = Запрос.Выполнить();
			
			количествоНоменклатуры = 0;
			ценаРеализации = 0;
			
			
			Если не РезультатЗапроса.Пустой()Тогда
				Результат = РезультатЗапроса.Выгрузить();
				
				КоличествоНоменклатуры = Результат[0].КоличествоОборот;
				ценаРеализации = Окр(Результат[0].СтоимостьОборот/Результат[0].КоличествоОборот,2);
			КонецЕсли;
			стр.Цена = ЦенаРеализации;
			Если КоличествоНоменклатуры<стр.Количество Тогда
				Success = Ложь;
				стрОшибка = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(стрОшибка,стр);
				стрОшибка.НомерОшибки  = 3;
				стрОшибка.ОписаниеОшибки = "По реализации номер "+стр.НомерРеализации+" номенклатуры с кодом "+стр.номенклатура.Код+ " возвращается больше чем отгружено. " ;
			Иначе
				Если стр.Номенклатура.видТовара = Перечисления.ВидыТоваров.Диски Тогда
					ФактСрок = 	(КонецДня(ТекущаяДата()) - КонецДня(ДокРеализации.Дата))/ 86400;
					Если ФактСрок>срокДляДисков Тогда  
						Success = Ложь;
						стрОшибка = ТаблицаОшибок.Добавить();
						ЗаполнитьЗначенияСвойств(стрОшибка,стр);
						стрОшибка.НомерОшибки  = 4;
						стрОшибка.ОписаниеОшибки = "По реализации номер "+стр.НомерРеализации+" для номенклатуры с кодом "+стр.номенклатура.Код+ " превышен срок возврата по дискам. " ;
						продолжить;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаТаб = Заявка.Товары.Добавить();
				строкаТаб.Номенклатура = стр.Номенклатура;
				строкаТаб.Количество = стр.количество;
				строкаТаб.Реализация = ДокРеализации;
				строкаТаб.ЦенаРеализации = ценаРеализации;
				строкаТаб.Сумма =  ценаРеализации*стр.количество;
				строкаТаб.ЗаказПокупателя = ДокРеализации.Сделка;
			КонецЕсли;	
		Иначе	
			Success = Ложь;
			стрОшибка = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(стрОшибка,стр);
			стрОшибка.НомерОшибки  = 2;
			стрОшибка.ОписаниеОшибки = "Не удалось найти реализацию  по номеру "+стр.НомерРеализации+". " ;
		КонецЕсли;	
		
	КонецЦикла;	
	КонецЕсли;
	Если Success Тогда
		
		Менеджер1 = Заявка.Товары[0].Реализация.ДоговорКонтрагента.ОтветственноеЛицо; 
		
		Заявка.Ответственный =  Менеджер1; //+++ 04.08.2017  по задаче 30681
		Заявка.Записать(РежимЗаписиДокумента.Проведение);
		
		//Создание задачи менеджеру     на ответственное лицо реализации 1 строки
		НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		НоваяЗадача.Исполнитель = Менеджер1; 
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.Оповещение = Истина;
		НоваяЗадача.СрокОповещения = ТекущаяДата();
		НоваяЗадача.Наименование = "Создана новая заявка на возврат из Терминала ";
		НоваяЗадача.Описание = "Контрагент " + Заявка.Контрагент.Наименование + Символы.ПС + Строка(Заявка);
		НоваяЗадача.Объект = Заявка.Ссылка;
		НоваяЗадача.Записать();
		
		
		
		//Заявка.Записать();
		Если isTest Тогда
			Заявка.Комментарий = "Тестовая заявка из терминала"	;
			Заявка.ПометкаУдаления = истина;
			Заявка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		PurchaseReturnNumber = Строка(Заявка.Номер);
		PurchaseReturnGUID = Строка(Заявка.Ссылка.УникальныйИдентификатор());
		
		Для каждого стр из ТаблицаЗаявки Цикл
			Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ProductPurchaseReturnResult"));
			Товар.RowNumber.Добавить(Число(Стр.НомерСтроки));
			Товар.Code.Добавить(Строка(Стр.Номенклатура.Код));
			Товар.Count.Добавить(Число(Стр.Количество));
			Товар.Price.Добавить(Число(Стр.Цена));
			Товар.SaleNumber.Добавить(стр.НомерРеализации);
			
			Товары.Products.Добавить(Товар);
		КонецЦикла;				
	Иначе	
		Для каждого стр из ТаблицаОшибок Цикл
			Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ProductPurchaseReturnResult"));
			Товар.RowNumber.Добавить(Число(Стр.НомерСтроки));
			Товар.Code.Добавить(Строка(Стр.Номенклатура.код));
			Товар.Count.Добавить(Число(Стр.Количество));
			Товар.SaleNumber.Добавить(стр.НомерРеализации);
			Товар.Error.Добавить(Стр.НомерОшибки);
			Товар.ErrorDescription.Добавить(Стр.ОписаниеОшибки);
			Товары.Products.Добавить(Товар);
		КонецЦикла;				
	КонецЕсли;
	
	
	
	РезультатОперации.Products		 = Товары;
	РезультатОперации.Success		 = Success;
	РезультатОперации.Error = НомерОшибки;
	РезультатОперации.ErrorDescription = Ошибка;
	РезультатОперации.PurchaseReturnNumber = PurchaseReturnNumber;
	РезультатОперации.PurchaseReturnGUID = PurchaseReturnGUID;

	Возврат РезультатОперации;	


КонецФункции

//+++ 17.08.2017 - 
функция GetDebt(PartnerId)
	URL = "http://37.1.84.50:8080/Terminal";
	
	РезультатОперации = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ResultDebt"));
	
	Если PartnerId="" тогда
		РезультатОперации.Error = "Empty PartnerId!";
		РезультатОперации.Success = FALSE;
		возврат РезультатОперации;  // ВСЁ пустое
	КонецЕсли;
	
	Клиент1 = справочники.Контрагенты.НайтиПоКоду(PartnerId);
	Если Клиент1=неопределено тогда
		РезультатОперации.Error = "Not found Partner by Id '"+PartnerId+"'";
		РезультатОперации.Success = FALSE;
		возврат РезультатОперации;  // ВСЁ пустое
	КонецЕсли;
	
	РезультатЗапросаДЗ = ПолучитьДЗиПени( Клиент1  ); 
	//яштРезервыПоТоварам.РассылкаСообщенийОПДЗ( , , , PartnerId ); //абсолютно та же самая функция !
	
	Если РезультатЗапросаДЗ.Пустой() тогда //ничего нет!
		РезультатОперации.Error = "Expired Debt and Plan Debt are empty.";
		РезультатОперации.Success = True;
		возврат РезультатОперации;  // ВСЁ пустое
	КонецЕсли;
	
	РезультатОперации.Error = "";
	РезультатОперации.Success = True;
	
	попытка
	выборкаКлиента = РезультатЗапросаДЗ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	выборкаКлиента.Следующий(); //не пустой результат - значит что-то есть...
	
	выборкаПоВидуДЗ = выборкаКлиента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока выборкаПоВидуДЗ.Следующий() цикл  //вид = 1 и 2
		
		ТаблицаДЗ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfDebt")); //одна таблица

		СтрДЗ = выборкаПоВидуДЗ.Выбрать();
		Пока СтрДЗ.следующий() цикл
		 	строкаДЗ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "Debt")); //одна строка
			
				//заполнение свойств 1 строки...			
			строкаДЗ.Date = СтрДЗ.ДатаОтгрузки ;
			строкаДЗ.DatePay = СтрДЗ.ДатаОплаты ;
			строкаДЗ.ColDayDebt=?(СтрДЗ.ДнейПросрочки<0, -СтрДЗ.ДнейПросрочки, СтрДЗ.ДнейПросрочки);  //Плановая "+"
			
			строкаДЗ.NumOrder = СтрДЗ.НомерЗаказа;
			строкаДЗ.NumSale  = СтрДЗ.НомерРеализации;
			
			строкаДЗ.SumSale = СтрДЗ.СуммаДокумента;
			строкаДЗ.SumDebt = СтрДЗ.СуммаОстаток;
			строкаДЗ.SumPeni = СтрДЗ.СуммаПени;
			
			ТаблицаДЗ.Debt.Добавить( строкаДЗ );	
		КонецЦикла; //по документам

		Если выборкаПоВидуДЗ.Вид = 1 тогда	 //ВТ_Просрочка
			РезультатОперации.ExpiredDebt=ТаблицаДЗ;
		иначеЕсли выборкаПоВидуДЗ.Вид = 2 тогда	 //ВТ_НеПросрочка - печатается ПОСЛЕ просрочки
			РезультатОперации.PlanDebt=ТаблицаДЗ;
		КонецЕсли;
	
	КонецЦикла;	 //по видам
	
	Исключение //----------------пишем что за ошибка! ---------------------------
		РезультатОперации.Error = ОписаниеОшибки();
		РезультатОперации.Success = FALSE;
	КонецПопытки;
	
	возврат РезультатОперации;  // ВСЁ пустое
	
КонецФункции

функция ПолучитьДЗиПени( Клиент1 )
	запрос = новый Запрос;
	СписокТиповДоговора = Новый СписокЗначений;
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));    //00004
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата"));  //00001
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.ФакторингПредоплата); //17.08.2017   --- ещё предоплаты!!! ---
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.ПредоплатаПоСчетам);
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Пени"));
	запрос.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);

	запрос.УстановитьПараметр("Пени", Справочники.ТипыДоговоров.НайтиПоНаименованию("Пени") );

	Запрос.УстановитьПараметр("Клиент1", Клиент1 );
	запрос.УстановитьПараметр("ТекДата", НачалоДня( ТекущаяДата() )  );
	
    запрос.Текст = "ВЫБРАТЬ
                   |	ЗаказыИСделки.Сделка,
                   |	ЗаказыИСделки.ДоговорКонтрагента,
                   |	ЗаказыИСделки.СуммаВзаиморасчетовОстаток
                   |ПОМЕСТИТЬ ВТ_Взаиморасчеты
                   |ИЗ
                   |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
                   |			,
                   |			ДоговорКонтрагента.Владелец = &Клиент1
                   |				И ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)) КАК ЗаказыИСделки
                   |ГДЕ
                   |	ЗаказыИСделки.СуммаВзаиморасчетовОстаток > 0
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |	ВЫБОР
                   |		КОГДА Дебиторка.Сделка ССЫЛКА Документ.ЗаказПокупателя
                   |			ТОГДА Реализации.ДатаОтгрузки
                   |		ИНАЧЕ Дебиторка.Сделка.Дата
                   |	КОНЕЦ КАК ДатаОтгрузки,
                   |	ВЫБОР
                   |		КОГДА Дебиторка.Сделка ССЫЛКА Документ.ЗаказПокупателя
                   |			ТОГДА Реализации.Номер
                   |		ИНАЧЕ Дебиторка.Сделка.Номер
                   |	КОНЕЦ КАК НомерРеализации,
                   |	ВЫБОР
                   |		КОГДА Дебиторка.Сделка ССЫЛКА Документ.ЗаказПокупателя
                   |			ТОГДА Дебиторка.Сделка
                   |		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
                   |	КОНЕЦ КАК Заказ,
                   |	ВЫБОР
                   |		КОГДА Дебиторка.Сделка ССЫЛКА Документ.ЗаказПокупателя
                   |			ТОГДА ВЫРАЗИТЬ(Дебиторка.Сделка КАК Документ.ЗаказПокупателя).ДатаОплаты
                   |		ИНАЧЕ Дебиторка.Сделка.Дата
                   |	КОНЕЦ КАК ДатаОплаты,
                   |	ВЫБОР
                   |		КОГДА Дебиторка.Сделка ССЫЛКА Документ.ЗаказПокупателя
                   |			ТОГДА РАЗНОСТЬДАТ(ВЫРАЗИТЬ(Дебиторка.Сделка КАК Документ.ЗаказПокупателя).ДатаОплаты, &ТекДата, ДЕНЬ)
                   |		ИНАЧЕ РАЗНОСТЬДАТ(Дебиторка.Сделка.Дата, &ТекДата, ДЕНЬ)
                   |	КОНЕЦ КАК ДнейПросрочки,
                   |	ВЫБОР
                   |		КОГДА Дебиторка.Сделка ССЫЛКА Документ.ЗаказПокупателя
                   |			ТОГДА ВЫРАЗИТЬ(Дебиторка.Сделка КАК Документ.ЗаказПокупателя).Номер
                   |		ИНАЧЕ """"
                   |	КОНЕЦ КАК НомерЗаказа,
                   |	ВЫБОР
                   |		КОГДА Дебиторка.Сделка ССЫЛКА Документ.ЗаказПокупателя
                   |			ТОГДА Реализации.СуммаДокумента
                   |		ИНАЧЕ Дебиторка.СуммаВзаиморасчетовОстаток
                   |	КОНЕЦ КАК СуммаДокумента,
                   |	Дебиторка.СуммаВзаиморасчетовОстаток КАК СуммаОстаток,
                   |	ВЫБОР
                   |		КОГДА Дебиторка.ДоговорКонтрагента.ТипДоговора = &Пени
                   |			ТОГДА Дебиторка.СуммаВзаиморасчетовОстаток
                   |		ИНАЧЕ 0
                   |	КОНЕЦ КАК СуммаПени,
                   |	ВЫБОР
                   |		КОГДА Дебиторка.Сделка ССЫЛКА Документ.ЗаказПокупателя
                   |			ТОГДА ВЫБОР
                   |					КОГДА ВЫРАЗИТЬ(Дебиторка.Сделка КАК Документ.ЗаказПокупателя).ДатаОплаты < &ТекДата
                   |						ТОГДА 1
                   |					ИНАЧЕ 2
                   |				КОНЕЦ
                   |		ИНАЧЕ ВЫБОР
                   |				КОГДА Дебиторка.Сделка.Дата < &ТекДата
                   |					ТОГДА 1
                   |				ИНАЧЕ 2
                   |			КОНЕЦ
                   |	КОНЕЦ КАК Вид,
                   |	&Клиент1 КАК Контрагент
                   |ИЗ
                   |	ВТ_Взаиморасчеты КАК Дебиторка
				   //группировка по заказу - не нужна! реально бывает 2 и 3 реализации на 1 заказ
                   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                   |			док.Номер КАК Номер,
                   |			док.Дата КАК ДатаОтгрузки,
                   |			док.СуммаДокумента КАК СуммаДокумента,
                   |			ВЫРАЗИТЬ(док.Сделка КАК Документ.ЗаказПокупателя) КАК Заказ
                   |		ИЗ
                   |			Документ.РеализацияТоваровУслуг КАК док
                   |		ГДЕ
                   |			док.Контрагент = &Клиент1
                   |			И док.Проведен = ИСТИНА
                   |			И ВЫРАЗИТЬ(док.Сделка КАК Документ.ЗаказПокупателя) В
                   |					(ВЫБРАТЬ
                   |						Заказы.Сделка
                   |					ИЗ
                   |						ВТ_Взаиморасчеты КАК Заказы)) КАК Реализации
                   |		ПО ((ВЫРАЗИТЬ(Дебиторка.Сделка КАК Документ.ЗаказПокупателя)) = Реализации.Заказ)
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |	Вид,
                   |	ДатаОплаты,
                   |	Заказ
                   |ИТОГИ ПО
                   |	Контрагент,
                   |	Вид";
рез = Запрос.Выполнить();					   
возврат рез;
КонецФункции					   

Функция JoinOrders(Goods,Adress,ShippingDay,Comment)
	URL = "http://37.1.84.50:8080/Terminal";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "ResaltJoinOrder");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfJoinOrderProducts"));
	ТоварыСОшибками = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfJoinOrderProducts"));
	товарыОбщ = Новый ТаблицаЗначений;
	товарыОбщ.Колонки.Добавить("НовыйЗаказ");
	товарыОбщ.Колонки.Добавить("Номенклатура");
	товарыОбщ.Колонки.Добавить("Количество");
	товарыОбщ.Колонки.Добавить("Заказ");
	ТоварыОшибка = товарыОбщ.Скопировать();
	Ошибка    = "";
	Success   = Истина;
	
	Если СтрДлина(Comment) > 512 Тогда
		Success = Ложь;
		Ошибка = "Комментарий к заказу превышает допустимые 500 символов";
	КонецЕсли;
	
	номерОшибки = 0;
	
	ТаблицаНаОбъединение = Новый ТаблицаЗначений;
	ТаблицаНаОбъединение.Колонки.Добавить("Номенклатура", новый описаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаНаОбъединение.Колонки.Добавить("Количество", новый описаниеТипов("Число"));
	ТаблицаНаОбъединение.Колонки.Добавить("Заказ", новый описаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	
	
	
	
	Для каждого товар из Goods.Products цикл
		СтрокаТЗ = ТаблицаНаОбъединение.Добавить();
		СтрокаТЗ.Номенклатура = Справочники.Номенклатура.НайтиПоКоду((товар.Code));
		СтрокаТЗ.Количество = товар.Quantity;
		УИД = Новый УникальныйИдентификатор(СокрЛП(товар.OrderGUID));
		СтрокаТЗ.Заказ = Документы.ЗаказПокупателя.ПолучитьСсылку(УИД);
		Если СтрокаТЗ.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка() Тогда
			номерОшибки = 5;
			Success = Ложь;
			ОписаниеОшибки = "Заказ не найден";
		конецЕсли;	
		Если СтрокаТЗ.заказ.ПоставитьНаотгрузку Тогда
			номерОшибки = 1;
			Success = Ложь;
			ОписаниеОшибки = "Заказ уже стоит на отгрузке";
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаЗаказов = ТаблицаНаОбъединение.Скопировать();
	ТаблицаЗаказов.Свернуть("Заказ");
	
	// проверим, стоят ли заказы на отгрузку
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Заказ
	|ПОМЕСТИТЬ НоОбъединение
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КатегорииОбъектов.Объект,
	|	КатегорииОбъектов.Категория
	|ИЗ
	|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	|ГДЕ
	|	КатегорииОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				НоОбъединение.Заказ
	|			ИЗ
	|				НоОбъединение КАК НоОбъединение)";
	
	Запрос.УстановитьПараметр("Таблица",ТаблицаЗаказов);	
	Результат = Запрос.Выполнить();
	
	Если не Результат.Пустой() тогда
		номерОшибки = 1;
		Success = Ложь;
		ОписаниеОшибки = "Заказ уже стоит на отгрузке";
	КонецЕсли;
	
	//проверим, что бы  остатки  по выбранным заказам не уходили в минус
	
	//попробуем объединить	
	Если Success тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Номенклатура,
		|	Таблица.Количество,
		|	Таблица.Заказ
		|ПОМЕСТИТЬ НаОбъединение
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПокупателяТовары.Ссылка,
		|	ЗаказПокупателяТовары.НомерСтроки,
		|	ЗаказПокупателяТовары.ЕдиницаИзмерения,
		|	ЗаказПокупателяТовары.ЕдиницаИзмеренияМест,
		|	ЗаказПокупателяТовары.Количество,
		|	ЗаказПокупателяТовары.КоличествоМест,
		|	ЗаказПокупателяТовары.Коэффициент,
		|	ЗаказПокупателяТовары.Номенклатура,
		|	ЗаказПокупателяТовары.ПлановаяСебестоимость,
		|	ЗаказПокупателяТовары.ПроцентСкидкиНаценки,
		|	ЗаказПокупателяТовары.Размещение,
		|	ЗаказПокупателяТовары.СтавкаНДС,
		|	ЗаказПокупателяТовары.Сумма,
		|	ЗаказПокупателяТовары.СуммаНДС,
		|	ЗаказПокупателяТовары.Цена,
		|	ЗаказПокупателяТовары.Вес,
		|	ЗаказПокупателяТовары.Статус,
		|	ЗаказПокупателяТовары.КодТНВЭД
		|ПОМЕСТИТЬ Заказы
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				НаОбъединение.Заказ
		|			ИЗ
		|				НаОбъединение КАК НаОбъединение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Заказы.Ссылка КАК Заказ,
		|	Заказы.НомерСтроки,
		|	Заказы.ЕдиницаИзмерения,
		|	Заказы.ЕдиницаИзмеренияМест,
		|	Заказы.Количество КАК КоличествоВЗаказе,
		|	Заказы.КоличествоМест,
		|	Заказы.Коэффициент,
		|	Заказы.Номенклатура,
		|	Заказы.ПлановаяСебестоимость,
		|	Заказы.ПроцентСкидкиНаценки,
		|	Заказы.Размещение,
		|	Заказы.СтавкаНДС,
		|	ВЫРАЗИТЬ(Заказы.Сумма / Заказы.Количество * ЕСТЬNULL(НаОбъединение.Количество, 0) КАК ЧИСЛО(15, 0)) КАК Сумма,
		|	Заказы.СуммаНДС,
		|	Заказы.Цена,
		|	Заказы.Вес,
		|	Заказы.Статус,
		|	Заказы.КодТНВЭД,
		|	ЕСТЬNULL(НаОбъединение.Количество, 0) КАК Количество,
		|	Заказы.Количество - ЕСТЬNULL(НаОбъединение.Количество, 0) КАК КоличествоРезерв,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НаОбъединение.Количество, 0) = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДляОбъединия,
		|	ВЫБОР
		|		КОГДА Заказы.Количество - ЕСТЬNULL(НаОбъединение.Количество, 0) = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДляРезерва,
		|	ВЫБОР
		|		КОГДА Заказы.Количество <> ЕСТЬNULL(НаОбъединение.Количество, 0)
		|				И ЕСТЬNULL(НаОбъединение.Количество, 0) <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НадоДелить,
		|	НаОбъединение.Номенклатура КАК Номенклатура1,
		|	НаОбъединение.Заказ КАК Заказ1
		|ИЗ
		|	Заказы КАК Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ НаОбъединение КАК НаОбъединение
		|		ПО Заказы.Ссылка = НаОбъединение.Заказ
		|			И Заказы.Номенклатура = НаОбъединение.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Заказ";
		
		Запрос.УстановитьПараметр("Таблица",ТаблицаНаОбъединение);	
		ДанныеДляОбъединения = Запрос.Выполнить().Выгрузить();
		
		НачатьТранзакцию();
		
		докОбщийЗаказ = документы.ЗаказПокупателя.СоздатьДокумент();
		//новаяСсылкаЗП = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор());
		//докОбщийЗаказ.УстановитьСсылкуНового(новаяСсылкаЗП);

		ЗаполнитьЗначенияСвойств(докОбщийЗаказ, ТаблицаЗаказов[0].Заказ); // по 1-му заполняем основные реквизиты Общего документа
		
		догФакторинг = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(ТаблицаЗаказов[0].Заказ);
		
		//только если это дог.факторинга 
		Если догФакторинг.типДоговора = справочники.ТипыДоговоров.Факторинг тогда
			докОбщийЗаказ.ДоговорКонтрагента = догФакторинг;
		КонецЕсли;
		
		Подразделение = ?(Подразделение=неопределено, справочники.Подразделения.НайтиПоКоду("00005"), Подразделение);
		докОбщийЗаказ.Подразделение = Подразделение;
		ДокОбщийЗаказ.ДокументОснование ="";
		докОбщийЗаказ.ТипЗаказа = 6; // объединенный заказ имеет отдельный тип
		Преф = ?(Подразделение.Код="00005", "ТК", СокрЛП(Подразделение.ПрефиксИБ) );
		докОбщийЗаказ.НомерВходящегоДокумента="";
		докОбщийЗаказ.ДатаВходящегоДокумента ='00010101';
		докОбщийЗаказ.ССайта = ложь;
		
		докОбщийЗаказ.Поставщик  = справочники.Контрагенты.ПустаяСсылка();
		докОбщийЗаказ.Статус     = перечисления.СтатусыЗаказов.ПустаяСсылка();
		докОбщийЗаказ.Согласован = ложь;
		
		докОбщийЗаказ.Дата         = ТекущаяДата(); 
		
		//Если НЕ ShippingDay = "" Тогда  //передается дата отгрузки
		//			докобщийЗаказ.ДатаОтгрузки = Дата(ShippingDay);
		//КонецЕсли;
		
		
		докОбщийЗаказ.УстановитьНовыйНомер(Преф); 
		
		
		докОбщийЗаказ.Проверен = истина;
		докОбщийЗаказ.АвтоРезервирование = истина;
		докобщийЗаказ.ПоставитьНаОтгрузку = Истина;
		
		//+Лукьяненков 28.02.2018
		докобщийЗаказ.ДатаУстановкиВТерминалеКОтгрузке = ТекущаяДата();	
		//-Лукьяненков 28.02.2018
		
		
		
		СписокЗак = новый СписокЗначений;
		
		докОбщийЗаказ.Товары.Очистить();
		
		ЧтоОбъединять=ДанныеДляОбъединения.Скопировать(новый Структура("ДляОбъединия",Истина));
		
		ТЗТовары = Новый ТаблицаЗначений;
		ТзТовары = ЧтоОбъединять;

		ТоварыОбщ =	ЧтоОбъединять.Скопировать(,"Номенклатура,Количество,Заказ");
		ТоварыОбщ.Колонки.Добавить("НовыйЗаказ");
		ЧтоОбъединять.свернуть(	"ЕдиницаИзмерения,ЕдиницаИзмеренияМест,Коэффициент,Номенклатура,СтавкаНДС,КодТНВЭД","Количество,КоличествоМест,Сумма,СуммаНДС,Вес,Цена");
		ДокОбщийЗаказ.Товары.Загрузить(ЧтоОбъединять);		
		
			Для каждого стр из ДокОбщийЗаказ.Товары Цикл
				Если Стр.Цена <> Окр(стр.Сумма/стр.Количество,2) Тогда
				Стр.Цена = Окр(стр.Сумма/стр.Количество,2);
				РассчитатьСуммуНДСТабЧасти(стр, докОбщийЗаказ);
				КонецЕсли;
			конецЦикла;

		//Пока услуги и крышки не объединяем
		
		
		//3.отменяем проведение и ставим X на старых заказах и проводим новый общий заказ в Одной Транзакции!
		коммент = "";
		
		попытка		
			для каждого стр из ТаблицаЗаказов цикл
				докОб = Стр.Заказ.ПолучитьОбъект();
				докОб.ПометкаУдаления = истина;
				докОб.Комментарий = "# данные перенесены >> "+строка(докОбщийЗаказ.Номер)+" # "+докОб.Комментарий;
				
				докОб.мПроведениеИзФормы = ЛОЖЬ;
				докОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				
				коммент = коммент + докОб.Номер+"; ";
				
				стрЗаказ = докОбщийЗаказ.Заказы.Добавить();
				стрЗаказ.ЗаказПокупателя = Стр.заказ;
				
				стрЗаказПред = докОбщийЗаказ.СписокПредыдущихЗаказов.Добавить();
				стрЗаказПред.Заказ = Стр.заказ;
			КонецЦикла;	
			
			
			докОбщийЗаказ.Комментарий = "# объединенный заказ: " + коммент;
			докОбщийЗаказ.мПроведениеИзФормы = ЛОЖЬ;
			
			докОбщийЗаказ.Записать(РежимЗаписиДокумента.Проведение);
			ТоварыОбщ.ЗаполнитьЗначения(докОбщийЗаказ.Ссылка,"НовыйЗаказ");
			
			// посмотрим что осталось в резеве	
			ЧтоВРезерве=ДанныеДляОбъединения.Скопировать(новый Структура("ДляРезерва",Истина));
			Если чтоВРезерве.Количество()>0 тогда
				ЗаказыДляРезерва = ЧтоВрезерве;
				ЗаказыДляРезерва.свернуть("Заказ");
				Для каждого ЗакРез из ЗаказыДляРезерва Цикл
					ТоварыЗаказа = ДанныеДляОбъединения.Скопировать(новый Структура("Заказ",ЗакРез.Заказ));
					ТоварыОставить = ТоварыЗаказа.Скопировать(новый Структура("ДляОбъединия",Истина));
					ТоварыЗаказа.Колонки.Количество.имя = "КоличествоОтгрузить";
					ТоварыЗаказа.Колонки.КоличествоРезерв.имя = "Количество";
					ТоварыДляРезерва = ТоварыЗаказа.Скопировать(новый Структура("ДляРезерва",Истина));
					//редактируем заказ
					ЗакОбъект = ЗакРез.Заказ.ПолучитьОбъект();
					ЗакОбъект.Товары.Загрузить(ТоварыОставить);
					УИДЗаказа  = ЗакОбъект.Ссылка.УникальныйИдентификатор();
					//НомерЗаказа = ЗакОбъект.Номер;
					Для каждого стр из ЗакОбъект.Товары Цикл
						РассчитатьСуммуТабЧасти(стр, ЗакОбъект);
						РассчитатьСуммуНДСТабЧасти(стр, ЗакОбъект);
					конецЦикла;
					ЗакОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					//делаем копию на резерв
					НовыйЗаказ = ЗакОбъект.Скопировать();
					новаяСсылкаЗП = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор());
		            НовыйЗаказ.УстановитьСсылкуНового(новаяСсылкаЗП);

					НовыйЗаказ.Дата= ТекущаяДата();
					НовыйЗаказ.товары.Загрузить(ТоварыДляРезерва);
					новыйЗаказ.Проверен = Истина;
					новыйЗаказ.ПоставитьНаОтгрузку = Истина;
					
					//+Лукьяненков 28.02.2018
					новыйЗаказ.ДатаУстановкиВТерминалеКОтгрузке = ТекущаяДата();	
					//-Лукьяненков 28.02.2018
					
					догФакторинг = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(новыйЗаказ);
					//только если это дог.факторинга 
					Если догФакторинг.типДоговора = справочники.ТипыДоговоров.Факторинг тогда
						новыйЗаказ.ДоговорКонтрагента = догФакторинг;
					КонецЕсли;
					НовыйЗаказ.Записать(РежимЗаписиДокумента.Запись);
					НовыйЗаказ.мПроведениеИзФормы = ЛОЖЬ;
					
					
					Для каждого стр из НовыйЗаказ.Товары Цикл
						РассчитатьСуммуТабЧасти(стр, НовыйЗаказ);
						РассчитатьСуммуНДСТабЧасти(стр, ЗакОбъект);
					конецЦикла;
					НовыйЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					УИД = НовыйЗаказ.Ссылка.УникальныйИдентификатор();
					НомерЗаказа = НовыйЗаказ.Номер;
					Для каждого стр из НовыйЗаказ.Товары Цикл
						РассчитатьСуммуТабЧасти(стр, НовыйЗаказ);
						Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "JoinOrderProduct"));
						Товар.OrderGUID= Строка(УИД);
						Товар.Code=(Строка(Стр.Номенклатура.код));
						Товар.Quantity=(Число(Стр.Количество));
						Товар.IsJoined=ложь;
						Товар.OldGUID= Строка(УИДЗаказа);
						Товар.OrderNumberIn1S = НомерЗаказа; 
						Товары.Products.Добавить(Товар);
					конецЦикла;
				конецЦикла;
			конецЕсли;
			
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Success = Ложь;
			Ошибка = "Неудалось объединить заказы";
		КонецПопытки;
		
		
		
	Конецесли;
	//ДобавимОбщийЗаказ
	Если Success тогда
		Для каждого стр из ТоварыОбщ Цикл
			Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "JoinOrderProduct"));
			Товар.OrderGUID= (Строка(стр.НовыйЗаказ.Ссылка.УникальныйИдентификатор()));
			Товар.Code=(Строка(Стр.Номенклатура.код));
			Товар.Quantity=(Число(Стр.Количество));
			Товар.IsJoined=(истина);
			Товар.OldGUID= (Строка(стр.Заказ.Ссылка.УникальныйИдентификатор()));
			Товар.OrderNumberIn1S = стр.НовыйЗаказ.Номер; 
			Товары.Products.Добавить(Товар);
		КонецЦикла;	
		// передадим вложенные заказы
		Для каждого заказ из докОбщийЗаказ.Заказы Цикл
			УИДЗаказа = Строка(Заказ.заказПокупателя.УникальныйИдентификатор());
			НомерЗаказа = Заказ.заказПокупателя.Номер;
			Для каждого стр из Заказ.ЗаказПокупателя.Товары Цикл
				Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "JoinOrderProduct"));
				Товар.OrderGUID= Строка(УИДЗаказа);
				Товар.Code=(Строка(Стр.Номенклатура.код));
				Товар.Quantity=(Число(Стр.Количество));
				Товар.IsJoined=ложь;
				Товар.OldGUID= Строка(УИДЗаказа);
				Товар.OrderNumberIn1S = НомерЗаказа; 
				Товары.Products.Добавить(Товар);
			КонецЦикла;
		КонецЦикла;		
	КонецЕсли;
	
	
	РезультатОперации.Products		 = Товары;
	РезультатОперации.Success		 = Success;
	РезультатОперации.Error = НомерОшибки;
	РезультатОперации.ErrorDescription = Ошибка;
	
	Возврат РезультатОперации;	
	

	
	
	
КонецФункции

//***2017.09.14 (задача №32054)
Функция DeliveryReport()
	
	//Отчет по ожидаемым поступлениям дисков
	//упрощенный 574 отчет
	URL = "http://37.1.84.50:8080/Terminal";
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfDeliveryGoods"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Штампованные", Справочники.НоменклатурныеГруппы.НайтиПоКоду("00049"));
	Запрос.УстановитьПараметр("Литые", Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026"));
	Запрос.УстановитьПараметр("ТекущийДень", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Пустая", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления,
	               |	ЗаказыПоставщикамОстатки.Номенклатура,
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Подразделение КАК Подразделение,
	               |	ВЫБОР
	               |		КОГДА ЗаказыПоставщикамОстатки.Номенклатура.НоменклатурнаяГруппа = &Штампованные
	               |				И ЗаказыПоставщикамОстатки.КоличествоОстаток > 500
	               |			ТОГДА 500
	               |		КОГДА ЗаказыПоставщикамОстатки.Номенклатура.НоменклатурнаяГруппа = &Литые
	               |				И ЗаказыПоставщикамОстатки.КоличествоОстаток > 100
	               |			ТОГДА 100
	               |		ИНАЧЕ ЗаказыПоставщикамОстатки.КоличествоОстаток
	               |	КОНЕЦ КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	               |			,
	               |			ЗаказПоставщику.ДатаПоступления >= &ТекущийДень
	               |				И ЗаказПоставщику.ДатаПоступления <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				И ЗаказПоставщику.НомерКонтейнера <> """"
	               |				И Номенклатура.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.Диски)
	               |				И ЗаказПоставщику.Грузополучатель = &Пустая) КАК ЗаказыПоставщикамОстатки
	               |ГДЕ
	               |	ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаПоступления
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "DeliveryGoods"));
		Товар.Code.Добавить(Строка(Результат.Номенклатура.Код));
		Товар.DeliveryDate.Добавить(Результат.ДатаПоступления);
		Товар.Quantity.Добавить(Число(Результат.Количество));
		Товар.Storage.Добавить(Строка(Результат.Подразделение.Код));
		Товары.Element.Добавить(Товар);
	КонецЦикла;	
	
	Возврат Товары;
	
КонецФункции

Функция CreateSalesDocs(Partner, PointId, Goods, Comment)
	
	URL = "http://37.1.84.50:8080/Terminal";
	
	ТипXDTOРезультатОперации = ФабрикаXDTO.Тип(URL, "Result");
	РезультатОперации = ФабрикаXDTO.Создать(ТипXDTOРезультатОперации);
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfProductsResult"));
	//ВОжидании = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfWait"));
	
	ВОжидании    = "";
	ПоставщикКод = 0; // 26.05.2017 - для сезонных заказов всегда 0
	Ошибка    = "";
	Success   = Истина;
	OrderNumber = "";
	OrderGUID = "";
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(Partner);
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Success = Ложь;
		Ошибка = "Не удалось найти контрагента";
	КонецЕсли;
	Если Контрагент.ЗапретитьВводЗаказаПокупателя или Контрагент.ЗапретОтгрузки Тогда
		Success = Ложь;
		Ошибка = "Вам запрещено создавать заказы!";
	КонецЕсли;
	
	//15.06.2015 - ограничение до 500
	Если СтрДлина(Comment) > 512 Тогда
		Success = Ложь;
		Ошибка = "Комментарий к заказу превышает допустимые 500 символов";
	КонецЕсли;
	
	СпрТочка = Справочники.Точки.НайтиПоРеквизиту("Номер", PointId,,Контрагент);
	Набор = РегистрыСведений.СоответствиеКонтрагентовСкладамФРан.СоздатьНаборЗаписей();
	Набор.Отбор.Контрагент.Установить(Контрагент);
	Набор.Отбор.Точка.Установить(СпрТочка);
	Набор.Прочитать();
	
	если Набор.Количество()>0 Тогда
		СкладФР = Набор[0].Склад;
		ДоговорФР = Набор[0].ДоговорПродажи;
		Грузоотправитель = Контрагент;
	Иначе
		СкладФР = Справочники.Склады.ПустаяСсылка();
		ДоговорФР = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Грузоотправитель = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
		
	ДоговорРеализация = ДоговорФР;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Goods);
	ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура");
	ТаблицаЗаказа.Колонки.Добавить("НоменклатураСпр");
	ТаблицаЗаказа.Колонки.Добавить("Количество");
	ТаблицаЗаказа.Колонки.Добавить("Цена");
	
	Запись = Новый Структура;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Имя = ЧтениеXML.Имя;
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Запись.Вставить(Имя, ЧтениеXML.Значение);      //информацию фнутри блока XML помещаем в структуру
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеXML.Имя = "Products" Тогда
				СтрокаТЗ = ТаблицаЗаказа.Добавить();
				СтрокаТЗ.Номенклатура = Запись.Code;
				СтрокаТЗ.Количество = Число(Запись.Quantity);
				СтрокаТЗ.НоменклатураСпр=Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
		        СтрокаТЗ.Цена =  Число(Запись.Storage);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЧтениеXML.Закрыть();

	
	//Для каждого товар из Goods.Product цикл
	//	СтрокаТЗ = ТаблицаЗаказа.Добавить();
	//	СтрокаТЗ.Номенклатура = товар.Code;
	//	СтрокаТЗ.Количество =  Число(товар.Quantity);
	//	СтрокаТЗ.НоменклатураСпр=Справочники.Номенклатура.НайтиПоКоду(СтрокаТЗ.Номенклатура);
	//	СтрокаТЗ.Цена =  Число(товар.Storage);
	//КонецЦикла;
		
	//Создание заказа(ов)
	Если Success Тогда
		
		//Для каждого СтрВремТЗ ИЗ ВремТЗД Цикл  //перебираем все подразделения заказа для проверки остатков
		ДоговорЗаказа = ДоговорРеализация;
		ПодразделениеЗаказа = Справочники.Подразделения.НайтиПоКоду("00005");
		Поставщик = Справочники.Контрагенты.НайтиПоКоду(Partner);     // это код (число)  //это код из регистра Сроки доставки (что бы никто не догадался))))
		
		Реализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Реализация.Дата = ТекущаяДата();
		Реализация.Организация = Справочники.Организации.НайтиПоКоду("00001");
			
		Реализация.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); //Крупный опт
		Реализация.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
		Реализация.КурсВзаиморасчетов = 1;
		Реализация.КратностьВзаиморасчетов = 1;
		
		Реализация.Контрагент = Поставщик;
		Реализация.Подразделение = ПодразделениеЗаказа;					
		Реализация.Грузоотправитель = Грузоотправитель;
		
		Реализация.Ответственный = Справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
		
		Реализация.Комментарий = СокрЛП(Comment);
		
		//29.11.2016 - Экспортные рублевые Клиенты  - БЕЗ НДС
	
		Реализация.СуммаВключаетНДС = Истина;
		Реализация.УчитыватьНДС	   = Истина;		
		
		Реализация.ДоговорКонтрагента = ДоговорЗаказа;
		Реализация.ОтражатьВУправленческомУчете = Истина;
		Реализация.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		//+++)
		
		СписокНом = Новый СписокЗначений;
		
		//Плотников, для франчайзи  >>>>>>
		
		//Набор = РегистрыСведений.СоответствиеКонтрагентовСкладамФРан.СоздатьНаборЗаписей();
		//Набор.Отбор.Контрагент.Установить(Реализация.Контрагент);
		//Набор.Прочитать();
		//
		//если Набор.Количество()>0 Тогда
		//	СкладФР = Набор[0].Склад;
		//Иначе
		//	СкладФР = Справочники.Склады.ПустаяСсылка();
		//КонецЕсли;
		
		Реализация.Склад = СкладФР;
		
		Для каждого Стр ИЗ ТаблицаЗаказа Цикл
			СтрокаТовары = Реализация.Товары.Добавить();
			СтрокаТовары.Номенклатура = Стр.НоменклатураСпр;
			СтрокаТовары.Коэффициент = 1;
			СтрокаТовары.Количество = Стр.Количество;
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, Реализация, Константы.ВалютаРегламентированногоУчета.Получить()); 
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, Реализация);
			СтрокаТовары.Цена = Стр.Цена;
			РассчитатьСуммуТабЧасти(СтрокаТовары, Реализация);
			РассчитатьСуммуНДСТабЧасти(СтрокаТовары, Реализация);
			
			СписокНом.Добавить(Стр.НоменклатураСпр);
		КонецЦикла;
		
		Реализация.УстановитьНовыйНомер("ТК");
		Реализация.Записать(РежимЗаписиДокумента.Запись);
		
		Если Реализация.Товары.Количество() <> 0 Тогда
			Попытка 
				
			    Реализация.Записать(РежимЗаписиДокумента.Проведение);
				//Реализация.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				
				//Реализация.Записать(РежимЗаписиДокумента.Запись);
				Ошибка = Ошибка + Символы.ПС+ОписаниеОшибки();
				Success = ложь;
			КонецПопытки;
			
			OrderGUID = Строка(Реализация.Ссылка.УникальныйИдентификатор());
			OrderNumber = СокрЛП(Реализация.Номер);
						
		КонецЕсли;  //товары есть
						
		//формируем возвращаемый массив с товарами и GUID заказа
		Для каждого СтрокаТЗ ИЗ ТаблицаЗаказа Цикл
			Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ProductResult"));
			Товар.Code.Добавить(Строка(СтрокаТЗ.Номенклатура));
			Товар.Quantity.Добавить(Число(СтрокаТЗ.Количество));
			Товар.Storage.Добавить("00005");
			Товар.OrderGUID.Добавить(Строка(OrderGUID));
			Товар.OrderNumber.Добавить(Строка(OrderNumber));
			Товары.ProductsResult.Добавить(Товар);	
		КонецЦикла;
				
	КонецЕсли;
	
	РезультатОперации.Products		 = Товары;
	РезультатОперации.Success		 = Success;
	РезультатОперации.Error			 = Ошибка;
	РезультатОперации.OrdersFromSuppliers			 = "";
	РезультатОперации.SupplierId			         = 0;
	Возврат РезультатОперации;	
	
КонецФункции

Функция ПолучитьКонтактнуюИнформацию(Контрагент, Вид)
	
	РезСтруктура =новый Структура("Вид, Адрес, Регион, Город, Улица, Дом, Координаты", 
	"","","","","");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Комментарий,
	
	|	КонтактнаяИнформация.Поле2 как Регион,
	
	|	выбор когда КонтактнаяИнформация.Поле4="""" 
	|		  тогда КонтактнаяИнформация.Поле5
	|			Иначе КонтактнаяИнформация.Поле4 Конец как Город,
	
	//06.07.2017
	|
	| выбор когда КонтактнаяИнформация.Поле6="""" и КонтактнаяИнформация.Поле5<>""""
	| тогда ""нет улиц ""+КонтактнаяИнформация.Поле5 
	| иначе КонтактнаяИнформация.Поле6 Конец как Улица,
	|	КонтактнаяИнформация.Поле7 как Дом,
	
	|	КонтактнаяИнформация.Поле10 как Координаты
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Контрагент
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Вид);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РезСтруктура, Выборка); 
		РезСтруктура.Адрес = выборка.Представление+?(СокрЛП(выборка.Комментарий)="","", "~"+выборка.Комментарий);
	КонецЕсли;
	
	Возврат РезСтруктура;

КонецФункции

Функция GetDatesOfShipment(Partner, AddressId)
	
	ДатаЗаказа = ТекущаяДата();
	
	URL = "http://37.1.84.50:8080/Terminal";
	
	Даты = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ListOfDates"));
					 
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(Partner);
	
	Подразделение = Контрагент.ПодразделениеЛогистики;
	Если Подразделение = Справочники.Подразделения.ПустаяСсылка() Тогда
		Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
	КонецЕсли;
	
	Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду(AddressId);
	
	сАдрес = ПолучитьКонтактнуюИнформацию(Контрагент, Вид);
	
	РегионЭтоГород = (  найти(сАдрес.Регион,"Москва")>0 
			или найти(сАдрес.Регион,"Санкт-Петербург")>0 
			или найти(сАдрес.Регион,"Севастополь")>0 );

	соответсвиеДней = Новый Соответствие;
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Понедельник,1);
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Вторник,2);
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Среда,3);
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Четверг,4);
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Пятница,5);
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Суббота,6);
	соответсвиеДней.Вставить(Перечисления.ДниНедели.Воскресенье,7);
	
	попытка
	    ШиротаОсн  = Число(Прав(сАдрес.Координаты,Найти(сАдрес.Координаты,",")-1));
	    ДолготаОсн = Число(Лев(сАдрес.Координаты,Найти(сАдрес.Координаты,",")-1));
	Исключение
		ШиротаОсн  = 0;
	    ДолготаОсн = 0;
	КонецПопытки;
	
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() или Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка() Тогда
		Возврат Даты;
	КонецЕсли;
	
	если сАдрес.Регион = "" Тогда
		Возврат Даты;		
	КонецЕсли;
	
	МаршрутНайден = Ложь;
	маршрут = Справочники.НовМаршруты.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регион",сАдрес.Регион);
	Запрос.УстановитьПараметр("Город",сАдрес.Город);
	Запрос.УстановитьПараметр("РегионЭтоГород",РегионЭтоГород);
	Запрос.УстановитьПараметр("РегионСокр",Прав(сАдрес.Регион,4)+"%");
	Запрос.УстановитьПараметр("ГородСокр",Прав(сАдрес.Город,4)+"%");
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НовМаршрутыГорода.Ссылка,
	               |	1 КАК Приоритет
	               |ИЗ
	               |	Справочник.НовМаршруты.Города КАК НовМаршрутыГорода
	               |ГДЕ
	               |	(ВЫБОР
	               |				КОГДА &РегионЭтоГород = ИСТИНА
	               |					ТОГДА НовМаршрутыГорода.Регион = &Регион
	               |				ИНАЧЕ НовМаршрутыГорода.Регион = &Регион
	               |						И НовМаршрутыГорода.Город = &Город
	               |			КОНЕЦ
	               |			ИЛИ ВЫБОР
	               |				КОГДА &РегионЭтоГород = ИСТИНА
	               |					ТОГДА НовМаршрутыГорода.Регион ПОДОБНО &РегионСокр
	               |				ИНАЧЕ НовМаршрутыГорода.Регион ПОДОБНО &РегионСокр
	               |						И НовМаршрутыГорода.Город ПОДОБНО &ГородСокр
	               |			КОНЕЦ)
	               |	И НовМаршрутыГорода.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И НовМаршрутыГорода.Ссылка.Подразделение = &Подразделение
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НовМаршрутыГорода.Ссылка";
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() = 0 Тогда //Ниче не нашли, попробуем по другому
		
	//+++ 11.08.2017 - НЕТ такой ТЧ:  Справочник.НовМаршруты.Зоны !!!
	
		ЗапросКоординаты = Новый Запрос;
		ЗапросКоординаты.УстановитьПараметр("Подразделение",Подразделение);
		ЗапросКоординаты.Текст = "ВЫБРАТЬ
		                         |	НовМаршрутыЗоны.Ссылка,
		                         |	НовМаршрутыЗоны.Координата1,
		                         |	НовМаршрутыЗоны.Координата2,
		                         |	1 КАК Приоритет
		                         |ИЗ
		                         |	Справочник.НовМаршруты.Зоны КАК НовМаршрутыЗоны
		                         |ГДЕ
		                         |	НовМаршрутыЗоны.Ссылка.ПометкаУдаления = ЛОЖЬ
		                         |	И НовМаршрутыЗоны.Ссылка.Подразделение = &Подразделение";
		РезКоординаты = ЗапросКоординаты.Выполнить().Выгрузить();
		
		Для Индекс = -РезКоординаты.Количество() По -1 Цикл
		 	уд = РезКоординаты.Получить(-Индекс-1);
			Широта1Стр  = Число(Лев(уд.Координата1,Найти(уд.Координата1,",")-1));
			Долгота1Стр = Число(Прав(уд.Координата1,Найти(уд.Координата1,",")-1));
			
			Широта2Стр  = Число(Лев(уд.Координата2,Найти(уд.Координата2,",")-1));
			Долгота2Стр = Число(Прав(уд.Координата2,Найти(уд.Координата2,",")-1));
		 	Если ШиротаОсн < Широта2Стр или  ШиротаОсн > Широта1Стр  или ДолготаОсн < Долгота1Стр или ДолготаОсн > Долгота2Стр Тогда
				 РезКоординаты.Удалить(-Индекс-1);
		 	КонецЕсли;
		КонецЦикла;
		
		Если РезКоординаты.Количество() > 0 Тогда
		
			МаршрутНайден = Истина;
			Поиск = РезКоординаты.Скопировать();
			
		КонецЕсли;
		
	ИначеЕсли Рез.Количество() = 1 Тогда
		
		МаршрутНайден = Истина;
		Поиск = Рез.Скопировать();
		
	ИначеЕсли Рез.Количество()>1 Тогда
		
		МаршрутНайден = Истина;
		Поиск = Рез.Скопировать();
		
	КонецЕсли;
	
	ТаблицаМаршрутИДата = Новый ТаблицаЗначений;
	ТаблицаМаршрутИДата.Колонки.Добавить("Маршрут");
	ТаблицаМаршрутИДата.Колонки.Добавить("Приоритет");
	ТаблицаМаршрутИДата.Колонки.Добавить("Дата");
	
	Если МаршрутНайден Тогда
		
		поиск.Колонки.Добавить("Дата");
		
		Для каждого стрМаршрут из Поиск Цикл
			
			графикРаботыТекущий  = ?(стрМаршрут.Ссылка.Сезон,стрМаршрут.Ссылка.ГрафикРаботы2,стрМаршрут.Ссылка.ГрафикРаботы);
			
			Для каждого стрДень из графикРаботыТекущий Цикл
				Если стрДень.Используется Тогда
					
					ТекДень = ДеньНедели(ДатаЗаказа);
					
					если соответсвиеДней.Получить(стрДень.ДеньНедели) < ТекДень Тогда
						НовСтрокаМаршрутДата = ТаблицаМаршрутИДата.Добавить();
						НовСтрокаМаршрутДата.маршрут = стрмаршрут.ссылка;
						НовСтрокаМаршрутДата.Приоритет = стрмаршрут.Приоритет;
						НовСтрокаМаршрутДата.Дата = ДобавитьИнтервал(ДатаЗаказа,Перечисления.Периодичность.День,7 - ТекДень + соответсвиеДней.Получить(стрДень.ДеньНедели));
					иначеЕсли соответсвиеДней.Получить(стрДень.ДеньНедели) > ТекДень Тогда
						НовСтрокаМаршрутДата = ТаблицаМаршрутИДата.Добавить();
						НовСтрокаМаршрутДата.маршрут = стрмаршрут.ссылка;
						НовСтрокаМаршрутДата.Приоритет = стрмаршрут.Приоритет;
						НовСтрокаМаршрутДата.Дата = ДобавитьИнтервал(ДатаЗаказа,Перечисления.Периодичность.День,соответсвиеДней.Получить(стрДень.ДеньНедели) - ТекДень);
					ИначеЕсли соответсвиеДней.Получить(стрДень.ДеньНедели) = ТекДень Тогда
						Если стрДень.ВремяНачала  = Дата(1,1,1) Тогда
							НовСтрокаМаршрутДата = ТаблицаМаршрутИДата.Добавить();
							НовСтрокаМаршрутДата.маршрут = стрмаршрут.ссылка;
							НовСтрокаМаршрутДата.Приоритет = стрмаршрут.Приоритет;
							НовСтрокаМаршрутДата.Дата = ДатаЗаказа;
						Иначе
							Если ДатаЗаказа < НачалоДня(ДатаЗаказа)+Час(стрДень.ВремяНачала)*3600+Минута(стрДень.ВремяНачала)*60 Тогда
								НовСтрокаМаршрутДата = ТаблицаМаршрутИДата.Добавить();
								НовСтрокаМаршрутДата.маршрут = стрмаршрут.ссылка;
								НовСтрокаМаршрутДата.Приоритет = стрмаршрут.Приоритет;
								НовСтрокаМаршрутДата.Дата = ДатаЗаказа;
							иначе
								НовСтрокаМаршрутДата = ТаблицаМаршрутИДата.Добавить();
								НовСтрокаМаршрутДата.маршрут = стрмаршрут.ссылка;
								НовСтрокаМаршрутДата.Приоритет = стрмаршрут.Приоритет;
								НовСтрокаМаршрутДата.Дата = ДобавитьИнтервал(ДатаЗаказа,Перечисления.Периодичность.День,7);
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		ТаблицаМаршрутИДата.Свернуть("Дата");
		ТаблицаМаршрутИДата.Сортировать("Дата Возр");
	КонецЕсли;
	
	Для каждого стр1 из ТаблицаМаршрутИДата Цикл
		
		Даты.Date.Добавить(Строка(Формат(стр1.Дата,"ДФ=dd-MM-yyyy")));
		
	КонецЦикла;
	
	Возврат Даты;

КонецФункции

//***2017.10.12
Функция ReturnOfDefectiveReport(Partner, StartDate, StopDate)
	
	URL = "http://37.1.84.50:8080/Terminal";
	
	РезультатОперации = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ReturnOfDefectiveResult"));
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfReturnOfDefectiveGoods"));
	НоменклатурныеГруппы = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfReturnOfDefectiveGroups"));
	
	ТекСсылка = Справочники.ВнешниеОбработки.НайтиПоКоду(402); //учет возврата брака по поставщикам
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	
	Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
	Отчет.НачПериода = НачалоДня(StartDate);
	Отчет.КонПериода = КонецДня(StopDate);
	ТЗ = Новый ТаблицаЗначений;
	ТЗ = Отчет.РезультатКомпоновкиВТЗ();
	
	ТабНомГрупп = Новый ТаблицаЗначений;
	ТабНомГрупп.Колонки.Добавить("НоменклатурнаяГруппа");
	ТабНомГрупп.Колонки.Добавить("КоличествоПоступило");
	ТабНомГрупп.Колонки.Добавить("СуммаПоступило");
	ТабНомГрупп.Колонки.Добавить("КоличествоПринято");
	ТабНомГрупп.Колонки.Добавить("СуммаПринято");
	
	Если НЕ ТЗ.Количество() = 0 Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Поставщик", Справочники.Контрагенты.НайтиПоКоду(Partner));
		Строки = ТЗ.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда			
			Для каждого СтрМассива ИЗ Строки Цикл
				Если НЕ СтрМассива.НоменклатураКод = "" И НЕ СтрМассива.НоменклатураКод = Неопределено Тогда
					Если СтрМассива.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026") ИЛИ СтрМассива.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00022") Тогда
						
						Товар = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ReturnOfDefectiveGoods"));
						Товар.Code.Добавить(Строка(СтрМассива.НоменклатураКод));
						Товар.Name.Добавить(Строка(СтрМассива.Номенклатура.НаименованиеПолное));
						Товар.ItemGroup.Добавить(Строка(СтрМассива.НоменклатурнаяГруппа));
						Товар.DefectForSale.Добавить(Строка(СтрМассива.ВидДефектаДляУценки));
						Товар.DefectForSaleEn.Добавить(Строка(СтрМассива.ВидДефектаДляУценкиАнглНазвание));
						Товар.DefectCome.Добавить(Строка(СтрМассива.ВиновникВозникновенияДефекта));
						Товар.LastDeliveryDate.Добавить(Дата(СтрМассива.ДатаПоследнегоПрихода));
						Товар.Quantity.Добавить(Число(СтрМассива.КоличествоПринято));
						Товар.Sum.Добавить(Число(СтрМассива.СуммаПринято));
						Товар.Resolution.Добавить(Строка(СтрМассива.Заключение));
						Товар.ClaimDate.Добавить(Дата(Формат(СтрМассива.Ссылка.Дата, "ДЛФ=DT")));
						Товар.ClaimNumber.Добавить(Строка(СокрЛП(Формат(Строка(СтрМассива.Ссылка.Номер), "ЧГ="))));
						Товар.PurchasePrice.Добавить(Число(СтрМассива.ЦенаП));
						Товар.ResolutionEN.Добавить(Строка(СтрМассива.ЗаключениеEN));
						Товары.Element.Добавить(Товар);
						
						НайденнаяСтрока = ТабНомГрупп.Найти(СтрМассива.НоменклатурнаяГруппа); 
						Если НайденнаяСтрока = Неопределено Тогда
							СтрТЗ = ТабНомГрупп.Добавить();
							СтрТЗ.НоменклатурнаяГруппа = СтрМассива.НоменклатурнаяГруппа;
							СтрТЗ.КоличествоПоступило = СтрМассива.КоличествоПоступило;
							СтрТЗ.СуммаПоступило = СтрМассива.СуммаПоступило;
							Если СтрМассива.ВиновникВозникновенияДефекта = Перечисления.ВиновникиВозникновенияДефекта.Производитель Тогда
								СтрТЗ.КоличествоПринято = СтрМассива.КоличествоПринято;
								СтрТЗ.СуммаПринято = СтрМассива.СуммаПринято;
							Иначе
								СтрТЗ.КоличествоПринято = 0;
								СтрТЗ.СуммаПринято = 0;
							КонецЕсли;
						Иначе
							Если СтрМассива.ВиновникВозникновенияДефекта = Перечисления.ВиновникиВозникновенияДефекта.Производитель Тогда
								НайденнаяСтрока.КоличествоПринято = НайденнаяСтрока.КоличествоПринято + СтрМассива.КоличествоПринято;
								НайденнаяСтрока.СуммаПринято = НайденнаяСтрока.СуммаПринято + СтрМассива.СуммаПринято;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ ТабНомГрупп.Количество() = 0 Тогда
		КоличествоПоступилоОбщее = 0;
		СуммаПоступилоОбщее = 0;
		КоличествоПринятоОбщее = 0;
		СуммаПринятоОбщее = 0;
		Для каждого СтрТЗ ИЗ ТабНомГрупп Цикл 
			КоличествоПоступилоОбщее = КоличествоПоступилоОбщее + СтрТЗ.КоличествоПоступило;
			СуммаПоступилоОбщее = СуммаПоступилоОбщее + СтрТЗ.СуммаПоступило;
			КоличествоПринятоОбщее = КоличествоПринятоОбщее + СтрТЗ.КоличествоПринято;
			СуммаПринятоОбщее = СуммаПринятоОбщее + СтрТЗ.СуммаПринято; 
		КонецЦикла;

		НомГруппа = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ReturnOfDefectiveGroups"));
		НомГруппа.ItemGroup.Добавить(Строка(Справочники.НоменклатурныеГруппы.ПустаяСсылка())); //решили объединить все группы, поэтому так
		НомГруппа.QuantityDelivered.Добавить(КоличествоПоступилоОбщее);
		НомГруппа.SumDelivered.Добавить(СуммаПоступилоОбщее);
		
		//расчет % брака и суммы компенсации от количества принятых бракованных товаров
		Если НЕ КоличествоПоступилоОбщее = 0 Тогда
			ПроцентБракаПоКоличеству = Окр(100*КоличествоПринятоОбщее/КоличествоПоступилоОбщее,2);
			Если (ПроцентБракаПоКоличеству-0.5) < 0 Тогда
				СуммаКомпенсацииПоКоличеству = 0;
			Иначе
				СуммаКомпенсацииПоКоличеству = (Окр(СуммаПоступилоОбщее*(ПроцентБракаПоКоличеству-0.5)/100,2));
			КонецЕсли;
		Иначе
			ПроцентБракаПоКоличеству = 0;
			СуммаКомпенсацииПоКоличеству = 0;
		КонецЕсли;
		
		//расчет % брака и суммы компенсации от стоимости принятых бракованных товаров
		Если НЕ СуммаПоступилоОбщее = 0 Тогда
			ПроцентБракаПоСумме = Окр(100*СуммаПринятоОбщее/СуммаПоступилоОбщее,2);
			Если (ПроцентБракаПоСумме-0.5) < 0 Тогда
				СуммаКомпенсацииПоСумме = 0;
			Иначе
				СуммаКомпенсацииПоСумме = (Окр(СуммаПоступилоОбщее*(ПроцентБракаПоСумме-0.5)/100,2));
			КонецЕсли;
		Иначе
			ПроцентБракаПоСумме = 0;
			СуммаКомпенсацииПоСумме = 0;
		КонецЕсли;
		
		//Если СуммаКомпенсацииПоКоличеству > СуммаКомпенсацииПоСумме Тогда
			НомГруппа.PartOfDefectiveGoods.Добавить(ПроцентБракаПоКоличеству);
			НомГруппа.SumCompensation.Добавить(СуммаКомпенсацииПоКоличеству);
		//Иначе
		//	НомГруппа.PartOfDefectiveGoods.Добавить(ПроцентБракаПоСумме);
		//	НомГруппа.SumCompensation.Добавить(СуммаКомпенсацииПоСумме);
		//КонецЕсли;
		НоменклатурныеГруппы.Element.Добавить(НомГруппа);
	КонецЕсли;
	
	РезультатОперации.Products = Товары;
	РезультатОперации.Groups = НоменклатурныеГруппы;
	
	Возврат РезультатОперации;
	
КонецФункции

Функция WheelsTestReport(Partner,StartDate, StopDate)
	URL = "http://37.1.84.50:8080/Terminal";
	
	ДанныеРезультата = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfReturnWheelsTest"));
	
	КодЗавод = Новый Соответствие;
	КодЗавод.Вставить("91735","A");
	КодЗавод.Вставить("91535","B");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект,
		|	ЗначенияСвойствОбъектов.Значение
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &Свойство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПровереннаяНагрузкаДисков.Дата КАК Data,
		|	ПровереннаяНагрузкаДисков.Номенклатура.Код КАК Code,
		|	ПровереннаяНагрузкаДисков.НомерКонтейнера КАК NomberOfComing,
		|	ПровереннаяНагрузкаДисков.Номенклатура.Наименование КАК Name,
		|	ПровереннаяНагрузкаДисков.ПрошедшаяНагрузка КАК Maxload,
		|	ПровереннаяНагрузкаДисков.НомерПартии КАК Party
		|ИЗ
		|	РегистрСведений.ПровереннаяНагрузкаДисков КАК ПровереннаяНагрузкаДисков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|		ПО ПровереннаяНагрузкаДисков.Номенклатура = ВТ.Объект
		|ГДЕ
		|	НЕ(ПровереннаяНагрузкаДисков.НомерПартии ПОДОБНО ""04""
		|				ИЛИ ПровереннаяНагрузкаДисков.НомерПартии ПОДОБНО ""05"")
		|	И ВТ.Значение = &Значение
		|	И ПровереннаяНагрузкаДисков.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПровереннаяНагрузкаДисков.ТестПройден = ЛОЖЬ";

	Запрос.УстановитьПараметр("ДатаКон", КонецДня(StopDate));
	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(StartDate));
	Запрос.УстановитьПараметр("Значение", КодЗавод.Получить(сокрЛП(Partner)));
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90185"));

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	Для каждого стр из Выборка цикл
	 Строка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ReturnWheelsTest"));
     ЗаполнитьЗначенияСвойств(Строка,стр);
	 ДанныеРезультата.Element.Добавить(Строка);
	конецЦикла;
	
	Возврат ДанныеРезультата;

КонецФункции

Функция Test(test1=0)
	// Вставить содержимое обработчика.
КонецФункции

//+++ 27.03.2018
процедура УстановитьСамовывозСоСкладаФилиала( Зак1 )
	
	СкладПодр = новый Соответствие;
	СкладПодр.Вставить("Ростов на Дону", справочники.Подразделения.НайтиПоКоду("00106").Склад );
	СкладПодр.Вставить("Санкт-Петербург", справочники.Подразделения.НайтиПоКоду("00112").Склад );
	СкладПодр.Вставить("Москва", справочники.Подразделения.НайтиПоКоду("00133").Склад );
	СкладПодр.Вставить("Екатеринбург", справочники.Подразделения.НайтиПоКоду("00138").Склад );
	СкладПодр.Вставить("Москва 2", справочники.Подразделения.НайтиПоКоду("00184").Склад );  // ещё не работает
	СкладПодр.Вставить("Тольятти", справочники.Подразделения.НайтиПоКоду("00172").Склад );  // ещё не работает
		
	Для каждого стр1 из Зак1.Контрагент.ПунктыСамовывоза цикл
		Если не стр1.Использовать тогда
			продолжить;
		КонецЕсли;
		склад1 = СкладПодр.Получить( СокрЛП(стр1.Наименование) );
		Если склад1 <> неопределено тогда 	
			Зак1.Склад = Склад1;
			Зак1.ОтгрузкаСПодразделенияСклада = Истина;   // для 293 обработки!
			прервать; // c первого попавшегося!
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Функция ChengeOrders(DeliveryDate,WayOfDelivery,AddressId,TkId,DayOfWeekToDeliver,OrderGuids)
		URL = "http://37.1.84.50:8080/Terminal";
	УдачныеЗаказы = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URL, "ArrayOfOrdersGuid"));
	
	Для каждого Заказ из OrderGuids.OrderGuid цикл
		
		Попытка
			УИД = Новый УникальныйИдентификатор(СокрЛП(Заказ));
			ЗаказСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(УИД);
		Исключение
			ЗаказСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецПопытки;
		

		заказОбъект = ЗаказСсылка.получитьОбъект();
		заказОбъект.ДатаОтгрузки = Дата(DeliveryDate);
		заказОбъект.ЧислоДнейСМоментаОтгрузки = заказОбъект.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
        заказОбъект.ДатаОплаты = заказОбъект.ДатаОтгрузки + заказОбъект.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности * 86400;
        ЗаказОбъект.ПоставитьНаОтгрузку = Истина;
		Если ЗначениеЗаполнено(WayOfDelivery) тогда
			заказОбъект.СпособОтгрузки = ?(WayOfDelivery =0,Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("6"),Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("10"));
		конецЕсли;
		заказОбъект.Самовывоз = WayOfDelivery =1;
		//адрес доставки
		если ЗначениеЗаполнено(AddressId) и  WayOfDelivery =0 тогда
			отбор = Новый Структура;
			отбор.Вставить("Объект",заказОбъект.Контрагент);
			отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
			отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду(СокрЛП(AddressId)));
			Запись = РегистрыСведений.КонтактнаяИнформация.Получить(Отбор);
			заказОбъект.АдресДоставки = Запись.представление+" "+Запись.Комментарий;
			заказОбъект.АдресДляТТН = Запись.представление;
			заказОбъект.ВидАдреса = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду(СокрЛП(AddressId)); 
			заказОбъект.ТранспортнаяКомпания = справочники.ТранспортныеКомпании.НайтиПоКоду(Строка(TkId)).Контрагент;
		конецЕсли;
		
		попытка
			заказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Если DayOfWeekToDeliver = Истина тогда
				Запись = Регистрысведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				Запись.Объект =  ЗаказСсылка; //+++ 06.04.2018
				Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90222");
				Запись.Значение = Истина;
				Запись.Записать(Истина);
			конецесли;
			 УдачныеЗаказы.OrderGuid.Добавить(Заказ);
			
		исключение	
		конецпопытки;
		
	конецЦикла;				
	
	
	
	
	возврат УдачныеЗаказы;
КонецФункции
