
Перем ЗаполнитьПо;
Перем ЗаголовокФормы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьОтборыИВидимости()
	ПометкаСвязи=ВосстановитьЗначение("СвязьПоВладельцу"+ЭтаФорма.РегистрСведенийСписок);
	//Если ПометкаСвязи=Неопределено Тогда ПометкаСвязи=Ложь КонецЕсли; 
	//ЭлементыФормы.ДействияФормы.Кнопки.Связь.Пометка=ПометкаСвязи;
	ОтборЗаменяемое = ЭтаФорма.РегистрСведенийСписок.Отбор["Заменяемое"].Значение;
	ОтборЗаменитель = ЭтаФорма.РегистрСведенийСписок.Отбор["Заменитель"].Значение;
	
	Если НЕ ЗначениеНеЗаполнено(ОтборЗаменяемое) 
		и ЭлементыФормы.РегистрСведенийСписок.Колонки["Заменяемое"].Видимость
		и НЕ ЗначениеНеЗаполнено(ОтборЗаменитель) Тогда
		ЭтаФорма.РегистрСведенийСписок.Отбор["Заменитель"].Использование = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеНеЗаполнено(ОтборЗаменитель) 
		и ЭлементыФормы.РегистрСведенийСписок.Колонки["Заменитель"].Видимость
		и НЕ ЗначениеНеЗаполнено(ОтборЗаменяемое) Тогда
		ЭтаФорма.РегистрСведенийСписок.Отбор["Заменяемое"].Использование = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеНеЗаполнено(ОтборЗаменяемое) Тогда
		//ЭтаФорма.РегистрСведенийСписок.Отбор["Заменитель"].Использование = Ложь;
		ЭлементыФормы.РегистрСведенийСписок.Колонки["Заменяемое"].Видимость = Ложь;
		ЭлементыФормы.РегистрСведенийСписок.Колонки["Заменитель"].Видимость = Истина;
		ЗаголовокФормы="Заменители для номенклатуры ";
		ЭтаФорма.Заголовок = ЗаголовокФормы+"'" + СокрЛП(спПолучитьНаименование(ОтборЗаменяемое)) + "'";
		РегистрСведенийСписок.Порядок.Установить("Приоритет возр");
	ИначеЕсли Не ЗначениеНеЗаполнено(ОтборЗаменитель) Тогда
		//ЭтаФорма.РегистрСведенийСписок.Отбор["Заменяемое"].Использование = Ложь;
		ЭлементыФормы.РегистрСведенийСписок.Колонки["Заменитель"].Видимость = Ложь;
		ЭлементыФормы.РегистрСведенийСписок.Колонки["Заменяемое"].Видимость = истина;
		ЗаголовокФормы="Заменяемые для номенклатуры ";
		ЭтаФорма.Заголовок = ЗаголовокФормы+"'" + СокрЛП(спПолучитьНаименование(ОтборЗаменитель)) + "'";
	Иначе
		ЗаголовокФормы="";
		ЭтаФорма.Заголовок = "Аналоги";
	КонецЕсли;
	// запомним отбор с которым открывали
КонецПроцедуры

//Организация связи по владельцу заменяемым
Процедура СвязьПоЗаменяемому(Кнопка,Пометка=Неопределено)
    Если Пометка = Неопределено Тогда
		Кнопка.Пометка=НЕ Кнопка.Пометка;
	Иначе
		Кнопка.Пометка=Пометка;
	КонецЕсли; 
	СохранитьЗначение("СвязьПоВладельцу"+ЭтаФорма.РегистрСведенийСписок,Кнопка.Пометка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// подбор товаров


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ
Процедура РегистрСведенийСписокЗаменяемоеНачалоВыбора(Элемент, СтандартнаяОбработка)
	ОтборЗаменитель = ЭтаФорма.РегистрСведенийСписок.Отбор["Заменитель"].Значение;
	Если Не ЗначениеНеЗаполнено(ОтборЗаменитель) Тогда
		//установлен отбор по заменителю
		//будем открывать список, позиционирую на значение отбора
		СтандартнаяОбработка = Ложь;
		ФормаНоменклатура = Справочники.Номенклатура.ПолучитьФормуВыбора(,Элемент);
		ФормаНоменклатура.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ОтборЗаменитель;
		ФормаНоменклатура.ОткрытьМодально();
	Иначе //тогда надо спозиционироваться на заменитель, если заменяемое не заполнено
		ТекЗаменяемое = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Заменяемое;
		Если Не ЗначениеНеЗаполнено(ТекЗаменяемое) Тогда
			СтандартнаяОбработка = Ложь;
			ФормаНоменклатура = Справочники.Номенклатура.ПолучитьФормуВыбора(,Элемент);
			ФормаНоменклатура.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ТекЗаменяемое;
			ФормаНоменклатура.ОткрытьМодально();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура РегистрСведенийСписокЗаменительНачалоВыбора(Элемент, СтандартнаяОбработка)
	ОтборЗаменяемое = ЭтаФорма.РегистрСведенийСписок.Отбор["Заменяемое"].Значение;
	Если Не ЗначениеНеЗаполнено(ОтборЗаменяемое) Тогда
		//установлен отбор по заменямому      
		//будем открывать список, позиционирую на значение отбора
		// в зависимости от типа выбранного пользователем значения : Номенклатура или Строка
		// ограничиваем выбор 
		СписокВыбораТипа=Новый СписокЗначений;
		СписокВыбораТипа.Добавить("Номенклатура",,,БиблиотекаКартинок.СправочникНоменклатура);
		СписокВыбораТипа.Добавить("Строка",,,БиблиотекаКартинок.СкопироватьВыделеннуюСтроку);
		ВыбранныйЭлемент=ВыбратьИзМеню(СписокВыбораТипа,Элемент);
		
		МассивТипов = Новый Массив();
		Если не ЗначениеНеЗаполнено(ВыбранныйЭлемент) Тогда
			Если 	ВыбранныйЭлемент.Значение="Строка" Тогда
				МассивТипов.Добавить(Тип("Строка")); 
			Иначе
				МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
			КонецЕсли;
		Иначе
			СтандартнаяОбработка=ЛОЖЬ;
			Возврат;
		КонецЕсли;
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		Элемент.ОграничениеТипа=ОписаниеТипов;
		Элемент.Значение=ОписаниеТипов.ПривестиЗначение(Элемент.Значение);
		Если ВыбранныйЭлемент.Значение="Строка" Тогда
		Иначе	 
			СтандартнаяОбработка = Ложь;
			ФормаНоменклатура = Справочники.Номенклатура.ПолучитьФормуВыбора(,Элемент);
			ФормаНоменклатура.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ОтборЗаменяемое;
			ФормаНоменклатура.ОткрытьМодально();
		КонецЕсли;
	Иначе //тогда надо спозиционироваться на заменяемое, если заменитель не заполнено
		ТекЗаменитель = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Заменитель;
		Если Не ЗначениеНеЗаполнено(ТекЗаменитель) Тогда
			СтандартнаяОбработка = Ложь;
			ФормаНоменклатура = Справочники.Номенклатура.ПолучитьФормуВыбора(,Элемент);
			ФормаНоменклатура.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ТекЗаменитель;
			ФормаНоменклатура.ОткрытьМодально();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура РегистрСведенийСписокЗаменяемоеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//ТекКоэффициент = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Коэффициент;
	////коэффициент по умолч. 1
	//Если ТекКоэффициент = 0 Тогда
	//	ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Коэффициент = 1;
	//КонецЕсли;
КонецПроцедуры

Процедура РегистрСведенийСписокЗаменительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//ТекКоэффициент = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Коэффициент;
	////коэффициент по умолч. 1
	//Если ТекКоэффициент = 0 Тогда
	//	ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Коэффициент = 1;
	//КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	УстановитьОтборыИВидимости();
КонецПроцедуры

Процедура ПриОткрытии()
	  УстановитьОтборыИВидимости();
КонецПроцедуры

//Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
//	НовоеЗаменяемое=Неопределено;
//	//При изменении текущей группы товаров обновляем список номенклатур
//	Если
//		ЭлементыФормы.ДействияФормы.Кнопки.Связь.Пометка И
//		ИмяСобытия="АктивизированЭлемент" И
//		ТипЗнч(Параметр)=Тип("СправочникСсылка.Номенклатура") Тогда
//		НовоеЗаменяемое=Параметр;
//	КонецЕсли; 
//	Если НовоеЗаменяемое<>Неопределено Тогда
//		РегистрСведенийСписок.Отбор.Заменяемое.Значение=НовоеЗаменяемое;
//		ЭтаФорма.РегистрСведенийСписок.Обновить();
//		Если НЕ ПустаяСтрока(ЗаголовокФормы) Тогда
//			//ЭтаФорма.Заголовок = ЗаголовокФормы+"'" + спПолучитьНаименование(НовоеЗаменяемое) + "'";
//		КонецЕсли; 
//	КонецЕсли; 
//КонецПроцедуры


Процедура РегистрСведенийСписокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	//Заменитель = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Заменитель;
	//Заменяемое = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Заменяемое;
	//Обратимость = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Обратимость;
	//Коэффициент = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Коэффициент;
	//
	//Если Обратимость и не (ТипЗнч(Заменитель)=Тип("Строка")) Тогда
	//	//проверим, а есть ли уже обратная замена
	//	Текст = "ВЫБРАТЬ
	//	|Аналоги.Заменяемое,
	//	|Аналоги.Заменитель,
	//	|Аналоги.Коэффициент
	//	|ИЗ РегистрСведений.Аналоги КАК Аналоги
	//	|ГДЕ Аналоги.Заменяемое = &Заменитель И Аналоги.Заменитель = &Заменяемое
	//	|";
	//	Запрос = Новый Запрос(Текст);
	//	Запрос.УстановитьПараметр("Заменяемое",Заменяемое);
	//	Запрос.УстановитьПараметр("Заменитель",Заменитель);
	//	//если таковой нет, то добавим
	//	РезультатЗапроса = Запрос.Выполнить();
	//	ОбратныйКоэффициент = 0;
	//	Если НЕ РезультатЗапроса.Пустой() Тогда
	//		Выборка = РезультатЗапроса.Выбрать();
	//		Выборка.Следующий();
	//		ОбратныйКоэффициент = Выборка.Коэффициент;
	//	КонецЕсли;
	//	Если РезультатЗапроса.Пустой() или Коэффициент<>1 или ОбратныйКоэффициент<>1 Тогда
	//		ФормаОбратимости = РегистрыСведений.Аналоги.ПолучитьФорму("ФормаОбратимости");
	//		ФормаОбратимости.Заменяемое = Заменяемое;
	//		ФормаОбратимости.Заменитель = Заменитель;
	//		ФормаОбратимости.Коэффициент = 1/Коэффициент;
	//		ФормаОбратимости.ОткрытьМодально();
	//		НоваяЗапись=РегистрыСведений.Аналоги.СоздатьМенеджерЗаписи(); 
	//		НоваяЗапись.Заменяемое=Заменитель;
	//		НоваяЗапись.Заменитель=Заменяемое;
	//		НоваяЗапись.Коэффициент=ФормаОбратимости.Коэффициент;
	//		НоваяЗапись.Обратимость = Истина;
	//		НоваяЗапись.Записать();	
	//	КонецЕсли;
	//Иначе
	//	НоваяЗапись=РегистрыСведений.Аналоги.СоздатьМенеджерЗаписи(); 
	//	НоваяЗапись.Заменяемое=Заменитель;
	//	НоваяЗапись.Заменитель=Заменяемое;
	//	НоваяЗапись.Прочитать();
	//	НоваяЗапись.Удалить();	
	//КонецЕсли;
КонецПроцедуры



Процедура РегистрСведенийСписокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	//Если Не НоваяСтрока Тогда
	//	Возврат;
	//КонецЕсли;	
	//
	//// вычислять автоматически приоритет будем только если отбор по заменяемому установлен
	//ОтборЗаменяемое = ЭтаФорма.РегистрСведенийСписок.Отбор["Заменяемое"].Значение;
	//Использование = ЭтаФорма.РегистрСведенийСписок.Отбор["Заменяемое"].Использование;
	//
	//
	//Если Не ЗначениеНеЗаполнено(ОтборЗаменяемое) и Использование Тогда
	//	// сначала выясним значение первого меньшего приоритета
	//	Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	Аналоги.Заменяемое,
	//	|	Аналоги.Приоритет КАК Приоритет
	//	|ИЗ
	//	|	РегистрСведений.Аналоги КАК Аналоги
	//	|ГДЕ
	//	|	Аналоги.Заменяемое = &Заменяемое
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Приоритет УБЫВ";
	//	Запрос = Новый Запрос(Текст);
	//	Запрос.УстановитьПараметр("Заменяемое",ОтборЗаменяемое);
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Если НЕ РезультатЗапроса.Пустой() Тогда
	//		Выборка = РезультатЗапроса.Выбрать();
	//		Выборка.Следующий();
	//		ПервыйПриоритет = Выборка.Приоритет;
	//		ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Приоритет = ПервыйПриоритет+1;
	//	КонецЕсли;	
	//КонецЕсли;
КонецПроцедуры

Процедура РегистрСведенийСписокЗаменительОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	//ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Коэффициент = 1;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ
