////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем СписокВидовДней;
Перем ТекущийВидДня;

Перем ТаблицаРегистра;
Перем ЭталоннаяТаблицаРегистра; 

Перем мДлинаСуток;

// Цвета дат календаря
Перем ЦветРабочегоДня; 	  
Перем ЦветСубботы;	          
Перем ЦветВоскресенья; 	  
Перем ЦветПредпразничногоДня; 
Перем ЦветПраздничногоДня;	  

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Готовит список значений, в который включены 5 предыдущих и 5 последующих лет
//
// Параметры
//  ТекущийГод - число, текущий год
//
Функция ПолучитьСписокЛет(ТекущийГод)

	СписокЛет = Новый СписокЗначений;
	Для ОчереднойГод = ТекущийГод - 5 По ТекущийГод + 5 Цикл
	    СписокЛет.Добавить(ОчереднойГод,Формат(ОчереднойГод,"ЧЦ=4; ЧДЦ=0; ЧГ=0"));
	КонецЦикла; 
	
    Возврат СписокЛет
	
КонецФункции // ПолучитьСписокЛет()

Функция СформироватьЗапросПоКалендарю(ДатаНачалаЗапроса, ДатаОкончанияЗапроса)
	
	ЗапросПоКалендарю = Новый Запрос();
	ЗапросПоКалендарю.УстановитьПараметр("ДатаКалендаря1", ДатаНачалаЗапроса);
	ЗапросПоКалендарю.УстановитьПараметр("ДатаКалендаря2", ДатаОкончанияЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
	|	РегламентированныйПроизводственныйКалендарь.ВидДня
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаКалендаря1 И &ДатаКалендаря2";	
	
	ЗапросПоКалендарю.Текст = ТекстЗапроса;
	Возврат ЗапросПоКалендарю.Выполнить()
	
КонецФункции     

Функция ТаблицыКалендаряИдентичны()
	
	Если ЭталоннаяТаблицаРегистра.Количество() <> ТаблицаРегистра.Количество() Тогда
		Возврат Ложь
	КонецЕсли;
	
	Для Сч = 1 По ЭталоннаяТаблицаРегистра.Количество() Цикл
		Если ЭталоннаяТаблицаРегистра[Сч-1].ВидДня <> ТаблицаРегистра[Сч-1].ВидДня Тогда
			Возврат Ложь
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Истина
	
КонецФункции

Процедура УстановитьИнтервалКалендаря(ДатаУстановки)

	ЭлементыФормы.ПроизводственныйКалендарь.НачалоПериодаОтображения = НачалоГода(ДатаУстановки);
	ЭлементыФормы.ПроизводственныйКалендарь.КонецПериодаОтображения  = КонецГода(ДатаУстановки);

КонецПроцедуры

Процедура ЗаписатьДанныеРегистра()
	
	Если НЕ ТаблицыКалендаряИдентичны() Тогда
		
		ЗаписатьИзТаблицыВРегистр(ТаблицаРегистра,ГодВФорме);
		
		ДатаУстановки = Дата(Формат(ГодВФорме,"ЧГ=0")+"0101");
		РезЗапроса = СформироватьЗапросПоКалендарю(ДатаУстановки, КонецГода(ДатаУстановки));
		
		Если РезЗапроса.Пустой() Тогда
			ТаблицаРегистра = ПервоначальноеЗаполнениеРегистра(ДатаУстановки);
			// Обновим эталонную таблицу
			ЭталоннаяТаблицаРегистра.Очистить();
		Иначе
			ТаблицаРегистра = РезЗапроса.Выгрузить();
			// Обновим эталонную таблицу
			ЭталоннаяТаблицаРегистра = ТаблицаРегистра.Скопировать();
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Ложь;

КонецПроцедуры

Процедура ПриИзмененииГодаВФорме(Год)
	
	ЗаКакойГод = Год(ТаблицаРегистра[0].ДатаКалендаря);
	
	Если НЕ ТаблицыКалендаряИдентичны() Тогда
		Ответ = Вопрос("Записать измененные данные за " + Формат(ЗаКакойГод,"ЧГ=0") + " год?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьИзТаблицыВРегистр(ТаблицаРегистра,ЗаКакойГод)
		КонецЕсли;  
		
	КонецЕсли;
	
	ДатаУстановки = Дата(Формат(Год,"ЧГ=0")+"0101");
	РезЗапроса = СформироватьЗапросПоКалендарю(ДатаУстановки, КонецГода(ДатаУстановки));
	
	Если РезЗапроса.Пустой() Тогда
		Модифицированность = Истина;
		ТаблицаРегистра = ПервоначальноеЗаполнениеРегистра(ДатаУстановки);
		// Обновим эталонную таблицу
		ЭталоннаяТаблицаРегистра.Очистить();
	Иначе
		ТаблицаРегистра = РезЗапроса.Выгрузить();
		// Обновим эталонную таблицу
		ЭталоннаяТаблицаРегистра = ТаблицаРегистра.Скопировать();
	КонецЕсли;
	
	// Отображение заполненого календаря
	ТекущийВидДня = Неопределено;
	ЭлементыФормы.ПроизводственныйКалендарь.Обновить();
	
	ПроизводственныйКалендарь = ДатаУстановки;
	УстановитьИнтервалКалендаря(ДатаУстановки);
	
	
	Заголовок = "Регламентированный производственный календарь на " + Формат(Год,"ЧГ=0") + " год";

	ЭлементыФормы.ВыборГода.СписокВыбора = ПолучитьСписокЛет(Год);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	СписокВидовДней = ПолучитьСписокЭлементовПеречисления("ВидыДнейПроизводственногоКалендаря");

	// Назначим цвета
	ЦветРабочегоДня 	   = Новый Цвет(  0,  0,   0); // Черный
	ЦветСубботы	           = Новый Цвет(153, 51,   0); // Темно-красный
	ЦветВоскресенья 	   = Новый Цвет(255,  0,   0); // Красный
	ЦветПредпразничногоДня = Новый Цвет(  0,  0, 186); // Темно-синий
	ЦветПраздничногоДня	   = Новый Цвет(255,  0, 255); // Фиолетовый
	
	ЭлементыФормы.ВыборГода.СписокВыбора = ПолучитьСписокЛет(Год(РабочаяДата));
	
	ГодВФорме = Год(РабочаяДата);
	
	УстановитьИнтервалКалендаря(РабочаяДата);
	
	РезЗапроса = СформироватьЗапросПоКалендарю(НачалоГода(РабочаяДата), КонецГода(РабочаяДата));
	
	Если РезЗапроса.Пустой() Тогда
		Модифицированность = Истина;
		ТаблицаРегистра = ПервоначальноеЗаполнениеРегистра(РабочаяДата);
	Иначе
		ТаблицаРегистра = РезЗапроса.Выгрузить();
		ЭталоннаяТаблицаРегистра = ТаблицаРегистра.Скопировать();
		Модифицированность = Ложь;
	КонецЕсли;
	
	// Отображение заполненого календаря
	ЭлементыФормы.ПроизводственныйКалендарь.Обновить();
	МодифицированностьЗаполнения = Модифицированность;
	ЭлементыФормы.ПроизводственныйКалендарь.ТекущаяДата = НачалоГода(РабочаяДата);
	Модифицированность = МодифицированностьЗаполнения;
	Заголовок = "Регламентированный производственный календарь на " + Формат(ГодВФорме,"ЧГ=0") + " год";
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ТаблицыКалендаряИдентичны() Тогда
		ЗаКакойГод = Год(ТаблицаРегистра[0].ДатаКалендаря);

		Ответ = Вопрос("Записать измененные данные за " + Формат(ЗаКакойГод,"ЧГ=0") + " год?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьИзТаблицыВРегистр(ТаблицаРегистра,ЗаКакойГод);
			Модифицированность = Ложь;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработцик события нажатия кнопки "Первоначальное заполнение"
Процедура ДействияФормыПервоначальноеЗаполнение(Кнопка)
	
	Ответ = Вопрос("Восстановить первоначальное заполнение производственного календаря?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ТаблицаРегистра = ПервоначальноеЗаполнениеРегистра(Дата(Формат(ГодВФорме,"ЧГ=0")+"0101"));
		
		// Отображение заполненого календаря
		ТекущийВидДня = Неопределено;
		ЭлементыФормы.ПроизводственныйКалендарь.Обновить();
		Если НЕ ТаблицыКалендаряИдентичны() Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработцик события нажатия кнопки "Печать"
Процедура ДействияФормыПечать(Кнопка)
	
	Если Модифицированность тогда
		Ответ = Вопрос("Перед печать календаря необходимо записать внесенные изменения. Записать?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да тогда
			
			ЗаписатьДанныеРегистра();
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеИменМесяцев = Новый Соответствие;
	СоответствиеИменМесяцев.Вставить(1, "Январь");
	СоответствиеИменМесяцев.Вставить(2, "Февраль");
	СоответствиеИменМесяцев.Вставить(3, "Март");
	СоответствиеИменМесяцев.Вставить(4, "Апрель");
	СоответствиеИменМесяцев.Вставить(5, "Май");
	СоответствиеИменМесяцев.Вставить(6, "Июнь");
	СоответствиеИменМесяцев.Вставить(7, "Июль");
	СоответствиеИменМесяцев.Вставить(8, "Август");
	СоответствиеИменМесяцев.Вставить(9, "Сентябрь");
	СоответствиеИменМесяцев.Вставить(10, "Октябрь");
	СоответствиеИменМесяцев.Вставить(11, "Ноябрь");
	СоответствиеИменМесяцев.Вставить(12, "Декабрь");

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ГодКалендаря,
	|	КВАРТАЛ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КварталКалендаря,
	|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК МесяцКалендаря,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КалендарныеДни,
	|	РегламентированныйПроизводственныйКалендарь.ВидДня КАК ВидДня
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.Год = &Год
	|
	|СГРУППИРОВАТЬ ПО
	|	ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря),
	|	КВАРТАЛ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря),
	|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря),
	|	РегламентированныйПроизводственныйКалендарь.ВидДня
	|УПОРЯДОЧИТЬ ПО
	|	ГодКалендаря,
	|	КварталКалендаря,
	|	МесяцКалендаря
	|ИТОГИ ПО
	|	ГодКалендаря,
	|	КварталКалендаря,
	|	МесяцКалендаря";
	
	МакетПечати = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.ПолучитьМакет("ПроизводственныйКалендарь");
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПроизводственныйКалендарь_";
	ЗаголовокПечати =  МакетПечати.ПолучитьОбласть("Заголовок");
	ЗаголовокПечати.Параметры.Год = Формат(ГодВФорме, "ЧЦ=4; ЧГ=0");
	ПечатнаяФорма.Вывести(ЗаголовокПечати);
	
	// начальные значения, независимо от результата выполнения запроса
	РабочееВремя40Год = 0;
	РабочееВремя36Год = 0;
	РабочееВремя24Год = 0;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Год", ГодВФорме);
	Результат = Запрос.Выполнить();
	ВыборкаПоГоду = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоГоду.Следующий() Цикл
		ВыборкаПоКварталу = ВыборкаПоГоду.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКварталу.Следующий() Цикл
			НомерКвартала =  МакетПечати.ПолучитьОбласть("Квартал");
			НомерКвартала.Параметры.НомерКвартала = "" + ВыборкаПоКварталу.КварталКалендаря + " квартал";
			ПечатнаяФорма.Вывести(НомерКвартала);
			ШапкаКвартала = МакетПечати.ПолучитьОбласть("ШапкаКвартала");
			ПечатнаяФорма.Вывести(ШапкаКвартала);
			
			КалендарныеДниКв = 0;
			РабочееВремя40Кв = 0;
			РабочееВремя36Кв = 0;
			РабочееВремя24Кв = 0;
			РабочиеДниКв	 = 0;
			ВыходныеДниКв	 = 0;
			
			Если ВыборкаПоКварталу.КварталКалендаря = 1 или ВыборкаПоКварталу.КварталКалендаря = 3 тогда
				КалендарныеДниПолугодие1 = 0;
				РабочееВремя40Полугодие1 = 0;
				РабочееВремя36Полугодие1 = 0;
				РабочееВремя24Полугодие1 = 0;
				РабочиеДниПолугодие1	 = 0;
				ВыходныеДниПолугодие1	 = 0;
			КонецЕсли;
			
			Если ВыборкаПоКварталу.КварталКалендаря = 1 тогда
				КалендарныеДниГод = 0;
				РабочееВремя40Год = 0;
				РабочееВремя36Год = 0;
				РабочееВремя24Год = 0;
				РабочиеДниГод	 = 0;
				ВыходныеДниГод	 = 0;
			КонецЕсли;
			
			ВыборкаПоМесяцу = ВыборкаПоКварталу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоМесяцу.Следующий() Цикл
				ВыходныеДни 	= 0;
				РабочееВремя40 	= 0;
				РабочееВремя36 	= 0;
				РабочееВремя24 	= 0;
				КалендарныеДни 	= 0;
				РабочиеДни 		= 0;
				ВыборкаПоВидуДня = ВыборкаПоМесяцу.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока ВыборкаПоВидуДня.Следующий() Цикл
					Если ВыборкаПоВидуДня.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота или 
						 ВыборкаПоВидуДня.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье или
						 ВыборкаПоВидуДня.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник тогда
						 ВыходныеДни = ВыходныеДни + ВыборкаПоВидуДня.КалендарныеДни
					 ИначеЕсли ВыборкаПоВидуДня.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий тогда
						 РабочееВремя40 = РабочееВремя40 + ВыборкаПоВидуДня.КалендарныеДни * 8;
						 РабочееВремя36 = РабочееВремя36 + ВыборкаПоВидуДня.КалендарныеДни*36/5;
						 РабочееВремя24 = РабочееВремя24 + ВыборкаПоВидуДня.КалендарныеДни*24/5;
						 РабочиеДни 	= РабочиеДни + ВыборкаПоВидуДня.КалендарныеДни;
					 ИначеЕсли ВыборкаПоВидуДня.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный тогда
						 РабочееВремя40 = РабочееВремя40 + ВыборкаПоВидуДня.КалендарныеДни * 7;
						 РабочееВремя36 = РабочееВремя36 + ВыборкаПоВидуДня.КалендарныеДни*36/5 - 1;
						 РабочееВремя24 = РабочееВремя24 + ВыборкаПоВидуДня.КалендарныеДни*24/5 - 1;
						 РабочиеДни 	= РабочиеДни + ВыборкаПоВидуДня.КалендарныеДни;
					 КонецЕсли;
					 КалендарныеДни = КалендарныеДни + ВыборкаПоВидуДня.КалендарныеДни;
				КонецЦикла; // вид дня
				КалендарныеДниКв = КалендарныеДниКв + КалендарныеДни;
				РабочееВремя40Кв = РабочееВремя40Кв + РабочееВремя40;
				РабочееВремя36Кв = РабочееВремя36Кв + РабочееВремя36;
				РабочееВремя24Кв = РабочееВремя24Кв + РабочееВремя24;
				РабочиеДниКв	 = РабочиеДниКв 	+ РабочиеДни;
				ВыходныеДниКв	 = ВыходныеДниКв	+ ВыходныеДни;
				
				КалендарныеДниПолугодие1 = КалендарныеДниПолугодие1 + КалендарныеДни;
				РабочееВремя40Полугодие1 = РабочееВремя40Полугодие1 + РабочееВремя40;
				РабочееВремя36Полугодие1 = РабочееВремя36Полугодие1 + РабочееВремя36;
				РабочееВремя24Полугодие1 = РабочееВремя24Полугодие1 + РабочееВремя24;
				РабочиеДниПолугодие1	 = РабочиеДниПолугодие1 	+ РабочиеДни;
				ВыходныеДниПолугодие1	 = ВыходныеДниПолугодие1	+ ВыходныеДни;
				
				КалендарныеДниГод = КалендарныеДниГод + КалендарныеДни;
				РабочееВремя40Год = РабочееВремя40Год + РабочееВремя40;
				РабочееВремя36Год = РабочееВремя36Год + РабочееВремя36;
				РабочееВремя24Год = РабочееВремя24Год + РабочееВремя24;
				РабочиеДниГод	 = РабочиеДниГод 	+ РабочиеДни;
				ВыходныеДниГод	 = ВыходныеДниГод	+ ВыходныеДни;
				
				КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
				КолонкаМесяца.Параметры.ВыходныеДни = ВыходныеДни;
				КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40;
				КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36;
				КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24;
				КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДни;
				КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДни;
				КолонкаМесяца.Параметры.ИмяМесяца 		= СоответствиеИменМесяцев[ВыборкаПоМесяцу.МесяцКалендаря];
				ПечатнаяФорма.Присоединить(КолонкаМесяца);
			КонецЦикла; // месяц
			КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
			КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниКв;
			КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Кв;
			КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Кв;
			КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Кв;
			КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниКв;
			КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниКв;
			КолонкаМесяца.Параметры.ИмяМесяца 		= "" + ВыборкаПоКварталу.КварталКалендаря + " квартал";
			ПечатнаяФорма.Присоединить(КолонкаМесяца);
			
			Если ВыборкаПоКварталу.КварталКалендаря = 2 или ВыборкаПоКварталу.КварталКалендаря = 4 тогда
				КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
				КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниПолугодие1;
				КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Полугодие1;
				КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Полугодие1;
				КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Полугодие1;
				КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниПолугодие1;
				КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниПолугодие1;
				КолонкаМесяца.Параметры.ИмяМесяца 		= "" + ВыборкаПоКварталу.КварталКалендаря/2 + " полугодие";
				ПечатнаяФорма.Присоединить(КолонкаМесяца);
			КонецЕсли;
			
		КонецЦикла;  // квартал
		КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
		КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниГод;
		КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Год;
		КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Год;
		КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Год;
		КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниГод;
		КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниГод;
		КолонкаМесяца.Параметры.ИмяМесяца 		= "" + Формат(ВыборкаПоГоду.ГодКалендаря, "ЧЦ=4; ЧГ=0") + " год";
		ПечатнаяФорма.Присоединить(КолонкаМесяца);
		
	КонецЦикла; // год
	
	КолонкаМесяца = МакетПечати.ПолучитьОбласть("Среднемесячный");
	КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Год;
	КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Год;
	КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Год;
	КолонкаМесяца.Параметры.ИмяМесяца 		= "" + Формат(ГодВФорме, "ЧЦ=4; ЧГ=0") + " год";
	ПечатнаяФорма.Вывести(КолонкаМесяца);
	
	КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяцаСр");
	КолонкаМесяца.Параметры.РабочееВремя40 	= Формат(РабочееВремя40Год / 12, "ЧДЦ=2; ЧГ=0");
	КолонкаМесяца.Параметры.РабочееВремя36 	= Формат(РабочееВремя36Год / 12, "ЧДЦ=2; ЧГ=0");
	КолонкаМесяца.Параметры.РабочееВремя24 	= Формат(РабочееВремя24Год / 12, "ЧДЦ=2; ЧГ=0");
	КолонкаМесяца.Параметры.ИмяМесяца 		= "среднемесячное количество";
	ПечатнаяФорма.Присоединить(КолонкаМесяца);
	
	//УниверсальныеМеханизмы.НапечататьДокумент(ПечатнаяФорма, 1, Ложь, "Производственный календарь");
	
КонецПроцедуры

// Обработцик события нажатия кнопки "Записать"
Процедура ДействияФормыЗаписать(Кнопка)
	
	ЗаписатьДанныеРегистра()
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ВыборГодаПриИзменении(Элемент)
	ПриИзмененииГодаВФорме(Элемент.Значение);
КонецПроцедуры

Процедура ВыборГодаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Элемент.СписокВыбора;
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ПриИзмененииГодаВФорме(ЭлементСписка.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ПроизводственныйКалендарьВыбор(Элемент, ВыбраннаяДата)
	
	ТекущийВидДня = ВыбратьИзМеню(СписокВидовДней, ЭлементыФормы.ПроизводственныйКалендарь);
	
	ЭлементыФормы.ПроизводственныйКалендарь.Обновить();
	
КонецПроцедуры

Процедура ПроизводственныйКалендарьПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Если  ТекущийВидДня <> Неопределено Тогда  // Оформление календаря и запись в таблицу значений
		
		Коллекция_ОформленияДаты = ОформлениеПериода.Даты;
		
		Для каждого Строка_ОформленияДаты Из Коллекция_ОформленияДаты Цикл
			
			СтрокаТаблицыРегистра = ТаблицаРегистра.Найти(Строка_ОформленияДаты.Дата,);
			
			Если СтрокаТаблицыРегистра <> Неопределено Тогда
				
				Если Строка_ОформленияДаты.Дата = Элемент.ТекущаяДата Тогда
					ЗначениеСравнения = ТекущийВидДня.Значение
				Иначе
					ЗначениеСравнения = СтрокаТаблицыРегистра.ВидДня
				КонецЕсли; 
				
				Если ЗначениеСравнения = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
					
					СтрокаТаблицыРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
					Строка_ОформленияДаты.ЦветТекста = ЦветРабочегоДня;
					
				ИначеЕсли ЗначениеСравнения = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда	 
					
					СтрокаТаблицыРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный;
					Строка_ОформленияДаты.ЦветТекста = ЦветПредпразничногоДня;
					
				ИначеЕсли ЗначениеСравнения = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
					
					СтрокаТаблицыРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник;
					Строка_ОформленияДаты.ЦветТекста = ЦветПраздничногоДня;
					
				ИначеЕсли ЗначениеСравнения = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда	
					
					СтрокаТаблицыРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
					Строка_ОформленияДаты.ЦветТекста = ЦветСубботы;
					
				ИначеЕсли ЗначениеСравнения = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда	 
					
					СтрокаТаблицыРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье;
					Строка_ОформленияДаты.ЦветТекста = ЦветВоскресенья;
					
				КонецЕсли;	 
				
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе  // Только оформление календаря
		
		Коллекция_ОформленияДаты = ОформлениеПериода.Даты;
		
		Для каждого Строка_ОформленияДаты Из Коллекция_ОформленияДаты Цикл
			
			СтрокаТаблицыРегистра = ТаблицаРегистра.Найти(Строка_ОформленияДаты.Дата,);
			
			Если СтрокаТаблицыРегистра <> Неопределено Тогда
				
				ЗначениеСравнения = СтрокаТаблицыРегистра.ВидДня;
				
				Если ЗначениеСравнения = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
					Строка_ОформленияДаты.ЦветТекста = ЦветРабочегоДня;
				ИначеЕсли ЗначениеСравнения = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда	 
					Строка_ОформленияДаты.ЦветТекста = ЦветПредпразничногоДня;
				ИначеЕсли ЗначениеСравнения = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
					Строка_ОформленияДаты.ЦветТекста = ЦветПраздничногоДня;
				ИначеЕсли ЗначениеСравнения = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда	
					Строка_ОформленияДаты.ЦветТекста = ЦветСубботы;
				ИначеЕсли ЗначениеСравнения = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда	 
					Строка_ОформленияДаты.ЦветТекста = ЦветВоскресенья;
				КонецЕсли;	 
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ МОДУЛЯ

ЭталоннаяТаблицаРегистра = Новый ТаблицаЗначений();
ЭталоннаяТаблицаРегистра.Колонки.Добавить("ДатаКалендаря");
ЭталоннаяТаблицаРегистра.Колонки.Добавить("ВидДня");
