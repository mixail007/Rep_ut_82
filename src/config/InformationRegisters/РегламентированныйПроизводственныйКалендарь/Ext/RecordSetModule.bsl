
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет ресурсы "Пятидневка", "Шестидневка" и "КалендарныеДни"
Процедура ЗаполнитьРесурсыЗаписиРегистра(ЗаписьРегистра) Экспорт
	
	// рабочий день
	Если ЗаписьРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий ИЛИ
		ЗаписьРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
		
		ЗаписьРегистра.Пятидневка  = 1;
		ЗаписьРегистра.Шестидневка = 1;
		ЗаписьРегистра.КалендарныеДни = 1;
		
		// суббота	
	ИначеЕсли ЗаписьРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
		ЗаписьРегистра.Пятидневка  = 0;
		ЗаписьРегистра.Шестидневка = 1;
		ЗаписьРегистра.КалендарныеДни = 1;
		
		// воскресение
	ИначеЕсли ЗаписьРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
		ЗаписьРегистра.Пятидневка  = 0;
		ЗаписьРегистра.Шестидневка = 0;
		ЗаписьРегистра.КалендарныеДни = 1;
		
		// празничный день	
	Иначе  
		ЗаписьРегистра.Пятидневка  = 0;
		ЗаписьРегистра.Шестидневка = 0;
		ЗаписьРегистра.КалендарныеДни = 0;
		
	КонецЕсли;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

Функция ПервоначальноеЗаполнениеРегистра(КонтрольнаяДата,Сообщать = Истина) Экспорт
	
	ТаблицаРегистра = Новый ТаблицаЗначений();
	ТаблицаРегистра.Колонки.Добавить("ДатаКалендаря");
	ТаблицаРегистра.Колонки.Добавить("ВидДня");
	ТаблицаРегистра.Индексы.Добавить("ДатаКалендаря");

	мДлинаСуток = 86400;
	
	// Заполнение регистра за год
	ПервоеЯнваря = НачалоГода(КонтрольнаяДата);
	СписокПраздниковВВыходные = Новый СписокЗначений;
	
	СписокПраздников = ПолучитьСписокПраздниковРФ(Год(КонтрольнаяДата));
	
	Для НомерДня = 1 По ДеньГода(КонецГода(КонтрольнаяДата)) Цикл
		
		ЗаписываемаяДата 	= НачалоДня(ПервоеЯнваря + мДлинаСуток * (НомерДня - 1));
		ПраздничныйДень = СписокПраздников.НайтиПоЗначению("" + Формат(ЗаписываемаяДата, "ДФ = 'ММ'") + Формат(ЗаписываемаяДата, "ДФ = 'дд'"));
		
		НоваяЗаписьРегистраВидДня =Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий; 
		
		Если ПраздничныйДень <> Неопределено Тогда
			
			НоваяЗаписьРегистраВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник;
			
			Если ДеньНедели(ЗаписываемаяДата) > 5 Тогда
				
				СписокПраздниковВВыходные.Добавить(ЗаписываемаяДата, ПраздничныйДень);
				
			КонецЕсли;
			
			// Предпразничные дни
			Если НомерДня > 1 Тогда
				
				СтрокаТаблицы = ТаблицаРегистра.Найти(ЗаписываемаяДата - мДлинаСуток,"ДатаКалендаря");
				Если СтрокаТаблицы.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
					СтрокаТаблицы.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный;
				КонецЕсли; 
				
			КонецЕсли;
			
		Иначе
			
			Если ДеньНедели(ЗаписываемаяДата) = 6 Тогда
				НоваяЗаписьРегистраВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота
			ИначеЕсли ДеньНедели(ЗаписываемаяДата) = 7 Тогда
				НоваяЗаписьРегистраВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье
			Иначе
				НоваяЗаписьРегистраВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий
			КонецЕсли; 
			
		КонецЕсли; 
		
		// Запишем в таблицу значений
		НоваяСтрокаТаблицыРегистра = ТаблицаРегистра.Добавить();
		НоваяСтрокаТаблицыРегистра.ДатаКалендаря = ЗаписываемаяДата;
		НоваяСтрокаТаблицыРегистра.ВидДня        = НоваяЗаписьРегистраВидДня;
		
	КонецЦикла; 
	
	// 31 декабря предпраздничный день в таблице
	Если НоваяСтрокаТаблицыРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
		НоваяСтрокаТаблицыРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный;
	КонецЕсли;
	ПеренестиВыходныеДни(Год(КонтрольнаяДата), ТаблицаРегистра);
	Если Сообщать и СписокПраздниковВВыходные.Количество() > 0 Тогда
		
		ЗаКакойГод = Год(КонтрольнаяДата);
		
		Сообщить("При заполнении календаря на " + Формат(ЗаКакойГод,"ЧЦ=4; ЧГ=0") + " год обнаружены государственные праздники, попадающие на выходные дни:"); 
		
		Для Сч = 1 По СписокПраздниковВВыходные.Количество() Цикл
			Сообщить("   " + Формат(СписокПраздниковВВыходные[Сч - 1].Значение, "ДФ ='дд ММММ'") + " - " + СписокПраздниковВВыходные[Сч - 1])
		КонецЦикла; 
		
		Сообщить("Необходимо перенести эти выходные дни на следующий после праздничного рабочий день.", СтатусСообщения.Внимание)
		
	КонецЕсли; 
	
	Возврат ТаблицаРегистра
	
КонецФункции

// Выполняет запись в регистр сведений "РегламентированныйПроизводственныйКалендарь" данных из временной таблицы 
Процедура ЗаписатьИзТаблицыВРегистр(ТаблицаРегистра,ГодЗаписи) Экспорт

	// Очистим старые данные за год
	НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Год.Значение		 = ГодЗаписи;
	НаборЗаписей.Отбор.Год.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	ЕстьЗаписиВРегистре = НаборЗаписей.Количество() > 0;
	
	// Запишем новые данные за год
	Если ЕстьЗаписиВРегистре Тогда
		Для каждого Запись Из НаборЗаписей Цикл
			СтрокаТаблицы = ТаблицаРегистра.Найти(Запись.ДатаКалендаря,"ДатаКалендаря");
			Запись.ВидДня = СтрокаТаблицы.ВидДня;
			// Установим ресурсы "Пятидневка", "Шестидневка" и "КалендарныеДни"
			ЗаполнитьРесурсыЗаписиРегистра(Запись);
		КонецЦикла; 
	Иначе
		Для Каждого СтрокаТаблицы ИЗ ТаблицаРегистра Цикл
			НоваяЗаписьРегистра = НаборЗаписей.Добавить();
			НоваяЗаписьРегистра.ДатаКалендаря = СтрокаТаблицы.ДатаКалендаря;
			НоваяЗаписьРегистра.Год			  = Год(СтрокаТаблицы.ДатаКалендаря);
			НоваяЗаписьРегистра.ВидДня		  = СтрокаТаблицы.ВидДня;
			// Установим ресурсы "Пятидневка", "Шестидневка" и "КалендарныеДни"
			ЗаполнитьРесурсыЗаписиРегистра(НоваяЗаписьРегистра);
		КонецЦикла; 
	КонецЕсли;
	
	// запишем набор записей
	НаборЗаписей.Записать();
	
	// Синхронизируем внесенные изменения с регистром "ГрафикиРаботыПоВидамВремени"
	НачалоГода = Дата(Формат(ГодЗаписи,"ЧГ=0")+"0101");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода);
	Запрос.УстановитьПараметр("КонецГода", КонецГода(НачалоГода));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц,
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
	|	РегламентированныйПроизводственныйКалендарь.Пятидневка,
	|	РегламентированныйПроизводственныйКалендарь.Шестидневка,
	|	РегламентированныйПроизводственныйКалендарь.КалендарныеДни
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ПО ГрафикиРаботыПоВидамВремени.Дата = РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.Месяц МЕЖДУ &НачалоГода И &КонецГода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрафикРаботы,
	|	Месяц,
	|	Дата";
	
	//НаборЗаписейЗаДеньПоВремени	= РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	//НаборЗаписейЗаДеньПоВремени.Отбор.Месяц.Использование = Истина;
	//НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Использование = Истина;
	//СтруктураОтбора = Новый Структура("Дата");
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.СледующийПоЗначениюПоля("ГрафикРаботы") Цикл
	//	НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Значение = Выборка.ГрафикРаботы;
	//	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
	//		НаборЗаписейЗаДеньПоВремени.Отбор.Месяц.Значение = Выборка.Месяц;
	//		НаборЗаписейЗаДеньПоВремени.Прочитать();
	//		ВременнаяТЗ = НаборЗаписейЗаДеньПоВремени.Выгрузить();
	//		Пока Выборка.Следующий() Цикл
	//			СтруктураОтбора.Дата = Выборка.Дата;
	//			СтрокиНабораЗаписей = ВременнаяТЗ.НайтиСтроки(СтруктураОтбора);
	//			Для каждого СтрокаНабора Из СтрокиНабораЗаписей Цикл
	//				Если СтрокаНабора.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням 
	//					Или СтрокаНабора.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
	//					СтрокаНабора.ПроизводственныйКалендарьПятидневка	 = Выборка.Пятидневка;
	//					СтрокаНабора.ПроизводственныйКалендарьШестидневка	 = Выборка.Шестидневка;
	//					СтрокаНабора.ПроизводственныйКалендарьКалендарныеДни = Выборка.КалендарныеДни;
	//				 КонецЕсли;
	//			КонецЦикла; 
	//		КонецЦикла;
	//		НаборЗаписейЗаДеньПоВремени.Загрузить(ВременнаяТЗ);
	//		НаборЗаписейЗаДеньПоВремени.Записать();
	//	КонецЦикла;
	//КонецЦикла;
			
КонецПроцедуры

Функция ПолучитьСписокПраздниковРФ(КалендарныйГод) Экспорт

	СписокПраздников = Новый СписокЗначений();
	Если КалендарныйГод < 2005 Тогда
		СписокПраздников.Добавить("0101", "Новый Год");
		СписокПраздников.Добавить("0102", "Новый Год");
		СписокПраздников.Добавить("0107", "Рождество Христово");
		СписокПраздников.Добавить("0223", "День защитника Отечества");
		СписокПраздников.Добавить("0308", "Международный женский день");
		СписокПраздников.Добавить("0501", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0502", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0509", "День Победы");
		СписокПраздников.Добавить("0612", "День России");
		СписокПраздников.Добавить("1107", "День согласия и примирения");
		СписокПраздников.Добавить("1212", "День Конституции РФ");
	Иначе  // Федеральный закон №201-ФЗ от 29 декабря 2004 года
		СписокПраздников.Добавить("0101", "Новогодние каникулы");
		СписокПраздников.Добавить("0102", "Новогодние каникулы");
		СписокПраздников.Добавить("0103", "Новогодние каникулы");
		СписокПраздников.Добавить("0104", "Новогодние каникулы");
		СписокПраздников.Добавить("0105", "Новогодние каникулы");
		СписокПраздников.Добавить("0107", "Рождество Христово");
		СписокПраздников.Добавить("0223", "День защитника Отечества");
		СписокПраздников.Добавить("0308", "Международный женский день");
		СписокПраздников.Добавить("0501", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0509", "День Победы");
		СписокПраздников.Добавить("0612", "День России");
		СписокПраздников.Добавить("1104", "День народного единства");
	КонецЕсли;

	Возврат СписокПраздников

КонецФункции // ПолучитьСписокПраздниковРФ()

Процедура ПеренестиВыходныеДни(Год, КалендарьТаблицаЗначений = Неопределено) Экспорт
	
	ТаблицаПеремещаемыхВидовДня = Новый ТаблицаЗначений();
	ТаблицаПеремещаемыхВидовДня.Колонки.Добавить("ЗаменяемаяДата", Новый ОписаниеТипов("Дата"));
	ТаблицаПеремещаемыхВидовДня.Колонки.Добавить("ДатаЧемЗаменяем", Новый ОписаниеТипов("Дата"));
	ТаблицаПеремещаемыхВидовДня.Колонки.Добавить("ЗаменяемаяДатаВидДня", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДнейПроизводственногоКалендаря"));
	ТаблицаПеремещаемыхВидовДня.Колонки.Добавить("ДатаЧемЗаменяемВидДня", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДнейПроизводственногоКалендаря"));
	
	Если Год = 2012 Тогда
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Обновление изменений в календаре                                                                                                          //
		// Постановление от 15 марта 2012 г. №201 "О внесении изменения в постановление Правительства Российской Федерации от 20 июля 2011 г. № 581" //
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		СтрокаДаты = ТаблицаПеремещаемыхВидовДня.Добавить();
		СтрокаДаты.ЗаменяемаяДата = '20120507';
		СтрокаДаты.ДатаЧемЗаменяем = '20120505';
		СтрокаДаты.ЗаменяемаяДатаВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
		СтрокаДаты.ДатаЧемЗаменяемВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
		
		СтрокаДаты = ТаблицаПеремещаемыхВидовДня.Добавить();
		СтрокаДаты.ЗаменяемаяДата = '20120508';
		СтрокаДаты.ДатаЧемЗаменяем = '20120512';
		СтрокаДаты.ЗаменяемаяДатаВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный;
		СтрокаДаты.ДатаЧемЗаменяемВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
	КонецЕсли;
	
	Если ТаблицаПеремещаемыхВидовДня.Количество() = 0.00 Тогда
		возврат;
	Иначе
		Если КалендарьТаблицаЗначений = Неопределено Тогда
			////////////////////////////////////////////////////////////////////////////////
			// Обновление регистра сведений Регламентированный производственный календарь //
			// Для даты ЗаменяемаяДата вид дня заменяется на ДатаЧемЗаменяемВидДня        //
			// Для даты ДатаЧемЗаменяем вид дня заменяется на ЗаменяемаяДатаВидДня        //
			////////////////////////////////////////////////////////////////////////////////
			Запрос = Новый Запрос();
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ТаблицаПеремещаемыхВидовДня.ЗаменяемаяДата        КАК ЗаменяемаяДата,
			|	ТаблицаПеремещаемыхВидовДня.ДатаЧемЗаменяем       КАК ДатаЧемЗаменяем,
			|	ТаблицаПеремещаемыхВидовДня.ЗаменяемаяДатаВидДня  КАК ЗаменяемаяДатаВидДня,
			|	ТаблицаПеремещаемыхВидовДня.ДатаЧемЗаменяемВидДня КАК ДатаЧемЗаменяемВидДня
			|ПОМЕСТИТЬ ТаблицаПеремещаемыхВидовДня
			|ИЗ
			|	&ТаблицаПеремещаемыхВидовДня КАК ТаблицаПеремещаемыхВидовДня
			|ИНДЕКСИРОВАТЬ ПО
			|	ЗаменяемаяДата,
			|	ДатаЧемЗаменяем
			|;
			|ВЫБРАТЬ
			|	ТаблицаПеремещаемыхВидовДня.ЗаменяемаяДата  КАК ЗаменяемаяДата,
			|	ТаблицаПеремещаемыхВидовДня.ДатаЧемЗаменяем КАК ДатаЧемЗаменяем,
			|	КалендарьЗаменяемаяДата.ВидДня              КАК ВидДняЗаменяемаяДата,
			|	КалендарьДатаЧемЗаменяем.ВидДня             КАК ВидДняДатаЧемЗаменяем
			|ИЗ
			|	ТаблицаПеремещаемыхВидовДня КАК ТаблицаПеремещаемыхВидовДня
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК КалендарьЗаменяемаяДата
			|ПО
			|	ТаблицаПеремещаемыхВидовДня.ЗаменяемаяДата = КалендарьЗаменяемаяДата.ДатаКалендаря
			|	И КалендарьЗаменяемаяДата.Год = &Год
			|	И ТаблицаПеремещаемыхВидовДня.ЗаменяемаяДатаВидДня = КалендарьЗаменяемаяДата.ВидДня
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК КалендарьДатаЧемЗаменяем
			|ПО
			|	ТаблицаПеремещаемыхВидовДня.ДатаЧемЗаменяем = КалендарьДатаЧемЗаменяем.ДатаКалендаря
			|	И КалендарьДатаЧемЗаменяем.Год = &Год
			|	И ТаблицаПеремещаемыхВидовДня.ДатаЧемЗаменяемВидДня = КалендарьДатаЧемЗаменяем.ВидДня
			|ГДЕ
			|	НЕ КалендарьЗаменяемаяДата.ДатаКалендаря ЕСТЬ NULL
			|	И НЕ КалендарьДатаЧемЗаменяем.ДатаКалендаря ЕСТЬ NULL
			|";
			Запрос.УстановитьПараметр("ТаблицаПеремещаемыхВидовДня", ТаблицаПеремещаемыхВидовДня);
			Запрос.УстановитьПараметр("Год", Год);
			РезультатЗапросаВидыДней = Запрос.Выполнить();
			Если НЕ РезультатЗапросаВидыДней.Пустой() Тогда
				ВыборкаЗаменяемыхВидовДня = РезультатЗапросаВидыДней.Выбрать();
				НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Год.Установить(Год);
				Пока ВыборкаЗаменяемыхВидовДня.Следующий() Цикл
					НаборЗаписей.Отбор.ДатаКалендаря.Установить(ВыборкаЗаменяемыхВидовДня.ЗаменяемаяДата);
					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаписьНабора.Год = Год;
					ЗаписьНабора.ДатаКалендаря = ВыборкаЗаменяемыхВидовДня.ЗаменяемаяДата;
					ЗаписьНабора.ВидДня = ВыборкаЗаменяемыхВидовДня.ВидДняДатаЧемЗаменяем;
					НаборЗаписей.ЗаполнитьРесурсыЗаписиРегистра(ЗаписьНабора);
					НаборЗаписей.Записать();
					НаборЗаписей.Очистить();
					
					НаборЗаписей.Отбор.ДатаКалендаря.Установить(ВыборкаЗаменяемыхВидовДня.ДатаЧемЗаменяем);
					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаписьНабора.Год = Год;
					ЗаписьНабора.ДатаКалендаря = ВыборкаЗаменяемыхВидовДня.ДатаЧемЗаменяем;
					ЗаписьНабора.ВидДня = ВыборкаЗаменяемыхВидовДня.ВидДняЗаменяемаяДата;
					НаборЗаписей.ЗаполнитьРесурсыЗаписиРегистра(ЗаписьНабора);
					НаборЗаписей.Записать();
					НаборЗаписей.Очистить();
				КонецЦикла;
			КонецЕсли;
		Иначе
			/////////////////////////////////////////////////////////////////////////
			// Заполнение из формы регламентированного производственного календаря //
			/////////////////////////////////////////////////////////////////////////
			Для каждого СтрокаЗаменяемыеДаты Из ТаблицаПеремещаемыхВидовДня Цикл
				СтрокаТаблицыЗаменяемаяДата = КалендарьТаблицаЗначений.Найти(СтрокаЗаменяемыеДаты.ЗаменяемаяДата, "ДатаКалендаря");
				СтрокаТаблицыДатаЧемЗаменяем = КалендарьТаблицаЗначений.Найти(СтрокаЗаменяемыеДаты.ДатаЧемЗаменяем, "ДатаКалендаря");
				Если СтрокаТаблицыЗаменяемаяДата = Неопределено ИЛИ СтрокаТаблицыДатаЧемЗаменяем = Неопределено Тогда
					продолжить;
				Иначе
					ЗаменяемаяДатаВидДня = СтрокаТаблицыЗаменяемаяДата.ВидДня;
					ДатаЧемЗаменяемВидДня = СтрокаТаблицыДатаЧемЗаменяем.ВидДня;
					СтрокаТаблицыЗаменяемаяДата.ВидДня = ДатаЧемЗаменяемВидДня;
					СтрокаТаблицыДатаЧемЗаменяем.ВидДня = ЗаменяемаяДатаВидДня;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПеренестиВыходныеДни()


////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ МОДУЛЯ

