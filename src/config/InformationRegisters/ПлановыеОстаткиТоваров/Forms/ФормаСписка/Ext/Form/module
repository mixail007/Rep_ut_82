////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет необходимые действия при изменении номенклатуры.
//
Процедура ПриИзмененииНоменклатуры(СтрокаСписка)
	
	Если СтрокаСписка.Номенклатура <> СтрокаСписка.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаСписка.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНоменклатуры()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РегистрСведенийСписок

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "РегистрСведенийСписок".
//
Процедура РегистрСведенийСписокПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока И Элемент.ТекущиеДанные.Номенклатура = Неопределено Тогда
		Элемент.ТекущиеДанные.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // РегистрСведенийСписокПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода "Сценарий"
// в строке табличного поля "РегистрСведенийСписок".
//
Процедура РегистрСведенийСписокСценарийПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные;
	
	Если Элемент.Значение.ДетализацияПланирования = Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
		ОТ = Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы");
		ТекущиеДанные.Номенклатура = ОТ.ПривестиЗначение(ТекущиеДанные.Номенклатура);
	Иначе
		ОТ = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		ТекущиеДанные.Номенклатура = ОТ.ПривестиЗначение(ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	ПриИзмененииНоменклатуры(ТекущиеДанные);
	
КонецПроцедуры // РегистрСведенийСписокСценарийПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
// в строке табличного поля "РегистрСведенийСписок".
//
Процедура РегистрСведенийСписокНоменклатураПриИзменении(Элемент)
	
	ПриИзмененииНоменклатуры(ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные);
	
КонецПроцедуры // РегистрСведенийСписокНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ХарактеристикаНоменклатуры"
// в строке табличного поля "РегистрСведенийСписок".
//
Процедура РегистрСведенийСписокХарактеристикаНоменклатурыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Для номенклатурных групп не ведется учет по характеристикам!");
	КонецЕсли;
	
КонецПроцедуры // РегистрСведенийСписокХарактеристикаНоменклатурыНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ХарактеристикаНоменклатуры"
// в строке табличного поля "РегистрСведенийСписок".
//
Процедура РегистрСведенийСписокХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	Если ТипЗнч(ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		Если НЕ ЗначениеНеЗаполнено(Элемент.Значение) Тогда
			Предупреждение("Для номенклатурных групп не ведется учет по характеристикам! Значение очищено.");
			Элемент.Значение = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные;
	
	Если ТекущиеДанные.Номенклатура <> ТекущиеДанные.ХарактеристикаНоменклатуры.Владелец Тогда
		ТекущиеДанные.Номенклатура = ТекущиеДанные.ХарактеристикаНоменклатуры.Владелец;
	КонецЕсли;
	
КонецПроцедуры // РегистрСведенийСписокХарактеристикаНоменклатурыПриИзменении()
