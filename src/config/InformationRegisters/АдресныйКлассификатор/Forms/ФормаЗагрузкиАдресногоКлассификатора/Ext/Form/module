////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ СПИСКА

//  Процедура устанавливает свойства элементов диалога в соответствии
// со значением реквизитов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьНастройку()

	Если КодировкаWindows Тогда
		ЭлементыФормы.ПолеВыбораКодировки.Значение = ЭлементыФормы.ПолеВыбораКодировки.СписокВыбора.Получить(0).Значение;
	Иначе
		ЭлементыФормы.ПолеВыбораКодировки.Значение = ЭлементыФормы.ПолеВыбораКодировки.СписокВыбора.Получить(1).Значение;
	КонецЕсли;

	Если Формат2003 Тогда
		ЭлементыФормы.ПолеВыбораФормата.Значение = ЭлементыФормы.ПолеВыбораФормата.СписокВыбора.Получить(1).Значение;
	Иначе
		ЭлементыФормы.ПолеВыбораФормата.Значение = ЭлементыФормы.ПолеВыбораФормата.СписокВыбора.Получить(0).Значение;
	КонецЕсли;

КонецПроцедуры

//  Процедура заполняет список ригионов. Список регионов используется для
//  загрузки только части классификатора
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьСписокРегионов()

	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.КодРегионаВКоде,
	|	АдресныйКлассификатор.Наименование,
	|	АдресныйКлассификатор.Сокращение
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1" ;

	Выборка = Запрос.Выполнить().Выбрать();
	СписокРегионов.Очистить();

	Пока Выборка.Следующий() Цикл
		СписокРегионов.Добавить(Выборка.КодРегионаВКоде, Выборка.Наименование + " " + Выборка.Сокращение, Ложь);
	КонецЦикла;
	
	СписокРегионов.СортироватьПоПредставлению();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	КодировкаWindows = ВосстановитьЗначение("АдресныйКлассификаторКодировкаWindows");
	Формат2003       = ВосстановитьЗначение("АдресныйКлассификаторФормат2003");

	ФайлАдресногоКлассификатора  = ВосстановитьЗначение("АдресныйКлассификаторФайлАдресногоКлассификатора");
	ФайлКлассификатораУлиц       = ВосстановитьЗначение("АдресныйКлассификаторФайлКлассификатораУлиц");
	ФайлКлассификатораДомов      = ВосстановитьЗначение("АдресныйКлассификаторФайлКлассификатораДомов");
	ФайлКлассификатораСокращений = ВосстановитьЗначение("АдресныйКлассификаторФайлКлассификатораСокращений");

	Если ЗначениеНеЗаполнено(КодировкаWindows) Тогда
		КодировкаWindows = Истина;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Формат2003) Тогда
		Формат2003 = Истина;
	КонецЕсли;

	УстановитьНастройку();
	ЗаполнитьСписокРегионов();

	ЭлементыФормы.ФайлКлассификатораДомов.ТолькоПросмотр = НЕ Формат2003;
	ЭлементыФормы.НадписьФайлаКлассификатораДомов.доступность = Формат2003;

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьЗначение("АдресныйКлассификаторКодировкаWindows", КодировкаWindows);
	СохранитьЗначение("АдресныйКлассификаторФормат2003", Формат2003);

	СохранитьЗначение("АдресныйКлассификаторФайлАдресногоКлассификатора",  ФайлАдресногоКлассификатора);
	СохранитьЗначение("АдресныйКлассификаторФайлКлассификатораУлиц",       ФайлКлассификатораУлиц);
	СохранитьЗначение("АдресныйКлассификаторФайлКлассификатораДомов",      ФайлКлассификатораДомов);
	СохранитьЗначение("АдресныйКлассификаторФайлКлассификатораСокращений", ФайлКлассификатораСокращений);

КонецПроцедуры

// Процедура - обработчик события "Загрузить" командной панели "ДействияФормы".
//
Процедура ОсновныеДействияФормыДействиеЗагрузить(Кнопка)
	
	ТолькоАдресныеСокращения = ПустаяСтрока(ФайлАдресногоКлассификатора)
	                         И ПустаяСтрока(ФайлКлассификатораУлиц)
	                         И (Формат2003 И ПустаяСтрока(ФайлКлассификатораДомов));
	
	Для каждого Элемент Из СписокРегионов Цикл
		
		Если Элемент.Пометка  ИЛИ ТолькоАдресныеСокращения Тогда
			
			ФормаПроцессаЗагрузки = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаПроцессаЗагрузки", ЭтаФорма, );
			
			ФормаПроцессаЗагрузки.Открыть();
			ФормаПроцессаЗагрузки.ЗагрузитьКлассификаторы(ФайлАдресногоКлассификатора,
			                                              ФайлКлассификатораУлиц,
			                                              ФайлКлассификатораДомов,
			                                              ФайлКлассификатораСокращений,
			                                              СписокРегионов,
			                                              КодировкаWindows, 
			                                              Формат2003);
			ФормаПроцессаЗагрузки.Закрыть();
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Предупреждение("Необходимо отметить хотя бы один регион для загрузки");
	
КонецПроцедуры

// Процедура - обработчик события "ЗагрузитьРегионы" командной панели "ДействияФормы".
//
Процедура ОсновныеДействияФормыЗагрузитьРегионы(Кнопка)
	
	ФормаПроцессаЗагрузки = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаПроцессаЗагрузки", ЭтаФорма, );
	
	ФормаПроцессаЗагрузки.Открыть();
	ФормаПроцессаЗагрузки.ЗагрузитьРегионы();
	ФормаПроцессаЗагрузки.Закрыть();
	
	ЗаполнитьСписокРегионов();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФайлАдресногоКлассификатора".
//
Процедура ФайлАдресногоКлассификатораНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВводФайлаАдресногоКлассификатора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВводФайлаАдресногоКлассификатора.Фильтр = "Файл базы данных(*.dbf)|*.dbf";
	ВводФайлаАдресногоКлассификатора.ПроверятьСуществованиеФайла = Истина;
	Если ВводФайлаАдресногоКлассификатора.Выбрать() Тогда
		ФайлАдресногоКлассификатора = ВводФайлаАдресногоКлассификатора.ПолноеИмяФайла;
	КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФайлКлассификатораУлиц".
//
Процедура ФайлКлассификатораУлицНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВводФайлаКлассификатораУлиц = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВводФайлаКлассификатораУлиц.Фильтр = "Файл базы данных(*.dbf)|*.dbf";
	ВводФайлаКлассификатораУлиц.ПроверятьСуществованиеФайла = Истина;
	Если ВводФайлаКлассификатораУлиц.Выбрать() Тогда
		ФайлКлассификатораУлиц = ВводФайлаКлассификатораУлиц.ПолноеИмяФайла;
	КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФайлКлассификатораДомов".
//
Процедура ФайлКлассификатораДомовНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВводФайлаКлассификатораДомов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВводФайлаКлассификатораДомов.Фильтр = "Файл базы данных(*.dbf)|*.dbf";
	ВводФайлаКлассификатораДомов.ПроверятьСуществованиеФайла = Истина;
	Если ВводФайлаКлассификатораДомов.Выбрать() Тогда
		ФайлКлассификатораДомов = ВводФайлаКлассификатораДомов.ПолноеИмяФайла;
	КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФайлКлассификатораСокращений".
//
Процедура ФайлКлассификатораСокращенийНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВводФайлаКлассификатораСокращений = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВводФайлаКлассификатораСокращений.Фильтр = "Файл базы данных(*.dbf)|*.dbf";
	ВводФайлаКлассификатораСокращений.ПроверятьСуществованиеФайла = Истина;
	Если ВводФайлаКлассификатораСокращений.Выбрать() Тогда
		ФайлКлассификатораСокращений = ВводФайлаКлассификатораСокращений.ПолноеИмяФайла;
	КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПолеВыбораКодировки".
//
Процедура ПолеВыбораКодировкиПриИзменении(Элемент)

	КодировкаWindows = (ЭлементыФормы.ПолеВыбораКодировки.Значение = "win"); 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПолеВыбораФормата".
//
Процедура ПолеВыбораФорматаПриИзменении(Элемент)

	Формат2003 = (ЭлементыФормы.ПолеВыбораФормата.Значение = "2003"); 
	ЭлементыФормы.ФайлКлассификатораДомов.ТолькоПросмотр = НЕ Формат2003;
	ЭлементыФормы.НадписьФайлаКлассификатораДомов.Доступность = Формат2003;

КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" кнопки "УстановитьФлажки".
//
Процедура КнопкаУстановитьФлажкиНажатие(Элемент)

	СписокРегионов.ЗаполнитьПометки(Истина);

КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" кнопки "СнятьФлажки".
//
Процедура КнопкаСнятьФлажкиНажатие(Элемент)

	СписокРегионов.ЗаполнитьПометки(Ложь);

КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" кнопки "ЗатенитьФлажки".
//
Процедура КнопкаЗатенитьФлажкиНажатие(Элемент)

	Для каждого Элемент Из СписокРегионов Цикл
		Элемент.Пометка = Не Элемент.Пометка;
	КонецЦикла;

КонецПроцедуры

Процедура ОсновныеДействияФормыОчиститьКлассификатор(Кнопка)

	Ответ = Вопрос("Вся адресная информация в классификаторе по выбранным регионам будет удалена!
					|Очистить адресный классификатор по выбранным регионам?", РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		МенеджерЗаписи = РегистрыСведений.АдресныйКлассификатор.СоздатьМенеджерЗаписи();
		НаборЗаписей = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КодРегионаВКоде.Использование = Истина;
		
		Для каждого Элемент Из СписокРегионов Цикл
			Если Элемент.Пометка Тогда
				// очищаем классификатор по региону
				Состояние("Очищаем классификатор по региону " + Элемент.Представление + ".");
				НаборЗаписей.Отбор.КодРегионаВКоде.Значение = Элемент.Значение;
				
				АдресныеСведения = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
				АдресныеСведения.Отбор.КодРегионаВКоде.Использование = Истина;
				АдресныеСведения.Отбор.КодРегионаВКоде.Значение = Элемент.Значение;
				
				ТексЗапроса = "ВЫБРАТЬ
				              |	АдресныйКлассификатор.Код,
				              |	АдресныйКлассификатор.КодРегионаВКоде,
				              |	АдресныйКлассификатор.Наименование,
				              |	АдресныйКлассификатор.Сокращение,
				              |	АдресныйКлассификатор.Индекс,
				              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
				              |	АдресныйКлассификатор.КодРайонаВКоде,
				              |	АдресныйКлассификатор.КодГородаВКоде,
				              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
				              |	АдресныйКлассификатор.КодУлицыВКоде
				              |ИЗ
				              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
				              |
				              |ГДЕ
				              |	АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде И
				              |	АдресныйКлассификатор.ТипАдресногоЭлемента = 1";
				
				Запрос = Новый Запрос(ТексЗапроса);
				Запрос.УстановитьПараметр("КодРегионаВКоде", Элемент.Значение);
				
				ВыборкаСведений = Запрос.Выполнить().Выбрать();
				
				Пока ВыборкаСведений.Следующий() Цикл
					
					ЗаписьАдреса = АдресныеСведения.Добавить();
					
					ЗаписьАдреса.Код = ВыборкаСведений.Код;
					
					ЗаписьАдреса.Наименование              = ВыборкаСведений.Наименование;
					ЗаписьАдреса.Сокращение                = ВыборкаСведений.Сокращение;
					ЗаписьАдреса.Индекс                    = ВыборкаСведений.Индекс;
					ЗаписьАдреса.ТипАдресногоЭлемента      = ВыборкаСведений.ТипАдресногоЭлемента;
					
					ЗаписьАдреса.КодРегионаВКоде           = ВыборкаСведений.КодРегионаВКоде;
					ЗаписьАдреса.КодРайонаВКоде            = ВыборкаСведений.КодРайонаВКоде;
					ЗаписьАдреса.КодГородаВКоде            = ВыборкаСведений.КодГородаВКоде;
					ЗаписьАдреса.КодНаселенногоПунктаВКоде = ВыборкаСведений.КодНаселенногоПунктаВКоде;
					ЗаписьАдреса.КодУлицыВКоде             = ВыборкаСведений.КодУлицыВКоде;
					
				КонецЦикла;

				АдресныеСведения.Записать(Истина);

			КонецЕсли;
		КонецЦикла;
		
		// очищаем классификатор от элементом с нулевым регионом
		Состояние("Проверяем на существование записей с регионом ""0"".");
		НаборЗаписей.Отбор.КодРегионаВКоде.Значение = 0;
		НаборЗаписей.Прочитать();
		
		МенеджерЗаписи.КодРегионаВКоде = НаборЗаписей.Отбор.КодРегионаВКоде.Значение;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			Для каждого ЗаписьРегистра из НаборЗаписей Цикл
				МенеджерЗаписи.Код = ЗаписьРегистра.Код;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.Удалить();
			КонецЦикла;
			Сообщить("Дополнительно удалены некорректные записи, содержащие регион 0!", СтатусСообщения.Важное);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

