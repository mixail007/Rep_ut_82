////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ
// 

// Процедура записи сообщения с измененными данными
//
Процедура ЗаписатьСообщениеСИзменениями() Экспорт
	
	// Формируем имя временного файла
	ИмяФайла = КаталогВременныхФайлов() + "\" + 
			   ПолучитьИмяФайлаОбмена(ПланыОбмена.СинхронизацияСтатейЗатрат.ЭтотУзел(), Ссылка, "_ST");
	
	Если Инфо() Тогда
		Сообщить("-------- Выгрузка в узел " + Строка(ЭтотОбъект) + " ------------");
	КонецЕсли;
	
	// Записываем новое сообщение обмена в файл
	НомерСообщения = ЗаписатьНовоеСообщение(ИмяФайла);
	
	// Публикуем файл с сообщением обмена
	ОпубликоватьФайлОбмена(ИмяФайла, НомерСообщения);
		
	Попытка
		
		// Удаляем файл с сообщением обмена
		УдалитьФайлы(ИмяФайла);
		
	Исключение
		
	КонецПопытки;	
	Если Инфо() Тогда 
		Сообщить("-------- Конец выгрузки------------");
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьСообщениеСИзменениями()

// Процедура получения сообщения обмена данными
// Получает сообщение с новыми данными для этого узла и загружает данные
//
Процедура ПрочитатьСообщениеСИзменениями() Экспорт
	
	Перем НомерСообщения;	// Номер принимаемого сообщения
	
	// Формируем имя временного файла
	ИмяФайла = КаталогВременныхФайлов() + "\" + 
			   ПолучитьИмяФайлаОбмена(ПланыОбмена.СинхронизацияСтатейЗатрат.ЭтотУзел(), Ссылка, "_ST");
	
	Если Инфо() Тогда
	
			Сообщить("-------- Загрузка из " + Строка(ЭтотОбъект) + "------------");	
	
	КонецЕсли; 		   

	
	// Получаем копию файла обмена с новым сообщением во временный файл
		ФайлПолучен = ПолучитьФайлОбмена(ИмяФайла);
		
	
	Если ФайлПолучен Тогда
		
		Попытка
			
			// Читаем полученное сообщение из файла	
			НомерСообщения = ПрочитатьНовоеСообщение(ИмяФайла);
			
		Исключение
			
			Если Инфо() Тогда 
				Сообщить("    " + ОписаниеОшибки());
			КонецЕсли;
			
		КонецПопытки;
		
		Если НомерСообщения <> Неопределено Тогда
			
			// Удаляем файлы со старыми сообщениями обмена
			УдалитьФайлыОбмена(НомерСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		// Удаляем файл с сообщением обмена
		УдалитьФайлы(ИмяФайла);
		
	Исключение
	КонецПопытки;
	
	Если Инфо() Тогда 
		Сообщить("-------- Конец загрузки------------");
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьСообщениеСИзменениями()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
 
// Функция выполняет проверку того, что данные нужно переностить в данный узел
//
// Параметры:
//  Данные	– Объект, набор записей,... который нужно проверить.
//            То, что переносится везде, не обрабатывается
//
// Возвращаемое значение:
//  Перенос - булево, если Истина - необходимо выполнять перенос, 
//			  иначе - перенос выполнять не нужно
//
Функция НуженПереносДанных(Данные)
	
	Перенос = Истина;
	Возврат Перенос;
	
КонецФункции // НуженПереносДанных()

// Процедура вывода диагностической информации о данных
//
// Параметры:
//  Данные	– Объект, набор записей,... информацию о которых нужно выводить
//
Процедура ВывестиДанные(Данные)
	
	Перем Представление;
	
	Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
		
		Представление = "Удаление объекта: " + Строка(Данные.Ссылка.Метаданные()) + 
						": " + Строка(Данные.Ссылка);
	Иначе					
		
		Представление = Строка(Данные.Метаданные()) + ": " + Строка(Данные);		
		
	КонецЕсли;
	Если Инфо() Тогда
		Сообщить("- " + Представление);
	КонецЕсли; 
КонецПроцедуры // ВывестиДанные()

// Процедура на основании анализа типа данных заменяет их на данные, удаляющие
// информацию из узла в котором их не должно быть
//
// Параметры:
//  Данные	– Объект, набор записей,... который нужно преобразовать
//
Процедура УдалениеДанных(Данные) 
	
	// Получаем объект описания метаданного, соответствующий данным
	ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Данные.Ссылка.Метаданные(), Данные.Метаданные());
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
	 Или Метаданные.Документы.Содержит(ОбъектМетаданных)
	 Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
	 Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
	 Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		
		// Перенос удаления объекта для объектных
		Данные = Новый УдалениеОбъекта(Данные.Ссылка);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		  Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		  Или Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
		  Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных)
		  Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель)
		  Или Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		
		// Очищаем данные
		Данные.Очистить();
		
	КонецЕсли;	
	
КонецПроцедуры // УдалениеДанных(Данные)

// Функция записи нового сообщения обмена в файл
// 
// Параметры:
//  ИмяФайла	- имя файла, в который будет записано сообщение обмена
//  ПланОбмена	- ссылка на план обмена, для которого формируется сообщение обмена
//
// Возвращаемое значение:
//  НомерСообщения - номер сообщения записанного в файл обмена
//
Функция ЗаписатьНовоеСообщение(ИмяФайла)
	
	НомерСообщения = 0;
	// Создаем объект записи XML
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Создаем новое сообщение
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Ссылка);
	
	// Для сокращения размера файла сообщения записываем соответствие пространств имен
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
	
	НомерСообщения = ЗаписьСообщения.НомерСообщения;
	Если Инфо() Тогда 
		Сообщить("    Номер сообщения: " + НомерСообщения);
	КонецЕсли;
	
	// Получаем выборку изменённых данных
	Счетчик = 0;
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, НомерСообщения);
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Данные = ВыборкаИзменений.Получить();
		
		Счетчик = Счетчик + 1;
		Если Инфо() Тогда 
			Состояние("Выгрузка данных: " + Строка(Счетчик));
		КонецЕсли;
		
		 //Если перенос данных не нужен, то, возможно, необходимо записать удаление данных
		 
		 Если Не НуженПереносДанных(Данные) Тогда
			
			// Получаем значение с возможным удалением данных
			УдалениеДанных(Данные); 
			
		 КонецЕсли;
		 

		// Записываем данные в сообщение
		ЗаписатьДанные(ЗаписьXML, Данные);
		
		// Выводим диагностическое сообщение о записанных данных
		ВывестиДанные(Данные);
		
	КонецЦикла;
	
	// Завершаем запись сообщения
	ЗаписьСообщения.ЗакончитьЗапись();
	ЗаписьXML.Закрыть();
	
	Возврат НомерСообщения;
	
КонецФункции // ЗаписатьНовоеСообщение(ИмяФайла)

// Функция чтения нового сообщения обмена из файла
//
// Параметры:
//  ИмяФайла - имя файла с сообщением обмена
// 
// Возвращаемое значение:
//  НомерСообщения - номер принятого сообщения
//
Функция ПрочитатьНовоеСообщение(ИмяФайла)
	
	// Создаем объект чтения XML
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	// Загрузка из найденного файла
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	НомерСообщения = ЧтениеСообщения.НомерСообщения;
	Если ЧтениеСообщения.Отправитель <> Ссылка Тогда
		
		// Сообщение предназначено не для этого узла
		ВызватьИсключение "Неверный узел";
		
	КонецЕсли;
	
	// Удаляем регистрацию изменений для узла отправителя сообщения
	// по номеру принятого сообщения, полученного из сообщения
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	// Читаем данные из сообщения пока это возможно
	Счетчик = 0;
	Пока ВозможностьЧтенияДанных(ЧтениеXML) Цикл
		
		// Читаем очередное значение
		Данные = ПрочитатьДанные(ЧтениеXML);
		Счетчик = Счетчик + 1;
		Если Инфо() Тогда
		
			Состояние("Загрузка данных: " + Строка(Счетчик));	
		
		КонецЕсли; 
		
		
		// Разрешение коллизий при одновременном изменении в обоих узлах
		Если Не ЧтениеСообщения.Отправитель.Главный 
		   И ПланыОбмена.ИзменениеЗарегистрировано(ЧтениеСообщения.Отправитель, Данные) Тогда
			
			Если Инфо() Тогда
			
				Сообщить("- Изменения отклонены:");
			
			КонецЕсли; 
			
			ВывестиДанные(Данные);
			
			Продолжить;
			
		КонецЕсли;
		
		// Вывод диагностического сообщения о загружаемых данных
		ВывестиДанные(Данные);
		// Устанавливаем отправителя, чтобы для него при записи не было бы зарегистрировано изменение
		Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
		// Включает режим Загрузка, так как данные могут загружаться в произвольном порядке и 
        // нужно отключить такой контроль данных, как проверка уникальности номеров
		Данные.ОбменДанными.Загрузка = Истина;
		
		
		// Запись перенесенных данных
		Данные.Записать();
		
	КонецЦикла;
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	
	Возврат НомерСообщения;
	
КонецФункции // ПрочитатьНовоеСообщение(ИмяФайла)

// Процедура записывает данных в формат XML
// Процедура анализирует переданный объект данных и на основе этого анализа
// записывает его определенным образом в формат XML
//
// Параметры:
//  ЗаписьXML	- объект, записывающий XML данные
//  Данные 		- данные, подлежащие записи в формат XML
//
Процедура ЗаписатьДанные(ЗаписьXML, Данные)
	
	Удаление = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Истина, Ложь);
	// Получаем объект описания метаданного, соответствующий данным
	ОбъектМетаданных = ?(Удаление, Данные.Ссылка.Метаданные(), Данные.Метаданные());
	
	// Если выгружаемыми данными является Справочник.Номенклатура, то его выгружаем вручную
	Если (Не Удаление И ((ОбъектМетаданных = Метаданные.Справочники.СтатьиЗатрат) ИЛИ (ОбъектМетаданных = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств))) Тогда
		
		// Записываем элемент справочника вручную
		СтатьиЗаписатьXML(ЗаписьXML, Данные);
		
	Иначе
		
		// Записываем данные с помощью стандартного метода
		ЗаписатьXML(ЗаписьXML, Данные);
		
	КонецЕсли
	
КонецПроцедуры // ЗаписатьДанные(ЗаписьXML, Данные)

// Функция определяет возвможность чтения очередных данных из объекта ЧтениеXML
//
// Параметры:
//  ЧтениеXML - объект чтения XML
//
// Вовзращаемое значение:
//  Булево - Истина, если возможно чтение очередных данных или Ложь - в противном случае
//
Функция ВозможностьЧтенияДанных(ЧтениеXML)
	
	// Получаем тип данных XML, который может быть считан в данный момент
	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипXML = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = "CatalogObject.Статьи.Вручную" 
	   И ТипXML.URIПространстваИмен = "" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат ВозможностьЧтенияXML(ЧтениеXML);
	
КонецФункции // ВозможностьЧтенияДанных(ЧтениеXML)

// Функция читает данные из формат XML
// Процедура анализирует переданный объект ЧтениеXML и на основе этого анализа
// читает из него данные определенным образом
//
// Параметры:
//  ЧтениеXML	- объект, читающий XML данные
//
// Возвращаемое значение:
//  Данные - значение, прочитанное из объекта ЧтениеXML
//
Функция ПрочитатьДанные(ЧтениеXML)
	
	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипXML = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = "CatalogObject.Статьи.Вручную" 
	   И ТипXML.URIПространстваИмен = "" Тогда
		
		// Пытаемся прочесть значение справочника Номеклатура
		Возврат СтатьиПрочитатьXML(ЧтениеXML);
		
	КонецЕсли;
	
	// Пытаемся прочесть значени из объекта ЧтениеXML стандартным образом
	Возврат ПрочитатьXML(ЧтениеXML);
	
КонецФункции // ПрочитатьДанные(ЧтениеXML)

// Процедура записывает в объект ЗаписьXML значение элемента справочника Номеклатура
//
// Параметры:
//  ЗаписьXML		- объект, записывающий XML данные
//  Номенклатура	- ссылка на элемент справочника Номенклатура
//
Процедура СтатьиЗаписатьXML(ЗаписьXML, Данные)
	
	// Записываем начало элемента XML
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Статьи.Вручную");
	
	// Ссылка
	ЗаписатьXML(ЗаписьXML, Данные.Ссылка, "Ref", НазначениеТипаXML.Явное);
	// ЭтоГруппа
	ЗаписатьXML(ЗаписьXML, Данные.ЭтоГруппа, "IsFolder", НазначениеТипаXML.Явное);
	// Родитель
	ЗаписатьXML(ЗаписьXML, Данные.Родитель, "Parent", НазначениеТипаXML.Явное);
	// Код
	ЗаписатьXML(ЗаписьXML, Данные.Код, "Code", НазначениеТипаXML.Явное);
	// Наименование
	ЗаписатьXML(ЗаписьXML, Данные.Наименование, "Description", НазначениеТипаXML.Явное);
	
	// Записываем конец элемента
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // НоменклатураЗаписатьXML(ЗаписьXML, Номенклатура)

// Функция читает из объекта ЧтениеXML значение элемента справочника СтатьиЗатрат
//
// Параметры:
//  ЧтениеXML	- объект, читающий XML данные
//
// Возвращаемое значение:
//  Номеклатура	- ссылка на элемент справочника Номенклатура
//
Функция СтатьиПрочитатьXML(ЧтениеXML)
	
	Перем СтатьяЗатрат;	// элемент справочника СтатьиЗатрат
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Чтение следующего узла
	ЧтениеXML.Прочитать();
	
	// Чтение ссылки на элемент справочника
	СтатьяЗатратСсылка = ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(СтатьяЗатратСсылка) <> Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Пытаемся создать объект по полученной ссылке
	СтатьяЗатрат = СтатьяЗатратСсылка.ПолучитьОбъект();
	
	// Чтение признака группы
	ЭтоГруппа = ПрочитатьXML(ЧтениеXML);
	
	Если СтатьяЗатрат <> Неопределено Тогда
		
		Если СтатьяЗатрат.ЭтоГруппа <> ЭтоГруппа Тогда
			
			ВызватьИсключение "Некорректные данные";
			
		КонецЕсли;
		
	Иначе
		
		// Создаем элемент справочника
		Если ЭтоГруппа = Истина Тогда
			
			// Создаем группу
			СтатьяЗатрат = Справочники.СтатьиЗатрат.СоздатьГруппу();
			
		Иначе
			
			// Создаем элемент справочника
			СтатьяЗатрат = Справочники.СтатьиЗатрат.СоздатьЭлемент();
			
		КонецЕсли;
		
		// Устанавливаем значение ссылки для нового объекта
		СтатьяЗатрат.УстановитьСсылкуНового(СтатьяЗатратСсылка);
		
	КонецЕсли;
	
	// Родитель
	СтатьяЗатрат.Родитель = ПрочитатьXML(ЧтениеXML);
	// Код
	СтатьяЗатрат.Код = ПрочитатьXML(ЧтениеXML);
	// Наименование
	СтатьяЗатрат.Наименование = ПрочитатьXML(ЧтениеXML);
	// Реквизиты, загружаемые только для элемента справочника, а не для группы
	
	// Проверяем, что текущим узлом является КонецЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Чтение следующего узла для завершение чтения элемента
	ЧтениеXML.Прочитать();
	
	Возврат СтатьяЗатрат;
	
КонецФункции	// НомеклатураПрочитатьXML(ЧтениеXML)

// Процедура публикации файла с сообщением обмена
//
// Параметры:
//  ИмяФайла 		- имя файла, содержащего сообщение обмена
//  НомерСообщения  - номер сообщения отправляемых данных
//
Процедура ОпубликоватьФайлОбмена(ИмяФайла, НомерСообщения)
	
	ИмяФайлаСообщения = ПолучитьИмяФайлаОбмена(ПланыОбмена.СинхронизацияСтатейЗатрат.ЭтотУзел(), 
	
	Ссылка, Формат(НомерСообщения, "ЧЦ=10; ЧВН=; ЧГ=0"));
	
	Путь = СтрЗаменить(АдресОбмена, "\", "/");
	// Копируем файл в каталог, определенный для данного узла
	Попытка
		
		КопироватьФайл(ИмяФайла, Путь + ?(Прав(Путь, 1) = "/", "", "/") + ИмяФайлаСообщения);
		
	Исключение
		
		Если Инфо() Тогда
		
			Сообщить(" - Ошибка публикации файла: " + ИмяФайлаСообщения);
			Сообщить(ОписаниеОшибки());

		
		КонецЕсли; 
		Возврат;
		
	КонецПопытки;
	
	Если Инфо() Тогда 
		Сообщить(" - Опубликован файл: " + ИмяФайлаСообщения);
	КонецЕсли;
	
	// Удаляем ранее выгруженные файлы
	ФайлСообщения = Новый Файл(ИмяФайлаСообщения);
	МаскаФайлов = ПолучитьИмяФайлаОбмена(ПланыОбмена.СинхронизацияСтатейЗатрат.ЭтотУзел(), Ссылка, "??????????");
	Файлы = НайтиФайлы(АдресОбмена, МаскаФайлов);
	Для Каждого Файл Из Файлы Цикл
		
		Если Файл.Имя <> ФайлСообщения.Имя Тогда
			
			Попытка
				
				// Пытаемся удалить файл со старым сообщением
				УдалитьФайлы(Файл.ПолноеИмя);
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОпубликоватьФайлОбмена(ИмяФайла, НомерСообщения)

// Функция получения файла с новым сообщением обмена
// Ищет и копирует в указанный файл файл с последним сообщением обмена
//
// Параметры:
//  ИмяФайла	- файл, в который будет произведено копирование файла с сообщением обмена
//
// Возвращаемое значение:
//  Булево - Истина - если файл с сообщением обмена получен и Ложь - в противном случае
//
Функция ПолучитьФайлОбмена(ИмяФайла)
	
	// Получаем маску для поиска файлов с сообщениями обмена
	МаскаФайлов = ПолучитьИмяФайлаОбмена(Ссылка, ПланыОбмена.СинхронизацияСтатейЗатрат.ЭтотУзел(), "??????????");
	
	ИмяФайлаСообщения = "";
	// Ищем файлы по маске в каталоге загрузки
	Файлы = НайтиФайлы(АдресОбмена, МаскаФайлов);
	// Отбираем файл с максимальным номером в имени
	Для Каждого Файл Из Файлы Цикл
		
		Если ПустаяСтрока(ИмяФайлаСообщения) Или Файл.ПолноеИмя > ИмяФайлаСообщения Тогда
			
			ИмяФайлаСообщения = Файл.ПолноеИмя;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ИмяФайлаСообщения) Тогда
		Если Инфо()Тогда 
			Сообщить(" - Считывается файл " + ИмяФайлаСообщения);
		КонецЕсли;
		
		Попытка
			
			// Копируем файл с сообщением обмена в указанный файл
			КопироватьФайл(ИмяФайлаСообщения, ИмяФайла);
			
		Исключение
			Если Инфо() Тогда 
				Сообщить("   " + ОписаниеОшибки());
			КонецЕсли;
			Возврат Ложь;
			
		КонецПопытки;
		
		// Файл с сообщением обмена получен успешно
		Возврат Истина;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции // ПолучитьФайлОбмена(ИмяФайла)

// Процедура удаления файлов со старыми сообщениями обмена
// Удаляет файлы с именами равными или меньшими переданному номеру сообщения
// 
// Параметры:
//  НомерСообщения - номер сообщения
//
Процедура УдалитьФайлыОбмена(НомерСообщения)
	
	// Получаем имя файла с номером сообщения
	МаксИмяФайла = ПолучитьИмяФайлаОбмена(Ссылка, ПланыОбмена.СинхронизацияСтатейЗатрат.ЭтотУзел(),
	Формат(НомерСообщения, "ЧЦ=10; ЧВН=; ЧГ=0")); 
	// Получаем маску для поиска файлов с сообщениями обмена
	МаскаФайлов = ПолучитьИмяФайлаОбмена(Ссылка, ПланыОбмена.СинхронизацияСтатейЗатрат.ЭтотУзел(), "??????????");
	
	// Ищем файлы по маске в каталоге загрузки
	Файлы = НайтиФайлы(АдресОбмена, МаскаФайлов);
	// Удаление файлов со старыми сообщениями обмена
	Для Каждого Файл Из Файлы Цикл
		
		// Удаляем только файлы, имена которых меньше или равны имени файла с указанным номером сообщения
		Если Файл.Имя <= МаксИмяФайла Тогда
			
			Попытка
				
				// Пытаемся удалить файл
				УдалитьФайлы(Файл.ПолноеИмя);
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьФайлыОбмена(НомерСообщения)
