////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ
// 

// Процедура записи сообщения с измененными данными
//
Процедура ЗаписатьСообщениеСИзменениями() Экспорт
	
	ПараметрыСеанса.ИдетОбменФизЛицКонтрагентов = Истина;
	// Формируем имя временного файла
	ИмяФайла = КаталогВременныхФайлов() + "\" + 
			   ПолучитьИмяФайлаОбменаФЛК(ПланыОбмена.ФизлицаКонтрагенты.ЭтотУзел(), Ссылка, "_FL");
	
	Если Инфо() Тогда
		Сообщить("-------- Выгрузка в узел " + Строка(ЭтотОбъект) + " ------------");
	КонецЕсли;
	
	// Записываем новое сообщение обмена в файл
	НомерСообщения = ЗаписатьНовоеСообщение(ИмяФайла);
	
	// Публикуем файл с сообщением обмена
	ОпубликоватьФайлОбмена(ИмяФайла, НомерСообщения);
		
	Попытка
		
		// Удаляем файл с сообщением обмена
		УдалитьФайлы(ИмяФайла);
		
	Исключение
		
	КонецПопытки;	
	Если Инфо() Тогда 
		Сообщить("-------- Конец выгрузки------------");
	КонецЕсли;
	ПараметрыСеанса.ИдетОбменФизЛицКонтрагентов = Ложь;
	
КонецПроцедуры // ЗаписатьСообщениеСИзменениями()

// Процедура получения сообщения обмена данными
// Получает сообщение с новыми данными для этого узла и загружает данные
//
Процедура ПрочитатьСообщениеСИзменениями() Экспорт
	
	
	Перем НомерСообщения;	// Номер принимаемого сообщения
	ПараметрыСеанса.ИдетОбменФизЛицКонтрагентов = Истина;
	
	// Формируем имя временного файла
	ИмяФайла = КаталогВременныхФайлов() + "\" + 
			   ПолучитьИмяФайлаОбменаФЛК(ПланыОбмена.ФизлицаКонтрагенты.ЭтотУзел(), Ссылка, "_FL");
	
	Если Инфо() Тогда
	
			Сообщить("-------- Загрузка из " + Строка(ЭтотОбъект) + "------------");	
	
	КонецЕсли; 		   

	
	// Получаем копию файла обмена с новым сообщением во временный файл
		ФайлПолучен = ПолучитьФайлОбмена(ИмяФайла);
		
	
	Если ФайлПолучен Тогда
		
	//	Попытка
			
			// Читаем полученное сообщение из файла	
			НомерСообщения = ПрочитатьНовоеСообщение(ИмяФайла);
			
	//	Исключение
			
			Если Инфо() Тогда 
				Сообщить("    " + ОписаниеОшибки());
			КонецЕсли;
			
	//	КонецПопытки;
		
		Если НомерСообщения <> Неопределено Тогда
			
			// Удаляем файлы со старыми сообщениями обмена
			УдалитьФайлыОбмена(НомерСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		// Удаляем файл с сообщением обмена
		УдалитьФайлы(ИмяФайла);
		
	Исключение
	КонецПопытки;
	
	Если Инфо() Тогда 
		Сообщить("-------- Конец загрузки------------");
	КонецЕсли;
	
	ПараметрыСеанса.ИдетОбменФизЛицКонтрагентов = Ложь;
КонецПроцедуры // ПрочитатьСообщениеСИзменениями()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
 
// Функция выполняет проверку того, что данные нужно переностить в данный узел
//
// Параметры:
//  Данные	– Объект, набор записей,... который нужно проверить.
//            То, что переносится везде, не обрабатывается
//
// Возвращаемое значение:
//  Перенос - булево, если Истина - необходимо выполнять перенос, 
//			  иначе - перенос выполнять не нужно
//
Функция НуженПереносДанных(Данные)
	
	Перенос = Истина;
	
	Возврат Перенос;
	
КонецФункции // НуженПереносДанных()

// Процедура вывода диагностической информации о данных
//
// Параметры:
//  Данные	– Объект, набор записей,... информацию о которых нужно выводить
//
Процедура ВывестиДанные(Данные)
	
	Перем Представление;
	
	Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
		
		Представление = "Удаление объекта: " + Строка(Данные.Ссылка.Метаданные()) + 
						": " + Строка(Данные.Ссылка);
	Иначе					
		
		Представление = Строка(Данные.Метаданные()) + ": " + Строка(Данные);		
		
	КонецЕсли;
	Если Инфо() Тогда
		Сообщить("- " + Представление);
	КонецЕсли; 
КонецПроцедуры // ВывестиДанные()

// Процедура на основании анализа типа данных заменяет их на данные, удаляющие
// информацию из узла в котором их не должно быть
//
// Параметры:
//  Данные	– Объект, набор записей,... который нужно преобразовать
//
Процедура УдалениеДанных(Данные) 
	
	// Получаем объект описания метаданного, соответствующий данным
	ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Данные.Ссылка.Метаданные(), Данные.Метаданные());
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
	 Или Метаданные.Документы.Содержит(ОбъектМетаданных)
	 Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
	 Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
	 Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		
		// Перенос удаления объекта для объектных
		Данные = Новый УдалениеОбъекта(Данные.Ссылка);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		  Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		  Или Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
		  Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных)
		  Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель)
		  Или Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		
		// Очищаем данные
		Данные.Очистить();
		
	КонецЕсли;	
	
КонецПроцедуры // УдалениеДанных(Данные)

// Функция записи нового сообщения обмена в файл
// 
// Параметры:
//  ИмяФайла	- имя файла, в который будет записано сообщение обмена
//  ПланОбмена	- ссылка на план обмена, для которого формируется сообщение обмена
//
// Возвращаемое значение:
//  НомерСообщения - номер сообщения записанного в файл обмена
//
Функция ЗаписатьНовоеСообщение(ИмяФайла)
	
	НомерСообщения = 0;
	// Создаем объект записи XML
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Создаем новое сообщение
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Ссылка);
	
	// Для сокращения размера файла сообщения записываем соответствие пространств имен
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
	
	НомерСообщения = ЗаписьСообщения.НомерСообщения;
	Если Инфо() Тогда 
		Сообщить("    Номер сообщения: " + НомерСообщения);
	КонецЕсли;
	
	Счетчик = 0;
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, НомерСообщения);
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Данные = ВыборкаИзменений.Получить();
		
		Счетчик = Счетчик + 1;
		Если Инфо() Тогда 
			Состояние("Выгрузка данных: " + Строка(Счетчик));
		КонецЕсли;
		
		Если (СтрЧислоВхождений(Строка(ТипЗнч(Данные)), "Справочник объект: Контрагенты") > 0) Тогда 
			ЗаписатьДанные(ЗаписьXML, Данные);
		КонецЕсли;		
		ВывестиДанные(Данные);
		
	КонецЦикла;
	
	// Завершаем запись сообщения
	ЗаписьСообщения.ЗакончитьЗапись();
	ЗаписьXML.Закрыть();
	
	Возврат НомерСообщения;
	
КонецФункции // ЗаписатьНовоеСообщение(ИмяФайла)

// Функция чтения нового сообщения обмена из файла
//
// Параметры:
//  ИмяФайла - имя файла с сообщением обмена
// 
// Возвращаемое значение:
//  НомерСообщения - номер принятого сообщения
//
Функция ПрочитатьНовоеСообщение(ИмяФайла)
	
	// Создаем объект чтения XML
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	// Загрузка из найденного файла
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	НомерСообщения = ЧтениеСообщения.НомерСообщения;
	Если ЧтениеСообщения.Отправитель <> Ссылка Тогда
		
		// Сообщение предназначено не для этого узла
		ВызватьИсключение "Неверный узел";
		
	КонецЕсли;
	
	// Удаляем регистрацию изменений для узла отправителя сообщения
	// по номеру принятого сообщения, полученного из сообщения
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	// Читаем данные из сообщения пока это возможно
	Счетчик = 0;
	Пока ВозможностьЧтенияДанных(ЧтениеXML) Цикл
		
		// Читаем очередное значение
		Данные = ПрочитатьДанные(ЧтениеXML,ЧтениеСообщения.Отправитель);
		Счетчик = Счетчик + 1;
		Если Инфо() Тогда
		
			Состояние("Загрузка данных: " + Строка(Счетчик));	
		
		КонецЕсли; 
		
		
		// Разрешение коллизий при одновременном изменении в обоих узлах
		Если Не ЧтениеСообщения.Отправитель.Главный 
		   И ПланыОбмена.ИзменениеЗарегистрировано(ЧтениеСообщения.Отправитель, Данные) Тогда
			
			Если Инфо() Тогда
			
				Сообщить("- Изменения отклонены:");
			
			КонецЕсли; 
			
			ВывестиДанные(Данные);
			
			Продолжить;
			
		КонецЕсли;
		
		// Вывод диагностического сообщения о загружаемых данных
		ВывестиДанные(Данные);
		// Устанавливаем отправителя, чтобы для него при записи не было бы зарегистрировано изменение
		Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
		// Включает режим Загрузка, так как данные могут загружаться в произвольном порядке и 
        // нужно отключить такой контроль данных, как проверка уникальности номеров
		Данные.ОбменДанными.Загрузка = Истина;
				
		// Запись перенесенных данных
		Данные.Записать();
		
	КонецЦикла;
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	
	Возврат НомерСообщения;
	
КонецФункции // ПрочитатьНовоеСообщение(ИмяФайла)

// Процедура записывает данных в формат XML
// Процедура анализирует переданный объект данных и на основе этого анализа
// записывает его определенным образом в формат XML
//
// Параметры:
//  ЗаписьXML	- объект, записывающий XML данные
//  Данные 		- данные, подлежащие записи в формат XML
//
Процедура ЗаписатьДанные(ЗаписьXML, Данные)
	
	Удаление = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Истина, Ложь);
	ОбъектМетаданных = ?(Удаление, Данные.Ссылка.Метаданные(), Данные.Метаданные());
	
	Если (Не Удаление И (ОбъектМетаданных = Метаданные.Справочники.Контрагенты)) Тогда
		Если (ОбъектМетаданных = Метаданные.Справочники.Контрагенты) Тогда 
			КонтрагентыЗаписатьXML(ЗаписьXML, Данные);
		Конецесли;
	КонецЕсли
	
КонецПроцедуры // ЗаписатьДанные(ЗаписьXML, Данные)

// Функция определяет возвможность чтения очередных данных из объекта ЧтениеXML
//
// Параметры:
//  ЧтениеXML - объект чтения XML
//
// Вовзращаемое значение:
//  Булево - Истина, если возможно чтение очередных данных или Ложь - в противном случае
//
Функция ВозможностьЧтенияДанных(ЧтениеXML)
	
	// Получаем тип данных XML, который может быть считан в данный момент
	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипXML = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = "CatalogObject.Сотрудники.Вручную" 
	   И ТипXML.URIПространстваИмен = "" Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТипXML.ИмяТипа = "CatalogObject.Контрагенты.Вручную" 
	   И ТипXML.URIПространстваИмен = "" Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТипXML.ИмяТипа = "CatalogObject.ФизЛица.Вручную" 
	   И ТипXML.URIПространстваИмен = "" Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТипXML.ИмяТипа = "RegisterObject.ПаспортныеДанные.Вручную" 
	   И ТипXML.URIПространстваИмен = "" Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТипXML.ИмяТипа = "RegisterObject.ФИО.Вручную" 
	   И ТипXML.URIПространстваИмен = "" Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТипXML.ИмяТипа = "DeleteObject" 
	   И ТипXML.URIПространстваИмен = "" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат ВозможностьЧтенияXML(ЧтениеXML);
	
КонецФункции // ВозможностьЧтенияДанных(ЧтениеXML)

// Функция читает данные из формат XML
// Процедура анализирует переданный объект ЧтениеXML и на основе этого анализа
// читает из него данные определенным образом
//
// Параметры:
//  ЧтениеXML	- объект, читающий XML данные
//
// Возвращаемое значение:
//  Данные - значение, прочитанное из объекта ЧтениеXML
//
Функция ПрочитатьДанные(ЧтениеXML,Отправитель)
	
	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	
	Если ТипXML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если (ТипXML.ИмяТипа = "CatalogObject.ФизЛица.Вручную" 
		И ТипXML.URIПространстваИмен = "") Тогда 
	   
	    Возврат ФизЛицаПрочитатьXML(ЧтениеXML);
		
	ИначеЕсли (ТипXML.ИмяТипа = "RegisterObject.ФИО.Вручную" 
	   И ТипXML.URIПространстваИмен = "") Тогда
		
		Возврат ФИОПрочитатьXML(ЧтениеXML,Отправитель);
		
	ИначеЕсли (ТипXML.ИмяТипа = "RegisterObject.ПаспортныеДанные.Вручную" 
	   И ТипXML.URIПространстваИмен = "") Тогда
		
		Возврат ПаспортныеДанныеПрочитатьXML(ЧтениеXML,Отправитель);
		
	ИначеЕсли (ТипXML.ИмяТипа = "DeleteObject" 
	   И ТипXML.URIПространстваИмен = "") Тогда
		
		ЧтениеУдаленияДанных = ПрочитатьУдалениеДанных(ЧтениеXML);

		Если (ТипЗнч(ЧтениеУдаленияДанных.Ссылка) = ТипЗнч(Справочники.Контрагенты.ПустаяСсылка())) Тогда 
			ОчиститьСправочникСотрудниковОтКонтрагента(ЧтениеУдаленияДанных.Ссылка);
		ИначеЕсли (ТипЗнч(ЧтениеУдаленияДанных.Ссылка) = ТипЗнч(Справочники.Контрагенты.ПустаяСсылка())) Тогда 
			ОчиститьСправочникСотрудниковОтФизЛица(ЧтениеУдаленияДанных.Ссылка);
		КонецЕсли;
		
		Возврат ЧтениеУдаленияДанных;
	КонецЕсли;
	
	// Пытаемся прочесть значени из объекта ЧтениеXML стандартным образом
	Возврат ПрочитатьXML(ЧтениеXML);
	
КонецФункции // ПрочитатьДанные(ЧтениеXML)

// Процедура записывает в объект ЗаписьXML значение элемента справочника Номеклатура
//
// Параметры:
//  ЗаписьXML		- объект, записывающий XML данные
//  Номенклатура	- ссылка на элемент справочника Номенклатура
//
Процедура КонтрагентыЗаписатьXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Контрагенты.Вручную");	
	ЗаписатьXML(ЗаписьXML, Данные.Ссылка, "Ref", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Данные.Наименование, "Description", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Данные.НаименованиеПолное, "DescriptionFull", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Данные.ИНН, "INN", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Данные.КПП, "KPP", НазначениеТипаXML.Явное);
	Если Данные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЮФ = "ЮЛ";
	Иначе
		ЮФ = "ФЛ";
	КонецЕсли;
	ЗаписатьXML(ЗаписьXML, ЮФ, "UF", НазначениеТипаXML.Явное);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // НоменклатураЗаписатьXML(ЗаписьXML, Номенклатура)

// Функция читает из объекта ЧтениеXML значение элемента справочника ФизЛица
//
// Параметры:
//  ЧтениеXML	- объект, читающий XML данные
//
// Возвращаемое значение:
//  Номеклатура	- ссылка на элемент справочника Номенклатура
//
Функция ФизлицаПрочитатьXML(ЧтениеXML)
	
	Перем ФизЛицо;	// элемент справочника Физ лица
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	ДанныеКод = ПрочитатьXML(ЧтениеXML);
	Наименование = ПрочитатьXML(ЧтениеXML);
	ДатаРождения = Дата(ПрочитатьXML(ЧтениеXML));
	ПометкаУдаления = ПрочитатьXML(ЧтениеXML);
	
	ФизЛицоСсылка = Справочники.ФизическиеЛица.НайтиПоКоду(ДанныеКод);
	
	Если ФизЛицоСсылка = Неопределено ИЛИ ФизЛицоСсылка = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
		
		ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизЛицо.Код = ДанныеКод;
		ФизЛицо.Наименование = Наименование;
		ФизЛицо.ДатаРождения = ДатаРождения;
		ФизЛицо.Комментарий = "Принято из ЗУП";
		ПометкаУдаления = ПометкаУдаления;
		Если ПометкаУдаления Тогда 
			ФизЛицо.ПометкаУдаления = Истина;
		Иначе
			ФизЛицо.ПометкаУдаления = Ложь;
		КонецЕсли;
		ФизЛицо.Записать();
		
	Иначе
		
		ФизЛицо = ФизЛицоСсылка.ПолучитьОбъект();
		Если ФизЛицо.Наименование <> Наименование Тогда
			ФизЛицо.Наименование = Наименование;
		КонецЕсли;
		Если ФизЛицо.ДатаРождения <> ДатаРождения Тогда
			ФизЛицо.ДатаРождения = ДатаРождения;
		КонецЕсли;
		Если ФизЛицо.ПометкаУдаления <> ПометкаУдаления Тогда
			ФизЛицо.ПометкаУдаления = ПометкаУдаления;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат ФизЛицо;
	
КонецФункции	// НомеклатураПрочитатьXML(ЧтениеXML)

//Функция читает из объекта ЧтениеXML значение элемента справочника Контрагенты
Функция КонтрагентыПрочитатьXML(ЧтениеXML)
	
	Перем Контрагент;	// элемент справочника Номенклатура
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Чтение следующего узла
	ЧтениеXML.Прочитать();
	
	// Чтение ссылки на элемент справочника
	ДанныеСсылка = ПрочитатьXML(ЧтениеXML);
	Если (ТипЗнч(ДанныеСсылка) <> Тип("СправочникСсылка.Контрагенты")) Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Пытаемся создать объект по полученной ссылке
	Контрагент = ДанныеСсылка.ПолучитьОбъект();
	
	// Чтение признака группы
	ЭтоГруппа = ПрочитатьXML(ЧтениеXML);
	
	Если Контрагент <> Неопределено Тогда
		
		Если Контрагент.ЭтоГруппа <> ЭтоГруппа Тогда
			
			ВызватьИсключение "Некорректные данные";
			
		КонецЕсли;
		
	Иначе
		
		// Создаем элемент справочника
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		// Устанавливаем значение ссылки для нового объекта
		Контрагент.УстановитьСсылкуНового(ДанныеСсылка);
		Контрагент.Родитель = ПапкаКонтрагентов;
		Контрагент.УстановитьНовыйКод();
		
	КонецЕсли;	
	// Код не нужен 
	ПрочитатьXML(ЧтениеXML);
	// Наименование
	Контрагент.Наименование = ПрочитатьXML(ЧтениеXML);
	Контрагент.НаименованиеПолное = ПрочитатьXML(ЧтениеXML);
	Контрагент.ИНН = ПрочитатьXML(ЧтениеXML);
	Контрагент.КПП = ПрочитатьXML(ЧтениеXML);
	Контрагент.ГоловнойКонтрагент = ДанныеСсылка;
	ПометкаУдаления = ПрочитатьXML(ЧтениеXML);
	Если (ПометкаУдаления="true") Тогда 
		Контрагент.ПометкаУдаления = Истина;
	Иначе
		Контрагент.ПометкаУдаления = Ложь;
	КонецЕсли;	
	// Проверяем, что текущим узлом является КонецЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Чтение следующего узла для завершение чтения элемента
	ЧтениеXML.Прочитать();
	
	Возврат Контрагент;
	
КонецФункции	// НомеклатураПрочитатьXML(ЧтениеXML)

//Функция читает из объекта ЧтениеXML значение элемента справочника Сотрудники
Функция СотрудникиПрочитатьXML(ЧтениеXML,Отправитель)
	
	Перем Сотрудник;		// Элемент справочника Номенклатура
	Перем НашлиСотрудника; 	// Если сотрудник уже был.  
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Чтение следующего узла
	ЧтениеXML.Прочитать();
	
	// Чтение ссылки на элемент справочника
	ДанныеСсылка = ПрочитатьXML(ЧтениеXML);
	Если (ТипЗнч(ДанныеСсылка) <> Тип("СправочникСсылка.СотрудникиОрганизаций")) Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Пытаемся создать объект по полученной ссылке
	Сотрудник = ДанныеСсылка.ПолучитьОбъект();
	
	// Чтение признака группы
	ЭтоГруппа = ПрочитатьXML(ЧтениеXML);
	
	Если Сотрудник <> Неопределено Тогда
		
		Если Сотрудник.ЭтоГруппа <> ЭтоГруппа Тогда
			
			ВызватьИсключение "Некорректные данные";
			
		КонецЕсли;
		
	Иначе
		
		// Создаем элемент справочника
		Сотрудник = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
		// Устанавливаем значение ссылки для нового объекта
		Сотрудник.УстановитьСсылкуНового(ДанныеСсылка);
		
	КонецЕсли;	
	// Код
	Сотрудник.Код = ПрочитатьXML(ЧтениеXML);
	// Наименование
	Сотрудник.Наименование = ПрочитатьXML(ЧтениеXML);	
	ФизЛицоСсылка = ПрочитатьXML(ЧтениеXML);	
	КонтрагентСсылка = ПрочитатьXML(ЧтениеXML);	
	ПометкаУдаления = ПрочитатьXML(ЧтениеXML);	
	
	Если ФизЛицоСсылка<>Справочники.ФизическиеЛица.ПустаяСсылка() Тогда 
		ФизЛицоСсылка = ФизлицаПрочитатьXML(ЧтениеXML);
		ФизЛицоСсылка.ОбменДанными.Отправитель = Отправитель;
		ФизЛицоСсылка.ОбменДанными.Загрузка = Истина;
		ФизЛицоСсылка.Записать();		
		Сотрудник.ФизЛицо 		= ФизЛицоСсылка.Ссылка;	
	КонецЕсли;

	Если КонтрагентСсылка<>Справочники.Контрагенты.ПустаяСсылка() Тогда 
		КонтрагентСсылка = КонтрагентыПрочитатьXML(ЧтениеXML);
		КонтрагентСсылка.ОбменДанными.Отправитель = Отправитель;
		КонтрагентСсылка.ОбменДанными.Загрузка = Истина;
		КонтрагентСсылка.Записать();
		Сотрудник.Контрагент 	= КонтрагентСсылка.Ссылка;		
	КонецЕсли;	
	Сотрудник.Организация   = Организация;
	
	// Если ссылки на физлицо и контрагент получены, то их используем, иначе - создаем новые физ лицо и контрагента
	Если (ПометкаУдаления="true") Тогда 
		Сотрудник.ПометкаУдаления = Истина;
	Иначе
		Сотрудник.ПометкаУдаления = Ложь;
	КонецЕсли;

	// Проверяем, что текущим узлом является КонецЭлемента
	   
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	
	// Чтение следующего узла для завершение чтения элемента
	ЧтениеXML.Прочитать();
	
	Возврат Сотрудник;
	
КонецФункции	// НомеклатураПрочитатьXML(ЧтениеXML)

Функция ФИОПрочитатьXML(ЧтениеXML,Отправитель)
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Фамилия		 = ПрочитатьXML(ЧтениеXML);
	Имя			 = ПрочитатьXML(ЧтениеXML);	
	Отчество	 = ПрочитатьXML(ЧтениеXML);
	Дата		 = Дата(ПрочитатьXML(ЧтениеXML));
	
	ФизЛицо = ФизлицаПрочитатьXML(ЧтениеXML);	
	ФизЛицо.ОбменДанными.Отправитель = Отправитель;
	ФизЛицо.ОбменДанными.Загрузка = Истина;
	ФизЛицо.Записать();
	
	// Далее - создаем запись в регистре сведений "ФИО физ. лиц"
	Набор = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
	Набор.Отбор.ФизЛицо.Значение = ФизЛицо.Ссылка;
	Набор.Отбор.ФизЛицо.Использование = Истина;
	Движение = Набор.Добавить();
	
	Движение.ФизЛицо 	= ФизЛицо.Ссылка;
	Движение.Фамилия 	= Фамилия;
	Движение.Имя 		= Имя;
	Движение.Отчество	= Отчество;
	Движение.Период		= ?(Дата='0001-01-01',ТекущаяДата(),Дата);
	
	// Чтение следующего узла для завершение чтения элемента
	ЧтениеXML.Прочитать();
	
	Возврат Набор;
		
КонецФункции

Функция ПаспортныеДанныеПрочитатьXML(ЧтениеXML,Отправитель)
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	КодИМНС 			= ПрочитатьXML(ЧтениеXML);
	КодПФР 				= ПрочитатьXML(ЧтениеXML);
	Наименование 		= ПрочитатьXML(ЧтениеXML);
	Серия				= ПрочитатьXML(ЧтениеXML);
	Номер 				= ПрочитатьXML(ЧтениеXML);
	ДатаВыдачи 			= Дата(ПрочитатьXML(ЧтениеXML));
	КемВыдан 			= ПрочитатьXML(ЧтениеXML);
	КодПодразделения 	= ПрочитатьXML(ЧтениеXML);
	Дата 				= Дата(ПрочитатьXML(ЧтениеXML));
	
	ДокументУЛ = Справочники.ДокументыУдостоверяющиеЛичность.НайтиПоРеквизиту("КодИМНС", КодИМНС);
	
	Если ДокументУЛ = Неопределено Тогда
		ДокументУЛ = Справочники.ДокументыУдостоверяющиеЛичность.СоздатьЭлемент();
		ДокументУЛ.Наименование = Наименование;
		ДокументУЛ.КодИМНС		= КодИМНС;
		ДокументУЛ.КодПФР		= КодПФР;
		ДокументУЛ.Записать();
	КонецЕсли;
	
	ФизЛицо = ФизлицаПрочитатьXML(ЧтениеXML);	
	ФизЛицо.ОбменДанными.Отправитель = Отправитель;
	ФизЛицо.ОбменДанными.Загрузка = Истина;
	ФизЛицо.Записать();
	
	Набор = РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьНаборЗаписей();
	Набор.Отбор.ФизЛицо.Значение = ФизЛицо.Ссылка;
	Набор.Отбор.ФизЛицо.Использование = Истина;
	Движение = Набор.Добавить();
	
	Движение.ФизЛицо 					= ФизЛицо.Ссылка;
	Движение.ДокументВид 				= ДокументУЛ.Ссылка;
	Движение.ДокументДатаВыдачи	 		= ДатаВыдачи;
	Движение.ДокументКемВыдан 			= КемВыдан;
	Движение.ДокументКодПодразделения 	= КодПодразделения;
	Движение.ДокументНомер 				= Номер;
	Движение.ДокументСерия 				= Серия;
	Движение.Период						= ?(Дата='0001-01-01',ТекущаяДата(),Дата);
	
	ЧтениеXML.Прочитать();
	
	Возврат Набор;
		
КонецФункции

Функция ПрочитатьУдалениеДанных(ЧтениеXML)
		
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		
		ВызватьИсключение "Ошибка чтения XML";
		
	КонецЕсли;
	ЧтениеXML.Прочитать();
	Данные = ПрочитатьXML(ЧтениеXML);
	// Чтение следующего узла
	УдалениеДанных(Данные);
	ЧтениеXML.Прочитать();

	Возврат Данные;
	
КонецФункции

// Процедура публикации файла с сообщением обмена
//
// Параметры:
//  ИмяФайла 		- имя файла, содержащего сообщение обмена
//  НомерСообщения  - номер сообщения отправляемых данных
//
Процедура ОпубликоватьФайлОбмена(ИмяФайла, НомерСообщения)
	
	ИмяФайлаСообщения = ПолучитьИмяФайлаОбменаФЛК(ПланыОбмена.ФизлицаКонтрагенты.ЭтотУзел(), 
	
	Ссылка, Формат(НомерСообщения, "ЧЦ=10; ЧВН=; ЧГ=0"));
	
	Путь = СтрЗаменить(АдресОбмена, "\", "/");
	// Копируем файл в каталог, определенный для данного узла
	Попытка
		
		КопироватьФайл(ИмяФайла, Путь + ?(Прав(Путь, 1) = "/", "", "/") + ИмяФайлаСообщения);
		
	Исключение
		
		Если Инфо() Тогда
		
			Сообщить(" - Ошибка публикации файла: " + ИмяФайлаСообщения);
			Сообщить(ОписаниеОшибки());

		
		КонецЕсли; 
		Возврат;
		
	КонецПопытки;
	
	Если Инфо() Тогда 
		Сообщить(" - Опубликован файл: " + ИмяФайлаСообщения);
	КонецЕсли;
	
	// Удаляем ранее выгруженные файлы
	ФайлСообщения = Новый Файл(ИмяФайлаСообщения);
	МаскаФайлов = ПолучитьИмяФайлаОбменаФЛК(ПланыОбмена.ФизлицаКонтрагенты.ЭтотУзел(), Ссылка, "??????????");
	Файлы = НайтиФайлы(АдресОбмена, МаскаФайлов);
	Для Каждого Файл Из Файлы Цикл
		
		Если Файл.Имя <> ФайлСообщения.Имя Тогда
			
			Попытка
				
				// Пытаемся удалить файл со старым сообщением
				УдалитьФайлы(Файл.ПолноеИмя);
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОпубликоватьФайлОбмена(ИмяФайла, НомерСообщения)

// Функция получения файла с новым сообщением обмена
// Ищет и копирует в указанный файл файл с последним сообщением обмена
//
// Параметры:
//  ИмяФайла	- файл, в который будет произведено копирование файла с сообщением обмена
//
// Возвращаемое значение:
//  Булево - Истина - если файл с сообщением обмена получен и Ложь - в противном случае
//
Функция ПолучитьФайлОбмена(ИмяФайла)
	
	// Получаем маску для поиска файлов с сообщениями обмена
	МаскаФайлов = ПолучитьИмяФайлаОбменаФЛК(Ссылка, ПланыОбмена.Физлицаконтрагенты.ЭтотУзел(), "??????????");
	
	ИмяФайлаСообщения = "";
	// Ищем файлы по маске в каталоге загрузки
	Файлы = НайтиФайлы(АдресОбмена, МаскаФайлов);
	// Отбираем файл с максимальным номером в имени
	Для Каждого Файл Из Файлы Цикл
		
		Если ПустаяСтрока(ИмяФайлаСообщения) Или Файл.ПолноеИмя > ИмяФайлаСообщения Тогда
			
			ИмяФайлаСообщения = Файл.ПолноеИмя;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ИмяФайлаСообщения) Тогда
		Если Инфо()Тогда 
			Сообщить(" - Считывается файл " + ИмяФайлаСообщения);
		КонецЕсли;
		
		Попытка
			
			// Копируем файл с сообщением обмена в указанный файл
			КопироватьФайл(ИмяФайлаСообщения, ИмяФайла);
			
		Исключение
			Если Инфо() Тогда 
				Сообщить("   " + ОписаниеОшибки());
			КонецЕсли;
			Возврат Ложь;
			
		КонецПопытки;
		
		// Файл с сообщением обмена получен успешно
		Возврат Истина;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции // ПолучитьФайлОбмена(ИмяФайла)

// Процедура удаления файлов со старыми сообщениями обмена
// Удаляет файлы с именами равными или меньшими переданному номеру сообщения
// 
// Параметры:
//  НомерСообщения - номер сообщения
//
Процедура УдалитьФайлыОбмена(НомерСообщения)
	
	// Получаем имя файла с номером сообщения
	МаксИмяФайла = ПолучитьИмяФайлаОбменаФЛК(Ссылка, ПланыОбмена.ФизлицаКонтрагенты.ЭтотУзел(),
	Формат(НомерСообщения, "ЧЦ=10; ЧВН=; ЧГ=0")); 
	// Получаем маску для поиска файлов с сообщениями обмена
	МаскаФайлов = ПолучитьИмяФайлаОбменаФЛК(Ссылка, ПланыОбмена.ФизлицаКонтрагенты.ЭтотУзел(), "??????????");
	
	// Ищем файлы по маске в каталоге загрузки
	Файлы = НайтиФайлы(АдресОбмена, МаскаФайлов);
	// Удаление файлов со старыми сообщениями обмена
	Для Каждого Файл Из Файлы Цикл
		
		// Удаляем только файлы, имена которых меньше или равны имени файла с указанным номером сообщения
		Если Файл.Имя <= МаксИмяФайла Тогда
			
			Попытка
				
				// Пытаемся удалить файл
				УдалитьФайлы(Файл.ПолноеИмя);
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьФайлыОбмена(НомерСообщения)

Функция НайтиФизЛицо(Ссылка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Сотрудники.ФизЛицо как ФизЛицо
	                      |ИЗ
	                      |	Справочник.СотрудникиОрганизаций КАК Сотрудники
	                      |ГДЕ
	                      |	Сотрудники.Контрагент = &Контрагент");	
						  
	Запрос.УстановитьПараметр("Контрагент",Ссылка);					 
	Выб = Запрос.Выполнить().Выбрать();
	
	Если (Выб.Следующий()) Тогда 
		Возврат Выб.ФизЛицо;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ВходитВГруппуКонтрагентыДляЗУП(Ссылка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка
	                      |ИЗ
	                      |	Справочник.Контрагенты КАК Контрагенты
	                      |ГДЕ
	                      |	Ссылка в Иерархии (&Папка)");	
						  
	Запрос.УстановитьПараметр("Папка",Ссылка);					 
	Выб = Запрос.Выполнить().Выбрать();
	
	Возврат (Выб.Следующий());
КонецФункции

Процедура ОчиститьСправочникСотрудниковОтКонтрагента(Ссылка)
	
	ПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
	Запрос = Новый Запрос("Выбрать ССылка из Справочники.Сотрудники Где Контрагент=&Контрагент");
	Запрос.УстановитьПараметр("Контрагент",Ссылка);
	Выб = Запрос.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		
		Объект = Выб.Ссылка.Получитьобъект();
		Объект.Контрагент = ПустаяСсылка;
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСправочникСотрудниковОтФизЛица(Ссылка)

	ПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
	Запрос = Новый Запрос("Выбрать ССылка из Справочники.Сотрудники Где ФизическоеЛицо=&ФизическоеЛицо");
	Запрос.УстановитьПараметр("ФизическоеЛицо",Ссылка);
	
	Выб = Запрос.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		
		Объект = Выб.Ссылка.Получитьобъект();
		Объект.Контрагент = ПустаяСсылка;
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИмяФайлаОбменаФЛК(УзелИсточник, УзелПриемник, Постфикс = "") Экспорт
	
	// формируем имя файла, исходя из кодов источника и приемника сообщения обмена
	Возврат "MessageFL" + СокрЛП(УзелИсточник.Код) + "_" + СокрЛП(УзелПриемник.Код) + СокрЛП(Постфикс) + ".xml";
	
КонецФункции // ПолучитьИмяФайлаОбмена(УзелИсточник, УзелПриемник, Постфикс = "")
