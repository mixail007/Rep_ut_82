
// Процедура получения сообщения обмена данными
// Получает сообщение с новыми данными для этого узла и загружает данные
//
Процедура ПрочитатьСообщениеСИзменениями() Экспорт
	
	Перем НомерСообщения;	// Номер принимаемого сообщения
	
	// Формируем имя временного файла
	ИмяФайла = КаталогВременныхФайлов() + "\" + 
			   СформироватьИмяФайлаОбменаМеждуУзлами(Ссылка,ПланыОбмена.ОбменУТ_БП.ЭтотУзел());
	
	Сообщить("-------- Загрузка из " + Строка(ЭтотОбъект) + "------------");
	
	// Получаем копию файла обмена с новым сообщением во временный файл
	ФайлПолучен = ПолучитьФайлОбмена(ИмяФайла);
	
	Если ФайлПолучен Тогда
		
		Попытка
			
			// Читаем полученное сообщение из файла	
			НомерСообщения = ПрочитатьНовоеСообщение(ИмяФайла);
			
		Исключение
			
			Сообщить("    " + ОписаниеОшибки());
			
		КонецПопытки;
		
		Если НомерСообщения <> Неопределено Тогда
			
			// Удаляем файлы со старыми сообщениями обмена
			УдалитьФайлыОбмена(НомерСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		// Удаляем файл с сообщением обмена
		УдалитьФайлы(ИмяФайла);
		
	Исключение
	КонецПопытки;
	
	Сообщить("-------- Конец загрузки------------");
	
КонецПроцедуры // ПрочитатьСообщениеСИзменениями()

// Процедура записи сообщения с измененными данными
//
Процедура ЗаписатьСообщениеСИзменениями() Экспорт
	
	// Формируем имя временного файла
	ИмяФайла = КаталогВременныхФайлов() + "\" + 
			   СформироватьИмяФайлаОбменаМеждуУзлами(ПланыОбмена.ОбменУТ_БП.ЭтотУзел(), Ссылка);
	
	Сообщить("-------- Выгрузка в узел " + Строка(ЭтотОбъект) + " ------------");
	ПереименоватьФайлСтарыйПротокол();//
	// Записываем новое сообщение обмена в файл
	ПубликоватьФайл=Истина;
	НомерСообщения = ЗаписатьНовоеСообщение(ИмяФайла,ПубликоватьФайл);
	
	// Публикуем файл с сообщением обмена
	Если ПубликоватьФайл Тогда
		ОпубликоватьФайлОбмена(ИмяФайла, НомерСообщения);
	КонецЕсли;
		
	Попытка
		// Удаляем файл с сообщением обмена
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;	
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов() + "\" + "Protokol.txt");
	Исключение
	КонецПопытки;	
	
	Сообщить("-------- Конец выгрузки------------");
	
КонецПроцедуры // ЗаписатьСообщениеСИзменениями()

/////////////////////////////////////////////////////////////////////////////
//ЧТЕНИЕ СООБЩЕНИЙ

// Функция получения файла с новым сообщением обмена
// Ищет и копирует в указанный файл файл с последним сообщением обмена
//
// Параметры:
//  ИмяФайла	- файл, в который будет произведено копирование файла с сообщением обмена
//
// Возвращаемое значение:
//  Булево - Истина - если файл с сообщением обмена получен и Ложь - в противном случае
//
Функция ПолучитьФайлОбмена(ИмяФайла)
	
	// Получаем маску для поиска файлов с сообщениями обмена
	МаскаФайлов = СформироватьИмяФайлаОбменаМеждуУзлами(Ссылка, ПланыОбмена.ОбменУТ_БП.ЭтотУзел());
	
	ИмяФайлаСообщения = "";
	// Ищем файлы по маске в каталоге загрузки
	Файлы = НайтиФайлы(КаталогОбменаИнформацией, МаскаФайлов);
	// Отбираем файл с максимальным номером в имени
	Для Каждого Файл Из Файлы Цикл
		
		Если ПустаяСтрока(ИмяФайлаСообщения) Или Файл.ПолноеИмя > ИмяФайлаСообщения Тогда
			
			ИмяФайлаСообщения = Файл.ПолноеИмя;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ИмяФайлаСообщения) Тогда
		
		Сообщить(" - Считывается файл " + ИмяФайлаСообщения);
		
		Попытка
			
			// Копируем файл с сообщением обмена в указанный файл
			КопироватьФайл(ИмяФайлаСообщения, ИмяФайла);
			
		Исключение
			
			Сообщить("   " + ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
		// Файл с сообщением обмена получен успешно
		Возврат Истина;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции // ПолучитьФайлОбмена(ИмяФайла)

Функция ПрочитатьНовоеСообщение(ИмяФайла)
	
	// Создаем объект чтения XML
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	// Загрузка из найденного файла
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	НомерСообщения = ЧтениеСообщения.НомерСообщения;
	Если ЧтениеСообщения.Отправитель <> Ссылка Тогда
		
		// Сообщение предназначено не для этого узла
		ВызватьИсключение "Неверный узел";
		
	КонецЕсли;
	
	ЗаписатьУдалениеРегистрации(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	// Удаляем регистрацию изменений для узла отправителя сообщения
	// по номеру принятого сообщения, полученного из сообщения
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	// Читаем данные из сообщения пока это возможно
	Счетчик = 0;
	Пока ВозможностьЧтенияДанных(ЧтениеXML) Цикл
		
		// Читаем очередное значение
		Данные = ПрочитатьДанные(ЧтениеXML);
#Если Клиент Тогда
		Счетчик = Счетчик + 1;
		Состояние("Загрузка данных: " + Строка(Счетчик));
#КонецЕсли		
		
		// Устанавливаем отправителя, чтобы для него при записи не было бы зарегистрировано изменение
		Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
		// Включает режим Загрузка, так как данные могут загружаться в произвольном порядке и 
        // нужно отключить такой контроль данных, как проверка уникальности номеров
		Данные.ОбменДанными.Загрузка = Истина;
		// Запись перенесенных данных
		Данные.Записать();
		
	КонецЦикла;
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	
	Возврат НомерСообщения;
	
КонецФункции // ПрочитатьНовоеСообщение(ИмяФайла)

// Функция определяет возвможность чтения очередных данных из объекта ЧтениеXML
//
// Параметры:
//  ЧтениеXML - объект чтения XML
//
// Вовзращаемое значение:
//  Булево - Истина, если возможно чтение очередных данных или Ложь - в противном случае
//
Функция ВозможностьЧтенияДанных(ЧтениеXML)
	
	// Получаем тип данных XML, который может быть считан в данный момент
	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипXML = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат ВозможностьЧтенияXML(ЧтениеXML);
	
КонецФункции // ВозможностьЧтенияДанных(ЧтениеXML)

Функция ПрочитатьДанные(ЧтениеXML)
	
	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипXML = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Пытаемся прочесть значени из объекта ЧтениеXML стандартным образом
	Возврат ПрочитатьXML(ЧтениеXML);
	
КонецФункции // ПрочитатьДанные(ЧтениеXML)


Процедура ЗаписатьУдалениеРегистрации(Отправитель,НомерПринятого)

	//Выборка = ПланыОбмена.ВыбратьИзменения(Отправитель,НомерПринятого);
	//Пока Выборка.Следующий() Цикл
	//	Запись = РегистрыСВедений.УдалениеРегистрации.СоздатьМенеджерЗаписи();
	//	Запись.Время = ТекущаяДата();
	//	Запись.НомерСообщения =  НомерПринятого;
	//	Запись.Объект	= Выборка.Получить().Ссылка;
	//	Запись.УзелОбмена = Отправитель;
	//	Запись.Записать();
	//КонецЦикла; 

КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////
//ЗАПИСЬ СООБЩЕНИЙ

// Процедура публикации файла с сообщением обмена
//
// Параметры:
//  ИмяФайла 		- имя файла, содержащего сообщение обмена
//  НомерСообщения  - номер сообщения отправляемых данных
//
Процедура ОпубликоватьФайлОбмена(ИмяФайла, НомерСообщения)
	
	ИмяФайлаСообщения = СформироватьИмяФайлаОбменаМеждуУзлами(ПланыОбмена.ОбменУТ_БП.ЭтотУзел(), 
	Ссылка);//, Формат(НомерСообщения, "ЧЦ=10; ЧВН=; ЧГ=0")
	
	Путь = СтрЗаменить(КаталогОбменаИнформацией, "\", "/");
	
	// Переименовываем старый  обмен в целих сохранения информации
	ФайлСообщения = Новый Файл(ИмяФайлаСообщения);
	МаскаФайлов = СформироватьИмяФайлаОбменаМеждуУзлами(ПланыОбмена.ОбменУТ_БП.ЭтотУзел(), Ссылка);
	Файлы = НайтиФайлы(КаталогОбменаИнформацией, МаскаФайлов);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.Имя = ФайлСообщения.Имя Тогда
			Попытка
				// Пытаемся Перименоватьфайл
				ИмяСт =  Путь + ?(Прав(Путь, 1) = "/", "", "/") + ИмяФайлаСообщения;
				СтрВремя = СтрЗаменить(Строка(ТекущаяДата()),":","-");
				ИмяНов = Путь + ?(Прав(Путь, 1) = "/", "", "/") + ИмяФайлаСообщения+"."+СтрВремя+".Переименовано.xml";
				ПереместитьФайл(ИмяСт, ИмяНов);
			Исключение
				Сообщить("Проблема с переименованием старго файла выгрузки. Обратитесь к сопровождающим программистам");
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;

		
	Попытка
		
		КопироватьФайл(ИмяФайла, Путь + ?(Прав(Путь, 1) = "/", "", "/") + ИмяФайлаСообщения);
		
	Исключение
		
		Сообщить(" - Ошибка публикации файла: " + ИмяФайлаСообщения);
		Сообщить(ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		КопироватьФайл(КаталогВременныхФайлов() + "\" + "Protokol.txt", Путь + ?(Прав(Путь, 1) = "/", "", "/") + "Protokol.txt")
		
	Исключение
		
		Сообщить(" - Ошибка публикации файла: " + ИмяФайлаСообщения);
		Сообщить(ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	
	Сообщить(" - Опубликован файл: " + ИмяФайлаСообщения);
	
	// Удаляем ранее выгруженные файлы
	ФайлСообщения = Новый Файл(ИмяФайлаСообщения);
	МаскаФайлов = СформироватьИмяФайлаОбменаМеждуУзлами(ПланыОбмена.ОбменУТ_БП.ЭтотУзел(), Ссылка);
	Файлы = НайтиФайлы(КаталогОбменаИнформацией, МаскаФайлов);
	Для Каждого Файл Из Файлы Цикл
		
		Если Файл.Имя <> ФайлСообщения.Имя Тогда
			
			Попытка
				
				// Пытаемся удалить файл со старым сообщением
				УдалитьФайлы(Файл.ПолноеИмя);
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОпубликоватьФайлОбмена(ИмяФайла, НомерСообщения)


// Процедура публикации файла с сообщением обмена
//
// Параметры:
//  ИмяФайла 		- имя файла, содержащего сообщение обмена
//  НомерСообщения  - номер сообщения отправляемых данных
//
Процедура ПереименоватьФайлСтарыйПротокол()
	
	Путь = СтрЗаменить(КаталогОбменаИнформацией, "\", "/");
	ФайлСообщения = Новый Файл("Protokol.txt");
	МаскаФайлов = "Protokol.txt";
	Файлы = НайтиФайлы(КаталогОбменаИнформацией, МаскаФайлов);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.Имя = ФайлСообщения.Имя Тогда
			Попытка
				// Пытаемся Перименоватьфайл
				ИмяСт =  Путь + ?(Прав(Путь, 1) = "/", "", "/") +"Protokol.txt";
				СтрВремя = СтрЗаменить(Строка(ТекущаяДата()),":","-");
				ИмяНов = Путь + ?(Прав(Путь, 1) = "/", "", "/") + "Protokol"+"."+СтрВремя+".Переименовано.txt";
				ПереместитьФайл(ИмяСт, ИмяНов);
			Исключение
				Сообщить("Проблема с переименованием старго файла выгрузки протокла. Обратитесь к сопровождающим программистам");
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ОпубликоватьФайлОбмена(ИмяФайла, НомерСообщения)


// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ЗаписатьНовоеСообщение(ИмяФайла,ПубликоватьФайл)

	ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиСБухгалтерией.Создать();
	ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайла;
	ОбработкаОбменаДаннымиXML.РежимОбмена = "Выгрузка";
	ОбработкаОбменаДаннымиXML.ИмяФайлаПротоколаОбмена= КаталогВременныхФайлов() + "\" + "Protokol.txt";
	
	ЗагрузитьПравилаОбмена(ОбработкаОбменаДаннымиXML);
	
	//ОбработкаОбменаДаннымиXML.мБылиПрочитаныПравилаОбменаПриЗагрузке = Ложь;

	
	Стр = ОбработкаОбменаДаннымиXML.ТаблицаНастройкиПараметров.Добавить();
	Стр.Наименование = "НомерОтправленногоСообщения";
	Стр.Имя			 = "НомерОтправленногоСообщения";
	Стр.Значение	 = Ссылка.НомерОтправленного + 1;
	Стр.ПередаватьПараметрПриВыгрузке	 = Истина;
	
	//ОбработкаОбменаДаннымиXML.ВыводВОкноСообщенийИнформационныхСообщений = ДанныеНастройки.ВыводитьИнформационныеСообщенияПриАвтоматическомОбменеДанными;
	//ОбработкаОбменаДаннымиXML.ВыводВПротоколИнформационныхСообщений = ОбработкаОбменаДаннымиXML.ВыводВОкноСообщенийИнформационныхСообщений;	
	
	ОбработкаОбменаДаннымиXML.ДописыватьДанныеВПротоколОбмена = Ложь;
	ОбработкаОбменаДаннымиXML.ВыгружатьТолькоРазрешенные = Истина;
	ОбработкаОбменаДаннымиXML.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0;
	
	ОбработкаОбменаДаннымиXML.ФлагРежимОтладки = Истина;
	//ОбработкаОбменаДаннымиXML.ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена = (ДанныеНастройки.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных > 0);
	//ОбработкаОбменаДаннымиXML.КоличествоЭлементовВТранзакцииПриВыгрузкеДляПлановОбмена = ДанныеНастройки.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных;
	//ОбработкаОбменаДаннымиXML.АрхивироватьФайл = ДанныеНастройки.ВыполнятьАрхивациюФайловОбмена;
//	ОбработкаОбменаДаннымиXML.ВыполнитьОбменДаннымиВОптимизированномФормате = Истина;
	ОбработкаОбменаДаннымиXML.ВестиДополнительныйКонтрольЗаписиВXML = Истина;
	
	УстановитьУзелОбмена(ОбработкаОбменаДаннымиXML,Ссылка);
	
	ОбработкаОбменаДаннымиXML.ВыполнитьВыгрузку(ПубликоватьФайл);

    Возврат Ссылка.НомерОтправленного + 1;
	
КонецФункции // ЗаписатьНовоеСообщение(ИмяФайла)()

Процедура УстановитьУзелОбмена(ОбработкаОбменаДаннымиXML,Узел)

	ТаблицаПравилВыгрузки = ОбработкаОбменаДаннымиXML.ТаблицаПравилВыгрузки;	
    УзелОбмена = Узел;
	
	УстановитьУзел(ТаблицаПравилВыгрузки.Строки,УзелОбмена);
	
КонецПроцедуры

Процедура УстановитьУзел(ТаблицаПравилВыгрузкиСтроки,УзелОбмена)

	Для каждого Стр Из ТаблицаПравилВыгрузкиСтроки Цикл
	
		Если Стр.ЭтоГруппа Тогда
			УстановитьУзел(Стр.Строки,УзелОбмена)
		Иначе
			Стр.СсылкаНаУзелОбмена = УзелОбмена;
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры
 

// Процедура удаления файлов со старыми сообщениями обмена
// Удаляет файлы с именами равными или меньшими переданному номеру сообщения
// 
// Параметры:
//  НомерСообщения - номер сообщения
//
Процедура УдалитьФайлыОбмена(НомерСообщения)
	
	// Получаем имя файла с номером сообщения
	МаксИмяФайла = СформироватьИмяФайлаОбменаМеждуУзлами(Ссылка, ПланыОбмена.ОбменУТ_БП.ЭтотУзел()); 
	// Получаем маску для поиска файлов с сообщениями обмена
	МаскаФайлов = СформироватьИмяФайлаОбменаМеждуУзлами(Ссылка, ПланыОбмена.ОбменУТ_БП.ЭтотУзел());
	
	// Ищем файлы по маске в каталоге загрузки
	Файлы = НайтиФайлы(КаталогОбменаИнформацией, МаскаФайлов);
	// Удаление файлов со старыми сообщениями обмена
	Для Каждого Файл Из Файлы Цикл
		
		// Удаляем только файлы, имена которых меньше или равны имени файла с указанным номером сообщения
		Если Файл.Имя <= МаксИмяФайла Тогда
			
			Попытка
				
				// Пытаемся удалить файл
				УдалитьФайлы(Файл.ПолноеИмя);
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьФайлыОбмена(НомерСообщения)

Процедура ЗагрузитьПравилаОбмена(ОбработкаОбменаДаннымиXML)

	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";

	МакетПравилОбмена = ЭтотОбъект.ПолучитьМакет("ПравилаОбменаСБухгалтерией");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);

	ОбработкаОбменаДаннымиXML.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	ОбработкаОбменаДаннымиXML.ЗагрузитьПравилаОбмена(ИмяВременногоФайлаПравилОбмена);

	Попытка
		УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);  // Удаляем временный файл правил
	Исключение 
	КонецПопытки;

КонецПроцедуры

 