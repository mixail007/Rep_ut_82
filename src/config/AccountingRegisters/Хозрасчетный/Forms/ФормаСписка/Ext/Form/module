Процедура УстановитьВидСравнения()

	Если Отбор.Счет.Использование Тогда
		Отбор.Счет.ВидСравнения = ВидСравнения.ВИерархии;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьУсловие(ТекстПериода, Отбор, ЭлементОтбора, Запрос)

	Сравнение = ЭлементОтбора.ВидСравнения;
	ИмяОтбора = ЭлементОтбора.Имя;

	Если Сравнение = ВидСравнения.Равно Тогда
		ТекстПериода = ТекстПериода + "
		|			И Хозрасчетный."+ИмяОтбора+" = &"+ИмяОтбора;

		Запрос.УстановитьПараметр(ИмяОтбора, ЭлементОтбора.Значение);

	ИначеЕсли Сравнение = ВидСравнения.ВИерархии Тогда
		ТекстПериода = ТекстПериода + "
		|			И Хозрасчетный."+ИмяОтбора+" В ИЕРАРХИИ (&"+ИмяОтбора+")";

		Запрос.УстановитьПараметр(ИмяОтбора, ЭлементОтбора.Значение);
		
	ИначеЕсли Сравнение = ВидСравнения.НеРавно Тогда
		ТекстПериода = ТекстПериода + "
		|			И Хозрасчетный."+ИмяОтбора+" <> &"+ИмяОтбора;

		Запрос.УстановитьПараметр(ИмяОтбора, ЭлементОтбора.Значение);

	ИначеЕсли Сравнение = ВидСравнения.Меньше Тогда
		ТекстПериода = ТекстПериода + "
		|			И Хозрасчетный."+ИмяОтбора+" < &"+ИмяОтбора;

		Запрос.УстановитьПараметр(ИмяОтбора, ЭлементОтбора.Значение);

	ИначеЕсли Сравнение = ВидСравнения.МеньшеИлиРавно Тогда
		ТекстПериода = ТекстПериода + "
		|			И Хозрасчетный."+ИмяОтбора+" <= &"+ИмяОтбора;

		Запрос.УстановитьПараметр(ИмяОтбора, ЭлементОтбора.Значение);

	ИначеЕсли Сравнение = ВидСравнения.Больше Тогда
		ТекстПериода = ТекстПериода + "
		|			И Хозрасчетный."+ИмяОтбора+" > &"+ИмяОтбора;

		Запрос.УстановитьПараметр(ИмяОтбора, ЭлементОтбора.Значение);

	ИначеЕсли Сравнение = ВидСравнения.БольшеИлиРавно Тогда
		ТекстПериода = ТекстПериода + "
		|			И Хозрасчетный."+ИмяОтбора+" >= &"+ИмяОтбора;

		Запрос.УстановитьПараметр(ИмяОтбора, ЭлементОтбора.Значение);

	ИначеЕсли Сравнение = ВидСравнения.Интервал Тогда
		ТекстПериода = ТекстПериода + "
		|			И (Хозрасчетный."+ИмяОтбора+" > &Нач"+ИмяОтбора+" И
		|			Хозрасчетный."+ИмяОтбора+" < &Кон"+ИмяОтбора+")";

		Запрос.УстановитьПараметр("Нач"+ИмяОтбора, ЭлементОтбора.ЗначениеС);
		Запрос.УстановитьПараметр("Кон"+ИмяОтбора, ЭлементОтбора.ЗначениеПо);

	ИначеЕсли Сравнение = ВидСравнения.ИнтервалВключаяГраницы Тогда
		ТекстПериода = ТекстПериода + "
		|			И (Хозрасчетный."+ИмяОтбора+" >= &Нач"+ИмяОтбора+" И
		|			Хозрасчетный."+ИмяОтбора+" <= &Кон"+ИмяОтбора + ")";

		Запрос.УстановитьПараметр("Нач"+ИмяОтбора, ЭлементОтбора.ЗначениеС);
		Запрос.УстановитьПараметр("Кон"+ИмяОтбора, ЭлементОтбора.ЗначениеПо);

	ИначеЕсли Сравнение = ВидСравнения.ИнтервалВключаяНачало Тогда
		ТекстПериода = ТекстПериода + "
		|			И (Хозрасчетный."+ИмяОтбора+" >= &Нач"+ИмяОтбора+" И
		|			Хозрасчетный."+ИмяОтбора+" < &Кон"+ИмяОтбора + ")";

		Запрос.УстановитьПараметр("Нач"+ИмяОтбора, ЭлементОтбора.ЗначениеС);
		Запрос.УстановитьПараметр("Кон"+ИмяОтбора, ЭлементОтбора.ЗначениеПо);

	ИначеЕсли Сравнение = ВидСравнения.ИнтервалВключаяОкончание Тогда
		ТекстПериода = ТекстПериода + "
		|			И (Хозрасчетный."+ИмяОтбора+" > &Нач"+ИмяОтбора+" И
		|			Хозрасчетный."+ИмяОтбора+" <= &Кон"+ИмяОтбора + ")";

		Запрос.УстановитьПараметр("Нач"+ИмяОтбора, ЭлементОтбора.ЗначениеС);
		Запрос.УстановитьПараметр("Кон"+ИмяОтбора, ЭлементОтбора.ЗначениеПо);

	ИначеЕсли Сравнение = ВидСравнения.ВСписке Тогда
		ТекстПериода = ТекстПериода + "
		|			И Хозрасчетный."+ИмяОтбора+" В (&Список"+ИмяОтбора+")";

		Запрос.УстановитьПараметр("Список"+ИмяОтбора, ЭлементОтбора.Значение);

	ИначеЕсли Сравнение = ВидСравнения.НеВСписке Тогда
		ТекстПериода = ТекстПериода + "
		|			И Хозрасчетный."+ИмяОтбора+" НЕ В (&Список"+ИмяОтбора+")";

		Запрос.УстановитьПараметр("Список"+ИмяОтбора, ЭлементОтбора.Значение);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьУсловиеСчет(ТекстПериода, Отбор, ЭлементОтбора, Запрос)

	Сравнение = ЭлементОтбора.ВидСравнения;
	ИмяОтбораДт = "СчетДт";
	ИмяОтбораКт = "СчетКт";

	Запрос.УстановитьПараметр( "Счет", ЭлементОтбора.Значение);
	Если Сравнение = ВидСравнения.Равно Тогда
		ТекстПериода = ТекстПериода + "
		|			И (Хозрасчетный.СчетДт = &Счет
		|		   ИЛИ Хозрасчетный.СчетКт = &Счет)";

	ИначеЕсли Сравнение = ВидСравнения.ВИерархии Тогда
		ТекстПериода = ТекстПериода + "
		|			И (Хозрасчетный.СчетДт В ИЕРАРХИИ (&Счет)
		|		   ИЛИ Хозрасчетный.СчетКт В ИЕРАРХИИ (&Счет))";

	ИначеЕсли Сравнение = ВидСравнения.НеВИерархии Тогда
		ТекстПериода = ТекстПериода + "
		|			И (Хозрасчетный.СчетДт НЕ В ИЕРАРХИИ (&Счет)
		|		    И  Хозрасчетный.СчетКт НЕ В ИЕРАРХИИ (&Счет))";

	ИначеЕсли Сравнение = ВидСравнения.НеРавно Тогда
		ТекстПериода = ТекстПериода + "
		|			И (Хозрасчетный.СчетДт <> &Счет
		|		    И  Хозрасчетный.СчетКт <> &Счет)";

	ИначеЕсли Сравнение = ВидСравнения.ВСписке Тогда
		ТекстПериода = ТекстПериода + "
		|			И (Хозрасчетный.СчетДт В (&СписокСчет)
		|		   ИЛИ Хозрасчетный.СчетКт В (&СписокСчет))";
		
		Запрос.УстановитьПараметр( "СписокСчет", ЭлементОтбора.Значение);

	ИначеЕсли Сравнение = ВидСравнения.НеВСписке Тогда
		ТекстПериода = ТекстПериода + "
		|			И (Хозрасчетный.СчетДт НЕ В (&СписокСчет)
		|		    И  Хозрасчетный.СчетКт НЕ В (&СписокСчет))";
		
		Запрос.УстановитьПараметр( "СписокСчет", ЭлементОтбора.Значение);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкаПроводок(Кнопка)

	Запрос       = Новый Запрос();
	ТекстПериода = "";

	Для Каждого ЭлементОтбора из Отбор Цикл

		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;

		Если Найти("Период, Активность, Регистратор, Счет, СчетДт, СчетКт, Организация, Сумма, Содержание, НомерЖурнала", ЭлементОтбора.Имя) = 0 Тогда
			Сообщить("Отбор """ + ЭлементОтбора.Представление + """ не учитывается при проверке проводок.", СтатусСообщения.Информация);
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.Имя = "Счет" Тогда
			ДобавитьУсловиеСчет(ТекстПериода, Отбор, ЭлементОтбора, Запрос);
		Иначе
			ДобавитьУсловие(ТекстПериода, Отбор, ЭлементОтбора, Запрос);
		КонецЕсли;

	КонецЦикла;

	Если НЕ ПустаяСтрока(ТекстПериода) Тогда
		ТекстПериода = Сред(ТекстПериода, 6);
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	|	Хозрасчетный.СчетДт.Код КАК КодДт,
	|	Хозрасчетный.СчетКт.Код КАК КодКт,
	|	Хозрасчетный.Содержание КАК Комментарий,
	|	СУММА(1) КАК ВесПроводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Хозрасчетный.СчетДт КАК СчетДт,
	|			Хозрасчетный.СчетКт КАК СчетКт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|				ПО Хозрасчетный.СчетДт = КорректныеКорреспонденцииСчетов.СчетДт И Хозрасчетный.СчетКт = КорректныеКорреспонденцииСчетов.СчетКт"
	+ ?(ПустаяСтрока(ТекстПериода) = Ложь, "
	|		ГДЕ", "") + ТекстПериода + "
	|
	|		ОБЪЕДИНИТЬ
	|
	|		ВЫБРАТЬ
	|			Хозрасчетный.СчетДт,
	|			Хозрасчетный.СчетКт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|				ПО Хозрасчетный.СчетДт = КорректныеКорреспонденцииСчетов.СчетДт И (КорректныеКорреспонденцииСчетов.СчетКт = &ПустаяСсылка)"
	+ ?(ПустаяСтрока(ТекстПериода) = Ложь, "
	|		ГДЕ", "") + ТекстПериода + "
	|
	|		ОБЪЕДИНИТЬ
	|
	|		ВЫБРАТЬ
	|			Хозрасчетный.СчетДт,
	|			Хозрасчетный.СчетКт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|				ПО (КорректныеКорреспонденцииСчетов.СчетДт = &ПустаяСсылка) И Хозрасчетный.СчетКт = КорректныеКорреспонденцииСчетов.СчетКт"
	+ ?(ПустаяСтрока(ТекстПериода) = Ложь, "
	|		ГДЕ", "") + ТекстПериода + ") КАК Проверенные
	|		ПО Проверенные.СчетКт = Хозрасчетный.СчетКт И Проверенные.СчетДт = Хозрасчетный.СчетДт
	|ГДЕ
	|	((Проверенные.СчетКт) ЕСТЬ NULL )" + ?(ПустаяСтрока(ТекстПериода) = Ложь, " И", "") + ТекстПериода;

	ТекстЗапроса = ТекстЗапроса + "
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	|	Хозрасчетный.Содержание
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодДт,
	|	КодКт";

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПустаяСсылка", ПланыСчетов.Хозрасчетный.ПустаяСсылка()); 
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Сообщить("Обнаружены некорректные корреспонденции.");

		ФормаСпискаКорреспонденций = РегистрыСведений.КорректныеКорреспонденцииСчетов.ПолучитьФорму("ФормаСпискаКорреспонденций");
		ФормаСпискаКорреспонденций.ТаблицаКорреспонденций = Результат.Выгрузить();
		ФормаСпискаКорреспонденций.Открыть();

	Иначе
		Предупреждение("Проверка проводок завершена!");
	КонецЕсли;

КонецПроцедуры

Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	Если ТипЗнч(ВыбраннаяСтрока.Регистратор) = Тип("ДокументСсылка.ОперацияБух") Тогда

		СтандартнаяОбработка = Ложь;

		ФормаОперации = ВыбраннаяСтрока.Регистратор.ПолучитьОбъект().ПолучитьФорму();
		ФормаОперации.ПараметрТекущаяСтрока = ВыбраннаяСтрока.НомерСтроки;
		ФормаОперации.ПараметрРегистр       = "Хозрасчетный";
		ФормаОперации.Открыть();

	КонецЕсли;

КонецПроцедуры

Процедура ОтборСчетПриИзменении(Элемент)

	Отбор.Счет.Использование = НЕ ЗначениеНеЗаполнено(Элемент.Значение);
	УстановитьВидСравнения();

КонецПроцедуры

Процедура ОтборОрганизацияПриИзменении(Элемент)

	Отбор.Организация.Использование = НЕ ЗначениеНеЗаполнено(Элемент.Значение);

КонецПроцедуры

Процедура ИспользованиеОтбораСчетПриИзменении(Элемент)

	УстановитьВидСравнения();

КонецПроцедуры

