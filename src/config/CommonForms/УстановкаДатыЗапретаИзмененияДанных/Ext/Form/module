
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполнения дерева основной даты запрета
Процедура ЗаполнитьОсновноеДерево()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫбрать Ссылка КАК Роль, Даты.ГраницаЗапретаИзменений КАК ГраницаЗапретаИзменений ИЗ Перечисление.НаборПравПользователей КАК Роли
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Даты
	|ПО Роли.Ссылка = Даты.Роль
	|И Организация = &ПустаяОрганизация
	|";
	//|ГДЕ Ссылка <> &ПолныеПрава";
	
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	//Запрос.УстановитьПараметр("ПолныеПрава", Перечисления.НаборПравПользователей.ПолныеПрава);
	КореньДерева = ДеревоОсновнойДаты.Строки.Добавить();
	ОбщаяДата = Ложь;
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДерева = КореньДерева.Строки.Добавить();
		СтрокаДерева.НаборПрав =  Выборка.Роль;
		СтрокаДерева.Граница = Выборка.ГраницаЗапретаИзменений;		
		//ЕСли СтрокаДерева.Граница = Дата('39991101') Тогда
		//	СтрокаДерева.Граница = Дата('00010101');
		//КонецЕсли;
		ЕСли ОбщаяДата = Ложь Тогда
			ОбщаяДата=СтрокаДерева.Граница;
		Иначе
			Если ОбщаяДата <> Неопределено И ОбщаяДата<>СтрокаДерева.Граница Тогда
				ОбщаяДата = Неопределено;
			КонецЕсли;			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбщаяДата <> Неопределено Тогда
		КореньДерева.Граница = ОбщаяДата;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения дерева даты запрета регламентированных данных
Процедура ЗаполнитьРеглДерево()
	Перем ОбщаяДата;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|Организации.Ссылка КАК Организация,  
	|Роли.Ссылка КАК Роль,
	|ГраницыЗапрета.ГраницаЗапретаИзменений КАК ГраницаЗапретаИзменений
	|Из Справочник.Организации КАК Организации
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.НаборПравПользователей КАК Роли
	|	По Истина
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапрета
	|	По ГраницыЗапрета.Организация = Организации.Ссылка
	|	И  ГраницыЗапрета.Роль = Роли.Ссылка
	|
	//|ГДЕ Роли.Ссылка <> &ПолныеПрава
    |
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	//Запрос.УстановитьПараметр("ПолныеПрава", Перечисления.НаборПравПользователей.ПолныеПрава);
	
	СтрокаОрганизации = Неопределено;
	
	ОсновныеДаты = Новый Соответствие;
	Для Каждого СтрокаДерева ИЗ ДеревоОсновнойДаты.Строки[0].Строки Цикл
		ОсновныеДаты[СтрокаДерева.НаборПрав] = СтрокаДерева.Граница;
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл   
		ЕСли СтрокаОрганизации = Неопределено ИЛИ Выборка.Организация <> СтрокаОрганизации.ОрганизацияРоль Тогда
			Если СтрокаОрганизации <> Неопределено Тогда
				Если Не СтрокаОрганизации.ЕстьОтличия Тогда
					ДеревоРеглДаты.Строки.Удалить(СтрокаОрганизации);
				Иначе
					Если ОбщаяДата <> Неопределено Тогда
						СтрокаОрганизации.Граница = ОбщаяДата;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 			
			СтрокаОрганизации = ДеревоРеглДаты.Строки.Добавить();
			СтрокаОрганизации.ОрганизацияРоль = Выборка.Организация;
			ТекущаяОргагизация = Выборка.Организация;
			ОбщаяДата = Ложь;
		КонецЕсли;
		
		СтрокаРоли = СтрокаОрганизации.Строки.Добавить();
		СтрокаРоли.ОрганизацияРоль = Выборка.Роль;
		СтрокаРоли.Граница = Выборка.ГраницаЗапретаИзменений;
		Если Выборка.ГраницаЗапретаИзменений<>NULL И СтрокаРоли.Граница <> ОсновныеДаты[СтрокаРоли.ОрганизацияРоль] Тогда
			СтрокаОрганизации.ЕстьОтличия = Истина;
		КонецЕсли;			
		
		ЕСли ОбщаяДата = Ложь Тогда
			ОбщаяДата=СтрокаРоли.Граница;
		Иначе
			Если ОбщаяДата <> Неопределено И ОбщаяДата<>СтрокаРоли.Граница Тогда
				ОбщаяДата = Неопределено;
			КонецЕсли;			
		КонецЕсли;
		
	
	КонецЦикла;
	
	Если СтрокаОрганизации <> Неопределено Тогда
		Если Не СтрокаОрганизации.ЕстьОтличия Тогда
			ДеревоРеглДаты.Строки.Удалить(СтрокаОрганизации);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура СохранитьДанные()
	
	ОсновныеДаты = Новый Соответствие;
		
	Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
	Набор.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка());
	Для Каждого СтрокаРоли ИЗ ДеревоОсновнойДаты.Строки[0].Строки Цикл
		Запись = Набор.Добавить();
		Запись.Организация = Справочники.Организации.ПустаяСсылка();
		Запись.Роль = СтрокаРоли.НаборПрав;		
		Запись.ГраницаЗапретаИзменений = СтрокаРоли.Граница;
		ОсновныеДаты[Запись.Роль] = Запись.ГраницаЗапретаИзменений;
		
	КонецЦикла;
	Набор.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|Организации.Ссылка КАК Организация  	
	|Из Справочник.Организации КАК Организации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор.Очистить();
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		СтрокаДерева = ДеревоРеглДаты.Строки.Найти(Выборка.Организация, "ОрганизацияРоль");
		Для Каждого Значение Из Перечисления.НаборПравПользователей Цикл
			//Если Значение = Перечисления.НаборПравПользователей.ПолныеПрава Тогда
			//	Продолжить;
			//КонецЕсли;
			Запись=Набор.Добавить();
			Запись.Организация = Выборка.Организация;
			Запись.Роль = Значение;
			Если СтрокаДерева=Неопределено Тогда
				Запись.ГраницаЗапретаИзменений = ОсновныеДаты[Запись.Роль];
			Иначе
				СтрокаРоли = СтрокаДерева.Строки.Найти(Запись.Роль, "ОрганизацияРоль");
				Запись.ГраницаЗапретаИзменений = СтрокаРоли.Граница;
			КонецЕсли;			
		КонецЦикла;
		Набор.Записать();
	КонецЦикла;
	
	
	УстановитьПараметрГраницыЗапретаИзмененияДанных();
	Модифицированность = Ложь;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "Перед открытием формы"
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЕстьДоступ = Ложь;
	
	МетаданныеНабораПрав  = Метаданные.Перечисления.НаборПравПользователей.ЗначенияПеречисления;
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Для каждого РольПользователя Из ТекущийПользователь.Роли Цикл
		Если Строка(РольПользователя) = Строка(Перечисления.НаборПравПользователей.ПолныеПрава) Тогда
			ЕстьДоступ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	//Если в настройках пользователя стоит запрет на изменение границы
	Если НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РазрешитьРедактированиеГраницыЗапретаИзмененияДанных") Тогда
		ЕстьДоступ = Ложь;
	КонецЕсли;

	Если ЕстьДоступ Тогда
		ЗаполнитьОсновноеДерево();
		ЗаполнитьРеглДерево();
	Иначе 
		Предупреждение("Вы не можете использовать данный инструмент!", 10); 
		Отказ = Истина;
	КонецЕсли;
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ СТРАНИЦЫ ПАНЕЛИ "Основная дата"

Процедура ДеревоОсновнойДатыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.НаборПрав.Пустая() Тогда
		ОформлениеСтроки.Ячейки.НаборПрав.УстановитьТекст("Все роли");
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
	КонецЕсли;		
	ОформлениеСтроки.Ячейки.НаборПрав.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.НаборПрав.ИндексКартинки = 0;
КонецПроцедуры

Процедура ДеревоОсновнойДатыГраницаПриИзменении(Элемент)
	Для каждого ПодчиненнаяСтрока ИЗ ЭлементыФормы.ДеревоОсновнойДаты.ТекущаяСтрока.Строки Цикл
		ПодчиненнаяСтрока.Граница = Элемент.Значение;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ СТРАНИЦЫ ПАНЕЛИ "Ограничение регламентной информации"

Процедура ДеревоРеглДатыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.ОрганизацияРоль.ОтображатьКартинку = Истина;
	
	Если ДанныеСтроки.Уровень() = 0 Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
		ОформлениеСтроки.Ячейки.ОрганизацияРоль.ИндексКартинки = 1;
	Иначе
		ОформлениеСтроки.Ячейки.ОрганизацияРоль.ИндексКартинки = 0;
	КонецЕсли;
КонецПроцедуры

Процедура ДеревоРеглДатыГраницаПриИзменении(Элемент)
	Для каждого ПодчиненнаяСтрока ИЗ ЭлементыФормы.ДеревоРеглДаты.ТекущаяСтрока.Строки Цикл
		ПодчиненнаяСтрока.Граница = Элемент.Значение;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ДеревоРеглДатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Отказ = Истина;
	
	Форма = Справочники.Организации.ПолучитьФормуВыбора();
	Организация = ФОрма.ОткрытьМодально();
	Если Организация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаОрганизации = ДеревоРеглДаты.Строки.Добавить();
	СтрокаОрганизации.ОрганизацияРоль = Организация;
	Для Каждого Значение Из Перечисления.НаборПравПользователей Цикл
		//Если Значение = Перечисления.НаборПравПользователей.ПолныеПрава Тогда
		//	Продолжить;
		//КонецЕсли;
		СтрокаРоли = СтрокаОрганизации.Строки.Добавить();
		СтрокаРоли.ОрганизацияРоль = Значение;
	КонецЦикла;
	ЭлементыФормы.ДеревоРеглДаты.Развернуть(СтрокаОрганизации, Истина);
	
КонецПроцедуры

Процедура ДеревоРеглДатыПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущаяСтрока.Уровень()>0 Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Запись данных в соотв. регистр сведений
Процедура КнопкаВыполнитьНажатие(Элемент)
	СохранитьДанные();
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьДанные();
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры





ДеревоРеглДаты.Колонки.Добавить("ЕстьОтличия", Новый ОписаниеТипов("Булево"));