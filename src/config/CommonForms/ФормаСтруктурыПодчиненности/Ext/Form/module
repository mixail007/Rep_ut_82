Перем мДерево, мУжеВСписке;
//Орлов ++
Перем СуммаДопРасходов;
//Орлов --
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура вывода дерева структуры подчиненности документа
Процедура ВывестиДеревоДокументов()
	
	ДеревоДокументов.Строки.Очистить();
	мДерево = ДеревоДокументов;	
	мУжеВСписке.Очистить();
	ВывестиРодительскиеДокументы(ДокументСсылка);	
	ЭлементыФормы.ДеревоДокументов.ТекущаяСтрока = мДерево;
	ВывестиПодчиненныеДокументы(мДерево);
	
КонецПроцедуры

// Процедура выполняет вывод родительских документов
Процедура ВывестиРодительскиеДокументы(ДокументСсылка)
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	СписокРеквизитов = Новый СписокЗначений;
	
	Для Каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
		ТипыРеквизита = Реквизит.Тип.Типы();
		Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
			МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
					
			Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
				 И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				Попытка
					ЗначениеРеквизита = ДокументСсылка[Реквизит.Имя];
				Исключение
					Прервать;
				КонецПопытки;
				ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая() И ТипЗнч(ЗначениеРеквизита) = ТекущийТип 
					 И мУжеВСписке[ЗначениеРеквизита] = Неопределено И СписокРеквизитов.НайтиПоЗначению(ДокументСсылка[Реквизит.Имя]) = Неопределено Тогда
					СписокРеквизитов.Добавить(ДокументСсылка[Реквизит.Имя]);
				КонецЕсли;
			КонецЕсли;			
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		СтрРеквизитов = "";
		
		Попытка
			СодержимоеТЧ = ДокументСсылка[ТЧ.Имя].Выгрузить();
		Исключение
			Прервать;
		КонецПопытки;
		
		Для Каждого Реквизит ИЗ ТЧ.Реквизиты Цикл
			ТипыРеквизита = Реквизит.Тип.Типы();
			Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);				
				Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
					Прервать;
				КонецЕсли;						
			КонецЦикла;
		КонецЦикла;
		
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ ИЗ СодержимоеТЧ.Колонки Цикл
			Для Каждого СтрокаТЧ ИЗ СодержимоеТЧ Цикл
				Попытка
					ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				Исключение
					Продолжить;
				КонецПопытки;
				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения = Неопределено Тогда
					// базовый тип
					Продолжить;
				КонецЕсли;
				
				ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая()
					 И Метаданные.Документы.Содержит(МетаданныеЗначения)
					 И мУжеВСписке[ЗначениеРеквизита] = Неопределено Тогда
					Если СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						СписокРеквизитов.Добавить(ЗначениеРеквизита);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;		
	КонецЦикла;
	
	мУжеВСписке.Вставить(ДокументСсылка, Истина);
	
	Если СписокРеквизитов.Количество() = 1 Тогда
		ВывестиРодительскиеДокументы(СписокРеквизитов[0].Значение);
	ИначеЕсли СписокРеквизитов.Количество() > 1 Тогда
		ВывестиБезРодителей(СписокРеквизитов);		
	КонецЕсли;

	
	СтрокаДерева = мДерево.Строки.Добавить();
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Проведен, #Сумма, #Валюта,#Контрагент, ПометкаУдаления, Представление, """ + МетаданныеДокумента.Имя + """ КАК Метаданные
						   | ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
						   
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
//+++(
	Если МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента КАК СуммаДокумента");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "NULL КАК СуммаДокумента");
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДокумента КАК ВалютаДокумента");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "NULL КАК ВалютаДокумента");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "Контрагент КАК Контрагент");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "NULL КАК Контрагент");
	КонецЕсли;
//+++)
	Выборка  = Запрос.Выполнить().Выбрать();
	ЕСли Выборка.Следующий() Тогда		
		СтрокаДерева.Ссылка= Выборка.Ссылка;
		СтрокаДерева.Проведен = Выборка.Проведен;
		СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
		СтрокаДерева.ДокументПредставление = Выборка.Представление;
		СтрокаДерева.СуммаДокумента  = Выборка.СуммаДокумента;    //+++
		СтрокаДерева.ВалютаДокумента = Выборка.ВалютаДокумента;   //+++
		СтрокаДерева.Контрагент = Выборка.Контрагент;   //+++
		СтрокаДерева.ВидДокумента = Выборка.Метаданные;				
	Иначе
		СтрокаДерева.Ссылка= ДокументСсылка;
		СтрокаДерева.ДокументПредставление = Строка(ДокументСсылка);
	КонецЕсли;
	
	мДерево = СтрокаДерева;
		
КонецПроцедуры

// Процедура осуществляет вывод родительских документов с ограничением по уровню в дереве
Процедура ВывестиБезРодителей(СписокДокументов)
	
	Для Каждого ЭлементСписка Из СписокДокументов Цикл
		МетаданныеДокумента = ЭлементСписка.Значение.Метаданные();
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Проведен, ПометкаУдаления, Представление, """ + МетаданныеДокумента.Имя + """ КАК Метаданные
		| ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", ЭлементСписка.Значение);
		Выборка  = Запрос.Выполнить().Выбрать();
		ЕСли Выборка.Следующий() Тогда		
			Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
				СтрокаДерева = мДерево.Строки.Добавить();
				СтрокаДерева.Ссылка= Выборка.Ссылка;
				СтрокаДерева.Проведен = Выборка.Проведен;
				СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
				СтрокаДерева.ДокументПредставление = Выборка.Представление;
				СтрокаДерева.ВидДокумента = Выборка.Метаданные;			
				СтрокаДерева.ОграничениеПоРодителям = Истина;
				мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;

	мДерево = СтрокаДерева;
	
КонецПроцедуры

// Процедура осуществляет вывод подчиненных документов
Процедура ВывестиПодчиненныеДокументы(СтрокаДерева)
	
	ТекущийДокумент = СтрокаДерева.Ссылка;
	ТипДокумента = ТипЗнч(ТекущийДокумент);
	СтруктураРеквизитов = Новый ТаблицаЗначений;
	СтруктураРеквизитов.Колонки.Добавить("ПутьКДанным");
	СтруктураРеквизитов.Колонки.Добавить("ИмяРеквизита");
	
	Для каждого Док ИЗ Метаданные.Документы Цикл
		Если НЕ ПравоДоступа("Чтение", Док) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Реквизит Из Док.Реквизиты Цикл
			Если Реквизит.Тип.СодержитТип(ТипДокумента) Тогда			
				НовСтр = СтруктураРеквизитов.Добавить();
				НовСтр.ПутьКДанным = Док.Имя;
				НовСтр.ИмяРеквизита = Реквизит.Имя;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТЧ ИЗ Док.ТабличныеЧасти Цикл
			Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипДокумента) Тогда
					НовСтр = СтруктураРеквизитов.Добавить();
					НовСтр.ПутьКДанным = Док.Имя+"."+ТЧ.Имя;
					НовСтр.ИмяРеквизита = Реквизит.Имя;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;		
		
	КонецЦикла;	
	ТекстЗапроса = "";
 	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		Если Найти(КлючИЗначение.ПутьКДанным, ".") = 0 Тогда
		
			ТекстЗапроса = ТекстЗапроса + "
			|Выбрать " + ?(ТекстЗапроса="", "РАЗРЕШЕННЫЕ ", "") + "Ссылка, Представление, Проведен, #Сумма, #Валюта,#Контрагент,
			|ПометкаУдаления, """+ КлючИЗначение.ПутьКДанным +""" КАК ВидДокумента ИЗ Документ."+КлючИЗначение.ПутьКДанным+"
			|ГДЕ "+КлючИЗначение.ИмяРеквизита+"=&ДокументОснование
			|ОБЪЕДИНИТЬ ВСЕ
			|";
				
			//+++(  24.04.2012 КлючИЗначение.ПутьКДанным
			попытка
				МетаданныеДокумента = документы[КлючИЗначение.ПутьКДанным].ПустаяСсылка().метаданные();
				Если МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Сумма", "СуммаДокумента КАК СуммаДокумента");
				Иначе
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Сумма", "NULL КАК СуммаДокумента");
				КонецЕсли;

				Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Валюта", "ВалютаДокумента КАК ВалютаДокумента");
				Иначе
					ТекстЗапроса= СтрЗаменить(ТекстЗапроса, "#Валюта", "NULL КАК ВалютаДокумента");
				КонецЕсли;
				
				Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Контрагент", "Контрагент КАК Контрагент");
				Иначе
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Контрагент", "NULL КАК Контрагент");
				КонецЕсли;
			исключение
					ТекстЗапроса= СтрЗаменить(ТекстЗапроса, "#Сумма", "NULL КАК СуммаДокумента");
					ТекстЗапроса= СтрЗаменить(ТекстЗапроса, "#Валюта", "NULL КАК ВалютаДокумента");
					ТекстЗапроса= СтрЗаменить(ТекстЗапроса, "#Контрагент", "NULL КАК Контрагент");
			КонецПопытки;	
			//+++)

		Иначе
			ПозицияТочки = Найти(КлючИЗначение.ПутьКДанным, ".");
			ТекстЗапроса = ТекстЗапроса + "
			|Выбрать " + ?(ТекстЗапроса="", "РАЗРЕШЕННЫЕ ", "") + "Ссылка, Ссылка.Представление, Ссылка.Проведен, 
			|#Сумма, #Валюта, #Контрагент,
			|Ссылка.ПометкаУдаления, """+ Лев(КлючИЗначение.ПутьКДанным, ПозицияТочки-1) +""" КАК ВидДокумента ИЗ Документ."+КлючИЗначение.ПутьКДанным+"
			|ГДЕ "+КлючИЗначение.ИмяРеквизита+"=&ДокументОснование
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
//+++(  24.04.2012 здесь КлючИЗначение.ПутьКДанным !!!
попытка
		МетаданныеДокумента = документы[Лев(КлючИЗначение.ПутьКДанным, ПозицияТочки-1)].ПустаяСсылка().метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Сумма", "Ссылка.СуммаДокумента КАК СуммаДокумента");
	Иначе
		ТекстЗапроса= СтрЗаменить(ТекстЗапроса, "#Сумма", "NULL КАК СуммаДокумента");
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Валюта", "Ссылка.ВалютаДокумента КАК ВалютаДокумента");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Валюта", "NULL КАК ВалютаДокумента");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Контрагент", "Ссылка.Контрагент КАК Контрагент");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Контрагент", "NULL КАК Контрагент");
	КонецЕсли;
исключение
		ТекстЗапроса= СтрЗаменить(ТекстЗапроса, "#Сумма", "NULL КАК СуммаДокумента");
		ТекстЗапроса= СтрЗаменить(ТекстЗапроса, "#Валюта", "NULL КАК ВалютаДокумента");
		ТекстЗапроса= СтрЗаменить(ТекстЗапроса, "#Контрагент", "NULL КАК Контрагент");
КонецПопытки;	
//+++)
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстЗапроса="" Тогда
		Возврат;
	КонецЕсли;		
	
	ТекстЗапроса = Лев (ТекстЗапроса, СтрДлина(ТекстЗапроса)-15);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументОснование", ТекущийДокумент);
	


	Выборка = Запрос.Выполнить().Выбрать();
		
	
	Пока Выборка.Следующий() Цикл
		Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
			НоваяСтрока = СтрокаДерева.Строки.Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			НоваяСтрока.ДокументПредставление = Выборка.Представление;
			НоваяСтрока.Проведен = Выборка.Проведен;
			НоваяСтрока.ПометкаУдаления = Выборка.ПометкаУдаления;		
			НоваяСтрока.ВидДокумента = Выборка.ВидДокумента;						
			//+++(
			НоваяСтрока.СуммаДокумента = Выборка.СуммаДокумента;
			НоваяСтрока.ВалютаДокумента = Выборка.ВалютаДокумента;
			НоваяСтрока.Контрагент	 = Выборка.Контрагент;
            //+++)
 			мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
			ВывестиПодчиненныеДокументы(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

// Процедура выполняет открытие формы текущего документа
Процедура ОткрытьФормуДокумента()
	Отказ = Ложь;       //Плотников 08.08.16 Ограничение открытия документов для филиалов +++++++++++
	Если ЕстьРеквизитДокумента("Подразделение",ЭлементыФормы.ДеревоДокументов.ТекущиеДанные.Ссылка.Метаданные()) 
		и ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		Если ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение <> ЭлементыФормы.ДеревоДокументов.ТекущиеДанные.Ссылка.Подразделение Тогда
		    Отказ = истина;
		КонецЕсли;    	
	КонецЕсли;
	
	Если не отказ Тогда
	
	    Попытка
	        Форма = ЭлементыФормы.ДеревоДокументов.ТекущиеДанные.Ссылка.ПолучитьФорму();
		    Форма.Открыть();
	    Исключение
		    ЕСли Найти(ОписаниеОшибки(), "недостаточно прав") <> 0 Тогда
			    Предупреждение("У пользователя недостаточно прав на исполнение операции над базой данных");
		    КонецЕсли;
		КонецПопытки;
	Иначе
		 Предупреждение("У пользователя недостаточно прав для открытия документов другого подразделения");
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "Перед открытием формы"
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Если ДокументСсылка = Неопределено ИЛИ ДокументСсылка.Пустая() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ВывестиДеревоДокументов();
	//+++ 05.11.2014 разворачиваем не 1, а последнюю строку
	//ЭлементыФормы.ДеревоДокументов.Развернуть(ДеревоДокументов.Строки[0], Истина);
	ЭлементыФормы.ДеревоДокументов.Развернуть(ДеревоДокументов.Строки[ДеревоДокументов.Строки.Количество()-1], Истина);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура обработки события "При выводе строки" табличного поля "ДеревоДокументов"
Процедура ДеревоДокументовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.ДокументПредставление.ОтображатьКартинку = истина;
	Если ДанныеСтроки.Ссылка = ДокументСсылка Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
		ОформлениеСтроки.ЦветФона = Новый Цвет(230,230,230);
	Иначе
		ОформлениеСтроки.ЦветФона = Новый Цвет();
	КонецЕсли;
	Если ДанныеСтроки.Проведен Тогда
		ОформлениеСтроки.Ячейки.ДокументПредставление.ИндексКартинки = 0;
	ИначеЕСли ДанныеСтроки.ПометкаУдаления Тогда
		ОформлениеСтроки.Ячейки.ДокументПредставление.ИндексКартинки = 1;
	Иначе
		ОформлениеСтроки.Ячейки.ДокументПредставление.ИндексКартинки = 2
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки события "Перед началом изменения" табличного поля "ДеревоДокументов"
Процедура ДеревоДокументовПередНачаломИзменения(Элемент, Отказ)	
	ОткрытьФормуДокумента();
	Отказ = Истина;
КонецПроцедуры


Процедура КоманднаяПанельОткрытьФормуДействие(Кнопка)
	ОткрытьФормуДокумента();
КонецПроцедуры

Процедура КоманднаяПанельПровестиДействие(Кнопка)
	Попытка
		Объект = ЭлементыФормы.ДеревоДокументов.ТекущиеДанные.Ссылка.ПолучитьОбъект();
		Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		ЭлементыФормы.ДеревоДокументов.ТекущиеДанные.Проведен = Истина;
	Исключение
		ЕСли Найти(ОписаниеОшибки(), "недостаточно прав") <> 0 Тогда
			Предупреждение("У пользователя недостаточно прав на исполнение операции над базой данных");
		Иначе
			ТекстОшибки = ОписаниеОшибки();			
			Сообщить(Сред(ТекстОшибки, Найти(ТекстОшибки, "}:")+3), СтатусСообщения.Важное);
			Предупреждение("Операция не выполнена!");
		КонецЕсли;
	КонецПопытки;	
КонецПроцедуры

Процедура КоманднаяПанельОтменаПроведенияДействие(Кнопка)
	Сообщить("Данная операция не поддерживается");
	//Если НЕ ЭлементыФормы.ДеревоДокументов.ТекущиеДанные.Проведен Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Попытка
	//	Объект = ЭлементыФормы.ДеревоДокументов.ТекущиеДанные.Ссылка.ПолучитьОбъект();
	//	Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	ЭлементыФормы.ДеревоДокументов.ТекущиеДанные.Проведен = Ложь;
	//Исключение
	//	ЕСли Найти(ОписаниеОшибки(), "недостаточно прав") <> 0 Тогда
	//		Предупреждение("У пользователя недостаточно прав на исполнение операции над базой данных");
	//	Иначе
	//		ТекстОшибки = ОписаниеОшибки();			
	//		Сообщить(Сред(ТекстОшибки, Найти(ТекстОшибки, "}:")+3), СтатусСообщения.Важное);
	//		Предупреждение("Операция не выполнена!");
	//	КонецЕсли;
	//КонецПопытки;
КонецПроцедуры

Процедура КоманднаяПанельОбновитьДействие(Кнопка)
	ВывестиДеревоДокументов();
	ЭлементыФормы.ДеревоДокументов.Развернуть(ДеревоДокументов.Строки[0], Истина);
КонецПроцедуры

Процедура КоманднаяПанельВывестиДляТекущегоДействие(Кнопка)
	ДокументСсылка = ЭлементыФормы.ДеревоДокументов.ТекущиеДанные.Ссылка;
	ДеревоДокументов.Строки.Очистить();	
	ВывестиДеревоДокументов();
	ЭлементыФормы.ДеревоДокументов.Развернуть(ДеревоДокументов.Строки[0], Истина);
КонецПроцедуры

//Орлов ++

Процедура КоманднаяПанельПоказатьСуммуДопРасходов(Кнопка)
	Если ДеревоДокументов.Строки.Количество() > 0 Тогда 
		СчитатьСуммыДЗ(ДеревоДокументов.Строки);
	КонецЕсли;
	
	Если СуммаДопРасходов > 0 Тогда
		Сообщить("Сумма доп расходов: "+СуммаДопРасходов+" руб.");
	КонецЕсли;
КонецПроцедуры

Процедура СчитатьСуммыДЗ(СтрокиДЗ)
	
	СуммаДопРасходов = 0;
	
	Для Каждого СтрокаДерева Из СтрокиДЗ Цикл
		
		Если ТипЗнч(СтрокаДерева.Ссылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") тогда 
			Если СтрокаДерева.Ссылка.Проведен и СтрокаДерева.Ссылка.ДоговорКонтрагента.Код<>"F3577" и СтрокаДерева.Ссылка.ДоговорКонтрагента.Код<>"F3551" Тогда  //11.07.14 надо исключить эти 2 договора
				СуммаДопРасходов = СуммаДопРасходов + СтрокаДерева.СуммаДокумента;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		СчитатьСуммыДЗ(СтрокаДерева.Строки);
	КонецЕсли;
	
КонецПроцедуры // СчитатьСуммыДЗ()

//Орлов --

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ДеревоДокументов.Колонки.Добавить("Ссылка");
ДеревоДокументов.Колонки.Добавить("Проведен");
ДеревоДокументов.Колонки.Добавить("ПометкаУдаления");
ДеревоДокументов.Колонки.Добавить("ВидДокумента");
ДеревоДокументов.Колонки.Добавить("ОграничениеПоРодителям", Новый ОписаниеТипов("Булево"));
мУжеВСписке = Новый Соответствие;