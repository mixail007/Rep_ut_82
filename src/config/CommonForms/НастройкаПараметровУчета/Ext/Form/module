////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

// Содержит структура с исходными данными (до открытия) формы
Перем мЗначенияИсходные;

// Содержит структура с измененными данными формы
Перем мЗначенияВФорме;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция преобразовывает таблицу значений в хранилище значения
//
// Параметры
//  Шаблоны – таблица значений
//
// Возвращаемое значение:
//   Хранилище значений
//
Функция ПолучитьШаблоныНомеров(Шаблоны)

	ТаблицаСоответствий = Новый Соответствие;

	Для каждого СтрокаШаблонов Из Шаблоны Цикл

		Если ПустаяСтрока(СтрокаШаблонов.ШаблоныТелефонныхНомеров) Тогда
			Продолжить;
		КонецЕсли;

		ТаблицаСоответствий.Вставить(СтрЧислоВхождений(СокрЛП(СтрокаШаблонов.ШаблоныТелефонныхНомеров),"9"),СокрЛП(СтрокаШаблонов.ШаблоныТелефонныхНомеров));

	КонецЦикла;

	Возврат Новый ХранилищеЗначения(ТаблицаСоответствий);

КонецФункции // ПолучитьШаблоныНомеров()

// Процедура преобразовывает хранилище значений в таблицу значений 
//
// Параметры
//  Шаблоны – хранилище значений
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ПолучитьТаблицуШаблоновТелефонов(Шаблоны)

	Если ТипЗнч(Шаблоны) <> Тип("ХранилищеЗначения") Тогда
		Возврат;
	КонецЕсли;

	СтруктураШаблонов = Шаблоны.Получить();

	ШаблоныТелефонов.Очистить();

	Если ТипЗнч(СтруктураШаблонов) = Тип("Соответствие") Тогда

		Для Индекс = 1 По 50 Цикл //думаю, больше 50-ти значных номеров не может быть

			НайденныйШаблон = СтруктураШаблонов.Получить(Индекс);

			Если НайденныйШаблон <> Неопределено Тогда

				СтрокаШаблонов = ШаблоныТелефонов.Добавить();
				СтрокаШаблонов.ШаблоныТелефонныхНомеров = НайденныйШаблон;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедура проверяет возможность редактирования валюты
// регламентированного учета
//
Процедура ПроверкаДоступностиВалютыУчета();

	Если НЕ ПравоДоступа("Изменение", Метаданные.Константы.ВалютаРегламентированногоУчета)
		 ИЛИ НЕ ПравоДоступа("Изменение", Метаданные.Константы.ВалютаУправленческогоУчета)
		 Тогда
		// Если нет прав на изменение хотя бы одной константы - закрываем доступ на все
		ЭлементыФормы.ВалютаРегламентированногоУчета.ТолькоПросмотр = Истина;
		ЭлементыФормы.ВалютаУправленческогоУчета.ТолькоПросмотр     = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ""; 

	Для каждого Док из Метаданные.Документы Цикл

		Запрос.Текст = Запрос.Текст + 
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ." + Док.Имя + ".Ссылка
		|
		|";

	КонецЦикла;

	// Уберем первое "ОБЪЕДИНИТЬ ВСЕ"
	Запрос.Текст  = Сред(Запрос.Текст, СтрДлина("ОБЪЕДИНИТЬ ВСЕ") + 1);

	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДокументы = НЕ РезультатЗапроса.Пустой();
	Исключение
		ЕстьДокументы = Истина;
	КонецПопытки;

	ЭлементыФормы.ВалютаРегламентированногоУчета.ТолькоПросмотр = ЕстьДокументы;
	ЭлементыФормы.ВалютаУправленческогоУчета.ТолькоПросмотр     = ЕстьДокументы;

	Если ЕстьДокументы Тогда
		ЭлементыФормы.ТекстВажнойНадписи.Заголовок = "После ввода документов валюты учета изменять нельзя.";
	Иначе
		ЭлементыФормы.ТекстВажнойНадписи.Заголовок = "Валюты учета можно изменять пока не введены документы.";
	КонецЕсли;

КонецПроцедуры // ПроверкаДоступностиВалютыУчета()

// Процедура заполняет поля , которые хранят свои значения в 
// плане видов характеристик "ТипыШтрихкодов"
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьПрефиксыШтрихкодовEAN13()

	EAN13ПрефиксШтучногоТовара = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13.ПрефиксШтучногоТовара;
	EAN13ПрефиксВесовогоТовара = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13.ПрефиксВесовогоТовара;

КонецПроцедуры // ЗаполнитьПрефиксыШтрихкодовEAN13()

// Процедура сохраняет значения в 
// план видов характеристик "ТипыШтрихкодов"
//
// Параметры:
//  Нет.
//
Процедура ЗаписатьПрефиксыШтрихкодовEAN13()

	Основание = Новый Структура();
	Основание.Вставить("ПрефиксШтучногоТовара", EAN13ПрефиксШтучногоТовара);
	Основание.Вставить("ПрефиксВесовогоТовара", EAN13ПрефиксВесовогоТовара);
	ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13.ПолучитьОбъект().Заполнить(Основание);
	//ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13.ПрефиксВесовогоТовара = EAN13ПрефиксВесовогоТовара;

КонецПроцедуры // ЗаписатьПрефиксыШтрихкодовEAN13()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
// 
Процедура ПриОткрытии()

	ПолучитьТаблицуШаблоновТелефонов(КонстантыНабор.ШаблоныТелефонныхНомеров);

	ПроверкаДоступностиВалютыУчета();

	Этаформа.Модифицированность = Ложь;

	ЗаполнитьПрефиксыШтрихкодовEAN13();
	
	ЭлементыФормы.НадписьПорогВыдачиVIPКарты.Заголовок = "Порог выдачи VIP-карты (" + Константы.ВалютаУправленческогоУчета.Получить() + "):";
	
	Если РольДоступна("ПолныеПрава") Тогда 
		
		ЭлементыФормы.ЧислоДнейУстановкиЗапрета.Доступность = Истина;
		
	Иначе 
		
		ЭлементыФормы.ЧислоДнейУстановкиЗапрета.Доступность = Ложь;
		
	КонецЕсли;
	
	Если (ЭлементыФормы.УрибОбменИзФайла.Значение = Истина) Тогда
    	ЭлементыФормы.УрибПутьКФайлуОбмена.Доступность = Истина;
	Иначе 
		ЭлементыФормы.УрибПутьКФайлуОбмена.Доступность = Ложь;
	КонецЕсли;
	
	Если РольДоступна("ПравоЗавершенияРаботыПользователей") тогда //24.10.2017
		ЭлементыФормы.УбратьЛитыеБезНагрузки.Доступность = истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" формы.
// 
Процедура ПриЗаписи(Отказ)

	ЗаписатьПрефиксыШтрихкодовEAN13();
	ПроверитьПодключениеОбработчикаОжидания();

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
// 
Процедура ПередЗаписью(Отказ)
	
	КонстантыНабор.ШаблоныТелефонныхНомеров = ПолучитьШаблоныНомеров(ШаблоныТелефонов);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "Нажатие" элемента формы "НастройкаШаблоновБыстрогоВводаКонтрагентаИзСобытия".
// 
Процедура НастройкаШаблоновБыстрогоВводаКонтрагентаИзСобытияНажатие(Элемент)

	СписокИменКонстант = Новый СписокЗначений;
	СписокИменКонстант.Добавить("ВидАдресаКонтрагента");
	СписокИменКонстант.Добавить("ВидТелефонаКонтактногоЛица");
	СписокИменКонстант.Добавить("ВидТелефонаКонтрагента");
	СписокИменКонстант.Добавить("ВидЭлектроннойПочтыКонтактногоЛица");
	СписокИменКонстант.Добавить("ВидЭлектроннойПочтыКонтрагента");
	СписокИменКонстант.Добавить("ЮрФизЛицо");
	СписокИменКонстант.Добавить("ОсновнойВидДеятельностиКонтрагента");
	
	Запись = РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.СоздатьМенеджерЗаписи();
	
	Обработка = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
	Обработка.Запись = Запись;
	ФормаНастройки = Обработка.ПолучитьФорму();
	ФормаНастройки.ЗаполнитьНачальныеДанные(КонстантыНабор);

	ФормаНастройки.ЭлементыФормы.НаименованиеКонтрагента.Доступность       = Ложь;
	ФормаНастройки.ЭлементыФормы.НаименованиеКонтрагентаПолное.Доступность = Ложь;
	ФормаНастройки.ЭлементыФормы.ФИОКонтактногоЛица.Доступность            = Ложь;

	ФормаНастройки.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ФормаНастройки.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Зарегистрировать);
	ФормаНастройки.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ФормаНастройки.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.РазделительЗарегистрировать);

	ФормаНастройки.ОткрытьМодально();

	СтруктураПрочихЗначений = Новый Структура;
	Для каждого Реквизит Из Метаданные.РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.Ресурсы Цикл
		Если СписокИменКонстант.НайтиПоЗначению(Реквизит.Имя) <> Неопределено Тогда
			КонстантыНабор[Реквизит.Имя] = Запись[Реквизит.Имя];
		Иначе
			СтруктураПрочихЗначений.Вставить(Реквизит.Имя, Запись[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;

	ХранилищеПрочихЗначений = Новый ХранилищеЗначения(СтруктураПрочихЗначений);
	КонстантыНабор.ЗначенияПоУмолчаниюДляНовогоКонтрагента = ХранилищеПрочихЗначений;

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

Процедура КаталогВнешнихОбработокНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Каталог = Элемент.Значение;
	Диалог.Заголовок = "Укажите каталог...";
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	Элемент.Значение = Диалог.Каталог;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ВыбДирНажатие(Элемент)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок = "Выберите каталог";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Истина;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ЭлементыФормы.УрибПутьКФайлуОбмена.Значение = ДиалогВыбораФайла.Каталог + "\";	
	КонецЕсли;
КонецПроцедуры

Процедура УрибОбменИзФайлаПриИзменении(Элемент)
	Если (Элемент.Значение = Истина) Тогда
		ЭлементыФормы.УрибПутьКФайлуОбмена.Доступность = Истина;
	Иначе 	
		ЭлементыФормы.УрибПутьКФайлуОбмена.Доступность = Ложь;	
	КонецЕсли;
КонецПроцедуры

Процедура ВыбДирЛогНажатие(Элемент)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок = "Выберите каталог";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Истина;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ЭлементыФормы.КаталогЛогированияКассы.Значение = ДиалогВыбораФайла.Каталог + "\";	
	КонецЕсли;	
КонецПроцедуры

Процедура ВыбДирВыгрузкиРеализацийНажатие(Элемент)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок = "Выберите каталог";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Истина;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ЭлементыФормы.КаталогВыгрузкиДокументовРеализации.Значение = ДиалогВыбораФайла.Каталог + "\";	
	КонецЕсли;	
КонецПроцедуры

Процедура ПутьКФайламНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	если Диалог.выбрать() тогда
		путь = Диалог.Каталог;
		Элемент.Значение = Путь;
		ЭтаФорма.Обновить();
	КонецЕсли;	
	
КонецПроцедуры
	